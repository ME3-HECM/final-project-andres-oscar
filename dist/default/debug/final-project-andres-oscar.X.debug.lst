

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 01:21:48 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 21/07/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F67K40 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000000                     
   131                           	psect	idataBANK0
   132   00487E                     __pidataBANK0:
   133                           	callstack 0
   134                           
   135                           ;initializer for _dataFlag
   136   00487E  01                 	db	1
   137   000000                     _TMR0H	set	4052
   138   000000                     _TX4REG	set	3812
   139   000000                     _RC4STAbits	set	3815
   140   000000                     _SP4BRGH	set	3814
   141   000000                     _LATHbits	set	3968
   142   000000                     _LATFbits	set	3966
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _PORTFbits	set	3982
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _ANSELDbits	set	3751
   154   000000                     _SSP2ADD	set	3798
   155   000000                     _SSP2CON1bits	set	3801
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATEbits	set	3965
   158   000000                     _LATGbits	set	3967
   159   000000                     _LATCbits	set	3963
   160   000000                     _LATDbits	set	3964
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RC4REG	set	3811
   164   000000                     _SP4BRGL	set	3813
   165   000000                     _TX4STAbits	set	3816
   166   000000                     _BAUD4CONbits	set	3817
   167   000000                     _SSP2CON2	set	3802
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _PIE0bits	set	3625
   175   000000                     _PIE4bits	set	3629
   176   000000                     _PIR4bits	set	3639
   177   000000                     _RC0PPS	set	3682
   178   000000                     _RC7PPS	set	3689
   179   000000                     _RD5PPS	set	3695
   180   000000                     _RE2PPS	set	3700
   181   000000                     _RD6PPS	set	3696
   182   000000                     _CCP1CONbits	set	4011
   183   000000                     _CCPTMRS0bits	set	4013
   184   000000                     _T2PR	set	4028
   185   000000                     _T2CONbits	set	4029
   186   000000                     _T0CON0bits	set	4053
   187   000000                     _CCP2CONbits	set	4007
   188   000000                     _CCP3CONbits	set	3878
   189   000000                     _ADREFbits	set	3928
   190   000000                     _CCP4CONbits	set	3874
   191   000000                     _TRISHbits	set	3976
   192   000000                     _TRISCbits	set	3971
   193   000000                     _INTCONbits	set	4082
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _ADPCH	set	3935
   196   000000                     _ADRESH	set	3940
   197   000000                     _ADCON0bits	set	3936
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _TMR0L	set	4051
   201   000000                     _T2CLKCONbits	set	4031
   202   000000                     _T2HLTbits	set	4030
   203   000000                     _PIR0bits	set	3635
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_3:
   210                           
   211                           ; BSR set to: 14
   212   000E01  43                 	db	67	;'C'
   213   000E02  61                 	db	97	;'a'
   214   000E03  6C                 	db	108	;'l'
   215   000E04  69                 	db	105	;'i'
   216   000E05  62                 	db	98	;'b'
   217   000E06  72                 	db	114	;'r'
   218   000E07  61                 	db	97	;'a'
   219   000E08  74                 	db	116	;'t'
   220   000E09  69                 	db	105	;'i'
   221   000E0A  6F                 	db	111	;'o'
   222   000E0B  6E                 	db	110	;'n'
   223   000E0C  20                 	db	32
   224   000E0D  73                 	db	115	;'s'
   225   000E0E  74                 	db	116	;'t'
   226   000E0F  61                 	db	97	;'a'
   227   000E10  74                 	db	116	;'t'
   228   000E11  65                 	db	101	;'e'
   229   000E12  20                 	db	32
   230   000E13  3D                 	db	61	;'='
   231   000E14  20                 	db	32
   232   000E15  67                 	db	103	;'g'
   233   000E16  72                 	db	114	;'r'
   234   000E17  65                 	db	101	;'e'
   235   000E18  65                 	db	101	;'e'
   236   000E19  6E                 	db	110	;'n'
   237   000E1A  20                 	db	32
   238   000E1B  0A                 	db	10
   239   000E1C  0D                 	db	13
   240   000E1D  00                 	db	0
   241   000E1E                     STR_9:
   242                           
   243                           ; BSR set to: 14
   244   000E1E  43                 	db	67	;'C'
   245   000E1F  61                 	db	97	;'a'
   246   000E20  6C                 	db	108	;'l'
   247   000E21  69                 	db	105	;'i'
   248   000E22  62                 	db	98	;'b'
   249   000E23  72                 	db	114	;'r'
   250   000E24  61                 	db	97	;'a'
   251   000E25  74                 	db	116	;'t'
   252   000E26  69                 	db	105	;'i'
   253   000E27  6F                 	db	111	;'o'
   254   000E28  6E                 	db	110	;'n'
   255   000E29  20                 	db	32
   256   000E2A  73                 	db	115	;'s'
   257   000E2B  74                 	db	116	;'t'
   258   000E2C  61                 	db	97	;'a'
   259   000E2D  74                 	db	116	;'t'
   260   000E2E  65                 	db	101	;'e'
   261   000E2F  20                 	db	32
   262   000E30  3D                 	db	61	;'='
   263   000E31  20                 	db	32
   264   000E32  20                 	db	32
   265   000E33  61                 	db	97	;'a'
   266   000E34  6D                 	db	109	;'m'
   267   000E35  62                 	db	98	;'b'
   268   000E36  69                 	db	105	;'i'
   269   000E37  65                 	db	101	;'e'
   270   000E38  6E                 	db	110	;'n'
   271   000E39  74                 	db	116	;'t'
   272   000E3A  00                 	db	0
   273   000E3B                     STR_5:
   274                           
   275                           ; BSR set to: 14
   276   000E3B  43                 	db	67	;'C'
   277   000E3C  61                 	db	97	;'a'
   278   000E3D  6C                 	db	108	;'l'
   279   000E3E  69                 	db	105	;'i'
   280   000E3F  62                 	db	98	;'b'
   281   000E40  72                 	db	114	;'r'
   282   000E41  61                 	db	97	;'a'
   283   000E42  74                 	db	116	;'t'
   284   000E43  69                 	db	105	;'i'
   285   000E44  6F                 	db	111	;'o'
   286   000E45  6E                 	db	110	;'n'
   287   000E46  20                 	db	32
   288   000E47  73                 	db	115	;'s'
   289   000E48  74                 	db	116	;'t'
   290   000E49  61                 	db	97	;'a'
   291   000E4A  74                 	db	116	;'t'
   292   000E4B  65                 	db	101	;'e'
   293   000E4C  3D                 	db	61	;'='
   294   000E4D  20                 	db	32
   295   000E4E  62                 	db	98	;'b'
   296   000E4F  6C                 	db	108	;'l'
   297   000E50  75                 	db	117	;'u'
   298   000E51  65                 	db	101	;'e'
   299   000E52  20                 	db	32
   300   000E53  0A                 	db	10
   301   000E54  0D                 	db	13
   302   000E55  00                 	db	0
   303   000E56                     STR_7:
   304                           
   305                           ; BSR set to: 14
   306   000E56  43                 	db	67	;'C'
   307   000E57  61                 	db	97	;'a'
   308   000E58  6C                 	db	108	;'l'
   309   000E59  69                 	db	105	;'i'
   310   000E5A  62                 	db	98	;'b'
   311   000E5B  72                 	db	114	;'r'
   312   000E5C  61                 	db	97	;'a'
   313   000E5D  74                 	db	116	;'t'
   314   000E5E  69                 	db	105	;'i'
   315   000E5F  6F                 	db	111	;'o'
   316   000E60  6E                 	db	110	;'n'
   317   000E61  20                 	db	32
   318   000E62  73                 	db	115	;'s'
   319   000E63  74                 	db	116	;'t'
   320   000E64  61                 	db	97	;'a'
   321   000E65  74                 	db	116	;'t'
   322   000E66  65                 	db	101	;'e'
   323   000E67  20                 	db	32
   324   000E68  3D                 	db	61	;'='
   325   000E69  20                 	db	32
   326   000E6A  20                 	db	32
   327   000E6B  77                 	db	119	;'w'
   328   000E6C  68                 	db	104	;'h'
   329   000E6D  69                 	db	105	;'i'
   330   000E6E  74                 	db	116	;'t'
   331   000E6F  65                 	db	101	;'e'
   332   000E70  00                 	db	0
   333   000E71                     STR_11:
   334                           
   335                           ; BSR set to: 14
   336   000E71  43                 	db	67	;'C'
   337   000E72  41                 	db	65	;'A'
   338   000E73  4C                 	db	76	;'L'
   339   000E74  49                 	db	73	;'I'
   340   000E75  42                 	db	66	;'B'
   341   000E76  52                 	db	82	;'R'
   342   000E77  41                 	db	65	;'A'
   343   000E78  54                 	db	84	;'T'
   344   000E79  49                 	db	73	;'I'
   345   000E7A  4F                 	db	79	;'O'
   346   000E7B  4E                 	db	78	;'N'
   347   000E7C  20                 	db	32
   348   000E7D  43                 	db	67	;'C'
   349   000E7E  4F                 	db	79	;'O'
   350   000E7F  4D                 	db	77	;'M'
   351   000E80  50                 	db	80	;'P'
   352   000E81  4C                 	db	76	;'L'
   353   000E82  45                 	db	69	;'E'
   354   000E83  54                 	db	84	;'T'
   355   000E84  45                 	db	69	;'E'
   356   000E85  44                 	db	68	;'D'
   357   000E86  20                 	db	32
   358   000E87  0A                 	db	10
   359   000E88  0D                 	db	13
   360   000E89  00                 	db	0
   361   000E8A                     STR_1:
   362                           
   363                           ; BSR set to: 14
   364   000E8A  43                 	db	67	;'C'
   365   000E8B  61                 	db	97	;'a'
   366   000E8C  6C                 	db	108	;'l'
   367   000E8D  69                 	db	105	;'i'
   368   000E8E  62                 	db	98	;'b'
   369   000E8F  72                 	db	114	;'r'
   370   000E90  61                 	db	97	;'a'
   371   000E91  74                 	db	116	;'t'
   372   000E92  69                 	db	105	;'i'
   373   000E93  6F                 	db	111	;'o'
   374   000E94  6E                 	db	110	;'n'
   375   000E95  20                 	db	32
   376   000E96  73                 	db	115	;'s'
   377   000E97  74                 	db	116	;'t'
   378   000E98  61                 	db	97	;'a'
   379   000E99  74                 	db	116	;'t'
   380   000E9A  65                 	db	101	;'e'
   381   000E9B  20                 	db	32
   382   000E9C  3D                 	db	61	;'='
   383   000E9D  20                 	db	32
   384   000E9E  72                 	db	114	;'r'
   385   000E9F  65                 	db	101	;'e'
   386   000EA0  64                 	db	100	;'d'
   387   000EA1  00                 	db	0
   388   000EA2                     
   389                           ; BSR set to: 14
   390   000EA2  56                 	db	86	;'V'
   391   000EA3  6F                 	db	111	;'o'
   392   000EA4  6C                 	db	108	;'l'
   393   000EA5  74                 	db	116	;'t'
   394   000EA6  61                 	db	97	;'a'
   395   000EA7  67                 	db	103	;'g'
   396   000EA8  65                 	db	101	;'e'
   397   000EA9  20                 	db	32
   398   000EAA  3D                 	db	61	;'='
   399   000EAB  20                 	db	32
   400   000EAC  25                 	db	37
   401   000EAD  64                 	db	100	;'d'
   402   000EAE  2E                 	db	46
   403   000EAF  25                 	db	37
   404   000EB0  30                 	db	48	;'0'
   405   000EB1  32                 	db	50	;'2'
   406   000EB2  64                 	db	100	;'d'
   407   000EB3  2C                 	db	44
   408   000EB4  20                 	db	32
   409   000EB5  20                 	db	32
   410   000EB6  00                 	db	0
   411   000EB7                     STR_14:
   412                           
   413                           ; BSR set to: 14
   414   000EB7  68                 	db	104	;'h'
   415   000EB8  75                 	db	117	;'u'
   416   000EB9  65                 	db	101	;'e'
   417   000EBA  3D                 	db	61	;'='
   418   000EBB  25                 	db	37
   419   000EBC  30                 	db	48	;'0'
   420   000EBD  33                 	db	51	;'3'
   421   000EBE  64                 	db	100	;'d'
   422   000EBF  2C                 	db	44
   423   000EC0  20                 	db	32
   424   000EC1  20                 	db	32
   425   000EC2  00                 	db	0
   426   000EC3                     STR_2:
   427                           
   428                           ; BSR set to: 14
   429   000EC3  2E                 	db	46
   430   000EC4  00                 	db	0
   431   000EC5  00                 	db	0	; dummy byte at the end
   432   000000                     
   433                           ; #config settings
   434                           
   435                           	psect	cinit
   436   004190                     __pcinit:
   437                           	callstack 0
   438   004190                     start_initialization:
   439                           	callstack 0
   440   004190                     __initialization:
   441                           	callstack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (1 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445   004190  0E7E               	movlw	low __pidataBANK0
   446   004192  6EF6               	movwf	tblptrl,c
   447   004194  0E48               	movlw	high __pidataBANK0
   448   004196  6EF7               	movwf	tblptrh,c
   449   004198  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450   00419A  6EF8               	movwf	tblptru,c
   451   00419C  0009               	tblrd		*+	;fetch initializer
   452   00419E  CFF5 F0F7          	movff	tablat,__pdataBANK0
   453                           
   454                           ; Clear objects allocated to BANK2 (100 bytes)
   455   0041A2  EE02  F000         	lfsr	0,__pbssBANK2
   456   0041A6  0E64               	movlw	100
   457   0041A8                     clear_0:
   458   0041A8  6AEE               	clrf	postinc0,c
   459   0041AA  06E8               	decf	wreg,f,c
   460   0041AC  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK1 (162 bytes)
   463   0041AE  EE01  F000         	lfsr	0,__pbssBANK1
   464   0041B2  0EA2               	movlw	162
   465   0041B4                     clear_1:
   466   0041B4  6AEE               	clrf	postinc0,c
   467   0041B6  06E8               	decf	wreg,f,c
   468   0041B8  E1FD               	bnz	clear_1
   469                           
   470                           ; Clear objects allocated to BANK0 (75 bytes)
   471   0041BA  EE00  F0AC         	lfsr	0,__pbssBANK0
   472   0041BE  0E4B               	movlw	75
   473   0041C0                     clear_2:
   474   0041C0  6AEE               	clrf	postinc0,c
   475   0041C2  06E8               	decf	wreg,f,c
   476   0041C4  E1FD               	bnz	clear_2
   477                           
   478                           ; Clear objects allocated to COMRAM (3 bytes)
   479   0041C6  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   480   0041C8  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   481   0041CA  6A57               	clrf	__pbssCOMRAM& (0+255),c
   482   0041CC                     end_of_initialization:
   483                           	callstack 0
   484   0041CC                     __end_of__initialization:
   485                           	callstack 0
   486   0041CC  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   487   0041CE  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   488   0041D0  0100               	movlb	0
   489   0041D2  EF6E  F011         	goto	_main	;jump to C main() function
   490                           
   491                           	psect	bssCOMRAM
   492   000057                     __pbssCOMRAM:
   493                           	callstack 0
   494   000057                     _TxBufReadCnt:
   495                           	callstack 0
   496   000057                     	ds	1
   497   000058                     _TxBufWriteCnt:
   498                           	callstack 0
   499   000058                     	ds	1
   500   000059                     _RxBufWriteCnt:
   501                           	callstack 0
   502   000059                     	ds	1
   503                           
   504                           	psect	bssBANK0
   505   0000AC                     __pbssBANK0:
   506                           	callstack 0
   507   0000AC                     _EUSART4RXbuf:
   508                           	callstack 0
   509   0000AC                     	ds	20
   510   0000C0                     _hue:
   511                           	callstack 0
   512   0000C0                     	ds	10
   513   0000CA                     _width:
   514                           	callstack 0
   515   0000CA                     	ds	2
   516   0000CC                     _prec:
   517                           	callstack 0
   518   0000CC                     	ds	2
   519   0000CE                     _flags:
   520                           	callstack 0
   521   0000CE                     	ds	1
   522   0000CF                     _readingIndex:
   523                           	callstack 0
   524   0000CF                     	ds	1
   525   0000D0                     _RxBufReadCnt:
   526                           	callstack 0
   527   0000D0                     	ds	1
   528   0000D1                     _colorCurrent:
   529                           	callstack 0
   530   0000D1                     	ds	10
   531   0000DB                     _colorCalibration:
   532                           	callstack 0
   533   0000DB                     	ds	10
   534   0000E5                     _motorR:
   535                           	callstack 0
   536   0000E5                     	ds	9
   537   0000EE                     _motorL:
   538                           	callstack 0
   539   0000EE                     	ds	9
   540                           
   541                           	psect	dataBANK0
   542   0000F7                     __pdataBANK0:
   543                           	callstack 0
   544   0000F7                     _dataFlag:
   545                           	callstack 0
   546   0000F7                     	ds	1
   547                           
   548                           	psect	bssBANK1
   549   000100                     __pbssBANK1:
   550                           	callstack 0
   551   000100                     _EUSART4TXbuf:
   552                           	callstack 0
   553   000100                     	ds	60
   554   00013C                     _action:
   555                           	callstack 0
   556   00013C                     	ds	50
   557   00016E                     _ldrReadings:
   558                           	callstack 0
   559   00016E                     	ds	20
   560   000182                     _dbuf:
   561                           	callstack 0
   562   000182                     	ds	32
   563                           
   564                           	psect	bssBANK2
   565   000200                     __pbssBANK2:
   566                           	callstack 0
   567   000200                     _time:
   568                           	callstack 0
   569   000200                     	ds	100
   570                           
   571                           	psect	cstackBANK0
   572   000060                     __pcstackBANK0:
   573                           	callstack 0
   574   000060                     convert_rgb2hue@redcurrent:
   575                           	callstack 0
   576   000060                     calibration_routine@cal_state:
   577                           	callstack 0
   578   000060                     send2USART@hue_char:
   579                           	callstack 0
   580                           
   581                           ; 50 bytes @ 0x0
   582   000060                     	ds	4
   583   000064                     convert_rgb2hue@redmax:
   584                           	callstack 0
   585                           
   586                           ; 4 bytes @ 0x4
   587   000064                     	ds	4
   588   000068                     convert_rgb2hue@greencurrent:
   589                           	callstack 0
   590                           
   591                           ; 4 bytes @ 0x8
   592   000068                     	ds	4
   593   00006C                     convert_rgb2hue@greenmax:
   594                           	callstack 0
   595                           
   596                           ; 4 bytes @ 0xC
   597   00006C                     	ds	4
   598   000070                     convert_rgb2hue@bluecurrent:
   599                           	callstack 0
   600                           
   601                           ; 4 bytes @ 0x10
   602   000070                     	ds	4
   603   000074                     convert_rgb2hue@bluemax:
   604                           	callstack 0
   605                           
   606                           ; 4 bytes @ 0x14
   607   000074                     	ds	4
   608   000078                     convert_rgb2hue@clearcurrent:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0x18
   612   000078                     	ds	4
   613   00007C                     convert_rgb2hue@clearmax:
   614                           	callstack 0
   615                           
   616                           ; 4 bytes @ 0x1C
   617   00007C                     	ds	4
   618   000080                     _convert_rgb2hue$433:
   619                           	callstack 0
   620                           
   621                           ; 4 bytes @ 0x20
   622   000080                     	ds	4
   623   000084                     _convert_rgb2hue$434:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x24
   627   000084                     	ds	4
   628   000088                     _convert_rgb2hue$435:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x28
   632   000088                     	ds	4
   633   00008C                     _convert_rgb2hue$436:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x2C
   637   00008C                     	ds	4
   638   000090                     convert_rgb2hue@min:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x30
   642   000090                     	ds	4
   643   000094                     convert_rgb2hue@diff:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x34
   647   000094                     	ds	4
   648   000098                     convert_rgb2hue@max:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x38
   652   000098                     	ds	4
   653   00009C                     convert_rgb2hue@hue:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x3C
   657   00009C                     	ds	4
   658   0000A0                     convert_rgb2hue@r:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x40
   662   0000A0                     	ds	4
   663   0000A4                     convert_rgb2hue@g:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x44
   667   0000A4                     	ds	4
   668   0000A8                     convert_rgb2hue@b:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x48
   672   0000A8                     	ds	4
   673                           
   674                           	psect	cstackCOMRAM
   675   000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677   000001                     ??_LowISR:
   678   000001                     
   679                           ; 1 bytes @ 0x0
   680   000001                     	ds	1
   681   000002                     ??_I2C_2_Master_Idle:
   682   000002                     ?___wmul:
   683                           	callstack 0
   684   000002                     ?___awdiv:
   685                           	callstack 0
   686   000002                     ?___awmod:
   687                           	callstack 0
   688   000002                     ?___fladd:
   689                           	callstack 0
   690   000002                     ?___lmul:
   691                           	callstack 0
   692   000002                     ?___xxtofl:
   693                           	callstack 0
   694   000002                     sendCharSerial4@charToSend:
   695                           	callstack 0
   696   000002                     initDCmotorsPWM@PWMperiod:
   697                           	callstack 0
   698   000002                     logAction@newTime:
   699                           	callstack 0
   700   000002                     customDelayMs@milliseconds:
   701                           	callstack 0
   702   000002                     ___wmul@multiplier:
   703                           	callstack 0
   704   000002                     ___awdiv@dividend:
   705                           	callstack 0
   706   000002                     ___awmod@dividend:
   707                           	callstack 0
   708   000002                     fputc@c:
   709                           	callstack 0
   710   000002                     ___lmul@multiplier:
   711                           	callstack 0
   712   000002                     ___fleq@ff1:
   713                           	callstack 0
   714   000002                     ___flge@ff1:
   715                           	callstack 0
   716   000002                     ___fladd@b:
   717                           	callstack 0
   718   000002                     ___xxtofl@val:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0x1
   722   000002                     	ds	1
   723   000003                     ??_I2C_2_Master_Read:
   724   000003                     I2C_2_Master_Write@data_byte:
   725                           	callstack 0
   726   000003                     sendStringSerial4@string:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x2
   730   000003                     	ds	1
   731   000004                     ??_customDelayMs:
   732   000004                     color_writetoaddr@value:
   733                           	callstack 0
   734   000004                     I2C_2_Master_Read@ack:
   735                           	callstack 0
   736   000004                     fputc@fp:
   737                           	callstack 0
   738   000004                     logAction@path_step:
   739                           	callstack 0
   740   000004                     ___wmul@multiplicand:
   741                           	callstack 0
   742   000004                     ___awdiv@divisor:
   743                           	callstack 0
   744   000004                     ___awmod@divisor:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x3
   748   000004                     	ds	1
   749   000005                     ??_fputc:
   750   000005                     color_writetoaddr@address:
   751                           	callstack 0
   752   000005                     I2C_2_Master_Read@tmp:
   753                           	callstack 0
   754   000005                     customDelayMs@i:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x4
   758   000005                     	ds	1
   759   000006                     ??_color_click_init:
   760   000006                     ??___xxtofl:
   761   000006                     ?_color_read_Red:
   762                           	callstack 0
   763   000006                     ?_color_read_Green:
   764                           	callstack 0
   765   000006                     ?_color_read_Blue:
   766                           	callstack 0
   767   000006                     ?_color_read_Clear:
   768                           	callstack 0
   769   000006                     logAction@newAction:
   770                           	callstack 0
   771   000006                     ___awdiv@counter:
   772                           	callstack 0
   773   000006                     ___awmod@counter:
   774                           	callstack 0
   775   000006                     ___wmul@product:
   776                           	callstack 0
   777   000006                     ___lmul@multiplicand:
   778                           	callstack 0
   779   000006                     ___fleq@ff2:
   780                           	callstack 0
   781   000006                     ___flge@ff2:
   782                           	callstack 0
   783   000006                     ___fladd@a:
   784                           	callstack 0
   785                           
   786                           ; 4 bytes @ 0x5
   787   000006                     	ds	1
   788   000007                     ?_get16bitTMR0val:
   789                           	callstack 0
   790   000007                     ___awdiv@sign:
   791                           	callstack 0
   792   000007                     ___awmod@sign:
   793                           	callstack 0
   794   000007                     get16bitTMR0val@path_step:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x6
   798   000007                     	ds	1
   799   000008                     ??_color_read_Red:
   800   000008                     ??_color_read_Green:
   801   000008                     ??_color_read_Blue:
   802   000008                     ??_color_read_Clear:
   803   000008                     ?_abs:
   804                           	callstack 0
   805   000008                     ?___lwdiv:
   806                           	callstack 0
   807   000008                     ?_read_prec_or_width:
   808                           	callstack 0
   809   000008                     read_prec_or_width@fmt:
   810                           	callstack 0
   811   000008                     ___awdiv@quotient:
   812                           	callstack 0
   813   000008                     ___lwdiv@dividend:
   814                           	callstack 0
   815   000008                     abs@a:
   816                           	callstack 0
   817                           
   818                           ; 2 bytes @ 0x7
   819   000008                     	ds	1
   820   000009                     ??_get16bitTMR0val:
   821   000009                     read_prec_or_width@ap:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x8
   825   000009                     	ds	1
   826   00000A                     ??___fladd:
   827   00000A                     ??_abs:
   828   00000A                     ??___fleq:
   829   00000A                     ??___flge:
   830   00000A                     ___xxtofl@sign:
   831                           	callstack 0
   832   00000A                     read_prec_or_width@c:
   833                           	callstack 0
   834   00000A                     ___lwdiv@divisor:
   835                           	callstack 0
   836   00000A                     fputs@s:
   837                           	callstack 0
   838   00000A                     ___lmul@product:
   839                           	callstack 0
   840                           
   841                           ; 4 bytes @ 0x9
   842   00000A                     	ds	1
   843   00000B                     ___xxtofl@exp:
   844                           	callstack 0
   845   00000B                     color_read_Red@tmp:
   846                           	callstack 0
   847   00000B                     color_read_Green@tmp:
   848                           	callstack 0
   849   00000B                     color_read_Blue@tmp:
   850                           	callstack 0
   851   00000B                     color_read_Clear@tmp:
   852                           	callstack 0
   853   00000B                     read_prec_or_width@n:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0xA
   857   00000B                     	ds	1
   858   00000C                     ___lwdiv@counter:
   859                           	callstack 0
   860   00000C                     fputs@fp:
   861                           	callstack 0
   862   00000C                     ___xxtofl@arg:
   863                           	callstack 0
   864                           
   865                           ; 4 bytes @ 0xB
   866   00000C                     	ds	1
   867   00000D                     fputs@c:
   868                           	callstack 0
   869   00000D                     get16bitTMR0val@combined_value:
   870                           	callstack 0
   871   00000D                     ___lwdiv@quotient:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0xC
   875   00000D                     	ds	1
   876   00000E                     ?___aldiv:
   877                           	callstack 0
   878   00000E                     ___fladd@signs:
   879                           	callstack 0
   880   00000E                     fputs@i:
   881                           	callstack 0
   882   00000E                     ___aldiv@dividend:
   883                           	callstack 0
   884                           
   885                           ; 4 bytes @ 0xD
   886   00000E                     	ds	1
   887   00000F                     setMotorPWM@m:
   888                           	callstack 0
   889   00000F                     ___fladd@aexp:
   890                           	callstack 0
   891                           
   892                           ; 1 bytes @ 0xE
   893   00000F                     	ds	1
   894   000010                     ??_setMotorPWM:
   895   000010                     ?___flmul:
   896                           	callstack 0
   897   000010                     ___fladd@bexp:
   898                           	callstack 0
   899   000010                     pad@fp:
   900                           	callstack 0
   901   000010                     ___flmul@b:
   902                           	callstack 0
   903                           
   904                           ; 4 bytes @ 0xF
   905   000010                     	ds	1
   906   000011                     ___fladd@grs:
   907                           	callstack 0
   908   000011                     pad@buf:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x10
   912   000011                     	ds	1
   913   000012                     ?___flsub:
   914                           	callstack 0
   915   000012                     setMotorPWM@posDuty:
   916                           	callstack 0
   917   000012                     ___aldiv@divisor:
   918                           	callstack 0
   919   000012                     ___flsub@b:
   920                           	callstack 0
   921                           
   922                           ; 4 bytes @ 0x11
   923   000012                     	ds	1
   924   000013                     setMotorPWM@negDuty:
   925                           	callstack 0
   926   000013                     pad@p:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x12
   930   000013                     	ds	1
   931   000014                     stop@mL:
   932                           	callstack 0
   933   000014                     turnLeft@mL:
   934                           	callstack 0
   935   000014                     turnRight@mL:
   936                           	callstack 0
   937   000014                     fullSpeedBack@mL:
   938                           	callstack 0
   939   000014                     ___flmul@a:
   940                           	callstack 0
   941                           
   942                           ; 4 bytes @ 0x13
   943   000014                     	ds	1
   944   000015                     ??_pad:
   945   000015                     stop@mR:
   946                           	callstack 0
   947   000015                     turnLeft@mR:
   948                           	callstack 0
   949   000015                     turnRight@mR:
   950                           	callstack 0
   951   000015                     fullSpeedBack@mR:
   952                           	callstack 0
   953                           
   954                           ; 1 bytes @ 0x14
   955   000015                     	ds	1
   956   000016                     ??_stop:
   957   000016                     ??_turnLeft:
   958   000016                     ??_turnRight:
   959   000016                     ??_fullSpeedBack:
   960   000016                     ___aldiv@counter:
   961                           	callstack 0
   962   000016                     pad@i:
   963                           	callstack 0
   964   000016                     ___flsub@a:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x15
   968   000016                     	ds	1
   969   000017                     ___aldiv@sign:
   970                           	callstack 0
   971   000017                     turnLeft@i:
   972                           	callstack 0
   973   000017                     turnRight@i:
   974                           	callstack 0
   975   000017                     fullSpeedBack@power:
   976                           	callstack 0
   977                           
   978                           ; 2 bytes @ 0x16
   979   000017                     	ds	1
   980   000018                     ??___flmul:
   981   000018                     dtoa@fp:
   982                           	callstack 0
   983   000018                     ___aldiv@quotient:
   984                           	callstack 0
   985                           
   986                           ; 4 bytes @ 0x17
   987   000018                     	ds	1
   988   000019                     right90@mL:
   989                           	callstack 0
   990   000019                     left90@mL:
   991                           	callstack 0
   992   000019                     turn180@mL:
   993                           	callstack 0
   994   000019                     right135@mL:
   995                           	callstack 0
   996   000019                     left135@mL:
   997                           	callstack 0
   998   000019                     backHalf@mL:
   999                           	callstack 0
  1000   000019                     backOneAndHalf@mL:
  1001                           	callstack 0
  1002   000019                     dtoa@d:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x18
  1006   000019                     	ds	1
  1007   00001A                     ?___fldiv:
  1008                           	callstack 0
  1009   00001A                     right90@mR:
  1010                           	callstack 0
  1011   00001A                     left90@mR:
  1012                           	callstack 0
  1013   00001A                     turn180@mR:
  1014                           	callstack 0
  1015   00001A                     right135@mR:
  1016                           	callstack 0
  1017   00001A                     left135@mR:
  1018                           	callstack 0
  1019   00001A                     backHalf@mR:
  1020                           	callstack 0
  1021   00001A                     backOneAndHalf@mR:
  1022                           	callstack 0
  1023   00001A                     ___fldiv@b:
  1024                           	callstack 0
  1025                           
  1026                           ; 4 bytes @ 0x19
  1027   00001A                     	ds	1
  1028   00001B                     ??_right90:
  1029   00001B                     ??_left90:
  1030   00001B                     ??_turn180:
  1031   00001B                     ??_right135:
  1032   00001B                     ??_left135:
  1033   00001B                     ??_backHalf:
  1034   00001B                     ??_backOneAndHalf:
  1035   00001B                     _dtoa$3088:
  1036                           	callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x1A
  1039   00001B                     	ds	1
  1040   00001C                     ___flmul@sign:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x1B
  1044   00001C                     	ds	1
  1045   00001D                     moveRed@mL:
  1046                           	callstack 0
  1047   00001D                     moveGreen@mL:
  1048                           	callstack 0
  1049   00001D                     moveBlue@mL:
  1050                           	callstack 0
  1051   00001D                     moveYellow@mL:
  1052                           	callstack 0
  1053   00001D                     movePink@mL:
  1054                           	callstack 0
  1055   00001D                     moveOrange@mL:
  1056                           	callstack 0
  1057   00001D                     moveLightBlue@mL:
  1058                           	callstack 0
  1059   00001D                     moveWhite@mL:
  1060                           	callstack 0
  1061   00001D                     reverseTurn@mL:
  1062                           	callstack 0
  1063   00001D                     ___flmul@aexp:
  1064                           	callstack 0
  1065   00001D                     dtoa@p:
  1066                           	callstack 0
  1067                           
  1068                           ; 1 bytes @ 0x1C
  1069   00001D                     	ds	1
  1070   00001E                     moveRed@mR:
  1071                           	callstack 0
  1072   00001E                     moveGreen@mR:
  1073                           	callstack 0
  1074   00001E                     moveBlue@mR:
  1075                           	callstack 0
  1076   00001E                     moveYellow@mR:
  1077                           	callstack 0
  1078   00001E                     movePink@mR:
  1079                           	callstack 0
  1080   00001E                     moveOrange@mR:
  1081                           	callstack 0
  1082   00001E                     moveLightBlue@mR:
  1083                           	callstack 0
  1084   00001E                     moveWhite@mR:
  1085                           	callstack 0
  1086   00001E                     reverseTurn@mR:
  1087                           	callstack 0
  1088   00001E                     dtoa@w:
  1089                           	callstack 0
  1090   00001E                     ___fldiv@a:
  1091                           	callstack 0
  1092   00001E                     ___flmul@grs:
  1093                           	callstack 0
  1094                           
  1095                           ; 4 bytes @ 0x1D
  1096   00001E                     	ds	1
  1097   00001F                     ??_moveRed:
  1098   00001F                     ??_moveGreen:
  1099   00001F                     ??_moveBlue:
  1100   00001F                     ??_moveLightBlue:
  1101   00001F                     ??_moveYellow:
  1102   00001F                     ??_moveOrange:
  1103   00001F                     ??_movePink:
  1104   00001F                     ??_moveWhite:
  1105   00001F                     reverseTurn@actionStep:
  1106                           	callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x1E
  1109   00001F                     	ds	1
  1110   000020                     ??_reverseTurn:
  1111   000020                     dtoa@s:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x1F
  1115   000020                     	ds	1
  1116   000021                     ?_decision:
  1117                           	callstack 0
  1118   000021                     decision@hue:
  1119                           	callstack 0
  1120   000021                     dtoa@i:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x20
  1124   000021                     	ds	1
  1125   000022                     ??___fldiv:
  1126   000022                     ___flmul@bexp:
  1127                           	callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x21
  1130   000022                     	ds	1
  1131   000023                     vfpfcnvrt@fp:
  1132                           	callstack 0
  1133   000023                     decision@path_step:
  1134                           	callstack 0
  1135   000023                     ___flmul@prod:
  1136                           	callstack 0
  1137                           
  1138                           ; 4 bytes @ 0x22
  1139   000023                     	ds	1
  1140   000024                     vfpfcnvrt@fmt:
  1141                           	callstack 0
  1142                           
  1143                           ; 1 bytes @ 0x23
  1144   000024                     	ds	1
  1145   000025                     vfpfcnvrt@ap:
  1146                           	callstack 0
  1147                           
  1148                           ; 1 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_vfpfcnvrt:
  1151   000026                     ___fldiv@rem:
  1152                           	callstack 0
  1153                           
  1154                           ; 4 bytes @ 0x25
  1155   000026                     	ds	1
  1156   000027                     ___flmul@temp:
  1157                           	callstack 0
  1158                           
  1159                           ; 2 bytes @ 0x26
  1160   000027                     	ds	1
  1161   000028                     vfpfcnvrt@convarg:
  1162                           	callstack 0
  1163                           
  1164                           ; 4 bytes @ 0x27
  1165   000028                     	ds	1
  1166   000029                     ?___fltol:
  1167                           	callstack 0
  1168   000029                     ___fltol@f1:
  1169                           	callstack 0
  1170                           
  1171                           ; 4 bytes @ 0x28
  1172   000029                     	ds	1
  1173   00002A                     ___fldiv@sign:
  1174                           	callstack 0
  1175                           
  1176                           ; 1 bytes @ 0x29
  1177   00002A                     	ds	1
  1178   00002B                     ___fldiv@new_exp:
  1179                           	callstack 0
  1180                           
  1181                           ; 2 bytes @ 0x2A
  1182   00002B                     	ds	1
  1183   00002C                     vfpfcnvrt@done:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x2B
  1187   00002C                     	ds	1
  1188   00002D                     ??___fltol:
  1189   00002D                     vfpfcnvrt@cp:
  1190                           	callstack 0
  1191   00002D                     ___fldiv@grs:
  1192                           	callstack 0
  1193                           
  1194                           ; 4 bytes @ 0x2C
  1195   00002D                     	ds	1
  1196   00002E                     ?_vfprintf:
  1197                           	callstack 0
  1198   00002E                     vfprintf@fp:
  1199                           	callstack 0
  1200                           
  1201                           ; 1 bytes @ 0x2D
  1202   00002E                     	ds	1
  1203   00002F                     vfprintf@fmt:
  1204                           	callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x2E
  1207   00002F                     	ds	1
  1208   000030                     vfprintf@ap:
  1209                           	callstack 0
  1210                           
  1211                           ; 1 bytes @ 0x2F
  1212   000030                     	ds	1
  1213   000031                     ___fltol@sign1:
  1214                           	callstack 0
  1215   000031                     ___fldiv@bexp:
  1216                           	callstack 0
  1217   000031                     vfprintf@cfmt:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x30
  1221   000031                     	ds	1
  1222   000032                     ?_sprintf:
  1223                           	callstack 0
  1224   000032                     ___fltol@exp1:
  1225                           	callstack 0
  1226   000032                     ___fldiv@aexp:
  1227                           	callstack 0
  1228   000032                     sprintf@s:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x31
  1232   000032                     	ds	1
  1233   000033                     ?_convert_rgb2hue:
  1234                           	callstack 0
  1235   000033                     convert_rgb2hue@cMax:
  1236                           	callstack 0
  1237   000033                     fullSpeedAhead@mL:
  1238                           	callstack 0
  1239   000033                     sprintf@fmt:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x32
  1243   000033                     	ds	1
  1244   000034                     convert_rgb2hue@cCurr:
  1245                           	callstack 0
  1246   000034                     fullSpeedAhead@mR:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x33
  1250   000034                     	ds	1
  1251   000035                     ??_convert_rgb2hue:
  1252   000035                     ??_fullSpeedAhead:
  1253                           
  1254                           ; 1 bytes @ 0x34
  1255   000035                     	ds	1
  1256   000036                     fullSpeedAhead@power:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x35
  1260   000036                     	ds	1
  1261   000037                     ?_reading_hue:
  1262                           	callstack 0
  1263   000037                     reading_hue@cCurr:
  1264                           	callstack 0
  1265                           
  1266                           ; 1 bytes @ 0x36
  1267   000037                     	ds	1
  1268   000038                     reverseStraight@mL:
  1269                           	callstack 0
  1270   000038                     sprintf@ap:
  1271                           	callstack 0
  1272                           
  1273                           ; 1 bytes @ 0x37
  1274   000038                     	ds	1
  1275   000039                     ??_reading_hue:
  1276   000039                     reverseStraight@mR:
  1277                           	callstack 0
  1278   000039                     sprintf@f:
  1279                           	callstack 0
  1280                           
  1281                           ; 12 bytes @ 0x38
  1282   000039                     	ds	1
  1283   00003A                     reverseStraight@time_ms:
  1284                           	callstack 0
  1285                           
  1286                           ; 4 bytes @ 0x39
  1287   00003A                     	ds	1
  1288   00003B                     reading_hue@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x3A
  1292   00003B                     	ds	3
  1293   00003E                     ??_reverseStraight:
  1294                           
  1295                           ; 1 bytes @ 0x3D
  1296   00003E                     	ds	2
  1297   000040                     reverseStraight@delayMs:
  1298                           	callstack 0
  1299                           
  1300                           ; 2 bytes @ 0x3F
  1301   000040                     	ds	2
  1302   000042                     returnHome@mL:
  1303                           	callstack 0
  1304                           
  1305                           ; 1 bytes @ 0x41
  1306   000042                     	ds	1
  1307   000043                     returnHome@mR:
  1308                           	callstack 0
  1309                           
  1310                           ; 1 bytes @ 0x42
  1311   000043                     	ds	1
  1312   000044                     returnHome@path_step:
  1313                           	callstack 0
  1314                           
  1315                           ; 2 bytes @ 0x43
  1316   000044                     	ds	1
  1317   000045                     calibration_routine@cCal:
  1318                           	callstack 0
  1319   000045                     send2USART@hue:
  1320                           	callstack 0
  1321                           
  1322                           ; 2 bytes @ 0x44
  1323   000045                     	ds	1
  1324   000046                     ??_calibration_routine:
  1325   000046                     returnHome@time_ms:
  1326                           	callstack 0
  1327                           
  1328                           ; 4 bytes @ 0x45
  1329   000046                     	ds	1
  1330   000047                     
  1331                           ; 1 bytes @ 0x46
  1332   000047                     	ds	3
  1333   00004A                     returnHome@action_turn:
  1334                           	callstack 0
  1335                           
  1336                           ; 1 bytes @ 0x49
  1337   00004A                     	ds	1
  1338   00004B                     returnHome@i:
  1339                           	callstack 0
  1340                           
  1341                           ; 2 bytes @ 0x4A
  1342   00004B                     	ds	2
  1343   00004D                     ??_main:
  1344                           
  1345                           ; 1 bytes @ 0x4C
  1346   00004D                     	ds	2
  1347   00004F                     main@hue:
  1348                           	callstack 0
  1349                           
  1350                           ; 2 bytes @ 0x4E
  1351   00004F                     	ds	2
  1352   000051                     main@path_step:
  1353                           	callstack 0
  1354                           
  1355                           ; 2 bytes @ 0x50
  1356   000051                     	ds	2
  1357   000053                     main@diff_clears:
  1358                           	callstack 0
  1359                           
  1360                           ; 2 bytes @ 0x52
  1361   000053                     	ds	2
  1362   000055                     main@clear_norm:
  1363                           	callstack 0
  1364                           
  1365                           ; 2 bytes @ 0x54
  1366   000055                     	ds	2
  1367                           
  1368 ;;
  1369 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1370 ;;
  1371 ;; *************** function _main *****************
  1372 ;; Defined at:
  1373 ;;		line 29 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  white           2    0        unsigned int 
  1378 ;;  current         4    0        float 
  1379 ;;  clear_norm      2   84[COMRAM] unsigned int 
  1380 ;;  diff_clears     2   82[COMRAM] unsigned int 
  1381 ;;  path_step       2   80[COMRAM] unsigned int 
  1382 ;;  hue             2   78[COMRAM] unsigned int 
  1383 ;;  PWMcycle        2    0        unsigned int 
  1384 ;;  ambient         2    0        unsigned int 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;Total ram usage:       10 bytes
  1399 ;; Hardware stack levels required when called: 10
  1400 ;; This function calls:
  1401 ;;		_ADC_init
  1402 ;;		___lwdiv
  1403 ;;		___wmul
  1404 ;;		_calibration_routine
  1405 ;;		_color_click_init
  1406 ;;		_color_read_Clear
  1407 ;;		_decision
  1408 ;;		_fullSpeedAhead
  1409 ;;		_get16bitTMR0val
  1410 ;;		_initDCmotorsPWM
  1411 ;;		_initUSART4
  1412 ;;		_reading_hue
  1413 ;;		_returnHome
  1414 ;;		_send2USART
  1415 ;;		_stop
  1416 ;; This function is called by:
  1417 ;;		Startup code after reset
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           	psect	text0
  1422   0022DC                     __ptext0:
  1423                           	callstack 0
  1424   0022DC                     _main:
  1425                           	callstack 21
  1426   0022DC                     
  1427                           ;main.c: 31:     ADC_init();
  1428   0022DC  EC10  F024         	call	_ADC_init	;wreg free
  1429   0022E0                     
  1430                           ;main.c: 32:     color_click_init();
  1431   0022E0  ECCB  F021         	call	_color_click_init	;wreg free
  1432   0022E4                     
  1433                           ;main.c: 33:     initUSART4();
  1434   0022E4  EC01  F024         	call	_initUSART4	;wreg free
  1435   0022E8                     
  1436                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1437   0022E8  0E00               	movlw	0
  1438   0022EA  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1439   0022EC  0E63               	movlw	99
  1440   0022EE  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1441   0022F0  EC71  F01E         	call	_initDCmotorsPWM	;wreg free
  1442   0022F4                     
  1443                           ;main.c: 40:     motorL.power = 0;
  1444   0022F4  0E00               	movlw	0
  1445   0022F6  0100               	movlb	0	; () banked
  1446   0022F8  6FEE               	movwf	_motorL& (0+255),b
  1447   0022FA                     
  1448                           ; BSR set to: 0
  1449                           ;main.c: 41:     motorL.direction = 1;
  1450   0022FA  0E01               	movlw	1
  1451   0022FC  6FEF               	movwf	(_motorL+1)& (0+255),b
  1452   0022FE                     
  1453                           ; BSR set to: 0
  1454                           ;main.c: 42:     motorL.brakemode = 1;
  1455   0022FE  0E01               	movlw	1
  1456   002300  6FF0               	movwf	(_motorL+2)& (0+255),b
  1457   002302                     
  1458                           ; BSR set to: 0
  1459                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1460   002302  0E00               	movlw	0
  1461   002304  6FF2               	movwf	(_motorL+4)& (0+255),b
  1462   002306  0E63               	movlw	99
  1463   002308  6FF1               	movwf	(_motorL+3)& (0+255),b
  1464   00230A                     
  1465                           ; BSR set to: 0
  1466                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1467   00230A  0EAA               	movlw	170
  1468   00230C  6FF3               	movwf	(_motorL+5)& (0+255),b
  1469   00230E  0E0F               	movlw	15
  1470   002310  6FF4               	movwf	(_motorL+6)& (0+255),b
  1471   002312                     
  1472                           ; BSR set to: 0
  1473                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1474   002312  0EA6               	movlw	166
  1475   002314  6FF5               	movwf	(_motorL+7)& (0+255),b
  1476   002316  0E0F               	movlw	15
  1477   002318  6FF6               	movwf	(_motorL+8)& (0+255),b
  1478   00231A                     
  1479                           ; BSR set to: 0
  1480                           ;main.c: 47:     motorR.power = 0;
  1481   00231A  0E00               	movlw	0
  1482   00231C  6FE5               	movwf	_motorR& (0+255),b
  1483   00231E                     
  1484                           ; BSR set to: 0
  1485                           ;main.c: 48:     motorR.direction = 1;
  1486   00231E  0E01               	movlw	1
  1487   002320  6FE6               	movwf	(_motorR+1)& (0+255),b
  1488   002322                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 49:     motorR.brakemode = 1;
  1491   002322  0E01               	movlw	1
  1492   002324  6FE7               	movwf	(_motorR+2)& (0+255),b
  1493   002326                     
  1494                           ; BSR set to: 0
  1495                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1496   002326  0E00               	movlw	0
  1497   002328  6FE9               	movwf	(_motorR+4)& (0+255),b
  1498   00232A  0E63               	movlw	99
  1499   00232C  6FE8               	movwf	(_motorR+3)& (0+255),b
  1500                           
  1501                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1502   00232E  0E25               	movlw	37
  1503   002330  6FEA               	movwf	(_motorR+5)& (0+255),b
  1504   002332  0E0F               	movlw	15
  1505   002334  6FEB               	movwf	(_motorR+6)& (0+255),b
  1506                           
  1507                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1508   002336  0E21               	movlw	33
  1509   002338  6FEC               	movwf	(_motorR+7)& (0+255),b
  1510   00233A  0E0F               	movlw	15
  1511   00233C  6FED               	movwf	(_motorR+8)& (0+255),b
  1512   00233E                     
  1513                           ; BSR set to: 0
  1514                           ;main.c: 55:     LATDbits.LATD7=0;
  1515   00233E  9E7C               	bcf	124,7,c	;volatile
  1516   002340                     
  1517                           ; BSR set to: 0
  1518                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1519   002340  9E84               	bcf	132,7,c	;volatile
  1520   002342                     
  1521                           ; BSR set to: 0
  1522                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1523   002342  9087               	bcf	135,0,c	;volatile
  1524   002344                     
  1525                           ; BSR set to: 0
  1526                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1527   002344  907F               	bcf	127,0,c	;volatile
  1528   002346                     
  1529                           ; BSR set to: 0
  1530                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1531   002346  9E85               	bcf	133,7,c	;volatile
  1532   002348                     
  1533                           ; BSR set to: 0
  1534                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1535   002348  9E7D               	bcf	125,7,c	;volatile
  1536   00234A                     
  1537                           ; BSR set to: 0
  1538                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1539   00234A  9681               	bcf	129,3,c	;volatile
  1540   00234C                     
  1541                           ; BSR set to: 0
  1542                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1543   00234C  9679               	bcf	121,3,c	;volatile
  1544   00234E                     
  1545                           ; BSR set to: 0
  1546                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1547   00234E  8686               	bsf	134,3,c	;volatile
  1548   002350                     
  1549                           ; BSR set to: 0
  1550                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1551   002350  010E               	movlb	14	; () banked
  1552   002352  97B4               	bcf	180,3,b	;volatile
  1553   002354                     
  1554                           ; BSR set to: 14
  1555                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1556   002354  8486               	bsf	134,2,c	;volatile
  1557   002356                     
  1558                           ; BSR set to: 14
  1559                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1560   002356  947E               	bcf	126,2,c	;volatile
  1561   002358                     
  1562                           ; BSR set to: 14
  1563                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1564   002358  95B4               	bcf	180,2,b	;volatile
  1565   00235A                     
  1566                           ; BSR set to: 14
  1567                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1568   00235A  9287               	bcf	135,1,c	;volatile
  1569   00235C                     
  1570                           ; BSR set to: 14
  1571                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1572   00235C  927F               	bcf	127,1,c	;volatile
  1573   00235E                     
  1574                           ; BSR set to: 14
  1575                           ;main.c: 87:     TRISHbits.TRISH3 = 0;
  1576   00235E  9688               	bcf	136,3,c	;volatile
  1577   002360                     
  1578                           ; BSR set to: 14
  1579                           ;main.c: 88:     LATHbits.LATH3 = 1;
  1580   002360  8680               	bsf	128,3,c	;volatile
  1581   002362                     
  1582                           ; BSR set to: 14
  1583                           ;main.c: 89:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1584   002362  0E19               	movlw	25
  1585   002364  6E4E               	movwf	(??_main+1)^0,c
  1586   002366  0E5A               	movlw	90
  1587   002368  6E4D               	movwf	??_main^0,c
  1588   00236A  0EB2               	movlw	178
  1589   00236C                     u6957:
  1590   00236C  2EE8               	decfsz	wreg,f,c
  1591   00236E  D7FE               	bra	u6957
  1592   002370  2E4D               	decfsz	??_main^0,f,c
  1593   002372  D7FC               	bra	u6957
  1594   002374  2E4E               	decfsz	(??_main+1)^0,f,c
  1595   002376  D7FA               	bra	u6957
  1596   002378                     
  1597                           ;main.c: 90:     LATHbits.LATH3 = 0;
  1598   002378  9680               	bcf	128,3,c	;volatile
  1599   00237A                     
  1600                           ;main.c: 94:     calibration_routine(&colorCalibration);
  1601   00237A  0EDB               	movlw	low _colorCalibration
  1602   00237C  6E45               	movwf	calibration_routine@cCal^0,c
  1603   00237E  EC38  F014         	call	_calibration_routine	;wreg free
  1604   002382                     
  1605                           ;main.c: 96:     unsigned int clear_norm;;main.c: 97:     float current;;main.c: 98:    
      +                           unsigned int path_step = 0;
  1606   002382  0E00               	movlw	0
  1607   002384  6E52               	movwf	(main@path_step+1)^0,c
  1608   002386  0E00               	movlw	0
  1609   002388  6E51               	movwf	main@path_step^0,c
  1610   00238A                     l7146:
  1611                           
  1612                           ;main.c: 109:         LATGbits.LATG0 = 1;
  1613   00238A  807F               	bsf	127,0,c	;volatile
  1614   00238C                     
  1615                           ;main.c: 110:         LATEbits.LATE7 = 1;
  1616   00238C  8E7D               	bsf	125,7,c	;volatile
  1617   00238E                     
  1618                           ;main.c: 111:         LATAbits.LATA3 = 1;
  1619   00238E  8679               	bsf	121,3,c	;volatile
  1620   002390                     
  1621                           ;main.c: 114:         fullSpeedAhead(&motorL,&motorR);
  1622   002390  0EEE               	movlw	low _motorL
  1623   002392  6E33               	movwf	fullSpeedAhead@mL^0,c
  1624   002394  0EE5               	movlw	low _motorR
  1625   002396  6E34               	movwf	fullSpeedAhead@mR^0,c
  1626   002398  EC06  F01C         	call	_fullSpeedAhead	;wreg free
  1627   00239C                     
  1628                           ;main.c: 115:         T0CON0bits.T0EN=1;
  1629   00239C  8ED5               	bsf	213,7,c	;volatile
  1630   00239E                     
  1631                           ;main.c: 117:         (colorCurrent.clear) = color_read_Clear();
  1632   00239E  EC78  F020         	call	_color_read_Clear	;wreg free
  1633   0023A2  C006  F0D7         	movff	?_color_read_Clear,_colorCurrent+6
  1634   0023A6  C007  F0D8         	movff	?_color_read_Clear+1,_colorCurrent+7
  1635   0023AA                     
  1636                           ;main.c: 119:         diff_clears = (colorCalibration.clear - colorCurrent.ambient);
  1637   0023AA  0100               	movlb	0	; () banked
  1638   0023AC  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1639   0023AE  5DE1               	subwf	(_colorCalibration+6)& (0+255),w,b
  1640   0023B0  6E53               	movwf	main@diff_clears^0,c
  1641   0023B2  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1642   0023B4  59E2               	subwfb	(_colorCalibration+7)& (0+255),w,b
  1643   0023B6  6E54               	movwf	(main@diff_clears+1)^0,c
  1644   0023B8                     
  1645                           ; BSR set to: 0
  1646                           ;main.c: 120:         clear_norm = (colorCurrent.clear - colorCurrent.ambient)*100;
  1647   0023B8  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1648   0023BA  5DD7               	subwf	(_colorCurrent+6)& (0+255),w,b
  1649   0023BC  6E02               	movwf	___wmul@multiplier^0,c
  1650   0023BE  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1651   0023C0  59D8               	subwfb	(_colorCurrent+7)& (0+255),w,b
  1652   0023C2  6E03               	movwf	(___wmul@multiplier+1)^0,c
  1653   0023C4  0E00               	movlw	0
  1654   0023C6  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  1655   0023C8  0E64               	movlw	100
  1656   0023CA  6E04               	movwf	___wmul@multiplicand^0,c
  1657   0023CC  ECCF  F023         	call	___wmul	;wreg free
  1658   0023D0  C002  F055         	movff	?___wmul,main@clear_norm
  1659   0023D4  C003  F056         	movff	?___wmul+1,main@clear_norm+1
  1660   0023D8                     
  1661                           ;main.c: 121:         clear_norm = clear_norm/diff_clears;
  1662   0023D8  C055  F008         	movff	main@clear_norm,___lwdiv@dividend
  1663   0023DC  C056  F009         	movff	main@clear_norm+1,___lwdiv@dividend+1
  1664   0023E0  C053  F00A         	movff	main@diff_clears,___lwdiv@divisor
  1665   0023E4  C054  F00B         	movff	main@diff_clears+1,___lwdiv@divisor+1
  1666   0023E8  ECB9  F01F         	call	___lwdiv	;wreg free
  1667   0023EC  C008  F055         	movff	?___lwdiv,main@clear_norm
  1668   0023F0  C009  F056         	movff	?___lwdiv+1,main@clear_norm+1
  1669   0023F4                     
  1670                           ;main.c: 124:         send2USART(clear_norm);
  1671   0023F4  C055  F045         	movff	main@clear_norm,send2USART@hue
  1672   0023F8  C056  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1673   0023FC  ECF2  F023         	call	_send2USART	;wreg free
  1674                           
  1675                           ;main.c: 126:         while(clear_norm<8){
  1676   002400  EF2D  F012         	goto	l7174
  1677   002404                     l7166:
  1678                           
  1679                           ;main.c: 127:             (colorCurrent.clear) = color_read_Clear();
  1680   002404  EC78  F020         	call	_color_read_Clear	;wreg free
  1681   002408  C006  F0D7         	movff	?_color_read_Clear,_colorCurrent+6
  1682   00240C  C007  F0D8         	movff	?_color_read_Clear+1,_colorCurrent+7
  1683   002410                     
  1684                           ;main.c: 128:             diff_clears = (colorCalibration.clear - colorCurrent.ambient);
  1685   002410  0100               	movlb	0	; () banked
  1686   002412  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1687   002414  5DE1               	subwf	(_colorCalibration+6)& (0+255),w,b
  1688   002416  6E53               	movwf	main@diff_clears^0,c
  1689   002418  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1690   00241A  59E2               	subwfb	(_colorCalibration+7)& (0+255),w,b
  1691   00241C  6E54               	movwf	(main@diff_clears+1)^0,c
  1692   00241E                     
  1693                           ; BSR set to: 0
  1694                           ;main.c: 129:             clear_norm = (colorCurrent.clear - colorCurrent.ambient)*100;
  1695   00241E  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1696   002420  5DD7               	subwf	(_colorCurrent+6)& (0+255),w,b
  1697   002422  6E02               	movwf	___wmul@multiplier^0,c
  1698   002424  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1699   002426  59D8               	subwfb	(_colorCurrent+7)& (0+255),w,b
  1700   002428  6E03               	movwf	(___wmul@multiplier+1)^0,c
  1701   00242A  0E00               	movlw	0
  1702   00242C  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  1703   00242E  0E64               	movlw	100
  1704   002430  6E04               	movwf	___wmul@multiplicand^0,c
  1705   002432  ECCF  F023         	call	___wmul	;wreg free
  1706   002436  C002  F055         	movff	?___wmul,main@clear_norm
  1707   00243A  C003  F056         	movff	?___wmul+1,main@clear_norm+1
  1708   00243E                     
  1709                           ;main.c: 130:             clear_norm = clear_norm/diff_clears;
  1710   00243E  C055  F008         	movff	main@clear_norm,___lwdiv@dividend
  1711   002442  C056  F009         	movff	main@clear_norm+1,___lwdiv@dividend+1
  1712   002446  C053  F00A         	movff	main@diff_clears,___lwdiv@divisor
  1713   00244A  C054  F00B         	movff	main@diff_clears+1,___lwdiv@divisor+1
  1714   00244E  ECB9  F01F         	call	___lwdiv	;wreg free
  1715   002452  C008  F055         	movff	?___lwdiv,main@clear_norm
  1716   002456  C009  F056         	movff	?___lwdiv+1,main@clear_norm+1
  1717   00245A                     l7174:
  1718                           
  1719                           ;main.c: 126:         while(clear_norm<8){
  1720   00245A  5056               	movf	(main@clear_norm+1)^0,w,c
  1721   00245C  E109               	bnz	u6880
  1722   00245E  0E08               	movlw	8
  1723   002460  5C55               	subwf	main@clear_norm^0,w,c
  1724   002462  A0D8               	btfss	status,0,c
  1725   002464  EF36  F012         	goto	u6881
  1726   002468  EF38  F012         	goto	u6880
  1727   00246C                     u6881:
  1728   00246C  EF02  F012         	goto	l7166
  1729   002470                     u6880:
  1730   002470                     
  1731                           ;main.c: 133:         T0CON0bits.T0EN=0;
  1732   002470  9ED5               	bcf	213,7,c	;volatile
  1733   002472                     
  1734                           ;main.c: 134:         stop(&motorL,&motorR);
  1735   002472  0EEE               	movlw	low _motorL
  1736   002474  6E14               	movwf	stop@mL^0,c
  1737   002476  0EE5               	movlw	low _motorR
  1738   002478  6E15               	movwf	stop@mR^0,c
  1739   00247A  ECB9  F01E         	call	_stop	;wreg free
  1740   00247E                     
  1741                           ;main.c: 137:         path_step = get16bitTMR0val(path_step);
  1742   00247E  C051  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1743   002482  C052  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1744   002486  EC92  F021         	call	_get16bitTMR0val	;wreg free
  1745   00248A  C007  F051         	movff	?_get16bitTMR0val,main@path_step
  1746   00248E  C008  F052         	movff	?_get16bitTMR0val+1,main@path_step+1
  1747   002492                     
  1748                           ;main.c: 139:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1749   002492  0E11               	movlw	17
  1750   002494  6E4E               	movwf	(??_main+1)^0,c
  1751   002496  0E3C               	movlw	60
  1752   002498  6E4D               	movwf	??_main^0,c
  1753   00249A  0ECB               	movlw	203
  1754   00249C                     u6967:
  1755   00249C  2EE8               	decfsz	wreg,f,c
  1756   00249E  D7FE               	bra	u6967
  1757   0024A0  2E4D               	decfsz	??_main^0,f,c
  1758   0024A2  D7FC               	bra	u6967
  1759   0024A4  2E4E               	decfsz	(??_main+1)^0,f,c
  1760   0024A6  D7FA               	bra	u6967
  1761   0024A8  0000               	nop	
  1762   0024AA                     
  1763                           ;main.c: 142:         fullSpeedAhead(&motorL,&motorR);
  1764   0024AA  0EEE               	movlw	low _motorL
  1765   0024AC  6E33               	movwf	fullSpeedAhead@mL^0,c
  1766   0024AE  0EE5               	movlw	low _motorR
  1767   0024B0  6E34               	movwf	fullSpeedAhead@mR^0,c
  1768   0024B2  EC06  F01C         	call	_fullSpeedAhead	;wreg free
  1769   0024B6                     
  1770                           ;main.c: 143:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1771   0024B6  0E19               	movlw	25
  1772   0024B8  6E4E               	movwf	(??_main+1)^0,c
  1773   0024BA  0E5A               	movlw	90
  1774   0024BC  6E4D               	movwf	??_main^0,c
  1775   0024BE  0EB2               	movlw	178
  1776   0024C0                     u6977:
  1777   0024C0  2EE8               	decfsz	wreg,f,c
  1778   0024C2  D7FE               	bra	u6977
  1779   0024C4  2E4D               	decfsz	??_main^0,f,c
  1780   0024C6  D7FC               	bra	u6977
  1781   0024C8  2E4E               	decfsz	(??_main+1)^0,f,c
  1782   0024CA  D7FA               	bra	u6977
  1783   0024CC                     
  1784                           ;main.c: 144:         stop(&motorL,&motorR);
  1785   0024CC  0EEE               	movlw	low _motorL
  1786   0024CE  6E14               	movwf	stop@mL^0,c
  1787   0024D0  0EE5               	movlw	low _motorR
  1788   0024D2  6E15               	movwf	stop@mR^0,c
  1789   0024D4  ECB9  F01E         	call	_stop	;wreg free
  1790   0024D8                     
  1791                           ;main.c: 145:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1792   0024D8  0E19               	movlw	25
  1793   0024DA  6E4E               	movwf	(??_main+1)^0,c
  1794   0024DC  0E5A               	movlw	90
  1795   0024DE  6E4D               	movwf	??_main^0,c
  1796   0024E0  0EB2               	movlw	178
  1797   0024E2                     u6987:
  1798   0024E2  2EE8               	decfsz	wreg,f,c
  1799   0024E4  D7FE               	bra	u6987
  1800   0024E6  2E4D               	decfsz	??_main^0,f,c
  1801   0024E8  D7FC               	bra	u6987
  1802   0024EA  2E4E               	decfsz	(??_main+1)^0,f,c
  1803   0024EC  D7FA               	bra	u6987
  1804   0024EE                     
  1805                           ;main.c: 147:         hue = reading_hue(&colorCurrent);
  1806   0024EE  0ED1               	movlw	low _colorCurrent
  1807   0024F0  6E37               	movwf	reading_hue@cCurr^0,c
  1808   0024F2  EC91  F01B         	call	_reading_hue	;wreg free
  1809   0024F6  C037  F04F         	movff	?_reading_hue,main@hue
  1810   0024FA  C038  F050         	movff	?_reading_hue+1,main@hue+1
  1811   0024FE                     
  1812                           ;main.c: 149:         diff_clears = (colorCalibration.clear - colorCurrent.ambient);
  1813   0024FE  0100               	movlb	0	; () banked
  1814   002500  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1815   002502  5DE1               	subwf	(_colorCalibration+6)& (0+255),w,b
  1816   002504  6E53               	movwf	main@diff_clears^0,c
  1817   002506  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1818   002508  59E2               	subwfb	(_colorCalibration+7)& (0+255),w,b
  1819   00250A  6E54               	movwf	(main@diff_clears+1)^0,c
  1820   00250C                     
  1821                           ; BSR set to: 0
  1822                           ;main.c: 150:         clear_norm = (colorCurrent.clear - colorCurrent.ambient)*100;
  1823   00250C  51D9               	movf	(_colorCurrent+8)& (0+255),w,b
  1824   00250E  5DD7               	subwf	(_colorCurrent+6)& (0+255),w,b
  1825   002510  6E02               	movwf	___wmul@multiplier^0,c
  1826   002512  51DA               	movf	(_colorCurrent+9)& (0+255),w,b
  1827   002514  59D8               	subwfb	(_colorCurrent+7)& (0+255),w,b
  1828   002516  6E03               	movwf	(___wmul@multiplier+1)^0,c
  1829   002518  0E00               	movlw	0
  1830   00251A  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  1831   00251C  0E64               	movlw	100
  1832   00251E  6E04               	movwf	___wmul@multiplicand^0,c
  1833   002520  ECCF  F023         	call	___wmul	;wreg free
  1834   002524  C002  F055         	movff	?___wmul,main@clear_norm
  1835   002528  C003  F056         	movff	?___wmul+1,main@clear_norm+1
  1836   00252C                     
  1837                           ;main.c: 151:         clear_norm = clear_norm/diff_clears;
  1838   00252C  C055  F008         	movff	main@clear_norm,___lwdiv@dividend
  1839   002530  C056  F009         	movff	main@clear_norm+1,___lwdiv@dividend+1
  1840   002534  C053  F00A         	movff	main@diff_clears,___lwdiv@divisor
  1841   002538  C054  F00B         	movff	main@diff_clears+1,___lwdiv@divisor+1
  1842   00253C  ECB9  F01F         	call	___lwdiv	;wreg free
  1843   002540  C008  F055         	movff	?___lwdiv,main@clear_norm
  1844   002544  C009  F056         	movff	?___lwdiv+1,main@clear_norm+1
  1845   002548                     
  1846                           ;main.c: 153:         if (clear_norm > 20){
  1847   002548  5056               	movf	(main@clear_norm+1)^0,w,c
  1848   00254A  E109               	bnz	u6890
  1849   00254C  0E15               	movlw	21
  1850   00254E  5C55               	subwf	main@clear_norm^0,w,c
  1851   002550  A0D8               	btfss	status,0,c
  1852   002552  EFAD  F012         	goto	u6891
  1853   002556  EFAF  F012         	goto	u6890
  1854   00255A                     u6891:
  1855   00255A  EFC7  F012         	goto	l7206
  1856   00255E                     u6890:
  1857   00255E                     
  1858                           ;main.c: 154:             fullSpeedAhead(&motorL,&motorR);
  1859   00255E  0EEE               	movlw	low _motorL
  1860   002560  6E33               	movwf	fullSpeedAhead@mL^0,c
  1861   002562  0EE5               	movlw	low _motorR
  1862   002564  6E34               	movwf	fullSpeedAhead@mR^0,c
  1863   002566  EC06  F01C         	call	_fullSpeedAhead	;wreg free
  1864   00256A                     
  1865                           ;main.c: 155:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1866   00256A  0E09               	movlw	9
  1867   00256C  6E4E               	movwf	(??_main+1)^0,c
  1868   00256E  0E1E               	movlw	30
  1869   002570  6E4D               	movwf	??_main^0,c
  1870   002572  0EE4               	movlw	228
  1871   002574                     u6997:
  1872   002574  2EE8               	decfsz	wreg,f,c
  1873   002576  D7FE               	bra	u6997
  1874   002578  2E4D               	decfsz	??_main^0,f,c
  1875   00257A  D7FC               	bra	u6997
  1876   00257C  2E4E               	decfsz	(??_main+1)^0,f,c
  1877   00257E  D7FA               	bra	u6997
  1878   002580  D000               	nop2	
  1879   002582                     
  1880                           ;main.c: 156:             stop(&motorL,&motorR);
  1881   002582  0EEE               	movlw	low _motorL
  1882   002584  6E14               	movwf	stop@mL^0,c
  1883   002586  0EE5               	movlw	low _motorR
  1884   002588  6E15               	movwf	stop@mR^0,c
  1885   00258A  ECB9  F01E         	call	_stop	;wreg free
  1886   00258E                     l7206:
  1887                           
  1888                           ;main.c: 158:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  1889   00258E  5056               	movf	(main@clear_norm+1)^0,w,c
  1890   002590  E109               	bnz	u6900
  1891   002592  0E3D               	movlw	61
  1892   002594  5C55               	subwf	main@clear_norm^0,w,c
  1893   002596  A0D8               	btfss	status,0,c
  1894   002598  EFD0  F012         	goto	u6901
  1895   00259C  EFD2  F012         	goto	u6900
  1896   0025A0                     u6901:
  1897   0025A0  EFE8  F012         	goto	l331
  1898   0025A4                     u6900:
  1899   0025A4  0E2E               	movlw	46
  1900   0025A6  5C4F               	subwf	main@hue^0,w,c
  1901   0025A8  0E01               	movlw	1
  1902   0025AA  5850               	subwfb	(main@hue+1)^0,w,c
  1903   0025AC  A0D8               	btfss	status,0,c
  1904   0025AE  EFDB  F012         	goto	u6911
  1905   0025B2  EFDD  F012         	goto	u6910
  1906   0025B6                     u6911:
  1907   0025B6  EFEF  F012         	goto	l7212
  1908   0025BA                     u6910:
  1909   0025BA  0E5B               	movlw	91
  1910   0025BC  5C4F               	subwf	main@hue^0,w,c
  1911   0025BE  0E01               	movlw	1
  1912   0025C0  5850               	subwfb	(main@hue+1)^0,w,c
  1913   0025C2  B0D8               	btfsc	status,0,c
  1914   0025C4  EFE6  F012         	goto	u6921
  1915   0025C8  EFE8  F012         	goto	u6920
  1916   0025CC                     u6921:
  1917   0025CC  EFEF  F012         	goto	l7212
  1918   0025D0                     u6920:
  1919   0025D0                     l331:
  1920   0025D0  A27F               	btfss	127,1,c	;volatile
  1921   0025D2  EFED  F012         	goto	u6931
  1922   0025D6  EFEF  F012         	goto	u6930
  1923   0025DA                     u6931:
  1924   0025DA  EF00  F013         	goto	l7220
  1925   0025DE                     u6930:
  1926   0025DE                     l7212:
  1927   0025DE                     
  1928                           ;main.c: 161:             send2USART(white);
  1929   0025DE  0E00               	movlw	0
  1930   0025E0  6E46               	movwf	(send2USART@hue+1)^0,c
  1931   0025E2  0E08               	movlw	8
  1932   0025E4  6E45               	movwf	send2USART@hue^0,c
  1933   0025E6  ECF2  F023         	call	_send2USART	;wreg free
  1934   0025EA                     
  1935                           ;main.c: 162:             returnHome(&motorL, &motorR, path_step);
  1936   0025EA  0EEE               	movlw	low _motorL
  1937   0025EC  6E42               	movwf	returnHome@mL^0,c
  1938   0025EE  0EE5               	movlw	low _motorR
  1939   0025F0  6E43               	movwf	returnHome@mR^0,c
  1940   0025F2  C051  F044         	movff	main@path_step,returnHome@path_step
  1941   0025F6  C052  F045         	movff	main@path_step+1,returnHome@path_step+1
  1942   0025FA  EC08  F019         	call	_returnHome	;wreg free
  1943   0025FE                     
  1944                           ;main.c: 163:             LATGbits.LATG1 = 0;
  1945   0025FE  927F               	bcf	127,1,c	;volatile
  1946   002600                     l7220:
  1947                           
  1948                           ;main.c: 166:         path_step = decision(hue, path_step);
  1949   002600  C04F  F021         	movff	main@hue,decision@hue
  1950   002604  C050  F022         	movff	main@hue+1,decision@hue+1
  1951   002608  C051  F023         	movff	main@path_step,decision@path_step
  1952   00260C  C052  F024         	movff	main@path_step+1,decision@path_step+1
  1953   002610  EC12  F013         	call	_decision	;wreg free
  1954   002614  C021  F051         	movff	?_decision,main@path_step
  1955   002618  C022  F052         	movff	?_decision+1,main@path_step+1
  1956   00261C  EFC5  F011         	goto	l7146
  1957   002620  EF1D  F000         	goto	start
  1958   002624                     __end_of_main:
  1959                           	callstack 0
  1960                           
  1961 ;; *************** function _send2USART *****************
  1962 ;; Defined at:
  1963 ;;		line 146 in file "serial.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  hue             2   68[COMRAM] unsigned int 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1978 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;Total ram usage:       52 bytes
  1982 ;; Hardware stack levels used: 1
  1983 ;; Hardware stack levels required when called: 9
  1984 ;; This function calls:
  1985 ;;		_sendStringSerial4
  1986 ;;		_sprintf
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text1
  1993   0047E4                     __ptext1:
  1994                           	callstack 0
  1995   0047E4                     _send2USART:
  1996                           	callstack 21
  1997   0047E4                     
  1998                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  1999   0047E4  0E60               	movlw	low send2USART@hue_char
  2000   0047E6  6E32               	movwf	sprintf@s^0,c
  2001   0047E8  0EB7               	movlw	low STR_14
  2002   0047EA  6E33               	movwf	sprintf@fmt^0,c
  2003   0047EC  C045  F034         	movff	send2USART@hue,?_sprintf+2
  2004   0047F0  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  2005   0047F4  ECE5  F021         	call	_sprintf	;wreg free
  2006   0047F8                     
  2007                           ;serial.c: 158:         sendStringSerial4(hue_char);
  2008   0047F8  0E60               	movlw	low send2USART@hue_char
  2009   0047FA  6E03               	movwf	sendStringSerial4@string^0,c
  2010   0047FC  EC45  F023         	call	_sendStringSerial4	;wreg free
  2011   004800  0012               	return		;funcret
  2012   004802                     __end_of_send2USART:
  2013                           	callstack 0
  2014                           
  2015 ;; *************** function _returnHome *****************
  2016 ;; Defined at:
  2017 ;;		line 76 in file "return_func.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  2020 ;;		 -> motorL(9), 
  2021 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  2022 ;;		 -> motorR(9), 
  2023 ;;  path_step       2   67[COMRAM] unsigned int 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  time_ms         4   69[COMRAM] long 
  2026 ;;  action_turn     1   73[COMRAM] unsigned char 
  2027 ;;  i               2   74[COMRAM] unsigned int 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2040 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2041 ;;Total ram usage:       11 bytes
  2042 ;; Hardware stack levels used: 1
  2043 ;; Hardware stack levels required when called: 6
  2044 ;; This function calls:
  2045 ;;		___aldiv
  2046 ;;		___lmul
  2047 ;;		_moveWhite
  2048 ;;		_reverseStraight
  2049 ;;		_reverseTurn
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text2
  2056   003210                     __ptext2:
  2057                           	callstack 0
  2058   003210                     _returnHome:
  2059                           	callstack 24
  2060   003210                     
  2061                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  2062   003210  907F               	bcf	127,0,c	;volatile
  2063                           
  2064                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  2065   003212  9E7D               	bcf	125,7,c	;volatile
  2066                           
  2067                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  2068   003214  9679               	bcf	121,3,c	;volatile
  2069   003216                     
  2070                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  2071   003216  0EEE               	movlw	low _motorL
  2072   003218  6E1D               	movwf	moveWhite@mL^0,c
  2073   00321A  0EE5               	movlw	low _motorR
  2074   00321C  6E1E               	movwf	moveWhite@mR^0,c
  2075   00321E  EC19  F022         	call	_moveWhite	;wreg free
  2076   003222                     
  2077                           ;return_func.c: 85:     if (path_step > 0) {
  2078   003222  5044               	movf	returnHome@path_step^0,w,c
  2079   003224  1045               	iorwf	(returnHome@path_step+1)^0,w,c
  2080   003226  B4D8               	btfsc	status,2,c
  2081   003228  EF18  F019         	goto	u6851
  2082   00322C  EF1A  F019         	goto	u6850
  2083   003230                     u6851:
  2084   003230  EF8E  F019         	goto	l725
  2085   003234                     u6850:
  2086   003234                     
  2087                           ;return_func.c: 86:         for (unsigned int i = path_step - 1; ; i--) {
  2088   003234  0EFF               	movlw	255
  2089   003236  2444               	addwf	returnHome@path_step^0,w,c
  2090   003238  6E4B               	movwf	returnHome@i^0,c
  2091   00323A  0EFF               	movlw	255
  2092   00323C  2045               	addwfc	(returnHome@path_step+1)^0,w,c
  2093   00323E  6E4C               	movwf	(returnHome@i+1)^0,c
  2094   003240                     l7058:
  2095                           
  2096                           ;return_func.c: 88:             long time_ms = time[i]*65535*4*8192/64000000;
  2097   003240  90D8               	bcf	status,0,c
  2098   003242  344B               	rlcf	returnHome@i^0,w,c
  2099   003244  6ED9               	movwf	fsr2l,c
  2100   003246  344C               	rlcf	(returnHome@i+1)^0,w,c
  2101   003248  6EDA               	movwf	fsr2h,c
  2102   00324A  0E00               	movlw	low _time
  2103   00324C  26D9               	addwf	fsr2l,f,c
  2104   00324E  0E02               	movlw	high _time
  2105   003250  22DA               	addwfc	fsr2h,f,c
  2106   003252  CFDE F002          	movff	postinc2,___lmul@multiplier
  2107   003256  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2108   00325A  0E00               	movlw	0
  2109   00325C  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2110   00325E  0EFF               	movlw	-1
  2111   003260  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2112   003262  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2113   003264  0E00               	movlw	0
  2114   003266  6E06               	movwf	___lmul@multiplicand^0,c
  2115   003268  0E80               	movlw	128
  2116   00326A  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2117   00326C  0EFF               	movlw	255
  2118   00326E  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2119   003270  0E7F               	movlw	127
  2120   003272  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2121   003274  ECF3  F01F         	call	___lmul	;wreg free
  2122   003278  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2123   00327C  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2124   003280  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2125   003284  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2126   003288  0E00               	movlw	0
  2127   00328A  6E12               	movwf	___aldiv@divisor^0,c
  2128   00328C  0E90               	movlw	144
  2129   00328E  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2130   003290  0ED0               	movlw	208
  2131   003292  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2132   003294  0E03               	movlw	3
  2133   003296  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2134   003298  EC90  F019         	call	___aldiv	;wreg free
  2135   00329C  C00E  F046         	movff	?___aldiv,returnHome@time_ms
  2136   0032A0  C00F  F047         	movff	?___aldiv+1,returnHome@time_ms+1
  2137   0032A4  C010  F048         	movff	?___aldiv+2,returnHome@time_ms+2
  2138   0032A8  C011  F049         	movff	?___aldiv+3,returnHome@time_ms+3
  2139   0032AC                     
  2140                           ;return_func.c: 89:             char action_turn = action[i];
  2141   0032AC  0E3C               	movlw	low _action
  2142   0032AE  244B               	addwf	returnHome@i^0,w,c
  2143   0032B0  6ED9               	movwf	fsr2l,c
  2144   0032B2  0E01               	movlw	high _action
  2145   0032B4  204C               	addwfc	(returnHome@i+1)^0,w,c
  2146   0032B6  6EDA               	movwf	fsr2h,c
  2147   0032B8  50DF               	movf	indf2,w,c
  2148   0032BA  6E4A               	movwf	returnHome@action_turn^0,c
  2149   0032BC                     
  2150                           ;return_func.c: 91:             if (action_turn == 0) {
  2151   0032BC  504A               	movf	returnHome@action_turn^0,w,c
  2152   0032BE  A4D8               	btfss	status,2,c
  2153   0032C0  EF64  F019         	goto	u6861
  2154   0032C4  EF66  F019         	goto	u6860
  2155   0032C8                     u6861:
  2156   0032C8  EF76  F019         	goto	l7066
  2157   0032CC                     u6860:
  2158   0032CC                     
  2159                           ;return_func.c: 92:                 reverseStraight(mL, mR, time_ms);
  2160   0032CC  C042  F038         	movff	returnHome@mL,reverseStraight@mL
  2161   0032D0  C043  F039         	movff	returnHome@mR,reverseStraight@mR
  2162   0032D4  C046  F03A         	movff	returnHome@time_ms,reverseStraight@time_ms
  2163   0032D8  C047  F03B         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2164   0032DC  C048  F03C         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2165   0032E0  C049  F03D         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2166   0032E4  EC1B  F01B         	call	_reverseStraight	;wreg free
  2167                           
  2168                           ;return_func.c: 93:             } else {
  2169   0032E8  EF7E  F019         	goto	l7068
  2170   0032EC                     l7066:
  2171                           
  2172                           ;return_func.c: 94:                 reverseTurn(mL, mR, action_turn);
  2173   0032EC  C042  F01D         	movff	returnHome@mL,reverseTurn@mL
  2174   0032F0  C043  F01E         	movff	returnHome@mR,reverseTurn@mR
  2175   0032F4  C04A  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2176   0032F8  ECAF  F017         	call	_reverseTurn	;wreg free
  2177   0032FC                     l7068:
  2178                           
  2179                           ;return_func.c: 97:             if (i == 0) break;
  2180   0032FC  504B               	movf	returnHome@i^0,w,c
  2181   0032FE  104C               	iorwf	(returnHome@i+1)^0,w,c
  2182   003300  A4D8               	btfss	status,2,c
  2183   003302  EF85  F019         	goto	u6871
  2184   003306  EF87  F019         	goto	u6870
  2185   00330A                     u6871:
  2186   00330A  EF89  F019         	goto	l7072
  2187   00330E                     u6870:
  2188   00330E  EF8E  F019         	goto	l725
  2189   003312                     l7072:
  2190                           
  2191                           ;return_func.c: 98:         }
  2192   003312  064B               	decf	returnHome@i^0,f,c
  2193   003314  A0D8               	btfss	status,0,c
  2194   003316  064C               	decf	(returnHome@i+1)^0,f,c
  2195   003318  EF20  F019         	goto	l7058
  2196   00331C                     l725:
  2197   00331C  0003               	sleep		;# 
  2198   00331E  0012               	return		;funcret
  2199   003320                     __end_of_returnHome:
  2200                           	callstack 0
  2201                           
  2202 ;; *************** function _reverseTurn *****************
  2203 ;; Defined at:
  2204 ;;		line 23 in file "return_func.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2207 ;;		 -> motorL(9), 
  2208 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2209 ;;		 -> motorR(9), 
  2210 ;;  actionStep      1   30[COMRAM] unsigned char 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2222 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;Total ram usage:        5 bytes
  2227 ;; Hardware stack levels used: 1
  2228 ;; Hardware stack levels required when called: 5
  2229 ;; This function calls:
  2230 ;;		_backHalf
  2231 ;;		_left135
  2232 ;;		_left90
  2233 ;;		_right135
  2234 ;;		_right90
  2235 ;;		_turn180
  2236 ;; This function is called by:
  2237 ;;		_returnHome
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text3
  2242   002F5E                     __ptext3:
  2243                           	callstack 0
  2244   002F5E                     _reverseTurn:
  2245                           	callstack 24
  2246   002F5E                     
  2247                           ;return_func.c: 24:     if (actionStep == 1) {
  2248   002F5E  041F               	decf	reverseTurn@actionStep^0,w,c
  2249   002F60  A4D8               	btfss	status,2,c
  2250   002F62  EFB5  F017         	goto	u6481
  2251   002F66  EFB7  F017         	goto	u6480
  2252   002F6A                     u6481:
  2253   002F6A  EFD1  F017         	goto	l6678
  2254   002F6E                     u6480:
  2255   002F6E                     
  2256                           ;return_func.c: 25:         backHalf(mL,mR);
  2257   002F6E  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2258   002F72  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2259   002F76  EC8E  F023         	call	_backHalf	;wreg free
  2260   002F7A                     
  2261                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2262   002F7A  0E29               	movlw	41
  2263   002F7C  6E21               	movwf	(??_reverseTurn+1)^0,c
  2264   002F7E  0E96               	movlw	150
  2265   002F80  6E20               	movwf	??_reverseTurn^0,c
  2266   002F82  0E7F               	movlw	127
  2267   002F84                     u7007:
  2268   002F84  2EE8               	decfsz	wreg,f,c
  2269   002F86  D7FE               	bra	u7007
  2270   002F88  2E20               	decfsz	??_reverseTurn^0,f,c
  2271   002F8A  D7FC               	bra	u7007
  2272   002F8C  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2273   002F8E  D7FA               	bra	u7007
  2274   002F90  0000               	nop	
  2275   002F92                     
  2276                           ;return_func.c: 27:         left90(mL,mR);
  2277   002F92  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2278   002F96  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2279   002F9A  EC76  F023         	call	_left90	;wreg free
  2280                           
  2281                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2282   002F9E  EF5D  F018         	goto	l708
  2283   002FA2                     l6678:
  2284   002FA2  0E02               	movlw	2
  2285   002FA4  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2286   002FA6  A4D8               	btfss	status,2,c
  2287   002FA8  EFD8  F017         	goto	u6491
  2288   002FAC  EFDA  F017         	goto	u6490
  2289   002FB0                     u6491:
  2290   002FB0  EFF4  F017         	goto	l6686
  2291   002FB4                     u6490:
  2292   002FB4                     
  2293                           ;return_func.c: 30:         backHalf(mL,mR);
  2294   002FB4  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2295   002FB8  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2296   002FBC  EC8E  F023         	call	_backHalf	;wreg free
  2297   002FC0                     
  2298                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2299   002FC0  0E29               	movlw	41
  2300   002FC2  6E21               	movwf	(??_reverseTurn+1)^0,c
  2301   002FC4  0E96               	movlw	150
  2302   002FC6  6E20               	movwf	??_reverseTurn^0,c
  2303   002FC8  0E7F               	movlw	127
  2304   002FCA                     u7017:
  2305   002FCA  2EE8               	decfsz	wreg,f,c
  2306   002FCC  D7FE               	bra	u7017
  2307   002FCE  2E20               	decfsz	??_reverseTurn^0,f,c
  2308   002FD0  D7FC               	bra	u7017
  2309   002FD2  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2310   002FD4  D7FA               	bra	u7017
  2311   002FD6  0000               	nop	
  2312   002FD8                     
  2313                           ;return_func.c: 32:         right90(mL,mR);
  2314   002FD8  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2315   002FDC  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2316   002FE0  EC5E  F023         	call	_right90	;wreg free
  2317                           
  2318                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2319   002FE4  EF5D  F018         	goto	l708
  2320   002FE8                     l6686:
  2321   002FE8  0E03               	movlw	3
  2322   002FEA  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2323   002FEC  A4D8               	btfss	status,2,c
  2324   002FEE  EFFB  F017         	goto	u6501
  2325   002FF2  EFFD  F017         	goto	u6500
  2326   002FF6                     u6501:
  2327   002FF6  EF17  F018         	goto	l6694
  2328   002FFA                     u6500:
  2329   002FFA                     
  2330                           ;return_func.c: 35:          backHalf(mL,mR);
  2331   002FFA  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2332   002FFE  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2333   003002  EC8E  F023         	call	_backHalf	;wreg free
  2334   003006                     
  2335                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2336   003006  0E29               	movlw	41
  2337   003008  6E21               	movwf	(??_reverseTurn+1)^0,c
  2338   00300A  0E96               	movlw	150
  2339   00300C  6E20               	movwf	??_reverseTurn^0,c
  2340   00300E  0E7F               	movlw	127
  2341   003010                     u7027:
  2342   003010  2EE8               	decfsz	wreg,f,c
  2343   003012  D7FE               	bra	u7027
  2344   003014  2E20               	decfsz	??_reverseTurn^0,f,c
  2345   003016  D7FC               	bra	u7027
  2346   003018  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2347   00301A  D7FA               	bra	u7027
  2348   00301C  0000               	nop	
  2349   00301E                     
  2350                           ;return_func.c: 37:         turn180(mL,mR);
  2351   00301E  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2352   003022  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2353   003026  EC2C  F023         	call	_turn180	;wreg free
  2354                           
  2355                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2356   00302A  EF5D  F018         	goto	l708
  2357   00302E                     l6694:
  2358   00302E  0E04               	movlw	4
  2359   003030  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2360   003032  A4D8               	btfss	status,2,c
  2361   003034  EF1E  F018         	goto	u6511
  2362   003038  EF20  F018         	goto	u6510
  2363   00303C                     u6511:
  2364   00303C  EF3A  F018         	goto	l6702
  2365   003040                     u6510:
  2366   003040                     
  2367                           ;return_func.c: 40:         backHalf(mL,mR);
  2368   003040  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2369   003044  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2370   003048  EC8E  F023         	call	_backHalf	;wreg free
  2371   00304C                     
  2372                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2373   00304C  0E29               	movlw	41
  2374   00304E  6E21               	movwf	(??_reverseTurn+1)^0,c
  2375   003050  0E96               	movlw	150
  2376   003052  6E20               	movwf	??_reverseTurn^0,c
  2377   003054  0E7F               	movlw	127
  2378   003056                     u7037:
  2379   003056  2EE8               	decfsz	wreg,f,c
  2380   003058  D7FE               	bra	u7037
  2381   00305A  2E20               	decfsz	??_reverseTurn^0,f,c
  2382   00305C  D7FC               	bra	u7037
  2383   00305E  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2384   003060  D7FA               	bra	u7037
  2385   003062  0000               	nop	
  2386   003064                     
  2387                           ;return_func.c: 42:         left135(mL,mR);
  2388   003064  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2389   003068  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2390   00306C  ECE1  F022         	call	_left135	;wreg free
  2391                           
  2392                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2393   003070  EF5D  F018         	goto	l708
  2394   003074                     l6702:
  2395   003074  0E05               	movlw	5
  2396   003076  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2397   003078  A4D8               	btfss	status,2,c
  2398   00307A  EF41  F018         	goto	u6521
  2399   00307E  EF43  F018         	goto	u6520
  2400   003082                     u6521:
  2401   003082  EF5D  F018         	goto	l702
  2402   003086                     u6520:
  2403   003086                     
  2404                           ;return_func.c: 44:         backHalf(mL,mR);
  2405   003086  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2406   00308A  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2407   00308E  EC8E  F023         	call	_backHalf	;wreg free
  2408   003092                     
  2409                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2410   003092  0E29               	movlw	41
  2411   003094  6E21               	movwf	(??_reverseTurn+1)^0,c
  2412   003096  0E96               	movlw	150
  2413   003098  6E20               	movwf	??_reverseTurn^0,c
  2414   00309A  0E7F               	movlw	127
  2415   00309C                     u7047:
  2416   00309C  2EE8               	decfsz	wreg,f,c
  2417   00309E  D7FE               	bra	u7047
  2418   0030A0  2E20               	decfsz	??_reverseTurn^0,f,c
  2419   0030A2  D7FC               	bra	u7047
  2420   0030A4  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2421   0030A6  D7FA               	bra	u7047
  2422   0030A8  0000               	nop	
  2423   0030AA                     
  2424                           ;return_func.c: 46:         right135(mL,mR);
  2425   0030AA  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2426   0030AE  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2427   0030B2  ECAF  F022         	call	_right135	;wreg free
  2428   0030B6  EF5D  F018         	goto	l708
  2429   0030BA                     l702:
  2430   0030BA                     l708:
  2431   0030BA  0012               	return		;funcret
  2432   0030BC                     __end_of_reverseTurn:
  2433                           	callstack 0
  2434                           
  2435 ;; *************** function _reverseStraight *****************
  2436 ;; Defined at:
  2437 ;;		line 59 in file "return_func.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  mL              1   55[COMRAM] PTR struct DC_motor
  2440 ;;		 -> motorL(9), 
  2441 ;;  mR              1   56[COMRAM] PTR struct DC_motor
  2442 ;;		 -> motorR(9), 
  2443 ;;  time_ms         4   57[COMRAM] long 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  delayMs         2   63[COMRAM] unsigned int 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2455 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;Total ram usage:       10 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; Hardware stack levels required when called: 4
  2462 ;; This function calls:
  2463 ;;		_customDelayMs
  2464 ;;		_fullSpeedAhead
  2465 ;;		_stop
  2466 ;; This function is called by:
  2467 ;;		_returnHome
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text4
  2472   003636                     __ptext4:
  2473                           	callstack 0
  2474   003636                     _reverseStraight:
  2475                           	callstack 25
  2476   003636                     
  2477                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2478   003636  0E03               	movlw	3
  2479   003638  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2480   00363A  0EE8               	movlw	232
  2481   00363C  6E40               	movwf	reverseStraight@delayMs^0,c
  2482   00363E                     
  2483                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2484   00363E  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2485   003640  EF2E  F01B         	goto	u6531
  2486   003644  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2487   003646  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2488   003648  E10B               	bnz	u6530
  2489   00364A  0E7D               	movlw	125
  2490   00364C  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2491   00364E  0E15               	movlw	21
  2492   003650  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2493   003652  A0D8               	btfss	status,0,c
  2494   003654  EF2E  F01B         	goto	u6531
  2495   003658  EF30  F01B         	goto	u6530
  2496   00365C                     u6531:
  2497   00365C  EF36  F01B         	goto	l6716
  2498   003660                     u6530:
  2499   003660  0E0B               	movlw	11
  2500   003662  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2501   003664  0EB8               	movlw	184
  2502   003666  6E40               	movwf	reverseStraight@delayMs^0,c
  2503   003668  EF73  F01B         	goto	l6726
  2504   00366C                     l6716:
  2505   00366C  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2506   00366E  EF45  F01B         	goto	u6541
  2507   003672  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2508   003674  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2509   003676  E10B               	bnz	u6540
  2510   003678  0EB9               	movlw	185
  2511   00367A  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2512   00367C  0E0B               	movlw	11
  2513   00367E  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2514   003680  A0D8               	btfss	status,0,c
  2515   003682  EF45  F01B         	goto	u6541
  2516   003686  EF47  F01B         	goto	u6540
  2517   00368A                     u6541:
  2518   00368A  EF5E  F01B         	goto	l6722
  2519   00368E                     u6540:
  2520   00368E  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2521   003690  EF56  F01B         	goto	u6551
  2522   003694  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2523   003696  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2524   003698  E10B               	bnz	u6550
  2525   00369A  0E05               	movlw	5
  2526   00369C  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2527   00369E  0E10               	movlw	16
  2528   0036A0  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2529   0036A2  A0D8               	btfss	status,0,c
  2530   0036A4  EF56  F01B         	goto	u6551
  2531   0036A8  EF58  F01B         	goto	u6550
  2532   0036AC                     u6551:
  2533   0036AC  EF5E  F01B         	goto	l6722
  2534   0036B0                     u6550:
  2535   0036B0  0E07               	movlw	7
  2536   0036B2  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2537   0036B4  0ED0               	movlw	208
  2538   0036B6  6E40               	movwf	reverseStraight@delayMs^0,c
  2539   0036B8  EF73  F01B         	goto	l6726
  2540   0036BC                     l6722:
  2541   0036BC  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2542   0036BE  EF6F  F01B         	goto	u6560
  2543   0036C2  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2544   0036C4  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2545   0036C6  E109               	bnz	u6561
  2546   0036C8  0EB8               	movlw	184
  2547   0036CA  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2548   0036CC  0E0B               	movlw	11
  2549   0036CE  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2550   0036D0  B0D8               	btfsc	status,0,c
  2551   0036D2  EF6D  F01B         	goto	u6561
  2552   0036D6  EF6F  F01B         	goto	u6560
  2553   0036DA                     u6561:
  2554   0036DA  EF73  F01B         	goto	l6726
  2555   0036DE                     u6560:
  2556   0036DE  0E03               	movlw	3
  2557   0036E0  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2558   0036E2  0EE8               	movlw	232
  2559   0036E4  6E40               	movwf	reverseStraight@delayMs^0,c
  2560   0036E6                     l6726:
  2561                           
  2562                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2563   0036E6  0EEE               	movlw	low _motorL
  2564   0036E8  6E33               	movwf	fullSpeedAhead@mL^0,c
  2565   0036EA  0EE5               	movlw	low _motorR
  2566   0036EC  6E34               	movwf	fullSpeedAhead@mR^0,c
  2567   0036EE  EC06  F01C         	call	_fullSpeedAhead	;wreg free
  2568   0036F2                     
  2569                           ;return_func.c: 70:     customDelayMs(delayMs);
  2570   0036F2  C040  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2571   0036F6  C041  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2572   0036FA  ECAF  F021         	call	_customDelayMs	;wreg free
  2573   0036FE                     
  2574                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2575   0036FE  0EEE               	movlw	low _motorL
  2576   003700  6E14               	movwf	stop@mL^0,c
  2577   003702  0EE5               	movlw	low _motorR
  2578   003704  6E15               	movwf	stop@mR^0,c
  2579   003706  ECB9  F01E         	call	_stop	;wreg free
  2580   00370A                     
  2581                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2582   00370A  0E19               	movlw	25
  2583   00370C  6E3F               	movwf	(??_reverseStraight+1)^0,c
  2584   00370E  0E5A               	movlw	90
  2585   003710  6E3E               	movwf	??_reverseStraight^0,c
  2586   003712  0EB2               	movlw	178
  2587   003714                     u7057:
  2588   003714  2EE8               	decfsz	wreg,f,c
  2589   003716  D7FE               	bra	u7057
  2590   003718  2E3E               	decfsz	??_reverseStraight^0,f,c
  2591   00371A  D7FC               	bra	u7057
  2592   00371C  2E3F               	decfsz	(??_reverseStraight+1)^0,f,c
  2593   00371E  D7FA               	bra	u7057
  2594   003720  0012               	return		;funcret
  2595   003722                     __end_of_reverseStraight:
  2596                           	callstack 0
  2597                           
  2598 ;; *************** function _fullSpeedAhead *****************
  2599 ;; Defined at:
  2600 ;;		line 144 in file "dc_motor.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  mL              1   50[COMRAM] PTR struct DC_motor
  2603 ;;		 -> motorL(9), 
  2604 ;;  mR              1   51[COMRAM] PTR struct DC_motor
  2605 ;;		 -> motorR(9), 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  power           2   53[COMRAM] int 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2620 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;Total ram usage:        5 bytes
  2622 ;; Hardware stack levels used: 1
  2623 ;; Hardware stack levels required when called: 3
  2624 ;; This function calls:
  2625 ;;		___flmul
  2626 ;;		___fltol
  2627 ;;		___xxtofl
  2628 ;;		_setMotorPWM
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;;		_reverseStraight
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text5
  2636   00380C                     __ptext5:
  2637                           	callstack 0
  2638   00380C                     _fullSpeedAhead:
  2639                           	callstack 25
  2640   00380C                     
  2641                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2642   00380C  5033               	movf	fullSpeedAhead@mL^0,w,c
  2643   00380E  6ED9               	movwf	fsr2l,c
  2644   003810  6ADA               	clrf	fsr2h,c
  2645   003812  0E01               	movlw	1
  2646   003814  26D9               	addwf	fsr2l,f,c
  2647   003816  0E01               	movlw	1
  2648   003818  6EDF               	movwf	indf2,c
  2649                           
  2650                           ;dc_motor.c: 148:     mR->direction = 1;
  2651   00381A  5034               	movf	fullSpeedAhead@mR^0,w,c
  2652   00381C  6ED9               	movwf	fsr2l,c
  2653   00381E  6ADA               	clrf	fsr2h,c
  2654   003820  0E01               	movlw	1
  2655   003822  26D9               	addwf	fsr2l,f,c
  2656   003824  0E01               	movlw	1
  2657   003826  6EDF               	movwf	indf2,c
  2658   003828                     
  2659                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2660   003828  0E00               	movlw	0
  2661   00382A  6E37               	movwf	(fullSpeedAhead@power+1)^0,c
  2662   00382C  0E00               	movlw	0
  2663   00382E  6E36               	movwf	fullSpeedAhead@power^0,c
  2664   003830                     l6230:
  2665                           
  2666                           ;dc_motor.c: 151:         mL->power = power;
  2667   003830  5033               	movf	fullSpeedAhead@mL^0,w,c
  2668   003832  6ED9               	movwf	fsr2l,c
  2669   003834  6ADA               	clrf	fsr2h,c
  2670   003836  C036  FFDF         	movff	fullSpeedAhead@power,indf2
  2671   00383A                     
  2672                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2673   00383A  5034               	movf	fullSpeedAhead@mR^0,w,c
  2674   00383C  6ED9               	movwf	fsr2l,c
  2675   00383E  6ADA               	clrf	fsr2h,c
  2676   003840  0E66               	movlw	102
  2677   003842  6E14               	movwf	___flmul@a^0,c
  2678   003844  0E66               	movlw	102
  2679   003846  6E15               	movwf	(___flmul@a+1)^0,c
  2680   003848  0E86               	movlw	134
  2681   00384A  6E16               	movwf	(___flmul@a+2)^0,c
  2682   00384C  0E3F               	movlw	63
  2683   00384E  6E17               	movwf	(___flmul@a+3)^0,c
  2684   003850  C036  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2685   003854  C037  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2686   003858  0E00               	movlw	0
  2687   00385A  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2688   00385C  0EFF               	movlw	-1
  2689   00385E  6E04               	movwf	(___xxtofl@val+2)^0,c
  2690   003860  6E05               	movwf	(___xxtofl@val+3)^0,c
  2691   003862  0E01               	movlw	1
  2692   003864  EC55  F015         	call	___xxtofl
  2693   003868  C002  F010         	movff	?___xxtofl,___flmul@b
  2694   00386C  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2695   003870  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2696   003874  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2697   003878  EC8C  F00D         	call	___flmul	;wreg free
  2698   00387C  C010  F029         	movff	?___flmul,___fltol@f1
  2699   003880  C011  F02A         	movff	?___flmul+1,___fltol@f1+1
  2700   003884  C012  F02B         	movff	?___flmul+2,___fltol@f1+2
  2701   003888  C013  F02C         	movff	?___flmul+3,___fltol@f1+3
  2702   00388C  EC16  F01A         	call	___fltol	;wreg free
  2703   003890  5029               	movf	?___fltol^0,w,c
  2704   003892  6EDF               	movwf	indf2,c
  2705   003894                     
  2706                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2707   003894  C033  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2708   003898  EC5E  F018         	call	_setMotorPWM	;wreg free
  2709   00389C                     
  2710                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2711   00389C  C034  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2712   0038A0  EC5E  F018         	call	_setMotorPWM	;wreg free
  2713   0038A4                     
  2714                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2715   0038A4  0E0B               	movlw	11
  2716   0038A6  6E35               	movwf	??_fullSpeedAhead^0,c
  2717   0038A8  0E62               	movlw	98
  2718   0038AA                     u7067:
  2719   0038AA  2EE8               	decfsz	wreg,f,c
  2720   0038AC  D7FE               	bra	u7067
  2721   0038AE  2E35               	decfsz	??_fullSpeedAhead^0,f,c
  2722   0038B0  D7FC               	bra	u7067
  2723   0038B2  D000               	nop2	
  2724   0038B4                     
  2725                           ;dc_motor.c: 160:     }
  2726   0038B4  4A36               	infsnz	fullSpeedAhead@power^0,f,c
  2727   0038B6  2A37               	incf	(fullSpeedAhead@power+1)^0,f,c
  2728   0038B8  BE37               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2729   0038BA  EF68  F01C         	goto	u6001
  2730   0038BE  5037               	movf	(fullSpeedAhead@power+1)^0,w,c
  2731   0038C0  E109               	bnz	u6000
  2732   0038C2  0E33               	movlw	51
  2733   0038C4  5C36               	subwf	fullSpeedAhead@power^0,w,c
  2734   0038C6  A0D8               	btfss	status,0,c
  2735   0038C8  EF68  F01C         	goto	u6001
  2736   0038CC  EF6A  F01C         	goto	u6000
  2737   0038D0                     u6001:
  2738   0038D0  EF18  F01C         	goto	l6230
  2739   0038D4                     u6000:
  2740   0038D4  0012               	return		;funcret
  2741   0038D6                     __end_of_fullSpeedAhead:
  2742                           	callstack 0
  2743                           
  2744 ;; *************** function _customDelayMs *****************
  2745 ;; Defined at:
  2746 ;;		line 52 in file "return_func.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  i               2    4[COMRAM] unsigned int 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2760 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2763 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2764 ;;Total ram usage:        5 bytes
  2765 ;; Hardware stack levels used: 1
  2766 ;; Hardware stack levels required when called: 1
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_reverseStraight
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text6
  2775   00435E                     __ptext6:
  2776                           	callstack 0
  2777   00435E                     _customDelayMs:
  2778                           	callstack 27
  2779   00435E                     
  2780                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2781   00435E  0E00               	movlw	0
  2782   004360  6E06               	movwf	(customDelayMs@i+1)^0,c
  2783   004362  0E00               	movlw	0
  2784   004364  6E05               	movwf	customDelayMs@i^0,c
  2785   004366  EFBF  F021         	goto	l711
  2786   00436A                     l6292:
  2787                           
  2788                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2789   00436A  0E15               	movlw	21
  2790   00436C  6E04               	movwf	??_customDelayMs^0,c
  2791   00436E  0EC6               	movlw	198
  2792   004370                     u7077:
  2793   004370  2EE8               	decfsz	wreg,f,c
  2794   004372  D7FE               	bra	u7077
  2795   004374  2E04               	decfsz	??_customDelayMs^0,f,c
  2796   004376  D7FC               	bra	u7077
  2797   004378  D000               	nop2	
  2798   00437A                     
  2799                           ;return_func.c: 55:     }
  2800   00437A  4A05               	infsnz	customDelayMs@i^0,f,c
  2801   00437C  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2802   00437E                     l711:
  2803   00437E  5002               	movf	customDelayMs@milliseconds^0,w,c
  2804   004380  5C05               	subwf	customDelayMs@i^0,w,c
  2805   004382  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2806   004384  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2807   004386  A0D8               	btfss	status,0,c
  2808   004388  EFC8  F021         	goto	u6021
  2809   00438C  EFCA  F021         	goto	u6020
  2810   004390                     u6021:
  2811   004390  EFB5  F021         	goto	l6292
  2812   004394                     u6020:
  2813   004394  0012               	return		;funcret
  2814   004396                     __end_of_customDelayMs:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _moveWhite *****************
  2818 ;; Defined at:
  2819 ;;		line 321 in file "dc_motor.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2822 ;;		 -> motorL(9), 
  2823 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2824 ;;		 -> motorR(9), 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;Total ram usage:        4 bytes
  2841 ;; Hardware stack levels used: 1
  2842 ;; Hardware stack levels required when called: 5
  2843 ;; This function calls:
  2844 ;;		_backHalf
  2845 ;;		_turn180
  2846 ;; This function is called by:
  2847 ;;		_returnHome
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text7
  2852   004432                     __ptext7:
  2853                           	callstack 0
  2854   004432                     _moveWhite:
  2855                           	callstack 24
  2856   004432                     
  2857                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2858   004432  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2859   004436  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2860   00443A  EC8E  F023         	call	_backHalf	;wreg free
  2861   00443E                     
  2862                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2863   00443E  0E29               	movlw	41
  2864   004440  6E20               	movwf	(??_moveWhite+1)^0,c
  2865   004442  0E96               	movlw	150
  2866   004444  6E1F               	movwf	??_moveWhite^0,c
  2867   004446  0E7F               	movlw	127
  2868   004448                     u7087:
  2869   004448  2EE8               	decfsz	wreg,f,c
  2870   00444A  D7FE               	bra	u7087
  2871   00444C  2E1F               	decfsz	??_moveWhite^0,f,c
  2872   00444E  D7FC               	bra	u7087
  2873   004450  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2874   004452  D7FA               	bra	u7087
  2875   004454  0000               	nop	
  2876   004456                     
  2877                           ;dc_motor.c: 326:     turn180(mL,mR);
  2878   004456  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2879   00445A  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2880   00445E  EC2C  F023         	call	_turn180	;wreg free
  2881   004462  0012               	return		;funcret
  2882   004464                     __end_of_moveWhite:
  2883                           	callstack 0
  2884                           
  2885 ;; *************** function ___lmul *****************
  2886 ;; Defined at:
  2887 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  multiplier      4    1[COMRAM] unsigned long 
  2890 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  product         4    9[COMRAM] unsigned long 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  4    1[COMRAM] unsigned long 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2905 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2906 ;;Total ram usage:       12 bytes
  2907 ;; Hardware stack levels used: 1
  2908 ;; Hardware stack levels required when called: 1
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_returnHome
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text8
  2917   003FE6                     __ptext8:
  2918                           	callstack 0
  2919   003FE6                     ___lmul:
  2920                           	callstack 28
  2921   003FE6  0E00               	movlw	0
  2922   003FE8  6E0A               	movwf	___lmul@product^0,c
  2923   003FEA  0E00               	movlw	0
  2924   003FEC  6E0B               	movwf	(___lmul@product+1)^0,c
  2925   003FEE  0E00               	movlw	0
  2926   003FF0  6E0C               	movwf	(___lmul@product+2)^0,c
  2927   003FF2  0E00               	movlw	0
  2928   003FF4  6E0D               	movwf	(___lmul@product+3)^0,c
  2929   003FF6                     l6736:
  2930   003FF6  A002               	btfss	___lmul@multiplier^0,0,c
  2931   003FF8  EF00  F020         	goto	u6571
  2932   003FFC  EF02  F020         	goto	u6570
  2933   004000                     u6571:
  2934   004000  EF0A  F020         	goto	l6740
  2935   004004                     u6570:
  2936   004004  5006               	movf	___lmul@multiplicand^0,w,c
  2937   004006  260A               	addwf	___lmul@product^0,f,c
  2938   004008  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  2939   00400A  220B               	addwfc	(___lmul@product+1)^0,f,c
  2940   00400C  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  2941   00400E  220C               	addwfc	(___lmul@product+2)^0,f,c
  2942   004010  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  2943   004012  220D               	addwfc	(___lmul@product+3)^0,f,c
  2944   004014                     l6740:
  2945   004014  90D8               	bcf	status,0,c
  2946   004016  3606               	rlcf	___lmul@multiplicand^0,f,c
  2947   004018  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2948   00401A  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2949   00401C  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2950   00401E  90D8               	bcf	status,0,c
  2951   004020  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  2952   004022  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  2953   004024  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  2954   004026  3202               	rrcf	___lmul@multiplier^0,f,c
  2955   004028  5002               	movf	___lmul@multiplier^0,w,c
  2956   00402A  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  2957   00402C  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  2958   00402E  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  2959   004030  A4D8               	btfss	status,2,c
  2960   004032  EF1D  F020         	goto	u6581
  2961   004036  EF1F  F020         	goto	u6580
  2962   00403A                     u6581:
  2963   00403A  EFFB  F01F         	goto	l6736
  2964   00403E                     u6580:
  2965   00403E  C00A  F002         	movff	___lmul@product,?___lmul
  2966   004042  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  2967   004046  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  2968   00404A  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  2969   00404E  0012               	return		;funcret
  2970   004050                     __end_of___lmul:
  2971                           	callstack 0
  2972                           
  2973 ;; *************** function ___aldiv *****************
  2974 ;; Defined at:
  2975 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  dividend        4   13[COMRAM] long 
  2978 ;;  divisor         4   17[COMRAM] long 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  quotient        4   23[COMRAM] long 
  2981 ;;  sign            1   22[COMRAM] unsigned char 
  2982 ;;  counter         1   21[COMRAM] unsigned char 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  4   13[COMRAM] long 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, status,0
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2992 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2996 ;;Total ram usage:       14 bytes
  2997 ;; Hardware stack levels used: 1
  2998 ;; Hardware stack levels required when called: 1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_returnHome
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text9
  3007   003320                     __ptext9:
  3008                           	callstack 0
  3009   003320                     ___aldiv:
  3010                           	callstack 28
  3011   003320  0E00               	movlw	0
  3012   003322  6E17               	movwf	___aldiv@sign^0,c
  3013   003324  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  3014   003326  EF99  F019         	goto	u6590
  3015   00332A  EF97  F019         	goto	u6591
  3016   00332E                     u6591:
  3017   00332E  EFA3  F019         	goto	l6752
  3018   003332                     u6590:
  3019   003332  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  3020   003334  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  3021   003336  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  3022   003338  6C12               	negf	___aldiv@divisor^0,c
  3023   00333A  0E00               	movlw	0
  3024   00333C  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  3025   00333E  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  3026   003340  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  3027   003342  0E01               	movlw	1
  3028   003344  6E17               	movwf	___aldiv@sign^0,c
  3029   003346                     l6752:
  3030   003346  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  3031   003348  EFAA  F019         	goto	u6600
  3032   00334C  EFA8  F019         	goto	u6601
  3033   003350                     u6601:
  3034   003350  EFB4  F019         	goto	l6758
  3035   003354                     u6600:
  3036   003354  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  3037   003356  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  3038   003358  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  3039   00335A  6C0E               	negf	___aldiv@dividend^0,c
  3040   00335C  0E00               	movlw	0
  3041   00335E  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  3042   003360  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  3043   003362  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  3044   003364  0E01               	movlw	1
  3045   003366  1A17               	xorwf	___aldiv@sign^0,f,c
  3046   003368                     l6758:
  3047   003368  0E00               	movlw	0
  3048   00336A  6E18               	movwf	___aldiv@quotient^0,c
  3049   00336C  0E00               	movlw	0
  3050   00336E  6E19               	movwf	(___aldiv@quotient+1)^0,c
  3051   003370  0E00               	movlw	0
  3052   003372  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  3053   003374  0E00               	movlw	0
  3054   003376  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  3055   003378  5012               	movf	___aldiv@divisor^0,w,c
  3056   00337A  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  3057   00337C  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  3058   00337E  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  3059   003380  B4D8               	btfsc	status,2,c
  3060   003382  EFC5  F019         	goto	u6611
  3061   003386  EFC7  F019         	goto	u6610
  3062   00338A                     u6611:
  3063   00338A  EFFD  F019         	goto	l6780
  3064   00338E                     u6610:
  3065   00338E  0E01               	movlw	1
  3066   003390  6E16               	movwf	___aldiv@counter^0,c
  3067   003392  EFD1  F019         	goto	l6766
  3068   003396                     l6764:
  3069   003396  90D8               	bcf	status,0,c
  3070   003398  3612               	rlcf	___aldiv@divisor^0,f,c
  3071   00339A  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  3072   00339C  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  3073   00339E  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  3074   0033A0  2A16               	incf	___aldiv@counter^0,f,c
  3075   0033A2                     l6766:
  3076   0033A2  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  3077   0033A4  EFD6  F019         	goto	u6621
  3078   0033A8  EFD8  F019         	goto	u6620
  3079   0033AC                     u6621:
  3080   0033AC  EFCB  F019         	goto	l6764
  3081   0033B0                     u6620:
  3082   0033B0                     l6768:
  3083   0033B0  90D8               	bcf	status,0,c
  3084   0033B2  3618               	rlcf	___aldiv@quotient^0,f,c
  3085   0033B4  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  3086   0033B6  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  3087   0033B8  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  3088   0033BA  5012               	movf	___aldiv@divisor^0,w,c
  3089   0033BC  5C0E               	subwf	___aldiv@dividend^0,w,c
  3090   0033BE  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3091   0033C0  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  3092   0033C2  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3093   0033C4  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  3094   0033C6  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3095   0033C8  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  3096   0033CA  A0D8               	btfss	status,0,c
  3097   0033CC  EFEA  F019         	goto	u6631
  3098   0033D0  EFEC  F019         	goto	u6630
  3099   0033D4                     u6631:
  3100   0033D4  EFF5  F019         	goto	l6776
  3101   0033D8                     u6630:
  3102   0033D8  5012               	movf	___aldiv@divisor^0,w,c
  3103   0033DA  5E0E               	subwf	___aldiv@dividend^0,f,c
  3104   0033DC  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3105   0033DE  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  3106   0033E0  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3107   0033E2  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3108   0033E4  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3109   0033E6  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3110   0033E8  8018               	bsf	___aldiv@quotient^0,0,c
  3111   0033EA                     l6776:
  3112   0033EA  90D8               	bcf	status,0,c
  3113   0033EC  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3114   0033EE  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3115   0033F0  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3116   0033F2  3212               	rrcf	___aldiv@divisor^0,f,c
  3117   0033F4  2E16               	decfsz	___aldiv@counter^0,f,c
  3118   0033F6  EFD8  F019         	goto	l6768
  3119   0033FA                     l6780:
  3120   0033FA  5017               	movf	___aldiv@sign^0,w,c
  3121   0033FC  B4D8               	btfsc	status,2,c
  3122   0033FE  EF03  F01A         	goto	u6641
  3123   003402  EF05  F01A         	goto	u6640
  3124   003406                     u6641:
  3125   003406  EF0D  F01A         	goto	l6784
  3126   00340A                     u6640:
  3127   00340A  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3128   00340C  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3129   00340E  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3130   003410  6C18               	negf	___aldiv@quotient^0,c
  3131   003412  0E00               	movlw	0
  3132   003414  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3133   003416  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3134   003418  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3135   00341A                     l6784:
  3136   00341A  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3137   00341E  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3138   003422  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3139   003426  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3140   00342A  0012               	return		;funcret
  3141   00342C                     __end_of___aldiv:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _reading_hue *****************
  3145 ;; Defined at:
  3146 ;;		line 91 in file "color.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  cCurr           1   54[COMRAM] PTR struct colors
  3149 ;;		 -> colorCurrent(10), 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  led_state      50    0        unsigned char [50]
  3152 ;;  hue             2   58[COMRAM] unsigned int 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  2   54[COMRAM] unsigned int 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3166 ;;Total ram usage:        6 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; Hardware stack levels required when called: 4
  3169 ;; This function calls:
  3170 ;;		_color_read_Blue
  3171 ;;		_color_read_Clear
  3172 ;;		_color_read_Green
  3173 ;;		_color_read_Red
  3174 ;;		_convert_rgb2hue
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text10
  3181   003722                     __ptext10:
  3182                           	callstack 0
  3183   003722                     _reading_hue:
  3184                           	callstack 26
  3185   003722                     
  3186                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3187   003722  807F               	bsf	127,0,c	;volatile
  3188                           
  3189                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3190   003724  9E7D               	bcf	125,7,c	;volatile
  3191                           
  3192                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3193   003726  9679               	bcf	121,3,c	;volatile
  3194   003728                     
  3195                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3196   003728  0E29               	movlw	41
  3197   00372A  6E3A               	movwf	(??_reading_hue+1)^0,c
  3198   00372C  0E96               	movlw	150
  3199   00372E  6E39               	movwf	??_reading_hue^0,c
  3200   003730  0E7F               	movlw	127
  3201   003732                     u7097:
  3202   003732  2EE8               	decfsz	wreg,f,c
  3203   003734  D7FE               	bra	u7097
  3204   003736  2E39               	decfsz	??_reading_hue^0,f,c
  3205   003738  D7FC               	bra	u7097
  3206   00373A  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3207   00373C  D7FA               	bra	u7097
  3208   00373E  0000               	nop	
  3209   003740                     
  3210                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3211   003740  EC28  F020         	call	_color_read_Red	;wreg free
  3212   003744  5037               	movf	reading_hue@cCurr^0,w,c
  3213   003746  6ED9               	movwf	fsr2l,c
  3214   003748  6ADA               	clrf	fsr2h,c
  3215   00374A  C006  FFDE         	movff	?_color_read_Red,postinc2
  3216   00374E  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3217   003752                     
  3218                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3219   003752  907F               	bcf	127,0,c	;volatile
  3220   003754                     
  3221                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3222   003754  8E7D               	bsf	125,7,c	;volatile
  3223   003756                     
  3224                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3225   003756  9679               	bcf	121,3,c	;volatile
  3226   003758                     
  3227                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3228   003758  0E29               	movlw	41
  3229   00375A  6E3A               	movwf	(??_reading_hue+1)^0,c
  3230   00375C  0E96               	movlw	150
  3231   00375E  6E39               	movwf	??_reading_hue^0,c
  3232   003760  0E7F               	movlw	127
  3233   003762                     u7107:
  3234   003762  2EE8               	decfsz	wreg,f,c
  3235   003764  D7FE               	bra	u7107
  3236   003766  2E39               	decfsz	??_reading_hue^0,f,c
  3237   003768  D7FC               	bra	u7107
  3238   00376A  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3239   00376C  D7FA               	bra	u7107
  3240   00376E  0000               	nop	
  3241                           
  3242                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3243   003770  EC50  F020         	call	_color_read_Green	;wreg free
  3244   003774  5037               	movf	reading_hue@cCurr^0,w,c
  3245   003776  6ED9               	movwf	fsr2l,c
  3246   003778  6ADA               	clrf	fsr2h,c
  3247   00377A  0E02               	movlw	2
  3248   00377C  26D9               	addwf	fsr2l,f,c
  3249   00377E  C006  FFDE         	movff	?_color_read_Green,postinc2
  3250   003782  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3251   003786                     
  3252                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3253   003786  907F               	bcf	127,0,c	;volatile
  3254   003788                     
  3255                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3256   003788  9E7D               	bcf	125,7,c	;volatile
  3257   00378A                     
  3258                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3259   00378A  8679               	bsf	121,3,c	;volatile
  3260   00378C                     
  3261                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3262   00378C  0E29               	movlw	41
  3263   00378E  6E3A               	movwf	(??_reading_hue+1)^0,c
  3264   003790  0E96               	movlw	150
  3265   003792  6E39               	movwf	??_reading_hue^0,c
  3266   003794  0E7F               	movlw	127
  3267   003796                     u7117:
  3268   003796  2EE8               	decfsz	wreg,f,c
  3269   003798  D7FE               	bra	u7117
  3270   00379A  2E39               	decfsz	??_reading_hue^0,f,c
  3271   00379C  D7FC               	bra	u7117
  3272   00379E  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3273   0037A0  D7FA               	bra	u7117
  3274   0037A2  0000               	nop	
  3275   0037A4                     
  3276                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3277   0037A4  ECA0  F020         	call	_color_read_Blue	;wreg free
  3278   0037A8  5037               	movf	reading_hue@cCurr^0,w,c
  3279   0037AA  6ED9               	movwf	fsr2l,c
  3280   0037AC  6ADA               	clrf	fsr2h,c
  3281   0037AE  0E04               	movlw	4
  3282   0037B0  26D9               	addwf	fsr2l,f,c
  3283   0037B2  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3284   0037B6  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3285   0037BA                     
  3286                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3287   0037BA  807F               	bsf	127,0,c	;volatile
  3288   0037BC                     
  3289                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3290   0037BC  8E7D               	bsf	125,7,c	;volatile
  3291   0037BE                     
  3292                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3293   0037BE  8679               	bsf	121,3,c	;volatile
  3294                           
  3295                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3296   0037C0  0E29               	movlw	41
  3297   0037C2  6E3A               	movwf	(??_reading_hue+1)^0,c
  3298   0037C4  0E96               	movlw	150
  3299   0037C6  6E39               	movwf	??_reading_hue^0,c
  3300   0037C8  0E7F               	movlw	127
  3301   0037CA                     u7127:
  3302   0037CA  2EE8               	decfsz	wreg,f,c
  3303   0037CC  D7FE               	bra	u7127
  3304   0037CE  2E39               	decfsz	??_reading_hue^0,f,c
  3305   0037D0  D7FC               	bra	u7127
  3306   0037D2  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3307   0037D4  D7FA               	bra	u7127
  3308   0037D6  0000               	nop	
  3309   0037D8                     
  3310                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3311   0037D8  EC78  F020         	call	_color_read_Clear	;wreg free
  3312   0037DC  5037               	movf	reading_hue@cCurr^0,w,c
  3313   0037DE  6ED9               	movwf	fsr2l,c
  3314   0037E0  6ADA               	clrf	fsr2h,c
  3315   0037E2  0E06               	movlw	6
  3316   0037E4  26D9               	addwf	fsr2l,f,c
  3317   0037E6  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3318   0037EA  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3319   0037EE                     
  3320                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3321   0037EE  0EDB               	movlw	low _colorCalibration
  3322   0037F0  6E33               	movwf	convert_rgb2hue@cMax^0,c
  3323   0037F2  0ED1               	movlw	low _colorCurrent
  3324   0037F4  6E34               	movwf	convert_rgb2hue@cCurr^0,c
  3325   0037F6  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3326   0037FA  C033  F03B         	movff	?_convert_rgb2hue,reading_hue@hue
  3327   0037FE  C034  F03C         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3328   003802                     
  3329                           ;color.c: 127:     return hue;
  3330   003802  C03B  F037         	movff	reading_hue@hue,?_reading_hue
  3331   003806  C03C  F038         	movff	reading_hue@hue+1,?_reading_hue+1
  3332   00380A  0012               	return		;funcret
  3333   00380C                     __end_of_reading_hue:
  3334                           	callstack 0
  3335                           
  3336 ;; *************** function _convert_rgb2hue *****************
  3337 ;; Defined at:
  3338 ;;		line 226 in file "color.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  cMax            1   50[COMRAM] PTR struct colors
  3341 ;;		 -> colorCalibration(10), 
  3342 ;;  cCurr           1   51[COMRAM] PTR struct colors
  3343 ;;		 -> colorCurrent(10), 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  c_char         20    0        unsigned char [20]
  3346 ;;  b               4   72[BANK0 ] float 
  3347 ;;  g               4   68[BANK0 ] float 
  3348 ;;  r               4   64[BANK0 ] float 
  3349 ;;  hue             4   60[BANK0 ] float 
  3350 ;;  max             4   56[BANK0 ] float 
  3351 ;;  diff            4   52[BANK0 ] float 
  3352 ;;  min             4   48[BANK0 ] float 
  3353 ;;  clearmax        4   28[BANK0 ] float 
  3354 ;;  clearcurrent    4   24[BANK0 ] float 
  3355 ;;  bluemax         4   20[BANK0 ] float 
  3356 ;;  bluecurrent     4   16[BANK0 ] float 
  3357 ;;  greenmax        4   12[BANK0 ] float 
  3358 ;;  greencurrent    4    8[BANK0 ] float 
  3359 ;;  redmax          4    4[BANK0 ] float 
  3360 ;;  redcurrent      4    0[BANK0 ] float 
  3361 ;;  c               4    0        float 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  2   50[COMRAM] unsigned int 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;Total ram usage:       80 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; Hardware stack levels required when called: 3
  3378 ;; This function calls:
  3379 ;;		___fladd
  3380 ;;		___fldiv
  3381 ;;		___fleq
  3382 ;;		___flge
  3383 ;;		___flmul
  3384 ;;		___flsub
  3385 ;;		___fltol
  3386 ;;		___xxtofl
  3387 ;; This function is called by:
  3388 ;;		_reading_hue
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text11
  3393   000EC6                     __ptext11:
  3394                           	callstack 0
  3395   000EC6                     _convert_rgb2hue:
  3396                           	callstack 26
  3397   000EC6                     
  3398                           ;color.c: 226: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 227: {;color.c: 228:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 229:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3399   000EC6  0E00               	movlw	0
  3400   000EC8  0100               	movlb	0	; () banked
  3401   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3402   000ECC  0E00               	movlw	0
  3403   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3404   000ED0  0E00               	movlw	0
  3405   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3406   000ED4  0E00               	movlw	0
  3407   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3408   000ED8                     
  3409                           ; BSR set to: 0
  3410                           ;color.c: 231:     redcurrent = cCurr->red;
  3411   000ED8  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3412   000EDA  6ED9               	movwf	fsr2l,c
  3413   000EDC  6ADA               	clrf	fsr2h,c
  3414   000EDE  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3415   000EE2  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3416   000EE6  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3417   000EEA  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3418   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3419   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3420   000EF2  0E00               	movlw	0
  3421   000EF4  EC55  F015         	call	___xxtofl
  3422   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3423   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3424   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3425   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3426   000F08                     
  3427                           ;color.c: 232:     redmax = cMax->red;
  3428   000F08  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3429   000F0A  6ED9               	movwf	fsr2l,c
  3430   000F0C  6ADA               	clrf	fsr2h,c
  3431   000F0E  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3432   000F12  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3433   000F16  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3434   000F1A  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3435   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3436   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3437   000F22  0E00               	movlw	0
  3438   000F24  EC55  F015         	call	___xxtofl
  3439   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3440   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3441   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3442   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3443   000F38                     
  3444                           ;color.c: 233:     greencurrent = cCurr->green;
  3445   000F38  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3446   000F3A  6ED9               	movwf	fsr2l,c
  3447   000F3C  6ADA               	clrf	fsr2h,c
  3448   000F3E  0E02               	movlw	2
  3449   000F40  26D9               	addwf	fsr2l,f,c
  3450   000F42  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3451   000F46  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3452   000F4A  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3453   000F4E  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3454   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3455   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3456   000F56  0E00               	movlw	0
  3457   000F58  EC55  F015         	call	___xxtofl
  3458   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3459   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3460   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3461   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3462   000F6C                     
  3463                           ;color.c: 234:     greenmax = cMax->green;
  3464   000F6C  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3465   000F6E  6ED9               	movwf	fsr2l,c
  3466   000F70  6ADA               	clrf	fsr2h,c
  3467   000F72  0E02               	movlw	2
  3468   000F74  26D9               	addwf	fsr2l,f,c
  3469   000F76  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3470   000F7A  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3471   000F7E  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3472   000F82  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3473   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3474   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3475   000F8A  0E00               	movlw	0
  3476   000F8C  EC55  F015         	call	___xxtofl
  3477   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3478   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3479   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3480   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3481   000FA0                     
  3482                           ;color.c: 235:     bluecurrent = cCurr->blue;
  3483   000FA0  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3484   000FA2  6ED9               	movwf	fsr2l,c
  3485   000FA4  6ADA               	clrf	fsr2h,c
  3486   000FA6  0E04               	movlw	4
  3487   000FA8  26D9               	addwf	fsr2l,f,c
  3488   000FAA  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3489   000FAE  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3490   000FB2  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3491   000FB6  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3492   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3493   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3494   000FBE  0E00               	movlw	0
  3495   000FC0  EC55  F015         	call	___xxtofl
  3496   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3497   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3498   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3499   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3500   000FD4                     
  3501                           ;color.c: 236:     bluemax = cMax->blue;
  3502   000FD4  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3503   000FD6  6ED9               	movwf	fsr2l,c
  3504   000FD8  6ADA               	clrf	fsr2h,c
  3505   000FDA  0E04               	movlw	4
  3506   000FDC  26D9               	addwf	fsr2l,f,c
  3507   000FDE  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3508   000FE2  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3509   000FE6  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3510   000FEA  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3511   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3512   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3513   000FF2  0E00               	movlw	0
  3514   000FF4  EC55  F015         	call	___xxtofl
  3515   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3516   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3517   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3518   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3519   001008                     
  3520                           ;color.c: 237:     clearcurrent = cCurr->clear;
  3521   001008  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3522   00100A  6ED9               	movwf	fsr2l,c
  3523   00100C  6ADA               	clrf	fsr2h,c
  3524   00100E  0E06               	movlw	6
  3525   001010  26D9               	addwf	fsr2l,f,c
  3526   001012  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3527   001016  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3528   00101A  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3529   00101E  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3530   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3531   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3532   001026  0E00               	movlw	0
  3533   001028  EC55  F015         	call	___xxtofl
  3534   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3535   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3536   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3537   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3538   00103C                     
  3539                           ;color.c: 238:     clearmax = cMax->clear;
  3540   00103C  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3541   00103E  6ED9               	movwf	fsr2l,c
  3542   001040  6ADA               	clrf	fsr2h,c
  3543   001042  0E06               	movlw	6
  3544   001044  26D9               	addwf	fsr2l,f,c
  3545   001046  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3546   00104A  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3547   00104E  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3548   001052  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3549   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3550   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3551   00105A  0E00               	movlw	0
  3552   00105C  EC55  F015         	call	___xxtofl
  3553   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3554   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3555   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3556   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3557   001070  C078  F01A         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3558   001074  C079  F01B         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3559   001078  C07A  F01C         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3560   00107C  C07B  F01D         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3561   001080  C07C  F01E         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3562   001084  C07D  F01F         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3563   001088  C07E  F020         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3564   00108C  C07F  F021         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3565   001090  ECA1  F00F         	call	___fldiv	;wreg free
  3566   001094                     
  3567                           ;color.c: 241:     char c_char[20];;color.c: 247:     r = redcurrent/redmax;
  3568   001094  C060  F01A         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3569   001098  C061  F01B         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3570   00109C  C062  F01C         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3571   0010A0  C063  F01D         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3572   0010A4  C064  F01E         	movff	convert_rgb2hue@redmax,___fldiv@a
  3573   0010A8  C065  F01F         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3574   0010AC  C066  F020         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3575   0010B0  C067  F021         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3576   0010B4  ECA1  F00F         	call	___fldiv	;wreg free
  3577   0010B8  C01A  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3578   0010BC  C01B  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3579   0010C0  C01C  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3580   0010C4  C01D  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3581   0010C8                     
  3582                           ;color.c: 248:     g = greencurrent/greenmax;
  3583   0010C8  C068  F01A         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3584   0010CC  C069  F01B         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3585   0010D0  C06A  F01C         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3586   0010D4  C06B  F01D         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3587   0010D8  C06C  F01E         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3588   0010DC  C06D  F01F         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3589   0010E0  C06E  F020         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3590   0010E4  C06F  F021         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3591   0010E8  ECA1  F00F         	call	___fldiv	;wreg free
  3592   0010EC  C01A  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3593   0010F0  C01B  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3594   0010F4  C01C  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3595   0010F8  C01D  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3596   0010FC                     
  3597                           ;color.c: 249:     b = bluecurrent/bluemax;
  3598   0010FC  C070  F01A         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3599   001100  C071  F01B         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3600   001104  C072  F01C         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3601   001108  C073  F01D         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3602   00110C  C074  F01E         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3603   001110  C075  F01F         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3604   001114  C076  F020         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3605   001118  C077  F021         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3606   00111C  ECA1  F00F         	call	___fldiv	;wreg free
  3607   001120  C01A  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3608   001124  C01B  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3609   001128  C01C  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3610   00112C  C01D  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3611   001130                     
  3612                           ;color.c: 251:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3613   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3614   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3615   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3616   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3617   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3618   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3619   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3620   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3621   001150  EC99  F01A         	call	___flge	;wreg free
  3622   001154  A0D8               	btfss	status,0,c
  3623   001156  EFAF  F008         	goto	u6351
  3624   00115A  EFB1  F008         	goto	u6350
  3625   00115E                     u6351:
  3626   00115E  EFE6  F008         	goto	l6558
  3627   001162                     u6350:
  3628   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3629   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3630   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3631   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3632   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3633   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3634   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3635   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3636   001182  EC99  F01A         	call	___flge	;wreg free
  3637   001186  A0D8               	btfss	status,0,c
  3638   001188  EFC8  F008         	goto	u6361
  3639   00118C  EFCA  F008         	goto	u6360
  3640   001190                     u6361:
  3641   001190  EFD4  F008         	goto	l128
  3642   001194                     u6360:
  3643   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$433
  3644   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$433+1
  3645   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$433+2
  3646   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$433+3
  3647   0011A4  EFDC  F008         	goto	l130
  3648   0011A8                     l128:
  3649   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$433
  3650   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$433+1
  3651   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$433+2
  3652   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$433+3
  3653   0011B8                     l130:
  3654   0011B8  C080  F090         	movff	_convert_rgb2hue$433,convert_rgb2hue@min
  3655   0011BC  C081  F091         	movff	_convert_rgb2hue$433+1,convert_rgb2hue@min+1
  3656   0011C0  C082  F092         	movff	_convert_rgb2hue$433+2,convert_rgb2hue@min+2
  3657   0011C4  C083  F093         	movff	_convert_rgb2hue$433+3,convert_rgb2hue@min+3
  3658   0011C8  EF19  F009         	goto	l6562
  3659   0011CC                     l6558:
  3660   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3661   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3662   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3663   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3664   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3665   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3666   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3667   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3668   0011EC  EC99  F01A         	call	___flge	;wreg free
  3669   0011F0  A0D8               	btfss	status,0,c
  3670   0011F2  EFFD  F008         	goto	u6371
  3671   0011F6  EFFF  F008         	goto	u6370
  3672   0011FA                     u6371:
  3673   0011FA  EF09  F009         	goto	l132
  3674   0011FE                     u6370:
  3675   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$434
  3676   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$434+1
  3677   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$434+2
  3678   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$434+3
  3679   00120E  EF11  F009         	goto	l134
  3680   001212                     l132:
  3681   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$434
  3682   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$434+1
  3683   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$434+2
  3684   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$434+3
  3685   001222                     l134:
  3686   001222  C084  F090         	movff	_convert_rgb2hue$434,convert_rgb2hue@min
  3687   001226  C085  F091         	movff	_convert_rgb2hue$434+1,convert_rgb2hue@min+1
  3688   00122A  C086  F092         	movff	_convert_rgb2hue$434+2,convert_rgb2hue@min+2
  3689   00122E  C087  F093         	movff	_convert_rgb2hue$434+3,convert_rgb2hue@min+3
  3690   001232                     l6562:
  3691                           
  3692                           ;color.c: 252:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3693   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3694   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3695   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3696   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3697   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3698   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3699   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3700   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3701   001252  EC99  F01A         	call	___flge	;wreg free
  3702   001256  A0D8               	btfss	status,0,c
  3703   001258  EF30  F009         	goto	u6381
  3704   00125C  EF32  F009         	goto	u6380
  3705   001260                     u6381:
  3706   001260  EF67  F009         	goto	l6568
  3707   001264                     u6380:
  3708   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3709   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3710   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3711   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3712   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3713   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3714   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3715   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3716   001284  EC99  F01A         	call	___flge	;wreg free
  3717   001288  A0D8               	btfss	status,0,c
  3718   00128A  EF49  F009         	goto	u6391
  3719   00128E  EF4B  F009         	goto	u6390
  3720   001292                     u6391:
  3721   001292  EF55  F009         	goto	l140
  3722   001296                     u6390:
  3723   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3724   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3725   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3726   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3727   0012A6  EF5D  F009         	goto	l142
  3728   0012AA                     l140:
  3729   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$435
  3730   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$435+1
  3731   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$435+2
  3732   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$435+3
  3733   0012BA                     l142:
  3734   0012BA  C088  F098         	movff	_convert_rgb2hue$435,convert_rgb2hue@max
  3735   0012BE  C089  F099         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@max+1
  3736   0012C2  C08A  F09A         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@max+2
  3737   0012C6  C08B  F09B         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@max+3
  3738   0012CA  EF9A  F009         	goto	l6572
  3739   0012CE                     l6568:
  3740   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3741   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3742   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3743   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3744   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3745   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3746   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3747   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3748   0012EE  EC99  F01A         	call	___flge	;wreg free
  3749   0012F2  A0D8               	btfss	status,0,c
  3750   0012F4  EF7E  F009         	goto	u6401
  3751   0012F8  EF80  F009         	goto	u6400
  3752   0012FC                     u6401:
  3753   0012FC  EF8A  F009         	goto	l144
  3754   001300                     u6400:
  3755   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$436
  3756   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$436+1
  3757   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$436+2
  3758   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$436+3
  3759   001310  EF92  F009         	goto	l146
  3760   001314                     l144:
  3761   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$436
  3762   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$436+1
  3763   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$436+2
  3764   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$436+3
  3765   001324                     l146:
  3766   001324  C08C  F098         	movff	_convert_rgb2hue$436,convert_rgb2hue@max
  3767   001328  C08D  F099         	movff	_convert_rgb2hue$436+1,convert_rgb2hue@max+1
  3768   00132C  C08E  F09A         	movff	_convert_rgb2hue$436+2,convert_rgb2hue@max+2
  3769   001330  C08F  F09B         	movff	_convert_rgb2hue$436+3,convert_rgb2hue@max+3
  3770   001334                     l6572:
  3771                           
  3772                           ;color.c: 253:     diff = max - min;
  3773   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3774   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3775   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3776   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3777   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3778   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3779   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3780   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3781   001354  ECEB  F020         	call	___flsub	;wreg free
  3782   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3783   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3784   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3785   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3786                           
  3787                           ;color.c: 254:     if (max == min) {
  3788   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3789   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3790   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3791   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3792   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3793   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3794   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3795   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3796   001388  EC7C  F01D         	call	___fleq	;wreg free
  3797   00138C  A0D8               	btfss	status,0,c
  3798   00138E  EFCB  F009         	goto	u6411
  3799   001392  EFCD  F009         	goto	u6410
  3800   001396                     u6411:
  3801   001396  EFD8  F009         	goto	l6576
  3802   00139A                     u6410:
  3803   00139A                     
  3804                           ;color.c: 255:         hue = 0;
  3805   00139A  0E00               	movlw	0
  3806   00139C  0100               	movlb	0	; () banked
  3807   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3808   0013A0  0E00               	movlw	0
  3809   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3810   0013A4  0E00               	movlw	0
  3811   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3812   0013A8  0E00               	movlw	0
  3813   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3814                           
  3815                           ;color.c: 256:     } else if (max == r){
  3816   0013AC  EFE1  F00A         	goto	l6588
  3817   0013B0                     l6576:
  3818   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3819   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3820   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3821   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3822   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3823   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3824   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3825   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3826   0013D0  EC7C  F01D         	call	___fleq	;wreg free
  3827   0013D4  A0D8               	btfss	status,0,c
  3828   0013D6  EFEF  F009         	goto	u6421
  3829   0013DA  EFF1  F009         	goto	u6420
  3830   0013DE                     u6421:
  3831   0013DE  EF1F  F00A         	goto	l6580
  3832   0013E2                     u6420:
  3833   0013E2                     
  3834                           ;color.c: 257:         hue = (b - g) / diff;
  3835   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3836   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3837   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3838   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3839   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3840   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3841   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3842   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3843   001402  ECEB  F020         	call	___flsub	;wreg free
  3844   001406  C012  F01A         	movff	?___flsub,___fldiv@b
  3845   00140A  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3846   00140E  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3847   001412  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3848   001416  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3849   00141A  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3850   00141E  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3851   001422  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3852   001426  ECA1  F00F         	call	___fldiv	;wreg free
  3853   00142A  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3854   00142E  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3855   001432  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3856   001436  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3857                           
  3858                           ;color.c: 258:     } else if (max == g){
  3859   00143A  EFE1  F00A         	goto	l6588
  3860   00143E                     l6580:
  3861   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3862   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3863   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3864   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3865   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3866   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3867   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3868   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3869   00145E  EC7C  F01D         	call	___fleq	;wreg free
  3870   001462  A0D8               	btfss	status,0,c
  3871   001464  EF36  F00A         	goto	u6431
  3872   001468  EF38  F00A         	goto	u6430
  3873   00146C                     u6431:
  3874   00146C  EF80  F00A         	goto	l6584
  3875   001470                     u6430:
  3876   001470                     
  3877                           ;color.c: 259:         hue = (b - r) / diff;
  3878   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3879   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3880   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3881   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3882   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3883   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3884   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3885   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3886   001490  ECEB  F020         	call	___flsub	;wreg free
  3887   001494  C012  F01A         	movff	?___flsub,___fldiv@b
  3888   001498  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3889   00149C  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3890   0014A0  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3891   0014A4  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3892   0014A8  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3893   0014AC  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3894   0014B0  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3895   0014B4  ECA1  F00F         	call	___fldiv	;wreg free
  3896   0014B8  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3897   0014BC  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3898   0014C0  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3899   0014C4  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3900                           
  3901                           ;color.c: 260:         hue = hue + 2;
  3902   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3903   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3904   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3905   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3906   0014D8  0E00               	movlw	0
  3907   0014DA  6E06               	movwf	___fladd@a^0,c
  3908   0014DC  0E00               	movlw	0
  3909   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3910   0014E0  0E00               	movlw	0
  3911   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3912   0014E4  0E40               	movlw	64
  3913   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3914   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3915   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3916   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3917   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3918   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3919                           
  3920                           ;color.c: 261:     } else if (max == b){
  3921   0014FC  EFE1  F00A         	goto	l6588
  3922   001500                     l6584:
  3923   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3924   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3925   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3926   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3927   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3928   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3929   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3930   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3931   001520  EC7C  F01D         	call	___fleq	;wreg free
  3932   001524  A0D8               	btfss	status,0,c
  3933   001526  EF97  F00A         	goto	u6441
  3934   00152A  EF99  F00A         	goto	u6440
  3935   00152E                     u6441:
  3936   00152E  EFE1  F00A         	goto	l150
  3937   001532                     u6440:
  3938   001532                     
  3939                           ;color.c: 262:         hue = (r - g) / diff;
  3940   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3941   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3942   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3943   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3944   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3945   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3946   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3947   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3948   001552  ECEB  F020         	call	___flsub	;wreg free
  3949   001556  C012  F01A         	movff	?___flsub,___fldiv@b
  3950   00155A  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3951   00155E  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3952   001562  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3953   001566  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3954   00156A  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3955   00156E  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3956   001572  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3957   001576  ECA1  F00F         	call	___fldiv	;wreg free
  3958   00157A  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3959   00157E  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3960   001582  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3961   001586  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3962                           
  3963                           ;color.c: 263:         hue = hue + 4;
  3964   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3965   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3966   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3967   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3968   00159A  0E00               	movlw	0
  3969   00159C  6E06               	movwf	___fladd@a^0,c
  3970   00159E  0E00               	movlw	0
  3971   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3972   0015A2  0E80               	movlw	128
  3973   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3974   0015A6  0E40               	movlw	64
  3975   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3976   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3977   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3978   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3979   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3980   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3981   0015BE  EFE1  F00A         	goto	l6588
  3982   0015C2                     l150:
  3983   0015C2                     l6588:
  3984                           
  3985                           ;color.c: 266:     hue = hue * 60;
  3986   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3987   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3988   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3989   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3990   0015D2  0E00               	movlw	0
  3991   0015D4  6E14               	movwf	___flmul@a^0,c
  3992   0015D6  0E00               	movlw	0
  3993   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3994   0015DA  0E70               	movlw	112
  3995   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3996   0015DE  0E42               	movlw	66
  3997   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3998   0015E2  EC8C  F00D         	call	___flmul	;wreg free
  3999   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  4000   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  4001   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  4002   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  4003   0015F6                     
  4004                           ;color.c: 267:     if (hue < 0) {
  4005   0015F6  0100               	movlb	0	; () banked
  4006   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  4007   0015FA  EF03  F00B         	goto	u6450
  4008   0015FE  EF01  F00B         	goto	u6451
  4009   001602                     u6451:
  4010   001602  EF1D  F00B         	goto	l154
  4011   001606                     u6450:
  4012   001606                     
  4013                           ; BSR set to: 0
  4014                           ;color.c: 268:         hue = hue + 360;
  4015   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  4016   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  4017   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  4018   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  4019   001616  0E00               	movlw	0
  4020   001618  6E06               	movwf	___fladd@a^0,c
  4021   00161A  0E00               	movlw	0
  4022   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  4023   00161E  0EB4               	movlw	180
  4024   001620  6E08               	movwf	(___fladd@a+2)^0,c
  4025   001622  0E43               	movlw	67
  4026   001624  6E09               	movwf	(___fladd@a+3)^0,c
  4027   001626  EC2C  F00B         	call	___fladd	;wreg free
  4028   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  4029   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  4030   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  4031   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  4032   00163A                     l154:
  4033                           
  4034                           ;color.c: 271:     return (unsigned int)hue;
  4035   00163A  C09C  F029         	movff	convert_rgb2hue@hue,___fltol@f1
  4036   00163E  C09D  F02A         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  4037   001642  C09E  F02B         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  4038   001646  C09F  F02C         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  4039   00164A  EC16  F01A         	call	___fltol	;wreg free
  4040   00164E  C029  F033         	movff	?___fltol,?_convert_rgb2hue
  4041   001652  C02A  F034         	movff	?___fltol+1,?_convert_rgb2hue+1
  4042   001656  0012               	return		;funcret
  4043   001658                     __end_of_convert_rgb2hue:
  4044                           	callstack 0
  4045                           
  4046 ;; *************** function ___xxtofl *****************
  4047 ;; Defined at:
  4048 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  sign            1    wreg     unsigned char 
  4051 ;;  val             4    1[COMRAM] long 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  sign            1    9[COMRAM] unsigned char 
  4054 ;;  arg             4   11[COMRAM] unsigned long 
  4055 ;;  exp             1   10[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  4    1[COMRAM] unsigned char 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4066 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;Total ram usage:       14 bytes
  4070 ;; Hardware stack levels used: 1
  4071 ;; Hardware stack levels required when called: 1
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_convert_rgb2hue
  4076 ;;		_fullSpeedAhead
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text12
  4081   002AAA                     __ptext12:
  4082                           	callstack 0
  4083   002AAA                     ___xxtofl:
  4084                           	callstack 26
  4085                           
  4086                           ;incstack = 0
  4087                           ;___xxtofl@sign stored from wreg
  4088   002AAA  6E0A               	movwf	___xxtofl@sign^0,c
  4089   002AAC  500A               	movf	___xxtofl@sign^0,w,c
  4090   002AAE  B4D8               	btfsc	status,2,c
  4091   002AB0  EF5C  F015         	goto	u5831
  4092   002AB4  EF5E  F015         	goto	u5830
  4093   002AB8                     u5831:
  4094   002AB8  EF80  F015         	goto	l1389
  4095   002ABC                     u5830:
  4096   002ABC  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4097   002ABE  EF65  F015         	goto	u5840
  4098   002AC2  EF63  F015         	goto	u5841
  4099   002AC6                     u5841:
  4100   002AC6  EF80  F015         	goto	l1389
  4101   002ACA                     u5840:
  4102   002ACA  C002  F006         	movff	___xxtofl@val,??___xxtofl
  4103   002ACE  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  4104   002AD2  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  4105   002AD6  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  4106   002ADA  1E06               	comf	??___xxtofl^0,f,c
  4107   002ADC  1E07               	comf	(??___xxtofl+1)^0,f,c
  4108   002ADE  1E08               	comf	(??___xxtofl+2)^0,f,c
  4109   002AE0  1E09               	comf	(??___xxtofl+3)^0,f,c
  4110   002AE2  2A06               	incf	??___xxtofl^0,f,c
  4111   002AE4  0E00               	movlw	0
  4112   002AE6  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4113   002AE8  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4114   002AEA  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4115   002AEC  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4116   002AF0  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4117   002AF4  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4118   002AF8  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4119   002AFC  EF88  F015         	goto	l6096
  4120   002B00                     l1389:
  4121   002B00  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4122   002B04  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4123   002B08  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4124   002B0C  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4125   002B10                     l6096:
  4126   002B10  5002               	movf	___xxtofl@val^0,w,c
  4127   002B12  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4128   002B14  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4129   002B16  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4130   002B18  A4D8               	btfss	status,2,c
  4131   002B1A  EF91  F015         	goto	u5851
  4132   002B1E  EF93  F015         	goto	u5850
  4133   002B22                     u5851:
  4134   002B22  EF9D  F015         	goto	l6102
  4135   002B26                     u5850:
  4136   002B26  0E00               	movlw	0
  4137   002B28  6E02               	movwf	?___xxtofl^0,c
  4138   002B2A  0E00               	movlw	0
  4139   002B2C  6E03               	movwf	(?___xxtofl+1)^0,c
  4140   002B2E  0E00               	movlw	0
  4141   002B30  6E04               	movwf	(?___xxtofl+2)^0,c
  4142   002B32  0E00               	movlw	0
  4143   002B34  6E05               	movwf	(?___xxtofl+3)^0,c
  4144   002B36  EF2E  F016         	goto	l1392
  4145   002B3A                     l6102:
  4146   002B3A  0E96               	movlw	150
  4147   002B3C  6E0B               	movwf	___xxtofl@exp^0,c
  4148   002B3E  EFA7  F015         	goto	l6106
  4149   002B42                     l6104:
  4150   002B42  2A0B               	incf	___xxtofl@exp^0,f,c
  4151   002B44  90D8               	bcf	status,0,c
  4152   002B46  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4153   002B48  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4154   002B4A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4155   002B4C  320C               	rrcf	___xxtofl@arg^0,f,c
  4156   002B4E                     l6106:
  4157   002B4E  0E00               	movlw	0
  4158   002B50  140C               	andwf	___xxtofl@arg^0,w,c
  4159   002B52  6E06               	movwf	??___xxtofl^0,c
  4160   002B54  0E00               	movlw	0
  4161   002B56  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4162   002B58  6E07               	movwf	(??___xxtofl+1)^0,c
  4163   002B5A  0E00               	movlw	0
  4164   002B5C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4165   002B5E  6E08               	movwf	(??___xxtofl+2)^0,c
  4166   002B60  0EFE               	movlw	254
  4167   002B62  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4168   002B64  6E09               	movwf	(??___xxtofl+3)^0,c
  4169   002B66  5006               	movf	??___xxtofl^0,w,c
  4170   002B68  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4171   002B6A  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4172   002B6C  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4173   002B6E  A4D8               	btfss	status,2,c
  4174   002B70  EFBC  F015         	goto	u5861
  4175   002B74  EFBE  F015         	goto	u5860
  4176   002B78                     u5861:
  4177   002B78  EFA1  F015         	goto	l6104
  4178   002B7C                     u5860:
  4179   002B7C  EFCC  F015         	goto	l1396
  4180   002B80                     l6108:
  4181   002B80  2A0B               	incf	___xxtofl@exp^0,f,c
  4182   002B82  0E01               	movlw	1
  4183   002B84  260C               	addwf	___xxtofl@arg^0,f,c
  4184   002B86  0E00               	movlw	0
  4185   002B88  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4186   002B8A  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4187   002B8C  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4188   002B8E  90D8               	bcf	status,0,c
  4189   002B90  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4190   002B92  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4191   002B94  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4192   002B96  320C               	rrcf	___xxtofl@arg^0,f,c
  4193   002B98                     l1396:
  4194   002B98  0E00               	movlw	0
  4195   002B9A  140C               	andwf	___xxtofl@arg^0,w,c
  4196   002B9C  6E06               	movwf	??___xxtofl^0,c
  4197   002B9E  0E00               	movlw	0
  4198   002BA0  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4199   002BA2  6E07               	movwf	(??___xxtofl+1)^0,c
  4200   002BA4  0E00               	movlw	0
  4201   002BA6  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4202   002BA8  6E08               	movwf	(??___xxtofl+2)^0,c
  4203   002BAA  0EFF               	movlw	255
  4204   002BAC  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4205   002BAE  6E09               	movwf	(??___xxtofl+3)^0,c
  4206   002BB0  5006               	movf	??___xxtofl^0,w,c
  4207   002BB2  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4208   002BB4  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4209   002BB6  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4210   002BB8  A4D8               	btfss	status,2,c
  4211   002BBA  EFE1  F015         	goto	u5871
  4212   002BBE  EFE3  F015         	goto	u5870
  4213   002BC2                     u5871:
  4214   002BC2  EFC0  F015         	goto	l6108
  4215   002BC6                     u5870:
  4216   002BC6  EFEB  F015         	goto	l6116
  4217   002BCA                     l6114:
  4218   002BCA  060B               	decf	___xxtofl@exp^0,f,c
  4219   002BCC  90D8               	bcf	status,0,c
  4220   002BCE  360C               	rlcf	___xxtofl@arg^0,f,c
  4221   002BD0  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4222   002BD2  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4223   002BD4  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4224   002BD6                     l6116:
  4225   002BD6  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4226   002BD8  EFF0  F015         	goto	u5881
  4227   002BDC  EFF2  F015         	goto	u5880
  4228   002BE0                     u5881:
  4229   002BE0  EFFA  F015         	goto	l1403
  4230   002BE4                     u5880:
  4231   002BE4  0E02               	movlw	2
  4232   002BE6  600B               	cpfslt	___xxtofl@exp^0,c
  4233   002BE8  EFF8  F015         	goto	u5891
  4234   002BEC  EFFA  F015         	goto	u5890
  4235   002BF0                     u5891:
  4236   002BF0  EFE5  F015         	goto	l6114
  4237   002BF4                     u5890:
  4238   002BF4                     l1403:
  4239   002BF4  B00B               	btfsc	___xxtofl@exp^0,0,c
  4240   002BF6  EFFF  F015         	goto	u5901
  4241   002BFA  EF01  F016         	goto	u5900
  4242   002BFE                     u5901:
  4243   002BFE  EF02  F016         	goto	l6122
  4244   002C02                     u5900:
  4245   002C02  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4246   002C04                     l6122:
  4247   002C04  90D8               	bcf	status,0,c
  4248   002C06  320B               	rrcf	___xxtofl@exp^0,f,c
  4249   002C08  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4250   002C0C  6A07               	clrf	(??___xxtofl+1)^0,c
  4251   002C0E  6A08               	clrf	(??___xxtofl+2)^0,c
  4252   002C10  6A09               	clrf	(??___xxtofl+3)^0,c
  4253   002C12  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4254   002C16  6A08               	clrf	(??___xxtofl+2)^0,c
  4255   002C18  6A07               	clrf	(??___xxtofl+1)^0,c
  4256   002C1A  6A06               	clrf	??___xxtofl^0,c
  4257   002C1C  5006               	movf	??___xxtofl^0,w,c
  4258   002C1E  120C               	iorwf	___xxtofl@arg^0,f,c
  4259   002C20  5007               	movf	(??___xxtofl+1)^0,w,c
  4260   002C22  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4261   002C24  5008               	movf	(??___xxtofl+2)^0,w,c
  4262   002C26  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4263   002C28  5009               	movf	(??___xxtofl+3)^0,w,c
  4264   002C2A  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4265   002C2C  500A               	movf	___xxtofl@sign^0,w,c
  4266   002C2E  B4D8               	btfsc	status,2,c
  4267   002C30  EF1C  F016         	goto	u5911
  4268   002C34  EF1E  F016         	goto	u5910
  4269   002C38                     u5911:
  4270   002C38  EF26  F016         	goto	l6132
  4271   002C3C                     u5910:
  4272   002C3C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4273   002C3E  EF25  F016         	goto	u5920
  4274   002C42  EF23  F016         	goto	u5921
  4275   002C46                     u5921:
  4276   002C46  EF26  F016         	goto	l6132
  4277   002C4A                     u5920:
  4278   002C4A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4279   002C4C                     l6132:
  4280   002C4C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4281   002C50  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4282   002C54  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4283   002C58  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4284   002C5C                     l1392:
  4285   002C5C  0012               	return		;funcret
  4286   002C5E                     __end_of___xxtofl:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function ___fltol *****************
  4290 ;; Defined at:
  4291 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  f1              4   40[COMRAM] unsigned char 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  exp1            1   49[COMRAM] unsigned char 
  4296 ;;  sign1           1   48[COMRAM] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  4   40[COMRAM] long 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4308 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;Total ram usage:       10 bytes
  4311 ;; Hardware stack levels used: 1
  4312 ;; Hardware stack levels required when called: 1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_convert_rgb2hue
  4317 ;;		_fullSpeedAhead
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text13
  4322   00342C                     __ptext13:
  4323                           	callstack 0
  4324   00342C                     ___fltol:
  4325                           	callstack 26
  4326   00342C  342B               	rlcf	(___fltol@f1+2)^0,w,c
  4327   00342E  342C               	rlcf	(___fltol@f1+3)^0,w,c
  4328   003430  6E32               	movwf	___fltol@exp1^0,c
  4329   003432  5032               	movf	___fltol@exp1^0,w,c
  4330   003434  A4D8               	btfss	status,2,c
  4331   003436  EF1F  F01A         	goto	u5761
  4332   00343A  EF21  F01A         	goto	u5760
  4333   00343E                     u5761:
  4334   00343E  EF2B  F01A         	goto	l6052
  4335   003442                     u5760:
  4336   003442                     l6048:
  4337   003442  0E00               	movlw	0
  4338   003444  6E29               	movwf	?___fltol^0,c
  4339   003446  0E00               	movlw	0
  4340   003448  6E2A               	movwf	(?___fltol+1)^0,c
  4341   00344A  0E00               	movlw	0
  4342   00344C  6E2B               	movwf	(?___fltol+2)^0,c
  4343   00344E  0E00               	movlw	0
  4344   003450  6E2C               	movwf	(?___fltol+3)^0,c
  4345   003452  EF98  F01A         	goto	l1031
  4346   003456                     l6052:
  4347   003456  C029  F02D         	movff	___fltol@f1,??___fltol
  4348   00345A  C02A  F02E         	movff	___fltol@f1+1,??___fltol+1
  4349   00345E  C02B  F02F         	movff	___fltol@f1+2,??___fltol+2
  4350   003462  C02C  F030         	movff	___fltol@f1+3,??___fltol+3
  4351   003466  0E20               	movlw	32
  4352   003468  EF3B  F01A         	goto	u5770
  4353   00346C                     u5775:
  4354   00346C  90D8               	bcf	status,0,c
  4355   00346E  3230               	rrcf	(??___fltol+3)^0,f,c
  4356   003470  322F               	rrcf	(??___fltol+2)^0,f,c
  4357   003472  322E               	rrcf	(??___fltol+1)^0,f,c
  4358   003474  322D               	rrcf	??___fltol^0,f,c
  4359   003476                     u5770:
  4360   003476  2EE8               	decfsz	wreg,f,c
  4361   003478  EF36  F01A         	goto	u5775
  4362   00347C  502D               	movf	??___fltol^0,w,c
  4363   00347E  6E31               	movwf	___fltol@sign1^0,c
  4364   003480  8E2B               	bsf	(___fltol@f1+2)^0,7,c
  4365   003482  0EFF               	movlw	255
  4366   003484  1629               	andwf	___fltol@f1^0,f,c
  4367   003486  0EFF               	movlw	255
  4368   003488  162A               	andwf	(___fltol@f1+1)^0,f,c
  4369   00348A  0EFF               	movlw	255
  4370   00348C  162B               	andwf	(___fltol@f1+2)^0,f,c
  4371   00348E  0E00               	movlw	0
  4372   003490  162C               	andwf	(___fltol@f1+3)^0,f,c
  4373   003492  0E96               	movlw	150
  4374   003494  5E32               	subwf	___fltol@exp1^0,f,c
  4375   003496  BE32               	btfsc	___fltol@exp1^0,7,c
  4376   003498  EF52  F01A         	goto	u5780
  4377   00349C  EF50  F01A         	goto	u5781
  4378   0034A0                     u5781:
  4379   0034A0  EF68  F01A         	goto	l6072
  4380   0034A4                     u5780:
  4381   0034A4  5032               	movf	___fltol@exp1^0,w,c
  4382   0034A6  0A80               	xorlw	128
  4383   0034A8  0F97               	addlw	151
  4384   0034AA  B0D8               	btfsc	status,0,c
  4385   0034AC  EF5A  F01A         	goto	u5791
  4386   0034B0  EF5C  F01A         	goto	u5790
  4387   0034B4                     u5791:
  4388   0034B4  EF5E  F01A         	goto	l6068
  4389   0034B8                     u5790:
  4390   0034B8  EF21  F01A         	goto	l6048
  4391   0034BC                     l6068:
  4392   0034BC  90D8               	bcf	status,0,c
  4393   0034BE  322C               	rrcf	(___fltol@f1+3)^0,f,c
  4394   0034C0  322B               	rrcf	(___fltol@f1+2)^0,f,c
  4395   0034C2  322A               	rrcf	(___fltol@f1+1)^0,f,c
  4396   0034C4  3229               	rrcf	___fltol@f1^0,f,c
  4397   0034C6  3E32               	incfsz	___fltol@exp1^0,f,c
  4398   0034C8  EF5E  F01A         	goto	l6068
  4399   0034CC  EF80  F01A         	goto	l6082
  4400   0034D0                     l6072:
  4401   0034D0  0E1F               	movlw	31
  4402   0034D2  6432               	cpfsgt	___fltol@exp1^0,c
  4403   0034D4  EF6E  F01A         	goto	u5801
  4404   0034D8  EF70  F01A         	goto	u5800
  4405   0034DC                     u5801:
  4406   0034DC  EF78  F01A         	goto	l6080
  4407   0034E0                     u5800:
  4408   0034E0  EF21  F01A         	goto	l6048
  4409   0034E4                     l6078:
  4410   0034E4  90D8               	bcf	status,0,c
  4411   0034E6  3629               	rlcf	___fltol@f1^0,f,c
  4412   0034E8  362A               	rlcf	(___fltol@f1+1)^0,f,c
  4413   0034EA  362B               	rlcf	(___fltol@f1+2)^0,f,c
  4414   0034EC  362C               	rlcf	(___fltol@f1+3)^0,f,c
  4415   0034EE  0632               	decf	___fltol@exp1^0,f,c
  4416   0034F0                     l6080:
  4417   0034F0  5032               	movf	___fltol@exp1^0,w,c
  4418   0034F2  A4D8               	btfss	status,2,c
  4419   0034F4  EF7E  F01A         	goto	u5811
  4420   0034F8  EF80  F01A         	goto	u5810
  4421   0034FC                     u5811:
  4422   0034FC  EF72  F01A         	goto	l6078
  4423   003500                     u5810:
  4424   003500                     l6082:
  4425   003500  5031               	movf	___fltol@sign1^0,w,c
  4426   003502  B4D8               	btfsc	status,2,c
  4427   003504  EF86  F01A         	goto	u5821
  4428   003508  EF88  F01A         	goto	u5820
  4429   00350C                     u5821:
  4430   00350C  EF90  F01A         	goto	l6086
  4431   003510                     u5820:
  4432   003510  1E2C               	comf	(___fltol@f1+3)^0,f,c
  4433   003512  1E2B               	comf	(___fltol@f1+2)^0,f,c
  4434   003514  1E2A               	comf	(___fltol@f1+1)^0,f,c
  4435   003516  6C29               	negf	___fltol@f1^0,c
  4436   003518  0E00               	movlw	0
  4437   00351A  222A               	addwfc	(___fltol@f1+1)^0,f,c
  4438   00351C  222B               	addwfc	(___fltol@f1+2)^0,f,c
  4439   00351E  222C               	addwfc	(___fltol@f1+3)^0,f,c
  4440   003520                     l6086:
  4441   003520  C029  F029         	movff	___fltol@f1,?___fltol
  4442   003524  C02A  F02A         	movff	___fltol@f1+1,?___fltol+1
  4443   003528  C02B  F02B         	movff	___fltol@f1+2,?___fltol+2
  4444   00352C  C02C  F02C         	movff	___fltol@f1+3,?___fltol+3
  4445   003530                     l1031:
  4446   003530  0012               	return		;funcret
  4447   003532                     __end_of___fltol:
  4448                           	callstack 0
  4449                           
  4450 ;; *************** function ___flsub *****************
  4451 ;; Defined at:
  4452 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  b               4   17[COMRAM] long 
  4455 ;;  a               4   21[COMRAM] long 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;		None
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  4   17[COMRAM] long 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4467 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;Total ram usage:        8 bytes
  4472 ;; Hardware stack levels used: 1
  4473 ;; Hardware stack levels required when called: 2
  4474 ;; This function calls:
  4475 ;;		___fladd
  4476 ;; This function is called by:
  4477 ;;		_convert_rgb2hue
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text14
  4482   0041D6                     __ptext14:
  4483                           	callstack 0
  4484   0041D6                     ___flsub:
  4485                           	callstack 26
  4486   0041D6  0E00               	movlw	0
  4487   0041D8  1A16               	xorwf	___flsub@a^0,f,c
  4488   0041DA  0E00               	movlw	0
  4489   0041DC  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4490   0041DE  0E00               	movlw	0
  4491   0041E0  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4492   0041E2  0E80               	movlw	128
  4493   0041E4  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4494   0041E6  C012  F002         	movff	___flsub@b,___fladd@b
  4495   0041EA  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4496   0041EE  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4497   0041F2  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4498   0041F6  C016  F006         	movff	___flsub@a,___fladd@a
  4499   0041FA  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4500   0041FE  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4501   004202  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4502   004206  EC2C  F00B         	call	___fladd	;wreg free
  4503   00420A  C002  F012         	movff	?___fladd,?___flsub
  4504   00420E  C003  F013         	movff	?___fladd+1,?___flsub+1
  4505   004212  C004  F014         	movff	?___fladd+2,?___flsub+2
  4506   004216  C005  F015         	movff	?___fladd+3,?___flsub+3
  4507   00421A  0012               	return		;funcret
  4508   00421C                     __end_of___flsub:
  4509                           	callstack 0
  4510                           
  4511 ;; *************** function ___fladd *****************
  4512 ;; Defined at:
  4513 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  b               4    1[COMRAM] long 
  4516 ;;  a               4    5[COMRAM] long 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  grs             1   16[COMRAM] unsigned char 
  4519 ;;  bexp            1   15[COMRAM] unsigned char 
  4520 ;;  aexp            1   14[COMRAM] unsigned char 
  4521 ;;  signs           1   13[COMRAM] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  4    1[COMRAM] unsigned char 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4531 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4532 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4533 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4534 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4535 ;;Total ram usage:       16 bytes
  4536 ;; Hardware stack levels used: 1
  4537 ;; Hardware stack levels required when called: 1
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_convert_rgb2hue
  4542 ;;		___flsub
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text15
  4547   001658                     __ptext15:
  4548                           	callstack 0
  4549   001658                     ___fladd:
  4550                           	callstack 26
  4551   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4552   00165A  0B80               	andlw	128
  4553   00165C  6E0E               	movwf	___fladd@signs^0,c
  4554   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4555   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4556   001662  6E10               	movwf	___fladd@bexp^0,c
  4557   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4558   001666  EF37  F00B         	goto	u5181
  4559   00166A  EF39  F00B         	goto	u5180
  4560   00166E                     u5181:
  4561   00166E  EF3A  F00B         	goto	l5720
  4562   001672                     u5180:
  4563   001672  8010               	bsf	___fladd@bexp^0,0,c
  4564   001674                     l5720:
  4565   001674  5010               	movf	___fladd@bexp^0,w,c
  4566   001676  B4D8               	btfsc	status,2,c
  4567   001678  EF40  F00B         	goto	u5191
  4568   00167C  EF42  F00B         	goto	u5190
  4569   001680                     u5191:
  4570   001680  EF57  F00B         	goto	l5730
  4571   001684                     u5190:
  4572   001684  2810               	incf	___fladd@bexp^0,w,c
  4573   001686  A4D8               	btfss	status,2,c
  4574   001688  EF48  F00B         	goto	u5201
  4575   00168C  EF4A  F00B         	goto	u5200
  4576   001690                     u5201:
  4577   001690  EF52  F00B         	goto	l5726
  4578   001694                     u5200:
  4579   001694  0E00               	movlw	0
  4580   001696  6E02               	movwf	___fladd@b^0,c
  4581   001698  0E00               	movlw	0
  4582   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4583   00169C  0E00               	movlw	0
  4584   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4585   0016A0  0E00               	movlw	0
  4586   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4587   0016A4                     l5726:
  4588   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4589   0016A6  0E00               	movlw	0
  4590   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4591   0016AA  EF5F  F00B         	goto	l5732
  4592   0016AE                     l5730:
  4593   0016AE  0E00               	movlw	0
  4594   0016B0  6E02               	movwf	___fladd@b^0,c
  4595   0016B2  0E00               	movlw	0
  4596   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4597   0016B6  0E00               	movlw	0
  4598   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4599   0016BA  0E00               	movlw	0
  4600   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4601   0016BE                     l5732:
  4602   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4603   0016C0  0B80               	andlw	128
  4604   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4605   0016C4  500E               	movf	___fladd@signs^0,w,c
  4606   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4607   0016C8  B4D8               	btfsc	status,2,c
  4608   0016CA  EF69  F00B         	goto	u5211
  4609   0016CE  EF6B  F00B         	goto	u5210
  4610   0016D2                     u5211:
  4611   0016D2  EF6C  F00B         	goto	l5738
  4612   0016D6                     u5210:
  4613   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4614   0016D8                     l5738:
  4615   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4616   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4617   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4618   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4619   0016E0  EF74  F00B         	goto	u5221
  4620   0016E4  EF76  F00B         	goto	u5220
  4621   0016E8                     u5221:
  4622   0016E8  EF77  F00B         	goto	l5744
  4623   0016EC                     u5220:
  4624   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4625   0016EE                     l5744:
  4626   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4627   0016F0  B4D8               	btfsc	status,2,c
  4628   0016F2  EF7D  F00B         	goto	u5231
  4629   0016F6  EF7F  F00B         	goto	u5230
  4630   0016FA                     u5231:
  4631   0016FA  EF94  F00B         	goto	l5754
  4632   0016FE                     u5230:
  4633   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4634   001700  A4D8               	btfss	status,2,c
  4635   001702  EF85  F00B         	goto	u5241
  4636   001706  EF87  F00B         	goto	u5240
  4637   00170A                     u5241:
  4638   00170A  EF8F  F00B         	goto	l5750
  4639   00170E                     u5240:
  4640   00170E  0E00               	movlw	0
  4641   001710  6E06               	movwf	___fladd@a^0,c
  4642   001712  0E00               	movlw	0
  4643   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4644   001716  0E00               	movlw	0
  4645   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4646   00171A  0E00               	movlw	0
  4647   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4648   00171E                     l5750:
  4649   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4650   001720  0E00               	movlw	0
  4651   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4652   001724  EF9C  F00B         	goto	l5756
  4653   001728                     l5754:
  4654   001728  0E00               	movlw	0
  4655   00172A  6E06               	movwf	___fladd@a^0,c
  4656   00172C  0E00               	movlw	0
  4657   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4658   001730  0E00               	movlw	0
  4659   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4660   001734  0E00               	movlw	0
  4661   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4662   001738                     l5756:
  4663   001738  5010               	movf	___fladd@bexp^0,w,c
  4664   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4665   00173C  B0D8               	btfsc	status,0,c
  4666   00173E  EFA3  F00B         	goto	u5251
  4667   001742  EFA5  F00B         	goto	u5250
  4668   001746                     u5251:
  4669   001746  EFCC  F00B         	goto	l5792
  4670   00174A                     u5250:
  4671   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4672   00174C  EFAA  F00B         	goto	u5261
  4673   001750  EFAC  F00B         	goto	u5260
  4674   001754                     u5261:
  4675   001754  EFAE  F00B         	goto	l5762
  4676   001758                     u5260:
  4677   001758  0E80               	movlw	128
  4678   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4679   00175C                     l5762:
  4680   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4681   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4682   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4683   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4684   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4685   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4686   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4687   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4688   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4689   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4690   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4691   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4692   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4693   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4694   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4695   001798                     l5792:
  4696   001798  0E00               	movlw	0
  4697   00179A  6E11               	movwf	___fladd@grs^0,c
  4698   00179C  5010               	movf	___fladd@bexp^0,w,c
  4699   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4700   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4701   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4702   0017A6  0E00               	movlw	0
  4703   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4704   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4705   0017AC  EFE1  F00B         	goto	u5271
  4706   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4707   0017B2  E109               	bnz	u5270
  4708   0017B4  0E1A               	movlw	26
  4709   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4710   0017B8  A0D8               	btfss	status,0,c
  4711   0017BA  EFE1  F00B         	goto	u5271
  4712   0017BE  EFE3  F00B         	goto	u5270
  4713   0017C2                     u5271:
  4714   0017C2  EF1A  F00C         	goto	l1263
  4715   0017C6                     u5270:
  4716   0017C6  5002               	movf	___fladd@b^0,w,c
  4717   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4718   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4719   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4720   0017CE  A4D8               	btfss	status,2,c
  4721   0017D0  EFEC  F00B         	goto	u5281
  4722   0017D4  EFEF  F00B         	goto	u5280
  4723   0017D8                     u5281:
  4724   0017D8  0E01               	movlw	1
  4725   0017DA  EFF0  F00B         	goto	u5290
  4726   0017DE                     u5280:
  4727   0017DE  0E00               	movlw	0
  4728   0017E0                     u5290:
  4729   0017E0  6E11               	movwf	___fladd@grs^0,c
  4730   0017E2  0E00               	movlw	0
  4731   0017E4  6E02               	movwf	___fladd@b^0,c
  4732   0017E6  0E00               	movlw	0
  4733   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4734   0017EA  0E00               	movlw	0
  4735   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4736   0017EE  0E00               	movlw	0
  4737   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4738   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4739   0017F6  EF23  F00C         	goto	l1262
  4740   0017FA                     l1264:
  4741   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4742   0017FC  EF02  F00C         	goto	u5301
  4743   001800  EF04  F00C         	goto	u5300
  4744   001804                     u5301:
  4745   001804  EF0A  F00C         	goto	l5804
  4746   001808                     u5300:
  4747   001808  90D8               	bcf	status,0,c
  4748   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4749   00180C  0901               	iorlw	1
  4750   00180E  6E11               	movwf	___fladd@grs^0,c
  4751   001810  EF0C  F00C         	goto	l5806
  4752   001814                     l5804:
  4753   001814  90D8               	bcf	status,0,c
  4754   001816  3211               	rrcf	___fladd@grs^0,f,c
  4755   001818                     l5806:
  4756   001818  A002               	btfss	___fladd@b^0,0,c
  4757   00181A  EF11  F00C         	goto	u5311
  4758   00181E  EF13  F00C         	goto	u5310
  4759   001822                     u5311:
  4760   001822  EF14  F00C         	goto	l5810
  4761   001826                     u5310:
  4762   001826  8E11               	bsf	___fladd@grs^0,7,c
  4763   001828                     l5810:
  4764   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4765   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4766   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4767   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4768   001830  3202               	rrcf	___fladd@b^0,f,c
  4769   001832  2A10               	incf	___fladd@bexp^0,f,c
  4770   001834                     l1263:
  4771   001834  500F               	movf	___fladd@aexp^0,w,c
  4772   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4773   001838  A0D8               	btfss	status,0,c
  4774   00183A  EF21  F00C         	goto	u5321
  4775   00183E  EF23  F00C         	goto	u5320
  4776   001842                     u5321:
  4777   001842  EFFD  F00B         	goto	l1264
  4778   001846                     u5320:
  4779   001846                     l1262:
  4780   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4781   001848  EF28  F00C         	goto	u5331
  4782   00184C  EF2A  F00C         	goto	u5330
  4783   001850                     u5331:
  4784   001850  EF6A  F00C         	goto	l5838
  4785   001854                     u5330:
  4786   001854  5010               	movf	___fladd@bexp^0,w,c
  4787   001856  A4D8               	btfss	status,2,c
  4788   001858  EF30  F00C         	goto	u5341
  4789   00185C  EF32  F00C         	goto	u5340
  4790   001860                     u5341:
  4791   001860  EF3C  F00C         	goto	l5820
  4792   001864                     u5340:
  4793   001864  0E00               	movlw	0
  4794   001866  6E02               	movwf	?___fladd^0,c
  4795   001868  0E00               	movlw	0
  4796   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4797   00186C  0E00               	movlw	0
  4798   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4799   001870  0E00               	movlw	0
  4800   001872  6E05               	movwf	(?___fladd+3)^0,c
  4801   001874  EF8B  F00D         	goto	l1271
  4802   001878                     l5820:
  4803   001878  5006               	movf	___fladd@a^0,w,c
  4804   00187A  2602               	addwf	___fladd@b^0,f,c
  4805   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4806   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4807   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4808   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4809   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4810   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4811   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4812   00188A  EF49  F00C         	goto	u5351
  4813   00188E  EF4B  F00C         	goto	u5350
  4814   001892                     u5351:
  4815   001892  EFF7  F00C         	goto	l5874
  4816   001896                     u5350:
  4817   001896  A011               	btfss	___fladd@grs^0,0,c
  4818   001898  EF50  F00C         	goto	u5361
  4819   00189C  EF52  F00C         	goto	u5360
  4820   0018A0                     u5361:
  4821   0018A0  EF58  F00C         	goto	l5828
  4822   0018A4                     u5360:
  4823   0018A4  90D8               	bcf	status,0,c
  4824   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4825   0018A8  0901               	iorlw	1
  4826   0018AA  6E11               	movwf	___fladd@grs^0,c
  4827   0018AC  EF5A  F00C         	goto	l5830
  4828   0018B0                     l5828:
  4829   0018B0  90D8               	bcf	status,0,c
  4830   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4831   0018B4                     l5830:
  4832   0018B4  A002               	btfss	___fladd@b^0,0,c
  4833   0018B6  EF5F  F00C         	goto	u5371
  4834   0018BA  EF61  F00C         	goto	u5370
  4835   0018BE                     u5371:
  4836   0018BE  EF62  F00C         	goto	l5834
  4837   0018C2                     u5370:
  4838   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4839   0018C4                     l5834:
  4840   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4841   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4842   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4843   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4844   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4845   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4846   0018D0  EFF7  F00C         	goto	l5874
  4847   0018D4                     l5838:
  4848   0018D4  5006               	movf	___fladd@a^0,w,c
  4849   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4850   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4851   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4852   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4853   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4854   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4855   0018E2  0A80               	xorlw	128
  4856   0018E4  6E0A               	movwf	??___fladd^0,c
  4857   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4858   0018E8  0A80               	xorlw	128
  4859   0018EA  580A               	subwfb	??___fladd^0,w,c
  4860   0018EC  B0D8               	btfsc	status,0,c
  4861   0018EE  EF7B  F00C         	goto	u5381
  4862   0018F2  EF7D  F00C         	goto	u5380
  4863   0018F6                     u5381:
  4864   0018F6  EFA8  F00C         	goto	l5848
  4865   0018FA                     u5380:
  4866   0018FA  5002               	movf	___fladd@b^0,w,c
  4867   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4868   0018FE  6E0A               	movwf	??___fladd^0,c
  4869   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4870   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4871   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4872   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4873   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4874   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4875   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4876   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4877   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4878   001912  0EFF               	movlw	255
  4879   001914  240A               	addwf	??___fladd^0,w,c
  4880   001916  6E02               	movwf	___fladd@b^0,c
  4881   001918  0EFF               	movlw	255
  4882   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4883   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4884   00191E  0EFF               	movlw	255
  4885   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4886   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4887   001924  0EFF               	movlw	255
  4888   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4889   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4890   00192A  0E80               	movlw	128
  4891   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4892   00192E  6C11               	negf	___fladd@grs^0,c
  4893   001930  5011               	movf	___fladd@grs^0,w,c
  4894   001932  A4D8               	btfss	status,2,c
  4895   001934  EF9E  F00C         	goto	u5391
  4896   001938  EFA0  F00C         	goto	u5390
  4897   00193C                     u5391:
  4898   00193C  EFB0  F00C         	goto	l1279
  4899   001940                     u5390:
  4900   001940  0E01               	movlw	1
  4901   001942  2602               	addwf	___fladd@b^0,f,c
  4902   001944  0E00               	movlw	0
  4903   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4904   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4905   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4906   00194C  EFB0  F00C         	goto	l1279
  4907   001950                     l5848:
  4908   001950  5006               	movf	___fladd@a^0,w,c
  4909   001952  5E02               	subwf	___fladd@b^0,f,c
  4910   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4911   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4912   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4913   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4914   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4915   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4916   001960                     l1279:
  4917   001960  5002               	movf	___fladd@b^0,w,c
  4918   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4919   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4920   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4921   001968  A4D8               	btfss	status,2,c
  4922   00196A  EFB9  F00C         	goto	u5401
  4923   00196E  EFBB  F00C         	goto	u5400
  4924   001972                     u5401:
  4925   001972  EFF0  F00C         	goto	l5872
  4926   001976                     u5400:
  4927   001976  5011               	movf	___fladd@grs^0,w,c
  4928   001978  A4D8               	btfss	status,2,c
  4929   00197A  EFC1  F00C         	goto	u5411
  4930   00197E  EFC3  F00C         	goto	u5410
  4931   001982                     u5411:
  4932   001982  EFF0  F00C         	goto	l5872
  4933   001986                     u5410:
  4934   001986  0E00               	movlw	0
  4935   001988  6E02               	movwf	?___fladd^0,c
  4936   00198A  0E00               	movlw	0
  4937   00198C  6E03               	movwf	(?___fladd+1)^0,c
  4938   00198E  0E00               	movlw	0
  4939   001990  6E04               	movwf	(?___fladd+2)^0,c
  4940   001992  0E00               	movlw	0
  4941   001994  6E05               	movwf	(?___fladd+3)^0,c
  4942   001996  EF8B  F00D         	goto	l1271
  4943   00199A                     l5856:
  4944   00199A  90D8               	bcf	status,0,c
  4945   00199C  3602               	rlcf	___fladd@b^0,f,c
  4946   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  4947   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  4948   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  4949   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  4950   0019A6  EFD7  F00C         	goto	u5421
  4951   0019AA  EFD9  F00C         	goto	u5420
  4952   0019AE                     u5421:
  4953   0019AE  EFDA  F00C         	goto	l5862
  4954   0019B2                     u5420:
  4955   0019B2  8002               	bsf	___fladd@b^0,0,c
  4956   0019B4                     l5862:
  4957   0019B4  A011               	btfss	___fladd@grs^0,0,c
  4958   0019B6  EFDF  F00C         	goto	u5431
  4959   0019BA  EFE1  F00C         	goto	u5430
  4960   0019BE                     u5431:
  4961   0019BE  EFE5  F00C         	goto	l5866
  4962   0019C2                     u5430:
  4963   0019C2  80D8               	bsf	status,0,c
  4964   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  4965   0019C6  EFE7  F00C         	goto	l5868
  4966   0019CA                     l5866:
  4967   0019CA  90D8               	bcf	status,0,c
  4968   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  4969   0019CE                     l5868:
  4970   0019CE  5010               	movf	___fladd@bexp^0,w,c
  4971   0019D0  B4D8               	btfsc	status,2,c
  4972   0019D2  EFED  F00C         	goto	u5441
  4973   0019D6  EFEF  F00C         	goto	u5440
  4974   0019DA                     u5441:
  4975   0019DA  EFF0  F00C         	goto	l5872
  4976   0019DE                     u5440:
  4977   0019DE  0610               	decf	___fladd@bexp^0,f,c
  4978   0019E0                     l5872:
  4979   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  4980   0019E2  EFF5  F00C         	goto	u5451
  4981   0019E6  EFF7  F00C         	goto	u5450
  4982   0019EA                     u5451:
  4983   0019EA  EFCD  F00C         	goto	l5856
  4984   0019EE                     u5450:
  4985   0019EE                     l5874:
  4986   0019EE  0E00               	movlw	0
  4987   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  4988   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  4989   0019F4  EFFE  F00C         	goto	u5461
  4990   0019F8  EF00  F00D         	goto	u5460
  4991   0019FC                     u5461:
  4992   0019FC  EF18  F00D         	goto	l1288
  4993   001A00                     u5460:
  4994   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  4995   001A04  0E7F               	movlw	127
  4996   001A06  160A               	andwf	??___fladd^0,f,c
  4997   001A08  B4D8               	btfsc	status,2,c
  4998   001A0A  EF09  F00D         	goto	u5471
  4999   001A0E  EF0B  F00D         	goto	u5470
  5000   001A12                     u5471:
  5001   001A12  EF0F  F00D         	goto	l1289
  5002   001A16                     u5470:
  5003   001A16                     l5880:
  5004   001A16  0E01               	movlw	1
  5005   001A18  6E0F               	movwf	___fladd@aexp^0,c
  5006   001A1A  EF18  F00D         	goto	l1288
  5007   001A1E                     l1289:
  5008   001A1E  A002               	btfss	___fladd@b^0,0,c
  5009   001A20  EF14  F00D         	goto	u5481
  5010   001A24  EF16  F00D         	goto	u5480
  5011   001A28                     u5481:
  5012   001A28  EF18  F00D         	goto	l1288
  5013   001A2C                     u5480:
  5014   001A2C  EF0B  F00D         	goto	l5880
  5015   001A30                     l1288:
  5016   001A30  500F               	movf	___fladd@aexp^0,w,c
  5017   001A32  B4D8               	btfsc	status,2,c
  5018   001A34  EF1E  F00D         	goto	u5491
  5019   001A38  EF20  F00D         	goto	u5490
  5020   001A3C                     u5491:
  5021   001A3C  EF4B  F00D         	goto	l5892
  5022   001A40                     u5490:
  5023   001A40  0E01               	movlw	1
  5024   001A42  2602               	addwf	___fladd@b^0,f,c
  5025   001A44  0E00               	movlw	0
  5026   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  5027   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  5028   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  5029   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  5030   001A4E  EF2B  F00D         	goto	u5501
  5031   001A52  EF2D  F00D         	goto	u5500
  5032   001A56                     u5501:
  5033   001A56  EF4B  F00D         	goto	l5892
  5034   001A5A                     u5500:
  5035   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  5036   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  5037   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  5038   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  5039   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  5040   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  5041   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  5042   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  5043   001A72  320A               	rrcf	??___fladd^0,f,c
  5044   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  5045   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  5046   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  5047   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  5048   001A84  2810               	incf	___fladd@bexp^0,w,c
  5049   001A86  B4D8               	btfsc	status,2,c
  5050   001A88  EF48  F00D         	goto	u5511
  5051   001A8C  EF4A  F00D         	goto	u5510
  5052   001A90                     u5511:
  5053   001A90  EF4B  F00D         	goto	l5892
  5054   001A94                     u5510:
  5055   001A94  2A10               	incf	___fladd@bexp^0,f,c
  5056   001A96                     l5892:
  5057   001A96  2810               	incf	___fladd@bexp^0,w,c
  5058   001A98  B4D8               	btfsc	status,2,c
  5059   001A9A  EF51  F00D         	goto	u5521
  5060   001A9E  EF53  F00D         	goto	u5520
  5061   001AA2                     u5521:
  5062   001AA2  EF5B  F00D         	goto	l5896
  5063   001AA6                     u5520:
  5064   001AA6  5010               	movf	___fladd@bexp^0,w,c
  5065   001AA8  A4D8               	btfss	status,2,c
  5066   001AAA  EF59  F00D         	goto	u5531
  5067   001AAE  EF5B  F00D         	goto	u5530
  5068   001AB2                     u5531:
  5069   001AB2  EF6D  F00D         	goto	l5900
  5070   001AB6                     u5530:
  5071   001AB6                     l5896:
  5072   001AB6  0E00               	movlw	0
  5073   001AB8  6E02               	movwf	___fladd@b^0,c
  5074   001ABA  0E00               	movlw	0
  5075   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  5076   001ABE  0E00               	movlw	0
  5077   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  5078   001AC2  0E00               	movlw	0
  5079   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  5080   001AC6  5010               	movf	___fladd@bexp^0,w,c
  5081   001AC8  A4D8               	btfss	status,2,c
  5082   001ACA  EF69  F00D         	goto	u5541
  5083   001ACE  EF6B  F00D         	goto	u5540
  5084   001AD2                     u5541:
  5085   001AD2  EF6D  F00D         	goto	l5900
  5086   001AD6                     u5540:
  5087   001AD6  0E00               	movlw	0
  5088   001AD8  6E0E               	movwf	___fladd@signs^0,c
  5089   001ADA                     l5900:
  5090   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  5091   001ADC  EF72  F00D         	goto	u5551
  5092   001AE0  EF74  F00D         	goto	u5550
  5093   001AE4                     u5551:
  5094   001AE4  EF77  F00D         	goto	l5904
  5095   001AE8                     u5550:
  5096   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  5097   001AEA  EF78  F00D         	goto	l5906
  5098   001AEE                     l5904:
  5099   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  5100   001AF0                     l5906:
  5101   001AF0  90D8               	bcf	status,0,c
  5102   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  5103   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  5104   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  5105   001AF8  EF80  F00D         	goto	u5561
  5106   001AFC  EF82  F00D         	goto	u5560
  5107   001B00                     u5561:
  5108   001B00  EF83  F00D         	goto	l5912
  5109   001B04                     u5560:
  5110   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5111   001B06                     l5912:
  5112   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5113   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5114   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5115   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5116   001B16                     l1271:
  5117   001B16  0012               	return		;funcret
  5118   001B18                     __end_of___fladd:
  5119                           	callstack 0
  5120                           
  5121 ;; *************** function ___flmul *****************
  5122 ;; Defined at:
  5123 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  b               4   15[COMRAM] unsigned char 
  5126 ;;  a               4   19[COMRAM] unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  prod            4   34[COMRAM] struct .
  5129 ;;  grs             4   29[COMRAM] unsigned long 
  5130 ;;  temp            2   38[COMRAM] struct .
  5131 ;;  bexp            1   33[COMRAM] unsigned char 
  5132 ;;  aexp            1   28[COMRAM] unsigned char 
  5133 ;;  sign            1   27[COMRAM] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  4   15[COMRAM] unsigned char 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, prodl, prodh
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5143 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5144 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5145 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5146 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;Total ram usage:       25 bytes
  5148 ;; Hardware stack levels used: 1
  5149 ;; Hardware stack levels required when called: 1
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_convert_rgb2hue
  5154 ;;		_fullSpeedAhead
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text16
  5159   001B18                     __ptext16:
  5160                           	callstack 0
  5161   001B18                     ___flmul:
  5162                           	callstack 26
  5163   001B18  5013               	movf	(___flmul@b+3)^0,w,c
  5164   001B1A  0B80               	andlw	128
  5165   001B1C  6E1C               	movwf	___flmul@sign^0,c
  5166   001B1E  5013               	movf	(___flmul@b+3)^0,w,c
  5167   001B20  2413               	addwf	(___flmul@b+3)^0,w,c
  5168   001B22  6E22               	movwf	___flmul@bexp^0,c
  5169   001B24  AE12               	btfss	(___flmul@b+2)^0,7,c
  5170   001B26  EF97  F00D         	goto	u5571
  5171   001B2A  EF99  F00D         	goto	u5570
  5172   001B2E                     u5571:
  5173   001B2E  EF9A  F00D         	goto	l5922
  5174   001B32                     u5570:
  5175   001B32  8022               	bsf	___flmul@bexp^0,0,c
  5176   001B34                     l5922:
  5177   001B34  5022               	movf	___flmul@bexp^0,w,c
  5178   001B36  B4D8               	btfsc	status,2,c
  5179   001B38  EFA0  F00D         	goto	u5581
  5180   001B3C  EFA2  F00D         	goto	u5580
  5181   001B40                     u5581:
  5182   001B40  EFB5  F00D         	goto	l5930
  5183   001B44                     u5580:
  5184   001B44  2822               	incf	___flmul@bexp^0,w,c
  5185   001B46  A4D8               	btfss	status,2,c
  5186   001B48  EFA8  F00D         	goto	u5591
  5187   001B4C  EFAA  F00D         	goto	u5590
  5188   001B50                     u5591:
  5189   001B50  EFB2  F00D         	goto	l5928
  5190   001B54                     u5590:
  5191   001B54  0E00               	movlw	0
  5192   001B56  6E10               	movwf	___flmul@b^0,c
  5193   001B58  0E00               	movlw	0
  5194   001B5A  6E11               	movwf	(___flmul@b+1)^0,c
  5195   001B5C  0E00               	movlw	0
  5196   001B5E  6E12               	movwf	(___flmul@b+2)^0,c
  5197   001B60  0E00               	movlw	0
  5198   001B62  6E13               	movwf	(___flmul@b+3)^0,c
  5199   001B64                     l5928:
  5200   001B64  8E12               	bsf	(___flmul@b+2)^0,7,c
  5201   001B66  EFBD  F00D         	goto	l5932
  5202   001B6A                     l5930:
  5203   001B6A  0E00               	movlw	0
  5204   001B6C  6E10               	movwf	___flmul@b^0,c
  5205   001B6E  0E00               	movlw	0
  5206   001B70  6E11               	movwf	(___flmul@b+1)^0,c
  5207   001B72  0E00               	movlw	0
  5208   001B74  6E12               	movwf	(___flmul@b+2)^0,c
  5209   001B76  0E00               	movlw	0
  5210   001B78  6E13               	movwf	(___flmul@b+3)^0,c
  5211   001B7A                     l5932:
  5212   001B7A  5017               	movf	(___flmul@a+3)^0,w,c
  5213   001B7C  0B80               	andlw	128
  5214   001B7E  1A1C               	xorwf	___flmul@sign^0,f,c
  5215   001B80  5017               	movf	(___flmul@a+3)^0,w,c
  5216   001B82  2417               	addwf	(___flmul@a+3)^0,w,c
  5217   001B84  6E1D               	movwf	___flmul@aexp^0,c
  5218   001B86  AE16               	btfss	(___flmul@a+2)^0,7,c
  5219   001B88  EFC8  F00D         	goto	u5601
  5220   001B8C  EFCA  F00D         	goto	u5600
  5221   001B90                     u5601:
  5222   001B90  EFCB  F00D         	goto	l5940
  5223   001B94                     u5600:
  5224   001B94  801D               	bsf	___flmul@aexp^0,0,c
  5225   001B96                     l5940:
  5226   001B96  501D               	movf	___flmul@aexp^0,w,c
  5227   001B98  B4D8               	btfsc	status,2,c
  5228   001B9A  EFD1  F00D         	goto	u5611
  5229   001B9E  EFD3  F00D         	goto	u5610
  5230   001BA2                     u5611:
  5231   001BA2  EFE6  F00D         	goto	l5948
  5232   001BA6                     u5610:
  5233   001BA6  281D               	incf	___flmul@aexp^0,w,c
  5234   001BA8  A4D8               	btfss	status,2,c
  5235   001BAA  EFD9  F00D         	goto	u5621
  5236   001BAE  EFDB  F00D         	goto	u5620
  5237   001BB2                     u5621:
  5238   001BB2  EFE3  F00D         	goto	l5946
  5239   001BB6                     u5620:
  5240   001BB6  0E00               	movlw	0
  5241   001BB8  6E14               	movwf	___flmul@a^0,c
  5242   001BBA  0E00               	movlw	0
  5243   001BBC  6E15               	movwf	(___flmul@a+1)^0,c
  5244   001BBE  0E00               	movlw	0
  5245   001BC0  6E16               	movwf	(___flmul@a+2)^0,c
  5246   001BC2  0E00               	movlw	0
  5247   001BC4  6E17               	movwf	(___flmul@a+3)^0,c
  5248   001BC6                     l5946:
  5249   001BC6  8E16               	bsf	(___flmul@a+2)^0,7,c
  5250   001BC8  EFEE  F00D         	goto	l1348
  5251   001BCC                     l5948:
  5252   001BCC  0E00               	movlw	0
  5253   001BCE  6E14               	movwf	___flmul@a^0,c
  5254   001BD0  0E00               	movlw	0
  5255   001BD2  6E15               	movwf	(___flmul@a+1)^0,c
  5256   001BD4  0E00               	movlw	0
  5257   001BD6  6E16               	movwf	(___flmul@a+2)^0,c
  5258   001BD8  0E00               	movlw	0
  5259   001BDA  6E17               	movwf	(___flmul@a+3)^0,c
  5260   001BDC                     l1348:
  5261   001BDC  501D               	movf	___flmul@aexp^0,w,c
  5262   001BDE  B4D8               	btfsc	status,2,c
  5263   001BE0  EFF4  F00D         	goto	u5631
  5264   001BE4  EFF6  F00D         	goto	u5630
  5265   001BE8                     u5631:
  5266   001BE8  EFFE  F00D         	goto	l5952
  5267   001BEC                     u5630:
  5268   001BEC  5022               	movf	___flmul@bexp^0,w,c
  5269   001BEE  A4D8               	btfss	status,2,c
  5270   001BF0  EFFC  F00D         	goto	u5641
  5271   001BF4  EFFE  F00D         	goto	u5640
  5272   001BF8                     u5641:
  5273   001BF8  EF08  F00E         	goto	l5956
  5274   001BFC                     u5640:
  5275   001BFC                     l5952:
  5276   001BFC  0E00               	movlw	0
  5277   001BFE  6E10               	movwf	?___flmul^0,c
  5278   001C00  0E00               	movlw	0
  5279   001C02  6E11               	movwf	(?___flmul+1)^0,c
  5280   001C04  0E00               	movlw	0
  5281   001C06  6E12               	movwf	(?___flmul+2)^0,c
  5282   001C08  0E00               	movlw	0
  5283   001C0A  6E13               	movwf	(?___flmul+3)^0,c
  5284   001C0C  EFA0  F00F         	goto	l1352
  5285   001C10                     l5956:
  5286   001C10  5016               	movf	(___flmul@a+2)^0,w,c
  5287   001C12  0210               	mulwf	___flmul@b^0,c
  5288   001C14  CFF3 F027          	movff	prodl,___flmul@temp
  5289   001C18  CFF4 F028          	movff	prodh,___flmul@temp+1
  5290   001C1C  5027               	movf	___flmul@temp^0,w,c
  5291   001C1E  6E1E               	movwf	___flmul@grs^0,c
  5292   001C20  6A1F               	clrf	(___flmul@grs+1)^0,c
  5293   001C22  6A20               	clrf	(___flmul@grs+2)^0,c
  5294   001C24  6A21               	clrf	(___flmul@grs+3)^0,c
  5295   001C26  5028               	movf	(___flmul@temp+1)^0,w,c
  5296   001C28  6E23               	movwf	___flmul@prod^0,c
  5297   001C2A  6A24               	clrf	(___flmul@prod+1)^0,c
  5298   001C2C  6A25               	clrf	(___flmul@prod+2)^0,c
  5299   001C2E  6A26               	clrf	(___flmul@prod+3)^0,c
  5300   001C30  5015               	movf	(___flmul@a+1)^0,w,c
  5301   001C32  0211               	mulwf	(___flmul@b+1)^0,c
  5302   001C34  CFF3 F027          	movff	prodl,___flmul@temp
  5303   001C38  CFF4 F028          	movff	prodh,___flmul@temp+1
  5304   001C3C  5027               	movf	___flmul@temp^0,w,c
  5305   001C3E  261E               	addwf	___flmul@grs^0,f,c
  5306   001C40  0E00               	movlw	0
  5307   001C42  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5308   001C44  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5309   001C46  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5310   001C48  5028               	movf	(___flmul@temp+1)^0,w,c
  5311   001C4A  2623               	addwf	___flmul@prod^0,f,c
  5312   001C4C  0E00               	movlw	0
  5313   001C4E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5314   001C50  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5315   001C52  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5316   001C54  5014               	movf	___flmul@a^0,w,c
  5317   001C56  0212               	mulwf	(___flmul@b+2)^0,c
  5318   001C58  CFF3 F027          	movff	prodl,___flmul@temp
  5319   001C5C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5320   001C60  5027               	movf	___flmul@temp^0,w,c
  5321   001C62  261E               	addwf	___flmul@grs^0,f,c
  5322   001C64  0E00               	movlw	0
  5323   001C66  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5324   001C68  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5325   001C6A  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5326   001C6C  5028               	movf	(___flmul@temp+1)^0,w,c
  5327   001C6E  2623               	addwf	___flmul@prod^0,f,c
  5328   001C70  0E00               	movlw	0
  5329   001C72  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5330   001C74  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5331   001C76  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5332   001C78  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5333   001C7C  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5334   001C80  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5335   001C84  6A1E               	clrf	___flmul@grs^0,c
  5336   001C86  5014               	movf	___flmul@a^0,w,c
  5337   001C88  0211               	mulwf	(___flmul@b+1)^0,c
  5338   001C8A  CFF3 F027          	movff	prodl,___flmul@temp
  5339   001C8E  CFF4 F028          	movff	prodh,___flmul@temp+1
  5340   001C92  5027               	movf	___flmul@temp^0,w,c
  5341   001C94  261E               	addwf	___flmul@grs^0,f,c
  5342   001C96  5028               	movf	(___flmul@temp+1)^0,w,c
  5343   001C98  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5344   001C9A  0E00               	movlw	0
  5345   001C9C  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5346   001C9E  0E00               	movlw	0
  5347   001CA0  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5348   001CA2  5015               	movf	(___flmul@a+1)^0,w,c
  5349   001CA4  0210               	mulwf	___flmul@b^0,c
  5350   001CA6  CFF3 F027          	movff	prodl,___flmul@temp
  5351   001CAA  CFF4 F028          	movff	prodh,___flmul@temp+1
  5352   001CAE  5027               	movf	___flmul@temp^0,w,c
  5353   001CB0  261E               	addwf	___flmul@grs^0,f,c
  5354   001CB2  5028               	movf	(___flmul@temp+1)^0,w,c
  5355   001CB4  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5356   001CB6  0E00               	movlw	0
  5357   001CB8  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5358   001CBA  0E00               	movlw	0
  5359   001CBC  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5360   001CBE  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5361   001CC2  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5362   001CC6  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5363   001CCA  6A1E               	clrf	___flmul@grs^0,c
  5364   001CCC  5014               	movf	___flmul@a^0,w,c
  5365   001CCE  0210               	mulwf	___flmul@b^0,c
  5366   001CD0  CFF3 F027          	movff	prodl,___flmul@temp
  5367   001CD4  CFF4 F028          	movff	prodh,___flmul@temp+1
  5368   001CD8  5027               	movf	___flmul@temp^0,w,c
  5369   001CDA  261E               	addwf	___flmul@grs^0,f,c
  5370   001CDC  5028               	movf	(___flmul@temp+1)^0,w,c
  5371   001CDE  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5372   001CE0  0E00               	movlw	0
  5373   001CE2  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5374   001CE4  0E00               	movlw	0
  5375   001CE6  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5376   001CE8  5016               	movf	(___flmul@a+2)^0,w,c
  5377   001CEA  0211               	mulwf	(___flmul@b+1)^0,c
  5378   001CEC  CFF3 F027          	movff	prodl,___flmul@temp
  5379   001CF0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5380   001CF4  5027               	movf	___flmul@temp^0,w,c
  5381   001CF6  2623               	addwf	___flmul@prod^0,f,c
  5382   001CF8  5028               	movf	(___flmul@temp+1)^0,w,c
  5383   001CFA  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5384   001CFC  0E00               	movlw	0
  5385   001CFE  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5386   001D00  0E00               	movlw	0
  5387   001D02  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5388   001D04  5015               	movf	(___flmul@a+1)^0,w,c
  5389   001D06  0212               	mulwf	(___flmul@b+2)^0,c
  5390   001D08  CFF3 F027          	movff	prodl,___flmul@temp
  5391   001D0C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5392   001D10  5027               	movf	___flmul@temp^0,w,c
  5393   001D12  2623               	addwf	___flmul@prod^0,f,c
  5394   001D14  5028               	movf	(___flmul@temp+1)^0,w,c
  5395   001D16  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5396   001D18  0E00               	movlw	0
  5397   001D1A  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5398   001D1C  0E00               	movlw	0
  5399   001D1E  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5400   001D20  5016               	movf	(___flmul@a+2)^0,w,c
  5401   001D22  0212               	mulwf	(___flmul@b+2)^0,c
  5402   001D24  CFF3 F027          	movff	prodl,___flmul@temp
  5403   001D28  CFF4 F028          	movff	prodh,___flmul@temp+1
  5404   001D2C  5027               	movf	___flmul@temp^0,w,c
  5405   001D2E  6E18               	movwf	??___flmul^0,c
  5406   001D30  5028               	movf	(___flmul@temp+1)^0,w,c
  5407   001D32  6E19               	movwf	(??___flmul+1)^0,c
  5408   001D34  6A1A               	clrf	(??___flmul+2)^0,c
  5409   001D36  6A1B               	clrf	(??___flmul+3)^0,c
  5410   001D38  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  5411   001D3C  C019  F01A         	movff	??___flmul+1,??___flmul+2
  5412   001D40  C018  F019         	movff	??___flmul,??___flmul+1
  5413   001D44  6A18               	clrf	??___flmul^0,c
  5414   001D46  5018               	movf	??___flmul^0,w,c
  5415   001D48  2623               	addwf	___flmul@prod^0,f,c
  5416   001D4A  5019               	movf	(??___flmul+1)^0,w,c
  5417   001D4C  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5418   001D4E  501A               	movf	(??___flmul+2)^0,w,c
  5419   001D50  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5420   001D52  501B               	movf	(??___flmul+3)^0,w,c
  5421   001D54  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5422   001D56  C01E  F018         	movff	___flmul@grs,??___flmul
  5423   001D5A  C01F  F019         	movff	___flmul@grs+1,??___flmul+1
  5424   001D5E  C020  F01A         	movff	___flmul@grs+2,??___flmul+2
  5425   001D62  C021  F01B         	movff	___flmul@grs+3,??___flmul+3
  5426   001D66  0E19               	movlw	25
  5427   001D68  EFBB  F00E         	goto	u5650
  5428   001D6C                     u5655:
  5429   001D6C  90D8               	bcf	status,0,c
  5430   001D6E  321B               	rrcf	(??___flmul+3)^0,f,c
  5431   001D70  321A               	rrcf	(??___flmul+2)^0,f,c
  5432   001D72  3219               	rrcf	(??___flmul+1)^0,f,c
  5433   001D74  3218               	rrcf	??___flmul^0,f,c
  5434   001D76                     u5650:
  5435   001D76  2EE8               	decfsz	wreg,f,c
  5436   001D78  EFB6  F00E         	goto	u5655
  5437   001D7C  5018               	movf	??___flmul^0,w,c
  5438   001D7E  2623               	addwf	___flmul@prod^0,f,c
  5439   001D80  5019               	movf	(??___flmul+1)^0,w,c
  5440   001D82  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5441   001D84  501A               	movf	(??___flmul+2)^0,w,c
  5442   001D86  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5443   001D88  501B               	movf	(??___flmul+3)^0,w,c
  5444   001D8A  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5445   001D8C  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5446   001D90  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5447   001D94  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5448   001D98  6A1E               	clrf	___flmul@grs^0,c
  5449   001D9A  501D               	movf	___flmul@aexp^0,w,c
  5450   001D9C  C022  F018         	movff	___flmul@bexp,??___flmul
  5451   001DA0  6A19               	clrf	(??___flmul+1)^0,c
  5452   001DA2  2618               	addwf	??___flmul^0,f,c
  5453   001DA4  0E00               	movlw	0
  5454   001DA6  2219               	addwfc	(??___flmul+1)^0,f,c
  5455   001DA8  0E82               	movlw	130
  5456   001DAA  2418               	addwf	??___flmul^0,w,c
  5457   001DAC  6E27               	movwf	___flmul@temp^0,c
  5458   001DAE  0EFF               	movlw	255
  5459   001DB0  2019               	addwfc	(??___flmul+1)^0,w,c
  5460   001DB2  6E28               	movwf	(___flmul@temp+1)^0,c
  5461   001DB4  EFF1  F00E         	goto	l6004
  5462   001DB8                     l5998:
  5463   001DB8  90D8               	bcf	status,0,c
  5464   001DBA  3623               	rlcf	___flmul@prod^0,f,c
  5465   001DBC  3624               	rlcf	(___flmul@prod+1)^0,f,c
  5466   001DBE  3625               	rlcf	(___flmul@prod+2)^0,f,c
  5467   001DC0  3626               	rlcf	(___flmul@prod+3)^0,f,c
  5468   001DC2  AE21               	btfss	(___flmul@grs+3)^0,7,c
  5469   001DC4  EFE6  F00E         	goto	u5661
  5470   001DC8  EFE8  F00E         	goto	u5660
  5471   001DCC                     u5661:
  5472   001DCC  EFE9  F00E         	goto	l1355
  5473   001DD0                     u5660:
  5474   001DD0  8023               	bsf	___flmul@prod^0,0,c
  5475   001DD2                     l1355:
  5476   001DD2  90D8               	bcf	status,0,c
  5477   001DD4  361E               	rlcf	___flmul@grs^0,f,c
  5478   001DD6  361F               	rlcf	(___flmul@grs+1)^0,f,c
  5479   001DD8  3620               	rlcf	(___flmul@grs+2)^0,f,c
  5480   001DDA  3621               	rlcf	(___flmul@grs+3)^0,f,c
  5481   001DDC  0627               	decf	___flmul@temp^0,f,c
  5482   001DDE  A0D8               	btfss	status,0,c
  5483   001DE0  0628               	decf	(___flmul@temp+1)^0,f,c
  5484   001DE2                     l6004:
  5485   001DE2  AE25               	btfss	(___flmul@prod+2)^0,7,c
  5486   001DE4  EFF6  F00E         	goto	u5671
  5487   001DE8  EFF8  F00E         	goto	u5670
  5488   001DEC                     u5671:
  5489   001DEC  EFDC  F00E         	goto	l5998
  5490   001DF0                     u5670:
  5491   001DF0  0E00               	movlw	0
  5492   001DF2  6E1D               	movwf	___flmul@aexp^0,c
  5493   001DF4  AE21               	btfss	(___flmul@grs+3)^0,7,c
  5494   001DF6  EFFF  F00E         	goto	u5681
  5495   001DFA  EF01  F00F         	goto	u5680
  5496   001DFE                     u5681:
  5497   001DFE  EF25  F00F         	goto	l1357
  5498   001E02                     u5680:
  5499   001E02  0EFF               	movlw	255
  5500   001E04  141E               	andwf	___flmul@grs^0,w,c
  5501   001E06  6E18               	movwf	??___flmul^0,c
  5502   001E08  0EFF               	movlw	255
  5503   001E0A  141F               	andwf	(___flmul@grs+1)^0,w,c
  5504   001E0C  6E19               	movwf	(??___flmul+1)^0,c
  5505   001E0E  0EFF               	movlw	255
  5506   001E10  1420               	andwf	(___flmul@grs+2)^0,w,c
  5507   001E12  6E1A               	movwf	(??___flmul+2)^0,c
  5508   001E14  0E7F               	movlw	127
  5509   001E16  1421               	andwf	(___flmul@grs+3)^0,w,c
  5510   001E18  6E1B               	movwf	(??___flmul+3)^0,c
  5511   001E1A  5018               	movf	??___flmul^0,w,c
  5512   001E1C  1019               	iorwf	(??___flmul+1)^0,w,c
  5513   001E1E  101A               	iorwf	(??___flmul+2)^0,w,c
  5514   001E20  101B               	iorwf	(??___flmul+3)^0,w,c
  5515   001E22  B4D8               	btfsc	status,2,c
  5516   001E24  EF16  F00F         	goto	u5691
  5517   001E28  EF18  F00F         	goto	u5690
  5518   001E2C                     u5691:
  5519   001E2C  EF1C  F00F         	goto	l1358
  5520   001E30                     u5690:
  5521   001E30                     l6012:
  5522   001E30  0E01               	movlw	1
  5523   001E32  6E1D               	movwf	___flmul@aexp^0,c
  5524   001E34  EF25  F00F         	goto	l1357
  5525   001E38                     l1358:
  5526   001E38  A023               	btfss	___flmul@prod^0,0,c
  5527   001E3A  EF21  F00F         	goto	u5701
  5528   001E3E  EF23  F00F         	goto	u5700
  5529   001E42                     u5701:
  5530   001E42  EF25  F00F         	goto	l1357
  5531   001E46                     u5700:
  5532   001E46  EF18  F00F         	goto	l6012
  5533   001E4A                     l1357:
  5534   001E4A  501D               	movf	___flmul@aexp^0,w,c
  5535   001E4C  B4D8               	btfsc	status,2,c
  5536   001E4E  EF2B  F00F         	goto	u5711
  5537   001E52  EF2D  F00F         	goto	u5710
  5538   001E56                     u5711:
  5539   001E56  EF51  F00F         	goto	l6024
  5540   001E5A                     u5710:
  5541   001E5A  0E01               	movlw	1
  5542   001E5C  2623               	addwf	___flmul@prod^0,f,c
  5543   001E5E  0E00               	movlw	0
  5544   001E60  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5545   001E62  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5546   001E64  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5547   001E66  A026               	btfss	(___flmul@prod+3)^0,0,c
  5548   001E68  EF38  F00F         	goto	u5721
  5549   001E6C  EF3A  F00F         	goto	u5720
  5550   001E70                     u5721:
  5551   001E70  EF51  F00F         	goto	l6024
  5552   001E74                     u5720:
  5553   001E74  C023  F018         	movff	___flmul@prod,??___flmul
  5554   001E78  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  5555   001E7C  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  5556   001E80  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  5557   001E84  341B               	rlcf	(??___flmul+3)^0,w,c
  5558   001E86  321B               	rrcf	(??___flmul+3)^0,f,c
  5559   001E88  321A               	rrcf	(??___flmul+2)^0,f,c
  5560   001E8A  3219               	rrcf	(??___flmul+1)^0,f,c
  5561   001E8C  3218               	rrcf	??___flmul^0,f,c
  5562   001E8E  C018  F023         	movff	??___flmul,___flmul@prod
  5563   001E92  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  5564   001E96  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  5565   001E9A  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  5566   001E9E  4A27               	infsnz	___flmul@temp^0,f,c
  5567   001EA0  2A28               	incf	(___flmul@temp+1)^0,f,c
  5568   001EA2                     l6024:
  5569   001EA2  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5570   001EA4  EF5C  F00F         	goto	u5731
  5571   001EA8  5028               	movf	(___flmul@temp+1)^0,w,c
  5572   001EAA  E108               	bnz	u5730
  5573   001EAC  2827               	incf	___flmul@temp^0,w,c
  5574   001EAE  A0D8               	btfss	status,0,c
  5575   001EB0  EF5C  F00F         	goto	u5731
  5576   001EB4  EF5E  F00F         	goto	u5730
  5577   001EB8                     u5731:
  5578   001EB8  EF68  F00F         	goto	l6028
  5579   001EBC                     u5730:
  5580   001EBC  0E00               	movlw	0
  5581   001EBE  6E23               	movwf	___flmul@prod^0,c
  5582   001EC0  0E00               	movlw	0
  5583   001EC2  6E24               	movwf	(___flmul@prod+1)^0,c
  5584   001EC4  0E80               	movlw	128
  5585   001EC6  6E25               	movwf	(___flmul@prod+2)^0,c
  5586   001EC8  0E7F               	movlw	127
  5587   001ECA  6E26               	movwf	(___flmul@prod+3)^0,c
  5588   001ECC  EF96  F00F         	goto	l6040
  5589   001ED0                     l6028:
  5590   001ED0  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5591   001ED2  EF75  F00F         	goto	u5740
  5592   001ED6  5028               	movf	(___flmul@temp+1)^0,w,c
  5593   001ED8  E106               	bnz	u5741
  5594   001EDA  0427               	decf	___flmul@temp^0,w,c
  5595   001EDC  B0D8               	btfsc	status,0,c
  5596   001EDE  EF73  F00F         	goto	u5741
  5597   001EE2  EF75  F00F         	goto	u5740
  5598   001EE6                     u5741:
  5599   001EE6  EF81  F00F         	goto	l1365
  5600   001EEA                     u5740:
  5601   001EEA  0E00               	movlw	0
  5602   001EEC  6E23               	movwf	___flmul@prod^0,c
  5603   001EEE  0E00               	movlw	0
  5604   001EF0  6E24               	movwf	(___flmul@prod+1)^0,c
  5605   001EF2  0E00               	movlw	0
  5606   001EF4  6E25               	movwf	(___flmul@prod+2)^0,c
  5607   001EF6  0E00               	movlw	0
  5608   001EF8  6E26               	movwf	(___flmul@prod+3)^0,c
  5609   001EFA  0E00               	movlw	0
  5610   001EFC  6E1C               	movwf	___flmul@sign^0,c
  5611   001EFE  EF96  F00F         	goto	l6040
  5612   001F02                     l1365:
  5613   001F02  C027  F022         	movff	___flmul@temp,___flmul@bexp
  5614   001F06  0EFF               	movlw	255
  5615   001F08  1623               	andwf	___flmul@prod^0,f,c
  5616   001F0A  0EFF               	movlw	255
  5617   001F0C  1624               	andwf	(___flmul@prod+1)^0,f,c
  5618   001F0E  0E7F               	movlw	127
  5619   001F10  1625               	andwf	(___flmul@prod+2)^0,f,c
  5620   001F12  0E00               	movlw	0
  5621   001F14  1626               	andwf	(___flmul@prod+3)^0,f,c
  5622   001F16  A022               	btfss	___flmul@bexp^0,0,c
  5623   001F18  EF90  F00F         	goto	u5751
  5624   001F1C  EF92  F00F         	goto	u5750
  5625   001F20                     u5751:
  5626   001F20  EF93  F00F         	goto	l6038
  5627   001F24                     u5750:
  5628   001F24  8E25               	bsf	(___flmul@prod+2)^0,7,c
  5629   001F26                     l6038:
  5630   001F26  90D8               	bcf	status,0,c
  5631   001F28  3022               	rrcf	___flmul@bexp^0,w,c
  5632   001F2A  6E26               	movwf	(___flmul@prod+3)^0,c
  5633   001F2C                     l6040:
  5634   001F2C  501C               	movf	___flmul@sign^0,w,c
  5635   001F2E  1226               	iorwf	(___flmul@prod+3)^0,f,c
  5636   001F30  C023  F010         	movff	___flmul@prod,?___flmul
  5637   001F34  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  5638   001F38  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  5639   001F3C  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  5640   001F40                     l1352:
  5641   001F40  0012               	return		;funcret
  5642   001F42                     __end_of___flmul:
  5643                           	callstack 0
  5644                           
  5645 ;; *************** function ___flge *****************
  5646 ;; Defined at:
  5647 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  ff1             4    1[COMRAM] unsigned char 
  5650 ;;  ff2             4    5[COMRAM] unsigned char 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;		None
  5653 ;; Return value:  Size  Location     Type
  5654 ;;		None               void
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5662 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5665 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5666 ;;Total ram usage:       12 bytes
  5667 ;; Hardware stack levels used: 1
  5668 ;; Hardware stack levels required when called: 1
  5669 ;; This function calls:
  5670 ;;		Nothing
  5671 ;; This function is called by:
  5672 ;;		_convert_rgb2hue
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text17
  5677   003532                     __ptext17:
  5678                           	callstack 0
  5679   003532                     ___flge:
  5680                           	callstack 27
  5681   003532  0E00               	movlw	0
  5682   003534  1402               	andwf	___flge@ff1^0,w,c
  5683   003536  6E0A               	movwf	??___flge^0,c
  5684   003538  0E00               	movlw	0
  5685   00353A  1403               	andwf	(___flge@ff1+1)^0,w,c
  5686   00353C  6E0B               	movwf	(??___flge+1)^0,c
  5687   00353E  0E80               	movlw	128
  5688   003540  1404               	andwf	(___flge@ff1+2)^0,w,c
  5689   003542  6E0C               	movwf	(??___flge+2)^0,c
  5690   003544  0E7F               	movlw	127
  5691   003546  1405               	andwf	(___flge@ff1+3)^0,w,c
  5692   003548  6E0D               	movwf	(??___flge+3)^0,c
  5693   00354A  500A               	movf	??___flge^0,w,c
  5694   00354C  100B               	iorwf	(??___flge+1)^0,w,c
  5695   00354E  100C               	iorwf	(??___flge+2)^0,w,c
  5696   003550  100D               	iorwf	(??___flge+3)^0,w,c
  5697   003552  A4D8               	btfss	status,2,c
  5698   003554  EFAE  F01A         	goto	u6291
  5699   003558  EFB0  F01A         	goto	u6290
  5700   00355C                     u6291:
  5701   00355C  EFB8  F01A         	goto	l6460
  5702   003560                     u6290:
  5703   003560  0E00               	movlw	0
  5704   003562  6E02               	movwf	___flge@ff1^0,c
  5705   003564  0E00               	movlw	0
  5706   003566  6E03               	movwf	(___flge@ff1+1)^0,c
  5707   003568  0E00               	movlw	0
  5708   00356A  6E04               	movwf	(___flge@ff1+2)^0,c
  5709   00356C  0E00               	movlw	0
  5710   00356E  6E05               	movwf	(___flge@ff1+3)^0,c
  5711   003570                     l6460:
  5712   003570  0E00               	movlw	0
  5713   003572  1406               	andwf	___flge@ff2^0,w,c
  5714   003574  6E0A               	movwf	??___flge^0,c
  5715   003576  0E00               	movlw	0
  5716   003578  1407               	andwf	(___flge@ff2+1)^0,w,c
  5717   00357A  6E0B               	movwf	(??___flge+1)^0,c
  5718   00357C  0E80               	movlw	128
  5719   00357E  1408               	andwf	(___flge@ff2+2)^0,w,c
  5720   003580  6E0C               	movwf	(??___flge+2)^0,c
  5721   003582  0E7F               	movlw	127
  5722   003584  1409               	andwf	(___flge@ff2+3)^0,w,c
  5723   003586  6E0D               	movwf	(??___flge+3)^0,c
  5724   003588  500A               	movf	??___flge^0,w,c
  5725   00358A  100B               	iorwf	(??___flge+1)^0,w,c
  5726   00358C  100C               	iorwf	(??___flge+2)^0,w,c
  5727   00358E  100D               	iorwf	(??___flge+3)^0,w,c
  5728   003590  A4D8               	btfss	status,2,c
  5729   003592  EFCD  F01A         	goto	u6301
  5730   003596  EFCF  F01A         	goto	u6300
  5731   00359A                     u6301:
  5732   00359A  EFD7  F01A         	goto	l6464
  5733   00359E                     u6300:
  5734   00359E  0E00               	movlw	0
  5735   0035A0  6E06               	movwf	___flge@ff2^0,c
  5736   0035A2  0E00               	movlw	0
  5737   0035A4  6E07               	movwf	(___flge@ff2+1)^0,c
  5738   0035A6  0E00               	movlw	0
  5739   0035A8  6E08               	movwf	(___flge@ff2+2)^0,c
  5740   0035AA  0E00               	movlw	0
  5741   0035AC  6E09               	movwf	(___flge@ff2+3)^0,c
  5742   0035AE                     l6464:
  5743   0035AE  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5744   0035B0  EFDC  F01A         	goto	u6311
  5745   0035B4  EFDE  F01A         	goto	u6310
  5746   0035B8                     u6311:
  5747   0035B8  EFE7  F01A         	goto	l6468
  5748   0035BC                     u6310:
  5749   0035BC  6C02               	negf	___flge@ff1^0,c
  5750   0035BE  1E03               	comf	(___flge@ff1+1)^0,f,c
  5751   0035C0  B0D8               	btfsc	status,0,c
  5752   0035C2  2A03               	incf	(___flge@ff1+1)^0,f,c
  5753   0035C4  1E04               	comf	(___flge@ff1+2)^0,f,c
  5754   0035C6  B0D8               	btfsc	status,0,c
  5755   0035C8  2A04               	incf	(___flge@ff1+2)^0,f,c
  5756   0035CA  0E80               	movlw	128
  5757   0035CC  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5758   0035CE                     l6468:
  5759   0035CE  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5760   0035D0  EFEC  F01A         	goto	u6321
  5761   0035D4  EFEE  F01A         	goto	u6320
  5762   0035D8                     u6321:
  5763   0035D8  EFF7  F01A         	goto	l999
  5764   0035DC                     u6320:
  5765   0035DC  6C06               	negf	___flge@ff2^0,c
  5766   0035DE  1E07               	comf	(___flge@ff2+1)^0,f,c
  5767   0035E0  B0D8               	btfsc	status,0,c
  5768   0035E2  2A07               	incf	(___flge@ff2+1)^0,f,c
  5769   0035E4  1E08               	comf	(___flge@ff2+2)^0,f,c
  5770   0035E6  B0D8               	btfsc	status,0,c
  5771   0035E8  2A08               	incf	(___flge@ff2+2)^0,f,c
  5772   0035EA  0E80               	movlw	128
  5773   0035EC  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5774   0035EE                     l999:
  5775   0035EE  0E00               	movlw	0
  5776   0035F0  1A02               	xorwf	___flge@ff1^0,f,c
  5777   0035F2  0E00               	movlw	0
  5778   0035F4  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5779   0035F6  0E00               	movlw	0
  5780   0035F8  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5781   0035FA  0E80               	movlw	128
  5782   0035FC  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5783   0035FE  0E00               	movlw	0
  5784   003600  1A06               	xorwf	___flge@ff2^0,f,c
  5785   003602  0E00               	movlw	0
  5786   003604  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5787   003606  0E00               	movlw	0
  5788   003608  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5789   00360A  0E80               	movlw	128
  5790   00360C  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5791   00360E  5006               	movf	___flge@ff2^0,w,c
  5792   003610  5C02               	subwf	___flge@ff1^0,w,c
  5793   003612  5007               	movf	(___flge@ff2+1)^0,w,c
  5794   003614  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5795   003616  5008               	movf	(___flge@ff2+2)^0,w,c
  5796   003618  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5797   00361A  5009               	movf	(___flge@ff2+3)^0,w,c
  5798   00361C  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5799   00361E  B0D8               	btfsc	status,0,c
  5800   003620  EF14  F01B         	goto	u6331
  5801   003624  EF16  F01B         	goto	u6330
  5802   003628                     u6331:
  5803   003628  EF19  F01B         	goto	l6474
  5804   00362C                     u6330:
  5805   00362C  90D8               	bcf	status,0,c
  5806   00362E  EF1A  F01B         	goto	l1004
  5807   003632                     l6474:
  5808   003632  80D8               	bsf	status,0,c
  5809   003634                     l1004:
  5810   003634  0012               	return		;funcret
  5811   003636                     __end_of___flge:
  5812                           	callstack 0
  5813                           
  5814 ;; *************** function ___fleq *****************
  5815 ;; Defined at:
  5816 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  ff1             4    1[COMRAM] unsigned char 
  5819 ;;  ff2             4    5[COMRAM] unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5831 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5833 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5834 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;Total ram usage:       12 bytes
  5836 ;; Hardware stack levels used: 1
  5837 ;; Hardware stack levels required when called: 1
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_convert_rgb2hue
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text18
  5846   003AF8                     __ptext18:
  5847                           	callstack 0
  5848   003AF8                     ___fleq:
  5849                           	callstack 27
  5850   003AF8  0E00               	movlw	0
  5851   003AFA  1402               	andwf	___fleq@ff1^0,w,c
  5852   003AFC  6E0A               	movwf	??___fleq^0,c
  5853   003AFE  0E00               	movlw	0
  5854   003B00  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5855   003B02  6E0B               	movwf	(??___fleq+1)^0,c
  5856   003B04  0E80               	movlw	128
  5857   003B06  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5858   003B08  6E0C               	movwf	(??___fleq+2)^0,c
  5859   003B0A  0E7F               	movlw	127
  5860   003B0C  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5861   003B0E  6E0D               	movwf	(??___fleq+3)^0,c
  5862   003B10  500A               	movf	??___fleq^0,w,c
  5863   003B12  100B               	iorwf	(??___fleq+1)^0,w,c
  5864   003B14  100C               	iorwf	(??___fleq+2)^0,w,c
  5865   003B16  100D               	iorwf	(??___fleq+3)^0,w,c
  5866   003B18  A4D8               	btfss	status,2,c
  5867   003B1A  EF91  F01D         	goto	u6261
  5868   003B1E  EF93  F01D         	goto	u6260
  5869   003B22                     u6261:
  5870   003B22  EF9B  F01D         	goto	l6444
  5871   003B26                     u6260:
  5872   003B26  0E00               	movlw	0
  5873   003B28  6E02               	movwf	___fleq@ff1^0,c
  5874   003B2A  0E00               	movlw	0
  5875   003B2C  6E03               	movwf	(___fleq@ff1+1)^0,c
  5876   003B2E  0E00               	movlw	0
  5877   003B30  6E04               	movwf	(___fleq@ff1+2)^0,c
  5878   003B32  0E00               	movlw	0
  5879   003B34  6E05               	movwf	(___fleq@ff1+3)^0,c
  5880   003B36                     l6444:
  5881   003B36  0E00               	movlw	0
  5882   003B38  1406               	andwf	___fleq@ff2^0,w,c
  5883   003B3A  6E0A               	movwf	??___fleq^0,c
  5884   003B3C  0E00               	movlw	0
  5885   003B3E  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5886   003B40  6E0B               	movwf	(??___fleq+1)^0,c
  5887   003B42  0E80               	movlw	128
  5888   003B44  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5889   003B46  6E0C               	movwf	(??___fleq+2)^0,c
  5890   003B48  0E7F               	movlw	127
  5891   003B4A  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5892   003B4C  6E0D               	movwf	(??___fleq+3)^0,c
  5893   003B4E  500A               	movf	??___fleq^0,w,c
  5894   003B50  100B               	iorwf	(??___fleq+1)^0,w,c
  5895   003B52  100C               	iorwf	(??___fleq+2)^0,w,c
  5896   003B54  100D               	iorwf	(??___fleq+3)^0,w,c
  5897   003B56  A4D8               	btfss	status,2,c
  5898   003B58  EFB0  F01D         	goto	u6271
  5899   003B5C  EFB2  F01D         	goto	u6270
  5900   003B60                     u6271:
  5901   003B60  EFBA  F01D         	goto	l6448
  5902   003B64                     u6270:
  5903   003B64  0E00               	movlw	0
  5904   003B66  6E06               	movwf	___fleq@ff2^0,c
  5905   003B68  0E00               	movlw	0
  5906   003B6A  6E07               	movwf	(___fleq@ff2+1)^0,c
  5907   003B6C  0E00               	movlw	0
  5908   003B6E  6E08               	movwf	(___fleq@ff2+2)^0,c
  5909   003B70  0E00               	movlw	0
  5910   003B72  6E09               	movwf	(___fleq@ff2+3)^0,c
  5911   003B74                     l6448:
  5912   003B74  5006               	movf	___fleq@ff2^0,w,c
  5913   003B76  1802               	xorwf	___fleq@ff1^0,w,c
  5914   003B78  E10F               	bnz	u6280
  5915   003B7A  5007               	movf	(___fleq@ff2+1)^0,w,c
  5916   003B7C  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5917   003B7E  E10C               	bnz	u6280
  5918   003B80  5008               	movf	(___fleq@ff2+2)^0,w,c
  5919   003B82  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5920   003B84  E109               	bnz	u6280
  5921   003B86  5009               	movf	(___fleq@ff2+3)^0,w,c
  5922   003B88  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5923   003B8A  B4D8               	btfsc	status,2,c
  5924   003B8C  EFCA  F01D         	goto	u6281
  5925   003B90  EFCC  F01D         	goto	u6280
  5926   003B94                     u6281:
  5927   003B94  EFCF  F01D         	goto	l6452
  5928   003B98                     u6280:
  5929   003B98  90D8               	bcf	status,0,c
  5930   003B9A  EFD0  F01D         	goto	l993
  5931   003B9E                     l6452:
  5932   003B9E  80D8               	bsf	status,0,c
  5933   003BA0                     l993:
  5934   003BA0  0012               	return		;funcret
  5935   003BA2                     __end_of___fleq:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function ___fldiv *****************
  5939 ;; Defined at:
  5940 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  b               4   25[COMRAM] unsigned char 
  5943 ;;  a               4   29[COMRAM] unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  grs             4   44[COMRAM] unsigned long 
  5946 ;;  rem             4   37[COMRAM] unsigned long 
  5947 ;;  new_exp         2   42[COMRAM] short 
  5948 ;;  aexp            1   49[COMRAM] unsigned char 
  5949 ;;  bexp            1   48[COMRAM] unsigned char 
  5950 ;;  sign            1   41[COMRAM] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  4   25[COMRAM] unsigned char 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5960 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5964 ;;Total ram usage:       25 bytes
  5965 ;; Hardware stack levels used: 1
  5966 ;; Hardware stack levels required when called: 1
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_convert_rgb2hue
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text19
  5975   001F42                     __ptext19:
  5976                           	callstack 0
  5977   001F42                     ___fldiv:
  5978                           	callstack 27
  5979   001F42  501D               	movf	(___fldiv@b+3)^0,w,c
  5980   001F44  0B80               	andlw	128
  5981   001F46  6E2A               	movwf	___fldiv@sign^0,c
  5982   001F48  501D               	movf	(___fldiv@b+3)^0,w,c
  5983   001F4A  241D               	addwf	(___fldiv@b+3)^0,w,c
  5984   001F4C  6E31               	movwf	___fldiv@bexp^0,c
  5985   001F4E  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  5986   001F50  EFAC  F00F         	goto	u6031
  5987   001F54  EFAE  F00F         	goto	u6030
  5988   001F58                     u6031:
  5989   001F58  EFAF  F00F         	goto	l6302
  5990   001F5C                     u6030:
  5991   001F5C  8031               	bsf	___fldiv@bexp^0,0,c
  5992   001F5E                     l6302:
  5993   001F5E  5031               	movf	___fldiv@bexp^0,w,c
  5994   001F60  B4D8               	btfsc	status,2,c
  5995   001F62  EFB5  F00F         	goto	u6041
  5996   001F66  EFB7  F00F         	goto	u6040
  5997   001F6A                     u6041:
  5998   001F6A  EFCC  F00F         	goto	l6312
  5999   001F6E                     u6040:
  6000   001F6E  2831               	incf	___fldiv@bexp^0,w,c
  6001   001F70  A4D8               	btfss	status,2,c
  6002   001F72  EFBD  F00F         	goto	u6051
  6003   001F76  EFBF  F00F         	goto	u6050
  6004   001F7A                     u6051:
  6005   001F7A  EFC7  F00F         	goto	l6308
  6006   001F7E                     u6050:
  6007   001F7E  0E00               	movlw	0
  6008   001F80  6E1A               	movwf	___fldiv@b^0,c
  6009   001F82  0E00               	movlw	0
  6010   001F84  6E1B               	movwf	(___fldiv@b+1)^0,c
  6011   001F86  0E00               	movlw	0
  6012   001F88  6E1C               	movwf	(___fldiv@b+2)^0,c
  6013   001F8A  0E00               	movlw	0
  6014   001F8C  6E1D               	movwf	(___fldiv@b+3)^0,c
  6015   001F8E                     l6308:
  6016   001F8E  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  6017   001F90  0E00               	movlw	0
  6018   001F92  6E1D               	movwf	(___fldiv@b+3)^0,c
  6019   001F94  EFD4  F00F         	goto	l6314
  6020   001F98                     l6312:
  6021   001F98  0E00               	movlw	0
  6022   001F9A  6E1A               	movwf	___fldiv@b^0,c
  6023   001F9C  0E00               	movlw	0
  6024   001F9E  6E1B               	movwf	(___fldiv@b+1)^0,c
  6025   001FA0  0E00               	movlw	0
  6026   001FA2  6E1C               	movwf	(___fldiv@b+2)^0,c
  6027   001FA4  0E00               	movlw	0
  6028   001FA6  6E1D               	movwf	(___fldiv@b+3)^0,c
  6029   001FA8                     l6314:
  6030   001FA8  5021               	movf	(___fldiv@a+3)^0,w,c
  6031   001FAA  0B80               	andlw	128
  6032   001FAC  1A2A               	xorwf	___fldiv@sign^0,f,c
  6033   001FAE  5021               	movf	(___fldiv@a+3)^0,w,c
  6034   001FB0  2421               	addwf	(___fldiv@a+3)^0,w,c
  6035   001FB2  6E32               	movwf	___fldiv@aexp^0,c
  6036   001FB4  AE20               	btfss	(___fldiv@a+2)^0,7,c
  6037   001FB6  EFDF  F00F         	goto	u6061
  6038   001FBA  EFE1  F00F         	goto	u6060
  6039   001FBE                     u6061:
  6040   001FBE  EFE2  F00F         	goto	l6322
  6041   001FC2                     u6060:
  6042   001FC2  8032               	bsf	___fldiv@aexp^0,0,c
  6043   001FC4                     l6322:
  6044   001FC4  5032               	movf	___fldiv@aexp^0,w,c
  6045   001FC6  B4D8               	btfsc	status,2,c
  6046   001FC8  EFE8  F00F         	goto	u6071
  6047   001FCC  EFEA  F00F         	goto	u6070
  6048   001FD0                     u6071:
  6049   001FD0  EFFF  F00F         	goto	l6332
  6050   001FD4                     u6070:
  6051   001FD4  2832               	incf	___fldiv@aexp^0,w,c
  6052   001FD6  A4D8               	btfss	status,2,c
  6053   001FD8  EFF0  F00F         	goto	u6081
  6054   001FDC  EFF2  F00F         	goto	u6080
  6055   001FE0                     u6081:
  6056   001FE0  EFFA  F00F         	goto	l6328
  6057   001FE4                     u6080:
  6058   001FE4  0E00               	movlw	0
  6059   001FE6  6E1E               	movwf	___fldiv@a^0,c
  6060   001FE8  0E00               	movlw	0
  6061   001FEA  6E1F               	movwf	(___fldiv@a+1)^0,c
  6062   001FEC  0E00               	movlw	0
  6063   001FEE  6E20               	movwf	(___fldiv@a+2)^0,c
  6064   001FF0  0E00               	movlw	0
  6065   001FF2  6E21               	movwf	(___fldiv@a+3)^0,c
  6066   001FF4                     l6328:
  6067   001FF4  8E20               	bsf	(___fldiv@a+2)^0,7,c
  6068   001FF6  0E00               	movlw	0
  6069   001FF8  6E21               	movwf	(___fldiv@a+3)^0,c
  6070   001FFA  EF07  F010         	goto	l6334
  6071   001FFE                     l6332:
  6072   001FFE  0E00               	movlw	0
  6073   002000  6E1E               	movwf	___fldiv@a^0,c
  6074   002002  0E00               	movlw	0
  6075   002004  6E1F               	movwf	(___fldiv@a+1)^0,c
  6076   002006  0E00               	movlw	0
  6077   002008  6E20               	movwf	(___fldiv@a+2)^0,c
  6078   00200A  0E00               	movlw	0
  6079   00200C  6E21               	movwf	(___fldiv@a+3)^0,c
  6080   00200E                     l6334:
  6081   00200E  501E               	movf	___fldiv@a^0,w,c
  6082   002010  101F               	iorwf	(___fldiv@a+1)^0,w,c
  6083   002012  1020               	iorwf	(___fldiv@a+2)^0,w,c
  6084   002014  1021               	iorwf	(___fldiv@a+3)^0,w,c
  6085   002016  A4D8               	btfss	status,2,c
  6086   002018  EF10  F010         	goto	u6091
  6087   00201C  EF12  F010         	goto	u6090
  6088   002020                     u6091:
  6089   002020  EF2A  F010         	goto	l6346
  6090   002024                     u6090:
  6091   002024  0E00               	movlw	0
  6092   002026  6E1A               	movwf	___fldiv@b^0,c
  6093   002028  0E00               	movlw	0
  6094   00202A  6E1B               	movwf	(___fldiv@b+1)^0,c
  6095   00202C  0E00               	movlw	0
  6096   00202E  6E1C               	movwf	(___fldiv@b+2)^0,c
  6097   002030  0E00               	movlw	0
  6098   002032  6E1D               	movwf	(___fldiv@b+3)^0,c
  6099   002034  0E80               	movlw	128
  6100   002036  121C               	iorwf	(___fldiv@b+2)^0,f,c
  6101   002038  0E7F               	movlw	127
  6102   00203A  121D               	iorwf	(___fldiv@b+3)^0,f,c
  6103   00203C                     l6340:
  6104   00203C  502A               	movf	___fldiv@sign^0,w,c
  6105   00203E  121D               	iorwf	(___fldiv@b+3)^0,f,c
  6106   002040  C01A  F01A         	movff	___fldiv@b,?___fldiv
  6107   002044  C01B  F01B         	movff	___fldiv@b+1,?___fldiv+1
  6108   002048  C01C  F01C         	movff	___fldiv@b+2,?___fldiv+2
  6109   00204C  C01D  F01D         	movff	___fldiv@b+3,?___fldiv+3
  6110   002050  EF6D  F011         	goto	l1316
  6111   002054                     l6346:
  6112   002054  5031               	movf	___fldiv@bexp^0,w,c
  6113   002056  A4D8               	btfss	status,2,c
  6114   002058  EF30  F010         	goto	u6101
  6115   00205C  EF32  F010         	goto	u6100
  6116   002060                     u6101:
  6117   002060  EF3C  F010         	goto	l6354
  6118   002064                     u6100:
  6119   002064  0E00               	movlw	0
  6120   002066  6E1A               	movwf	?___fldiv^0,c
  6121   002068  0E00               	movlw	0
  6122   00206A  6E1B               	movwf	(?___fldiv+1)^0,c
  6123   00206C  0E00               	movlw	0
  6124   00206E  6E1C               	movwf	(?___fldiv+2)^0,c
  6125   002070  0E00               	movlw	0
  6126   002072  6E1D               	movwf	(?___fldiv+3)^0,c
  6127   002074  EF6D  F011         	goto	l1316
  6128   002078                     l6354:
  6129   002078  5032               	movf	___fldiv@aexp^0,w,c
  6130   00207A  C031  F022         	movff	___fldiv@bexp,??___fldiv
  6131   00207E  6A23               	clrf	(??___fldiv+1)^0,c
  6132   002080  5E22               	subwf	??___fldiv^0,f,c
  6133   002082  0E00               	movlw	0
  6134   002084  5A23               	subwfb	(??___fldiv+1)^0,f,c
  6135   002086  0E7F               	movlw	127
  6136   002088  2422               	addwf	??___fldiv^0,w,c
  6137   00208A  6E2B               	movwf	___fldiv@new_exp^0,c
  6138   00208C  0E00               	movlw	0
  6139   00208E  2023               	addwfc	(??___fldiv+1)^0,w,c
  6140   002090  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6141   002092  C01A  F026         	movff	___fldiv@b,___fldiv@rem
  6142   002096  C01B  F027         	movff	___fldiv@b+1,___fldiv@rem+1
  6143   00209A  C01C  F028         	movff	___fldiv@b+2,___fldiv@rem+2
  6144   00209E  C01D  F029         	movff	___fldiv@b+3,___fldiv@rem+3
  6145   0020A2  0E00               	movlw	0
  6146   0020A4  6E1A               	movwf	___fldiv@b^0,c
  6147   0020A6  0E00               	movlw	0
  6148   0020A8  6E1B               	movwf	(___fldiv@b+1)^0,c
  6149   0020AA  0E00               	movlw	0
  6150   0020AC  6E1C               	movwf	(___fldiv@b+2)^0,c
  6151   0020AE  0E00               	movlw	0
  6152   0020B0  6E1D               	movwf	(___fldiv@b+3)^0,c
  6153   0020B2  0E00               	movlw	0
  6154   0020B4  6E2D               	movwf	___fldiv@grs^0,c
  6155   0020B6  0E00               	movlw	0
  6156   0020B8  6E2E               	movwf	(___fldiv@grs+1)^0,c
  6157   0020BA  0E00               	movlw	0
  6158   0020BC  6E2F               	movwf	(___fldiv@grs+2)^0,c
  6159   0020BE  0E00               	movlw	0
  6160   0020C0  6E30               	movwf	(___fldiv@grs+3)^0,c
  6161   0020C2  0E00               	movlw	0
  6162   0020C4  6E32               	movwf	___fldiv@aexp^0,c
  6163   0020C6  EF9D  F010         	goto	l1318
  6164   0020CA                     l6364:
  6165   0020CA  5032               	movf	___fldiv@aexp^0,w,c
  6166   0020CC  B4D8               	btfsc	status,2,c
  6167   0020CE  EF6B  F010         	goto	u6111
  6168   0020D2  EF6D  F010         	goto	u6110
  6169   0020D6                     u6111:
  6170   0020D6  EF84  F010         	goto	l6372
  6171   0020DA                     u6110:
  6172   0020DA  90D8               	bcf	status,0,c
  6173   0020DC  3626               	rlcf	___fldiv@rem^0,f,c
  6174   0020DE  3627               	rlcf	(___fldiv@rem+1)^0,f,c
  6175   0020E0  3628               	rlcf	(___fldiv@rem+2)^0,f,c
  6176   0020E2  3629               	rlcf	(___fldiv@rem+3)^0,f,c
  6177   0020E4  90D8               	bcf	status,0,c
  6178   0020E6  361A               	rlcf	___fldiv@b^0,f,c
  6179   0020E8  361B               	rlcf	(___fldiv@b+1)^0,f,c
  6180   0020EA  361C               	rlcf	(___fldiv@b+2)^0,f,c
  6181   0020EC  361D               	rlcf	(___fldiv@b+3)^0,f,c
  6182   0020EE  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6183   0020F0  EF7C  F010         	goto	u6121
  6184   0020F4  EF7E  F010         	goto	u6120
  6185   0020F8                     u6121:
  6186   0020F8  EF7F  F010         	goto	l1321
  6187   0020FC                     u6120:
  6188   0020FC  801A               	bsf	___fldiv@b^0,0,c
  6189   0020FE                     l1321:
  6190   0020FE  90D8               	bcf	status,0,c
  6191   002100  362D               	rlcf	___fldiv@grs^0,f,c
  6192   002102  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  6193   002104  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  6194   002106  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  6195   002108                     l6372:
  6196   002108  501E               	movf	___fldiv@a^0,w,c
  6197   00210A  5C26               	subwf	___fldiv@rem^0,w,c
  6198   00210C  501F               	movf	(___fldiv@a+1)^0,w,c
  6199   00210E  5827               	subwfb	(___fldiv@rem+1)^0,w,c
  6200   002110  5020               	movf	(___fldiv@a+2)^0,w,c
  6201   002112  5828               	subwfb	(___fldiv@rem+2)^0,w,c
  6202   002114  5021               	movf	(___fldiv@a+3)^0,w,c
  6203   002116  5829               	subwfb	(___fldiv@rem+3)^0,w,c
  6204   002118  A0D8               	btfss	status,0,c
  6205   00211A  EF91  F010         	goto	u6131
  6206   00211E  EF93  F010         	goto	u6130
  6207   002122                     u6131:
  6208   002122  EF9C  F010         	goto	l6378
  6209   002126                     u6130:
  6210   002126  8C30               	bsf	(___fldiv@grs+3)^0,6,c
  6211   002128  501E               	movf	___fldiv@a^0,w,c
  6212   00212A  5E26               	subwf	___fldiv@rem^0,f,c
  6213   00212C  501F               	movf	(___fldiv@a+1)^0,w,c
  6214   00212E  5A27               	subwfb	(___fldiv@rem+1)^0,f,c
  6215   002130  5020               	movf	(___fldiv@a+2)^0,w,c
  6216   002132  5A28               	subwfb	(___fldiv@rem+2)^0,f,c
  6217   002134  5021               	movf	(___fldiv@a+3)^0,w,c
  6218   002136  5A29               	subwfb	(___fldiv@rem+3)^0,f,c
  6219   002138                     l6378:
  6220   002138  2A32               	incf	___fldiv@aexp^0,f,c
  6221   00213A                     l1318:
  6222   00213A  0E19               	movlw	25
  6223   00213C  6432               	cpfsgt	___fldiv@aexp^0,c
  6224   00213E  EFA3  F010         	goto	u6141
  6225   002142  EFA5  F010         	goto	u6140
  6226   002146                     u6141:
  6227   002146  EF65  F010         	goto	l6364
  6228   00214A                     u6140:
  6229   00214A  5026               	movf	___fldiv@rem^0,w,c
  6230   00214C  1027               	iorwf	(___fldiv@rem+1)^0,w,c
  6231   00214E  1028               	iorwf	(___fldiv@rem+2)^0,w,c
  6232   002150  1029               	iorwf	(___fldiv@rem+3)^0,w,c
  6233   002152  B4D8               	btfsc	status,2,c
  6234   002154  EFAE  F010         	goto	u6151
  6235   002158  EFB0  F010         	goto	u6150
  6236   00215C                     u6151:
  6237   00215C  EFC8  F010         	goto	l6390
  6238   002160                     u6150:
  6239   002160  802D               	bsf	___fldiv@grs^0,0,c
  6240   002162  EFC8  F010         	goto	l6390
  6241   002166                     l6384:
  6242   002166  90D8               	bcf	status,0,c
  6243   002168  361A               	rlcf	___fldiv@b^0,f,c
  6244   00216A  361B               	rlcf	(___fldiv@b+1)^0,f,c
  6245   00216C  361C               	rlcf	(___fldiv@b+2)^0,f,c
  6246   00216E  361D               	rlcf	(___fldiv@b+3)^0,f,c
  6247   002170  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6248   002172  EFBD  F010         	goto	u6161
  6249   002176  EFBF  F010         	goto	u6160
  6250   00217A                     u6161:
  6251   00217A  EFC0  F010         	goto	l1327
  6252   00217E                     u6160:
  6253   00217E  801A               	bsf	___fldiv@b^0,0,c
  6254   002180                     l1327:
  6255   002180  90D8               	bcf	status,0,c
  6256   002182  362D               	rlcf	___fldiv@grs^0,f,c
  6257   002184  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  6258   002186  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  6259   002188  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  6260   00218A  062B               	decf	___fldiv@new_exp^0,f,c
  6261   00218C  A0D8               	btfss	status,0,c
  6262   00218E  062C               	decf	(___fldiv@new_exp+1)^0,f,c
  6263   002190                     l6390:
  6264   002190  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  6265   002192  EFCD  F010         	goto	u6171
  6266   002196  EFCF  F010         	goto	u6170
  6267   00219A                     u6171:
  6268   00219A  EFB3  F010         	goto	l6384
  6269   00219E                     u6170:
  6270   00219E  0E00               	movlw	0
  6271   0021A0  6E32               	movwf	___fldiv@aexp^0,c
  6272   0021A2  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6273   0021A4  EFD6  F010         	goto	u6181
  6274   0021A8  EFD8  F010         	goto	u6180
  6275   0021AC                     u6181:
  6276   0021AC  EFFC  F010         	goto	l1329
  6277   0021B0                     u6180:
  6278   0021B0  0EFF               	movlw	255
  6279   0021B2  142D               	andwf	___fldiv@grs^0,w,c
  6280   0021B4  6E22               	movwf	??___fldiv^0,c
  6281   0021B6  0EFF               	movlw	255
  6282   0021B8  142E               	andwf	(___fldiv@grs+1)^0,w,c
  6283   0021BA  6E23               	movwf	(??___fldiv+1)^0,c
  6284   0021BC  0EFF               	movlw	255
  6285   0021BE  142F               	andwf	(___fldiv@grs+2)^0,w,c
  6286   0021C0  6E24               	movwf	(??___fldiv+2)^0,c
  6287   0021C2  0E7F               	movlw	127
  6288   0021C4  1430               	andwf	(___fldiv@grs+3)^0,w,c
  6289   0021C6  6E25               	movwf	(??___fldiv+3)^0,c
  6290   0021C8  5022               	movf	??___fldiv^0,w,c
  6291   0021CA  1023               	iorwf	(??___fldiv+1)^0,w,c
  6292   0021CC  1024               	iorwf	(??___fldiv+2)^0,w,c
  6293   0021CE  1025               	iorwf	(??___fldiv+3)^0,w,c
  6294   0021D0  B4D8               	btfsc	status,2,c
  6295   0021D2  EFED  F010         	goto	u6191
  6296   0021D6  EFEF  F010         	goto	u6190
  6297   0021DA                     u6191:
  6298   0021DA  EFF3  F010         	goto	l1330
  6299   0021DE                     u6190:
  6300   0021DE                     l6398:
  6301   0021DE  0E01               	movlw	1
  6302   0021E0  6E32               	movwf	___fldiv@aexp^0,c
  6303   0021E2  EFFC  F010         	goto	l1329
  6304   0021E6                     l1330:
  6305   0021E6  A01A               	btfss	___fldiv@b^0,0,c
  6306   0021E8  EFF8  F010         	goto	u6201
  6307   0021EC  EFFA  F010         	goto	u6200
  6308   0021F0                     u6201:
  6309   0021F0  EFFC  F010         	goto	l1329
  6310   0021F4                     u6200:
  6311   0021F4  EFEF  F010         	goto	l6398
  6312   0021F8                     l1329:
  6313   0021F8  5032               	movf	___fldiv@aexp^0,w,c
  6314   0021FA  B4D8               	btfsc	status,2,c
  6315   0021FC  EF02  F011         	goto	u6211
  6316   002200  EF04  F011         	goto	u6210
  6317   002204                     u6211:
  6318   002204  EF28  F011         	goto	l6410
  6319   002208                     u6210:
  6320   002208  0E01               	movlw	1
  6321   00220A  261A               	addwf	___fldiv@b^0,f,c
  6322   00220C  0E00               	movlw	0
  6323   00220E  221B               	addwfc	(___fldiv@b+1)^0,f,c
  6324   002210  221C               	addwfc	(___fldiv@b+2)^0,f,c
  6325   002212  221D               	addwfc	(___fldiv@b+3)^0,f,c
  6326   002214  A01D               	btfss	(___fldiv@b+3)^0,0,c
  6327   002216  EF0F  F011         	goto	u6221
  6328   00221A  EF11  F011         	goto	u6220
  6329   00221E                     u6221:
  6330   00221E  EF28  F011         	goto	l6410
  6331   002222                     u6220:
  6332   002222  C01A  F022         	movff	___fldiv@b,??___fldiv
  6333   002226  C01B  F023         	movff	___fldiv@b+1,??___fldiv+1
  6334   00222A  C01C  F024         	movff	___fldiv@b+2,??___fldiv+2
  6335   00222E  C01D  F025         	movff	___fldiv@b+3,??___fldiv+3
  6336   002232  3425               	rlcf	(??___fldiv+3)^0,w,c
  6337   002234  3225               	rrcf	(??___fldiv+3)^0,f,c
  6338   002236  3224               	rrcf	(??___fldiv+2)^0,f,c
  6339   002238  3223               	rrcf	(??___fldiv+1)^0,f,c
  6340   00223A  3222               	rrcf	??___fldiv^0,f,c
  6341   00223C  C022  F01A         	movff	??___fldiv,___fldiv@b
  6342   002240  C023  F01B         	movff	??___fldiv+1,___fldiv@b+1
  6343   002244  C024  F01C         	movff	??___fldiv+2,___fldiv@b+2
  6344   002248  C025  F01D         	movff	??___fldiv+3,___fldiv@b+3
  6345   00224C  4A2B               	infsnz	___fldiv@new_exp^0,f,c
  6346   00224E  2A2C               	incf	(___fldiv@new_exp+1)^0,f,c
  6347   002250                     l6410:
  6348   002250  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6349   002252  EF33  F011         	goto	u6231
  6350   002256  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  6351   002258  E108               	bnz	u6230
  6352   00225A  282B               	incf	___fldiv@new_exp^0,w,c
  6353   00225C  A0D8               	btfss	status,0,c
  6354   00225E  EF33  F011         	goto	u6231
  6355   002262  EF35  F011         	goto	u6230
  6356   002266                     u6231:
  6357   002266  EF40  F011         	goto	l6414
  6358   00226A                     u6230:
  6359   00226A  0E00               	movlw	0
  6360   00226C  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6361   00226E  682B               	setf	___fldiv@new_exp^0,c
  6362   002270  0E00               	movlw	0
  6363   002272  6E1A               	movwf	___fldiv@b^0,c
  6364   002274  0E00               	movlw	0
  6365   002276  6E1B               	movwf	(___fldiv@b+1)^0,c
  6366   002278  0E00               	movlw	0
  6367   00227A  6E1C               	movwf	(___fldiv@b+2)^0,c
  6368   00227C  0E00               	movlw	0
  6369   00227E  6E1D               	movwf	(___fldiv@b+3)^0,c
  6370   002280                     l6414:
  6371   002280  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6372   002282  EF4D  F011         	goto	u6240
  6373   002286  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  6374   002288  E106               	bnz	u6241
  6375   00228A  042B               	decf	___fldiv@new_exp^0,w,c
  6376   00228C  B0D8               	btfsc	status,0,c
  6377   00228E  EF4B  F011         	goto	u6241
  6378   002292  EF4D  F011         	goto	u6240
  6379   002296                     u6241:
  6380   002296  EF5B  F011         	goto	l6418
  6381   00229A                     u6240:
  6382   00229A  0E00               	movlw	0
  6383   00229C  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6384   00229E  0E00               	movlw	0
  6385   0022A0  6E2B               	movwf	___fldiv@new_exp^0,c
  6386   0022A2  0E00               	movlw	0
  6387   0022A4  6E1A               	movwf	___fldiv@b^0,c
  6388   0022A6  0E00               	movlw	0
  6389   0022A8  6E1B               	movwf	(___fldiv@b+1)^0,c
  6390   0022AA  0E00               	movlw	0
  6391   0022AC  6E1C               	movwf	(___fldiv@b+2)^0,c
  6392   0022AE  0E00               	movlw	0
  6393   0022B0  6E1D               	movwf	(___fldiv@b+3)^0,c
  6394   0022B2  0E00               	movlw	0
  6395   0022B4  6E2A               	movwf	___fldiv@sign^0,c
  6396   0022B6                     l6418:
  6397   0022B6  C02B  F031         	movff	___fldiv@new_exp,___fldiv@bexp
  6398   0022BA  A031               	btfss	___fldiv@bexp^0,0,c
  6399   0022BC  EF62  F011         	goto	u6251
  6400   0022C0  EF64  F011         	goto	u6250
  6401   0022C4                     u6251:
  6402   0022C4  EF67  F011         	goto	l6424
  6403   0022C8                     u6250:
  6404   0022C8  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  6405   0022CA  EF68  F011         	goto	l6426
  6406   0022CE                     l6424:
  6407   0022CE  9E1C               	bcf	(___fldiv@b+2)^0,7,c
  6408   0022D0                     l6426:
  6409   0022D0  90D8               	bcf	status,0,c
  6410   0022D2  3031               	rrcf	___fldiv@bexp^0,w,c
  6411   0022D4  6E1D               	movwf	(___fldiv@b+3)^0,c
  6412   0022D6  EF1E  F010         	goto	l6340
  6413   0022DA                     l1316:
  6414   0022DA  0012               	return		;funcret
  6415   0022DC                     __end_of___fldiv:
  6416                           	callstack 0
  6417                           
  6418 ;; *************** function _initUSART4 *****************
  6419 ;; Defined at:
  6420 ;;		line 14 in file "serial.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used: 1
  6440 ;; Hardware stack levels required when called: 1
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text20
  6449   004802                     __ptext20:
  6450                           	callstack 0
  6451   004802                     _initUSART4:
  6452                           	callstack 29
  6453   004802                     
  6454                           ;serial.c: 15:     RC0PPS = 0x12;
  6455   004802  0E12               	movlw	18
  6456   004804  010E               	movlb	14	; () banked
  6457   004806  6F62               	movwf	98,b	;volatile
  6458                           
  6459                           ;serial.c: 16:     RX4PPS = 0x11;
  6460   004808  0E11               	movlw	17
  6461   00480A  6F15               	movwf	21,b	;volatile
  6462   00480C                     
  6463                           ; BSR set to: 14
  6464                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6465   00480C  97E9               	bcf	233,3,b	;volatile
  6466   00480E                     
  6467                           ; BSR set to: 14
  6468                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6469   00480E  95E8               	bcf	232,2,b	;volatile
  6470                           
  6471                           ;serial.c: 19:     SP4BRGL = 51;
  6472   004810  0E33               	movlw	51
  6473   004812  6FE5               	movwf	229,b	;volatile
  6474                           
  6475                           ;serial.c: 20:     SP4BRGH = 0;
  6476   004814  0E00               	movlw	0
  6477   004816  6FE6               	movwf	230,b	;volatile
  6478   004818                     
  6479                           ; BSR set to: 14
  6480                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6481   004818  89E7               	bsf	231,4,b	;volatile
  6482   00481A                     
  6483                           ; BSR set to: 14
  6484                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6485   00481A  8BE8               	bsf	232,5,b	;volatile
  6486   00481C                     
  6487                           ; BSR set to: 14
  6488                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6489   00481C  8FE7               	bsf	231,7,b	;volatile
  6490   00481E                     
  6491                           ; BSR set to: 14
  6492   00481E  0012               	return		;funcret
  6493   004820                     __end_of_initUSART4:
  6494                           	callstack 0
  6495                           
  6496 ;; *************** function _initDCmotorsPWM *****************
  6497 ;; Defined at:
  6498 ;;		line 5 in file "dc_motor.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      void 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;Total ram usage:        2 bytes
  6517 ;; Hardware stack levels used: 1
  6518 ;; Hardware stack levels required when called: 1
  6519 ;; This function calls:
  6520 ;;		Nothing
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text21
  6527   003CE2                     __ptext21:
  6528                           	callstack 0
  6529   003CE2                     _initDCmotorsPWM:
  6530                           	callstack 29
  6531   003CE2                     
  6532                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6533   003CE2  9485               	bcf	133,2,c	;volatile
  6534                           
  6535                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6536   003CE4  9E83               	bcf	131,7,c	;volatile
  6537                           
  6538                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6539   003CE6  9885               	bcf	133,4,c	;volatile
  6540                           
  6541                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6542   003CE8  9C87               	bcf	135,6,c	;volatile
  6543                           
  6544                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6545   003CEA  947D               	bcf	125,2,c	;volatile
  6546                           
  6547                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6548   003CEC  9E7B               	bcf	123,7,c	;volatile
  6549                           
  6550                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6551   003CEE  987D               	bcf	125,4,c	;volatile
  6552                           
  6553                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6554   003CF0  9C7F               	bcf	127,6,c	;volatile
  6555   003CF2                     
  6556                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6557   003CF2  0E05               	movlw	5
  6558   003CF4  010E               	movlb	14	; () banked
  6559   003CF6  6F74               	movwf	116,b	;volatile
  6560                           
  6561                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6562   003CF8  0E06               	movlw	6
  6563   003CFA  6F76               	movwf	118,b	;volatile
  6564                           
  6565                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6566   003CFC  0E07               	movlw	7
  6567   003CFE  6F69               	movwf	105,b	;volatile
  6568                           
  6569                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6570   003D00  0E08               	movlw	8
  6571   003D02  6F88               	movwf	136,b	;volatile
  6572                           
  6573                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6574   003D04  50BD               	movf	189,w,c	;volatile
  6575   003D06  0B8F               	andlw	-113
  6576   003D08  0940               	iorlw	64
  6577   003D0A  6EBD               	movwf	189,c	;volatile
  6578                           
  6579                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6580   003D0C  0EE0               	movlw	-32
  6581   003D0E  16BE               	andwf	190,f,c	;volatile
  6582                           
  6583                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6584   003D10  50BF               	movf	191,w,c	;volatile
  6585   003D12  0BF0               	andlw	-16
  6586   003D14  0901               	iorlw	1
  6587   003D16  6EBF               	movwf	191,c	;volatile
  6588   003D18                     
  6589                           ; BSR set to: 14
  6590                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6591   003D18  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6592   003D1C                     
  6593                           ; BSR set to: 14
  6594                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6595   003D1C  8EBD               	bsf	189,7,c	;volatile
  6596                           
  6597                           ;dc_motor.c: 35:     CCPR1H=0;
  6598   003D1E  0E00               	movlw	0
  6599   003D20  6EAA               	movwf	170,c	;volatile
  6600                           
  6601                           ;dc_motor.c: 36:     CCPR2H=0;
  6602   003D22  0E00               	movlw	0
  6603   003D24  6EA6               	movwf	166,c	;volatile
  6604                           
  6605                           ;dc_motor.c: 37:     CCPR3H=0;
  6606   003D26  0E00               	movlw	0
  6607   003D28  010F               	movlb	15	; () banked
  6608   003D2A  6F25               	movwf	37,b	;volatile
  6609                           
  6610                           ;dc_motor.c: 38:     CCPR4H=0;
  6611   003D2C  0E00               	movlw	0
  6612   003D2E  6F21               	movwf	33,b	;volatile
  6613                           
  6614                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6615   003D30  0EFC               	movlw	-4
  6616   003D32  16AD               	andwf	173,f,c	;volatile
  6617                           
  6618                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6619   003D34  0EF3               	movlw	-13
  6620   003D36  16AD               	andwf	173,f,c	;volatile
  6621                           
  6622                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6623   003D38  0ECF               	movlw	-49
  6624   003D3A  16AD               	andwf	173,f,c	;volatile
  6625                           
  6626                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6627   003D3C  0E3F               	movlw	-193
  6628   003D3E  16AD               	andwf	173,f,c	;volatile
  6629   003D40                     
  6630                           ; BSR set to: 15
  6631                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6632   003D40  88AB               	bsf	171,4,c	;volatile
  6633                           
  6634                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6635   003D42  50AB               	movf	171,w,c	;volatile
  6636   003D44  0BF0               	andlw	-16
  6637   003D46  090C               	iorlw	12
  6638   003D48  6EAB               	movwf	171,c	;volatile
  6639   003D4A                     
  6640                           ; BSR set to: 15
  6641                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6642   003D4A  8EAB               	bsf	171,7,c	;volatile
  6643   003D4C                     
  6644                           ; BSR set to: 15
  6645                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6646   003D4C  88A7               	bsf	167,4,c	;volatile
  6647                           
  6648                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6649   003D4E  50A7               	movf	167,w,c	;volatile
  6650   003D50  0BF0               	andlw	-16
  6651   003D52  090C               	iorlw	12
  6652   003D54  6EA7               	movwf	167,c	;volatile
  6653   003D56                     
  6654                           ; BSR set to: 15
  6655                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6656   003D56  8EA7               	bsf	167,7,c	;volatile
  6657   003D58                     
  6658                           ; BSR set to: 15
  6659                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6660   003D58  8926               	bsf	38,4,b	;volatile
  6661                           
  6662                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6663   003D5A  5126               	movf	38,w,b	;volatile
  6664   003D5C  0BF0               	andlw	-16
  6665   003D5E  090C               	iorlw	12
  6666   003D60  6F26               	movwf	38,b	;volatile
  6667   003D62                     
  6668                           ; BSR set to: 15
  6669                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6670   003D62  8F26               	bsf	38,7,b	;volatile
  6671   003D64                     
  6672                           ; BSR set to: 15
  6673                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6674   003D64  8922               	bsf	34,4,b	;volatile
  6675                           
  6676                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6677   003D66  5122               	movf	34,w,b	;volatile
  6678   003D68  0BF0               	andlw	-16
  6679   003D6A  090C               	iorlw	12
  6680   003D6C  6F22               	movwf	34,b	;volatile
  6681   003D6E                     
  6682                           ; BSR set to: 15
  6683                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6684   003D6E  8F22               	bsf	34,7,b	;volatile
  6685   003D70                     
  6686                           ; BSR set to: 15
  6687   003D70  0012               	return		;funcret
  6688   003D72                     __end_of_initDCmotorsPWM:
  6689                           	callstack 0
  6690                           
  6691 ;; *************** function _get16bitTMR0val *****************
  6692 ;; Defined at:
  6693 ;;		line 33 in file "timers.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  path_step       2    6[COMRAM] unsigned int 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  combined_val    2   12[COMRAM] int 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  2    6[COMRAM] unsigned int 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6707 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6709 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;Total ram usage:        8 bytes
  6712 ;; Hardware stack levels used: 1
  6713 ;; Hardware stack levels required when called: 2
  6714 ;; This function calls:
  6715 ;;		_logAction
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text22
  6722   004324                     __ptext22:
  6723                           	callstack 0
  6724   004324                     _get16bitTMR0val:
  6725                           	callstack 28
  6726   004324                     
  6727                           ;timers.c: 33: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 34: {;time
      +                          rs.c: 35:     int combined_value;;timers.c: 36:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6728   004324  50D4               	movf	212,w,c	;volatile
  6729   004326  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6730   004328  6A09               	clrf	??_get16bitTMR0val^0,c
  6731   00432A  50D3               	movf	211,w,c	;volatile
  6732   00432C  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6733   00432E  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6734   004330  5009               	movf	??_get16bitTMR0val^0,w,c
  6735   004332  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6736   004334  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6737   004336  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6738   004338  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6739   00433A  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6740   00433C                     
  6741                           ;timers.c: 37:     T0CON0bits.T0EN=0;
  6742   00433C  9ED5               	bcf	213,7,c	;volatile
  6743   00433E                     
  6744                           ;timers.c: 38:     logAction('0',combined_value, path_step);
  6745   00433E  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6746   004342  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6747   004346  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6748   00434A  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6749   00434E  0E30               	movlw	48
  6750   004350  EC0E  F021         	call	_logAction
  6751   004354                     
  6752                           ;timers.c: 39:     return path_step;
  6753   004354  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6754   004358  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6755   00435C  0012               	return		;funcret
  6756   00435E                     __end_of_get16bitTMR0val:
  6757                           	callstack 0
  6758                           
  6759 ;; *************** function _decision *****************
  6760 ;; Defined at:
  6761 ;;		line 274 in file "color.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  hue             2   32[COMRAM] unsigned int 
  6764 ;;  path_step       2   34[COMRAM] unsigned int 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  color           2    0        unsigned int 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  2   32[COMRAM] unsigned int 
  6769 ;; Registers used:
  6770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6779 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6780 ;;Total ram usage:        4 bytes
  6781 ;; Hardware stack levels used: 1
  6782 ;; Hardware stack levels required when called: 6
  6783 ;; This function calls:
  6784 ;;		_logAction
  6785 ;;		_moveBlue
  6786 ;;		_moveGreen
  6787 ;;		_moveLightBlue
  6788 ;;		_moveOrange
  6789 ;;		_movePink
  6790 ;;		_moveRed
  6791 ;;		_moveYellow
  6792 ;; This function is called by:
  6793 ;;		_main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text23
  6798   002624                     __ptext23:
  6799                           	callstack 0
  6800   002624                     _decision:
  6801                           	callstack 24
  6802   002624                     
  6803                           ;color.c: 279:     unsigned int color;;color.c: 281:     if (hue<=10 || hue>=355) {
  6804   002624  5022               	movf	(decision@hue+1)^0,w,c
  6805   002626  E109               	bnz	u6710
  6806   002628  0E0B               	movlw	11
  6807   00262A  5C21               	subwf	decision@hue^0,w,c
  6808   00262C  A0D8               	btfss	status,0,c
  6809   00262E  EF1B  F013         	goto	u6711
  6810   002632  EF1D  F013         	goto	u6710
  6811   002636                     u6711:
  6812   002636  EF28  F013         	goto	l6906
  6813   00263A                     u6710:
  6814   00263A  0E63               	movlw	99
  6815   00263C  5C21               	subwf	decision@hue^0,w,c
  6816   00263E  0E01               	movlw	1
  6817   002640  5822               	subwfb	(decision@hue+1)^0,w,c
  6818   002642  A0D8               	btfss	status,0,c
  6819   002644  EF26  F013         	goto	u6721
  6820   002648  EF28  F013         	goto	u6720
  6821   00264C                     u6721:
  6822   00264C  EF3D  F013         	goto	l6914
  6823   002650                     u6720:
  6824   002650                     l6906:
  6825                           
  6826                           ;color.c: 282:         moveRed(&motorL, &motorR);
  6827   002650  0EEE               	movlw	low _motorL
  6828   002652  6E1D               	movwf	moveRed@mL^0,c
  6829   002654  0EE5               	movlw	low _motorR
  6830   002656  6E1E               	movwf	moveRed@mR^0,c
  6831   002658  EC4B  F022         	call	_moveRed	;wreg free
  6832   00265C                     
  6833                           ;color.c: 283:         logAction('1',0, path_step);
  6834   00265C  0E00               	movlw	0
  6835   00265E  6E03               	movwf	(logAction@newTime+1)^0,c
  6836   002660  0E00               	movlw	0
  6837   002662  6E02               	movwf	logAction@newTime^0,c
  6838   002664  C023  F004         	movff	decision@path_step,logAction@path_step
  6839   002668  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6840   00266C  0E31               	movlw	49
  6841   00266E  EC0E  F021         	call	_logAction
  6842   002672                     l6912:
  6843                           
  6844                           ;color.c: 285:         path_step++;
  6845   002672  4A23               	infsnz	decision@path_step^0,f,c
  6846   002674  2A24               	incf	(decision@path_step+1)^0,f,c
  6847                           
  6848                           ;color.c: 286:     }
  6849   002676  EF33  F014         	goto	l6986
  6850   00267A                     l6914:
  6851   00267A  5022               	movf	(decision@hue+1)^0,w,c
  6852   00267C  E109               	bnz	u6730
  6853   00267E  0E69               	movlw	105
  6854   002680  5C21               	subwf	decision@hue^0,w,c
  6855   002682  A0D8               	btfss	status,0,c
  6856   002684  EF46  F013         	goto	u6731
  6857   002688  EF48  F013         	goto	u6730
  6858   00268C                     u6731:
  6859   00268C  EF66  F013         	goto	l6926
  6860   002690                     u6730:
  6861   002690  5022               	movf	(decision@hue+1)^0,w,c
  6862   002692  E107               	bnz	u6741
  6863   002694  0E83               	movlw	131
  6864   002696  5C21               	subwf	decision@hue^0,w,c
  6865   002698  B0D8               	btfsc	status,0,c
  6866   00269A  EF51  F013         	goto	u6741
  6867   00269E  EF53  F013         	goto	u6740
  6868   0026A2                     u6741:
  6869   0026A2  EF66  F013         	goto	l6926
  6870   0026A6                     u6740:
  6871   0026A6                     
  6872                           ;color.c: 288:         moveGreen(&motorL, &motorR);
  6873   0026A6  0EEE               	movlw	low _motorL
  6874   0026A8  6E1D               	movwf	moveGreen@mL^0,c
  6875   0026AA  0EE5               	movlw	low _motorR
  6876   0026AC  6E1E               	movwf	moveGreen@mR^0,c
  6877   0026AE  ECFA  F022         	call	_moveGreen	;wreg free
  6878   0026B2                     
  6879                           ;color.c: 289:         logAction('2',0, path_step);
  6880   0026B2  0E00               	movlw	0
  6881   0026B4  6E03               	movwf	(logAction@newTime+1)^0,c
  6882   0026B6  0E00               	movlw	0
  6883   0026B8  6E02               	movwf	logAction@newTime^0,c
  6884   0026BA  C023  F004         	movff	decision@path_step,logAction@path_step
  6885   0026BE  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6886   0026C2  0E32               	movlw	50
  6887   0026C4  EC0E  F021         	call	_logAction
  6888   0026C8  EF39  F013         	goto	l6912
  6889   0026CC                     l6926:
  6890   0026CC  5022               	movf	(decision@hue+1)^0,w,c
  6891   0026CE  E109               	bnz	u6750
  6892   0026D0  0EE6               	movlw	230
  6893   0026D2  5C21               	subwf	decision@hue^0,w,c
  6894   0026D4  A0D8               	btfss	status,0,c
  6895   0026D6  EF6F  F013         	goto	u6751
  6896   0026DA  EF71  F013         	goto	u6750
  6897   0026DE                     u6751:
  6898   0026DE  EF8F  F013         	goto	l6938
  6899   0026E2                     u6750:
  6900   0026E2  5022               	movf	(decision@hue+1)^0,w,c
  6901   0026E4  E107               	bnz	u6761
  6902   0026E6  0EF1               	movlw	241
  6903   0026E8  5C21               	subwf	decision@hue^0,w,c
  6904   0026EA  B0D8               	btfsc	status,0,c
  6905   0026EC  EF7A  F013         	goto	u6761
  6906   0026F0  EF7C  F013         	goto	u6760
  6907   0026F4                     u6761:
  6908   0026F4  EF8F  F013         	goto	l6938
  6909   0026F8                     u6760:
  6910   0026F8                     
  6911                           ;color.c: 293:         moveBlue(&motorL,&motorR);
  6912   0026F8  0EEE               	movlw	low _motorL
  6913   0026FA  6E1D               	movwf	moveBlue@mL^0,c
  6914   0026FC  0EE5               	movlw	low _motorR
  6915   0026FE  6E1E               	movwf	moveBlue@mR^0,c
  6916   002700  EC13  F023         	call	_moveBlue	;wreg free
  6917   002704                     
  6918                           ;color.c: 294:         logAction('3',0, path_step);
  6919   002704  0E00               	movlw	0
  6920   002706  6E03               	movwf	(logAction@newTime+1)^0,c
  6921   002708  0E00               	movlw	0
  6922   00270A  6E02               	movwf	logAction@newTime^0,c
  6923   00270C  C023  F004         	movff	decision@path_step,logAction@path_step
  6924   002710  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6925   002714  0E33               	movlw	51
  6926   002716  EC0E  F021         	call	_logAction
  6927   00271A  EF39  F013         	goto	l6912
  6928   00271E                     l6938:
  6929   00271E  5022               	movf	(decision@hue+1)^0,w,c
  6930   002720  E109               	bnz	u6770
  6931   002722  0ED8               	movlw	216
  6932   002724  5C21               	subwf	decision@hue^0,w,c
  6933   002726  A0D8               	btfss	status,0,c
  6934   002728  EF98  F013         	goto	u6771
  6935   00272C  EF9A  F013         	goto	u6770
  6936   002730                     u6771:
  6937   002730  EFB8  F013         	goto	l6950
  6938   002734                     u6770:
  6939   002734  5022               	movf	(decision@hue+1)^0,w,c
  6940   002736  E107               	bnz	u6781
  6941   002738  0EDE               	movlw	222
  6942   00273A  5C21               	subwf	decision@hue^0,w,c
  6943   00273C  B0D8               	btfsc	status,0,c
  6944   00273E  EFA3  F013         	goto	u6781
  6945   002742  EFA5  F013         	goto	u6780
  6946   002746                     u6781:
  6947   002746  EFB8  F013         	goto	l6950
  6948   00274A                     u6780:
  6949   00274A                     
  6950                           ;color.c: 298:         moveLightBlue(&motorL,&motorR);
  6951   00274A  0EEE               	movlw	low _motorL
  6952   00274C  6E1D               	movwf	moveLightBlue@mL^0,c
  6953   00274E  0EE5               	movlw	low _motorR
  6954   002750  6E1E               	movwf	moveLightBlue@mR^0,c
  6955   002752  ECC8  F022         	call	_moveLightBlue	;wreg free
  6956   002756                     
  6957                           ;color.c: 299:         logAction('5',0, path_step);
  6958   002756  0E00               	movlw	0
  6959   002758  6E03               	movwf	(logAction@newTime+1)^0,c
  6960   00275A  0E00               	movlw	0
  6961   00275C  6E02               	movwf	logAction@newTime^0,c
  6962   00275E  C023  F004         	movff	decision@path_step,logAction@path_step
  6963   002762  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6964   002766  0E35               	movlw	53
  6965   002768  EC0E  F021         	call	_logAction
  6966   00276C  EF39  F013         	goto	l6912
  6967   002770                     l6950:
  6968   002770  0E2E               	movlw	46
  6969   002772  5C21               	subwf	decision@hue^0,w,c
  6970   002774  0E01               	movlw	1
  6971   002776  5822               	subwfb	(decision@hue+1)^0,w,c
  6972   002778  A0D8               	btfss	status,0,c
  6973   00277A  EFC1  F013         	goto	u6791
  6974   00277E  EFC3  F013         	goto	u6790
  6975   002782                     u6791:
  6976   002782  EFE1  F013         	goto	l6962
  6977   002786                     u6790:
  6978   002786  0E5B               	movlw	91
  6979   002788  5C21               	subwf	decision@hue^0,w,c
  6980   00278A  0E01               	movlw	1
  6981   00278C  5822               	subwfb	(decision@hue+1)^0,w,c
  6982   00278E  B0D8               	btfsc	status,0,c
  6983   002790  EFCC  F013         	goto	u6801
  6984   002794  EFCE  F013         	goto	u6800
  6985   002798                     u6801:
  6986   002798  EFE1  F013         	goto	l6962
  6987   00279C                     u6800:
  6988   00279C                     
  6989                           ;color.c: 303:         moveYellow(&motorL,&motorR);
  6990   00279C  0EEE               	movlw	low _motorL
  6991   00279E  6E1D               	movwf	moveYellow@mL^0,c
  6992   0027A0  0EE5               	movlw	low _motorR
  6993   0027A2  6E1E               	movwf	moveYellow@mR^0,c
  6994   0027A4  EC32  F022         	call	_moveYellow	;wreg free
  6995   0027A8                     
  6996                           ;color.c: 304:         logAction('1',0, path_step);
  6997   0027A8  0E00               	movlw	0
  6998   0027AA  6E03               	movwf	(logAction@newTime+1)^0,c
  6999   0027AC  0E00               	movlw	0
  7000   0027AE  6E02               	movwf	logAction@newTime^0,c
  7001   0027B0  C023  F004         	movff	decision@path_step,logAction@path_step
  7002   0027B4  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7003   0027B8  0E31               	movlw	49
  7004   0027BA  EC0E  F021         	call	_logAction
  7005   0027BE  EF39  F013         	goto	l6912
  7006   0027C2                     l6962:
  7007   0027C2  5022               	movf	(decision@hue+1)^0,w,c
  7008   0027C4  E109               	bnz	u6810
  7009   0027C6  0E0F               	movlw	15
  7010   0027C8  5C21               	subwf	decision@hue^0,w,c
  7011   0027CA  A0D8               	btfss	status,0,c
  7012   0027CC  EFEA  F013         	goto	u6811
  7013   0027D0  EFEC  F013         	goto	u6810
  7014   0027D4                     u6811:
  7015   0027D4  EF0A  F014         	goto	l6974
  7016   0027D8                     u6810:
  7017   0027D8  5022               	movf	(decision@hue+1)^0,w,c
  7018   0027DA  E107               	bnz	u6821
  7019   0027DC  0E24               	movlw	36
  7020   0027DE  5C21               	subwf	decision@hue^0,w,c
  7021   0027E0  B0D8               	btfsc	status,0,c
  7022   0027E2  EFF5  F013         	goto	u6821
  7023   0027E6  EFF7  F013         	goto	u6820
  7024   0027EA                     u6821:
  7025   0027EA  EF0A  F014         	goto	l6974
  7026   0027EE                     u6820:
  7027   0027EE                     
  7028                           ;color.c: 308:         moveOrange(&motorL,&motorR);
  7029   0027EE  0EEE               	movlw	low _motorL
  7030   0027F0  6E1D               	movwf	moveOrange@mL^0,c
  7031   0027F2  0EE5               	movlw	low _motorR
  7032   0027F4  6E1E               	movwf	moveOrange@mR^0,c
  7033   0027F6  EC96  F022         	call	_moveOrange	;wreg free
  7034   0027FA                     
  7035                           ;color.c: 309:         logAction('4',0, path_step);
  7036   0027FA  0E00               	movlw	0
  7037   0027FC  6E03               	movwf	(logAction@newTime+1)^0,c
  7038   0027FE  0E00               	movlw	0
  7039   002800  6E02               	movwf	logAction@newTime^0,c
  7040   002802  C023  F004         	movff	decision@path_step,logAction@path_step
  7041   002806  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7042   00280A  0E34               	movlw	52
  7043   00280C  EC0E  F021         	call	_logAction
  7044   002810  EF39  F013         	goto	l6912
  7045   002814                     l6974:
  7046   002814  5022               	movf	(decision@hue+1)^0,w,c
  7047   002816  E109               	bnz	u6830
  7048   002818  0EF4               	movlw	244
  7049   00281A  5C21               	subwf	decision@hue^0,w,c
  7050   00281C  A0D8               	btfss	status,0,c
  7051   00281E  EF13  F014         	goto	u6831
  7052   002822  EF15  F014         	goto	u6830
  7053   002826                     u6831:
  7054   002826  EF33  F014         	goto	l167
  7055   00282A                     u6830:
  7056   00282A  5022               	movf	(decision@hue+1)^0,w,c
  7057   00282C  E107               	bnz	u6841
  7058   00282E  0EFC               	movlw	252
  7059   002830  5C21               	subwf	decision@hue^0,w,c
  7060   002832  B0D8               	btfsc	status,0,c
  7061   002834  EF1E  F014         	goto	u6841
  7062   002838  EF20  F014         	goto	u6840
  7063   00283C                     u6841:
  7064   00283C  EF33  F014         	goto	l167
  7065   002840                     u6840:
  7066   002840                     
  7067                           ;color.c: 313:         movePink(&motorL,&motorR);
  7068   002840  0EEE               	movlw	low _motorL
  7069   002842  6E1D               	movwf	movePink@mL^0,c
  7070   002844  0EE5               	movlw	low _motorR
  7071   002846  6E1E               	movwf	movePink@mR^0,c
  7072   002848  EC64  F022         	call	_movePink	;wreg free
  7073   00284C                     
  7074                           ;color.c: 314:         logAction('2',0, path_step);
  7075   00284C  0E00               	movlw	0
  7076   00284E  6E03               	movwf	(logAction@newTime+1)^0,c
  7077   002850  0E00               	movlw	0
  7078   002852  6E02               	movwf	logAction@newTime^0,c
  7079   002854  C023  F004         	movff	decision@path_step,logAction@path_step
  7080   002858  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7081   00285C  0E32               	movlw	50
  7082   00285E  EC0E  F021         	call	_logAction
  7083   002862  EF39  F013         	goto	l6912
  7084   002866                     l167:
  7085   002866                     l6986:
  7086                           
  7087                           ;color.c: 320:     return path_step;
  7088   002866  C023  F021         	movff	decision@path_step,?_decision
  7089   00286A  C024  F022         	movff	decision@path_step+1,?_decision+1
  7090   00286E  0012               	return		;funcret
  7091   002870                     __end_of_decision:
  7092                           	callstack 0
  7093                           
  7094 ;; *************** function _moveYellow *****************
  7095 ;; Defined at:
  7096 ;;		line 284 in file "dc_motor.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7099 ;;		 -> motorL(9), 
  7100 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7101 ;;		 -> motorR(9), 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;		None
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7115 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7116 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7117 ;;Total ram usage:        4 bytes
  7118 ;; Hardware stack levels used: 1
  7119 ;; Hardware stack levels required when called: 5
  7120 ;; This function calls:
  7121 ;;		_backOneAndHalf
  7122 ;;		_right90
  7123 ;; This function is called by:
  7124 ;;		_decision
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text24
  7129   004464                     __ptext24:
  7130                           	callstack 0
  7131   004464                     _moveYellow:
  7132                           	callstack 24
  7133   004464                     
  7134                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7135   004464  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7136   004468  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7137   00446C  EC7D  F022         	call	_backOneAndHalf	;wreg free
  7138   004470                     
  7139                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7140   004470  0E29               	movlw	41
  7141   004472  6E20               	movwf	(??_moveYellow+1)^0,c
  7142   004474  0E96               	movlw	150
  7143   004476  6E1F               	movwf	??_moveYellow^0,c
  7144   004478  0E7F               	movlw	127
  7145   00447A                     u7137:
  7146   00447A  2EE8               	decfsz	wreg,f,c
  7147   00447C  D7FE               	bra	u7137
  7148   00447E  2E1F               	decfsz	??_moveYellow^0,f,c
  7149   004480  D7FC               	bra	u7137
  7150   004482  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7151   004484  D7FA               	bra	u7137
  7152   004486  0000               	nop	
  7153   004488                     
  7154                           ;dc_motor.c: 289:     right90(mL,mR);
  7155   004488  C01D  F019         	movff	moveYellow@mL,right90@mL
  7156   00448C  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7157   004490  EC5E  F023         	call	_right90	;wreg free
  7158   004494  0012               	return		;funcret
  7159   004496                     __end_of_moveYellow:
  7160                           	callstack 0
  7161                           
  7162 ;; *************** function _moveRed *****************
  7163 ;; Defined at:
  7164 ;;		line 255 in file "dc_motor.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7167 ;;		 -> motorL(9), 
  7168 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7169 ;;		 -> motorR(9), 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7184 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7185 ;;Total ram usage:        4 bytes
  7186 ;; Hardware stack levels used: 1
  7187 ;; Hardware stack levels required when called: 5
  7188 ;; This function calls:
  7189 ;;		_backHalf
  7190 ;;		_right90
  7191 ;; This function is called by:
  7192 ;;		_decision
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text25
  7197   004496                     __ptext25:
  7198                           	callstack 0
  7199   004496                     _moveRed:
  7200                           	callstack 24
  7201   004496                     
  7202                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7203   004496  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7204   00449A  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7205   00449E  EC8E  F023         	call	_backHalf	;wreg free
  7206   0044A2                     
  7207                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7208   0044A2  0E29               	movlw	41
  7209   0044A4  6E20               	movwf	(??_moveRed+1)^0,c
  7210   0044A6  0E96               	movlw	150
  7211   0044A8  6E1F               	movwf	??_moveRed^0,c
  7212   0044AA  0E7F               	movlw	127
  7213   0044AC                     u7147:
  7214   0044AC  2EE8               	decfsz	wreg,f,c
  7215   0044AE  D7FE               	bra	u7147
  7216   0044B0  2E1F               	decfsz	??_moveRed^0,f,c
  7217   0044B2  D7FC               	bra	u7147
  7218   0044B4  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7219   0044B6  D7FA               	bra	u7147
  7220   0044B8  0000               	nop	
  7221   0044BA                     
  7222                           ;dc_motor.c: 260:     right90(mL,mR);
  7223   0044BA  C01D  F019         	movff	moveRed@mL,right90@mL
  7224   0044BE  C01E  F01A         	movff	moveRed@mR,right90@mR
  7225   0044C2  EC5E  F023         	call	_right90	;wreg free
  7226   0044C6  0012               	return		;funcret
  7227   0044C8                     __end_of_moveRed:
  7228                           	callstack 0
  7229                           
  7230 ;; *************** function _right90 *****************
  7231 ;; Defined at:
  7232 ;;		line 193 in file "dc_motor.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7235 ;;		 -> motorL(9), 
  7236 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7237 ;;		 -> motorR(9), 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7252 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7253 ;;Total ram usage:        4 bytes
  7254 ;; Hardware stack levels used: 1
  7255 ;; Hardware stack levels required when called: 4
  7256 ;; This function calls:
  7257 ;;		_stop
  7258 ;;		_turnRight
  7259 ;; This function is called by:
  7260 ;;		_moveRed
  7261 ;;		_moveYellow
  7262 ;;		_reverseTurn
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           	psect	text26
  7267   0046BC                     __ptext26:
  7268                           	callstack 0
  7269   0046BC                     _right90:
  7270                           	callstack 24
  7271   0046BC                     
  7272                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7273   0046BC  C019  F014         	movff	right90@mL,turnRight@mL
  7274   0046C0  C01A  F015         	movff	right90@mR,turnRight@mR
  7275   0046C4  EC00  F01F         	call	_turnRight	;wreg free
  7276   0046C8                     
  7277                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7278   0046C8  0E18               	movlw	24
  7279   0046CA  6E1C               	movwf	(??_right90+1)^0,c
  7280   0046CC  0E8A               	movlw	138
  7281   0046CE  6E1B               	movwf	??_right90^0,c
  7282   0046D0  0EE8               	movlw	232
  7283   0046D2                     u7157:
  7284   0046D2  2EE8               	decfsz	wreg,f,c
  7285   0046D4  D7FE               	bra	u7157
  7286   0046D6  2E1B               	decfsz	??_right90^0,f,c
  7287   0046D8  D7FC               	bra	u7157
  7288   0046DA  2E1C               	decfsz	(??_right90+1)^0,f,c
  7289   0046DC  D7FA               	bra	u7157
  7290   0046DE                     
  7291                           ;dc_motor.c: 197:     stop(mL,mR);
  7292   0046DE  C019  F014         	movff	right90@mL,stop@mL
  7293   0046E2  C01A  F015         	movff	right90@mR,stop@mR
  7294   0046E6  ECB9  F01E         	call	_stop	;wreg free
  7295   0046EA  0012               	return		;funcret
  7296   0046EC                     __end_of_right90:
  7297                           	callstack 0
  7298                           
  7299 ;; *************** function _movePink *****************
  7300 ;; Defined at:
  7301 ;;		line 293 in file "dc_motor.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7304 ;;		 -> motorL(9), 
  7305 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7306 ;;		 -> motorR(9), 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      void 
  7311 ;; Registers used:
  7312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7322 ;;Total ram usage:        4 bytes
  7323 ;; Hardware stack levels used: 1
  7324 ;; Hardware stack levels required when called: 5
  7325 ;; This function calls:
  7326 ;;		_backOneAndHalf
  7327 ;;		_left90
  7328 ;; This function is called by:
  7329 ;;		_decision
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text27
  7334   0044C8                     __ptext27:
  7335                           	callstack 0
  7336   0044C8                     _movePink:
  7337                           	callstack 24
  7338   0044C8                     
  7339                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7340   0044C8  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7341   0044CC  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7342   0044D0  EC7D  F022         	call	_backOneAndHalf	;wreg free
  7343   0044D4                     
  7344                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7345   0044D4  0E29               	movlw	41
  7346   0044D6  6E20               	movwf	(??_movePink+1)^0,c
  7347   0044D8  0E96               	movlw	150
  7348   0044DA  6E1F               	movwf	??_movePink^0,c
  7349   0044DC  0E7F               	movlw	127
  7350   0044DE                     u7167:
  7351   0044DE  2EE8               	decfsz	wreg,f,c
  7352   0044E0  D7FE               	bra	u7167
  7353   0044E2  2E1F               	decfsz	??_movePink^0,f,c
  7354   0044E4  D7FC               	bra	u7167
  7355   0044E6  2E20               	decfsz	(??_movePink+1)^0,f,c
  7356   0044E8  D7FA               	bra	u7167
  7357   0044EA  0000               	nop	
  7358   0044EC                     
  7359                           ;dc_motor.c: 298:     left90(mL,mR);
  7360   0044EC  C01D  F019         	movff	movePink@mL,left90@mL
  7361   0044F0  C01E  F01A         	movff	movePink@mR,left90@mR
  7362   0044F4  EC76  F023         	call	_left90	;wreg free
  7363   0044F8  0012               	return		;funcret
  7364   0044FA                     __end_of_movePink:
  7365                           	callstack 0
  7366                           
  7367 ;; *************** function _backOneAndHalf *****************
  7368 ;; Defined at:
  7369 ;;		line 241 in file "dc_motor.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7372 ;;		 -> motorL(9), 
  7373 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7374 ;;		 -> motorR(9), 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7390 ;;Total ram usage:        4 bytes
  7391 ;; Hardware stack levels used: 1
  7392 ;; Hardware stack levels required when called: 4
  7393 ;; This function calls:
  7394 ;;		_fullSpeedBack
  7395 ;;		_stop
  7396 ;; This function is called by:
  7397 ;;		_moveYellow
  7398 ;;		_movePink
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text28
  7403   0044FA                     __ptext28:
  7404                           	callstack 0
  7405   0044FA                     _backOneAndHalf:
  7406                           	callstack 24
  7407   0044FA                     
  7408                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7409   0044FA  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7410   0044FE  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7411   004502  EC7E  F01F         	call	_fullSpeedBack	;wreg free
  7412   004506                     
  7413                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7414   004506  0E6A               	movlw	106
  7415   004508  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7416   00450A  0E85               	movlw	133
  7417   00450C  6E1B               	movwf	??_backOneAndHalf^0,c
  7418   00450E  0EB4               	movlw	180
  7419   004510                     u7177:
  7420   004510  2EE8               	decfsz	wreg,f,c
  7421   004512  D7FE               	bra	u7177
  7422   004514  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7423   004516  D7FC               	bra	u7177
  7424   004518  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7425   00451A  D7FA               	bra	u7177
  7426   00451C  D000               	nop2	
  7427   00451E                     
  7428                           ;dc_motor.c: 245:     stop(mL,mR);
  7429   00451E  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7430   004522  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7431   004526  ECB9  F01E         	call	_stop	;wreg free
  7432   00452A  0012               	return		;funcret
  7433   00452C                     __end_of_backOneAndHalf:
  7434                           	callstack 0
  7435                           
  7436 ;; *************** function _moveOrange *****************
  7437 ;; Defined at:
  7438 ;;		line 302 in file "dc_motor.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7441 ;;		 -> motorL(9), 
  7442 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7443 ;;		 -> motorR(9), 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;		None
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      void 
  7448 ;; Registers used:
  7449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;Total ram usage:        4 bytes
  7460 ;; Hardware stack levels used: 1
  7461 ;; Hardware stack levels required when called: 5
  7462 ;; This function calls:
  7463 ;;		_backHalf
  7464 ;;		_right135
  7465 ;; This function is called by:
  7466 ;;		_decision
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text29
  7471   00452C                     __ptext29:
  7472                           	callstack 0
  7473   00452C                     _moveOrange:
  7474                           	callstack 24
  7475   00452C                     
  7476                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7477   00452C  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7478   004530  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7479   004534  EC8E  F023         	call	_backHalf	;wreg free
  7480   004538                     
  7481                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7482   004538  0E29               	movlw	41
  7483   00453A  6E20               	movwf	(??_moveOrange+1)^0,c
  7484   00453C  0E96               	movlw	150
  7485   00453E  6E1F               	movwf	??_moveOrange^0,c
  7486   004540  0E7F               	movlw	127
  7487   004542                     u7187:
  7488   004542  2EE8               	decfsz	wreg,f,c
  7489   004544  D7FE               	bra	u7187
  7490   004546  2E1F               	decfsz	??_moveOrange^0,f,c
  7491   004548  D7FC               	bra	u7187
  7492   00454A  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7493   00454C  D7FA               	bra	u7187
  7494   00454E  0000               	nop	
  7495   004550                     
  7496                           ;dc_motor.c: 307:     right135(mL,mR);
  7497   004550  C01D  F019         	movff	moveOrange@mL,right135@mL
  7498   004554  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7499   004558  ECAF  F022         	call	_right135	;wreg free
  7500   00455C  0012               	return		;funcret
  7501   00455E                     __end_of_moveOrange:
  7502                           	callstack 0
  7503                           
  7504 ;; *************** function _right135 *****************
  7505 ;; Defined at:
  7506 ;;		line 217 in file "dc_motor.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7509 ;;		 -> motorL(9), 
  7510 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7511 ;;		 -> motorR(9), 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      void 
  7516 ;; Registers used:
  7517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7527 ;;Total ram usage:        4 bytes
  7528 ;; Hardware stack levels used: 1
  7529 ;; Hardware stack levels required when called: 4
  7530 ;; This function calls:
  7531 ;;		_stop
  7532 ;;		_turnRight
  7533 ;; This function is called by:
  7534 ;;		_moveOrange
  7535 ;;		_reverseTurn
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text30
  7540   00455E                     __ptext30:
  7541                           	callstack 0
  7542   00455E                     _right135:
  7543                           	callstack 24
  7544   00455E                     
  7545                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7546   00455E  C019  F014         	movff	right135@mL,turnRight@mL
  7547   004562  C01A  F015         	movff	right135@mR,turnRight@mR
  7548   004566  EC00  F01F         	call	_turnRight	;wreg free
  7549   00456A                     
  7550                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7551   00456A  0E21               	movlw	33
  7552   00456C  6E1C               	movwf	(??_right135+1)^0,c
  7553   00456E  0E78               	movlw	120
  7554   004570  6E1B               	movwf	??_right135^0,c
  7555   004572  0E98               	movlw	152
  7556   004574                     u7197:
  7557   004574  2EE8               	decfsz	wreg,f,c
  7558   004576  D7FE               	bra	u7197
  7559   004578  2E1B               	decfsz	??_right135^0,f,c
  7560   00457A  D7FC               	bra	u7197
  7561   00457C  2E1C               	decfsz	(??_right135+1)^0,f,c
  7562   00457E  D7FA               	bra	u7197
  7563   004580  D000               	nop2	
  7564   004582                     
  7565                           ;dc_motor.c: 221:     stop(mL,mR);
  7566   004582  C019  F014         	movff	right135@mL,stop@mL
  7567   004586  C01A  F015         	movff	right135@mR,stop@mR
  7568   00458A  ECB9  F01E         	call	_stop	;wreg free
  7569   00458E  0012               	return		;funcret
  7570   004590                     __end_of_right135:
  7571                           	callstack 0
  7572                           
  7573 ;; *************** function _turnRight *****************
  7574 ;; Defined at:
  7575 ;;		line 125 in file "dc_motor.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7578 ;;		 -> motorL(9), 
  7579 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7580 ;;		 -> motorR(9), 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;  i               2   22[COMRAM] unsigned int 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      void 
  7585 ;; Registers used:
  7586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7595 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7596 ;;Total ram usage:        5 bytes
  7597 ;; Hardware stack levels used: 1
  7598 ;; Hardware stack levels required when called: 3
  7599 ;; This function calls:
  7600 ;;		_setMotorPWM
  7601 ;; This function is called by:
  7602 ;;		_right90
  7603 ;;		_right135
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text31
  7608   003E00                     __ptext31:
  7609                           	callstack 0
  7610   003E00                     _turnRight:
  7611                           	callstack 24
  7612   003E00                     
  7613                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7614   003E00  5014               	movf	turnRight@mL^0,w,c
  7615   003E02  6ED9               	movwf	fsr2l,c
  7616   003E04  6ADA               	clrf	fsr2h,c
  7617   003E06  0E01               	movlw	1
  7618   003E08  26D9               	addwf	fsr2l,f,c
  7619   003E0A  0E01               	movlw	1
  7620   003E0C  6EDF               	movwf	indf2,c
  7621                           
  7622                           ;dc_motor.c: 129:     mR->direction = 0;
  7623   003E0E  5015               	movf	turnRight@mR^0,w,c
  7624   003E10  6ED9               	movwf	fsr2l,c
  7625   003E12  6ADA               	clrf	fsr2h,c
  7626   003E14  0E01               	movlw	1
  7627   003E16  26D9               	addwf	fsr2l,f,c
  7628   003E18  6ADF               	clrf	indf2,c
  7629   003E1A                     
  7630                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7631   003E1A  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7632   003E1E  EC5E  F018         	call	_setMotorPWM	;wreg free
  7633   003E22                     
  7634                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7635   003E22  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7636   003E26  EC5E  F018         	call	_setMotorPWM	;wreg free
  7637   003E2A                     
  7638                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7639   003E2A  0E00               	movlw	0
  7640   003E2C  6E18               	movwf	(turnRight@i+1)^0,c
  7641   003E2E  0E00               	movlw	0
  7642   003E30  6E17               	movwf	turnRight@i^0,c
  7643   003E32                     l5682:
  7644                           
  7645                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7646   003E32  5014               	movf	turnRight@mL^0,w,c
  7647   003E34  6ED9               	movwf	fsr2l,c
  7648   003E36  6ADA               	clrf	fsr2h,c
  7649   003E38  2ADF               	incf	indf2,f,c
  7650                           
  7651                           ;dc_motor.c: 136:         mR->power++;
  7652   003E3A  5015               	movf	turnRight@mR^0,w,c
  7653   003E3C  6ED9               	movwf	fsr2l,c
  7654   003E3E  6ADA               	clrf	fsr2h,c
  7655   003E40  2ADF               	incf	indf2,f,c
  7656   003E42                     
  7657                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7658   003E42  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7659   003E46  EC5E  F018         	call	_setMotorPWM	;wreg free
  7660   003E4A                     
  7661                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7662   003E4A  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7663   003E4E  EC5E  F018         	call	_setMotorPWM	;wreg free
  7664   003E52                     
  7665                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7666   003E52  0E0B               	movlw	11
  7667   003E54  6E16               	movwf	??_turnRight^0,c
  7668   003E56  0E62               	movlw	98
  7669   003E58                     u7207:
  7670   003E58  2EE8               	decfsz	wreg,f,c
  7671   003E5A  D7FE               	bra	u7207
  7672   003E5C  2E16               	decfsz	??_turnRight^0,f,c
  7673   003E5E  D7FC               	bra	u7207
  7674   003E60  D000               	nop2	
  7675   003E62                     
  7676                           ;dc_motor.c: 140:     }
  7677   003E62  4A17               	infsnz	turnRight@i^0,f,c
  7678   003E64  2A18               	incf	(turnRight@i+1)^0,f,c
  7679   003E66  5018               	movf	(turnRight@i+1)^0,w,c
  7680   003E68  E109               	bnz	u5160
  7681   003E6A  0E32               	movlw	50
  7682   003E6C  5C17               	subwf	turnRight@i^0,w,c
  7683   003E6E  A0D8               	btfss	status,0,c
  7684   003E70  EF3C  F01F         	goto	u5161
  7685   003E74  EF3E  F01F         	goto	u5160
  7686   003E78                     u5161:
  7687   003E78  EF19  F01F         	goto	l5682
  7688   003E7C                     u5160:
  7689   003E7C  0012               	return		;funcret
  7690   003E7E                     __end_of_turnRight:
  7691                           	callstack 0
  7692                           
  7693 ;; *************** function _moveLightBlue *****************
  7694 ;; Defined at:
  7695 ;;		line 311 in file "dc_motor.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7698 ;;		 -> motorL(9), 
  7699 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7700 ;;		 -> motorR(9), 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      void 
  7705 ;; Registers used:
  7706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7715 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7716 ;;Total ram usage:        4 bytes
  7717 ;; Hardware stack levels used: 1
  7718 ;; Hardware stack levels required when called: 5
  7719 ;; This function calls:
  7720 ;;		_backHalf
  7721 ;;		_left135
  7722 ;; This function is called by:
  7723 ;;		_decision
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text32
  7728   004590                     __ptext32:
  7729                           	callstack 0
  7730   004590                     _moveLightBlue:
  7731                           	callstack 24
  7732   004590                     
  7733                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7734   004590  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7735   004594  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7736   004598  EC8E  F023         	call	_backHalf	;wreg free
  7737   00459C                     
  7738                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7739   00459C  0E29               	movlw	41
  7740   00459E  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7741   0045A0  0E96               	movlw	150
  7742   0045A2  6E1F               	movwf	??_moveLightBlue^0,c
  7743   0045A4  0E7F               	movlw	127
  7744   0045A6                     u7217:
  7745   0045A6  2EE8               	decfsz	wreg,f,c
  7746   0045A8  D7FE               	bra	u7217
  7747   0045AA  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7748   0045AC  D7FC               	bra	u7217
  7749   0045AE  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7750   0045B0  D7FA               	bra	u7217
  7751   0045B2  0000               	nop	
  7752   0045B4                     
  7753                           ;dc_motor.c: 316:     left135(mL,mR);
  7754   0045B4  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7755   0045B8  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7756   0045BC  ECE1  F022         	call	_left135	;wreg free
  7757   0045C0  0012               	return		;funcret
  7758   0045C2                     __end_of_moveLightBlue:
  7759                           	callstack 0
  7760                           
  7761 ;; *************** function _left135 *****************
  7762 ;; Defined at:
  7763 ;;		line 225 in file "dc_motor.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7766 ;;		 -> motorL(9), 
  7767 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7768 ;;		 -> motorR(9), 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;		None
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      void 
  7773 ;; Registers used:
  7774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7784 ;;Total ram usage:        4 bytes
  7785 ;; Hardware stack levels used: 1
  7786 ;; Hardware stack levels required when called: 4
  7787 ;; This function calls:
  7788 ;;		_stop
  7789 ;;		_turnLeft
  7790 ;; This function is called by:
  7791 ;;		_moveLightBlue
  7792 ;;		_reverseTurn
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text33
  7797   0045C2                     __ptext33:
  7798                           	callstack 0
  7799   0045C2                     _left135:
  7800                           	callstack 24
  7801   0045C2                     
  7802                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7803   0045C2  C019  F014         	movff	left135@mL,turnLeft@mL
  7804   0045C6  C01A  F015         	movff	left135@mR,turnLeft@mR
  7805   0045CA  EC3F  F01F         	call	_turnLeft	;wreg free
  7806   0045CE                     
  7807                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7808   0045CE  0E21               	movlw	33
  7809   0045D0  6E1C               	movwf	(??_left135+1)^0,c
  7810   0045D2  0E78               	movlw	120
  7811   0045D4  6E1B               	movwf	??_left135^0,c
  7812   0045D6  0E98               	movlw	152
  7813   0045D8                     u7227:
  7814   0045D8  2EE8               	decfsz	wreg,f,c
  7815   0045DA  D7FE               	bra	u7227
  7816   0045DC  2E1B               	decfsz	??_left135^0,f,c
  7817   0045DE  D7FC               	bra	u7227
  7818   0045E0  2E1C               	decfsz	(??_left135+1)^0,f,c
  7819   0045E2  D7FA               	bra	u7227
  7820   0045E4  D000               	nop2	
  7821   0045E6                     
  7822                           ;dc_motor.c: 229:     stop(mL,mR);
  7823   0045E6  C019  F014         	movff	left135@mL,stop@mL
  7824   0045EA  C01A  F015         	movff	left135@mR,stop@mR
  7825   0045EE  ECB9  F01E         	call	_stop	;wreg free
  7826   0045F2  0012               	return		;funcret
  7827   0045F4                     __end_of_left135:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function _moveGreen *****************
  7831 ;; Defined at:
  7832 ;;		line 266 in file "dc_motor.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7835 ;;		 -> motorL(9), 
  7836 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7837 ;;		 -> motorR(9), 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      void 
  7842 ;; Registers used:
  7843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7849 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;Total ram usage:        4 bytes
  7854 ;; Hardware stack levels used: 1
  7855 ;; Hardware stack levels required when called: 5
  7856 ;; This function calls:
  7857 ;;		_backHalf
  7858 ;;		_left90
  7859 ;; This function is called by:
  7860 ;;		_decision
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text34
  7865   0045F4                     __ptext34:
  7866                           	callstack 0
  7867   0045F4                     _moveGreen:
  7868                           	callstack 24
  7869   0045F4                     
  7870                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7871   0045F4  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7872   0045F8  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7873   0045FC  EC8E  F023         	call	_backHalf	;wreg free
  7874   004600                     
  7875                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7876   004600  0E29               	movlw	41
  7877   004602  6E20               	movwf	(??_moveGreen+1)^0,c
  7878   004604  0E96               	movlw	150
  7879   004606  6E1F               	movwf	??_moveGreen^0,c
  7880   004608  0E7F               	movlw	127
  7881   00460A                     u7237:
  7882   00460A  2EE8               	decfsz	wreg,f,c
  7883   00460C  D7FE               	bra	u7237
  7884   00460E  2E1F               	decfsz	??_moveGreen^0,f,c
  7885   004610  D7FC               	bra	u7237
  7886   004612  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7887   004614  D7FA               	bra	u7237
  7888   004616  0000               	nop	
  7889   004618                     
  7890                           ;dc_motor.c: 271:     left90(mL,mR);
  7891   004618  C01D  F019         	movff	moveGreen@mL,left90@mL
  7892   00461C  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7893   004620  EC76  F023         	call	_left90	;wreg free
  7894   004624  0012               	return		;funcret
  7895   004626                     __end_of_moveGreen:
  7896                           	callstack 0
  7897                           
  7898 ;; *************** function _left90 *****************
  7899 ;; Defined at:
  7900 ;;		line 201 in file "dc_motor.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7903 ;;		 -> motorL(9), 
  7904 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7905 ;;		 -> motorR(9), 
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;		None
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      void 
  7910 ;; Registers used:
  7911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7917 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7919 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7921 ;;Total ram usage:        4 bytes
  7922 ;; Hardware stack levels used: 1
  7923 ;; Hardware stack levels required when called: 4
  7924 ;; This function calls:
  7925 ;;		_stop
  7926 ;;		_turnLeft
  7927 ;; This function is called by:
  7928 ;;		_moveGreen
  7929 ;;		_movePink
  7930 ;;		_reverseTurn
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text35
  7935   0046EC                     __ptext35:
  7936                           	callstack 0
  7937   0046EC                     _left90:
  7938                           	callstack 24
  7939   0046EC                     
  7940                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7941   0046EC  C019  F014         	movff	left90@mL,turnLeft@mL
  7942   0046F0  C01A  F015         	movff	left90@mR,turnLeft@mR
  7943   0046F4  EC3F  F01F         	call	_turnLeft	;wreg free
  7944   0046F8                     
  7945                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7946   0046F8  0E18               	movlw	24
  7947   0046FA  6E1C               	movwf	(??_left90+1)^0,c
  7948   0046FC  0E8A               	movlw	138
  7949   0046FE  6E1B               	movwf	??_left90^0,c
  7950   004700  0EE8               	movlw	232
  7951   004702                     u7247:
  7952   004702  2EE8               	decfsz	wreg,f,c
  7953   004704  D7FE               	bra	u7247
  7954   004706  2E1B               	decfsz	??_left90^0,f,c
  7955   004708  D7FC               	bra	u7247
  7956   00470A  2E1C               	decfsz	(??_left90+1)^0,f,c
  7957   00470C  D7FA               	bra	u7247
  7958   00470E                     
  7959                           ;dc_motor.c: 205:     stop(mL,mR);
  7960   00470E  C019  F014         	movff	left90@mL,stop@mL
  7961   004712  C01A  F015         	movff	left90@mR,stop@mR
  7962   004716  ECB9  F01E         	call	_stop	;wreg free
  7963   00471A  0012               	return		;funcret
  7964   00471C                     __end_of_left90:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _moveBlue *****************
  7968 ;; Defined at:
  7969 ;;		line 275 in file "dc_motor.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7972 ;;		 -> motorL(9), 
  7973 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7974 ;;		 -> motorR(9), 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;Total ram usage:        4 bytes
  7991 ;; Hardware stack levels used: 1
  7992 ;; Hardware stack levels required when called: 5
  7993 ;; This function calls:
  7994 ;;		_backHalf
  7995 ;;		_turn180
  7996 ;; This function is called by:
  7997 ;;		_decision
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           	psect	text36
  8002   004626                     __ptext36:
  8003                           	callstack 0
  8004   004626                     _moveBlue:
  8005                           	callstack 24
  8006   004626                     
  8007                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  8008   004626  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  8009   00462A  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  8010   00462E  EC8E  F023         	call	_backHalf	;wreg free
  8011   004632                     
  8012                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8013   004632  0E29               	movlw	41
  8014   004634  6E20               	movwf	(??_moveBlue+1)^0,c
  8015   004636  0E96               	movlw	150
  8016   004638  6E1F               	movwf	??_moveBlue^0,c
  8017   00463A  0E7F               	movlw	127
  8018   00463C                     u7257:
  8019   00463C  2EE8               	decfsz	wreg,f,c
  8020   00463E  D7FE               	bra	u7257
  8021   004640  2E1F               	decfsz	??_moveBlue^0,f,c
  8022   004642  D7FC               	bra	u7257
  8023   004644  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  8024   004646  D7FA               	bra	u7257
  8025   004648  0000               	nop	
  8026   00464A                     
  8027                           ;dc_motor.c: 280:     turn180(mL,mR);
  8028   00464A  C01D  F019         	movff	moveBlue@mL,turn180@mL
  8029   00464E  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  8030   004652  EC2C  F023         	call	_turn180	;wreg free
  8031   004656  0012               	return		;funcret
  8032   004658                     __end_of_moveBlue:
  8033                           	callstack 0
  8034                           
  8035 ;; *************** function _turn180 *****************
  8036 ;; Defined at:
  8037 ;;		line 209 in file "dc_motor.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8040 ;;		 -> motorL(9), 
  8041 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8042 ;;		 -> motorR(9), 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;		None
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8057 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8058 ;;Total ram usage:        4 bytes
  8059 ;; Hardware stack levels used: 1
  8060 ;; Hardware stack levels required when called: 4
  8061 ;; This function calls:
  8062 ;;		_stop
  8063 ;;		_turnLeft
  8064 ;; This function is called by:
  8065 ;;		_moveBlue
  8066 ;;		_moveWhite
  8067 ;;		_reverseTurn
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text37
  8072   004658                     __ptext37:
  8073                           	callstack 0
  8074   004658                     _turn180:
  8075                           	callstack 24
  8076   004658                     
  8077                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  8078   004658  C019  F014         	movff	turn180@mL,turnLeft@mL
  8079   00465C  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8080   004660  EC3F  F01F         	call	_turnLeft	;wreg free
  8081   004664                     
  8082                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  8083   004664  0E30               	movlw	48
  8084   004666  6E1C               	movwf	(??_turn180+1)^0,c
  8085   004668  0E14               	movlw	20
  8086   00466A  6E1B               	movwf	??_turn180^0,c
  8087   00466C  0ED1               	movlw	209
  8088   00466E                     u7267:
  8089   00466E  2EE8               	decfsz	wreg,f,c
  8090   004670  D7FE               	bra	u7267
  8091   004672  2E1B               	decfsz	??_turn180^0,f,c
  8092   004674  D7FC               	bra	u7267
  8093   004676  2E1C               	decfsz	(??_turn180+1)^0,f,c
  8094   004678  D7FA               	bra	u7267
  8095   00467A  0000               	nop	
  8096   00467C                     
  8097                           ;dc_motor.c: 213:     stop(mL,mR);
  8098   00467C  C019  F014         	movff	turn180@mL,stop@mL
  8099   004680  C01A  F015         	movff	turn180@mR,stop@mR
  8100   004684  ECB9  F01E         	call	_stop	;wreg free
  8101   004688  0012               	return		;funcret
  8102   00468A                     __end_of_turn180:
  8103                           	callstack 0
  8104                           
  8105 ;; *************** function _turnLeft *****************
  8106 ;; Defined at:
  8107 ;;		line 105 in file "dc_motor.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8110 ;;		 -> motorL(9), 
  8111 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8112 ;;		 -> motorR(9), 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  i               2   22[COMRAM] unsigned int 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8127 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8128 ;;Total ram usage:        5 bytes
  8129 ;; Hardware stack levels used: 1
  8130 ;; Hardware stack levels required when called: 3
  8131 ;; This function calls:
  8132 ;;		_setMotorPWM
  8133 ;; This function is called by:
  8134 ;;		_left90
  8135 ;;		_turn180
  8136 ;;		_left135
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text38
  8141   003E7E                     __ptext38:
  8142                           	callstack 0
  8143   003E7E                     _turnLeft:
  8144                           	callstack 24
  8145   003E7E                     
  8146                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8147   003E7E  5014               	movf	turnLeft@mL^0,w,c
  8148   003E80  6ED9               	movwf	fsr2l,c
  8149   003E82  6ADA               	clrf	fsr2h,c
  8150   003E84  0E01               	movlw	1
  8151   003E86  26D9               	addwf	fsr2l,f,c
  8152   003E88  6ADF               	clrf	indf2,c
  8153                           
  8154                           ;dc_motor.c: 109:     mR->direction = 1;
  8155   003E8A  5015               	movf	turnLeft@mR^0,w,c
  8156   003E8C  6ED9               	movwf	fsr2l,c
  8157   003E8E  6ADA               	clrf	fsr2h,c
  8158   003E90  0E01               	movlw	1
  8159   003E92  26D9               	addwf	fsr2l,f,c
  8160   003E94  0E01               	movlw	1
  8161   003E96  6EDF               	movwf	indf2,c
  8162   003E98                     
  8163                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8164   003E98  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8165   003E9C  EC5E  F018         	call	_setMotorPWM	;wreg free
  8166   003EA0                     
  8167                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8168   003EA0  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8169   003EA4  EC5E  F018         	call	_setMotorPWM	;wreg free
  8170   003EA8                     
  8171                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8172   003EA8  0E00               	movlw	0
  8173   003EAA  6E18               	movwf	(turnLeft@i+1)^0,c
  8174   003EAC  0E00               	movlw	0
  8175   003EAE  6E17               	movwf	turnLeft@i^0,c
  8176   003EB0                     l5658:
  8177                           
  8178                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8179   003EB0  5014               	movf	turnLeft@mL^0,w,c
  8180   003EB2  6ED9               	movwf	fsr2l,c
  8181   003EB4  6ADA               	clrf	fsr2h,c
  8182   003EB6  2ADF               	incf	indf2,f,c
  8183                           
  8184                           ;dc_motor.c: 116:         mR->power++;
  8185   003EB8  5015               	movf	turnLeft@mR^0,w,c
  8186   003EBA  6ED9               	movwf	fsr2l,c
  8187   003EBC  6ADA               	clrf	fsr2h,c
  8188   003EBE  2ADF               	incf	indf2,f,c
  8189   003EC0                     
  8190                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8191   003EC0  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8192   003EC4  EC5E  F018         	call	_setMotorPWM	;wreg free
  8193   003EC8                     
  8194                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8195   003EC8  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8196   003ECC  EC5E  F018         	call	_setMotorPWM	;wreg free
  8197   003ED0                     
  8198                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8199   003ED0  0E0B               	movlw	11
  8200   003ED2  6E16               	movwf	??_turnLeft^0,c
  8201   003ED4  0E62               	movlw	98
  8202   003ED6                     u7277:
  8203   003ED6  2EE8               	decfsz	wreg,f,c
  8204   003ED8  D7FE               	bra	u7277
  8205   003EDA  2E16               	decfsz	??_turnLeft^0,f,c
  8206   003EDC  D7FC               	bra	u7277
  8207   003EDE  D000               	nop2	
  8208   003EE0                     
  8209                           ;dc_motor.c: 120:     }
  8210   003EE0  4A17               	infsnz	turnLeft@i^0,f,c
  8211   003EE2  2A18               	incf	(turnLeft@i+1)^0,f,c
  8212   003EE4  5018               	movf	(turnLeft@i+1)^0,w,c
  8213   003EE6  E109               	bnz	u5150
  8214   003EE8  0E32               	movlw	50
  8215   003EEA  5C17               	subwf	turnLeft@i^0,w,c
  8216   003EEC  A0D8               	btfss	status,0,c
  8217   003EEE  EF7B  F01F         	goto	u5151
  8218   003EF2  EF7D  F01F         	goto	u5150
  8219   003EF6                     u5151:
  8220   003EF6  EF58  F01F         	goto	l5658
  8221   003EFA                     u5150:
  8222   003EFA  0012               	return		;funcret
  8223   003EFC                     __end_of_turnLeft:
  8224                           	callstack 0
  8225                           
  8226 ;; *************** function _backHalf *****************
  8227 ;; Defined at:
  8228 ;;		line 233 in file "dc_motor.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8231 ;;		 -> motorL(9), 
  8232 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8233 ;;		 -> motorR(9), 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      void 
  8238 ;; Registers used:
  8239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8248 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8249 ;;Total ram usage:        4 bytes
  8250 ;; Hardware stack levels used: 1
  8251 ;; Hardware stack levels required when called: 4
  8252 ;; This function calls:
  8253 ;;		_fullSpeedBack
  8254 ;;		_stop
  8255 ;; This function is called by:
  8256 ;;		_moveRed
  8257 ;;		_moveGreen
  8258 ;;		_moveBlue
  8259 ;;		_moveOrange
  8260 ;;		_moveLightBlue
  8261 ;;		_moveWhite
  8262 ;;		_reverseTurn
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           	psect	text39
  8267   00471C                     __ptext39:
  8268                           	callstack 0
  8269   00471C                     _backHalf:
  8270                           	callstack 24
  8271   00471C                     
  8272                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8273   00471C  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8274   004720  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8275   004724  EC7E  F01F         	call	_fullSpeedBack	;wreg free
  8276   004728                     
  8277                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8278   004728  0E19               	movlw	25
  8279   00472A  6E1C               	movwf	(??_backHalf+1)^0,c
  8280   00472C  0E5A               	movlw	90
  8281   00472E  6E1B               	movwf	??_backHalf^0,c
  8282   004730  0EB2               	movlw	178
  8283   004732                     u7287:
  8284   004732  2EE8               	decfsz	wreg,f,c
  8285   004734  D7FE               	bra	u7287
  8286   004736  2E1B               	decfsz	??_backHalf^0,f,c
  8287   004738  D7FC               	bra	u7287
  8288   00473A  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8289   00473C  D7FA               	bra	u7287
  8290   00473E                     
  8291                           ;dc_motor.c: 237:     stop(mL,mR);
  8292   00473E  C019  F014         	movff	backHalf@mL,stop@mL
  8293   004742  C01A  F015         	movff	backHalf@mR,stop@mR
  8294   004746  ECB9  F01E         	call	_stop	;wreg free
  8295   00474A  0012               	return		;funcret
  8296   00474C                     __end_of_backHalf:
  8297                           	callstack 0
  8298                           
  8299 ;; *************** function _stop *****************
  8300 ;; Defined at:
  8301 ;;		line 88 in file "dc_motor.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8304 ;;		 -> motorL(9), 
  8305 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8306 ;;		 -> motorR(9), 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;		None
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8321 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8322 ;;Total ram usage:        3 bytes
  8323 ;; Hardware stack levels used: 1
  8324 ;; Hardware stack levels required when called: 3
  8325 ;; This function calls:
  8326 ;;		_setMotorPWM
  8327 ;; This function is called by:
  8328 ;;		_main
  8329 ;;		_right90
  8330 ;;		_left90
  8331 ;;		_turn180
  8332 ;;		_right135
  8333 ;;		_left135
  8334 ;;		_backHalf
  8335 ;;		_backOneAndHalf
  8336 ;;		_reverseStraight
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text40
  8341   003D72                     __ptext40:
  8342                           	callstack 0
  8343   003D72                     _stop:
  8344                           	callstack 27
  8345   003D72                     
  8346                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8347   003D72  EFE9  F01E         	goto	l5642
  8348   003D76                     l5628:
  8349                           
  8350                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8351   003D76  5014               	movf	stop@mL^0,w,c
  8352   003D78  6ED9               	movwf	fsr2l,c
  8353   003D7A  6ADA               	clrf	fsr2h,c
  8354   003D7C  50DF               	movf	indf2,w,c
  8355   003D7E  B4D8               	btfsc	status,2,c
  8356   003D80  EFC4  F01E         	goto	u5111
  8357   003D84  EFC6  F01E         	goto	u5110
  8358   003D88                     u5111:
  8359   003D88  EFCA  F01E         	goto	l5632
  8360   003D8C                     u5110:
  8361   003D8C  5014               	movf	stop@mL^0,w,c
  8362   003D8E  6ED9               	movwf	fsr2l,c
  8363   003D90  6ADA               	clrf	fsr2h,c
  8364   003D92  06DF               	decf	indf2,f,c
  8365   003D94                     l5632:
  8366                           
  8367                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8368   003D94  5015               	movf	stop@mR^0,w,c
  8369   003D96  6ED9               	movwf	fsr2l,c
  8370   003D98  6ADA               	clrf	fsr2h,c
  8371   003D9A  50DF               	movf	indf2,w,c
  8372   003D9C  B4D8               	btfsc	status,2,c
  8373   003D9E  EFD3  F01E         	goto	u5121
  8374   003DA2  EFD5  F01E         	goto	u5120
  8375   003DA6                     u5121:
  8376   003DA6  EFD9  F01E         	goto	l5636
  8377   003DAA                     u5120:
  8378   003DAA  5015               	movf	stop@mR^0,w,c
  8379   003DAC  6ED9               	movwf	fsr2l,c
  8380   003DAE  6ADA               	clrf	fsr2h,c
  8381   003DB0  06DF               	decf	indf2,f,c
  8382   003DB2                     l5636:
  8383                           
  8384                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8385   003DB2  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8386   003DB6  EC5E  F018         	call	_setMotorPWM	;wreg free
  8387   003DBA                     
  8388                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8389   003DBA  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8390   003DBE  EC5E  F018         	call	_setMotorPWM	;wreg free
  8391   003DC2                     
  8392                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8393   003DC2  0E0B               	movlw	11
  8394   003DC4  6E16               	movwf	??_stop^0,c
  8395   003DC6  0E62               	movlw	98
  8396   003DC8                     u7297:
  8397   003DC8  2EE8               	decfsz	wreg,f,c
  8398   003DCA  D7FE               	bra	u7297
  8399   003DCC  2E16               	decfsz	??_stop^0,f,c
  8400   003DCE  D7FC               	bra	u7297
  8401   003DD0  D000               	nop2	
  8402   003DD2                     l5642:
  8403                           
  8404                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8405   003DD2  5014               	movf	stop@mL^0,w,c
  8406   003DD4  6ED9               	movwf	fsr2l,c
  8407   003DD6  6ADA               	clrf	fsr2h,c
  8408   003DD8  50DF               	movf	indf2,w,c
  8409   003DDA  A4D8               	btfss	status,2,c
  8410   003DDC  EFF2  F01E         	goto	u5131
  8411   003DE0  EFF4  F01E         	goto	u5130
  8412   003DE4                     u5131:
  8413   003DE4  EFBB  F01E         	goto	l5628
  8414   003DE8                     u5130:
  8415   003DE8  5015               	movf	stop@mR^0,w,c
  8416   003DEA  6ED9               	movwf	fsr2l,c
  8417   003DEC  6ADA               	clrf	fsr2h,c
  8418   003DEE  50DF               	movf	indf2,w,c
  8419   003DF0  A4D8               	btfss	status,2,c
  8420   003DF2  EFFD  F01E         	goto	u5141
  8421   003DF6  EFFF  F01E         	goto	u5140
  8422   003DFA                     u5141:
  8423   003DFA  EFBB  F01E         	goto	l5628
  8424   003DFE                     u5140:
  8425   003DFE  0012               	return		;funcret
  8426   003E00                     __end_of_stop:
  8427                           	callstack 0
  8428                           
  8429 ;; *************** function _fullSpeedBack *****************
  8430 ;; Defined at:
  8431 ;;		line 165 in file "dc_motor.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8434 ;;		 -> motorL(9), 
  8435 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8436 ;;		 -> motorR(9), 
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;  power           2   22[COMRAM] int 
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8448 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8451 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8452 ;;Total ram usage:        5 bytes
  8453 ;; Hardware stack levels used: 1
  8454 ;; Hardware stack levels required when called: 3
  8455 ;; This function calls:
  8456 ;;		_setMotorPWM
  8457 ;; This function is called by:
  8458 ;;		_backHalf
  8459 ;;		_backOneAndHalf
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text41
  8464   003EFC                     __ptext41:
  8465                           	callstack 0
  8466   003EFC                     _fullSpeedBack:
  8467                           	callstack 24
  8468   003EFC                     
  8469                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8470   003EFC  5014               	movf	fullSpeedBack@mL^0,w,c
  8471   003EFE  6ED9               	movwf	fsr2l,c
  8472   003F00  6ADA               	clrf	fsr2h,c
  8473   003F02  0E01               	movlw	1
  8474   003F04  26D9               	addwf	fsr2l,f,c
  8475   003F06  6ADF               	clrf	indf2,c
  8476                           
  8477                           ;dc_motor.c: 169:     mR->direction = 0;
  8478   003F08  5015               	movf	fullSpeedBack@mR^0,w,c
  8479   003F0A  6ED9               	movwf	fsr2l,c
  8480   003F0C  6ADA               	clrf	fsr2h,c
  8481   003F0E  0E01               	movlw	1
  8482   003F10  26D9               	addwf	fsr2l,f,c
  8483   003F12  6ADF               	clrf	indf2,c
  8484   003F14                     
  8485                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8486   003F14  0E00               	movlw	0
  8487   003F16  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8488   003F18  0E00               	movlw	0
  8489   003F1A  6E17               	movwf	fullSpeedBack@power^0,c
  8490   003F1C                     l5702:
  8491                           
  8492                           ;dc_motor.c: 172:         mL->power = power;
  8493   003F1C  5014               	movf	fullSpeedBack@mL^0,w,c
  8494   003F1E  6ED9               	movwf	fsr2l,c
  8495   003F20  6ADA               	clrf	fsr2h,c
  8496   003F22  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8497                           
  8498                           ;dc_motor.c: 173:         mR->power = power;
  8499   003F26  5015               	movf	fullSpeedBack@mR^0,w,c
  8500   003F28  6ED9               	movwf	fsr2l,c
  8501   003F2A  6ADA               	clrf	fsr2h,c
  8502   003F2C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8503   003F30                     
  8504                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8505   003F30  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8506   003F34  EC5E  F018         	call	_setMotorPWM	;wreg free
  8507   003F38                     
  8508                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8509   003F38  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8510   003F3C  EC5E  F018         	call	_setMotorPWM	;wreg free
  8511   003F40                     
  8512                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8513   003F40  0E0B               	movlw	11
  8514   003F42  6E16               	movwf	??_fullSpeedBack^0,c
  8515   003F44  0E62               	movlw	98
  8516   003F46                     u7307:
  8517   003F46  2EE8               	decfsz	wreg,f,c
  8518   003F48  D7FE               	bra	u7307
  8519   003F4A  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8520   003F4C  D7FC               	bra	u7307
  8521   003F4E  D000               	nop2	
  8522   003F50                     
  8523                           ;dc_motor.c: 181:     }
  8524   003F50  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8525   003F52  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8526   003F54  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8527   003F56  EFB6  F01F         	goto	u5171
  8528   003F5A  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8529   003F5C  E109               	bnz	u5170
  8530   003F5E  0E33               	movlw	51
  8531   003F60  5C17               	subwf	fullSpeedBack@power^0,w,c
  8532   003F62  A0D8               	btfss	status,0,c
  8533   003F64  EFB6  F01F         	goto	u5171
  8534   003F68  EFB8  F01F         	goto	u5170
  8535   003F6C                     u5171:
  8536   003F6C  EF8E  F01F         	goto	l5702
  8537   003F70                     u5170:
  8538   003F70  0012               	return		;funcret
  8539   003F72                     __end_of_fullSpeedBack:
  8540                           	callstack 0
  8541                           
  8542 ;; *************** function _setMotorPWM *****************
  8543 ;; Defined at:
  8544 ;;		line 65 in file "dc_motor.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8547 ;;		 -> motorR(9), motorL(9), 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  negDuty         1   18[COMRAM] unsigned char 
  8550 ;;  posDuty         1   17[COMRAM] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      void 
  8553 ;; Registers used:
  8554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8563 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8564 ;;Total ram usage:        5 bytes
  8565 ;; Hardware stack levels used: 1
  8566 ;; Hardware stack levels required when called: 2
  8567 ;; This function calls:
  8568 ;;		___lwdiv
  8569 ;;		___wmul
  8570 ;; This function is called by:
  8571 ;;		_stop
  8572 ;;		_turnLeft
  8573 ;;		_turnRight
  8574 ;;		_fullSpeedAhead
  8575 ;;		_fullSpeedBack
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text42
  8580   0030BC                     __ptext42:
  8581                           	callstack 0
  8582   0030BC                     _setMotorPWM:
  8583                           	callstack 27
  8584   0030BC                     
  8585                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8586   0030BC  500F               	movf	setMotorPWM@m^0,w,c
  8587   0030BE  6ED9               	movwf	fsr2l,c
  8588   0030C0  6ADA               	clrf	fsr2h,c
  8589   0030C2  0E02               	movlw	2
  8590   0030C4  26D9               	addwf	fsr2l,f,c
  8591   0030C6  50DF               	movf	indf2,w,c
  8592   0030C8  B4D8               	btfsc	status,2,c
  8593   0030CA  EF69  F018         	goto	u4951
  8594   0030CE  EF6B  F018         	goto	u4950
  8595   0030D2                     u4951:
  8596   0030D2  EF9B  F018         	goto	l5548
  8597   0030D6                     u4950:
  8598   0030D6                     
  8599                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8600   0030D6  500F               	movf	setMotorPWM@m^0,w,c
  8601   0030D8  6ED9               	movwf	fsr2l,c
  8602   0030DA  6ADA               	clrf	fsr2h,c
  8603   0030DC  50DF               	movf	indf2,w,c
  8604   0030DE  6E10               	movwf	??_setMotorPWM^0,c
  8605   0030E0  5010               	movf	??_setMotorPWM^0,w,c
  8606   0030E2  6E02               	movwf	___wmul@multiplier^0,c
  8607   0030E4  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8608   0030E6  500F               	movf	setMotorPWM@m^0,w,c
  8609   0030E8  6ED9               	movwf	fsr2l,c
  8610   0030EA  6ADA               	clrf	fsr2h,c
  8611   0030EC  0E03               	movlw	3
  8612   0030EE  26D9               	addwf	fsr2l,f,c
  8613   0030F0  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8614   0030F4  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8615   0030F8  ECCF  F023         	call	___wmul	;wreg free
  8616   0030FC  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8617   003100  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8618   003104  0E00               	movlw	0
  8619   003106  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8620   003108  0E64               	movlw	100
  8621   00310A  6E0A               	movwf	___lwdiv@divisor^0,c
  8622   00310C  ECB9  F01F         	call	___lwdiv	;wreg free
  8623   003110  500F               	movf	setMotorPWM@m^0,w,c
  8624   003112  6ED9               	movwf	fsr2l,c
  8625   003114  6ADA               	clrf	fsr2h,c
  8626   003116  0E03               	movlw	3
  8627   003118  26D9               	addwf	fsr2l,f,c
  8628   00311A  50DF               	movf	indf2,w,c
  8629   00311C  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8630   00311E  5008               	movf	?___lwdiv^0,w,c
  8631   003120  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8632   003122  6E12               	movwf	setMotorPWM@posDuty^0,c
  8633   003124                     
  8634                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8635   003124  500F               	movf	setMotorPWM@m^0,w,c
  8636   003126  6ED9               	movwf	fsr2l,c
  8637   003128  6ADA               	clrf	fsr2h,c
  8638   00312A  0E03               	movlw	3
  8639   00312C  26D9               	addwf	fsr2l,f,c
  8640   00312E  50DF               	movf	indf2,w,c
  8641   003130  6E13               	movwf	setMotorPWM@negDuty^0,c
  8642                           
  8643                           ;dc_motor.c: 72:     }
  8644   003132  EFBC  F018         	goto	l5552
  8645   003136                     l5548:
  8646                           
  8647                           ;dc_motor.c: 74:         posDuty=0;
  8648   003136  0E00               	movlw	0
  8649   003138  6E12               	movwf	setMotorPWM@posDuty^0,c
  8650   00313A                     
  8651                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8652   00313A  500F               	movf	setMotorPWM@m^0,w,c
  8653   00313C  6ED9               	movwf	fsr2l,c
  8654   00313E  6ADA               	clrf	fsr2h,c
  8655   003140  50DF               	movf	indf2,w,c
  8656   003142  6E10               	movwf	??_setMotorPWM^0,c
  8657   003144  5010               	movf	??_setMotorPWM^0,w,c
  8658   003146  6E02               	movwf	___wmul@multiplier^0,c
  8659   003148  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8660   00314A  500F               	movf	setMotorPWM@m^0,w,c
  8661   00314C  6ED9               	movwf	fsr2l,c
  8662   00314E  6ADA               	clrf	fsr2h,c
  8663   003150  0E03               	movlw	3
  8664   003152  26D9               	addwf	fsr2l,f,c
  8665   003154  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8666   003158  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8667   00315C  ECCF  F023         	call	___wmul	;wreg free
  8668   003160  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8669   003164  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8670   003168  0E00               	movlw	0
  8671   00316A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8672   00316C  0E64               	movlw	100
  8673   00316E  6E0A               	movwf	___lwdiv@divisor^0,c
  8674   003170  ECB9  F01F         	call	___lwdiv	;wreg free
  8675   003174  5008               	movf	?___lwdiv^0,w,c
  8676   003176  6E13               	movwf	setMotorPWM@negDuty^0,c
  8677   003178                     l5552:
  8678                           
  8679                           ;dc_motor.c: 78:     if (m->direction) {
  8680   003178  500F               	movf	setMotorPWM@m^0,w,c
  8681   00317A  6ED9               	movwf	fsr2l,c
  8682   00317C  6ADA               	clrf	fsr2h,c
  8683   00317E  0E01               	movlw	1
  8684   003180  26D9               	addwf	fsr2l,f,c
  8685   003182  50DF               	movf	indf2,w,c
  8686   003184  B4D8               	btfsc	status,2,c
  8687   003186  EFC7  F018         	goto	u4961
  8688   00318A  EFC9  F018         	goto	u4960
  8689   00318E                     u4961:
  8690   00318E  EFE9  F018         	goto	l5556
  8691   003192                     u4960:
  8692   003192                     
  8693                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8694   003192  500F               	movf	setMotorPWM@m^0,w,c
  8695   003194  6ED9               	movwf	fsr2l,c
  8696   003196  6ADA               	clrf	fsr2h,c
  8697   003198  0E05               	movlw	5
  8698   00319A  26D9               	addwf	fsr2l,f,c
  8699   00319C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8700   0031A0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8701   0031A4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8702   0031A8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8703   0031AC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8704                           
  8705                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8706   0031B0  500F               	movf	setMotorPWM@m^0,w,c
  8707   0031B2  6ED9               	movwf	fsr2l,c
  8708   0031B4  6ADA               	clrf	fsr2h,c
  8709   0031B6  0E07               	movlw	7
  8710   0031B8  26D9               	addwf	fsr2l,f,c
  8711   0031BA  CFDE F010          	movff	postinc2,??_setMotorPWM
  8712   0031BE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8713   0031C2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8714   0031C6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8715   0031CA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8716                           
  8717                           ;dc_motor.c: 81:     } else {
  8718   0031CE  EF07  F019         	goto	l421
  8719   0031D2                     l5556:
  8720                           
  8721                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8722   0031D2  500F               	movf	setMotorPWM@m^0,w,c
  8723   0031D4  6ED9               	movwf	fsr2l,c
  8724   0031D6  6ADA               	clrf	fsr2h,c
  8725   0031D8  0E05               	movlw	5
  8726   0031DA  26D9               	addwf	fsr2l,f,c
  8727   0031DC  CFDE F010          	movff	postinc2,??_setMotorPWM
  8728   0031E0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8729   0031E4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8730   0031E8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8731   0031EC  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8732                           
  8733                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8734   0031F0  500F               	movf	setMotorPWM@m^0,w,c
  8735   0031F2  6ED9               	movwf	fsr2l,c
  8736   0031F4  6ADA               	clrf	fsr2h,c
  8737   0031F6  0E07               	movlw	7
  8738   0031F8  26D9               	addwf	fsr2l,f,c
  8739   0031FA  CFDE F010          	movff	postinc2,??_setMotorPWM
  8740   0031FE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8741   003202  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8742   003206  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8743   00320A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8744   00320E                     l421:
  8745   00320E  0012               	return		;funcret
  8746   003210                     __end_of_setMotorPWM:
  8747                           	callstack 0
  8748                           
  8749 ;; *************** function ___lwdiv *****************
  8750 ;; Defined at:
  8751 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  dividend        2    7[COMRAM] unsigned int 
  8754 ;;  divisor         2    9[COMRAM] unsigned int 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  quotient        2   12[COMRAM] unsigned int 
  8757 ;;  counter         1   11[COMRAM] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  2    7[COMRAM] unsigned int 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8770 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8771 ;;Total ram usage:        7 bytes
  8772 ;; Hardware stack levels used: 1
  8773 ;; Hardware stack levels required when called: 1
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_main
  8778 ;;		_setMotorPWM
  8779 ;;		_ADC2String
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text43
  8784   003F72                     __ptext43:
  8785                           	callstack 0
  8786   003F72                     ___lwdiv:
  8787                           	callstack 27
  8788   003F72  0E00               	movlw	0
  8789   003F74  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  8790   003F76  0E00               	movlw	0
  8791   003F78  6E0D               	movwf	___lwdiv@quotient^0,c
  8792   003F7A  500A               	movf	___lwdiv@divisor^0,w,c
  8793   003F7C  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8794   003F7E  B4D8               	btfsc	status,2,c
  8795   003F80  EFC4  F01F         	goto	u4871
  8796   003F84  EFC6  F01F         	goto	u4870
  8797   003F88                     u4871:
  8798   003F88  EFEE  F01F         	goto	l1225
  8799   003F8C                     u4870:
  8800   003F8C  0E01               	movlw	1
  8801   003F8E  6E0C               	movwf	___lwdiv@counter^0,c
  8802   003F90  EFCE  F01F         	goto	l5508
  8803   003F94                     l5506:
  8804   003F94  90D8               	bcf	status,0,c
  8805   003F96  360A               	rlcf	___lwdiv@divisor^0,f,c
  8806   003F98  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8807   003F9A  2A0C               	incf	___lwdiv@counter^0,f,c
  8808   003F9C                     l5508:
  8809   003F9C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8810   003F9E  EFD3  F01F         	goto	u4881
  8811   003FA2  EFD5  F01F         	goto	u4880
  8812   003FA6                     u4881:
  8813   003FA6  EFCA  F01F         	goto	l5506
  8814   003FAA                     u4880:
  8815   003FAA                     l5510:
  8816   003FAA  90D8               	bcf	status,0,c
  8817   003FAC  360D               	rlcf	___lwdiv@quotient^0,f,c
  8818   003FAE  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8819   003FB0  500A               	movf	___lwdiv@divisor^0,w,c
  8820   003FB2  5C08               	subwf	___lwdiv@dividend^0,w,c
  8821   003FB4  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8822   003FB6  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8823   003FB8  A0D8               	btfss	status,0,c
  8824   003FBA  EFE1  F01F         	goto	u4891
  8825   003FBE  EFE3  F01F         	goto	u4890
  8826   003FC2                     u4891:
  8827   003FC2  EFE8  F01F         	goto	l5518
  8828   003FC6                     u4890:
  8829   003FC6  500A               	movf	___lwdiv@divisor^0,w,c
  8830   003FC8  5E08               	subwf	___lwdiv@dividend^0,f,c
  8831   003FCA  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8832   003FCC  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8833   003FCE  800D               	bsf	___lwdiv@quotient^0,0,c
  8834   003FD0                     l5518:
  8835   003FD0  90D8               	bcf	status,0,c
  8836   003FD2  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8837   003FD4  320A               	rrcf	___lwdiv@divisor^0,f,c
  8838   003FD6  2E0C               	decfsz	___lwdiv@counter^0,f,c
  8839   003FD8  EFD5  F01F         	goto	l5510
  8840   003FDC                     l1225:
  8841   003FDC  C00D  F008         	movff	___lwdiv@quotient,?___lwdiv
  8842   003FE0  C00E  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8843   003FE4  0012               	return		;funcret
  8844   003FE6                     __end_of___lwdiv:
  8845                           	callstack 0
  8846                           
  8847 ;; *************** function _logAction *****************
  8848 ;; Defined at:
  8849 ;;		line 13 in file "return_func.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  newAction       1    wreg     unsigned char 
  8852 ;;  newTime         2    1[COMRAM] int 
  8853 ;;  path_step       2    3[COMRAM] unsigned int 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  newAction       1    5[COMRAM] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;Total ram usage:        5 bytes
  8870 ;; Hardware stack levels used: 1
  8871 ;; Hardware stack levels required when called: 1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_decision
  8876 ;;		_get16bitTMR0val
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text44
  8881   00421C                     __ptext44:
  8882                           	callstack 0
  8883   00421C                     _logAction:
  8884                           	callstack 28
  8885                           
  8886                           ;incstack = 0
  8887                           ;logAction@newAction stored from wreg
  8888   00421C  6E06               	movwf	logAction@newAction^0,c
  8889   00421E                     
  8890                           ;return_func.c: 14:     if (path_step < 50) {
  8891   00421E  5005               	movf	(logAction@path_step+1)^0,w,c
  8892   004220  E107               	bnz	u6471
  8893   004222  0E32               	movlw	50
  8894   004224  5C04               	subwf	logAction@path_step^0,w,c
  8895   004226  B0D8               	btfsc	status,0,c
  8896   004228  EF18  F021         	goto	u6471
  8897   00422C  EF1A  F021         	goto	u6470
  8898   004230                     u6471:
  8899   004230  EF2F  F021         	goto	l696
  8900   004234                     u6470:
  8901   004234                     
  8902                           ;return_func.c: 15:         action[path_step] = newAction;
  8903   004234  0E3C               	movlw	low _action
  8904   004236  2404               	addwf	logAction@path_step^0,w,c
  8905   004238  6ED9               	movwf	fsr2l,c
  8906   00423A  0E01               	movlw	high _action
  8907   00423C  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8908   00423E  6EDA               	movwf	fsr2h,c
  8909   004240  C006  FFDF         	movff	logAction@newAction,indf2
  8910                           
  8911                           ;return_func.c: 16:         time[path_step] = newTime;
  8912   004244  90D8               	bcf	status,0,c
  8913   004246  3404               	rlcf	logAction@path_step^0,w,c
  8914   004248  6ED9               	movwf	fsr2l,c
  8915   00424A  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8916   00424C  6EDA               	movwf	fsr2h,c
  8917   00424E  0E00               	movlw	low _time
  8918   004250  26D9               	addwf	fsr2l,f,c
  8919   004252  0E02               	movlw	high _time
  8920   004254  22DA               	addwfc	fsr2h,f,c
  8921   004256  C002  FFDE         	movff	logAction@newTime,postinc2
  8922   00425A  C003  FFDD         	movff	logAction@newTime+1,postdec2
  8923   00425E                     l696:
  8924   00425E  0012               	return		;funcret
  8925   004260                     __end_of_logAction:
  8926                           	callstack 0
  8927                           
  8928 ;; *************** function _color_click_init *****************
  8929 ;; Defined at:
  8930 ;;		line 9 in file "color.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      void 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used: 1
  8950 ;; Hardware stack levels required when called: 4
  8951 ;; This function calls:
  8952 ;;		_I2C_2_Master_Init
  8953 ;;		_color_writetoaddr
  8954 ;; This function is called by:
  8955 ;;		_main
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           	psect	text45
  8960   004396                     __ptext45:
  8961                           	callstack 0
  8962   004396                     _color_click_init:
  8963                           	callstack 26
  8964   004396                     
  8965                           ;color.c: 12:     I2C_2_Master_Init();
  8966   004396  ECA6  F023         	call	_I2C_2_Master_Init	;wreg free
  8967   00439A                     
  8968                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  8969   00439A  0E01               	movlw	1
  8970   00439C  6E04               	movwf	color_writetoaddr@value^0,c
  8971   00439E  0E00               	movlw	0
  8972   0043A0  ECE2  F023         	call	_color_writetoaddr
  8973   0043A4                     
  8974                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8975   0043A4  0E3F               	movlw	63
  8976   0043A6  6E06               	movwf	??_color_click_init^0,c
  8977   0043A8  0E55               	movlw	85
  8978   0043AA                     u7317:
  8979   0043AA  2EE8               	decfsz	wreg,f,c
  8980   0043AC  D7FE               	bra	u7317
  8981   0043AE  2E06               	decfsz	??_color_click_init^0,f,c
  8982   0043B0  D7FC               	bra	u7317
  8983   0043B2  0000               	nop	
  8984   0043B4                     
  8985                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  8986   0043B4  0E03               	movlw	3
  8987   0043B6  6E04               	movwf	color_writetoaddr@value^0,c
  8988   0043B8  0E00               	movlw	0
  8989   0043BA  ECE2  F023         	call	_color_writetoaddr
  8990   0043BE                     
  8991                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  8992   0043BE  0ED5               	movlw	213
  8993   0043C0  6E04               	movwf	color_writetoaddr@value^0,c
  8994   0043C2  0E01               	movlw	1
  8995   0043C4  ECE2  F023         	call	_color_writetoaddr
  8996   0043C8  0012               	return		;funcret
  8997   0043CA                     __end_of_color_click_init:
  8998                           	callstack 0
  8999                           
  9000 ;; *************** function _color_writetoaddr *****************
  9001 ;; Defined at:
  9002 ;;		line 25 in file "color.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  address         1    wreg     unsigned char 
  9005 ;;  value           1    3[COMRAM] unsigned char 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  address         1    4[COMRAM] unsigned char 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  1    wreg      void 
  9010 ;; Registers used:
  9011 ;;		wreg, status,2, status,0, cstack
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9017 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9020 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9021 ;;Total ram usage:        2 bytes
  9022 ;; Hardware stack levels used: 1
  9023 ;; Hardware stack levels required when called: 3
  9024 ;; This function calls:
  9025 ;;		_I2C_2_Master_Start
  9026 ;;		_I2C_2_Master_Stop
  9027 ;;		_I2C_2_Master_Write
  9028 ;; This function is called by:
  9029 ;;		_color_click_init
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text46
  9034   0047C4                     __ptext46:
  9035                           	callstack 0
  9036   0047C4                     _color_writetoaddr:
  9037                           	callstack 26
  9038                           
  9039                           ;incstack = 0
  9040                           ;color_writetoaddr@address stored from wreg
  9041   0047C4  6E05               	movwf	color_writetoaddr@address^0,c
  9042   0047C6                     
  9043                           ;color.c: 26:     I2C_2_Master_Start();
  9044   0047C6  EC34  F024         	call	_I2C_2_Master_Start	;wreg free
  9045                           
  9046                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  9047   0047CA  0E52               	movlw	82
  9048   0047CC  EC29  F024         	call	_I2C_2_Master_Write
  9049                           
  9050                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  9051   0047D0  5005               	movf	color_writetoaddr@address^0,w,c
  9052   0047D2  0980               	iorlw	128
  9053   0047D4  EC29  F024         	call	_I2C_2_Master_Write
  9054                           
  9055                           ;color.c: 29:     I2C_2_Master_Write(value);
  9056   0047D8  5004               	movf	color_writetoaddr@value^0,w,c
  9057   0047DA  EC29  F024         	call	_I2C_2_Master_Write
  9058                           
  9059                           ;color.c: 30:     I2C_2_Master_Stop();
  9060   0047DE  EC2F  F024         	call	_I2C_2_Master_Stop	;wreg free
  9061   0047E2  0012               	return		;funcret
  9062   0047E4                     __end_of_color_writetoaddr:
  9063                           	callstack 0
  9064                           
  9065 ;; *************** function _I2C_2_Master_Init *****************
  9066 ;; Defined at:
  9067 ;;		line 4 in file "i2c.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;		None
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;		None
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      void 
  9074 ;; Registers used:
  9075 ;;		wreg, status,2
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9085 ;;Total ram usage:        0 bytes
  9086 ;; Hardware stack levels used: 1
  9087 ;; Hardware stack levels required when called: 1
  9088 ;; This function calls:
  9089 ;;		Nothing
  9090 ;; This function is called by:
  9091 ;;		_color_click_init
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           	psect	text47
  9096   00474C                     __ptext47:
  9097                           	callstack 0
  9098   00474C                     _I2C_2_Master_Init:
  9099                           	callstack 28
  9100   00474C                     
  9101                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9102   00474C  010E               	movlb	14	; () banked
  9103   00474E  51D9               	movf	217,w,b	;volatile
  9104   004750  0BF0               	andlw	-16
  9105   004752  0908               	iorlw	8
  9106   004754  6FD9               	movwf	217,b	;volatile
  9107   004756                     
  9108                           ; BSR set to: 14
  9109                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9110   004756  8BD9               	bsf	217,5,b	;volatile
  9111                           
  9112                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9113   004758  0E9F               	movlw	159
  9114   00475A  6FD6               	movwf	214,b	;volatile
  9115   00475C                     
  9116                           ; BSR set to: 14
  9117                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9118   00475C  8A84               	bsf	132,5,c	;volatile
  9119   00475E                     
  9120                           ; BSR set to: 14
  9121                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9122   00475E  8C84               	bsf	132,6,c	;volatile
  9123   004760                     
  9124                           ; BSR set to: 14
  9125                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9126   004760  9BA7               	bcf	167,5,b	;volatile
  9127   004762                     
  9128                           ; BSR set to: 14
  9129                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9130   004762  9DA7               	bcf	167,6,b	;volatile
  9131                           
  9132                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9133   004764  0E1D               	movlw	29
  9134   004766  6F1D               	movwf	29,b	;volatile
  9135                           
  9136                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9137   004768  0E1E               	movlw	30
  9138   00476A  6F1C               	movwf	28,b	;volatile
  9139                           
  9140                           ;i2c.c: 18:   RD5PPS=0x1C;
  9141   00476C  0E1C               	movlw	28
  9142   00476E  6F6F               	movwf	111,b	;volatile
  9143                           
  9144                           ;i2c.c: 19:   RD6PPS=0x1B;
  9145   004770  0E1B               	movlw	27
  9146   004772  6F70               	movwf	112,b	;volatile
  9147   004774                     
  9148                           ; BSR set to: 14
  9149   004774  0012               	return		;funcret
  9150   004776                     __end_of_I2C_2_Master_Init:
  9151                           	callstack 0
  9152                           
  9153 ;; *************** function _calibration_routine *****************
  9154 ;; Defined at:
  9155 ;;		line 133 in file "color.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  cCal            1   68[COMRAM] PTR struct colors
  9158 ;;		 -> colorCalibration(10), 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  1    wreg      void 
  9163 ;; Registers used:
  9164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9170 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9171 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9173 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9174 ;;Total ram usage:       23 bytes
  9175 ;; Hardware stack levels used: 1
  9176 ;; Hardware stack levels required when called: 9
  9177 ;; This function calls:
  9178 ;;		_color_read_Blue
  9179 ;;		_color_read_Clear
  9180 ;;		_color_read_Green
  9181 ;;		_color_read_Red
  9182 ;;		_sendStringSerial4
  9183 ;;		_sprintf
  9184 ;; This function is called by:
  9185 ;;		_main
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           	psect	text48
  9190   002870                     __ptext48:
  9191                           	callstack 0
  9192   002870                     _calibration_routine:
  9193                           	callstack 21
  9194   002870                     
  9195                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9196   002870  907F               	bcf	127,0,c	;volatile
  9197                           
  9198                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9199   002872  9E7D               	bcf	125,7,c	;volatile
  9200                           
  9201                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9202   002874  9679               	bcf	121,3,c	;volatile
  9203   002876                     
  9204                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9205   002876  0E60               	movlw	low calibration_routine@cal_state
  9206   002878  6E32               	movwf	sprintf@s^0,c
  9207   00287A  0E8A               	movlw	low STR_1
  9208   00287C  6E33               	movwf	sprintf@fmt^0,c
  9209   00287E  0EC3               	movlw	low STR_2
  9210   002880  6E34               	movwf	(?_sprintf+2)^0,c
  9211   002882  5034               	movf	(?_sprintf+2)^0,w,c
  9212   002884  A4D8               	btfss	status,2,c
  9213   002886  0E0E               	movlw	high __smallconst
  9214   002888  6E35               	movwf	(?_sprintf+3)^0,c
  9215   00288A  ECE5  F021         	call	_sprintf	;wreg free
  9216   00288E                     
  9217                           ;color.c: 145:     sendStringSerial4(cal_state);
  9218   00288E  0E60               	movlw	low calibration_routine@cal_state
  9219   002890  6E03               	movwf	sendStringSerial4@string^0,c
  9220   002892  EC45  F023         	call	_sendStringSerial4	;wreg free
  9221   002896                     l102:
  9222                           
  9223                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9224   002896  B48E               	btfsc	142,2,c	;volatile
  9225   002898  EF50  F014         	goto	u6651
  9226   00289C  EF52  F014         	goto	u6650
  9227   0028A0                     u6651:
  9228   0028A0  EF4B  F014         	goto	l102
  9229   0028A4                     u6650:
  9230   0028A4                     
  9231                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9232   0028A4  807F               	bsf	127,0,c	;volatile
  9233   0028A6                     
  9234                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9235   0028A6  0E29               	movlw	41
  9236   0028A8  6E47               	movwf	(??_calibration_routine+1)^0,c
  9237   0028AA  0E96               	movlw	150
  9238   0028AC  6E46               	movwf	??_calibration_routine^0,c
  9239   0028AE  0E7F               	movlw	127
  9240   0028B0                     u7327:
  9241   0028B0  2EE8               	decfsz	wreg,f,c
  9242   0028B2  D7FE               	bra	u7327
  9243   0028B4  2E46               	decfsz	??_calibration_routine^0,f,c
  9244   0028B6  D7FC               	bra	u7327
  9245   0028B8  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9246   0028BA  D7FA               	bra	u7327
  9247   0028BC  0000               	nop	
  9248   0028BE                     
  9249                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9250   0028BE  EC28  F020         	call	_color_read_Red	;wreg free
  9251   0028C2  5045               	movf	calibration_routine@cCal^0,w,c
  9252   0028C4  6ED9               	movwf	fsr2l,c
  9253   0028C6  6ADA               	clrf	fsr2h,c
  9254   0028C8  C006  FFDE         	movff	?_color_read_Red,postinc2
  9255   0028CC  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9256   0028D0                     
  9257                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9258   0028D0  907F               	bcf	127,0,c	;volatile
  9259   0028D2                     
  9260                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9261   0028D2  0E60               	movlw	low calibration_routine@cal_state
  9262   0028D4  6E32               	movwf	sprintf@s^0,c
  9263   0028D6  0E01               	movlw	low STR_3
  9264   0028D8  6E33               	movwf	sprintf@fmt^0,c
  9265   0028DA  0EC3               	movlw	low STR_2
  9266   0028DC  6E34               	movwf	(?_sprintf+2)^0,c
  9267   0028DE  5034               	movf	(?_sprintf+2)^0,w,c
  9268   0028E0  A4D8               	btfss	status,2,c
  9269   0028E2  0E0E               	movlw	high __smallconst
  9270   0028E4  6E35               	movwf	(?_sprintf+3)^0,c
  9271   0028E6  ECE5  F021         	call	_sprintf	;wreg free
  9272   0028EA                     
  9273                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9274   0028EA  0E60               	movlw	low calibration_routine@cal_state
  9275   0028EC  6E03               	movwf	sendStringSerial4@string^0,c
  9276   0028EE  EC45  F023         	call	_sendStringSerial4	;wreg free
  9277   0028F2                     l105:
  9278                           
  9279                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9280   0028F2  B48E               	btfsc	142,2,c	;volatile
  9281   0028F4  EF7E  F014         	goto	u6661
  9282   0028F8  EF80  F014         	goto	u6660
  9283   0028FC                     u6661:
  9284   0028FC  EF79  F014         	goto	l105
  9285   002900                     u6660:
  9286   002900                     
  9287                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9288   002900  8E7D               	bsf	125,7,c	;volatile
  9289   002902                     
  9290                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9291   002902  0E29               	movlw	41
  9292   002904  6E47               	movwf	(??_calibration_routine+1)^0,c
  9293   002906  0E96               	movlw	150
  9294   002908  6E46               	movwf	??_calibration_routine^0,c
  9295   00290A  0E7F               	movlw	127
  9296   00290C                     u7337:
  9297   00290C  2EE8               	decfsz	wreg,f,c
  9298   00290E  D7FE               	bra	u7337
  9299   002910  2E46               	decfsz	??_calibration_routine^0,f,c
  9300   002912  D7FC               	bra	u7337
  9301   002914  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9302   002916  D7FA               	bra	u7337
  9303   002918  0000               	nop	
  9304   00291A                     
  9305                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9306   00291A  EC50  F020         	call	_color_read_Green	;wreg free
  9307   00291E  5045               	movf	calibration_routine@cCal^0,w,c
  9308   002920  6ED9               	movwf	fsr2l,c
  9309   002922  6ADA               	clrf	fsr2h,c
  9310   002924  0E02               	movlw	2
  9311   002926  26D9               	addwf	fsr2l,f,c
  9312   002928  C006  FFDE         	movff	?_color_read_Green,postinc2
  9313   00292C  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9314   002930                     
  9315                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9316   002930  9E7D               	bcf	125,7,c	;volatile
  9317   002932                     
  9318                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9319   002932  0E60               	movlw	low calibration_routine@cal_state
  9320   002934  6E32               	movwf	sprintf@s^0,c
  9321   002936  0E3B               	movlw	low STR_5
  9322   002938  6E33               	movwf	sprintf@fmt^0,c
  9323   00293A  0EC3               	movlw	low STR_2
  9324   00293C  6E34               	movwf	(?_sprintf+2)^0,c
  9325   00293E  5034               	movf	(?_sprintf+2)^0,w,c
  9326   002940  A4D8               	btfss	status,2,c
  9327   002942  0E0E               	movlw	high __smallconst
  9328   002944  6E35               	movwf	(?_sprintf+3)^0,c
  9329   002946  ECE5  F021         	call	_sprintf	;wreg free
  9330   00294A                     
  9331                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9332   00294A  0E60               	movlw	low calibration_routine@cal_state
  9333   00294C  6E03               	movwf	sendStringSerial4@string^0,c
  9334   00294E  EC45  F023         	call	_sendStringSerial4	;wreg free
  9335   002952                     l108:
  9336                           
  9337                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9338   002952  B48E               	btfsc	142,2,c	;volatile
  9339   002954  EFAE  F014         	goto	u6671
  9340   002958  EFB0  F014         	goto	u6670
  9341   00295C                     u6671:
  9342   00295C  EFA9  F014         	goto	l108
  9343   002960                     u6670:
  9344   002960                     
  9345                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9346   002960  8679               	bsf	121,3,c	;volatile
  9347   002962                     
  9348                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9349   002962  0E29               	movlw	41
  9350   002964  6E47               	movwf	(??_calibration_routine+1)^0,c
  9351   002966  0E96               	movlw	150
  9352   002968  6E46               	movwf	??_calibration_routine^0,c
  9353   00296A  0E7F               	movlw	127
  9354   00296C                     u7347:
  9355   00296C  2EE8               	decfsz	wreg,f,c
  9356   00296E  D7FE               	bra	u7347
  9357   002970  2E46               	decfsz	??_calibration_routine^0,f,c
  9358   002972  D7FC               	bra	u7347
  9359   002974  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9360   002976  D7FA               	bra	u7347
  9361   002978  0000               	nop	
  9362   00297A                     
  9363                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9364   00297A  ECA0  F020         	call	_color_read_Blue	;wreg free
  9365   00297E  5045               	movf	calibration_routine@cCal^0,w,c
  9366   002980  6ED9               	movwf	fsr2l,c
  9367   002982  6ADA               	clrf	fsr2h,c
  9368   002984  0E04               	movlw	4
  9369   002986  26D9               	addwf	fsr2l,f,c
  9370   002988  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9371   00298C  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9372   002990                     
  9373                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9374   002990  9679               	bcf	121,3,c	;volatile
  9375   002992                     
  9376                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9377   002992  0E60               	movlw	low calibration_routine@cal_state
  9378   002994  6E32               	movwf	sprintf@s^0,c
  9379   002996  0E56               	movlw	low STR_7
  9380   002998  6E33               	movwf	sprintf@fmt^0,c
  9381   00299A  0EC3               	movlw	low STR_2
  9382   00299C  6E34               	movwf	(?_sprintf+2)^0,c
  9383   00299E  5034               	movf	(?_sprintf+2)^0,w,c
  9384   0029A0  A4D8               	btfss	status,2,c
  9385   0029A2  0E0E               	movlw	high __smallconst
  9386   0029A4  6E35               	movwf	(?_sprintf+3)^0,c
  9387   0029A6  ECE5  F021         	call	_sprintf	;wreg free
  9388   0029AA                     
  9389                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9390   0029AA  0E60               	movlw	low calibration_routine@cal_state
  9391   0029AC  6E03               	movwf	sendStringSerial4@string^0,c
  9392   0029AE  EC45  F023         	call	_sendStringSerial4	;wreg free
  9393   0029B2                     l111:
  9394                           
  9395                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9396   0029B2  B48E               	btfsc	142,2,c	;volatile
  9397   0029B4  EFDE  F014         	goto	u6681
  9398   0029B8  EFE0  F014         	goto	u6680
  9399   0029BC                     u6681:
  9400   0029BC  EFD9  F014         	goto	l111
  9401   0029C0                     u6680:
  9402   0029C0                     
  9403                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9404   0029C0  807F               	bsf	127,0,c	;volatile
  9405                           
  9406                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9407   0029C2  8E7D               	bsf	125,7,c	;volatile
  9408                           
  9409                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9410   0029C4  8679               	bsf	121,3,c	;volatile
  9411   0029C6                     
  9412                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9413   0029C6  0E29               	movlw	41
  9414   0029C8  6E47               	movwf	(??_calibration_routine+1)^0,c
  9415   0029CA  0E96               	movlw	150
  9416   0029CC  6E46               	movwf	??_calibration_routine^0,c
  9417   0029CE  0E7F               	movlw	127
  9418   0029D0                     u7357:
  9419   0029D0  2EE8               	decfsz	wreg,f,c
  9420   0029D2  D7FE               	bra	u7357
  9421   0029D4  2E46               	decfsz	??_calibration_routine^0,f,c
  9422   0029D6  D7FC               	bra	u7357
  9423   0029D8  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9424   0029DA  D7FA               	bra	u7357
  9425   0029DC  0000               	nop	
  9426   0029DE                     
  9427                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9428   0029DE  EC78  F020         	call	_color_read_Clear	;wreg free
  9429   0029E2  5045               	movf	calibration_routine@cCal^0,w,c
  9430   0029E4  6ED9               	movwf	fsr2l,c
  9431   0029E6  6ADA               	clrf	fsr2h,c
  9432   0029E8  0E06               	movlw	6
  9433   0029EA  26D9               	addwf	fsr2l,f,c
  9434   0029EC  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9435   0029F0  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9436   0029F4                     
  9437                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9438   0029F4  907F               	bcf	127,0,c	;volatile
  9439   0029F6                     
  9440                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9441   0029F6  9E7D               	bcf	125,7,c	;volatile
  9442   0029F8                     
  9443                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9444   0029F8  9679               	bcf	121,3,c	;volatile
  9445   0029FA                     
  9446                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9447   0029FA  0E60               	movlw	low calibration_routine@cal_state
  9448   0029FC  6E32               	movwf	sprintf@s^0,c
  9449   0029FE  0E1E               	movlw	low STR_9
  9450   002A00  6E33               	movwf	sprintf@fmt^0,c
  9451   002A02  0EC3               	movlw	low STR_2
  9452   002A04  6E34               	movwf	(?_sprintf+2)^0,c
  9453   002A06  5034               	movf	(?_sprintf+2)^0,w,c
  9454   002A08  A4D8               	btfss	status,2,c
  9455   002A0A  0E0E               	movlw	high __smallconst
  9456   002A0C  6E35               	movwf	(?_sprintf+3)^0,c
  9457   002A0E  ECE5  F021         	call	_sprintf	;wreg free
  9458   002A12                     
  9459                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9460   002A12  0E60               	movlw	low calibration_routine@cal_state
  9461   002A14  6E03               	movwf	sendStringSerial4@string^0,c
  9462   002A16  EC45  F023         	call	_sendStringSerial4	;wreg free
  9463   002A1A                     l114:
  9464                           
  9465                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9466   002A1A  B48E               	btfsc	142,2,c	;volatile
  9467   002A1C  EF12  F015         	goto	u6691
  9468   002A20  EF14  F015         	goto	u6690
  9469   002A24                     u6691:
  9470   002A24  EF0D  F015         	goto	l114
  9471   002A28                     u6690:
  9472   002A28                     
  9473                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9474   002A28  807F               	bsf	127,0,c	;volatile
  9475                           
  9476                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9477   002A2A  8E7D               	bsf	125,7,c	;volatile
  9478                           
  9479                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9480   002A2C  8679               	bsf	121,3,c	;volatile
  9481   002A2E                     
  9482                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9483   002A2E  0E29               	movlw	41
  9484   002A30  6E47               	movwf	(??_calibration_routine+1)^0,c
  9485   002A32  0E96               	movlw	150
  9486   002A34  6E46               	movwf	??_calibration_routine^0,c
  9487   002A36  0E7F               	movlw	127
  9488   002A38                     u7367:
  9489   002A38  2EE8               	decfsz	wreg,f,c
  9490   002A3A  D7FE               	bra	u7367
  9491   002A3C  2E46               	decfsz	??_calibration_routine^0,f,c
  9492   002A3E  D7FC               	bra	u7367
  9493   002A40  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9494   002A42  D7FA               	bra	u7367
  9495   002A44  0000               	nop	
  9496   002A46                     
  9497                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9498   002A46  EC78  F020         	call	_color_read_Clear	;wreg free
  9499   002A4A  5045               	movf	calibration_routine@cCal^0,w,c
  9500   002A4C  6ED9               	movwf	fsr2l,c
  9501   002A4E  6ADA               	clrf	fsr2h,c
  9502   002A50  0E08               	movlw	8
  9503   002A52  26D9               	addwf	fsr2l,f,c
  9504   002A54  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9505   002A58  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9506   002A5C                     
  9507                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9508   002A5C  907F               	bcf	127,0,c	;volatile
  9509   002A5E                     
  9510                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9511   002A5E  9E7D               	bcf	125,7,c	;volatile
  9512   002A60                     
  9513                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9514   002A60  9679               	bcf	121,3,c	;volatile
  9515   002A62                     
  9516                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9517   002A62  0E60               	movlw	low calibration_routine@cal_state
  9518   002A64  6E32               	movwf	sprintf@s^0,c
  9519   002A66  0E71               	movlw	low STR_11
  9520   002A68  6E33               	movwf	sprintf@fmt^0,c
  9521   002A6A  0EC3               	movlw	low STR_2
  9522   002A6C  6E34               	movwf	(?_sprintf+2)^0,c
  9523   002A6E  5034               	movf	(?_sprintf+2)^0,w,c
  9524   002A70  A4D8               	btfss	status,2,c
  9525   002A72  0E0E               	movlw	high __smallconst
  9526   002A74  6E35               	movwf	(?_sprintf+3)^0,c
  9527   002A76  ECE5  F021         	call	_sprintf	;wreg free
  9528   002A7A                     
  9529                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9530   002A7A  0E60               	movlw	low calibration_routine@cal_state
  9531   002A7C  6E03               	movwf	sendStringSerial4@string^0,c
  9532   002A7E  EC45  F023         	call	_sendStringSerial4	;wreg free
  9533   002A82                     l117:
  9534                           
  9535                           ;color.c: 219:     while(PORTFbits.RF2 == 1){
  9536   002A82  B48E               	btfsc	142,2,c	;volatile
  9537   002A84  EF46  F015         	goto	u6701
  9538   002A88  EF48  F015         	goto	u6700
  9539   002A8C                     u6701:
  9540   002A8C  EF41  F015         	goto	l117
  9541   002A90                     u6700:
  9542   002A90                     
  9543                           ;color.c: 222:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9544   002A90  0E29               	movlw	41
  9545   002A92  6E47               	movwf	(??_calibration_routine+1)^0,c
  9546   002A94  0E96               	movlw	150
  9547   002A96  6E46               	movwf	??_calibration_routine^0,c
  9548   002A98  0E7F               	movlw	127
  9549   002A9A                     u7377:
  9550   002A9A  2EE8               	decfsz	wreg,f,c
  9551   002A9C  D7FE               	bra	u7377
  9552   002A9E  2E46               	decfsz	??_calibration_routine^0,f,c
  9553   002AA0  D7FC               	bra	u7377
  9554   002AA2  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9555   002AA4  D7FA               	bra	u7377
  9556   002AA6  0000               	nop	
  9557   002AA8  0012               	return		;funcret
  9558   002AAA                     __end_of_calibration_routine:
  9559                           	callstack 0
  9560                           
  9561 ;; *************** function _sprintf *****************
  9562 ;; Defined at:
  9563 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  s               1   49[COMRAM] PTR unsigned char 
  9566 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9567 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9568 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9569 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  f              12   56[COMRAM] struct _IO_FILE
  9572 ;;  ret             2    0        int 
  9573 ;;  ap              1   55[COMRAM] PTR void [1]
  9574 ;;		 -> ?_sprintf(2), 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  2   49[COMRAM] int 
  9577 ;; Registers used:
  9578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9584 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9585 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9587 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9588 ;;Total ram usage:       19 bytes
  9589 ;; Hardware stack levels used: 1
  9590 ;; Hardware stack levels required when called: 8
  9591 ;; This function calls:
  9592 ;;		_vfprintf
  9593 ;; This function is called by:
  9594 ;;		_calibration_routine
  9595 ;;		_send2USART
  9596 ;;		_ADC2String
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text49
  9601   0043CA                     __ptext49:
  9602                           	callstack 0
  9603   0043CA                     _sprintf:
  9604                           	callstack 21
  9605   0043CA  0E34               	movlw	low (?_sprintf+2)
  9606   0043CC  6E38               	movwf	sprintf@ap^0,c
  9607   0043CE  C032  F039         	movff	sprintf@s,sprintf@f
  9608   0043D2  0E00               	movlw	0
  9609   0043D4  6E3D               	movwf	(sprintf@f+4)^0,c
  9610   0043D6  0E00               	movlw	0
  9611   0043D8  6E3C               	movwf	(sprintf@f+3)^0,c
  9612   0043DA  0E00               	movlw	0
  9613   0043DC  6E44               	movwf	(sprintf@f+11)^0,c
  9614   0043DE  0E00               	movlw	0
  9615   0043E0  6E43               	movwf	(sprintf@f+10)^0,c
  9616   0043E2  0E39               	movlw	low sprintf@f
  9617   0043E4  6E2E               	movwf	vfprintf@fp^0,c
  9618   0043E6  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9619   0043EA  0E38               	movlw	low sprintf@ap
  9620   0043EC  6E30               	movwf	vfprintf@ap^0,c
  9621   0043EE  EC30  F021         	call	_vfprintf	;wreg free
  9622   0043F2  5032               	movf	sprintf@s^0,w,c
  9623   0043F4  243C               	addwf	(sprintf@f+3)^0,w,c
  9624   0043F6  6ED9               	movwf	fsr2l,c
  9625   0043F8  6ADA               	clrf	fsr2h,c
  9626   0043FA  6ADF               	clrf	indf2,c
  9627   0043FC  0012               	return		;funcret
  9628   0043FE                     __end_of_sprintf:
  9629                           	callstack 0
  9630                           
  9631 ;; *************** function _vfprintf *****************
  9632 ;; Defined at:
  9633 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9636 ;;		 -> sprintf@f(12), 
  9637 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9638 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9639 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9640 ;;  ap              1   47[COMRAM] PTR PTR void 
  9641 ;;		 -> sprintf@ap(1), 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9644 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9645 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  2   45[COMRAM] int 
  9648 ;; Registers used:
  9649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9655 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9658 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9659 ;;Total ram usage:        4 bytes
  9660 ;; Hardware stack levels used: 1
  9661 ;; Hardware stack levels required when called: 7
  9662 ;; This function calls:
  9663 ;;		_vfpfcnvrt
  9664 ;; This function is called by:
  9665 ;;		_sprintf
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           	psect	text50
  9670   004260                     __ptext50:
  9671                           	callstack 0
  9672   004260                     _vfprintf:
  9673                           	callstack 21
  9674   004260                     
  9675                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9676   004260  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9677                           
  9678                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9679   004264  EF3C  F021         	goto	l6482
  9680   004268                     l6480:
  9681                           
  9682                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9683   004268  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9684   00426C  0E31               	movlw	low vfprintf@cfmt
  9685   00426E  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9686   004270  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9687   004274  EC2F  F016         	call	_vfpfcnvrt	;wreg free
  9688   004278                     l6482:
  9689                           
  9690                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9691   004278  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9692   00427C                     	if	1	;There is more than 1 active tblptr byte
  9693   00427C  0E0E               	movlw	high __smallconst
  9694   00427E  6EF7               	movwf	tblptrh,c
  9695   004280                     	endif
  9696   004280                     	if	0	;tblptru may be non-zero
  9697   004280                     	endif
  9698   004280                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9699   004280  0E00               	movlw	low (__smallconst shr (0+16))
  9700   004282  6EF8               	movwf	tblptru,c
  9701   004284                     	endif
  9702   004284  0008               	tblrd		*
  9703   004286  50F5               	movf	tablat,w,c
  9704   004288  0900               	iorlw	0
  9705   00428A  A4D8               	btfss	status,2,c
  9706   00428C  EF4A  F021         	goto	u6341
  9707   004290  EF4C  F021         	goto	u6340
  9708   004294                     u6341:
  9709   004294  EF34  F021         	goto	l6480
  9710   004298                     u6340:
  9711   004298                     
  9712                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9713   004298  0E00               	movlw	0
  9714   00429A  6E2F               	movwf	(?_vfprintf+1)^0,c
  9715   00429C  0E00               	movlw	0
  9716   00429E  6E2E               	movwf	?_vfprintf^0,c
  9717   0042A0  0012               	return		;funcret
  9718   0042A2                     __end_of_vfprintf:
  9719                           	callstack 0
  9720                           
  9721 ;; *************** function _vfpfcnvrt *****************
  9722 ;; Defined at:
  9723 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9726 ;;		 -> sprintf@f(12), 
  9727 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9728 ;;		 -> vfprintf@cfmt(1), 
  9729 ;;  ap              1   36[COMRAM] PTR PTR void 
  9730 ;;		 -> sprintf@ap(1), 
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  convarg         4   39[COMRAM] struct .
  9733 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9734 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9735 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9736 ;;  done            1   43[COMRAM] _Bool 
  9737 ;;  c               1    0        unsigned char 
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  1    wreg      void 
  9740 ;; Registers used:
  9741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9747 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9748 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9750 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9751 ;;Total ram usage:       11 bytes
  9752 ;; Hardware stack levels used: 1
  9753 ;; Hardware stack levels required when called: 6
  9754 ;; This function calls:
  9755 ;;		_dtoa
  9756 ;;		_fputc
  9757 ;;		_read_prec_or_width
  9758 ;; This function is called by:
  9759 ;;		_vfprintf
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           	psect	text51
  9764   002C5E                     __ptext51:
  9765                           	callstack 0
  9766   002C5E                     _vfpfcnvrt:
  9767                           	callstack 21
  9768   002C5E                     
  9769                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9770   002C5E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9771   002C60  6ED9               	movwf	fsr2l,c
  9772   002C62  6ADA               	clrf	fsr2h,c
  9773   002C64  CFDF FFF6          	movff	indf2,tblptrl
  9774   002C68                     	if	1	;There is more than 1 active tblptr byte
  9775   002C68  0E0E               	movlw	high __smallconst
  9776   002C6A  6EF7               	movwf	tblptrh,c
  9777   002C6C                     	endif
  9778   002C6C                     	if	0	;tblptru may be non-zero
  9779   002C6C                     	endif
  9780   002C6C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9781   002C6C  0E00               	movlw	low (__smallconst shr (0+16))
  9782   002C6E  6EF8               	movwf	tblptru,c
  9783   002C70                     	endif
  9784   002C70  0008               	tblrd		*
  9785   002C72  50F5               	movf	tablat,w,c
  9786   002C74  0A25               	xorlw	37
  9787   002C76  A4D8               	btfss	status,2,c
  9788   002C78  EF40  F016         	goto	u5931
  9789   002C7C  EF42  F016         	goto	u5930
  9790   002C80                     u5931:
  9791   002C80  EFDF  F016         	goto	l6182
  9792   002C84                     u5930:
  9793   002C84                     
  9794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9795   002C84  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9796   002C86  6ED9               	movwf	fsr2l,c
  9797   002C88  6ADA               	clrf	fsr2h,c
  9798   002C8A  2ADF               	incf	indf2,f,c
  9799   002C8C                     
  9800                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9801   002C8C  0E00               	movlw	0
  9802   002C8E  0100               	movlb	0	; () banked
  9803   002C90  6FCB               	movwf	(_width+1)& (0+255),b
  9804   002C92  0E00               	movlw	0
  9805   002C94  6FCA               	movwf	_width& (0+255),b
  9806   002C96  C0CA  F0CE         	movff	_width,_flags
  9807   002C9A                     
  9808                           ; BSR set to: 0
  9809                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9810   002C9A  69CC               	setf	_prec& (0+255),b
  9811   002C9C  69CD               	setf	(_prec+1)& (0+255),b
  9812   002C9E                     
  9813                           ; BSR set to: 0
  9814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9815   002C9E  0E00               	movlw	0
  9816   002CA0  6E2C               	movwf	vfpfcnvrt@done^0,c
  9817                           
  9818                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9819   002CA2  EF7A  F016         	goto	l6156
  9820   002CA6                     l6146:
  9821                           
  9822                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9823   002CA6  0100               	movlb	0	; () banked
  9824   002CA8  83CE               	bsf	_flags& (0+255),1,b
  9825   002CAA                     
  9826                           ; BSR set to: 0
  9827                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9828   002CAA  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9829   002CAC  6ED9               	movwf	fsr2l,c
  9830   002CAE  6ADA               	clrf	fsr2h,c
  9831   002CB0  2ADF               	incf	indf2,f,c
  9832                           
  9833                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9834   002CB2  EF7A  F016         	goto	l6156
  9835   002CB6                     l6150:
  9836                           
  9837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9838   002CB6  0E01               	movlw	1
  9839   002CB8  6E2C               	movwf	vfpfcnvrt@done^0,c
  9840                           
  9841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9842   002CBA  EF7A  F016         	goto	l6156
  9843   002CBE                     l6154:
  9844   002CBE  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9845   002CC0  6ED9               	movwf	fsr2l,c
  9846   002CC2  6ADA               	clrf	fsr2h,c
  9847   002CC4  CFDF FFF6          	movff	indf2,tblptrl
  9848   002CC8                     	if	1	;There is more than 1 active tblptr byte
  9849   002CC8  0E0E               	movlw	high __smallconst
  9850   002CCA  6EF7               	movwf	tblptrh,c
  9851   002CCC                     	endif
  9852   002CCC                     	if	0	;tblptru may be non-zero
  9853   002CCC                     	endif
  9854   002CCC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9855   002CCC  0E00               	movlw	low (__smallconst shr (0+16))
  9856   002CCE  6EF8               	movwf	tblptru,c
  9857   002CD0                     	endif
  9858   002CD0  0008               	tblrd		*
  9859   002CD2  50F5               	movf	tablat,w,c
  9860   002CD4  6E26               	movwf	??_vfpfcnvrt^0,c
  9861   002CD6  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9862                           
  9863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9864                           ; Switch size 1, requested type "simple"
  9865                           ; Number of cases is 1, Range of values is 0 to 0
  9866                           ; switch strategies available:
  9867                           ; Name         Instructions Cycles
  9868                           ; simple_byte            4     3 (average)
  9869                           ;	Chosen strategy is simple_byte
  9870   002CD8  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9871   002CDA  0A00               	xorlw	0	; case 0
  9872   002CDC  B4D8               	btfsc	status,2,c
  9873   002CDE  EF73  F016         	goto	l7264
  9874   002CE2  EF5B  F016         	goto	l6150
  9875   002CE6                     l7264:
  9876                           
  9877                           ; Switch size 1, requested type "simple"
  9878                           ; Number of cases is 1, Range of values is 48 to 48
  9879                           ; switch strategies available:
  9880                           ; Name         Instructions Cycles
  9881                           ; simple_byte            4     3 (average)
  9882                           ;	Chosen strategy is simple_byte
  9883   002CE6  5026               	movf	??_vfpfcnvrt^0,w,c
  9884   002CE8  0A30               	xorlw	48	; case 48
  9885   002CEA  B4D8               	btfsc	status,2,c
  9886   002CEC  EF53  F016         	goto	l6146
  9887   002CF0  EF5B  F016         	goto	l6150
  9888   002CF4                     l6156:
  9889                           
  9890                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9891   002CF4  502C               	movf	vfpfcnvrt@done^0,w,c
  9892   002CF6  B4D8               	btfsc	status,2,c
  9893   002CF8  EF80  F016         	goto	u5941
  9894   002CFC  EF82  F016         	goto	u5940
  9895   002D00                     u5941:
  9896   002D00  EF5F  F016         	goto	l6154
  9897   002D04                     u5940:
  9898   002D04                     
  9899                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9900   002D04  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9901   002D08  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9902   002D0C  EC25  F01D         	call	_read_prec_or_width	;wreg free
  9903   002D10  C008  F0CA         	movff	?_read_prec_or_width,_width
  9904   002D14  C009  F0CB         	movff	?_read_prec_or_width+1,_width+1
  9905   002D18                     
  9906                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9907   002D18  0100               	movlb	0	; () banked
  9908   002D1A  BFCB               	btfsc	(_width+1)& (0+255),7,b
  9909   002D1C  EF94  F016         	goto	u5950
  9910   002D20  EF92  F016         	goto	u5951
  9911   002D24                     u5951:
  9912   002D24  EF99  F016         	goto	l6164
  9913   002D28                     u5950:
  9914   002D28                     
  9915                           ; BSR set to: 0
  9916                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9917   002D28  81CE               	bsf	_flags& (0+255),0,b
  9918                           
  9919                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9920   002D2A  6DCA               	negf	_width& (0+255),b
  9921   002D2C  1FCB               	comf	(_width+1)& (0+255),f,b
  9922   002D2E  B0D8               	btfsc	status,0,c
  9923   002D30  2BCB               	incf	(_width+1)& (0+255),f,b
  9924   002D32                     l6164:
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9928   002D32  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9929   002D34  6ED9               	movwf	fsr2l,c
  9930   002D36  6ADA               	clrf	fsr2h,c
  9931   002D38  50DF               	movf	indf2,w,c
  9932   002D3A  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9933   002D3C                     
  9934                           ; BSR set to: 0
  9935                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9936   002D3C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9937   002D40                     	if	1	;There is more than 1 active tblptr byte
  9938   002D40  0E0E               	movlw	high __smallconst
  9939   002D42  6EF7               	movwf	tblptrh,c
  9940   002D44                     	endif
  9941   002D44                     	if	0	;tblptru may be non-zero
  9942   002D44                     	endif
  9943   002D44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9944   002D44  0E00               	movlw	low (__smallconst shr (0+16))
  9945   002D46  6EF8               	movwf	tblptru,c
  9946   002D48                     	endif
  9947   002D48  0008               	tblrd		*
  9948   002D4A  50F5               	movf	tablat,w,c
  9949   002D4C  0A64               	xorlw	100
  9950   002D4E  B4D8               	btfsc	status,2,c
  9951   002D50  EFAC  F016         	goto	u5961
  9952   002D54  EFAE  F016         	goto	u5960
  9953   002D58                     u5961:
  9954   002D58  EFBE  F016         	goto	l6170
  9955   002D5C                     u5960:
  9956   002D5C                     
  9957                           ; BSR set to: 0
  9958   002D5C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9959   002D60                     	if	1	;There is more than 1 active tblptr byte
  9960   002D60  0E0E               	movlw	high __smallconst
  9961   002D62  6EF7               	movwf	tblptrh,c
  9962   002D64                     	endif
  9963   002D64                     	if	0	;tblptru may be non-zero
  9964   002D64                     	endif
  9965   002D64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9966   002D64  0E00               	movlw	low (__smallconst shr (0+16))
  9967   002D66  6EF8               	movwf	tblptru,c
  9968   002D68                     	endif
  9969   002D68  0008               	tblrd		*
  9970   002D6A  50F5               	movf	tablat,w,c
  9971   002D6C  0A69               	xorlw	105
  9972   002D6E  A4D8               	btfss	status,2,c
  9973   002D70  EFBC  F016         	goto	u5971
  9974   002D74  EFBE  F016         	goto	u5970
  9975   002D78                     u5971:
  9976   002D78  EFD9  F016         	goto	l6178
  9977   002D7C                     u5970:
  9978   002D7C                     l6170:
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9982   002D7C  5025               	movf	vfpfcnvrt@ap^0,w,c
  9983   002D7E  6ED9               	movwf	fsr2l,c
  9984   002D80  6ADA               	clrf	fsr2h,c
  9985   002D82  0E02               	movlw	2
  9986   002D84  26DF               	addwf	indf2,f,c
  9987   002D86  5CDF               	subwf	indf2,w,c
  9988   002D88  6ED9               	movwf	fsr2l,c
  9989   002D8A  6ADA               	clrf	fsr2h,c
  9990   002D8C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9991   002D90  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9992   002D94                     
  9993                           ; BSR set to: 0
  9994                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9995   002D94  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9996   002D96  6ED9               	movwf	fsr2l,c
  9997   002D98  6ADA               	clrf	fsr2h,c
  9998   002D9A  282D               	incf	vfpfcnvrt@cp^0,w,c
  9999   002D9C  6EDF               	movwf	indf2,c
 10000   002D9E                     
 10001                           ; BSR set to: 0
 10002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10003   002D9E  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10004   002DA2  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10005   002DA6  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10006   002DAA  ECF3  F016         	call	_dtoa	;wreg free
 10007   002DAE  EFF2  F016         	goto	l1476
 10008   002DB2                     l6178:
 10009                           
 10010                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10011   002DB2  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10012   002DB4  6ED9               	movwf	fsr2l,c
 10013   002DB6  6ADA               	clrf	fsr2h,c
 10014   002DB8  2ADF               	incf	indf2,f,c
 10015   002DBA  EFF2  F016         	goto	l1476
 10016   002DBE                     l6182:
 10017                           
 10018                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10019   002DBE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10020   002DC0  6ED9               	movwf	fsr2l,c
 10021   002DC2  6ADA               	clrf	fsr2h,c
 10022   002DC4  CFDF FFF6          	movff	indf2,tblptrl
 10023   002DC8                     	if	1	;There is more than 1 active tblptr byte
 10024   002DC8  0E0E               	movlw	high __smallconst
 10025   002DCA  6EF7               	movwf	tblptrh,c
 10026   002DCC                     	endif
 10027   002DCC                     	if	0	;tblptru may be non-zero
 10028   002DCC                     	endif
 10029   002DCC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10030   002DCC  0E00               	movlw	low (__smallconst shr (0+16))
 10031   002DCE  6EF8               	movwf	tblptru,c
 10032   002DD0                     	endif
 10033   002DD0  0008               	tblrd		*
 10034   002DD2  50F5               	movf	tablat,w,c
 10035   002DD4  6E02               	movwf	fputc@c^0,c
 10036   002DD6  6A03               	clrf	(fputc@c+1)^0,c
 10037   002DD8  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10038   002DDC  ECD1  F01D         	call	_fputc	;wreg free
 10039   002DE0  EFD9  F016         	goto	l6178
 10040   002DE4                     l1476:
 10041   002DE4  0012               	return		;funcret
 10042   002DE6                     __end_of_vfpfcnvrt:
 10043                           	callstack 0
 10044                           
 10045 ;; *************** function _read_prec_or_width *****************
 10046 ;; Defined at:
 10047 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10050 ;;		 -> vfprintf@cfmt(1), 
 10051 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10052 ;;		 -> sprintf@ap(1), 
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;  c               1    9[COMRAM] unsigned char 
 10055 ;;  n               2   10[COMRAM] int 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  2    7[COMRAM] int 
 10058 ;; Registers used:
 10059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10066 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10068 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10069 ;;Total ram usage:        5 bytes
 10070 ;; Hardware stack levels used: 1
 10071 ;; Hardware stack levels required when called: 2
 10072 ;; This function calls:
 10073 ;;		___wmul
 10074 ;; This function is called by:
 10075 ;;		_vfpfcnvrt
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text52
 10080   003A4A                     __ptext52:
 10081                           	callstack 0
 10082   003A4A                     _read_prec_or_width:
 10083                           	callstack 24
 10084   003A4A                     
 10085                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10086   003A4A  0E00               	movlw	0
 10087   003A4C  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10088   003A4E  0E00               	movlw	0
 10089   003A50  6E0B               	movwf	read_prec_or_width@n^0,c
 10090   003A52                     
 10091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10092   003A52  5008               	movf	read_prec_or_width@fmt^0,w,c
 10093   003A54  6ED9               	movwf	fsr2l,c
 10094   003A56  6ADA               	clrf	fsr2h,c
 10095   003A58  CFDF FFF6          	movff	indf2,tblptrl
 10096   003A5C                     	if	1	;There is more than 1 active tblptr byte
 10097   003A5C  0E0E               	movlw	high __smallconst
 10098   003A5E  6EF7               	movwf	tblptrh,c
 10099   003A60                     	endif
 10100   003A60                     	if	0	;tblptru may be non-zero
 10101   003A60                     	endif
 10102   003A60                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10103   003A60  0E00               	movlw	low (__smallconst shr (0+16))
 10104   003A62  6EF8               	movwf	tblptru,c
 10105   003A64                     	endif
 10106   003A64  0008               	tblrd		*
 10107   003A66  50F5               	movf	tablat,w,c
 10108   003A68  0A2A               	xorlw	42
 10109   003A6A  A4D8               	btfss	status,2,c
 10110   003A6C  EF3A  F01D         	goto	u5071
 10111   003A70  EF3C  F01D         	goto	u5070
 10112   003A74                     u5071:
 10113   003A74  EF62  F01D         	goto	l5620
 10114   003A78                     u5070:
 10115   003A78                     
 10116                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10117   003A78  5008               	movf	read_prec_or_width@fmt^0,w,c
 10118   003A7A  6ED9               	movwf	fsr2l,c
 10119   003A7C  6ADA               	clrf	fsr2h,c
 10120   003A7E  2ADF               	incf	indf2,f,c
 10121   003A80                     
 10122                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10123   003A80  5009               	movf	read_prec_or_width@ap^0,w,c
 10124   003A82  6ED9               	movwf	fsr2l,c
 10125   003A84  6ADA               	clrf	fsr2h,c
 10126   003A86  0E02               	movlw	2
 10127   003A88  26DF               	addwf	indf2,f,c
 10128   003A8A  5CDF               	subwf	indf2,w,c
 10129   003A8C  6ED9               	movwf	fsr2l,c
 10130   003A8E  6ADA               	clrf	fsr2h,c
 10131   003A90  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10132   003A94  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10133                           
 10134                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10135   003A98  EF77  F01D         	goto	l1457
 10136   003A9C                     l5616:
 10137                           
 10138                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10139   003A9C  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10140   003AA0  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10141   003AA4  0E00               	movlw	0
 10142   003AA6  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10143   003AA8  0E0A               	movlw	10
 10144   003AAA  6E04               	movwf	___wmul@multiplicand^0,c
 10145   003AAC  ECCF  F023         	call	___wmul	;wreg free
 10146   003AB0  500A               	movf	read_prec_or_width@c^0,w,c
 10147   003AB2  2402               	addwf	?___wmul^0,w,c
 10148   003AB4  6E0B               	movwf	read_prec_or_width@n^0,c
 10149   003AB6  0E00               	movlw	0
 10150   003AB8  2003               	addwfc	(?___wmul+1)^0,w,c
 10151   003ABA  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10152   003ABC                     
 10153                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10154   003ABC  5008               	movf	read_prec_or_width@fmt^0,w,c
 10155   003ABE  6ED9               	movwf	fsr2l,c
 10156   003AC0  6ADA               	clrf	fsr2h,c
 10157   003AC2  2ADF               	incf	indf2,f,c
 10158   003AC4                     l5620:
 10159                           
 10160                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10161   003AC4  5008               	movf	read_prec_or_width@fmt^0,w,c
 10162   003AC6  6ED9               	movwf	fsr2l,c
 10163   003AC8  6ADA               	clrf	fsr2h,c
 10164   003ACA  CFDF FFF6          	movff	indf2,tblptrl
 10165   003ACE                     	if	1	;There is more than 1 active tblptr byte
 10166   003ACE  0E0E               	movlw	high __smallconst
 10167   003AD0  6EF7               	movwf	tblptrh,c
 10168   003AD2                     	endif
 10169   003AD2                     	if	0	;tblptru may be non-zero
 10170   003AD2                     	endif
 10171   003AD2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10172   003AD2  0E00               	movlw	low (__smallconst shr (0+16))
 10173   003AD4  6EF8               	movwf	tblptru,c
 10174   003AD6                     	endif
 10175   003AD6  0008               	tblrd		*
 10176   003AD8  50F5               	movf	tablat,w,c
 10177   003ADA  0FD0               	addlw	208
 10178   003ADC  6E0A               	movwf	read_prec_or_width@c^0,c
 10179   003ADE  0E09               	movlw	9
 10180   003AE0  640A               	cpfsgt	read_prec_or_width@c^0,c
 10181   003AE2  EF75  F01D         	goto	u5081
 10182   003AE6  EF77  F01D         	goto	u5080
 10183   003AEA                     u5081:
 10184   003AEA  EF4E  F01D         	goto	l5616
 10185   003AEE                     u5080:
 10186   003AEE                     l1457:
 10187                           
 10188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10189   003AEE  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10190   003AF2  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10191   003AF6  0012               	return		;funcret
 10192   003AF8                     __end_of_read_prec_or_width:
 10193                           	callstack 0
 10194                           
 10195 ;; *************** function ___wmul *****************
 10196 ;; Defined at:
 10197 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;  multiplier      2    1[COMRAM] unsigned int 
 10200 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;  product         2    5[COMRAM] unsigned int 
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  2    1[COMRAM] unsigned int 
 10205 ;; Registers used:
 10206 ;;		wreg, status,2, status,0, prodl, prodh
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10216 ;;Total ram usage:        6 bytes
 10217 ;; Hardware stack levels used: 1
 10218 ;; Hardware stack levels required when called: 1
 10219 ;; This function calls:
 10220 ;;		Nothing
 10221 ;; This function is called by:
 10222 ;;		_main
 10223 ;;		_setMotorPWM
 10224 ;;		_read_prec_or_width
 10225 ;;		_ADC2String
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           	psect	text53
 10230   00479E                     __ptext53:
 10231                           	callstack 0
 10232   00479E                     ___wmul:
 10233                           	callstack 27
 10234   00479E  5002               	movf	___wmul@multiplier^0,w,c
 10235   0047A0  0204               	mulwf	___wmul@multiplicand^0,c
 10236   0047A2  CFF3 F006          	movff	prodl,___wmul@product
 10237   0047A6  CFF4 F007          	movff	prodh,___wmul@product+1
 10238   0047AA  5002               	movf	___wmul@multiplier^0,w,c
 10239   0047AC  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10240   0047AE  50F3               	movf	243,w,c
 10241   0047B0  2607               	addwf	(___wmul@product+1)^0,f,c
 10242   0047B2  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10243   0047B4  0204               	mulwf	___wmul@multiplicand^0,c
 10244   0047B6  50F3               	movf	243,w,c
 10245   0047B8  2607               	addwf	(___wmul@product+1)^0,f,c
 10246   0047BA  C006  F002         	movff	___wmul@product,?___wmul
 10247   0047BE  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10248   0047C2  0012               	return		;funcret
 10249   0047C4                     __end_of___wmul:
 10250                           	callstack 0
 10251                           
 10252 ;; *************** function _dtoa *****************
 10253 ;; Defined at:
 10254 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10257 ;;		 -> sprintf@f(12), 
 10258 ;;  d               2   24[COMRAM] int 
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  i               2   32[COMRAM] int 
 10261 ;;  w               2   29[COMRAM] int 
 10262 ;;  s               1   31[COMRAM] unsigned char 
 10263 ;;  p               1   28[COMRAM] _Bool 
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      void 
 10266 ;; Registers used:
 10267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10273 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10274 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10276 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10277 ;;Total ram usage:       11 bytes
 10278 ;; Hardware stack levels used: 1
 10279 ;; Hardware stack levels required when called: 5
 10280 ;; This function calls:
 10281 ;;		___awdiv
 10282 ;;		___awmod
 10283 ;;		_abs
 10284 ;;		_pad
 10285 ;; This function is called by:
 10286 ;;		_vfpfcnvrt
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text54
 10291   002DE6                     __ptext54:
 10292                           	callstack 0
 10293   002DE6                     _dtoa:
 10294                           	callstack 21
 10295   002DE6                     
 10296                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10297   002DE6  0E01               	movlw	1
 10298   002DE8  6E1D               	movwf	dtoa@p^0,c
 10299   002DEA                     
 10300                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10301   002DEA  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10302   002DEC  EFFA  F016         	goto	u4971
 10303   002DF0  EFFD  F016         	goto	u4970
 10304   002DF4                     u4971:
 10305   002DF4  0E01               	movlw	1
 10306   002DF6  EFFE  F016         	goto	u4980
 10307   002DFA                     u4970:
 10308   002DFA  0E00               	movlw	0
 10309   002DFC                     u4980:
 10310   002DFC  6E20               	movwf	dtoa@s^0,c
 10311   002DFE                     
 10312                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10313   002DFE  C0CA  F01E         	movff	_width,dtoa@w
 10314   002E02  C0CB  F01F         	movff	_width+1,dtoa@w+1
 10315   002E06                     
 10316                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10317   002E06  5020               	movf	dtoa@s^0,w,c
 10318   002E08  B4D8               	btfsc	status,2,c
 10319   002E0A  EF09  F017         	goto	u4991
 10320   002E0E  EF0B  F017         	goto	u4990
 10321   002E12                     u4991:
 10322   002E12  EF22  F017         	goto	l1440
 10323   002E16                     u4990:
 10324   002E16                     
 10325                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10326   002E16  061E               	decf	dtoa@w^0,f,c
 10327   002E18  A0D8               	btfss	status,0,c
 10328   002E1A  061F               	decf	(dtoa@w+1)^0,f,c
 10329   002E1C                     
 10330                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10331   002E1C  5020               	movf	dtoa@s^0,w,c
 10332   002E1E  A4D8               	btfss	status,2,c
 10333   002E20  EF14  F017         	goto	u5001
 10334   002E24  EF16  F017         	goto	u5000
 10335   002E28                     u5001:
 10336   002E28  EF1C  F017         	goto	l5572
 10337   002E2C                     u5000:
 10338   002E2C  0E00               	movlw	0
 10339   002E2E  6E1C               	movwf	(_dtoa$3088+1)^0,c
 10340   002E30  0E2B               	movlw	43
 10341   002E32  6E1B               	movwf	_dtoa$3088^0,c
 10342   002E34  EF20  F017         	goto	l5574
 10343   002E38                     l5572:
 10344   002E38  0E00               	movlw	0
 10345   002E3A  6E1C               	movwf	(_dtoa$3088+1)^0,c
 10346   002E3C  0E2D               	movlw	45
 10347   002E3E  6E1B               	movwf	_dtoa$3088^0,c
 10348   002E40                     l5574:
 10349   002E40  C01B  F020         	movff	_dtoa$3088,dtoa@s
 10350   002E44                     l1440:
 10351                           
 10352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10353   002E44  0E00               	movlw	0
 10354   002E46  6E22               	movwf	(dtoa@i+1)^0,c
 10355   002E48  0E1F               	movlw	31
 10356   002E4A  6E21               	movwf	dtoa@i^0,c
 10357   002E4C                     
 10358                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10359   002E4C  0E00               	movlw	0
 10360   002E4E  0101               	movlb	1	; () banked
 10361   002E50  6FA1               	movwf	(_dbuf+31)& (0+255),b
 10362                           
 10363                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10364   002E52  EF5A  F017         	goto	l5588
 10365   002E56                     l5578:
 10366                           
 10367                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10368   002E56  0621               	decf	dtoa@i^0,f,c
 10369   002E58  A0D8               	btfss	status,0,c
 10370   002E5A  0622               	decf	(dtoa@i+1)^0,f,c
 10371   002E5C                     
 10372                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10373   002E5C  0E82               	movlw	low _dbuf
 10374   002E5E  2421               	addwf	dtoa@i^0,w,c
 10375   002E60  6ED9               	movwf	fsr2l,c
 10376   002E62  0E01               	movlw	high _dbuf
 10377   002E64  2022               	addwfc	(dtoa@i+1)^0,w,c
 10378   002E66  6EDA               	movwf	fsr2h,c
 10379   002E68  C019  F002         	movff	dtoa@d,___awmod@dividend
 10380   002E6C  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10381   002E70  0E00               	movlw	0
 10382   002E72  6E05               	movwf	(___awmod@divisor+1)^0,c
 10383   002E74  0E0A               	movlw	10
 10384   002E76  6E04               	movwf	___awmod@divisor^0,c
 10385   002E78  ECCD  F01C         	call	___awmod	;wreg free
 10386   002E7C  C002  F008         	movff	?___awmod,abs@a
 10387   002E80  C003  F009         	movff	?___awmod+1,abs@a+1
 10388   002E84  ECFF  F021         	call	_abs	;wreg free
 10389   002E88  5008               	movf	?_abs^0,w,c
 10390   002E8A  0F30               	addlw	48
 10391   002E8C  6EDF               	movwf	indf2,c
 10392   002E8E                     
 10393                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10394   002E8E  0E00               	movlw	0
 10395   002E90  6E1D               	movwf	dtoa@p^0,c
 10396   002E92                     
 10397                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10398   002E92  061E               	decf	dtoa@w^0,f,c
 10399   002E94  A0D8               	btfss	status,0,c
 10400   002E96  061F               	decf	(dtoa@w+1)^0,f,c
 10401   002E98                     
 10402                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10403   002E98  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10404   002E9C  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10405   002EA0  0E00               	movlw	0
 10406   002EA2  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10407   002EA4  0E0A               	movlw	10
 10408   002EA6  6E04               	movwf	___awdiv@divisor^0,c
 10409   002EA8  EC6B  F01C         	call	___awdiv	;wreg free
 10410   002EAC  C002  F019         	movff	?___awdiv,dtoa@d
 10411   002EB0  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10412   002EB4                     l5588:
 10413                           
 10414                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10415   002EB4  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10416   002EB6  EF65  F017         	goto	u5011
 10417   002EBA  5022               	movf	(dtoa@i+1)^0,w,c
 10418   002EBC  E108               	bnz	u5010
 10419   002EBE  0421               	decf	dtoa@i^0,w,c
 10420   002EC0  A0D8               	btfss	status,0,c
 10421   002EC2  EF65  F017         	goto	u5011
 10422   002EC6  EF67  F017         	goto	u5010
 10423   002ECA                     u5011:
 10424   002ECA  EF8D  F017         	goto	l5598
 10425   002ECE                     u5010:
 10426   002ECE  5019               	movf	dtoa@d^0,w,c
 10427   002ED0  101A               	iorwf	(dtoa@d+1)^0,w,c
 10428   002ED2  A4D8               	btfss	status,2,c
 10429   002ED4  EF6E  F017         	goto	u5021
 10430   002ED8  EF70  F017         	goto	u5020
 10431   002EDC                     u5021:
 10432   002EDC  EF2B  F017         	goto	l5578
 10433   002EE0                     u5020:
 10434   002EE0  501D               	movf	dtoa@p^0,w,c
 10435   002EE2  A4D8               	btfss	status,2,c
 10436   002EE4  EF76  F017         	goto	u5031
 10437   002EE8  EF78  F017         	goto	u5030
 10438   002EEC                     u5031:
 10439   002EEC  EF2B  F017         	goto	l5578
 10440   002EF0                     u5030:
 10441   002EF0  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10442   002EF2  EF83  F017         	goto	u5041
 10443   002EF6  501F               	movf	(dtoa@w+1)^0,w,c
 10444   002EF8  E108               	bnz	u5040
 10445   002EFA  041E               	decf	dtoa@w^0,w,c
 10446   002EFC  A0D8               	btfss	status,0,c
 10447   002EFE  EF83  F017         	goto	u5041
 10448   002F02  EF85  F017         	goto	u5040
 10449   002F06                     u5041:
 10450   002F06  EF8D  F017         	goto	l5598
 10451   002F0A                     u5040:
 10452   002F0A  0100               	movlb	0	; () banked
 10453   002F0C  B3CE               	btfsc	_flags& (0+255),1,b
 10454   002F0E  EF8B  F017         	goto	u5051
 10455   002F12  EF8D  F017         	goto	u5050
 10456   002F16                     u5051:
 10457   002F16  EF2B  F017         	goto	l5578
 10458   002F1A                     u5050:
 10459   002F1A                     l5598:
 10460                           
 10461                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10462   002F1A  5020               	movf	dtoa@s^0,w,c
 10463   002F1C  B4D8               	btfsc	status,2,c
 10464   002F1E  EF93  F017         	goto	u5061
 10465   002F22  EF95  F017         	goto	u5060
 10466   002F26                     u5061:
 10467   002F26  EFA0  F017         	goto	l5604
 10468   002F2A                     u5060:
 10469   002F2A                     
 10470                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10471   002F2A  0621               	decf	dtoa@i^0,f,c
 10472   002F2C  A0D8               	btfss	status,0,c
 10473   002F2E  0622               	decf	(dtoa@i+1)^0,f,c
 10474   002F30                     
 10475                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10476   002F30  0E82               	movlw	low _dbuf
 10477   002F32  2421               	addwf	dtoa@i^0,w,c
 10478   002F34  6ED9               	movwf	fsr2l,c
 10479   002F36  0E01               	movlw	high _dbuf
 10480   002F38  2022               	addwfc	(dtoa@i+1)^0,w,c
 10481   002F3A  6EDA               	movwf	fsr2h,c
 10482   002F3C  C020  FFDF         	movff	dtoa@s,indf2
 10483   002F40                     l5604:
 10484                           
 10485                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10486   002F40  C018  F010         	movff	dtoa@fp,pad@fp
 10487   002F44  0E82               	movlw	low _dbuf
 10488   002F46  2421               	addwf	dtoa@i^0,w,c
 10489   002F48  6E11               	movwf	pad@buf^0,c
 10490   002F4A  0E01               	movlw	high _dbuf
 10491   002F4C  2022               	addwfc	(dtoa@i+1)^0,w,c
 10492   002F4E  6E12               	movwf	(pad@buf+1)^0,c
 10493   002F50  C01E  F013         	movff	dtoa@w,pad@p
 10494   002F54  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10495   002F58  EC26  F01E         	call	_pad	;wreg free
 10496   002F5C  0012               	return		;funcret
 10497   002F5E                     __end_of_dtoa:
 10498                           	callstack 0
 10499                           
 10500 ;; *************** function _pad *****************
 10501 ;; Defined at:
 10502 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10505 ;;		 -> sprintf@f(12), 
 10506 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10507 ;;		 -> dbuf(32), 
 10508 ;;  p               2   18[COMRAM] int 
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  i               2   21[COMRAM] int 
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      void 
 10513 ;; Registers used:
 10514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10520 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10523 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10524 ;;Total ram usage:        8 bytes
 10525 ;; Hardware stack levels used: 1
 10526 ;; Hardware stack levels required when called: 4
 10527 ;; This function calls:
 10528 ;;		_fputc
 10529 ;;		_fputs
 10530 ;; This function is called by:
 10531 ;;		_dtoa
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           	psect	text55
 10536   003C4C                     __ptext55:
 10537                           	callstack 0
 10538   003C4C                     _pad:
 10539                           	callstack 21
 10540   003C4C                     
 10541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10542   003C4C  0100               	movlb	0	; () banked
 10543   003C4E  A1CE               	btfss	_flags& (0+255),0,b
 10544   003C50  EF2C  F01E         	goto	u4901
 10545   003C54  EF2E  F01E         	goto	u4900
 10546   003C58                     u4901:
 10547   003C58  EF36  F01E         	goto	l5526
 10548   003C5C                     u4900:
 10549   003C5C                     
 10550                           ; BSR set to: 0
 10551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10552   003C5C  C011  F00A         	movff	pad@buf,fputs@s
 10553   003C60  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10554   003C64  C010  F00C         	movff	pad@fp,fputs@fp
 10555   003C68  EC72  F021         	call	_fputs	;wreg free
 10556   003C6C                     l5526:
 10557                           
 10558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10559   003C6C  BE14               	btfsc	(pad@p+1)^0,7,c
 10560   003C6E  EF3D  F01E         	goto	u4910
 10561   003C72  EF3B  F01E         	goto	u4911
 10562   003C76                     u4911:
 10563   003C76  EF41  F01E         	goto	l1432
 10564   003C7A                     u4910:
 10565   003C7A                     
 10566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10567   003C7A  0E00               	movlw	0
 10568   003C7C  6E14               	movwf	(pad@p+1)^0,c
 10569   003C7E  0E00               	movlw	0
 10570   003C80  6E13               	movwf	pad@p^0,c
 10571   003C82                     l1432:
 10572                           
 10573                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10574   003C82  0E00               	movlw	0
 10575   003C84  6E17               	movwf	(pad@i+1)^0,c
 10576   003C86  0E00               	movlw	0
 10577   003C88  6E16               	movwf	pad@i^0,c
 10578                           
 10579                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10580   003C8A  EF51  F01E         	goto	l5534
 10581   003C8E                     l5530:
 10582                           
 10583                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10584   003C8E  0E00               	movlw	0
 10585   003C90  6E03               	movwf	(fputc@c+1)^0,c
 10586   003C92  0E20               	movlw	32
 10587   003C94  6E02               	movwf	fputc@c^0,c
 10588   003C96  C010  F004         	movff	pad@fp,fputc@fp
 10589   003C9A  ECD1  F01D         	call	_fputc	;wreg free
 10590   003C9E                     
 10591                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10592   003C9E  4A16               	infsnz	pad@i^0,f,c
 10593   003CA0  2A17               	incf	(pad@i+1)^0,f,c
 10594   003CA2                     l5534:
 10595                           
 10596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10597   003CA2  5013               	movf	pad@p^0,w,c
 10598   003CA4  5C16               	subwf	pad@i^0,w,c
 10599   003CA6  5017               	movf	(pad@i+1)^0,w,c
 10600   003CA8  0A80               	xorlw	128
 10601   003CAA  6E15               	movwf	??_pad^0,c
 10602   003CAC  5014               	movf	(pad@p+1)^0,w,c
 10603   003CAE  0A80               	xorlw	128
 10604   003CB0  5815               	subwfb	??_pad^0,w,c
 10605   003CB2  A0D8               	btfss	status,0,c
 10606   003CB4  EF5E  F01E         	goto	u4921
 10607   003CB8  EF60  F01E         	goto	u4920
 10608   003CBC                     u4921:
 10609   003CBC  EF47  F01E         	goto	l5530
 10610   003CC0                     u4920:
 10611   003CC0                     
 10612                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10613   003CC0  0100               	movlb	0	; () banked
 10614   003CC2  B1CE               	btfsc	_flags& (0+255),0,b
 10615   003CC4  EF66  F01E         	goto	u4931
 10616   003CC8  EF68  F01E         	goto	u4930
 10617   003CCC                     u4931:
 10618   003CCC  EF70  F01E         	goto	l1437
 10619   003CD0                     u4930:
 10620   003CD0                     
 10621                           ; BSR set to: 0
 10622                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10623   003CD0  C011  F00A         	movff	pad@buf,fputs@s
 10624   003CD4  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10625   003CD8  C010  F00C         	movff	pad@fp,fputs@fp
 10626   003CDC  EC72  F021         	call	_fputs	;wreg free
 10627   003CE0                     l1437:
 10628   003CE0  0012               	return		;funcret
 10629   003CE2                     __end_of_pad:
 10630                           	callstack 0
 10631                           
 10632 ;; *************** function _fputs *****************
 10633 ;; Defined at:
 10634 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10635 ;; Parameters:    Size  Location     Type
 10636 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10637 ;;		 -> dbuf(32), 
 10638 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10639 ;;		 -> sprintf@f(12), 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  i               2   13[COMRAM] int 
 10642 ;;  c               1   12[COMRAM] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  2    9[COMRAM] int 
 10645 ;; Registers used:
 10646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10652 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10653 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10656 ;;Total ram usage:        6 bytes
 10657 ;; Hardware stack levels used: 1
 10658 ;; Hardware stack levels required when called: 3
 10659 ;; This function calls:
 10660 ;;		_fputc
 10661 ;; This function is called by:
 10662 ;;		_pad
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text56
 10667   0042E4                     __ptext56:
 10668                           	callstack 0
 10669   0042E4                     _fputs:
 10670                           	callstack 21
 10671   0042E4  0E00               	movlw	0
 10672   0042E6  6E0F               	movwf	(fputs@i+1)^0,c
 10673   0042E8  0E00               	movlw	0
 10674   0042EA  6E0E               	movwf	fputs@i^0,c
 10675   0042EC  EF81  F021         	goto	l5412
 10676   0042F0                     l5408:
 10677   0042F0  C00D  F002         	movff	fputs@c,fputc@c
 10678   0042F4  6A03               	clrf	(fputc@c+1)^0,c
 10679   0042F6  C00C  F004         	movff	fputs@fp,fputc@fp
 10680   0042FA  ECD1  F01D         	call	_fputc	;wreg free
 10681   0042FE  4A0E               	infsnz	fputs@i^0,f,c
 10682   004300  2A0F               	incf	(fputs@i+1)^0,f,c
 10683   004302                     l5412:
 10684   004302  500E               	movf	fputs@i^0,w,c
 10685   004304  240A               	addwf	fputs@s^0,w,c
 10686   004306  6ED9               	movwf	fsr2l,c
 10687   004308  500F               	movf	(fputs@i+1)^0,w,c
 10688   00430A  200B               	addwfc	(fputs@s+1)^0,w,c
 10689   00430C  6EDA               	movwf	fsr2h,c
 10690   00430E  50DF               	movf	indf2,w,c
 10691   004310  6E0D               	movwf	fputs@c^0,c
 10692   004312  500D               	movf	fputs@c^0,w,c
 10693   004314  A4D8               	btfss	status,2,c
 10694   004316  EF8F  F021         	goto	u4741
 10695   00431A  EF91  F021         	goto	u4740
 10696   00431E                     u4741:
 10697   00431E  EF78  F021         	goto	l5408
 10698   004322                     u4740:
 10699   004322  0012               	return		;funcret
 10700   004324                     __end_of_fputs:
 10701                           	callstack 0
 10702                           
 10703 ;; *************** function _fputc *****************
 10704 ;; Defined at:
 10705 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  c               2    1[COMRAM] int 
 10708 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10709 ;;		 -> sprintf@f(12), 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  2    1[COMRAM] int 
 10714 ;; Registers used:
 10715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10721 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10723 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10724 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10725 ;;Total ram usage:        8 bytes
 10726 ;; Hardware stack levels used: 1
 10727 ;; Hardware stack levels required when called: 2
 10728 ;; This function calls:
 10729 ;;		_putch
 10730 ;; This function is called by:
 10731 ;;		_pad
 10732 ;;		_vfpfcnvrt
 10733 ;;		_fputs
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text57
 10738   003BA2                     __ptext57:
 10739                           	callstack 0
 10740   003BA2                     _fputc:
 10741                           	callstack 24
 10742   003BA2  5004               	movf	fputc@fp^0,w,c
 10743   003BA4  B4D8               	btfsc	status,2,c
 10744   003BA6  EFD7  F01D         	goto	u4701
 10745   003BAA  EFD9  F01D         	goto	u4700
 10746   003BAE                     u4701:
 10747   003BAE  EFE1  F01D         	goto	l5396
 10748   003BB2                     u4700:
 10749   003BB2  5004               	movf	fputc@fp^0,w,c
 10750   003BB4  A4D8               	btfss	status,2,c
 10751   003BB6  EFDF  F01D         	goto	u4711
 10752   003BBA  EFE1  F01D         	goto	u4710
 10753   003BBE                     u4711:
 10754   003BBE  EFE6  F01D         	goto	l5398
 10755   003BC2                     u4710:
 10756   003BC2                     l5396:
 10757   003BC2  5002               	movf	fputc@c^0,w,c
 10758   003BC4  EC3E  F024         	call	_putch
 10759   003BC8  EF25  F01E         	goto	l1501
 10760   003BCC                     l5398:
 10761   003BCC  5004               	movf	fputc@fp^0,w,c
 10762   003BCE  6ED9               	movwf	fsr2l,c
 10763   003BD0  6ADA               	clrf	fsr2h,c
 10764   003BD2  0E0A               	movlw	10
 10765   003BD4  26D9               	addwf	fsr2l,f,c
 10766   003BD6  50DE               	movf	postinc2,w,c
 10767   003BD8  10DE               	iorwf	postinc2,w,c
 10768   003BDA  B4D8               	btfsc	status,2,c
 10769   003BDC  EFF2  F01D         	goto	u4721
 10770   003BE0  EFF4  F01D         	goto	u4720
 10771   003BE4                     u4721:
 10772   003BE4  EF0D  F01E         	goto	l5402
 10773   003BE8                     u4720:
 10774   003BE8  5004               	movf	fputc@fp^0,w,c
 10775   003BEA  6ED9               	movwf	fsr2l,c
 10776   003BEC  6ADA               	clrf	fsr2h,c
 10777   003BEE  0E0A               	movlw	10
 10778   003BF0  26D9               	addwf	fsr2l,f,c
 10779   003BF2  5004               	movf	fputc@fp^0,w,c
 10780   003BF4  6EE1               	movwf	fsr1l,c
 10781   003BF6  6AE2               	clrf	fsr1h,c
 10782   003BF8  0E03               	movlw	3
 10783   003BFA  26E1               	addwf	fsr1l,f,c
 10784   003BFC  50DE               	movf	postinc2,w,c
 10785   003BFE  5CE6               	subwf	postinc1,w,c
 10786   003C00  50E6               	movf	postinc1,w,c
 10787   003C02  0A80               	xorlw	128
 10788   003C04  6E09               	movwf	(??_fputc+4)^0,c
 10789   003C06  50DE               	movf	postinc2,w,c
 10790   003C08  0A80               	xorlw	128
 10791   003C0A  5809               	subwfb	(??_fputc+4)^0,w,c
 10792   003C0C  B0D8               	btfsc	status,0,c
 10793   003C0E  EF0B  F01E         	goto	u4731
 10794   003C12  EF0D  F01E         	goto	u4730
 10795   003C16                     u4731:
 10796   003C16  EF25  F01E         	goto	l1501
 10797   003C1A                     u4730:
 10798   003C1A                     l5402:
 10799   003C1A  5004               	movf	fputc@fp^0,w,c
 10800   003C1C  6ED9               	movwf	fsr2l,c
 10801   003C1E  6ADA               	clrf	fsr2h,c
 10802   003C20  0E03               	movlw	3
 10803   003C22  26D9               	addwf	fsr2l,f,c
 10804   003C24  50DF               	movf	indf2,w,c
 10805   003C26  6E05               	movwf	??_fputc^0,c
 10806   003C28  5004               	movf	fputc@fp^0,w,c
 10807   003C2A  6ED9               	movwf	fsr2l,c
 10808   003C2C  6ADA               	clrf	fsr2h,c
 10809   003C2E  50DF               	movf	indf2,w,c
 10810   003C30  2405               	addwf	??_fputc^0,w,c
 10811   003C32  6ED9               	movwf	fsr2l,c
 10812   003C34  6ADA               	clrf	fsr2h,c
 10813   003C36  C002  FFDF         	movff	fputc@c,indf2
 10814   003C3A  5004               	movf	fputc@fp^0,w,c
 10815   003C3C  6ED9               	movwf	fsr2l,c
 10816   003C3E  6ADA               	clrf	fsr2h,c
 10817   003C40  0E03               	movlw	3
 10818   003C42  26D9               	addwf	fsr2l,f,c
 10819   003C44  2ADE               	incf	postinc2,f,c
 10820   003C46  0E00               	movlw	0
 10821   003C48  22DD               	addwfc	postdec2,f,c
 10822   003C4A                     l1501:
 10823   003C4A  0012               	return		;funcret
 10824   003C4C                     __end_of_fputc:
 10825                           	callstack 0
 10826                           
 10827 ;; *************** function _putch *****************
 10828 ;; Defined at:
 10829 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;  c               1    wreg     unsigned char 
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;  c               1    0[COMRAM] unsigned char 
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  1    wreg      void 
 10836 ;; Registers used:
 10837 ;;		wreg
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10847 ;;Total ram usage:        0 bytes
 10848 ;; Hardware stack levels used: 1
 10849 ;; Hardware stack levels required when called: 1
 10850 ;; This function calls:
 10851 ;;		Nothing
 10852 ;; This function is called by:
 10853 ;;		_fputc
 10854 ;; This function uses a non-reentrant model
 10855 ;;
 10856                           
 10857                           	psect	text58
 10858   00487C                     __ptext58:
 10859                           	callstack 0
 10860   00487C                     _putch:
 10861                           	callstack 24
 10862   00487C  0012               	return		;funcret
 10863   00487E                     __end_of_putch:
 10864                           	callstack 0
 10865                           
 10866 ;; *************** function _abs *****************
 10867 ;; Defined at:
 10868 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;  a               2    7[COMRAM] int 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  2    7[COMRAM] int 
 10875 ;; Registers used:
 10876 ;;		wreg, status,2, status,0
 10877 ;; Tracked objects:
 10878 ;;		On entry : 0/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10885 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10886 ;;Total ram usage:        4 bytes
 10887 ;; Hardware stack levels used: 1
 10888 ;; Hardware stack levels required when called: 1
 10889 ;; This function calls:
 10890 ;;		Nothing
 10891 ;; This function is called by:
 10892 ;;		_dtoa
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           	psect	text59
 10897   0043FE                     __ptext59:
 10898                           	callstack 0
 10899   0043FE                     _abs:
 10900                           	callstack 24
 10901   0043FE  BE09               	btfsc	(abs@a+1)^0,7,c
 10902   004400  EF04  F022         	goto	u4941
 10903   004404  EF06  F022         	goto	u4940
 10904   004408                     u4941:
 10905   004408  EF0C  F022         	goto	l1486
 10906   00440C                     u4940:
 10907   00440C  C008  F008         	movff	abs@a,?_abs
 10908   004410  C009  F009         	movff	abs@a+1,?_abs+1
 10909   004414  EF18  F022         	goto	l1489
 10910   004418                     l1486:
 10911   004418  C008  F00A         	movff	abs@a,??_abs
 10912   00441C  C009  F00B         	movff	abs@a+1,??_abs+1
 10913   004420  1E0A               	comf	??_abs^0,f,c
 10914   004422  1E0B               	comf	(??_abs+1)^0,f,c
 10915   004424  4A0A               	infsnz	??_abs^0,f,c
 10916   004426  2A0B               	incf	(??_abs+1)^0,f,c
 10917   004428  C00A  F008         	movff	??_abs,?_abs
 10918   00442C  C00B  F009         	movff	??_abs+1,?_abs+1
 10919   004430                     l1489:
 10920   004430  0012               	return		;funcret
 10921   004432                     __end_of_abs:
 10922                           	callstack 0
 10923                           
 10924 ;; *************** function ___awmod *****************
 10925 ;; Defined at:
 10926 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  dividend        2    1[COMRAM] int 
 10929 ;;  divisor         2    3[COMRAM] int 
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;  sign            1    6[COMRAM] unsigned char 
 10932 ;;  counter         1    5[COMRAM] unsigned char 
 10933 ;; Return value:  Size  Location     Type
 10934 ;;                  2    1[COMRAM] int 
 10935 ;; Registers used:
 10936 ;;		wreg, status,2, status,0
 10937 ;; Tracked objects:
 10938 ;;		On entry : 0/0
 10939 ;;		On exit  : 0/0
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10945 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10946 ;;Total ram usage:        6 bytes
 10947 ;; Hardware stack levels used: 1
 10948 ;; Hardware stack levels required when called: 1
 10949 ;; This function calls:
 10950 ;;		Nothing
 10951 ;; This function is called by:
 10952 ;;		_dtoa
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           	psect	text60
 10957   00399A                     __ptext60:
 10958                           	callstack 0
 10959   00399A                     ___awmod:
 10960                           	callstack 24
 10961   00399A  0E00               	movlw	0
 10962   00399C  6E07               	movwf	___awmod@sign^0,c
 10963   00399E  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10964   0039A0  EFD6  F01C         	goto	u4810
 10965   0039A4  EFD4  F01C         	goto	u4811
 10966   0039A8                     u4811:
 10967   0039A8  EFDC  F01C         	goto	l5472
 10968   0039AC                     u4810:
 10969   0039AC  6C02               	negf	___awmod@dividend^0,c
 10970   0039AE  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10971   0039B0  B0D8               	btfsc	status,0,c
 10972   0039B2  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10973   0039B4  0E01               	movlw	1
 10974   0039B6  6E07               	movwf	___awmod@sign^0,c
 10975   0039B8                     l5472:
 10976   0039B8  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10977   0039BA  EFE3  F01C         	goto	u4820
 10978   0039BE  EFE1  F01C         	goto	u4821
 10979   0039C2                     u4821:
 10980   0039C2  EFE7  F01C         	goto	l5476
 10981   0039C6                     u4820:
 10982   0039C6  6C04               	negf	___awmod@divisor^0,c
 10983   0039C8  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10984   0039CA  B0D8               	btfsc	status,0,c
 10985   0039CC  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10986   0039CE                     l5476:
 10987   0039CE  5004               	movf	___awmod@divisor^0,w,c
 10988   0039D0  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10989   0039D2  B4D8               	btfsc	status,2,c
 10990   0039D4  EFEE  F01C         	goto	u4831
 10991   0039D8  EFF0  F01C         	goto	u4830
 10992   0039DC                     u4831:
 10993   0039DC  EF14  F01D         	goto	l5492
 10994   0039E0                     u4830:
 10995   0039E0  0E01               	movlw	1
 10996   0039E2  6E06               	movwf	___awmod@counter^0,c
 10997   0039E4  EFF8  F01C         	goto	l5482
 10998   0039E8                     l5480:
 10999   0039E8  90D8               	bcf	status,0,c
 11000   0039EA  3604               	rlcf	___awmod@divisor^0,f,c
 11001   0039EC  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11002   0039EE  2A06               	incf	___awmod@counter^0,f,c
 11003   0039F0                     l5482:
 11004   0039F0  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11005   0039F2  EFFD  F01C         	goto	u4841
 11006   0039F6  EFFF  F01C         	goto	u4840
 11007   0039FA                     u4841:
 11008   0039FA  EFF4  F01C         	goto	l5480
 11009   0039FE                     u4840:
 11010   0039FE                     l5484:
 11011   0039FE  5004               	movf	___awmod@divisor^0,w,c
 11012   003A00  5C02               	subwf	___awmod@dividend^0,w,c
 11013   003A02  5005               	movf	(___awmod@divisor+1)^0,w,c
 11014   003A04  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11015   003A06  A0D8               	btfss	status,0,c
 11016   003A08  EF08  F01D         	goto	u4851
 11017   003A0C  EF0A  F01D         	goto	u4850
 11018   003A10                     u4851:
 11019   003A10  EF0E  F01D         	goto	l5488
 11020   003A14                     u4850:
 11021   003A14  5004               	movf	___awmod@divisor^0,w,c
 11022   003A16  5E02               	subwf	___awmod@dividend^0,f,c
 11023   003A18  5005               	movf	(___awmod@divisor+1)^0,w,c
 11024   003A1A  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11025   003A1C                     l5488:
 11026   003A1C  90D8               	bcf	status,0,c
 11027   003A1E  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11028   003A20  3204               	rrcf	___awmod@divisor^0,f,c
 11029   003A22  2E06               	decfsz	___awmod@counter^0,f,c
 11030   003A24  EFFF  F01C         	goto	l5484
 11031   003A28                     l5492:
 11032   003A28  5007               	movf	___awmod@sign^0,w,c
 11033   003A2A  B4D8               	btfsc	status,2,c
 11034   003A2C  EF1A  F01D         	goto	u4861
 11035   003A30  EF1C  F01D         	goto	u4860
 11036   003A34                     u4861:
 11037   003A34  EF20  F01D         	goto	l5496
 11038   003A38                     u4860:
 11039   003A38  6C02               	negf	___awmod@dividend^0,c
 11040   003A3A  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11041   003A3C  B0D8               	btfsc	status,0,c
 11042   003A3E  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11043   003A40                     l5496:
 11044   003A40  C002  F002         	movff	___awmod@dividend,?___awmod
 11045   003A44  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11046   003A48  0012               	return		;funcret
 11047   003A4A                     __end_of___awmod:
 11048                           	callstack 0
 11049                           
 11050 ;; *************** function ___awdiv *****************
 11051 ;; Defined at:
 11052 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  dividend        2    1[COMRAM] int 
 11055 ;;  divisor         2    3[COMRAM] int 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  quotient        2    7[COMRAM] int 
 11058 ;;  sign            1    6[COMRAM] unsigned char 
 11059 ;;  counter         1    5[COMRAM] unsigned char 
 11060 ;; Return value:  Size  Location     Type
 11061 ;;                  2    1[COMRAM] int 
 11062 ;; Registers used:
 11063 ;;		wreg, status,2, status,0
 11064 ;; Tracked objects:
 11065 ;;		On entry : 0/0
 11066 ;;		On exit  : 0/0
 11067 ;;		Unchanged: 0/0
 11068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11070 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11072 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11073 ;;Total ram usage:        8 bytes
 11074 ;; Hardware stack levels used: 1
 11075 ;; Hardware stack levels required when called: 1
 11076 ;; This function calls:
 11077 ;;		Nothing
 11078 ;; This function is called by:
 11079 ;;		_dtoa
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           	psect	text61
 11084   0038D6                     __ptext61:
 11085                           	callstack 0
 11086   0038D6                     ___awdiv:
 11087                           	callstack 24
 11088   0038D6  0E00               	movlw	0
 11089   0038D8  6E07               	movwf	___awdiv@sign^0,c
 11090   0038DA  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11091   0038DC  EF74  F01C         	goto	u4750
 11092   0038E0  EF72  F01C         	goto	u4751
 11093   0038E4                     u4751:
 11094   0038E4  EF7A  F01C         	goto	l5428
 11095   0038E8                     u4750:
 11096   0038E8  6C04               	negf	___awdiv@divisor^0,c
 11097   0038EA  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11098   0038EC  B0D8               	btfsc	status,0,c
 11099   0038EE  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11100   0038F0  0E01               	movlw	1
 11101   0038F2  6E07               	movwf	___awdiv@sign^0,c
 11102   0038F4                     l5428:
 11103   0038F4  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11104   0038F6  EF81  F01C         	goto	u4760
 11105   0038FA  EF7F  F01C         	goto	u4761
 11106   0038FE                     u4761:
 11107   0038FE  EF87  F01C         	goto	l5434
 11108   003902                     u4760:
 11109   003902  6C02               	negf	___awdiv@dividend^0,c
 11110   003904  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11111   003906  B0D8               	btfsc	status,0,c
 11112   003908  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11113   00390A  0E01               	movlw	1
 11114   00390C  1A07               	xorwf	___awdiv@sign^0,f,c
 11115   00390E                     l5434:
 11116   00390E  0E00               	movlw	0
 11117   003910  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11118   003912  0E00               	movlw	0
 11119   003914  6E08               	movwf	___awdiv@quotient^0,c
 11120   003916  5004               	movf	___awdiv@divisor^0,w,c
 11121   003918  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11122   00391A  B4D8               	btfsc	status,2,c
 11123   00391C  EF92  F01C         	goto	u4771
 11124   003920  EF94  F01C         	goto	u4770
 11125   003924                     u4771:
 11126   003924  EFBC  F01C         	goto	l5456
 11127   003928                     u4770:
 11128   003928  0E01               	movlw	1
 11129   00392A  6E06               	movwf	___awdiv@counter^0,c
 11130   00392C  EF9C  F01C         	goto	l5442
 11131   003930                     l5440:
 11132   003930  90D8               	bcf	status,0,c
 11133   003932  3604               	rlcf	___awdiv@divisor^0,f,c
 11134   003934  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11135   003936  2A06               	incf	___awdiv@counter^0,f,c
 11136   003938                     l5442:
 11137   003938  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11138   00393A  EFA1  F01C         	goto	u4781
 11139   00393E  EFA3  F01C         	goto	u4780
 11140   003942                     u4781:
 11141   003942  EF98  F01C         	goto	l5440
 11142   003946                     u4780:
 11143   003946                     l5444:
 11144   003946  90D8               	bcf	status,0,c
 11145   003948  3608               	rlcf	___awdiv@quotient^0,f,c
 11146   00394A  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11147   00394C  5004               	movf	___awdiv@divisor^0,w,c
 11148   00394E  5C02               	subwf	___awdiv@dividend^0,w,c
 11149   003950  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11150   003952  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11151   003954  A0D8               	btfss	status,0,c
 11152   003956  EFAF  F01C         	goto	u4791
 11153   00395A  EFB1  F01C         	goto	u4790
 11154   00395E                     u4791:
 11155   00395E  EFB6  F01C         	goto	l5452
 11156   003962                     u4790:
 11157   003962  5004               	movf	___awdiv@divisor^0,w,c
 11158   003964  5E02               	subwf	___awdiv@dividend^0,f,c
 11159   003966  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11160   003968  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11161   00396A  8008               	bsf	___awdiv@quotient^0,0,c
 11162   00396C                     l5452:
 11163   00396C  90D8               	bcf	status,0,c
 11164   00396E  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11165   003970  3204               	rrcf	___awdiv@divisor^0,f,c
 11166   003972  2E06               	decfsz	___awdiv@counter^0,f,c
 11167   003974  EFA3  F01C         	goto	l5444
 11168   003978                     l5456:
 11169   003978  5007               	movf	___awdiv@sign^0,w,c
 11170   00397A  B4D8               	btfsc	status,2,c
 11171   00397C  EFC2  F01C         	goto	u4801
 11172   003980  EFC4  F01C         	goto	u4800
 11173   003984                     u4801:
 11174   003984  EFC8  F01C         	goto	l5460
 11175   003988                     u4800:
 11176   003988  6C08               	negf	___awdiv@quotient^0,c
 11177   00398A  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11178   00398C  B0D8               	btfsc	status,0,c
 11179   00398E  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11180   003990                     l5460:
 11181   003990  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11182   003994  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11183   003998  0012               	return		;funcret
 11184   00399A                     __end_of___awdiv:
 11185                           	callstack 0
 11186                           
 11187 ;; *************** function _sendStringSerial4 *****************
 11188 ;; Defined at:
 11189 ;;		line 41 in file "serial.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  string          1    2[COMRAM] PTR unsigned char 
 11192 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11204 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11207 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11208 ;;Total ram usage:        1 bytes
 11209 ;; Hardware stack levels used: 1
 11210 ;; Hardware stack levels required when called: 2
 11211 ;; This function calls:
 11212 ;;		_sendCharSerial4
 11213 ;; This function is called by:
 11214 ;;		_calibration_routine
 11215 ;;		_send2USART
 11216 ;;		_sendAllReadings
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text62
 11221   00468A                     __ptext62:
 11222                           	callstack 0
 11223   00468A                     _sendStringSerial4:
 11224                           	callstack 27
 11225   00468A                     
 11226                           ;serial.c: 44:     while(*string != 0){
 11227   00468A  EF52  F023         	goto	l6616
 11228   00468E                     l6610:
 11229                           
 11230                           ;serial.c: 46:   sendCharSerial4(*string++);
 11231   00468E  5003               	movf	sendStringSerial4@string^0,w,c
 11232   004690  6ED9               	movwf	fsr2l,c
 11233   004692  6ADA               	clrf	fsr2h,c
 11234   004694  50DF               	movf	indf2,w,c
 11235   004696  EC1D  F024         	call	_sendCharSerial4
 11236   00469A  2A03               	incf	sendStringSerial4@string^0,f,c
 11237   00469C                     
 11238                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11239   00469C  0E6A               	movlw	106
 11240   00469E                     u7387:
 11241   00469E  2EE8               	decfsz	wreg,f,c
 11242   0046A0  D7FE               	bra	u7387
 11243   0046A2  D000               	nop2	
 11244   0046A4                     l6616:
 11245                           
 11246                           ;serial.c: 44:     while(*string != 0){
 11247   0046A4  5003               	movf	sendStringSerial4@string^0,w,c
 11248   0046A6  6ED9               	movwf	fsr2l,c
 11249   0046A8  6ADA               	clrf	fsr2h,c
 11250   0046AA  50DF               	movf	indf2,w,c
 11251   0046AC  A4D8               	btfss	status,2,c
 11252   0046AE  EF5B  F023         	goto	u6461
 11253   0046B2  EF5D  F023         	goto	u6460
 11254   0046B6                     u6461:
 11255   0046B6  EF47  F023         	goto	l6610
 11256   0046BA                     u6460:
 11257   0046BA  0012               	return		;funcret
 11258   0046BC                     __end_of_sendStringSerial4:
 11259                           	callstack 0
 11260                           
 11261 ;; *************** function _sendCharSerial4 *****************
 11262 ;; Defined at:
 11263 ;;		line 35 in file "serial.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  charToSend      1    wreg     unsigned char 
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  charToSend      1    1[COMRAM] unsigned char 
 11268 ;; Return value:  Size  Location     Type
 11269 ;;                  1    wreg      void 
 11270 ;; Registers used:
 11271 ;;		wreg
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11281 ;;Total ram usage:        1 bytes
 11282 ;; Hardware stack levels used: 1
 11283 ;; Hardware stack levels required when called: 1
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_sendStringSerial4
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           	psect	text63
 11292   00483A                     __ptext63:
 11293                           	callstack 0
 11294   00483A                     _sendCharSerial4:
 11295                           	callstack 27
 11296                           
 11297                           ;incstack = 0
 11298                           ;sendCharSerial4@charToSend stored from wreg
 11299   00483A  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11300   00483C                     l554:
 11301   00483C  010E               	movlb	14	; () banked
 11302   00483E  A537               	btfss	55,2,b	;volatile
 11303   004840  EF24  F024         	goto	u6011
 11304   004844  EF26  F024         	goto	u6010
 11305   004848                     u6011:
 11306   004848  EF1E  F024         	goto	l554
 11307   00484C                     u6010:
 11308   00484C                     
 11309                           ; BSR set to: 14
 11310                           ;serial.c: 37:     TX4REG = charToSend;
 11311   00484C  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11312   004850                     
 11313                           ; BSR set to: 14
 11314   004850  0012               	return		;funcret
 11315   004852                     __end_of_sendCharSerial4:
 11316                           	callstack 0
 11317                           
 11318 ;; *************** function _color_read_Red *****************
 11319 ;; Defined at:
 11320 ;;		line 33 in file "color.c"
 11321 ;; Parameters:    Size  Location     Type
 11322 ;;		None
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  tmp             2   10[COMRAM] unsigned int 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  2    5[COMRAM] unsigned int 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2, status,0, cstack
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11336 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11337 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11338 ;;Total ram usage:        7 bytes
 11339 ;; Hardware stack levels used: 1
 11340 ;; Hardware stack levels required when called: 3
 11341 ;; This function calls:
 11342 ;;		_I2C_2_Master_Read
 11343 ;;		_I2C_2_Master_RepStart
 11344 ;;		_I2C_2_Master_Start
 11345 ;;		_I2C_2_Master_Stop
 11346 ;;		_I2C_2_Master_Write
 11347 ;; This function is called by:
 11348 ;;		_reading_hue
 11349 ;;		_calibration_routine
 11350 ;; This function uses a non-reentrant model
 11351 ;;
 11352                           
 11353                           	psect	text64
 11354   004050                     __ptext64:
 11355                           	callstack 0
 11356   004050                     _color_read_Red:
 11357                           	callstack 26
 11358   004050                     
 11359                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11360   004050  EC34  F024         	call	_I2C_2_Master_Start	;wreg free
 11361                           
 11362                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11363   004054  0E52               	movlw	82
 11364   004056  EC29  F024         	call	_I2C_2_Master_Write
 11365                           
 11366                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11367   00405A  0EB6               	movlw	182
 11368   00405C  EC29  F024         	call	_I2C_2_Master_Write
 11369                           
 11370                           ;color.c: 39:  I2C_2_Master_RepStart();
 11371   004060  EC39  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11372                           
 11373                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11374   004064  0E53               	movlw	83
 11375   004066  EC29  F024         	call	_I2C_2_Master_Write
 11376                           
 11377                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11378   00406A  0E01               	movlw	1
 11379   00406C  EC51  F021         	call	_I2C_2_Master_Read
 11380   004070  6E08               	movwf	??_color_read_Red^0,c
 11381   004072  5008               	movf	??_color_read_Red^0,w,c
 11382   004074  6E0B               	movwf	color_read_Red@tmp^0,c
 11383   004076  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11384                           
 11385                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11386   004078  0E00               	movlw	0
 11387   00407A  EC51  F021         	call	_I2C_2_Master_Read
 11388   00407E  6E08               	movwf	??_color_read_Red^0,c
 11389   004080  5008               	movf	??_color_read_Red^0,w,c
 11390   004082  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11391   004084  6A09               	clrf	(??_color_read_Red+1)^0,c
 11392   004086  500B               	movf	color_read_Red@tmp^0,w,c
 11393   004088  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11394   00408A  6E0B               	movwf	color_read_Red@tmp^0,c
 11395   00408C  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11396   00408E  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11397   004090  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11398                           
 11399                           ;color.c: 43:  I2C_2_Master_Stop();
 11400   004092  EC2F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11401   004096                     
 11402                           ;color.c: 44:  return tmp;
 11403   004096  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11404   00409A  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11405   00409E  0012               	return		;funcret
 11406   0040A0                     __end_of_color_read_Red:
 11407                           	callstack 0
 11408                           
 11409 ;; *************** function _color_read_Green *****************
 11410 ;; Defined at:
 11411 ;;		line 47 in file "color.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;		None
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;  tmp             2   10[COMRAM] unsigned int 
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  2    5[COMRAM] unsigned int 
 11418 ;; Registers used:
 11419 ;;		wreg, status,2, status,0, cstack
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11427 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11428 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11429 ;;Total ram usage:        7 bytes
 11430 ;; Hardware stack levels used: 1
 11431 ;; Hardware stack levels required when called: 3
 11432 ;; This function calls:
 11433 ;;		_I2C_2_Master_Read
 11434 ;;		_I2C_2_Master_RepStart
 11435 ;;		_I2C_2_Master_Start
 11436 ;;		_I2C_2_Master_Stop
 11437 ;;		_I2C_2_Master_Write
 11438 ;; This function is called by:
 11439 ;;		_reading_hue
 11440 ;;		_calibration_routine
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text65
 11445   0040A0                     __ptext65:
 11446                           	callstack 0
 11447   0040A0                     _color_read_Green:
 11448                           	callstack 26
 11449   0040A0                     
 11450                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11451   0040A0  EC34  F024         	call	_I2C_2_Master_Start	;wreg free
 11452                           
 11453                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11454   0040A4  0E52               	movlw	82
 11455   0040A6  EC29  F024         	call	_I2C_2_Master_Write
 11456                           
 11457                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11458   0040AA  0EB8               	movlw	184
 11459   0040AC  EC29  F024         	call	_I2C_2_Master_Write
 11460                           
 11461                           ;color.c: 53:  I2C_2_Master_RepStart();
 11462   0040B0  EC39  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11463                           
 11464                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11465   0040B4  0E53               	movlw	83
 11466   0040B6  EC29  F024         	call	_I2C_2_Master_Write
 11467                           
 11468                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11469   0040BA  0E01               	movlw	1
 11470   0040BC  EC51  F021         	call	_I2C_2_Master_Read
 11471   0040C0  6E08               	movwf	??_color_read_Green^0,c
 11472   0040C2  5008               	movf	??_color_read_Green^0,w,c
 11473   0040C4  6E0B               	movwf	color_read_Green@tmp^0,c
 11474   0040C6  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11475                           
 11476                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11477   0040C8  0E00               	movlw	0
 11478   0040CA  EC51  F021         	call	_I2C_2_Master_Read
 11479   0040CE  6E08               	movwf	??_color_read_Green^0,c
 11480   0040D0  5008               	movf	??_color_read_Green^0,w,c
 11481   0040D2  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11482   0040D4  6A09               	clrf	(??_color_read_Green+1)^0,c
 11483   0040D6  500B               	movf	color_read_Green@tmp^0,w,c
 11484   0040D8  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11485   0040DA  6E0B               	movwf	color_read_Green@tmp^0,c
 11486   0040DC  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11487   0040DE  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11488   0040E0  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11489                           
 11490                           ;color.c: 57:  I2C_2_Master_Stop();
 11491   0040E2  EC2F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11492   0040E6                     
 11493                           ;color.c: 58:  return tmp;
 11494   0040E6  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11495   0040EA  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11496   0040EE  0012               	return		;funcret
 11497   0040F0                     __end_of_color_read_Green:
 11498                           	callstack 0
 11499                           
 11500 ;; *************** function _color_read_Clear *****************
 11501 ;; Defined at:
 11502 ;;		line 76 in file "color.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;  tmp             2   10[COMRAM] unsigned int 
 11507 ;; Return value:  Size  Location     Type
 11508 ;;                  2    5[COMRAM] unsigned int 
 11509 ;; Registers used:
 11510 ;;		wreg, status,2, status,0, cstack
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11517 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11518 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;Total ram usage:        7 bytes
 11521 ;; Hardware stack levels used: 1
 11522 ;; Hardware stack levels required when called: 3
 11523 ;; This function calls:
 11524 ;;		_I2C_2_Master_Read
 11525 ;;		_I2C_2_Master_RepStart
 11526 ;;		_I2C_2_Master_Start
 11527 ;;		_I2C_2_Master_Stop
 11528 ;;		_I2C_2_Master_Write
 11529 ;; This function is called by:
 11530 ;;		_reading_hue
 11531 ;;		_calibration_routine
 11532 ;;		_main
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text66
 11537   0040F0                     __ptext66:
 11538                           	callstack 0
 11539   0040F0                     _color_read_Clear:
 11540                           	callstack 26
 11541   0040F0                     
 11542                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11543   0040F0  EC34  F024         	call	_I2C_2_Master_Start	;wreg free
 11544                           
 11545                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11546   0040F4  0E52               	movlw	82
 11547   0040F6  EC29  F024         	call	_I2C_2_Master_Write
 11548                           
 11549                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11550   0040FA  0EB4               	movlw	180
 11551   0040FC  EC29  F024         	call	_I2C_2_Master_Write
 11552                           
 11553                           ;color.c: 82:  I2C_2_Master_RepStart();
 11554   004100  EC39  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11555                           
 11556                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11557   004104  0E53               	movlw	83
 11558   004106  EC29  F024         	call	_I2C_2_Master_Write
 11559                           
 11560                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11561   00410A  0E01               	movlw	1
 11562   00410C  EC51  F021         	call	_I2C_2_Master_Read
 11563   004110  6E08               	movwf	??_color_read_Clear^0,c
 11564   004112  5008               	movf	??_color_read_Clear^0,w,c
 11565   004114  6E0B               	movwf	color_read_Clear@tmp^0,c
 11566   004116  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11567                           
 11568                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11569   004118  0E00               	movlw	0
 11570   00411A  EC51  F021         	call	_I2C_2_Master_Read
 11571   00411E  6E08               	movwf	??_color_read_Clear^0,c
 11572   004120  5008               	movf	??_color_read_Clear^0,w,c
 11573   004122  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11574   004124  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11575   004126  500B               	movf	color_read_Clear@tmp^0,w,c
 11576   004128  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11577   00412A  6E0B               	movwf	color_read_Clear@tmp^0,c
 11578   00412C  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11579   00412E  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11580   004130  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11581                           
 11582                           ;color.c: 86:  I2C_2_Master_Stop();
 11583   004132  EC2F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11584   004136                     
 11585                           ;color.c: 87:  return tmp;
 11586   004136  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11587   00413A  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11588   00413E  0012               	return		;funcret
 11589   004140                     __end_of_color_read_Clear:
 11590                           	callstack 0
 11591                           
 11592 ;; *************** function _color_read_Blue *****************
 11593 ;; Defined at:
 11594 ;;		line 61 in file "color.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  tmp             2   10[COMRAM] unsigned int 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  2    5[COMRAM] unsigned int 
 11601 ;; Registers used:
 11602 ;;		wreg, status,2, status,0, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11610 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11611 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11612 ;;Total ram usage:        7 bytes
 11613 ;; Hardware stack levels used: 1
 11614 ;; Hardware stack levels required when called: 3
 11615 ;; This function calls:
 11616 ;;		_I2C_2_Master_Read
 11617 ;;		_I2C_2_Master_RepStart
 11618 ;;		_I2C_2_Master_Start
 11619 ;;		_I2C_2_Master_Stop
 11620 ;;		_I2C_2_Master_Write
 11621 ;; This function is called by:
 11622 ;;		_reading_hue
 11623 ;;		_calibration_routine
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           	psect	text67
 11628   004140                     __ptext67:
 11629                           	callstack 0
 11630   004140                     _color_read_Blue:
 11631                           	callstack 26
 11632   004140                     
 11633                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11634   004140  EC34  F024         	call	_I2C_2_Master_Start	;wreg free
 11635                           
 11636                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11637   004144  0E52               	movlw	82
 11638   004146  EC29  F024         	call	_I2C_2_Master_Write
 11639                           
 11640                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11641   00414A  0EBA               	movlw	186
 11642   00414C  EC29  F024         	call	_I2C_2_Master_Write
 11643                           
 11644                           ;color.c: 67:  I2C_2_Master_RepStart();
 11645   004150  EC39  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11646                           
 11647                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11648   004154  0E53               	movlw	83
 11649   004156  EC29  F024         	call	_I2C_2_Master_Write
 11650                           
 11651                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11652   00415A  0E01               	movlw	1
 11653   00415C  EC51  F021         	call	_I2C_2_Master_Read
 11654   004160  6E08               	movwf	??_color_read_Blue^0,c
 11655   004162  5008               	movf	??_color_read_Blue^0,w,c
 11656   004164  6E0B               	movwf	color_read_Blue@tmp^0,c
 11657   004166  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11658                           
 11659                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11660   004168  0E00               	movlw	0
 11661   00416A  EC51  F021         	call	_I2C_2_Master_Read
 11662   00416E  6E08               	movwf	??_color_read_Blue^0,c
 11663   004170  5008               	movf	??_color_read_Blue^0,w,c
 11664   004172  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11665   004174  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11666   004176  500B               	movf	color_read_Blue@tmp^0,w,c
 11667   004178  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11668   00417A  6E0B               	movwf	color_read_Blue@tmp^0,c
 11669   00417C  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11670   00417E  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11671   004180  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11672                           
 11673                           ;color.c: 71:  I2C_2_Master_Stop();
 11674   004182  EC2F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11675   004186                     
 11676                           ;color.c: 72:  return tmp;
 11677   004186  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11678   00418A  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11679   00418E  0012               	return		;funcret
 11680   004190                     __end_of_color_read_Blue:
 11681                           	callstack 0
 11682                           
 11683 ;; *************** function _I2C_2_Master_Write *****************
 11684 ;; Defined at:
 11685 ;;		line 45 in file "i2c.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;  data_byte       1    wreg     unsigned char 
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;  data_byte       1    2[COMRAM] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      void 
 11692 ;; Registers used:
 11693 ;;		wreg, status,2, status,0, cstack
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11703 ;;Total ram usage:        1 bytes
 11704 ;; Hardware stack levels used: 1
 11705 ;; Hardware stack levels required when called: 2
 11706 ;; This function calls:
 11707 ;;		_I2C_2_Master_Idle
 11708 ;; This function is called by:
 11709 ;;		_color_writetoaddr
 11710 ;;		_color_read_Red
 11711 ;;		_color_read_Green
 11712 ;;		_color_read_Blue
 11713 ;;		_color_read_Clear
 11714 ;; This function uses a non-reentrant model
 11715 ;;
 11716                           
 11717                           	psect	text68
 11718   004852                     __ptext68:
 11719                           	callstack 0
 11720   004852                     _I2C_2_Master_Write:
 11721                           	callstack 26
 11722                           
 11723                           ;incstack = 0
 11724                           ;I2C_2_Master_Write@data_byte stored from wreg
 11725   004852  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11726   004854                     
 11727                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11728   004854  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11729   004858                     
 11730                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11731   004858  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11732   00485C  0012               	return		;funcret
 11733   00485E                     __end_of_I2C_2_Master_Write:
 11734                           	callstack 0
 11735                           
 11736 ;; *************** function _I2C_2_Master_Stop *****************
 11737 ;; Defined at:
 11738 ;;		line 39 in file "i2c.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;		None
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;		None
 11743 ;; Return value:  Size  Location     Type
 11744 ;;                  1    wreg      void 
 11745 ;; Registers used:
 11746 ;;		wreg, status,2, status,0, cstack
 11747 ;; Tracked objects:
 11748 ;;		On entry : 0/0
 11749 ;;		On exit  : 0/0
 11750 ;;		Unchanged: 0/0
 11751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11756 ;;Total ram usage:        0 bytes
 11757 ;; Hardware stack levels used: 1
 11758 ;; Hardware stack levels required when called: 2
 11759 ;; This function calls:
 11760 ;;		_I2C_2_Master_Idle
 11761 ;; This function is called by:
 11762 ;;		_color_writetoaddr
 11763 ;;		_color_read_Red
 11764 ;;		_color_read_Green
 11765 ;;		_color_read_Blue
 11766 ;;		_color_read_Clear
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           	psect	text69
 11771   00485E                     __ptext69:
 11772                           	callstack 0
 11773   00485E                     _I2C_2_Master_Stop:
 11774                           	callstack 26
 11775   00485E                     
 11776                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11777   00485E  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11778   004862                     
 11779                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11780   004862  010E               	movlb	14	; () banked
 11781   004864  85DA               	bsf	218,2,b	;volatile
 11782   004866                     
 11783                           ; BSR set to: 14
 11784   004866  0012               	return		;funcret
 11785   004868                     __end_of_I2C_2_Master_Stop:
 11786                           	callstack 0
 11787                           
 11788 ;; *************** function _I2C_2_Master_Start *****************
 11789 ;; Defined at:
 11790 ;;		line 27 in file "i2c.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;		None
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;		None
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  1    wreg      void 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11808 ;;Total ram usage:        0 bytes
 11809 ;; Hardware stack levels used: 1
 11810 ;; Hardware stack levels required when called: 2
 11811 ;; This function calls:
 11812 ;;		_I2C_2_Master_Idle
 11813 ;; This function is called by:
 11814 ;;		_color_writetoaddr
 11815 ;;		_color_read_Red
 11816 ;;		_color_read_Green
 11817 ;;		_color_read_Blue
 11818 ;;		_color_read_Clear
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text70
 11823   004868                     __ptext70:
 11824                           	callstack 0
 11825   004868                     _I2C_2_Master_Start:
 11826                           	callstack 26
 11827   004868                     
 11828                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11829   004868  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11830   00486C                     
 11831                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11832   00486C  010E               	movlb	14	; () banked
 11833   00486E  81DA               	bsf	218,0,b	;volatile
 11834   004870                     
 11835                           ; BSR set to: 14
 11836   004870  0012               	return		;funcret
 11837   004872                     __end_of_I2C_2_Master_Start:
 11838                           	callstack 0
 11839                           
 11840 ;; *************** function _I2C_2_Master_RepStart *****************
 11841 ;; Defined at:
 11842 ;;		line 33 in file "i2c.c"
 11843 ;; Parameters:    Size  Location     Type
 11844 ;;		None
 11845 ;; Auto vars:     Size  Location     Type
 11846 ;;		None
 11847 ;; Return value:  Size  Location     Type
 11848 ;;                  1    wreg      void 
 11849 ;; Registers used:
 11850 ;;		wreg, status,2, status,0, cstack
 11851 ;; Tracked objects:
 11852 ;;		On entry : 0/0
 11853 ;;		On exit  : 0/0
 11854 ;;		Unchanged: 0/0
 11855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11860 ;;Total ram usage:        0 bytes
 11861 ;; Hardware stack levels used: 1
 11862 ;; Hardware stack levels required when called: 2
 11863 ;; This function calls:
 11864 ;;		_I2C_2_Master_Idle
 11865 ;; This function is called by:
 11866 ;;		_color_read_Red
 11867 ;;		_color_read_Green
 11868 ;;		_color_read_Blue
 11869 ;;		_color_read_Clear
 11870 ;; This function uses a non-reentrant model
 11871 ;;
 11872                           
 11873                           	psect	text71
 11874   004872                     __ptext71:
 11875                           	callstack 0
 11876   004872                     _I2C_2_Master_RepStart:
 11877                           	callstack 26
 11878   004872                     
 11879                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11880   004872  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11881   004876                     
 11882                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11883   004876  010E               	movlb	14	; () banked
 11884   004878  83DA               	bsf	218,1,b	;volatile
 11885   00487A                     
 11886                           ; BSR set to: 14
 11887   00487A  0012               	return		;funcret
 11888   00487C                     __end_of_I2C_2_Master_RepStart:
 11889                           	callstack 0
 11890                           
 11891 ;; *************** function _I2C_2_Master_Read *****************
 11892 ;; Defined at:
 11893 ;;		line 51 in file "i2c.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;  ack             1    wreg     unsigned char 
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;  ack             1    3[COMRAM] unsigned char 
 11898 ;;  tmp             1    4[COMRAM] unsigned char 
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  1    wreg      unsigned char 
 11901 ;; Registers used:
 11902 ;;		wreg, status,2, status,0, cstack
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11912 ;;Total ram usage:        3 bytes
 11913 ;; Hardware stack levels used: 1
 11914 ;; Hardware stack levels required when called: 2
 11915 ;; This function calls:
 11916 ;;		_I2C_2_Master_Idle
 11917 ;; This function is called by:
 11918 ;;		_color_read_Red
 11919 ;;		_color_read_Green
 11920 ;;		_color_read_Blue
 11921 ;;		_color_read_Clear
 11922 ;; This function uses a non-reentrant model
 11923 ;;
 11924                           
 11925                           	psect	text72
 11926   0042A2                     __ptext72:
 11927                           	callstack 0
 11928   0042A2                     _I2C_2_Master_Read:
 11929                           	callstack 26
 11930                           
 11931                           ; BSR set to: 14
 11932                           ;incstack = 0
 11933                           ;I2C_2_Master_Read@ack stored from wreg
 11934   0042A2  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11935   0042A4                     
 11936                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11937   0042A4  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11938   0042A8                     
 11939                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11940   0042A8  010E               	movlb	14	; () banked
 11941   0042AA  87DA               	bsf	218,3,b	;volatile
 11942                           
 11943                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11944   0042AC  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11945   0042B0                     
 11946                           ;i2c.c: 57:   tmp = SSP2BUF;
 11947   0042B0  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11948                           
 11949                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11950   0042B4  ECBB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11951   0042B8                     
 11952                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11953   0042B8  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11954   0042BA  B4D8               	btfsc	status,2,c
 11955   0042BC  EF62  F021         	goto	u5981
 11956   0042C0  EF66  F021         	goto	u5980
 11957   0042C4                     u5981:
 11958   0042C4  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11959   0042C6  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11960   0042C8  EF67  F021         	goto	u5998
 11961   0042CC                     u5980:
 11962   0042CC  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11963   0042CE                     u5998:
 11964   0042CE  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11965   0042D0  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11966   0042D2  010E               	movlb	14	; () banked
 11967   0042D4  51DA               	movf	218,w,b	;volatile
 11968   0042D6  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11969   0042D8  0BDF               	andlw	-33
 11970   0042DA  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11971   0042DC  6FDA               	movwf	218,b	;volatile
 11972   0042DE                     
 11973                           ; BSR set to: 14
 11974                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11975   0042DE  89DA               	bsf	218,4,b	;volatile
 11976   0042E0                     
 11977                           ; BSR set to: 14
 11978                           ;i2c.c: 61:   return tmp;
 11979   0042E0  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11980   0042E2                     
 11981                           ; BSR set to: 14
 11982   0042E2  0012               	return		;funcret
 11983   0042E4                     __end_of_I2C_2_Master_Read:
 11984                           	callstack 0
 11985                           
 11986 ;; *************** function _I2C_2_Master_Idle *****************
 11987 ;; Defined at:
 11988 ;;		line 22 in file "i2c.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;		None
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;		None
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      void 
 11995 ;; Registers used:
 11996 ;;		wreg, status,2, status,0
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12006 ;;Total ram usage:        1 bytes
 12007 ;; Hardware stack levels used: 1
 12008 ;; Hardware stack levels required when called: 1
 12009 ;; This function calls:
 12010 ;;		Nothing
 12011 ;; This function is called by:
 12012 ;;		_I2C_2_Master_Start
 12013 ;;		_I2C_2_Master_RepStart
 12014 ;;		_I2C_2_Master_Stop
 12015 ;;		_I2C_2_Master_Write
 12016 ;;		_I2C_2_Master_Read
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           	psect	text73
 12021   004776                     __ptext73:
 12022                           	callstack 0
 12023   004776                     _I2C_2_Master_Idle:
 12024                           	callstack 26
 12025   004776                     l203:
 12026   004776  010E               	movlb	14	; () banked
 12027   004778  B5D8               	btfsc	216,2,b	;volatile
 12028   00477A  EFC1  F023         	goto	u5091
 12029   00477E  EFC3  F023         	goto	u5090
 12030   004782                     u5091:
 12031   004782  EFBB  F023         	goto	l203
 12032   004786                     u5090:
 12033   004786                     
 12034                           ; BSR set to: 14
 12035   004786  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12036   00478A  0E1F               	movlw	31
 12037   00478C  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12038   00478E  A4D8               	btfss	status,2,c
 12039   004790  EFCC  F023         	goto	u5101
 12040   004794  EFCE  F023         	goto	u5100
 12041   004798                     u5101:
 12042   004798  EFBB  F023         	goto	l203
 12043   00479C                     u5100:
 12044   00479C                     
 12045                           ; BSR set to: 14
 12046   00479C  0012               	return		;funcret
 12047   00479E                     __end_of_I2C_2_Master_Idle:
 12048                           	callstack 0
 12049                           
 12050 ;; *************** function _ADC_init *****************
 12051 ;; Defined at:
 12052 ;;		line 9 in file "ADC.c"
 12053 ;; Parameters:    Size  Location     Type
 12054 ;;		None
 12055 ;; Auto vars:     Size  Location     Type
 12056 ;;		None
 12057 ;; Return value:  Size  Location     Type
 12058 ;;                  1    wreg      void 
 12059 ;; Registers used:
 12060 ;;		wreg, status,2
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12070 ;;Total ram usage:        0 bytes
 12071 ;; Hardware stack levels used: 1
 12072 ;; Hardware stack levels required when called: 1
 12073 ;; This function calls:
 12074 ;;		Nothing
 12075 ;; This function is called by:
 12076 ;;		_main
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           	psect	text74
 12081   004820                     __ptext74:
 12082                           	callstack 0
 12083   004820                     _ADC_init:
 12084                           	callstack 29
 12085   004820                     
 12086                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12087   004820  8C86               	bsf	134,6,c	;volatile
 12088                           
 12089                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12090   004822  010E               	movlb	14	; () banked
 12091   004824  8DB4               	bsf	180,6,b	;volatile
 12092                           
 12093                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12094   004826  010F               	movlb	15	; () banked
 12095   004828  9958               	bcf	88,4,b	;volatile
 12096   00482A                     
 12097                           ; BSR set to: 15
 12098                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12099   00482A  0EFC               	movlw	-4
 12100   00482C  1758               	andwf	88,f,b	;volatile
 12101                           
 12102                           ;ADC.c: 17:     ADPCH=0b101110;
 12103   00482E  0E2E               	movlw	46
 12104   004830  6F5F               	movwf	95,b	;volatile
 12105   004832                     
 12106                           ; BSR set to: 15
 12107                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12108   004832  9460               	bcf	96,2,c	;volatile
 12109   004834                     
 12110                           ; BSR set to: 15
 12111                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12112   004834  8860               	bsf	96,4,c	;volatile
 12113   004836                     
 12114                           ; BSR set to: 15
 12115                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12116   004836  8E60               	bsf	96,7,c	;volatile
 12117   004838                     
 12118                           ; BSR set to: 15
 12119   004838  0012               	return		;funcret
 12120   00483A                     __end_of_ADC_init:
 12121                           	callstack 0
 12122                           
 12123 ;; *************** function _LowISR *****************
 12124 ;; Defined at:
 12125 ;;		line 41 in file "timers.c"
 12126 ;; Parameters:    Size  Location     Type
 12127 ;;		None
 12128 ;; Auto vars:     Size  Location     Type
 12129 ;;		None
 12130 ;; Return value:  Size  Location     Type
 12131 ;;                  1    wreg      void 
 12132 ;; Registers used:
 12133 ;;		None
 12134 ;; Tracked objects:
 12135 ;;		On entry : 0/0
 12136 ;;		On exit  : 0/0
 12137 ;;		Unchanged: 0/0
 12138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12141 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12143 ;;Total ram usage:        1 bytes
 12144 ;; Hardware stack levels used: 1
 12145 ;; This function calls:
 12146 ;;		Nothing
 12147 ;; This function is called by:
 12148 ;;		Interrupt level 1
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           	psect	intcodelo
 12153   000018                     __pintcodelo:
 12154                           	callstack 0
 12155   000018                     _LowISR:
 12156                           	callstack 21
 12157                           
 12158                           ; BSR set to: 15
 12159                           ;incstack = 0
 12160   000018  805A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12161   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12162   00001E                     
 12163                           ;timers.c: 44:     if (PIR0bits.TMR0IF == 1) {
 12164   00001E  010E               	movlb	14	; () banked
 12165   000020  AB33               	btfss	51,5,b	;volatile
 12166   000022  EF15  F000         	goto	i1u236_21
 12167   000026  EF17  F000         	goto	i1u236_20
 12168   00002A                     i1u236_21:
 12169   00002A  EF19  F000         	goto	i1l654
 12170   00002E                     i1u236_20:
 12171   00002E                     
 12172                           ; BSR set to: 14
 12173                           ;timers.c: 45:         LATGbits.LATG1 = 1;
 12174   00002E  827F               	bsf	127,1,c	;volatile
 12175                           
 12176                           ;timers.c: 47:         PIR0bits.TMR0IF = 0;
 12177   000030  9B33               	bcf	51,5,b	;volatile
 12178   000032                     i1l654:
 12179                           
 12180                           ; BSR set to: 14
 12181   000032  C001  FFE0         	movff	??_LowISR,bsr
 12182   000036  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12183   000038  0010               	retfie	
 12184   00003A                     __end_of_LowISR:
 12185                           	callstack 0
 12186                           
 12187                           	psect	rparam
 12188   000000                     
 12189                           	psect	temp
 12190   00005A                     btemp:
 12191                           	callstack 0
 12192   00005A                     	ds	1
 12193   000000                     int$flags	set	btemp
 12194   000000                     wtemp8	set	btemp+1
 12195   000000                     ttemp5	set	btemp+1
 12196   000000                     ttemp6	set	btemp+4
 12197   000000                     ttemp7	set	btemp+8
 12198                           
 12199                           	psect	config
 12200                           
 12201                           ;Config register CONFIG1L @ 0x300000
 12202                           ;	External Oscillator mode Selection bits
 12203                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12204                           ;	Power-up default value for COSC bits
 12205                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12206   300000                     	org	3145728
 12207   300000  AA                 	db	170
 12208                           
 12209                           ;Config register CONFIG1H @ 0x300001
 12210                           ;	unspecified, using default values
 12211                           ;	Clock Out Enable bit
 12212                           ;	CLKOUTEN = 0x1, unprogrammed default
 12213                           ;	Clock Switch Enable bit
 12214                           ;	CSWEN = 0x1, unprogrammed default
 12215                           ;	Fail-Safe Clock Monitor Enable bit
 12216                           ;	FCMEN = 0x1, unprogrammed default
 12217   300001                     	org	3145729
 12218   300001  FF                 	db	255
 12219                           
 12220                           ;Config register CONFIG3L @ 0x300004
 12221                           ;	WDT Period Select bits
 12222                           ;	WDTCPS = 0x1F, unprogrammed default
 12223                           ;	WDT operating mode
 12224                           ;	WDTE = OFF, WDT Disabled
 12225   300004                     	org	3145732
 12226   300004  9F                 	db	159
 12227                           
 12228                           ;Config register CONFIG3H @ 0x300005
 12229                           ;	unspecified, using default values
 12230                           ;	WDT Window Select bits
 12231                           ;	WDTCWS = 0x7, unprogrammed default
 12232                           ;	WDT input clock selector
 12233                           ;	WDTCCS = 0x7, unprogrammed default
 12234   300005                     	org	3145733
 12235   300005  FF                 	db	255
 12236                           tosu	equ	0xFFF
 12237                           tosh	equ	0xFFE
 12238                           tosl	equ	0xFFD
 12239                           stkptr	equ	0xFFC
 12240                           pclatu	equ	0xFFB
 12241                           pclath	equ	0xFFA
 12242                           pcl	equ	0xFF9
 12243                           tblptru	equ	0xFF8
 12244                           tblptrh	equ	0xFF7
 12245                           tblptrl	equ	0xFF6
 12246                           tablat	equ	0xFF5
 12247                           prodh	equ	0xFF4
 12248                           prodl	equ	0xFF3
 12249                           indf0	equ	0xFEF
 12250                           postinc0	equ	0xFEE
 12251                           postdec0	equ	0xFED
 12252                           preinc0	equ	0xFEC
 12253                           plusw0	equ	0xFEB
 12254                           fsr0h	equ	0xFEA
 12255                           fsr0l	equ	0xFE9
 12256                           wreg	equ	0xFE8
 12257                           indf1	equ	0xFE7
 12258                           postinc1	equ	0xFE6
 12259                           postdec1	equ	0xFE5
 12260                           preinc1	equ	0xFE4
 12261                           plusw1	equ	0xFE3
 12262                           fsr1h	equ	0xFE2
 12263                           fsr1l	equ	0xFE1
 12264                           bsr	equ	0xFE0
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           preinc2	equ	0xFDC
 12269                           plusw2	equ	0xFDB
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         340
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      89
    BANK0           160     76     152
    BANK1           256      0     162
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3009$buffer	PTR unsigned char  size(2) Largest target is 0

    S3009$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _send2USART->_sprintf
    _returnHome->_reverseStraight
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fldiv
    _convert_rgb2hue->___fltol
    ___fltol->___flmul
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flsub
    _get16bitTMR0val->_logAction
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  390514
                                             76 COMRAM    10    10      0
                           _ADC_init
                            ___lwdiv
                             ___wmul
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   12006
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4  127601
                                             65 COMRAM    11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   80485
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   17517
                                             55 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    9993
                                             50 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     158
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   21545
                                             54 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   20641
                                             50 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1046
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             40 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2693
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3083
                                             25 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1781
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  193407
                                             32 COMRAM     4     0      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   26064
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   27684
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   12970
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   26244
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   12790
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   27504
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   12790
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    5377
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   27684
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   12970
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   13150
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   13150
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    5557
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   14410
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6929
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    5377
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4701
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1381
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1595
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   13006
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10899
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9147
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8659
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1992
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1552
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
         ___flsub (ARG)
           ___fladd
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
     _sendStringSerial4
     _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      59       1       94.7%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F7      66        0.0%
DATA                 0      0     1F7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 01:21:48 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 4050  
                 ___fldiv@aexp 0032                   ___fldiv@bexp 0031             fullSpeedBack@power 0017  
                 ___fldiv@sign 002A                _color_read_Blue 4140                             l81 43C8  
                           l90 40EE                             l84 47E2                             l93 418E  
                           l87 409E                             l96 413E                             l99 380A  
                 ___awdiv@sign 0007                             bsr 0FE0            ___wmul@multiplicand 0004  
              moveLightBlue@mL 001D                moveLightBlue@mR 001E             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 40F0  
             _color_read_Green 40A0                            l110 2960                            l102 2896  
                          l111 29B2                            l120 2AA8                            l104 28A4  
                          l200 4774                            l113 29C0                            l105 28F2  
                          l114 2A1A                            l130 11B8                            l203 4776  
                          l107 2900                            l212 487A                            l116 2A28  
                          l108 2952                            l140 12AA                            l132 1212  
                          l221 42E2                            l117 2A82                            l206 479C  
                          l150 15C2                            l142 12BA                            l134 1222  
                          l215 4866                            l144 1314                            l128 11A8  
                          l209 4870                            l218 485C                            l154 163A  
                          l146 1324             logAction@path_step 0004                            l155 1656  
                          l331 25D0                            l421 320E                            l173 286E  
                          l325 2470                            l414 3D70                            l167 2866  
                          l434 3EFA                            l452 46EA                            l444 38D4  
                          l349 4838                            l429 3DFE                            l461 458E  
                          l470 452A                            l702 30BA                            l455 471A  
                          l439 3E7C                            l711 437E                            l464 45F2  
                          l608 4800                            l449 3F70                            l473 44C6  
                          l545 481E                            l554 483C                            l458 4688  
                          l482 4494                            l714 4394                            l722 3720  
                          l563 46BA                            l467 474A                            l491 45C0  
                          l731 331E                            l476 4624                            l708 30BA  
                          l557 4850                            l485 44F8                            l813 342A  
                          l725 331C                            l734 47C2                            l494 4462  
                          l479 4656                            l488 455C                            l648 435C  
                          l745 403E                            l746 404E                            l696 425E  
                          l965 3998                            l993 3BA0                            l978 3A48  
                          l999 35EE                            _abs 43FE                            _pad 3C4C  
                          _hue 00C0            convert_rgb2hue@cMax 0033                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 001D  
                 ___flmul@bexp 0022                   ___flmul@sign 001C                   ___flmul@temp 0027  
                 ___flmul@prod 0023                   ___fltol@exp1 0032                           l1004 3634  
                         l1031 3530                           ?_abs 0008                           l1232 3FE4  
                         l1304 421A                           l1225 3FDC                           l1321 20FE  
                         l1330 21E6                           l1403 2BF4                           l1412 43FC  
                         l1316 22DA                           l1501 3C4A                           l1318 213A  
                         l1262 1846                           l1327 2180                           l1271 1B16  
                         l1263 1834                           l1512 487C                           l1432 3C82  
                         l1440 2E44                           l1352 1F40                           l1264 17FA  
                         l1329 21F8                           l1435 3CC0                           l1355 1DD2  
                         l1348 1BDC                           l1509 4322                           l1437 3CE0  
                         l1453 2F5C                           l1461 3AF6                           l1365 1F02  
                         l1357 1E4A                           l1358 1E38                           l1279 1960  
                         l1288 1A30                           l1392 2C5C                           l1457 3AEE  
                         l1289 1A1E                           l1482 42A0                           l1476 2DE4  
                         l1396 2B98                           l1389 2B00                           l1486 4418  
                         l6000 1DC2                           l1489 4430                           l6010 1E02  
                         l6002 1DD0                           l6020 1E74                           l6012 1E30  
                         l6004 1DE2                           l6030 1EEA                           l6022 1E9E  
                         l6006 1DF0                           l6110 2B82                           l6102 2B3A  
                         l6200 485E                           l5400 3BE8                           l7000 4802  
                         l6032 1F06                           l6040 1F2C                           l6016 1E5A  
                         l6024 1EA2                           l6008 1DF4                           l6120 2C02  
                         l6112 2B8E                           l6104 2B42                           l6210 42A8  
                         l6202 4862                           l5402 3C1A                           l5410 42FE  
                         l7010 481C                           l7002 480C                           l6042 1F30  
                         l6034 1F16                           l6026 1EBC                           l6018 1E66  
                         l6130 2C4A                           l6122 2C04                           l6114 2BCA  
                         l6106 2B4E                           l6212 42B0                           l6204 4872  
                         l5420 38D6                           l5412 4302                           l6140 2C8C  
                         l5500 3F72                           l7020 3D40                           l7012 3CE2  
                         l7004 480E                           l6300 1F5C                           l6036 1F24  
                         l6028 1ED0                           l6060 3496                           l6052 3456  
                         l6132 2C4C                           l6124 2C08                           l6116 2BD6  
                         l6108 2B80                           l7100 2322                           l6214 42B8  
                         l6206 4876                           l5430 3902                           l5422 38DA  
                         l5406 42E4                           l5414 479E                           l6150 2CB6  
                         l6142 2C9A                           l5510 3FAA                           l5502 3F7A  
                         l7030 3D62                           l7022 3D4A                           l7014 3CF2  
                         l7006 4818                           l6310 1F90                           l6302 1F5E  
                         l6038 1F26                           l6070 34C6                           l6062 34A4  
                         l6054 3480                           l6046 342C                           l6126 2C2C  
                         l6118 2BE4                           l6230 3830                           l6222 380C  
                         l7110 2344                           l7102 2326                           ?_pad 0010  
                         l6216 42DE                           l6208 42A4                           l5440 3930  
                         l5432 390A                           l5424 38E8                           l5408 42F0  
                         l5600 2F2A                           l5416 47BA                           l6160 2D18  
                         l6144 2C9E                           l6136 2C5E                           l5520 3FD6  
                         l5512 3FB0                           l5504 3F8C                           l7040 4324  
                         l7032 3D64                           l7024 3D4C                           l7016 3D18  
                         l7008 481A                           l6320 1FC2                           l6304 1F6E  
                         l6312 1F98                           l6080 34F0                           l6072 34D0  
                         l6056 3482                           l6048 3442                           l6128 2C3C  
                         l6240 38B4                           l6232 383A                           l6224 3828  
                         l7200 255E                           l7120 234E                           l7112 2346  
                         l7104 233E                           l6218 42E0                           l5450 396A  
                         l5442 3938                           l5434 390E                           l5426 38F0  
                         l5530 3C8E                           l5522 3C4C                           l5602 2F30  
                         l5610 3A52                           l6170 2D7C                           l6162 2D28  
                         l6154 2CBE                           l6146 2CA6                           l6138 2C84  
                         l5514 3FC6                           l5506 3F94                           l6250 46EC  
                         l7042 433C                           l7034 3D6E                           l7026 3D56  
                         l7018 3D1C                           l6402 2208                           l6410 2250  
                         l6330 1FF6                           l6322 1FC4                           l6314 1FA8  
                         l6306 1F7E                           l6082 3500                           l6058 3492  
                         l6090 2AAC                           l6242 38B8                           l6234 3894  
                         l7050 3210                           l7210 25BA                           l7202 256A  
                         l7130 235A                           l7122 2350                           l7114 2348  
                         l7106 2340                           l5460 3990                           l5452 396C  
                         l5444 3946                           l5436 3916                           l5428 38F4  
                         l5540 440C                           l5532 3C9E                           l5524 3C5C  
                         l5604 2F40                           l5612 3A78                           l5620 3AC4  
                         l6172 2D94                           l6164 2D32                           l6148 2CAA  
                         l6156 2CF4                           l6500 47C6                           l5516 3FCE  
                         l5508 3F9C                           l6260 467C                           l6252 46F8  
                         l6244 46BC                           l7044 433E                           l7028 3D58  
                         l6420 22BA                           l6412 226A                           l6404 2214  
                         l6340 203C                           l6324 1FD4                           l6332 1FFE  
                         l6316 1FAE                           l6308 1F8E                           l6084 3510  
                         l6068 34BC                           l6092 2ABC                           l6236 389C  
                         l7060 32AC                           l7052 3216                           l7036 47E4  
                         l7220 2600                           l7212 25DE                           l7204 2582  
                         l7140 2378                           l7132 235C                           l7124 2354  
                         l7116 234A                           l7108 2342                           l5622 4776  
                         l6510 40E6                           l6502 4050                           l5454 3972  
                         l5446 394C                           l5438 3928                           l5470 39B4  
                         l5534 3CA2                           l5526 3C6C                           l5614 3A80  
                         l6174 2D9E                           l6166 2D3C                           l6158 2D04  
                         l6182 2DBE                           l5518 3FD0                           l5550 313A  
                         l5542 30BC                           l5710 3F50                           l5702 3F1C  
                         l5630 3D8C                           l6254 470E                           l6270 45CE  
                         l6262 455E                           l6246 46C8                           l7046 4354  
                         l6422 22C8                           l6414 2280                           l6406 2222  
                         l6350 2064                           l6342 2040                           l6334 200E  
                         l6326 1FE4                           l6318 1FB4                           l6086 3520  
                         l6078 34E4                           l6094 2ACA                           l6238 38A4  
                         l7062 32BC                           l7054 3222                           l7038 47F8  
                         l7214 25DE                           l7206 258E                           l7150 238E  
                         l7142 237A                           l7134 235E                           l7126 2356  
                         l7118 234C                           l5624 4786                           l6192 4868  
                         l6520 40F0                           l6504 4096                           l5448 3962  
                         l5456 3978                           l5480 39E8                           l5472 39B8  
                         l5464 399A                           l5392 3BA2                           l5536 3CD0  
                         l5528 3C7A                           l5560 2DEA                           l5616 3A9C  
                         l5608 3A4A                           l6168 2D5C                           l6600 43DA  
                         l5552 3178                           l5544 30D6                           l5712 3F54  
                         l5704 3F30                           l5640 3DC2                           l5632 3D94  
                         l6256 4658                           l6272 45E6                           l6264 456A  
                         l6280 44FA                           l6248 46DE                           l6424 22CE  
                         l6416 229A                           l6408 224C                           l6360 20B2  
                         l6336 2024                           l6328 1FF4                           l6440 3AF8  
                         l5800 17F2                           l5720 1674                           l6096 2B10  
                         l7072 3312                           l7064 32CC                           l7056 3234  
                         l7216 25EA                           l7208 25A4                           l7160 23B8  
                         l7152 2390                           l7144 2382                           l7136 2360  
                         l7128 2358                           l7080 22E8                           l6194 486C  
                         l6514 4140                           l6522 4136                           l6610 468E  
                         l5458 3988                           l5490 3A22                           l5482 39F0  
                         l5474 39C6                           l5466 399E                           l5538 43FE  
                         l5394 3BB2                           l5570 2E2C                           l5562 2DFE  
                         l5618 3ABC                           l6178 2DB2                           l6602 43E2  
                         l5554 3192                           l5546 3124                           l5706 3F38  
                         l5634 3DAA                           l5642 3DD2                           l5626 3D72  
                         l6274 471C                           l5650 3EA0                           l6258 4664  
                         l6266 4582                           l6282 4506                           l6426 22D0  
                         l6418 22B6                           l6370 20FC                           l6362 20C2  
                         l6354 2078                           l6338 2034                           l6346 2054  
                         l6450 3B98                           l6442 3B26                           l5810 1828  
                         l5802 1808                           l5722 1684                           l5730 16AE  
                         l5714 1658                           l6434 41D6                           l6098 2B26  
                         l6530 0F08                           l6290 435E                           l7066 32EC  
                         l7058 3240                           l7218 25FE                           l7170 241E  
                         l7162 23D8                           l7154 239C                           l7146 238A  
                         l7138 2362                           l7090 2302                           l7082 22E8  
                         l7074 22DC                           l6196 4854                           l6516 4186  
                         l6508 40A0                           l6612 469A                           l5484 39FE  
                         l5492 3A28                           l5476 39CE                           l5468 39AC  
                         l5396 3BC2                           l5580 2E5C                           l5572 2E38  
                         l5564 2E06                           l6604 43F2                           l5556 31D2  
                         l5548 3136                           l5708 3F40                           l5644 3DE8  
                         l5636 3DB2                           l5628 3D76                           l6276 4728  
                         l5660 3EC0                           l5652 3EA8                           l6268 45C2  
                         l6284 451E                           l6620 44A2                           l6380 214A  
                         l6372 2108                           l6364 20CA                           l6356 2092  
                         l6348 2064                           l6452 3B9E                           l6444 3B36  
                         l6460 3570                           l5900 1ADA                           l5820 1878  
                         l5812 1832                           l5804 1814                           l5740 16DE  
                         l5732 16BE                           l5724 1694                           l5716 1664  
                         l6436 41E6                           l6540 1008                           l6532 0F38  
                         l6292 436A                           l6700 3064                           l7068 32FC  
                         l7180 2492                           l7172 243E                           l7164 23F4  
                         l7156 239E                           l7148 238C                           l7092 230A  
                         l7084 22F4                           l7076 22E0                           l6198 4858  
                         l6286 483C                           l6614 469C                           l5494 3A38  
                         l5486 3A14                           l5478 39E0                           l5398 3BCC  
                         l5590 2ECE                           l5582 2E8E                           l5574 2E40  
                         l5566 2E16                           l5558 2DE6                           l5638 3DBA  
                         l6278 473E                           l5662 3EC8                           l5646 3E7E  
                         l6630 4600                           l5670 3E00                           l6622 44BA  
                         l6382 2160                           l6390 2190                           l6374 2126  
                         l6366 20DA                           l6358 20A2                           l6446 3B64  
                         l6470 35DC                           l6462 359E                           l5910 1B04  
                         l5902 1AE8                           l5830 18B4                           l5822 1888  
                         l5814 1854                           l5806 1818                           l5750 171E  
                         l5742 16EC                           l5734 16C4                           l5726 16A4  
                         l5718 1672                           l6550 10FC                           l6542 103C  
                         l6534 0F6C                           l6526 0EC6                           l6294 437A  
                         l6710 3636                           l6702 3074                           l7190 24EE  
                         l7182 24AA                           l7166 2404                           l7174 245A  
                         l7158 23AA                           l7094 2312                           l7086 22FA  
                         l7078 22E4                           l6288 484C                           l6616 46A4  
                         l6608 468A                           l5496 3A40                           l5488 3A1C  
                         l5592 2EE0                           l5584 2E92                           l5576 2E4C  
                         l5568 2E1C                           l7264 2CE6                           l6480 4268  
                         l6624 421E                           l5664 3ED0                           l5648 3E98  
                         l6632 4618                           l6640 4590                           l5672 3E1A  
                         l6392 219E                           l6384 2166                           l6376 2128  
                         l6368 20EE                           l6296 1F42                           l6448 3B74  
                         l6472 362C                           l6464 35AE                           l6456 3532  
                         l5920 1B32                           l5912 1B06                           l5904 1AEE  
                         l5840 18FA                           l5832 18C2                           l5824 1896  
                         l5816 1864                           l5808 1826                           l5760 1758  
                         l5752 1720                           l5744 16EE                           l5736 16D6  
                         l5728 16A6                           l6560 11FE                           l6552 1130  
                         l6544 1070                           l6536 0FA0                           l6528 0ED8  
                         l6800 3728                           l6720 36B0                           l6712 363E  
                         l6704 3086                           l7192 24FE                           l7184 24B6  
                         l7176 2472                           l7168 2410                           l7096 231A  
                         l7088 22FE                           l5594 2EF0                           l5586 2E98  
                         l5578 2E56                           l6482 4278                           l6490 4756  
                         l6626 4234                           l5666 3EE0                           l5658 3EB0  
                         l6634 4626                           l6642 459C                           l5690 3E62  
                         l5682 3E32                           l5674 3E22                           l6618 4496  
                         l6650 4488                           l6394 21A2                           l6386 2170  
                         l6378 2138                           l6298 1F4E                           l6474 3632  
                         l6466 35BC                           l6458 3560                           l5930 1B6A  
                         l5922 1B34                           l5906 1AF0                           l5850 1976  
                         l5842 192E                           l5834 18C4                           l5826 18A4  
                         l5770 176C                           l5762 175C                           l5746 16FE  
                         l5754 1728                           l5738 16D8                           l6570 1300  
                         l6562 1232                           l6554 1162                           l6546 1094  
                         l6538 0FD4                           l6810 3758                           l6802 3740  
                         l6730 36FE                           l6722 36BC                           l6714 3660  
                         l6706 3092                           l7194 250C                           l7186 24CC  
                         l7178 247E                           l7098 231E                           l5596 2F0A  
                         l5588 2EB4                           l6484 4298                           l6900 2A90  
                         l6492 475C                           l5668 3EE4                           l6636 4632  
                         l6628 45F4                           l6644 45B4                           l5692 3E66  
                         l5684 3E42                           l5676 3E2A                           l6652 452C  
                         l6660 44D4                           l6396 21B0                           l6388 217E  
                         l6468 35CE                           l5940 1B96                           l5932 1B7A  
                         l5924 1B44                           l5916 1B18                           l5908 1AF6  
                         l5860 19B2                           l5852 1986                           l5844 1930  
                         l5836 18CE                           l5828 18B0                           l5780 1780  
                         l5772 1770                           l5764 1760                           l5756 1738  
                         l5748 170E                           l6580 143E                           l6572 1334  
                         l6564 1264                           l6556 1194                           l6548 10C8  
                         l6820 37A4                           l6812 3786                           l6804 3752  
                         l6740 4014                           l6732 370A                           l6724 36DE  
                         l6716 366C                           l6708 30AA                           l7196 252C  
                         l7188 24D8                           l5598 2F1A                           l6478 4260  
                         l6494 475E                           l5694 3EFC                           l6638 464A  
                         l5686 3E4A                           l6654 4538                           l6662 44EC  
                         l6646 4464                           l6910 2672                           l6902 2624  
                         l6398 21DE                           l5950 1BEC                           l5942 1BA6  
                         l5934 1B80                           l5926 1B54                           l5918 1B24  
                         l5870 19DE                           l5862 19B4                           l5846 1940  
                         l5838 18D4                           l5790 1794                           l5782 1784  
                         l5774 1774                           l5766 1764                           l5758 174A  
                         l6590 15F6                           l6582 1470                           l6574 139A  
                         l6566 1296                           l6558 11CC                           l6830 37EE  
                         l6822 37BA                           l6814 3788                           l6806 3754  
                         l6750 3342                           l6742 401E                           l6734 3FE6  
                         l6718 368E                           l6726 36E6                           l6670 2F5E  
                         l7198 2548                           l6840 288E                           l6496 4760  
                         l6488 474C                           l5696 3F14                           l5688 3E52  
                         l6656 4550                           l6648 4470                           l6920 26B2  
                         l6912 2672                           l6904 263A                           l5960 1C26  
                         l5952 1BFC                           l5944 1BB6                           l5936 1B86  
                         l5928 1B64                           l5880 1A16                           l5864 19C2  
                         l5856 199A                           l5872 19E0                           l5848 1950  
                         l5784 1788                           l5776 1778                           l5768 1768  
                         l5792 1798                           l6592 1606                           l6584 1500  
                         l6576 13B0                           l6568 12CE                           l6832 3802  
                         l6824 37BC                           l6816 378A                           l6808 3756  
                         l6760 3378                           l6752 3346                           l6744 3320  
                         l6736 3FF6                           l6664 4432                           l6728 36F2  
                         l6680 2FB4                           l6672 2F6E                           l6850 28EA  
                         l6842 28A6                           l6498 4762                           l6658 44C8  
                         l6930 26F8                           l6922 26C8                           l6914 267A  
                         l6906 2650                           l5970 1C78                           l5962 1C3C  
                         l5946 1BC6                           l5938 1B94                           l5890 1A94  
                         l5866 19CA                           l5858 19A4                           l5874 19EE  
                         l5794 179C                           l5786 178C                           l5778 177C  
                         l6586 1532                           l6578 13E2                           l6826 37BE  
                         l6818 378C                           l6770 33BA                           l6762 338E  
                         l6754 3354                           l6746 3324                           l6738 4004  
                         l6666 443E                           l6690 3006                           l6682 2FC0  
                         l6674 2F7A                           l6596 43CA                           l6860 294A  
                         l6852 2902                           l6844 28BE                           l6836 2870  
                         l6940 2734                           l6932 2704                           l6916 2690  
                         l6908 265C                           l5980 1CBE                           l5972 1C86  
                         l5964 1C48                           l5956 1C10                           l5948 1BCC  
                         l5884 1A40                           l5892 1A96                           l5876 19F2  
                         l5868 19CE                           l5796 17C6                           l5788 1790  
                         l6588 15C2                           l6828 37D8                           l6772 33D8  
                         l6764 3396                           l6780 33FA                           l6756 3364  
                         l6748 3332                           l6668 4456                           l6692 301E  
                         l6684 2FD8                           l6676 2F92                           l6598 43D2  
                         l6870 29AA                           l6862 2962                           l6854 291A  
                         l6846 28D0                           l6838 2876                           l6790 439A  
                         l6942 274A                           l6950 2770                           l6934 271A  
                         l6918 26A6                           l6926 26CC                           l5990 1D2C  
                         l5982 1CD8                           l5974 1C92                           l5966 1C60  
                         l5958 1C1C                           l5894 1AA6                           l5886 1A4C  
                         l5878 1A00                           l5798 17E2                           l6782 340A  
                         l6774 33E8                           l6766 33A2                           l6758 3368  
                         l6694 302E                           l6686 2FE8                           l6678 2FA2  
                         l6880 29F8                           l6872 29C6                           l6864 297A  
                         l6856 2930                           l6848 28D2                           l6792 43A4  
                         l6952 2786                           l6944 2756                           l6928 26E2  
                         l5992 1D56                           l5984 1CE8                           l5976 1CA2  
                         l5968 1C6C                           l5896 1AB6                           l5888 1A5A  
                         l6784 341A                           l6776 33EA                           l6768 33B0  
                         l6696 3040                           l6688 2FFA                           l6890 2A5C  
                         l6882 29FA                           l6874 29DE                           l6866 2990  
                         l6858 2932                           l6794 43B4                           l6970 2810  
                         l6954 279C                           l6962 27C2                           l6946 276C  
                         l6938 271E                           l5994 1D8C                           l5986 1D04  
                         l5978 1CAE                           l5898 1AD6                           l6778 33F4  
                         l6698 304C                           l6892 2A5E                           l6884 2A12  
                         l6876 29F4                           l6868 2992                           l6796 43BE  
                         l6788 4396                           l6980 284C                           l6964 27D8  
                         l6956 27A8                           l5996 1D9A                           l5988 1D10  
                         l6990 4820                           l6894 2A60                           l6886 2A2E  
                         l6878 29F6                           l6982 2862                           l6966 27EE  
                         l6974 2814                           l6958 27BE                           l5998 1DB8  
                         l6798 3722                           l6992 482A                           l6896 2A62  
                         l6888 2A46                           l6976 282A                           l6968 27FA  
                         l6994 4832                           l6898 2A7A                           l6978 2840  
                         l6986 2866                           l6996 4834                           l6998 4836  
                         STR_1 0E8A                           STR_2 0EC3                           STR_3 0E01  
                         STR_4 0EC3                           STR_5 0E3B                           STR_6 0EC3  
                         STR_7 0E56                           STR_8 0EC3                           STR_9 0E1E  
                 _BAUD4CONbits 0EE9                           u5000 2E2C                           u5001 2E28  
                         u5010 2ECE                           _T2PR 0FBC                           u5011 2ECA  
                         u5100 479C                           u5020 2EE0                           u5101 4798  
                         u5021 2EDC                           u5030 2EF0                           u5110 3D8C  
                         u5031 2EEC                           u5111 3D88                           u5040 2F0A  
                         u5120 3DAA                           u5200 1694                           u6000 38D4  
                         u5041 2F06                           u5121 3DA6                           u5201 1690  
                         u6001 38D0                           u6010 484C                           u5050 2F1A  
                         u5130 3DE8                           u5210 16D6                           u6011 4848  
                         u5051 2F16                           u5131 3DE4                           u5211 16D2  
                         u5060 2F2A                           u5140 3DFE                           u6100 2064  
                         u5300 1808                           u5220 16EC                           u6020 4394  
                         u5061 2F26                           u5141 3DFA                           u6101 2060  
                         u5301 1804                           u5221 16E8                           u6021 4390  
                         u5070 3A78                           u5150 3EFA                           u6110 20DA  
                         u6030 1F5C                           u5310 1826                           u5230 16FE  
                         u5071 3A74                           u5151 3EF6                           u6111 20D6  
                         u6031 1F58                           u5311 1822                           u5231 16FA  
                         u5080 3AEE                           u5160 3E7C                           u6200 21F4  
                         u6120 20FC                           u6040 1F6E                           u5400 1976  
                         u5320 1846                           u5240 170E                           u5081 3AEA  
                         u5161 3E78                           u6201 21F0                           u6121 20F8  
                         u6041 1F6A                           u5401 1972                           u5321 1842  
                         u5241 170A                           u5090 4786                           u5170 3F70  
                         u6210 2208                           u6130 2126                           u6050 1F7E  
                         u5410 1986                           u5330 1854                           u5250 174A  
                         u5091 4782                           u5171 3F6C                           u6211 2204  
                         u6131 2122                           u6051 1F7A                           u5411 1982  
                         u5331 1850                           u5251 1746                           u4700 3BB2  
                         u6220 2222                           u6140 214A                           u6060 1FC2  
                         u6300 359E                           u5500 1A5A                           u5420 19B2  
                         u5340 1864                           u5260 1758                           u5180 1672  
                         u4701 3BAE                           u6221 221E                           u6141 2146  
                         u6061 1FBE                           u6301 359A                           u5501 1A56  
                         u5421 19AE                           u5341 1860                           u5261 1754  
                         u5181 166E                           u4710 3BC2                           u6230 226A  
                         u6150 2160                           u6070 1FD4                           u6310 35BC  
                         u5510 1A94                           u5430 19C2                           u5350 1896  
                         u5270 17C6                           u5190 1684                           u4711 3BBE  
                         u6231 2266                           u6151 215C                           u6071 1FD0  
                         u6311 35B8                           u5511 1A90                           u5431 19BE  
                         u5351 1892                           u5271 17C2                           u5191 1680  
                         u7007 2F84                           u4800 3988                           u4720 3BE8  
                         u6240 229A                           u6160 217E                           u6080 1FE4  
                         u6320 35DC                           u5600 1B94                           u5520 1AA6  
                         u5440 19DE                           u5360 18A4                           u5280 17DE  
                         u6400 1300                           u4801 3984                           u4721 3BE4  
                         u6241 2296                           u6161 217A                           u6081 1FE0  
                         u6321 35D8                           u5601 1B90                           u5521 1AA2  
                         u5441 19DA                           u5361 18A0                           u5281 17D8  
                         u6401 12FC                           u7017 2FCA                           u4810 39AC  
                         u4730 3C1A                           u6250 22C8                           u6170 219E  
                         u6090 2024                           u6330 362C                           u5610 1BA6  
                         u5530 1AB6                           u5450 19EE                           u5370 18C2  
                         u5290 17E0                           u6410 139A                           u4811 39A8  
                         u4731 3C16                           u6251 22C4                           u6171 219A  
                         u6091 2020                           u6331 3628                           u5611 1BA2  
                         u5531 1AB2                           u5451 19EA                           u5371 18BE  
                         u6411 1396                           u7107 3762                           u7027 3010  
                         u4820 39C6                           u4740 4322                           u4900 3C5C  
                         u6340 4298                           u6180 21B0                           u6260 3B26  
                         u5700 1E46                           u5620 1BB6                           u5540 1AD6  
                         u5460 1A00                           u5380 18FA                           u6420 13E2  
                         u6500 2FFA                           u4821 39C2                           u4741 431E  
                         u4901 3C58                           u6341 4294                           u6181 21AC  
                         u6261 3B22                           u5701 1E42                           u5621 1BB2  
                         u5541 1AD2                           u5461 19FC                           u5381 18F6  
                         u6421 13DE                           u7117 3796                           u7037 3056  
                         u6501 2FF6                           u4750 38E8                           u4830 39E0  
                         u4910 3C7A                           u6190 21DE                           u6270 3B64  
                         u5710 1E5A                           u5630 1BEC                           u5550 1AE8  
                         u5470 1A16                           u5390 1940                           u6430 1470  
                         u6350 1162                           u6510 3040                           u4751 38E4  
                         u4831 39DC                           u4911 3C76                           u7207 3E58  
                         u6191 21DA                           u6271 3B60                           u5711 1E56  
                         u5631 1BE8                           u5551 1AE4                           u5471 1A12  
                         u5391 193C                           u6431 146C                           u6351 115E  
                         u7127 37CA                           u7047 309C                           u6511 303C  
                         u4760 3902                           u4840 39FE                           u4920 3CC0  
                         u6280 3B98                           u5720 1E74                           u5640 1BFC  
                         u5560 1B04                           u5480 1A2C                           u5800 34E0  
                         u6440 1532                           u6360 1194                           u6600 3354  
                         u6520 3086                           u4761 38FE                           u4841 39FA  
                         u4921 3CBC                           u7217 45A6                           u7137 447A  
                         u6281 3B94                           u5721 1E70                           u5641 1BF8  
                         u5561 1B00                           u5481 1A28                           u5801 34DC  
                         u6441 152E                           u6361 1190                           u6601 3350  
                         u7057 3714                           u6521 3082                           u4770 3928  
                         u4850 3A14                           u4930 3CD0                           u6290 3560  
                         u5730 1EBC                           u5650 1D76                           u5570 1B32  
                         u5490 1A40                           u5810 3500                           u6450 1606  
                         u6370 11FE                           u6610 338E                           u6530 3660  
                         u4771 3924                           u4851 3A10                           u4931 3CCC  
                         u7307 3F46                           u7227 45D8                           u7147 44AC  
                         u6291 355C                           u5731 1EB8                           u5571 1B2E  
                         u5491 1A3C                           u5811 34FC                           u6451 1602  
                         u6371 11FA                           u6611 338A                           u7067 38AA  
                         u6531 365C                           u6460 46BA                           u4780 3946  
                         u4860 3A38                           u4940 440C                           u6700 2A90  
                         u5740 1EEA                           u5660 1DD0                           u5580 1B44  
                         u5820 3510                           u5900 2C02                           u6380 1264  
                         u6620 33B0                           u6540 368E                           u6461 46B6  
                         u4781 3942                           u4861 3A34                           u4941 4408  
                         u6701 2A8C                           u7317 43AA                           u7237 460A  
                         u7157 46D2                           u5741 1EE6                           u5661 1DCC  
                         u5581 1B40                           u5821 350C                           u5901 2BFE  
                         u6381 1260                           u6621 33AC                           u7077 4370  
                         u6541 368A                           u4790 3962                           u6470 4234  
                         u4870 3F8C                           u4950 30D6                           u6710 263A  
                         u5750 1F24                           u5670 1DF0                           u5590 1B54  
                         u5910 2C3C                           u5830 2ABC                           u6390 1296  
                         u6630 33D8                           u6550 36B0                           u4791 395E  
                         u7327 28B0                           u6471 4230                           u4871 3F88  
                         u4951 30D2                           u7247 4702                           u7167 44DE  
                         u6711 2636                           u5751 1F20                           u5671 1DEC  
                         u5655 1D6C                           u5591 1B50                           u5911 2C38  
                         u5831 2AB8                           u6391 1292                           u6631 33D4  
                         u7087 4448                           u6551 36AC                           u4880 3FAA  
                         u4960 3192                           u6800 279C                           u6720 2650  
                         u5680 1E02                           u5760 3442                           u5920 2C4A  
                         u5840 2ACA                           u6640 340A                           u6560 36DE  
                         u6480 2F6E                           u7337 290C                           u4881 3FA6  
                         u4961 318E                           u7257 463C                           u7177 4510  
                         u6801 2798                           u6721 264C                           u5681 1DFE  
                         u5761 343E                           u5921 2C46                           u5841 2AC6  
                         u7097 3732                           u6641 3406                           u6561 36DA  
                         u6481 2F6A                           u4970 2DFA                           u5930 2C84  
                         u6650 28A4                           u4890 3FC6                           u6810 27D8  
                         u6730 2690                           u5690 1E30                           u5770 3476  
                         u5850 2B26                           u6570 4004                           u6490 2FB4  
                         u4971 2DF4                           u5931 2C80                           u7347 296C  
                         u6651 28A0                           u4891 3FC2                           u7267 466E  
                         u7187 4542                           u6811 27D4                           u6731 268C  
                         u5691 1E2C                           u5851 2B22                           u6571 4000  
                         u6491 2FB0                           u4980 2DFC                           u5940 2D04  
                         u6660 2900                           u6820 27EE                           u6740 26A6  
                         u5780 34A4                           u5860 2B7C                           u6580 403E  
                         u6900 25A4                           u5941 2D00                           u7357 29D0  
                         u6661 28FC                           u7277 3ED6                           u7197 4574  
                         u6821 27EA                           u6741 26A2                           u5781 34A0  
                         u5861 2B78                           u6581 403A                           u6901 25A0  
                         u4990 2E16                           u5950 2D28                           u6670 2960  
                         u6830 282A                           u6750 26E2                           u5790 34B8  
                         u5870 2BC6                           u6590 3332                           u6910 25BA  
                         u4991 2E12                           u5951 2D24                           u7367 2A38  
                         u6671 295C                           u7287 4732                           u6831 2826  
                         u6751 26DE                           u5791 34B4                           u5775 346C  
                         u5871 2BC2                           u6591 332E                           u6911 25B6  
                         u5960 2D5C                           u6680 29C0                           u6840 2840  
                         u6760 26F8                           u5880 2BE4                           u6920 25D0  
                         u5961 2D58                           u7377 2A9A                           u6681 29BC  
                         u7297 3DC8                           u6841 283C                           u6761 26F4  
                         u5881 2BE0                           u6921 25CC                           u5970 2D7C  
                         u6690 2A28                           u6770 2734                           u5890 2BF4  
                         u6850 3234                           u6930 25DE                           u7387 469E  
                         u5971 2D78                           u6691 2A24                           u6771 2730  
                         u5891 2BF0                           u6851 3230                           u6931 25DA  
                         u5980 42CC                           u6780 274A                           u6860 32CC  
                         u5981 42C4                           u6781 2746                           u6861 32C8  
                         u6790 2786                           u6870 330E                           u6791 2782  
                         u6871 330A                           u6880 2470                           u6881 246C  
                         u6890 255E                           u6891 255A                           u6957 236C  
                         u5998 42CE                           u6967 249C                           u6977 24C0  
                         u6987 24E2                           u6997 2574                           abs@a 0008  
                         _dbuf 0182                           _main 22DC                           _dtoa 2DE6  
         convert_rgb2hue@cCurr 0034                           _prec 00CC                           _time 0200  
                         pad@i 0016                           pad@p 0013                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 005A                           _stop 3D72  
          fullSpeedAhead@power 0036                           prodh 0FF4                           prodl 0FF3  
                         start 003A               __end_of_ADC_init 483A                ___fldiv@new_exp 002B  
       __end_of_color_read_Red 40A0                   ___param_bank 0000                 reading_hue@hue 003B  
                        ??_abs 000A                          ??_pad 0015                  ___fltol@sign1 0031  
              __end_of___aldiv 342C                __end_of___fladd 1B18                          ?_main 0001  
                        ?_dtoa 0018                          _ADPCH 0F5F                __end_of___fldiv 22DC  
              __end_of___awdiv 399A                          STR_10 0EC3                          STR_11 0E71  
                        STR_12 0EC3                          STR_13 0EA2                          STR_14 0EB7  
              __end_of___awmod 3A4A                __end_of___flmul 1F42                __end_of___flsub 421C  
              __end_of___fltol 3532                          ?_stop 0014                ___awdiv@divisor 0004  
              __end_of___lwdiv 3FE6                          i1l654 0032                ___awdiv@counter 0006  
            ??_convert_rgb2hue 0035                   vfpfcnvrt@fmt 0024                          _TMR0H 0FD4  
                        _TMR0L 0FD3            ___lmul@multiplicand 0006                __end_of_left135 45F4  
      __end_of_sendCharSerial4 4852     __end_of_I2C_2_Master_Start 4872     __end_of_I2C_2_Master_Write 485E  
                        _flags 00CE            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 3BA2                          _fputs 42E4                          pad@fp 0010  
                        _width 00CA                          _putch 487C                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 46EC  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 0037  
              __end_of_moveRed 44C8                          tablat 0FF5                __end_of_turn180 468A  
                        ttemp5 005B                          ttemp6 005E                          ttemp7 0062  
                        status 0FD8                          wtemp8 005B                __end_of_sprintf 43FE  
        convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 4190          _I2C_2_Master_RepStart 4872  
              ?_color_read_Red 0006                __initialization 4190                   __end_of_main 2624  
                 __end_of_dtoa 2F5E                   __end_of_stop 3E00          __end_of_moveLightBlue 45C2  
              _get16bitTMR0val 4324                         ??_main 004D                         ??_dtoa 001B  
                       ??_stop 0016                  __activetblptr 0003     __end_of_read_prec_or_width 3AF8  
              _reverseStraight 3636                   ?_setMotorPWM 000F                         ?_fputc 0002  
                       ?_fputs 000A                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0002               __end_of_backHalf 474C                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         i1l3440 001E  
                       i1l3442 002E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 002C       __end_of_color_click_init 43CA  
                       _RX4PPS 0E15                         _TX4REG 0EE4               __end_of___xxtofl 2C5E  
  convert_rgb2hue@greencurrent 0068               __end_of_decision 2870                         _LowISR 0018  
                main@path_step 0051                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 3532                         ___fleq 3AF8                         ___lmul 3FE6  
                    ??___aldiv 0016                      ??___fladd 000A                         ___wmul 479E  
                    ??___fldiv 0022               backOneAndHalf@mL 0019                      ??___awdiv 0006  
             backOneAndHalf@mR 001A                      ??___awmod 0006                      ??___flmul 0018  
                       _action 013C                      ??___flsub 001A                      ??___fltol 002D  
                    ??___lwdiv 000C                         _left90 46EC           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 41A8                         clear_1 41B4  
                       clear_2 41C0               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00EE                         _motorR 00E5                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 4590                         dtoa@fp 0018  
             __end_of_moveBlue 4658               __end_of_movePink 44FA                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0045  
                    ??_moveRed 001F                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                         putch@c 0001               __end_of_vfprintf 42A2  
                    ??_turn180 001B                         stop@mL 0014                         stop@mR 0015  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0038               __end_of_turnLeft 3EFC  
     get16bitTMR0val@path_step 0007                     ___flge@ff1 0002                     ___flge@ff2 0006  
                 ___xxtofl@arg 000C                   ___xxtofl@exp 000B                   ___xxtofl@val 0002  
                   ___fleq@ff1 0002                     ___fleq@ff2 0006                fullSpeedBack@mL 0014  
              fullSpeedBack@mR 0015                     __accesstop 0060        __end_of__initialization 41CC  
     __end_of_color_read_Clear 4140       __end_of_color_read_Green 40F0         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 44FA                  ___rparam_used 0001                     ___fltol@f1 0029  
             ?_color_read_Blue 0006                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 435E  
                _fullSpeedBack 3EFC                   __pidataBANK0 487E                  __end_of_fputc 3C4C  
                __end_of_fputs 4324                  __end_of_putch 487E        __end_of_reverseStraight 3722  
             reading_hue@cCurr 0037                     ??_ADC_init 0002                 main@clear_norm 0055  
                   backHalf@mL 0019                     backHalf@mR 001A                        ??_fputc 0005  
                      ??_fputs 000D                        ??_putch 0002                     __pbssBANK0 00AC  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 452C  
                      ?_LowISR 0001              _color_writetoaddr 47C4                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0014                _convert_rgb2hue 0EC6                        ?___flge 0002  
                      ?___fleq 0002             ?_color_writetoaddr 0004                        ?___lmul 0002  
                _customDelayMs 435E                        ?___wmul 0002                        ?_left90 0019  
        reverseTurn@actionStep 001F                 ___lmul@product 000A                      ?_backHalf 0019  
          ??_color_writetoaddr 0005                      ?___xxtofl 0002            _convert_rgb2hue$433 0080  
          _convert_rgb2hue$434 0084            _convert_rgb2hue$435 0088            _convert_rgb2hue$436 008C  
                    ?_decision 0021                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                    moveGreen@mL 001D  
                  moveGreen@mR 001E                ?_backOneAndHalf 0019         color_writetoaddr@value 0004  
             ??_color_read_Red 0008      __end_of_color_writetoaddr 47E4                      _ADREFbits 0F58  
                    ?_right135 0019             _I2C_2_Master_Start 4868                     _initUSART4 4802  
           _I2C_2_Master_Write 4852                      ?_moveBlue 001D                        __Hparam 0000  
                    ?_movePink 001D                        __Lparam 0000              color_read_Red@tmp 000B  
                  moveWhite@mL 001D                    moveWhite@mR 001E      customDelayMs@milliseconds 0002  
               ?_customDelayMs 0002        sendStringSerial4@string 0003               ?_get16bitTMR0val 0007  
                      ___aldiv 3320                        ___fladd 1658                        ___fldiv 1F42  
                      ___awdiv 38D6                        ___awmod 399A                        ___flmul 1B18  
                      ___flsub 41D6                        ___fltol 342C            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3F72            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 4190                     ??_backHalf 001B  
            __end_of_logAction 4260                        __ramtop 0E00               ?_reverseStraight 0038  
                   _send2USART 47E4                      ?_turnLeft 0014                        _left135 45C2  
                      __ptext0 22DC                        __ptext1 47E4                        __ptext2 3210  
                      __ptext3 2F5E                        __ptext4 3636                        __ptext5 380C  
                      __ptext6 435E                        __ptext7 4432                        __ptext8 3FE6  
                      __ptext9 3320                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 0025  
       reverseStraight@delayMs 0040               ___aldiv@dividend 000E                        _right90 46BC  
                    _T2HLTbits 0FBE                        _moveRed 4496                  _RxBufWriteCnt 0059  
                      _turn180 4658                        _sprintf 43CA                        main@hue 004F  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 41CC  
            __end_of_moveGreen 4626         reverseStraight@time_ms 003A              __end_of_moveWhite 4464  
                      fputc@fp 0004        __end_of_convert_rgb2hue 1658                        fputs@fp 000C  
            ?_color_click_init 0001             _read_prec_or_width 3A4A                     _moveOrange 452C  
                   ??_right135 001B                     _moveYellow 4464                ??_fullSpeedBack 0016  
                   ??_moveBlue 001F             ??_color_click_init 0006        convert_rgb2hue@clearmax 007C  
                   ??_movePink 001F               _colorCalibration 00DB            returnHome@path_step 0044  
            __end_of_vfpfcnvrt 2DE6               ___aldiv@quotient 0018                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00D1                     _returnHome 3210  
              _initDCmotorsPWM 3CE2                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 3E7E                    ___fladd@grs 0011  
                ___xxtofl@sign 000A                    returnHome@i 004B                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88               convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A  
             convert_rgb2hue@g 00A4                    ___fldiv@grs 002D               convert_rgb2hue@r 00A0  
                  ___fldiv@rem 0026               fullSpeedAhead@mL 0033               fullSpeedAhead@mR 0034  
     color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 001E  
                  _CCP1CONbits 0FAB            _calibration_routine 2870              ?_color_read_Clear 0006  
                 _EUSART4RXbuf 00AC                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 3636  
               __end_of___fleq 3BA2                 _fullSpeedAhead 380C                 __end_of___lmul 4050  
                  vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023  
               __end_of___wmul 47C4                 __end_of_left90 471C                    ?_send2USART 0045  
         ?_calibration_routine 0045            color_read_Clear@tmp 000B            start_initialization 4190  
 calibration_routine@cal_state 0060                    __end_of_abs 4432                    __end_of_pad 3CE2  
                _TxBufWriteCnt 0058                main@diff_clears 0053               ?_convert_rgb2hue 0033  
                  ?_moveOrange 001D                    ?_moveYellow 001D            color_read_Green@tmp 000B  
                     ??_LowISR 0001        __end_of_initDCmotorsPWM 3D72                    vfprintf@fmt 002F  
       __end_of_fullSpeedAhead 38D6                       ??___flge 000A                       ??___fleq 000A  
                     ??___lmul 000A                       ??___wmul 0006                       ??_left90 001B  
                  __pdataBANK0 00F7                    ?_returnHome 0042          ??_calibration_routine 0046  
                _moveLightBlue 4590                      ___fladd@a 0006                      ___fladd@b 0002  
                    ___fldiv@a 001E                      ___fldiv@b 001A                      ___flmul@a 0014  
                    ___flmul@b 0010                    __pbssCOMRAM 0057                      ___flsub@a 0016  
                    ___flsub@b 0012                  __pcstackBANK0 0060               ??_backOneAndHalf 001B  
            reverseStraight@mL 0038              reverseStraight@mR 0039          returnHome@action_turn 004A  
                ??_reading_hue 0039                     right135@mL 0019                     right135@mR 001A  
             ___lwdiv@dividend 0008                      _dtoa$3088 001B                ?_fullSpeedAhead 0033  
                     ?___aldiv 000E                       ?___fladd 0002                       ?___fldiv 001A  
                     ?___awdiv 0002                       ?___awmod 0002                       ?___flmul 0010  
                     ?___flsub 0012                       ?___fltol 0029                       ?___lwdiv 0008  
                   moveBlue@mL 001D                     moveBlue@mR 001E                 ?_moveLightBlue 001D  
                  __pintcodelo 0018                       ?_left135 0019                   _readingIndex 00CF  
         I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005                    __smallconst 0E00  
                   movePink@mL 001D                     movePink@mR 001E              _I2C_2_Master_Idle 4776  
                    _logAction 421C              _I2C_2_Master_Init 474C              _I2C_2_Master_Read 42A2  
                     ?_right90 0019              _I2C_2_Master_Stop 485E                       ?_moveRed 001D  
                 _RxBufReadCnt 00D0                       _ADC_init 4820             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
                     ?_turn180 0019             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D  
     initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032                ___aldiv@divisor 0012  
            _sendStringSerial4 468A            ??_I2C_2_Master_Idle 0002                ___aldiv@counter 0016  
          ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003                 ___wmul@product 0006  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0003                      _moveGreen 45F4  
                     _PIE4bits 0E2D            __end_of_reading_hue 380C                       i1u236_20 002E  
                     i1u236_21 002A                      _moveWhite 4432                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2C5E  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 479E      __end_of_I2C_2_Master_Init 4776  
    __end_of_I2C_2_Master_Read 42E4              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 4868  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 016E  
                   ?_logAction 0002              ??_color_read_Blue 0008                   _TxBufReadCnt 0057  
                    _turnRight 3E00              ___lmul@multiplier 0002      __end_of_sendStringSerial4 46BC  
                 moveOrange@mL 001D                   moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 487C  
           color_read_Blue@tmp 000B            __end_of_setMotorPWM 3210                   ??_initUSART4 0002  
                   ?_moveGreen 001D                     ?_moveWhite 001D                       __Hrparam 0000  
                   vfprintf@ap 0030                       __Lrparam 0000                     vfprintf@fp 002E  
        __end_of_fullSpeedBack 3F72                ??_moveLightBlue 001F                   moveYellow@mL 001D  
                 moveYellow@mR 001E                     ?_vfpfcnvrt 0023                       _backHalf 471C  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00F7                     sprintf@fmt 0033                       ___xxtofl 2AAA  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 2624  
          __end_of_reverseTurn 30BC                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 4820                ___lwdiv@counter 000C  
                   ?_turnRight 0014                       __ptext10 3722                       __ptext11 0EC6  
                     __ptext20 4802                       __ptext12 2AAA                       __ptext21 3CE2  
                     __ptext13 342C                       __ptext30 455E                       __ptext22 4324  
                     __ptext14 41D6                       __ptext31 3E00                       __ptext23 2624  
                     __ptext15 1658                       __ptext40 3D72                       __ptext32 4590  
                     __ptext24 4464                       __ptext16 1B18                       __ptext41 3EFC  
                     __ptext33 45C2                       __ptext25 4496                       __ptext17 3532  
                     __ptext50 4260                       __ptext42 30BC                       __ptext34 45F4  
                     __ptext26 46BC                       __ptext18 3AF8                       __ptext51 2C5E  
                     __ptext43 3F72                       __ptext35 46EC                       __ptext27 44C8  
                     __ptext19 1F42                       __ptext60 399A                       __ptext52 3A4A  
                     __ptext44 421C                       __ptext36 4626                       __ptext28 44FA  
                     __ptext61 38D6                       __ptext53 479E                       __ptext45 4396  
                     __ptext37 4658                       __ptext29 452C                       __ptext70 4868  
                     __ptext62 468A                       __ptext54 2DE6                       __ptext46 47C4  
                     __ptext38 3E7E                       __ptext71 4872                       __ptext63 483A  
                     __ptext55 3C4C                       __ptext47 474C                       __ptext39 471C  
                     __ptext72 42A2                       __ptext64 4050                       __ptext56 42E4  
                     __ptext48 2870                       __ptext73 4776                       __ptext65 40A0  
                     __ptext57 3BA2                       __ptext49 43CA                       __ptext74 4820  
                     __ptext66 40F0                       __ptext58 487C                       __ptext67 4140  
                     __ptext59 43FE                       __ptext68 4852                       __ptext69 485E  
                  decision@hue 0021                      moveRed@mL 001D                      moveRed@mR 001E  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    _reading_hue 3722  
                reverseTurn@mL 001D                  reverseTurn@mR 001E                   ??_moveOrange 001F  
                   turnLeft@mL 0014                     turnLeft@mR 0015                   ??_moveYellow 001F  
           __end_of_send2USART 4802                       _right135 455E                       _moveBlue 4626  
                     _movePink 44C8                     turnRight@i 0017          __end_of_customDelayMs 4396  
                     isa$xinst 0000                       left90@mL 0019                       left90@mR 001A  
                   _RC4STAbits 0EE7              returnHome@time_ms 0046                       int$flags 005A  
                     _vfprintf 4260                   ??_returnHome 0046                       _turnLeft 3E7E  
                    turn180@mL 0019                      turn180@mR 001A                    ??_logAction 0006  
                   _INTCONbits 0FF2                 customDelayMs@i 0005             __end_of_moveOrange 455E  
           __end_of_moveYellow 4496                    _setMotorPWM 30BC              ??_get16bitTMR0val 0009  
                     intlevel1 0000                      sprintf@ap 0038              decision@path_step 0023  
            ??_reverseStraight 003E               ??_fullSpeedAhead 0035  get16bitTMR0val@combined_value 000D  
           __end_of_returnHome 3320                    ??_moveGreen 001F                      turnLeft@i 0017  
                  ??_moveWhite 001F    __end_of_calibration_routine 2AAA    convert_rgb2hue@clearcurrent 0078  
                send2USART@hue 0045                    ??_vfpfcnvrt 0026                    _reverseTurn 2F5E  
             _color_click_init 4396                       sprintf@f 0039                       sprintf@s 0032  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                   ___aldiv@sign 0017  
                  ??_turnRight 0016                  ___fladd@signs 000E                     _TX4STAbits 0EE8  
              _sendCharSerial4 483A                   ___fladd@aexp 000F                   ___fladd@bexp 0010  
                 returnHome@mL 0042                   returnHome@mR 0043  
