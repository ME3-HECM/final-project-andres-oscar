

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 11:17:42 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=3
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 21/07/2023 GMT
    61                           ; 
    62                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F67K40 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000000                     
    95                           	psect	idataBANK0
    96   011B34                     __pidataBANK0:
    97                           	callstack 0
    98                           
    99                           ;initializer for _dataFlag
   100   011B34  01                 	db	1
   101   000000                     _TX4REG	set	3812
   102   000000                     _RC4STAbits	set	3815
   103   000000                     _SP4BRGH	set	3814
   104   000000                     _TRISFbits	set	3974
   105   000000                     _LATFbits	set	3966
   106   000000                     _LATHbits	set	3968
   107   000000                     _TRISAbits	set	3969
   108   000000                     _TRISEbits	set	3973
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISDbits	set	3972
   111   000000                     _PORTFbits	set	3982
   112   000000                     _SSP2CON2bits	set	3802
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _SSP2ADD	set	3798
   118   000000                     _SSP2CON1bits	set	3801
   119   000000                     _LATAbits	set	3961
   120   000000                     _LATEbits	set	3965
   121   000000                     _LATGbits	set	3967
   122   000000                     _LATCbits	set	3963
   123   000000                     _LATDbits	set	3964
   124   000000                     _CCPR2H	set	4006
   125   000000                     _CCPR1H	set	4010
   126   000000                     _RC4REG	set	3811
   127   000000                     _SP4BRGL	set	3813
   128   000000                     _TX4STAbits	set	3816
   129   000000                     _BAUD4CONbits	set	3817
   130   000000                     _SSP2CON2	set	3802
   131   000000                     _CCPR4H	set	3873
   132   000000                     _CCPR3H	set	3877
   133   000000                     _SSP2STAT	set	3800
   134   000000                     _ANSELFbits	set	3764
   135   000000                     _SSP2BUF	set	3797
   136   000000                     _PIE4bits	set	3629
   137   000000                     _PIR4bits	set	3639
   138   000000                     _RC0PPS	set	3682
   139   000000                     _RC7PPS	set	3689
   140   000000                     _RD5PPS	set	3695
   141   000000                     _RE2PPS	set	3700
   142   000000                     _RD6PPS	set	3696
   143   000000                     _CCP1CONbits	set	4011
   144   000000                     _CCPTMRS0bits	set	4013
   145   000000                     _T2PR	set	4028
   146   000000                     _T2CONbits	set	4029
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _CCP3CONbits	set	3878
   149   000000                     _ADREFbits	set	3928
   150   000000                     _CCP4CONbits	set	3874
   151   000000                     _TRISHbits	set	3976
   152   000000                     _TRISCbits	set	3971
   153   000000                     _ADPCH	set	3935
   154   000000                     _ADRESH	set	3940
   155   000000                     _ADCON0bits	set	3936
   156   000000                     _RE4PPS	set	3702
   157   000000                     _RG6PPS	set	3720
   158   000000                     _T2CLKCONbits	set	4031
   159   000000                     _T2HLTbits	set	4030
   160                           
   161                           	psect	mediumconst
   162   00FECE                     __pmediumconst:
   163                           	callstack 0
   164   00FECE  00                 	db	0
   165   00FECF                     STR_14:
   166                           
   167                           ; BSR set to: 15
   168   00FECF  43                 	db	67	;'C'
   169   00FED0  61                 	db	97	;'a'
   170   00FED1  6C                 	db	108	;'l'
   171   00FED2  69                 	db	105	;'i'
   172   00FED3  62                 	db	98	;'b'
   173   00FED4  72                 	db	114	;'r'
   174   00FED5  61                 	db	97	;'a'
   175   00FED6  74                 	db	116	;'t'
   176   00FED7  69                 	db	105	;'i'
   177   00FED8  6F                 	db	111	;'o'
   178   00FED9  6E                 	db	110	;'n'
   179   00FEDA  20                 	db	32
   180   00FEDB  73                 	db	115	;'s'
   181   00FEDC  74                 	db	116	;'t'
   182   00FEDD  61                 	db	97	;'a'
   183   00FEDE  74                 	db	116	;'t'
   184   00FEDF  65                 	db	101	;'e'
   185   00FEE0  20                 	db	32
   186   00FEE1  3D                 	db	61	;'='
   187   00FEE2  20                 	db	32
   188   00FEE3  61                 	db	97	;'a'
   189   00FEE4  6D                 	db	109	;'m'
   190   00FEE5  62                 	db	98	;'b'
   191   00FEE6  69                 	db	105	;'i'
   192   00FEE7  65                 	db	101	;'e'
   193   00FEE8  6E                 	db	110	;'n'
   194   00FEE9  74                 	db	116	;'t'
   195   00FEEA  20                 	db	32
   196   00FEEB  6C                 	db	108	;'l'
   197   00FEEC  69                 	db	105	;'i'
   198   00FEED  67                 	db	103	;'g'
   199   00FEEE  68                 	db	104	;'h'
   200   00FEEF  74                 	db	116	;'t'
   201   00FEF0  00                 	db	0
   202   00FEF1                     STR_10:
   203                           
   204                           ; BSR set to: 15
   205   00FEF1  43                 	db	67	;'C'
   206   00FEF2  61                 	db	97	;'a'
   207   00FEF3  6C                 	db	108	;'l'
   208   00FEF4  69                 	db	105	;'i'
   209   00FEF5  62                 	db	98	;'b'
   210   00FEF6  72                 	db	114	;'r'
   211   00FEF7  61                 	db	97	;'a'
   212   00FEF8  74                 	db	116	;'t'
   213   00FEF9  69                 	db	105	;'i'
   214   00FEFA  6F                 	db	111	;'o'
   215   00FEFB  6E                 	db	110	;'n'
   216   00FEFC  20                 	db	32
   217   00FEFD  73                 	db	115	;'s'
   218   00FEFE  74                 	db	116	;'t'
   219   00FEFF  61                 	db	97	;'a'
   220   00FF00  74                 	db	116	;'t'
   221   00FF01  65                 	db	101	;'e'
   222   00FF02  20                 	db	32
   223   00FF03  3D                 	db	61	;'='
   224   00FF04  20                 	db	32
   225   00FF05  67                 	db	103	;'g'
   226   00FF06  72                 	db	114	;'r'
   227   00FF07  65                 	db	101	;'e'
   228   00FF08  65                 	db	101	;'e'
   229   00FF09  6E                 	db	110	;'n'
   230   00FF0A  20                 	db	32
   231   00FF0B  0A                 	db	10
   232   00FF0C  0D                 	db	13
   233   00FF0D  00                 	db	0
   234   00FF0E                     STR_12:
   235                           
   236                           ; BSR set to: 15
   237   00FF0E  43                 	db	67	;'C'
   238   00FF0F  61                 	db	97	;'a'
   239   00FF10  6C                 	db	108	;'l'
   240   00FF11  69                 	db	105	;'i'
   241   00FF12  62                 	db	98	;'b'
   242   00FF13  72                 	db	114	;'r'
   243   00FF14  61                 	db	97	;'a'
   244   00FF15  74                 	db	116	;'t'
   245   00FF16  69                 	db	105	;'i'
   246   00FF17  6F                 	db	111	;'o'
   247   00FF18  6E                 	db	110	;'n'
   248   00FF19  20                 	db	32
   249   00FF1A  73                 	db	115	;'s'
   250   00FF1B  74                 	db	116	;'t'
   251   00FF1C  61                 	db	97	;'a'
   252   00FF1D  74                 	db	116	;'t'
   253   00FF1E  65                 	db	101	;'e'
   254   00FF1F  3D                 	db	61	;'='
   255   00FF20  20                 	db	32
   256   00FF21  62                 	db	98	;'b'
   257   00FF22  6C                 	db	108	;'l'
   258   00FF23  75                 	db	117	;'u'
   259   00FF24  65                 	db	101	;'e'
   260   00FF25  20                 	db	32
   261   00FF26  0A                 	db	10
   262   00FF27  0D                 	db	13
   263   00FF28  00                 	db	0
   264   00FF29                     STR_16:
   265                           
   266                           ; BSR set to: 15
   267   00FF29  43                 	db	67	;'C'
   268   00FF2A  41                 	db	65	;'A'
   269   00FF2B  4C                 	db	76	;'L'
   270   00FF2C  49                 	db	73	;'I'
   271   00FF2D  42                 	db	66	;'B'
   272   00FF2E  52                 	db	82	;'R'
   273   00FF2F  41                 	db	65	;'A'
   274   00FF30  54                 	db	84	;'T'
   275   00FF31  49                 	db	73	;'I'
   276   00FF32  4F                 	db	79	;'O'
   277   00FF33  4E                 	db	78	;'N'
   278   00FF34  20                 	db	32
   279   00FF35  43                 	db	67	;'C'
   280   00FF36  4F                 	db	79	;'O'
   281   00FF37  4D                 	db	77	;'M'
   282   00FF38  50                 	db	80	;'P'
   283   00FF39  4C                 	db	76	;'L'
   284   00FF3A  45                 	db	69	;'E'
   285   00FF3B  54                 	db	84	;'T'
   286   00FF3C  45                 	db	69	;'E'
   287   00FF3D  44                 	db	68	;'D'
   288   00FF3E  20                 	db	32
   289   00FF3F  0A                 	db	10
   290   00FF40  0D                 	db	13
   291   00FF41  00                 	db	0
   292   00FF42                     STR_8:
   293                           
   294                           ; BSR set to: 15
   295   00FF42  43                 	db	67	;'C'
   296   00FF43  61                 	db	97	;'a'
   297   00FF44  6C                 	db	108	;'l'
   298   00FF45  69                 	db	105	;'i'
   299   00FF46  62                 	db	98	;'b'
   300   00FF47  72                 	db	114	;'r'
   301   00FF48  61                 	db	97	;'a'
   302   00FF49  74                 	db	116	;'t'
   303   00FF4A  69                 	db	105	;'i'
   304   00FF4B  6F                 	db	111	;'o'
   305   00FF4C  6E                 	db	110	;'n'
   306   00FF4D  20                 	db	32
   307   00FF4E  73                 	db	115	;'s'
   308   00FF4F  74                 	db	116	;'t'
   309   00FF50  61                 	db	97	;'a'
   310   00FF51  74                 	db	116	;'t'
   311   00FF52  65                 	db	101	;'e'
   312   00FF53  20                 	db	32
   313   00FF54  3D                 	db	61	;'='
   314   00FF55  20                 	db	32
   315   00FF56  72                 	db	114	;'r'
   316   00FF57  65                 	db	101	;'e'
   317   00FF58  64                 	db	100	;'d'
   318   00FF59  00                 	db	0
   319   00FF5A                     STR_18:
   320                           
   321                           ; BSR set to: 15
   322   00FF5A  56                 	db	86	;'V'
   323   00FF5B  6F                 	db	111	;'o'
   324   00FF5C  6C                 	db	108	;'l'
   325   00FF5D  74                 	db	116	;'t'
   326   00FF5E  61                 	db	97	;'a'
   327   00FF5F  67                 	db	103	;'g'
   328   00FF60  65                 	db	101	;'e'
   329   00FF61  20                 	db	32
   330   00FF62  3D                 	db	61	;'='
   331   00FF63  20                 	db	32
   332   00FF64  25                 	db	37
   333   00FF65  64                 	db	100	;'d'
   334   00FF66  2E                 	db	46
   335   00FF67  25                 	db	37
   336   00FF68  30                 	db	48	;'0'
   337   00FF69  32                 	db	50	;'2'
   338   00FF6A  64                 	db	100	;'d'
   339   00FF6B  2C                 	db	44
   340   00FF6C  20                 	db	32
   341   00FF6D  20                 	db	32
   342   00FF6E  00                 	db	0
   343   00FF6F                     STR_2:
   344                           
   345                           ; BSR set to: 15
   346   00FF6F  67                 	db	103	;'g'
   347   00FF70  72                 	db	114	;'r'
   348   00FF71  65                 	db	101	;'e'
   349   00FF72  65                 	db	101	;'e'
   350   00FF73  6E                 	db	110	;'n'
   351   00FF74  5F                 	db	95	;'_'
   352   00FF75  77                 	db	119	;'w'
   353   00FF76  65                 	db	101	;'e'
   354   00FF77  69                 	db	105	;'i'
   355   00FF78  67                 	db	103	;'g'
   356   00FF79  68                 	db	104	;'h'
   357   00FF7A  74                 	db	116	;'t'
   358   00FF7B  65                 	db	101	;'e'
   359   00FF7C  64                 	db	100	;'d'
   360   00FF7D  20                 	db	32
   361   00FF7E  3D                 	db	61	;'='
   362   00FF7F  25                 	db	37
   363   00FF80  30                 	db	48	;'0'
   364   00FF81  33                 	db	51	;'3'
   365   00FF82  64                 	db	100	;'d'
   366   00FF83  00                 	db	0
   367   00FF84                     STR_3:
   368                           
   369                           ; BSR set to: 15
   370   00FF84  62                 	db	98	;'b'
   371   00FF85  6C                 	db	108	;'l'
   372   00FF86  75                 	db	117	;'u'
   373   00FF87  65                 	db	101	;'e'
   374   00FF88  5F                 	db	95	;'_'
   375   00FF89  77                 	db	119	;'w'
   376   00FF8A  65                 	db	101	;'e'
   377   00FF8B  69                 	db	105	;'i'
   378   00FF8C  67                 	db	103	;'g'
   379   00FF8D  68                 	db	104	;'h'
   380   00FF8E  74                 	db	116	;'t'
   381   00FF8F  65                 	db	101	;'e'
   382   00FF90  64                 	db	100	;'d'
   383   00FF91  20                 	db	32
   384   00FF92  3D                 	db	61	;'='
   385   00FF93  25                 	db	37
   386   00FF94  30                 	db	48	;'0'
   387   00FF95  33                 	db	51	;'3'
   388   00FF96  64                 	db	100	;'d'
   389   00FF97  00                 	db	0
   390   00FF98                     STR_5:
   391                           
   392                           ; BSR set to: 15
   393   00FF98  47                 	db	71	;'G'
   394   00FF99  72                 	db	114	;'r'
   395   00FF9A  65                 	db	101	;'e'
   396   00FF9B  65                 	db	101	;'e'
   397   00FF9C  6E                 	db	110	;'n'
   398   00FF9D  5F                 	db	95	;'_'
   399   00FF9E  6C                 	db	108	;'l'
   400   00FF9F  69                 	db	105	;'i'
   401   00FFA0  67                 	db	103	;'g'
   402   00FFA1  68                 	db	104	;'h'
   403   00FFA2  74                 	db	116	;'t'
   404   00FFA3  3D                 	db	61	;'='
   405   00FFA4  25                 	db	37
   406   00FFA5  64                 	db	100	;'d'
   407   00FFA6  2C                 	db	44
   408   00FFA7  20                 	db	32
   409   00FFA8  0A                 	db	10
   410   00FFA9  0D                 	db	13
   411   00FFAA  00                 	db	0
   412   00FFAB                     STR_1:
   413                           
   414                           ; BSR set to: 15
   415   00FFAB  72                 	db	114	;'r'
   416   00FFAC  65                 	db	101	;'e'
   417   00FFAD  64                 	db	100	;'d'
   418   00FFAE  5F                 	db	95	;'_'
   419   00FFAF  77                 	db	119	;'w'
   420   00FFB0  65                 	db	101	;'e'
   421   00FFB1  69                 	db	105	;'i'
   422   00FFB2  67                 	db	103	;'g'
   423   00FFB3  68                 	db	104	;'h'
   424   00FFB4  74                 	db	116	;'t'
   425   00FFB5  65                 	db	101	;'e'
   426   00FFB6  64                 	db	100	;'d'
   427   00FFB7  20                 	db	32
   428   00FFB8  3D                 	db	61	;'='
   429   00FFB9  25                 	db	37
   430   00FFBA  30                 	db	48	;'0'
   431   00FFBB  33                 	db	51	;'3'
   432   00FFBC  64                 	db	100	;'d'
   433   00FFBD  00                 	db	0
   434   00FFBE                     STR_4:
   435                           
   436                           ; BSR set to: 15
   437   00FFBE  52                 	db	82	;'R'
   438   00FFBF  65                 	db	101	;'e'
   439   00FFC0  64                 	db	100	;'d'
   440   00FFC1  5F                 	db	95	;'_'
   441   00FFC2  6C                 	db	108	;'l'
   442   00FFC3  69                 	db	105	;'i'
   443   00FFC4  67                 	db	103	;'g'
   444   00FFC5  68                 	db	104	;'h'
   445   00FFC6  74                 	db	116	;'t'
   446   00FFC7  3D                 	db	61	;'='
   447   00FFC8  25                 	db	37
   448   00FFC9  64                 	db	100	;'d'
   449   00FFCA  2C                 	db	44
   450   00FFCB  20                 	db	32
   451   00FFCC  0A                 	db	10
   452   00FFCD  0D                 	db	13
   453   00FFCE  00                 	db	0
   454   00FFCF                     STR_7:
   455                           
   456                           ; BSR set to: 15
   457   00FFCF  41                 	db	65	;'A'
   458   00FFD0  6C                 	db	108	;'l'
   459   00FFD1  6C                 	db	108	;'l'
   460   00FFD2  5F                 	db	95	;'_'
   461   00FFD3  6C                 	db	108	;'l'
   462   00FFD4  69                 	db	105	;'i'
   463   00FFD5  67                 	db	103	;'g'
   464   00FFD6  68                 	db	104	;'h'
   465   00FFD7  74                 	db	116	;'t'
   466   00FFD8  73                 	db	115	;'s'
   467   00FFD9  3D                 	db	61	;'='
   468   00FFDA  25                 	db	37
   469   00FFDB  64                 	db	100	;'d'
   470   00FFDC  20                 	db	32
   471   00FFDD  0A                 	db	10
   472   00FFDE  0D                 	db	13
   473   00FFDF  00                 	db	0
   474   00FFE0                     STR_6:
   475                           
   476                           ; BSR set to: 15
   477   00FFE0  42                 	db	66	;'B'
   478   00FFE1  6C                 	db	108	;'l'
   479   00FFE2  75                 	db	117	;'u'
   480   00FFE3  65                 	db	101	;'e'
   481   00FFE4  5F                 	db	95	;'_'
   482   00FFE5  6C                 	db	108	;'l'
   483   00FFE6  69                 	db	105	;'i'
   484   00FFE7  67                 	db	103	;'g'
   485   00FFE8  68                 	db	104	;'h'
   486   00FFE9  74                 	db	116	;'t'
   487   00FFEA  3D                 	db	61	;'='
   488   00FFEB  25                 	db	37
   489   00FFEC  64                 	db	100	;'d'
   490   00FFED  20                 	db	32
   491   00FFEE  0A                 	db	10
   492   00FFEF  0D                 	db	13
   493   00FFF0  00                 	db	0
   494   00FFF1                     STR_19:
   495                           
   496                           ; BSR set to: 15
   497   00FFF1  68                 	db	104	;'h'
   498   00FFF2  75                 	db	117	;'u'
   499   00FFF3  65                 	db	101	;'e'
   500   00FFF4  3D                 	db	61	;'='
   501   00FFF5  25                 	db	37
   502   00FFF6  30                 	db	48	;'0'
   503   00FFF7  33                 	db	51	;'3'
   504   00FFF8  64                 	db	100	;'d'
   505   00FFF9  2C                 	db	44
   506   00FFFA  20                 	db	32
   507   00FFFB  20                 	db	32
   508   00FFFC  00                 	db	0
   509   00FFFD                     STR_9:
   510                           
   511                           ; BSR set to: 15
   512   00FFFD  2E                 	db	46
   513   00FFFE  00                 	db	0
   514   00FFFF  00                 	db	0	; dummy byte at the end
   515   000000                     
   516                           ; #config settings
   517                           
   518                           	psect	cinit
   519   0119EE                     __pcinit:
   520                           	callstack 0
   521   0119EE                     start_initialization:
   522                           	callstack 0
   523   0119EE                     __initialization:
   524                           	callstack 0
   525                           
   526                           ; Initialize objects allocated to BANK0 (1 bytes)
   527                           ; load TBLPTR registers with __pidataBANK0
   528   0119EE  0E34               	movlw	low __pidataBANK0
   529   0119F0  6EF6               	movwf	tblptrl,c
   530   0119F2  0E1B               	movlw	high __pidataBANK0
   531   0119F4  6EF7               	movwf	tblptrh,c
   532   0119F6  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   533   0119F8  6EF8               	movwf	tblptru,c
   534   0119FA  0009               	tblrd		*+	;fetch initializer
   535   0119FC  CFF5 F0FC          	movff	tablat,__pdataBANK0
   536                           
   537                           ; Clear objects allocated to BANK1 (157 bytes)
   538   011A00  EE01  F000         	lfsr	0,__pbssBANK1
   539   011A04  0E9D               	movlw	157
   540   011A06                     clear_0:
   541   011A06  6AEE               	clrf	postinc0,c
   542   011A08  06E8               	decf	wreg,f,c
   543   011A0A  E1FD               	bnz	clear_0
   544                           
   545                           ; Clear objects allocated to BANK0 (18 bytes)
   546   011A0C  EE00  F0EA         	lfsr	0,__pbssBANK0
   547   011A10  0E12               	movlw	18
   548   011A12                     clear_1:
   549   011A12  6AEE               	clrf	postinc0,c
   550   011A14  06E8               	decf	wreg,f,c
   551   011A16  E1FD               	bnz	clear_1
   552                           
   553                           ; Clear objects allocated to COMRAM (1 bytes)
   554   011A18  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   555   011A1A                     end_of_initialization:
   556                           	callstack 0
   557   011A1A                     __end_of__initialization:
   558                           	callstack 0
   559   011A1A  0100               	movlb	0
   560   011A1C  EFEA  F087         	goto	_main	;jump to C main() function
   561                           
   562                           	psect	bssCOMRAM
   563   00005D                     __pbssCOMRAM:
   564                           	callstack 0
   565   00005D                     _TxBufWriteCnt:
   566                           	callstack 0
   567   00005D                     	ds	1
   568                           
   569                           	psect	bssBANK0
   570   0000EA                     __pbssBANK0:
   571                           	callstack 0
   572   0000EA                     _width:
   573                           	callstack 0
   574   0000EA                     	ds	2
   575   0000EC                     _prec:
   576                           	callstack 0
   577   0000EC                     	ds	2
   578   0000EE                     _flags:
   579                           	callstack 0
   580   0000EE                     	ds	1
   581   0000EF                     _readingIndex:
   582                           	callstack 0
   583   0000EF                     	ds	1
   584   0000F0                     _TxBufReadCnt:
   585                           	callstack 0
   586   0000F0                     	ds	1
   587   0000F1                     _RxBufReadCnt:
   588                           	callstack 0
   589   0000F1                     	ds	1
   590   0000F2                     _RxBufWriteCnt:
   591                           	callstack 0
   592   0000F2                     	ds	1
   593   0000F3                     _motorL:
   594                           	callstack 0
   595   0000F3                     	ds	9
   596                           
   597                           	psect	dataBANK0
   598   0000FC                     __pdataBANK0:
   599                           	callstack 0
   600   0000FC                     _dataFlag:
   601                           	callstack 0
   602   0000FC                     	ds	1
   603                           
   604                           	psect	bssBANK1
   605   000100                     __pbssBANK1:
   606                           	callstack 0
   607   000100                     _EUSART4TXbuf:
   608                           	callstack 0
   609   000100                     	ds	60
   610   00013C                     _ldrReadings:
   611                           	callstack 0
   612   00013C                     	ds	20
   613   000150                     _EUSART4RXbuf:
   614                           	callstack 0
   615   000150                     	ds	20
   616   000164                     _dbuf:
   617                           	callstack 0
   618   000164                     	ds	32
   619   000184                     _motorR:
   620                           	callstack 0
   621   000184                     	ds	9
   622   00018D                     _colorCurrent:
   623                           	callstack 0
   624   00018D                     	ds	8
   625   000195                     _colorCalibration:
   626                           	callstack 0
   627   000195                     	ds	8
   628                           
   629                           	psect	cstackBANK1
   630   00019D                     __pcstackBANK1:
   631                           	callstack 0
   632   00019D                     test@led_state:
   633                           	callstack 0
   634                           
   635                           ; 50 bytes @ 0x0
   636   00019D                     	ds	50
   637   0001CF                     test@hue:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x32
   641   0001CF                     	ds	2
   642   0001D1                     test@combo:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x34
   646   0001D1                     	ds	2
   647                           
   648                           	psect	cstackBANK0
   649   000060                     __pcstackBANK0:
   650                           	callstack 0
   651   000060                     ??_convert_rgb2hue:
   652   000060                     calibration_routine@cal_state:
   653                           	callstack 0
   654   000060                     send2USART@buf:
   655                           	callstack 0
   656                           
   657                           ; 50 bytes @ 0x0
   658   000060                     	ds	38
   659   000086                     convert_rgb2hue@red_weighted:
   660                           	callstack 0
   661                           
   662                           ; 20 bytes @ 0x26
   663   000086                     	ds	12
   664   000092                     send2USART@hue_char:
   665                           	callstack 0
   666                           
   667                           ; 50 bytes @ 0x32
   668   000092                     	ds	8
   669   00009A                     convert_rgb2hue@green_weighted:
   670                           	callstack 0
   671                           
   672                           ; 20 bytes @ 0x3A
   673   00009A                     	ds	20
   674   0000AE                     convert_rgb2hue@blue_weighted:
   675                           	callstack 0
   676                           
   677                           ; 20 bytes @ 0x4E
   678   0000AE                     	ds	20
   679   0000C2                     _convert_rgb2hue$2848:
   680                           	callstack 0
   681                           
   682                           ; 8 bytes @ 0x62
   683   0000C2                     	ds	8
   684   0000CA                     convert_rgb2hue@hue:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x6A
   688   0000CA                     	ds	2
   689   0000CC                     convert_rgb2hue@total:
   690                           	callstack 0
   691                           
   692                           ; 8 bytes @ 0x6C
   693   0000CC                     	ds	8
   694   0000D4                     _convert_rgb2hue$2846:
   695                           	callstack 0
   696                           
   697                           ; 8 bytes @ 0x74
   698   0000D4                     	ds	8
   699   0000DC                     _convert_rgb2hue$2847:
   700                           	callstack 0
   701                           
   702                           ; 8 bytes @ 0x7C
   703   0000DC                     	ds	8
   704   0000E4                     convert_rgb2hue@b:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x84
   708   0000E4                     	ds	2
   709   0000E6                     convert_rgb2hue@r:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x86
   713   0000E6                     	ds	2
   714   0000E8                     convert_rgb2hue@g:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x88
   718   0000E8                     	ds	2
   719                           
   720                           	psect	cstackCOMRAM
   721   000001                     __pcstackCOMRAM:
   722                           	callstack 0
   723   000001                     ??_I2C_2_Master_Idle:
   724   000001                     ?___wmul:
   725                           	callstack 0
   726   000001                     ?___awdiv:
   727                           	callstack 0
   728   000001                     ?___awmod:
   729                           	callstack 0
   730   000001                     ?___omul:
   731                           	callstack 0
   732   000001                     sendCharSerial4@charToSend:
   733                           	callstack 0
   734   000001                     initDCmotorsPWM@PWMperiod:
   735                           	callstack 0
   736   000001                     ___wmul@multiplier:
   737                           	callstack 0
   738   000001                     ___awdiv@dividend:
   739                           	callstack 0
   740   000001                     ___awmod@dividend:
   741                           	callstack 0
   742   000001                     fputc@c:
   743                           	callstack 0
   744   000001                     ___omul@multiplier:
   745                           	callstack 0
   746                           
   747                           ; 8 bytes @ 0x0
   748   000001                     	ds	1
   749   000002                     ??_I2C_2_Master_Read:
   750   000002                     I2C_2_Master_Write@data_byte:
   751                           	callstack 0
   752   000002                     sendStringSerial4@string:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x1
   756   000002                     	ds	1
   757   000003                     color_writetoaddr@value:
   758                           	callstack 0
   759   000003                     I2C_2_Master_Read@ack:
   760                           	callstack 0
   761   000003                     fputc@fp:
   762                           	callstack 0
   763   000003                     ___wmul@multiplicand:
   764                           	callstack 0
   765   000003                     ___awdiv@divisor:
   766                           	callstack 0
   767   000003                     ___awmod@divisor:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x2
   771   000003                     	ds	1
   772   000004                     ??_fputc:
   773   000004                     color_writetoaddr@address:
   774                           	callstack 0
   775   000004                     I2C_2_Master_Read@tmp:
   776                           	callstack 0
   777                           
   778                           ; 1 bytes @ 0x3
   779   000004                     	ds	1
   780   000005                     ??_color_click_init:
   781   000005                     ?_color_read_Red:
   782                           	callstack 0
   783   000005                     ?_color_read_Green:
   784                           	callstack 0
   785   000005                     ?_color_read_Blue:
   786                           	callstack 0
   787   000005                     ?_color_read_Clear:
   788                           	callstack 0
   789   000005                     ___awdiv@counter:
   790                           	callstack 0
   791   000005                     ___awmod@counter:
   792                           	callstack 0
   793   000005                     ___wmul@product:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x4
   797   000005                     	ds	1
   798   000006                     ___awdiv@sign:
   799                           	callstack 0
   800   000006                     ___awmod@sign:
   801                           	callstack 0
   802                           
   803                           ; 1 bytes @ 0x5
   804   000006                     	ds	1
   805   000007                     ??_color_read_Red:
   806   000007                     ??_color_read_Green:
   807   000007                     ??_color_read_Blue:
   808   000007                     ??_color_read_Clear:
   809   000007                     ?_abs:
   810                           	callstack 0
   811   000007                     ?___lwdiv:
   812                           	callstack 0
   813   000007                     ?_read_prec_or_width:
   814                           	callstack 0
   815   000007                     read_prec_or_width@fmt:
   816                           	callstack 0
   817   000007                     ___awdiv@quotient:
   818                           	callstack 0
   819   000007                     ___lwdiv@dividend:
   820                           	callstack 0
   821   000007                     abs@a:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x6
   825   000007                     	ds	1
   826   000008                     read_prec_or_width@ap:
   827                           	callstack 0
   828                           
   829                           ; 1 bytes @ 0x7
   830   000008                     	ds	1
   831   000009                     ??_abs:
   832   000009                     read_prec_or_width@c:
   833                           	callstack 0
   834   000009                     ___lwdiv@divisor:
   835                           	callstack 0
   836   000009                     fputs@s:
   837                           	callstack 0
   838   000009                     ___omul@multiplicand:
   839                           	callstack 0
   840                           
   841                           ; 8 bytes @ 0x8
   842   000009                     	ds	1
   843   00000A                     color_read_Red@tmp:
   844                           	callstack 0
   845   00000A                     color_read_Green@tmp:
   846                           	callstack 0
   847   00000A                     color_read_Blue@tmp:
   848                           	callstack 0
   849   00000A                     color_read_Clear@tmp:
   850                           	callstack 0
   851   00000A                     read_prec_or_width@n:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x9
   855   00000A                     	ds	1
   856   00000B                     ___lwdiv@counter:
   857                           	callstack 0
   858   00000B                     fputs@fp:
   859                           	callstack 0
   860                           
   861                           ; 1 bytes @ 0xA
   862   00000B                     	ds	1
   863   00000C                     fputs@c:
   864                           	callstack 0
   865   00000C                     reading_values@cCurr:
   866                           	callstack 0
   867   00000C                     ___lwdiv@quotient:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0xB
   871   00000C                     	ds	1
   872   00000D                     fputs@i:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0xC
   876   00000D                     	ds	1
   877   00000E                     
   878                           ; 1 bytes @ 0xD
   879   00000E                     	ds	1
   880   00000F                     pad@fp:
   881                           	callstack 0
   882                           
   883                           ; 1 bytes @ 0xE
   884   00000F                     	ds	1
   885   000010                     pad@buf:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0xF
   889   000010                     	ds	1
   890   000011                     ___omul@product:
   891                           	callstack 0
   892                           
   893                           ; 8 bytes @ 0x10
   894   000011                     	ds	1
   895   000012                     pad@p:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x11
   899   000012                     	ds	2
   900   000014                     ??_pad:
   901                           
   902                           ; 1 bytes @ 0x13
   903   000014                     	ds	1
   904   000015                     pad@i:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x14
   908   000015                     	ds	2
   909   000017                     dtoa@fp:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x16
   913   000017                     	ds	1
   914   000018                     dtoa@d:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0x17
   918   000018                     	ds	1
   919   000019                     ?___lodiv:
   920                           	callstack 0
   921   000019                     ___lodiv@dividend:
   922                           	callstack 0
   923                           
   924                           ; 8 bytes @ 0x18
   925   000019                     	ds	1
   926   00001A                     _dtoa$2528:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x19
   930   00001A                     	ds	2
   931   00001C                     dtoa@p:
   932                           	callstack 0
   933                           
   934                           ; 1 bytes @ 0x1B
   935   00001C                     	ds	1
   936   00001D                     dtoa@w:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0x1C
   940   00001D                     	ds	2
   941   00001F                     dtoa@s:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0x1E
   945   00001F                     	ds	1
   946   000020                     dtoa@i:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0x1F
   950   000020                     	ds	1
   951   000021                     ___lodiv@divisor:
   952                           	callstack 0
   953                           
   954                           ; 8 bytes @ 0x20
   955   000021                     	ds	1
   956   000022                     vfpfcnvrt@fp:
   957                           	callstack 0
   958                           
   959                           ; 1 bytes @ 0x21
   960   000022                     	ds	1
   961   000023                     vfpfcnvrt@fmt:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x22
   965   000023                     	ds	1
   966   000024                     vfpfcnvrt@ap:
   967                           	callstack 0
   968                           
   969                           ; 1 bytes @ 0x23
   970   000024                     	ds	1
   971   000025                     ??_vfpfcnvrt:
   972                           
   973                           ; 1 bytes @ 0x24
   974   000025                     	ds	2
   975   000027                     vfpfcnvrt@convarg:
   976                           	callstack 0
   977                           
   978                           ; 4 bytes @ 0x26
   979   000027                     	ds	2
   980   000029                     ___lodiv@quotient:
   981                           	callstack 0
   982                           
   983                           ; 8 bytes @ 0x28
   984   000029                     	ds	2
   985   00002B                     vfpfcnvrt@done:
   986                           	callstack 0
   987                           
   988                           ; 1 bytes @ 0x2A
   989   00002B                     	ds	1
   990   00002C                     vfpfcnvrt@cp:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x2B
   994   00002C                     	ds	2
   995   00002E                     ?_vfprintf:
   996                           	callstack 0
   997   00002E                     vfprintf@fp:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x2D
  1001   00002E                     	ds	1
  1002   00002F                     vfprintf@fmt:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x2E
  1006   00002F                     	ds	2
  1007   000031                     ___lodiv@counter:
  1008                           	callstack 0
  1009   000031                     vfprintf@ap:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x30
  1013   000031                     	ds	1
  1014   000032                     vfprintf@cfmt:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x31
  1018   000032                     	ds	2
  1019   000034                     ?_sprintf:
  1020                           	callstack 0
  1021   000034                     sprintf@s:
  1022                           	callstack 0
  1023                           
  1024                           ; 2 bytes @ 0x33
  1025   000034                     	ds	2
  1026   000036                     sprintf@fmt:
  1027                           	callstack 0
  1028                           
  1029                           ; 2 bytes @ 0x35
  1030   000036                     	ds	6
  1031   00003C                     sprintf@ap:
  1032                           	callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x3B
  1035   00003C                     	ds	1
  1036   00003D                     sprintf@f:
  1037                           	callstack 0
  1038                           
  1039                           ; 12 bytes @ 0x3C
  1040   00003D                     	ds	12
  1041   000049                     ?_convert_rgb2hue:
  1042                           	callstack 0
  1043   000049                     ADC2String@buf:
  1044                           	callstack 0
  1045   000049                     convert_rgb2hue@cMax:
  1046                           	callstack 0
  1047   000049                     calibration_routine@cCal:
  1048                           	callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x48
  1051   000049                     	ds	1
  1052   00004A                     ADC2String@ADC_val:
  1053                           	callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x49
  1056   00004A                     	ds	1
  1057   00004B                     ??_calibration_routine:
  1058   00004B                     convert_rgb2hue@cCurr:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x4A
  1062   00004B                     	ds	1
  1063   00004C                     ??_ADC2String:
  1064                           
  1065                           ; 1 bytes @ 0x4B
  1066   00004C                     	ds	2
  1067   00004E                     ADC2String@frac_part:
  1068                           	callstack 0
  1069                           
  1070                           ; 2 bytes @ 0x4D
  1071   00004E                     	ds	2
  1072   000050                     ADC2String@int_part:
  1073                           	callstack 0
  1074                           
  1075                           ; 2 bytes @ 0x4F
  1076   000050                     	ds	2
  1077   000052                     send2USART@battery_level:
  1078                           	callstack 0
  1079                           
  1080                           ; 2 bytes @ 0x51
  1081   000052                     	ds	2
  1082   000054                     send2USART@hue:
  1083                           	callstack 0
  1084                           
  1085                           ; 2 bytes @ 0x53
  1086   000054                     	ds	2
  1087   000056                     test@battery_level:
  1088                           	callstack 0
  1089                           
  1090                           ; 2 bytes @ 0x55
  1091   000056                     	ds	2
  1092   000058                     ??_test:
  1093                           
  1094                           ; 1 bytes @ 0x57
  1095   000058                     	ds	1
  1096   000059                     ??_main:
  1097                           
  1098                           ; 1 bytes @ 0x58
  1099   000059                     	ds	2
  1100   00005B                     main@battery_level:
  1101                           	callstack 0
  1102                           
  1103                           ; 2 bytes @ 0x5A
  1104   00005B                     	ds	2
  1105                           
  1106 ;;
  1107 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1108 ;;
  1109 ;; *************** function _main *****************
  1110 ;; Defined at:
  1111 ;;		line 28 in file "main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  PWMcycle        2    0        unsigned int 
  1116 ;;  battery_leve    2   90[COMRAM] unsigned int 
  1117 ;;  clear           2    0        unsigned int 
  1118 ;;  green           2    0        unsigned int 
  1119 ;;  blue            2    0        unsigned int 
  1120 ;;  red             2    0        unsigned int 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1133 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1134 ;;Total ram usage:        4 bytes
  1135 ;; Hardware stack levels required when called: 11
  1136 ;; This function calls:
  1137 ;;		_ADC_init
  1138 ;;		_calibration_routine
  1139 ;;		_color_click_init
  1140 ;;		_initDCmotorsPWM
  1141 ;;		_initUSART4
  1142 ;;		_test
  1143 ;; This function is called by:
  1144 ;;		Startup code after reset
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text0
  1149   010FD4                     __ptext0:
  1150                           	callstack 0
  1151   010FD4                     _main:
  1152                           	callstack 20
  1153   010FD4                     
  1154                           ;main.c: 30:     ADC_init();
  1155   010FD4  EC6B  F08D         	call	_ADC_init	;wreg free
  1156   010FD8                     
  1157                           ;main.c: 31:     color_click_init();
  1158   010FD8  ECC3  F08C         	call	_color_click_init	;wreg free
  1159   010FDC                     
  1160                           ;main.c: 32:     initUSART4();
  1161   010FDC  EC5C  F08D         	call	_initUSART4	;wreg free
  1162   010FE0                     
  1163                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1164   010FE0  0E00               	movlw	0
  1165   010FE2  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1166   010FE4  0E63               	movlw	99
  1167   010FE6  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1168   010FE8  ECB2  F08A         	call	_initDCmotorsPWM	;wreg free
  1169   010FEC                     
  1170                           ;main.c: 39:     motorL.power = 0;
  1171   010FEC  0E00               	movlw	0
  1172   010FEE  0100               	movlb	0	; () banked
  1173   010FF0  6FF3               	movwf	_motorL& (0+255),b
  1174   010FF2                     
  1175                           ; BSR set to: 0
  1176                           ;main.c: 40:     motorL.direction = 1;
  1177   010FF2  0E01               	movlw	1
  1178   010FF4  6FF4               	movwf	(_motorL+1)& (0+255),b
  1179   010FF6                     
  1180                           ; BSR set to: 0
  1181                           ;main.c: 41:     motorL.brakemode = 1;
  1182   010FF6  0E01               	movlw	1
  1183   010FF8  6FF5               	movwf	(_motorL+2)& (0+255),b
  1184   010FFA                     
  1185                           ; BSR set to: 0
  1186                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1187   010FFA  0E00               	movlw	0
  1188   010FFC  6FF7               	movwf	(_motorL+4)& (0+255),b
  1189   010FFE  0E63               	movlw	99
  1190   011000  6FF6               	movwf	(_motorL+3)& (0+255),b
  1191   011002                     
  1192                           ; BSR set to: 0
  1193                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1194   011002  0EAA               	movlw	170
  1195   011004  6FF8               	movwf	(_motorL+5)& (0+255),b
  1196   011006  0E0F               	movlw	15
  1197   011008  6FF9               	movwf	(_motorL+6)& (0+255),b
  1198   01100A                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1201   01100A  0EA6               	movlw	166
  1202   01100C  6FFA               	movwf	(_motorL+7)& (0+255),b
  1203   01100E  0E0F               	movlw	15
  1204   011010  6FFB               	movwf	(_motorL+8)& (0+255),b
  1205   011012                     
  1206                           ; BSR set to: 0
  1207                           ;main.c: 46:     motorR.power = 0;
  1208   011012  0E00               	movlw	0
  1209   011014  0101               	movlb	1	; () banked
  1210   011016  6F84               	movwf	_motorR& (0+255),b
  1211   011018                     
  1212                           ; BSR set to: 1
  1213                           ;main.c: 47:     motorR.direction = 1;
  1214   011018  0E01               	movlw	1
  1215   01101A  6F85               	movwf	(_motorR+1)& (0+255),b
  1216   01101C                     
  1217                           ; BSR set to: 1
  1218                           ;main.c: 48:     motorR.brakemode = 1;
  1219   01101C  0E01               	movlw	1
  1220   01101E  6F86               	movwf	(_motorR+2)& (0+255),b
  1221   011020                     
  1222                           ; BSR set to: 1
  1223                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1224   011020  0E00               	movlw	0
  1225   011022  6F88               	movwf	(_motorR+4)& (0+255),b
  1226   011024  0E63               	movlw	99
  1227   011026  6F87               	movwf	(_motorR+3)& (0+255),b
  1228                           
  1229                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1230   011028  0E25               	movlw	37
  1231   01102A  6F89               	movwf	(_motorR+5)& (0+255),b
  1232   01102C  0E0F               	movlw	15
  1233   01102E  6F8A               	movwf	(_motorR+6)& (0+255),b
  1234                           
  1235                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1236   011030  0E21               	movlw	33
  1237   011032  6F8B               	movwf	(_motorR+7)& (0+255),b
  1238   011034  0E0F               	movlw	15
  1239   011036  6F8C               	movwf	(_motorR+8)& (0+255),b
  1240   011038                     
  1241                           ; BSR set to: 1
  1242                           ;main.c: 54:     LATDbits.LATD7=0;
  1243   011038  9E7C               	bcf	124,7,c	;volatile
  1244   01103A                     
  1245                           ; BSR set to: 1
  1246                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1247   01103A  9E84               	bcf	132,7,c	;volatile
  1248   01103C                     
  1249                           ; BSR set to: 1
  1250                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
  1251   01103C  9087               	bcf	135,0,c	;volatile
  1252   01103E                     
  1253                           ; BSR set to: 1
  1254                           ;main.c: 60:     LATGbits.LATG0 = 0;
  1255   01103E  907F               	bcf	127,0,c	;volatile
  1256   011040                     
  1257                           ; BSR set to: 1
  1258                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
  1259   011040  9E85               	bcf	133,7,c	;volatile
  1260   011042                     
  1261                           ; BSR set to: 1
  1262                           ;main.c: 62:     LATEbits.LATE7 = 0;
  1263   011042  9E7D               	bcf	125,7,c	;volatile
  1264   011044                     
  1265                           ; BSR set to: 1
  1266                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
  1267   011044  9681               	bcf	129,3,c	;volatile
  1268   011046                     
  1269                           ; BSR set to: 1
  1270                           ;main.c: 64:     LATAbits.LATA3 = 0;
  1271   011046  9679               	bcf	121,3,c	;volatile
  1272   011048                     
  1273                           ; BSR set to: 1
  1274                           ;main.c: 69:     unsigned int battery_level;;main.c: 70:     unsigned int red;;main.c: 7
      +                          1:     unsigned int blue;;main.c: 72:     unsigned int green;;main.c: 73:     unsigned i
      +                          nt clear;;main.c: 74:     TRISHbits.TRISH3 = 0;
  1275   011048  9688               	bcf	136,3,c	;volatile
  1276   01104A                     
  1277                           ; BSR set to: 1
  1278                           ;main.c: 75:     LATHbits.LATH3 = 1;
  1279   01104A  8680               	bsf	128,3,c	;volatile
  1280   01104C                     
  1281                           ; BSR set to: 1
  1282                           ;main.c: 76:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1283   01104C  0E19               	movlw	25
  1284   01104E  6E5A               	movwf	(??_main+1)^0,c
  1285   011050  0E5A               	movlw	90
  1286   011052  6E59               	movwf	??_main^0,c
  1287   011054  0EB2               	movlw	178
  1288   011056                     u2867:
  1289   011056  2EE8               	decfsz	wreg,f,c
  1290   011058  D7FE               	bra	u2867
  1291   01105A  2E59               	decfsz	??_main^0,f,c
  1292   01105C  D7FC               	bra	u2867
  1293   01105E  2E5A               	decfsz	(??_main+1)^0,f,c
  1294   011060  D7FA               	bra	u2867
  1295   011062                     
  1296                           ;main.c: 77:     LATHbits.LATH3 = 0;
  1297   011062  9680               	bcf	128,3,c	;volatile
  1298   011064                     
  1299                           ;main.c: 78:     LATFbits.LATF2 = 0;
  1300   011064  947E               	bcf	126,2,c	;volatile
  1301   011066                     
  1302                           ;main.c: 79:     TRISFbits.TRISF2 = 1;
  1303   011066  8486               	bsf	134,2,c	;volatile
  1304   011068                     
  1305                           ;main.c: 80:     ANSELFbits.ANSELF2 = 0;
  1306   011068  010E               	movlb	14	; () banked
  1307   01106A  95B4               	bcf	180,2,b	;volatile
  1308   01106C                     
  1309                           ; BSR set to: 14
  1310                           ;main.c: 81:     calibration_routine(&colorCalibration);
  1311   01106C  0E95               	movlw	low _colorCalibration
  1312   01106E  6E49               	movwf	calibration_routine@cCal^0,c
  1313   011070  0E01               	movlw	high _colorCalibration
  1314   011072  6E4A               	movwf	(calibration_routine@cCal+1)^0,c
  1315   011074  EC3E  F084         	call	_calibration_routine	;wreg free
  1316   011078                     l3936:
  1317                           
  1318                           ;main.c: 89:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1319   011078  0E52               	movlw	82
  1320   01107A  6E5A               	movwf	(??_main+1)^0,c
  1321   01107C  0E2B               	movlw	43
  1322   01107E  6E59               	movwf	??_main^0,c
  1323   011080  0E00               	movlw	0
  1324   011082                     u2877:
  1325   011082  2EE8               	decfsz	wreg,f,c
  1326   011084  D7FE               	bra	u2877
  1327   011086  2E59               	decfsz	??_main^0,f,c
  1328   011088  D7FC               	bra	u2877
  1329   01108A  2E5A               	decfsz	(??_main+1)^0,f,c
  1330   01108C  D7FA               	bra	u2877
  1331   01108E  D000               	nop2	
  1332   011090                     
  1333                           ;main.c: 90:         test(battery_level);
  1334   011090  C05B  F056         	movff	main@battery_level,test@battery_level
  1335   011094  C05C  F057         	movff	main@battery_level+1,test@battery_level+1
  1336   011098  ECF6  F085         	call	_test	;wreg free
  1337   01109C  EF3C  F088         	goto	l3936
  1338   0110A0  EF00  F000         	goto	start
  1339   0110A4                     __end_of_main:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _test *****************
  1343 ;; Defined at:
  1344 ;;		line 152 in file "color.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  battery_leve    2   85[COMRAM] unsigned int 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  combo           2   52[BANK1 ] unsigned int 
  1349 ;;  led_state      50    0[BANK1 ] unsigned char [50]
  1350 ;;  hue             2   50[BANK1 ] unsigned int 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Locals:         0       0      54       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Totals:         3       0      54       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;Total ram usage:       57 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 10
  1367 ;; This function calls:
  1368 ;;		_convert_rgb2hue
  1369 ;;		_reading_values
  1370 ;;		_send2USART
  1371 ;;		_sendStringSerial4
  1372 ;;		_sprintf
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text1
  1379   010BEC                     __ptext1:
  1380                           	callstack 0
  1381   010BEC                     _test:
  1382                           	callstack 20
  1383   010BEC                     
  1384                           ;color.c: 152: void test(unsigned int battery_level);color.c: 153: {;color.c: 154:     u
      +                          nsigned int hue;;color.c: 156:     char led_state[50];;color.c: 159:     for (unsigned i
      +                          nt combo = 0; combo < 4; ++combo) {
  1385   010BEC  0E00               	movlw	0
  1386   010BEE  0101               	movlb	1	; () banked
  1387   010BF0  6FD2               	movwf	(test@combo+1)& (0+255),b
  1388   010BF2  0E00               	movlw	0
  1389   010BF4  6FD1               	movwf	test@combo& (0+255),b
  1390   010BF6                     l3694:
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;color.c: 162:         if (combo == 0) {
  1394   010BF6  51D1               	movf	test@combo& (0+255),w,b
  1395   010BF8  11D2               	iorwf	(test@combo+1)& (0+255),w,b
  1396   010BFA  A4D8               	btfss	status,2,c
  1397   010BFC  EF02  F086         	goto	u2701
  1398   010C00  EF04  F086         	goto	u2700
  1399   010C04                     u2701:
  1400   010C04  EF1E  F086         	goto	l3700
  1401   010C08                     u2700:
  1402   010C08                     
  1403                           ; BSR set to: 1
  1404                           ;color.c: 164:             LATGbits.LATG0 = 1;
  1405   010C08  807F               	bsf	127,0,c	;volatile
  1406                           
  1407                           ;color.c: 165:             LATEbits.LATE7 = 0;
  1408   010C0A  9E7D               	bcf	125,7,c	;volatile
  1409                           
  1410                           ;color.c: 166:             LATAbits.LATA3 = 0;
  1411   010C0C  9679               	bcf	121,3,c	;volatile
  1412   010C0E                     
  1413                           ; BSR set to: 1
  1414                           ;color.c: 167:             sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1415   010C0E  0E9D               	movlw	low test@led_state
  1416   010C10  6E34               	movwf	sprintf@s^0,c
  1417   010C12  0E01               	movlw	high test@led_state
  1418   010C14  6E35               	movwf	(sprintf@s+1)^0,c
  1419   010C16  0EBE               	movlw	low STR_4
  1420   010C18  6E36               	movwf	sprintf@fmt^0,c
  1421   010C1A  0EFF               	movlw	high STR_4
  1422   010C1C  6E37               	movwf	(sprintf@fmt+1)^0,c
  1423   010C1E  B07F               	btfsc	127,0,c	;volatile
  1424   010C20  EF14  F086         	goto	u2711
  1425   010C24  EF18  F086         	goto	u2710
  1426   010C28                     u2711:
  1427   010C28  6A58               	clrf	??_test^0,c
  1428   010C2A  2A58               	incf	??_test^0,f,c
  1429   010C2C  EF19  F086         	goto	u2718
  1430   010C30                     u2710:
  1431   010C30  6A58               	clrf	??_test^0,c
  1432   010C32                     u2718:
  1433   010C32  5058               	movf	??_test^0,w,c
  1434   010C34  6E38               	movwf	(?_sprintf+4)^0,c
  1435   010C36  6A39               	clrf	(?_sprintf+5)^0,c
  1436   010C38  EC67  F08C         	call	_sprintf	;wreg free
  1437   010C3C                     l3700:
  1438                           
  1439                           ;color.c: 172:         if (combo == 1) {
  1440   010C3C  0101               	movlb	1	; () banked
  1441   010C3E  05D1               	decf	test@combo& (0+255),w,b
  1442   010C40  11D2               	iorwf	(test@combo+1)& (0+255),w,b
  1443   010C42  A4D8               	btfss	status,2,c
  1444   010C44  EF26  F086         	goto	u2721
  1445   010C48  EF28  F086         	goto	u2720
  1446   010C4C                     u2721:
  1447   010C4C  EF42  F086         	goto	l3706
  1448   010C50                     u2720:
  1449   010C50                     
  1450                           ; BSR set to: 1
  1451                           ;color.c: 173:             LATGbits.LATG0 = 0;
  1452   010C50  907F               	bcf	127,0,c	;volatile
  1453                           
  1454                           ;color.c: 174:             LATEbits.LATE7 = 1;
  1455   010C52  8E7D               	bsf	125,7,c	;volatile
  1456                           
  1457                           ;color.c: 175:             LATAbits.LATA3 = 0;
  1458   010C54  9679               	bcf	121,3,c	;volatile
  1459   010C56                     
  1460                           ; BSR set to: 1
  1461                           ;color.c: 176:             sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1462   010C56  0E9D               	movlw	low test@led_state
  1463   010C58  6E34               	movwf	sprintf@s^0,c
  1464   010C5A  0E01               	movlw	high test@led_state
  1465   010C5C  6E35               	movwf	(sprintf@s+1)^0,c
  1466   010C5E  0E98               	movlw	low STR_5
  1467   010C60  6E36               	movwf	sprintf@fmt^0,c
  1468   010C62  0EFF               	movlw	high STR_5
  1469   010C64  6E37               	movwf	(sprintf@fmt+1)^0,c
  1470   010C66  BE7D               	btfsc	125,7,c	;volatile
  1471   010C68  EF38  F086         	goto	u2731
  1472   010C6C  EF3C  F086         	goto	u2730
  1473   010C70                     u2731:
  1474   010C70  6A58               	clrf	??_test^0,c
  1475   010C72  2A58               	incf	??_test^0,f,c
  1476   010C74  EF3D  F086         	goto	u2738
  1477   010C78                     u2730:
  1478   010C78  6A58               	clrf	??_test^0,c
  1479   010C7A                     u2738:
  1480   010C7A  5058               	movf	??_test^0,w,c
  1481   010C7C  6E38               	movwf	(?_sprintf+4)^0,c
  1482   010C7E  6A39               	clrf	(?_sprintf+5)^0,c
  1483   010C80  EC67  F08C         	call	_sprintf	;wreg free
  1484   010C84                     l3706:
  1485                           
  1486                           ;color.c: 180:         if (combo == 2) {
  1487   010C84  0E02               	movlw	2
  1488   010C86  0101               	movlb	1	; () banked
  1489   010C88  19D1               	xorwf	test@combo& (0+255),w,b
  1490   010C8A  11D2               	iorwf	(test@combo+1)& (0+255),w,b
  1491   010C8C  A4D8               	btfss	status,2,c
  1492   010C8E  EF4B  F086         	goto	u2741
  1493   010C92  EF4D  F086         	goto	u2740
  1494   010C96                     u2741:
  1495   010C96  EF67  F086         	goto	l3712
  1496   010C9A                     u2740:
  1497   010C9A                     
  1498                           ; BSR set to: 1
  1499                           ;color.c: 181:             LATGbits.LATG0 = 0;
  1500   010C9A  907F               	bcf	127,0,c	;volatile
  1501                           
  1502                           ;color.c: 182:             LATEbits.LATE7 = 0;
  1503   010C9C  9E7D               	bcf	125,7,c	;volatile
  1504                           
  1505                           ;color.c: 183:             LATAbits.LATA3 = 1;
  1506   010C9E  8679               	bsf	121,3,c	;volatile
  1507   010CA0                     
  1508                           ; BSR set to: 1
  1509                           ;color.c: 184:             sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1510   010CA0  0E9D               	movlw	low test@led_state
  1511   010CA2  6E34               	movwf	sprintf@s^0,c
  1512   010CA4  0E01               	movlw	high test@led_state
  1513   010CA6  6E35               	movwf	(sprintf@s+1)^0,c
  1514   010CA8  0EE0               	movlw	low STR_6
  1515   010CAA  6E36               	movwf	sprintf@fmt^0,c
  1516   010CAC  0EFF               	movlw	high STR_6
  1517   010CAE  6E37               	movwf	(sprintf@fmt+1)^0,c
  1518   010CB0  B679               	btfsc	121,3,c	;volatile
  1519   010CB2  EF5D  F086         	goto	u2751
  1520   010CB6  EF61  F086         	goto	u2750
  1521   010CBA                     u2751:
  1522   010CBA  6A58               	clrf	??_test^0,c
  1523   010CBC  2A58               	incf	??_test^0,f,c
  1524   010CBE  EF62  F086         	goto	u2758
  1525   010CC2                     u2750:
  1526   010CC2  6A58               	clrf	??_test^0,c
  1527   010CC4                     u2758:
  1528   010CC4  5058               	movf	??_test^0,w,c
  1529   010CC6  6E38               	movwf	(?_sprintf+4)^0,c
  1530   010CC8  6A39               	clrf	(?_sprintf+5)^0,c
  1531   010CCA  EC67  F08C         	call	_sprintf	;wreg free
  1532   010CCE                     l3712:
  1533                           
  1534                           ;color.c: 190:         if (combo == 3) {
  1535   010CCE  0E03               	movlw	3
  1536   010CD0  0101               	movlb	1	; () banked
  1537   010CD2  19D1               	xorwf	test@combo& (0+255),w,b
  1538   010CD4  11D2               	iorwf	(test@combo+1)& (0+255),w,b
  1539   010CD6  A4D8               	btfss	status,2,c
  1540   010CD8  EF70  F086         	goto	u2761
  1541   010CDC  EF72  F086         	goto	u2760
  1542   010CE0                     u2761:
  1543   010CE0  EF83  F086         	goto	l3718
  1544   010CE4                     u2760:
  1545   010CE4                     
  1546                           ; BSR set to: 1
  1547                           ;color.c: 191:             LATGbits.LATG0 = 1;
  1548   010CE4  807F               	bsf	127,0,c	;volatile
  1549                           
  1550                           ;color.c: 192:             LATEbits.LATE7 = 1;
  1551   010CE6  8E7D               	bsf	125,7,c	;volatile
  1552                           
  1553                           ;color.c: 193:             LATAbits.LATA3 = 1;
  1554   010CE8  8679               	bsf	121,3,c	;volatile
  1555   010CEA                     
  1556                           ; BSR set to: 1
  1557                           ;color.c: 194:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1558   010CEA  0E9D               	movlw	low test@led_state
  1559   010CEC  6E34               	movwf	sprintf@s^0,c
  1560   010CEE  0E01               	movlw	high test@led_state
  1561   010CF0  6E35               	movwf	(sprintf@s+1)^0,c
  1562   010CF2  0ECF               	movlw	low STR_7
  1563   010CF4  6E36               	movwf	sprintf@fmt^0,c
  1564   010CF6  0EFF               	movlw	high STR_7
  1565   010CF8  6E37               	movwf	(sprintf@fmt+1)^0,c
  1566   010CFA  0E00               	movlw	0
  1567   010CFC  6E39               	movwf	(?_sprintf+5)^0,c
  1568   010CFE  0E01               	movlw	1
  1569   010D00  6E38               	movwf	(?_sprintf+4)^0,c
  1570   010D02  EC67  F08C         	call	_sprintf	;wreg free
  1571   010D06                     l3718:
  1572                           
  1573                           ;color.c: 198:         sendStringSerial4(led_state);
  1574   010D06  0E9D               	movlw	low test@led_state
  1575   010D08  6E02               	movwf	sendStringSerial4@string^0,c
  1576   010D0A  0E01               	movlw	high test@led_state
  1577   010D0C  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1578   010D0E  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  1579   010D12                     
  1580                           ;color.c: 200:         reading_values(&colorCurrent);
  1581   010D12  0E8D               	movlw	low _colorCurrent
  1582   010D14  6E0C               	movwf	reading_values@cCurr^0,c
  1583   010D16  0E01               	movlw	high _colorCurrent
  1584   010D18  6E0D               	movwf	(reading_values@cCurr+1)^0,c
  1585   010D1A  EC34  F08B         	call	_reading_values	;wreg free
  1586                           
  1587                           ;color.c: 202:         hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1588   010D1E  0E95               	movlw	low _colorCalibration
  1589   010D20  6E49               	movwf	convert_rgb2hue@cMax^0,c
  1590   010D22  0E01               	movlw	high _colorCalibration
  1591   010D24  6E4A               	movwf	(convert_rgb2hue@cMax+1)^0,c
  1592   010D26  0E8D               	movlw	low _colorCurrent
  1593   010D28  6E4B               	movwf	convert_rgb2hue@cCurr^0,c
  1594   010D2A  0E01               	movlw	high _colorCurrent
  1595   010D2C  6E4C               	movwf	(convert_rgb2hue@cCurr+1)^0,c
  1596   010D2E  EC00  F080         	call	_convert_rgb2hue	;wreg free
  1597   010D32  C049  F1CF         	movff	?_convert_rgb2hue,test@hue
  1598   010D36  C04A  F1D0         	movff	?_convert_rgb2hue+1,test@hue+1
  1599                           
  1600                           ;color.c: 208:         send2USART(battery_level,hue);
  1601   010D3A  C056  F052         	movff	test@battery_level,send2USART@battery_level
  1602   010D3E  C057  F053         	movff	test@battery_level+1,send2USART@battery_level+1
  1603   010D42  C1CF  F054         	movff	test@hue,send2USART@hue
  1604   010D46  C1D0  F055         	movff	test@hue+1,send2USART@hue+1
  1605   010D4A  EC47  F08C         	call	_send2USART	;wreg free
  1606   010D4E                     
  1607                           ;color.c: 209:     }
  1608   010D4E  0101               	movlb	1	; () banked
  1609   010D50  4BD1               	infsnz	test@combo& (0+255),f,b
  1610   010D52  2BD2               	incf	(test@combo+1)& (0+255),f,b
  1611   010D54                     
  1612                           ; BSR set to: 1
  1613   010D54  51D2               	movf	(test@combo+1)& (0+255),w,b
  1614   010D56  E109               	bnz	u2770
  1615   010D58  0E04               	movlw	4
  1616   010D5A  5DD1               	subwf	test@combo& (0+255),w,b
  1617   010D5C  A0D8               	btfss	status,0,c
  1618   010D5E  EFB3  F086         	goto	u2771
  1619   010D62  EFB5  F086         	goto	u2770
  1620   010D66                     u2771:
  1621   010D66  EFFB  F085         	goto	l3694
  1622   010D6A                     u2770:
  1623   010D6A                     
  1624                           ; BSR set to: 1
  1625   010D6A  0012               	return		;funcret
  1626   010D6C                     __end_of_test:
  1627                           	callstack 0
  1628                           
  1629 ;; *************** function _send2USART *****************
  1630 ;; Defined at:
  1631 ;;		line 146 in file "serial.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  battery_leve    2   81[COMRAM] unsigned int 
  1634 ;;  hue             2   83[COMRAM] unsigned int 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  hue_char       50   50[BANK0 ] unsigned char [50]
  1637 ;;  buf            50    0[BANK0 ] unsigned char [50]
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1650 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1651 ;;Total ram usage:      104 bytes
  1652 ;; Hardware stack levels used: 1
  1653 ;; Hardware stack levels required when called: 9
  1654 ;; This function calls:
  1655 ;;		_ADC2String
  1656 ;;		_sendStringSerial4
  1657 ;;		_sprintf
  1658 ;; This function is called by:
  1659 ;;		_test
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text2
  1664   01188E                     __ptext2:
  1665                           	callstack 0
  1666   01188E                     _send2USART:
  1667                           	callstack 20
  1668   01188E                     
  1669                           ;serial.c: 146: void send2USART(unsigned int battery_level, unsigned int hue);serial.c: 
      +                          147: {;serial.c: 148:         char buf[50];;serial.c: 149:         char hue_char[50];;se
      +                          rial.c: 154:         ADC2String(buf, battery_level);
  1670   01188E  0E60               	movlw	low send2USART@buf
  1671   011890  6E49               	movwf	ADC2String@buf^0,c
  1672   011892  C052  F04A         	movff	send2USART@battery_level,ADC2String@ADC_val
  1673   011896  C053  F04B         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1674   01189A  ECC4  F089         	call	_ADC2String	;wreg free
  1675                           
  1676                           ;serial.c: 155:         sprintf(hue_char,"hue=%03d,  ",hue);
  1677   01189E  0E92               	movlw	low send2USART@hue_char
  1678   0118A0  6E34               	movwf	sprintf@s^0,c
  1679   0118A2  6A35               	clrf	(sprintf@s+1)^0,c
  1680   0118A4  0EF1               	movlw	low STR_19
  1681   0118A6  6E36               	movwf	sprintf@fmt^0,c
  1682   0118A8  0EFF               	movlw	high STR_19
  1683   0118AA  6E37               	movwf	(sprintf@fmt+1)^0,c
  1684   0118AC  C054  F038         	movff	send2USART@hue,?_sprintf+4
  1685   0118B0  C055  F039         	movff	send2USART@hue+1,?_sprintf+5
  1686   0118B4  EC67  F08C         	call	_sprintf	;wreg free
  1687   0118B8                     
  1688                           ;serial.c: 160:         sendStringSerial4(buf);
  1689   0118B8  0E60               	movlw	low send2USART@buf
  1690   0118BA  6E02               	movwf	sendStringSerial4@string^0,c
  1691   0118BC  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1692   0118BE  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  1693   0118C2                     
  1694                           ;serial.c: 161:         sendStringSerial4(hue_char);
  1695   0118C2  0E92               	movlw	low send2USART@hue_char
  1696   0118C4  6E02               	movwf	sendStringSerial4@string^0,c
  1697   0118C6  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1698   0118C8  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  1699   0118CC  0012               	return		;funcret
  1700   0118CE                     __end_of_send2USART:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _ADC2String *****************
  1704 ;; Defined at:
  1705 ;;		line 135 in file "serial.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  buf             1   72[COMRAM] PTR unsigned char 
  1708 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1709 ;;  ADC_val         2   73[COMRAM] unsigned int 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  int_part        2   79[COMRAM] unsigned int 
  1712 ;;  frac_part       2   77[COMRAM] unsigned int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1722 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1723 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1725 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1726 ;;Total ram usage:        9 bytes
  1727 ;; Hardware stack levels used: 1
  1728 ;; Hardware stack levels required when called: 8
  1729 ;; This function calls:
  1730 ;;		___lwdiv
  1731 ;;		___wmul
  1732 ;;		_sprintf
  1733 ;; This function is called by:
  1734 ;;		_send2USART
  1735 ;;		_sendAllReadings
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text3
  1740   011388                     __ptext3:
  1741                           	callstack 0
  1742   011388                     _ADC2String:
  1743                           	callstack 20
  1744   011388                     
  1745                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1746   011388  C04A  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1747   01138C  C04B  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1748   011390  0E00               	movlw	0
  1749   011392  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1750   011394  0E4D               	movlw	77
  1751   011396  6E09               	movwf	___lwdiv@divisor^0,c
  1752   011398  ECFA  F08A         	call	___lwdiv	;wreg free
  1753   01139C  C007  F050         	movff	?___lwdiv,ADC2String@int_part
  1754   0113A0  C008  F051         	movff	?___lwdiv+1,ADC2String@int_part+1
  1755   0113A4                     
  1756                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1757   0113A4  C04A  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1758   0113A8  C04B  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1759   0113AC  0E00               	movlw	0
  1760   0113AE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1761   0113B0  0E64               	movlw	100
  1762   0113B2  6E03               	movwf	___wmul@multiplicand^0,c
  1763   0113B4  EC39  F08D         	call	___wmul	;wreg free
  1764   0113B8  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1765   0113BC  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1766   0113C0  0E00               	movlw	0
  1767   0113C2  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1768   0113C4  0E4D               	movlw	77
  1769   0113C6  6E09               	movwf	___lwdiv@divisor^0,c
  1770   0113C8  ECFA  F08A         	call	___lwdiv	;wreg free
  1771   0113CC  C007  F04C         	movff	?___lwdiv,??_ADC2String
  1772   0113D0  C008  F04D         	movff	?___lwdiv+1,??_ADC2String+1
  1773   0113D4  C050  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1774   0113D8  C051  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1775   0113DC  0EFF               	movlw	255
  1776   0113DE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1777   0113E0  0E9C               	movlw	156
  1778   0113E2  6E03               	movwf	___wmul@multiplicand^0,c
  1779   0113E4  EC39  F08D         	call	___wmul	;wreg free
  1780   0113E8  5001               	movf	?___wmul^0,w,c
  1781   0113EA  244C               	addwf	??_ADC2String^0,w,c
  1782   0113EC  6E4E               	movwf	ADC2String@frac_part^0,c
  1783   0113EE  5002               	movf	(?___wmul+1)^0,w,c
  1784   0113F0  204D               	addwfc	(??_ADC2String+1)^0,w,c
  1785   0113F2  6E4F               	movwf	(ADC2String@frac_part+1)^0,c
  1786   0113F4                     
  1787                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1788   0113F4  C049  F034         	movff	ADC2String@buf,sprintf@s
  1789   0113F8  6A35               	clrf	(sprintf@s+1)^0,c
  1790   0113FA  0E5A               	movlw	low STR_18
  1791   0113FC  6E36               	movwf	sprintf@fmt^0,c
  1792   0113FE  0EFF               	movlw	high STR_18
  1793   011400  6E37               	movwf	(sprintf@fmt+1)^0,c
  1794   011402  C050  F038         	movff	ADC2String@int_part,?_sprintf+4
  1795   011406  C051  F039         	movff	ADC2String@int_part+1,?_sprintf+5
  1796   01140A  C04E  F03A         	movff	ADC2String@frac_part,?_sprintf+6
  1797   01140E  C04F  F03B         	movff	ADC2String@frac_part+1,?_sprintf+7
  1798   011412  EC67  F08C         	call	_sprintf	;wreg free
  1799   011416                     
  1800                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1801   011416  0E52               	movlw	82
  1802   011418  6E4D               	movwf	(??_ADC2String+1)^0,c
  1803   01141A  0E2B               	movlw	43
  1804   01141C  6E4C               	movwf	??_ADC2String^0,c
  1805   01141E  0E00               	movlw	0
  1806   011420                     u2887:
  1807   011420  2EE8               	decfsz	wreg,f,c
  1808   011422  D7FE               	bra	u2887
  1809   011424  2E4C               	decfsz	??_ADC2String^0,f,c
  1810   011426  D7FC               	bra	u2887
  1811   011428  2E4D               	decfsz	(??_ADC2String+1)^0,f,c
  1812   01142A  D7FA               	bra	u2887
  1813   01142C  D000               	nop2	
  1814   01142E  0012               	return		;funcret
  1815   011430                     __end_of_ADC2String:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _reading_values *****************
  1819 ;; Defined at:
  1820 ;;		line 283 in file "color.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  cCurr           2   11[COMRAM] PTR struct colors
  1823 ;;		 -> colorCurrent(8), 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      void 
  1828 ;; Registers used:
  1829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1835 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;Total ram usage:        2 bytes
  1840 ;; Hardware stack levels used: 1
  1841 ;; Hardware stack levels required when called: 3
  1842 ;; This function calls:
  1843 ;;		_color_read_Blue
  1844 ;;		_color_read_Clear
  1845 ;;		_color_read_Green
  1846 ;;		_color_read_Red
  1847 ;; This function is called by:
  1848 ;;		_test
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text4
  1853   011668                     __ptext4:
  1854                           	callstack 0
  1855   011668                     _reading_values:
  1856                           	callstack 26
  1857   011668                     
  1858                           ;color.c: 283: void reading_values(colors *cCurr);color.c: 284: {;color.c: 287:     (cCu
      +                          rr->red)= color_read_Red();
  1859   011668  EC63  F08B         	call	_color_read_Red	;wreg free
  1860   01166C  C00C  FFD9         	movff	reading_values@cCurr,fsr2l
  1861   011670  C00D  FFDA         	movff	reading_values@cCurr+1,fsr2h
  1862   011674  C005  FFDE         	movff	?_color_read_Red,postinc2
  1863   011678  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1864                           
  1865                           ;color.c: 288:     (cCurr->blue) = color_read_Blue();
  1866   01167C  ECDB  F08B         	call	_color_read_Blue	;wreg free
  1867   011680  EE20 F004          	lfsr	2,4
  1868   011684  500C               	movf	reading_values@cCurr^0,w,c
  1869   011686  26D9               	addwf	fsr2l,f,c
  1870   011688  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1871   01168A  22DA               	addwfc	fsr2h,f,c
  1872   01168C  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1873   011690  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1874                           
  1875                           ;color.c: 289:     (cCurr->green) = color_read_Green();
  1876   011694  EC8B  F08B         	call	_color_read_Green	;wreg free
  1877   011698  EE20 F002          	lfsr	2,2
  1878   01169C  500C               	movf	reading_values@cCurr^0,w,c
  1879   01169E  26D9               	addwf	fsr2l,f,c
  1880   0116A0  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1881   0116A2  22DA               	addwfc	fsr2h,f,c
  1882   0116A4  C005  FFDE         	movff	?_color_read_Green,postinc2
  1883   0116A8  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1884                           
  1885                           ;color.c: 290:     (cCurr->clear) = color_read_Clear();
  1886   0116AC  ECB3  F08B         	call	_color_read_Clear	;wreg free
  1887   0116B0  EE20 F006          	lfsr	2,6
  1888   0116B4  500C               	movf	reading_values@cCurr^0,w,c
  1889   0116B6  26D9               	addwf	fsr2l,f,c
  1890   0116B8  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1891   0116BA  22DA               	addwfc	fsr2h,f,c
  1892   0116BC  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1893   0116C0  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1894   0116C4  0012               	return		;funcret
  1895   0116C6                     __end_of_reading_values:
  1896                           	callstack 0
  1897                           
  1898 ;; *************** function _convert_rgb2hue *****************
  1899 ;; Defined at:
  1900 ;;		line 98 in file "color.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  cMax            2   72[COMRAM] PTR struct colors
  1903 ;;		 -> colorCalibration(8), 
  1904 ;;  cCurr           2   74[COMRAM] PTR struct colors
  1905 ;;		 -> colorCurrent(8), 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  blue_weighte   20   78[BANK0 ] unsigned char [20]
  1908 ;;  green_weight   20   58[BANK0 ] unsigned char [20]
  1909 ;;  red_weighted   20   38[BANK0 ] unsigned char [20]
  1910 ;;  total           8  108[BANK0 ] unsigned long long 
  1911 ;;  g               2  136[BANK0 ] unsigned int 
  1912 ;;  r               2  134[BANK0 ] unsigned int 
  1913 ;;  b               2  132[BANK0 ] unsigned int 
  1914 ;;  hue             2  106[BANK0 ] unsigned int 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2   72[COMRAM] unsigned int 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1924 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1925 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1926 ;;      Temps:          0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1927 ;;      Totals:         4     138       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1928 ;;Total ram usage:      142 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 8
  1931 ;; This function calls:
  1932 ;;		___lodiv
  1933 ;;		___lwdiv
  1934 ;;		___omul
  1935 ;;		_sendStringSerial4
  1936 ;;		_sprintf
  1937 ;; This function is called by:
  1938 ;;		_test
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text5
  1943   010000                     __ptext5:
  1944                           	callstack 0
  1945   010000                     _convert_rgb2hue:
  1946                           	callstack 21
  1947   010000                     
  1948                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1949   010000  EE20 F004          	lfsr	2,4
  1950   010004  5049               	movf	convert_rgb2hue@cMax^0,w,c
  1951   010006  26D9               	addwf	fsr2l,f,c
  1952   010008  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1953   01000A  22DA               	addwfc	fsr2h,f,c
  1954   01000C  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  1955   010010  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  1956   010014  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1957   010018  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1958   01001C  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1959   01001E  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1960   010020  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1961   010022  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1962   010024  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1963   010026  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1964   010028  EE20 F002          	lfsr	2,2
  1965   01002C  504B               	movf	convert_rgb2hue@cCurr^0,w,c
  1966   01002E  26D9               	addwf	fsr2l,f,c
  1967   010030  504C               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1968   010032  22DA               	addwfc	fsr2h,f,c
  1969   010034  CFDE F062          	movff	postinc2,??_convert_rgb2hue+2
  1970   010038  CFDD F063          	movff	postdec2,??_convert_rgb2hue+3
  1971   01003C  C062  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1972   010040  C063  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1973   010044  6A03               	clrf	(___omul@multiplier+2)^0,c
  1974   010046  6A04               	clrf	(___omul@multiplier+3)^0,c
  1975   010048  6A05               	clrf	(___omul@multiplier+4)^0,c
  1976   01004A  6A06               	clrf	(___omul@multiplier+5)^0,c
  1977   01004C  6A07               	clrf	(___omul@multiplier+6)^0,c
  1978   01004E  6A08               	clrf	(___omul@multiplier+7)^0,c
  1979   010050  EC18  F08A         	call	___omul	;wreg free
  1980   010054  C001  F0D4         	movff	?___omul,_convert_rgb2hue$2846
  1981   010058  C002  F0D5         	movff	?___omul+1,_convert_rgb2hue$2846+1
  1982   01005C  C003  F0D6         	movff	?___omul+2,_convert_rgb2hue$2846+2
  1983   010060  C004  F0D7         	movff	?___omul+3,_convert_rgb2hue$2846+3
  1984   010064  C005  F0D8         	movff	?___omul+4,_convert_rgb2hue$2846+4
  1985   010068  C006  F0D9         	movff	?___omul+5,_convert_rgb2hue$2846+5
  1986   01006C  C007  F0DA         	movff	?___omul+6,_convert_rgb2hue$2846+6
  1987   010070  C008  F0DB         	movff	?___omul+7,_convert_rgb2hue$2846+7
  1988                           
  1989                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1990   010074  C049  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1991   010078  C04A  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1992   01007C  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  1993   010080  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  1994   010084  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1995   010088  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1996   01008C  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1997   01008E  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1998   010090  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1999   010092  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2000   010094  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2001   010096  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2002   010098  EE20 F004          	lfsr	2,4
  2003   01009C  504B               	movf	convert_rgb2hue@cCurr^0,w,c
  2004   01009E  26D9               	addwf	fsr2l,f,c
  2005   0100A0  504C               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  2006   0100A2  22DA               	addwfc	fsr2h,f,c
  2007   0100A4  CFDE F062          	movff	postinc2,??_convert_rgb2hue+2
  2008   0100A8  CFDD F063          	movff	postdec2,??_convert_rgb2hue+3
  2009   0100AC  C062  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2010   0100B0  C063  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2011   0100B4  6A03               	clrf	(___omul@multiplier+2)^0,c
  2012   0100B6  6A04               	clrf	(___omul@multiplier+3)^0,c
  2013   0100B8  6A05               	clrf	(___omul@multiplier+4)^0,c
  2014   0100BA  6A06               	clrf	(___omul@multiplier+5)^0,c
  2015   0100BC  6A07               	clrf	(___omul@multiplier+6)^0,c
  2016   0100BE  6A08               	clrf	(___omul@multiplier+7)^0,c
  2017   0100C0  EC18  F08A         	call	___omul	;wreg free
  2018   0100C4  C001  F0DC         	movff	?___omul,_convert_rgb2hue$2847
  2019   0100C8  C002  F0DD         	movff	?___omul+1,_convert_rgb2hue$2847+1
  2020   0100CC  C003  F0DE         	movff	?___omul+2,_convert_rgb2hue$2847+2
  2021   0100D0  C004  F0DF         	movff	?___omul+3,_convert_rgb2hue$2847+3
  2022   0100D4  C005  F0E0         	movff	?___omul+4,_convert_rgb2hue$2847+4
  2023   0100D8  C006  F0E1         	movff	?___omul+5,_convert_rgb2hue$2847+5
  2024   0100DC  C007  F0E2         	movff	?___omul+6,_convert_rgb2hue$2847+6
  2025   0100E0  C008  F0E3         	movff	?___omul+7,_convert_rgb2hue$2847+7
  2026                           
  2027                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  2028   0100E4  EE20 F004          	lfsr	2,4
  2029   0100E8  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2030   0100EA  26D9               	addwf	fsr2l,f,c
  2031   0100EC  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2032   0100EE  22DA               	addwfc	fsr2h,f,c
  2033   0100F0  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2034   0100F4  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2035   0100F8  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2036   0100FC  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2037   010100  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2038   010102  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2039   010104  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2040   010106  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2041   010108  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2042   01010A  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2043   01010C  C04B  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  2044   010110  C04C  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  2045   010114  CFDE F062          	movff	postinc2,??_convert_rgb2hue+2
  2046   010118  CFDD F063          	movff	postdec2,??_convert_rgb2hue+3
  2047   01011C  C062  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2048   010120  C063  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2049   010124  6A03               	clrf	(___omul@multiplier+2)^0,c
  2050   010126  6A04               	clrf	(___omul@multiplier+3)^0,c
  2051   010128  6A05               	clrf	(___omul@multiplier+4)^0,c
  2052   01012A  6A06               	clrf	(___omul@multiplier+5)^0,c
  2053   01012C  6A07               	clrf	(___omul@multiplier+6)^0,c
  2054   01012E  6A08               	clrf	(___omul@multiplier+7)^0,c
  2055   010130  EC18  F08A         	call	___omul	;wreg free
  2056   010134  C001  F0C2         	movff	?___omul,_convert_rgb2hue$2848
  2057   010138  C002  F0C3         	movff	?___omul+1,_convert_rgb2hue$2848+1
  2058   01013C  C003  F0C4         	movff	?___omul+2,_convert_rgb2hue$2848+2
  2059   010140  C004  F0C5         	movff	?___omul+3,_convert_rgb2hue$2848+3
  2060   010144  C005  F0C6         	movff	?___omul+4,_convert_rgb2hue$2848+4
  2061   010148  C006  F0C7         	movff	?___omul+5,_convert_rgb2hue$2848+5
  2062   01014C  C007  F0C8         	movff	?___omul+6,_convert_rgb2hue$2848+6
  2063   010150  C008  F0C9         	movff	?___omul+7,_convert_rgb2hue$2848+7
  2064                           
  2065                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  2066   010154  C0D4  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2067   010158  C0D5  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2068   01015C  C0D6  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2069   010160  C0D7  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2070   010164  C0D8  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2071   010168  C0D9  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2072   01016C  C0DA  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2073   010170  C0DB  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2074   010174  C049  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  2075   010178  C04A  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  2076   01017C  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2077   010180  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2078   010184  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2079   010188  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2080   01018C  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2081   01018E  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2082   010190  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2083   010192  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2084   010194  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2085   010196  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2086   010198  EC18  F08A         	call	___omul	;wreg free
  2087   01019C  C001  F062         	movff	?___omul,??_convert_rgb2hue+2
  2088   0101A0  C002  F063         	movff	?___omul+1,??_convert_rgb2hue+3
  2089   0101A4  C003  F064         	movff	?___omul+2,??_convert_rgb2hue+4
  2090   0101A8  C004  F065         	movff	?___omul+3,??_convert_rgb2hue+5
  2091   0101AC  C005  F066         	movff	?___omul+4,??_convert_rgb2hue+6
  2092   0101B0  C006  F067         	movff	?___omul+5,??_convert_rgb2hue+7
  2093   0101B4  C007  F068         	movff	?___omul+6,??_convert_rgb2hue+8
  2094   0101B8  C008  F069         	movff	?___omul+7,??_convert_rgb2hue+9
  2095   0101BC  C0DC  F001         	movff	_convert_rgb2hue$2847,___omul@multiplier
  2096   0101C0  C0DD  F002         	movff	_convert_rgb2hue$2847+1,___omul@multiplier+1
  2097   0101C4  C0DE  F003         	movff	_convert_rgb2hue$2847+2,___omul@multiplier+2
  2098   0101C8  C0DF  F004         	movff	_convert_rgb2hue$2847+3,___omul@multiplier+3
  2099   0101CC  C0E0  F005         	movff	_convert_rgb2hue$2847+4,___omul@multiplier+4
  2100   0101D0  C0E1  F006         	movff	_convert_rgb2hue$2847+5,___omul@multiplier+5
  2101   0101D4  C0E2  F007         	movff	_convert_rgb2hue$2847+6,___omul@multiplier+6
  2102   0101D8  C0E3  F008         	movff	_convert_rgb2hue$2847+7,___omul@multiplier+7
  2103   0101DC  EE20 F002          	lfsr	2,2
  2104   0101E0  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2105   0101E2  26D9               	addwf	fsr2l,f,c
  2106   0101E4  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2107   0101E6  22DA               	addwfc	fsr2h,f,c
  2108   0101E8  CFDE F06A          	movff	postinc2,??_convert_rgb2hue+10
  2109   0101EC  CFDD F06B          	movff	postdec2,??_convert_rgb2hue+11
  2110   0101F0  C06A  F009         	movff	??_convert_rgb2hue+10,___omul@multiplicand
  2111   0101F4  C06B  F00A         	movff	??_convert_rgb2hue+11,___omul@multiplicand+1
  2112   0101F8  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2113   0101FA  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2114   0101FC  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2115   0101FE  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2116   010200  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2117   010202  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2118   010204  EC18  F08A         	call	___omul	;wreg free
  2119   010208  C001  F06C         	movff	?___omul,??_convert_rgb2hue+12
  2120   01020C  C002  F06D         	movff	?___omul+1,??_convert_rgb2hue+13
  2121   010210  C003  F06E         	movff	?___omul+2,??_convert_rgb2hue+14
  2122   010214  C004  F06F         	movff	?___omul+3,??_convert_rgb2hue+15
  2123   010218  C005  F070         	movff	?___omul+4,??_convert_rgb2hue+16
  2124   01021C  C006  F071         	movff	?___omul+5,??_convert_rgb2hue+17
  2125   010220  C007  F072         	movff	?___omul+6,??_convert_rgb2hue+18
  2126   010224  C008  F073         	movff	?___omul+7,??_convert_rgb2hue+19
  2127   010228  C0C2  F001         	movff	_convert_rgb2hue$2848,___omul@multiplier
  2128   01022C  C0C3  F002         	movff	_convert_rgb2hue$2848+1,___omul@multiplier+1
  2129   010230  C0C4  F003         	movff	_convert_rgb2hue$2848+2,___omul@multiplier+2
  2130   010234  C0C5  F004         	movff	_convert_rgb2hue$2848+3,___omul@multiplier+3
  2131   010238  C0C6  F005         	movff	_convert_rgb2hue$2848+4,___omul@multiplier+4
  2132   01023C  C0C7  F006         	movff	_convert_rgb2hue$2848+5,___omul@multiplier+5
  2133   010240  C0C8  F007         	movff	_convert_rgb2hue$2848+6,___omul@multiplier+6
  2134   010244  C0C9  F008         	movff	_convert_rgb2hue$2848+7,___omul@multiplier+7
  2135   010248  EE20 F002          	lfsr	2,2
  2136   01024C  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2137   01024E  26D9               	addwf	fsr2l,f,c
  2138   010250  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2139   010252  22DA               	addwfc	fsr2h,f,c
  2140   010254  CFDE F074          	movff	postinc2,??_convert_rgb2hue+20
  2141   010258  CFDD F075          	movff	postdec2,??_convert_rgb2hue+21
  2142   01025C  C074  F009         	movff	??_convert_rgb2hue+20,___omul@multiplicand
  2143   010260  C075  F00A         	movff	??_convert_rgb2hue+21,___omul@multiplicand+1
  2144   010264  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2145   010266  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2146   010268  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2147   01026A  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2148   01026C  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2149   01026E  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2150   010270  EC18  F08A         	call	___omul	;wreg free
  2151   010274  C001  F076         	movff	?___omul,??_convert_rgb2hue+22
  2152   010278  C002  F077         	movff	?___omul+1,??_convert_rgb2hue+23
  2153   01027C  C003  F078         	movff	?___omul+2,??_convert_rgb2hue+24
  2154   010280  C004  F079         	movff	?___omul+3,??_convert_rgb2hue+25
  2155   010284  C005  F07A         	movff	?___omul+4,??_convert_rgb2hue+26
  2156   010288  C006  F07B         	movff	?___omul+5,??_convert_rgb2hue+27
  2157   01028C  C007  F07C         	movff	?___omul+6,??_convert_rgb2hue+28
  2158   010290  C008  F07D         	movff	?___omul+7,??_convert_rgb2hue+29
  2159   010294  0100               	movlb	0	; () banked
  2160   010296  516C               	movf	(??_convert_rgb2hue+12)& (0+255),w,b
  2161   010298  2576               	addwf	(??_convert_rgb2hue+22)& (0+255),w,b
  2162   01029A  6F7E               	movwf	(??_convert_rgb2hue+30)& (0+255),b
  2163   01029C  516D               	movf	(??_convert_rgb2hue+13)& (0+255),w,b
  2164   01029E  2177               	addwfc	(??_convert_rgb2hue+23)& (0+255),w,b
  2165   0102A0  6F7F               	movwf	(??_convert_rgb2hue+31)& (0+255),b
  2166   0102A2  516E               	movf	(??_convert_rgb2hue+14)& (0+255),w,b
  2167   0102A4  2178               	addwfc	(??_convert_rgb2hue+24)& (0+255),w,b
  2168   0102A6  6F80               	movwf	(??_convert_rgb2hue+32)& (0+255),b
  2169   0102A8  516F               	movf	(??_convert_rgb2hue+15)& (0+255),w,b
  2170   0102AA  2179               	addwfc	(??_convert_rgb2hue+25)& (0+255),w,b
  2171   0102AC  6F81               	movwf	(??_convert_rgb2hue+33)& (0+255),b
  2172   0102AE  5170               	movf	(??_convert_rgb2hue+16)& (0+255),w,b
  2173   0102B0  217A               	addwfc	(??_convert_rgb2hue+26)& (0+255),w,b
  2174   0102B2  6F82               	movwf	(??_convert_rgb2hue+34)& (0+255),b
  2175   0102B4  5171               	movf	(??_convert_rgb2hue+17)& (0+255),w,b
  2176   0102B6  217B               	addwfc	(??_convert_rgb2hue+27)& (0+255),w,b
  2177   0102B8  6F83               	movwf	(??_convert_rgb2hue+35)& (0+255),b
  2178   0102BA  5172               	movf	(??_convert_rgb2hue+18)& (0+255),w,b
  2179   0102BC  217C               	addwfc	(??_convert_rgb2hue+28)& (0+255),w,b
  2180   0102BE  6F84               	movwf	(??_convert_rgb2hue+36)& (0+255),b
  2181   0102C0  5173               	movf	(??_convert_rgb2hue+19)& (0+255),w,b
  2182   0102C2  217D               	addwfc	(??_convert_rgb2hue+29)& (0+255),w,b
  2183   0102C4  6F85               	movwf	(??_convert_rgb2hue+37)& (0+255),b
  2184   0102C6  5162               	movf	(??_convert_rgb2hue+2)& (0+255),w,b
  2185   0102C8  257E               	addwf	(??_convert_rgb2hue+30)& (0+255),w,b
  2186   0102CA  6FCC               	movwf	convert_rgb2hue@total& (0+255),b
  2187   0102CC  5163               	movf	(??_convert_rgb2hue+3)& (0+255),w,b
  2188   0102CE  217F               	addwfc	(??_convert_rgb2hue+31)& (0+255),w,b
  2189   0102D0  6FCD               	movwf	(convert_rgb2hue@total+1)& (0+255),b
  2190   0102D2  5164               	movf	(??_convert_rgb2hue+4)& (0+255),w,b
  2191   0102D4  2180               	addwfc	(??_convert_rgb2hue+32)& (0+255),w,b
  2192   0102D6  6FCE               	movwf	(convert_rgb2hue@total+2)& (0+255),b
  2193   0102D8  5165               	movf	(??_convert_rgb2hue+5)& (0+255),w,b
  2194   0102DA  2181               	addwfc	(??_convert_rgb2hue+33)& (0+255),w,b
  2195   0102DC  6FCF               	movwf	(convert_rgb2hue@total+3)& (0+255),b
  2196   0102DE  5166               	movf	(??_convert_rgb2hue+6)& (0+255),w,b
  2197   0102E0  2182               	addwfc	(??_convert_rgb2hue+34)& (0+255),w,b
  2198   0102E2  6FD0               	movwf	(convert_rgb2hue@total+4)& (0+255),b
  2199   0102E4  5167               	movf	(??_convert_rgb2hue+7)& (0+255),w,b
  2200   0102E6  2183               	addwfc	(??_convert_rgb2hue+35)& (0+255),w,b
  2201   0102E8  6FD1               	movwf	(convert_rgb2hue@total+5)& (0+255),b
  2202   0102EA  5168               	movf	(??_convert_rgb2hue+8)& (0+255),w,b
  2203   0102EC  2184               	addwfc	(??_convert_rgb2hue+36)& (0+255),w,b
  2204   0102EE  6FD2               	movwf	(convert_rgb2hue@total+6)& (0+255),b
  2205   0102F0  5169               	movf	(??_convert_rgb2hue+9)& (0+255),w,b
  2206   0102F2  2185               	addwfc	(??_convert_rgb2hue+37)& (0+255),w,b
  2207   0102F4  6FD3               	movwf	(convert_rgb2hue@total+7)& (0+255),b
  2208   0102F6                     
  2209                           ; BSR set to: 0
  2210                           ;color.c: 103:     unsigned int r = 0;
  2211   0102F6  0E00               	movlw	0
  2212   0102F8  6FE7               	movwf	(convert_rgb2hue@r+1)& (0+255),b
  2213   0102FA  0E00               	movlw	0
  2214   0102FC  6FE6               	movwf	convert_rgb2hue@r& (0+255),b
  2215   0102FE                     
  2216                           ; BSR set to: 0
  2217                           ;color.c: 104:     unsigned int g = 0;
  2218   0102FE  0E00               	movlw	0
  2219   010300  6FE9               	movwf	(convert_rgb2hue@g+1)& (0+255),b
  2220   010302  0E00               	movlw	0
  2221   010304  6FE8               	movwf	convert_rgb2hue@g& (0+255),b
  2222   010306                     
  2223                           ; BSR set to: 0
  2224                           ;color.c: 105:     unsigned int b = 0;
  2225   010306  0E00               	movlw	0
  2226   010308  6FE5               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2227   01030A  0E00               	movlw	0
  2228   01030C  6FE4               	movwf	convert_rgb2hue@b& (0+255),b
  2229   01030E                     
  2230                           ; BSR set to: 0
  2231                           ;color.c: 107:     if (total > 0) {
  2232   01030E  51CC               	movf	convert_rgb2hue@total& (0+255),w,b
  2233   010310  11CD               	iorwf	(convert_rgb2hue@total+1)& (0+255),w,b
  2234   010312  11CE               	iorwf	(convert_rgb2hue@total+2)& (0+255),w,b
  2235   010314  11CF               	iorwf	(convert_rgb2hue@total+3)& (0+255),w,b
  2236   010316  11D0               	iorwf	(convert_rgb2hue@total+4)& (0+255),w,b
  2237   010318  11D1               	iorwf	(convert_rgb2hue@total+5)& (0+255),w,b
  2238   01031A  11D2               	iorwf	(convert_rgb2hue@total+6)& (0+255),w,b
  2239   01031C  11D3               	iorwf	(convert_rgb2hue@total+7)& (0+255),w,b
  2240   01031E  B4D8               	btfsc	status,2,c
  2241   010320  EF94  F081         	goto	u2551
  2242   010324  EF96  F081         	goto	u2550
  2243   010328                     u2551:
  2244   010328  EF35  F083         	goto	l3582
  2245   01032C                     u2550:
  2246   01032C                     
  2247                           ; BSR set to: 0
  2248                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2249   01032C  EE20 F004          	lfsr	2,4
  2250   010330  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2251   010332  26D9               	addwf	fsr2l,f,c
  2252   010334  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2253   010336  22DA               	addwfc	fsr2h,f,c
  2254   010338  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2255   01033C  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2256   010340  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2257   010344  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2258   010348  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2259   01034A  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2260   01034C  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2261   01034E  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2262   010350  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2263   010352  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2264   010354  C04B  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  2265   010358  C04C  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  2266   01035C  CFDE F062          	movff	postinc2,??_convert_rgb2hue+2
  2267   010360  CFDD F063          	movff	postdec2,??_convert_rgb2hue+3
  2268   010364  C062  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2269   010368  C063  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2270   01036C  6A03               	clrf	(___omul@multiplier+2)^0,c
  2271   01036E  6A04               	clrf	(___omul@multiplier+3)^0,c
  2272   010370  6A05               	clrf	(___omul@multiplier+4)^0,c
  2273   010372  6A06               	clrf	(___omul@multiplier+5)^0,c
  2274   010374  6A07               	clrf	(___omul@multiplier+6)^0,c
  2275   010376  6A08               	clrf	(___omul@multiplier+7)^0,c
  2276   010378  EC18  F08A         	call	___omul	;wreg free
  2277   01037C  C001  F0D4         	movff	?___omul,_convert_rgb2hue$2846
  2278   010380  C002  F0D5         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2279   010384  C003  F0D6         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2280   010388  C004  F0D7         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2281   01038C  C005  F0D8         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2282   010390  C006  F0D9         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2283   010394  C007  F0DA         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2284   010398  C008  F0DB         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2285                           
  2286                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2287   01039C  EE20 F002          	lfsr	2,2
  2288   0103A0  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2289   0103A2  26D9               	addwf	fsr2l,f,c
  2290   0103A4  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2291   0103A6  22DA               	addwfc	fsr2h,f,c
  2292   0103A8  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2293   0103AC  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2294   0103B0  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2295   0103B4  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2296   0103B8  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2297   0103BA  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2298   0103BC  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2299   0103BE  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2300   0103C0  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2301   0103C2  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2302   0103C4  C0D4  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2303   0103C8  C0D5  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2304   0103CC  C0D6  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2305   0103D0  C0D7  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2306   0103D4  C0D8  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2307   0103D8  C0D9  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2308   0103DC  C0DA  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2309   0103E0  C0DB  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2310   0103E4  EC18  F08A         	call	___omul	;wreg free
  2311   0103E8  C001  F0DC         	movff	?___omul,_convert_rgb2hue$2847
  2312   0103EC  C002  F0DD         	movff	?___omul+1,_convert_rgb2hue$2847+1
  2313   0103F0  C003  F0DE         	movff	?___omul+2,_convert_rgb2hue$2847+2
  2314   0103F4  C004  F0DF         	movff	?___omul+3,_convert_rgb2hue$2847+3
  2315   0103F8  C005  F0E0         	movff	?___omul+4,_convert_rgb2hue$2847+4
  2316   0103FC  C006  F0E1         	movff	?___omul+5,_convert_rgb2hue$2847+5
  2317   010400  C007  F0E2         	movff	?___omul+6,_convert_rgb2hue$2847+6
  2318   010404  C008  F0E3         	movff	?___omul+7,_convert_rgb2hue$2847+7
  2319                           
  2320                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2321   010408  0E64               	movlw	100
  2322   01040A  6E09               	movwf	___omul@multiplicand^0,c
  2323   01040C  0E00               	movlw	0
  2324   01040E  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2325   010410  0E00               	movlw	0
  2326   010412  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2327   010414  0E00               	movlw	0
  2328   010416  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2329   010418  0E00               	movlw	0
  2330   01041A  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2331   01041C  0E00               	movlw	0
  2332   01041E  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2333   010420  0E00               	movlw	0
  2334   010422  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2335   010424  0E00               	movlw	0
  2336   010426  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2337   010428  C0DC  F001         	movff	_convert_rgb2hue$2847,___omul@multiplier
  2338   01042C  C0DD  F002         	movff	_convert_rgb2hue$2847+1,___omul@multiplier+1
  2339   010430  C0DE  F003         	movff	_convert_rgb2hue$2847+2,___omul@multiplier+2
  2340   010434  C0DF  F004         	movff	_convert_rgb2hue$2847+3,___omul@multiplier+3
  2341   010438  C0E0  F005         	movff	_convert_rgb2hue$2847+4,___omul@multiplier+4
  2342   01043C  C0E1  F006         	movff	_convert_rgb2hue$2847+5,___omul@multiplier+5
  2343   010440  C0E2  F007         	movff	_convert_rgb2hue$2847+6,___omul@multiplier+6
  2344   010444  C0E3  F008         	movff	_convert_rgb2hue$2847+7,___omul@multiplier+7
  2345   010448  EC18  F08A         	call	___omul	;wreg free
  2346   01044C  C001  F019         	movff	?___omul,___lodiv@dividend
  2347   010450  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2348   010454  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2349   010458  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2350   01045C  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2351   010460  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2352   010464  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2353   010468  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2354   01046C  C0CC  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2355   010470  C0CD  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2356   010474  C0CE  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2357   010478  C0CF  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2358   01047C  C0D0  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2359   010480  C0D1  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2360   010484  C0D2  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2361   010488  C0D3  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2362   01048C  EC72  F087         	call	___lodiv	;wreg free
  2363   010490  C019  F060         	movff	?___lodiv,??_convert_rgb2hue
  2364   010494  C01A  F061         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2365   010498  C01B  F062         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2366   01049C  C01C  F063         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2367   0104A0  C01D  F064         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2368   0104A4  C01E  F065         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2369   0104A8  C01F  F066         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2370   0104AC  C020  F067         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2371   0104B0  C060  F0E6         	movff	??_convert_rgb2hue,convert_rgb2hue@r
  2372   0104B4  C061  F0E7         	movff	??_convert_rgb2hue+1,convert_rgb2hue@r+1
  2373                           
  2374                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2375   0104B8  EE20 F004          	lfsr	2,4
  2376   0104BC  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2377   0104BE  26D9               	addwf	fsr2l,f,c
  2378   0104C0  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2379   0104C2  22DA               	addwfc	fsr2h,f,c
  2380   0104C4  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2381   0104C8  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2382   0104CC  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2383   0104D0  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2384   0104D4  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2385   0104D6  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2386   0104D8  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2387   0104DA  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2388   0104DC  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2389   0104DE  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2390   0104E0  EE20 F002          	lfsr	2,2
  2391   0104E4  504B               	movf	convert_rgb2hue@cCurr^0,w,c
  2392   0104E6  26D9               	addwf	fsr2l,f,c
  2393   0104E8  504C               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  2394   0104EA  22DA               	addwfc	fsr2h,f,c
  2395   0104EC  CFDE F062          	movff	postinc2,??_convert_rgb2hue+2
  2396   0104F0  CFDD F063          	movff	postdec2,??_convert_rgb2hue+3
  2397   0104F4  C062  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2398   0104F8  C063  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2399   0104FC  6A03               	clrf	(___omul@multiplier+2)^0,c
  2400   0104FE  6A04               	clrf	(___omul@multiplier+3)^0,c
  2401   010500  6A05               	clrf	(___omul@multiplier+4)^0,c
  2402   010502  6A06               	clrf	(___omul@multiplier+5)^0,c
  2403   010504  6A07               	clrf	(___omul@multiplier+6)^0,c
  2404   010506  6A08               	clrf	(___omul@multiplier+7)^0,c
  2405   010508  EC18  F08A         	call	___omul	;wreg free
  2406   01050C  C001  F0D4         	movff	?___omul,_convert_rgb2hue$2846
  2407   010510  C002  F0D5         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2408   010514  C003  F0D6         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2409   010518  C004  F0D7         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2410   01051C  C005  F0D8         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2411   010520  C006  F0D9         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2412   010524  C007  F0DA         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2413   010528  C008  F0DB         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2414                           
  2415                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2416   01052C  C049  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  2417   010530  C04A  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  2418   010534  CFDE F060          	movff	postinc2,??_convert_rgb2hue
  2419   010538  CFDD F061          	movff	postdec2,??_convert_rgb2hue+1
  2420   01053C  C060  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2421   010540  C061  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2422   010544  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2423   010546  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2424   010548  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2425   01054A  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2426   01054C  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2427   01054E  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2428   010550  C0D4  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2429   010554  C0D5  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2430   010558  C0D6  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2431   01055C  C0D7  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2432   010560  C0D8  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2433   010564  C0D9  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2434   010568  C0DA  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2435   01056C  C0DB  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2436   010570  EC18  F08A         	call	___omul	;wreg free
  2437   010574  C001  F0DC         	movff	?___omul,_convert_rgb2hue$2847
  2438   010578  C002  F0DD         	movff	?___omul+1,_convert_rgb2hue$2847+1
  2439   01057C  C003  F0DE         	movff	?___omul+2,_convert_rgb2hue$2847+2
  2440   010580  C004  F0DF         	movff	?___omul+3,_convert_rgb2hue$2847+3
  2441   010584  C005  F0E0         	movff	?___omul+4,_convert_rgb2hue$2847+4
  2442   010588  C006  F0E1         	movff	?___omul+5,_convert_rgb2hue$2847+5
  2443   01058C  C007  F0E2         	movff	?___omul+6,_convert_rgb2hue$2847+6
  2444   010590  C008  F0E3         	movff	?___omul+7,_convert_rgb2hue$2847+7
  2445                           
  2446                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2447   010594  0E64               	movlw	100
  2448   010596  6E09               	movwf	___omul@multiplicand^0,c
  2449   010598  0E00               	movlw	0
  2450   01059A  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2451   01059C  0E00               	movlw	0
  2452   01059E  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2453   0105A0  0E00               	movlw	0
  2454   0105A2  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2455   0105A4  0E00               	movlw	0
  2456   0105A6  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2457   0105A8  0E00               	movlw	0
  2458   0105AA  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2459   0105AC  0E00               	movlw	0
  2460   0105AE  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2461   0105B0  0E00               	movlw	0
  2462   0105B2  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2463   0105B4  C0DC  F001         	movff	_convert_rgb2hue$2847,___omul@multiplier
  2464   0105B8  C0DD  F002         	movff	_convert_rgb2hue$2847+1,___omul@multiplier+1
  2465   0105BC  C0DE  F003         	movff	_convert_rgb2hue$2847+2,___omul@multiplier+2
  2466   0105C0  C0DF  F004         	movff	_convert_rgb2hue$2847+3,___omul@multiplier+3
  2467   0105C4  C0E0  F005         	movff	_convert_rgb2hue$2847+4,___omul@multiplier+4
  2468   0105C8  C0E1  F006         	movff	_convert_rgb2hue$2847+5,___omul@multiplier+5
  2469   0105CC  C0E2  F007         	movff	_convert_rgb2hue$2847+6,___omul@multiplier+6
  2470   0105D0  C0E3  F008         	movff	_convert_rgb2hue$2847+7,___omul@multiplier+7
  2471   0105D4  EC18  F08A         	call	___omul	;wreg free
  2472   0105D8  C001  F019         	movff	?___omul,___lodiv@dividend
  2473   0105DC  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2474   0105E0  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2475   0105E4  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2476   0105E8  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2477   0105EC  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2478   0105F0  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2479   0105F4  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2480   0105F8  C0CC  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2481   0105FC  C0CD  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2482   010600  C0CE  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2483   010604  C0CF  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2484   010608  C0D0  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2485   01060C  C0D1  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2486   010610  C0D2  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2487   010614  C0D3  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2488   010618  EC72  F087         	call	___lodiv	;wreg free
  2489   01061C  C019  F060         	movff	?___lodiv,??_convert_rgb2hue
  2490   010620  C01A  F061         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2491   010624  C01B  F062         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2492   010628  C01C  F063         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2493   01062C  C01D  F064         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2494   010630  C01E  F065         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2495   010634  C01F  F066         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2496   010638  C020  F067         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2497   01063C  C060  F0E8         	movff	??_convert_rgb2hue,convert_rgb2hue@g
  2498   010640  C061  F0E9         	movff	??_convert_rgb2hue+1,convert_rgb2hue@g+1
  2499   010644                     
  2500                           ;color.c: 110:         b = 100 - r - g;
  2501   010644  C0E6  F060         	movff	convert_rgb2hue@r,??_convert_rgb2hue
  2502   010648  C0E7  F061         	movff	convert_rgb2hue@r+1,??_convert_rgb2hue+1
  2503   01064C  0100               	movlb	0	; () banked
  2504   01064E  1F60               	comf	??_convert_rgb2hue& (0+255),f,b
  2505   010650  1F61               	comf	(??_convert_rgb2hue+1)& (0+255),f,b
  2506   010652  4B60               	infsnz	??_convert_rgb2hue& (0+255),f,b
  2507   010654  2B61               	incf	(??_convert_rgb2hue+1)& (0+255),f,b
  2508   010656  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2509   010658  5F60               	subwf	??_convert_rgb2hue& (0+255),f,b
  2510   01065A  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2511   01065C  5B61               	subwfb	(??_convert_rgb2hue+1)& (0+255),f,b
  2512   01065E  0E64               	movlw	100
  2513   010660  2560               	addwf	??_convert_rgb2hue& (0+255),w,b
  2514   010662  6FE4               	movwf	convert_rgb2hue@b& (0+255),b
  2515   010664  0E00               	movlw	0
  2516   010666  2161               	addwfc	(??_convert_rgb2hue+1)& (0+255),w,b
  2517   010668  6FE5               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2518   01066A                     l3582:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;color.c: 113:     char red_weighted[20];;color.c: 114:     char green_weighted[20];;col
      +                          or.c: 115:     char blue_weighted[20];;color.c: 117:     sprintf(red_weighted, "red_weig
      +                          hted =%03d", r);
  2522   01066A  0E86               	movlw	low convert_rgb2hue@red_weighted
  2523   01066C  6E34               	movwf	sprintf@s^0,c
  2524   01066E  6A35               	clrf	(sprintf@s+1)^0,c
  2525   010670  0EAB               	movlw	low STR_1
  2526   010672  6E36               	movwf	sprintf@fmt^0,c
  2527   010674  0EFF               	movlw	high STR_1
  2528   010676  6E37               	movwf	(sprintf@fmt+1)^0,c
  2529   010678  C0E6  F038         	movff	convert_rgb2hue@r,?_sprintf+4
  2530   01067C  C0E7  F039         	movff	convert_rgb2hue@r+1,?_sprintf+5
  2531   010680  EC67  F08C         	call	_sprintf	;wreg free
  2532   010684                     
  2533                           ;color.c: 118:     sprintf(green_weighted, "green_weighted =%03d", g);
  2534   010684  0E9A               	movlw	low convert_rgb2hue@green_weighted
  2535   010686  6E34               	movwf	sprintf@s^0,c
  2536   010688  6A35               	clrf	(sprintf@s+1)^0,c
  2537   01068A  0E6F               	movlw	low STR_2
  2538   01068C  6E36               	movwf	sprintf@fmt^0,c
  2539   01068E  0EFF               	movlw	high STR_2
  2540   010690  6E37               	movwf	(sprintf@fmt+1)^0,c
  2541   010692  C0E8  F038         	movff	convert_rgb2hue@g,?_sprintf+4
  2542   010696  C0E9  F039         	movff	convert_rgb2hue@g+1,?_sprintf+5
  2543   01069A  EC67  F08C         	call	_sprintf	;wreg free
  2544   01069E                     
  2545                           ;color.c: 119:     sprintf(blue_weighted, "blue_weighted =%03d", b);
  2546   01069E  0EAE               	movlw	low convert_rgb2hue@blue_weighted
  2547   0106A0  6E34               	movwf	sprintf@s^0,c
  2548   0106A2  6A35               	clrf	(sprintf@s+1)^0,c
  2549   0106A4  0E84               	movlw	low STR_3
  2550   0106A6  6E36               	movwf	sprintf@fmt^0,c
  2551   0106A8  0EFF               	movlw	high STR_3
  2552   0106AA  6E37               	movwf	(sprintf@fmt+1)^0,c
  2553   0106AC  C0E4  F038         	movff	convert_rgb2hue@b,?_sprintf+4
  2554   0106B0  C0E5  F039         	movff	convert_rgb2hue@b+1,?_sprintf+5
  2555   0106B4  EC67  F08C         	call	_sprintf	;wreg free
  2556   0106B8                     
  2557                           ;color.c: 120:     sendStringSerial4(red_weighted);
  2558   0106B8  0E86               	movlw	low convert_rgb2hue@red_weighted
  2559   0106BA  6E02               	movwf	sendStringSerial4@string^0,c
  2560   0106BC  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2561   0106BE  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  2562   0106C2                     
  2563                           ;color.c: 121:     sendStringSerial4(green_weighted);
  2564   0106C2  0E9A               	movlw	low convert_rgb2hue@green_weighted
  2565   0106C4  6E02               	movwf	sendStringSerial4@string^0,c
  2566   0106C6  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2567   0106C8  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  2568   0106CC                     
  2569                           ;color.c: 122:     sendStringSerial4(blue_weighted);
  2570   0106CC  0EAE               	movlw	low convert_rgb2hue@blue_weighted
  2571   0106CE  6E02               	movwf	sendStringSerial4@string^0,c
  2572   0106D0  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2573   0106D2  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  2574   0106D6                     
  2575                           ;color.c: 126:     if (r>g & r>b){
  2576   0106D6  0100               	movlb	0	; () banked
  2577   0106D8  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2578   0106DA  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2579   0106DC  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2580   0106DE  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2581   0106E0  B0D8               	btfsc	status,0,c
  2582   0106E2  EF75  F083         	goto	u2561
  2583   0106E6  EF77  F083         	goto	u2560
  2584   0106EA                     u2561:
  2585   0106EA  EFAB  F083         	goto	l3604
  2586   0106EE                     u2560:
  2587   0106EE                     
  2588                           ; BSR set to: 0
  2589   0106EE  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2590   0106F0  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2591   0106F2  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2592   0106F4  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2593   0106F6  B0D8               	btfsc	status,0,c
  2594   0106F8  EF80  F083         	goto	u2571
  2595   0106FC  EF82  F083         	goto	u2570
  2596   010700                     u2571:
  2597   010700  EFAB  F083         	goto	l3604
  2598   010704                     u2570:
  2599   010704                     
  2600                           ; BSR set to: 0
  2601                           ;color.c: 127:         if (b>g){
  2602   010704  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2603   010706  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2604   010708  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2605   01070A  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2606   01070C  B0D8               	btfsc	status,0,c
  2607   01070E  EF8B  F083         	goto	u2581
  2608   010712  EF8D  F083         	goto	u2580
  2609   010716                     u2581:
  2610   010716  EF9D  F083         	goto	l3602
  2611   01071A                     u2580:
  2612   01071A                     
  2613                           ; BSR set to: 0
  2614   01071A  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2615   01071C  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2616   01071E  6E07               	movwf	___lwdiv@dividend^0,c
  2617   010720  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2618   010722  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2619   010724  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2620   010726  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2621   010728  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2622   01072A  6E09               	movwf	___lwdiv@divisor^0,c
  2623   01072C  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2624   01072E  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2625   010730  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2626   010732  ECFA  F08A         	call	___lwdiv	;wreg free
  2627                           
  2628                           ;color.c: 129:         } else {
  2629   010736  EFAB  F083         	goto	l3604
  2630   01073A                     l3602:
  2631                           
  2632                           ; BSR set to: 0
  2633   01073A  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2634   01073C  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2635   01073E  6E07               	movwf	___lwdiv@dividend^0,c
  2636   010740  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2637   010742  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2638   010744  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2639   010746  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2640   010748  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2641   01074A  6E09               	movwf	___lwdiv@divisor^0,c
  2642   01074C  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2643   01074E  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2644   010750  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2645   010752  ECFA  F08A         	call	___lwdiv	;wreg free
  2646   010756                     l3604:
  2647                           
  2648                           ;color.c: 134:     if (g>r & g>b){
  2649   010756  0100               	movlb	0	; () banked
  2650   010758  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2651   01075A  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2652   01075C  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2653   01075E  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2654   010760  B0D8               	btfsc	status,0,c
  2655   010762  EFB5  F083         	goto	u2591
  2656   010766  EFB7  F083         	goto	u2590
  2657   01076A                     u2591:
  2658   01076A  EFEB  F083         	goto	l3614
  2659   01076E                     u2590:
  2660   01076E                     
  2661                           ; BSR set to: 0
  2662   01076E  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2663   010770  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2664   010772  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2665   010774  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2666   010776  B0D8               	btfsc	status,0,c
  2667   010778  EFC0  F083         	goto	u2601
  2668   01077C  EFC2  F083         	goto	u2600
  2669   010780                     u2601:
  2670   010780  EFEB  F083         	goto	l3614
  2671   010784                     u2600:
  2672   010784                     
  2673                           ; BSR set to: 0
  2674                           ;color.c: 135:         if (r>b){
  2675   010784  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2676   010786  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2677   010788  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2678   01078A  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2679   01078C  B0D8               	btfsc	status,0,c
  2680   01078E  EFCB  F083         	goto	u2611
  2681   010792  EFCD  F083         	goto	u2610
  2682   010796                     u2611:
  2683   010796  EFDD  F083         	goto	l3612
  2684   01079A                     u2610:
  2685   01079A                     
  2686                           ; BSR set to: 0
  2687   01079A  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2688   01079C  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2689   01079E  6E07               	movwf	___lwdiv@dividend^0,c
  2690   0107A0  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2691   0107A2  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2692   0107A4  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2693   0107A6  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2694   0107A8  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2695   0107AA  6E09               	movwf	___lwdiv@divisor^0,c
  2696   0107AC  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2697   0107AE  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2698   0107B0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2699   0107B2  ECFA  F08A         	call	___lwdiv	;wreg free
  2700                           
  2701                           ;color.c: 137:         } else {
  2702   0107B6  EFEB  F083         	goto	l3614
  2703   0107BA                     l3612:
  2704                           
  2705                           ; BSR set to: 0
  2706   0107BA  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2707   0107BC  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2708   0107BE  6E07               	movwf	___lwdiv@dividend^0,c
  2709   0107C0  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2710   0107C2  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2711   0107C4  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2712   0107C6  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2713   0107C8  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2714   0107CA  6E09               	movwf	___lwdiv@divisor^0,c
  2715   0107CC  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2716   0107CE  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2717   0107D0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2718   0107D2  ECFA  F08A         	call	___lwdiv	;wreg free
  2719   0107D6                     l3614:
  2720                           
  2721                           ;color.c: 141:     if (b>r & b>g){
  2722   0107D6  0100               	movlb	0	; () banked
  2723   0107D8  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2724   0107DA  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2725   0107DC  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2726   0107DE  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2727   0107E0  B0D8               	btfsc	status,0,c
  2728   0107E2  EFF5  F083         	goto	u2621
  2729   0107E6  EFF7  F083         	goto	u2620
  2730   0107EA                     u2621:
  2731   0107EA  EF3D  F084         	goto	l81
  2732   0107EE                     u2620:
  2733   0107EE                     
  2734                           ; BSR set to: 0
  2735   0107EE  51E4               	movf	convert_rgb2hue@b& (0+255),w,b
  2736   0107F0  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2737   0107F2  51E5               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2738   0107F4  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2739   0107F6  B0D8               	btfsc	status,0,c
  2740   0107F8  EF00  F084         	goto	u2631
  2741   0107FC  EF02  F084         	goto	u2630
  2742   010800                     u2631:
  2743   010800  EF3D  F084         	goto	l81
  2744   010804                     u2630:
  2745   010804                     
  2746                           ; BSR set to: 0
  2747                           ;color.c: 142:         if (r>g){
  2748   010804  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2749   010806  5DE8               	subwf	convert_rgb2hue@g& (0+255),w,b
  2750   010808  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2751   01080A  59E9               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2752   01080C  B0D8               	btfsc	status,0,c
  2753   01080E  EF0B  F084         	goto	u2641
  2754   010812  EF0D  F084         	goto	u2640
  2755   010816                     u2641:
  2756   010816  EF24  F084         	goto	l3622
  2757   01081A                     u2640:
  2758   01081A                     
  2759                           ; BSR set to: 0
  2760                           ;color.c: 143:             hue=4+(r-g)/(b-g);
  2761   01081A  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2762   01081C  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2763   01081E  6E07               	movwf	___lwdiv@dividend^0,c
  2764   010820  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2765   010822  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2766   010824  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2767   010826  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2768   010828  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2769   01082A  6E09               	movwf	___lwdiv@divisor^0,c
  2770   01082C  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2771   01082E  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2772   010830  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2773   010832  ECFA  F08A         	call	___lwdiv	;wreg free
  2774   010836  0E04               	movlw	4
  2775   010838  2407               	addwf	?___lwdiv^0,w,c
  2776   01083A  0100               	movlb	0	; () banked
  2777   01083C  6FCA               	movwf	convert_rgb2hue@hue& (0+255),b
  2778   01083E  0E00               	movlw	0
  2779   010840  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2780   010842  6FCB               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2781                           
  2782                           ;color.c: 144:         } else {
  2783   010844  EF39  F084         	goto	l3624
  2784   010848                     l3622:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;color.c: 145:             hue=4+(r-g)/(b-r);
  2788   010848  51E8               	movf	convert_rgb2hue@g& (0+255),w,b
  2789   01084A  5DE6               	subwf	convert_rgb2hue@r& (0+255),w,b
  2790   01084C  6E07               	movwf	___lwdiv@dividend^0,c
  2791   01084E  51E9               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2792   010850  59E7               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2793   010852  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2794   010854  51E6               	movf	convert_rgb2hue@r& (0+255),w,b
  2795   010856  5DE4               	subwf	convert_rgb2hue@b& (0+255),w,b
  2796   010858  6E09               	movwf	___lwdiv@divisor^0,c
  2797   01085A  51E7               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2798   01085C  59E5               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2799   01085E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2800   010860  ECFA  F08A         	call	___lwdiv	;wreg free
  2801   010864  0E04               	movlw	4
  2802   010866  2407               	addwf	?___lwdiv^0,w,c
  2803   010868  0100               	movlb	0	; () banked
  2804   01086A  6FCA               	movwf	convert_rgb2hue@hue& (0+255),b
  2805   01086C  0E00               	movlw	0
  2806   01086E  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2807   010870  6FCB               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2808   010872                     l3624:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;color.c: 148:     return hue;
  2812   010872  C0CA  F049         	movff	convert_rgb2hue@hue,?_convert_rgb2hue
  2813   010876  C0CB  F04A         	movff	convert_rgb2hue@hue+1,?_convert_rgb2hue+1
  2814   01087A                     l81:
  2815                           
  2816                           ; BSR set to: 0
  2817   01087A  0012               	return		;funcret
  2818   01087C                     __end_of_convert_rgb2hue:
  2819                           	callstack 0
  2820                           
  2821 ;; *************** function ___omul *****************
  2822 ;; Defined at:
  2823 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul64.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;  multiplier      8    0[COMRAM] unsigned long long 
  2826 ;;  multiplicand    8    8[COMRAM] unsigned long long 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  product         8   16[COMRAM] unsigned long long 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  8    0[COMRAM] unsigned long long 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2838 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;Total ram usage:       24 bytes
  2843 ;; Hardware stack levels used: 1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_convert_rgb2hue
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text6
  2852   011430                     __ptext6:
  2853                           	callstack 0
  2854   011430                     ___omul:
  2855                           	callstack 28
  2856   011430  EE20  F011         	lfsr	2,___omul@product
  2857   011434  0E07               	movlw	7
  2858   011436                     u2481:
  2859   011436  6ADE               	clrf	postinc2,c
  2860   011438  06E8               	decf	wreg,f,c
  2861   01143A  E2FD               	bc	u2481
  2862   01143C                     l3524:
  2863   01143C  A001               	btfss	___omul@multiplier^0,0,c
  2864   01143E  EF23  F08A         	goto	u2491
  2865   011442  EF25  F08A         	goto	u2490
  2866   011446                     u2491:
  2867   011446  EF35  F08A         	goto	l3528
  2868   01144A                     u2490:
  2869   01144A  5009               	movf	___omul@multiplicand^0,w,c
  2870   01144C  2611               	addwf	___omul@product^0,f,c
  2871   01144E  500A               	movf	(___omul@multiplicand+1)^0,w,c
  2872   011450  2212               	addwfc	(___omul@product+1)^0,f,c
  2873   011452  500B               	movf	(___omul@multiplicand+2)^0,w,c
  2874   011454  2213               	addwfc	(___omul@product+2)^0,f,c
  2875   011456  500C               	movf	(___omul@multiplicand+3)^0,w,c
  2876   011458  2214               	addwfc	(___omul@product+3)^0,f,c
  2877   01145A  500D               	movf	(___omul@multiplicand+4)^0,w,c
  2878   01145C  2215               	addwfc	(___omul@product+4)^0,f,c
  2879   01145E  500E               	movf	(___omul@multiplicand+5)^0,w,c
  2880   011460  2216               	addwfc	(___omul@product+5)^0,f,c
  2881   011462  500F               	movf	(___omul@multiplicand+6)^0,w,c
  2882   011464  2217               	addwfc	(___omul@product+6)^0,f,c
  2883   011466  5010               	movf	(___omul@multiplicand+7)^0,w,c
  2884   011468  2218               	addwfc	(___omul@product+7)^0,f,c
  2885   01146A                     l3528:
  2886   01146A  90D8               	bcf	status,0,c
  2887   01146C  3609               	rlcf	___omul@multiplicand^0,f,c
  2888   01146E  360A               	rlcf	(___omul@multiplicand+1)^0,f,c
  2889   011470  360B               	rlcf	(___omul@multiplicand+2)^0,f,c
  2890   011472  360C               	rlcf	(___omul@multiplicand+3)^0,f,c
  2891   011474  360D               	rlcf	(___omul@multiplicand+4)^0,f,c
  2892   011476  360E               	rlcf	(___omul@multiplicand+5)^0,f,c
  2893   011478  360F               	rlcf	(___omul@multiplicand+6)^0,f,c
  2894   01147A  3610               	rlcf	(___omul@multiplicand+7)^0,f,c
  2895   01147C  90D8               	bcf	status,0,c
  2896   01147E  3208               	rrcf	(___omul@multiplier+7)^0,f,c
  2897   011480  3207               	rrcf	(___omul@multiplier+6)^0,f,c
  2898   011482  3206               	rrcf	(___omul@multiplier+5)^0,f,c
  2899   011484  3205               	rrcf	(___omul@multiplier+4)^0,f,c
  2900   011486  3204               	rrcf	(___omul@multiplier+3)^0,f,c
  2901   011488  3203               	rrcf	(___omul@multiplier+2)^0,f,c
  2902   01148A  3202               	rrcf	(___omul@multiplier+1)^0,f,c
  2903   01148C  3201               	rrcf	___omul@multiplier^0,f,c
  2904   01148E  5001               	movf	___omul@multiplier^0,w,c
  2905   011490  1002               	iorwf	(___omul@multiplier+1)^0,w,c
  2906   011492  1003               	iorwf	(___omul@multiplier+2)^0,w,c
  2907   011494  1004               	iorwf	(___omul@multiplier+3)^0,w,c
  2908   011496  1005               	iorwf	(___omul@multiplier+4)^0,w,c
  2909   011498  1006               	iorwf	(___omul@multiplier+5)^0,w,c
  2910   01149A  1007               	iorwf	(___omul@multiplier+6)^0,w,c
  2911   01149C  1008               	iorwf	(___omul@multiplier+7)^0,w,c
  2912   01149E  A4D8               	btfss	status,2,c
  2913   0114A0  EF54  F08A         	goto	u2501
  2914   0114A4  EF56  F08A         	goto	u2500
  2915   0114A8                     u2501:
  2916   0114A8  EF1E  F08A         	goto	l3524
  2917   0114AC                     u2500:
  2918   0114AC  C011  F001         	movff	___omul@product,?___omul
  2919   0114B0  C012  F002         	movff	___omul@product+1,?___omul+1
  2920   0114B4  C013  F003         	movff	___omul@product+2,?___omul+2
  2921   0114B8  C014  F004         	movff	___omul@product+3,?___omul+3
  2922   0114BC  C015  F005         	movff	___omul@product+4,?___omul+4
  2923   0114C0  C016  F006         	movff	___omul@product+5,?___omul+5
  2924   0114C4  C017  F007         	movff	___omul@product+6,?___omul+6
  2925   0114C8  C018  F008         	movff	___omul@product+7,?___omul+7
  2926   0114CC  0012               	return		;funcret
  2927   0114CE                     __end_of___omul:
  2928                           	callstack 0
  2929                           
  2930 ;; *************** function ___lwdiv *****************
  2931 ;; Defined at:
  2932 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  dividend        2    6[COMRAM] unsigned int 
  2935 ;;  divisor         2    8[COMRAM] unsigned int 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  quotient        2   11[COMRAM] unsigned int 
  2938 ;;  counter         1   10[COMRAM] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    6[COMRAM] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2952 ;;Total ram usage:        7 bytes
  2953 ;; Hardware stack levels used: 1
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		_convert_rgb2hue
  2958 ;;		_ADC2String
  2959 ;;		_setMotorPWM
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text7
  2964   0115F4                     __ptext7:
  2965                           	callstack 0
  2966   0115F4                     ___lwdiv:
  2967                           	callstack 27
  2968   0115F4  0E00               	movlw	0
  2969   0115F6  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  2970   0115F8  0E00               	movlw	0
  2971   0115FA  6E0C               	movwf	___lwdiv@quotient^0,c
  2972   0115FC  5009               	movf	___lwdiv@divisor^0,w,c
  2973   0115FE  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2974   011600  B4D8               	btfsc	status,2,c
  2975   011602  EF05  F08B         	goto	u2421
  2976   011606  EF07  F08B         	goto	u2420
  2977   01160A                     u2421:
  2978   01160A  EF2F  F08B         	goto	l959
  2979   01160E                     u2420:
  2980   01160E  0E01               	movlw	1
  2981   011610  6E0B               	movwf	___lwdiv@counter^0,c
  2982   011612  EF0F  F08B         	goto	l3450
  2983   011616                     l3448:
  2984   011616  90D8               	bcf	status,0,c
  2985   011618  3609               	rlcf	___lwdiv@divisor^0,f,c
  2986   01161A  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2987   01161C  2A0B               	incf	___lwdiv@counter^0,f,c
  2988   01161E                     l3450:
  2989   01161E  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2990   011620  EF14  F08B         	goto	u2431
  2991   011624  EF16  F08B         	goto	u2430
  2992   011628                     u2431:
  2993   011628  EF0B  F08B         	goto	l3448
  2994   01162C                     u2430:
  2995   01162C                     l3452:
  2996   01162C  90D8               	bcf	status,0,c
  2997   01162E  360C               	rlcf	___lwdiv@quotient^0,f,c
  2998   011630  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2999   011632  5009               	movf	___lwdiv@divisor^0,w,c
  3000   011634  5C07               	subwf	___lwdiv@dividend^0,w,c
  3001   011636  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3002   011638  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3003   01163A  A0D8               	btfss	status,0,c
  3004   01163C  EF22  F08B         	goto	u2441
  3005   011640  EF24  F08B         	goto	u2440
  3006   011644                     u2441:
  3007   011644  EF29  F08B         	goto	l3460
  3008   011648                     u2440:
  3009   011648  5009               	movf	___lwdiv@divisor^0,w,c
  3010   01164A  5E07               	subwf	___lwdiv@dividend^0,f,c
  3011   01164C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3012   01164E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3013   011650  800C               	bsf	___lwdiv@quotient^0,0,c
  3014   011652                     l3460:
  3015   011652  90D8               	bcf	status,0,c
  3016   011654  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3017   011656  3209               	rrcf	___lwdiv@divisor^0,f,c
  3018   011658  2E0B               	decfsz	___lwdiv@counter^0,f,c
  3019   01165A  EF16  F08B         	goto	l3452
  3020   01165E                     l959:
  3021   01165E  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3022   011662  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3023   011666  0012               	return		;funcret
  3024   011668                     __end_of___lwdiv:
  3025                           	callstack 0
  3026                           
  3027 ;; *************** function ___lodiv *****************
  3028 ;; Defined at:
  3029 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lodiv.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  dividend        8   24[COMRAM] unsigned long long 
  3032 ;;  divisor         8   32[COMRAM] unsigned long long 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  quotient        8   40[COMRAM] unsigned long long 
  3035 ;;  counter         1   48[COMRAM] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  8   24[COMRAM] unsigned long long 
  3038 ;; Registers used:
  3039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3045 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3049 ;;Total ram usage:       25 bytes
  3050 ;; Hardware stack levels used: 1
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_convert_rgb2hue
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text8
  3059   010EE4                     __ptext8:
  3060                           	callstack 0
  3061   010EE4                     ___lodiv:
  3062                           	callstack 28
  3063   010EE4  EE20  F029         	lfsr	2,___lodiv@quotient
  3064   010EE8  0E07               	movlw	7
  3065   010EEA                     u2511:
  3066   010EEA  6ADE               	clrf	postinc2,c
  3067   010EEC  06E8               	decf	wreg,f,c
  3068   010EEE  E2FD               	bc	u2511
  3069   010EF0  5021               	movf	___lodiv@divisor^0,w,c
  3070   010EF2  1022               	iorwf	(___lodiv@divisor+1)^0,w,c
  3071   010EF4  1023               	iorwf	(___lodiv@divisor+2)^0,w,c
  3072   010EF6  1024               	iorwf	(___lodiv@divisor+3)^0,w,c
  3073   010EF8  1025               	iorwf	(___lodiv@divisor+4)^0,w,c
  3074   010EFA  1026               	iorwf	(___lodiv@divisor+5)^0,w,c
  3075   010EFC  1027               	iorwf	(___lodiv@divisor+6)^0,w,c
  3076   010EFE  1028               	iorwf	(___lodiv@divisor+7)^0,w,c
  3077   010F00  B4D8               	btfsc	status,2,c
  3078   010F02  EF85  F087         	goto	u2521
  3079   010F06  EF87  F087         	goto	u2520
  3080   010F0A                     u2521:
  3081   010F0A  EFD9  F087         	goto	l906
  3082   010F0E                     u2520:
  3083   010F0E  0E01               	movlw	1
  3084   010F10  6E31               	movwf	___lodiv@counter^0,c
  3085   010F12  EF95  F087         	goto	l3540
  3086   010F16                     l3538:
  3087   010F16  90D8               	bcf	status,0,c
  3088   010F18  3621               	rlcf	___lodiv@divisor^0,f,c
  3089   010F1A  3622               	rlcf	(___lodiv@divisor+1)^0,f,c
  3090   010F1C  3623               	rlcf	(___lodiv@divisor+2)^0,f,c
  3091   010F1E  3624               	rlcf	(___lodiv@divisor+3)^0,f,c
  3092   010F20  3625               	rlcf	(___lodiv@divisor+4)^0,f,c
  3093   010F22  3626               	rlcf	(___lodiv@divisor+5)^0,f,c
  3094   010F24  3627               	rlcf	(___lodiv@divisor+6)^0,f,c
  3095   010F26  3628               	rlcf	(___lodiv@divisor+7)^0,f,c
  3096   010F28  2A31               	incf	___lodiv@counter^0,f,c
  3097   010F2A                     l3540:
  3098   010F2A  AE28               	btfss	(___lodiv@divisor+7)^0,7,c
  3099   010F2C  EF9A  F087         	goto	u2531
  3100   010F30  EF9C  F087         	goto	u2530
  3101   010F34                     u2531:
  3102   010F34  EF8B  F087         	goto	l3538
  3103   010F38                     u2530:
  3104   010F38                     l3542:
  3105   010F38  90D8               	bcf	status,0,c
  3106   010F3A  3629               	rlcf	___lodiv@quotient^0,f,c
  3107   010F3C  362A               	rlcf	(___lodiv@quotient+1)^0,f,c
  3108   010F3E  362B               	rlcf	(___lodiv@quotient+2)^0,f,c
  3109   010F40  362C               	rlcf	(___lodiv@quotient+3)^0,f,c
  3110   010F42  362D               	rlcf	(___lodiv@quotient+4)^0,f,c
  3111   010F44  362E               	rlcf	(___lodiv@quotient+5)^0,f,c
  3112   010F46  362F               	rlcf	(___lodiv@quotient+6)^0,f,c
  3113   010F48  3630               	rlcf	(___lodiv@quotient+7)^0,f,c
  3114   010F4A  5021               	movf	___lodiv@divisor^0,w,c
  3115   010F4C  5C19               	subwf	___lodiv@dividend^0,w,c
  3116   010F4E  5022               	movf	(___lodiv@divisor+1)^0,w,c
  3117   010F50  581A               	subwfb	(___lodiv@dividend+1)^0,w,c
  3118   010F52  5023               	movf	(___lodiv@divisor+2)^0,w,c
  3119   010F54  581B               	subwfb	(___lodiv@dividend+2)^0,w,c
  3120   010F56  5024               	movf	(___lodiv@divisor+3)^0,w,c
  3121   010F58  581C               	subwfb	(___lodiv@dividend+3)^0,w,c
  3122   010F5A  5025               	movf	(___lodiv@divisor+4)^0,w,c
  3123   010F5C  581D               	subwfb	(___lodiv@dividend+4)^0,w,c
  3124   010F5E  5026               	movf	(___lodiv@divisor+5)^0,w,c
  3125   010F60  581E               	subwfb	(___lodiv@dividend+5)^0,w,c
  3126   010F62  5027               	movf	(___lodiv@divisor+6)^0,w,c
  3127   010F64  581F               	subwfb	(___lodiv@dividend+6)^0,w,c
  3128   010F66  5028               	movf	(___lodiv@divisor+7)^0,w,c
  3129   010F68  5820               	subwfb	(___lodiv@dividend+7)^0,w,c
  3130   010F6A  A0D8               	btfss	status,0,c
  3131   010F6C  EFBA  F087         	goto	u2541
  3132   010F70  EFBC  F087         	goto	u2540
  3133   010F74                     u2541:
  3134   010F74  EFCD  F087         	goto	l3550
  3135   010F78                     u2540:
  3136   010F78  5021               	movf	___lodiv@divisor^0,w,c
  3137   010F7A  5E19               	subwf	___lodiv@dividend^0,f,c
  3138   010F7C  5022               	movf	(___lodiv@divisor+1)^0,w,c
  3139   010F7E  5A1A               	subwfb	(___lodiv@dividend+1)^0,f,c
  3140   010F80  5023               	movf	(___lodiv@divisor+2)^0,w,c
  3141   010F82  5A1B               	subwfb	(___lodiv@dividend+2)^0,f,c
  3142   010F84  5024               	movf	(___lodiv@divisor+3)^0,w,c
  3143   010F86  5A1C               	subwfb	(___lodiv@dividend+3)^0,f,c
  3144   010F88  5025               	movf	(___lodiv@divisor+4)^0,w,c
  3145   010F8A  5A1D               	subwfb	(___lodiv@dividend+4)^0,f,c
  3146   010F8C  5026               	movf	(___lodiv@divisor+5)^0,w,c
  3147   010F8E  5A1E               	subwfb	(___lodiv@dividend+5)^0,f,c
  3148   010F90  5027               	movf	(___lodiv@divisor+6)^0,w,c
  3149   010F92  5A1F               	subwfb	(___lodiv@dividend+6)^0,f,c
  3150   010F94  5028               	movf	(___lodiv@divisor+7)^0,w,c
  3151   010F96  5A20               	subwfb	(___lodiv@dividend+7)^0,f,c
  3152   010F98  8029               	bsf	___lodiv@quotient^0,0,c
  3153   010F9A                     l3550:
  3154   010F9A  90D8               	bcf	status,0,c
  3155   010F9C  3228               	rrcf	(___lodiv@divisor+7)^0,f,c
  3156   010F9E  3227               	rrcf	(___lodiv@divisor+6)^0,f,c
  3157   010FA0  3226               	rrcf	(___lodiv@divisor+5)^0,f,c
  3158   010FA2  3225               	rrcf	(___lodiv@divisor+4)^0,f,c
  3159   010FA4  3224               	rrcf	(___lodiv@divisor+3)^0,f,c
  3160   010FA6  3223               	rrcf	(___lodiv@divisor+2)^0,f,c
  3161   010FA8  3222               	rrcf	(___lodiv@divisor+1)^0,f,c
  3162   010FAA  3221               	rrcf	___lodiv@divisor^0,f,c
  3163   010FAC  2E31               	decfsz	___lodiv@counter^0,f,c
  3164   010FAE  EF9C  F087         	goto	l3542
  3165   010FB2                     l906:
  3166   010FB2  C029  F019         	movff	___lodiv@quotient,?___lodiv
  3167   010FB6  C02A  F01A         	movff	___lodiv@quotient+1,?___lodiv+1
  3168   010FBA  C02B  F01B         	movff	___lodiv@quotient+2,?___lodiv+2
  3169   010FBE  C02C  F01C         	movff	___lodiv@quotient+3,?___lodiv+3
  3170   010FC2  C02D  F01D         	movff	___lodiv@quotient+4,?___lodiv+4
  3171   010FC6  C02E  F01E         	movff	___lodiv@quotient+5,?___lodiv+5
  3172   010FCA  C02F  F01F         	movff	___lodiv@quotient+6,?___lodiv+6
  3173   010FCE  C030  F020         	movff	___lodiv@quotient+7,?___lodiv+7
  3174   010FD2  0012               	return		;funcret
  3175   010FD4                     __end_of___lodiv:
  3176                           	callstack 0
  3177                           
  3178 ;; *************** function _initUSART4 *****************
  3179 ;; Defined at:
  3180 ;;		line 14 in file "serial.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;		None
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;		None
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  1    wreg      void 
  3187 ;; Registers used:
  3188 ;;		wreg, status,2
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3198 ;;Total ram usage:        0 bytes
  3199 ;; Hardware stack levels used: 1
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text9
  3208   011AB8                     __ptext9:
  3209                           	callstack 0
  3210   011AB8                     _initUSART4:
  3211                           	callstack 30
  3212   011AB8                     
  3213                           ;serial.c: 15:     RC0PPS = 0x12;
  3214   011AB8  0E12               	movlw	18
  3215   011ABA  010E               	movlb	14	; () banked
  3216   011ABC  6F62               	movwf	98,b	;volatile
  3217                           
  3218                           ;serial.c: 16:     RX4PPS = 0x11;
  3219   011ABE  0E11               	movlw	17
  3220   011AC0  6F15               	movwf	21,b	;volatile
  3221   011AC2                     
  3222                           ; BSR set to: 14
  3223                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  3224   011AC2  97E9               	bcf	233,3,b	;volatile
  3225   011AC4                     
  3226                           ; BSR set to: 14
  3227                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  3228   011AC4  95E8               	bcf	232,2,b	;volatile
  3229                           
  3230                           ;serial.c: 19:     SP4BRGL = 51;
  3231   011AC6  0E33               	movlw	51
  3232   011AC8  6FE5               	movwf	229,b	;volatile
  3233                           
  3234                           ;serial.c: 20:     SP4BRGH = 0;
  3235   011ACA  0E00               	movlw	0
  3236   011ACC  6FE6               	movwf	230,b	;volatile
  3237   011ACE                     
  3238                           ; BSR set to: 14
  3239                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  3240   011ACE  89E7               	bsf	231,4,b	;volatile
  3241   011AD0                     
  3242                           ; BSR set to: 14
  3243                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  3244   011AD0  8BE8               	bsf	232,5,b	;volatile
  3245   011AD2                     
  3246                           ; BSR set to: 14
  3247                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  3248   011AD2  8FE7               	bsf	231,7,b	;volatile
  3249   011AD4                     
  3250                           ; BSR set to: 14
  3251   011AD4  0012               	return		;funcret
  3252   011AD6                     __end_of_initUSART4:
  3253                           	callstack 0
  3254                           
  3255 ;; *************** function _initDCmotorsPWM *****************
  3256 ;; Defined at:
  3257 ;;		line 5 in file "dc_motor.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;Total ram usage:        2 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_main
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text10
  3285   011564                     __ptext10:
  3286                           	callstack 0
  3287   011564                     _initDCmotorsPWM:
  3288                           	callstack 30
  3289   011564                     
  3290                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  3291   011564  9485               	bcf	133,2,c	;volatile
  3292                           
  3293                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  3294   011566  9E83               	bcf	131,7,c	;volatile
  3295                           
  3296                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  3297   011568  9885               	bcf	133,4,c	;volatile
  3298                           
  3299                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  3300   01156A  9C87               	bcf	135,6,c	;volatile
  3301                           
  3302                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  3303   01156C  947D               	bcf	125,2,c	;volatile
  3304                           
  3305                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  3306   01156E  9E7B               	bcf	123,7,c	;volatile
  3307                           
  3308                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  3309   011570  987D               	bcf	125,4,c	;volatile
  3310                           
  3311                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  3312   011572  9C7F               	bcf	127,6,c	;volatile
  3313   011574                     
  3314                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3315   011574  0E05               	movlw	5
  3316   011576  010E               	movlb	14	; () banked
  3317   011578  6F74               	movwf	116,b	;volatile
  3318                           
  3319                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3320   01157A  0E06               	movlw	6
  3321   01157C  6F76               	movwf	118,b	;volatile
  3322                           
  3323                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3324   01157E  0E07               	movlw	7
  3325   011580  6F69               	movwf	105,b	;volatile
  3326                           
  3327                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3328   011582  0E08               	movlw	8
  3329   011584  6F88               	movwf	136,b	;volatile
  3330                           
  3331                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  3332   011586  50BD               	movf	189,w,c	;volatile
  3333   011588  0B8F               	andlw	-113
  3334   01158A  0940               	iorlw	64
  3335   01158C  6EBD               	movwf	189,c	;volatile
  3336                           
  3337                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3338   01158E  0EE0               	movlw	-32
  3339   011590  16BE               	andwf	190,f,c	;volatile
  3340                           
  3341                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3342   011592  50BF               	movf	191,w,c	;volatile
  3343   011594  0BF0               	andlw	-16
  3344   011596  0901               	iorlw	1
  3345   011598  6EBF               	movwf	191,c	;volatile
  3346   01159A                     
  3347                           ; BSR set to: 14
  3348                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3349   01159A  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3350   01159E                     
  3351                           ; BSR set to: 14
  3352                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3353   01159E  8EBD               	bsf	189,7,c	;volatile
  3354                           
  3355                           ;dc_motor.c: 35:     CCPR1H=0;
  3356   0115A0  0E00               	movlw	0
  3357   0115A2  6EAA               	movwf	170,c	;volatile
  3358                           
  3359                           ;dc_motor.c: 36:     CCPR2H=0;
  3360   0115A4  0E00               	movlw	0
  3361   0115A6  6EA6               	movwf	166,c	;volatile
  3362                           
  3363                           ;dc_motor.c: 37:     CCPR3H=0;
  3364   0115A8  0E00               	movlw	0
  3365   0115AA  010F               	movlb	15	; () banked
  3366   0115AC  6F25               	movwf	37,b	;volatile
  3367                           
  3368                           ;dc_motor.c: 38:     CCPR4H=0;
  3369   0115AE  0E00               	movlw	0
  3370   0115B0  6F21               	movwf	33,b	;volatile
  3371                           
  3372                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3373   0115B2  0EFC               	movlw	-4
  3374   0115B4  16AD               	andwf	173,f,c	;volatile
  3375                           
  3376                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3377   0115B6  0EF3               	movlw	-13
  3378   0115B8  16AD               	andwf	173,f,c	;volatile
  3379                           
  3380                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3381   0115BA  0ECF               	movlw	-49
  3382   0115BC  16AD               	andwf	173,f,c	;volatile
  3383                           
  3384                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3385   0115BE  0E3F               	movlw	-193
  3386   0115C0  16AD               	andwf	173,f,c	;volatile
  3387   0115C2                     
  3388                           ; BSR set to: 15
  3389                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3390   0115C2  88AB               	bsf	171,4,c	;volatile
  3391                           
  3392                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3393   0115C4  50AB               	movf	171,w,c	;volatile
  3394   0115C6  0BF0               	andlw	-16
  3395   0115C8  090C               	iorlw	12
  3396   0115CA  6EAB               	movwf	171,c	;volatile
  3397   0115CC                     
  3398                           ; BSR set to: 15
  3399                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3400   0115CC  8EAB               	bsf	171,7,c	;volatile
  3401   0115CE                     
  3402                           ; BSR set to: 15
  3403                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3404   0115CE  88A7               	bsf	167,4,c	;volatile
  3405                           
  3406                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3407   0115D0  50A7               	movf	167,w,c	;volatile
  3408   0115D2  0BF0               	andlw	-16
  3409   0115D4  090C               	iorlw	12
  3410   0115D6  6EA7               	movwf	167,c	;volatile
  3411   0115D8                     
  3412                           ; BSR set to: 15
  3413                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3414   0115D8  8EA7               	bsf	167,7,c	;volatile
  3415   0115DA                     
  3416                           ; BSR set to: 15
  3417                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3418   0115DA  8926               	bsf	38,4,b	;volatile
  3419                           
  3420                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3421   0115DC  5126               	movf	38,w,b	;volatile
  3422   0115DE  0BF0               	andlw	-16
  3423   0115E0  090C               	iorlw	12
  3424   0115E2  6F26               	movwf	38,b	;volatile
  3425   0115E4                     
  3426                           ; BSR set to: 15
  3427                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3428   0115E4  8F26               	bsf	38,7,b	;volatile
  3429   0115E6                     
  3430                           ; BSR set to: 15
  3431                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3432   0115E6  8922               	bsf	34,4,b	;volatile
  3433                           
  3434                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3435   0115E8  5122               	movf	34,w,b	;volatile
  3436   0115EA  0BF0               	andlw	-16
  3437   0115EC  090C               	iorlw	12
  3438   0115EE  6F22               	movwf	34,b	;volatile
  3439   0115F0                     
  3440                           ; BSR set to: 15
  3441                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3442   0115F0  8F22               	bsf	34,7,b	;volatile
  3443   0115F2                     
  3444                           ; BSR set to: 15
  3445   0115F2  0012               	return		;funcret
  3446   0115F4                     __end_of_initDCmotorsPWM:
  3447                           	callstack 0
  3448                           
  3449 ;; *************** function _color_click_init *****************
  3450 ;; Defined at:
  3451 ;;		line 6 in file "color.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3469 ;;Total ram usage:        1 bytes
  3470 ;; Hardware stack levels used: 1
  3471 ;; Hardware stack levels required when called: 3
  3472 ;; This function calls:
  3473 ;;		_I2C_2_Master_Init
  3474 ;;		_color_writetoaddr
  3475 ;; This function is called by:
  3476 ;;		_main
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text11
  3481   011986                     __ptext11:
  3482                           	callstack 0
  3483   011986                     _color_click_init:
  3484                           	callstack 27
  3485   011986                     
  3486                           ;color.c: 9:     I2C_2_Master_Init();
  3487   011986  EC10  F08D         	call	_I2C_2_Master_Init	;wreg free
  3488   01198A                     
  3489                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  3490   01198A  0E01               	movlw	1
  3491   01198C  6E03               	movwf	color_writetoaddr@value^0,c
  3492   01198E  0E00               	movlw	0
  3493   011990  EC4C  F08D         	call	_color_writetoaddr
  3494   011994                     
  3495                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3496   011994  0E3F               	movlw	63
  3497   011996  6E05               	movwf	??_color_click_init^0,c
  3498   011998  0E55               	movlw	85
  3499   01199A                     u2897:
  3500   01199A  2EE8               	decfsz	wreg,f,c
  3501   01199C  D7FE               	bra	u2897
  3502   01199E  2E05               	decfsz	??_color_click_init^0,f,c
  3503   0119A0  D7FC               	bra	u2897
  3504   0119A2  0000               	nop	
  3505   0119A4                     
  3506                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  3507   0119A4  0E03               	movlw	3
  3508   0119A6  6E03               	movwf	color_writetoaddr@value^0,c
  3509   0119A8  0E00               	movlw	0
  3510   0119AA  EC4C  F08D         	call	_color_writetoaddr
  3511   0119AE                     
  3512                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  3513   0119AE  0ED5               	movlw	213
  3514   0119B0  6E03               	movwf	color_writetoaddr@value^0,c
  3515   0119B2  0E01               	movlw	1
  3516   0119B4  EC4C  F08D         	call	_color_writetoaddr
  3517   0119B8  0012               	return		;funcret
  3518   0119BA                     __end_of_color_click_init:
  3519                           	callstack 0
  3520                           
  3521 ;; *************** function _color_writetoaddr *****************
  3522 ;; Defined at:
  3523 ;;		line 22 in file "color.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  address         1    wreg     unsigned char 
  3526 ;;  value           1    2[COMRAM] unsigned char 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  address         1    3[COMRAM] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3538 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;Total ram usage:        2 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 2
  3545 ;; This function calls:
  3546 ;;		_I2C_2_Master_Start
  3547 ;;		_I2C_2_Master_Stop
  3548 ;;		_I2C_2_Master_Write
  3549 ;; This function is called by:
  3550 ;;		_color_click_init
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text12
  3555   011A98                     __ptext12:
  3556                           	callstack 0
  3557   011A98                     _color_writetoaddr:
  3558                           	callstack 27
  3559                           
  3560                           ;incstack = 0
  3561                           ;color_writetoaddr@address stored from wreg
  3562   011A98  6E04               	movwf	color_writetoaddr@address^0,c
  3563   011A9A                     
  3564                           ;color.c: 23:     I2C_2_Master_Start();
  3565   011A9A  EC8F  F08D         	call	_I2C_2_Master_Start	;wreg free
  3566                           
  3567                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  3568   011A9E  0E52               	movlw	82
  3569   011AA0  EC84  F08D         	call	_I2C_2_Master_Write
  3570                           
  3571                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  3572   011AA4  5004               	movf	color_writetoaddr@address^0,w,c
  3573   011AA6  0980               	iorlw	128
  3574   011AA8  EC84  F08D         	call	_I2C_2_Master_Write
  3575                           
  3576                           ;color.c: 26:     I2C_2_Master_Write(value);
  3577   011AAC  5003               	movf	color_writetoaddr@value^0,w,c
  3578   011AAE  EC84  F08D         	call	_I2C_2_Master_Write
  3579                           
  3580                           ;color.c: 27:     I2C_2_Master_Stop();
  3581   011AB2  EC8A  F08D         	call	_I2C_2_Master_Stop	;wreg free
  3582   011AB6  0012               	return		;funcret
  3583   011AB8                     __end_of_color_writetoaddr:
  3584                           	callstack 0
  3585                           
  3586 ;; *************** function _I2C_2_Master_Init *****************
  3587 ;; Defined at:
  3588 ;;		line 4 in file "i2c.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;		None
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, status,2
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3606 ;;Total ram usage:        0 bytes
  3607 ;; Hardware stack levels used: 1
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_color_click_init
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text13
  3616   011A20                     __ptext13:
  3617                           	callstack 0
  3618   011A20                     _I2C_2_Master_Init:
  3619                           	callstack 29
  3620   011A20                     
  3621                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3622   011A20  010E               	movlb	14	; () banked
  3623   011A22  51D9               	movf	217,w,b	;volatile
  3624   011A24  0BF0               	andlw	-16
  3625   011A26  0908               	iorlw	8
  3626   011A28  6FD9               	movwf	217,b	;volatile
  3627   011A2A                     
  3628                           ; BSR set to: 14
  3629                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3630   011A2A  8BD9               	bsf	217,5,b	;volatile
  3631                           
  3632                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3633   011A2C  0E9F               	movlw	159
  3634   011A2E  6FD6               	movwf	214,b	;volatile
  3635   011A30                     
  3636                           ; BSR set to: 14
  3637                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3638   011A30  8A84               	bsf	132,5,c	;volatile
  3639   011A32                     
  3640                           ; BSR set to: 14
  3641                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3642   011A32  8C84               	bsf	132,6,c	;volatile
  3643   011A34                     
  3644                           ; BSR set to: 14
  3645                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3646   011A34  9BA7               	bcf	167,5,b	;volatile
  3647   011A36                     
  3648                           ; BSR set to: 14
  3649                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3650   011A36  9DA7               	bcf	167,6,b	;volatile
  3651                           
  3652                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3653   011A38  0E1D               	movlw	29
  3654   011A3A  6F1D               	movwf	29,b	;volatile
  3655                           
  3656                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3657   011A3C  0E1E               	movlw	30
  3658   011A3E  6F1C               	movwf	28,b	;volatile
  3659                           
  3660                           ;i2c.c: 18:   RD5PPS=0x1C;
  3661   011A40  0E1C               	movlw	28
  3662   011A42  6F6F               	movwf	111,b	;volatile
  3663                           
  3664                           ;i2c.c: 19:   RD6PPS=0x1B;
  3665   011A44  0E1B               	movlw	27
  3666   011A46  6F70               	movwf	112,b	;volatile
  3667   011A48                     
  3668                           ; BSR set to: 14
  3669   011A48  0012               	return		;funcret
  3670   011A4A                     __end_of_I2C_2_Master_Init:
  3671                           	callstack 0
  3672                           
  3673 ;; *************** function _calibration_routine *****************
  3674 ;; Defined at:
  3675 ;;		line 212 in file "color.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  cCal            2   72[COMRAM] PTR struct colors
  3678 ;;		 -> colorCalibration(8), 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3691 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3693 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;Total ram usage:       24 bytes
  3695 ;; Hardware stack levels used: 1
  3696 ;; Hardware stack levels required when called: 8
  3697 ;; This function calls:
  3698 ;;		_color_read_Blue
  3699 ;;		_color_read_Clear
  3700 ;;		_color_read_Green
  3701 ;;		_color_read_Red
  3702 ;;		_sendStringSerial4
  3703 ;;		_sprintf
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text14
  3710   01087C                     __ptext14:
  3711                           	callstack 0
  3712   01087C                     _calibration_routine:
  3713                           	callstack 22
  3714   01087C                     
  3715                           ;color.c: 212: void calibration_routine(colors *cCal);color.c: 213: {;color.c: 215:     
      +                          LATGbits.LATG0 = 0;
  3716   01087C  907F               	bcf	127,0,c	;volatile
  3717                           
  3718                           ;color.c: 216:     LATEbits.LATE7 = 0;
  3719   01087E  9E7D               	bcf	125,7,c	;volatile
  3720                           
  3721                           ;color.c: 217:     LATAbits.LATA3 = 0;
  3722   010880  9679               	bcf	121,3,c	;volatile
  3723   010882                     
  3724                           ;color.c: 219:     char cal_state[20];;color.c: 223:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  3725   010882  0E60               	movlw	low calibration_routine@cal_state
  3726   010884  6E34               	movwf	sprintf@s^0,c
  3727   010886  6A35               	clrf	(sprintf@s+1)^0,c
  3728   010888  0E42               	movlw	low STR_8
  3729   01088A  6E36               	movwf	sprintf@fmt^0,c
  3730   01088C  0EFF               	movlw	high STR_8
  3731   01088E  6E37               	movwf	(sprintf@fmt+1)^0,c
  3732   010890  0EFD               	movlw	low STR_9
  3733   010892  6E38               	movwf	(?_sprintf+4)^0,c
  3734   010894  0EFF               	movlw	high STR_9
  3735   010896  6E39               	movwf	(?_sprintf+5)^0,c
  3736   010898  EC67  F08C         	call	_sprintf	;wreg free
  3737   01089C                     
  3738                           ;color.c: 224:     sendStringSerial4(cal_state);
  3739   01089C  0E60               	movlw	low calibration_routine@cal_state
  3740   01089E  6E02               	movwf	sendStringSerial4@string^0,c
  3741   0108A0  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  3742   0108A2  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  3743   0108A6                     l93:
  3744                           
  3745                           ;color.c: 227:     while(PORTFbits.RF2 == 1){
  3746   0108A6  B48E               	btfsc	142,2,c	;volatile
  3747   0108A8  EF58  F084         	goto	u2781
  3748   0108AC  EF5A  F084         	goto	u2780
  3749   0108B0                     u2781:
  3750   0108B0  EF53  F084         	goto	l93
  3751   0108B4                     u2780:
  3752   0108B4                     
  3753                           ;color.c: 231:     LATGbits.LATG0 = 1;
  3754   0108B4  807F               	bsf	127,0,c	;volatile
  3755   0108B6                     
  3756                           ;color.c: 232:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3757   0108B6  0E29               	movlw	41
  3758   0108B8  6E4C               	movwf	(??_calibration_routine+1)^0,c
  3759   0108BA  0E96               	movlw	150
  3760   0108BC  6E4B               	movwf	??_calibration_routine^0,c
  3761   0108BE  0E7F               	movlw	127
  3762   0108C0                     u2907:
  3763   0108C0  2EE8               	decfsz	wreg,f,c
  3764   0108C2  D7FE               	bra	u2907
  3765   0108C4  2E4B               	decfsz	??_calibration_routine^0,f,c
  3766   0108C6  D7FC               	bra	u2907
  3767   0108C8  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  3768   0108CA  D7FA               	bra	u2907
  3769   0108CC  0000               	nop	
  3770   0108CE                     
  3771                           ;color.c: 233:     (cCal->red) = color_read_Red();
  3772   0108CE  EC63  F08B         	call	_color_read_Red	;wreg free
  3773   0108D2  C049  FFD9         	movff	calibration_routine@cCal,fsr2l
  3774   0108D6  C04A  FFDA         	movff	calibration_routine@cCal+1,fsr2h
  3775   0108DA  C005  FFDE         	movff	?_color_read_Red,postinc2
  3776   0108DE  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3777   0108E2                     
  3778                           ;color.c: 234:     LATGbits.LATG0 = 0;
  3779   0108E2  907F               	bcf	127,0,c	;volatile
  3780   0108E4                     
  3781                           ;color.c: 237:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  3782   0108E4  0E60               	movlw	low calibration_routine@cal_state
  3783   0108E6  6E34               	movwf	sprintf@s^0,c
  3784   0108E8  6A35               	clrf	(sprintf@s+1)^0,c
  3785   0108EA  0EF1               	movlw	low STR_10
  3786   0108EC  6E36               	movwf	sprintf@fmt^0,c
  3787   0108EE  0EFE               	movlw	high STR_10
  3788   0108F0  6E37               	movwf	(sprintf@fmt+1)^0,c
  3789   0108F2  0EFD               	movlw	low STR_9
  3790   0108F4  6E38               	movwf	(?_sprintf+4)^0,c
  3791   0108F6  0EFF               	movlw	high STR_9
  3792   0108F8  6E39               	movwf	(?_sprintf+5)^0,c
  3793   0108FA  EC67  F08C         	call	_sprintf	;wreg free
  3794   0108FE                     
  3795                           ;color.c: 238:     sendStringSerial4(&cal_state);
  3796   0108FE  0E60               	movlw	low calibration_routine@cal_state
  3797   010900  6E02               	movwf	sendStringSerial4@string^0,c
  3798   010902  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  3799   010904  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  3800   010908                     l96:
  3801                           
  3802                           ;color.c: 240:     while(PORTFbits.RF2 == 1){
  3803   010908  B48E               	btfsc	142,2,c	;volatile
  3804   01090A  EF89  F084         	goto	u2791
  3805   01090E  EF8B  F084         	goto	u2790
  3806   010912                     u2791:
  3807   010912  EF84  F084         	goto	l96
  3808   010916                     u2790:
  3809   010916                     
  3810                           ;color.c: 244:     LATEbits.LATE7 = 1;
  3811   010916  8E7D               	bsf	125,7,c	;volatile
  3812   010918                     
  3813                           ;color.c: 245:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3814   010918  0E29               	movlw	41
  3815   01091A  6E4C               	movwf	(??_calibration_routine+1)^0,c
  3816   01091C  0E96               	movlw	150
  3817   01091E  6E4B               	movwf	??_calibration_routine^0,c
  3818   010920  0E7F               	movlw	127
  3819   010922                     u2917:
  3820   010922  2EE8               	decfsz	wreg,f,c
  3821   010924  D7FE               	bra	u2917
  3822   010926  2E4B               	decfsz	??_calibration_routine^0,f,c
  3823   010928  D7FC               	bra	u2917
  3824   01092A  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  3825   01092C  D7FA               	bra	u2917
  3826   01092E  0000               	nop	
  3827   010930                     
  3828                           ;color.c: 246:     (cCal->green) = color_read_Green();
  3829   010930  EC8B  F08B         	call	_color_read_Green	;wreg free
  3830   010934  EE20 F002          	lfsr	2,2
  3831   010938  5049               	movf	calibration_routine@cCal^0,w,c
  3832   01093A  26D9               	addwf	fsr2l,f,c
  3833   01093C  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  3834   01093E  22DA               	addwfc	fsr2h,f,c
  3835   010940  C005  FFDE         	movff	?_color_read_Green,postinc2
  3836   010944  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3837   010948                     
  3838                           ;color.c: 247:     LATEbits.LATE7 = 0;
  3839   010948  9E7D               	bcf	125,7,c	;volatile
  3840   01094A                     
  3841                           ;color.c: 250:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  3842   01094A  0E60               	movlw	low calibration_routine@cal_state
  3843   01094C  6E34               	movwf	sprintf@s^0,c
  3844   01094E  6A35               	clrf	(sprintf@s+1)^0,c
  3845   010950  0E0E               	movlw	low STR_12
  3846   010952  6E36               	movwf	sprintf@fmt^0,c
  3847   010954  0EFF               	movlw	high STR_12
  3848   010956  6E37               	movwf	(sprintf@fmt+1)^0,c
  3849   010958  0EFD               	movlw	low STR_9
  3850   01095A  6E38               	movwf	(?_sprintf+4)^0,c
  3851   01095C  0EFF               	movlw	high STR_9
  3852   01095E  6E39               	movwf	(?_sprintf+5)^0,c
  3853   010960  EC67  F08C         	call	_sprintf	;wreg free
  3854   010964                     
  3855                           ;color.c: 251:     sendStringSerial4(&cal_state);
  3856   010964  0E60               	movlw	low calibration_routine@cal_state
  3857   010966  6E02               	movwf	sendStringSerial4@string^0,c
  3858   010968  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  3859   01096A  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  3860   01096E                     l99:
  3861                           
  3862                           ;color.c: 253:     while(PORTFbits.RF2 == 1){
  3863   01096E  B48E               	btfsc	142,2,c	;volatile
  3864   010970  EFBC  F084         	goto	u2801
  3865   010974  EFBE  F084         	goto	u2800
  3866   010978                     u2801:
  3867   010978  EFB7  F084         	goto	l99
  3868   01097C                     u2800:
  3869   01097C                     
  3870                           ;color.c: 257:     LATAbits.LATA3 = 1;
  3871   01097C  8679               	bsf	121,3,c	;volatile
  3872   01097E                     
  3873                           ;color.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3874   01097E  0E29               	movlw	41
  3875   010980  6E4C               	movwf	(??_calibration_routine+1)^0,c
  3876   010982  0E96               	movlw	150
  3877   010984  6E4B               	movwf	??_calibration_routine^0,c
  3878   010986  0E7F               	movlw	127
  3879   010988                     u2927:
  3880   010988  2EE8               	decfsz	wreg,f,c
  3881   01098A  D7FE               	bra	u2927
  3882   01098C  2E4B               	decfsz	??_calibration_routine^0,f,c
  3883   01098E  D7FC               	bra	u2927
  3884   010990  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  3885   010992  D7FA               	bra	u2927
  3886   010994  0000               	nop	
  3887   010996                     
  3888                           ;color.c: 259:     (cCal->blue) = color_read_Blue();
  3889   010996  ECDB  F08B         	call	_color_read_Blue	;wreg free
  3890   01099A  EE20 F004          	lfsr	2,4
  3891   01099E  5049               	movf	calibration_routine@cCal^0,w,c
  3892   0109A0  26D9               	addwf	fsr2l,f,c
  3893   0109A2  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  3894   0109A4  22DA               	addwfc	fsr2h,f,c
  3895   0109A6  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3896   0109AA  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3897   0109AE                     
  3898                           ;color.c: 260:     LATAbits.LATA3 = 0;
  3899   0109AE  9679               	bcf	121,3,c	;volatile
  3900   0109B0                     
  3901                           ;color.c: 263:     sprintf(cal_state,"Calibration state = ambient light", ".");
  3902   0109B0  0E60               	movlw	low calibration_routine@cal_state
  3903   0109B2  6E34               	movwf	sprintf@s^0,c
  3904   0109B4  6A35               	clrf	(sprintf@s+1)^0,c
  3905   0109B6  0ECF               	movlw	low STR_14
  3906   0109B8  6E36               	movwf	sprintf@fmt^0,c
  3907   0109BA  0EFE               	movlw	high STR_14
  3908   0109BC  6E37               	movwf	(sprintf@fmt+1)^0,c
  3909   0109BE  0EFD               	movlw	low STR_9
  3910   0109C0  6E38               	movwf	(?_sprintf+4)^0,c
  3911   0109C2  0EFF               	movlw	high STR_9
  3912   0109C4  6E39               	movwf	(?_sprintf+5)^0,c
  3913   0109C6  EC67  F08C         	call	_sprintf	;wreg free
  3914   0109CA                     
  3915                           ;color.c: 264:     sendStringSerial4(&cal_state);
  3916   0109CA  0E60               	movlw	low calibration_routine@cal_state
  3917   0109CC  6E02               	movwf	sendStringSerial4@string^0,c
  3918   0109CE  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  3919   0109D0  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  3920   0109D4                     l102:
  3921                           
  3922                           ;color.c: 266:     while(PORTFbits.RF2 == 1){
  3923   0109D4  B48E               	btfsc	142,2,c	;volatile
  3924   0109D6  EFEF  F084         	goto	u2811
  3925   0109DA  EFF1  F084         	goto	u2810
  3926   0109DE                     u2811:
  3927   0109DE  EFEA  F084         	goto	l102
  3928   0109E2                     u2810:
  3929   0109E2                     
  3930                           ;color.c: 269:     LATGbits.LATG0 = 1;
  3931   0109E2  807F               	bsf	127,0,c	;volatile
  3932                           
  3933                           ;color.c: 270:     LATEbits.LATE7 = 1;
  3934   0109E4  8E7D               	bsf	125,7,c	;volatile
  3935                           
  3936                           ;color.c: 271:     LATAbits.LATA3 = 1;
  3937   0109E6  8679               	bsf	121,3,c	;volatile
  3938   0109E8                     
  3939                           ;color.c: 272:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3940   0109E8  0E29               	movlw	41
  3941   0109EA  6E4C               	movwf	(??_calibration_routine+1)^0,c
  3942   0109EC  0E96               	movlw	150
  3943   0109EE  6E4B               	movwf	??_calibration_routine^0,c
  3944   0109F0  0E7F               	movlw	127
  3945   0109F2                     u2937:
  3946   0109F2  2EE8               	decfsz	wreg,f,c
  3947   0109F4  D7FE               	bra	u2937
  3948   0109F6  2E4B               	decfsz	??_calibration_routine^0,f,c
  3949   0109F8  D7FC               	bra	u2937
  3950   0109FA  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  3951   0109FC  D7FA               	bra	u2937
  3952   0109FE  0000               	nop	
  3953   010A00                     
  3954                           ;color.c: 273:     (cCal->clear) = color_read_Clear();
  3955   010A00  ECB3  F08B         	call	_color_read_Clear	;wreg free
  3956   010A04  EE20 F006          	lfsr	2,6
  3957   010A08  5049               	movf	calibration_routine@cCal^0,w,c
  3958   010A0A  26D9               	addwf	fsr2l,f,c
  3959   010A0C  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  3960   010A0E  22DA               	addwfc	fsr2h,f,c
  3961   010A10  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3962   010A14  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3963   010A18                     
  3964                           ;color.c: 274:     LATGbits.LATG0 = 0;
  3965   010A18  907F               	bcf	127,0,c	;volatile
  3966   010A1A                     
  3967                           ;color.c: 275:     LATEbits.LATE7 = 0;
  3968   010A1A  9E7D               	bcf	125,7,c	;volatile
  3969   010A1C                     
  3970                           ;color.c: 276:     LATAbits.LATA3 = 0;
  3971   010A1C  9679               	bcf	121,3,c	;volatile
  3972   010A1E                     
  3973                           ;color.c: 279:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  3974   010A1E  0E60               	movlw	low calibration_routine@cal_state
  3975   010A20  6E34               	movwf	sprintf@s^0,c
  3976   010A22  6A35               	clrf	(sprintf@s+1)^0,c
  3977   010A24  0E29               	movlw	low STR_16
  3978   010A26  6E36               	movwf	sprintf@fmt^0,c
  3979   010A28  0EFF               	movlw	high STR_16
  3980   010A2A  6E37               	movwf	(sprintf@fmt+1)^0,c
  3981   010A2C  0EFD               	movlw	low STR_9
  3982   010A2E  6E38               	movwf	(?_sprintf+4)^0,c
  3983   010A30  0EFF               	movlw	high STR_9
  3984   010A32  6E39               	movwf	(?_sprintf+5)^0,c
  3985   010A34  EC67  F08C         	call	_sprintf	;wreg free
  3986   010A38                     
  3987                           ;color.c: 280:     sendStringSerial4(&cal_state);
  3988   010A38  0E60               	movlw	low calibration_routine@cal_state
  3989   010A3A  6E02               	movwf	sendStringSerial4@string^0,c
  3990   010A3C  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  3991   010A3E  ECA7  F08C         	call	_sendStringSerial4	;wreg free
  3992   010A42  0012               	return		;funcret
  3993   010A44                     __end_of_calibration_routine:
  3994                           	callstack 0
  3995                           
  3996 ;; *************** function _sprintf *****************
  3997 ;; Defined at:
  3998 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  s               2   51[COMRAM] PTR unsigned char 
  4001 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  4002 ;;		 -> test@led_state(50), convert_rgb2hue@blue_weighted(20), convert_rgb2hue@green_weighted(20), convert_rgb2hue@red_w
      +eighted(20), 
  4003 ;;  fmt             2   53[COMRAM] PTR const unsigned char 
  4004 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  4005 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  4006 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(20), 
  4007 ;;		 -> STR_2(21), STR_1(19), 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  f              12   60[COMRAM] struct _IO_FILE
  4010 ;;  ret             2    0        int 
  4011 ;;  ap              1   59[COMRAM] PTR void [1]
  4012 ;;		 -> ?_sprintf(2), 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  2   51[COMRAM] int 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4022 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4023 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4025 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;Total ram usage:       21 bytes
  4027 ;; Hardware stack levels used: 1
  4028 ;; Hardware stack levels required when called: 7
  4029 ;; This function calls:
  4030 ;;		_vfprintf
  4031 ;; This function is called by:
  4032 ;;		_convert_rgb2hue
  4033 ;;		_test
  4034 ;;		_calibration_routine
  4035 ;;		_ADC2String
  4036 ;;		_send2USART
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text15
  4041   0118CE                     __ptext15:
  4042                           	callstack 0
  4043   0118CE                     _sprintf:
  4044                           	callstack 22
  4045   0118CE  0E38               	movlw	low (?_sprintf+4)
  4046   0118D0  6E3C               	movwf	sprintf@ap^0,c
  4047   0118D2  C034  F03D         	movff	sprintf@s,sprintf@f
  4048   0118D6  C035  F03E         	movff	sprintf@s+1,sprintf@f+1
  4049   0118DA  0E00               	movlw	0
  4050   0118DC  6E41               	movwf	(sprintf@f+4)^0,c
  4051   0118DE  0E00               	movlw	0
  4052   0118E0  6E40               	movwf	(sprintf@f+3)^0,c
  4053   0118E2  0E00               	movlw	0
  4054   0118E4  6E48               	movwf	(sprintf@f+11)^0,c
  4055   0118E6  0E00               	movlw	0
  4056   0118E8  6E47               	movwf	(sprintf@f+10)^0,c
  4057   0118EA  0E3D               	movlw	low sprintf@f
  4058   0118EC  6E2E               	movwf	vfprintf@fp^0,c
  4059   0118EE  C036  F02F         	movff	sprintf@fmt,vfprintf@fmt
  4060   0118F2  C037  F030         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4061   0118F6  0E3C               	movlw	low sprintf@ap
  4062   0118F8  6E31               	movwf	vfprintf@ap^0,c
  4063   0118FA  EC03  F08C         	call	_vfprintf	;wreg free
  4064   0118FE  5040               	movf	(sprintf@f+3)^0,w,c
  4065   011900  2434               	addwf	sprintf@s^0,w,c
  4066   011902  6ED9               	movwf	fsr2l,c
  4067   011904  5041               	movf	(sprintf@f+4)^0,w,c
  4068   011906  2035               	addwfc	(sprintf@s+1)^0,w,c
  4069   011908  6EDA               	movwf	fsr2h,c
  4070   01190A  6ADF               	clrf	indf2,c
  4071   01190C  0012               	return		;funcret
  4072   01190E                     __end_of_sprintf:
  4073                           	callstack 0
  4074                           
  4075 ;; *************** function _vfprintf *****************
  4076 ;; Defined at:
  4077 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  4080 ;;		 -> sprintf@f(12), 
  4081 ;;  fmt             2   46[COMRAM] PTR const unsigned char 
  4082 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  4083 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  4084 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(20), 
  4085 ;;		 -> STR_2(21), STR_1(19), 
  4086 ;;  ap              1   48[COMRAM] PTR PTR void 
  4087 ;;		 -> sprintf@ap(1), 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  cfmt            2   49[COMRAM] PTR unsigned char 
  4090 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  4091 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  4092 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(20), 
  4093 ;;		 -> STR_2(21), STR_1(19), 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  2   45[COMRAM] int 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;Total ram usage:        6 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 6
  4110 ;; This function calls:
  4111 ;;		_vfpfcnvrt
  4112 ;; This function is called by:
  4113 ;;		_sprintf
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text16
  4118   011806                     __ptext16:
  4119                           	callstack 0
  4120   011806                     _vfprintf:
  4121                           	callstack 22
  4122   011806                     
  4123                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4124   011806  C02F  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  4125   01180A  C030  F033         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4126                           
  4127                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4128   01180E  EF11  F08C         	goto	l3390
  4129   011812                     l3388:
  4130                           
  4131                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4132   011812  C02E  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  4133   011816  0E32               	movlw	low vfprintf@cfmt
  4134   011818  6E23               	movwf	vfpfcnvrt@fmt^0,c
  4135   01181A  C031  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  4136   01181E  EC22  F085         	call	_vfpfcnvrt	;wreg free
  4137   011822                     l3390:
  4138                           
  4139                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4140   011822  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  4141   011826  C033  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4142   01182A                     	if	0	;tblptru may be non-zero
  4143   01182A                     	endif
  4144   01182A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4145   01182A  0E00               	movlw	low (__mediumconst shr (0+16))
  4146   01182C  6EF8               	movwf	tblptru,c
  4147   01182E                     	endif
  4148   01182E  0008               	tblrd		*
  4149   011830  50F5               	movf	tablat,w,c
  4150   011832  0900               	iorlw	0
  4151   011834  A4D8               	btfss	status,2,c
  4152   011836  EF1F  F08C         	goto	u2381
  4153   01183A  EF21  F08C         	goto	u2380
  4154   01183E                     u2381:
  4155   01183E  EF09  F08C         	goto	l3388
  4156   011842                     u2380:
  4157   011842                     
  4158                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4159   011842  0E00               	movlw	0
  4160   011844  6E2F               	movwf	(?_vfprintf+1)^0,c
  4161   011846  0E00               	movlw	0
  4162   011848  6E2E               	movwf	?_vfprintf^0,c
  4163   01184A  0012               	return		;funcret
  4164   01184C                     __end_of_vfprintf:
  4165                           	callstack 0
  4166                           
  4167 ;; *************** function _vfpfcnvrt *****************
  4168 ;; Defined at:
  4169 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  4172 ;;		 -> sprintf@f(12), 
  4173 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  4174 ;;		 -> vfprintf@cfmt(2), 
  4175 ;;  ap              1   35[COMRAM] PTR PTR void 
  4176 ;;		 -> sprintf@ap(1), 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  convarg         4   38[COMRAM] struct .
  4179 ;;  cp              2   43[COMRAM] PTR unsigned char 
  4180 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  4181 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  4182 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(20), 
  4183 ;;		 -> STR_2(21), STR_1(19), 
  4184 ;;  done            1   42[COMRAM] _Bool 
  4185 ;;  c               1    0        unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4195 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;Total ram usage:       12 bytes
  4200 ;; Hardware stack levels used: 1
  4201 ;; Hardware stack levels required when called: 5
  4202 ;; This function calls:
  4203 ;;		_dtoa
  4204 ;;		_fputc
  4205 ;;		_read_prec_or_width
  4206 ;; This function is called by:
  4207 ;;		_vfprintf
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text17
  4212   010A44                     __ptext17:
  4213                           	callstack 0
  4214   010A44                     _vfpfcnvrt:
  4215                           	callstack 22
  4216   010A44                     
  4217                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4218   010A44  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4219   010A46  6ED9               	movwf	fsr2l,c
  4220   010A48  6ADA               	clrf	fsr2h,c
  4221   010A4A  CFDE FFF6          	movff	postinc2,tblptrl
  4222   010A4E  CFDD FFF7          	movff	postdec2,tblptrh
  4223   010A52                     	if	0	;tblptru may be non-zero
  4224   010A52                     	endif
  4225   010A52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4226   010A52  0E00               	movlw	low (__mediumconst shr (0+16))
  4227   010A54  6EF8               	movwf	tblptru,c
  4228   010A56                     	endif
  4229   010A56  0008               	tblrd		*
  4230   010A58  50F5               	movf	tablat,w,c
  4231   010A5A  0A25               	xorlw	37
  4232   010A5C  A4D8               	btfss	status,2,c
  4233   010A5E  EF33  F085         	goto	u2311
  4234   010A62  EF35  F085         	goto	u2310
  4235   010A66                     u2311:
  4236   010A66  EFE2  F085         	goto	l3372
  4237   010A6A                     u2310:
  4238   010A6A                     
  4239                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4240   010A6A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4241   010A6C  6ED9               	movwf	fsr2l,c
  4242   010A6E  6ADA               	clrf	fsr2h,c
  4243   010A70  2ADE               	incf	postinc2,f,c
  4244   010A72  0E00               	movlw	0
  4245   010A74  22DD               	addwfc	postdec2,f,c
  4246   010A76                     
  4247                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4248   010A76  0E00               	movlw	0
  4249   010A78  0100               	movlb	0	; () banked
  4250   010A7A  6FEB               	movwf	(_width+1)& (0+255),b
  4251   010A7C  0E00               	movlw	0
  4252   010A7E  6FEA               	movwf	_width& (0+255),b
  4253   010A80  C0EA  F0EE         	movff	_width,_flags
  4254   010A84                     
  4255                           ; BSR set to: 0
  4256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4257   010A84  69EC               	setf	_prec& (0+255),b
  4258   010A86  69ED               	setf	(_prec+1)& (0+255),b
  4259   010A88                     
  4260                           ; BSR set to: 0
  4261                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4262   010A88  0E00               	movlw	0
  4263   010A8A  6E2B               	movwf	vfpfcnvrt@done^0,c
  4264                           
  4265                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4266   010A8C  EF71  F085         	goto	l3346
  4267   010A90                     l3336:
  4268                           
  4269                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4270   010A90  0100               	movlb	0	; () banked
  4271   010A92  83EE               	bsf	_flags& (0+255),1,b
  4272   010A94                     
  4273                           ; BSR set to: 0
  4274                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4275   010A94  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4276   010A96  6ED9               	movwf	fsr2l,c
  4277   010A98  6ADA               	clrf	fsr2h,c
  4278   010A9A  2ADE               	incf	postinc2,f,c
  4279   010A9C  0E00               	movlw	0
  4280   010A9E  22DD               	addwfc	postdec2,f,c
  4281                           
  4282                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4283   010AA0  EF71  F085         	goto	l3346
  4284   010AA4                     l3340:
  4285                           
  4286                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4287   010AA4  0E01               	movlw	1
  4288   010AA6  6E2B               	movwf	vfpfcnvrt@done^0,c
  4289                           
  4290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4291   010AA8  EF71  F085         	goto	l3346
  4292   010AAC                     l3344:
  4293   010AAC  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4294   010AAE  6ED9               	movwf	fsr2l,c
  4295   010AB0  6ADA               	clrf	fsr2h,c
  4296   010AB2  CFDE FFF6          	movff	postinc2,tblptrl
  4297   010AB6  CFDD FFF7          	movff	postdec2,tblptrh
  4298   010ABA                     	if	0	;tblptru may be non-zero
  4299   010ABA                     	endif
  4300   010ABA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4301   010ABA  0E00               	movlw	low (__mediumconst shr (0+16))
  4302   010ABC  6EF8               	movwf	tblptru,c
  4303   010ABE                     	endif
  4304   010ABE  0008               	tblrd		*
  4305   010AC0  50F5               	movf	tablat,w,c
  4306   010AC2  6E25               	movwf	??_vfpfcnvrt^0,c
  4307   010AC4  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  4308                           
  4309                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4310                           ; Switch size 1, requested type "simple"
  4311                           ; Number of cases is 1, Range of values is 0 to 0
  4312                           ; switch strategies available:
  4313                           ; Name         Instructions Cycles
  4314                           ; simple_byte            4     3 (average)
  4315                           ;	Chosen strategy is simple_byte
  4316   010AC6  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  4317   010AC8  0A00               	xorlw	0	; case 0
  4318   010ACA  B4D8               	btfsc	status,2,c
  4319   010ACC  EF6A  F085         	goto	l4014
  4320   010AD0  EF52  F085         	goto	l3340
  4321   010AD4                     l4014:
  4322                           
  4323                           ; Switch size 1, requested type "simple"
  4324                           ; Number of cases is 1, Range of values is 48 to 48
  4325                           ; switch strategies available:
  4326                           ; Name         Instructions Cycles
  4327                           ; simple_byte            4     3 (average)
  4328                           ;	Chosen strategy is simple_byte
  4329   010AD4  5025               	movf	??_vfpfcnvrt^0,w,c
  4330   010AD6  0A30               	xorlw	48	; case 48
  4331   010AD8  B4D8               	btfsc	status,2,c
  4332   010ADA  EF48  F085         	goto	l3336
  4333   010ADE  EF52  F085         	goto	l3340
  4334   010AE2                     l3346:
  4335                           
  4336                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4337   010AE2  502B               	movf	vfpfcnvrt@done^0,w,c
  4338   010AE4  B4D8               	btfsc	status,2,c
  4339   010AE6  EF77  F085         	goto	u2321
  4340   010AEA  EF79  F085         	goto	u2320
  4341   010AEE                     u2321:
  4342   010AEE  EF56  F085         	goto	l3344
  4343   010AF2                     u2320:
  4344   010AF2                     
  4345                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4346   010AF2  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  4347   010AF6  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  4348   010AFA  EC11  F089         	call	_read_prec_or_width	;wreg free
  4349   010AFE  C007  F0EA         	movff	?_read_prec_or_width,_width
  4350   010B02  C008  F0EB         	movff	?_read_prec_or_width+1,_width+1
  4351   010B06                     
  4352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  4353   010B06  0100               	movlb	0	; () banked
  4354   010B08  BFEB               	btfsc	(_width+1)& (0+255),7,b
  4355   010B0A  EF8B  F085         	goto	u2330
  4356   010B0E  EF89  F085         	goto	u2331
  4357   010B12                     u2331:
  4358   010B12  EF90  F085         	goto	l3354
  4359   010B16                     u2330:
  4360   010B16                     
  4361                           ; BSR set to: 0
  4362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  4363   010B16  81EE               	bsf	_flags& (0+255),0,b
  4364                           
  4365                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  4366   010B18  6DEA               	negf	_width& (0+255),b
  4367   010B1A  1FEB               	comf	(_width+1)& (0+255),f,b
  4368   010B1C  B0D8               	btfsc	status,0,c
  4369   010B1E  2BEB               	incf	(_width+1)& (0+255),f,b
  4370   010B20                     l3354:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4374   010B20  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4375   010B22  6ED9               	movwf	fsr2l,c
  4376   010B24  6ADA               	clrf	fsr2h,c
  4377   010B26  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  4378   010B2A  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  4379   010B2E                     
  4380                           ; BSR set to: 0
  4381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4382   010B2E  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4383   010B32  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4384   010B36                     	if	0	;tblptru may be non-zero
  4385   010B36                     	endif
  4386   010B36                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4387   010B36  0E00               	movlw	low (__mediumconst shr (0+16))
  4388   010B38  6EF8               	movwf	tblptru,c
  4389   010B3A                     	endif
  4390   010B3A  0008               	tblrd		*
  4391   010B3C  50F5               	movf	tablat,w,c
  4392   010B3E  0A64               	xorlw	100
  4393   010B40  B4D8               	btfsc	status,2,c
  4394   010B42  EFA5  F085         	goto	u2341
  4395   010B46  EFA7  F085         	goto	u2340
  4396   010B4A                     u2341:
  4397   010B4A  EFB7  F085         	goto	l3360
  4398   010B4E                     u2340:
  4399   010B4E                     
  4400                           ; BSR set to: 0
  4401   010B4E  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4402   010B52  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4403   010B56                     	if	0	;tblptru may be non-zero
  4404   010B56                     	endif
  4405   010B56                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4406   010B56  0E00               	movlw	low (__mediumconst shr (0+16))
  4407   010B58  6EF8               	movwf	tblptru,c
  4408   010B5A                     	endif
  4409   010B5A  0008               	tblrd		*
  4410   010B5C  50F5               	movf	tablat,w,c
  4411   010B5E  0A69               	xorlw	105
  4412   010B60  A4D8               	btfss	status,2,c
  4413   010B62  EFB5  F085         	goto	u2351
  4414   010B66  EFB7  F085         	goto	u2350
  4415   010B6A                     u2351:
  4416   010B6A  EFDA  F085         	goto	l3368
  4417   010B6E                     u2350:
  4418   010B6E                     l3360:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4422   010B6E  5024               	movf	vfpfcnvrt@ap^0,w,c
  4423   010B70  6ED9               	movwf	fsr2l,c
  4424   010B72  6ADA               	clrf	fsr2h,c
  4425   010B74  0E02               	movlw	2
  4426   010B76  26DF               	addwf	indf2,f,c
  4427   010B78  5CDF               	subwf	indf2,w,c
  4428   010B7A  6ED9               	movwf	fsr2l,c
  4429   010B7C  6ADA               	clrf	fsr2h,c
  4430   010B7E  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  4431   010B82  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  4432   010B86                     
  4433                           ; BSR set to: 0
  4434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4435   010B86  0E01               	movlw	1
  4436   010B88  242C               	addwf	vfpfcnvrt@cp^0,w,c
  4437   010B8A  6E25               	movwf	??_vfpfcnvrt^0,c
  4438   010B8C  0E00               	movlw	0
  4439   010B8E  202D               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4440   010B90  6E26               	movwf	(??_vfpfcnvrt+1)^0,c
  4441   010B92  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4442   010B94  6ED9               	movwf	fsr2l,c
  4443   010B96  6ADA               	clrf	fsr2h,c
  4444   010B98  C025  FFDE         	movff	??_vfpfcnvrt,postinc2
  4445   010B9C  C026  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4446   010BA0                     
  4447                           ; BSR set to: 0
  4448                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  4449   010BA0  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  4450   010BA4  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  4451   010BA8  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4452   010BAC  ECB6  F086         	call	_dtoa	;wreg free
  4453   010BB0  EFF5  F085         	goto	l1210
  4454   010BB4                     l3368:
  4455                           
  4456                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4457   010BB4  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4458   010BB6  6ED9               	movwf	fsr2l,c
  4459   010BB8  6ADA               	clrf	fsr2h,c
  4460   010BBA  2ADE               	incf	postinc2,f,c
  4461   010BBC  0E00               	movlw	0
  4462   010BBE  22DD               	addwfc	postdec2,f,c
  4463   010BC0  EFF5  F085         	goto	l1210
  4464   010BC4                     l3372:
  4465                           
  4466                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4467   010BC4  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4468   010BC6  6ED9               	movwf	fsr2l,c
  4469   010BC8  6ADA               	clrf	fsr2h,c
  4470   010BCA  CFDE FFF6          	movff	postinc2,tblptrl
  4471   010BCE  CFDD FFF7          	movff	postdec2,tblptrh
  4472   010BD2                     	if	0	;tblptru may be non-zero
  4473   010BD2                     	endif
  4474   010BD2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4475   010BD2  0E00               	movlw	low (__mediumconst shr (0+16))
  4476   010BD4  6EF8               	movwf	tblptru,c
  4477   010BD6                     	endif
  4478   010BD6  0008               	tblrd		*
  4479   010BD8  50F5               	movf	tablat,w,c
  4480   010BDA  6E01               	movwf	fputc@c^0,c
  4481   010BDC  6A02               	clrf	(fputc@c+1)^0,c
  4482   010BDE  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4483   010BE2  ECB4  F088         	call	_fputc	;wreg free
  4484   010BE6  EFDA  F085         	goto	l3368
  4485   010BEA                     l1210:
  4486   010BEA  0012               	return		;funcret
  4487   010BEC                     __end_of_vfpfcnvrt:
  4488                           	callstack 0
  4489                           
  4490 ;; *************** function _read_prec_or_width *****************
  4491 ;; Defined at:
  4492 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  4495 ;;		 -> vfprintf@cfmt(2), 
  4496 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  4497 ;;		 -> sprintf@ap(1), 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  c               1    8[COMRAM] unsigned char 
  4500 ;;  n               2    9[COMRAM] int 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  2    6[COMRAM] int 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4511 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;Total ram usage:        5 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 1
  4517 ;; This function calls:
  4518 ;;		___wmul
  4519 ;; This function is called by:
  4520 ;;		_vfpfcnvrt
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           	psect	text18
  4525   011222                     __ptext18:
  4526                           	callstack 0
  4527   011222                     _read_prec_or_width:
  4528                           	callstack 25
  4529   011222                     
  4530                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4531   011222  0E00               	movlw	0
  4532   011224  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4533   011226  0E00               	movlw	0
  4534   011228  6E0A               	movwf	read_prec_or_width@n^0,c
  4535   01122A                     
  4536                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4537   01122A  5007               	movf	read_prec_or_width@fmt^0,w,c
  4538   01122C  6ED9               	movwf	fsr2l,c
  4539   01122E  6ADA               	clrf	fsr2h,c
  4540   011230  CFDE FFF6          	movff	postinc2,tblptrl
  4541   011234  CFDD FFF7          	movff	postdec2,tblptrh
  4542   011238                     	if	0	;tblptru may be non-zero
  4543   011238                     	endif
  4544   011238                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4545   011238  0E00               	movlw	low (__mediumconst shr (0+16))
  4546   01123A  6EF8               	movwf	tblptru,c
  4547   01123C                     	endif
  4548   01123C  0008               	tblrd		*
  4549   01123E  50F5               	movf	tablat,w,c
  4550   011240  0A2A               	xorlw	42
  4551   011242  A4D8               	btfss	status,2,c
  4552   011244  EF26  F089         	goto	u2291
  4553   011248  EF28  F089         	goto	u2290
  4554   01124C                     u2291:
  4555   01124C  EF52  F089         	goto	l3324
  4556   011250                     u2290:
  4557   011250                     
  4558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4559   011250  5007               	movf	read_prec_or_width@fmt^0,w,c
  4560   011252  6ED9               	movwf	fsr2l,c
  4561   011254  6ADA               	clrf	fsr2h,c
  4562   011256  2ADE               	incf	postinc2,f,c
  4563   011258  0E00               	movlw	0
  4564   01125A  22DD               	addwfc	postdec2,f,c
  4565   01125C                     
  4566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4567   01125C  5008               	movf	read_prec_or_width@ap^0,w,c
  4568   01125E  6ED9               	movwf	fsr2l,c
  4569   011260  6ADA               	clrf	fsr2h,c
  4570   011262  0E02               	movlw	2
  4571   011264  26DF               	addwf	indf2,f,c
  4572   011266  5CDF               	subwf	indf2,w,c
  4573   011268  6ED9               	movwf	fsr2l,c
  4574   01126A  6ADA               	clrf	fsr2h,c
  4575   01126C  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  4576   011270  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  4577                           
  4578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4579   011274  EF67  F089         	goto	l1191
  4580   011278                     l3320:
  4581                           
  4582                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4583   011278  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  4584   01127C  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  4585   011280  0E00               	movlw	0
  4586   011282  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4587   011284  0E0A               	movlw	10
  4588   011286  6E03               	movwf	___wmul@multiplicand^0,c
  4589   011288  EC39  F08D         	call	___wmul	;wreg free
  4590   01128C  5009               	movf	read_prec_or_width@c^0,w,c
  4591   01128E  2401               	addwf	?___wmul^0,w,c
  4592   011290  6E0A               	movwf	read_prec_or_width@n^0,c
  4593   011292  0E00               	movlw	0
  4594   011294  2002               	addwfc	(?___wmul+1)^0,w,c
  4595   011296  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4596   011298                     
  4597                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4598   011298  5007               	movf	read_prec_or_width@fmt^0,w,c
  4599   01129A  6ED9               	movwf	fsr2l,c
  4600   01129C  6ADA               	clrf	fsr2h,c
  4601   01129E  2ADE               	incf	postinc2,f,c
  4602   0112A0  0E00               	movlw	0
  4603   0112A2  22DD               	addwfc	postdec2,f,c
  4604   0112A4                     l3324:
  4605                           
  4606                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4607   0112A4  5007               	movf	read_prec_or_width@fmt^0,w,c
  4608   0112A6  6ED9               	movwf	fsr2l,c
  4609   0112A8  6ADA               	clrf	fsr2h,c
  4610   0112AA  CFDE FFF6          	movff	postinc2,tblptrl
  4611   0112AE  CFDD FFF7          	movff	postdec2,tblptrh
  4612   0112B2                     	if	0	;tblptru may be non-zero
  4613   0112B2                     	endif
  4614   0112B2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4615   0112B2  0E00               	movlw	low (__mediumconst shr (0+16))
  4616   0112B4  6EF8               	movwf	tblptru,c
  4617   0112B6                     	endif
  4618   0112B6  0008               	tblrd		*
  4619   0112B8  50F5               	movf	tablat,w,c
  4620   0112BA  0FD0               	addlw	208
  4621   0112BC  6E09               	movwf	read_prec_or_width@c^0,c
  4622   0112BE  0E09               	movlw	9
  4623   0112C0  6409               	cpfsgt	read_prec_or_width@c^0,c
  4624   0112C2  EF65  F089         	goto	u2301
  4625   0112C6  EF67  F089         	goto	u2300
  4626   0112CA                     u2301:
  4627   0112CA  EF3C  F089         	goto	l3320
  4628   0112CE                     u2300:
  4629   0112CE                     l1191:
  4630                           
  4631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4632   0112CE  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  4633   0112D2  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  4634   0112D6  0012               	return		;funcret
  4635   0112D8                     __end_of_read_prec_or_width:
  4636                           	callstack 0
  4637                           
  4638 ;; *************** function ___wmul *****************
  4639 ;; Defined at:
  4640 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  multiplier      2    0[COMRAM] unsigned int 
  4643 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  product         2    4[COMRAM] unsigned int 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  2    0[COMRAM] unsigned int 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0, prodl, prodh
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;Total ram usage:        6 bytes
  4660 ;; Hardware stack levels used: 1
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_ADC2String
  4665 ;;		_read_prec_or_width
  4666 ;;		_setMotorPWM
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text19
  4671   011A72                     __ptext19:
  4672                           	callstack 0
  4673   011A72                     ___wmul:
  4674                           	callstack 25
  4675   011A72  5001               	movf	___wmul@multiplier^0,w,c
  4676   011A74  0203               	mulwf	___wmul@multiplicand^0,c
  4677   011A76  CFF3 F005          	movff	prodl,___wmul@product
  4678   011A7A  CFF4 F006          	movff	prodh,___wmul@product+1
  4679   011A7E  5001               	movf	___wmul@multiplier^0,w,c
  4680   011A80  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4681   011A82  50F3               	movf	243,w,c
  4682   011A84  2606               	addwf	(___wmul@product+1)^0,f,c
  4683   011A86  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4684   011A88  0203               	mulwf	___wmul@multiplicand^0,c
  4685   011A8A  50F3               	movf	243,w,c
  4686   011A8C  2606               	addwf	(___wmul@product+1)^0,f,c
  4687   011A8E  C005  F001         	movff	___wmul@product,?___wmul
  4688   011A92  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4689   011A96  0012               	return		;funcret
  4690   011A98                     __end_of___wmul:
  4691                           	callstack 0
  4692                           
  4693 ;; *************** function _dtoa *****************
  4694 ;; Defined at:
  4695 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  4698 ;;		 -> sprintf@f(12), 
  4699 ;;  d               2   23[COMRAM] int 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  i               2   31[COMRAM] int 
  4702 ;;  w               2   28[COMRAM] int 
  4703 ;;  s               1   30[COMRAM] unsigned char 
  4704 ;;  p               1   27[COMRAM] _Bool 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4714 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;Total ram usage:       11 bytes
  4719 ;; Hardware stack levels used: 1
  4720 ;; Hardware stack levels required when called: 4
  4721 ;; This function calls:
  4722 ;;		___awdiv
  4723 ;;		___awmod
  4724 ;;		_abs
  4725 ;;		_pad
  4726 ;; This function is called by:
  4727 ;;		_vfpfcnvrt
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text20
  4732   010D6C                     __ptext20:
  4733                           	callstack 0
  4734   010D6C                     _dtoa:
  4735                           	callstack 22
  4736   010D6C                     
  4737                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  4738   010D6C  0E01               	movlw	1
  4739   010D6E  6E1C               	movwf	dtoa@p^0,c
  4740   010D70                     
  4741                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  4742   010D70  BE19               	btfsc	(dtoa@d+1)^0,7,c
  4743   010D72  EFBD  F086         	goto	u2191
  4744   010D76  EFC0  F086         	goto	u2190
  4745   010D7A                     u2191:
  4746   010D7A  0E01               	movlw	1
  4747   010D7C  EFC1  F086         	goto	u2200
  4748   010D80                     u2190:
  4749   010D80  0E00               	movlw	0
  4750   010D82                     u2200:
  4751   010D82  6E1F               	movwf	dtoa@s^0,c
  4752   010D84                     
  4753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  4754   010D84  C0EA  F01D         	movff	_width,dtoa@w
  4755   010D88  C0EB  F01E         	movff	_width+1,dtoa@w+1
  4756   010D8C                     
  4757                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  4758   010D8C  501F               	movf	dtoa@s^0,w,c
  4759   010D8E  B4D8               	btfsc	status,2,c
  4760   010D90  EFCC  F086         	goto	u2211
  4761   010D94  EFCE  F086         	goto	u2210
  4762   010D98                     u2211:
  4763   010D98  EFE5  F086         	goto	l1174
  4764   010D9C                     u2210:
  4765   010D9C                     
  4766                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  4767   010D9C  061D               	decf	dtoa@w^0,f,c
  4768   010D9E  A0D8               	btfss	status,0,c
  4769   010DA0  061E               	decf	(dtoa@w+1)^0,f,c
  4770   010DA2                     
  4771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  4772   010DA2  501F               	movf	dtoa@s^0,w,c
  4773   010DA4  A4D8               	btfss	status,2,c
  4774   010DA6  EFD7  F086         	goto	u2221
  4775   010DAA  EFD9  F086         	goto	u2220
  4776   010DAE                     u2221:
  4777   010DAE  EFDF  F086         	goto	l3276
  4778   010DB2                     u2220:
  4779   010DB2  0E00               	movlw	0
  4780   010DB4  6E1B               	movwf	(_dtoa$2528+1)^0,c
  4781   010DB6  0E2B               	movlw	43
  4782   010DB8  6E1A               	movwf	_dtoa$2528^0,c
  4783   010DBA  EFE3  F086         	goto	l3278
  4784   010DBE                     l3276:
  4785   010DBE  0E00               	movlw	0
  4786   010DC0  6E1B               	movwf	(_dtoa$2528+1)^0,c
  4787   010DC2  0E2D               	movlw	45
  4788   010DC4  6E1A               	movwf	_dtoa$2528^0,c
  4789   010DC6                     l3278:
  4790   010DC6  C01A  F01F         	movff	_dtoa$2528,dtoa@s
  4791   010DCA                     l1174:
  4792                           
  4793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  4794   010DCA  0E00               	movlw	0
  4795   010DCC  6E21               	movwf	(dtoa@i+1)^0,c
  4796   010DCE  0E1F               	movlw	31
  4797   010DD0  6E20               	movwf	dtoa@i^0,c
  4798   010DD2                     
  4799                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  4800   010DD2  0E00               	movlw	0
  4801   010DD4  0101               	movlb	1	; () banked
  4802   010DD6  6F83               	movwf	(_dbuf+31)& (0+255),b
  4803                           
  4804                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4805   010DD8  EF1D  F087         	goto	l3292
  4806   010DDC                     l3282:
  4807                           
  4808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  4809   010DDC  0620               	decf	dtoa@i^0,f,c
  4810   010DDE  A0D8               	btfss	status,0,c
  4811   010DE0  0621               	decf	(dtoa@i+1)^0,f,c
  4812   010DE2                     
  4813                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  4814   010DE2  0E64               	movlw	low _dbuf
  4815   010DE4  2420               	addwf	dtoa@i^0,w,c
  4816   010DE6  6ED9               	movwf	fsr2l,c
  4817   010DE8  0E01               	movlw	high _dbuf
  4818   010DEA  2021               	addwfc	(dtoa@i+1)^0,w,c
  4819   010DEC  6EDA               	movwf	fsr2h,c
  4820   010DEE  C018  F001         	movff	dtoa@d,___awmod@dividend
  4821   010DF2  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  4822   010DF6  0E00               	movlw	0
  4823   010DF8  6E04               	movwf	(___awmod@divisor+1)^0,c
  4824   010DFA  0E0A               	movlw	10
  4825   010DFC  6E03               	movwf	___awmod@divisor^0,c
  4826   010DFE  EC6C  F089         	call	___awmod	;wreg free
  4827   010E02  C001  F007         	movff	?___awmod,abs@a
  4828   010E06  C002  F008         	movff	?___awmod+1,abs@a+1
  4829   010E0A  ECDD  F08C         	call	_abs	;wreg free
  4830   010E0E  5007               	movf	?_abs^0,w,c
  4831   010E10  0F30               	addlw	48
  4832   010E12  6EDF               	movwf	indf2,c
  4833   010E14                     
  4834                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  4835   010E14  0E00               	movlw	0
  4836   010E16  6E1C               	movwf	dtoa@p^0,c
  4837   010E18                     
  4838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  4839   010E18  061D               	decf	dtoa@w^0,f,c
  4840   010E1A  A0D8               	btfss	status,0,c
  4841   010E1C  061E               	decf	(dtoa@w+1)^0,f,c
  4842   010E1E                     
  4843                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  4844   010E1E  C018  F001         	movff	dtoa@d,___awdiv@dividend
  4845   010E22  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  4846   010E26  0E00               	movlw	0
  4847   010E28  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4848   010E2A  0E0A               	movlw	10
  4849   010E2C  6E03               	movwf	___awdiv@divisor^0,c
  4850   010E2E  EC52  F088         	call	___awdiv	;wreg free
  4851   010E32  C001  F018         	movff	?___awdiv,dtoa@d
  4852   010E36  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  4853   010E3A                     l3292:
  4854                           
  4855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4856   010E3A  BE21               	btfsc	(dtoa@i+1)^0,7,c
  4857   010E3C  EF28  F087         	goto	u2231
  4858   010E40  5021               	movf	(dtoa@i+1)^0,w,c
  4859   010E42  E108               	bnz	u2230
  4860   010E44  0420               	decf	dtoa@i^0,w,c
  4861   010E46  A0D8               	btfss	status,0,c
  4862   010E48  EF28  F087         	goto	u2231
  4863   010E4C  EF2A  F087         	goto	u2230
  4864   010E50                     u2231:
  4865   010E50  EF50  F087         	goto	l3302
  4866   010E54                     u2230:
  4867   010E54  5018               	movf	dtoa@d^0,w,c
  4868   010E56  1019               	iorwf	(dtoa@d+1)^0,w,c
  4869   010E58  A4D8               	btfss	status,2,c
  4870   010E5A  EF31  F087         	goto	u2241
  4871   010E5E  EF33  F087         	goto	u2240
  4872   010E62                     u2241:
  4873   010E62  EFEE  F086         	goto	l3282
  4874   010E66                     u2240:
  4875   010E66  501C               	movf	dtoa@p^0,w,c
  4876   010E68  A4D8               	btfss	status,2,c
  4877   010E6A  EF39  F087         	goto	u2251
  4878   010E6E  EF3B  F087         	goto	u2250
  4879   010E72                     u2251:
  4880   010E72  EFEE  F086         	goto	l3282
  4881   010E76                     u2250:
  4882   010E76  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  4883   010E78  EF46  F087         	goto	u2261
  4884   010E7C  501E               	movf	(dtoa@w+1)^0,w,c
  4885   010E7E  E108               	bnz	u2260
  4886   010E80  041D               	decf	dtoa@w^0,w,c
  4887   010E82  A0D8               	btfss	status,0,c
  4888   010E84  EF46  F087         	goto	u2261
  4889   010E88  EF48  F087         	goto	u2260
  4890   010E8C                     u2261:
  4891   010E8C  EF50  F087         	goto	l3302
  4892   010E90                     u2260:
  4893   010E90  0100               	movlb	0	; () banked
  4894   010E92  B3EE               	btfsc	_flags& (0+255),1,b
  4895   010E94  EF4E  F087         	goto	u2271
  4896   010E98  EF50  F087         	goto	u2270
  4897   010E9C                     u2271:
  4898   010E9C  EFEE  F086         	goto	l3282
  4899   010EA0                     u2270:
  4900   010EA0                     l3302:
  4901                           
  4902                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  4903   010EA0  501F               	movf	dtoa@s^0,w,c
  4904   010EA2  B4D8               	btfsc	status,2,c
  4905   010EA4  EF56  F087         	goto	u2281
  4906   010EA8  EF58  F087         	goto	u2280
  4907   010EAC                     u2281:
  4908   010EAC  EF63  F087         	goto	l3308
  4909   010EB0                     u2280:
  4910   010EB0                     
  4911                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  4912   010EB0  0620               	decf	dtoa@i^0,f,c
  4913   010EB2  A0D8               	btfss	status,0,c
  4914   010EB4  0621               	decf	(dtoa@i+1)^0,f,c
  4915   010EB6                     
  4916                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  4917   010EB6  0E64               	movlw	low _dbuf
  4918   010EB8  2420               	addwf	dtoa@i^0,w,c
  4919   010EBA  6ED9               	movwf	fsr2l,c
  4920   010EBC  0E01               	movlw	high _dbuf
  4921   010EBE  2021               	addwfc	(dtoa@i+1)^0,w,c
  4922   010EC0  6EDA               	movwf	fsr2h,c
  4923   010EC2  C01F  FFDF         	movff	dtoa@s,indf2
  4924   010EC6                     l3308:
  4925                           
  4926                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4927   010EC6  C017  F00F         	movff	dtoa@fp,pad@fp
  4928   010ECA  0E64               	movlw	low _dbuf
  4929   010ECC  2420               	addwf	dtoa@i^0,w,c
  4930   010ECE  6E10               	movwf	pad@buf^0,c
  4931   010ED0  0E01               	movlw	high _dbuf
  4932   010ED2  2021               	addwfc	(dtoa@i+1)^0,w,c
  4933   010ED4  6E11               	movwf	(pad@buf+1)^0,c
  4934   010ED6  C01D  F012         	movff	dtoa@w,pad@p
  4935   010EDA  C01E  F013         	movff	dtoa@w+1,pad@p+1
  4936   010EDE  EC67  F08A         	call	_pad	;wreg free
  4937   010EE2  0012               	return		;funcret
  4938   010EE4                     __end_of_dtoa:
  4939                           	callstack 0
  4940                           
  4941 ;; *************** function _pad *****************
  4942 ;; Defined at:
  4943 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  4946 ;;		 -> sprintf@f(12), 
  4947 ;;  buf             2   15[COMRAM] PTR unsigned char 
  4948 ;;		 -> dbuf(32), 
  4949 ;;  p               2   17[COMRAM] int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  i               2   20[COMRAM] int 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4961 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;Total ram usage:        8 bytes
  4966 ;; Hardware stack levels used: 1
  4967 ;; Hardware stack levels required when called: 3
  4968 ;; This function calls:
  4969 ;;		_fputc
  4970 ;;		_fputs
  4971 ;; This function is called by:
  4972 ;;		_dtoa
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text21
  4977   0114CE                     __ptext21:
  4978                           	callstack 0
  4979   0114CE                     _pad:
  4980                           	callstack 22
  4981   0114CE                     
  4982                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  4983   0114CE  0100               	movlb	0	; () banked
  4984   0114D0  A1EE               	btfss	_flags& (0+255),0,b
  4985   0114D2  EF6D  F08A         	goto	u2141
  4986   0114D6  EF6F  F08A         	goto	u2140
  4987   0114DA                     u2141:
  4988   0114DA  EF77  F08A         	goto	l3246
  4989   0114DE                     u2140:
  4990   0114DE                     
  4991                           ; BSR set to: 0
  4992                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  4993   0114DE  C010  F009         	movff	pad@buf,fputs@s
  4994   0114E2  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4995   0114E6  C00F  F00B         	movff	pad@fp,fputs@fp
  4996   0114EA  EC87  F08C         	call	_fputs	;wreg free
  4997   0114EE                     l3246:
  4998                           
  4999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  5000   0114EE  BE13               	btfsc	(pad@p+1)^0,7,c
  5001   0114F0  EF7E  F08A         	goto	u2150
  5002   0114F4  EF7C  F08A         	goto	u2151
  5003   0114F8                     u2151:
  5004   0114F8  EF82  F08A         	goto	l1166
  5005   0114FC                     u2150:
  5006   0114FC                     
  5007                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  5008   0114FC  0E00               	movlw	0
  5009   0114FE  6E13               	movwf	(pad@p+1)^0,c
  5010   011500  0E00               	movlw	0
  5011   011502  6E12               	movwf	pad@p^0,c
  5012   011504                     l1166:
  5013                           
  5014                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  5015   011504  0E00               	movlw	0
  5016   011506  6E16               	movwf	(pad@i+1)^0,c
  5017   011508  0E00               	movlw	0
  5018   01150A  6E15               	movwf	pad@i^0,c
  5019                           
  5020                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5021   01150C  EF92  F08A         	goto	l3254
  5022   011510                     l3250:
  5023                           
  5024                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  5025   011510  0E00               	movlw	0
  5026   011512  6E02               	movwf	(fputc@c+1)^0,c
  5027   011514  0E20               	movlw	32
  5028   011516  6E01               	movwf	fputc@c^0,c
  5029   011518  C00F  F003         	movff	pad@fp,fputc@fp
  5030   01151C  ECB4  F088         	call	_fputc	;wreg free
  5031   011520                     
  5032                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  5033   011520  4A15               	infsnz	pad@i^0,f,c
  5034   011522  2A16               	incf	(pad@i+1)^0,f,c
  5035   011524                     l3254:
  5036                           
  5037                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5038   011524  5012               	movf	pad@p^0,w,c
  5039   011526  5C15               	subwf	pad@i^0,w,c
  5040   011528  5016               	movf	(pad@i+1)^0,w,c
  5041   01152A  0A80               	xorlw	128
  5042   01152C  6E14               	movwf	??_pad^0,c
  5043   01152E  5013               	movf	(pad@p+1)^0,w,c
  5044   011530  0A80               	xorlw	128
  5045   011532  5814               	subwfb	??_pad^0,w,c
  5046   011534  A0D8               	btfss	status,0,c
  5047   011536  EF9F  F08A         	goto	u2161
  5048   01153A  EFA1  F08A         	goto	u2160
  5049   01153E                     u2161:
  5050   01153E  EF88  F08A         	goto	l3250
  5051   011542                     u2160:
  5052   011542                     
  5053                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  5054   011542  0100               	movlb	0	; () banked
  5055   011544  B1EE               	btfsc	_flags& (0+255),0,b
  5056   011546  EFA7  F08A         	goto	u2171
  5057   01154A  EFA9  F08A         	goto	u2170
  5058   01154E                     u2171:
  5059   01154E  EFB1  F08A         	goto	l1171
  5060   011552                     u2170:
  5061   011552                     
  5062                           ; BSR set to: 0
  5063                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  5064   011552  C010  F009         	movff	pad@buf,fputs@s
  5065   011556  C011  F00A         	movff	pad@buf+1,fputs@s+1
  5066   01155A  C00F  F00B         	movff	pad@fp,fputs@fp
  5067   01155E  EC87  F08C         	call	_fputs	;wreg free
  5068   011562                     l1171:
  5069   011562  0012               	return		;funcret
  5070   011564                     __end_of_pad:
  5071                           	callstack 0
  5072                           
  5073 ;; *************** function _fputs *****************
  5074 ;; Defined at:
  5075 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5078 ;;		 -> dbuf(32), 
  5079 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  5080 ;;		 -> sprintf@f(12), 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  i               2   12[COMRAM] int 
  5083 ;;  c               1   11[COMRAM] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  2    8[COMRAM] int 
  5086 ;; Registers used:
  5087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5093 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5094 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5096 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5097 ;;Total ram usage:        6 bytes
  5098 ;; Hardware stack levels used: 1
  5099 ;; Hardware stack levels required when called: 2
  5100 ;; This function calls:
  5101 ;;		_fputc
  5102 ;; This function is called by:
  5103 ;;		_pad
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text22
  5108   01190E                     __ptext22:
  5109                           	callstack 0
  5110   01190E                     _fputs:
  5111                           	callstack 22
  5112   01190E  0E00               	movlw	0
  5113   011910  6E0E               	movwf	(fputs@i+1)^0,c
  5114   011912  0E00               	movlw	0
  5115   011914  6E0D               	movwf	fputs@i^0,c
  5116   011916  EF96  F08C         	goto	l3154
  5117   01191A                     l3150:
  5118   01191A  C00C  F001         	movff	fputs@c,fputc@c
  5119   01191E  6A02               	clrf	(fputc@c+1)^0,c
  5120   011920  C00B  F003         	movff	fputs@fp,fputc@fp
  5121   011924  ECB4  F088         	call	_fputc	;wreg free
  5122   011928  4A0D               	infsnz	fputs@i^0,f,c
  5123   01192A  2A0E               	incf	(fputs@i+1)^0,f,c
  5124   01192C                     l3154:
  5125   01192C  500D               	movf	fputs@i^0,w,c
  5126   01192E  2409               	addwf	fputs@s^0,w,c
  5127   011930  6ED9               	movwf	fsr2l,c
  5128   011932  500E               	movf	(fputs@i+1)^0,w,c
  5129   011934  200A               	addwfc	(fputs@s+1)^0,w,c
  5130   011936  6EDA               	movwf	fsr2h,c
  5131   011938  50DF               	movf	indf2,w,c
  5132   01193A  6E0C               	movwf	fputs@c^0,c
  5133   01193C  500C               	movf	fputs@c^0,w,c
  5134   01193E  A4D8               	btfss	status,2,c
  5135   011940  EFA4  F08C         	goto	u2011
  5136   011944  EFA6  F08C         	goto	u2010
  5137   011948                     u2011:
  5138   011948  EF8D  F08C         	goto	l3150
  5139   01194C                     u2010:
  5140   01194C  0012               	return		;funcret
  5141   01194E                     __end_of_fputs:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function _fputc *****************
  5145 ;; Defined at:
  5146 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  c               2    0[COMRAM] int 
  5149 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  5150 ;;		 -> sprintf@f(12), 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  2    0[COMRAM] int 
  5155 ;; Registers used:
  5156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5162 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5165 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5166 ;;Total ram usage:        8 bytes
  5167 ;; Hardware stack levels used: 1
  5168 ;; Hardware stack levels required when called: 1
  5169 ;; This function calls:
  5170 ;;		_putch
  5171 ;; This function is called by:
  5172 ;;		_pad
  5173 ;;		_vfpfcnvrt
  5174 ;;		_fputs
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text23
  5179   011168                     __ptext23:
  5180                           	callstack 0
  5181   011168                     _fputc:
  5182                           	callstack 25
  5183   011168  5003               	movf	fputc@fp^0,w,c
  5184   01116A  B4D8               	btfsc	status,2,c
  5185   01116C  EFBA  F088         	goto	u1971
  5186   011170  EFBC  F088         	goto	u1970
  5187   011174                     u1971:
  5188   011174  EFC4  F088         	goto	l3138
  5189   011178                     u1970:
  5190   011178  5003               	movf	fputc@fp^0,w,c
  5191   01117A  A4D8               	btfss	status,2,c
  5192   01117C  EFC2  F088         	goto	u1981
  5193   011180  EFC4  F088         	goto	u1980
  5194   011184                     u1981:
  5195   011184  EFC9  F088         	goto	l3140
  5196   011188                     u1980:
  5197   011188                     l3138:
  5198   011188  5001               	movf	fputc@c^0,w,c
  5199   01118A  EC99  F08D         	call	_putch
  5200   01118E  EF10  F089         	goto	l1235
  5201   011192                     l3140:
  5202   011192  5003               	movf	fputc@fp^0,w,c
  5203   011194  6ED9               	movwf	fsr2l,c
  5204   011196  6ADA               	clrf	fsr2h,c
  5205   011198  0E0A               	movlw	10
  5206   01119A  26D9               	addwf	fsr2l,f,c
  5207   01119C  50DE               	movf	postinc2,w,c
  5208   01119E  10DE               	iorwf	postinc2,w,c
  5209   0111A0  B4D8               	btfsc	status,2,c
  5210   0111A2  EFD5  F088         	goto	u1991
  5211   0111A6  EFD7  F088         	goto	u1990
  5212   0111AA                     u1991:
  5213   0111AA  EFF0  F088         	goto	l3144
  5214   0111AE                     u1990:
  5215   0111AE  5003               	movf	fputc@fp^0,w,c
  5216   0111B0  6ED9               	movwf	fsr2l,c
  5217   0111B2  6ADA               	clrf	fsr2h,c
  5218   0111B4  0E0A               	movlw	10
  5219   0111B6  26D9               	addwf	fsr2l,f,c
  5220   0111B8  5003               	movf	fputc@fp^0,w,c
  5221   0111BA  6EE1               	movwf	fsr1l,c
  5222   0111BC  6AE2               	clrf	fsr1h,c
  5223   0111BE  0E03               	movlw	3
  5224   0111C0  26E1               	addwf	fsr1l,f,c
  5225   0111C2  50DE               	movf	postinc2,w,c
  5226   0111C4  5CE6               	subwf	postinc1,w,c
  5227   0111C6  50E6               	movf	postinc1,w,c
  5228   0111C8  0A80               	xorlw	128
  5229   0111CA  6E08               	movwf	(??_fputc+4)^0,c
  5230   0111CC  50DE               	movf	postinc2,w,c
  5231   0111CE  0A80               	xorlw	128
  5232   0111D0  5808               	subwfb	(??_fputc+4)^0,w,c
  5233   0111D2  B0D8               	btfsc	status,0,c
  5234   0111D4  EFEE  F088         	goto	u2001
  5235   0111D8  EFF0  F088         	goto	u2000
  5236   0111DC                     u2001:
  5237   0111DC  EF10  F089         	goto	l1235
  5238   0111E0                     u2000:
  5239   0111E0                     l3144:
  5240   0111E0  5003               	movf	fputc@fp^0,w,c
  5241   0111E2  6ED9               	movwf	fsr2l,c
  5242   0111E4  6ADA               	clrf	fsr2h,c
  5243   0111E6  0E03               	movlw	3
  5244   0111E8  26D9               	addwf	fsr2l,f,c
  5245   0111EA  CFDE F004          	movff	postinc2,??_fputc
  5246   0111EE  CFDD F005          	movff	postdec2,??_fputc+1
  5247   0111F2  5003               	movf	fputc@fp^0,w,c
  5248   0111F4  6ED9               	movwf	fsr2l,c
  5249   0111F6  6ADA               	clrf	fsr2h,c
  5250   0111F8  CFDE F006          	movff	postinc2,??_fputc+2
  5251   0111FC  CFDD F007          	movff	postdec2,??_fputc+3
  5252   011200  5004               	movf	??_fputc^0,w,c
  5253   011202  2406               	addwf	(??_fputc+2)^0,w,c
  5254   011204  6ED9               	movwf	fsr2l,c
  5255   011206  5005               	movf	(??_fputc+1)^0,w,c
  5256   011208  2007               	addwfc	(??_fputc+3)^0,w,c
  5257   01120A  6EDA               	movwf	fsr2h,c
  5258   01120C  C001  FFDF         	movff	fputc@c,indf2
  5259   011210  5003               	movf	fputc@fp^0,w,c
  5260   011212  6ED9               	movwf	fsr2l,c
  5261   011214  6ADA               	clrf	fsr2h,c
  5262   011216  0E03               	movlw	3
  5263   011218  26D9               	addwf	fsr2l,f,c
  5264   01121A  2ADE               	incf	postinc2,f,c
  5265   01121C  0E00               	movlw	0
  5266   01121E  22DD               	addwfc	postdec2,f,c
  5267   011220                     l1235:
  5268   011220  0012               	return		;funcret
  5269   011222                     __end_of_fputc:
  5270                           	callstack 0
  5271                           
  5272 ;; *************** function _putch *****************
  5273 ;; Defined at:
  5274 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  c               1    wreg     unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  c               1    0[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_fputc
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	text24
  5302   011B32                     __ptext24:
  5303                           	callstack 0
  5304   011B32                     _putch:
  5305                           	callstack 25
  5306   011B32  0012               	return		;funcret
  5307   011B34                     __end_of_putch:
  5308                           	callstack 0
  5309                           
  5310 ;; *************** function _abs *****************
  5311 ;; Defined at:
  5312 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  a               2    6[COMRAM] int 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2    6[COMRAM] int 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;Total ram usage:        4 bytes
  5331 ;; Hardware stack levels used: 1
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_dtoa
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text25
  5340   0119BA                     __ptext25:
  5341                           	callstack 0
  5342   0119BA                     _abs:
  5343                           	callstack 25
  5344   0119BA  BE08               	btfsc	(abs@a+1)^0,7,c
  5345   0119BC  EFE2  F08C         	goto	u2181
  5346   0119C0  EFE4  F08C         	goto	u2180
  5347   0119C4                     u2181:
  5348   0119C4  EFEA  F08C         	goto	l1220
  5349   0119C8                     u2180:
  5350   0119C8  C007  F007         	movff	abs@a,?_abs
  5351   0119CC  C008  F008         	movff	abs@a+1,?_abs+1
  5352   0119D0  EFF6  F08C         	goto	l1223
  5353   0119D4                     l1220:
  5354   0119D4  C007  F009         	movff	abs@a,??_abs
  5355   0119D8  C008  F00A         	movff	abs@a+1,??_abs+1
  5356   0119DC  1E09               	comf	??_abs^0,f,c
  5357   0119DE  1E0A               	comf	(??_abs+1)^0,f,c
  5358   0119E0  4A09               	infsnz	??_abs^0,f,c
  5359   0119E2  2A0A               	incf	(??_abs+1)^0,f,c
  5360   0119E4  C009  F007         	movff	??_abs,?_abs
  5361   0119E8  C00A  F008         	movff	??_abs+1,?_abs+1
  5362   0119EC                     l1223:
  5363   0119EC  0012               	return		;funcret
  5364   0119EE                     __end_of_abs:
  5365                           	callstack 0
  5366                           
  5367 ;; *************** function ___awmod *****************
  5368 ;; Defined at:
  5369 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;  dividend        2    0[COMRAM] int 
  5372 ;;  divisor         2    2[COMRAM] int 
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  sign            1    5[COMRAM] unsigned char 
  5375 ;;  counter         1    4[COMRAM] unsigned char 
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  2    0[COMRAM] int 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5389 ;;Total ram usage:        6 bytes
  5390 ;; Hardware stack levels used: 1
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_dtoa
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text26
  5399   0112D8                     __ptext26:
  5400                           	callstack 0
  5401   0112D8                     ___awmod:
  5402                           	callstack 25
  5403   0112D8  0E00               	movlw	0
  5404   0112DA  6E06               	movwf	___awmod@sign^0,c
  5405   0112DC  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  5406   0112DE  EF75  F089         	goto	u2080
  5407   0112E2  EF73  F089         	goto	u2081
  5408   0112E6                     u2081:
  5409   0112E6  EF7B  F089         	goto	l3214
  5410   0112EA                     u2080:
  5411   0112EA  6C01               	negf	___awmod@dividend^0,c
  5412   0112EC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5413   0112EE  B0D8               	btfsc	status,0,c
  5414   0112F0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5415   0112F2  0E01               	movlw	1
  5416   0112F4  6E06               	movwf	___awmod@sign^0,c
  5417   0112F6                     l3214:
  5418   0112F6  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  5419   0112F8  EF82  F089         	goto	u2090
  5420   0112FC  EF80  F089         	goto	u2091
  5421   011300                     u2091:
  5422   011300  EF86  F089         	goto	l3218
  5423   011304                     u2090:
  5424   011304  6C03               	negf	___awmod@divisor^0,c
  5425   011306  1E04               	comf	(___awmod@divisor+1)^0,f,c
  5426   011308  B0D8               	btfsc	status,0,c
  5427   01130A  2A04               	incf	(___awmod@divisor+1)^0,f,c
  5428   01130C                     l3218:
  5429   01130C  5003               	movf	___awmod@divisor^0,w,c
  5430   01130E  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  5431   011310  B4D8               	btfsc	status,2,c
  5432   011312  EF8D  F089         	goto	u2101
  5433   011316  EF8F  F089         	goto	u2100
  5434   01131A                     u2101:
  5435   01131A  EFB3  F089         	goto	l3234
  5436   01131E                     u2100:
  5437   01131E  0E01               	movlw	1
  5438   011320  6E05               	movwf	___awmod@counter^0,c
  5439   011322  EF97  F089         	goto	l3224
  5440   011326                     l3222:
  5441   011326  90D8               	bcf	status,0,c
  5442   011328  3603               	rlcf	___awmod@divisor^0,f,c
  5443   01132A  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  5444   01132C  2A05               	incf	___awmod@counter^0,f,c
  5445   01132E                     l3224:
  5446   01132E  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  5447   011330  EF9C  F089         	goto	u2111
  5448   011334  EF9E  F089         	goto	u2110
  5449   011338                     u2111:
  5450   011338  EF93  F089         	goto	l3222
  5451   01133C                     u2110:
  5452   01133C                     l3226:
  5453   01133C  5003               	movf	___awmod@divisor^0,w,c
  5454   01133E  5C01               	subwf	___awmod@dividend^0,w,c
  5455   011340  5004               	movf	(___awmod@divisor+1)^0,w,c
  5456   011342  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  5457   011344  A0D8               	btfss	status,0,c
  5458   011346  EFA7  F089         	goto	u2121
  5459   01134A  EFA9  F089         	goto	u2120
  5460   01134E                     u2121:
  5461   01134E  EFAD  F089         	goto	l3230
  5462   011352                     u2120:
  5463   011352  5003               	movf	___awmod@divisor^0,w,c
  5464   011354  5E01               	subwf	___awmod@dividend^0,f,c
  5465   011356  5004               	movf	(___awmod@divisor+1)^0,w,c
  5466   011358  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  5467   01135A                     l3230:
  5468   01135A  90D8               	bcf	status,0,c
  5469   01135C  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  5470   01135E  3203               	rrcf	___awmod@divisor^0,f,c
  5471   011360  2E05               	decfsz	___awmod@counter^0,f,c
  5472   011362  EF9E  F089         	goto	l3226
  5473   011366                     l3234:
  5474   011366  5006               	movf	___awmod@sign^0,w,c
  5475   011368  B4D8               	btfsc	status,2,c
  5476   01136A  EFB9  F089         	goto	u2131
  5477   01136E  EFBB  F089         	goto	u2130
  5478   011372                     u2131:
  5479   011372  EFBF  F089         	goto	l3238
  5480   011376                     u2130:
  5481   011376  6C01               	negf	___awmod@dividend^0,c
  5482   011378  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5483   01137A  B0D8               	btfsc	status,0,c
  5484   01137C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5485   01137E                     l3238:
  5486   01137E  C001  F001         	movff	___awmod@dividend,?___awmod
  5487   011382  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5488   011386  0012               	return		;funcret
  5489   011388                     __end_of___awmod:
  5490                           	callstack 0
  5491                           
  5492 ;; *************** function ___awdiv *****************
  5493 ;; Defined at:
  5494 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  dividend        2    0[COMRAM] int 
  5497 ;;  divisor         2    2[COMRAM] int 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  quotient        2    6[COMRAM] int 
  5500 ;;  sign            1    5[COMRAM] unsigned char 
  5501 ;;  counter         1    4[COMRAM] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  2    0[COMRAM] int 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5512 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;Total ram usage:        8 bytes
  5516 ;; Hardware stack levels used: 1
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_dtoa
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text27
  5525   0110A4                     __ptext27:
  5526                           	callstack 0
  5527   0110A4                     ___awdiv:
  5528                           	callstack 25
  5529   0110A4  0E00               	movlw	0
  5530   0110A6  6E06               	movwf	___awdiv@sign^0,c
  5531   0110A8  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  5532   0110AA  EF5B  F088         	goto	u2020
  5533   0110AE  EF59  F088         	goto	u2021
  5534   0110B2                     u2021:
  5535   0110B2  EF61  F088         	goto	l3170
  5536   0110B6                     u2020:
  5537   0110B6  6C03               	negf	___awdiv@divisor^0,c
  5538   0110B8  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  5539   0110BA  B0D8               	btfsc	status,0,c
  5540   0110BC  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  5541   0110BE  0E01               	movlw	1
  5542   0110C0  6E06               	movwf	___awdiv@sign^0,c
  5543   0110C2                     l3170:
  5544   0110C2  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  5545   0110C4  EF68  F088         	goto	u2030
  5546   0110C8  EF66  F088         	goto	u2031
  5547   0110CC                     u2031:
  5548   0110CC  EF6E  F088         	goto	l3176
  5549   0110D0                     u2030:
  5550   0110D0  6C01               	negf	___awdiv@dividend^0,c
  5551   0110D2  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  5552   0110D4  B0D8               	btfsc	status,0,c
  5553   0110D6  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  5554   0110D8  0E01               	movlw	1
  5555   0110DA  1A06               	xorwf	___awdiv@sign^0,f,c
  5556   0110DC                     l3176:
  5557   0110DC  0E00               	movlw	0
  5558   0110DE  6E08               	movwf	(___awdiv@quotient+1)^0,c
  5559   0110E0  0E00               	movlw	0
  5560   0110E2  6E07               	movwf	___awdiv@quotient^0,c
  5561   0110E4  5003               	movf	___awdiv@divisor^0,w,c
  5562   0110E6  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  5563   0110E8  B4D8               	btfsc	status,2,c
  5564   0110EA  EF79  F088         	goto	u2041
  5565   0110EE  EF7B  F088         	goto	u2040
  5566   0110F2                     u2041:
  5567   0110F2  EFA3  F088         	goto	l3198
  5568   0110F6                     u2040:
  5569   0110F6  0E01               	movlw	1
  5570   0110F8  6E05               	movwf	___awdiv@counter^0,c
  5571   0110FA  EF83  F088         	goto	l3184
  5572   0110FE                     l3182:
  5573   0110FE  90D8               	bcf	status,0,c
  5574   011100  3603               	rlcf	___awdiv@divisor^0,f,c
  5575   011102  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  5576   011104  2A05               	incf	___awdiv@counter^0,f,c
  5577   011106                     l3184:
  5578   011106  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  5579   011108  EF88  F088         	goto	u2051
  5580   01110C  EF8A  F088         	goto	u2050
  5581   011110                     u2051:
  5582   011110  EF7F  F088         	goto	l3182
  5583   011114                     u2050:
  5584   011114                     l3186:
  5585   011114  90D8               	bcf	status,0,c
  5586   011116  3607               	rlcf	___awdiv@quotient^0,f,c
  5587   011118  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  5588   01111A  5003               	movf	___awdiv@divisor^0,w,c
  5589   01111C  5C01               	subwf	___awdiv@dividend^0,w,c
  5590   01111E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5591   011120  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  5592   011122  A0D8               	btfss	status,0,c
  5593   011124  EF96  F088         	goto	u2061
  5594   011128  EF98  F088         	goto	u2060
  5595   01112C                     u2061:
  5596   01112C  EF9D  F088         	goto	l3194
  5597   011130                     u2060:
  5598   011130  5003               	movf	___awdiv@divisor^0,w,c
  5599   011132  5E01               	subwf	___awdiv@dividend^0,f,c
  5600   011134  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5601   011136  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  5602   011138  8007               	bsf	___awdiv@quotient^0,0,c
  5603   01113A                     l3194:
  5604   01113A  90D8               	bcf	status,0,c
  5605   01113C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  5606   01113E  3203               	rrcf	___awdiv@divisor^0,f,c
  5607   011140  2E05               	decfsz	___awdiv@counter^0,f,c
  5608   011142  EF8A  F088         	goto	l3186
  5609   011146                     l3198:
  5610   011146  5006               	movf	___awdiv@sign^0,w,c
  5611   011148  B4D8               	btfsc	status,2,c
  5612   01114A  EFA9  F088         	goto	u2071
  5613   01114E  EFAB  F088         	goto	u2070
  5614   011152                     u2071:
  5615   011152  EFAF  F088         	goto	l3202
  5616   011156                     u2070:
  5617   011156  6C07               	negf	___awdiv@quotient^0,c
  5618   011158  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  5619   01115A  B0D8               	btfsc	status,0,c
  5620   01115C  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  5621   01115E                     l3202:
  5622   01115E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5623   011162  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5624   011166  0012               	return		;funcret
  5625   011168                     __end_of___awdiv:
  5626                           	callstack 0
  5627                           
  5628 ;; *************** function _sendStringSerial4 *****************
  5629 ;; Defined at:
  5630 ;;		line 41 in file "serial.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  string          2    1[COMRAM] PTR unsigned char 
  5633 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  5634 ;;		 -> test@led_state(50), convert_rgb2hue@blue_weighted(20), convert_rgb2hue@green_weighted(20), convert_rgb2hue@red_w
      +eighted(20), 
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5646 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used: 1
  5652 ;; Hardware stack levels required when called: 1
  5653 ;; This function calls:
  5654 ;;		_sendCharSerial4
  5655 ;; This function is called by:
  5656 ;;		_convert_rgb2hue
  5657 ;;		_test
  5658 ;;		_calibration_routine
  5659 ;;		_send2USART
  5660 ;;		_sendAllReadings
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text28
  5665   01194E                     __ptext28:
  5666                           	callstack 0
  5667   01194E                     _sendStringSerial4:
  5668                           	callstack 28
  5669   01194E                     
  5670                           ;serial.c: 44:     while(*string != 0){
  5671   01194E  EFB6  F08C         	goto	l3496
  5672   011952                     l3490:
  5673                           
  5674                           ;serial.c: 46:   sendCharSerial4(*string++);
  5675   011952  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5676   011956  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5677   01195A  50DF               	movf	indf2,w,c
  5678   01195C  EC78  F08D         	call	_sendCharSerial4
  5679   011960  4A02               	infsnz	sendStringSerial4@string^0,f,c
  5680   011962  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  5681   011964                     
  5682                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5683   011964  0E6A               	movlw	106
  5684   011966                     u2947:
  5685   011966  2EE8               	decfsz	wreg,f,c
  5686   011968  D7FE               	bra	u2947
  5687   01196A  D000               	nop2	
  5688   01196C                     l3496:
  5689                           
  5690                           ;serial.c: 44:     while(*string != 0){
  5691   01196C  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5692   011970  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5693   011974  50DF               	movf	indf2,w,c
  5694   011976  A4D8               	btfss	status,2,c
  5695   011978  EFC0  F08C         	goto	u2451
  5696   01197C  EFC2  F08C         	goto	u2450
  5697   011980                     u2451:
  5698   011980  EFA9  F08C         	goto	l3490
  5699   011984                     u2450:
  5700   011984  0012               	return		;funcret
  5701   011986                     __end_of_sendStringSerial4:
  5702                           	callstack 0
  5703                           
  5704 ;; *************** function _sendCharSerial4 *****************
  5705 ;; Defined at:
  5706 ;;		line 35 in file "serial.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  charToSend      1    wreg     unsigned char 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  charToSend      1    0[COMRAM] unsigned char 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;Total ram usage:        1 bytes
  5725 ;; Hardware stack levels used: 1
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_sendStringSerial4
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text29
  5734   011AF0                     __ptext29:
  5735                           	callstack 0
  5736   011AF0                     _sendCharSerial4:
  5737                           	callstack 28
  5738                           
  5739                           ;incstack = 0
  5740                           ;sendCharSerial4@charToSend stored from wreg
  5741   011AF0  6E01               	movwf	sendCharSerial4@charToSend^0,c
  5742   011AF2                     l411:
  5743   011AF2  010E               	movlb	14	; () banked
  5744   011AF4  A537               	btfss	55,2,b	;volatile
  5745   011AF6  EF7F  F08D         	goto	u2411
  5746   011AFA  EF81  F08D         	goto	u2410
  5747   011AFE                     u2411:
  5748   011AFE  EF79  F08D         	goto	l411
  5749   011B02                     u2410:
  5750   011B02                     
  5751                           ; BSR set to: 14
  5752                           ;serial.c: 37:     TX4REG = charToSend;
  5753   011B02  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5754   011B06                     
  5755                           ; BSR set to: 14
  5756   011B06  0012               	return		;funcret
  5757   011B08                     __end_of_sendCharSerial4:
  5758                           	callstack 0
  5759                           
  5760 ;; *************** function _color_read_Red *****************
  5761 ;; Defined at:
  5762 ;;		line 30 in file "color.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  tmp             2    9[COMRAM] unsigned int 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  2    4[COMRAM] unsigned int 
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5776 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5778 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5779 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5780 ;;Total ram usage:        7 bytes
  5781 ;; Hardware stack levels used: 1
  5782 ;; Hardware stack levels required when called: 2
  5783 ;; This function calls:
  5784 ;;		_I2C_2_Master_Read
  5785 ;;		_I2C_2_Master_RepStart
  5786 ;;		_I2C_2_Master_Start
  5787 ;;		_I2C_2_Master_Stop
  5788 ;;		_I2C_2_Master_Write
  5789 ;; This function is called by:
  5790 ;;		_calibration_routine
  5791 ;;		_reading_values
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text30
  5796   0116C6                     __ptext30:
  5797                           	callstack 0
  5798   0116C6                     _color_read_Red:
  5799                           	callstack 26
  5800   0116C6                     
  5801                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  5802   0116C6  EC8F  F08D         	call	_I2C_2_Master_Start	;wreg free
  5803                           
  5804                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  5805   0116CA  0E52               	movlw	82
  5806   0116CC  EC84  F08D         	call	_I2C_2_Master_Write
  5807                           
  5808                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  5809   0116D0  0EB6               	movlw	182
  5810   0116D2  EC84  F08D         	call	_I2C_2_Master_Write
  5811                           
  5812                           ;color.c: 36:  I2C_2_Master_RepStart();
  5813   0116D6  EC94  F08D         	call	_I2C_2_Master_RepStart	;wreg free
  5814                           
  5815                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  5816   0116DA  0E53               	movlw	83
  5817   0116DC  EC84  F08D         	call	_I2C_2_Master_Write
  5818                           
  5819                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  5820   0116E0  0E01               	movlw	1
  5821   0116E2  EC26  F08C         	call	_I2C_2_Master_Read
  5822   0116E6  6E07               	movwf	??_color_read_Red^0,c
  5823   0116E8  5007               	movf	??_color_read_Red^0,w,c
  5824   0116EA  6E0A               	movwf	color_read_Red@tmp^0,c
  5825   0116EC  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5826                           
  5827                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5828   0116EE  0E00               	movlw	0
  5829   0116F0  EC26  F08C         	call	_I2C_2_Master_Read
  5830   0116F4  6E07               	movwf	??_color_read_Red^0,c
  5831   0116F6  5007               	movf	??_color_read_Red^0,w,c
  5832   0116F8  6E09               	movwf	(??_color_read_Red+2)^0,c
  5833   0116FA  6A08               	clrf	(??_color_read_Red+1)^0,c
  5834   0116FC  500A               	movf	color_read_Red@tmp^0,w,c
  5835   0116FE  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5836   011700  6E0A               	movwf	color_read_Red@tmp^0,c
  5837   011702  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5838   011704  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5839   011706  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5840                           
  5841                           ;color.c: 40:  I2C_2_Master_Stop();
  5842   011708  EC8A  F08D         	call	_I2C_2_Master_Stop	;wreg free
  5843   01170C                     
  5844                           ;color.c: 41:  return tmp;
  5845   01170C  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5846   011710  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5847   011714  0012               	return		;funcret
  5848   011716                     __end_of_color_read_Red:
  5849                           	callstack 0
  5850                           
  5851 ;; *************** function _color_read_Green *****************
  5852 ;; Defined at:
  5853 ;;		line 44 in file "color.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;		None
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  tmp             2    9[COMRAM] unsigned int 
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  2    4[COMRAM] unsigned int 
  5860 ;; Registers used:
  5861 ;;		wreg, status,2, status,0, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5867 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5869 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5870 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;Total ram usage:        7 bytes
  5872 ;; Hardware stack levels used: 1
  5873 ;; Hardware stack levels required when called: 2
  5874 ;; This function calls:
  5875 ;;		_I2C_2_Master_Read
  5876 ;;		_I2C_2_Master_RepStart
  5877 ;;		_I2C_2_Master_Start
  5878 ;;		_I2C_2_Master_Stop
  5879 ;;		_I2C_2_Master_Write
  5880 ;; This function is called by:
  5881 ;;		_calibration_routine
  5882 ;;		_reading_values
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text31
  5887   011716                     __ptext31:
  5888                           	callstack 0
  5889   011716                     _color_read_Green:
  5890                           	callstack 26
  5891   011716                     
  5892                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5893   011716  EC8F  F08D         	call	_I2C_2_Master_Start	;wreg free
  5894                           
  5895                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5896   01171A  0E52               	movlw	82
  5897   01171C  EC84  F08D         	call	_I2C_2_Master_Write
  5898                           
  5899                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  5900   011720  0EB8               	movlw	184
  5901   011722  EC84  F08D         	call	_I2C_2_Master_Write
  5902                           
  5903                           ;color.c: 50:  I2C_2_Master_RepStart();
  5904   011726  EC94  F08D         	call	_I2C_2_Master_RepStart	;wreg free
  5905                           
  5906                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  5907   01172A  0E53               	movlw	83
  5908   01172C  EC84  F08D         	call	_I2C_2_Master_Write
  5909                           
  5910                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  5911   011730  0E01               	movlw	1
  5912   011732  EC26  F08C         	call	_I2C_2_Master_Read
  5913   011736  6E07               	movwf	??_color_read_Green^0,c
  5914   011738  5007               	movf	??_color_read_Green^0,w,c
  5915   01173A  6E0A               	movwf	color_read_Green@tmp^0,c
  5916   01173C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5917                           
  5918                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5919   01173E  0E00               	movlw	0
  5920   011740  EC26  F08C         	call	_I2C_2_Master_Read
  5921   011744  6E07               	movwf	??_color_read_Green^0,c
  5922   011746  5007               	movf	??_color_read_Green^0,w,c
  5923   011748  6E09               	movwf	(??_color_read_Green+2)^0,c
  5924   01174A  6A08               	clrf	(??_color_read_Green+1)^0,c
  5925   01174C  500A               	movf	color_read_Green@tmp^0,w,c
  5926   01174E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5927   011750  6E0A               	movwf	color_read_Green@tmp^0,c
  5928   011752  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5929   011754  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5930   011756  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5931                           
  5932                           ;color.c: 54:  I2C_2_Master_Stop();
  5933   011758  EC8A  F08D         	call	_I2C_2_Master_Stop	;wreg free
  5934   01175C                     
  5935                           ;color.c: 55:  return tmp;
  5936   01175C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5937   011760  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5938   011764  0012               	return		;funcret
  5939   011766                     __end_of_color_read_Green:
  5940                           	callstack 0
  5941                           
  5942 ;; *************** function _color_read_Clear *****************
  5943 ;; Defined at:
  5944 ;;		line 73 in file "color.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;		None
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  tmp             2    9[COMRAM] unsigned int 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  2    4[COMRAM] unsigned int 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;Total ram usage:        7 bytes
  5963 ;; Hardware stack levels used: 1
  5964 ;; Hardware stack levels required when called: 2
  5965 ;; This function calls:
  5966 ;;		_I2C_2_Master_Read
  5967 ;;		_I2C_2_Master_RepStart
  5968 ;;		_I2C_2_Master_Start
  5969 ;;		_I2C_2_Master_Stop
  5970 ;;		_I2C_2_Master_Write
  5971 ;; This function is called by:
  5972 ;;		_calibration_routine
  5973 ;;		_reading_values
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text32
  5978   011766                     __ptext32:
  5979                           	callstack 0
  5980   011766                     _color_read_Clear:
  5981                           	callstack 26
  5982   011766                     
  5983                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  5984   011766  EC8F  F08D         	call	_I2C_2_Master_Start	;wreg free
  5985                           
  5986                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  5987   01176A  0E52               	movlw	82
  5988   01176C  EC84  F08D         	call	_I2C_2_Master_Write
  5989                           
  5990                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  5991   011770  0EB4               	movlw	180
  5992   011772  EC84  F08D         	call	_I2C_2_Master_Write
  5993                           
  5994                           ;color.c: 79:  I2C_2_Master_RepStart();
  5995   011776  EC94  F08D         	call	_I2C_2_Master_RepStart	;wreg free
  5996                           
  5997                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  5998   01177A  0E53               	movlw	83
  5999   01177C  EC84  F08D         	call	_I2C_2_Master_Write
  6000                           
  6001                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  6002   011780  0E01               	movlw	1
  6003   011782  EC26  F08C         	call	_I2C_2_Master_Read
  6004   011786  6E07               	movwf	??_color_read_Clear^0,c
  6005   011788  5007               	movf	??_color_read_Clear^0,w,c
  6006   01178A  6E0A               	movwf	color_read_Clear@tmp^0,c
  6007   01178C  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  6008                           
  6009                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6010   01178E  0E00               	movlw	0
  6011   011790  EC26  F08C         	call	_I2C_2_Master_Read
  6012   011794  6E07               	movwf	??_color_read_Clear^0,c
  6013   011796  5007               	movf	??_color_read_Clear^0,w,c
  6014   011798  6E09               	movwf	(??_color_read_Clear+2)^0,c
  6015   01179A  6A08               	clrf	(??_color_read_Clear+1)^0,c
  6016   01179C  500A               	movf	color_read_Clear@tmp^0,w,c
  6017   01179E  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  6018   0117A0  6E0A               	movwf	color_read_Clear@tmp^0,c
  6019   0117A2  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  6020   0117A4  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  6021   0117A6  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  6022                           
  6023                           ;color.c: 83:  I2C_2_Master_Stop();
  6024   0117A8  EC8A  F08D         	call	_I2C_2_Master_Stop	;wreg free
  6025   0117AC                     
  6026                           ;color.c: 84:  return tmp;
  6027   0117AC  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  6028   0117B0  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6029   0117B4  0012               	return		;funcret
  6030   0117B6                     __end_of_color_read_Clear:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _color_read_Blue *****************
  6034 ;; Defined at:
  6035 ;;		line 58 in file "color.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  tmp             2    9[COMRAM] unsigned int 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  2    4[COMRAM] unsigned int 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6051 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6052 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6053 ;;Total ram usage:        7 bytes
  6054 ;; Hardware stack levels used: 1
  6055 ;; Hardware stack levels required when called: 2
  6056 ;; This function calls:
  6057 ;;		_I2C_2_Master_Read
  6058 ;;		_I2C_2_Master_RepStart
  6059 ;;		_I2C_2_Master_Start
  6060 ;;		_I2C_2_Master_Stop
  6061 ;;		_I2C_2_Master_Write
  6062 ;; This function is called by:
  6063 ;;		_calibration_routine
  6064 ;;		_reading_values
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text33
  6069   0117B6                     __ptext33:
  6070                           	callstack 0
  6071   0117B6                     _color_read_Blue:
  6072                           	callstack 26
  6073   0117B6                     
  6074                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  6075   0117B6  EC8F  F08D         	call	_I2C_2_Master_Start	;wreg free
  6076                           
  6077                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  6078   0117BA  0E52               	movlw	82
  6079   0117BC  EC84  F08D         	call	_I2C_2_Master_Write
  6080                           
  6081                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  6082   0117C0  0EBA               	movlw	186
  6083   0117C2  EC84  F08D         	call	_I2C_2_Master_Write
  6084                           
  6085                           ;color.c: 64:  I2C_2_Master_RepStart();
  6086   0117C6  EC94  F08D         	call	_I2C_2_Master_RepStart	;wreg free
  6087                           
  6088                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  6089   0117CA  0E53               	movlw	83
  6090   0117CC  EC84  F08D         	call	_I2C_2_Master_Write
  6091                           
  6092                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  6093   0117D0  0E01               	movlw	1
  6094   0117D2  EC26  F08C         	call	_I2C_2_Master_Read
  6095   0117D6  6E07               	movwf	??_color_read_Blue^0,c
  6096   0117D8  5007               	movf	??_color_read_Blue^0,w,c
  6097   0117DA  6E0A               	movwf	color_read_Blue@tmp^0,c
  6098   0117DC  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  6099                           
  6100                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6101   0117DE  0E00               	movlw	0
  6102   0117E0  EC26  F08C         	call	_I2C_2_Master_Read
  6103   0117E4  6E07               	movwf	??_color_read_Blue^0,c
  6104   0117E6  5007               	movf	??_color_read_Blue^0,w,c
  6105   0117E8  6E09               	movwf	(??_color_read_Blue+2)^0,c
  6106   0117EA  6A08               	clrf	(??_color_read_Blue+1)^0,c
  6107   0117EC  500A               	movf	color_read_Blue@tmp^0,w,c
  6108   0117EE  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  6109   0117F0  6E0A               	movwf	color_read_Blue@tmp^0,c
  6110   0117F2  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  6111   0117F4  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  6112   0117F6  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  6113                           
  6114                           ;color.c: 68:  I2C_2_Master_Stop();
  6115   0117F8  EC8A  F08D         	call	_I2C_2_Master_Stop	;wreg free
  6116   0117FC                     
  6117                           ;color.c: 69:  return tmp;
  6118   0117FC  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  6119   011800  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6120   011804  0012               	return		;funcret
  6121   011806                     __end_of_color_read_Blue:
  6122                           	callstack 0
  6123                           
  6124 ;; *************** function _I2C_2_Master_Write *****************
  6125 ;; Defined at:
  6126 ;;		line 45 in file "i2c.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  data_byte       1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  data_byte       1    1[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6144 ;;Total ram usage:        1 bytes
  6145 ;; Hardware stack levels used: 1
  6146 ;; Hardware stack levels required when called: 1
  6147 ;; This function calls:
  6148 ;;		_I2C_2_Master_Idle
  6149 ;; This function is called by:
  6150 ;;		_color_writetoaddr
  6151 ;;		_color_read_Red
  6152 ;;		_color_read_Green
  6153 ;;		_color_read_Blue
  6154 ;;		_color_read_Clear
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	text34
  6159   011B08                     __ptext34:
  6160                           	callstack 0
  6161   011B08                     _I2C_2_Master_Write:
  6162                           	callstack 26
  6163                           
  6164                           ;incstack = 0
  6165                           ;I2C_2_Master_Write@data_byte stored from wreg
  6166   011B08  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6167   011B0A                     
  6168                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6169   011B0A  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6170   011B0E                     
  6171                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6172   011B0E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6173   011B12  0012               	return		;funcret
  6174   011B14                     __end_of_I2C_2_Master_Write:
  6175                           	callstack 0
  6176                           
  6177 ;; *************** function _I2C_2_Master_Stop *****************
  6178 ;; Defined at:
  6179 ;;		line 39 in file "i2c.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used: 1
  6199 ;; Hardware stack levels required when called: 1
  6200 ;; This function calls:
  6201 ;;		_I2C_2_Master_Idle
  6202 ;; This function is called by:
  6203 ;;		_color_writetoaddr
  6204 ;;		_color_read_Red
  6205 ;;		_color_read_Green
  6206 ;;		_color_read_Blue
  6207 ;;		_color_read_Clear
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text35
  6212   011B14                     __ptext35:
  6213                           	callstack 0
  6214   011B14                     _I2C_2_Master_Stop:
  6215                           	callstack 26
  6216   011B14                     
  6217                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6218   011B14  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6219   011B18                     
  6220                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6221   011B18  010E               	movlb	14	; () banked
  6222   011B1A  85DA               	bsf	218,2,b	;volatile
  6223   011B1C                     
  6224                           ; BSR set to: 14
  6225   011B1C  0012               	return		;funcret
  6226   011B1E                     __end_of_I2C_2_Master_Stop:
  6227                           	callstack 0
  6228                           
  6229 ;; *************** function _I2C_2_Master_Start *****************
  6230 ;; Defined at:
  6231 ;;		line 27 in file "i2c.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6249 ;;Total ram usage:        0 bytes
  6250 ;; Hardware stack levels used: 1
  6251 ;; Hardware stack levels required when called: 1
  6252 ;; This function calls:
  6253 ;;		_I2C_2_Master_Idle
  6254 ;; This function is called by:
  6255 ;;		_color_writetoaddr
  6256 ;;		_color_read_Red
  6257 ;;		_color_read_Green
  6258 ;;		_color_read_Blue
  6259 ;;		_color_read_Clear
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text36
  6264   011B1E                     __ptext36:
  6265                           	callstack 0
  6266   011B1E                     _I2C_2_Master_Start:
  6267                           	callstack 26
  6268   011B1E                     
  6269                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6270   011B1E  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6271   011B22                     
  6272                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6273   011B22  010E               	movlb	14	; () banked
  6274   011B24  81DA               	bsf	218,0,b	;volatile
  6275   011B26                     
  6276                           ; BSR set to: 14
  6277   011B26  0012               	return		;funcret
  6278   011B28                     __end_of_I2C_2_Master_Start:
  6279                           	callstack 0
  6280                           
  6281 ;; *************** function _I2C_2_Master_RepStart *****************
  6282 ;; Defined at:
  6283 ;;		line 33 in file "i2c.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, status,2, status,0, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used: 1
  6303 ;; Hardware stack levels required when called: 1
  6304 ;; This function calls:
  6305 ;;		_I2C_2_Master_Idle
  6306 ;; This function is called by:
  6307 ;;		_color_read_Red
  6308 ;;		_color_read_Green
  6309 ;;		_color_read_Blue
  6310 ;;		_color_read_Clear
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text37
  6315   011B28                     __ptext37:
  6316                           	callstack 0
  6317   011B28                     _I2C_2_Master_RepStart:
  6318                           	callstack 26
  6319   011B28                     
  6320                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6321   011B28  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6322   011B2C                     
  6323                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6324   011B2C  010E               	movlb	14	; () banked
  6325   011B2E  83DA               	bsf	218,1,b	;volatile
  6326   011B30                     
  6327                           ; BSR set to: 14
  6328   011B30  0012               	return		;funcret
  6329   011B32                     __end_of_I2C_2_Master_RepStart:
  6330                           	callstack 0
  6331                           
  6332 ;; *************** function _I2C_2_Master_Read *****************
  6333 ;; Defined at:
  6334 ;;		line 51 in file "i2c.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  ack             1    wreg     unsigned char 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  ack             1    2[COMRAM] unsigned char 
  6339 ;;  tmp             1    3[COMRAM] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      unsigned char 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6353 ;;Total ram usage:        3 bytes
  6354 ;; Hardware stack levels used: 1
  6355 ;; Hardware stack levels required when called: 1
  6356 ;; This function calls:
  6357 ;;		_I2C_2_Master_Idle
  6358 ;; This function is called by:
  6359 ;;		_color_read_Red
  6360 ;;		_color_read_Green
  6361 ;;		_color_read_Blue
  6362 ;;		_color_read_Clear
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text38
  6367   01184C                     __ptext38:
  6368                           	callstack 0
  6369   01184C                     _I2C_2_Master_Read:
  6370                           	callstack 26
  6371                           
  6372                           ; BSR set to: 14
  6373                           ;incstack = 0
  6374                           ;I2C_2_Master_Read@ack stored from wreg
  6375   01184C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6376   01184E                     
  6377                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6378   01184E  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6379   011852                     
  6380                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6381   011852  010E               	movlb	14	; () banked
  6382   011854  87DA               	bsf	218,3,b	;volatile
  6383                           
  6384                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6385   011856  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6386   01185A                     
  6387                           ;i2c.c: 57:   tmp = SSP2BUF;
  6388   01185A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6389                           
  6390                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6391   01185E  EC25  F08D         	call	_I2C_2_Master_Idle	;wreg free
  6392   011862                     
  6393                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6394   011862  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6395   011864  B4D8               	btfsc	status,2,c
  6396   011866  EF37  F08C         	goto	u2391
  6397   01186A  EF3B  F08C         	goto	u2390
  6398   01186E                     u2391:
  6399   01186E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6400   011870  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6401   011872  EF3C  F08C         	goto	u2408
  6402   011876                     u2390:
  6403   011876  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6404   011878                     u2408:
  6405   011878  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6406   01187A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6407   01187C  010E               	movlb	14	; () banked
  6408   01187E  51DA               	movf	218,w,b	;volatile
  6409   011880  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6410   011882  0BDF               	andlw	-33
  6411   011884  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6412   011886  6FDA               	movwf	218,b	;volatile
  6413   011888                     
  6414                           ; BSR set to: 14
  6415                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6416   011888  89DA               	bsf	218,4,b	;volatile
  6417   01188A                     
  6418                           ; BSR set to: 14
  6419                           ;i2c.c: 61:   return tmp;
  6420   01188A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6421   01188C                     
  6422                           ; BSR set to: 14
  6423   01188C  0012               	return		;funcret
  6424   01188E                     __end_of_I2C_2_Master_Read:
  6425                           	callstack 0
  6426                           
  6427 ;; *************** function _I2C_2_Master_Idle *****************
  6428 ;; Defined at:
  6429 ;;		line 22 in file "i2c.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_I2C_2_Master_Start
  6453 ;;		_I2C_2_Master_RepStart
  6454 ;;		_I2C_2_Master_Stop
  6455 ;;		_I2C_2_Master_Write
  6456 ;;		_I2C_2_Master_Read
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text39
  6461   011A4A                     __ptext39:
  6462                           	callstack 0
  6463   011A4A                     _I2C_2_Master_Idle:
  6464                           	callstack 26
  6465   011A4A                     l138:
  6466   011A4A  010E               	movlb	14	; () banked
  6467   011A4C  B5D8               	btfsc	216,2,b	;volatile
  6468   011A4E  EF2B  F08D         	goto	u2361
  6469   011A52  EF2D  F08D         	goto	u2360
  6470   011A56                     u2361:
  6471   011A56  EF25  F08D         	goto	l138
  6472   011A5A                     u2360:
  6473   011A5A                     
  6474                           ; BSR set to: 14
  6475   011A5A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6476   011A5E  0E1F               	movlw	31
  6477   011A60  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6478   011A62  A4D8               	btfss	status,2,c
  6479   011A64  EF36  F08D         	goto	u2371
  6480   011A68  EF38  F08D         	goto	u2370
  6481   011A6C                     u2371:
  6482   011A6C  EF25  F08D         	goto	l138
  6483   011A70                     u2370:
  6484   011A70                     
  6485                           ; BSR set to: 14
  6486   011A70  0012               	return		;funcret
  6487   011A72                     __end_of_I2C_2_Master_Idle:
  6488                           	callstack 0
  6489                           
  6490 ;; *************** function _ADC_init *****************
  6491 ;; Defined at:
  6492 ;;		line 9 in file "ADC.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used: 1
  6512 ;; This function calls:
  6513 ;;		Nothing
  6514 ;; This function is called by:
  6515 ;;		_main
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text40
  6520   011AD6                     __ptext40:
  6521                           	callstack 0
  6522   011AD6                     _ADC_init:
  6523                           	callstack 30
  6524   011AD6                     
  6525                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6526   011AD6  8C86               	bsf	134,6,c	;volatile
  6527                           
  6528                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6529   011AD8  010E               	movlb	14	; () banked
  6530   011ADA  8DB4               	bsf	180,6,b	;volatile
  6531                           
  6532                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6533   011ADC  010F               	movlb	15	; () banked
  6534   011ADE  9958               	bcf	88,4,b	;volatile
  6535   011AE0                     
  6536                           ; BSR set to: 15
  6537                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6538   011AE0  0EFC               	movlw	-4
  6539   011AE2  1758               	andwf	88,f,b	;volatile
  6540                           
  6541                           ;ADC.c: 17:     ADPCH=0b101110;
  6542   011AE4  0E2E               	movlw	46
  6543   011AE6  6F5F               	movwf	95,b	;volatile
  6544   011AE8                     
  6545                           ; BSR set to: 15
  6546                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6547   011AE8  9460               	bcf	96,2,c	;volatile
  6548   011AEA                     
  6549                           ; BSR set to: 15
  6550                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6551   011AEA  8860               	bsf	96,4,c	;volatile
  6552   011AEC                     
  6553                           ; BSR set to: 15
  6554                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6555   011AEC  8E60               	bsf	96,7,c	;volatile
  6556   011AEE                     
  6557                           ; BSR set to: 15
  6558   011AEE  0012               	return		;funcret
  6559   011AF0                     __end_of_ADC_init:
  6560                           	callstack 0
  6561                           
  6562                           	psect	rparam
  6563   000000                     
  6564                           	psect	config
  6565                           
  6566                           ;Config register CONFIG1L @ 0x300000
  6567                           ;	External Oscillator mode Selection bits
  6568                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6569                           ;	Power-up default value for COSC bits
  6570                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6571   300000                     	org	3145728
  6572   300000  AA                 	db	170
  6573                           
  6574                           ;Config register CONFIG1H @ 0x300001
  6575                           ;	unspecified, using default values
  6576                           ;	Clock Out Enable bit
  6577                           ;	CLKOUTEN = 0x1, unprogrammed default
  6578                           ;	Clock Switch Enable bit
  6579                           ;	CSWEN = 0x1, unprogrammed default
  6580                           ;	Fail-Safe Clock Monitor Enable bit
  6581                           ;	FCMEN = 0x1, unprogrammed default
  6582   300001                     	org	3145729
  6583   300001  FF                 	db	255
  6584                           
  6585                           ;Config register CONFIG3L @ 0x300004
  6586                           ;	WDT Period Select bits
  6587                           ;	WDTCPS = 0x1F, unprogrammed default
  6588                           ;	WDT operating mode
  6589                           ;	WDTE = OFF, WDT Disabled
  6590   300004                     	org	3145732
  6591   300004  9F                 	db	159
  6592                           
  6593                           ;Config register CONFIG3H @ 0x300005
  6594                           ;	unspecified, using default values
  6595                           ;	WDT Window Select bits
  6596                           ;	WDTCWS = 0x7, unprogrammed default
  6597                           ;	WDT input clock selector
  6598                           ;	WDTCCS = 0x7, unprogrammed default
  6599   300005                     	org	3145733
  6600   300005  FF                 	db	255
  6601                           tosu	equ	0xFFF
  6602                           tosh	equ	0xFFE
  6603                           tosl	equ	0xFFD
  6604                           stkptr	equ	0xFFC
  6605                           pclatu	equ	0xFFB
  6606                           pclath	equ	0xFFA
  6607                           pcl	equ	0xFF9
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           indf0	equ	0xFEF
  6615                           postinc0	equ	0xFEE
  6616                           postdec0	equ	0xFED
  6617                           preinc0	equ	0xFEC
  6618                           plusw0	equ	0xFEB
  6619                           fsr0h	equ	0xFEA
  6620                           fsr0l	equ	0xFE9
  6621                           wreg	equ	0xFE8
  6622                           indf1	equ	0xFE7
  6623                           postinc1	equ	0xFE6
  6624                           postdec1	equ	0xFE5
  6625                           preinc1	equ	0xFE4
  6626                           plusw1	equ	0xFE3
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           bsr	equ	0xFE0
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           preinc2	equ	0xFDC
  6634                           plusw2	equ	0xFDB
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8

Data Sizes:
    Strings     304
    Constant    0
    Data        1
    BSS         176
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      93
    BANK0           160    138     157
    BANK1           256     54     211
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ADC2String@buf	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@buf(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    calibration_routine@cCal	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    reading_values@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    S2449$buffer	PTR unsigned char  size(2) Largest target is 0

    S2449$source	PTR const unsigned char  size(2) Largest target is 0

    S568DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S568DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), convert_rgb2hue@blue_weighted(BANK0[20]), convert_rgb2hue@green_weighted(BANK0[20]), convert_rgb2hue@red_weighted(BANK0[20]), 
		 -> send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK1[50]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[19]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[21]), 
		 -> STR_3(CODE[20]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), convert_rgb2hue@blue_weighted(BANK0[20]), convert_rgb2hue@green_weighted(BANK0[20]), convert_rgb2hue@red_weighted(BANK0[20]), 
		 -> send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK1[50]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[19]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[21]), 
		 -> STR_3(CODE[20]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[19]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[21]), 
		 -> STR_3(CODE[20]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[19]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[21]), 
		 -> STR_3(CODE[20]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_test
    _test->_send2USART
    _send2USART->_ADC2String
    _ADC2String->_sprintf
    _reading_values->_color_read_Blue
    _reading_values->_color_read_Clear
    _reading_values->_color_read_Green
    _reading_values->_color_read_Red
    _convert_rgb2hue->_sprintf
    ___lwdiv->___wmul
    ___lodiv->___omul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _test->_convert_rgb2hue

Critical Paths under _main in BANK1

    _main->_test

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   75846
                                             88 COMRAM     4     4      0
                           _ADC_init
                _calibration_routine
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                57    55      2   61422
                                             85 COMRAM     3     1      2
                                              0 BANK1     54    54      0
                    _convert_rgb2hue
                     _reading_values
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send2USART                                         104   100      4   27941
                                             81 COMRAM     4     0      4
                                              0 BANK0    100   100      0
                         _ADC2String
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _ADC2String                                           9     6      3   14924
                                             72 COMRAM     9     6      3
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _reading_values                                       2     0      2     870
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    142   138      4   19476
                                             72 COMRAM     4     0      4
                                              0 BANK0    138   138      0
                            ___lodiv
                            ___lwdiv
                             ___omul
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___omul                                              24     8     16    1716
                                              0 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1921
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lodiv                                             25     9     16     481
                                             24 COMRAM    25     9     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 24    22      2   13813
                                             72 COMRAM     4     2      2
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8   11439
                                             51 COMRAM    21    13      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    8607
                                             45 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    8119
                                             33 COMRAM    12     9      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1012
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2    1176
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      31
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _test
     _convert_rgb2hue
       ___lodiv
         ___omul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___omul
       _sendStringSerial4
       _sprintf
     _reading_values
       _color_read_Blue
       _color_read_Clear
       _color_read_Green
       _color_read_Red
     _send2USART
       _ADC2String
         ___lwdiv
         ___wmul
         _sprintf
       _sendStringSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      D3       7       82.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8A      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5D       1       97.9%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CD      61        0.0%
DATA                 0      0     1CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 11:17:42 2024

               _color_read_Red 16C6                _color_read_Blue 17B6                             l53 19B8  
                           l62 1764                             l56 1AB6                             l65 1804  
                           l81 087A                             l90 0D6A                             l59 1714  
                           l68 17B4                             l93 08A6                             l95 08B4  
                           l96 0908                             l98 0916                             l99 096E  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003             convert_rgb2hue@hue 00CA  
             _color_read_Clear 1766               _color_read_Green 1716                            l101 097C  
                          l102 09D4                            l104 09E2                            l105 0A42  
                          l108 16C4                            l141 1A70                            l150 1B1C  
                          l310 15F2                            l135 1A48                            l144 1B26  
                          l153 1B12                            l138 1A4A                            l402 1AD4  
                          l147 1B30                            l411 1AF2                            l156 188C  
                          l420 1984                            l414 1B06                            l249 1AEE  
                          l462 142E                            l712 1386                            l465 18CC  
                          l468 1A96                            l485 14AC                            l486 14CC  
                          l913 0FD2                            l906 0FB2                            l699 1166  
                          l966 1666                            l959 165E                            _abs 19BA  
                          _pad 14CE            convert_rgb2hue@cMax 0049                   ___awmod@sign 0006  
                          wreg 0FE8                           l1210 0BEA                           ?_abs 0007  
                         l1220 19D4                           l1223 19EC                           l1216 184A  
                         l1146 190C                           l1235 1220                           l1243 194C  
                         l1171 1562                           l1246 1B32                           l1166 1504  
                         l1174 0DCA                           l1191 12CE                           l3200 1156  
                         l1169 1542                           l3202 115E                           l3210 12EA  
                         l1187 0EE2                           l1195 12D6                           l3220 131E  
                         l3212 12F2                           l3140 1192                           l3300 0E90  
                         l3230 135A                           l3222 1326                           l3214 12F6  
                         l3206 12D8                           l3142 11AE                           l3134 1168  
                         l3150 191A                           l3302 0EA0                           l4014 0AD4  
                         l3400 1B0A                           l3232 1360                           l3224 132E  
                         l3216 1304                           l3208 12DC                           l3144 11E0  
                         l3136 1178                           l3152 1928                           l3304 0EB0  
                         l3320 1278                           l3312 1222                           l3410 1B2C  
                         l3402 1B0E                           l3170 10C2                           l3162 10A4  
                         l3226 133C                           l3234 1366                           l3218 130C  
                         l3138 1188                           l3154 192C                           l3250 1510  
                         l3242 14CE                           l3306 0EB6                           l3322 1298  
                         l3314 122A                           l3330 0A76                           l3420 1888  
                         l3412 184E                           l3404 1B14                           l3180 10F6  
                         l3172 10D0                           l3164 10A8                           l3236 1376  
                         l3228 1352                           l3260 19C8                           l3148 190E  
                         l3252 1520                           l3244 14DE                           l3308 0EC6  
                         l3156 1A72                           l3316 1250                           l3324 12A4  
                         l3340 0AA4                           l3332 0A84                           l3422 188A  
                         l3414 1852                           l3406 1B18                           l3190 1130  
                         l3182 10FE                           l3174 10D8                           l3166 10B6  
                         l3238 137E                           l3254 1524                           l3246 14EE  
                         l3270 0D9C                           l3262 0D6C                           l3158 1A8E  
                         l3318 125C                           l3350 0B06                           l3334 0A88  
                         l3326 0A44                           l3430 18E2                           l3416 185A  
                         l3408 1B28                           l3440 1B02                           l3192 1138  
                         l3184 1106                           l3176 10DC                           l3168 10BE  
                         l3256 1552                           l3248 14FC                           l3280 0DD2  
                         l3272 0DA2                           l3264 0D70                           l3360 0B6E  
                         l3352 0B16                           l3344 0AAC                           l3336 0A90  
                         l3328 0A6A                           l3432 18EA                           l3600 071A  
                         l3520 1416                           l3418 1862                           l3194 113A  
                         l3186 1114                           l3178 10E4                           l3258 19BA  
                         l3290 0E1E                           l3282 0DDC                           l3274 0DB2  
                         l3266 0D84                           l3362 0B86                           l3354 0B20  
                         l3338 0A94                           l3346 0AE2                           l3434 18FE  
                         l3426 18CE                           l3450 161E                           l3442 15F4  
                         l3530 147C                           l3522 1430                           l3610 079A  
                         l3602 073A                           l3514 1388                           l3196 1140  
                         l3188 111A                           l3284 0DE2                           l3292 0E3A  
                         l3276 0DBE                           l3268 0D8C                           l3364 0BA0  
                         l3356 0B2E                           l3348 0AF2                           l3372 0BC4  
                         l3428 18DA                           l3540 0F2A                           l3532 0EE4  
                         l3460 1652                           l3452 162C                           l3444 15FC  
                         l3524 143C                           l3620 081A                           l3612 07BA  
                         l3604 0756                           l3516 13A4                           l3700 0C3C  
                         l3382 1A4A                           l3470 1716                           l3438 1AF2  
                         l3198 1146                           l3294 0E54                           l3286 0E14  
                         l3278 0DC6                           l3358 0B4E                           l3390 1822  
                         l3550 0F9A                           l3542 0F38                           l3534 0EF0  
                         l3462 1658                           l3454 1632                           l3446 160E  
                         l3526 144A                           l3622 0848                           l3606 076E  
                         l3614 07D6                           l3518 13F4                           l3630 188E  
                         l3710 0CA0                           l3702 0C50                           l3384 1A5A  
                         l3472 175C                           l3464 16C6                           l3296 0E66  
                         l3288 0E18                           l3368 0BB4                           l3392 1842  
                         l3560 1A32                           l3800 1574                           l3552 0FAC  
                         l3544 0F4A                           l3536 0F0E                           l3456 1648  
                         l3448 1616                           l3528 146A                           l3624 0872  
                         l3616 07EE                           l3608 0784                           l3632 18B8  
                         l3720 0D12                           l3712 0CCE                           l3704 0C56  
                         l3482 1766                           l3466 170C                           l3490 1952  
                         l3298 0E76                           l3386 1806                           l3730 089C  
                         l3562 1A34                           l3554 1A20                           l3810 15CE  
                         l3802 159A                           l3546 0F78                           l3538 0F16  
                         l3458 1650                           l3618 0804                           l3570 02F6  
                         l3634 18C2                           l3722 0D4E                           l3714 0CE4  
                         l3706 0C84                           l3396 1B1E                           l3476 17B6  
                         l3484 17AC                           l3492 1960                           l3388 1812  
                         l3740 08FE                           l3732 08B6                           l3564 1A36  
                         l3556 1A2A                           l3820 15F0                           l3812 15D8  
                         l3804 159E                           l3548 0F98                           l3580 0644  
                         l3572 02FE                           l3628 1668                           l3724 0D54  
                         l3716 0CEA                           l3708 0C9A                           l3900 101C  
                         l3398 1B22                           l3478 17FC                           l3494 1964  
                         l3750 0964                           l3742 0918                           l3734 08CE  
                         l3726 087C                           l3558 1A30                           l3566 1A9A  
                         l3814 15DA                           l3806 15C2                           l3590 06C2  
                         l3582 066A                           l3574 0306                           l3718 0D06  
                         l3910 103E                           l3902 1020                           ?_pad 000F  
                         l3496 196C                           l3488 194E                           l3760 09CA  
                         l3752 097E                           l3744 0930                           l3736 08E2  
                         l3728 0882                           l3680 198A                           l3816 15E4  
                         l3808 15CC                           l3592 06CC                           l3584 0684  
                         l3576 030E                           l3568 0000                           l3920 1048  
                         l3912 1040                           l3904 1038                           l3770 0A1C  
                         l3762 09E8                           l3754 0996                           l3746 0948  
                         l3738 08E4                           l3682 1994                           l3818 15E6  
                         l3594 06D6                           l3586 069E                           l3578 032C  
                         l3930 1066                           l3922 104A                           l3914 1042  
                         l3906 103A                           l3780 1AE8                           l3772 0A1E  
                         l3764 0A00                           l3756 09AE                           l3748 094A  
                         l3684 19A4                           l3596 06EE                           l3588 06B8  
                         l3932 1068                           l3924 104C                           l3916 1044  
                         l3908 103C                           l3782 1AEA                           l3774 0A38  
                         l3766 0A18                           l3758 09B0                           l3686 19AE  
                         l3678 1986                           l3790 1AC4                           l3598 0704  
                         l3694 0BF6                           l3934 106C                           l3926 1062  
                         l3918 1046                           l3784 1AEC                           l3776 1AD6  
                         l3768 0A1A                           l3792 1ACE                           l3696 0C08  
                         l3688 0BEC                           l3936 1078                           l3928 1064  
                         l3880 0FE0                           l3778 1AE0                           l3794 1AD0  
                         l3786 1AB8                           l3698 0C0E                           l3938 1090  
                         l3890 0FFA                           l3882 0FE0                           l3874 0FD4  
                         l3796 1AD2                           l3788 1AC2                           l3892 1002  
                         l3884 0FEC                           l3876 0FD8                           l3798 1564  
                         l3894 100A                           l3886 0FF2                           l3878 0FDC  
                         l3896 1012                           l3888 0FF6                           l3898 1018  
                         STR_1 FFAB                           STR_2 FF6F                           STR_3 FF84  
                         STR_4 FFBE                           STR_5 FF98                           STR_6 FFE0  
                         STR_7 FFCF                           STR_8 FF42                           STR_9 FFFD  
                         u2000 11E0                           u2001 11DC                           u2010 194C  
                         u2011 1948                           u2020 10B6                           u2100 131E  
                         u2021 10B2                           u2101 131A                           u2030 10D0  
                         u2110 133C                           u2031 10CC                           u2111 1338  
                         u2040 10F6                           u2120 1352                           u2200 0D82  
                         u2041 10F2                           u2121 134E                           u2050 1114  
                         u2130 1376                           u2210 0D9C                           u2051 1110  
                         u2131 1372                           u2211 0D98                           u2060 1130  
                         u2140 14DE                           u2220 0DB2                           u2300 12CE  
                         u2061 112C                           u2141 14DA                           u2221 0DAE  
                         u2301 12CA                           u2070 1156                           u2150 14FC  
                         u2230 0E54                           u2310 0A6A                           u2071 1152  
                         u2151 14F8                           u2231 0E50                           u2311 0A66  
                         u2080 12EA                           u2160 1542                           u2240 0E66  
                         u2320 0AF2                   _BAUD4CONbits 0EE9                           u2081 12E6  
                         u2161 153E                           u2241 0E62                           u2321 0AEE  
                         u2410 1B02                           u2090 1304                           u2170 1552  
                         u2250 0E76                           u2330 0B16                           u2411 1AFE  
                         u2091 1300                           u2171 154E                           u2251 0E72  
                         u2331 0B12                           u2180 19C8                           u2260 0E90  
                         u2340 0B4E                           u2420 160E                           u2500 14AC  
                         u2181 19C4                           u2261 0E8C                           u2341 0B4A  
                         u2421 160A                           u2501 14A8                           u2270 0EA0  
                         u2190 0D80                           u2350 0B6E                           u2430 162C  
                         u2271 0E9C                           u2191 0D7A                           u2351 0B6A  
                         u2511 0EEA                           u2431 1628                           u2360 1A5A  
                         u2408 1878                           u2280 0EB0                           u2520 0F0E  
                         u2440 1648                           u2600 0784                           u2361 1A56  
                         u2281 0EAC                           u2521 0F0A                           u2441 1644  
                         u2601 0780                           u2370 1A70                           u2450 1984  
                         u2290 1250                           u2530 0F38                           u2610 079A  
                         _T2PR 0FBC                           u2371 1A6C                           u2451 1980  
                         u2291 124C                           u2531 0F34                           u2611 0796  
                         u2380 1842                           u2540 0F78                           u2620 07EE  
                         u2700 0C08                           u2381 183E                           u2541 0F74  
                         u2621 07EA                           u2701 0C04                           u2390 1876  
                         u2630 0804                           u2550 032C                           u2710 0C30  
                         u2391 186E                           u2631 0800                           u2551 0328  
                         u2711 0C28                           u2800 097C                           u2640 081A  
                         u2560 06EE                           u2720 0C50                           u2801 0978  
                         u2481 1436                           u2641 0816                           u2561 06EA  
                         u2721 0C4C                           u2810 09E2                           u2490 144A  
                         u2570 0704                           u2730 0C78                           u2811 09DE  
                         u2491 1446                           u2571 0700                           u2731 0C70  
                         u2580 071A                           u2740 0C9A                           u2581 0716  
                         u2741 0C96                           u2590 076E                           u2750 0CC2  
                         u2718 0C32                           u2591 076A                           u2751 0CBA  
                         u2760 0CE4                           u2761 0CE0                           u1970 1178  
                         u2770 0D6A                           u2738 0C7A                           u1971 1174  
                         u2907 08C0                           u2771 0D66                           u1980 1188  
                         u2780 08B4                           u1981 1184                           u2917 0922  
                         u2781 08B0                           u1990 11AE                           u2790 0916  
                         u2758 0CC4                           u1991 11AA                           u2927 0988  
                         u2791 0912                           u2937 09F2                           u2947 1966  
                         u2867 1056                           u2877 1082                           u2887 1420  
                         u2897 199A                           abs@a 0007                           _dbuf 0164  
                         _main 0FD4                           _dtoa 0D6C           convert_rgb2hue@cCurr 004B  
                         _prec 00EC                           _test 0BEC                           pad@i 0015  
                         pad@p 0012                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         prodh 0FF4                           prodl 0FF3                           start 0000  
             __end_of_ADC_init 1AF0           convert_rgb2hue@total 00CC         __end_of_color_read_Red 1716  
                 ___param_bank 0000                          ??_abs 0009                          ??_pad 0014  
                        ?_main 0001                          ?_dtoa 0017                          _ADPCH 0F5F  
              __end_of___awdiv 1168                          STR_10 FEF1                          STR_11 FFFD  
                        STR_12 FF0E                          STR_13 FFFD                          STR_14 FECF  
                        STR_15 FFFD                          STR_16 FF29                          STR_17 FFFD  
                        STR_18 FF5A                          STR_19 FFF1                __end_of___awmod 1388  
                        ?_test 0056                __end_of___lodiv 0FD4                ___awdiv@divisor 0003  
              __end_of___lwdiv 1668                ___awdiv@counter 0005              ??_convert_rgb2hue 0060  
                 vfpfcnvrt@fmt 0023        __end_of_sendCharSerial4 1B08     __end_of_I2C_2_Master_Start 1B28  
   __end_of_I2C_2_Master_Write 1B14                          _flags 00EE            read_prec_or_width@c 0009  
          read_prec_or_width@n 000A                          _fputc 1168                          _fputs 190E  
                        pad@fp 000F                          _width 00EA                          _putch 1B32  
                        dtoa@d 0018                          dtoa@i 0020                          dtoa@p 001C  
                        dtoa@s 001F                          dtoa@w 001D                          tablat 0FF5  
                        status 0FD8                __end_of_sprintf 190E               ___lodiv@dividend 0019  
      __end_of_color_read_Blue 1806          _I2C_2_Master_RepStart 1B28                ?_color_read_Red 0005  
              __initialization 19EE                   __end_of_main 10A4                   __end_of_dtoa 0EE4  
                 __end_of_test 0D6C                   ??_ADC2String 004C               ??_reading_values 000E  
                       ??_main 0059                         ??_dtoa 001A                         ??_test 0058  
                __activetblptr 0003     __end_of_read_prec_or_width 12D8               ___lodiv@quotient 0029  
                       ?_fputc 0001                         ?_fputs 0009                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21                  ADC2String@buf 0049               ___awdiv@dividend 0001  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
          ADC2String@frac_part 004E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 002B       __end_of_color_click_init 19BA  
                       _RX4PPS 0E15             __end_of_ADC2String 1430                         _TX4REG 0EE4  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0032                         ___omul 1430  
                       ___wmul 1A72                      ??___awdiv 0005                      ??___awmod 0005  
                    ??___lodiv 0029                      ??___lwdiv 000B           read_prec_or_width@ap 0008  
                       clear_0 1A06                         clear_1 1A12               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         _motorL 00F3                         _motorR 0184  
                       isa$std 0001                ___awmod@counter 0005             send2USART@hue_char 0092  
                       pad@buf 0010                         dtoa@fp 0017                         fputc@c 0001  
                       fputs@c 000C                         fputs@i 000D                         fputs@s 0009  
                 __mediumconst FECE        calibration_routine@cCal 0049                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 184C  
            ??_initDCmotorsPWM 0003                      ??_sprintf 003C                     __accesstop 0060  
      __end_of__initialization 1A1A       __end_of_color_read_Clear 17B6       __end_of_color_read_Green 1766  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK0 1B34                  __end_of_fputc 1222  
                __end_of_fputs 194E                  __end_of_putch 1B34                     ??_ADC_init 0001  
                      ??_fputc 0004                        ??_fputs 000C                        ??_putch 0001  
                   __pbssBANK0 00EA                     __pbssBANK1 0100    convert_rgb2hue@red_weighted 0086  
            _color_writetoaddr 1A98                   _T2CLKCONbits 0FBF                _convert_rgb2hue 0000  
           ?_color_writetoaddr 0003                        ?___omul 0001                        ?___wmul 0001  
          ___omul@multiplicand 0009            ??_color_writetoaddr 0004                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5              main@battery_level 005B                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5         color_writetoaddr@value 0003               ??_color_read_Red 0007  
      send2USART@battery_level 0052      __end_of_color_writetoaddr 1AB8                      _ADREFbits 0F58  
           _I2C_2_Master_Start 1B1E                     _initUSART4 1AB8             _I2C_2_Master_Write 1B08  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
      sendStringSerial4@string 0002                        ___awdiv 10A4                        ___awmod 12D8  
                      ___lodiv 0EE4            ?_I2C_2_Master_Start 0001                        ___lwdiv 15F4  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E                        __pcinit 19EE  
                      __ramtop 0E00                     _send2USART 188E                        __ptext0 0FD4  
                      __ptext1 0BEC                        __ptext2 188E                        __ptext3 1388  
                      __ptext4 1668                        __ptext5 0000                        __ptext6 1430  
                      __ptext7 15F4                        __ptext8 0EE4                        __ptext9 1AB8  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 00F2                        _sprintf 18CE  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1A1A  
               ___omul@product 0011                        fputc@fp 0003        __end_of_convert_rgb2hue 087C  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 1222  
           ??_color_click_init 0005               _colorCalibration 0195                        test@hue 01CF  
            __end_of_vfpfcnvrt 0BEC                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0027                     ??_vfprintf 0032                   _colorCurrent 018D  
              _initDCmotorsPWM 1564                      _PORTFbits 0F8E                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 00E4           ??_read_prec_or_width 0009               convert_rgb2hue@g 00E8  
             convert_rgb2hue@r 00E6       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB            _calibration_routine 087C              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 __end_of___omul 14CE                    vfpfcnvrt@ap 0024  
                  vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022                 __end_of___wmul 1A98  
                  ?_send2USART 0052           ?_calibration_routine 0049            color_read_Clear@tmp 000A  
          start_initialization 19EE                ___lodiv@divisor 0021                ___lodiv@counter 0031  
 calibration_routine@cal_state 0060                    __end_of_abs 19EE                    __end_of_pad 1564  
                _TxBufWriteCnt 005D              ___omul@multiplier 0001               ?_convert_rgb2hue 0049  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 15F4                    vfprintf@fmt 002F  
           ADC2String@int_part 0050                       ??___omul 0011                       ??___wmul 0005  
                  __pdataBANK0 00FC          ??_calibration_routine 004B                    __pbssCOMRAM 005D  
                __pcstackBANK0 0060                  __pcstackBANK1 019D   convert_rgb2hue@blue_weighted 00AE  
             ___lwdiv@dividend 0007                      _dtoa$2528 001A                  __pmediumconst FECE  
                     ?___awdiv 0001                       ?___awmod 0001                       ?___lodiv 0019  
                     ?___lwdiv 0007                   _readingIndex 00EF           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004              _I2C_2_Master_Idle 1A4A              _I2C_2_Master_Init 1A20  
            _I2C_2_Master_Read 184C              _I2C_2_Master_Stop 1B14                   _RxBufReadCnt 00F1  
                     _ADC_init 1AD6             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0034              _sendStringSerial4 194E  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
         _convert_rgb2hue$2846 00D4           _convert_rgb2hue$2847 00DC           _convert_rgb2hue$2848 00C2  
            ADC2String@ADC_val 004A             ?_sendStringSerial4 0002                       _PIE4bits 0E2D  
                     _PIR4bits 0E37            reading_values@cCurr 000C               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                     _ADC2String 1388                      _vfpfcnvrt 0A44  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 1A72      __end_of_I2C_2_Master_Init 1A4A  
    __end_of_I2C_2_Master_Read 188E              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1B1E  
  I2C_2_Master_Write@data_byte 0002                    _ldrReadings 013C              ??_color_read_Blue 0007  
                 _TxBufReadCnt 00F0                 _reading_values 1668      __end_of_sendStringSerial4 1986  
__end_of_I2C_2_Master_RepStart 1B32             color_read_Blue@tmp 000A                   ??_initUSART4 0001  
                     __Hrparam 0000                     vfprintf@ap 0031                       __Lrparam 0000  
                   vfprintf@fp 002E                     ?_vfpfcnvrt 0022                   ??_send2USART 0056  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00FC  
                   sprintf@fmt 0036         __end_of_reading_values 16C6                  test@led_state 019D  
              ___lwdiv@divisor 0009             __end_of_initUSART4 1AD6                ___lwdiv@counter 000B  
                     __ptext10 1564                       __ptext11 1986                       __ptext20 0D6C  
                     __ptext12 1A98                       __ptext21 14CE                       __ptext13 1A20  
                     __ptext30 16C6                       __ptext22 190E                       __ptext14 087C  
                     __ptext31 1716                       __ptext23 1168                       __ptext15 18CE  
                     __ptext40 1AD6                       __ptext32 1766                       __ptext24 1B32  
                     __ptext16 1806                       __ptext33 17B6                       __ptext25 19BA  
                     __ptext17 0A44                       __ptext34 1B08                       __ptext26 12D8  
                     __ptext18 1222                       __ptext35 1B14                       __ptext27 10A4  
                     __ptext19 1A72                       __ptext36 1B1E                       __ptext28 194E  
                     __ptext37 1B28                       __ptext29 1AF0                       __ptext38 184C  
                     __ptext39 1A4A                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
           __end_of_send2USART 18CE                      test@combo 01D1                       isa$xinst 0000  
                   _RC4STAbits 0EE7                    ?_ADC2String 0049                       _vfprintf 1806  
              ?_reading_values 000C              test@battery_level 0056  convert_rgb2hue@green_weighted 009A  
                    sprintf@ap 003C    __end_of_calibration_routine 0A44                  send2USART@buf 0060  
                send2USART@hue 0054                    ??_vfpfcnvrt 0025               _color_click_init 1986  
                     sprintf@f 003D                       sprintf@s 0034                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8                _sendCharSerial4 1AF0  
