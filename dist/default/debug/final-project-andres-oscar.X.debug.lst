

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 21:35:19 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=3
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    92   000000                     
    93                           ; Generated 21/07/2023 GMT
    94                           ; 
    95                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution. Publication is not required when
   109                           ;        this file is used in an embedded application.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F67K40 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127   000000                     
   128                           	psect	idataBANK0
   129   004444                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for _dataFlag
   133   004444  01                 	db	1
   134   000000                     _TMR0H	set	4052
   135   000000                     _TX4REG	set	3812
   136   000000                     _RC4STAbits	set	3815
   137   000000                     _SP4BRGH	set	3814
   138   000000                     _LATHbits	set	3968
   139   000000                     _LATFbits	set	3966
   140   000000                     _TRISFbits	set	3974
   141   000000                     _TRISAbits	set	3969
   142   000000                     _TRISEbits	set	3973
   143   000000                     _TRISGbits	set	3975
   144   000000                     _TRISDbits	set	3972
   145   000000                     _PORTFbits	set	3982
   146   000000                     _SSP2CON2bits	set	3802
   147   000000                     _RX4PPS	set	3605
   148   000000                     _SSP2CLKPPS	set	3612
   149   000000                     _SSP2DATPPS	set	3613
   150   000000                     _ANSELDbits	set	3751
   151   000000                     _SSP2ADD	set	3798
   152   000000                     _SSP2CON1bits	set	3801
   153   000000                     _LATAbits	set	3961
   154   000000                     _LATEbits	set	3965
   155   000000                     _LATGbits	set	3967
   156   000000                     _LATCbits	set	3963
   157   000000                     _LATDbits	set	3964
   158   000000                     _CCPR2H	set	4006
   159   000000                     _CCPR1H	set	4010
   160   000000                     _RC4REG	set	3811
   161   000000                     _SP4BRGL	set	3813
   162   000000                     _TX4STAbits	set	3816
   163   000000                     _BAUD4CONbits	set	3817
   164   000000                     _SSP2CON2	set	3802
   165   000000                     _CCPR4H	set	3873
   166   000000                     _CCPR3H	set	3877
   167   000000                     _SSP2STAT	set	3800
   168   000000                     _ANSELFbits	set	3764
   169   000000                     _SSP2BUF	set	3797
   170   000000                     _IPR0bits	set	3615
   171   000000                     _PIE0bits	set	3625
   172   000000                     _PIE4bits	set	3629
   173   000000                     _PIR4bits	set	3639
   174   000000                     _RC0PPS	set	3682
   175   000000                     _RC7PPS	set	3689
   176   000000                     _RD5PPS	set	3695
   177   000000                     _RE2PPS	set	3700
   178   000000                     _RD6PPS	set	3696
   179   000000                     _CCP1CONbits	set	4011
   180   000000                     _CCPTMRS0bits	set	4013
   181   000000                     _T2PR	set	4028
   182   000000                     _T2CONbits	set	4029
   183   000000                     _T0CON0bits	set	4053
   184   000000                     _CCP2CONbits	set	4007
   185   000000                     _CCP3CONbits	set	3878
   186   000000                     _ADREFbits	set	3928
   187   000000                     _CCP4CONbits	set	3874
   188   000000                     _TRISHbits	set	3976
   189   000000                     _TRISCbits	set	3971
   190   000000                     _INTCONbits	set	4082
   191   000000                     _T0CON1bits	set	4054
   192   000000                     _ADPCH	set	3935
   193   000000                     _ADRESH	set	3940
   194   000000                     _ADCON0bits	set	3936
   195   000000                     _RE4PPS	set	3702
   196   000000                     _RG6PPS	set	3720
   197   000000                     _TMR0L	set	4051
   198   000000                     _T2CLKCONbits	set	4031
   199   000000                     _T2HLTbits	set	4030
   200   000000                     _PIR0bits	set	3635
   201                           
   202                           	psect	smallconst
   203   000E00                     __psmallconst:
   204                           	callstack 0
   205   000E00  00                 	db	0
   206   000E01                     STR_7:
   207                           
   208                           ; BSR set to: 14
   209   000E01  43                 	db	67	;'C'
   210   000E02  61                 	db	97	;'a'
   211   000E03  6C                 	db	108	;'l'
   212   000E04  69                 	db	105	;'i'
   213   000E05  62                 	db	98	;'b'
   214   000E06  72                 	db	114	;'r'
   215   000E07  61                 	db	97	;'a'
   216   000E08  74                 	db	116	;'t'
   217   000E09  69                 	db	105	;'i'
   218   000E0A  6F                 	db	111	;'o'
   219   000E0B  6E                 	db	110	;'n'
   220   000E0C  20                 	db	32
   221   000E0D  73                 	db	115	;'s'
   222   000E0E  74                 	db	116	;'t'
   223   000E0F  61                 	db	97	;'a'
   224   000E10  74                 	db	116	;'t'
   225   000E11  65                 	db	101	;'e'
   226   000E12  20                 	db	32
   227   000E13  3D                 	db	61	;'='
   228   000E14  20                 	db	32
   229   000E15  20                 	db	32
   230   000E16  77                 	db	119	;'w'
   231   000E17  68                 	db	104	;'h'
   232   000E18  69                 	db	105	;'i'
   233   000E19  74                 	db	116	;'t'
   234   000E1A  65                 	db	101	;'e'
   235   000E1B  20                 	db	32
   236   000E1C  6C                 	db	108	;'l'
   237   000E1D  69                 	db	105	;'i'
   238   000E1E  67                 	db	103	;'g'
   239   000E1F  68                 	db	104	;'h'
   240   000E20  74                 	db	116	;'t'
   241   000E21  00                 	db	0
   242   000E22                     STR_3:
   243                           
   244                           ; BSR set to: 14
   245   000E22  43                 	db	67	;'C'
   246   000E23  61                 	db	97	;'a'
   247   000E24  6C                 	db	108	;'l'
   248   000E25  69                 	db	105	;'i'
   249   000E26  62                 	db	98	;'b'
   250   000E27  72                 	db	114	;'r'
   251   000E28  61                 	db	97	;'a'
   252   000E29  74                 	db	116	;'t'
   253   000E2A  69                 	db	105	;'i'
   254   000E2B  6F                 	db	111	;'o'
   255   000E2C  6E                 	db	110	;'n'
   256   000E2D  20                 	db	32
   257   000E2E  73                 	db	115	;'s'
   258   000E2F  74                 	db	116	;'t'
   259   000E30  61                 	db	97	;'a'
   260   000E31  74                 	db	116	;'t'
   261   000E32  65                 	db	101	;'e'
   262   000E33  20                 	db	32
   263   000E34  3D                 	db	61	;'='
   264   000E35  20                 	db	32
   265   000E36  67                 	db	103	;'g'
   266   000E37  72                 	db	114	;'r'
   267   000E38  65                 	db	101	;'e'
   268   000E39  65                 	db	101	;'e'
   269   000E3A  6E                 	db	110	;'n'
   270   000E3B  20                 	db	32
   271   000E3C  0A                 	db	10
   272   000E3D  0D                 	db	13
   273   000E3E  00                 	db	0
   274   000E3F                     STR_5:
   275                           
   276                           ; BSR set to: 14
   277   000E3F  43                 	db	67	;'C'
   278   000E40  61                 	db	97	;'a'
   279   000E41  6C                 	db	108	;'l'
   280   000E42  69                 	db	105	;'i'
   281   000E43  62                 	db	98	;'b'
   282   000E44  72                 	db	114	;'r'
   283   000E45  61                 	db	97	;'a'
   284   000E46  74                 	db	116	;'t'
   285   000E47  69                 	db	105	;'i'
   286   000E48  6F                 	db	111	;'o'
   287   000E49  6E                 	db	110	;'n'
   288   000E4A  20                 	db	32
   289   000E4B  73                 	db	115	;'s'
   290   000E4C  74                 	db	116	;'t'
   291   000E4D  61                 	db	97	;'a'
   292   000E4E  74                 	db	116	;'t'
   293   000E4F  65                 	db	101	;'e'
   294   000E50  3D                 	db	61	;'='
   295   000E51  20                 	db	32
   296   000E52  62                 	db	98	;'b'
   297   000E53  6C                 	db	108	;'l'
   298   000E54  75                 	db	117	;'u'
   299   000E55  65                 	db	101	;'e'
   300   000E56  20                 	db	32
   301   000E57  0A                 	db	10
   302   000E58  0D                 	db	13
   303   000E59  00                 	db	0
   304   000E5A                     STR_9:
   305                           
   306                           ; BSR set to: 14
   307   000E5A  43                 	db	67	;'C'
   308   000E5B  41                 	db	65	;'A'
   309   000E5C  4C                 	db	76	;'L'
   310   000E5D  49                 	db	73	;'I'
   311   000E5E  42                 	db	66	;'B'
   312   000E5F  52                 	db	82	;'R'
   313   000E60  41                 	db	65	;'A'
   314   000E61  54                 	db	84	;'T'
   315   000E62  49                 	db	73	;'I'
   316   000E63  4F                 	db	79	;'O'
   317   000E64  4E                 	db	78	;'N'
   318   000E65  20                 	db	32
   319   000E66  43                 	db	67	;'C'
   320   000E67  4F                 	db	79	;'O'
   321   000E68  4D                 	db	77	;'M'
   322   000E69  50                 	db	80	;'P'
   323   000E6A  4C                 	db	76	;'L'
   324   000E6B  45                 	db	69	;'E'
   325   000E6C  54                 	db	84	;'T'
   326   000E6D  45                 	db	69	;'E'
   327   000E6E  44                 	db	68	;'D'
   328   000E6F  20                 	db	32
   329   000E70  0A                 	db	10
   330   000E71  0D                 	db	13
   331   000E72  00                 	db	0
   332   000E73                     STR_1:
   333                           
   334                           ; BSR set to: 14
   335   000E73  43                 	db	67	;'C'
   336   000E74  61                 	db	97	;'a'
   337   000E75  6C                 	db	108	;'l'
   338   000E76  69                 	db	105	;'i'
   339   000E77  62                 	db	98	;'b'
   340   000E78  72                 	db	114	;'r'
   341   000E79  61                 	db	97	;'a'
   342   000E7A  74                 	db	116	;'t'
   343   000E7B  69                 	db	105	;'i'
   344   000E7C  6F                 	db	111	;'o'
   345   000E7D  6E                 	db	110	;'n'
   346   000E7E  20                 	db	32
   347   000E7F  73                 	db	115	;'s'
   348   000E80  74                 	db	116	;'t'
   349   000E81  61                 	db	97	;'a'
   350   000E82  74                 	db	116	;'t'
   351   000E83  65                 	db	101	;'e'
   352   000E84  20                 	db	32
   353   000E85  3D                 	db	61	;'='
   354   000E86  20                 	db	32
   355   000E87  72                 	db	114	;'r'
   356   000E88  65                 	db	101	;'e'
   357   000E89  64                 	db	100	;'d'
   358   000E8A  00                 	db	0
   359   000E8B                     
   360                           ; BSR set to: 14
   361   000E8B  56                 	db	86	;'V'
   362   000E8C  6F                 	db	111	;'o'
   363   000E8D  6C                 	db	108	;'l'
   364   000E8E  74                 	db	116	;'t'
   365   000E8F  61                 	db	97	;'a'
   366   000E90  67                 	db	103	;'g'
   367   000E91  65                 	db	101	;'e'
   368   000E92  20                 	db	32
   369   000E93  3D                 	db	61	;'='
   370   000E94  20                 	db	32
   371   000E95  25                 	db	37
   372   000E96  64                 	db	100	;'d'
   373   000E97  2E                 	db	46
   374   000E98  25                 	db	37
   375   000E99  30                 	db	48	;'0'
   376   000E9A  32                 	db	50	;'2'
   377   000E9B  64                 	db	100	;'d'
   378   000E9C  2C                 	db	44
   379   000E9D  20                 	db	32
   380   000E9E  20                 	db	32
   381   000E9F  00                 	db	0
   382   000EA0                     STR_12:
   383                           
   384                           ; BSR set to: 14
   385   000EA0  68                 	db	104	;'h'
   386   000EA1  75                 	db	117	;'u'
   387   000EA2  65                 	db	101	;'e'
   388   000EA3  3D                 	db	61	;'='
   389   000EA4  25                 	db	37
   390   000EA5  30                 	db	48	;'0'
   391   000EA6  33                 	db	51	;'3'
   392   000EA7  64                 	db	100	;'d'
   393   000EA8  2C                 	db	44
   394   000EA9  20                 	db	32
   395   000EAA  20                 	db	32
   396   000EAB  00                 	db	0
   397   000EAC                     STR_2:
   398                           
   399                           ; BSR set to: 14
   400   000EAC  2E                 	db	46
   401   000EAD  00                 	db	0
   402   000EAE  00                 	db	0	; dummy byte at the end
   403   000000                     
   404                           ; #config settings
   405                           
   406                           	psect	cinit
   407   003EF8                     __pcinit:
   408                           	callstack 0
   409   003EF8                     start_initialization:
   410                           	callstack 0
   411   003EF8                     __initialization:
   412                           	callstack 0
   413                           
   414                           ; Initialize objects allocated to BANK0 (1 bytes)
   415                           ; load TBLPTR registers with __pidataBANK0
   416   003EF8  0E44               	movlw	low __pidataBANK0
   417   003EFA  6EF6               	movwf	tblptrl,c
   418   003EFC  0E44               	movlw	high __pidataBANK0
   419   003EFE  6EF7               	movwf	tblptrh,c
   420   003F00  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   421   003F02  6EF8               	movwf	tblptru,c
   422   003F04  0009               	tblrd		*+	;fetch initializer
   423   003F06  CFF5 F0ED          	movff	tablat,__pdataBANK0
   424                           
   425                           ; Clear objects allocated to BANK2 (250 bytes)
   426   003F0A  EE02  F000         	lfsr	0,__pbssBANK2
   427   003F0E  0EFA               	movlw	250
   428   003F10                     clear_0:
   429   003F10  6AEE               	clrf	postinc0,c
   430   003F12  06E8               	decf	wreg,f,c
   431   003F14  E1FD               	bnz	clear_0
   432                           
   433                           ; Clear objects allocated to BANK1 (132 bytes)
   434   003F16  EE01  F000         	lfsr	0,__pbssBANK1
   435   003F1A  0E84               	movlw	132
   436   003F1C                     clear_1:
   437   003F1C  6AEE               	clrf	postinc0,c
   438   003F1E  06E8               	decf	wreg,f,c
   439   003F20  E1FD               	bnz	clear_1
   440                           
   441                           ; Clear objects allocated to BANK0 (49 bytes)
   442   003F22  EE00  F0BC         	lfsr	0,__pbssBANK0
   443   003F26  0E31               	movlw	49
   444   003F28                     clear_2:
   445   003F28  6AEE               	clrf	postinc0,c
   446   003F2A  06E8               	decf	wreg,f,c
   447   003F2C  E1FD               	bnz	clear_2
   448                           
   449                           ; Clear objects allocated to COMRAM (3 bytes)
   450   003F2E  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   451   003F30  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   452   003F32  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   453   003F34                     end_of_initialization:
   454                           	callstack 0
   455   003F34                     __end_of__initialization:
   456                           	callstack 0
   457   003F34  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   458   003F36  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   459   003F38  0100               	movlb	0
   460   003F3A  EF63  F011         	goto	_main	;jump to C main() function
   461                           
   462                           	psect	bssCOMRAM
   463   00004F                     __pbssCOMRAM:
   464                           	callstack 0
   465   00004F                     _TxBufReadCnt:
   466                           	callstack 0
   467   00004F                     	ds	1
   468   000050                     _TxBufWriteCnt:
   469                           	callstack 0
   470   000050                     	ds	1
   471   000051                     _RxBufWriteCnt:
   472                           	callstack 0
   473   000051                     	ds	1
   474                           
   475                           	psect	bssBANK0
   476   0000BC                     __pbssBANK0:
   477                           	callstack 0
   478   0000BC                     _hue:
   479                           	callstack 0
   480   0000BC                     	ds	8
   481   0000C4                     _width:
   482                           	callstack 0
   483   0000C4                     	ds	2
   484   0000C6                     _prec:
   485                           	callstack 0
   486   0000C6                     	ds	2
   487   0000C8                     _flags:
   488                           	callstack 0
   489   0000C8                     	ds	1
   490   0000C9                     _readingIndex:
   491                           	callstack 0
   492   0000C9                     	ds	1
   493   0000CA                     _RxBufReadCnt:
   494                           	callstack 0
   495   0000CA                     	ds	1
   496   0000CB                     _motorR:
   497                           	callstack 0
   498   0000CB                     	ds	9
   499   0000D4                     _motorL:
   500                           	callstack 0
   501   0000D4                     	ds	9
   502   0000DD                     _colorCurrent:
   503                           	callstack 0
   504   0000DD                     	ds	8
   505   0000E5                     _colorCalibration:
   506                           	callstack 0
   507   0000E5                     	ds	8
   508                           
   509                           	psect	dataBANK0
   510   0000ED                     __pdataBANK0:
   511                           	callstack 0
   512   0000ED                     _dataFlag:
   513                           	callstack 0
   514   0000ED                     	ds	1
   515                           
   516                           	psect	bssBANK1
   517   000100                     __pbssBANK1:
   518                           	callstack 0
   519   000100                     _EUSART4TXbuf:
   520                           	callstack 0
   521   000100                     	ds	60
   522   00013C                     _ldrReadings:
   523                           	callstack 0
   524   00013C                     	ds	20
   525   000150                     _EUSART4RXbuf:
   526                           	callstack 0
   527   000150                     	ds	20
   528   000164                     _dbuf:
   529                           	callstack 0
   530   000164                     	ds	32
   531                           
   532                           	psect	bssBANK2
   533   000200                     __pbssBANK2:
   534                           	callstack 0
   535   000200                     _path:
   536                           	callstack 0
   537   000200                     	ds	250
   538                           
   539                           	psect	cstackBANK0
   540   000060                     __pcstackBANK0:
   541                           	callstack 0
   542   000060                     convert_rgb2hue@redcurrent:
   543                           	callstack 0
   544   000060                     calibration_routine@cal_state:
   545                           	callstack 0
   546   000060                     send2USART@hue_char:
   547                           	callstack 0
   548                           
   549                           ; 50 bytes @ 0x0
   550   000060                     	ds	4
   551   000064                     convert_rgb2hue@redmax:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x4
   555   000064                     	ds	4
   556   000068                     convert_rgb2hue@greencurrent:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0x8
   560   000068                     	ds	4
   561   00006C                     convert_rgb2hue@greenmax:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0xC
   565   00006C                     	ds	4
   566   000070                     convert_rgb2hue@bluecurrent:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x10
   570   000070                     	ds	4
   571   000074                     convert_rgb2hue@bluemax:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x14
   575   000074                     	ds	4
   576   000078                     convert_rgb2hue@clearcurrent:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x18
   580   000078                     	ds	4
   581   00007C                     convert_rgb2hue@clearmax:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x1C
   585   00007C                     	ds	4
   586   000080                     _convert_rgb2hue$429:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x20
   590   000080                     	ds	4
   591   000084                     _convert_rgb2hue$430:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x24
   595   000084                     	ds	4
   596   000088                     _convert_rgb2hue$431:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x28
   600   000088                     	ds	4
   601   00008C                     _convert_rgb2hue$432:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x2C
   605   00008C                     	ds	4
   606   000090                     convert_rgb2hue@min:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x30
   610   000090                     	ds	4
   611   000094                     convert_rgb2hue@diff:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x34
   615   000094                     	ds	4
   616   000098                     convert_rgb2hue@max:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x38
   620   000098                     	ds	4
   621   00009C                     convert_rgb2hue@hue:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x3C
   625   00009C                     	ds	4
   626   0000A0                     convert_rgb2hue@r:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x40
   630   0000A0                     	ds	4
   631   0000A4                     convert_rgb2hue@g:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x44
   635   0000A4                     	ds	4
   636   0000A8                     convert_rgb2hue@b:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x48
   640   0000A8                     	ds	4
   641   0000AC                     main@current:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x4C
   645   0000AC                     	ds	4
   646   0000B0                     main@maximum:
   647                           	callstack 0
   648                           
   649                           ; 4 bytes @ 0x50
   650   0000B0                     	ds	4
   651   0000B4                     main@hue:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x54
   655   0000B4                     	ds	2
   656   0000B6                     main@time:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x56
   660   0000B6                     	ds	2
   661   0000B8                     main@clear_norm:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x58
   665   0000B8                     	ds	2
   666   0000BA                     main@path_length:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x5A
   670   0000BA                     	ds	2
   671                           
   672                           	psect	cstackCOMRAM
   673   000001                     __pcstackCOMRAM:
   674                           	callstack 0
   675   000001                     ??_LowISR:
   676   000001                     
   677                           ; 1 bytes @ 0x0
   678   000001                     	ds	1
   679   000002                     ??_I2C_2_Master_Idle:
   680   000002                     ?_get16bitTMR0val:
   681                           	callstack 0
   682   000002                     ?___wmul:
   683                           	callstack 0
   684   000002                     ?___awdiv:
   685                           	callstack 0
   686   000002                     ?___awmod:
   687                           	callstack 0
   688   000002                     ?___fladd:
   689                           	callstack 0
   690   000002                     ?___flmul:
   691                           	callstack 0
   692   000002                     ?___xxtofl:
   693                           	callstack 0
   694   000002                     sendCharSerial4@charToSend:
   695                           	callstack 0
   696   000002                     initDCmotorsPWM@PWMperiod:
   697                           	callstack 0
   698   000002                     customDelayMs@milliseconds:
   699                           	callstack 0
   700   000002                     ___wmul@multiplier:
   701                           	callstack 0
   702   000002                     ___awdiv@dividend:
   703                           	callstack 0
   704   000002                     ___awmod@dividend:
   705                           	callstack 0
   706   000002                     fputc@c:
   707                           	callstack 0
   708   000002                     ___fleq@ff1:
   709                           	callstack 0
   710   000002                     ___flge@ff1:
   711                           	callstack 0
   712   000002                     ___fladd@b:
   713                           	callstack 0
   714   000002                     ___flmul@b:
   715                           	callstack 0
   716   000002                     ___xxtofl@val:
   717                           	callstack 0
   718                           
   719                           ; 4 bytes @ 0x1
   720   000002                     	ds	1
   721   000003                     ??_I2C_2_Master_Read:
   722   000003                     I2C_2_Master_Write@data_byte:
   723                           	callstack 0
   724   000003                     sendStringSerial4@string:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x2
   728   000003                     	ds	1
   729   000004                     ??_get16bitTMR0val:
   730   000004                     ??_customDelayMs:
   731   000004                     color_writetoaddr@value:
   732                           	callstack 0
   733   000004                     I2C_2_Master_Read@ack:
   734                           	callstack 0
   735   000004                     fputc@fp:
   736                           	callstack 0
   737   000004                     ___wmul@multiplicand:
   738                           	callstack 0
   739   000004                     ___awdiv@divisor:
   740                           	callstack 0
   741   000004                     ___awmod@divisor:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x3
   745   000004                     	ds	1
   746   000005                     ??_fputc:
   747   000005                     color_writetoaddr@address:
   748                           	callstack 0
   749   000005                     I2C_2_Master_Read@tmp:
   750                           	callstack 0
   751   000005                     customDelayMs@i:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x4
   755   000005                     	ds	1
   756   000006                     ??_color_click_init:
   757   000006                     ??___xxtofl:
   758   000006                     ?_color_read_Red:
   759                           	callstack 0
   760   000006                     ?_color_read_Green:
   761                           	callstack 0
   762   000006                     ?_color_read_Blue:
   763                           	callstack 0
   764   000006                     ?_color_read_Clear:
   765                           	callstack 0
   766   000006                     ___awdiv@counter:
   767                           	callstack 0
   768   000006                     ___awmod@counter:
   769                           	callstack 0
   770   000006                     ___wmul@product:
   771                           	callstack 0
   772   000006                     ___fleq@ff2:
   773                           	callstack 0
   774   000006                     ___flge@ff2:
   775                           	callstack 0
   776   000006                     ___fladd@a:
   777                           	callstack 0
   778   000006                     ___flmul@a:
   779                           	callstack 0
   780                           
   781                           ; 4 bytes @ 0x5
   782   000006                     	ds	1
   783   000007                     ___awdiv@sign:
   784                           	callstack 0
   785   000007                     ___awmod@sign:
   786                           	callstack 0
   787                           
   788                           ; 1 bytes @ 0x6
   789   000007                     	ds	1
   790   000008                     ??_color_read_Red:
   791   000008                     ??_color_read_Green:
   792   000008                     ??_color_read_Blue:
   793   000008                     ??_color_read_Clear:
   794   000008                     ?_abs:
   795                           	callstack 0
   796   000008                     ?___lwdiv:
   797                           	callstack 0
   798   000008                     ?_read_prec_or_width:
   799                           	callstack 0
   800   000008                     read_prec_or_width@fmt:
   801                           	callstack 0
   802   000008                     logAction@time:
   803                           	callstack 0
   804   000008                     get16bitTMR0val@combined_value:
   805                           	callstack 0
   806   000008                     ___awdiv@quotient:
   807                           	callstack 0
   808   000008                     ___lwdiv@dividend:
   809                           	callstack 0
   810   000008                     abs@a:
   811                           	callstack 0
   812                           
   813                           ; 2 bytes @ 0x7
   814   000008                     	ds	1
   815   000009                     read_prec_or_width@ap:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x8
   819   000009                     	ds	1
   820   00000A                     ??___fladd:
   821   00000A                     ??___flmul:
   822   00000A                     ??_abs:
   823   00000A                     ??___fleq:
   824   00000A                     ??___flge:
   825   00000A                     ___xxtofl@sign:
   826                           	callstack 0
   827   00000A                     read_prec_or_width@c:
   828                           	callstack 0
   829   00000A                     logAction@pathLength:
   830                           	callstack 0
   831   00000A                     ___lwdiv@divisor:
   832                           	callstack 0
   833   00000A                     fputs@s:
   834                           	callstack 0
   835                           
   836                           ; 2 bytes @ 0x9
   837   00000A                     	ds	1
   838   00000B                     ___xxtofl@exp:
   839                           	callstack 0
   840   00000B                     color_read_Red@tmp:
   841                           	callstack 0
   842   00000B                     color_read_Green@tmp:
   843                           	callstack 0
   844   00000B                     color_read_Blue@tmp:
   845                           	callstack 0
   846   00000B                     color_read_Clear@tmp:
   847                           	callstack 0
   848   00000B                     read_prec_or_width@n:
   849                           	callstack 0
   850                           
   851                           ; 2 bytes @ 0xA
   852   00000B                     	ds	1
   853   00000C                     logAction@action:
   854                           	callstack 0
   855   00000C                     fputs@fp:
   856                           	callstack 0
   857   00000C                     ___lwdiv@quotient:
   858                           	callstack 0
   859   00000C                     ___xxtofl@arg:
   860                           	callstack 0
   861                           
   862                           ; 4 bytes @ 0xB
   863   00000C                     	ds	1
   864   00000D                     fputs@c:
   865                           	callstack 0
   866                           
   867                           ; 1 bytes @ 0xC
   868   00000D                     	ds	1
   869   00000E                     ___lwdiv@counter:
   870                           	callstack 0
   871   00000E                     ___fladd@signs:
   872                           	callstack 0
   873   00000E                     ___flmul@sign:
   874                           	callstack 0
   875   00000E                     fputs@i:
   876                           	callstack 0
   877                           
   878                           ; 2 bytes @ 0xD
   879   00000E                     	ds	1
   880   00000F                     setMotorPWM@m:
   881                           	callstack 0
   882   00000F                     ___fladd@aexp:
   883                           	callstack 0
   884   00000F                     ___flmul@grs:
   885                           	callstack 0
   886                           
   887                           ; 4 bytes @ 0xE
   888   00000F                     	ds	1
   889   000010                     ??_setMotorPWM:
   890   000010                     ___fladd@bexp:
   891                           	callstack 0
   892   000010                     pad@fp:
   893                           	callstack 0
   894                           
   895                           ; 1 bytes @ 0xF
   896   000010                     	ds	1
   897   000011                     ___fladd@grs:
   898                           	callstack 0
   899   000011                     pad@buf:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x10
   903   000011                     	ds	1
   904   000012                     ?___flsub:
   905                           	callstack 0
   906   000012                     setMotorPWM@posDuty:
   907                           	callstack 0
   908   000012                     ___flsub@b:
   909                           	callstack 0
   910                           
   911                           ; 4 bytes @ 0x11
   912   000012                     	ds	1
   913   000013                     setMotorPWM@negDuty:
   914                           	callstack 0
   915   000013                     ___flmul@aexp:
   916                           	callstack 0
   917   000013                     pad@p:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0x12
   921   000013                     	ds	1
   922   000014                     stop@mL:
   923                           	callstack 0
   924   000014                     turnLeft@mL:
   925                           	callstack 0
   926   000014                     turnRight@mL:
   927                           	callstack 0
   928   000014                     fullSpeedAhead@mL:
   929                           	callstack 0
   930   000014                     fullSpeedBack@mL:
   931                           	callstack 0
   932   000014                     ___flmul@bexp:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0x13
   936   000014                     	ds	1
   937   000015                     ??_pad:
   938   000015                     stop@mR:
   939                           	callstack 0
   940   000015                     turnLeft@mR:
   941                           	callstack 0
   942   000015                     turnRight@mR:
   943                           	callstack 0
   944   000015                     fullSpeedAhead@mR:
   945                           	callstack 0
   946   000015                     fullSpeedBack@mR:
   947                           	callstack 0
   948   000015                     ___flmul@prod:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x14
   952   000015                     	ds	1
   953   000016                     ??_fullSpeedAhead:
   954   000016                     ??_stop:
   955   000016                     ??_turnLeft:
   956   000016                     ??_turnRight:
   957   000016                     ??_fullSpeedBack:
   958   000016                     pad@i:
   959                           	callstack 0
   960   000016                     ___flsub@a:
   961                           	callstack 0
   962                           
   963                           ; 4 bytes @ 0x15
   964   000016                     	ds	1
   965   000017                     turnLeft@i:
   966                           	callstack 0
   967   000017                     turnRight@i:
   968                           	callstack 0
   969   000017                     fullSpeedAhead@power:
   970                           	callstack 0
   971   000017                     fullSpeedBack@power:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x16
   975   000017                     	ds	1
   976   000018                     dtoa@fp:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x17
   980   000018                     	ds	1
   981   000019                     right90@mL:
   982                           	callstack 0
   983   000019                     left90@mL:
   984                           	callstack 0
   985   000019                     turn180@mL:
   986                           	callstack 0
   987   000019                     right135@mL:
   988                           	callstack 0
   989   000019                     left135@mL:
   990                           	callstack 0
   991   000019                     backHalf@mL:
   992                           	callstack 0
   993   000019                     backOneAndHalf@mL:
   994                           	callstack 0
   995   000019                     reverseStraight@mL:
   996                           	callstack 0
   997   000019                     ___flmul@temp:
   998                           	callstack 0
   999   000019                     dtoa@d:
  1000                           	callstack 0
  1001                           
  1002                           ; 2 bytes @ 0x18
  1003   000019                     	ds	1
  1004   00001A                     right90@mR:
  1005                           	callstack 0
  1006   00001A                     left90@mR:
  1007                           	callstack 0
  1008   00001A                     turn180@mR:
  1009                           	callstack 0
  1010   00001A                     right135@mR:
  1011                           	callstack 0
  1012   00001A                     left135@mR:
  1013                           	callstack 0
  1014   00001A                     backHalf@mR:
  1015                           	callstack 0
  1016   00001A                     backOneAndHalf@mR:
  1017                           	callstack 0
  1018   00001A                     reverseStraight@mR:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x19
  1022   00001A                     	ds	1
  1023   00001B                     ??_right90:
  1024   00001B                     ??_left90:
  1025   00001B                     ??_turn180:
  1026   00001B                     ??_right135:
  1027   00001B                     ??_left135:
  1028   00001B                     ??_backHalf:
  1029   00001B                     ??_backOneAndHalf:
  1030   00001B                     ?___fldiv:
  1031                           	callstack 0
  1032   00001B                     reverseStraight@time:
  1033                           	callstack 0
  1034   00001B                     _dtoa$3023:
  1035                           	callstack 0
  1036   00001B                     ___fldiv@b:
  1037                           	callstack 0
  1038                           
  1039                           ; 4 bytes @ 0x1A
  1040   00001B                     	ds	2
  1041   00001D                     moveRed@mL:
  1042                           	callstack 0
  1043   00001D                     moveGreen@mL:
  1044                           	callstack 0
  1045   00001D                     moveBlue@mL:
  1046                           	callstack 0
  1047   00001D                     moveYellow@mL:
  1048                           	callstack 0
  1049   00001D                     movePink@mL:
  1050                           	callstack 0
  1051   00001D                     moveOrange@mL:
  1052                           	callstack 0
  1053   00001D                     moveLightBlue@mL:
  1054                           	callstack 0
  1055   00001D                     reverseTurn@mL:
  1056                           	callstack 0
  1057   00001D                     dtoa@p:
  1058                           	callstack 0
  1059   00001D                     reverseStraight@delayMs:
  1060                           	callstack 0
  1061                           
  1062                           ; 2 bytes @ 0x1C
  1063   00001D                     	ds	1
  1064   00001E                     moveRed@mR:
  1065                           	callstack 0
  1066   00001E                     moveGreen@mR:
  1067                           	callstack 0
  1068   00001E                     moveBlue@mR:
  1069                           	callstack 0
  1070   00001E                     moveYellow@mR:
  1071                           	callstack 0
  1072   00001E                     movePink@mR:
  1073                           	callstack 0
  1074   00001E                     moveOrange@mR:
  1075                           	callstack 0
  1076   00001E                     moveLightBlue@mR:
  1077                           	callstack 0
  1078   00001E                     reverseTurn@mR:
  1079                           	callstack 0
  1080   00001E                     dtoa@w:
  1081                           	callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x1D
  1084   00001E                     	ds	1
  1085   00001F                     reverseTurn@turnDirection:
  1086                           	callstack 0
  1087   00001F                     moveRed@path_length:
  1088                           	callstack 0
  1089   00001F                     moveGreen@path_length:
  1090                           	callstack 0
  1091   00001F                     moveBlue@path_length:
  1092                           	callstack 0
  1093   00001F                     moveYellow@path_length:
  1094                           	callstack 0
  1095   00001F                     movePink@path_length:
  1096                           	callstack 0
  1097   00001F                     moveOrange@path_length:
  1098                           	callstack 0
  1099   00001F                     moveLightBlue@path_length:
  1100                           	callstack 0
  1101   00001F                     ___fldiv@a:
  1102                           	callstack 0
  1103                           
  1104                           ; 4 bytes @ 0x1E
  1105   00001F                     	ds	1
  1106   000020                     returnHome@mL:
  1107                           	callstack 0
  1108   000020                     dtoa@s:
  1109                           	callstack 0
  1110                           
  1111                           ; 1 bytes @ 0x1F
  1112   000020                     	ds	1
  1113   000021                     ??_moveRed:
  1114   000021                     ??_moveGreen:
  1115   000021                     ??_moveBlue:
  1116   000021                     ??_moveLightBlue:
  1117   000021                     ??_moveYellow:
  1118   000021                     ??_moveOrange:
  1119   000021                     ??_movePink:
  1120   000021                     returnHome@mR:
  1121                           	callstack 0
  1122   000021                     dtoa@i:
  1123                           	callstack 0
  1124                           
  1125                           ; 2 bytes @ 0x20
  1126   000021                     	ds	1
  1127   000022                     returnHome@path:
  1128                           	callstack 0
  1129                           
  1130                           ; 2 bytes @ 0x21
  1131   000022                     	ds	1
  1132   000023                     ??___fldiv:
  1133   000023                     vfpfcnvrt@fp:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x22
  1137   000023                     	ds	1
  1138   000024                     vfpfcnvrt@fmt:
  1139                           	callstack 0
  1140   000024                     returnHome@pathLength:
  1141                           	callstack 0
  1142                           
  1143                           ; 2 bytes @ 0x23
  1144   000024                     	ds	1
  1145   000025                     vfpfcnvrt@ap:
  1146                           	callstack 0
  1147                           
  1148                           ; 1 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_returnHome:
  1151   000026                     ??_vfpfcnvrt:
  1152                           
  1153                           ; 1 bytes @ 0x25
  1154   000026                     	ds	1
  1155   000027                     ___fldiv@rem:
  1156                           	callstack 0
  1157                           
  1158                           ; 4 bytes @ 0x26
  1159   000027                     	ds	1
  1160   000028                     returnHome@time:
  1161                           	callstack 0
  1162   000028                     vfpfcnvrt@convarg:
  1163                           	callstack 0
  1164                           
  1165                           ; 4 bytes @ 0x27
  1166   000028                     	ds	2
  1167   00002A                     returnHome@action:
  1168                           	callstack 0
  1169                           
  1170                           ; 1 bytes @ 0x29
  1171   00002A                     	ds	1
  1172   00002B                     ___fldiv@sign:
  1173                           	callstack 0
  1174   00002B                     returnHome@i:
  1175                           	callstack 0
  1176                           
  1177                           ; 2 bytes @ 0x2A
  1178   00002B                     	ds	1
  1179   00002C                     vfpfcnvrt@done:
  1180                           	callstack 0
  1181   00002C                     ___fldiv@new_exp:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2B
  1185   00002C                     	ds	1
  1186   00002D                     vfpfcnvrt@cp:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x2C
  1190   00002D                     	ds	1
  1191   00002E                     ?_vfprintf:
  1192                           	callstack 0
  1193   00002E                     vfprintf@fp:
  1194                           	callstack 0
  1195   00002E                     ___fldiv@grs:
  1196                           	callstack 0
  1197                           
  1198                           ; 4 bytes @ 0x2D
  1199   00002E                     	ds	1
  1200   00002F                     vfprintf@fmt:
  1201                           	callstack 0
  1202                           
  1203                           ; 1 bytes @ 0x2E
  1204   00002F                     	ds	1
  1205   000030                     vfprintf@ap:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2F
  1209   000030                     	ds	1
  1210   000031                     vfprintf@cfmt:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x30
  1214   000031                     	ds	1
  1215   000032                     ?_sprintf:
  1216                           	callstack 0
  1217   000032                     ___fldiv@bexp:
  1218                           	callstack 0
  1219   000032                     sprintf@s:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x31
  1223   000032                     	ds	1
  1224   000033                     ___fldiv@aexp:
  1225                           	callstack 0
  1226   000033                     sprintf@fmt:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x32
  1230   000033                     	ds	1
  1231   000034                     ?___fltol:
  1232                           	callstack 0
  1233   000034                     ___fltol@f1:
  1234                           	callstack 0
  1235                           
  1236                           ; 4 bytes @ 0x33
  1237   000034                     	ds	4
  1238   000038                     ??___fltol:
  1239   000038                     sprintf@ap:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x37
  1243   000038                     	ds	1
  1244   000039                     sprintf@f:
  1245                           	callstack 0
  1246                           
  1247                           ; 12 bytes @ 0x38
  1248   000039                     	ds	3
  1249   00003C                     ___fltol@sign1:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x3B
  1253   00003C                     	ds	1
  1254   00003D                     ___fltol@exp1:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x3C
  1258   00003D                     	ds	1
  1259   00003E                     ?_convert_rgb2hue:
  1260                           	callstack 0
  1261   00003E                     convert_rgb2hue@cMax:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x3D
  1265   00003E                     	ds	1
  1266   00003F                     convert_rgb2hue@cCurr:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x3E
  1270   00003F                     	ds	1
  1271   000040                     ??_convert_rgb2hue:
  1272                           
  1273                           ; 1 bytes @ 0x3F
  1274   000040                     	ds	2
  1275   000042                     ?_reading_hue:
  1276                           	callstack 0
  1277   000042                     reading_hue@cCurr:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x41
  1281   000042                     	ds	2
  1282   000044                     ??_reading_hue:
  1283                           
  1284                           ; 1 bytes @ 0x43
  1285   000044                     	ds	1
  1286   000045                     calibration_routine@cCal:
  1287                           	callstack 0
  1288   000045                     send2USART@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x44
  1292   000045                     	ds	1
  1293   000046                     ??_calibration_routine:
  1294   000046                     reading_hue@hue:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x45
  1298   000046                     	ds	1
  1299   000047                     decision@hue:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x46
  1303   000047                     	ds	2
  1304   000049                     decision@path_length:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x48
  1308   000049                     	ds	2
  1309   00004B                     decision@color:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x4A
  1313   00004B                     	ds	2
  1314   00004D                     ??_main:
  1315                           
  1316                           ; 1 bytes @ 0x4C
  1317   00004D                     	ds	2
  1318                           
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 29 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  white           2    0        unsigned int 
  1329 ;;  time            2   86[BANK0 ] int 
  1330 ;;  maximum         4   80[BANK0 ] float 
  1331 ;;  current         4   76[BANK0 ] float 
  1332 ;;  clear_norm      2   88[BANK0 ] unsigned int 
  1333 ;;  hue_char       20    0        unsigned char [20]
  1334 ;;  path_length     2   90[BANK0 ] unsigned int 
  1335 ;;  PWMcycle        2    0        unsigned int 
  1336 ;;  hue             2   84[BANK0 ] unsigned int 
  1337 ;;  clear           2    0        unsigned int 
  1338 ;;  green           2    0        unsigned int 
  1339 ;;  blue            2    0        unsigned int 
  1340 ;;  red             2    0        unsigned int 
  1341 ;;  battery_leve    2    0        unsigned int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;Total ram usage:       18 bytes
  1356 ;; Hardware stack levels required when called: 11
  1357 ;; This function calls:
  1358 ;;		_ADC_init
  1359 ;;		___fldiv
  1360 ;;		___flmul
  1361 ;;		___fltol
  1362 ;;		___xxtofl
  1363 ;;		_calibration_routine
  1364 ;;		_color_click_init
  1365 ;;		_color_read_Clear
  1366 ;;		_decision
  1367 ;;		_fullSpeedAhead
  1368 ;;		_get16bitTMR0val
  1369 ;;		_initDCmotorsPWM
  1370 ;;		_initUSART4
  1371 ;;		_logAction
  1372 ;;		_reading_hue
  1373 ;;		_returnHome
  1374 ;;		_send2USART
  1375 ;;		_stop
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382   0022C6                     __ptext0:
  1383                           	callstack 0
  1384   0022C6                     _main:
  1385                           	callstack 20
  1386   0022C6                     
  1387                           ;main.c: 31:     ADC_init();
  1388   0022C6  ECF3  F021         	call	_ADC_init	;wreg free
  1389   0022CA                     
  1390                           ;main.c: 32:     color_click_init();
  1391   0022CA  EC63  F020         	call	_color_click_init	;wreg free
  1392   0022CE                     
  1393                           ;main.c: 33:     initUSART4();
  1394   0022CE  ECD5  F021         	call	_initUSART4	;wreg free
  1395   0022D2                     
  1396                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1397   0022D2  0E00               	movlw	0
  1398   0022D4  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1399   0022D6  0E63               	movlw	99
  1400   0022D8  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1401   0022DA  ECEC  F01B         	call	_initDCmotorsPWM	;wreg free
  1402   0022DE                     
  1403                           ;main.c: 40:     motorL.power = 0;
  1404   0022DE  0E00               	movlw	0
  1405   0022E0  0100               	movlb	0	; () banked
  1406   0022E2  6FD4               	movwf	_motorL& (0+255),b
  1407   0022E4                     
  1408                           ; BSR set to: 0
  1409                           ;main.c: 41:     motorL.direction = 1;
  1410   0022E4  0E01               	movlw	1
  1411   0022E6  6FD5               	movwf	(_motorL+1)& (0+255),b
  1412   0022E8                     
  1413                           ; BSR set to: 0
  1414                           ;main.c: 42:     motorL.brakemode = 1;
  1415   0022E8  0E01               	movlw	1
  1416   0022EA  6FD6               	movwf	(_motorL+2)& (0+255),b
  1417   0022EC                     
  1418                           ; BSR set to: 0
  1419                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1420   0022EC  0E00               	movlw	0
  1421   0022EE  6FD8               	movwf	(_motorL+4)& (0+255),b
  1422   0022F0  0E63               	movlw	99
  1423   0022F2  6FD7               	movwf	(_motorL+3)& (0+255),b
  1424   0022F4                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1427   0022F4  0EAA               	movlw	170
  1428   0022F6  6FD9               	movwf	(_motorL+5)& (0+255),b
  1429   0022F8  0E0F               	movlw	15
  1430   0022FA  6FDA               	movwf	(_motorL+6)& (0+255),b
  1431   0022FC                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1434   0022FC  0EA6               	movlw	166
  1435   0022FE  6FDB               	movwf	(_motorL+7)& (0+255),b
  1436   002300  0E0F               	movlw	15
  1437   002302  6FDC               	movwf	(_motorL+8)& (0+255),b
  1438   002304                     
  1439                           ; BSR set to: 0
  1440                           ;main.c: 47:     motorR.power = 0;
  1441   002304  0E00               	movlw	0
  1442   002306  6FCB               	movwf	_motorR& (0+255),b
  1443   002308                     
  1444                           ; BSR set to: 0
  1445                           ;main.c: 48:     motorR.direction = 1;
  1446   002308  0E01               	movlw	1
  1447   00230A  6FCC               	movwf	(_motorR+1)& (0+255),b
  1448   00230C                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 49:     motorR.brakemode = 1;
  1451   00230C  0E01               	movlw	1
  1452   00230E  6FCD               	movwf	(_motorR+2)& (0+255),b
  1453   002310                     
  1454                           ; BSR set to: 0
  1455                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1456   002310  0E00               	movlw	0
  1457   002312  6FCF               	movwf	(_motorR+4)& (0+255),b
  1458   002314  0E63               	movlw	99
  1459   002316  6FCE               	movwf	(_motorR+3)& (0+255),b
  1460                           
  1461                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1462   002318  0E25               	movlw	37
  1463   00231A  6FD0               	movwf	(_motorR+5)& (0+255),b
  1464   00231C  0E0F               	movlw	15
  1465   00231E  6FD1               	movwf	(_motorR+6)& (0+255),b
  1466                           
  1467                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1468   002320  0E21               	movlw	33
  1469   002322  6FD2               	movwf	(_motorR+7)& (0+255),b
  1470   002324  0E0F               	movlw	15
  1471   002326  6FD3               	movwf	(_motorR+8)& (0+255),b
  1472   002328                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 55:     LATDbits.LATD7=0;
  1475   002328  9E7C               	bcf	124,7,c	;volatile
  1476   00232A                     
  1477                           ; BSR set to: 0
  1478                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1479   00232A  9E84               	bcf	132,7,c	;volatile
  1480   00232C                     
  1481                           ; BSR set to: 0
  1482                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1483   00232C  9087               	bcf	135,0,c	;volatile
  1484   00232E                     
  1485                           ; BSR set to: 0
  1486                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1487   00232E  907F               	bcf	127,0,c	;volatile
  1488   002330                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1491   002330  9E85               	bcf	133,7,c	;volatile
  1492   002332                     
  1493                           ; BSR set to: 0
  1494                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1495   002332  9E7D               	bcf	125,7,c	;volatile
  1496   002334                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1499   002334  9681               	bcf	129,3,c	;volatile
  1500   002336                     
  1501                           ; BSR set to: 0
  1502                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1503   002336  9679               	bcf	121,3,c	;volatile
  1504   002338                     
  1505                           ; BSR set to: 0
  1506                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1507   002338  8686               	bsf	134,3,c	;volatile
  1508   00233A                     
  1509                           ; BSR set to: 0
  1510                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1511   00233A  010E               	movlb	14	; () banked
  1512   00233C  97B4               	bcf	180,3,b	;volatile
  1513   00233E                     
  1514                           ; BSR set to: 14
  1515                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1516   00233E  8486               	bsf	134,2,c	;volatile
  1517   002340                     
  1518                           ; BSR set to: 14
  1519                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1520   002340  947E               	bcf	126,2,c	;volatile
  1521   002342                     
  1522                           ; BSR set to: 14
  1523                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1524   002342  95B4               	bcf	180,2,b	;volatile
  1525   002344                     
  1526                           ; BSR set to: 14
  1527                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1528   002344  9287               	bcf	135,1,c	;volatile
  1529   002346                     
  1530                           ; BSR set to: 14
  1531                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1532   002346  927F               	bcf	127,1,c	;volatile
  1533   002348                     
  1534                           ; BSR set to: 14
  1535                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1536   002348  0E00               	movlw	0
  1537   00234A  0100               	movlb	0	; () banked
  1538   00234C  6FBB               	movwf	(main@path_length+1)& (0+255),b
  1539   00234E  0E00               	movlw	0
  1540   002350  6FBA               	movwf	main@path_length& (0+255),b
  1541   002352                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1544   002352  9688               	bcf	136,3,c	;volatile
  1545   002354                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1548   002354  8680               	bsf	128,3,c	;volatile
  1549   002356                     
  1550                           ; BSR set to: 0
  1551                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1552   002356  0E19               	movlw	25
  1553   002358  6E4E               	movwf	(??_main+1)^0,c
  1554   00235A  0E5A               	movlw	90
  1555   00235C  6E4D               	movwf	??_main^0,c
  1556   00235E  0EB2               	movlw	178
  1557   002360                     u5327:
  1558   002360  2EE8               	decfsz	wreg,f,c
  1559   002362  D7FE               	bra	u5327
  1560   002364  2E4D               	decfsz	??_main^0,f,c
  1561   002366  D7FC               	bra	u5327
  1562   002368  2E4E               	decfsz	(??_main+1)^0,f,c
  1563   00236A  D7FA               	bra	u5327
  1564   00236C                     
  1565                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1566   00236C  9680               	bcf	128,3,c	;volatile
  1567   00236E                     
  1568                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1569   00236E  0EE5               	movlw	low _colorCalibration
  1570   002370  6E45               	movwf	calibration_routine@cCal^0,c
  1571   002372  ECB6  F013         	call	_calibration_routine	;wreg free
  1572   002376                     l5922:
  1573                           
  1574                           ;main.c: 108:         LATGbits.LATG0 = 1;
  1575   002376  807F               	bsf	127,0,c	;volatile
  1576   002378                     
  1577                           ;main.c: 109:         LATEbits.LATE7 = 1;
  1578   002378  8E7D               	bsf	125,7,c	;volatile
  1579   00237A                     
  1580                           ;main.c: 110:         LATAbits.LATA3 = 1;
  1581   00237A  8679               	bsf	121,3,c	;volatile
  1582   00237C                     
  1583                           ;main.c: 113:         fullSpeedAhead(&motorL,&motorR);
  1584   00237C  0ED4               	movlw	low _motorL
  1585   00237E  6E14               	movwf	fullSpeedAhead@mL^0,c
  1586   002380  0ECB               	movlw	low _motorR
  1587   002382  6E15               	movwf	fullSpeedAhead@mR^0,c
  1588   002384  ECF9  F01C         	call	_fullSpeedAhead	;wreg free
  1589   002388                     
  1590                           ;main.c: 114:         T0CON0bits.T0EN=1;
  1591   002388  8ED5               	bsf	213,7,c	;volatile
  1592   00238A                     
  1593                           ;main.c: 116:         (colorCurrent.clear) = color_read_Clear();
  1594   00238A  EC30  F01E         	call	_color_read_Clear	;wreg free
  1595   00238E  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1596   002392  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1597   002396                     
  1598                           ;main.c: 117:         float current = colorCurrent.clear;
  1599   002396  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1600   00239A  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1601   00239E  6A04               	clrf	(___xxtofl@val+2)^0,c
  1602   0023A0  6A05               	clrf	(___xxtofl@val+3)^0,c
  1603   0023A2  0E00               	movlw	0
  1604   0023A4  EC9F  F014         	call	___xxtofl
  1605   0023A8  C002  F0AC         	movff	?___xxtofl,main@current
  1606   0023AC  C003  F0AD         	movff	?___xxtofl+1,main@current+1
  1607   0023B0  C004  F0AE         	movff	?___xxtofl+2,main@current+2
  1608   0023B4  C005  F0AF         	movff	?___xxtofl+3,main@current+3
  1609   0023B8                     
  1610                           ;main.c: 118:         float maximum = colorCalibration.clear;
  1611   0023B8  C0EB  F002         	movff	_colorCalibration+6,___xxtofl@val
  1612   0023BC  C0EC  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1613   0023C0  6A04               	clrf	(___xxtofl@val+2)^0,c
  1614   0023C2  6A05               	clrf	(___xxtofl@val+3)^0,c
  1615   0023C4  0E00               	movlw	0
  1616   0023C6  EC9F  F014         	call	___xxtofl
  1617   0023CA  C002  F0B0         	movff	?___xxtofl,main@maximum
  1618   0023CE  C003  F0B1         	movff	?___xxtofl+1,main@maximum+1
  1619   0023D2  C004  F0B2         	movff	?___xxtofl+2,main@maximum+2
  1620   0023D6  C005  F0B3         	movff	?___xxtofl+3,main@maximum+3
  1621   0023DA                     
  1622                           ;main.c: 119:         unsigned int clear_norm = current*100/maximum;
  1623   0023DA  C0B0  F01F         	movff	main@maximum,___fldiv@a
  1624   0023DE  C0B1  F020         	movff	main@maximum+1,___fldiv@a+1
  1625   0023E2  C0B2  F021         	movff	main@maximum+2,___fldiv@a+2
  1626   0023E6  C0B3  F022         	movff	main@maximum+3,___fldiv@a+3
  1627   0023EA  0E00               	movlw	0
  1628   0023EC  6E06               	movwf	___flmul@a^0,c
  1629   0023EE  0E00               	movlw	0
  1630   0023F0  6E07               	movwf	(___flmul@a+1)^0,c
  1631   0023F2  0EC8               	movlw	200
  1632   0023F4  6E08               	movwf	(___flmul@a+2)^0,c
  1633   0023F6  0E42               	movlw	66
  1634   0023F8  6E09               	movwf	(___flmul@a+3)^0,c
  1635   0023FA  C0AC  F002         	movff	main@current,___flmul@b
  1636   0023FE  C0AD  F003         	movff	main@current+1,___flmul@b+1
  1637   002402  C0AE  F004         	movff	main@current+2,___flmul@b+2
  1638   002406  C0AF  F005         	movff	main@current+3,___flmul@b+3
  1639   00240A  EC81  F00D         	call	___flmul	;wreg free
  1640   00240E  C002  F01B         	movff	?___flmul,___fldiv@b
  1641   002412  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1642   002416  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1643   00241A  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1644   00241E  EC96  F00F         	call	___fldiv	;wreg free
  1645   002422  C01B  F034         	movff	?___fldiv,___fltol@f1
  1646   002426  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1647   00242A  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1648   00242E  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1649   002432  ECA3  F017         	call	___fltol	;wreg free
  1650   002436  C034  F0B8         	movff	?___fltol,main@clear_norm
  1651   00243A  C035  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1652   00243E                     
  1653                           ;main.c: 122:         if (clear_norm > 10){
  1654   00243E  0100               	movlb	0	; () banked
  1655   002440  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1656   002442  E109               	bnz	u5280
  1657   002444  0E0B               	movlw	11
  1658   002446  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1659   002448  A0D8               	btfss	status,0,c
  1660   00244A  EF29  F012         	goto	u5281
  1661   00244E  EF2B  F012         	goto	u5280
  1662   002452                     u5281:
  1663   002452  EFBB  F011         	goto	l5922
  1664   002456                     u5280:
  1665   002456                     
  1666                           ; BSR set to: 0
  1667                           ;main.c: 124:             stop(&motorL,&motorR);
  1668   002456  0ED4               	movlw	low _motorL
  1669   002458  6E14               	movwf	stop@mL^0,c
  1670   00245A  0ECB               	movlw	low _motorR
  1671   00245C  6E15               	movwf	stop@mR^0,c
  1672   00245E  EC34  F01C         	call	_stop	;wreg free
  1673   002462                     
  1674                           ;main.c: 126:             int time = get16bitTMR0val();
  1675   002462  ECB4  F021         	call	_get16bitTMR0val	;wreg free
  1676   002466  C002  F0B6         	movff	?_get16bitTMR0val,main@time
  1677   00246A  C003  F0B7         	movff	?_get16bitTMR0val+1,main@time+1
  1678   00246E                     
  1679                           ;main.c: 127:             T0CON0bits.T0EN=0;
  1680   00246E  9ED5               	bcf	213,7,c	;volatile
  1681   002470                     
  1682                           ;main.c: 128:             logAction('F',time, path_length);
  1683   002470  C0B6  F008         	movff	main@time,logAction@time
  1684   002474  C0B7  F009         	movff	main@time+1,logAction@time+1
  1685   002478  C0BA  F00A         	movff	main@path_length,logAction@pathLength
  1686   00247C  C0BB  F00B         	movff	main@path_length+1,logAction@pathLength+1
  1687   002480  0E46               	movlw	70
  1688   002482  ECAB  F01D         	call	_logAction
  1689   002486                     
  1690                           ;main.c: 132:             fullSpeedAhead(&motorL,&motorR);
  1691   002486  0ED4               	movlw	low _motorL
  1692   002488  6E14               	movwf	fullSpeedAhead@mL^0,c
  1693   00248A  0ECB               	movlw	low _motorR
  1694   00248C  6E15               	movwf	fullSpeedAhead@mR^0,c
  1695   00248E  ECF9  F01C         	call	_fullSpeedAhead	;wreg free
  1696   002492                     
  1697                           ;main.c: 133:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1698   002492  0E09               	movlw	9
  1699   002494  6E4E               	movwf	(??_main+1)^0,c
  1700   002496  0E1E               	movlw	30
  1701   002498  6E4D               	movwf	??_main^0,c
  1702   00249A  0EE4               	movlw	228
  1703   00249C                     u5337:
  1704   00249C  2EE8               	decfsz	wreg,f,c
  1705   00249E  D7FE               	bra	u5337
  1706   0024A0  2E4D               	decfsz	??_main^0,f,c
  1707   0024A2  D7FC               	bra	u5337
  1708   0024A4  2E4E               	decfsz	(??_main+1)^0,f,c
  1709   0024A6  D7FA               	bra	u5337
  1710   0024A8  D000               	nop2	
  1711   0024AA                     
  1712                           ;main.c: 134:             stop(&motorL,&motorR);
  1713   0024AA  0ED4               	movlw	low _motorL
  1714   0024AC  6E14               	movwf	stop@mL^0,c
  1715   0024AE  0ECB               	movlw	low _motorR
  1716   0024B0  6E15               	movwf	stop@mR^0,c
  1717   0024B2  EC34  F01C         	call	_stop	;wreg free
  1718   0024B6                     
  1719                           ;main.c: 135:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1720   0024B6  0E29               	movlw	41
  1721   0024B8  6E4E               	movwf	(??_main+1)^0,c
  1722   0024BA  0E96               	movlw	150
  1723   0024BC  6E4D               	movwf	??_main^0,c
  1724   0024BE  0E7F               	movlw	127
  1725   0024C0                     u5347:
  1726   0024C0  2EE8               	decfsz	wreg,f,c
  1727   0024C2  D7FE               	bra	u5347
  1728   0024C4  2E4D               	decfsz	??_main^0,f,c
  1729   0024C6  D7FC               	bra	u5347
  1730   0024C8  2E4E               	decfsz	(??_main+1)^0,f,c
  1731   0024CA  D7FA               	bra	u5347
  1732   0024CC  0000               	nop	
  1733   0024CE                     
  1734                           ;main.c: 137:             if (clear_norm > 80 || LATGbits.LATG1 == 1){
  1735   0024CE  0100               	movlb	0	; () banked
  1736   0024D0  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1737   0024D2  E107               	bnz	u5291
  1738   0024D4  0E51               	movlw	81
  1739   0024D6  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1740   0024D8  B0D8               	btfsc	status,0,c
  1741   0024DA  EF71  F012         	goto	u5291
  1742   0024DE  EF73  F012         	goto	u5290
  1743   0024E2                     u5291:
  1744   0024E2  EF7A  F012         	goto	l5962
  1745   0024E6                     u5290:
  1746   0024E6                     
  1747                           ; BSR set to: 0
  1748   0024E6  A27F               	btfss	127,1,c	;volatile
  1749   0024E8  EF78  F012         	goto	u5301
  1750   0024EC  EF7A  F012         	goto	u5300
  1751   0024F0                     u5301:
  1752   0024F0  EF8F  F012         	goto	l5970
  1753   0024F4                     u5300:
  1754   0024F4                     l5962:
  1755   0024F4                     
  1756                           ; BSR set to: 0
  1757                           ;main.c: 140:                 send2USART(white);
  1758   0024F4  0E00               	movlw	0
  1759   0024F6  6E46               	movwf	(send2USART@hue+1)^0,c
  1760   0024F8  0E08               	movlw	8
  1761   0024FA  6E45               	movwf	send2USART@hue^0,c
  1762   0024FC  ECE4  F021         	call	_send2USART	;wreg free
  1763   002500                     
  1764                           ;main.c: 141:                 returnHome(&motorL, &motorR, &path, path_length);
  1765   002500  0ED4               	movlw	low _motorL
  1766   002502  6E20               	movwf	returnHome@mL^0,c
  1767   002504  0ECB               	movlw	low _motorR
  1768   002506  6E21               	movwf	returnHome@mR^0,c
  1769   002508  0E00               	movlw	low _path
  1770   00250A  6E22               	movwf	returnHome@path^0,c
  1771   00250C  0E02               	movlw	high _path
  1772   00250E  6E23               	movwf	(returnHome@path+1)^0,c
  1773   002510  C0BA  F024         	movff	main@path_length,returnHome@pathLength
  1774   002514  C0BB  F025         	movff	main@path_length+1,returnHome@pathLength+1
  1775   002518  ECA1  F01A         	call	_returnHome	;wreg free
  1776   00251C                     
  1777                           ;main.c: 142:                 LATGbits.LATG1 = 0;
  1778   00251C  927F               	bcf	127,1,c	;volatile
  1779   00251E                     l5970:
  1780                           
  1781                           ;main.c: 145:             hue = reading_hue(&colorCurrent);
  1782   00251E  0EDD               	movlw	low _colorCurrent
  1783   002520  6E42               	movwf	reading_hue@cCurr^0,c
  1784   002522  ECA8  F018         	call	_reading_hue	;wreg free
  1785   002526  C042  F0B4         	movff	?_reading_hue,main@hue
  1786   00252A  C043  F0B5         	movff	?_reading_hue+1,main@hue+1
  1787   00252E                     
  1788                           ;main.c: 146:             decision(hue, path_length);
  1789   00252E  C0B4  F047         	movff	main@hue,decision@hue
  1790   002532  C0B5  F048         	movff	main@hue+1,decision@hue+1
  1791   002536  C0BA  F049         	movff	main@path_length,decision@path_length
  1792   00253A  C0BB  F04A         	movff	main@path_length+1,decision@path_length+1
  1793   00253E  ECA5  F012         	call	_decision	;wreg free
  1794   002542  EFBB  F011         	goto	l5922
  1795   002546  EF1D  F000         	goto	start
  1796   00254A                     __end_of_main:
  1797                           	callstack 0
  1798                           
  1799 ;; *************** function _returnHome *****************
  1800 ;; Defined at:
  1801 ;;		line 383 in file "dc_motor.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  mL              1   31[COMRAM] PTR struct DC_motor
  1804 ;;		 -> motorL(9), 
  1805 ;;  mR              1   32[COMRAM] PTR struct DC_motor
  1806 ;;		 -> motorR(9), 
  1807 ;;  path            2   33[COMRAM] PTR PTR struct PathStep
  1808 ;;		 -> path(250), 
  1809 ;;  pathLength      2   35[COMRAM] int 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  time            2   39[COMRAM] unsigned int 
  1812 ;;  action          1   41[COMRAM] unsigned char 
  1813 ;;  i               2   42[COMRAM] int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1823 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;Total ram usage:       13 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 6
  1830 ;; This function calls:
  1831 ;;		_reverseStraight
  1832 ;;		_reverseTurn
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text1
  1839   003542                     __ptext1:
  1840                           	callstack 0
  1841   003542                     _returnHome:
  1842                           	callstack 24
  1843   003542                     
  1844                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     for (int i = pathLe
      +                          ngth; i >= 0; i--) {
  1845   003542  C024  F02B         	movff	returnHome@pathLength,returnHome@i
  1846   003546  C025  F02C         	movff	returnHome@pathLength+1,returnHome@i+1
  1847   00354A                     l5832:
  1848   00354A  BE2C               	btfsc	(returnHome@i+1)^0,7,c
  1849   00354C  EFAC  F01A         	goto	u5260
  1850   003550  EFAA  F01A         	goto	u5261
  1851   003554                     u5261:
  1852   003554  EFAE  F01A         	goto	l5836
  1853   003558                     u5260:
  1854   003558  EFF6  F01A         	goto	l511
  1855   00355C                     l5836:
  1856                           
  1857                           ;dc_motor.c: 387:         char action = path[i]->action;
  1858   00355C  90D8               	bcf	status,0,c
  1859   00355E  342B               	rlcf	returnHome@i^0,w,c
  1860   003560  6ED9               	movwf	fsr2l,c
  1861   003562  342C               	rlcf	(returnHome@i+1)^0,w,c
  1862   003564  6EDA               	movwf	fsr2h,c
  1863   003566  5022               	movf	returnHome@path^0,w,c
  1864   003568  26D9               	addwf	fsr2l,f,c
  1865   00356A  5023               	movf	(returnHome@path+1)^0,w,c
  1866   00356C  22DA               	addwfc	fsr2h,f,c
  1867   00356E  CFDE F026          	movff	postinc2,??_returnHome
  1868   003572  CFDD F027          	movff	postdec2,??_returnHome+1
  1869   003576  C026  FFD9         	movff	??_returnHome,fsr2l
  1870   00357A  C027  FFDA         	movff	??_returnHome+1,fsr2h
  1871   00357E  50DF               	movf	indf2,w,c
  1872   003580  6E2A               	movwf	returnHome@action^0,c
  1873   003582                     
  1874                           ;dc_motor.c: 388:         unsigned int time = path[i]->time;
  1875   003582  90D8               	bcf	status,0,c
  1876   003584  342B               	rlcf	returnHome@i^0,w,c
  1877   003586  6ED9               	movwf	fsr2l,c
  1878   003588  342C               	rlcf	(returnHome@i+1)^0,w,c
  1879   00358A  6EDA               	movwf	fsr2h,c
  1880   00358C  5022               	movf	returnHome@path^0,w,c
  1881   00358E  26D9               	addwf	fsr2l,f,c
  1882   003590  5023               	movf	(returnHome@path+1)^0,w,c
  1883   003592  22DA               	addwfc	fsr2h,f,c
  1884   003594  EE10 F001          	lfsr	1,1
  1885   003598  50DE               	movf	postinc2,w,c
  1886   00359A  26E1               	addwf	fsr1l,f,c
  1887   00359C  50DD               	movf	postdec2,w,c
  1888   00359E  22E2               	addwfc	fsr1h,f,c
  1889   0035A0  CFE6 F028          	movff	postinc1,returnHome@time
  1890   0035A4  CFE5 F029          	movff	postdec1,returnHome@time+1
  1891   0035A8                     
  1892                           ;dc_motor.c: 390:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1893   0035A8  0E46               	movlw	70
  1894   0035AA  182A               	xorwf	returnHome@action^0,w,c
  1895   0035AC  A4D8               	btfss	status,2,c
  1896   0035AE  EFDB  F01A         	goto	u5271
  1897   0035B2  EFDD  F01A         	goto	u5270
  1898   0035B6                     u5271:
  1899   0035B6  EFE9  F01A         	goto	l5844
  1900   0035BA                     u5270:
  1901   0035BA  C020  F019         	movff	returnHome@mL,reverseStraight@mL
  1902   0035BE  C021  F01A         	movff	returnHome@mR,reverseStraight@mR
  1903   0035C2  C028  F01B         	movff	returnHome@time,reverseStraight@time
  1904   0035C6  C029  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  1905   0035CA  EC1D  F019         	call	_reverseStraight	;wreg free
  1906   0035CE  EFF1  F01A         	goto	l5846
  1907   0035D2                     l5844:
  1908   0035D2  C020  F01D         	movff	returnHome@mL,reverseTurn@mL
  1909   0035D6  C021  F01E         	movff	returnHome@mR,reverseTurn@mR
  1910   0035DA  C02A  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  1911   0035DE  EC9F  F01F         	call	_reverseTurn	;wreg free
  1912   0035E2                     l5846:
  1913                           
  1914                           ;dc_motor.c: 394:     }
  1915   0035E2  062B               	decf	returnHome@i^0,f,c
  1916   0035E4  A0D8               	btfss	status,0,c
  1917   0035E6  062C               	decf	(returnHome@i+1)^0,f,c
  1918   0035E8  EFA5  F01A         	goto	l5832
  1919   0035EC                     l511:
  1920   0035EC  0012               	return		;funcret
  1921   0035EE                     __end_of_returnHome:
  1922                           	callstack 0
  1923                           
  1924 ;; *************** function _reverseTurn *****************
  1925 ;; Defined at:
  1926 ;;		line 345 in file "dc_motor.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  1929 ;;		 -> motorL(9), 
  1930 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  1931 ;;		 -> motorR(9), 
  1932 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1944 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;Total ram usage:        3 bytes
  1949 ;; Hardware stack levels used: 1
  1950 ;; Hardware stack levels required when called: 5
  1951 ;; This function calls:
  1952 ;;		_left135
  1953 ;;		_right135
  1954 ;;		_turn180
  1955 ;;		_turnLeft
  1956 ;;		_turnRight
  1957 ;; This function is called by:
  1958 ;;		_returnHome
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text2
  1963   003F3E                     __ptext2:
  1964                           	callstack 0
  1965   003F3E                     _reverseTurn:
  1966                           	callstack 24
  1967   003F3E                     
  1968                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  1969   003F3E  0E52               	movlw	82
  1970   003F40  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  1971   003F42  A4D8               	btfss	status,2,c
  1972   003F44  EFA6  F01F         	goto	u4991
  1973   003F48  EFA8  F01F         	goto	u4990
  1974   003F4C                     u4991:
  1975   003F4C  EFB0  F01F         	goto	l5638
  1976   003F50                     u4990:
  1977   003F50                     
  1978                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  1979   003F50  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  1980   003F54  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  1981   003F58  ECBA  F01C         	call	_turnLeft	;wreg free
  1982                           
  1983                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  1984   003F5C  EFC1  F01F         	goto	l492
  1985   003F60                     l5638:
  1986   003F60  0E4C               	movlw	76
  1987   003F62  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  1988   003F64  A4D8               	btfss	status,2,c
  1989   003F66  EFB7  F01F         	goto	u5001
  1990   003F6A  EFB9  F01F         	goto	u5000
  1991   003F6E                     u5001:
  1992   003F6E  EFC1  F01F         	goto	l491
  1993   003F72                     u5000:
  1994   003F72                     
  1995                           ;dc_motor.c: 349:         turnRight(mL, mR);
  1996   003F72  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  1997   003F76  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  1998   003F7A  EC7B  F01C         	call	_turnRight	;wreg free
  1999                           
  2000                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  2001   003F7E  EFC1  F01F         	goto	l492
  2002   003F82                     l491:
  2003   003F82                     l492:
  2004   003F82  0012               	return		;funcret
  2005   003F84                     __end_of_reverseTurn:
  2006                           	callstack 0
  2007                           
  2008 ;; *************** function _reverseStraight *****************
  2009 ;; Defined at:
  2010 ;;		line 368 in file "dc_motor.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2013 ;;		 -> motorL(9), 
  2014 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2015 ;;		 -> motorR(9), 
  2016 ;;  time            2   26[COMRAM] int 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  delayMs         2   28[COMRAM] int 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2031 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2032 ;;Total ram usage:        6 bytes
  2033 ;; Hardware stack levels used: 1
  2034 ;; Hardware stack levels required when called: 4
  2035 ;; This function calls:
  2036 ;;		_customDelayMs
  2037 ;;		_fullSpeedAhead
  2038 ;;		_stop
  2039 ;; This function is called by:
  2040 ;;		_returnHome
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text3
  2045   00323A                     __ptext3:
  2046                           	callstack 0
  2047   00323A                     _reverseStraight:
  2048                           	callstack 25
  2049   00323A                     
  2050                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2051   00323A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2052   00323C  EF2B  F019         	goto	u5010
  2053   003240  0E7C               	movlw	124
  2054   003242  5C1B               	subwf	reverseStraight@time^0,w,c
  2055   003244  0E15               	movlw	21
  2056   003246  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2057   003248  B0D8               	btfsc	status,0,c
  2058   00324A  EF29  F019         	goto	u5011
  2059   00324E  EF2B  F019         	goto	u5010
  2060   003252                     u5011:
  2061   003252  EF3D  F019         	goto	l5654
  2062   003256                     u5010:
  2063   003256  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2064   003258  EF37  F019         	goto	u5021
  2065   00325C  0ED5               	movlw	213
  2066   00325E  5C1B               	subwf	reverseStraight@time^0,w,c
  2067   003260  0E17               	movlw	23
  2068   003262  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2069   003264  A0D8               	btfss	status,0,c
  2070   003266  EF37  F019         	goto	u5021
  2071   00326A  EF39  F019         	goto	u5020
  2072   00326E                     u5021:
  2073   00326E  EF3D  F019         	goto	l5654
  2074   003272                     u5020:
  2075   003272  0E0B               	movlw	11
  2076   003274  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2077   003276  0EB8               	movlw	184
  2078   003278  6E1D               	movwf	reverseStraight@delayMs^0,c
  2079   00327A                     l5654:
  2080                           
  2081                           ;dc_motor.c: 374:     if (time<3700 && time>4100){delayMs = 2000; }
  2082   00327A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2083   00327C  EF4B  F019         	goto	u5030
  2084   003280  0E74               	movlw	116
  2085   003282  5C1B               	subwf	reverseStraight@time^0,w,c
  2086   003284  0E0E               	movlw	14
  2087   003286  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2088   003288  B0D8               	btfsc	status,0,c
  2089   00328A  EF49  F019         	goto	u5031
  2090   00328E  EF4B  F019         	goto	u5030
  2091   003292                     u5031:
  2092   003292  EF5D  F019         	goto	l5660
  2093   003296                     u5030:
  2094   003296  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2095   003298  EF57  F019         	goto	u5041
  2096   00329C  0E05               	movlw	5
  2097   00329E  5C1B               	subwf	reverseStraight@time^0,w,c
  2098   0032A0  0E10               	movlw	16
  2099   0032A2  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2100   0032A4  A0D8               	btfss	status,0,c
  2101   0032A6  EF57  F019         	goto	u5041
  2102   0032AA  EF59  F019         	goto	u5040
  2103   0032AE                     u5041:
  2104   0032AE  EF5D  F019         	goto	l5660
  2105   0032B2                     u5040:
  2106   0032B2  0E07               	movlw	7
  2107   0032B4  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2108   0032B6  0ED0               	movlw	208
  2109   0032B8  6E1D               	movwf	reverseStraight@delayMs^0,c
  2110   0032BA                     l5660:
  2111                           
  2112                           ;dc_motor.c: 375:     if (time<1700 && time>2100){delayMs = 1000;}
  2113   0032BA  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2114   0032BC  EF6B  F019         	goto	u5050
  2115   0032C0  0EA4               	movlw	164
  2116   0032C2  5C1B               	subwf	reverseStraight@time^0,w,c
  2117   0032C4  0E06               	movlw	6
  2118   0032C6  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2119   0032C8  B0D8               	btfsc	status,0,c
  2120   0032CA  EF69  F019         	goto	u5051
  2121   0032CE  EF6B  F019         	goto	u5050
  2122   0032D2                     u5051:
  2123   0032D2  EF7D  F019         	goto	l5666
  2124   0032D6                     u5050:
  2125   0032D6  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2126   0032D8  EF77  F019         	goto	u5061
  2127   0032DC  0E35               	movlw	53
  2128   0032DE  5C1B               	subwf	reverseStraight@time^0,w,c
  2129   0032E0  0E08               	movlw	8
  2130   0032E2  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2131   0032E4  A0D8               	btfss	status,0,c
  2132   0032E6  EF77  F019         	goto	u5061
  2133   0032EA  EF79  F019         	goto	u5060
  2134   0032EE                     u5061:
  2135   0032EE  EF7D  F019         	goto	l5666
  2136   0032F2                     u5060:
  2137   0032F2  0E03               	movlw	3
  2138   0032F4  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2139   0032F6  0EE8               	movlw	232
  2140   0032F8  6E1D               	movwf	reverseStraight@delayMs^0,c
  2141   0032FA                     l5666:
  2142                           
  2143                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2144   0032FA  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2145   0032FE  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2146   003302  ECF9  F01C         	call	_fullSpeedAhead	;wreg free
  2147   003306                     
  2148                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2149   003306  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2150   00330A  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2151   00330E  EC47  F020         	call	_customDelayMs	;wreg free
  2152   003312                     
  2153                           ;dc_motor.c: 379:     stop(mL, mR);
  2154   003312  C019  F014         	movff	reverseStraight@mL,stop@mL
  2155   003316  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2156   00331A  EC34  F01C         	call	_stop	;wreg free
  2157   00331E  0012               	return		;funcret
  2158   003320                     __end_of_reverseStraight:
  2159                           	callstack 0
  2160                           
  2161 ;; *************** function _fullSpeedAhead *****************
  2162 ;; Defined at:
  2163 ;;		line 144 in file "dc_motor.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2166 ;;		 -> motorL(9), 
  2167 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2168 ;;		 -> motorR(9), 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  power           2   22[COMRAM] int 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;Total ram usage:        5 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; Hardware stack levels required when called: 3
  2187 ;; This function calls:
  2188 ;;		_setMotorPWM
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;;		_reverseStraight
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text4
  2196   0039F2                     __ptext4:
  2197                           	callstack 0
  2198   0039F2                     _fullSpeedAhead:
  2199                           	callstack 25
  2200   0039F2                     
  2201                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2202   0039F2  5014               	movf	fullSpeedAhead@mL^0,w,c
  2203   0039F4  6ED9               	movwf	fsr2l,c
  2204   0039F6  6ADA               	clrf	fsr2h,c
  2205   0039F8  0E01               	movlw	1
  2206   0039FA  26D9               	addwf	fsr2l,f,c
  2207   0039FC  0E01               	movlw	1
  2208   0039FE  6EDF               	movwf	indf2,c
  2209                           
  2210                           ;dc_motor.c: 148:     mR->direction = 1;
  2211   003A00  5015               	movf	fullSpeedAhead@mR^0,w,c
  2212   003A02  6ED9               	movwf	fsr2l,c
  2213   003A04  6ADA               	clrf	fsr2h,c
  2214   003A06  0E01               	movlw	1
  2215   003A08  26D9               	addwf	fsr2l,f,c
  2216   003A0A  0E01               	movlw	1
  2217   003A0C  6EDF               	movwf	indf2,c
  2218   003A0E                     
  2219                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2220   003A0E  0E00               	movlw	0
  2221   003A10  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2222   003A12  0E00               	movlw	0
  2223   003A14  6E17               	movwf	fullSpeedAhead@power^0,c
  2224   003A16                     l5488:
  2225                           
  2226                           ;dc_motor.c: 151:         mL->power = power;
  2227   003A16  5014               	movf	fullSpeedAhead@mL^0,w,c
  2228   003A18  6ED9               	movwf	fsr2l,c
  2229   003A1A  6ADA               	clrf	fsr2h,c
  2230   003A1C  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2231                           
  2232                           ;dc_motor.c: 152:         mR->power = power;
  2233   003A20  5015               	movf	fullSpeedAhead@mR^0,w,c
  2234   003A22  6ED9               	movwf	fsr2l,c
  2235   003A24  6ADA               	clrf	fsr2h,c
  2236   003A26  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2237   003A2A                     
  2238                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2239   003A2A  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2240   003A2E  ECF9  F016         	call	_setMotorPWM	;wreg free
  2241   003A32                     
  2242                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2243   003A32  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2244   003A36  ECF9  F016         	call	_setMotorPWM	;wreg free
  2245   003A3A                     
  2246                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2247   003A3A  0E0B               	movlw	11
  2248   003A3C  6E16               	movwf	??_fullSpeedAhead^0,c
  2249   003A3E  0E62               	movlw	98
  2250   003A40                     u5357:
  2251   003A40  2EE8               	decfsz	wreg,f,c
  2252   003A42  D7FE               	bra	u5357
  2253   003A44  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2254   003A46  D7FC               	bra	u5357
  2255   003A48  D000               	nop2	
  2256   003A4A                     
  2257                           ;dc_motor.c: 160:     }
  2258   003A4A  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2259   003A4C  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2260   003A4E  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2261   003A50  EF33  F01D         	goto	u4971
  2262   003A54  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2263   003A56  E109               	bnz	u4970
  2264   003A58  0E33               	movlw	51
  2265   003A5A  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2266   003A5C  A0D8               	btfss	status,0,c
  2267   003A5E  EF33  F01D         	goto	u4971
  2268   003A62  EF35  F01D         	goto	u4970
  2269   003A66                     u4971:
  2270   003A66  EF0B  F01D         	goto	l5488
  2271   003A6A                     u4970:
  2272   003A6A  0012               	return		;funcret
  2273   003A6C                     __end_of_fullSpeedAhead:
  2274                           	callstack 0
  2275                           
  2276 ;; *************** function _customDelayMs *****************
  2277 ;; Defined at:
  2278 ;;		line 361 in file "dc_motor.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  i               2    4[COMRAM] unsigned int 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, status,2, status,0
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;Total ram usage:        5 bytes
  2297 ;; Hardware stack levels used: 1
  2298 ;; Hardware stack levels required when called: 1
  2299 ;; This function calls:
  2300 ;;		Nothing
  2301 ;; This function is called by:
  2302 ;;		_reverseStraight
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text5
  2307   00408E                     __ptext5:
  2308                           	callstack 0
  2309   00408E                     _customDelayMs:
  2310                           	callstack 27
  2311   00408E                     
  2312                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2313   00408E  0E00               	movlw	0
  2314   004090  6E06               	movwf	(customDelayMs@i+1)^0,c
  2315   004092  0E00               	movlw	0
  2316   004094  6E05               	movwf	customDelayMs@i^0,c
  2317   004096  EF57  F020         	goto	l495
  2318   00409A                     l3988:
  2319                           
  2320                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2321   00409A  0E15               	movlw	21
  2322   00409C  6E04               	movwf	??_customDelayMs^0,c
  2323   00409E  0EC6               	movlw	198
  2324   0040A0                     u5367:
  2325   0040A0  2EE8               	decfsz	wreg,f,c
  2326   0040A2  D7FE               	bra	u5367
  2327   0040A4  2E04               	decfsz	??_customDelayMs^0,f,c
  2328   0040A6  D7FC               	bra	u5367
  2329   0040A8  D000               	nop2	
  2330   0040AA                     
  2331                           ;dc_motor.c: 364:     }
  2332   0040AA  4A05               	infsnz	customDelayMs@i^0,f,c
  2333   0040AC  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2334   0040AE                     l495:
  2335   0040AE  5002               	movf	customDelayMs@milliseconds^0,w,c
  2336   0040B0  5C05               	subwf	customDelayMs@i^0,w,c
  2337   0040B2  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2338   0040B4  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2339   0040B6  A0D8               	btfss	status,0,c
  2340   0040B8  EF60  F020         	goto	u3221
  2341   0040BC  EF62  F020         	goto	u3220
  2342   0040C0                     u3221:
  2343   0040C0  EF4D  F020         	goto	l3988
  2344   0040C4                     u3220:
  2345   0040C4  0012               	return		;funcret
  2346   0040C6                     __end_of_customDelayMs:
  2347                           	callstack 0
  2348                           
  2349 ;; *************** function _reading_hue *****************
  2350 ;; Defined at:
  2351 ;;		line 136 in file "color.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2354 ;;		 -> colorCurrent(8), 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  led_state      50    0        unsigned char [50]
  2357 ;;  hue             2   69[COMRAM] unsigned int 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  2   65[COMRAM] unsigned int 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2371 ;;Total ram usage:        6 bytes
  2372 ;; Hardware stack levels used: 1
  2373 ;; Hardware stack levels required when called: 4
  2374 ;; This function calls:
  2375 ;;		_color_read_Blue
  2376 ;;		_color_read_Clear
  2377 ;;		_color_read_Green
  2378 ;;		_color_read_Red
  2379 ;;		_convert_rgb2hue
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text6
  2386   003150                     __ptext6:
  2387                           	callstack 0
  2388   003150                     _reading_hue:
  2389                           	callstack 26
  2390   003150                     
  2391                           ;color.c: 136: unsigned int reading_hue(colors *cCurr);color.c: 137: {;color.c: 138:    
      +                           unsigned int hue;;color.c: 140:     char led_state[50];;color.c: 145:     LATGbits.LATG
      +                          0 = 1;
  2392   003150  807F               	bsf	127,0,c	;volatile
  2393                           
  2394                           ;color.c: 146:     LATEbits.LATE7 = 0;
  2395   003152  9E7D               	bcf	125,7,c	;volatile
  2396                           
  2397                           ;color.c: 147:     LATAbits.LATA3 = 0;
  2398   003154  9679               	bcf	121,3,c	;volatile
  2399   003156                     
  2400                           ;color.c: 148:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2401   003156  0E29               	movlw	41
  2402   003158  6E45               	movwf	(??_reading_hue+1)^0,c
  2403   00315A  0E96               	movlw	150
  2404   00315C  6E44               	movwf	??_reading_hue^0,c
  2405   00315E  0E7F               	movlw	127
  2406   003160                     u5377:
  2407   003160  2EE8               	decfsz	wreg,f,c
  2408   003162  D7FE               	bra	u5377
  2409   003164  2E44               	decfsz	??_reading_hue^0,f,c
  2410   003166  D7FC               	bra	u5377
  2411   003168  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2412   00316A  D7FA               	bra	u5377
  2413   00316C  0000               	nop	
  2414   00316E                     
  2415                           ;color.c: 149:     (cCurr->red)= color_read_Red();
  2416   00316E  ECE0  F01D         	call	_color_read_Red	;wreg free
  2417   003172  5042               	movf	reading_hue@cCurr^0,w,c
  2418   003174  6ED9               	movwf	fsr2l,c
  2419   003176  6ADA               	clrf	fsr2h,c
  2420   003178  C006  FFDE         	movff	?_color_read_Red,postinc2
  2421   00317C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2422   003180                     
  2423                           ;color.c: 154:     LATGbits.LATG0 = 0;
  2424   003180  907F               	bcf	127,0,c	;volatile
  2425   003182                     
  2426                           ;color.c: 155:     LATEbits.LATE7 = 1;
  2427   003182  8E7D               	bsf	125,7,c	;volatile
  2428   003184                     
  2429                           ;color.c: 156:     LATAbits.LATA3 = 0;
  2430   003184  9679               	bcf	121,3,c	;volatile
  2431   003186                     
  2432                           ;color.c: 157:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2433   003186  0E29               	movlw	41
  2434   003188  6E45               	movwf	(??_reading_hue+1)^0,c
  2435   00318A  0E96               	movlw	150
  2436   00318C  6E44               	movwf	??_reading_hue^0,c
  2437   00318E  0E7F               	movlw	127
  2438   003190                     u5387:
  2439   003190  2EE8               	decfsz	wreg,f,c
  2440   003192  D7FE               	bra	u5387
  2441   003194  2E44               	decfsz	??_reading_hue^0,f,c
  2442   003196  D7FC               	bra	u5387
  2443   003198  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2444   00319A  D7FA               	bra	u5387
  2445   00319C  0000               	nop	
  2446                           
  2447                           ;color.c: 158:     (cCurr->green) = color_read_Green();
  2448   00319E  EC08  F01E         	call	_color_read_Green	;wreg free
  2449   0031A2  5042               	movf	reading_hue@cCurr^0,w,c
  2450   0031A4  6ED9               	movwf	fsr2l,c
  2451   0031A6  6ADA               	clrf	fsr2h,c
  2452   0031A8  0E02               	movlw	2
  2453   0031AA  26D9               	addwf	fsr2l,f,c
  2454   0031AC  C006  FFDE         	movff	?_color_read_Green,postinc2
  2455   0031B0  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2456   0031B4                     
  2457                           ;color.c: 164:     LATGbits.LATG0 = 0;
  2458   0031B4  907F               	bcf	127,0,c	;volatile
  2459   0031B6                     
  2460                           ;color.c: 165:     LATEbits.LATE7 = 0;
  2461   0031B6  9E7D               	bcf	125,7,c	;volatile
  2462   0031B8                     
  2463                           ;color.c: 166:     LATAbits.LATA3 = 1;
  2464   0031B8  8679               	bsf	121,3,c	;volatile
  2465   0031BA                     
  2466                           ;color.c: 167:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2467   0031BA  0E29               	movlw	41
  2468   0031BC  6E45               	movwf	(??_reading_hue+1)^0,c
  2469   0031BE  0E96               	movlw	150
  2470   0031C0  6E44               	movwf	??_reading_hue^0,c
  2471   0031C2  0E7F               	movlw	127
  2472   0031C4                     u5397:
  2473   0031C4  2EE8               	decfsz	wreg,f,c
  2474   0031C6  D7FE               	bra	u5397
  2475   0031C8  2E44               	decfsz	??_reading_hue^0,f,c
  2476   0031CA  D7FC               	bra	u5397
  2477   0031CC  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2478   0031CE  D7FA               	bra	u5397
  2479   0031D0  0000               	nop	
  2480   0031D2                     
  2481                           ;color.c: 168:     (cCurr->blue) = color_read_Blue();
  2482   0031D2  EC58  F01E         	call	_color_read_Blue	;wreg free
  2483   0031D6  5042               	movf	reading_hue@cCurr^0,w,c
  2484   0031D8  6ED9               	movwf	fsr2l,c
  2485   0031DA  6ADA               	clrf	fsr2h,c
  2486   0031DC  0E04               	movlw	4
  2487   0031DE  26D9               	addwf	fsr2l,f,c
  2488   0031E0  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2489   0031E4  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2490   0031E8                     
  2491                           ;color.c: 173:     LATGbits.LATG0 = 1;
  2492   0031E8  807F               	bsf	127,0,c	;volatile
  2493   0031EA                     
  2494                           ;color.c: 174:     LATEbits.LATE7 = 1;
  2495   0031EA  8E7D               	bsf	125,7,c	;volatile
  2496   0031EC                     
  2497                           ;color.c: 175:     LATAbits.LATA3 = 1;
  2498   0031EC  8679               	bsf	121,3,c	;volatile
  2499                           
  2500                           ;color.c: 176:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2501   0031EE  0E29               	movlw	41
  2502   0031F0  6E45               	movwf	(??_reading_hue+1)^0,c
  2503   0031F2  0E96               	movlw	150
  2504   0031F4  6E44               	movwf	??_reading_hue^0,c
  2505   0031F6  0E7F               	movlw	127
  2506   0031F8                     u5407:
  2507   0031F8  2EE8               	decfsz	wreg,f,c
  2508   0031FA  D7FE               	bra	u5407
  2509   0031FC  2E44               	decfsz	??_reading_hue^0,f,c
  2510   0031FE  D7FC               	bra	u5407
  2511   003200  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2512   003202  D7FA               	bra	u5407
  2513   003204  0000               	nop	
  2514   003206                     
  2515                           ;color.c: 177:     (cCurr->clear) = color_read_Clear();
  2516   003206  EC30  F01E         	call	_color_read_Clear	;wreg free
  2517   00320A  5042               	movf	reading_hue@cCurr^0,w,c
  2518   00320C  6ED9               	movwf	fsr2l,c
  2519   00320E  6ADA               	clrf	fsr2h,c
  2520   003210  0E06               	movlw	6
  2521   003212  26D9               	addwf	fsr2l,f,c
  2522   003214  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2523   003218  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2524   00321C                     
  2525                           ;color.c: 184:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2526   00321C  0EE5               	movlw	low _colorCalibration
  2527   00321E  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2528   003220  0EDD               	movlw	low _colorCurrent
  2529   003222  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2530   003224  EC58  F007         	call	_convert_rgb2hue	;wreg free
  2531   003228  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2532   00322C  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2533   003230                     
  2534                           ;color.c: 191:     return hue;
  2535   003230  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2536   003234  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2537   003238  0012               	return		;funcret
  2538   00323A                     __end_of_reading_hue:
  2539                           	callstack 0
  2540                           
  2541 ;; *************** function _convert_rgb2hue *****************
  2542 ;; Defined at:
  2543 ;;		line 274 in file "color.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  cMax            1   61[COMRAM] PTR struct colors
  2546 ;;		 -> colorCalibration(8), 
  2547 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2548 ;;		 -> colorCurrent(8), 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  c_char         20    0        unsigned char [20]
  2551 ;;  b               4   72[BANK0 ] float 
  2552 ;;  g               4   68[BANK0 ] float 
  2553 ;;  r               4   64[BANK0 ] float 
  2554 ;;  hue             4   60[BANK0 ] float 
  2555 ;;  max             4   56[BANK0 ] float 
  2556 ;;  diff            4   52[BANK0 ] float 
  2557 ;;  min             4   48[BANK0 ] float 
  2558 ;;  clearmax        4   28[BANK0 ] float 
  2559 ;;  clearcurrent    4   24[BANK0 ] float 
  2560 ;;  bluemax         4   20[BANK0 ] float 
  2561 ;;  bluecurrent     4   16[BANK0 ] float 
  2562 ;;  greenmax        4   12[BANK0 ] float 
  2563 ;;  greencurrent    4    8[BANK0 ] float 
  2564 ;;  redmax          4    4[BANK0 ] float 
  2565 ;;  redcurrent      4    0[BANK0 ] float 
  2566 ;;  c               4    0        float 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  2   61[COMRAM] unsigned int 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2576 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2579 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2580 ;;Total ram usage:       80 bytes
  2581 ;; Hardware stack levels used: 1
  2582 ;; Hardware stack levels required when called: 3
  2583 ;; This function calls:
  2584 ;;		___fladd
  2585 ;;		___fldiv
  2586 ;;		___fleq
  2587 ;;		___flge
  2588 ;;		___flmul
  2589 ;;		___flsub
  2590 ;;		___fltol
  2591 ;;		___xxtofl
  2592 ;; This function is called by:
  2593 ;;		_reading_hue
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text7
  2598   000EB0                     __ptext7:
  2599                           	callstack 0
  2600   000EB0                     _convert_rgb2hue:
  2601                           	callstack 26
  2602   000EB0                     
  2603                           ;color.c: 274: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 275: {;color.c: 276:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 277:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2604   000EB0  0E00               	movlw	0
  2605   000EB2  0100               	movlb	0	; () banked
  2606   000EB4  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2607   000EB6  0E00               	movlw	0
  2608   000EB8  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2609   000EBA  0E00               	movlw	0
  2610   000EBC  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2611   000EBE  0E00               	movlw	0
  2612   000EC0  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2613   000EC2                     
  2614                           ; BSR set to: 0
  2615                           ;color.c: 279:     redcurrent = cCurr->red;
  2616   000EC2  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2617   000EC4  6ED9               	movwf	fsr2l,c
  2618   000EC6  6ADA               	clrf	fsr2h,c
  2619   000EC8  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2620   000ECC  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2621   000ED0  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2622   000ED4  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2623   000ED8  6A04               	clrf	(___xxtofl@val+2)^0,c
  2624   000EDA  6A05               	clrf	(___xxtofl@val+3)^0,c
  2625   000EDC  0E00               	movlw	0
  2626   000EDE  EC9F  F014         	call	___xxtofl
  2627   000EE2  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2628   000EE6  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2629   000EEA  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2630   000EEE  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2631   000EF2                     
  2632                           ;color.c: 280:     redmax = cMax->red;
  2633   000EF2  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2634   000EF4  6ED9               	movwf	fsr2l,c
  2635   000EF6  6ADA               	clrf	fsr2h,c
  2636   000EF8  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2637   000EFC  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2638   000F00  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2639   000F04  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2640   000F08  6A04               	clrf	(___xxtofl@val+2)^0,c
  2641   000F0A  6A05               	clrf	(___xxtofl@val+3)^0,c
  2642   000F0C  0E00               	movlw	0
  2643   000F0E  EC9F  F014         	call	___xxtofl
  2644   000F12  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2645   000F16  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2646   000F1A  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2647   000F1E  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2648   000F22                     
  2649                           ;color.c: 281:     greencurrent = cCurr->green;
  2650   000F22  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2651   000F24  6ED9               	movwf	fsr2l,c
  2652   000F26  6ADA               	clrf	fsr2h,c
  2653   000F28  0E02               	movlw	2
  2654   000F2A  26D9               	addwf	fsr2l,f,c
  2655   000F2C  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2656   000F30  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2657   000F34  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2658   000F38  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2659   000F3C  6A04               	clrf	(___xxtofl@val+2)^0,c
  2660   000F3E  6A05               	clrf	(___xxtofl@val+3)^0,c
  2661   000F40  0E00               	movlw	0
  2662   000F42  EC9F  F014         	call	___xxtofl
  2663   000F46  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2664   000F4A  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2665   000F4E  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2666   000F52  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2667   000F56                     
  2668                           ;color.c: 282:     greenmax = cMax->green;
  2669   000F56  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2670   000F58  6ED9               	movwf	fsr2l,c
  2671   000F5A  6ADA               	clrf	fsr2h,c
  2672   000F5C  0E02               	movlw	2
  2673   000F5E  26D9               	addwf	fsr2l,f,c
  2674   000F60  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2675   000F64  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2676   000F68  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2677   000F6C  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2678   000F70  6A04               	clrf	(___xxtofl@val+2)^0,c
  2679   000F72  6A05               	clrf	(___xxtofl@val+3)^0,c
  2680   000F74  0E00               	movlw	0
  2681   000F76  EC9F  F014         	call	___xxtofl
  2682   000F7A  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2683   000F7E  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2684   000F82  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2685   000F86  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2686   000F8A                     
  2687                           ;color.c: 283:     bluecurrent = cCurr->blue;
  2688   000F8A  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2689   000F8C  6ED9               	movwf	fsr2l,c
  2690   000F8E  6ADA               	clrf	fsr2h,c
  2691   000F90  0E04               	movlw	4
  2692   000F92  26D9               	addwf	fsr2l,f,c
  2693   000F94  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2694   000F98  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2695   000F9C  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2696   000FA0  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2697   000FA4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2698   000FA6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2699   000FA8  0E00               	movlw	0
  2700   000FAA  EC9F  F014         	call	___xxtofl
  2701   000FAE  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2702   000FB2  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2703   000FB6  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2704   000FBA  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2705   000FBE                     
  2706                           ;color.c: 284:     bluemax = cMax->blue;
  2707   000FBE  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2708   000FC0  6ED9               	movwf	fsr2l,c
  2709   000FC2  6ADA               	clrf	fsr2h,c
  2710   000FC4  0E04               	movlw	4
  2711   000FC6  26D9               	addwf	fsr2l,f,c
  2712   000FC8  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2713   000FCC  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2714   000FD0  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2715   000FD4  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2716   000FD8  6A04               	clrf	(___xxtofl@val+2)^0,c
  2717   000FDA  6A05               	clrf	(___xxtofl@val+3)^0,c
  2718   000FDC  0E00               	movlw	0
  2719   000FDE  EC9F  F014         	call	___xxtofl
  2720   000FE2  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2721   000FE6  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2722   000FEA  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2723   000FEE  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2724   000FF2                     
  2725                           ;color.c: 285:     clearcurrent = cCurr->clear;
  2726   000FF2  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2727   000FF4  6ED9               	movwf	fsr2l,c
  2728   000FF6  6ADA               	clrf	fsr2h,c
  2729   000FF8  0E06               	movlw	6
  2730   000FFA  26D9               	addwf	fsr2l,f,c
  2731   000FFC  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2732   001000  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2733   001004  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2734   001008  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2735   00100C  6A04               	clrf	(___xxtofl@val+2)^0,c
  2736   00100E  6A05               	clrf	(___xxtofl@val+3)^0,c
  2737   001010  0E00               	movlw	0
  2738   001012  EC9F  F014         	call	___xxtofl
  2739   001016  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2740   00101A  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2741   00101E  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2742   001022  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2743   001026                     
  2744                           ;color.c: 286:     clearmax = cMax->clear;
  2745   001026  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2746   001028  6ED9               	movwf	fsr2l,c
  2747   00102A  6ADA               	clrf	fsr2h,c
  2748   00102C  0E06               	movlw	6
  2749   00102E  26D9               	addwf	fsr2l,f,c
  2750   001030  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2751   001034  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2752   001038  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2753   00103C  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2754   001040  6A04               	clrf	(___xxtofl@val+2)^0,c
  2755   001042  6A05               	clrf	(___xxtofl@val+3)^0,c
  2756   001044  0E00               	movlw	0
  2757   001046  EC9F  F014         	call	___xxtofl
  2758   00104A  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2759   00104E  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2760   001052  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2761   001056  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2762   00105A  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2763   00105E  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2764   001062  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2765   001066  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2766   00106A  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2767   00106E  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2768   001072  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2769   001076  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2770   00107A  EC96  F00F         	call	___fldiv	;wreg free
  2771   00107E                     
  2772                           ;color.c: 289:     char c_char[20];;color.c: 295:     r = redcurrent/redmax;
  2773   00107E  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2774   001082  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2775   001086  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2776   00108A  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2777   00108E  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  2778   001092  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2779   001096  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2780   00109A  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2781   00109E  EC96  F00F         	call	___fldiv	;wreg free
  2782   0010A2  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2783   0010A6  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2784   0010AA  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2785   0010AE  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2786   0010B2                     
  2787                           ;color.c: 296:     g = greencurrent/greenmax;
  2788   0010B2  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2789   0010B6  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2790   0010BA  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2791   0010BE  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2792   0010C2  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2793   0010C6  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2794   0010CA  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2795   0010CE  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2796   0010D2  EC96  F00F         	call	___fldiv	;wreg free
  2797   0010D6  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2798   0010DA  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2799   0010DE  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2800   0010E2  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2801   0010E6                     
  2802                           ;color.c: 297:     b = bluecurrent/bluemax;
  2803   0010E6  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2804   0010EA  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2805   0010EE  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2806   0010F2  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2807   0010F6  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2808   0010FA  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2809   0010FE  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2810   001102  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2811   001106  EC96  F00F         	call	___fldiv	;wreg free
  2812   00110A  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2813   00110E  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2814   001112  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2815   001116  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2816   00111A                     
  2817                           ;color.c: 299:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2818   00111A  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2819   00111E  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2820   001122  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2821   001126  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2822   00112A  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2823   00112E  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2824   001132  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2825   001136  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2826   00113A  EC26  F018         	call	___flge	;wreg free
  2827   00113E  A0D8               	btfss	status,0,c
  2828   001140  EFA4  F008         	goto	u3901
  2829   001144  EFA6  F008         	goto	u3900
  2830   001148                     u3901:
  2831   001148  EFDB  F008         	goto	l4464
  2832   00114C                     u3900:
  2833   00114C  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2834   001150  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2835   001154  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2836   001158  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2837   00115C  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2838   001160  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2839   001164  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2840   001168  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2841   00116C  EC26  F018         	call	___flge	;wreg free
  2842   001170  A0D8               	btfss	status,0,c
  2843   001172  EFBD  F008         	goto	u3911
  2844   001176  EFBF  F008         	goto	u3910
  2845   00117A                     u3911:
  2846   00117A  EFC9  F008         	goto	l119
  2847   00117E                     u3910:
  2848   00117E  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  2849   001182  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  2850   001186  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  2851   00118A  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  2852   00118E  EFD1  F008         	goto	l121
  2853   001192                     l119:
  2854   001192  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$429
  2855   001196  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$429+1
  2856   00119A  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$429+2
  2857   00119E  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$429+3
  2858   0011A2                     l121:
  2859   0011A2  C080  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  2860   0011A6  C081  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  2861   0011AA  C082  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  2862   0011AE  C083  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  2863   0011B2  EF0E  F009         	goto	l4468
  2864   0011B6                     l4464:
  2865   0011B6  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2866   0011BA  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2867   0011BE  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2868   0011C2  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2869   0011C6  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2870   0011CA  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2871   0011CE  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2872   0011D2  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2873   0011D6  EC26  F018         	call	___flge	;wreg free
  2874   0011DA  A0D8               	btfss	status,0,c
  2875   0011DC  EFF2  F008         	goto	u3921
  2876   0011E0  EFF4  F008         	goto	u3920
  2877   0011E4                     u3921:
  2878   0011E4  EFFE  F008         	goto	l123
  2879   0011E8                     u3920:
  2880   0011E8  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  2881   0011EC  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  2882   0011F0  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  2883   0011F4  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  2884   0011F8  EF06  F009         	goto	l125
  2885   0011FC                     l123:
  2886   0011FC  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$430
  2887   001200  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$430+1
  2888   001204  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$430+2
  2889   001208  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$430+3
  2890   00120C                     l125:
  2891   00120C  C084  F090         	movff	_convert_rgb2hue$430,convert_rgb2hue@min
  2892   001210  C085  F091         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@min+1
  2893   001214  C086  F092         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@min+2
  2894   001218  C087  F093         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@min+3
  2895   00121C                     l4468:
  2896                           
  2897                           ;color.c: 300:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2898   00121C  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2899   001220  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2900   001224  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2901   001228  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2902   00122C  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  2903   001230  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2904   001234  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2905   001238  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2906   00123C  EC26  F018         	call	___flge	;wreg free
  2907   001240  A0D8               	btfss	status,0,c
  2908   001242  EF25  F009         	goto	u3931
  2909   001246  EF27  F009         	goto	u3930
  2910   00124A                     u3931:
  2911   00124A  EF5C  F009         	goto	l4474
  2912   00124E                     u3930:
  2913   00124E  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  2914   001252  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2915   001256  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2916   00125A  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2917   00125E  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2918   001262  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2919   001266  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2920   00126A  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2921   00126E  EC26  F018         	call	___flge	;wreg free
  2922   001272  A0D8               	btfss	status,0,c
  2923   001274  EF3E  F009         	goto	u3941
  2924   001278  EF40  F009         	goto	u3940
  2925   00127C                     u3941:
  2926   00127C  EF4A  F009         	goto	l131
  2927   001280                     u3940:
  2928   001280  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  2929   001284  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  2930   001288  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  2931   00128C  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  2932   001290  EF52  F009         	goto	l133
  2933   001294                     l131:
  2934   001294  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$431
  2935   001298  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$431+1
  2936   00129C  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$431+2
  2937   0012A0  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$431+3
  2938   0012A4                     l133:
  2939   0012A4  C088  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  2940   0012A8  C089  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  2941   0012AC  C08A  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  2942   0012B0  C08B  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  2943   0012B4  EF8F  F009         	goto	l4478
  2944   0012B8                     l4474:
  2945   0012B8  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  2946   0012BC  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2947   0012C0  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2948   0012C4  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2949   0012C8  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  2950   0012CC  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2951   0012D0  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2952   0012D4  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2953   0012D8  EC26  F018         	call	___flge	;wreg free
  2954   0012DC  A0D8               	btfss	status,0,c
  2955   0012DE  EF73  F009         	goto	u3951
  2956   0012E2  EF75  F009         	goto	u3950
  2957   0012E6                     u3951:
  2958   0012E6  EF7F  F009         	goto	l135
  2959   0012EA                     u3950:
  2960   0012EA  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  2961   0012EE  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  2962   0012F2  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  2963   0012F6  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  2964   0012FA  EF87  F009         	goto	l137
  2965   0012FE                     l135:
  2966   0012FE  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$432
  2967   001302  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$432+1
  2968   001306  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$432+2
  2969   00130A  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$432+3
  2970   00130E                     l137:
  2971   00130E  C08C  F098         	movff	_convert_rgb2hue$432,convert_rgb2hue@max
  2972   001312  C08D  F099         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@max+1
  2973   001316  C08E  F09A         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@max+2
  2974   00131A  C08F  F09B         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@max+3
  2975   00131E                     l4478:
  2976                           
  2977                           ;color.c: 301:     diff = max - min;
  2978   00131E  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  2979   001322  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  2980   001326  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  2981   00132A  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  2982   00132E  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  2983   001332  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  2984   001336  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  2985   00133A  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  2986   00133E  ECC2  F01F         	call	___flsub	;wreg free
  2987   001342  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  2988   001346  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  2989   00134A  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  2990   00134E  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  2991                           
  2992                           ;color.c: 302:     if (max == min) {
  2993   001352  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  2994   001356  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2995   00135A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2996   00135E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2997   001362  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  2998   001366  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  2999   00136A  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3000   00136E  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3001   001372  ECF7  F01A         	call	___fleq	;wreg free
  3002   001376  A0D8               	btfss	status,0,c
  3003   001378  EFC0  F009         	goto	u3961
  3004   00137C  EFC2  F009         	goto	u3960
  3005   001380                     u3961:
  3006   001380  EFCD  F009         	goto	l4482
  3007   001384                     u3960:
  3008   001384                     
  3009                           ;color.c: 303:         hue = 0;
  3010   001384  0E00               	movlw	0
  3011   001386  0100               	movlb	0	; () banked
  3012   001388  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3013   00138A  0E00               	movlw	0
  3014   00138C  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3015   00138E  0E00               	movlw	0
  3016   001390  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3017   001392  0E00               	movlw	0
  3018   001394  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3019                           
  3020                           ;color.c: 304:     } else if (max == r){
  3021   001396  EFD6  F00A         	goto	l4494
  3022   00139A                     l4482:
  3023   00139A  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3024   00139E  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3025   0013A2  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3026   0013A6  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3027   0013AA  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3028   0013AE  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3029   0013B2  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3030   0013B6  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3031   0013BA  ECF7  F01A         	call	___fleq	;wreg free
  3032   0013BE  A0D8               	btfss	status,0,c
  3033   0013C0  EFE4  F009         	goto	u3971
  3034   0013C4  EFE6  F009         	goto	u3970
  3035   0013C8                     u3971:
  3036   0013C8  EF14  F00A         	goto	l4486
  3037   0013CC                     u3970:
  3038   0013CC                     
  3039                           ;color.c: 305:         hue = (b - g) / diff;
  3040   0013CC  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3041   0013D0  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3042   0013D4  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3043   0013D8  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3044   0013DC  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3045   0013E0  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3046   0013E4  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3047   0013E8  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3048   0013EC  ECC2  F01F         	call	___flsub	;wreg free
  3049   0013F0  C012  F01B         	movff	?___flsub,___fldiv@b
  3050   0013F4  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3051   0013F8  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3052   0013FC  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3053   001400  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3054   001404  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3055   001408  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3056   00140C  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3057   001410  EC96  F00F         	call	___fldiv	;wreg free
  3058   001414  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3059   001418  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3060   00141C  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3061   001420  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3062                           
  3063                           ;color.c: 306:     } else if (max == g){
  3064   001424  EFD6  F00A         	goto	l4494
  3065   001428                     l4486:
  3066   001428  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3067   00142C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3068   001430  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3069   001434  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3070   001438  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3071   00143C  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3072   001440  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3073   001444  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3074   001448  ECF7  F01A         	call	___fleq	;wreg free
  3075   00144C  A0D8               	btfss	status,0,c
  3076   00144E  EF2B  F00A         	goto	u3981
  3077   001452  EF2D  F00A         	goto	u3980
  3078   001456                     u3981:
  3079   001456  EF75  F00A         	goto	l4490
  3080   00145A                     u3980:
  3081   00145A                     
  3082                           ;color.c: 307:         hue = (b - r) / diff;
  3083   00145A  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3084   00145E  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3085   001462  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3086   001466  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3087   00146A  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3088   00146E  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3089   001472  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3090   001476  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3091   00147A  ECC2  F01F         	call	___flsub	;wreg free
  3092   00147E  C012  F01B         	movff	?___flsub,___fldiv@b
  3093   001482  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3094   001486  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3095   00148A  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3096   00148E  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3097   001492  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3098   001496  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3099   00149A  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3100   00149E  EC96  F00F         	call	___fldiv	;wreg free
  3101   0014A2  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3102   0014A6  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3103   0014AA  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3104   0014AE  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3105                           
  3106                           ;color.c: 308:         hue = hue + 2;
  3107   0014B2  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3108   0014B6  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3109   0014BA  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3110   0014BE  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3111   0014C2  0E00               	movlw	0
  3112   0014C4  6E06               	movwf	___fladd@a^0,c
  3113   0014C6  0E00               	movlw	0
  3114   0014C8  6E07               	movwf	(___fladd@a+1)^0,c
  3115   0014CA  0E00               	movlw	0
  3116   0014CC  6E08               	movwf	(___fladd@a+2)^0,c
  3117   0014CE  0E40               	movlw	64
  3118   0014D0  6E09               	movwf	(___fladd@a+3)^0,c
  3119   0014D2  EC21  F00B         	call	___fladd	;wreg free
  3120   0014D6  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3121   0014DA  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3122   0014DE  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3123   0014E2  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3124                           
  3125                           ;color.c: 309:     } else if (max == b){
  3126   0014E6  EFD6  F00A         	goto	l4494
  3127   0014EA                     l4490:
  3128   0014EA  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3129   0014EE  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3130   0014F2  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3131   0014F6  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3132   0014FA  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3133   0014FE  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3134   001502  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3135   001506  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3136   00150A  ECF7  F01A         	call	___fleq	;wreg free
  3137   00150E  A0D8               	btfss	status,0,c
  3138   001510  EF8C  F00A         	goto	u3991
  3139   001514  EF8E  F00A         	goto	u3990
  3140   001518                     u3991:
  3141   001518  EFD6  F00A         	goto	l141
  3142   00151C                     u3990:
  3143   00151C                     
  3144                           ;color.c: 310:         hue = (r - g) / diff;
  3145   00151C  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3146   001520  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3147   001524  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3148   001528  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3149   00152C  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3150   001530  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3151   001534  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3152   001538  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3153   00153C  ECC2  F01F         	call	___flsub	;wreg free
  3154   001540  C012  F01B         	movff	?___flsub,___fldiv@b
  3155   001544  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3156   001548  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3157   00154C  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3158   001550  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3159   001554  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3160   001558  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3161   00155C  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3162   001560  EC96  F00F         	call	___fldiv	;wreg free
  3163   001564  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3164   001568  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3165   00156C  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3166   001570  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3167                           
  3168                           ;color.c: 311:         hue = hue + 4;
  3169   001574  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3170   001578  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3171   00157C  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3172   001580  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3173   001584  0E00               	movlw	0
  3174   001586  6E06               	movwf	___fladd@a^0,c
  3175   001588  0E00               	movlw	0
  3176   00158A  6E07               	movwf	(___fladd@a+1)^0,c
  3177   00158C  0E80               	movlw	128
  3178   00158E  6E08               	movwf	(___fladd@a+2)^0,c
  3179   001590  0E40               	movlw	64
  3180   001592  6E09               	movwf	(___fladd@a+3)^0,c
  3181   001594  EC21  F00B         	call	___fladd	;wreg free
  3182   001598  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3183   00159C  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3184   0015A0  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3185   0015A4  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3186   0015A8  EFD6  F00A         	goto	l4494
  3187   0015AC                     l141:
  3188   0015AC                     l4494:
  3189                           
  3190                           ;color.c: 314:     hue = hue * 60;
  3191   0015AC  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3192   0015B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3193   0015B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3194   0015B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3195   0015BC  0E00               	movlw	0
  3196   0015BE  6E06               	movwf	___flmul@a^0,c
  3197   0015C0  0E00               	movlw	0
  3198   0015C2  6E07               	movwf	(___flmul@a+1)^0,c
  3199   0015C4  0E70               	movlw	112
  3200   0015C6  6E08               	movwf	(___flmul@a+2)^0,c
  3201   0015C8  0E42               	movlw	66
  3202   0015CA  6E09               	movwf	(___flmul@a+3)^0,c
  3203   0015CC  EC81  F00D         	call	___flmul	;wreg free
  3204   0015D0  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3205   0015D4  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3206   0015D8  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3207   0015DC  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3208   0015E0                     
  3209                           ;color.c: 315:     if (hue < 0) {
  3210   0015E0  0100               	movlb	0	; () banked
  3211   0015E2  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3212   0015E4  EFF8  F00A         	goto	u4000
  3213   0015E8  EFF6  F00A         	goto	u4001
  3214   0015EC                     u4001:
  3215   0015EC  EF12  F00B         	goto	l145
  3216   0015F0                     u4000:
  3217   0015F0                     
  3218                           ; BSR set to: 0
  3219                           ;color.c: 316:         hue = hue + 360;
  3220   0015F0  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3221   0015F4  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3222   0015F8  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3223   0015FC  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3224   001600  0E00               	movlw	0
  3225   001602  6E06               	movwf	___fladd@a^0,c
  3226   001604  0E00               	movlw	0
  3227   001606  6E07               	movwf	(___fladd@a+1)^0,c
  3228   001608  0EB4               	movlw	180
  3229   00160A  6E08               	movwf	(___fladd@a+2)^0,c
  3230   00160C  0E43               	movlw	67
  3231   00160E  6E09               	movwf	(___fladd@a+3)^0,c
  3232   001610  EC21  F00B         	call	___fladd	;wreg free
  3233   001614  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3234   001618  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3235   00161C  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3236   001620  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3237   001624                     l145:
  3238                           
  3239                           ;color.c: 319:     return (unsigned int)hue;
  3240   001624  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3241   001628  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3242   00162C  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3243   001630  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3244   001634  ECA3  F017         	call	___fltol	;wreg free
  3245   001638  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3246   00163C  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3247   001640  0012               	return		;funcret
  3248   001642                     __end_of_convert_rgb2hue:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function ___xxtofl *****************
  3252 ;; Defined at:
  3253 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  sign            1    wreg     unsigned char 
  3256 ;;  val             4    1[COMRAM] long 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  sign            1    9[COMRAM] unsigned char 
  3259 ;;  arg             4   11[COMRAM] unsigned long 
  3260 ;;  exp             1   10[COMRAM] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  4    1[COMRAM] unsigned char 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;Total ram usage:       14 bytes
  3275 ;; Hardware stack levels used: 1
  3276 ;; Hardware stack levels required when called: 1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_convert_rgb2hue
  3281 ;;		_main
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text8
  3286   00293E                     __ptext8:
  3287                           	callstack 0
  3288   00293E                     ___xxtofl:
  3289                           	callstack 27
  3290                           
  3291                           ;incstack = 0
  3292                           ;___xxtofl@sign stored from wreg
  3293   00293E  6E0A               	movwf	___xxtofl@sign^0,c
  3294   002940  500A               	movf	___xxtofl@sign^0,w,c
  3295   002942  B4D8               	btfsc	status,2,c
  3296   002944  EFA6  F014         	goto	u3801
  3297   002948  EFA8  F014         	goto	u3800
  3298   00294C                     u3801:
  3299   00294C  EFCA  F014         	goto	l1321
  3300   002950                     u3800:
  3301   002950  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3302   002952  EFAF  F014         	goto	u3810
  3303   002956  EFAD  F014         	goto	u3811
  3304   00295A                     u3811:
  3305   00295A  EFCA  F014         	goto	l1321
  3306   00295E                     u3810:
  3307   00295E  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3308   002962  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3309   002966  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3310   00296A  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3311   00296E  1E06               	comf	??___xxtofl^0,f,c
  3312   002970  1E07               	comf	(??___xxtofl+1)^0,f,c
  3313   002972  1E08               	comf	(??___xxtofl+2)^0,f,c
  3314   002974  1E09               	comf	(??___xxtofl+3)^0,f,c
  3315   002976  2A06               	incf	??___xxtofl^0,f,c
  3316   002978  0E00               	movlw	0
  3317   00297A  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3318   00297C  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3319   00297E  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3320   002980  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3321   002984  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3322   002988  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3323   00298C  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3324   002990  EFD2  F014         	goto	l4354
  3325   002994                     l1321:
  3326   002994  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3327   002998  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3328   00299C  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3329   0029A0  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3330   0029A4                     l4354:
  3331   0029A4  5002               	movf	___xxtofl@val^0,w,c
  3332   0029A6  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3333   0029A8  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3334   0029AA  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3335   0029AC  A4D8               	btfss	status,2,c
  3336   0029AE  EFDB  F014         	goto	u3821
  3337   0029B2  EFDD  F014         	goto	u3820
  3338   0029B6                     u3821:
  3339   0029B6  EFE7  F014         	goto	l4360
  3340   0029BA                     u3820:
  3341   0029BA  0E00               	movlw	0
  3342   0029BC  6E02               	movwf	?___xxtofl^0,c
  3343   0029BE  0E00               	movlw	0
  3344   0029C0  6E03               	movwf	(?___xxtofl+1)^0,c
  3345   0029C2  0E00               	movlw	0
  3346   0029C4  6E04               	movwf	(?___xxtofl+2)^0,c
  3347   0029C6  0E00               	movlw	0
  3348   0029C8  6E05               	movwf	(?___xxtofl+3)^0,c
  3349   0029CA  EF78  F015         	goto	l1324
  3350   0029CE                     l4360:
  3351   0029CE  0E96               	movlw	150
  3352   0029D0  6E0B               	movwf	___xxtofl@exp^0,c
  3353   0029D2  EFF1  F014         	goto	l4364
  3354   0029D6                     l4362:
  3355   0029D6  2A0B               	incf	___xxtofl@exp^0,f,c
  3356   0029D8  90D8               	bcf	status,0,c
  3357   0029DA  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3358   0029DC  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3359   0029DE  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3360   0029E0  320C               	rrcf	___xxtofl@arg^0,f,c
  3361   0029E2                     l4364:
  3362   0029E2  0E00               	movlw	0
  3363   0029E4  140C               	andwf	___xxtofl@arg^0,w,c
  3364   0029E6  6E06               	movwf	??___xxtofl^0,c
  3365   0029E8  0E00               	movlw	0
  3366   0029EA  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3367   0029EC  6E07               	movwf	(??___xxtofl+1)^0,c
  3368   0029EE  0E00               	movlw	0
  3369   0029F0  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3370   0029F2  6E08               	movwf	(??___xxtofl+2)^0,c
  3371   0029F4  0EFE               	movlw	254
  3372   0029F6  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3373   0029F8  6E09               	movwf	(??___xxtofl+3)^0,c
  3374   0029FA  5006               	movf	??___xxtofl^0,w,c
  3375   0029FC  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3376   0029FE  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3377   002A00  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3378   002A02  A4D8               	btfss	status,2,c
  3379   002A04  EF06  F015         	goto	u3831
  3380   002A08  EF08  F015         	goto	u3830
  3381   002A0C                     u3831:
  3382   002A0C  EFEB  F014         	goto	l4362
  3383   002A10                     u3830:
  3384   002A10  EF16  F015         	goto	l1328
  3385   002A14                     l4366:
  3386   002A14  2A0B               	incf	___xxtofl@exp^0,f,c
  3387   002A16  0E01               	movlw	1
  3388   002A18  260C               	addwf	___xxtofl@arg^0,f,c
  3389   002A1A  0E00               	movlw	0
  3390   002A1C  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3391   002A1E  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3392   002A20  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3393   002A22  90D8               	bcf	status,0,c
  3394   002A24  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3395   002A26  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3396   002A28  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3397   002A2A  320C               	rrcf	___xxtofl@arg^0,f,c
  3398   002A2C                     l1328:
  3399   002A2C  0E00               	movlw	0
  3400   002A2E  140C               	andwf	___xxtofl@arg^0,w,c
  3401   002A30  6E06               	movwf	??___xxtofl^0,c
  3402   002A32  0E00               	movlw	0
  3403   002A34  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3404   002A36  6E07               	movwf	(??___xxtofl+1)^0,c
  3405   002A38  0E00               	movlw	0
  3406   002A3A  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3407   002A3C  6E08               	movwf	(??___xxtofl+2)^0,c
  3408   002A3E  0EFF               	movlw	255
  3409   002A40  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3410   002A42  6E09               	movwf	(??___xxtofl+3)^0,c
  3411   002A44  5006               	movf	??___xxtofl^0,w,c
  3412   002A46  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3413   002A48  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3414   002A4A  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3415   002A4C  A4D8               	btfss	status,2,c
  3416   002A4E  EF2B  F015         	goto	u3841
  3417   002A52  EF2D  F015         	goto	u3840
  3418   002A56                     u3841:
  3419   002A56  EF0A  F015         	goto	l4366
  3420   002A5A                     u3840:
  3421   002A5A  EF35  F015         	goto	l4374
  3422   002A5E                     l4372:
  3423   002A5E  060B               	decf	___xxtofl@exp^0,f,c
  3424   002A60  90D8               	bcf	status,0,c
  3425   002A62  360C               	rlcf	___xxtofl@arg^0,f,c
  3426   002A64  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3427   002A66  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3428   002A68  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3429   002A6A                     l4374:
  3430   002A6A  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3431   002A6C  EF3A  F015         	goto	u3851
  3432   002A70  EF3C  F015         	goto	u3850
  3433   002A74                     u3851:
  3434   002A74  EF44  F015         	goto	l1335
  3435   002A78                     u3850:
  3436   002A78  0E02               	movlw	2
  3437   002A7A  600B               	cpfslt	___xxtofl@exp^0,c
  3438   002A7C  EF42  F015         	goto	u3861
  3439   002A80  EF44  F015         	goto	u3860
  3440   002A84                     u3861:
  3441   002A84  EF2F  F015         	goto	l4372
  3442   002A88                     u3860:
  3443   002A88                     l1335:
  3444   002A88  B00B               	btfsc	___xxtofl@exp^0,0,c
  3445   002A8A  EF49  F015         	goto	u3871
  3446   002A8E  EF4B  F015         	goto	u3870
  3447   002A92                     u3871:
  3448   002A92  EF4C  F015         	goto	l4380
  3449   002A96                     u3870:
  3450   002A96  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3451   002A98                     l4380:
  3452   002A98  90D8               	bcf	status,0,c
  3453   002A9A  320B               	rrcf	___xxtofl@exp^0,f,c
  3454   002A9C  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3455   002AA0  6A07               	clrf	(??___xxtofl+1)^0,c
  3456   002AA2  6A08               	clrf	(??___xxtofl+2)^0,c
  3457   002AA4  6A09               	clrf	(??___xxtofl+3)^0,c
  3458   002AA6  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3459   002AAA  6A08               	clrf	(??___xxtofl+2)^0,c
  3460   002AAC  6A07               	clrf	(??___xxtofl+1)^0,c
  3461   002AAE  6A06               	clrf	??___xxtofl^0,c
  3462   002AB0  5006               	movf	??___xxtofl^0,w,c
  3463   002AB2  120C               	iorwf	___xxtofl@arg^0,f,c
  3464   002AB4  5007               	movf	(??___xxtofl+1)^0,w,c
  3465   002AB6  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3466   002AB8  5008               	movf	(??___xxtofl+2)^0,w,c
  3467   002ABA  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3468   002ABC  5009               	movf	(??___xxtofl+3)^0,w,c
  3469   002ABE  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3470   002AC0  500A               	movf	___xxtofl@sign^0,w,c
  3471   002AC2  B4D8               	btfsc	status,2,c
  3472   002AC4  EF66  F015         	goto	u3881
  3473   002AC8  EF68  F015         	goto	u3880
  3474   002ACC                     u3881:
  3475   002ACC  EF70  F015         	goto	l4390
  3476   002AD0                     u3880:
  3477   002AD0  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3478   002AD2  EF6F  F015         	goto	u3890
  3479   002AD6  EF6D  F015         	goto	u3891
  3480   002ADA                     u3891:
  3481   002ADA  EF70  F015         	goto	l4390
  3482   002ADE                     u3890:
  3483   002ADE  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3484   002AE0                     l4390:
  3485   002AE0  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3486   002AE4  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3487   002AE8  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3488   002AEC  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3489   002AF0                     l1324:
  3490   002AF0  0012               	return		;funcret
  3491   002AF2                     __end_of___xxtofl:
  3492                           	callstack 0
  3493                           
  3494 ;; *************** function ___fltol *****************
  3495 ;; Defined at:
  3496 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  f1              4   51[COMRAM] unsigned char 
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  exp1            1   60[COMRAM] unsigned char 
  3501 ;;  sign1           1   59[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  4   51[COMRAM] long 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;Total ram usage:       10 bytes
  3516 ;; Hardware stack levels used: 1
  3517 ;; Hardware stack levels required when called: 1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_convert_rgb2hue
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text9
  3527   002F46                     __ptext9:
  3528                           	callstack 0
  3529   002F46                     ___fltol:
  3530                           	callstack 27
  3531   002F46  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3532   002F48  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3533   002F4A  6E3D               	movwf	___fltol@exp1^0,c
  3534   002F4C  503D               	movf	___fltol@exp1^0,w,c
  3535   002F4E  A4D8               	btfss	status,2,c
  3536   002F50  EFAC  F017         	goto	u3731
  3537   002F54  EFAE  F017         	goto	u3730
  3538   002F58                     u3731:
  3539   002F58  EFB8  F017         	goto	l4310
  3540   002F5C                     u3730:
  3541   002F5C                     l4306:
  3542   002F5C  0E00               	movlw	0
  3543   002F5E  6E34               	movwf	?___fltol^0,c
  3544   002F60  0E00               	movlw	0
  3545   002F62  6E35               	movwf	(?___fltol+1)^0,c
  3546   002F64  0E00               	movlw	0
  3547   002F66  6E36               	movwf	(?___fltol+2)^0,c
  3548   002F68  0E00               	movlw	0
  3549   002F6A  6E37               	movwf	(?___fltol+3)^0,c
  3550   002F6C  EF25  F018         	goto	l963
  3551   002F70                     l4310:
  3552   002F70  C034  F038         	movff	___fltol@f1,??___fltol
  3553   002F74  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3554   002F78  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3555   002F7C  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3556   002F80  0E20               	movlw	32
  3557   002F82  EFC8  F017         	goto	u3740
  3558   002F86                     u3745:
  3559   002F86  90D8               	bcf	status,0,c
  3560   002F88  323B               	rrcf	(??___fltol+3)^0,f,c
  3561   002F8A  323A               	rrcf	(??___fltol+2)^0,f,c
  3562   002F8C  3239               	rrcf	(??___fltol+1)^0,f,c
  3563   002F8E  3238               	rrcf	??___fltol^0,f,c
  3564   002F90                     u3740:
  3565   002F90  2EE8               	decfsz	wreg,f,c
  3566   002F92  EFC3  F017         	goto	u3745
  3567   002F96  5038               	movf	??___fltol^0,w,c
  3568   002F98  6E3C               	movwf	___fltol@sign1^0,c
  3569   002F9A  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3570   002F9C  0EFF               	movlw	255
  3571   002F9E  1634               	andwf	___fltol@f1^0,f,c
  3572   002FA0  0EFF               	movlw	255
  3573   002FA2  1635               	andwf	(___fltol@f1+1)^0,f,c
  3574   002FA4  0EFF               	movlw	255
  3575   002FA6  1636               	andwf	(___fltol@f1+2)^0,f,c
  3576   002FA8  0E00               	movlw	0
  3577   002FAA  1637               	andwf	(___fltol@f1+3)^0,f,c
  3578   002FAC  0E96               	movlw	150
  3579   002FAE  5E3D               	subwf	___fltol@exp1^0,f,c
  3580   002FB0  BE3D               	btfsc	___fltol@exp1^0,7,c
  3581   002FB2  EFDF  F017         	goto	u3750
  3582   002FB6  EFDD  F017         	goto	u3751
  3583   002FBA                     u3751:
  3584   002FBA  EFF5  F017         	goto	l4330
  3585   002FBE                     u3750:
  3586   002FBE  503D               	movf	___fltol@exp1^0,w,c
  3587   002FC0  0A80               	xorlw	128
  3588   002FC2  0F97               	addlw	151
  3589   002FC4  B0D8               	btfsc	status,0,c
  3590   002FC6  EFE7  F017         	goto	u3761
  3591   002FCA  EFE9  F017         	goto	u3760
  3592   002FCE                     u3761:
  3593   002FCE  EFEB  F017         	goto	l4326
  3594   002FD2                     u3760:
  3595   002FD2  EFAE  F017         	goto	l4306
  3596   002FD6                     l4326:
  3597   002FD6  90D8               	bcf	status,0,c
  3598   002FD8  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3599   002FDA  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3600   002FDC  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3601   002FDE  3234               	rrcf	___fltol@f1^0,f,c
  3602   002FE0  3E3D               	incfsz	___fltol@exp1^0,f,c
  3603   002FE2  EFEB  F017         	goto	l4326
  3604   002FE6  EF0D  F018         	goto	l4340
  3605   002FEA                     l4330:
  3606   002FEA  0E1F               	movlw	31
  3607   002FEC  643D               	cpfsgt	___fltol@exp1^0,c
  3608   002FEE  EFFB  F017         	goto	u3771
  3609   002FF2  EFFD  F017         	goto	u3770
  3610   002FF6                     u3771:
  3611   002FF6  EF05  F018         	goto	l4338
  3612   002FFA                     u3770:
  3613   002FFA  EFAE  F017         	goto	l4306
  3614   002FFE                     l4336:
  3615   002FFE  90D8               	bcf	status,0,c
  3616   003000  3634               	rlcf	___fltol@f1^0,f,c
  3617   003002  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3618   003004  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3619   003006  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3620   003008  063D               	decf	___fltol@exp1^0,f,c
  3621   00300A                     l4338:
  3622   00300A  503D               	movf	___fltol@exp1^0,w,c
  3623   00300C  A4D8               	btfss	status,2,c
  3624   00300E  EF0B  F018         	goto	u3781
  3625   003012  EF0D  F018         	goto	u3780
  3626   003016                     u3781:
  3627   003016  EFFF  F017         	goto	l4336
  3628   00301A                     u3780:
  3629   00301A                     l4340:
  3630   00301A  503C               	movf	___fltol@sign1^0,w,c
  3631   00301C  B4D8               	btfsc	status,2,c
  3632   00301E  EF13  F018         	goto	u3791
  3633   003022  EF15  F018         	goto	u3790
  3634   003026                     u3791:
  3635   003026  EF1D  F018         	goto	l4344
  3636   00302A                     u3790:
  3637   00302A  1E37               	comf	(___fltol@f1+3)^0,f,c
  3638   00302C  1E36               	comf	(___fltol@f1+2)^0,f,c
  3639   00302E  1E35               	comf	(___fltol@f1+1)^0,f,c
  3640   003030  6C34               	negf	___fltol@f1^0,c
  3641   003032  0E00               	movlw	0
  3642   003034  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3643   003036  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3644   003038  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3645   00303A                     l4344:
  3646   00303A  C034  F034         	movff	___fltol@f1,?___fltol
  3647   00303E  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3648   003042  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3649   003046  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3650   00304A                     l963:
  3651   00304A  0012               	return		;funcret
  3652   00304C                     __end_of___fltol:
  3653                           	callstack 0
  3654                           
  3655 ;; *************** function ___flsub *****************
  3656 ;; Defined at:
  3657 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  b               4   17[COMRAM] long 
  3660 ;;  a               4   21[COMRAM] long 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  4   17[COMRAM] long 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3672 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3675 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;Total ram usage:        8 bytes
  3677 ;; Hardware stack levels used: 1
  3678 ;; Hardware stack levels required when called: 2
  3679 ;; This function calls:
  3680 ;;		___fladd
  3681 ;; This function is called by:
  3682 ;;		_convert_rgb2hue
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text10
  3687   003F84                     __ptext10:
  3688                           	callstack 0
  3689   003F84                     ___flsub:
  3690                           	callstack 26
  3691   003F84  0E00               	movlw	0
  3692   003F86  1A16               	xorwf	___flsub@a^0,f,c
  3693   003F88  0E00               	movlw	0
  3694   003F8A  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3695   003F8C  0E00               	movlw	0
  3696   003F8E  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3697   003F90  0E80               	movlw	128
  3698   003F92  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3699   003F94  C012  F002         	movff	___flsub@b,___fladd@b
  3700   003F98  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3701   003F9C  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3702   003FA0  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3703   003FA4  C016  F006         	movff	___flsub@a,___fladd@a
  3704   003FA8  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3705   003FAC  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3706   003FB0  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3707   003FB4  EC21  F00B         	call	___fladd	;wreg free
  3708   003FB8  C002  F012         	movff	?___fladd,?___flsub
  3709   003FBC  C003  F013         	movff	?___fladd+1,?___flsub+1
  3710   003FC0  C004  F014         	movff	?___fladd+2,?___flsub+2
  3711   003FC4  C005  F015         	movff	?___fladd+3,?___flsub+3
  3712   003FC8  0012               	return		;funcret
  3713   003FCA                     __end_of___flsub:
  3714                           	callstack 0
  3715                           
  3716 ;; *************** function ___fladd *****************
  3717 ;; Defined at:
  3718 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  b               4    1[COMRAM] long 
  3721 ;;  a               4    5[COMRAM] long 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  grs             1   16[COMRAM] unsigned char 
  3724 ;;  bexp            1   15[COMRAM] unsigned char 
  3725 ;;  aexp            1   14[COMRAM] unsigned char 
  3726 ;;  signs           1   13[COMRAM] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  4    1[COMRAM] unsigned char 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3736 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3738 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3739 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3740 ;;Total ram usage:       16 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; Hardware stack levels required when called: 1
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_convert_rgb2hue
  3747 ;;		___flsub
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text11
  3752   001642                     __ptext11:
  3753                           	callstack 0
  3754   001642                     ___fladd:
  3755                           	callstack 26
  3756   001642  5005               	movf	(___fladd@b+3)^0,w,c
  3757   001644  0B80               	andlw	128
  3758   001646  6E0E               	movwf	___fladd@signs^0,c
  3759   001648  5005               	movf	(___fladd@b+3)^0,w,c
  3760   00164A  2405               	addwf	(___fladd@b+3)^0,w,c
  3761   00164C  6E10               	movwf	___fladd@bexp^0,c
  3762   00164E  AE04               	btfss	(___fladd@b+2)^0,7,c
  3763   001650  EF2C  F00B         	goto	u2771
  3764   001654  EF2E  F00B         	goto	u2770
  3765   001658                     u2771:
  3766   001658  EF2F  F00B         	goto	l3660
  3767   00165C                     u2770:
  3768   00165C  8010               	bsf	___fladd@bexp^0,0,c
  3769   00165E                     l3660:
  3770   00165E  5010               	movf	___fladd@bexp^0,w,c
  3771   001660  B4D8               	btfsc	status,2,c
  3772   001662  EF35  F00B         	goto	u2781
  3773   001666  EF37  F00B         	goto	u2780
  3774   00166A                     u2781:
  3775   00166A  EF4C  F00B         	goto	l3670
  3776   00166E                     u2780:
  3777   00166E  2810               	incf	___fladd@bexp^0,w,c
  3778   001670  A4D8               	btfss	status,2,c
  3779   001672  EF3D  F00B         	goto	u2791
  3780   001676  EF3F  F00B         	goto	u2790
  3781   00167A                     u2791:
  3782   00167A  EF47  F00B         	goto	l3666
  3783   00167E                     u2790:
  3784   00167E  0E00               	movlw	0
  3785   001680  6E02               	movwf	___fladd@b^0,c
  3786   001682  0E00               	movlw	0
  3787   001684  6E03               	movwf	(___fladd@b+1)^0,c
  3788   001686  0E00               	movlw	0
  3789   001688  6E04               	movwf	(___fladd@b+2)^0,c
  3790   00168A  0E00               	movlw	0
  3791   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  3792   00168E                     l3666:
  3793   00168E  8E04               	bsf	(___fladd@b+2)^0,7,c
  3794   001690  0E00               	movlw	0
  3795   001692  6E05               	movwf	(___fladd@b+3)^0,c
  3796   001694  EF54  F00B         	goto	l3672
  3797   001698                     l3670:
  3798   001698  0E00               	movlw	0
  3799   00169A  6E02               	movwf	___fladd@b^0,c
  3800   00169C  0E00               	movlw	0
  3801   00169E  6E03               	movwf	(___fladd@b+1)^0,c
  3802   0016A0  0E00               	movlw	0
  3803   0016A2  6E04               	movwf	(___fladd@b+2)^0,c
  3804   0016A4  0E00               	movlw	0
  3805   0016A6  6E05               	movwf	(___fladd@b+3)^0,c
  3806   0016A8                     l3672:
  3807   0016A8  5009               	movf	(___fladd@a+3)^0,w,c
  3808   0016AA  0B80               	andlw	128
  3809   0016AC  6E0F               	movwf	___fladd@aexp^0,c
  3810   0016AE  500E               	movf	___fladd@signs^0,w,c
  3811   0016B0  180F               	xorwf	___fladd@aexp^0,w,c
  3812   0016B2  B4D8               	btfsc	status,2,c
  3813   0016B4  EF5E  F00B         	goto	u2801
  3814   0016B8  EF60  F00B         	goto	u2800
  3815   0016BC                     u2801:
  3816   0016BC  EF61  F00B         	goto	l3678
  3817   0016C0                     u2800:
  3818   0016C0  8C0E               	bsf	___fladd@signs^0,6,c
  3819   0016C2                     l3678:
  3820   0016C2  5009               	movf	(___fladd@a+3)^0,w,c
  3821   0016C4  2409               	addwf	(___fladd@a+3)^0,w,c
  3822   0016C6  6E0F               	movwf	___fladd@aexp^0,c
  3823   0016C8  AE08               	btfss	(___fladd@a+2)^0,7,c
  3824   0016CA  EF69  F00B         	goto	u2811
  3825   0016CE  EF6B  F00B         	goto	u2810
  3826   0016D2                     u2811:
  3827   0016D2  EF6C  F00B         	goto	l3684
  3828   0016D6                     u2810:
  3829   0016D6  800F               	bsf	___fladd@aexp^0,0,c
  3830   0016D8                     l3684:
  3831   0016D8  500F               	movf	___fladd@aexp^0,w,c
  3832   0016DA  B4D8               	btfsc	status,2,c
  3833   0016DC  EF72  F00B         	goto	u2821
  3834   0016E0  EF74  F00B         	goto	u2820
  3835   0016E4                     u2821:
  3836   0016E4  EF89  F00B         	goto	l3694
  3837   0016E8                     u2820:
  3838   0016E8  280F               	incf	___fladd@aexp^0,w,c
  3839   0016EA  A4D8               	btfss	status,2,c
  3840   0016EC  EF7A  F00B         	goto	u2831
  3841   0016F0  EF7C  F00B         	goto	u2830
  3842   0016F4                     u2831:
  3843   0016F4  EF84  F00B         	goto	l3690
  3844   0016F8                     u2830:
  3845   0016F8  0E00               	movlw	0
  3846   0016FA  6E06               	movwf	___fladd@a^0,c
  3847   0016FC  0E00               	movlw	0
  3848   0016FE  6E07               	movwf	(___fladd@a+1)^0,c
  3849   001700  0E00               	movlw	0
  3850   001702  6E08               	movwf	(___fladd@a+2)^0,c
  3851   001704  0E00               	movlw	0
  3852   001706  6E09               	movwf	(___fladd@a+3)^0,c
  3853   001708                     l3690:
  3854   001708  8E08               	bsf	(___fladd@a+2)^0,7,c
  3855   00170A  0E00               	movlw	0
  3856   00170C  6E09               	movwf	(___fladd@a+3)^0,c
  3857   00170E  EF91  F00B         	goto	l3696
  3858   001712                     l3694:
  3859   001712  0E00               	movlw	0
  3860   001714  6E06               	movwf	___fladd@a^0,c
  3861   001716  0E00               	movlw	0
  3862   001718  6E07               	movwf	(___fladd@a+1)^0,c
  3863   00171A  0E00               	movlw	0
  3864   00171C  6E08               	movwf	(___fladd@a+2)^0,c
  3865   00171E  0E00               	movlw	0
  3866   001720  6E09               	movwf	(___fladd@a+3)^0,c
  3867   001722                     l3696:
  3868   001722  5010               	movf	___fladd@bexp^0,w,c
  3869   001724  5C0F               	subwf	___fladd@aexp^0,w,c
  3870   001726  B0D8               	btfsc	status,0,c
  3871   001728  EF98  F00B         	goto	u2841
  3872   00172C  EF9A  F00B         	goto	u2840
  3873   001730                     u2841:
  3874   001730  EFC1  F00B         	goto	l3732
  3875   001734                     u2840:
  3876   001734  AC0E               	btfss	___fladd@signs^0,6,c
  3877   001736  EF9F  F00B         	goto	u2851
  3878   00173A  EFA1  F00B         	goto	u2850
  3879   00173E                     u2851:
  3880   00173E  EFA3  F00B         	goto	l3702
  3881   001742                     u2850:
  3882   001742  0E80               	movlw	128
  3883   001744  1A0E               	xorwf	___fladd@signs^0,f,c
  3884   001746                     l3702:
  3885   001746  C010  F011         	movff	___fladd@bexp,___fladd@grs
  3886   00174A  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  3887   00174E  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  3888   001752  C002  F011         	movff	___fladd@b,___fladd@grs
  3889   001756  C006  F002         	movff	___fladd@a,___fladd@b
  3890   00175A  C011  F006         	movff	___fladd@grs,___fladd@a
  3891   00175E  C003  F011         	movff	___fladd@b+1,___fladd@grs
  3892   001762  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  3893   001766  C011  F007         	movff	___fladd@grs,___fladd@a+1
  3894   00176A  C004  F011         	movff	___fladd@b+2,___fladd@grs
  3895   00176E  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  3896   001772  C011  F008         	movff	___fladd@grs,___fladd@a+2
  3897   001776  C005  F011         	movff	___fladd@b+3,___fladd@grs
  3898   00177A  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  3899   00177E  C011  F009         	movff	___fladd@grs,___fladd@a+3
  3900   001782                     l3732:
  3901   001782  0E00               	movlw	0
  3902   001784  6E11               	movwf	___fladd@grs^0,c
  3903   001786  5010               	movf	___fladd@bexp^0,w,c
  3904   001788  C00F  F00A         	movff	___fladd@aexp,??___fladd
  3905   00178C  6A0B               	clrf	(??___fladd+1)^0,c
  3906   00178E  5E0A               	subwf	??___fladd^0,f,c
  3907   001790  0E00               	movlw	0
  3908   001792  5A0B               	subwfb	(??___fladd+1)^0,f,c
  3909   001794  BE0B               	btfsc	(??___fladd+1)^0,7,c
  3910   001796  EFD6  F00B         	goto	u2861
  3911   00179A  500B               	movf	(??___fladd+1)^0,w,c
  3912   00179C  E109               	bnz	u2860
  3913   00179E  0E1A               	movlw	26
  3914   0017A0  5C0A               	subwf	??___fladd^0,w,c
  3915   0017A2  A0D8               	btfss	status,0,c
  3916   0017A4  EFD6  F00B         	goto	u2861
  3917   0017A8  EFD8  F00B         	goto	u2860
  3918   0017AC                     u2861:
  3919   0017AC  EF0F  F00C         	goto	l1195
  3920   0017B0                     u2860:
  3921   0017B0  5002               	movf	___fladd@b^0,w,c
  3922   0017B2  1003               	iorwf	(___fladd@b+1)^0,w,c
  3923   0017B4  1004               	iorwf	(___fladd@b+2)^0,w,c
  3924   0017B6  1005               	iorwf	(___fladd@b+3)^0,w,c
  3925   0017B8  A4D8               	btfss	status,2,c
  3926   0017BA  EFE1  F00B         	goto	u2871
  3927   0017BE  EFE4  F00B         	goto	u2870
  3928   0017C2                     u2871:
  3929   0017C2  0E01               	movlw	1
  3930   0017C4  EFE5  F00B         	goto	u2880
  3931   0017C8                     u2870:
  3932   0017C8  0E00               	movlw	0
  3933   0017CA                     u2880:
  3934   0017CA  6E11               	movwf	___fladd@grs^0,c
  3935   0017CC  0E00               	movlw	0
  3936   0017CE  6E02               	movwf	___fladd@b^0,c
  3937   0017D0  0E00               	movlw	0
  3938   0017D2  6E03               	movwf	(___fladd@b+1)^0,c
  3939   0017D4  0E00               	movlw	0
  3940   0017D6  6E04               	movwf	(___fladd@b+2)^0,c
  3941   0017D8  0E00               	movlw	0
  3942   0017DA  6E05               	movwf	(___fladd@b+3)^0,c
  3943   0017DC  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  3944   0017E0  EF18  F00C         	goto	l1194
  3945   0017E4                     l1196:
  3946   0017E4  A011               	btfss	___fladd@grs^0,0,c
  3947   0017E6  EFF7  F00B         	goto	u2891
  3948   0017EA  EFF9  F00B         	goto	u2890
  3949   0017EE                     u2891:
  3950   0017EE  EFFF  F00B         	goto	l3744
  3951   0017F2                     u2890:
  3952   0017F2  90D8               	bcf	status,0,c
  3953   0017F4  3011               	rrcf	___fladd@grs^0,w,c
  3954   0017F6  0901               	iorlw	1
  3955   0017F8  6E11               	movwf	___fladd@grs^0,c
  3956   0017FA  EF01  F00C         	goto	l3746
  3957   0017FE                     l3744:
  3958   0017FE  90D8               	bcf	status,0,c
  3959   001800  3211               	rrcf	___fladd@grs^0,f,c
  3960   001802                     l3746:
  3961   001802  A002               	btfss	___fladd@b^0,0,c
  3962   001804  EF06  F00C         	goto	u2901
  3963   001808  EF08  F00C         	goto	u2900
  3964   00180C                     u2901:
  3965   00180C  EF09  F00C         	goto	l3750
  3966   001810                     u2900:
  3967   001810  8E11               	bsf	___fladd@grs^0,7,c
  3968   001812                     l3750:
  3969   001812  3405               	rlcf	(___fladd@b+3)^0,w,c
  3970   001814  3205               	rrcf	(___fladd@b+3)^0,f,c
  3971   001816  3204               	rrcf	(___fladd@b+2)^0,f,c
  3972   001818  3203               	rrcf	(___fladd@b+1)^0,f,c
  3973   00181A  3202               	rrcf	___fladd@b^0,f,c
  3974   00181C  2A10               	incf	___fladd@bexp^0,f,c
  3975   00181E                     l1195:
  3976   00181E  500F               	movf	___fladd@aexp^0,w,c
  3977   001820  5C10               	subwf	___fladd@bexp^0,w,c
  3978   001822  A0D8               	btfss	status,0,c
  3979   001824  EF16  F00C         	goto	u2911
  3980   001828  EF18  F00C         	goto	u2910
  3981   00182C                     u2911:
  3982   00182C  EFF2  F00B         	goto	l1196
  3983   001830                     u2910:
  3984   001830                     l1194:
  3985   001830  BC0E               	btfsc	___fladd@signs^0,6,c
  3986   001832  EF1D  F00C         	goto	u2921
  3987   001836  EF1F  F00C         	goto	u2920
  3988   00183A                     u2921:
  3989   00183A  EF5F  F00C         	goto	l3778
  3990   00183E                     u2920:
  3991   00183E  5010               	movf	___fladd@bexp^0,w,c
  3992   001840  A4D8               	btfss	status,2,c
  3993   001842  EF25  F00C         	goto	u2931
  3994   001846  EF27  F00C         	goto	u2930
  3995   00184A                     u2931:
  3996   00184A  EF31  F00C         	goto	l3760
  3997   00184E                     u2930:
  3998   00184E  0E00               	movlw	0
  3999   001850  6E02               	movwf	?___fladd^0,c
  4000   001852  0E00               	movlw	0
  4001   001854  6E03               	movwf	(?___fladd+1)^0,c
  4002   001856  0E00               	movlw	0
  4003   001858  6E04               	movwf	(?___fladd+2)^0,c
  4004   00185A  0E00               	movlw	0
  4005   00185C  6E05               	movwf	(?___fladd+3)^0,c
  4006   00185E  EF80  F00D         	goto	l1203
  4007   001862                     l3760:
  4008   001862  5006               	movf	___fladd@a^0,w,c
  4009   001864  2602               	addwf	___fladd@b^0,f,c
  4010   001866  5007               	movf	(___fladd@a+1)^0,w,c
  4011   001868  2203               	addwfc	(___fladd@b+1)^0,f,c
  4012   00186A  5008               	movf	(___fladd@a+2)^0,w,c
  4013   00186C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4014   00186E  5009               	movf	(___fladd@a+3)^0,w,c
  4015   001870  2205               	addwfc	(___fladd@b+3)^0,f,c
  4016   001872  A005               	btfss	(___fladd@b+3)^0,0,c
  4017   001874  EF3E  F00C         	goto	u2941
  4018   001878  EF40  F00C         	goto	u2940
  4019   00187C                     u2941:
  4020   00187C  EFEC  F00C         	goto	l3814
  4021   001880                     u2940:
  4022   001880  A011               	btfss	___fladd@grs^0,0,c
  4023   001882  EF45  F00C         	goto	u2951
  4024   001886  EF47  F00C         	goto	u2950
  4025   00188A                     u2951:
  4026   00188A  EF4D  F00C         	goto	l3768
  4027   00188E                     u2950:
  4028   00188E  90D8               	bcf	status,0,c
  4029   001890  3011               	rrcf	___fladd@grs^0,w,c
  4030   001892  0901               	iorlw	1
  4031   001894  6E11               	movwf	___fladd@grs^0,c
  4032   001896  EF4F  F00C         	goto	l3770
  4033   00189A                     l3768:
  4034   00189A  90D8               	bcf	status,0,c
  4035   00189C  3211               	rrcf	___fladd@grs^0,f,c
  4036   00189E                     l3770:
  4037   00189E  A002               	btfss	___fladd@b^0,0,c
  4038   0018A0  EF54  F00C         	goto	u2961
  4039   0018A4  EF56  F00C         	goto	u2960
  4040   0018A8                     u2961:
  4041   0018A8  EF57  F00C         	goto	l3774
  4042   0018AC                     u2960:
  4043   0018AC  8E11               	bsf	___fladd@grs^0,7,c
  4044   0018AE                     l3774:
  4045   0018AE  3405               	rlcf	(___fladd@b+3)^0,w,c
  4046   0018B0  3205               	rrcf	(___fladd@b+3)^0,f,c
  4047   0018B2  3204               	rrcf	(___fladd@b+2)^0,f,c
  4048   0018B4  3203               	rrcf	(___fladd@b+1)^0,f,c
  4049   0018B6  3202               	rrcf	___fladd@b^0,f,c
  4050   0018B8  2A10               	incf	___fladd@bexp^0,f,c
  4051   0018BA  EFEC  F00C         	goto	l3814
  4052   0018BE                     l3778:
  4053   0018BE  5006               	movf	___fladd@a^0,w,c
  4054   0018C0  5C02               	subwf	___fladd@b^0,w,c
  4055   0018C2  5007               	movf	(___fladd@a+1)^0,w,c
  4056   0018C4  5803               	subwfb	(___fladd@b+1)^0,w,c
  4057   0018C6  5008               	movf	(___fladd@a+2)^0,w,c
  4058   0018C8  5804               	subwfb	(___fladd@b+2)^0,w,c
  4059   0018CA  5005               	movf	(___fladd@b+3)^0,w,c
  4060   0018CC  0A80               	xorlw	128
  4061   0018CE  6E0A               	movwf	??___fladd^0,c
  4062   0018D0  5009               	movf	(___fladd@a+3)^0,w,c
  4063   0018D2  0A80               	xorlw	128
  4064   0018D4  580A               	subwfb	??___fladd^0,w,c
  4065   0018D6  B0D8               	btfsc	status,0,c
  4066   0018D8  EF70  F00C         	goto	u2971
  4067   0018DC  EF72  F00C         	goto	u2970
  4068   0018E0                     u2971:
  4069   0018E0  EF9D  F00C         	goto	l3788
  4070   0018E4                     u2970:
  4071   0018E4  5002               	movf	___fladd@b^0,w,c
  4072   0018E6  5C06               	subwf	___fladd@a^0,w,c
  4073   0018E8  6E0A               	movwf	??___fladd^0,c
  4074   0018EA  5003               	movf	(___fladd@b+1)^0,w,c
  4075   0018EC  5807               	subwfb	(___fladd@a+1)^0,w,c
  4076   0018EE  6E0B               	movwf	(??___fladd+1)^0,c
  4077   0018F0  5004               	movf	(___fladd@b+2)^0,w,c
  4078   0018F2  5808               	subwfb	(___fladd@a+2)^0,w,c
  4079   0018F4  6E0C               	movwf	(??___fladd+2)^0,c
  4080   0018F6  5005               	movf	(___fladd@b+3)^0,w,c
  4081   0018F8  5809               	subwfb	(___fladd@a+3)^0,w,c
  4082   0018FA  6E0D               	movwf	(??___fladd+3)^0,c
  4083   0018FC  0EFF               	movlw	255
  4084   0018FE  240A               	addwf	??___fladd^0,w,c
  4085   001900  6E02               	movwf	___fladd@b^0,c
  4086   001902  0EFF               	movlw	255
  4087   001904  200B               	addwfc	(??___fladd+1)^0,w,c
  4088   001906  6E03               	movwf	(___fladd@b+1)^0,c
  4089   001908  0EFF               	movlw	255
  4090   00190A  200C               	addwfc	(??___fladd+2)^0,w,c
  4091   00190C  6E04               	movwf	(___fladd@b+2)^0,c
  4092   00190E  0EFF               	movlw	255
  4093   001910  200D               	addwfc	(??___fladd+3)^0,w,c
  4094   001912  6E05               	movwf	(___fladd@b+3)^0,c
  4095   001914  0E80               	movlw	128
  4096   001916  1A0E               	xorwf	___fladd@signs^0,f,c
  4097   001918  6C11               	negf	___fladd@grs^0,c
  4098   00191A  5011               	movf	___fladd@grs^0,w,c
  4099   00191C  A4D8               	btfss	status,2,c
  4100   00191E  EF93  F00C         	goto	u2981
  4101   001922  EF95  F00C         	goto	u2980
  4102   001926                     u2981:
  4103   001926  EFA5  F00C         	goto	l1211
  4104   00192A                     u2980:
  4105   00192A  0E01               	movlw	1
  4106   00192C  2602               	addwf	___fladd@b^0,f,c
  4107   00192E  0E00               	movlw	0
  4108   001930  2203               	addwfc	(___fladd@b+1)^0,f,c
  4109   001932  2204               	addwfc	(___fladd@b+2)^0,f,c
  4110   001934  2205               	addwfc	(___fladd@b+3)^0,f,c
  4111   001936  EFA5  F00C         	goto	l1211
  4112   00193A                     l3788:
  4113   00193A  5006               	movf	___fladd@a^0,w,c
  4114   00193C  5E02               	subwf	___fladd@b^0,f,c
  4115   00193E  5007               	movf	(___fladd@a+1)^0,w,c
  4116   001940  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4117   001942  5008               	movf	(___fladd@a+2)^0,w,c
  4118   001944  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4119   001946  5009               	movf	(___fladd@a+3)^0,w,c
  4120   001948  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4121   00194A                     l1211:
  4122   00194A  5002               	movf	___fladd@b^0,w,c
  4123   00194C  1003               	iorwf	(___fladd@b+1)^0,w,c
  4124   00194E  1004               	iorwf	(___fladd@b+2)^0,w,c
  4125   001950  1005               	iorwf	(___fladd@b+3)^0,w,c
  4126   001952  A4D8               	btfss	status,2,c
  4127   001954  EFAE  F00C         	goto	u2991
  4128   001958  EFB0  F00C         	goto	u2990
  4129   00195C                     u2991:
  4130   00195C  EFE5  F00C         	goto	l3812
  4131   001960                     u2990:
  4132   001960  5011               	movf	___fladd@grs^0,w,c
  4133   001962  A4D8               	btfss	status,2,c
  4134   001964  EFB6  F00C         	goto	u3001
  4135   001968  EFB8  F00C         	goto	u3000
  4136   00196C                     u3001:
  4137   00196C  EFE5  F00C         	goto	l3812
  4138   001970                     u3000:
  4139   001970  0E00               	movlw	0
  4140   001972  6E02               	movwf	?___fladd^0,c
  4141   001974  0E00               	movlw	0
  4142   001976  6E03               	movwf	(?___fladd+1)^0,c
  4143   001978  0E00               	movlw	0
  4144   00197A  6E04               	movwf	(?___fladd+2)^0,c
  4145   00197C  0E00               	movlw	0
  4146   00197E  6E05               	movwf	(?___fladd+3)^0,c
  4147   001980  EF80  F00D         	goto	l1203
  4148   001984                     l3796:
  4149   001984  90D8               	bcf	status,0,c
  4150   001986  3602               	rlcf	___fladd@b^0,f,c
  4151   001988  3603               	rlcf	(___fladd@b+1)^0,f,c
  4152   00198A  3604               	rlcf	(___fladd@b+2)^0,f,c
  4153   00198C  3605               	rlcf	(___fladd@b+3)^0,f,c
  4154   00198E  AE11               	btfss	___fladd@grs^0,7,c
  4155   001990  EFCC  F00C         	goto	u3011
  4156   001994  EFCE  F00C         	goto	u3010
  4157   001998                     u3011:
  4158   001998  EFCF  F00C         	goto	l3802
  4159   00199C                     u3010:
  4160   00199C  8002               	bsf	___fladd@b^0,0,c
  4161   00199E                     l3802:
  4162   00199E  A011               	btfss	___fladd@grs^0,0,c
  4163   0019A0  EFD4  F00C         	goto	u3021
  4164   0019A4  EFD6  F00C         	goto	u3020
  4165   0019A8                     u3021:
  4166   0019A8  EFDA  F00C         	goto	l3806
  4167   0019AC                     u3020:
  4168   0019AC  80D8               	bsf	status,0,c
  4169   0019AE  3611               	rlcf	___fladd@grs^0,f,c
  4170   0019B0  EFDC  F00C         	goto	l3808
  4171   0019B4                     l3806:
  4172   0019B4  90D8               	bcf	status,0,c
  4173   0019B6  3611               	rlcf	___fladd@grs^0,f,c
  4174   0019B8                     l3808:
  4175   0019B8  5010               	movf	___fladd@bexp^0,w,c
  4176   0019BA  B4D8               	btfsc	status,2,c
  4177   0019BC  EFE2  F00C         	goto	u3031
  4178   0019C0  EFE4  F00C         	goto	u3030
  4179   0019C4                     u3031:
  4180   0019C4  EFE5  F00C         	goto	l3812
  4181   0019C8                     u3030:
  4182   0019C8  0610               	decf	___fladd@bexp^0,f,c
  4183   0019CA                     l3812:
  4184   0019CA  AE04               	btfss	(___fladd@b+2)^0,7,c
  4185   0019CC  EFEA  F00C         	goto	u3041
  4186   0019D0  EFEC  F00C         	goto	u3040
  4187   0019D4                     u3041:
  4188   0019D4  EFC2  F00C         	goto	l3796
  4189   0019D8                     u3040:
  4190   0019D8                     l3814:
  4191   0019D8  0E00               	movlw	0
  4192   0019DA  6E0F               	movwf	___fladd@aexp^0,c
  4193   0019DC  AE11               	btfss	___fladd@grs^0,7,c
  4194   0019DE  EFF3  F00C         	goto	u3051
  4195   0019E2  EFF5  F00C         	goto	u3050
  4196   0019E6                     u3051:
  4197   0019E6  EF0D  F00D         	goto	l1220
  4198   0019EA                     u3050:
  4199   0019EA  C011  F00A         	movff	___fladd@grs,??___fladd
  4200   0019EE  0E7F               	movlw	127
  4201   0019F0  160A               	andwf	??___fladd^0,f,c
  4202   0019F2  B4D8               	btfsc	status,2,c
  4203   0019F4  EFFE  F00C         	goto	u3061
  4204   0019F8  EF00  F00D         	goto	u3060
  4205   0019FC                     u3061:
  4206   0019FC  EF04  F00D         	goto	l1221
  4207   001A00                     u3060:
  4208   001A00                     l3820:
  4209   001A00  0E01               	movlw	1
  4210   001A02  6E0F               	movwf	___fladd@aexp^0,c
  4211   001A04  EF0D  F00D         	goto	l1220
  4212   001A08                     l1221:
  4213   001A08  A002               	btfss	___fladd@b^0,0,c
  4214   001A0A  EF09  F00D         	goto	u3071
  4215   001A0E  EF0B  F00D         	goto	u3070
  4216   001A12                     u3071:
  4217   001A12  EF0D  F00D         	goto	l1220
  4218   001A16                     u3070:
  4219   001A16  EF00  F00D         	goto	l3820
  4220   001A1A                     l1220:
  4221   001A1A  500F               	movf	___fladd@aexp^0,w,c
  4222   001A1C  B4D8               	btfsc	status,2,c
  4223   001A1E  EF13  F00D         	goto	u3081
  4224   001A22  EF15  F00D         	goto	u3080
  4225   001A26                     u3081:
  4226   001A26  EF40  F00D         	goto	l3832
  4227   001A2A                     u3080:
  4228   001A2A  0E01               	movlw	1
  4229   001A2C  2602               	addwf	___fladd@b^0,f,c
  4230   001A2E  0E00               	movlw	0
  4231   001A30  2203               	addwfc	(___fladd@b+1)^0,f,c
  4232   001A32  2204               	addwfc	(___fladd@b+2)^0,f,c
  4233   001A34  2205               	addwfc	(___fladd@b+3)^0,f,c
  4234   001A36  A005               	btfss	(___fladd@b+3)^0,0,c
  4235   001A38  EF20  F00D         	goto	u3091
  4236   001A3C  EF22  F00D         	goto	u3090
  4237   001A40                     u3091:
  4238   001A40  EF40  F00D         	goto	l3832
  4239   001A44                     u3090:
  4240   001A44  C002  F00A         	movff	___fladd@b,??___fladd
  4241   001A48  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4242   001A4C  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4243   001A50  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4244   001A54  340D               	rlcf	(??___fladd+3)^0,w,c
  4245   001A56  320D               	rrcf	(??___fladd+3)^0,f,c
  4246   001A58  320C               	rrcf	(??___fladd+2)^0,f,c
  4247   001A5A  320B               	rrcf	(??___fladd+1)^0,f,c
  4248   001A5C  320A               	rrcf	??___fladd^0,f,c
  4249   001A5E  C00A  F002         	movff	??___fladd,___fladd@b
  4250   001A62  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4251   001A66  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4252   001A6A  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4253   001A6E  2810               	incf	___fladd@bexp^0,w,c
  4254   001A70  B4D8               	btfsc	status,2,c
  4255   001A72  EF3D  F00D         	goto	u3101
  4256   001A76  EF3F  F00D         	goto	u3100
  4257   001A7A                     u3101:
  4258   001A7A  EF40  F00D         	goto	l3832
  4259   001A7E                     u3100:
  4260   001A7E  2A10               	incf	___fladd@bexp^0,f,c
  4261   001A80                     l3832:
  4262   001A80  2810               	incf	___fladd@bexp^0,w,c
  4263   001A82  B4D8               	btfsc	status,2,c
  4264   001A84  EF46  F00D         	goto	u3111
  4265   001A88  EF48  F00D         	goto	u3110
  4266   001A8C                     u3111:
  4267   001A8C  EF50  F00D         	goto	l3836
  4268   001A90                     u3110:
  4269   001A90  5010               	movf	___fladd@bexp^0,w,c
  4270   001A92  A4D8               	btfss	status,2,c
  4271   001A94  EF4E  F00D         	goto	u3121
  4272   001A98  EF50  F00D         	goto	u3120
  4273   001A9C                     u3121:
  4274   001A9C  EF62  F00D         	goto	l3840
  4275   001AA0                     u3120:
  4276   001AA0                     l3836:
  4277   001AA0  0E00               	movlw	0
  4278   001AA2  6E02               	movwf	___fladd@b^0,c
  4279   001AA4  0E00               	movlw	0
  4280   001AA6  6E03               	movwf	(___fladd@b+1)^0,c
  4281   001AA8  0E00               	movlw	0
  4282   001AAA  6E04               	movwf	(___fladd@b+2)^0,c
  4283   001AAC  0E00               	movlw	0
  4284   001AAE  6E05               	movwf	(___fladd@b+3)^0,c
  4285   001AB0  5010               	movf	___fladd@bexp^0,w,c
  4286   001AB2  A4D8               	btfss	status,2,c
  4287   001AB4  EF5E  F00D         	goto	u3131
  4288   001AB8  EF60  F00D         	goto	u3130
  4289   001ABC                     u3131:
  4290   001ABC  EF62  F00D         	goto	l3840
  4291   001AC0                     u3130:
  4292   001AC0  0E00               	movlw	0
  4293   001AC2  6E0E               	movwf	___fladd@signs^0,c
  4294   001AC4                     l3840:
  4295   001AC4  A010               	btfss	___fladd@bexp^0,0,c
  4296   001AC6  EF67  F00D         	goto	u3141
  4297   001ACA  EF69  F00D         	goto	u3140
  4298   001ACE                     u3141:
  4299   001ACE  EF6C  F00D         	goto	l3844
  4300   001AD2                     u3140:
  4301   001AD2  8E04               	bsf	(___fladd@b+2)^0,7,c
  4302   001AD4  EF6D  F00D         	goto	l3846
  4303   001AD8                     l3844:
  4304   001AD8  9E04               	bcf	(___fladd@b+2)^0,7,c
  4305   001ADA                     l3846:
  4306   001ADA  90D8               	bcf	status,0,c
  4307   001ADC  3010               	rrcf	___fladd@bexp^0,w,c
  4308   001ADE  6E05               	movwf	(___fladd@b+3)^0,c
  4309   001AE0  AE0E               	btfss	___fladd@signs^0,7,c
  4310   001AE2  EF75  F00D         	goto	u3151
  4311   001AE6  EF77  F00D         	goto	u3150
  4312   001AEA                     u3151:
  4313   001AEA  EF78  F00D         	goto	l3852
  4314   001AEE                     u3150:
  4315   001AEE  8E05               	bsf	(___fladd@b+3)^0,7,c
  4316   001AF0                     l3852:
  4317   001AF0  C002  F002         	movff	___fladd@b,?___fladd
  4318   001AF4  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4319   001AF8  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4320   001AFC  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4321   001B00                     l1203:
  4322   001B00  0012               	return		;funcret
  4323   001B02                     __end_of___fladd:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function ___flmul *****************
  4327 ;; Defined at:
  4328 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  b               4    1[COMRAM] unsigned char 
  4331 ;;  a               4    5[COMRAM] unsigned char 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  prod            4   20[COMRAM] struct .
  4334 ;;  grs             4   14[COMRAM] unsigned long 
  4335 ;;  temp            2   24[COMRAM] struct .
  4336 ;;  bexp            1   19[COMRAM] unsigned char 
  4337 ;;  aexp            1   18[COMRAM] unsigned char 
  4338 ;;  sign            1   13[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  4    1[COMRAM] unsigned char 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0, prodl, prodh
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4348 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;Total ram usage:       25 bytes
  4353 ;; Hardware stack levels used: 1
  4354 ;; Hardware stack levels required when called: 1
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_convert_rgb2hue
  4359 ;;		_main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text12
  4364   001B02                     __ptext12:
  4365                           	callstack 0
  4366   001B02                     ___flmul:
  4367                           	callstack 27
  4368   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4369   001B04  0B80               	andlw	128
  4370   001B06  6E0E               	movwf	___flmul@sign^0,c
  4371   001B08  5005               	movf	(___flmul@b+3)^0,w,c
  4372   001B0A  2405               	addwf	(___flmul@b+3)^0,w,c
  4373   001B0C  6E14               	movwf	___flmul@bexp^0,c
  4374   001B0E  AE04               	btfss	(___flmul@b+2)^0,7,c
  4375   001B10  EF8C  F00D         	goto	u3461
  4376   001B14  EF8E  F00D         	goto	u3460
  4377   001B18                     u3461:
  4378   001B18  EF8F  F00D         	goto	l4136
  4379   001B1C                     u3460:
  4380   001B1C  8014               	bsf	___flmul@bexp^0,0,c
  4381   001B1E                     l4136:
  4382   001B1E  5014               	movf	___flmul@bexp^0,w,c
  4383   001B20  B4D8               	btfsc	status,2,c
  4384   001B22  EF95  F00D         	goto	u3471
  4385   001B26  EF97  F00D         	goto	u3470
  4386   001B2A                     u3471:
  4387   001B2A  EFAA  F00D         	goto	l4144
  4388   001B2E                     u3470:
  4389   001B2E  2814               	incf	___flmul@bexp^0,w,c
  4390   001B30  A4D8               	btfss	status,2,c
  4391   001B32  EF9D  F00D         	goto	u3481
  4392   001B36  EF9F  F00D         	goto	u3480
  4393   001B3A                     u3481:
  4394   001B3A  EFA7  F00D         	goto	l4142
  4395   001B3E                     u3480:
  4396   001B3E  0E00               	movlw	0
  4397   001B40  6E02               	movwf	___flmul@b^0,c
  4398   001B42  0E00               	movlw	0
  4399   001B44  6E03               	movwf	(___flmul@b+1)^0,c
  4400   001B46  0E00               	movlw	0
  4401   001B48  6E04               	movwf	(___flmul@b+2)^0,c
  4402   001B4A  0E00               	movlw	0
  4403   001B4C  6E05               	movwf	(___flmul@b+3)^0,c
  4404   001B4E                     l4142:
  4405   001B4E  8E04               	bsf	(___flmul@b+2)^0,7,c
  4406   001B50  EFB2  F00D         	goto	l4146
  4407   001B54                     l4144:
  4408   001B54  0E00               	movlw	0
  4409   001B56  6E02               	movwf	___flmul@b^0,c
  4410   001B58  0E00               	movlw	0
  4411   001B5A  6E03               	movwf	(___flmul@b+1)^0,c
  4412   001B5C  0E00               	movlw	0
  4413   001B5E  6E04               	movwf	(___flmul@b+2)^0,c
  4414   001B60  0E00               	movlw	0
  4415   001B62  6E05               	movwf	(___flmul@b+3)^0,c
  4416   001B64                     l4146:
  4417   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4418   001B66  0B80               	andlw	128
  4419   001B68  1A0E               	xorwf	___flmul@sign^0,f,c
  4420   001B6A  5009               	movf	(___flmul@a+3)^0,w,c
  4421   001B6C  2409               	addwf	(___flmul@a+3)^0,w,c
  4422   001B6E  6E13               	movwf	___flmul@aexp^0,c
  4423   001B70  AE08               	btfss	(___flmul@a+2)^0,7,c
  4424   001B72  EFBD  F00D         	goto	u3491
  4425   001B76  EFBF  F00D         	goto	u3490
  4426   001B7A                     u3491:
  4427   001B7A  EFC0  F00D         	goto	l4154
  4428   001B7E                     u3490:
  4429   001B7E  8013               	bsf	___flmul@aexp^0,0,c
  4430   001B80                     l4154:
  4431   001B80  5013               	movf	___flmul@aexp^0,w,c
  4432   001B82  B4D8               	btfsc	status,2,c
  4433   001B84  EFC6  F00D         	goto	u3501
  4434   001B88  EFC8  F00D         	goto	u3500
  4435   001B8C                     u3501:
  4436   001B8C  EFDB  F00D         	goto	l4162
  4437   001B90                     u3500:
  4438   001B90  2813               	incf	___flmul@aexp^0,w,c
  4439   001B92  A4D8               	btfss	status,2,c
  4440   001B94  EFCE  F00D         	goto	u3511
  4441   001B98  EFD0  F00D         	goto	u3510
  4442   001B9C                     u3511:
  4443   001B9C  EFD8  F00D         	goto	l4160
  4444   001BA0                     u3510:
  4445   001BA0  0E00               	movlw	0
  4446   001BA2  6E06               	movwf	___flmul@a^0,c
  4447   001BA4  0E00               	movlw	0
  4448   001BA6  6E07               	movwf	(___flmul@a+1)^0,c
  4449   001BA8  0E00               	movlw	0
  4450   001BAA  6E08               	movwf	(___flmul@a+2)^0,c
  4451   001BAC  0E00               	movlw	0
  4452   001BAE  6E09               	movwf	(___flmul@a+3)^0,c
  4453   001BB0                     l4160:
  4454   001BB0  8E08               	bsf	(___flmul@a+2)^0,7,c
  4455   001BB2  EFE3  F00D         	goto	l1280
  4456   001BB6                     l4162:
  4457   001BB6  0E00               	movlw	0
  4458   001BB8  6E06               	movwf	___flmul@a^0,c
  4459   001BBA  0E00               	movlw	0
  4460   001BBC  6E07               	movwf	(___flmul@a+1)^0,c
  4461   001BBE  0E00               	movlw	0
  4462   001BC0  6E08               	movwf	(___flmul@a+2)^0,c
  4463   001BC2  0E00               	movlw	0
  4464   001BC4  6E09               	movwf	(___flmul@a+3)^0,c
  4465   001BC6                     l1280:
  4466   001BC6  5013               	movf	___flmul@aexp^0,w,c
  4467   001BC8  B4D8               	btfsc	status,2,c
  4468   001BCA  EFE9  F00D         	goto	u3521
  4469   001BCE  EFEB  F00D         	goto	u3520
  4470   001BD2                     u3521:
  4471   001BD2  EFF3  F00D         	goto	l4166
  4472   001BD6                     u3520:
  4473   001BD6  5014               	movf	___flmul@bexp^0,w,c
  4474   001BD8  A4D8               	btfss	status,2,c
  4475   001BDA  EFF1  F00D         	goto	u3531
  4476   001BDE  EFF3  F00D         	goto	u3530
  4477   001BE2                     u3531:
  4478   001BE2  EFFD  F00D         	goto	l4170
  4479   001BE6                     u3530:
  4480   001BE6                     l4166:
  4481   001BE6  0E00               	movlw	0
  4482   001BE8  6E02               	movwf	?___flmul^0,c
  4483   001BEA  0E00               	movlw	0
  4484   001BEC  6E03               	movwf	(?___flmul+1)^0,c
  4485   001BEE  0E00               	movlw	0
  4486   001BF0  6E04               	movwf	(?___flmul+2)^0,c
  4487   001BF2  0E00               	movlw	0
  4488   001BF4  6E05               	movwf	(?___flmul+3)^0,c
  4489   001BF6  EF95  F00F         	goto	l1284
  4490   001BFA                     l4170:
  4491   001BFA  5008               	movf	(___flmul@a+2)^0,w,c
  4492   001BFC  0202               	mulwf	___flmul@b^0,c
  4493   001BFE  CFF3 F019          	movff	prodl,___flmul@temp
  4494   001C02  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4495   001C06  5019               	movf	___flmul@temp^0,w,c
  4496   001C08  6E0F               	movwf	___flmul@grs^0,c
  4497   001C0A  6A10               	clrf	(___flmul@grs+1)^0,c
  4498   001C0C  6A11               	clrf	(___flmul@grs+2)^0,c
  4499   001C0E  6A12               	clrf	(___flmul@grs+3)^0,c
  4500   001C10  501A               	movf	(___flmul@temp+1)^0,w,c
  4501   001C12  6E15               	movwf	___flmul@prod^0,c
  4502   001C14  6A16               	clrf	(___flmul@prod+1)^0,c
  4503   001C16  6A17               	clrf	(___flmul@prod+2)^0,c
  4504   001C18  6A18               	clrf	(___flmul@prod+3)^0,c
  4505   001C1A  5007               	movf	(___flmul@a+1)^0,w,c
  4506   001C1C  0203               	mulwf	(___flmul@b+1)^0,c
  4507   001C1E  CFF3 F019          	movff	prodl,___flmul@temp
  4508   001C22  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4509   001C26  5019               	movf	___flmul@temp^0,w,c
  4510   001C28  260F               	addwf	___flmul@grs^0,f,c
  4511   001C2A  0E00               	movlw	0
  4512   001C2C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4513   001C2E  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4514   001C30  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4515   001C32  501A               	movf	(___flmul@temp+1)^0,w,c
  4516   001C34  2615               	addwf	___flmul@prod^0,f,c
  4517   001C36  0E00               	movlw	0
  4518   001C38  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4519   001C3A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4520   001C3C  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4521   001C3E  5006               	movf	___flmul@a^0,w,c
  4522   001C40  0204               	mulwf	(___flmul@b+2)^0,c
  4523   001C42  CFF3 F019          	movff	prodl,___flmul@temp
  4524   001C46  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4525   001C4A  5019               	movf	___flmul@temp^0,w,c
  4526   001C4C  260F               	addwf	___flmul@grs^0,f,c
  4527   001C4E  0E00               	movlw	0
  4528   001C50  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4529   001C52  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4530   001C54  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4531   001C56  501A               	movf	(___flmul@temp+1)^0,w,c
  4532   001C58  2615               	addwf	___flmul@prod^0,f,c
  4533   001C5A  0E00               	movlw	0
  4534   001C5C  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4535   001C5E  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4536   001C60  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4537   001C62  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4538   001C66  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4539   001C6A  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4540   001C6E  6A0F               	clrf	___flmul@grs^0,c
  4541   001C70  5006               	movf	___flmul@a^0,w,c
  4542   001C72  0203               	mulwf	(___flmul@b+1)^0,c
  4543   001C74  CFF3 F019          	movff	prodl,___flmul@temp
  4544   001C78  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4545   001C7C  5019               	movf	___flmul@temp^0,w,c
  4546   001C7E  260F               	addwf	___flmul@grs^0,f,c
  4547   001C80  501A               	movf	(___flmul@temp+1)^0,w,c
  4548   001C82  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4549   001C84  0E00               	movlw	0
  4550   001C86  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4551   001C88  0E00               	movlw	0
  4552   001C8A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4553   001C8C  5007               	movf	(___flmul@a+1)^0,w,c
  4554   001C8E  0202               	mulwf	___flmul@b^0,c
  4555   001C90  CFF3 F019          	movff	prodl,___flmul@temp
  4556   001C94  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4557   001C98  5019               	movf	___flmul@temp^0,w,c
  4558   001C9A  260F               	addwf	___flmul@grs^0,f,c
  4559   001C9C  501A               	movf	(___flmul@temp+1)^0,w,c
  4560   001C9E  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4561   001CA0  0E00               	movlw	0
  4562   001CA2  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4563   001CA4  0E00               	movlw	0
  4564   001CA6  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4565   001CA8  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4566   001CAC  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4567   001CB0  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4568   001CB4  6A0F               	clrf	___flmul@grs^0,c
  4569   001CB6  5006               	movf	___flmul@a^0,w,c
  4570   001CB8  0202               	mulwf	___flmul@b^0,c
  4571   001CBA  CFF3 F019          	movff	prodl,___flmul@temp
  4572   001CBE  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4573   001CC2  5019               	movf	___flmul@temp^0,w,c
  4574   001CC4  260F               	addwf	___flmul@grs^0,f,c
  4575   001CC6  501A               	movf	(___flmul@temp+1)^0,w,c
  4576   001CC8  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4577   001CCA  0E00               	movlw	0
  4578   001CCC  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4579   001CCE  0E00               	movlw	0
  4580   001CD0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4581   001CD2  5008               	movf	(___flmul@a+2)^0,w,c
  4582   001CD4  0203               	mulwf	(___flmul@b+1)^0,c
  4583   001CD6  CFF3 F019          	movff	prodl,___flmul@temp
  4584   001CDA  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4585   001CDE  5019               	movf	___flmul@temp^0,w,c
  4586   001CE0  2615               	addwf	___flmul@prod^0,f,c
  4587   001CE2  501A               	movf	(___flmul@temp+1)^0,w,c
  4588   001CE4  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4589   001CE6  0E00               	movlw	0
  4590   001CE8  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4591   001CEA  0E00               	movlw	0
  4592   001CEC  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4593   001CEE  5007               	movf	(___flmul@a+1)^0,w,c
  4594   001CF0  0204               	mulwf	(___flmul@b+2)^0,c
  4595   001CF2  CFF3 F019          	movff	prodl,___flmul@temp
  4596   001CF6  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4597   001CFA  5019               	movf	___flmul@temp^0,w,c
  4598   001CFC  2615               	addwf	___flmul@prod^0,f,c
  4599   001CFE  501A               	movf	(___flmul@temp+1)^0,w,c
  4600   001D00  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4601   001D02  0E00               	movlw	0
  4602   001D04  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4603   001D06  0E00               	movlw	0
  4604   001D08  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4605   001D0A  5008               	movf	(___flmul@a+2)^0,w,c
  4606   001D0C  0204               	mulwf	(___flmul@b+2)^0,c
  4607   001D0E  CFF3 F019          	movff	prodl,___flmul@temp
  4608   001D12  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4609   001D16  5019               	movf	___flmul@temp^0,w,c
  4610   001D18  6E0A               	movwf	??___flmul^0,c
  4611   001D1A  501A               	movf	(___flmul@temp+1)^0,w,c
  4612   001D1C  6E0B               	movwf	(??___flmul+1)^0,c
  4613   001D1E  6A0C               	clrf	(??___flmul+2)^0,c
  4614   001D20  6A0D               	clrf	(??___flmul+3)^0,c
  4615   001D22  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4616   001D26  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4617   001D2A  C00A  F00B         	movff	??___flmul,??___flmul+1
  4618   001D2E  6A0A               	clrf	??___flmul^0,c
  4619   001D30  500A               	movf	??___flmul^0,w,c
  4620   001D32  2615               	addwf	___flmul@prod^0,f,c
  4621   001D34  500B               	movf	(??___flmul+1)^0,w,c
  4622   001D36  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4623   001D38  500C               	movf	(??___flmul+2)^0,w,c
  4624   001D3A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4625   001D3C  500D               	movf	(??___flmul+3)^0,w,c
  4626   001D3E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4627   001D40  C00F  F00A         	movff	___flmul@grs,??___flmul
  4628   001D44  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4629   001D48  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4630   001D4C  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4631   001D50  0E19               	movlw	25
  4632   001D52  EFB0  F00E         	goto	u3540
  4633   001D56                     u3545:
  4634   001D56  90D8               	bcf	status,0,c
  4635   001D58  320D               	rrcf	(??___flmul+3)^0,f,c
  4636   001D5A  320C               	rrcf	(??___flmul+2)^0,f,c
  4637   001D5C  320B               	rrcf	(??___flmul+1)^0,f,c
  4638   001D5E  320A               	rrcf	??___flmul^0,f,c
  4639   001D60                     u3540:
  4640   001D60  2EE8               	decfsz	wreg,f,c
  4641   001D62  EFAB  F00E         	goto	u3545
  4642   001D66  500A               	movf	??___flmul^0,w,c
  4643   001D68  2615               	addwf	___flmul@prod^0,f,c
  4644   001D6A  500B               	movf	(??___flmul+1)^0,w,c
  4645   001D6C  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4646   001D6E  500C               	movf	(??___flmul+2)^0,w,c
  4647   001D70  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4648   001D72  500D               	movf	(??___flmul+3)^0,w,c
  4649   001D74  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4650   001D76  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4651   001D7A  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4652   001D7E  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4653   001D82  6A0F               	clrf	___flmul@grs^0,c
  4654   001D84  5013               	movf	___flmul@aexp^0,w,c
  4655   001D86  C014  F00A         	movff	___flmul@bexp,??___flmul
  4656   001D8A  6A0B               	clrf	(??___flmul+1)^0,c
  4657   001D8C  260A               	addwf	??___flmul^0,f,c
  4658   001D8E  0E00               	movlw	0
  4659   001D90  220B               	addwfc	(??___flmul+1)^0,f,c
  4660   001D92  0E82               	movlw	130
  4661   001D94  240A               	addwf	??___flmul^0,w,c
  4662   001D96  6E19               	movwf	___flmul@temp^0,c
  4663   001D98  0EFF               	movlw	255
  4664   001D9A  200B               	addwfc	(??___flmul+1)^0,w,c
  4665   001D9C  6E1A               	movwf	(___flmul@temp+1)^0,c
  4666   001D9E  EFE6  F00E         	goto	l4218
  4667   001DA2                     l4212:
  4668   001DA2  90D8               	bcf	status,0,c
  4669   001DA4  3615               	rlcf	___flmul@prod^0,f,c
  4670   001DA6  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4671   001DA8  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4672   001DAA  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4673   001DAC  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4674   001DAE  EFDB  F00E         	goto	u3551
  4675   001DB2  EFDD  F00E         	goto	u3550
  4676   001DB6                     u3551:
  4677   001DB6  EFDE  F00E         	goto	l1287
  4678   001DBA                     u3550:
  4679   001DBA  8015               	bsf	___flmul@prod^0,0,c
  4680   001DBC                     l1287:
  4681   001DBC  90D8               	bcf	status,0,c
  4682   001DBE  360F               	rlcf	___flmul@grs^0,f,c
  4683   001DC0  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4684   001DC2  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4685   001DC4  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4686   001DC6  0619               	decf	___flmul@temp^0,f,c
  4687   001DC8  A0D8               	btfss	status,0,c
  4688   001DCA  061A               	decf	(___flmul@temp+1)^0,f,c
  4689   001DCC                     l4218:
  4690   001DCC  AE17               	btfss	(___flmul@prod+2)^0,7,c
  4691   001DCE  EFEB  F00E         	goto	u3561
  4692   001DD2  EFED  F00E         	goto	u3560
  4693   001DD6                     u3561:
  4694   001DD6  EFD1  F00E         	goto	l4212
  4695   001DDA                     u3560:
  4696   001DDA  0E00               	movlw	0
  4697   001DDC  6E13               	movwf	___flmul@aexp^0,c
  4698   001DDE  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4699   001DE0  EFF4  F00E         	goto	u3571
  4700   001DE4  EFF6  F00E         	goto	u3570
  4701   001DE8                     u3571:
  4702   001DE8  EF1A  F00F         	goto	l1289
  4703   001DEC                     u3570:
  4704   001DEC  0EFF               	movlw	255
  4705   001DEE  140F               	andwf	___flmul@grs^0,w,c
  4706   001DF0  6E0A               	movwf	??___flmul^0,c
  4707   001DF2  0EFF               	movlw	255
  4708   001DF4  1410               	andwf	(___flmul@grs+1)^0,w,c
  4709   001DF6  6E0B               	movwf	(??___flmul+1)^0,c
  4710   001DF8  0EFF               	movlw	255
  4711   001DFA  1411               	andwf	(___flmul@grs+2)^0,w,c
  4712   001DFC  6E0C               	movwf	(??___flmul+2)^0,c
  4713   001DFE  0E7F               	movlw	127
  4714   001E00  1412               	andwf	(___flmul@grs+3)^0,w,c
  4715   001E02  6E0D               	movwf	(??___flmul+3)^0,c
  4716   001E04  500A               	movf	??___flmul^0,w,c
  4717   001E06  100B               	iorwf	(??___flmul+1)^0,w,c
  4718   001E08  100C               	iorwf	(??___flmul+2)^0,w,c
  4719   001E0A  100D               	iorwf	(??___flmul+3)^0,w,c
  4720   001E0C  B4D8               	btfsc	status,2,c
  4721   001E0E  EF0B  F00F         	goto	u3581
  4722   001E12  EF0D  F00F         	goto	u3580
  4723   001E16                     u3581:
  4724   001E16  EF11  F00F         	goto	l1290
  4725   001E1A                     u3580:
  4726   001E1A                     l4226:
  4727   001E1A  0E01               	movlw	1
  4728   001E1C  6E13               	movwf	___flmul@aexp^0,c
  4729   001E1E  EF1A  F00F         	goto	l1289
  4730   001E22                     l1290:
  4731   001E22  A015               	btfss	___flmul@prod^0,0,c
  4732   001E24  EF16  F00F         	goto	u3591
  4733   001E28  EF18  F00F         	goto	u3590
  4734   001E2C                     u3591:
  4735   001E2C  EF1A  F00F         	goto	l1289
  4736   001E30                     u3590:
  4737   001E30  EF0D  F00F         	goto	l4226
  4738   001E34                     l1289:
  4739   001E34  5013               	movf	___flmul@aexp^0,w,c
  4740   001E36  B4D8               	btfsc	status,2,c
  4741   001E38  EF20  F00F         	goto	u3601
  4742   001E3C  EF22  F00F         	goto	u3600
  4743   001E40                     u3601:
  4744   001E40  EF46  F00F         	goto	l4238
  4745   001E44                     u3600:
  4746   001E44  0E01               	movlw	1
  4747   001E46  2615               	addwf	___flmul@prod^0,f,c
  4748   001E48  0E00               	movlw	0
  4749   001E4A  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4750   001E4C  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4751   001E4E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4752   001E50  A018               	btfss	(___flmul@prod+3)^0,0,c
  4753   001E52  EF2D  F00F         	goto	u3611
  4754   001E56  EF2F  F00F         	goto	u3610
  4755   001E5A                     u3611:
  4756   001E5A  EF46  F00F         	goto	l4238
  4757   001E5E                     u3610:
  4758   001E5E  C015  F00A         	movff	___flmul@prod,??___flmul
  4759   001E62  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  4760   001E66  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  4761   001E6A  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  4762   001E6E  340D               	rlcf	(??___flmul+3)^0,w,c
  4763   001E70  320D               	rrcf	(??___flmul+3)^0,f,c
  4764   001E72  320C               	rrcf	(??___flmul+2)^0,f,c
  4765   001E74  320B               	rrcf	(??___flmul+1)^0,f,c
  4766   001E76  320A               	rrcf	??___flmul^0,f,c
  4767   001E78  C00A  F015         	movff	??___flmul,___flmul@prod
  4768   001E7C  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  4769   001E80  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  4770   001E84  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  4771   001E88  4A19               	infsnz	___flmul@temp^0,f,c
  4772   001E8A  2A1A               	incf	(___flmul@temp+1)^0,f,c
  4773   001E8C                     l4238:
  4774   001E8C  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4775   001E8E  EF51  F00F         	goto	u3621
  4776   001E92  501A               	movf	(___flmul@temp+1)^0,w,c
  4777   001E94  E108               	bnz	u3620
  4778   001E96  2819               	incf	___flmul@temp^0,w,c
  4779   001E98  A0D8               	btfss	status,0,c
  4780   001E9A  EF51  F00F         	goto	u3621
  4781   001E9E  EF53  F00F         	goto	u3620
  4782   001EA2                     u3621:
  4783   001EA2  EF5D  F00F         	goto	l4242
  4784   001EA6                     u3620:
  4785   001EA6  0E00               	movlw	0
  4786   001EA8  6E15               	movwf	___flmul@prod^0,c
  4787   001EAA  0E00               	movlw	0
  4788   001EAC  6E16               	movwf	(___flmul@prod+1)^0,c
  4789   001EAE  0E80               	movlw	128
  4790   001EB0  6E17               	movwf	(___flmul@prod+2)^0,c
  4791   001EB2  0E7F               	movlw	127
  4792   001EB4  6E18               	movwf	(___flmul@prod+3)^0,c
  4793   001EB6  EF8B  F00F         	goto	l4254
  4794   001EBA                     l4242:
  4795   001EBA  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4796   001EBC  EF6A  F00F         	goto	u3630
  4797   001EC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4798   001EC2  E106               	bnz	u3631
  4799   001EC4  0419               	decf	___flmul@temp^0,w,c
  4800   001EC6  B0D8               	btfsc	status,0,c
  4801   001EC8  EF68  F00F         	goto	u3631
  4802   001ECC  EF6A  F00F         	goto	u3630
  4803   001ED0                     u3631:
  4804   001ED0  EF76  F00F         	goto	l1297
  4805   001ED4                     u3630:
  4806   001ED4  0E00               	movlw	0
  4807   001ED6  6E15               	movwf	___flmul@prod^0,c
  4808   001ED8  0E00               	movlw	0
  4809   001EDA  6E16               	movwf	(___flmul@prod+1)^0,c
  4810   001EDC  0E00               	movlw	0
  4811   001EDE  6E17               	movwf	(___flmul@prod+2)^0,c
  4812   001EE0  0E00               	movlw	0
  4813   001EE2  6E18               	movwf	(___flmul@prod+3)^0,c
  4814   001EE4  0E00               	movlw	0
  4815   001EE6  6E0E               	movwf	___flmul@sign^0,c
  4816   001EE8  EF8B  F00F         	goto	l4254
  4817   001EEC                     l1297:
  4818   001EEC  C019  F014         	movff	___flmul@temp,___flmul@bexp
  4819   001EF0  0EFF               	movlw	255
  4820   001EF2  1615               	andwf	___flmul@prod^0,f,c
  4821   001EF4  0EFF               	movlw	255
  4822   001EF6  1616               	andwf	(___flmul@prod+1)^0,f,c
  4823   001EF8  0E7F               	movlw	127
  4824   001EFA  1617               	andwf	(___flmul@prod+2)^0,f,c
  4825   001EFC  0E00               	movlw	0
  4826   001EFE  1618               	andwf	(___flmul@prod+3)^0,f,c
  4827   001F00  A014               	btfss	___flmul@bexp^0,0,c
  4828   001F02  EF85  F00F         	goto	u3641
  4829   001F06  EF87  F00F         	goto	u3640
  4830   001F0A                     u3641:
  4831   001F0A  EF88  F00F         	goto	l4252
  4832   001F0E                     u3640:
  4833   001F0E  8E17               	bsf	(___flmul@prod+2)^0,7,c
  4834   001F10                     l4252:
  4835   001F10  90D8               	bcf	status,0,c
  4836   001F12  3014               	rrcf	___flmul@bexp^0,w,c
  4837   001F14  6E18               	movwf	(___flmul@prod+3)^0,c
  4838   001F16                     l4254:
  4839   001F16  500E               	movf	___flmul@sign^0,w,c
  4840   001F18  1218               	iorwf	(___flmul@prod+3)^0,f,c
  4841   001F1A  C015  F002         	movff	___flmul@prod,?___flmul
  4842   001F1E  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  4843   001F22  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  4844   001F26  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  4845   001F2A                     l1284:
  4846   001F2A  0012               	return		;funcret
  4847   001F2C                     __end_of___flmul:
  4848                           	callstack 0
  4849                           
  4850 ;; *************** function ___flge *****************
  4851 ;; Defined at:
  4852 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  ff1             4    1[COMRAM] unsigned char 
  4855 ;;  ff2             4    5[COMRAM] unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;		None               void
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4867 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4869 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4870 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4871 ;;Total ram usage:       12 bytes
  4872 ;; Hardware stack levels used: 1
  4873 ;; Hardware stack levels required when called: 1
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_convert_rgb2hue
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text13
  4882   00304C                     __ptext13:
  4883                           	callstack 0
  4884   00304C                     ___flge:
  4885                           	callstack 27
  4886   00304C  0E00               	movlw	0
  4887   00304E  1402               	andwf	___flge@ff1^0,w,c
  4888   003050  6E0A               	movwf	??___flge^0,c
  4889   003052  0E00               	movlw	0
  4890   003054  1403               	andwf	(___flge@ff1+1)^0,w,c
  4891   003056  6E0B               	movwf	(??___flge+1)^0,c
  4892   003058  0E80               	movlw	128
  4893   00305A  1404               	andwf	(___flge@ff1+2)^0,w,c
  4894   00305C  6E0C               	movwf	(??___flge+2)^0,c
  4895   00305E  0E7F               	movlw	127
  4896   003060  1405               	andwf	(___flge@ff1+3)^0,w,c
  4897   003062  6E0D               	movwf	(??___flge+3)^0,c
  4898   003064  500A               	movf	??___flge^0,w,c
  4899   003066  100B               	iorwf	(??___flge+1)^0,w,c
  4900   003068  100C               	iorwf	(??___flge+2)^0,w,c
  4901   00306A  100D               	iorwf	(??___flge+3)^0,w,c
  4902   00306C  A4D8               	btfss	status,2,c
  4903   00306E  EF3B  F018         	goto	u3681
  4904   003072  EF3D  F018         	goto	u3680
  4905   003076                     u3681:
  4906   003076  EF45  F018         	goto	l4286
  4907   00307A                     u3680:
  4908   00307A  0E00               	movlw	0
  4909   00307C  6E02               	movwf	___flge@ff1^0,c
  4910   00307E  0E00               	movlw	0
  4911   003080  6E03               	movwf	(___flge@ff1+1)^0,c
  4912   003082  0E00               	movlw	0
  4913   003084  6E04               	movwf	(___flge@ff1+2)^0,c
  4914   003086  0E00               	movlw	0
  4915   003088  6E05               	movwf	(___flge@ff1+3)^0,c
  4916   00308A                     l4286:
  4917   00308A  0E00               	movlw	0
  4918   00308C  1406               	andwf	___flge@ff2^0,w,c
  4919   00308E  6E0A               	movwf	??___flge^0,c
  4920   003090  0E00               	movlw	0
  4921   003092  1407               	andwf	(___flge@ff2+1)^0,w,c
  4922   003094  6E0B               	movwf	(??___flge+1)^0,c
  4923   003096  0E80               	movlw	128
  4924   003098  1408               	andwf	(___flge@ff2+2)^0,w,c
  4925   00309A  6E0C               	movwf	(??___flge+2)^0,c
  4926   00309C  0E7F               	movlw	127
  4927   00309E  1409               	andwf	(___flge@ff2+3)^0,w,c
  4928   0030A0  6E0D               	movwf	(??___flge+3)^0,c
  4929   0030A2  500A               	movf	??___flge^0,w,c
  4930   0030A4  100B               	iorwf	(??___flge+1)^0,w,c
  4931   0030A6  100C               	iorwf	(??___flge+2)^0,w,c
  4932   0030A8  100D               	iorwf	(??___flge+3)^0,w,c
  4933   0030AA  A4D8               	btfss	status,2,c
  4934   0030AC  EF5A  F018         	goto	u3691
  4935   0030B0  EF5C  F018         	goto	u3690
  4936   0030B4                     u3691:
  4937   0030B4  EF64  F018         	goto	l4290
  4938   0030B8                     u3690:
  4939   0030B8  0E00               	movlw	0
  4940   0030BA  6E06               	movwf	___flge@ff2^0,c
  4941   0030BC  0E00               	movlw	0
  4942   0030BE  6E07               	movwf	(___flge@ff2+1)^0,c
  4943   0030C0  0E00               	movlw	0
  4944   0030C2  6E08               	movwf	(___flge@ff2+2)^0,c
  4945   0030C4  0E00               	movlw	0
  4946   0030C6  6E09               	movwf	(___flge@ff2+3)^0,c
  4947   0030C8                     l4290:
  4948   0030C8  AE05               	btfss	(___flge@ff1+3)^0,7,c
  4949   0030CA  EF69  F018         	goto	u3701
  4950   0030CE  EF6B  F018         	goto	u3700
  4951   0030D2                     u3701:
  4952   0030D2  EF74  F018         	goto	l4294
  4953   0030D6                     u3700:
  4954   0030D6  6C02               	negf	___flge@ff1^0,c
  4955   0030D8  1E03               	comf	(___flge@ff1+1)^0,f,c
  4956   0030DA  B0D8               	btfsc	status,0,c
  4957   0030DC  2A03               	incf	(___flge@ff1+1)^0,f,c
  4958   0030DE  1E04               	comf	(___flge@ff1+2)^0,f,c
  4959   0030E0  B0D8               	btfsc	status,0,c
  4960   0030E2  2A04               	incf	(___flge@ff1+2)^0,f,c
  4961   0030E4  0E80               	movlw	128
  4962   0030E6  5605               	subfwb	(___flge@ff1+3)^0,f,c
  4963   0030E8                     l4294:
  4964   0030E8  AE09               	btfss	(___flge@ff2+3)^0,7,c
  4965   0030EA  EF79  F018         	goto	u3711
  4966   0030EE  EF7B  F018         	goto	u3710
  4967   0030F2                     u3711:
  4968   0030F2  EF84  F018         	goto	l931
  4969   0030F6                     u3710:
  4970   0030F6  6C06               	negf	___flge@ff2^0,c
  4971   0030F8  1E07               	comf	(___flge@ff2+1)^0,f,c
  4972   0030FA  B0D8               	btfsc	status,0,c
  4973   0030FC  2A07               	incf	(___flge@ff2+1)^0,f,c
  4974   0030FE  1E08               	comf	(___flge@ff2+2)^0,f,c
  4975   003100  B0D8               	btfsc	status,0,c
  4976   003102  2A08               	incf	(___flge@ff2+2)^0,f,c
  4977   003104  0E80               	movlw	128
  4978   003106  5609               	subfwb	(___flge@ff2+3)^0,f,c
  4979   003108                     l931:
  4980   003108  0E00               	movlw	0
  4981   00310A  1A02               	xorwf	___flge@ff1^0,f,c
  4982   00310C  0E00               	movlw	0
  4983   00310E  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  4984   003110  0E00               	movlw	0
  4985   003112  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  4986   003114  0E80               	movlw	128
  4987   003116  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  4988   003118  0E00               	movlw	0
  4989   00311A  1A06               	xorwf	___flge@ff2^0,f,c
  4990   00311C  0E00               	movlw	0
  4991   00311E  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  4992   003120  0E00               	movlw	0
  4993   003122  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  4994   003124  0E80               	movlw	128
  4995   003126  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  4996   003128  5006               	movf	___flge@ff2^0,w,c
  4997   00312A  5C02               	subwf	___flge@ff1^0,w,c
  4998   00312C  5007               	movf	(___flge@ff2+1)^0,w,c
  4999   00312E  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5000   003130  5008               	movf	(___flge@ff2+2)^0,w,c
  5001   003132  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5002   003134  5009               	movf	(___flge@ff2+3)^0,w,c
  5003   003136  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5004   003138  B0D8               	btfsc	status,0,c
  5005   00313A  EFA1  F018         	goto	u3721
  5006   00313E  EFA3  F018         	goto	u3720
  5007   003142                     u3721:
  5008   003142  EFA6  F018         	goto	l4300
  5009   003146                     u3720:
  5010   003146  90D8               	bcf	status,0,c
  5011   003148  EFA7  F018         	goto	l936
  5012   00314C                     l4300:
  5013   00314C  80D8               	bsf	status,0,c
  5014   00314E                     l936:
  5015   00314E  0012               	return		;funcret
  5016   003150                     __end_of___flge:
  5017                           	callstack 0
  5018                           
  5019 ;; *************** function ___fleq *****************
  5020 ;; Defined at:
  5021 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  ff1             4    1[COMRAM] unsigned char 
  5024 ;;  ff2             4    5[COMRAM] unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;		None               void
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5036 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5038 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5039 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5040 ;;Total ram usage:       12 bytes
  5041 ;; Hardware stack levels used: 1
  5042 ;; Hardware stack levels required when called: 1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_convert_rgb2hue
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text14
  5051   0035EE                     __ptext14:
  5052                           	callstack 0
  5053   0035EE                     ___fleq:
  5054                           	callstack 27
  5055   0035EE  0E00               	movlw	0
  5056   0035F0  1402               	andwf	___fleq@ff1^0,w,c
  5057   0035F2  6E0A               	movwf	??___fleq^0,c
  5058   0035F4  0E00               	movlw	0
  5059   0035F6  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5060   0035F8  6E0B               	movwf	(??___fleq+1)^0,c
  5061   0035FA  0E80               	movlw	128
  5062   0035FC  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5063   0035FE  6E0C               	movwf	(??___fleq+2)^0,c
  5064   003600  0E7F               	movlw	127
  5065   003602  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5066   003604  6E0D               	movwf	(??___fleq+3)^0,c
  5067   003606  500A               	movf	??___fleq^0,w,c
  5068   003608  100B               	iorwf	(??___fleq+1)^0,w,c
  5069   00360A  100C               	iorwf	(??___fleq+2)^0,w,c
  5070   00360C  100D               	iorwf	(??___fleq+3)^0,w,c
  5071   00360E  A4D8               	btfss	status,2,c
  5072   003610  EF0C  F01B         	goto	u3651
  5073   003614  EF0E  F01B         	goto	u3650
  5074   003618                     u3651:
  5075   003618  EF16  F01B         	goto	l4270
  5076   00361C                     u3650:
  5077   00361C  0E00               	movlw	0
  5078   00361E  6E02               	movwf	___fleq@ff1^0,c
  5079   003620  0E00               	movlw	0
  5080   003622  6E03               	movwf	(___fleq@ff1+1)^0,c
  5081   003624  0E00               	movlw	0
  5082   003626  6E04               	movwf	(___fleq@ff1+2)^0,c
  5083   003628  0E00               	movlw	0
  5084   00362A  6E05               	movwf	(___fleq@ff1+3)^0,c
  5085   00362C                     l4270:
  5086   00362C  0E00               	movlw	0
  5087   00362E  1406               	andwf	___fleq@ff2^0,w,c
  5088   003630  6E0A               	movwf	??___fleq^0,c
  5089   003632  0E00               	movlw	0
  5090   003634  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5091   003636  6E0B               	movwf	(??___fleq+1)^0,c
  5092   003638  0E80               	movlw	128
  5093   00363A  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5094   00363C  6E0C               	movwf	(??___fleq+2)^0,c
  5095   00363E  0E7F               	movlw	127
  5096   003640  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5097   003642  6E0D               	movwf	(??___fleq+3)^0,c
  5098   003644  500A               	movf	??___fleq^0,w,c
  5099   003646  100B               	iorwf	(??___fleq+1)^0,w,c
  5100   003648  100C               	iorwf	(??___fleq+2)^0,w,c
  5101   00364A  100D               	iorwf	(??___fleq+3)^0,w,c
  5102   00364C  A4D8               	btfss	status,2,c
  5103   00364E  EF2B  F01B         	goto	u3661
  5104   003652  EF2D  F01B         	goto	u3660
  5105   003656                     u3661:
  5106   003656  EF35  F01B         	goto	l4274
  5107   00365A                     u3660:
  5108   00365A  0E00               	movlw	0
  5109   00365C  6E06               	movwf	___fleq@ff2^0,c
  5110   00365E  0E00               	movlw	0
  5111   003660  6E07               	movwf	(___fleq@ff2+1)^0,c
  5112   003662  0E00               	movlw	0
  5113   003664  6E08               	movwf	(___fleq@ff2+2)^0,c
  5114   003666  0E00               	movlw	0
  5115   003668  6E09               	movwf	(___fleq@ff2+3)^0,c
  5116   00366A                     l4274:
  5117   00366A  5006               	movf	___fleq@ff2^0,w,c
  5118   00366C  1802               	xorwf	___fleq@ff1^0,w,c
  5119   00366E  E10F               	bnz	u3670
  5120   003670  5007               	movf	(___fleq@ff2+1)^0,w,c
  5121   003672  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5122   003674  E10C               	bnz	u3670
  5123   003676  5008               	movf	(___fleq@ff2+2)^0,w,c
  5124   003678  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5125   00367A  E109               	bnz	u3670
  5126   00367C  5009               	movf	(___fleq@ff2+3)^0,w,c
  5127   00367E  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5128   003680  B4D8               	btfsc	status,2,c
  5129   003682  EF45  F01B         	goto	u3671
  5130   003686  EF47  F01B         	goto	u3670
  5131   00368A                     u3671:
  5132   00368A  EF4A  F01B         	goto	l4278
  5133   00368E                     u3670:
  5134   00368E  90D8               	bcf	status,0,c
  5135   003690  EF4B  F01B         	goto	l925
  5136   003694                     l4278:
  5137   003694  80D8               	bsf	status,0,c
  5138   003696                     l925:
  5139   003696  0012               	return		;funcret
  5140   003698                     __end_of___fleq:
  5141                           	callstack 0
  5142                           
  5143 ;; *************** function ___fldiv *****************
  5144 ;; Defined at:
  5145 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;  b               4   26[COMRAM] unsigned char 
  5148 ;;  a               4   30[COMRAM] unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  grs             4   45[COMRAM] unsigned long 
  5151 ;;  rem             4   38[COMRAM] unsigned long 
  5152 ;;  new_exp         2   43[COMRAM] short 
  5153 ;;  aexp            1   50[COMRAM] unsigned char 
  5154 ;;  bexp            1   49[COMRAM] unsigned char 
  5155 ;;  sign            1   42[COMRAM] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  4   26[COMRAM] unsigned char 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5165 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5166 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5167 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5168 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5169 ;;Total ram usage:       25 bytes
  5170 ;; Hardware stack levels used: 1
  5171 ;; Hardware stack levels required when called: 1
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_convert_rgb2hue
  5176 ;;		_main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text15
  5181   001F2C                     __ptext15:
  5182                           	callstack 0
  5183   001F2C                     ___fldiv:
  5184                           	callstack 27
  5185   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5186   001F2E  0B80               	andlw	128
  5187   001F30  6E2B               	movwf	___fldiv@sign^0,c
  5188   001F32  501E               	movf	(___fldiv@b+3)^0,w,c
  5189   001F34  241E               	addwf	(___fldiv@b+3)^0,w,c
  5190   001F36  6E32               	movwf	___fldiv@bexp^0,c
  5191   001F38  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5192   001F3A  EFA1  F00F         	goto	u3231
  5193   001F3E  EFA3  F00F         	goto	u3230
  5194   001F42                     u3231:
  5195   001F42  EFA4  F00F         	goto	l3998
  5196   001F46                     u3230:
  5197   001F46  8032               	bsf	___fldiv@bexp^0,0,c
  5198   001F48                     l3998:
  5199   001F48  5032               	movf	___fldiv@bexp^0,w,c
  5200   001F4A  B4D8               	btfsc	status,2,c
  5201   001F4C  EFAA  F00F         	goto	u3241
  5202   001F50  EFAC  F00F         	goto	u3240
  5203   001F54                     u3241:
  5204   001F54  EFC1  F00F         	goto	l4008
  5205   001F58                     u3240:
  5206   001F58  2832               	incf	___fldiv@bexp^0,w,c
  5207   001F5A  A4D8               	btfss	status,2,c
  5208   001F5C  EFB2  F00F         	goto	u3251
  5209   001F60  EFB4  F00F         	goto	u3250
  5210   001F64                     u3251:
  5211   001F64  EFBC  F00F         	goto	l4004
  5212   001F68                     u3250:
  5213   001F68  0E00               	movlw	0
  5214   001F6A  6E1B               	movwf	___fldiv@b^0,c
  5215   001F6C  0E00               	movlw	0
  5216   001F6E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5217   001F70  0E00               	movlw	0
  5218   001F72  6E1D               	movwf	(___fldiv@b+2)^0,c
  5219   001F74  0E00               	movlw	0
  5220   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5221   001F78                     l4004:
  5222   001F78  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5223   001F7A  0E00               	movlw	0
  5224   001F7C  6E1E               	movwf	(___fldiv@b+3)^0,c
  5225   001F7E  EFC9  F00F         	goto	l4010
  5226   001F82                     l4008:
  5227   001F82  0E00               	movlw	0
  5228   001F84  6E1B               	movwf	___fldiv@b^0,c
  5229   001F86  0E00               	movlw	0
  5230   001F88  6E1C               	movwf	(___fldiv@b+1)^0,c
  5231   001F8A  0E00               	movlw	0
  5232   001F8C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5233   001F8E  0E00               	movlw	0
  5234   001F90  6E1E               	movwf	(___fldiv@b+3)^0,c
  5235   001F92                     l4010:
  5236   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5237   001F94  0B80               	andlw	128
  5238   001F96  1A2B               	xorwf	___fldiv@sign^0,f,c
  5239   001F98  5022               	movf	(___fldiv@a+3)^0,w,c
  5240   001F9A  2422               	addwf	(___fldiv@a+3)^0,w,c
  5241   001F9C  6E33               	movwf	___fldiv@aexp^0,c
  5242   001F9E  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5243   001FA0  EFD4  F00F         	goto	u3261
  5244   001FA4  EFD6  F00F         	goto	u3260
  5245   001FA8                     u3261:
  5246   001FA8  EFD7  F00F         	goto	l4018
  5247   001FAC                     u3260:
  5248   001FAC  8033               	bsf	___fldiv@aexp^0,0,c
  5249   001FAE                     l4018:
  5250   001FAE  5033               	movf	___fldiv@aexp^0,w,c
  5251   001FB0  B4D8               	btfsc	status,2,c
  5252   001FB2  EFDD  F00F         	goto	u3271
  5253   001FB6  EFDF  F00F         	goto	u3270
  5254   001FBA                     u3271:
  5255   001FBA  EFF4  F00F         	goto	l4028
  5256   001FBE                     u3270:
  5257   001FBE  2833               	incf	___fldiv@aexp^0,w,c
  5258   001FC0  A4D8               	btfss	status,2,c
  5259   001FC2  EFE5  F00F         	goto	u3281
  5260   001FC6  EFE7  F00F         	goto	u3280
  5261   001FCA                     u3281:
  5262   001FCA  EFEF  F00F         	goto	l4024
  5263   001FCE                     u3280:
  5264   001FCE  0E00               	movlw	0
  5265   001FD0  6E1F               	movwf	___fldiv@a^0,c
  5266   001FD2  0E00               	movlw	0
  5267   001FD4  6E20               	movwf	(___fldiv@a+1)^0,c
  5268   001FD6  0E00               	movlw	0
  5269   001FD8  6E21               	movwf	(___fldiv@a+2)^0,c
  5270   001FDA  0E00               	movlw	0
  5271   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5272   001FDE                     l4024:
  5273   001FDE  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5274   001FE0  0E00               	movlw	0
  5275   001FE2  6E22               	movwf	(___fldiv@a+3)^0,c
  5276   001FE4  EFFC  F00F         	goto	l4030
  5277   001FE8                     l4028:
  5278   001FE8  0E00               	movlw	0
  5279   001FEA  6E1F               	movwf	___fldiv@a^0,c
  5280   001FEC  0E00               	movlw	0
  5281   001FEE  6E20               	movwf	(___fldiv@a+1)^0,c
  5282   001FF0  0E00               	movlw	0
  5283   001FF2  6E21               	movwf	(___fldiv@a+2)^0,c
  5284   001FF4  0E00               	movlw	0
  5285   001FF6  6E22               	movwf	(___fldiv@a+3)^0,c
  5286   001FF8                     l4030:
  5287   001FF8  501F               	movf	___fldiv@a^0,w,c
  5288   001FFA  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5289   001FFC  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5290   001FFE  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5291   002000  A4D8               	btfss	status,2,c
  5292   002002  EF05  F010         	goto	u3291
  5293   002006  EF07  F010         	goto	u3290
  5294   00200A                     u3291:
  5295   00200A  EF1F  F010         	goto	l4042
  5296   00200E                     u3290:
  5297   00200E  0E00               	movlw	0
  5298   002010  6E1B               	movwf	___fldiv@b^0,c
  5299   002012  0E00               	movlw	0
  5300   002014  6E1C               	movwf	(___fldiv@b+1)^0,c
  5301   002016  0E00               	movlw	0
  5302   002018  6E1D               	movwf	(___fldiv@b+2)^0,c
  5303   00201A  0E00               	movlw	0
  5304   00201C  6E1E               	movwf	(___fldiv@b+3)^0,c
  5305   00201E  0E80               	movlw	128
  5306   002020  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5307   002022  0E7F               	movlw	127
  5308   002024  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5309   002026                     l4036:
  5310   002026  502B               	movf	___fldiv@sign^0,w,c
  5311   002028  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5312   00202A  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5313   00202E  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5314   002032  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5315   002036  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5316   00203A  EF62  F011         	goto	l1248
  5317   00203E                     l4042:
  5318   00203E  5032               	movf	___fldiv@bexp^0,w,c
  5319   002040  A4D8               	btfss	status,2,c
  5320   002042  EF25  F010         	goto	u3301
  5321   002046  EF27  F010         	goto	u3300
  5322   00204A                     u3301:
  5323   00204A  EF31  F010         	goto	l4050
  5324   00204E                     u3300:
  5325   00204E  0E00               	movlw	0
  5326   002050  6E1B               	movwf	?___fldiv^0,c
  5327   002052  0E00               	movlw	0
  5328   002054  6E1C               	movwf	(?___fldiv+1)^0,c
  5329   002056  0E00               	movlw	0
  5330   002058  6E1D               	movwf	(?___fldiv+2)^0,c
  5331   00205A  0E00               	movlw	0
  5332   00205C  6E1E               	movwf	(?___fldiv+3)^0,c
  5333   00205E  EF62  F011         	goto	l1248
  5334   002062                     l4050:
  5335   002062  5033               	movf	___fldiv@aexp^0,w,c
  5336   002064  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5337   002068  6A24               	clrf	(??___fldiv+1)^0,c
  5338   00206A  5E23               	subwf	??___fldiv^0,f,c
  5339   00206C  0E00               	movlw	0
  5340   00206E  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5341   002070  0E7F               	movlw	127
  5342   002072  2423               	addwf	??___fldiv^0,w,c
  5343   002074  6E2C               	movwf	___fldiv@new_exp^0,c
  5344   002076  0E00               	movlw	0
  5345   002078  2024               	addwfc	(??___fldiv+1)^0,w,c
  5346   00207A  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5347   00207C  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5348   002080  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5349   002084  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5350   002088  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5351   00208C  0E00               	movlw	0
  5352   00208E  6E1B               	movwf	___fldiv@b^0,c
  5353   002090  0E00               	movlw	0
  5354   002092  6E1C               	movwf	(___fldiv@b+1)^0,c
  5355   002094  0E00               	movlw	0
  5356   002096  6E1D               	movwf	(___fldiv@b+2)^0,c
  5357   002098  0E00               	movlw	0
  5358   00209A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5359   00209C  0E00               	movlw	0
  5360   00209E  6E2E               	movwf	___fldiv@grs^0,c
  5361   0020A0  0E00               	movlw	0
  5362   0020A2  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5363   0020A4  0E00               	movlw	0
  5364   0020A6  6E30               	movwf	(___fldiv@grs+2)^0,c
  5365   0020A8  0E00               	movlw	0
  5366   0020AA  6E31               	movwf	(___fldiv@grs+3)^0,c
  5367   0020AC  0E00               	movlw	0
  5368   0020AE  6E33               	movwf	___fldiv@aexp^0,c
  5369   0020B0  EF92  F010         	goto	l1250
  5370   0020B4                     l4060:
  5371   0020B4  5033               	movf	___fldiv@aexp^0,w,c
  5372   0020B6  B4D8               	btfsc	status,2,c
  5373   0020B8  EF60  F010         	goto	u3311
  5374   0020BC  EF62  F010         	goto	u3310
  5375   0020C0                     u3311:
  5376   0020C0  EF79  F010         	goto	l4068
  5377   0020C4                     u3310:
  5378   0020C4  90D8               	bcf	status,0,c
  5379   0020C6  3627               	rlcf	___fldiv@rem^0,f,c
  5380   0020C8  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5381   0020CA  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5382   0020CC  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5383   0020CE  90D8               	bcf	status,0,c
  5384   0020D0  361B               	rlcf	___fldiv@b^0,f,c
  5385   0020D2  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5386   0020D4  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5387   0020D6  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5388   0020D8  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5389   0020DA  EF71  F010         	goto	u3321
  5390   0020DE  EF73  F010         	goto	u3320
  5391   0020E2                     u3321:
  5392   0020E2  EF74  F010         	goto	l1253
  5393   0020E6                     u3320:
  5394   0020E6  801B               	bsf	___fldiv@b^0,0,c
  5395   0020E8                     l1253:
  5396   0020E8  90D8               	bcf	status,0,c
  5397   0020EA  362E               	rlcf	___fldiv@grs^0,f,c
  5398   0020EC  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5399   0020EE  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5400   0020F0  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5401   0020F2                     l4068:
  5402   0020F2  501F               	movf	___fldiv@a^0,w,c
  5403   0020F4  5C27               	subwf	___fldiv@rem^0,w,c
  5404   0020F6  5020               	movf	(___fldiv@a+1)^0,w,c
  5405   0020F8  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5406   0020FA  5021               	movf	(___fldiv@a+2)^0,w,c
  5407   0020FC  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5408   0020FE  5022               	movf	(___fldiv@a+3)^0,w,c
  5409   002100  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5410   002102  A0D8               	btfss	status,0,c
  5411   002104  EF86  F010         	goto	u3331
  5412   002108  EF88  F010         	goto	u3330
  5413   00210C                     u3331:
  5414   00210C  EF91  F010         	goto	l4074
  5415   002110                     u3330:
  5416   002110  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5417   002112  501F               	movf	___fldiv@a^0,w,c
  5418   002114  5E27               	subwf	___fldiv@rem^0,f,c
  5419   002116  5020               	movf	(___fldiv@a+1)^0,w,c
  5420   002118  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5421   00211A  5021               	movf	(___fldiv@a+2)^0,w,c
  5422   00211C  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5423   00211E  5022               	movf	(___fldiv@a+3)^0,w,c
  5424   002120  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5425   002122                     l4074:
  5426   002122  2A33               	incf	___fldiv@aexp^0,f,c
  5427   002124                     l1250:
  5428   002124  0E19               	movlw	25
  5429   002126  6433               	cpfsgt	___fldiv@aexp^0,c
  5430   002128  EF98  F010         	goto	u3341
  5431   00212C  EF9A  F010         	goto	u3340
  5432   002130                     u3341:
  5433   002130  EF5A  F010         	goto	l4060
  5434   002134                     u3340:
  5435   002134  5027               	movf	___fldiv@rem^0,w,c
  5436   002136  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5437   002138  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5438   00213A  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5439   00213C  B4D8               	btfsc	status,2,c
  5440   00213E  EFA3  F010         	goto	u3351
  5441   002142  EFA5  F010         	goto	u3350
  5442   002146                     u3351:
  5443   002146  EFBD  F010         	goto	l4086
  5444   00214A                     u3350:
  5445   00214A  802E               	bsf	___fldiv@grs^0,0,c
  5446   00214C  EFBD  F010         	goto	l4086
  5447   002150                     l4080:
  5448   002150  90D8               	bcf	status,0,c
  5449   002152  361B               	rlcf	___fldiv@b^0,f,c
  5450   002154  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5451   002156  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5452   002158  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5453   00215A  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5454   00215C  EFB2  F010         	goto	u3361
  5455   002160  EFB4  F010         	goto	u3360
  5456   002164                     u3361:
  5457   002164  EFB5  F010         	goto	l1259
  5458   002168                     u3360:
  5459   002168  801B               	bsf	___fldiv@b^0,0,c
  5460   00216A                     l1259:
  5461   00216A  90D8               	bcf	status,0,c
  5462   00216C  362E               	rlcf	___fldiv@grs^0,f,c
  5463   00216E  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5464   002170  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5465   002172  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5466   002174  062C               	decf	___fldiv@new_exp^0,f,c
  5467   002176  A0D8               	btfss	status,0,c
  5468   002178  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5469   00217A                     l4086:
  5470   00217A  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5471   00217C  EFC2  F010         	goto	u3371
  5472   002180  EFC4  F010         	goto	u3370
  5473   002184                     u3371:
  5474   002184  EFA8  F010         	goto	l4080
  5475   002188                     u3370:
  5476   002188  0E00               	movlw	0
  5477   00218A  6E33               	movwf	___fldiv@aexp^0,c
  5478   00218C  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5479   00218E  EFCB  F010         	goto	u3381
  5480   002192  EFCD  F010         	goto	u3380
  5481   002196                     u3381:
  5482   002196  EFF1  F010         	goto	l1261
  5483   00219A                     u3380:
  5484   00219A  0EFF               	movlw	255
  5485   00219C  142E               	andwf	___fldiv@grs^0,w,c
  5486   00219E  6E23               	movwf	??___fldiv^0,c
  5487   0021A0  0EFF               	movlw	255
  5488   0021A2  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5489   0021A4  6E24               	movwf	(??___fldiv+1)^0,c
  5490   0021A6  0EFF               	movlw	255
  5491   0021A8  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5492   0021AA  6E25               	movwf	(??___fldiv+2)^0,c
  5493   0021AC  0E7F               	movlw	127
  5494   0021AE  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5495   0021B0  6E26               	movwf	(??___fldiv+3)^0,c
  5496   0021B2  5023               	movf	??___fldiv^0,w,c
  5497   0021B4  1024               	iorwf	(??___fldiv+1)^0,w,c
  5498   0021B6  1025               	iorwf	(??___fldiv+2)^0,w,c
  5499   0021B8  1026               	iorwf	(??___fldiv+3)^0,w,c
  5500   0021BA  B4D8               	btfsc	status,2,c
  5501   0021BC  EFE2  F010         	goto	u3391
  5502   0021C0  EFE4  F010         	goto	u3390
  5503   0021C4                     u3391:
  5504   0021C4  EFE8  F010         	goto	l1262
  5505   0021C8                     u3390:
  5506   0021C8                     l4094:
  5507   0021C8  0E01               	movlw	1
  5508   0021CA  6E33               	movwf	___fldiv@aexp^0,c
  5509   0021CC  EFF1  F010         	goto	l1261
  5510   0021D0                     l1262:
  5511   0021D0  A01B               	btfss	___fldiv@b^0,0,c
  5512   0021D2  EFED  F010         	goto	u3401
  5513   0021D6  EFEF  F010         	goto	u3400
  5514   0021DA                     u3401:
  5515   0021DA  EFF1  F010         	goto	l1261
  5516   0021DE                     u3400:
  5517   0021DE  EFE4  F010         	goto	l4094
  5518   0021E2                     l1261:
  5519   0021E2  5033               	movf	___fldiv@aexp^0,w,c
  5520   0021E4  B4D8               	btfsc	status,2,c
  5521   0021E6  EFF7  F010         	goto	u3411
  5522   0021EA  EFF9  F010         	goto	u3410
  5523   0021EE                     u3411:
  5524   0021EE  EF1D  F011         	goto	l4106
  5525   0021F2                     u3410:
  5526   0021F2  0E01               	movlw	1
  5527   0021F4  261B               	addwf	___fldiv@b^0,f,c
  5528   0021F6  0E00               	movlw	0
  5529   0021F8  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5530   0021FA  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5531   0021FC  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5532   0021FE  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5533   002200  EF04  F011         	goto	u3421
  5534   002204  EF06  F011         	goto	u3420
  5535   002208                     u3421:
  5536   002208  EF1D  F011         	goto	l4106
  5537   00220C                     u3420:
  5538   00220C  C01B  F023         	movff	___fldiv@b,??___fldiv
  5539   002210  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5540   002214  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5541   002218  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5542   00221C  3426               	rlcf	(??___fldiv+3)^0,w,c
  5543   00221E  3226               	rrcf	(??___fldiv+3)^0,f,c
  5544   002220  3225               	rrcf	(??___fldiv+2)^0,f,c
  5545   002222  3224               	rrcf	(??___fldiv+1)^0,f,c
  5546   002224  3223               	rrcf	??___fldiv^0,f,c
  5547   002226  C023  F01B         	movff	??___fldiv,___fldiv@b
  5548   00222A  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5549   00222E  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5550   002232  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5551   002236  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5552   002238  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5553   00223A                     l4106:
  5554   00223A  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5555   00223C  EF28  F011         	goto	u3431
  5556   002240  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5557   002242  E108               	bnz	u3430
  5558   002244  282C               	incf	___fldiv@new_exp^0,w,c
  5559   002246  A0D8               	btfss	status,0,c
  5560   002248  EF28  F011         	goto	u3431
  5561   00224C  EF2A  F011         	goto	u3430
  5562   002250                     u3431:
  5563   002250  EF35  F011         	goto	l4110
  5564   002254                     u3430:
  5565   002254  0E00               	movlw	0
  5566   002256  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5567   002258  682C               	setf	___fldiv@new_exp^0,c
  5568   00225A  0E00               	movlw	0
  5569   00225C  6E1B               	movwf	___fldiv@b^0,c
  5570   00225E  0E00               	movlw	0
  5571   002260  6E1C               	movwf	(___fldiv@b+1)^0,c
  5572   002262  0E00               	movlw	0
  5573   002264  6E1D               	movwf	(___fldiv@b+2)^0,c
  5574   002266  0E00               	movlw	0
  5575   002268  6E1E               	movwf	(___fldiv@b+3)^0,c
  5576   00226A                     l4110:
  5577   00226A  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5578   00226C  EF42  F011         	goto	u3440
  5579   002270  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5580   002272  E106               	bnz	u3441
  5581   002274  042C               	decf	___fldiv@new_exp^0,w,c
  5582   002276  B0D8               	btfsc	status,0,c
  5583   002278  EF40  F011         	goto	u3441
  5584   00227C  EF42  F011         	goto	u3440
  5585   002280                     u3441:
  5586   002280  EF50  F011         	goto	l4114
  5587   002284                     u3440:
  5588   002284  0E00               	movlw	0
  5589   002286  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5590   002288  0E00               	movlw	0
  5591   00228A  6E2C               	movwf	___fldiv@new_exp^0,c
  5592   00228C  0E00               	movlw	0
  5593   00228E  6E1B               	movwf	___fldiv@b^0,c
  5594   002290  0E00               	movlw	0
  5595   002292  6E1C               	movwf	(___fldiv@b+1)^0,c
  5596   002294  0E00               	movlw	0
  5597   002296  6E1D               	movwf	(___fldiv@b+2)^0,c
  5598   002298  0E00               	movlw	0
  5599   00229A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5600   00229C  0E00               	movlw	0
  5601   00229E  6E2B               	movwf	___fldiv@sign^0,c
  5602   0022A0                     l4114:
  5603   0022A0  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5604   0022A4  A032               	btfss	___fldiv@bexp^0,0,c
  5605   0022A6  EF57  F011         	goto	u3451
  5606   0022AA  EF59  F011         	goto	u3450
  5607   0022AE                     u3451:
  5608   0022AE  EF5C  F011         	goto	l4120
  5609   0022B2                     u3450:
  5610   0022B2  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5611   0022B4  EF5D  F011         	goto	l4122
  5612   0022B8                     l4120:
  5613   0022B8  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5614   0022BA                     l4122:
  5615   0022BA  90D8               	bcf	status,0,c
  5616   0022BC  3032               	rrcf	___fldiv@bexp^0,w,c
  5617   0022BE  6E1E               	movwf	(___fldiv@b+3)^0,c
  5618   0022C0  EF13  F010         	goto	l4036
  5619   0022C4                     l1248:
  5620   0022C4  0012               	return		;funcret
  5621   0022C6                     __end_of___fldiv:
  5622                           	callstack 0
  5623                           
  5624 ;; *************** function _initUSART4 *****************
  5625 ;; Defined at:
  5626 ;;		line 14 in file "serial.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;		None
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;		None
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;Total ram usage:        0 bytes
  5645 ;; Hardware stack levels used: 1
  5646 ;; Hardware stack levels required when called: 1
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_main
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text16
  5655   0043AA                     __ptext16:
  5656                           	callstack 0
  5657   0043AA                     _initUSART4:
  5658                           	callstack 29
  5659   0043AA                     
  5660                           ;serial.c: 15:     RC0PPS = 0x12;
  5661   0043AA  0E12               	movlw	18
  5662   0043AC  010E               	movlb	14	; () banked
  5663   0043AE  6F62               	movwf	98,b	;volatile
  5664                           
  5665                           ;serial.c: 16:     RX4PPS = 0x11;
  5666   0043B0  0E11               	movlw	17
  5667   0043B2  6F15               	movwf	21,b	;volatile
  5668   0043B4                     
  5669                           ; BSR set to: 14
  5670                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5671   0043B4  97E9               	bcf	233,3,b	;volatile
  5672   0043B6                     
  5673                           ; BSR set to: 14
  5674                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5675   0043B6  95E8               	bcf	232,2,b	;volatile
  5676                           
  5677                           ;serial.c: 19:     SP4BRGL = 51;
  5678   0043B8  0E33               	movlw	51
  5679   0043BA  6FE5               	movwf	229,b	;volatile
  5680                           
  5681                           ;serial.c: 20:     SP4BRGH = 0;
  5682   0043BC  0E00               	movlw	0
  5683   0043BE  6FE6               	movwf	230,b	;volatile
  5684   0043C0                     
  5685                           ; BSR set to: 14
  5686                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5687   0043C0  89E7               	bsf	231,4,b	;volatile
  5688   0043C2                     
  5689                           ; BSR set to: 14
  5690                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5691   0043C2  8BE8               	bsf	232,5,b	;volatile
  5692   0043C4                     
  5693                           ; BSR set to: 14
  5694                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5695   0043C4  8FE7               	bsf	231,7,b	;volatile
  5696   0043C6                     
  5697                           ; BSR set to: 14
  5698   0043C6  0012               	return		;funcret
  5699   0043C8                     __end_of_initUSART4:
  5700                           	callstack 0
  5701                           
  5702 ;; *************** function _initDCmotorsPWM *****************
  5703 ;; Defined at:
  5704 ;;		line 5 in file "dc_motor.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;		None
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;Total ram usage:        2 bytes
  5723 ;; Hardware stack levels used: 1
  5724 ;; Hardware stack levels required when called: 1
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_main
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text17
  5733   0037D8                     __ptext17:
  5734                           	callstack 0
  5735   0037D8                     _initDCmotorsPWM:
  5736                           	callstack 29
  5737   0037D8                     
  5738                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5739   0037D8  9485               	bcf	133,2,c	;volatile
  5740                           
  5741                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5742   0037DA  9E83               	bcf	131,7,c	;volatile
  5743                           
  5744                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5745   0037DC  9885               	bcf	133,4,c	;volatile
  5746                           
  5747                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5748   0037DE  9C87               	bcf	135,6,c	;volatile
  5749                           
  5750                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5751   0037E0  947D               	bcf	125,2,c	;volatile
  5752                           
  5753                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5754   0037E2  9E7B               	bcf	123,7,c	;volatile
  5755                           
  5756                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5757   0037E4  987D               	bcf	125,4,c	;volatile
  5758                           
  5759                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5760   0037E6  9C7F               	bcf	127,6,c	;volatile
  5761   0037E8                     
  5762                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5763   0037E8  0E05               	movlw	5
  5764   0037EA  010E               	movlb	14	; () banked
  5765   0037EC  6F74               	movwf	116,b	;volatile
  5766                           
  5767                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5768   0037EE  0E06               	movlw	6
  5769   0037F0  6F76               	movwf	118,b	;volatile
  5770                           
  5771                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5772   0037F2  0E07               	movlw	7
  5773   0037F4  6F69               	movwf	105,b	;volatile
  5774                           
  5775                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5776   0037F6  0E08               	movlw	8
  5777   0037F8  6F88               	movwf	136,b	;volatile
  5778                           
  5779                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5780   0037FA  50BD               	movf	189,w,c	;volatile
  5781   0037FC  0B8F               	andlw	-113
  5782   0037FE  0940               	iorlw	64
  5783   003800  6EBD               	movwf	189,c	;volatile
  5784                           
  5785                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5786   003802  0EE0               	movlw	-32
  5787   003804  16BE               	andwf	190,f,c	;volatile
  5788                           
  5789                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5790   003806  50BF               	movf	191,w,c	;volatile
  5791   003808  0BF0               	andlw	-16
  5792   00380A  0901               	iorlw	1
  5793   00380C  6EBF               	movwf	191,c	;volatile
  5794   00380E                     
  5795                           ; BSR set to: 14
  5796                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5797   00380E  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5798   003812                     
  5799                           ; BSR set to: 14
  5800                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5801   003812  8EBD               	bsf	189,7,c	;volatile
  5802                           
  5803                           ;dc_motor.c: 35:     CCPR1H=0;
  5804   003814  0E00               	movlw	0
  5805   003816  6EAA               	movwf	170,c	;volatile
  5806                           
  5807                           ;dc_motor.c: 36:     CCPR2H=0;
  5808   003818  0E00               	movlw	0
  5809   00381A  6EA6               	movwf	166,c	;volatile
  5810                           
  5811                           ;dc_motor.c: 37:     CCPR3H=0;
  5812   00381C  0E00               	movlw	0
  5813   00381E  010F               	movlb	15	; () banked
  5814   003820  6F25               	movwf	37,b	;volatile
  5815                           
  5816                           ;dc_motor.c: 38:     CCPR4H=0;
  5817   003822  0E00               	movlw	0
  5818   003824  6F21               	movwf	33,b	;volatile
  5819                           
  5820                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5821   003826  0EFC               	movlw	-4
  5822   003828  16AD               	andwf	173,f,c	;volatile
  5823                           
  5824                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5825   00382A  0EF3               	movlw	-13
  5826   00382C  16AD               	andwf	173,f,c	;volatile
  5827                           
  5828                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5829   00382E  0ECF               	movlw	-49
  5830   003830  16AD               	andwf	173,f,c	;volatile
  5831                           
  5832                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5833   003832  0E3F               	movlw	-193
  5834   003834  16AD               	andwf	173,f,c	;volatile
  5835   003836                     
  5836                           ; BSR set to: 15
  5837                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5838   003836  88AB               	bsf	171,4,c	;volatile
  5839                           
  5840                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5841   003838  50AB               	movf	171,w,c	;volatile
  5842   00383A  0BF0               	andlw	-16
  5843   00383C  090C               	iorlw	12
  5844   00383E  6EAB               	movwf	171,c	;volatile
  5845   003840                     
  5846                           ; BSR set to: 15
  5847                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5848   003840  8EAB               	bsf	171,7,c	;volatile
  5849   003842                     
  5850                           ; BSR set to: 15
  5851                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5852   003842  88A7               	bsf	167,4,c	;volatile
  5853                           
  5854                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5855   003844  50A7               	movf	167,w,c	;volatile
  5856   003846  0BF0               	andlw	-16
  5857   003848  090C               	iorlw	12
  5858   00384A  6EA7               	movwf	167,c	;volatile
  5859   00384C                     
  5860                           ; BSR set to: 15
  5861                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5862   00384C  8EA7               	bsf	167,7,c	;volatile
  5863   00384E                     
  5864                           ; BSR set to: 15
  5865                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5866   00384E  8926               	bsf	38,4,b	;volatile
  5867                           
  5868                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5869   003850  5126               	movf	38,w,b	;volatile
  5870   003852  0BF0               	andlw	-16
  5871   003854  090C               	iorlw	12
  5872   003856  6F26               	movwf	38,b	;volatile
  5873   003858                     
  5874                           ; BSR set to: 15
  5875                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5876   003858  8F26               	bsf	38,7,b	;volatile
  5877   00385A                     
  5878                           ; BSR set to: 15
  5879                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5880   00385A  8922               	bsf	34,4,b	;volatile
  5881                           
  5882                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5883   00385C  5122               	movf	34,w,b	;volatile
  5884   00385E  0BF0               	andlw	-16
  5885   003860  090C               	iorlw	12
  5886   003862  6F22               	movwf	34,b	;volatile
  5887   003864                     
  5888                           ; BSR set to: 15
  5889                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5890   003864  8F22               	bsf	34,7,b	;volatile
  5891   003866                     
  5892                           ; BSR set to: 15
  5893   003866  0012               	return		;funcret
  5894   003868                     __end_of_initDCmotorsPWM:
  5895                           	callstack 0
  5896                           
  5897 ;; *************** function _get16bitTMR0val *****************
  5898 ;; Defined at:
  5899 ;;		line 32 in file "timers.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;		None
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  combined_val    2    7[COMRAM] unsigned int 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  2    1[COMRAM] unsigned int 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5914 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5915 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;Total ram usage:        8 bytes
  5918 ;; Hardware stack levels used: 1
  5919 ;; Hardware stack levels required when called: 1
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_main
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text18
  5928   004368                     __ptext18:
  5929                           	callstack 0
  5930   004368                     _get16bitTMR0val:
  5931                           	callstack 29
  5932   004368                     
  5933                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  5934   004368  50D4               	movf	212,w,c	;volatile
  5935   00436A  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  5936   00436C  6A04               	clrf	??_get16bitTMR0val^0,c
  5937   00436E  50D3               	movf	211,w,c	;volatile
  5938   004370  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  5939   004372  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  5940   004374  5004               	movf	??_get16bitTMR0val^0,w,c
  5941   004376  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  5942   004378  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  5943   00437A  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  5944   00437C  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  5945   00437E  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  5946   004380                     
  5947                           ;timers.c: 36:     return combined_value;
  5948   004380  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  5949   004384  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  5950   004388  0012               	return		;funcret
  5951   00438A                     __end_of_get16bitTMR0val:
  5952                           	callstack 0
  5953                           
  5954 ;; *************** function _decision *****************
  5955 ;; Defined at:
  5956 ;;		line 322 in file "color.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  hue             2   70[COMRAM] unsigned int 
  5959 ;;  path_length     2   72[COMRAM] unsigned int 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;  color           2   74[COMRAM] unsigned int 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;Total ram usage:        6 bytes
  5976 ;; Hardware stack levels used: 1
  5977 ;; Hardware stack levels required when called: 10
  5978 ;; This function calls:
  5979 ;;		_moveBlue
  5980 ;;		_moveGreen
  5981 ;;		_moveLightBlue
  5982 ;;		_moveOrange
  5983 ;;		_movePink
  5984 ;;		_moveRed
  5985 ;;		_moveYellow
  5986 ;;		_send2USART
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text19
  5993   00254A                     __ptext19:
  5994                           	callstack 0
  5995   00254A                     _decision:
  5996                           	callstack 20
  5997   00254A                     
  5998                           ;color.c: 327:     unsigned int color;;color.c: 329:     if (hue<=10 || hue>=355) {
  5999   00254A  5048               	movf	(decision@hue+1)^0,w,c
  6000   00254C  E109               	bnz	u5120
  6001   00254E  0E0B               	movlw	11
  6002   002550  5C47               	subwf	decision@hue^0,w,c
  6003   002552  A0D8               	btfss	status,0,c
  6004   002554  EFAE  F012         	goto	u5121
  6005   002558  EFB0  F012         	goto	u5120
  6006   00255C                     u5121:
  6007   00255C  EFBB  F012         	goto	l5776
  6008   002560                     u5120:
  6009   002560  0E63               	movlw	99
  6010   002562  5C47               	subwf	decision@hue^0,w,c
  6011   002564  0E01               	movlw	1
  6012   002566  5848               	subwfb	(decision@hue+1)^0,w,c
  6013   002568  A0D8               	btfss	status,0,c
  6014   00256A  EFB9  F012         	goto	u5131
  6015   00256E  EFBB  F012         	goto	u5130
  6016   002572                     u5131:
  6017   002572  EFCB  F012         	goto	l5780
  6018   002576                     u5130:
  6019   002576                     l5776:
  6020                           
  6021                           ;color.c: 330:         moveRed(&motorL, &motorR, path_length);
  6022   002576  0ED4               	movlw	low _motorL
  6023   002578  6E1D               	movwf	moveRed@mL^0,c
  6024   00257A  0ECB               	movlw	low _motorR
  6025   00257C  6E1E               	movwf	moveRed@mR^0,c
  6026   00257E  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6027   002582  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6028   002586  ECA4  F01E         	call	_moveRed	;wreg free
  6029   00258A                     
  6030                           ;color.c: 331:         color = 1;
  6031   00258A  0E00               	movlw	0
  6032   00258C  6E4C               	movwf	(decision@color+1)^0,c
  6033   00258E  0E01               	movlw	1
  6034   002590  6E4B               	movwf	decision@color^0,c
  6035                           
  6036                           ;color.c: 332:     } else if (hue>=105 && hue<=130){
  6037   002592  EFAF  F013         	goto	l5828
  6038   002596                     l5780:
  6039   002596  5048               	movf	(decision@hue+1)^0,w,c
  6040   002598  E109               	bnz	u5140
  6041   00259A  0E69               	movlw	105
  6042   00259C  5C47               	subwf	decision@hue^0,w,c
  6043   00259E  A0D8               	btfss	status,0,c
  6044   0025A0  EFD4  F012         	goto	u5141
  6045   0025A4  EFD6  F012         	goto	u5140
  6046   0025A8                     u5141:
  6047   0025A8  EFF1  F012         	goto	l5788
  6048   0025AC                     u5140:
  6049   0025AC  5048               	movf	(decision@hue+1)^0,w,c
  6050   0025AE  E107               	bnz	u5151
  6051   0025B0  0E83               	movlw	131
  6052   0025B2  5C47               	subwf	decision@hue^0,w,c
  6053   0025B4  B0D8               	btfsc	status,0,c
  6054   0025B6  EFDF  F012         	goto	u5151
  6055   0025BA  EFE1  F012         	goto	u5150
  6056   0025BE                     u5151:
  6057   0025BE  EFF1  F012         	goto	l5788
  6058   0025C2                     u5150:
  6059   0025C2                     
  6060                           ;color.c: 333:         moveGreen(&motorL, &motorR, path_length);
  6061   0025C2  0ED4               	movlw	low _motorL
  6062   0025C4  6E1D               	movwf	moveGreen@mL^0,c
  6063   0025C6  0ECB               	movlw	low _motorR
  6064   0025C8  6E1E               	movwf	moveGreen@mR^0,c
  6065   0025CA  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6066   0025CE  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6067   0025D2  EC34  F01F         	call	_moveGreen	;wreg free
  6068   0025D6                     
  6069                           ;color.c: 334:         color = 2;
  6070   0025D6  0E00               	movlw	0
  6071   0025D8  6E4C               	movwf	(decision@color+1)^0,c
  6072   0025DA  0E02               	movlw	2
  6073   0025DC  6E4B               	movwf	decision@color^0,c
  6074                           
  6075                           ;color.c: 335:     } else if (hue>=230 && hue<=240){
  6076   0025DE  EFAF  F013         	goto	l5828
  6077   0025E2                     l5788:
  6078   0025E2  5048               	movf	(decision@hue+1)^0,w,c
  6079   0025E4  E109               	bnz	u5160
  6080   0025E6  0EE6               	movlw	230
  6081   0025E8  5C47               	subwf	decision@hue^0,w,c
  6082   0025EA  A0D8               	btfss	status,0,c
  6083   0025EC  EFFA  F012         	goto	u5161
  6084   0025F0  EFFC  F012         	goto	u5160
  6085   0025F4                     u5161:
  6086   0025F4  EF17  F013         	goto	l5796
  6087   0025F8                     u5160:
  6088   0025F8  5048               	movf	(decision@hue+1)^0,w,c
  6089   0025FA  E107               	bnz	u5171
  6090   0025FC  0EF1               	movlw	241
  6091   0025FE  5C47               	subwf	decision@hue^0,w,c
  6092   002600  B0D8               	btfsc	status,0,c
  6093   002602  EF05  F013         	goto	u5171
  6094   002606  EF07  F013         	goto	u5170
  6095   00260A                     u5171:
  6096   00260A  EF17  F013         	goto	l5796
  6097   00260E                     u5170:
  6098   00260E                     
  6099                           ;color.c: 336:         moveBlue(&motorL,&motorR, path_length);
  6100   00260E  0ED4               	movlw	low _motorL
  6101   002610  6E1D               	movwf	moveBlue@mL^0,c
  6102   002612  0ECB               	movlw	low _motorR
  6103   002614  6E1E               	movwf	moveBlue@mR^0,c
  6104   002616  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6105   00261A  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6106   00261E  EC58  F01F         	call	_moveBlue	;wreg free
  6107   002622                     
  6108                           ;color.c: 337:         color = 3;
  6109   002622  0E00               	movlw	0
  6110   002624  6E4C               	movwf	(decision@color+1)^0,c
  6111   002626  0E03               	movlw	3
  6112   002628  6E4B               	movwf	decision@color^0,c
  6113                           
  6114                           ;color.c: 338:     } else if (hue>=216 && hue<=221){
  6115   00262A  EFAF  F013         	goto	l5828
  6116   00262E                     l5796:
  6117   00262E  5048               	movf	(decision@hue+1)^0,w,c
  6118   002630  E109               	bnz	u5180
  6119   002632  0ED8               	movlw	216
  6120   002634  5C47               	subwf	decision@hue^0,w,c
  6121   002636  A0D8               	btfss	status,0,c
  6122   002638  EF20  F013         	goto	u5181
  6123   00263C  EF22  F013         	goto	u5180
  6124   002640                     u5181:
  6125   002640  EF3D  F013         	goto	l5804
  6126   002644                     u5180:
  6127   002644  5048               	movf	(decision@hue+1)^0,w,c
  6128   002646  E107               	bnz	u5191
  6129   002648  0EDE               	movlw	222
  6130   00264A  5C47               	subwf	decision@hue^0,w,c
  6131   00264C  B0D8               	btfsc	status,0,c
  6132   00264E  EF2B  F013         	goto	u5191
  6133   002652  EF2D  F013         	goto	u5190
  6134   002656                     u5191:
  6135   002656  EF3D  F013         	goto	l5804
  6136   00265A                     u5190:
  6137   00265A                     
  6138                           ;color.c: 339:         moveLightBlue(&motorL,&motorR, path_length);
  6139   00265A  0ED4               	movlw	low _motorL
  6140   00265C  6E1D               	movwf	moveLightBlue@mL^0,c
  6141   00265E  0ECB               	movlw	low _motorR
  6142   002660  6E1E               	movwf	moveLightBlue@mR^0,c
  6143   002662  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6144   002666  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6145   00266A  EC10  F01F         	call	_moveLightBlue	;wreg free
  6146   00266E                     
  6147                           ;color.c: 340:         color = 4;
  6148   00266E  0E00               	movlw	0
  6149   002670  6E4C               	movwf	(decision@color+1)^0,c
  6150   002672  0E04               	movlw	4
  6151   002674  6E4B               	movwf	decision@color^0,c
  6152                           
  6153                           ;color.c: 341:     } else if (hue>=302 && hue<=346){
  6154   002676  EFAF  F013         	goto	l5828
  6155   00267A                     l5804:
  6156   00267A  0E2E               	movlw	46
  6157   00267C  5C47               	subwf	decision@hue^0,w,c
  6158   00267E  0E01               	movlw	1
  6159   002680  5848               	subwfb	(decision@hue+1)^0,w,c
  6160   002682  A0D8               	btfss	status,0,c
  6161   002684  EF46  F013         	goto	u5201
  6162   002688  EF48  F013         	goto	u5200
  6163   00268C                     u5201:
  6164   00268C  EF63  F013         	goto	l5812
  6165   002690                     u5200:
  6166   002690  0E5B               	movlw	91
  6167   002692  5C47               	subwf	decision@hue^0,w,c
  6168   002694  0E01               	movlw	1
  6169   002696  5848               	subwfb	(decision@hue+1)^0,w,c
  6170   002698  B0D8               	btfsc	status,0,c
  6171   00269A  EF51  F013         	goto	u5211
  6172   00269E  EF53  F013         	goto	u5210
  6173   0026A2                     u5211:
  6174   0026A2  EF63  F013         	goto	l5812
  6175   0026A6                     u5210:
  6176   0026A6                     
  6177                           ;color.c: 342:         moveYellow(&motorL,&motorR, path_length);
  6178   0026A6  0ED4               	movlw	low _motorL
  6179   0026A8  6E1D               	movwf	moveYellow@mL^0,c
  6180   0026AA  0ECB               	movlw	low _motorR
  6181   0026AC  6E1E               	movwf	moveYellow@mR^0,c
  6182   0026AE  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6183   0026B2  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6184   0026B6  EC80  F01E         	call	_moveYellow	;wreg free
  6185   0026BA                     
  6186                           ;color.c: 343:         color = 5;
  6187   0026BA  0E00               	movlw	0
  6188   0026BC  6E4C               	movwf	(decision@color+1)^0,c
  6189   0026BE  0E05               	movlw	5
  6190   0026C0  6E4B               	movwf	decision@color^0,c
  6191                           
  6192                           ;color.c: 344:     } else if (hue>14 && hue<=35){
  6193   0026C2  EFAF  F013         	goto	l5828
  6194   0026C6                     l5812:
  6195   0026C6  5048               	movf	(decision@hue+1)^0,w,c
  6196   0026C8  E109               	bnz	u5220
  6197   0026CA  0E0F               	movlw	15
  6198   0026CC  5C47               	subwf	decision@hue^0,w,c
  6199   0026CE  A0D8               	btfss	status,0,c
  6200   0026D0  EF6C  F013         	goto	u5221
  6201   0026D4  EF6E  F013         	goto	u5220
  6202   0026D8                     u5221:
  6203   0026D8  EF89  F013         	goto	l5820
  6204   0026DC                     u5220:
  6205   0026DC  5048               	movf	(decision@hue+1)^0,w,c
  6206   0026DE  E107               	bnz	u5231
  6207   0026E0  0E24               	movlw	36
  6208   0026E2  5C47               	subwf	decision@hue^0,w,c
  6209   0026E4  B0D8               	btfsc	status,0,c
  6210   0026E6  EF77  F013         	goto	u5231
  6211   0026EA  EF79  F013         	goto	u5230
  6212   0026EE                     u5231:
  6213   0026EE  EF89  F013         	goto	l5820
  6214   0026F2                     u5230:
  6215   0026F2                     
  6216                           ;color.c: 345:         moveOrange(&motorL,&motorR, path_length);
  6217   0026F2  0ED4               	movlw	low _motorL
  6218   0026F4  6E1D               	movwf	moveOrange@mL^0,c
  6219   0026F6  0ECB               	movlw	low _motorR
  6220   0026F8  6E1E               	movwf	moveOrange@mR^0,c
  6221   0026FA  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6222   0026FE  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6223   002702  ECEC  F01E         	call	_moveOrange	;wreg free
  6224   002706                     
  6225                           ;color.c: 346:         color= 6;
  6226   002706  0E00               	movlw	0
  6227   002708  6E4C               	movwf	(decision@color+1)^0,c
  6228   00270A  0E06               	movlw	6
  6229   00270C  6E4B               	movwf	decision@color^0,c
  6230                           
  6231                           ;color.c: 347:     } else if (hue>=244 && hue<=251){
  6232   00270E  EFAF  F013         	goto	l5828
  6233   002712                     l5820:
  6234   002712  5048               	movf	(decision@hue+1)^0,w,c
  6235   002714  E109               	bnz	u5240
  6236   002716  0EF4               	movlw	244
  6237   002718  5C47               	subwf	decision@hue^0,w,c
  6238   00271A  A0D8               	btfss	status,0,c
  6239   00271C  EF92  F013         	goto	u5241
  6240   002720  EF94  F013         	goto	u5240
  6241   002724                     u5241:
  6242   002724  EFAF  F013         	goto	l158
  6243   002728                     u5240:
  6244   002728  5048               	movf	(decision@hue+1)^0,w,c
  6245   00272A  E107               	bnz	u5251
  6246   00272C  0EFC               	movlw	252
  6247   00272E  5C47               	subwf	decision@hue^0,w,c
  6248   002730  B0D8               	btfsc	status,0,c
  6249   002732  EF9D  F013         	goto	u5251
  6250   002736  EF9F  F013         	goto	u5250
  6251   00273A                     u5251:
  6252   00273A  EFAF  F013         	goto	l158
  6253   00273E                     u5250:
  6254   00273E                     
  6255                           ;color.c: 348:         movePink(&motorL,&motorR, path_length);
  6256   00273E  0ED4               	movlw	low _motorL
  6257   002740  6E1D               	movwf	movePink@mL^0,c
  6258   002742  0ECB               	movlw	low _motorR
  6259   002744  6E1E               	movwf	movePink@mR^0,c
  6260   002746  C049  F01F         	movff	decision@path_length,movePink@path_length
  6261   00274A  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6262   00274E  ECC8  F01E         	call	_movePink	;wreg free
  6263   002752                     
  6264                           ;color.c: 349:         color = 7;
  6265   002752  0E00               	movlw	0
  6266   002754  6E4C               	movwf	(decision@color+1)^0,c
  6267   002756  0E07               	movlw	7
  6268   002758  6E4B               	movwf	decision@color^0,c
  6269   00275A  EFAF  F013         	goto	l5828
  6270   00275E                     l158:
  6271   00275E                     l5828:
  6272                           
  6273                           ;color.c: 352:     send2USART(color);
  6274   00275E  C04B  F045         	movff	decision@color,send2USART@hue
  6275   002762  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6276   002766  ECE4  F021         	call	_send2USART	;wreg free
  6277   00276A  0012               	return		;funcret
  6278   00276C                     __end_of_decision:
  6279                           	callstack 0
  6280                           
  6281 ;; *************** function _send2USART *****************
  6282 ;; Defined at:
  6283 ;;		line 146 in file "serial.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  hue             2   68[COMRAM] unsigned int 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6298 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6300 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6301 ;;Total ram usage:       52 bytes
  6302 ;; Hardware stack levels used: 1
  6303 ;; Hardware stack levels required when called: 9
  6304 ;; This function calls:
  6305 ;;		_sendStringSerial4
  6306 ;;		_sprintf
  6307 ;; This function is called by:
  6308 ;;		_decision
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text20
  6314   0043C8                     __ptext20:
  6315                           	callstack 0
  6316   0043C8                     _send2USART:
  6317                           	callstack 21
  6318   0043C8                     
  6319                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6320   0043C8  0E60               	movlw	low send2USART@hue_char
  6321   0043CA  6E32               	movwf	sprintf@s^0,c
  6322   0043CC  0EA0               	movlw	low STR_12
  6323   0043CE  6E33               	movwf	sprintf@fmt^0,c
  6324   0043D0  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6325   0043D4  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6326   0043D8  EC7D  F020         	call	_sprintf	;wreg free
  6327   0043DC                     
  6328                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6329   0043DC  0E60               	movlw	low send2USART@hue_char
  6330   0043DE  6E03               	movwf	sendStringSerial4@string^0,c
  6331   0043E0  EC47  F021         	call	_sendStringSerial4	;wreg free
  6332   0043E4  0012               	return		;funcret
  6333   0043E6                     __end_of_send2USART:
  6334                           	callstack 0
  6335                           
  6336 ;; *************** function _moveYellow *****************
  6337 ;; Defined at:
  6338 ;;		line 282 in file "dc_motor.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6341 ;;		 -> motorL(9), 
  6342 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6343 ;;		 -> motorR(9), 
  6344 ;;  path_length     2   30[COMRAM] unsigned int 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6359 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6360 ;;Total ram usage:        6 bytes
  6361 ;; Hardware stack levels used: 1
  6362 ;; Hardware stack levels required when called: 5
  6363 ;; This function calls:
  6364 ;;		_backOneAndHalf
  6365 ;;		_logAction
  6366 ;;		_right90
  6367 ;; This function is called by:
  6368 ;;		_decision
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text21
  6373   003D00                     __ptext21:
  6374                           	callstack 0
  6375   003D00                     _moveYellow:
  6376                           	callstack 24
  6377   003D00                     
  6378                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6379   003D00  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6380   003D04  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6381   003D08  ECCA  F020         	call	_backOneAndHalf	;wreg free
  6382   003D0C                     
  6383                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6384   003D0C  0E29               	movlw	41
  6385   003D0E  6E22               	movwf	(??_moveYellow+1)^0,c
  6386   003D10  0E96               	movlw	150
  6387   003D12  6E21               	movwf	??_moveYellow^0,c
  6388   003D14  0E7F               	movlw	127
  6389   003D16                     u5417:
  6390   003D16  2EE8               	decfsz	wreg,f,c
  6391   003D18  D7FE               	bra	u5417
  6392   003D1A  2E21               	decfsz	??_moveYellow^0,f,c
  6393   003D1C  D7FC               	bra	u5417
  6394   003D1E  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6395   003D20  D7FA               	bra	u5417
  6396   003D22  0000               	nop	
  6397   003D24                     
  6398                           ;dc_motor.c: 287:     right90(mL,mR);
  6399   003D24  C01D  F019         	movff	moveYellow@mL,right90@mL
  6400   003D28  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6401   003D2C  ECB1  F020         	call	_right90	;wreg free
  6402   003D30                     
  6403                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6404   003D30  0E00               	movlw	0
  6405   003D32  6E09               	movwf	(logAction@time+1)^0,c
  6406   003D34  0E00               	movlw	0
  6407   003D36  6E08               	movwf	logAction@time^0,c
  6408   003D38  C01F  F00A         	movff	moveYellow@path_length,logAction@pathLength
  6409   003D3C  C020  F00B         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6410   003D40  0E52               	movlw	82
  6411   003D42  ECAB  F01D         	call	_logAction
  6412   003D46  0012               	return		;funcret
  6413   003D48                     __end_of_moveYellow:
  6414                           	callstack 0
  6415                           
  6416 ;; *************** function _moveRed *****************
  6417 ;; Defined at:
  6418 ;;		line 255 in file "dc_motor.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6421 ;;		 -> motorL(9), 
  6422 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6423 ;;		 -> motorR(9), 
  6424 ;;  path_length     2   30[COMRAM] unsigned int 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      void 
  6429 ;; Registers used:
  6430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6438 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6439 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6440 ;;Total ram usage:        6 bytes
  6441 ;; Hardware stack levels used: 1
  6442 ;; Hardware stack levels required when called: 5
  6443 ;; This function calls:
  6444 ;;		_backHalf
  6445 ;;		_logAction
  6446 ;;		_right90
  6447 ;; This function is called by:
  6448 ;;		_decision
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           	psect	text22
  6453   003D48                     __ptext22:
  6454                           	callstack 0
  6455   003D48                     _moveRed:
  6456                           	callstack 24
  6457   003D48                     
  6458                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6459   003D48  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6460   003D4C  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6461   003D50  EC60  F021         	call	_backHalf	;wreg free
  6462   003D54                     
  6463                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6464   003D54  0E29               	movlw	41
  6465   003D56  6E22               	movwf	(??_moveRed+1)^0,c
  6466   003D58  0E96               	movlw	150
  6467   003D5A  6E21               	movwf	??_moveRed^0,c
  6468   003D5C  0E7F               	movlw	127
  6469   003D5E                     u5427:
  6470   003D5E  2EE8               	decfsz	wreg,f,c
  6471   003D60  D7FE               	bra	u5427
  6472   003D62  2E21               	decfsz	??_moveRed^0,f,c
  6473   003D64  D7FC               	bra	u5427
  6474   003D66  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6475   003D68  D7FA               	bra	u5427
  6476   003D6A  0000               	nop	
  6477   003D6C                     
  6478                           ;dc_motor.c: 260:     right90(mL,mR);
  6479   003D6C  C01D  F019         	movff	moveRed@mL,right90@mL
  6480   003D70  C01E  F01A         	movff	moveRed@mR,right90@mR
  6481   003D74  ECB1  F020         	call	_right90	;wreg free
  6482   003D78                     
  6483                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6484   003D78  0E00               	movlw	0
  6485   003D7A  6E09               	movwf	(logAction@time+1)^0,c
  6486   003D7C  0E00               	movlw	0
  6487   003D7E  6E08               	movwf	logAction@time^0,c
  6488   003D80  C01F  F00A         	movff	moveRed@path_length,logAction@pathLength
  6489   003D84  C020  F00B         	movff	moveRed@path_length+1,logAction@pathLength+1
  6490   003D88  0E52               	movlw	82
  6491   003D8A  ECAB  F01D         	call	_logAction
  6492   003D8E  0012               	return		;funcret
  6493   003D90                     __end_of_moveRed:
  6494                           	callstack 0
  6495                           
  6496 ;; *************** function _right90 *****************
  6497 ;; Defined at:
  6498 ;;		line 193 in file "dc_motor.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6501 ;;		 -> motorL(9), 
  6502 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6503 ;;		 -> motorR(9), 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;		None
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      void 
  6508 ;; Registers used:
  6509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6519 ;;Total ram usage:        4 bytes
  6520 ;; Hardware stack levels used: 1
  6521 ;; Hardware stack levels required when called: 4
  6522 ;; This function calls:
  6523 ;;		_stop
  6524 ;;		_turnRight
  6525 ;; This function is called by:
  6526 ;;		_moveRed
  6527 ;;		_moveYellow
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text23
  6532   004162                     __ptext23:
  6533                           	callstack 0
  6534   004162                     _right90:
  6535                           	callstack 24
  6536   004162                     
  6537                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6538   004162  C019  F014         	movff	right90@mL,turnRight@mL
  6539   004166  C01A  F015         	movff	right90@mR,turnRight@mR
  6540   00416A  EC7B  F01C         	call	_turnRight	;wreg free
  6541   00416E                     
  6542                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6543   00416E  0E16               	movlw	22
  6544   004170  6E1C               	movwf	(??_right90+1)^0,c
  6545   004172  0E1B               	movlw	27
  6546   004174  6E1B               	movwf	??_right90^0,c
  6547   004176  0E88               	movlw	136
  6548   004178                     u5437:
  6549   004178  2EE8               	decfsz	wreg,f,c
  6550   00417A  D7FE               	bra	u5437
  6551   00417C  2E1B               	decfsz	??_right90^0,f,c
  6552   00417E  D7FC               	bra	u5437
  6553   004180  2E1C               	decfsz	(??_right90+1)^0,f,c
  6554   004182  D7FA               	bra	u5437
  6555   004184  D000               	nop2	
  6556   004186                     
  6557                           ;dc_motor.c: 197:     stop(mL,mR);
  6558   004186  C019  F014         	movff	right90@mL,stop@mL
  6559   00418A  C01A  F015         	movff	right90@mR,stop@mR
  6560   00418E  EC34  F01C         	call	_stop	;wreg free
  6561   004192  0012               	return		;funcret
  6562   004194                     __end_of_right90:
  6563                           	callstack 0
  6564                           
  6565 ;; *************** function _movePink *****************
  6566 ;; Defined at:
  6567 ;;		line 291 in file "dc_motor.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6570 ;;		 -> motorL(9), 
  6571 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6572 ;;		 -> motorR(9), 
  6573 ;;  path_length     2   30[COMRAM] unsigned int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      void 
  6578 ;; Registers used:
  6579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6585 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6588 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6589 ;;Total ram usage:        6 bytes
  6590 ;; Hardware stack levels used: 1
  6591 ;; Hardware stack levels required when called: 5
  6592 ;; This function calls:
  6593 ;;		_backOneAndHalf
  6594 ;;		_left90
  6595 ;;		_logAction
  6596 ;; This function is called by:
  6597 ;;		_decision
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text24
  6602   003D90                     __ptext24:
  6603                           	callstack 0
  6604   003D90                     _movePink:
  6605                           	callstack 24
  6606   003D90                     
  6607                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6608   003D90  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6609   003D94  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6610   003D98  ECCA  F020         	call	_backOneAndHalf	;wreg free
  6611   003D9C                     
  6612                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6613   003D9C  0E29               	movlw	41
  6614   003D9E  6E22               	movwf	(??_movePink+1)^0,c
  6615   003DA0  0E96               	movlw	150
  6616   003DA2  6E21               	movwf	??_movePink^0,c
  6617   003DA4  0E7F               	movlw	127
  6618   003DA6                     u5447:
  6619   003DA6  2EE8               	decfsz	wreg,f,c
  6620   003DA8  D7FE               	bra	u5447
  6621   003DAA  2E21               	decfsz	??_movePink^0,f,c
  6622   003DAC  D7FC               	bra	u5447
  6623   003DAE  2E22               	decfsz	(??_movePink+1)^0,f,c
  6624   003DB0  D7FA               	bra	u5447
  6625   003DB2  0000               	nop	
  6626   003DB4                     
  6627                           ;dc_motor.c: 296:     left90(mL,mR);
  6628   003DB4  C01D  F019         	movff	movePink@mL,left90@mL
  6629   003DB8  C01E  F01A         	movff	movePink@mR,left90@mR
  6630   003DBC  EC15  F021         	call	_left90	;wreg free
  6631   003DC0                     
  6632                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6633   003DC0  0E00               	movlw	0
  6634   003DC2  6E09               	movwf	(logAction@time+1)^0,c
  6635   003DC4  0E00               	movlw	0
  6636   003DC6  6E08               	movwf	logAction@time^0,c
  6637   003DC8  C01F  F00A         	movff	movePink@path_length,logAction@pathLength
  6638   003DCC  C020  F00B         	movff	movePink@path_length+1,logAction@pathLength+1
  6639   003DD0  0E4C               	movlw	76
  6640   003DD2  ECAB  F01D         	call	_logAction
  6641   003DD6  0012               	return		;funcret
  6642   003DD8                     __end_of_movePink:
  6643                           	callstack 0
  6644                           
  6645 ;; *************** function _backOneAndHalf *****************
  6646 ;; Defined at:
  6647 ;;		line 241 in file "dc_motor.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6650 ;;		 -> motorL(9), 
  6651 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6652 ;;		 -> motorR(9), 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6666 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6668 ;;Total ram usage:        4 bytes
  6669 ;; Hardware stack levels used: 1
  6670 ;; Hardware stack levels required when called: 4
  6671 ;; This function calls:
  6672 ;;		_fullSpeedBack
  6673 ;;		_stop
  6674 ;; This function is called by:
  6675 ;;		_moveYellow
  6676 ;;		_movePink
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text25
  6681   004194                     __ptext25:
  6682                           	callstack 0
  6683   004194                     _backOneAndHalf:
  6684                           	callstack 24
  6685   004194                     
  6686                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6687   004194  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6688   004198  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6689   00419C  EC36  F01D         	call	_fullSpeedBack	;wreg free
  6690   0041A0                     
  6691                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6692   0041A0  0E6A               	movlw	106
  6693   0041A2  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6694   0041A4  0E85               	movlw	133
  6695   0041A6  6E1B               	movwf	??_backOneAndHalf^0,c
  6696   0041A8  0EB4               	movlw	180
  6697   0041AA                     u5457:
  6698   0041AA  2EE8               	decfsz	wreg,f,c
  6699   0041AC  D7FE               	bra	u5457
  6700   0041AE  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6701   0041B0  D7FC               	bra	u5457
  6702   0041B2  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6703   0041B4  D7FA               	bra	u5457
  6704   0041B6  D000               	nop2	
  6705   0041B8                     
  6706                           ;dc_motor.c: 245:     stop(mL,mR);
  6707   0041B8  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6708   0041BC  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6709   0041C0  EC34  F01C         	call	_stop	;wreg free
  6710   0041C4  0012               	return		;funcret
  6711   0041C6                     __end_of_backOneAndHalf:
  6712                           	callstack 0
  6713                           
  6714 ;; *************** function _moveOrange *****************
  6715 ;; Defined at:
  6716 ;;		line 300 in file "dc_motor.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6719 ;;		 -> motorL(9), 
  6720 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6721 ;;		 -> motorR(9), 
  6722 ;;  path_length     2   30[COMRAM] unsigned int 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  1    wreg      void 
  6727 ;; Registers used:
  6728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6736 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6737 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6738 ;;Total ram usage:        6 bytes
  6739 ;; Hardware stack levels used: 1
  6740 ;; Hardware stack levels required when called: 5
  6741 ;; This function calls:
  6742 ;;		_backHalf
  6743 ;;		_logAction
  6744 ;;		_right135
  6745 ;; This function is called by:
  6746 ;;		_decision
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text26
  6751   003DD8                     __ptext26:
  6752                           	callstack 0
  6753   003DD8                     _moveOrange:
  6754                           	callstack 24
  6755   003DD8                     
  6756                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6757   003DD8  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6758   003DDC  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6759   003DE0  EC60  F021         	call	_backHalf	;wreg free
  6760   003DE4                     
  6761                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6762   003DE4  0E29               	movlw	41
  6763   003DE6  6E22               	movwf	(??_moveOrange+1)^0,c
  6764   003DE8  0E96               	movlw	150
  6765   003DEA  6E21               	movwf	??_moveOrange^0,c
  6766   003DEC  0E7F               	movlw	127
  6767   003DEE                     u5467:
  6768   003DEE  2EE8               	decfsz	wreg,f,c
  6769   003DF0  D7FE               	bra	u5467
  6770   003DF2  2E21               	decfsz	??_moveOrange^0,f,c
  6771   003DF4  D7FC               	bra	u5467
  6772   003DF6  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6773   003DF8  D7FA               	bra	u5467
  6774   003DFA  0000               	nop	
  6775   003DFC                     
  6776                           ;dc_motor.c: 305:     right135(mL,mR);
  6777   003DFC  C01D  F019         	movff	moveOrange@mL,right135@mL
  6778   003E00  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6779   003E04  ECE3  F020         	call	_right135	;wreg free
  6780   003E08                     
  6781                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6782   003E08  0E00               	movlw	0
  6783   003E0A  6E09               	movwf	(logAction@time+1)^0,c
  6784   003E0C  0E00               	movlw	0
  6785   003E0E  6E08               	movwf	logAction@time^0,c
  6786   003E10  C01F  F00A         	movff	moveOrange@path_length,logAction@pathLength
  6787   003E14  C020  F00B         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6788   003E18  0E52               	movlw	82
  6789   003E1A  ECAB  F01D         	call	_logAction
  6790   003E1E  0012               	return		;funcret
  6791   003E20                     __end_of_moveOrange:
  6792                           	callstack 0
  6793                           
  6794 ;; *************** function _right135 *****************
  6795 ;; Defined at:
  6796 ;;		line 217 in file "dc_motor.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6799 ;;		 -> motorL(9), 
  6800 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6801 ;;		 -> motorR(9), 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;Total ram usage:        4 bytes
  6818 ;; Hardware stack levels used: 1
  6819 ;; Hardware stack levels required when called: 4
  6820 ;; This function calls:
  6821 ;;		_stop
  6822 ;;		_turnRight
  6823 ;; This function is called by:
  6824 ;;		_moveOrange
  6825 ;;		_reverseTurn
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text27
  6830   0041C6                     __ptext27:
  6831                           	callstack 0
  6832   0041C6                     _right135:
  6833                           	callstack 24
  6834   0041C6                     
  6835                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6836   0041C6  C019  F014         	movff	right135@mL,turnRight@mL
  6837   0041CA  C01A  F015         	movff	right135@mR,turnRight@mR
  6838   0041CE  EC7B  F01C         	call	_turnRight	;wreg free
  6839   0041D2                     
  6840                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6841   0041D2  0E21               	movlw	33
  6842   0041D4  6E1C               	movwf	(??_right135+1)^0,c
  6843   0041D6  0E78               	movlw	120
  6844   0041D8  6E1B               	movwf	??_right135^0,c
  6845   0041DA  0E98               	movlw	152
  6846   0041DC                     u5477:
  6847   0041DC  2EE8               	decfsz	wreg,f,c
  6848   0041DE  D7FE               	bra	u5477
  6849   0041E0  2E1B               	decfsz	??_right135^0,f,c
  6850   0041E2  D7FC               	bra	u5477
  6851   0041E4  2E1C               	decfsz	(??_right135+1)^0,f,c
  6852   0041E6  D7FA               	bra	u5477
  6853   0041E8  D000               	nop2	
  6854   0041EA                     
  6855                           ;dc_motor.c: 221:     stop(mL,mR);
  6856   0041EA  C019  F014         	movff	right135@mL,stop@mL
  6857   0041EE  C01A  F015         	movff	right135@mR,stop@mR
  6858   0041F2  EC34  F01C         	call	_stop	;wreg free
  6859   0041F6  0012               	return		;funcret
  6860   0041F8                     __end_of_right135:
  6861                           	callstack 0
  6862                           
  6863 ;; *************** function _turnRight *****************
  6864 ;; Defined at:
  6865 ;;		line 125 in file "dc_motor.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  6868 ;;		 -> motorL(9), 
  6869 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  6870 ;;		 -> motorR(9), 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  i               2   22[COMRAM] unsigned int 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6885 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6886 ;;Total ram usage:        5 bytes
  6887 ;; Hardware stack levels used: 1
  6888 ;; Hardware stack levels required when called: 3
  6889 ;; This function calls:
  6890 ;;		_setMotorPWM
  6891 ;; This function is called by:
  6892 ;;		_right90
  6893 ;;		_right135
  6894 ;;		_reverseTurn
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text28
  6899   0038F6                     __ptext28:
  6900                           	callstack 0
  6901   0038F6                     _turnRight:
  6902                           	callstack 25
  6903   0038F6                     
  6904                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  6905   0038F6  5014               	movf	turnRight@mL^0,w,c
  6906   0038F8  6ED9               	movwf	fsr2l,c
  6907   0038FA  6ADA               	clrf	fsr2h,c
  6908   0038FC  0E01               	movlw	1
  6909   0038FE  26D9               	addwf	fsr2l,f,c
  6910   003900  0E01               	movlw	1
  6911   003902  6EDF               	movwf	indf2,c
  6912                           
  6913                           ;dc_motor.c: 129:     mR->direction = 0;
  6914   003904  5015               	movf	turnRight@mR^0,w,c
  6915   003906  6ED9               	movwf	fsr2l,c
  6916   003908  6ADA               	clrf	fsr2h,c
  6917   00390A  0E01               	movlw	1
  6918   00390C  26D9               	addwf	fsr2l,f,c
  6919   00390E  6ADF               	clrf	indf2,c
  6920   003910                     
  6921                           ;dc_motor.c: 131:     setMotorPWM(mL);
  6922   003910  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  6923   003914  ECF9  F016         	call	_setMotorPWM	;wreg free
  6924   003918                     
  6925                           ;dc_motor.c: 132:     setMotorPWM(mR);
  6926   003918  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  6927   00391C  ECF9  F016         	call	_setMotorPWM	;wreg free
  6928   003920                     
  6929                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  6930   003920  0E00               	movlw	0
  6931   003922  6E18               	movwf	(turnRight@i+1)^0,c
  6932   003924  0E00               	movlw	0
  6933   003926  6E17               	movwf	turnRight@i^0,c
  6934   003928                     l5382:
  6935                           
  6936                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  6937   003928  5014               	movf	turnRight@mL^0,w,c
  6938   00392A  6ED9               	movwf	fsr2l,c
  6939   00392C  6ADA               	clrf	fsr2h,c
  6940   00392E  2ADF               	incf	indf2,f,c
  6941                           
  6942                           ;dc_motor.c: 136:         mR->power++;
  6943   003930  5015               	movf	turnRight@mR^0,w,c
  6944   003932  6ED9               	movwf	fsr2l,c
  6945   003934  6ADA               	clrf	fsr2h,c
  6946   003936  2ADF               	incf	indf2,f,c
  6947   003938                     
  6948                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6949   003938  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  6950   00393C  ECF9  F016         	call	_setMotorPWM	;wreg free
  6951   003940                     
  6952                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6953   003940  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  6954   003944  ECF9  F016         	call	_setMotorPWM	;wreg free
  6955   003948                     
  6956                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6957   003948  0E0B               	movlw	11
  6958   00394A  6E16               	movwf	??_turnRight^0,c
  6959   00394C  0E62               	movlw	98
  6960   00394E                     u5487:
  6961   00394E  2EE8               	decfsz	wreg,f,c
  6962   003950  D7FE               	bra	u5487
  6963   003952  2E16               	decfsz	??_turnRight^0,f,c
  6964   003954  D7FC               	bra	u5487
  6965   003956  D000               	nop2	
  6966   003958                     
  6967                           ;dc_motor.c: 140:     }
  6968   003958  4A17               	infsnz	turnRight@i^0,f,c
  6969   00395A  2A18               	incf	(turnRight@i+1)^0,f,c
  6970   00395C  5018               	movf	(turnRight@i+1)^0,w,c
  6971   00395E  E109               	bnz	u4900
  6972   003960  0E32               	movlw	50
  6973   003962  5C17               	subwf	turnRight@i^0,w,c
  6974   003964  A0D8               	btfss	status,0,c
  6975   003966  EFB7  F01C         	goto	u4901
  6976   00396A  EFB9  F01C         	goto	u4900
  6977   00396E                     u4901:
  6978   00396E  EF94  F01C         	goto	l5382
  6979   003972                     u4900:
  6980   003972  0012               	return		;funcret
  6981   003974                     __end_of_turnRight:
  6982                           	callstack 0
  6983                           
  6984 ;; *************** function _moveLightBlue *****************
  6985 ;; Defined at:
  6986 ;;		line 309 in file "dc_motor.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6989 ;;		 -> motorL(9), 
  6990 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6991 ;;		 -> motorR(9), 
  6992 ;;  path_length     2   30[COMRAM] unsigned int 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;		None
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;Total ram usage:        6 bytes
  7009 ;; Hardware stack levels used: 1
  7010 ;; Hardware stack levels required when called: 5
  7011 ;; This function calls:
  7012 ;;		_backHalf
  7013 ;;		_left135
  7014 ;;		_logAction
  7015 ;; This function is called by:
  7016 ;;		_decision
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	text29
  7021   003E20                     __ptext29:
  7022                           	callstack 0
  7023   003E20                     _moveLightBlue:
  7024                           	callstack 24
  7025   003E20                     
  7026                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7027   003E20  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7028   003E24  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7029   003E28  EC60  F021         	call	_backHalf	;wreg free
  7030   003E2C                     
  7031                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7032   003E2C  0E29               	movlw	41
  7033   003E2E  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7034   003E30  0E96               	movlw	150
  7035   003E32  6E21               	movwf	??_moveLightBlue^0,c
  7036   003E34  0E7F               	movlw	127
  7037   003E36                     u5497:
  7038   003E36  2EE8               	decfsz	wreg,f,c
  7039   003E38  D7FE               	bra	u5497
  7040   003E3A  2E21               	decfsz	??_moveLightBlue^0,f,c
  7041   003E3C  D7FC               	bra	u5497
  7042   003E3E  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7043   003E40  D7FA               	bra	u5497
  7044   003E42  0000               	nop	
  7045   003E44                     
  7046                           ;dc_motor.c: 314:     left135(mL,mR);
  7047   003E44  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7048   003E48  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7049   003E4C  ECFC  F020         	call	_left135	;wreg free
  7050   003E50                     
  7051                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7052   003E50  0E00               	movlw	0
  7053   003E52  6E09               	movwf	(logAction@time+1)^0,c
  7054   003E54  0E00               	movlw	0
  7055   003E56  6E08               	movwf	logAction@time^0,c
  7056   003E58  C01F  F00A         	movff	moveLightBlue@path_length,logAction@pathLength
  7057   003E5C  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7058   003E60  0E4C               	movlw	76
  7059   003E62  ECAB  F01D         	call	_logAction
  7060   003E66  0012               	return		;funcret
  7061   003E68                     __end_of_moveLightBlue:
  7062                           	callstack 0
  7063                           
  7064 ;; *************** function _left135 *****************
  7065 ;; Defined at:
  7066 ;;		line 225 in file "dc_motor.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7069 ;;		 -> motorL(9), 
  7070 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7071 ;;		 -> motorR(9), 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7087 ;;Total ram usage:        4 bytes
  7088 ;; Hardware stack levels used: 1
  7089 ;; Hardware stack levels required when called: 4
  7090 ;; This function calls:
  7091 ;;		_stop
  7092 ;;		_turnLeft
  7093 ;; This function is called by:
  7094 ;;		_moveLightBlue
  7095 ;;		_reverseTurn
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text30
  7100   0041F8                     __ptext30:
  7101                           	callstack 0
  7102   0041F8                     _left135:
  7103                           	callstack 24
  7104   0041F8                     
  7105                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7106   0041F8  C019  F014         	movff	left135@mL,turnLeft@mL
  7107   0041FC  C01A  F015         	movff	left135@mR,turnLeft@mR
  7108   004200  ECBA  F01C         	call	_turnLeft	;wreg free
  7109   004204                     
  7110                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7111   004204  0E21               	movlw	33
  7112   004206  6E1C               	movwf	(??_left135+1)^0,c
  7113   004208  0E78               	movlw	120
  7114   00420A  6E1B               	movwf	??_left135^0,c
  7115   00420C  0E98               	movlw	152
  7116   00420E                     u5507:
  7117   00420E  2EE8               	decfsz	wreg,f,c
  7118   004210  D7FE               	bra	u5507
  7119   004212  2E1B               	decfsz	??_left135^0,f,c
  7120   004214  D7FC               	bra	u5507
  7121   004216  2E1C               	decfsz	(??_left135+1)^0,f,c
  7122   004218  D7FA               	bra	u5507
  7123   00421A  D000               	nop2	
  7124   00421C                     
  7125                           ;dc_motor.c: 229:     stop(mL,mR);
  7126   00421C  C019  F014         	movff	left135@mL,stop@mL
  7127   004220  C01A  F015         	movff	left135@mR,stop@mR
  7128   004224  EC34  F01C         	call	_stop	;wreg free
  7129   004228  0012               	return		;funcret
  7130   00422A                     __end_of_left135:
  7131                           	callstack 0
  7132                           
  7133 ;; *************** function _moveGreen *****************
  7134 ;; Defined at:
  7135 ;;		line 264 in file "dc_motor.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7138 ;;		 -> motorL(9), 
  7139 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7140 ;;		 -> motorR(9), 
  7141 ;;  path_length     2   30[COMRAM] unsigned int 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7156 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7157 ;;Total ram usage:        6 bytes
  7158 ;; Hardware stack levels used: 1
  7159 ;; Hardware stack levels required when called: 5
  7160 ;; This function calls:
  7161 ;;		_backHalf
  7162 ;;		_left90
  7163 ;;		_logAction
  7164 ;; This function is called by:
  7165 ;;		_decision
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text31
  7170   003E68                     __ptext31:
  7171                           	callstack 0
  7172   003E68                     _moveGreen:
  7173                           	callstack 24
  7174   003E68                     
  7175                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7176   003E68  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7177   003E6C  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7178   003E70  EC60  F021         	call	_backHalf	;wreg free
  7179   003E74                     
  7180                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7181   003E74  0E29               	movlw	41
  7182   003E76  6E22               	movwf	(??_moveGreen+1)^0,c
  7183   003E78  0E96               	movlw	150
  7184   003E7A  6E21               	movwf	??_moveGreen^0,c
  7185   003E7C  0E7F               	movlw	127
  7186   003E7E                     u5517:
  7187   003E7E  2EE8               	decfsz	wreg,f,c
  7188   003E80  D7FE               	bra	u5517
  7189   003E82  2E21               	decfsz	??_moveGreen^0,f,c
  7190   003E84  D7FC               	bra	u5517
  7191   003E86  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7192   003E88  D7FA               	bra	u5517
  7193   003E8A  0000               	nop	
  7194   003E8C                     
  7195                           ;dc_motor.c: 269:     left90(mL,mR);
  7196   003E8C  C01D  F019         	movff	moveGreen@mL,left90@mL
  7197   003E90  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7198   003E94  EC15  F021         	call	_left90	;wreg free
  7199   003E98                     
  7200                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7201   003E98  0E00               	movlw	0
  7202   003E9A  6E09               	movwf	(logAction@time+1)^0,c
  7203   003E9C  0E00               	movlw	0
  7204   003E9E  6E08               	movwf	logAction@time^0,c
  7205   003EA0  C01F  F00A         	movff	moveGreen@path_length,logAction@pathLength
  7206   003EA4  C020  F00B         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7207   003EA8  0E4C               	movlw	76
  7208   003EAA  ECAB  F01D         	call	_logAction
  7209   003EAE  0012               	return		;funcret
  7210   003EB0                     __end_of_moveGreen:
  7211                           	callstack 0
  7212                           
  7213 ;; *************** function _left90 *****************
  7214 ;; Defined at:
  7215 ;;		line 201 in file "dc_motor.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7218 ;;		 -> motorL(9), 
  7219 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7220 ;;		 -> motorR(9), 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      void 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7235 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7236 ;;Total ram usage:        4 bytes
  7237 ;; Hardware stack levels used: 1
  7238 ;; Hardware stack levels required when called: 4
  7239 ;; This function calls:
  7240 ;;		_stop
  7241 ;;		_turnLeft
  7242 ;; This function is called by:
  7243 ;;		_moveGreen
  7244 ;;		_movePink
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text32
  7249   00422A                     __ptext32:
  7250                           	callstack 0
  7251   00422A                     _left90:
  7252                           	callstack 24
  7253   00422A                     
  7254                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7255   00422A  C019  F014         	movff	left90@mL,turnLeft@mL
  7256   00422E  C01A  F015         	movff	left90@mR,turnLeft@mR
  7257   004232  ECBA  F01C         	call	_turnLeft	;wreg free
  7258   004236                     
  7259                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  7260   004236  0E16               	movlw	22
  7261   004238  6E1C               	movwf	(??_left90+1)^0,c
  7262   00423A  0E1B               	movlw	27
  7263   00423C  6E1B               	movwf	??_left90^0,c
  7264   00423E  0E88               	movlw	136
  7265   004240                     u5527:
  7266   004240  2EE8               	decfsz	wreg,f,c
  7267   004242  D7FE               	bra	u5527
  7268   004244  2E1B               	decfsz	??_left90^0,f,c
  7269   004246  D7FC               	bra	u5527
  7270   004248  2E1C               	decfsz	(??_left90+1)^0,f,c
  7271   00424A  D7FA               	bra	u5527
  7272   00424C  D000               	nop2	
  7273   00424E                     
  7274                           ;dc_motor.c: 205:     stop(mL,mR);
  7275   00424E  C019  F014         	movff	left90@mL,stop@mL
  7276   004252  C01A  F015         	movff	left90@mR,stop@mR
  7277   004256  EC34  F01C         	call	_stop	;wreg free
  7278   00425A  0012               	return		;funcret
  7279   00425C                     __end_of_left90:
  7280                           	callstack 0
  7281                           
  7282 ;; *************** function _moveBlue *****************
  7283 ;; Defined at:
  7284 ;;		line 273 in file "dc_motor.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7287 ;;		 -> motorL(9), 
  7288 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7289 ;;		 -> motorR(9), 
  7290 ;;  path_length     2   30[COMRAM] unsigned int 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7305 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7306 ;;Total ram usage:        6 bytes
  7307 ;; Hardware stack levels used: 1
  7308 ;; Hardware stack levels required when called: 5
  7309 ;; This function calls:
  7310 ;;		_backHalf
  7311 ;;		_logAction
  7312 ;;		_turn180
  7313 ;; This function is called by:
  7314 ;;		_decision
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text33
  7319   003EB0                     __ptext33:
  7320                           	callstack 0
  7321   003EB0                     _moveBlue:
  7322                           	callstack 24
  7323   003EB0                     
  7324                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7325   003EB0  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7326   003EB4  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7327   003EB8  EC60  F021         	call	_backHalf	;wreg free
  7328   003EBC                     
  7329                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7330   003EBC  0E29               	movlw	41
  7331   003EBE  6E22               	movwf	(??_moveBlue+1)^0,c
  7332   003EC0  0E96               	movlw	150
  7333   003EC2  6E21               	movwf	??_moveBlue^0,c
  7334   003EC4  0E7F               	movlw	127
  7335   003EC6                     u5537:
  7336   003EC6  2EE8               	decfsz	wreg,f,c
  7337   003EC8  D7FE               	bra	u5537
  7338   003ECA  2E21               	decfsz	??_moveBlue^0,f,c
  7339   003ECC  D7FC               	bra	u5537
  7340   003ECE  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7341   003ED0  D7FA               	bra	u5537
  7342   003ED2  0000               	nop	
  7343   003ED4                     
  7344                           ;dc_motor.c: 278:     turn180(mL,mR);
  7345   003ED4  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7346   003ED8  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7347   003EDC  EC2E  F021         	call	_turn180	;wreg free
  7348   003EE0                     
  7349                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7350   003EE0  0E00               	movlw	0
  7351   003EE2  6E09               	movwf	(logAction@time+1)^0,c
  7352   003EE4  0E00               	movlw	0
  7353   003EE6  6E08               	movwf	logAction@time^0,c
  7354   003EE8  C01F  F00A         	movff	moveBlue@path_length,logAction@pathLength
  7355   003EEC  C020  F00B         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7356   003EF0  0E30               	movlw	48
  7357   003EF2  ECAB  F01D         	call	_logAction
  7358   003EF6  0012               	return		;funcret
  7359   003EF8                     __end_of_moveBlue:
  7360                           	callstack 0
  7361                           
  7362 ;; *************** function _turn180 *****************
  7363 ;; Defined at:
  7364 ;;		line 209 in file "dc_motor.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7367 ;;		 -> motorL(9), 
  7368 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7369 ;;		 -> motorR(9), 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;		None
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7381 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7383 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7384 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7385 ;;Total ram usage:        4 bytes
  7386 ;; Hardware stack levels used: 1
  7387 ;; Hardware stack levels required when called: 4
  7388 ;; This function calls:
  7389 ;;		_stop
  7390 ;;		_turnLeft
  7391 ;; This function is called by:
  7392 ;;		_moveBlue
  7393 ;;		_reverseTurn
  7394 ;;		_moveWhite
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text34
  7399   00425C                     __ptext34:
  7400                           	callstack 0
  7401   00425C                     _turn180:
  7402                           	callstack 24
  7403   00425C                     
  7404                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7405   00425C  C019  F014         	movff	turn180@mL,turnLeft@mL
  7406   004260  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7407   004264  ECBA  F01C         	call	_turnLeft	;wreg free
  7408   004268                     
  7409                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  7410   004268  0E2B               	movlw	43
  7411   00426A  6E1C               	movwf	(??_turn180+1)^0,c
  7412   00426C  0E36               	movlw	54
  7413   00426E  6E1B               	movwf	??_turn180^0,c
  7414   004270  0E13               	movlw	19
  7415   004272                     u5547:
  7416   004272  2EE8               	decfsz	wreg,f,c
  7417   004274  D7FE               	bra	u5547
  7418   004276  2E1B               	decfsz	??_turn180^0,f,c
  7419   004278  D7FC               	bra	u5547
  7420   00427A  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7421   00427C  D7FA               	bra	u5547
  7422   00427E  0000               	nop	
  7423   004280                     
  7424                           ;dc_motor.c: 213:     stop(mL,mR);
  7425   004280  C019  F014         	movff	turn180@mL,stop@mL
  7426   004284  C01A  F015         	movff	turn180@mR,stop@mR
  7427   004288  EC34  F01C         	call	_stop	;wreg free
  7428   00428C  0012               	return		;funcret
  7429   00428E                     __end_of_turn180:
  7430                           	callstack 0
  7431                           
  7432 ;; *************** function _turnLeft *****************
  7433 ;; Defined at:
  7434 ;;		line 105 in file "dc_motor.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7437 ;;		 -> motorL(9), 
  7438 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7439 ;;		 -> motorR(9), 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  i               2   22[COMRAM] unsigned int 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      void 
  7444 ;; Registers used:
  7445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7451 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7454 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7455 ;;Total ram usage:        5 bytes
  7456 ;; Hardware stack levels used: 1
  7457 ;; Hardware stack levels required when called: 3
  7458 ;; This function calls:
  7459 ;;		_setMotorPWM
  7460 ;; This function is called by:
  7461 ;;		_left90
  7462 ;;		_turn180
  7463 ;;		_left135
  7464 ;;		_reverseTurn
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text35
  7469   003974                     __ptext35:
  7470                           	callstack 0
  7471   003974                     _turnLeft:
  7472                           	callstack 25
  7473   003974                     
  7474                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7475   003974  5014               	movf	turnLeft@mL^0,w,c
  7476   003976  6ED9               	movwf	fsr2l,c
  7477   003978  6ADA               	clrf	fsr2h,c
  7478   00397A  0E01               	movlw	1
  7479   00397C  26D9               	addwf	fsr2l,f,c
  7480   00397E  6ADF               	clrf	indf2,c
  7481                           
  7482                           ;dc_motor.c: 109:     mR->direction = 1;
  7483   003980  5015               	movf	turnLeft@mR^0,w,c
  7484   003982  6ED9               	movwf	fsr2l,c
  7485   003984  6ADA               	clrf	fsr2h,c
  7486   003986  0E01               	movlw	1
  7487   003988  26D9               	addwf	fsr2l,f,c
  7488   00398A  0E01               	movlw	1
  7489   00398C  6EDF               	movwf	indf2,c
  7490   00398E                     
  7491                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7492   00398E  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7493   003992  ECF9  F016         	call	_setMotorPWM	;wreg free
  7494   003996                     
  7495                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7496   003996  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7497   00399A  ECF9  F016         	call	_setMotorPWM	;wreg free
  7498   00399E                     
  7499                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7500   00399E  0E00               	movlw	0
  7501   0039A0  6E18               	movwf	(turnLeft@i+1)^0,c
  7502   0039A2  0E00               	movlw	0
  7503   0039A4  6E17               	movwf	turnLeft@i^0,c
  7504   0039A6                     l5358:
  7505                           
  7506                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7507   0039A6  5014               	movf	turnLeft@mL^0,w,c
  7508   0039A8  6ED9               	movwf	fsr2l,c
  7509   0039AA  6ADA               	clrf	fsr2h,c
  7510   0039AC  2ADF               	incf	indf2,f,c
  7511                           
  7512                           ;dc_motor.c: 116:         mR->power++;
  7513   0039AE  5015               	movf	turnLeft@mR^0,w,c
  7514   0039B0  6ED9               	movwf	fsr2l,c
  7515   0039B2  6ADA               	clrf	fsr2h,c
  7516   0039B4  2ADF               	incf	indf2,f,c
  7517   0039B6                     
  7518                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7519   0039B6  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7520   0039BA  ECF9  F016         	call	_setMotorPWM	;wreg free
  7521   0039BE                     
  7522                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7523   0039BE  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7524   0039C2  ECF9  F016         	call	_setMotorPWM	;wreg free
  7525   0039C6                     
  7526                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7527   0039C6  0E0B               	movlw	11
  7528   0039C8  6E16               	movwf	??_turnLeft^0,c
  7529   0039CA  0E62               	movlw	98
  7530   0039CC                     u5557:
  7531   0039CC  2EE8               	decfsz	wreg,f,c
  7532   0039CE  D7FE               	bra	u5557
  7533   0039D0  2E16               	decfsz	??_turnLeft^0,f,c
  7534   0039D2  D7FC               	bra	u5557
  7535   0039D4  D000               	nop2	
  7536   0039D6                     
  7537                           ;dc_motor.c: 120:     }
  7538   0039D6  4A17               	infsnz	turnLeft@i^0,f,c
  7539   0039D8  2A18               	incf	(turnLeft@i+1)^0,f,c
  7540   0039DA  5018               	movf	(turnLeft@i+1)^0,w,c
  7541   0039DC  E109               	bnz	u4890
  7542   0039DE  0E32               	movlw	50
  7543   0039E0  5C17               	subwf	turnLeft@i^0,w,c
  7544   0039E2  A0D8               	btfss	status,0,c
  7545   0039E4  EFF6  F01C         	goto	u4891
  7546   0039E8  EFF8  F01C         	goto	u4890
  7547   0039EC                     u4891:
  7548   0039EC  EFD3  F01C         	goto	l5358
  7549   0039F0                     u4890:
  7550   0039F0  0012               	return		;funcret
  7551   0039F2                     __end_of_turnLeft:
  7552                           	callstack 0
  7553                           
  7554 ;; *************** function _logAction *****************
  7555 ;; Defined at:
  7556 ;;		line 336 in file "dc_motor.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  action          1    wreg     unsigned char 
  7559 ;;  time            2    7[COMRAM] int 
  7560 ;;  pathLength      2    9[COMRAM] unsigned int 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  action          1   11[COMRAM] unsigned char 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;Total ram usage:        5 bytes
  7577 ;; Hardware stack levels used: 1
  7578 ;; Hardware stack levels required when called: 2
  7579 ;; This function calls:
  7580 ;;		___wmul
  7581 ;; This function is called by:
  7582 ;;		_main
  7583 ;;		_moveRed
  7584 ;;		_moveGreen
  7585 ;;		_moveBlue
  7586 ;;		_moveYellow
  7587 ;;		_movePink
  7588 ;;		_moveOrange
  7589 ;;		_moveLightBlue
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           	psect	text36
  7594   003B56                     __ptext36:
  7595                           	callstack 0
  7596   003B56                     _logAction:
  7597                           	callstack 28
  7598                           
  7599                           ;incstack = 0
  7600                           ;logAction@action stored from wreg
  7601   003B56  6E0C               	movwf	logAction@action^0,c
  7602   003B58                     
  7603                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7604   003B58  500B               	movf	(logAction@pathLength+1)^0,w,c
  7605   003B5A  E107               	bnz	u4981
  7606   003B5C  0E32               	movlw	50
  7607   003B5E  5C0A               	subwf	logAction@pathLength^0,w,c
  7608   003B60  B0D8               	btfsc	status,0,c
  7609   003B62  EFB5  F01D         	goto	u4981
  7610   003B66  EFB7  F01D         	goto	u4980
  7611   003B6A                     u4981:
  7612   003B6A  EFDF  F01D         	goto	l480
  7613   003B6E                     u4980:
  7614   003B6E                     
  7615                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7616   003B6E  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7617   003B72  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7618   003B76  0E00               	movlw	0
  7619   003B78  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7620   003B7A  0E05               	movlw	5
  7621   003B7C  6E04               	movwf	___wmul@multiplicand^0,c
  7622   003B7E  ECA1  F021         	call	___wmul	;wreg free
  7623   003B82  0E00               	movlw	low _path
  7624   003B84  2402               	addwf	?___wmul^0,w,c
  7625   003B86  6ED9               	movwf	fsr2l,c
  7626   003B88  0E02               	movlw	high _path
  7627   003B8A  2003               	addwfc	(?___wmul+1)^0,w,c
  7628   003B8C  6EDA               	movwf	fsr2h,c
  7629   003B8E  C00C  FFDF         	movff	logAction@action,indf2
  7630                           
  7631                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7632   003B92  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7633   003B96  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7634   003B9A  0E00               	movlw	0
  7635   003B9C  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7636   003B9E  0E05               	movlw	5
  7637   003BA0  6E04               	movwf	___wmul@multiplicand^0,c
  7638   003BA2  ECA1  F021         	call	___wmul	;wreg free
  7639   003BA6  0E01               	movlw	low (_path+1)
  7640   003BA8  2402               	addwf	?___wmul^0,w,c
  7641   003BAA  6ED9               	movwf	fsr2l,c
  7642   003BAC  0E02               	movlw	high (_path+1)
  7643   003BAE  2003               	addwfc	(?___wmul+1)^0,w,c
  7644   003BB0  6EDA               	movwf	fsr2h,c
  7645   003BB2  C008  FFDE         	movff	logAction@time,postinc2
  7646   003BB6  C009  FFDD         	movff	logAction@time+1,postdec2
  7647   003BBA                     
  7648                           ;dc_motor.c: 340:         pathLength++;
  7649   003BBA  4A0A               	infsnz	logAction@pathLength^0,f,c
  7650   003BBC  2A0B               	incf	(logAction@pathLength+1)^0,f,c
  7651   003BBE                     l480:
  7652   003BBE  0012               	return		;funcret
  7653   003BC0                     __end_of_logAction:
  7654                           	callstack 0
  7655                           
  7656 ;; *************** function _backHalf *****************
  7657 ;; Defined at:
  7658 ;;		line 233 in file "dc_motor.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7661 ;;		 -> motorL(9), 
  7662 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7663 ;;		 -> motorR(9), 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7679 ;;Total ram usage:        4 bytes
  7680 ;; Hardware stack levels used: 1
  7681 ;; Hardware stack levels required when called: 4
  7682 ;; This function calls:
  7683 ;;		_fullSpeedBack
  7684 ;;		_stop
  7685 ;; This function is called by:
  7686 ;;		_moveRed
  7687 ;;		_moveGreen
  7688 ;;		_moveBlue
  7689 ;;		_moveOrange
  7690 ;;		_moveLightBlue
  7691 ;;		_moveWhite
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text37
  7696   0042C0                     __ptext37:
  7697                           	callstack 0
  7698   0042C0                     _backHalf:
  7699                           	callstack 24
  7700   0042C0                     
  7701                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7702   0042C0  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7703   0042C4  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7704   0042C8  EC36  F01D         	call	_fullSpeedBack	;wreg free
  7705   0042CC                     
  7706                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7707   0042CC  0E19               	movlw	25
  7708   0042CE  6E1C               	movwf	(??_backHalf+1)^0,c
  7709   0042D0  0E5A               	movlw	90
  7710   0042D2  6E1B               	movwf	??_backHalf^0,c
  7711   0042D4  0EB2               	movlw	178
  7712   0042D6                     u5567:
  7713   0042D6  2EE8               	decfsz	wreg,f,c
  7714   0042D8  D7FE               	bra	u5567
  7715   0042DA  2E1B               	decfsz	??_backHalf^0,f,c
  7716   0042DC  D7FC               	bra	u5567
  7717   0042DE  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7718   0042E0  D7FA               	bra	u5567
  7719   0042E2                     
  7720                           ;dc_motor.c: 237:     stop(mL,mR);
  7721   0042E2  C019  F014         	movff	backHalf@mL,stop@mL
  7722   0042E6  C01A  F015         	movff	backHalf@mR,stop@mR
  7723   0042EA  EC34  F01C         	call	_stop	;wreg free
  7724   0042EE  0012               	return		;funcret
  7725   0042F0                     __end_of_backHalf:
  7726                           	callstack 0
  7727                           
  7728 ;; *************** function _stop *****************
  7729 ;; Defined at:
  7730 ;;		line 88 in file "dc_motor.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7733 ;;		 -> motorL(9), 
  7734 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7735 ;;		 -> motorR(9), 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;		None
  7738 ;; Return value:  Size  Location     Type
  7739 ;;                  1    wreg      void 
  7740 ;; Registers used:
  7741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;Total ram usage:        3 bytes
  7752 ;; Hardware stack levels used: 1
  7753 ;; Hardware stack levels required when called: 3
  7754 ;; This function calls:
  7755 ;;		_setMotorPWM
  7756 ;; This function is called by:
  7757 ;;		_main
  7758 ;;		_right90
  7759 ;;		_left90
  7760 ;;		_turn180
  7761 ;;		_right135
  7762 ;;		_left135
  7763 ;;		_backHalf
  7764 ;;		_backOneAndHalf
  7765 ;;		_reverseStraight
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text38
  7770   003868                     __ptext38:
  7771                           	callstack 0
  7772   003868                     _stop:
  7773                           	callstack 27
  7774   003868                     
  7775                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7776   003868  EF64  F01C         	goto	l5342
  7777   00386C                     l5328:
  7778                           
  7779                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7780   00386C  5014               	movf	stop@mL^0,w,c
  7781   00386E  6ED9               	movwf	fsr2l,c
  7782   003870  6ADA               	clrf	fsr2h,c
  7783   003872  50DF               	movf	indf2,w,c
  7784   003874  B4D8               	btfsc	status,2,c
  7785   003876  EF3F  F01C         	goto	u4851
  7786   00387A  EF41  F01C         	goto	u4850
  7787   00387E                     u4851:
  7788   00387E  EF45  F01C         	goto	l5332
  7789   003882                     u4850:
  7790   003882  5014               	movf	stop@mL^0,w,c
  7791   003884  6ED9               	movwf	fsr2l,c
  7792   003886  6ADA               	clrf	fsr2h,c
  7793   003888  06DF               	decf	indf2,f,c
  7794   00388A                     l5332:
  7795                           
  7796                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7797   00388A  5015               	movf	stop@mR^0,w,c
  7798   00388C  6ED9               	movwf	fsr2l,c
  7799   00388E  6ADA               	clrf	fsr2h,c
  7800   003890  50DF               	movf	indf2,w,c
  7801   003892  B4D8               	btfsc	status,2,c
  7802   003894  EF4E  F01C         	goto	u4861
  7803   003898  EF50  F01C         	goto	u4860
  7804   00389C                     u4861:
  7805   00389C  EF54  F01C         	goto	l5336
  7806   0038A0                     u4860:
  7807   0038A0  5015               	movf	stop@mR^0,w,c
  7808   0038A2  6ED9               	movwf	fsr2l,c
  7809   0038A4  6ADA               	clrf	fsr2h,c
  7810   0038A6  06DF               	decf	indf2,f,c
  7811   0038A8                     l5336:
  7812                           
  7813                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7814   0038A8  C014  F00F         	movff	stop@mL,setMotorPWM@m
  7815   0038AC  ECF9  F016         	call	_setMotorPWM	;wreg free
  7816   0038B0                     
  7817                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7818   0038B0  C015  F00F         	movff	stop@mR,setMotorPWM@m
  7819   0038B4  ECF9  F016         	call	_setMotorPWM	;wreg free
  7820   0038B8                     
  7821                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7822   0038B8  0E0B               	movlw	11
  7823   0038BA  6E16               	movwf	??_stop^0,c
  7824   0038BC  0E62               	movlw	98
  7825   0038BE                     u5577:
  7826   0038BE  2EE8               	decfsz	wreg,f,c
  7827   0038C0  D7FE               	bra	u5577
  7828   0038C2  2E16               	decfsz	??_stop^0,f,c
  7829   0038C4  D7FC               	bra	u5577
  7830   0038C6  D000               	nop2	
  7831   0038C8                     l5342:
  7832                           
  7833                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7834   0038C8  5014               	movf	stop@mL^0,w,c
  7835   0038CA  6ED9               	movwf	fsr2l,c
  7836   0038CC  6ADA               	clrf	fsr2h,c
  7837   0038CE  50DF               	movf	indf2,w,c
  7838   0038D0  A4D8               	btfss	status,2,c
  7839   0038D2  EF6D  F01C         	goto	u4871
  7840   0038D6  EF6F  F01C         	goto	u4870
  7841   0038DA                     u4871:
  7842   0038DA  EF36  F01C         	goto	l5328
  7843   0038DE                     u4870:
  7844   0038DE  5015               	movf	stop@mR^0,w,c
  7845   0038E0  6ED9               	movwf	fsr2l,c
  7846   0038E2  6ADA               	clrf	fsr2h,c
  7847   0038E4  50DF               	movf	indf2,w,c
  7848   0038E6  A4D8               	btfss	status,2,c
  7849   0038E8  EF78  F01C         	goto	u4881
  7850   0038EC  EF7A  F01C         	goto	u4880
  7851   0038F0                     u4881:
  7852   0038F0  EF36  F01C         	goto	l5328
  7853   0038F4                     u4880:
  7854   0038F4  0012               	return		;funcret
  7855   0038F6                     __end_of_stop:
  7856                           	callstack 0
  7857                           
  7858 ;; *************** function _fullSpeedBack *****************
  7859 ;; Defined at:
  7860 ;;		line 165 in file "dc_motor.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7863 ;;		 -> motorL(9), 
  7864 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7865 ;;		 -> motorR(9), 
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  power           2   22[COMRAM] int 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7881 ;;Total ram usage:        5 bytes
  7882 ;; Hardware stack levels used: 1
  7883 ;; Hardware stack levels required when called: 3
  7884 ;; This function calls:
  7885 ;;		_setMotorPWM
  7886 ;; This function is called by:
  7887 ;;		_backHalf
  7888 ;;		_backOneAndHalf
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text39
  7893   003A6C                     __ptext39:
  7894                           	callstack 0
  7895   003A6C                     _fullSpeedBack:
  7896                           	callstack 24
  7897   003A6C                     
  7898                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7899   003A6C  5014               	movf	fullSpeedBack@mL^0,w,c
  7900   003A6E  6ED9               	movwf	fsr2l,c
  7901   003A70  6ADA               	clrf	fsr2h,c
  7902   003A72  0E01               	movlw	1
  7903   003A74  26D9               	addwf	fsr2l,f,c
  7904   003A76  6ADF               	clrf	indf2,c
  7905                           
  7906                           ;dc_motor.c: 169:     mR->direction = 0;
  7907   003A78  5015               	movf	fullSpeedBack@mR^0,w,c
  7908   003A7A  6ED9               	movwf	fsr2l,c
  7909   003A7C  6ADA               	clrf	fsr2h,c
  7910   003A7E  0E01               	movlw	1
  7911   003A80  26D9               	addwf	fsr2l,f,c
  7912   003A82  6ADF               	clrf	indf2,c
  7913   003A84                     
  7914                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  7915   003A84  0E00               	movlw	0
  7916   003A86  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  7917   003A88  0E00               	movlw	0
  7918   003A8A  6E17               	movwf	fullSpeedBack@power^0,c
  7919   003A8C                     l5402:
  7920                           
  7921                           ;dc_motor.c: 172:         mL->power = power;
  7922   003A8C  5014               	movf	fullSpeedBack@mL^0,w,c
  7923   003A8E  6ED9               	movwf	fsr2l,c
  7924   003A90  6ADA               	clrf	fsr2h,c
  7925   003A92  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7926                           
  7927                           ;dc_motor.c: 173:         mR->power = power;
  7928   003A96  5015               	movf	fullSpeedBack@mR^0,w,c
  7929   003A98  6ED9               	movwf	fsr2l,c
  7930   003A9A  6ADA               	clrf	fsr2h,c
  7931   003A9C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7932   003AA0                     
  7933                           ;dc_motor.c: 176:         setMotorPWM(mL);
  7934   003AA0  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  7935   003AA4  ECF9  F016         	call	_setMotorPWM	;wreg free
  7936   003AA8                     
  7937                           ;dc_motor.c: 177:         setMotorPWM(mR);
  7938   003AA8  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  7939   003AAC  ECF9  F016         	call	_setMotorPWM	;wreg free
  7940   003AB0                     
  7941                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7942   003AB0  0E0B               	movlw	11
  7943   003AB2  6E16               	movwf	??_fullSpeedBack^0,c
  7944   003AB4  0E62               	movlw	98
  7945   003AB6                     u5587:
  7946   003AB6  2EE8               	decfsz	wreg,f,c
  7947   003AB8  D7FE               	bra	u5587
  7948   003ABA  2E16               	decfsz	??_fullSpeedBack^0,f,c
  7949   003ABC  D7FC               	bra	u5587
  7950   003ABE  D000               	nop2	
  7951   003AC0                     
  7952                           ;dc_motor.c: 181:     }
  7953   003AC0  4A17               	infsnz	fullSpeedBack@power^0,f,c
  7954   003AC2  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  7955   003AC4  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  7956   003AC6  EF6E  F01D         	goto	u4911
  7957   003ACA  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  7958   003ACC  E109               	bnz	u4910
  7959   003ACE  0E33               	movlw	51
  7960   003AD0  5C17               	subwf	fullSpeedBack@power^0,w,c
  7961   003AD2  A0D8               	btfss	status,0,c
  7962   003AD4  EF6E  F01D         	goto	u4911
  7963   003AD8  EF70  F01D         	goto	u4910
  7964   003ADC                     u4911:
  7965   003ADC  EF46  F01D         	goto	l5402
  7966   003AE0                     u4910:
  7967   003AE0  0012               	return		;funcret
  7968   003AE2                     __end_of_fullSpeedBack:
  7969                           	callstack 0
  7970                           
  7971 ;; *************** function _setMotorPWM *****************
  7972 ;; Defined at:
  7973 ;;		line 65 in file "dc_motor.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  m               1   14[COMRAM] PTR struct DC_motor
  7976 ;;		 -> motorR(9), motorL(9), 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  negDuty         1   18[COMRAM] unsigned char 
  7979 ;;  posDuty         1   17[COMRAM] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7989 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7991 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7992 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7993 ;;Total ram usage:        5 bytes
  7994 ;; Hardware stack levels used: 1
  7995 ;; Hardware stack levels required when called: 2
  7996 ;; This function calls:
  7997 ;;		___lwdiv
  7998 ;;		___wmul
  7999 ;; This function is called by:
  8000 ;;		_stop
  8001 ;;		_turnLeft
  8002 ;;		_turnRight
  8003 ;;		_fullSpeedAhead
  8004 ;;		_fullSpeedBack
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text40
  8009   002DF2                     __ptext40:
  8010                           	callstack 0
  8011   002DF2                     _setMotorPWM:
  8012                           	callstack 27
  8013   002DF2                     
  8014                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8015   002DF2  500F               	movf	setMotorPWM@m^0,w,c
  8016   002DF4  6ED9               	movwf	fsr2l,c
  8017   002DF6  6ADA               	clrf	fsr2h,c
  8018   002DF8  0E02               	movlw	2
  8019   002DFA  26D9               	addwf	fsr2l,f,c
  8020   002DFC  50DF               	movf	indf2,w,c
  8021   002DFE  B4D8               	btfsc	status,2,c
  8022   002E00  EF04  F017         	goto	u4761
  8023   002E04  EF06  F017         	goto	u4760
  8024   002E08                     u4761:
  8025   002E08  EF36  F017         	goto	l5256
  8026   002E0C                     u4760:
  8027   002E0C                     
  8028                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8029   002E0C  500F               	movf	setMotorPWM@m^0,w,c
  8030   002E0E  6ED9               	movwf	fsr2l,c
  8031   002E10  6ADA               	clrf	fsr2h,c
  8032   002E12  50DF               	movf	indf2,w,c
  8033   002E14  6E10               	movwf	??_setMotorPWM^0,c
  8034   002E16  5010               	movf	??_setMotorPWM^0,w,c
  8035   002E18  6E02               	movwf	___wmul@multiplier^0,c
  8036   002E1A  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8037   002E1C  500F               	movf	setMotorPWM@m^0,w,c
  8038   002E1E  6ED9               	movwf	fsr2l,c
  8039   002E20  6ADA               	clrf	fsr2h,c
  8040   002E22  0E03               	movlw	3
  8041   002E24  26D9               	addwf	fsr2l,f,c
  8042   002E26  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8043   002E2A  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8044   002E2E  ECA1  F021         	call	___wmul	;wreg free
  8045   002E32  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8046   002E36  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8047   002E3A  0E00               	movlw	0
  8048   002E3C  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8049   002E3E  0E64               	movlw	100
  8050   002E40  6E0A               	movwf	___lwdiv@divisor^0,c
  8051   002E42  EC71  F01D         	call	___lwdiv	;wreg free
  8052   002E46  500F               	movf	setMotorPWM@m^0,w,c
  8053   002E48  6ED9               	movwf	fsr2l,c
  8054   002E4A  6ADA               	clrf	fsr2h,c
  8055   002E4C  0E03               	movlw	3
  8056   002E4E  26D9               	addwf	fsr2l,f,c
  8057   002E50  50DF               	movf	indf2,w,c
  8058   002E52  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8059   002E54  5008               	movf	?___lwdiv^0,w,c
  8060   002E56  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8061   002E58  6E12               	movwf	setMotorPWM@posDuty^0,c
  8062   002E5A                     
  8063                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8064   002E5A  500F               	movf	setMotorPWM@m^0,w,c
  8065   002E5C  6ED9               	movwf	fsr2l,c
  8066   002E5E  6ADA               	clrf	fsr2h,c
  8067   002E60  0E03               	movlw	3
  8068   002E62  26D9               	addwf	fsr2l,f,c
  8069   002E64  50DF               	movf	indf2,w,c
  8070   002E66  6E13               	movwf	setMotorPWM@negDuty^0,c
  8071                           
  8072                           ;dc_motor.c: 72:     }
  8073   002E68  EF57  F017         	goto	l5260
  8074   002E6C                     l5256:
  8075                           
  8076                           ;dc_motor.c: 74:         posDuty=0;
  8077   002E6C  0E00               	movlw	0
  8078   002E6E  6E12               	movwf	setMotorPWM@posDuty^0,c
  8079   002E70                     
  8080                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8081   002E70  500F               	movf	setMotorPWM@m^0,w,c
  8082   002E72  6ED9               	movwf	fsr2l,c
  8083   002E74  6ADA               	clrf	fsr2h,c
  8084   002E76  50DF               	movf	indf2,w,c
  8085   002E78  6E10               	movwf	??_setMotorPWM^0,c
  8086   002E7A  5010               	movf	??_setMotorPWM^0,w,c
  8087   002E7C  6E02               	movwf	___wmul@multiplier^0,c
  8088   002E7E  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8089   002E80  500F               	movf	setMotorPWM@m^0,w,c
  8090   002E82  6ED9               	movwf	fsr2l,c
  8091   002E84  6ADA               	clrf	fsr2h,c
  8092   002E86  0E03               	movlw	3
  8093   002E88  26D9               	addwf	fsr2l,f,c
  8094   002E8A  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8095   002E8E  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8096   002E92  ECA1  F021         	call	___wmul	;wreg free
  8097   002E96  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8098   002E9A  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8099   002E9E  0E00               	movlw	0
  8100   002EA0  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8101   002EA2  0E64               	movlw	100
  8102   002EA4  6E0A               	movwf	___lwdiv@divisor^0,c
  8103   002EA6  EC71  F01D         	call	___lwdiv	;wreg free
  8104   002EAA  5008               	movf	?___lwdiv^0,w,c
  8105   002EAC  6E13               	movwf	setMotorPWM@negDuty^0,c
  8106   002EAE                     l5260:
  8107                           
  8108                           ;dc_motor.c: 78:     if (m->direction) {
  8109   002EAE  500F               	movf	setMotorPWM@m^0,w,c
  8110   002EB0  6ED9               	movwf	fsr2l,c
  8111   002EB2  6ADA               	clrf	fsr2h,c
  8112   002EB4  0E01               	movlw	1
  8113   002EB6  26D9               	addwf	fsr2l,f,c
  8114   002EB8  50DF               	movf	indf2,w,c
  8115   002EBA  B4D8               	btfsc	status,2,c
  8116   002EBC  EF62  F017         	goto	u4771
  8117   002EC0  EF64  F017         	goto	u4770
  8118   002EC4                     u4771:
  8119   002EC4  EF84  F017         	goto	l5264
  8120   002EC8                     u4770:
  8121   002EC8                     
  8122                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8123   002EC8  500F               	movf	setMotorPWM@m^0,w,c
  8124   002ECA  6ED9               	movwf	fsr2l,c
  8125   002ECC  6ADA               	clrf	fsr2h,c
  8126   002ECE  0E05               	movlw	5
  8127   002ED0  26D9               	addwf	fsr2l,f,c
  8128   002ED2  CFDE F010          	movff	postinc2,??_setMotorPWM
  8129   002ED6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8130   002EDA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8131   002EDE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8132   002EE2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8133                           
  8134                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8135   002EE6  500F               	movf	setMotorPWM@m^0,w,c
  8136   002EE8  6ED9               	movwf	fsr2l,c
  8137   002EEA  6ADA               	clrf	fsr2h,c
  8138   002EEC  0E07               	movlw	7
  8139   002EEE  26D9               	addwf	fsr2l,f,c
  8140   002EF0  CFDE F010          	movff	postinc2,??_setMotorPWM
  8141   002EF4  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8142   002EF8  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8143   002EFC  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8144   002F00  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8145                           
  8146                           ;dc_motor.c: 81:     } else {
  8147   002F04  EFA2  F017         	goto	l403
  8148   002F08                     l5264:
  8149                           
  8150                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8151   002F08  500F               	movf	setMotorPWM@m^0,w,c
  8152   002F0A  6ED9               	movwf	fsr2l,c
  8153   002F0C  6ADA               	clrf	fsr2h,c
  8154   002F0E  0E05               	movlw	5
  8155   002F10  26D9               	addwf	fsr2l,f,c
  8156   002F12  CFDE F010          	movff	postinc2,??_setMotorPWM
  8157   002F16  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8158   002F1A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8159   002F1E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8160   002F22  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8161                           
  8162                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8163   002F26  500F               	movf	setMotorPWM@m^0,w,c
  8164   002F28  6ED9               	movwf	fsr2l,c
  8165   002F2A  6ADA               	clrf	fsr2h,c
  8166   002F2C  0E07               	movlw	7
  8167   002F2E  26D9               	addwf	fsr2l,f,c
  8168   002F30  CFDE F010          	movff	postinc2,??_setMotorPWM
  8169   002F34  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8170   002F38  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8171   002F3C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8172   002F40  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8173   002F44                     l403:
  8174   002F44  0012               	return		;funcret
  8175   002F46                     __end_of_setMotorPWM:
  8176                           	callstack 0
  8177                           
  8178 ;; *************** function ___lwdiv *****************
  8179 ;; Defined at:
  8180 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  dividend        2    7[COMRAM] unsigned int 
  8183 ;;  divisor         2    9[COMRAM] unsigned int 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  quotient        2   11[COMRAM] unsigned int 
  8186 ;;  counter         1   13[COMRAM] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  2    7[COMRAM] unsigned int 
  8189 ;; Registers used:
  8190 ;;		wreg, status,2, status,0
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8197 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8199 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8200 ;;Total ram usage:        7 bytes
  8201 ;; Hardware stack levels used: 1
  8202 ;; Hardware stack levels required when called: 1
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_setMotorPWM
  8207 ;;		_ADC2String
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text41
  8212   003AE2                     __ptext41:
  8213                           	callstack 0
  8214   003AE2                     ___lwdiv:
  8215                           	callstack 27
  8216   003AE2  0E00               	movlw	0
  8217   003AE4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8218   003AE6  0E00               	movlw	0
  8219   003AE8  6E0C               	movwf	___lwdiv@quotient^0,c
  8220   003AEA  500A               	movf	___lwdiv@divisor^0,w,c
  8221   003AEC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8222   003AEE  B4D8               	btfsc	status,2,c
  8223   003AF0  EF7C  F01D         	goto	u2451
  8224   003AF4  EF7E  F01D         	goto	u2450
  8225   003AF8                     u2451:
  8226   003AF8  EFA6  F01D         	goto	l1157
  8227   003AFC                     u2450:
  8228   003AFC  0E01               	movlw	1
  8229   003AFE  6E0E               	movwf	___lwdiv@counter^0,c
  8230   003B00  EF86  F01D         	goto	l3408
  8231   003B04                     l3406:
  8232   003B04  90D8               	bcf	status,0,c
  8233   003B06  360A               	rlcf	___lwdiv@divisor^0,f,c
  8234   003B08  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8235   003B0A  2A0E               	incf	___lwdiv@counter^0,f,c
  8236   003B0C                     l3408:
  8237   003B0C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8238   003B0E  EF8B  F01D         	goto	u2461
  8239   003B12  EF8D  F01D         	goto	u2460
  8240   003B16                     u2461:
  8241   003B16  EF82  F01D         	goto	l3406
  8242   003B1A                     u2460:
  8243   003B1A                     l3410:
  8244   003B1A  90D8               	bcf	status,0,c
  8245   003B1C  360C               	rlcf	___lwdiv@quotient^0,f,c
  8246   003B1E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8247   003B20  500A               	movf	___lwdiv@divisor^0,w,c
  8248   003B22  5C08               	subwf	___lwdiv@dividend^0,w,c
  8249   003B24  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8250   003B26  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8251   003B28  A0D8               	btfss	status,0,c
  8252   003B2A  EF99  F01D         	goto	u2471
  8253   003B2E  EF9B  F01D         	goto	u2470
  8254   003B32                     u2471:
  8255   003B32  EFA0  F01D         	goto	l3418
  8256   003B36                     u2470:
  8257   003B36  500A               	movf	___lwdiv@divisor^0,w,c
  8258   003B38  5E08               	subwf	___lwdiv@dividend^0,f,c
  8259   003B3A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8260   003B3C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8261   003B3E  800C               	bsf	___lwdiv@quotient^0,0,c
  8262   003B40                     l3418:
  8263   003B40  90D8               	bcf	status,0,c
  8264   003B42  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8265   003B44  320A               	rrcf	___lwdiv@divisor^0,f,c
  8266   003B46  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8267   003B48  EF8D  F01D         	goto	l3410
  8268   003B4C                     l1157:
  8269   003B4C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8270   003B50  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8271   003B54  0012               	return		;funcret
  8272   003B56                     __end_of___lwdiv:
  8273                           	callstack 0
  8274                           
  8275 ;; *************** function _color_click_init *****************
  8276 ;; Defined at:
  8277 ;;		line 8 in file "color.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;		None
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  1    wreg      void 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0, cstack
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8294 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8295 ;;Total ram usage:        1 bytes
  8296 ;; Hardware stack levels used: 1
  8297 ;; Hardware stack levels required when called: 4
  8298 ;; This function calls:
  8299 ;;		_I2C_2_Master_Init
  8300 ;;		_color_writetoaddr
  8301 ;; This function is called by:
  8302 ;;		_main
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text42
  8307   0040C6                     __ptext42:
  8308                           	callstack 0
  8309   0040C6                     _color_click_init:
  8310                           	callstack 26
  8311   0040C6                     
  8312                           ;color.c: 11:     I2C_2_Master_Init();
  8313   0040C6  EC78  F021         	call	_I2C_2_Master_Init	;wreg free
  8314   0040CA                     
  8315                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8316   0040CA  0E01               	movlw	1
  8317   0040CC  6E04               	movwf	color_writetoaddr@value^0,c
  8318   0040CE  0E00               	movlw	0
  8319   0040D0  ECC5  F021         	call	_color_writetoaddr
  8320   0040D4                     
  8321                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8322   0040D4  0E3F               	movlw	63
  8323   0040D6  6E06               	movwf	??_color_click_init^0,c
  8324   0040D8  0E55               	movlw	85
  8325   0040DA                     u5597:
  8326   0040DA  2EE8               	decfsz	wreg,f,c
  8327   0040DC  D7FE               	bra	u5597
  8328   0040DE  2E06               	decfsz	??_color_click_init^0,f,c
  8329   0040E0  D7FC               	bra	u5597
  8330   0040E2  0000               	nop	
  8331   0040E4                     
  8332                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8333   0040E4  0E03               	movlw	3
  8334   0040E6  6E04               	movwf	color_writetoaddr@value^0,c
  8335   0040E8  0E00               	movlw	0
  8336   0040EA  ECC5  F021         	call	_color_writetoaddr
  8337   0040EE                     
  8338                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8339   0040EE  0ED5               	movlw	213
  8340   0040F0  6E04               	movwf	color_writetoaddr@value^0,c
  8341   0040F2  0E01               	movlw	1
  8342   0040F4  ECC5  F021         	call	_color_writetoaddr
  8343   0040F8  0012               	return		;funcret
  8344   0040FA                     __end_of_color_click_init:
  8345                           	callstack 0
  8346                           
  8347 ;; *************** function _color_writetoaddr *****************
  8348 ;; Defined at:
  8349 ;;		line 24 in file "color.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;  address         1    wreg     unsigned char 
  8352 ;;  value           1    3[COMRAM] unsigned char 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  address         1    4[COMRAM] unsigned char 
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      void 
  8357 ;; Registers used:
  8358 ;;		wreg, status,2, status,0, cstack
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8368 ;;Total ram usage:        2 bytes
  8369 ;; Hardware stack levels used: 1
  8370 ;; Hardware stack levels required when called: 3
  8371 ;; This function calls:
  8372 ;;		_I2C_2_Master_Start
  8373 ;;		_I2C_2_Master_Stop
  8374 ;;		_I2C_2_Master_Write
  8375 ;; This function is called by:
  8376 ;;		_color_click_init
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           	psect	text43
  8381   00438A                     __ptext43:
  8382                           	callstack 0
  8383   00438A                     _color_writetoaddr:
  8384                           	callstack 26
  8385                           
  8386                           ;incstack = 0
  8387                           ;color_writetoaddr@address stored from wreg
  8388   00438A  6E05               	movwf	color_writetoaddr@address^0,c
  8389   00438C                     
  8390                           ;color.c: 25:     I2C_2_Master_Start();
  8391   00438C  EC17  F022         	call	_I2C_2_Master_Start	;wreg free
  8392                           
  8393                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8394   004390  0E52               	movlw	82
  8395   004392  EC0C  F022         	call	_I2C_2_Master_Write
  8396                           
  8397                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8398   004396  5005               	movf	color_writetoaddr@address^0,w,c
  8399   004398  0980               	iorlw	128
  8400   00439A  EC0C  F022         	call	_I2C_2_Master_Write
  8401                           
  8402                           ;color.c: 28:     I2C_2_Master_Write(value);
  8403   00439E  5004               	movf	color_writetoaddr@value^0,w,c
  8404   0043A0  EC0C  F022         	call	_I2C_2_Master_Write
  8405                           
  8406                           ;color.c: 29:     I2C_2_Master_Stop();
  8407   0043A4  EC12  F022         	call	_I2C_2_Master_Stop	;wreg free
  8408   0043A8  0012               	return		;funcret
  8409   0043AA                     __end_of_color_writetoaddr:
  8410                           	callstack 0
  8411                           
  8412 ;; *************** function _I2C_2_Master_Init *****************
  8413 ;; Defined at:
  8414 ;;		line 4 in file "i2c.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;		None
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;		None
  8419 ;; Return value:  Size  Location     Type
  8420 ;;                  1    wreg      void 
  8421 ;; Registers used:
  8422 ;;		wreg, status,2
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8432 ;;Total ram usage:        0 bytes
  8433 ;; Hardware stack levels used: 1
  8434 ;; Hardware stack levels required when called: 1
  8435 ;; This function calls:
  8436 ;;		Nothing
  8437 ;; This function is called by:
  8438 ;;		_color_click_init
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text44
  8443   0042F0                     __ptext44:
  8444                           	callstack 0
  8445   0042F0                     _I2C_2_Master_Init:
  8446                           	callstack 28
  8447   0042F0                     
  8448                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8449   0042F0  010E               	movlb	14	; () banked
  8450   0042F2  51D9               	movf	217,w,b	;volatile
  8451   0042F4  0BF0               	andlw	-16
  8452   0042F6  0908               	iorlw	8
  8453   0042F8  6FD9               	movwf	217,b	;volatile
  8454   0042FA                     
  8455                           ; BSR set to: 14
  8456                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8457   0042FA  8BD9               	bsf	217,5,b	;volatile
  8458                           
  8459                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8460   0042FC  0E9F               	movlw	159
  8461   0042FE  6FD6               	movwf	214,b	;volatile
  8462   004300                     
  8463                           ; BSR set to: 14
  8464                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8465   004300  8A84               	bsf	132,5,c	;volatile
  8466   004302                     
  8467                           ; BSR set to: 14
  8468                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8469   004302  8C84               	bsf	132,6,c	;volatile
  8470   004304                     
  8471                           ; BSR set to: 14
  8472                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8473   004304  9BA7               	bcf	167,5,b	;volatile
  8474   004306                     
  8475                           ; BSR set to: 14
  8476                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8477   004306  9DA7               	bcf	167,6,b	;volatile
  8478                           
  8479                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8480   004308  0E1D               	movlw	29
  8481   00430A  6F1D               	movwf	29,b	;volatile
  8482                           
  8483                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8484   00430C  0E1E               	movlw	30
  8485   00430E  6F1C               	movwf	28,b	;volatile
  8486                           
  8487                           ;i2c.c: 18:   RD5PPS=0x1C;
  8488   004310  0E1C               	movlw	28
  8489   004312  6F6F               	movwf	111,b	;volatile
  8490                           
  8491                           ;i2c.c: 19:   RD6PPS=0x1B;
  8492   004314  0E1B               	movlw	27
  8493   004316  6F70               	movwf	112,b	;volatile
  8494   004318                     
  8495                           ; BSR set to: 14
  8496   004318  0012               	return		;funcret
  8497   00431A                     __end_of_I2C_2_Master_Init:
  8498                           	callstack 0
  8499                           
  8500 ;; *************** function _calibration_routine *****************
  8501 ;; Defined at:
  8502 ;;		line 197 in file "color.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  cCal            1   68[COMRAM] PTR struct colors
  8505 ;;		 -> colorCalibration(8), 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8517 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8518 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8520 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8521 ;;Total ram usage:       23 bytes
  8522 ;; Hardware stack levels used: 1
  8523 ;; Hardware stack levels required when called: 9
  8524 ;; This function calls:
  8525 ;;		_color_read_Blue
  8526 ;;		_color_read_Clear
  8527 ;;		_color_read_Green
  8528 ;;		_color_read_Red
  8529 ;;		_sendStringSerial4
  8530 ;;		_sprintf
  8531 ;; This function is called by:
  8532 ;;		_main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text45
  8537   00276C                     __ptext45:
  8538                           	callstack 0
  8539   00276C                     _calibration_routine:
  8540                           	callstack 21
  8541   00276C                     
  8542                           ;color.c: 197: void calibration_routine(colors *cCal);color.c: 198: {;color.c: 200:     
      +                          LATGbits.LATG0 = 0;
  8543   00276C  907F               	bcf	127,0,c	;volatile
  8544                           
  8545                           ;color.c: 201:     LATEbits.LATE7 = 0;
  8546   00276E  9E7D               	bcf	125,7,c	;volatile
  8547                           
  8548                           ;color.c: 202:     LATAbits.LATA3 = 0;
  8549   002770  9679               	bcf	121,3,c	;volatile
  8550   002772                     
  8551                           ;color.c: 204:     char cal_state[20];;color.c: 208:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8552   002772  0E60               	movlw	low calibration_routine@cal_state
  8553   002774  6E32               	movwf	sprintf@s^0,c
  8554   002776  0E73               	movlw	low STR_1
  8555   002778  6E33               	movwf	sprintf@fmt^0,c
  8556   00277A  0EAC               	movlw	low STR_2
  8557   00277C  6E34               	movwf	(?_sprintf+2)^0,c
  8558   00277E  5034               	movf	(?_sprintf+2)^0,w,c
  8559   002780  A4D8               	btfss	status,2,c
  8560   002782  0E0E               	movlw	high __smallconst
  8561   002784  6E35               	movwf	(?_sprintf+3)^0,c
  8562   002786  EC7D  F020         	call	_sprintf	;wreg free
  8563   00278A                     
  8564                           ;color.c: 209:     sendStringSerial4(cal_state);
  8565   00278A  0E60               	movlw	low calibration_routine@cal_state
  8566   00278C  6E03               	movwf	sendStringSerial4@string^0,c
  8567   00278E  EC47  F021         	call	_sendStringSerial4	;wreg free
  8568   002792                     l96:
  8569                           
  8570                           ;color.c: 212:     while(PORTFbits.RF2 == 1){
  8571   002792  B48E               	btfsc	142,2,c	;volatile
  8572   002794  EFCE  F013         	goto	u5071
  8573   002798  EFD0  F013         	goto	u5070
  8574   00279C                     u5071:
  8575   00279C  EFC9  F013         	goto	l96
  8576   0027A0                     u5070:
  8577   0027A0                     
  8578                           ;color.c: 216:     LATGbits.LATG0 = 1;
  8579   0027A0  807F               	bsf	127,0,c	;volatile
  8580   0027A2                     
  8581                           ;color.c: 217:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8582   0027A2  0E29               	movlw	41
  8583   0027A4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8584   0027A6  0E96               	movlw	150
  8585   0027A8  6E46               	movwf	??_calibration_routine^0,c
  8586   0027AA  0E7F               	movlw	127
  8587   0027AC                     u5607:
  8588   0027AC  2EE8               	decfsz	wreg,f,c
  8589   0027AE  D7FE               	bra	u5607
  8590   0027B0  2E46               	decfsz	??_calibration_routine^0,f,c
  8591   0027B2  D7FC               	bra	u5607
  8592   0027B4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8593   0027B6  D7FA               	bra	u5607
  8594   0027B8  0000               	nop	
  8595   0027BA                     
  8596                           ;color.c: 218:     (cCal->red) = color_read_Red();
  8597   0027BA  ECE0  F01D         	call	_color_read_Red	;wreg free
  8598   0027BE  5045               	movf	calibration_routine@cCal^0,w,c
  8599   0027C0  6ED9               	movwf	fsr2l,c
  8600   0027C2  6ADA               	clrf	fsr2h,c
  8601   0027C4  C006  FFDE         	movff	?_color_read_Red,postinc2
  8602   0027C8  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8603   0027CC                     
  8604                           ;color.c: 219:     LATGbits.LATG0 = 0;
  8605   0027CC  907F               	bcf	127,0,c	;volatile
  8606   0027CE                     
  8607                           ;color.c: 222:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8608   0027CE  0E60               	movlw	low calibration_routine@cal_state
  8609   0027D0  6E32               	movwf	sprintf@s^0,c
  8610   0027D2  0E22               	movlw	low STR_3
  8611   0027D4  6E33               	movwf	sprintf@fmt^0,c
  8612   0027D6  0EAC               	movlw	low STR_2
  8613   0027D8  6E34               	movwf	(?_sprintf+2)^0,c
  8614   0027DA  5034               	movf	(?_sprintf+2)^0,w,c
  8615   0027DC  A4D8               	btfss	status,2,c
  8616   0027DE  0E0E               	movlw	high __smallconst
  8617   0027E0  6E35               	movwf	(?_sprintf+3)^0,c
  8618   0027E2  EC7D  F020         	call	_sprintf	;wreg free
  8619   0027E6                     
  8620                           ;color.c: 223:     sendStringSerial4(&cal_state);
  8621   0027E6  0E60               	movlw	low calibration_routine@cal_state
  8622   0027E8  6E03               	movwf	sendStringSerial4@string^0,c
  8623   0027EA  EC47  F021         	call	_sendStringSerial4	;wreg free
  8624   0027EE                     l99:
  8625                           
  8626                           ;color.c: 225:     while(PORTFbits.RF2 == 1){
  8627   0027EE  B48E               	btfsc	142,2,c	;volatile
  8628   0027F0  EFFC  F013         	goto	u5081
  8629   0027F4  EFFE  F013         	goto	u5080
  8630   0027F8                     u5081:
  8631   0027F8  EFF7  F013         	goto	l99
  8632   0027FC                     u5080:
  8633   0027FC                     
  8634                           ;color.c: 229:     LATEbits.LATE7 = 1;
  8635   0027FC  8E7D               	bsf	125,7,c	;volatile
  8636   0027FE                     
  8637                           ;color.c: 230:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8638   0027FE  0E29               	movlw	41
  8639   002800  6E47               	movwf	(??_calibration_routine+1)^0,c
  8640   002802  0E96               	movlw	150
  8641   002804  6E46               	movwf	??_calibration_routine^0,c
  8642   002806  0E7F               	movlw	127
  8643   002808                     u5617:
  8644   002808  2EE8               	decfsz	wreg,f,c
  8645   00280A  D7FE               	bra	u5617
  8646   00280C  2E46               	decfsz	??_calibration_routine^0,f,c
  8647   00280E  D7FC               	bra	u5617
  8648   002810  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8649   002812  D7FA               	bra	u5617
  8650   002814  0000               	nop	
  8651   002816                     
  8652                           ;color.c: 231:     (cCal->green) = color_read_Green();
  8653   002816  EC08  F01E         	call	_color_read_Green	;wreg free
  8654   00281A  5045               	movf	calibration_routine@cCal^0,w,c
  8655   00281C  6ED9               	movwf	fsr2l,c
  8656   00281E  6ADA               	clrf	fsr2h,c
  8657   002820  0E02               	movlw	2
  8658   002822  26D9               	addwf	fsr2l,f,c
  8659   002824  C006  FFDE         	movff	?_color_read_Green,postinc2
  8660   002828  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8661   00282C                     
  8662                           ;color.c: 232:     LATEbits.LATE7 = 0;
  8663   00282C  9E7D               	bcf	125,7,c	;volatile
  8664   00282E                     
  8665                           ;color.c: 235:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8666   00282E  0E60               	movlw	low calibration_routine@cal_state
  8667   002830  6E32               	movwf	sprintf@s^0,c
  8668   002832  0E3F               	movlw	low STR_5
  8669   002834  6E33               	movwf	sprintf@fmt^0,c
  8670   002836  0EAC               	movlw	low STR_2
  8671   002838  6E34               	movwf	(?_sprintf+2)^0,c
  8672   00283A  5034               	movf	(?_sprintf+2)^0,w,c
  8673   00283C  A4D8               	btfss	status,2,c
  8674   00283E  0E0E               	movlw	high __smallconst
  8675   002840  6E35               	movwf	(?_sprintf+3)^0,c
  8676   002842  EC7D  F020         	call	_sprintf	;wreg free
  8677   002846                     
  8678                           ;color.c: 236:     sendStringSerial4(&cal_state);
  8679   002846  0E60               	movlw	low calibration_routine@cal_state
  8680   002848  6E03               	movwf	sendStringSerial4@string^0,c
  8681   00284A  EC47  F021         	call	_sendStringSerial4	;wreg free
  8682   00284E                     l102:
  8683                           
  8684                           ;color.c: 238:     while(PORTFbits.RF2 == 1){
  8685   00284E  B48E               	btfsc	142,2,c	;volatile
  8686   002850  EF2C  F014         	goto	u5091
  8687   002854  EF2E  F014         	goto	u5090
  8688   002858                     u5091:
  8689   002858  EF27  F014         	goto	l102
  8690   00285C                     u5090:
  8691   00285C                     
  8692                           ;color.c: 242:     LATAbits.LATA3 = 1;
  8693   00285C  8679               	bsf	121,3,c	;volatile
  8694   00285E                     
  8695                           ;color.c: 243:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8696   00285E  0E29               	movlw	41
  8697   002860  6E47               	movwf	(??_calibration_routine+1)^0,c
  8698   002862  0E96               	movlw	150
  8699   002864  6E46               	movwf	??_calibration_routine^0,c
  8700   002866  0E7F               	movlw	127
  8701   002868                     u5627:
  8702   002868  2EE8               	decfsz	wreg,f,c
  8703   00286A  D7FE               	bra	u5627
  8704   00286C  2E46               	decfsz	??_calibration_routine^0,f,c
  8705   00286E  D7FC               	bra	u5627
  8706   002870  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8707   002872  D7FA               	bra	u5627
  8708   002874  0000               	nop	
  8709   002876                     
  8710                           ;color.c: 244:     (cCal->blue) = color_read_Blue();
  8711   002876  EC58  F01E         	call	_color_read_Blue	;wreg free
  8712   00287A  5045               	movf	calibration_routine@cCal^0,w,c
  8713   00287C  6ED9               	movwf	fsr2l,c
  8714   00287E  6ADA               	clrf	fsr2h,c
  8715   002880  0E04               	movlw	4
  8716   002882  26D9               	addwf	fsr2l,f,c
  8717   002884  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8718   002888  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8719   00288C                     
  8720                           ;color.c: 245:     LATAbits.LATA3 = 0;
  8721   00288C  9679               	bcf	121,3,c	;volatile
  8722   00288E                     
  8723                           ;color.c: 248:     sprintf(cal_state,"Calibration state =  white light", ".");
  8724   00288E  0E60               	movlw	low calibration_routine@cal_state
  8725   002890  6E32               	movwf	sprintf@s^0,c
  8726   002892  0E01               	movlw	low STR_7
  8727   002894  6E33               	movwf	sprintf@fmt^0,c
  8728   002896  0EAC               	movlw	low STR_2
  8729   002898  6E34               	movwf	(?_sprintf+2)^0,c
  8730   00289A  5034               	movf	(?_sprintf+2)^0,w,c
  8731   00289C  A4D8               	btfss	status,2,c
  8732   00289E  0E0E               	movlw	high __smallconst
  8733   0028A0  6E35               	movwf	(?_sprintf+3)^0,c
  8734   0028A2  EC7D  F020         	call	_sprintf	;wreg free
  8735   0028A6                     
  8736                           ;color.c: 249:     sendStringSerial4(&cal_state);
  8737   0028A6  0E60               	movlw	low calibration_routine@cal_state
  8738   0028A8  6E03               	movwf	sendStringSerial4@string^0,c
  8739   0028AA  EC47  F021         	call	_sendStringSerial4	;wreg free
  8740   0028AE                     l105:
  8741                           
  8742                           ;color.c: 251:     while(PORTFbits.RF2 == 1){
  8743   0028AE  B48E               	btfsc	142,2,c	;volatile
  8744   0028B0  EF5C  F014         	goto	u5101
  8745   0028B4  EF5E  F014         	goto	u5100
  8746   0028B8                     u5101:
  8747   0028B8  EF57  F014         	goto	l105
  8748   0028BC                     u5100:
  8749   0028BC                     
  8750                           ;color.c: 254:     LATGbits.LATG0 = 1;
  8751   0028BC  807F               	bsf	127,0,c	;volatile
  8752                           
  8753                           ;color.c: 255:     LATEbits.LATE7 = 1;
  8754   0028BE  8E7D               	bsf	125,7,c	;volatile
  8755                           
  8756                           ;color.c: 256:     LATAbits.LATA3 = 1;
  8757   0028C0  8679               	bsf	121,3,c	;volatile
  8758   0028C2                     
  8759                           ;color.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8760   0028C2  0E29               	movlw	41
  8761   0028C4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8762   0028C6  0E96               	movlw	150
  8763   0028C8  6E46               	movwf	??_calibration_routine^0,c
  8764   0028CA  0E7F               	movlw	127
  8765   0028CC                     u5637:
  8766   0028CC  2EE8               	decfsz	wreg,f,c
  8767   0028CE  D7FE               	bra	u5637
  8768   0028D0  2E46               	decfsz	??_calibration_routine^0,f,c
  8769   0028D2  D7FC               	bra	u5637
  8770   0028D4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8771   0028D6  D7FA               	bra	u5637
  8772   0028D8  0000               	nop	
  8773   0028DA                     
  8774                           ;color.c: 258:     (cCal->clear) = color_read_Clear();
  8775   0028DA  EC30  F01E         	call	_color_read_Clear	;wreg free
  8776   0028DE  5045               	movf	calibration_routine@cCal^0,w,c
  8777   0028E0  6ED9               	movwf	fsr2l,c
  8778   0028E2  6ADA               	clrf	fsr2h,c
  8779   0028E4  0E06               	movlw	6
  8780   0028E6  26D9               	addwf	fsr2l,f,c
  8781   0028E8  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8782   0028EC  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8783   0028F0                     
  8784                           ;color.c: 259:     LATGbits.LATG0 = 0;
  8785   0028F0  907F               	bcf	127,0,c	;volatile
  8786   0028F2                     
  8787                           ;color.c: 260:     LATEbits.LATE7 = 0;
  8788   0028F2  9E7D               	bcf	125,7,c	;volatile
  8789   0028F4                     
  8790                           ;color.c: 261:     LATAbits.LATA3 = 0;
  8791   0028F4  9679               	bcf	121,3,c	;volatile
  8792   0028F6                     
  8793                           ;color.c: 264:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8794   0028F6  0E60               	movlw	low calibration_routine@cal_state
  8795   0028F8  6E32               	movwf	sprintf@s^0,c
  8796   0028FA  0E5A               	movlw	low STR_9
  8797   0028FC  6E33               	movwf	sprintf@fmt^0,c
  8798   0028FE  0EAC               	movlw	low STR_2
  8799   002900  6E34               	movwf	(?_sprintf+2)^0,c
  8800   002902  5034               	movf	(?_sprintf+2)^0,w,c
  8801   002904  A4D8               	btfss	status,2,c
  8802   002906  0E0E               	movlw	high __smallconst
  8803   002908  6E35               	movwf	(?_sprintf+3)^0,c
  8804   00290A  EC7D  F020         	call	_sprintf	;wreg free
  8805   00290E                     
  8806                           ;color.c: 265:     sendStringSerial4(&cal_state);
  8807   00290E  0E60               	movlw	low calibration_routine@cal_state
  8808   002910  6E03               	movwf	sendStringSerial4@string^0,c
  8809   002912  EC47  F021         	call	_sendStringSerial4	;wreg free
  8810   002916                     l108:
  8811                           
  8812                           ;color.c: 267:     while(PORTFbits.RF2 == 1){
  8813   002916  B48E               	btfsc	142,2,c	;volatile
  8814   002918  EF90  F014         	goto	u5111
  8815   00291C  EF92  F014         	goto	u5110
  8816   002920                     u5111:
  8817   002920  EF8B  F014         	goto	l108
  8818   002924                     u5110:
  8819   002924                     
  8820                           ;color.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8821   002924  0E29               	movlw	41
  8822   002926  6E47               	movwf	(??_calibration_routine+1)^0,c
  8823   002928  0E96               	movlw	150
  8824   00292A  6E46               	movwf	??_calibration_routine^0,c
  8825   00292C  0E7F               	movlw	127
  8826   00292E                     u5647:
  8827   00292E  2EE8               	decfsz	wreg,f,c
  8828   002930  D7FE               	bra	u5647
  8829   002932  2E46               	decfsz	??_calibration_routine^0,f,c
  8830   002934  D7FC               	bra	u5647
  8831   002936  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8832   002938  D7FA               	bra	u5647
  8833   00293A  0000               	nop	
  8834   00293C  0012               	return		;funcret
  8835   00293E                     __end_of_calibration_routine:
  8836                           	callstack 0
  8837                           
  8838 ;; *************** function _sprintf *****************
  8839 ;; Defined at:
  8840 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  s               1   49[COMRAM] PTR unsigned char 
  8843 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  8844 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  8845 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8846 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  f              12   56[COMRAM] struct _IO_FILE
  8849 ;;  ret             2    0        int 
  8850 ;;  ap              1   55[COMRAM] PTR void [1]
  8851 ;;		 -> ?_sprintf(2), 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  2   49[COMRAM] int 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8862 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8864 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8865 ;;Total ram usage:       19 bytes
  8866 ;; Hardware stack levels used: 1
  8867 ;; Hardware stack levels required when called: 8
  8868 ;; This function calls:
  8869 ;;		_vfprintf
  8870 ;; This function is called by:
  8871 ;;		_calibration_routine
  8872 ;;		_send2USART
  8873 ;;		_ADC2String
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text46
  8878   0040FA                     __ptext46:
  8879                           	callstack 0
  8880   0040FA                     _sprintf:
  8881                           	callstack 21
  8882   0040FA  0E34               	movlw	low (?_sprintf+2)
  8883   0040FC  6E38               	movwf	sprintf@ap^0,c
  8884   0040FE  C032  F039         	movff	sprintf@s,sprintf@f
  8885   004102  0E00               	movlw	0
  8886   004104  6E3D               	movwf	(sprintf@f+4)^0,c
  8887   004106  0E00               	movlw	0
  8888   004108  6E3C               	movwf	(sprintf@f+3)^0,c
  8889   00410A  0E00               	movlw	0
  8890   00410C  6E44               	movwf	(sprintf@f+11)^0,c
  8891   00410E  0E00               	movlw	0
  8892   004110  6E43               	movwf	(sprintf@f+10)^0,c
  8893   004112  0E39               	movlw	low sprintf@f
  8894   004114  6E2E               	movwf	vfprintf@fp^0,c
  8895   004116  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  8896   00411A  0E38               	movlw	low sprintf@ap
  8897   00411C  6E30               	movwf	vfprintf@ap^0,c
  8898   00411E  ECE5  F01F         	call	_vfprintf	;wreg free
  8899   004122  5032               	movf	sprintf@s^0,w,c
  8900   004124  243C               	addwf	(sprintf@f+3)^0,w,c
  8901   004126  6ED9               	movwf	fsr2l,c
  8902   004128  6ADA               	clrf	fsr2h,c
  8903   00412A  6ADF               	clrf	indf2,c
  8904   00412C  0012               	return		;funcret
  8905   00412E                     __end_of_sprintf:
  8906                           	callstack 0
  8907                           
  8908 ;; *************** function _vfprintf *****************
  8909 ;; Defined at:
  8910 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  8913 ;;		 -> sprintf@f(12), 
  8914 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  8915 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8916 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8917 ;;  ap              1   47[COMRAM] PTR PTR void 
  8918 ;;		 -> sprintf@ap(1), 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  8921 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8922 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8923 ;; Return value:  Size  Location     Type
  8924 ;;                  2   45[COMRAM] int 
  8925 ;; Registers used:
  8926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8927 ;; Tracked objects:
  8928 ;;		On entry : 0/0
  8929 ;;		On exit  : 0/0
  8930 ;;		Unchanged: 0/0
  8931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8936 ;;Total ram usage:        4 bytes
  8937 ;; Hardware stack levels used: 1
  8938 ;; Hardware stack levels required when called: 7
  8939 ;; This function calls:
  8940 ;;		_vfpfcnvrt
  8941 ;; This function is called by:
  8942 ;;		_sprintf
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           	psect	text47
  8947   003FCA                     __ptext47:
  8948                           	callstack 0
  8949   003FCA                     _vfprintf:
  8950                           	callstack 21
  8951   003FCA                     
  8952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  8953   003FCA  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  8954                           
  8955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8956   003FCE  EFF1  F01F         	goto	l5422
  8957   003FD2                     l5420:
  8958                           
  8959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8960   003FD2  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  8961   003FD6  0E31               	movlw	low vfprintf@cfmt
  8962   003FD8  6E24               	movwf	vfpfcnvrt@fmt^0,c
  8963   003FDA  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  8964   003FDE  EC79  F015         	call	_vfpfcnvrt	;wreg free
  8965   003FE2                     l5422:
  8966                           
  8967                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8968   003FE2  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  8969   003FE6                     	if	1	;There is more than 1 active tblptr byte
  8970   003FE6  0E0E               	movlw	high __smallconst
  8971   003FE8  6EF7               	movwf	tblptrh,c
  8972   003FEA                     	endif
  8973   003FEA                     	if	0	;tblptru may be non-zero
  8974   003FEA                     	endif
  8975   003FEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8976   003FEA  0E00               	movlw	low (__smallconst shr (0+16))
  8977   003FEC  6EF8               	movwf	tblptru,c
  8978   003FEE                     	endif
  8979   003FEE  0008               	tblrd		*
  8980   003FF0  50F5               	movf	tablat,w,c
  8981   003FF2  0900               	iorlw	0
  8982   003FF4  A4D8               	btfss	status,2,c
  8983   003FF6  EFFF  F01F         	goto	u4931
  8984   003FFA  EF01  F020         	goto	u4930
  8985   003FFE                     u4931:
  8986   003FFE  EFE9  F01F         	goto	l5420
  8987   004002                     u4930:
  8988   004002                     
  8989                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  8990   004002  0E00               	movlw	0
  8991   004004  6E2F               	movwf	(?_vfprintf+1)^0,c
  8992   004006  0E00               	movlw	0
  8993   004008  6E2E               	movwf	?_vfprintf^0,c
  8994   00400A  0012               	return		;funcret
  8995   00400C                     __end_of_vfprintf:
  8996                           	callstack 0
  8997                           
  8998 ;; *************** function _vfpfcnvrt *****************
  8999 ;; Defined at:
  9000 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9003 ;;		 -> sprintf@f(12), 
  9004 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9005 ;;		 -> vfprintf@cfmt(1), 
  9006 ;;  ap              1   36[COMRAM] PTR PTR void 
  9007 ;;		 -> sprintf@ap(1), 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  convarg         4   39[COMRAM] struct .
  9010 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9011 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  9012 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9013 ;;  done            1   43[COMRAM] _Bool 
  9014 ;;  c               1    0        unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9024 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9025 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9027 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9028 ;;Total ram usage:       11 bytes
  9029 ;; Hardware stack levels used: 1
  9030 ;; Hardware stack levels required when called: 6
  9031 ;; This function calls:
  9032 ;;		_dtoa
  9033 ;;		_fputc
  9034 ;;		_read_prec_or_width
  9035 ;; This function is called by:
  9036 ;;		_vfprintf
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text48
  9041   002AF2                     __ptext48:
  9042                           	callstack 0
  9043   002AF2                     _vfpfcnvrt:
  9044                           	callstack 21
  9045   002AF2                     
  9046                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9047   002AF2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9048   002AF4  6ED9               	movwf	fsr2l,c
  9049   002AF6  6ADA               	clrf	fsr2h,c
  9050   002AF8  CFDF FFF6          	movff	indf2,tblptrl
  9051   002AFC                     	if	1	;There is more than 1 active tblptr byte
  9052   002AFC  0E0E               	movlw	high __smallconst
  9053   002AFE  6EF7               	movwf	tblptrh,c
  9054   002B00                     	endif
  9055   002B00                     	if	0	;tblptru may be non-zero
  9056   002B00                     	endif
  9057   002B00                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9058   002B00  0E00               	movlw	low (__smallconst shr (0+16))
  9059   002B02  6EF8               	movwf	tblptru,c
  9060   002B04                     	endif
  9061   002B04  0008               	tblrd		*
  9062   002B06  50F5               	movf	tablat,w,c
  9063   002B08  0A25               	xorlw	37
  9064   002B0A  A4D8               	btfss	status,2,c
  9065   002B0C  EF8A  F015         	goto	u4781
  9066   002B10  EF8C  F015         	goto	u4780
  9067   002B14                     u4781:
  9068   002B14  EF29  F016         	goto	l5312
  9069   002B18                     u4780:
  9070   002B18                     
  9071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9072   002B18  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9073   002B1A  6ED9               	movwf	fsr2l,c
  9074   002B1C  6ADA               	clrf	fsr2h,c
  9075   002B1E  2ADF               	incf	indf2,f,c
  9076   002B20                     
  9077                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9078   002B20  0E00               	movlw	0
  9079   002B22  0100               	movlb	0	; () banked
  9080   002B24  6FC5               	movwf	(_width+1)& (0+255),b
  9081   002B26  0E00               	movlw	0
  9082   002B28  6FC4               	movwf	_width& (0+255),b
  9083   002B2A  C0C4  F0C8         	movff	_width,_flags
  9084   002B2E                     
  9085                           ; BSR set to: 0
  9086                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9087   002B2E  69C6               	setf	_prec& (0+255),b
  9088   002B30  69C7               	setf	(_prec+1)& (0+255),b
  9089   002B32                     
  9090                           ; BSR set to: 0
  9091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9092   002B32  0E00               	movlw	0
  9093   002B34  6E2C               	movwf	vfpfcnvrt@done^0,c
  9094                           
  9095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9096   002B36  EFC4  F015         	goto	l5286
  9097   002B3A                     l5276:
  9098                           
  9099                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9100   002B3A  0100               	movlb	0	; () banked
  9101   002B3C  83C8               	bsf	_flags& (0+255),1,b
  9102   002B3E                     
  9103                           ; BSR set to: 0
  9104                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9105   002B3E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9106   002B40  6ED9               	movwf	fsr2l,c
  9107   002B42  6ADA               	clrf	fsr2h,c
  9108   002B44  2ADF               	incf	indf2,f,c
  9109                           
  9110                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9111   002B46  EFC4  F015         	goto	l5286
  9112   002B4A                     l5280:
  9113                           
  9114                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9115   002B4A  0E01               	movlw	1
  9116   002B4C  6E2C               	movwf	vfpfcnvrt@done^0,c
  9117                           
  9118                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9119   002B4E  EFC4  F015         	goto	l5286
  9120   002B52                     l5284:
  9121   002B52  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9122   002B54  6ED9               	movwf	fsr2l,c
  9123   002B56  6ADA               	clrf	fsr2h,c
  9124   002B58  CFDF FFF6          	movff	indf2,tblptrl
  9125   002B5C                     	if	1	;There is more than 1 active tblptr byte
  9126   002B5C  0E0E               	movlw	high __smallconst
  9127   002B5E  6EF7               	movwf	tblptrh,c
  9128   002B60                     	endif
  9129   002B60                     	if	0	;tblptru may be non-zero
  9130   002B60                     	endif
  9131   002B60                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9132   002B60  0E00               	movlw	low (__smallconst shr (0+16))
  9133   002B62  6EF8               	movwf	tblptru,c
  9134   002B64                     	endif
  9135   002B64  0008               	tblrd		*
  9136   002B66  50F5               	movf	tablat,w,c
  9137   002B68  6E26               	movwf	??_vfpfcnvrt^0,c
  9138   002B6A  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9139                           
  9140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9141                           ; Switch size 1, requested type "simple"
  9142                           ; Number of cases is 1, Range of values is 0 to 0
  9143                           ; switch strategies available:
  9144                           ; Name         Instructions Cycles
  9145                           ; simple_byte            4     3 (average)
  9146                           ;	Chosen strategy is simple_byte
  9147   002B6C  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9148   002B6E  0A00               	xorlw	0	; case 0
  9149   002B70  B4D8               	btfsc	status,2,c
  9150   002B72  EFBD  F015         	goto	l6022
  9151   002B76  EFA5  F015         	goto	l5280
  9152   002B7A                     l6022:
  9153                           
  9154                           ; Switch size 1, requested type "simple"
  9155                           ; Number of cases is 1, Range of values is 48 to 48
  9156                           ; switch strategies available:
  9157                           ; Name         Instructions Cycles
  9158                           ; simple_byte            4     3 (average)
  9159                           ;	Chosen strategy is simple_byte
  9160   002B7A  5026               	movf	??_vfpfcnvrt^0,w,c
  9161   002B7C  0A30               	xorlw	48	; case 48
  9162   002B7E  B4D8               	btfsc	status,2,c
  9163   002B80  EF9D  F015         	goto	l5276
  9164   002B84  EFA5  F015         	goto	l5280
  9165   002B88                     l5286:
  9166                           
  9167                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9168   002B88  502C               	movf	vfpfcnvrt@done^0,w,c
  9169   002B8A  B4D8               	btfsc	status,2,c
  9170   002B8C  EFCA  F015         	goto	u4791
  9171   002B90  EFCC  F015         	goto	u4790
  9172   002B94                     u4791:
  9173   002B94  EFA9  F015         	goto	l5284
  9174   002B98                     u4790:
  9175   002B98                     
  9176                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9177   002B98  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9178   002B9C  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9179   002BA0  EC4A  F01A         	call	_read_prec_or_width	;wreg free
  9180   002BA4  C008  F0C4         	movff	?_read_prec_or_width,_width
  9181   002BA8  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
  9182   002BAC                     
  9183                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9184   002BAC  0100               	movlb	0	; () banked
  9185   002BAE  BFC5               	btfsc	(_width+1)& (0+255),7,b
  9186   002BB0  EFDE  F015         	goto	u4800
  9187   002BB4  EFDC  F015         	goto	u4801
  9188   002BB8                     u4801:
  9189   002BB8  EFE3  F015         	goto	l5294
  9190   002BBC                     u4800:
  9191   002BBC                     
  9192                           ; BSR set to: 0
  9193                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9194   002BBC  81C8               	bsf	_flags& (0+255),0,b
  9195                           
  9196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9197   002BBE  6DC4               	negf	_width& (0+255),b
  9198   002BC0  1FC5               	comf	(_width+1)& (0+255),f,b
  9199   002BC2  B0D8               	btfsc	status,0,c
  9200   002BC4  2BC5               	incf	(_width+1)& (0+255),f,b
  9201   002BC6                     l5294:
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9205   002BC6  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9206   002BC8  6ED9               	movwf	fsr2l,c
  9207   002BCA  6ADA               	clrf	fsr2h,c
  9208   002BCC  50DF               	movf	indf2,w,c
  9209   002BCE  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9210   002BD0                     
  9211                           ; BSR set to: 0
  9212                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9213   002BD0  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9214   002BD4                     	if	1	;There is more than 1 active tblptr byte
  9215   002BD4  0E0E               	movlw	high __smallconst
  9216   002BD6  6EF7               	movwf	tblptrh,c
  9217   002BD8                     	endif
  9218   002BD8                     	if	0	;tblptru may be non-zero
  9219   002BD8                     	endif
  9220   002BD8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9221   002BD8  0E00               	movlw	low (__smallconst shr (0+16))
  9222   002BDA  6EF8               	movwf	tblptru,c
  9223   002BDC                     	endif
  9224   002BDC  0008               	tblrd		*
  9225   002BDE  50F5               	movf	tablat,w,c
  9226   002BE0  0A64               	xorlw	100
  9227   002BE2  B4D8               	btfsc	status,2,c
  9228   002BE4  EFF6  F015         	goto	u4811
  9229   002BE8  EFF8  F015         	goto	u4810
  9230   002BEC                     u4811:
  9231   002BEC  EF08  F016         	goto	l5300
  9232   002BF0                     u4810:
  9233   002BF0                     
  9234                           ; BSR set to: 0
  9235   002BF0  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9236   002BF4                     	if	1	;There is more than 1 active tblptr byte
  9237   002BF4  0E0E               	movlw	high __smallconst
  9238   002BF6  6EF7               	movwf	tblptrh,c
  9239   002BF8                     	endif
  9240   002BF8                     	if	0	;tblptru may be non-zero
  9241   002BF8                     	endif
  9242   002BF8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9243   002BF8  0E00               	movlw	low (__smallconst shr (0+16))
  9244   002BFA  6EF8               	movwf	tblptru,c
  9245   002BFC                     	endif
  9246   002BFC  0008               	tblrd		*
  9247   002BFE  50F5               	movf	tablat,w,c
  9248   002C00  0A69               	xorlw	105
  9249   002C02  A4D8               	btfss	status,2,c
  9250   002C04  EF06  F016         	goto	u4821
  9251   002C08  EF08  F016         	goto	u4820
  9252   002C0C                     u4821:
  9253   002C0C  EF23  F016         	goto	l5308
  9254   002C10                     u4820:
  9255   002C10                     l5300:
  9256                           
  9257                           ; BSR set to: 0
  9258                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9259   002C10  5025               	movf	vfpfcnvrt@ap^0,w,c
  9260   002C12  6ED9               	movwf	fsr2l,c
  9261   002C14  6ADA               	clrf	fsr2h,c
  9262   002C16  0E02               	movlw	2
  9263   002C18  26DF               	addwf	indf2,f,c
  9264   002C1A  5CDF               	subwf	indf2,w,c
  9265   002C1C  6ED9               	movwf	fsr2l,c
  9266   002C1E  6ADA               	clrf	fsr2h,c
  9267   002C20  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9268   002C24  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9269   002C28                     
  9270                           ; BSR set to: 0
  9271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9272   002C28  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9273   002C2A  6ED9               	movwf	fsr2l,c
  9274   002C2C  6ADA               	clrf	fsr2h,c
  9275   002C2E  282D               	incf	vfpfcnvrt@cp^0,w,c
  9276   002C30  6EDF               	movwf	indf2,c
  9277   002C32                     
  9278                           ; BSR set to: 0
  9279                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9280   002C32  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9281   002C36  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9282   002C3A  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9283   002C3E  EC3D  F016         	call	_dtoa	;wreg free
  9284   002C42  EF3C  F016         	goto	l1408
  9285   002C46                     l5308:
  9286                           
  9287                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9288   002C46  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9289   002C48  6ED9               	movwf	fsr2l,c
  9290   002C4A  6ADA               	clrf	fsr2h,c
  9291   002C4C  2ADF               	incf	indf2,f,c
  9292   002C4E  EF3C  F016         	goto	l1408
  9293   002C52                     l5312:
  9294                           
  9295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9296   002C52  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9297   002C54  6ED9               	movwf	fsr2l,c
  9298   002C56  6ADA               	clrf	fsr2h,c
  9299   002C58  CFDF FFF6          	movff	indf2,tblptrl
  9300   002C5C                     	if	1	;There is more than 1 active tblptr byte
  9301   002C5C  0E0E               	movlw	high __smallconst
  9302   002C5E  6EF7               	movwf	tblptrh,c
  9303   002C60                     	endif
  9304   002C60                     	if	0	;tblptru may be non-zero
  9305   002C60                     	endif
  9306   002C60                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9307   002C60  0E00               	movlw	low (__smallconst shr (0+16))
  9308   002C62  6EF8               	movwf	tblptru,c
  9309   002C64                     	endif
  9310   002C64  0008               	tblrd		*
  9311   002C66  50F5               	movf	tablat,w,c
  9312   002C68  6E02               	movwf	fputc@c^0,c
  9313   002C6A  6A03               	clrf	(fputc@c+1)^0,c
  9314   002C6C  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9315   002C70  EC4C  F01B         	call	_fputc	;wreg free
  9316   002C74  EF23  F016         	goto	l5308
  9317   002C78                     l1408:
  9318   002C78  0012               	return		;funcret
  9319   002C7A                     __end_of_vfpfcnvrt:
  9320                           	callstack 0
  9321                           
  9322 ;; *************** function _read_prec_or_width *****************
  9323 ;; Defined at:
  9324 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9327 ;;		 -> vfprintf@cfmt(1), 
  9328 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9329 ;;		 -> sprintf@ap(1), 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  c               1    9[COMRAM] unsigned char 
  9332 ;;  n               2   10[COMRAM] int 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  2    7[COMRAM] int 
  9335 ;; Registers used:
  9336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9346 ;;Total ram usage:        5 bytes
  9347 ;; Hardware stack levels used: 1
  9348 ;; Hardware stack levels required when called: 2
  9349 ;; This function calls:
  9350 ;;		___wmul
  9351 ;; This function is called by:
  9352 ;;		_vfpfcnvrt
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text49
  9357   003494                     __ptext49:
  9358                           	callstack 0
  9359   003494                     _read_prec_or_width:
  9360                           	callstack 24
  9361   003494                     
  9362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9363   003494  0E00               	movlw	0
  9364   003496  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9365   003498  0E00               	movlw	0
  9366   00349A  6E0B               	movwf	read_prec_or_width@n^0,c
  9367   00349C                     
  9368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9369   00349C  5008               	movf	read_prec_or_width@fmt^0,w,c
  9370   00349E  6ED9               	movwf	fsr2l,c
  9371   0034A0  6ADA               	clrf	fsr2h,c
  9372   0034A2  CFDF FFF6          	movff	indf2,tblptrl
  9373   0034A6                     	if	1	;There is more than 1 active tblptr byte
  9374   0034A6  0E0E               	movlw	high __smallconst
  9375   0034A8  6EF7               	movwf	tblptrh,c
  9376   0034AA                     	endif
  9377   0034AA                     	if	0	;tblptru may be non-zero
  9378   0034AA                     	endif
  9379   0034AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9380   0034AA  0E00               	movlw	low (__smallconst shr (0+16))
  9381   0034AC  6EF8               	movwf	tblptru,c
  9382   0034AE                     	endif
  9383   0034AE  0008               	tblrd		*
  9384   0034B0  50F5               	movf	tablat,w,c
  9385   0034B2  0A2A               	xorlw	42
  9386   0034B4  A4D8               	btfss	status,2,c
  9387   0034B6  EF5F  F01A         	goto	u4741
  9388   0034BA  EF61  F01A         	goto	u4740
  9389   0034BE                     u4741:
  9390   0034BE  EF87  F01A         	goto	l5248
  9391   0034C2                     u4740:
  9392   0034C2                     
  9393                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9394   0034C2  5008               	movf	read_prec_or_width@fmt^0,w,c
  9395   0034C4  6ED9               	movwf	fsr2l,c
  9396   0034C6  6ADA               	clrf	fsr2h,c
  9397   0034C8  2ADF               	incf	indf2,f,c
  9398   0034CA                     
  9399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9400   0034CA  5009               	movf	read_prec_or_width@ap^0,w,c
  9401   0034CC  6ED9               	movwf	fsr2l,c
  9402   0034CE  6ADA               	clrf	fsr2h,c
  9403   0034D0  0E02               	movlw	2
  9404   0034D2  26DF               	addwf	indf2,f,c
  9405   0034D4  5CDF               	subwf	indf2,w,c
  9406   0034D6  6ED9               	movwf	fsr2l,c
  9407   0034D8  6ADA               	clrf	fsr2h,c
  9408   0034DA  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9409   0034DE  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9410                           
  9411                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9412   0034E2  EF9C  F01A         	goto	l1389
  9413   0034E6                     l5244:
  9414                           
  9415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9416   0034E6  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9417   0034EA  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9418   0034EE  0E00               	movlw	0
  9419   0034F0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9420   0034F2  0E0A               	movlw	10
  9421   0034F4  6E04               	movwf	___wmul@multiplicand^0,c
  9422   0034F6  ECA1  F021         	call	___wmul	;wreg free
  9423   0034FA  500A               	movf	read_prec_or_width@c^0,w,c
  9424   0034FC  2402               	addwf	?___wmul^0,w,c
  9425   0034FE  6E0B               	movwf	read_prec_or_width@n^0,c
  9426   003500  0E00               	movlw	0
  9427   003502  2003               	addwfc	(?___wmul+1)^0,w,c
  9428   003504  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9429   003506                     
  9430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9431   003506  5008               	movf	read_prec_or_width@fmt^0,w,c
  9432   003508  6ED9               	movwf	fsr2l,c
  9433   00350A  6ADA               	clrf	fsr2h,c
  9434   00350C  2ADF               	incf	indf2,f,c
  9435   00350E                     l5248:
  9436                           
  9437                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9438   00350E  5008               	movf	read_prec_or_width@fmt^0,w,c
  9439   003510  6ED9               	movwf	fsr2l,c
  9440   003512  6ADA               	clrf	fsr2h,c
  9441   003514  CFDF FFF6          	movff	indf2,tblptrl
  9442   003518                     	if	1	;There is more than 1 active tblptr byte
  9443   003518  0E0E               	movlw	high __smallconst
  9444   00351A  6EF7               	movwf	tblptrh,c
  9445   00351C                     	endif
  9446   00351C                     	if	0	;tblptru may be non-zero
  9447   00351C                     	endif
  9448   00351C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9449   00351C  0E00               	movlw	low (__smallconst shr (0+16))
  9450   00351E  6EF8               	movwf	tblptru,c
  9451   003520                     	endif
  9452   003520  0008               	tblrd		*
  9453   003522  50F5               	movf	tablat,w,c
  9454   003524  0FD0               	addlw	208
  9455   003526  6E0A               	movwf	read_prec_or_width@c^0,c
  9456   003528  0E09               	movlw	9
  9457   00352A  640A               	cpfsgt	read_prec_or_width@c^0,c
  9458   00352C  EF9A  F01A         	goto	u4751
  9459   003530  EF9C  F01A         	goto	u4750
  9460   003534                     u4751:
  9461   003534  EF73  F01A         	goto	l5244
  9462   003538                     u4750:
  9463   003538                     l1389:
  9464                           
  9465                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9466   003538  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9467   00353C  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9468   003540  0012               	return		;funcret
  9469   003542                     __end_of_read_prec_or_width:
  9470                           	callstack 0
  9471                           
  9472 ;; *************** function ___wmul *****************
  9473 ;; Defined at:
  9474 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  multiplier      2    1[COMRAM] unsigned int 
  9477 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  product         2    5[COMRAM] unsigned int 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  2    1[COMRAM] unsigned int 
  9482 ;; Registers used:
  9483 ;;		wreg, status,2, status,0, prodl, prodh
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9489 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9492 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9493 ;;Total ram usage:        6 bytes
  9494 ;; Hardware stack levels used: 1
  9495 ;; Hardware stack levels required when called: 1
  9496 ;; This function calls:
  9497 ;;		Nothing
  9498 ;; This function is called by:
  9499 ;;		_setMotorPWM
  9500 ;;		_logAction
  9501 ;;		_read_prec_or_width
  9502 ;;		_ADC2String
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text50
  9507   004342                     __ptext50:
  9508                           	callstack 0
  9509   004342                     ___wmul:
  9510                           	callstack 27
  9511   004342  5002               	movf	___wmul@multiplier^0,w,c
  9512   004344  0204               	mulwf	___wmul@multiplicand^0,c
  9513   004346  CFF3 F006          	movff	prodl,___wmul@product
  9514   00434A  CFF4 F007          	movff	prodh,___wmul@product+1
  9515   00434E  5002               	movf	___wmul@multiplier^0,w,c
  9516   004350  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9517   004352  50F3               	movf	243,w,c
  9518   004354  2607               	addwf	(___wmul@product+1)^0,f,c
  9519   004356  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9520   004358  0204               	mulwf	___wmul@multiplicand^0,c
  9521   00435A  50F3               	movf	243,w,c
  9522   00435C  2607               	addwf	(___wmul@product+1)^0,f,c
  9523   00435E  C006  F002         	movff	___wmul@product,?___wmul
  9524   004362  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9525   004366  0012               	return		;funcret
  9526   004368                     __end_of___wmul:
  9527                           	callstack 0
  9528                           
  9529 ;; *************** function _dtoa *****************
  9530 ;; Defined at:
  9531 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9534 ;;		 -> sprintf@f(12), 
  9535 ;;  d               2   24[COMRAM] int 
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  i               2   32[COMRAM] int 
  9538 ;;  w               2   29[COMRAM] int 
  9539 ;;  s               1   31[COMRAM] unsigned char 
  9540 ;;  p               1   28[COMRAM] _Bool 
  9541 ;; Return value:  Size  Location     Type
  9542 ;;                  1    wreg      void 
  9543 ;; Registers used:
  9544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9545 ;; Tracked objects:
  9546 ;;		On entry : 0/0
  9547 ;;		On exit  : 0/0
  9548 ;;		Unchanged: 0/0
  9549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9550 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9551 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9553 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9554 ;;Total ram usage:       11 bytes
  9555 ;; Hardware stack levels used: 1
  9556 ;; Hardware stack levels required when called: 5
  9557 ;; This function calls:
  9558 ;;		___awdiv
  9559 ;;		___awmod
  9560 ;;		_abs
  9561 ;;		_pad
  9562 ;; This function is called by:
  9563 ;;		_vfpfcnvrt
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text51
  9568   002C7A                     __ptext51:
  9569                           	callstack 0
  9570   002C7A                     _dtoa:
  9571                           	callstack 21
  9572   002C7A                     
  9573                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9574   002C7A  0E01               	movlw	1
  9575   002C7C  6E1D               	movwf	dtoa@p^0,c
  9576   002C7E                     
  9577                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9578   002C7E  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9579   002C80  EF44  F016         	goto	u4641
  9580   002C84  EF47  F016         	goto	u4640
  9581   002C88                     u4641:
  9582   002C88  0E01               	movlw	1
  9583   002C8A  EF48  F016         	goto	u4650
  9584   002C8E                     u4640:
  9585   002C8E  0E00               	movlw	0
  9586   002C90                     u4650:
  9587   002C90  6E20               	movwf	dtoa@s^0,c
  9588   002C92                     
  9589                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9590   002C92  C0C4  F01E         	movff	_width,dtoa@w
  9591   002C96  C0C5  F01F         	movff	_width+1,dtoa@w+1
  9592   002C9A                     
  9593                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9594   002C9A  5020               	movf	dtoa@s^0,w,c
  9595   002C9C  B4D8               	btfsc	status,2,c
  9596   002C9E  EF53  F016         	goto	u4661
  9597   002CA2  EF55  F016         	goto	u4660
  9598   002CA6                     u4661:
  9599   002CA6  EF6C  F016         	goto	l1372
  9600   002CAA                     u4660:
  9601   002CAA                     
  9602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9603   002CAA  061E               	decf	dtoa@w^0,f,c
  9604   002CAC  A0D8               	btfss	status,0,c
  9605   002CAE  061F               	decf	(dtoa@w+1)^0,f,c
  9606   002CB0                     
  9607                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9608   002CB0  5020               	movf	dtoa@s^0,w,c
  9609   002CB2  A4D8               	btfss	status,2,c
  9610   002CB4  EF5E  F016         	goto	u4671
  9611   002CB8  EF60  F016         	goto	u4670
  9612   002CBC                     u4671:
  9613   002CBC  EF66  F016         	goto	l5200
  9614   002CC0                     u4670:
  9615   002CC0  0E00               	movlw	0
  9616   002CC2  6E1C               	movwf	(_dtoa$3023+1)^0,c
  9617   002CC4  0E2B               	movlw	43
  9618   002CC6  6E1B               	movwf	_dtoa$3023^0,c
  9619   002CC8  EF6A  F016         	goto	l5202
  9620   002CCC                     l5200:
  9621   002CCC  0E00               	movlw	0
  9622   002CCE  6E1C               	movwf	(_dtoa$3023+1)^0,c
  9623   002CD0  0E2D               	movlw	45
  9624   002CD2  6E1B               	movwf	_dtoa$3023^0,c
  9625   002CD4                     l5202:
  9626   002CD4  C01B  F020         	movff	_dtoa$3023,dtoa@s
  9627   002CD8                     l1372:
  9628                           
  9629                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9630   002CD8  0E00               	movlw	0
  9631   002CDA  6E22               	movwf	(dtoa@i+1)^0,c
  9632   002CDC  0E1F               	movlw	31
  9633   002CDE  6E21               	movwf	dtoa@i^0,c
  9634   002CE0                     
  9635                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9636   002CE0  0E00               	movlw	0
  9637   002CE2  0101               	movlb	1	; () banked
  9638   002CE4  6F83               	movwf	(_dbuf+31)& (0+255),b
  9639                           
  9640                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9641   002CE6  EFA4  F016         	goto	l5216
  9642   002CEA                     l5206:
  9643                           
  9644                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9645   002CEA  0621               	decf	dtoa@i^0,f,c
  9646   002CEC  A0D8               	btfss	status,0,c
  9647   002CEE  0622               	decf	(dtoa@i+1)^0,f,c
  9648   002CF0                     
  9649                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9650   002CF0  0E64               	movlw	low _dbuf
  9651   002CF2  2421               	addwf	dtoa@i^0,w,c
  9652   002CF4  6ED9               	movwf	fsr2l,c
  9653   002CF6  0E01               	movlw	high _dbuf
  9654   002CF8  2022               	addwfc	(dtoa@i+1)^0,w,c
  9655   002CFA  6EDA               	movwf	fsr2h,c
  9656   002CFC  C019  F002         	movff	dtoa@d,___awmod@dividend
  9657   002D00  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9658   002D04  0E00               	movlw	0
  9659   002D06  6E05               	movwf	(___awmod@divisor+1)^0,c
  9660   002D08  0E0A               	movlw	10
  9661   002D0A  6E04               	movwf	___awmod@divisor^0,c
  9662   002D0C  ECF2  F019         	call	___awmod	;wreg free
  9663   002D10  C002  F008         	movff	?___awmod,abs@a
  9664   002D14  C003  F009         	movff	?___awmod+1,abs@a+1
  9665   002D18  EC97  F020         	call	_abs	;wreg free
  9666   002D1C  5008               	movf	?_abs^0,w,c
  9667   002D1E  0F30               	addlw	48
  9668   002D20  6EDF               	movwf	indf2,c
  9669   002D22                     
  9670                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9671   002D22  0E00               	movlw	0
  9672   002D24  6E1D               	movwf	dtoa@p^0,c
  9673   002D26                     
  9674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9675   002D26  061E               	decf	dtoa@w^0,f,c
  9676   002D28  A0D8               	btfss	status,0,c
  9677   002D2A  061F               	decf	(dtoa@w+1)^0,f,c
  9678   002D2C                     
  9679                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9680   002D2C  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9681   002D30  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9682   002D34  0E00               	movlw	0
  9683   002D36  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9684   002D38  0E0A               	movlw	10
  9685   002D3A  6E04               	movwf	___awdiv@divisor^0,c
  9686   002D3C  EC90  F019         	call	___awdiv	;wreg free
  9687   002D40  C002  F019         	movff	?___awdiv,dtoa@d
  9688   002D44  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9689   002D48                     l5216:
  9690                           
  9691                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9692   002D48  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9693   002D4A  EFAF  F016         	goto	u4681
  9694   002D4E  5022               	movf	(dtoa@i+1)^0,w,c
  9695   002D50  E108               	bnz	u4680
  9696   002D52  0421               	decf	dtoa@i^0,w,c
  9697   002D54  A0D8               	btfss	status,0,c
  9698   002D56  EFAF  F016         	goto	u4681
  9699   002D5A  EFB1  F016         	goto	u4680
  9700   002D5E                     u4681:
  9701   002D5E  EFD7  F016         	goto	l5226
  9702   002D62                     u4680:
  9703   002D62  5019               	movf	dtoa@d^0,w,c
  9704   002D64  101A               	iorwf	(dtoa@d+1)^0,w,c
  9705   002D66  A4D8               	btfss	status,2,c
  9706   002D68  EFB8  F016         	goto	u4691
  9707   002D6C  EFBA  F016         	goto	u4690
  9708   002D70                     u4691:
  9709   002D70  EF75  F016         	goto	l5206
  9710   002D74                     u4690:
  9711   002D74  501D               	movf	dtoa@p^0,w,c
  9712   002D76  A4D8               	btfss	status,2,c
  9713   002D78  EFC0  F016         	goto	u4701
  9714   002D7C  EFC2  F016         	goto	u4700
  9715   002D80                     u4701:
  9716   002D80  EF75  F016         	goto	l5206
  9717   002D84                     u4700:
  9718   002D84  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9719   002D86  EFCD  F016         	goto	u4711
  9720   002D8A  501F               	movf	(dtoa@w+1)^0,w,c
  9721   002D8C  E108               	bnz	u4710
  9722   002D8E  041E               	decf	dtoa@w^0,w,c
  9723   002D90  A0D8               	btfss	status,0,c
  9724   002D92  EFCD  F016         	goto	u4711
  9725   002D96  EFCF  F016         	goto	u4710
  9726   002D9A                     u4711:
  9727   002D9A  EFD7  F016         	goto	l5226
  9728   002D9E                     u4710:
  9729   002D9E  0100               	movlb	0	; () banked
  9730   002DA0  B3C8               	btfsc	_flags& (0+255),1,b
  9731   002DA2  EFD5  F016         	goto	u4721
  9732   002DA6  EFD7  F016         	goto	u4720
  9733   002DAA                     u4721:
  9734   002DAA  EF75  F016         	goto	l5206
  9735   002DAE                     u4720:
  9736   002DAE                     l5226:
  9737                           
  9738                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9739   002DAE  5020               	movf	dtoa@s^0,w,c
  9740   002DB0  B4D8               	btfsc	status,2,c
  9741   002DB2  EFDD  F016         	goto	u4731
  9742   002DB6  EFDF  F016         	goto	u4730
  9743   002DBA                     u4731:
  9744   002DBA  EFEA  F016         	goto	l5232
  9745   002DBE                     u4730:
  9746   002DBE                     
  9747                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9748   002DBE  0621               	decf	dtoa@i^0,f,c
  9749   002DC0  A0D8               	btfss	status,0,c
  9750   002DC2  0622               	decf	(dtoa@i+1)^0,f,c
  9751   002DC4                     
  9752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9753   002DC4  0E64               	movlw	low _dbuf
  9754   002DC6  2421               	addwf	dtoa@i^0,w,c
  9755   002DC8  6ED9               	movwf	fsr2l,c
  9756   002DCA  0E01               	movlw	high _dbuf
  9757   002DCC  2022               	addwfc	(dtoa@i+1)^0,w,c
  9758   002DCE  6EDA               	movwf	fsr2h,c
  9759   002DD0  C020  FFDF         	movff	dtoa@s,indf2
  9760   002DD4                     l5232:
  9761                           
  9762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9763   002DD4  C018  F010         	movff	dtoa@fp,pad@fp
  9764   002DD8  0E64               	movlw	low _dbuf
  9765   002DDA  2421               	addwf	dtoa@i^0,w,c
  9766   002DDC  6E11               	movwf	pad@buf^0,c
  9767   002DDE  0E01               	movlw	high _dbuf
  9768   002DE0  2022               	addwfc	(dtoa@i+1)^0,w,c
  9769   002DE2  6E12               	movwf	(pad@buf+1)^0,c
  9770   002DE4  C01E  F013         	movff	dtoa@w,pad@p
  9771   002DE8  C01F  F014         	movff	dtoa@w+1,pad@p+1
  9772   002DEC  ECA1  F01B         	call	_pad	;wreg free
  9773   002DF0  0012               	return		;funcret
  9774   002DF2                     __end_of_dtoa:
  9775                           	callstack 0
  9776                           
  9777 ;; *************** function _pad *****************
  9778 ;; Defined at:
  9779 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  9782 ;;		 -> sprintf@f(12), 
  9783 ;;  buf             2   16[COMRAM] PTR unsigned char 
  9784 ;;		 -> dbuf(32), 
  9785 ;;  p               2   18[COMRAM] int 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  i               2   21[COMRAM] int 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9797 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9800 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9801 ;;Total ram usage:        8 bytes
  9802 ;; Hardware stack levels used: 1
  9803 ;; Hardware stack levels required when called: 4
  9804 ;; This function calls:
  9805 ;;		_fputc
  9806 ;;		_fputs
  9807 ;; This function is called by:
  9808 ;;		_dtoa
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text52
  9813   003742                     __ptext52:
  9814                           	callstack 0
  9815   003742                     _pad:
  9816                           	callstack 21
  9817   003742                     
  9818                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9819   003742  0100               	movlb	0	; () banked
  9820   003744  A1C8               	btfss	_flags& (0+255),0,b
  9821   003746  EFA7  F01B         	goto	u4591
  9822   00374A  EFA9  F01B         	goto	u4590
  9823   00374E                     u4591:
  9824   00374E  EFB1  F01B         	goto	l5170
  9825   003752                     u4590:
  9826   003752                     
  9827                           ; BSR set to: 0
  9828                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9829   003752  C011  F00A         	movff	pad@buf,fputs@s
  9830   003756  C012  F00B         	movff	pad@buf+1,fputs@s+1
  9831   00375A  C010  F00C         	movff	pad@fp,fputs@fp
  9832   00375E  EC27  F020         	call	_fputs	;wreg free
  9833   003762                     l5170:
  9834                           
  9835                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  9836   003762  BE14               	btfsc	(pad@p+1)^0,7,c
  9837   003764  EFB8  F01B         	goto	u4600
  9838   003768  EFB6  F01B         	goto	u4601
  9839   00376C                     u4601:
  9840   00376C  EFBC  F01B         	goto	l1364
  9841   003770                     u4600:
  9842   003770                     
  9843                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9844   003770  0E00               	movlw	0
  9845   003772  6E14               	movwf	(pad@p+1)^0,c
  9846   003774  0E00               	movlw	0
  9847   003776  6E13               	movwf	pad@p^0,c
  9848   003778                     l1364:
  9849                           
  9850                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9851   003778  0E00               	movlw	0
  9852   00377A  6E17               	movwf	(pad@i+1)^0,c
  9853   00377C  0E00               	movlw	0
  9854   00377E  6E16               	movwf	pad@i^0,c
  9855                           
  9856                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9857   003780  EFCC  F01B         	goto	l5178
  9858   003784                     l5174:
  9859                           
  9860                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9861   003784  0E00               	movlw	0
  9862   003786  6E03               	movwf	(fputc@c+1)^0,c
  9863   003788  0E20               	movlw	32
  9864   00378A  6E02               	movwf	fputc@c^0,c
  9865   00378C  C010  F004         	movff	pad@fp,fputc@fp
  9866   003790  EC4C  F01B         	call	_fputc	;wreg free
  9867   003794                     
  9868                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9869   003794  4A16               	infsnz	pad@i^0,f,c
  9870   003796  2A17               	incf	(pad@i+1)^0,f,c
  9871   003798                     l5178:
  9872                           
  9873                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9874   003798  5013               	movf	pad@p^0,w,c
  9875   00379A  5C16               	subwf	pad@i^0,w,c
  9876   00379C  5017               	movf	(pad@i+1)^0,w,c
  9877   00379E  0A80               	xorlw	128
  9878   0037A0  6E15               	movwf	??_pad^0,c
  9879   0037A2  5014               	movf	(pad@p+1)^0,w,c
  9880   0037A4  0A80               	xorlw	128
  9881   0037A6  5815               	subwfb	??_pad^0,w,c
  9882   0037A8  A0D8               	btfss	status,0,c
  9883   0037AA  EFD9  F01B         	goto	u4611
  9884   0037AE  EFDB  F01B         	goto	u4610
  9885   0037B2                     u4611:
  9886   0037B2  EFC2  F01B         	goto	l5174
  9887   0037B6                     u4610:
  9888   0037B6                     
  9889                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  9890   0037B6  0100               	movlb	0	; () banked
  9891   0037B8  B1C8               	btfsc	_flags& (0+255),0,b
  9892   0037BA  EFE1  F01B         	goto	u4621
  9893   0037BE  EFE3  F01B         	goto	u4620
  9894   0037C2                     u4621:
  9895   0037C2  EFEB  F01B         	goto	l1369
  9896   0037C6                     u4620:
  9897   0037C6                     
  9898                           ; BSR set to: 0
  9899                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  9900   0037C6  C011  F00A         	movff	pad@buf,fputs@s
  9901   0037CA  C012  F00B         	movff	pad@buf+1,fputs@s+1
  9902   0037CE  C010  F00C         	movff	pad@fp,fputs@fp
  9903   0037D2  EC27  F020         	call	_fputs	;wreg free
  9904   0037D6                     l1369:
  9905   0037D6  0012               	return		;funcret
  9906   0037D8                     __end_of_pad:
  9907                           	callstack 0
  9908                           
  9909 ;; *************** function _fputs *****************
  9910 ;; Defined at:
  9911 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  s               2    9[COMRAM] PTR const unsigned char 
  9914 ;;		 -> dbuf(32), 
  9915 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  9916 ;;		 -> sprintf@f(12), 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  i               2   13[COMRAM] int 
  9919 ;;  c               1   12[COMRAM] unsigned char 
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  2    9[COMRAM] int 
  9922 ;; Registers used:
  9923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9929 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9930 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9933 ;;Total ram usage:        6 bytes
  9934 ;; Hardware stack levels used: 1
  9935 ;; Hardware stack levels required when called: 3
  9936 ;; This function calls:
  9937 ;;		_fputc
  9938 ;; This function is called by:
  9939 ;;		_pad
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	text53
  9944   00404E                     __ptext53:
  9945                           	callstack 0
  9946   00404E                     _fputs:
  9947                           	callstack 21
  9948   00404E  0E00               	movlw	0
  9949   004050  6E0F               	movwf	(fputs@i+1)^0,c
  9950   004052  0E00               	movlw	0
  9951   004054  6E0E               	movwf	fputs@i^0,c
  9952   004056  EF36  F020         	goto	l5078
  9953   00405A                     l5074:
  9954   00405A  C00D  F002         	movff	fputs@c,fputc@c
  9955   00405E  6A03               	clrf	(fputc@c+1)^0,c
  9956   004060  C00C  F004         	movff	fputs@fp,fputc@fp
  9957   004064  EC4C  F01B         	call	_fputc	;wreg free
  9958   004068  4A0E               	infsnz	fputs@i^0,f,c
  9959   00406A  2A0F               	incf	(fputs@i+1)^0,f,c
  9960   00406C                     l5078:
  9961   00406C  500E               	movf	fputs@i^0,w,c
  9962   00406E  240A               	addwf	fputs@s^0,w,c
  9963   004070  6ED9               	movwf	fsr2l,c
  9964   004072  500F               	movf	(fputs@i+1)^0,w,c
  9965   004074  200B               	addwfc	(fputs@s+1)^0,w,c
  9966   004076  6EDA               	movwf	fsr2h,c
  9967   004078  50DF               	movf	indf2,w,c
  9968   00407A  6E0D               	movwf	fputs@c^0,c
  9969   00407C  500D               	movf	fputs@c^0,w,c
  9970   00407E  A4D8               	btfss	status,2,c
  9971   004080  EF44  F020         	goto	u4461
  9972   004084  EF46  F020         	goto	u4460
  9973   004088                     u4461:
  9974   004088  EF2D  F020         	goto	l5074
  9975   00408C                     u4460:
  9976   00408C  0012               	return		;funcret
  9977   00408E                     __end_of_fputs:
  9978                           	callstack 0
  9979                           
  9980 ;; *************** function _fputc *****************
  9981 ;; Defined at:
  9982 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;  c               2    1[COMRAM] int 
  9985 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  9986 ;;		 -> sprintf@f(12), 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  2    1[COMRAM] int 
  9991 ;; Registers used:
  9992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9998 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10000 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10001 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10002 ;;Total ram usage:        8 bytes
 10003 ;; Hardware stack levels used: 1
 10004 ;; Hardware stack levels required when called: 2
 10005 ;; This function calls:
 10006 ;;		_putch
 10007 ;; This function is called by:
 10008 ;;		_pad
 10009 ;;		_vfpfcnvrt
 10010 ;;		_fputs
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           	psect	text54
 10015   003698                     __ptext54:
 10016                           	callstack 0
 10017   003698                     _fputc:
 10018                           	callstack 24
 10019   003698  5004               	movf	fputc@fp^0,w,c
 10020   00369A  B4D8               	btfsc	status,2,c
 10021   00369C  EF52  F01B         	goto	u4421
 10022   0036A0  EF54  F01B         	goto	u4420
 10023   0036A4                     u4421:
 10024   0036A4  EF5C  F01B         	goto	l5062
 10025   0036A8                     u4420:
 10026   0036A8  5004               	movf	fputc@fp^0,w,c
 10027   0036AA  A4D8               	btfss	status,2,c
 10028   0036AC  EF5A  F01B         	goto	u4431
 10029   0036B0  EF5C  F01B         	goto	u4430
 10030   0036B4                     u4431:
 10031   0036B4  EF61  F01B         	goto	l5064
 10032   0036B8                     u4430:
 10033   0036B8                     l5062:
 10034   0036B8  5002               	movf	fputc@c^0,w,c
 10035   0036BA  EC21  F022         	call	_putch
 10036   0036BE  EFA0  F01B         	goto	l1433
 10037   0036C2                     l5064:
 10038   0036C2  5004               	movf	fputc@fp^0,w,c
 10039   0036C4  6ED9               	movwf	fsr2l,c
 10040   0036C6  6ADA               	clrf	fsr2h,c
 10041   0036C8  0E0A               	movlw	10
 10042   0036CA  26D9               	addwf	fsr2l,f,c
 10043   0036CC  50DE               	movf	postinc2,w,c
 10044   0036CE  10DE               	iorwf	postinc2,w,c
 10045   0036D0  B4D8               	btfsc	status,2,c
 10046   0036D2  EF6D  F01B         	goto	u4441
 10047   0036D6  EF6F  F01B         	goto	u4440
 10048   0036DA                     u4441:
 10049   0036DA  EF88  F01B         	goto	l5068
 10050   0036DE                     u4440:
 10051   0036DE  5004               	movf	fputc@fp^0,w,c
 10052   0036E0  6ED9               	movwf	fsr2l,c
 10053   0036E2  6ADA               	clrf	fsr2h,c
 10054   0036E4  0E0A               	movlw	10
 10055   0036E6  26D9               	addwf	fsr2l,f,c
 10056   0036E8  5004               	movf	fputc@fp^0,w,c
 10057   0036EA  6EE1               	movwf	fsr1l,c
 10058   0036EC  6AE2               	clrf	fsr1h,c
 10059   0036EE  0E03               	movlw	3
 10060   0036F0  26E1               	addwf	fsr1l,f,c
 10061   0036F2  50DE               	movf	postinc2,w,c
 10062   0036F4  5CE6               	subwf	postinc1,w,c
 10063   0036F6  50E6               	movf	postinc1,w,c
 10064   0036F8  0A80               	xorlw	128
 10065   0036FA  6E09               	movwf	(??_fputc+4)^0,c
 10066   0036FC  50DE               	movf	postinc2,w,c
 10067   0036FE  0A80               	xorlw	128
 10068   003700  5809               	subwfb	(??_fputc+4)^0,w,c
 10069   003702  B0D8               	btfsc	status,0,c
 10070   003704  EF86  F01B         	goto	u4451
 10071   003708  EF88  F01B         	goto	u4450
 10072   00370C                     u4451:
 10073   00370C  EFA0  F01B         	goto	l1433
 10074   003710                     u4450:
 10075   003710                     l5068:
 10076   003710  5004               	movf	fputc@fp^0,w,c
 10077   003712  6ED9               	movwf	fsr2l,c
 10078   003714  6ADA               	clrf	fsr2h,c
 10079   003716  0E03               	movlw	3
 10080   003718  26D9               	addwf	fsr2l,f,c
 10081   00371A  50DF               	movf	indf2,w,c
 10082   00371C  6E05               	movwf	??_fputc^0,c
 10083   00371E  5004               	movf	fputc@fp^0,w,c
 10084   003720  6ED9               	movwf	fsr2l,c
 10085   003722  6ADA               	clrf	fsr2h,c
 10086   003724  50DF               	movf	indf2,w,c
 10087   003726  2405               	addwf	??_fputc^0,w,c
 10088   003728  6ED9               	movwf	fsr2l,c
 10089   00372A  6ADA               	clrf	fsr2h,c
 10090   00372C  C002  FFDF         	movff	fputc@c,indf2
 10091   003730  5004               	movf	fputc@fp^0,w,c
 10092   003732  6ED9               	movwf	fsr2l,c
 10093   003734  6ADA               	clrf	fsr2h,c
 10094   003736  0E03               	movlw	3
 10095   003738  26D9               	addwf	fsr2l,f,c
 10096   00373A  2ADE               	incf	postinc2,f,c
 10097   00373C  0E00               	movlw	0
 10098   00373E  22DD               	addwfc	postdec2,f,c
 10099   003740                     l1433:
 10100   003740  0012               	return		;funcret
 10101   003742                     __end_of_fputc:
 10102                           	callstack 0
 10103                           
 10104 ;; *************** function _putch *****************
 10105 ;; Defined at:
 10106 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;  c               1    wreg     unsigned char 
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;  c               1    0[COMRAM] unsigned char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      void 
 10113 ;; Registers used:
 10114 ;;		wreg
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10124 ;;Total ram usage:        0 bytes
 10125 ;; Hardware stack levels used: 1
 10126 ;; Hardware stack levels required when called: 1
 10127 ;; This function calls:
 10128 ;;		Nothing
 10129 ;; This function is called by:
 10130 ;;		_fputc
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text55
 10135   004442                     __ptext55:
 10136                           	callstack 0
 10137   004442                     _putch:
 10138                           	callstack 24
 10139   004442  0012               	return		;funcret
 10140   004444                     __end_of_putch:
 10141                           	callstack 0
 10142                           
 10143 ;; *************** function _abs *****************
 10144 ;; Defined at:
 10145 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  a               2    7[COMRAM] int 
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  2    7[COMRAM] int 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10161 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10162 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10163 ;;Total ram usage:        4 bytes
 10164 ;; Hardware stack levels used: 1
 10165 ;; Hardware stack levels required when called: 1
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_dtoa
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text56
 10174   00412E                     __ptext56:
 10175                           	callstack 0
 10176   00412E                     _abs:
 10177                           	callstack 24
 10178   00412E  BE09               	btfsc	(abs@a+1)^0,7,c
 10179   004130  EF9C  F020         	goto	u4631
 10180   004134  EF9E  F020         	goto	u4630
 10181   004138                     u4631:
 10182   004138  EFA4  F020         	goto	l1418
 10183   00413C                     u4630:
 10184   00413C  C008  F008         	movff	abs@a,?_abs
 10185   004140  C009  F009         	movff	abs@a+1,?_abs+1
 10186   004144  EFB0  F020         	goto	l1421
 10187   004148                     l1418:
 10188   004148  C008  F00A         	movff	abs@a,??_abs
 10189   00414C  C009  F00B         	movff	abs@a+1,??_abs+1
 10190   004150  1E0A               	comf	??_abs^0,f,c
 10191   004152  1E0B               	comf	(??_abs+1)^0,f,c
 10192   004154  4A0A               	infsnz	??_abs^0,f,c
 10193   004156  2A0B               	incf	(??_abs+1)^0,f,c
 10194   004158  C00A  F008         	movff	??_abs,?_abs
 10195   00415C  C00B  F009         	movff	??_abs+1,?_abs+1
 10196   004160                     l1421:
 10197   004160  0012               	return		;funcret
 10198   004162                     __end_of_abs:
 10199                           	callstack 0
 10200                           
 10201 ;; *************** function ___awmod *****************
 10202 ;; Defined at:
 10203 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;  dividend        2    1[COMRAM] int 
 10206 ;;  divisor         2    3[COMRAM] int 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;  sign            1    6[COMRAM] unsigned char 
 10209 ;;  counter         1    5[COMRAM] unsigned char 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;                  2    1[COMRAM] int 
 10212 ;; Registers used:
 10213 ;;		wreg, status,2, status,0
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10223 ;;Total ram usage:        6 bytes
 10224 ;; Hardware stack levels used: 1
 10225 ;; Hardware stack levels required when called: 1
 10226 ;; This function calls:
 10227 ;;		Nothing
 10228 ;; This function is called by:
 10229 ;;		_dtoa
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           	psect	text57
 10234   0033E4                     __ptext57:
 10235                           	callstack 0
 10236   0033E4                     ___awmod:
 10237                           	callstack 24
 10238   0033E4  0E00               	movlw	0
 10239   0033E6  6E07               	movwf	___awmod@sign^0,c
 10240   0033E8  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10241   0033EA  EFFB  F019         	goto	u4530
 10242   0033EE  EFF9  F019         	goto	u4531
 10243   0033F2                     u4531:
 10244   0033F2  EF01  F01A         	goto	l5138
 10245   0033F6                     u4530:
 10246   0033F6  6C02               	negf	___awmod@dividend^0,c
 10247   0033F8  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10248   0033FA  B0D8               	btfsc	status,0,c
 10249   0033FC  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10250   0033FE  0E01               	movlw	1
 10251   003400  6E07               	movwf	___awmod@sign^0,c
 10252   003402                     l5138:
 10253   003402  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10254   003404  EF08  F01A         	goto	u4540
 10255   003408  EF06  F01A         	goto	u4541
 10256   00340C                     u4541:
 10257   00340C  EF0C  F01A         	goto	l5142
 10258   003410                     u4540:
 10259   003410  6C04               	negf	___awmod@divisor^0,c
 10260   003412  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10261   003414  B0D8               	btfsc	status,0,c
 10262   003416  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10263   003418                     l5142:
 10264   003418  5004               	movf	___awmod@divisor^0,w,c
 10265   00341A  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10266   00341C  B4D8               	btfsc	status,2,c
 10267   00341E  EF13  F01A         	goto	u4551
 10268   003422  EF15  F01A         	goto	u4550
 10269   003426                     u4551:
 10270   003426  EF39  F01A         	goto	l5158
 10271   00342A                     u4550:
 10272   00342A  0E01               	movlw	1
 10273   00342C  6E06               	movwf	___awmod@counter^0,c
 10274   00342E  EF1D  F01A         	goto	l5148
 10275   003432                     l5146:
 10276   003432  90D8               	bcf	status,0,c
 10277   003434  3604               	rlcf	___awmod@divisor^0,f,c
 10278   003436  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10279   003438  2A06               	incf	___awmod@counter^0,f,c
 10280   00343A                     l5148:
 10281   00343A  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10282   00343C  EF22  F01A         	goto	u4561
 10283   003440  EF24  F01A         	goto	u4560
 10284   003444                     u4561:
 10285   003444  EF19  F01A         	goto	l5146
 10286   003448                     u4560:
 10287   003448                     l5150:
 10288   003448  5004               	movf	___awmod@divisor^0,w,c
 10289   00344A  5C02               	subwf	___awmod@dividend^0,w,c
 10290   00344C  5005               	movf	(___awmod@divisor+1)^0,w,c
 10291   00344E  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10292   003450  A0D8               	btfss	status,0,c
 10293   003452  EF2D  F01A         	goto	u4571
 10294   003456  EF2F  F01A         	goto	u4570
 10295   00345A                     u4571:
 10296   00345A  EF33  F01A         	goto	l5154
 10297   00345E                     u4570:
 10298   00345E  5004               	movf	___awmod@divisor^0,w,c
 10299   003460  5E02               	subwf	___awmod@dividend^0,f,c
 10300   003462  5005               	movf	(___awmod@divisor+1)^0,w,c
 10301   003464  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10302   003466                     l5154:
 10303   003466  90D8               	bcf	status,0,c
 10304   003468  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10305   00346A  3204               	rrcf	___awmod@divisor^0,f,c
 10306   00346C  2E06               	decfsz	___awmod@counter^0,f,c
 10307   00346E  EF24  F01A         	goto	l5150
 10308   003472                     l5158:
 10309   003472  5007               	movf	___awmod@sign^0,w,c
 10310   003474  B4D8               	btfsc	status,2,c
 10311   003476  EF3F  F01A         	goto	u4581
 10312   00347A  EF41  F01A         	goto	u4580
 10313   00347E                     u4581:
 10314   00347E  EF45  F01A         	goto	l5162
 10315   003482                     u4580:
 10316   003482  6C02               	negf	___awmod@dividend^0,c
 10317   003484  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10318   003486  B0D8               	btfsc	status,0,c
 10319   003488  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10320   00348A                     l5162:
 10321   00348A  C002  F002         	movff	___awmod@dividend,?___awmod
 10322   00348E  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10323   003492  0012               	return		;funcret
 10324   003494                     __end_of___awmod:
 10325                           	callstack 0
 10326                           
 10327 ;; *************** function ___awdiv *****************
 10328 ;; Defined at:
 10329 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;  dividend        2    1[COMRAM] int 
 10332 ;;  divisor         2    3[COMRAM] int 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  quotient        2    7[COMRAM] int 
 10335 ;;  sign            1    6[COMRAM] unsigned char 
 10336 ;;  counter         1    5[COMRAM] unsigned char 
 10337 ;; Return value:  Size  Location     Type
 10338 ;;                  2    1[COMRAM] int 
 10339 ;; Registers used:
 10340 ;;		wreg, status,2, status,0
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10349 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10350 ;;Total ram usage:        8 bytes
 10351 ;; Hardware stack levels used: 1
 10352 ;; Hardware stack levels required when called: 1
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		_dtoa
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           	psect	text58
 10361   003320                     __ptext58:
 10362                           	callstack 0
 10363   003320                     ___awdiv:
 10364                           	callstack 24
 10365   003320  0E00               	movlw	0
 10366   003322  6E07               	movwf	___awdiv@sign^0,c
 10367   003324  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10368   003326  EF99  F019         	goto	u4470
 10369   00332A  EF97  F019         	goto	u4471
 10370   00332E                     u4471:
 10371   00332E  EF9F  F019         	goto	l5094
 10372   003332                     u4470:
 10373   003332  6C04               	negf	___awdiv@divisor^0,c
 10374   003334  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10375   003336  B0D8               	btfsc	status,0,c
 10376   003338  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10377   00333A  0E01               	movlw	1
 10378   00333C  6E07               	movwf	___awdiv@sign^0,c
 10379   00333E                     l5094:
 10380   00333E  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10381   003340  EFA6  F019         	goto	u4480
 10382   003344  EFA4  F019         	goto	u4481
 10383   003348                     u4481:
 10384   003348  EFAC  F019         	goto	l5100
 10385   00334C                     u4480:
 10386   00334C  6C02               	negf	___awdiv@dividend^0,c
 10387   00334E  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10388   003350  B0D8               	btfsc	status,0,c
 10389   003352  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10390   003354  0E01               	movlw	1
 10391   003356  1A07               	xorwf	___awdiv@sign^0,f,c
 10392   003358                     l5100:
 10393   003358  0E00               	movlw	0
 10394   00335A  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10395   00335C  0E00               	movlw	0
 10396   00335E  6E08               	movwf	___awdiv@quotient^0,c
 10397   003360  5004               	movf	___awdiv@divisor^0,w,c
 10398   003362  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10399   003364  B4D8               	btfsc	status,2,c
 10400   003366  EFB7  F019         	goto	u4491
 10401   00336A  EFB9  F019         	goto	u4490
 10402   00336E                     u4491:
 10403   00336E  EFE1  F019         	goto	l5122
 10404   003372                     u4490:
 10405   003372  0E01               	movlw	1
 10406   003374  6E06               	movwf	___awdiv@counter^0,c
 10407   003376  EFC1  F019         	goto	l5108
 10408   00337A                     l5106:
 10409   00337A  90D8               	bcf	status,0,c
 10410   00337C  3604               	rlcf	___awdiv@divisor^0,f,c
 10411   00337E  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10412   003380  2A06               	incf	___awdiv@counter^0,f,c
 10413   003382                     l5108:
 10414   003382  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10415   003384  EFC6  F019         	goto	u4501
 10416   003388  EFC8  F019         	goto	u4500
 10417   00338C                     u4501:
 10418   00338C  EFBD  F019         	goto	l5106
 10419   003390                     u4500:
 10420   003390                     l5110:
 10421   003390  90D8               	bcf	status,0,c
 10422   003392  3608               	rlcf	___awdiv@quotient^0,f,c
 10423   003394  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10424   003396  5004               	movf	___awdiv@divisor^0,w,c
 10425   003398  5C02               	subwf	___awdiv@dividend^0,w,c
 10426   00339A  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10427   00339C  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10428   00339E  A0D8               	btfss	status,0,c
 10429   0033A0  EFD4  F019         	goto	u4511
 10430   0033A4  EFD6  F019         	goto	u4510
 10431   0033A8                     u4511:
 10432   0033A8  EFDB  F019         	goto	l5118
 10433   0033AC                     u4510:
 10434   0033AC  5004               	movf	___awdiv@divisor^0,w,c
 10435   0033AE  5E02               	subwf	___awdiv@dividend^0,f,c
 10436   0033B0  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10437   0033B2  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10438   0033B4  8008               	bsf	___awdiv@quotient^0,0,c
 10439   0033B6                     l5118:
 10440   0033B6  90D8               	bcf	status,0,c
 10441   0033B8  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10442   0033BA  3204               	rrcf	___awdiv@divisor^0,f,c
 10443   0033BC  2E06               	decfsz	___awdiv@counter^0,f,c
 10444   0033BE  EFC8  F019         	goto	l5110
 10445   0033C2                     l5122:
 10446   0033C2  5007               	movf	___awdiv@sign^0,w,c
 10447   0033C4  B4D8               	btfsc	status,2,c
 10448   0033C6  EFE7  F019         	goto	u4521
 10449   0033CA  EFE9  F019         	goto	u4520
 10450   0033CE                     u4521:
 10451   0033CE  EFED  F019         	goto	l5126
 10452   0033D2                     u4520:
 10453   0033D2  6C08               	negf	___awdiv@quotient^0,c
 10454   0033D4  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10455   0033D6  B0D8               	btfsc	status,0,c
 10456   0033D8  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10457   0033DA                     l5126:
 10458   0033DA  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10459   0033DE  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10460   0033E2  0012               	return		;funcret
 10461   0033E4                     __end_of___awdiv:
 10462                           	callstack 0
 10463                           
 10464 ;; *************** function _sendStringSerial4 *****************
 10465 ;; Defined at:
 10466 ;;		line 41 in file "serial.c"
 10467 ;; Parameters:    Size  Location     Type
 10468 ;;  string          1    2[COMRAM] PTR unsigned char 
 10469 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      void 
 10474 ;; Registers used:
 10475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10481 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10485 ;;Total ram usage:        1 bytes
 10486 ;; Hardware stack levels used: 1
 10487 ;; Hardware stack levels required when called: 2
 10488 ;; This function calls:
 10489 ;;		_sendCharSerial4
 10490 ;; This function is called by:
 10491 ;;		_calibration_routine
 10492 ;;		_send2USART
 10493 ;;		_sendAllReadings
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           	psect	text59
 10498   00428E                     __ptext59:
 10499                           	callstack 0
 10500   00428E                     _sendStringSerial4:
 10501                           	callstack 27
 10502   00428E                     
 10503                           ;serial.c: 44:     while(*string != 0){
 10504   00428E  EF54  F021         	goto	l5478
 10505   004292                     l5472:
 10506                           
 10507                           ;serial.c: 46:   sendCharSerial4(*string++);
 10508   004292  5003               	movf	sendStringSerial4@string^0,w,c
 10509   004294  6ED9               	movwf	fsr2l,c
 10510   004296  6ADA               	clrf	fsr2h,c
 10511   004298  50DF               	movf	indf2,w,c
 10512   00429A  EC00  F022         	call	_sendCharSerial4
 10513   00429E  2A03               	incf	sendStringSerial4@string^0,f,c
 10514   0042A0                     
 10515                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10516   0042A0  0E6A               	movlw	106
 10517   0042A2                     u5657:
 10518   0042A2  2EE8               	decfsz	wreg,f,c
 10519   0042A4  D7FE               	bra	u5657
 10520   0042A6  D000               	nop2	
 10521   0042A8                     l5478:
 10522                           
 10523                           ;serial.c: 44:     while(*string != 0){
 10524   0042A8  5003               	movf	sendStringSerial4@string^0,w,c
 10525   0042AA  6ED9               	movwf	fsr2l,c
 10526   0042AC  6ADA               	clrf	fsr2h,c
 10527   0042AE  50DF               	movf	indf2,w,c
 10528   0042B0  A4D8               	btfss	status,2,c
 10529   0042B2  EF5D  F021         	goto	u4961
 10530   0042B6  EF5F  F021         	goto	u4960
 10531   0042BA                     u4961:
 10532   0042BA  EF49  F021         	goto	l5472
 10533   0042BE                     u4960:
 10534   0042BE  0012               	return		;funcret
 10535   0042C0                     __end_of_sendStringSerial4:
 10536                           	callstack 0
 10537                           
 10538 ;; *************** function _sendCharSerial4 *****************
 10539 ;; Defined at:
 10540 ;;		line 35 in file "serial.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;  charToSend      1    wreg     unsigned char 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  charToSend      1    1[COMRAM] unsigned char 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      void 
 10547 ;; Registers used:
 10548 ;;		wreg
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10558 ;;Total ram usage:        1 bytes
 10559 ;; Hardware stack levels used: 1
 10560 ;; Hardware stack levels required when called: 1
 10561 ;; This function calls:
 10562 ;;		Nothing
 10563 ;; This function is called by:
 10564 ;;		_sendStringSerial4
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           	psect	text60
 10569   004400                     __ptext60:
 10570                           	callstack 0
 10571   004400                     _sendCharSerial4:
 10572                           	callstack 27
 10573                           
 10574                           ;incstack = 0
 10575                           ;sendCharSerial4@charToSend stored from wreg
 10576   004400  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10577   004402                     l571:
 10578   004402  010E               	movlb	14	; () banked
 10579   004404  A537               	btfss	55,2,b	;volatile
 10580   004406  EF07  F022         	goto	u4921
 10581   00440A  EF09  F022         	goto	u4920
 10582   00440E                     u4921:
 10583   00440E  EF01  F022         	goto	l571
 10584   004412                     u4920:
 10585   004412                     
 10586                           ; BSR set to: 14
 10587                           ;serial.c: 37:     TX4REG = charToSend;
 10588   004412  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10589   004416                     
 10590                           ; BSR set to: 14
 10591   004416  0012               	return		;funcret
 10592   004418                     __end_of_sendCharSerial4:
 10593                           	callstack 0
 10594                           
 10595 ;; *************** function _color_read_Red *****************
 10596 ;; Defined at:
 10597 ;;		line 32 in file "color.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;		None
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  tmp             2   10[COMRAM] unsigned int 
 10602 ;; Return value:  Size  Location     Type
 10603 ;;                  2    5[COMRAM] unsigned int 
 10604 ;; Registers used:
 10605 ;;		wreg, status,2, status,0, cstack
 10606 ;; Tracked objects:
 10607 ;;		On entry : 0/0
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10613 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10615 ;;Total ram usage:        7 bytes
 10616 ;; Hardware stack levels used: 1
 10617 ;; Hardware stack levels required when called: 3
 10618 ;; This function calls:
 10619 ;;		_I2C_2_Master_Read
 10620 ;;		_I2C_2_Master_RepStart
 10621 ;;		_I2C_2_Master_Start
 10622 ;;		_I2C_2_Master_Stop
 10623 ;;		_I2C_2_Master_Write
 10624 ;; This function is called by:
 10625 ;;		_reading_hue
 10626 ;;		_calibration_routine
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           	psect	text61
 10631   003BC0                     __ptext61:
 10632                           	callstack 0
 10633   003BC0                     _color_read_Red:
 10634                           	callstack 26
 10635   003BC0                     
 10636                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10637   003BC0  EC17  F022         	call	_I2C_2_Master_Start	;wreg free
 10638                           
 10639                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10640   003BC4  0E52               	movlw	82
 10641   003BC6  EC0C  F022         	call	_I2C_2_Master_Write
 10642                           
 10643                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10644   003BCA  0EB6               	movlw	182
 10645   003BCC  EC0C  F022         	call	_I2C_2_Master_Write
 10646                           
 10647                           ;color.c: 38:  I2C_2_Master_RepStart();
 10648   003BD0  EC1C  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10649                           
 10650                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10651   003BD4  0E53               	movlw	83
 10652   003BD6  EC0C  F022         	call	_I2C_2_Master_Write
 10653                           
 10654                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10655   003BDA  0E01               	movlw	1
 10656   003BDC  EC06  F020         	call	_I2C_2_Master_Read
 10657   003BE0  6E08               	movwf	??_color_read_Red^0,c
 10658   003BE2  5008               	movf	??_color_read_Red^0,w,c
 10659   003BE4  6E0B               	movwf	color_read_Red@tmp^0,c
 10660   003BE6  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10661                           
 10662                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10663   003BE8  0E00               	movlw	0
 10664   003BEA  EC06  F020         	call	_I2C_2_Master_Read
 10665   003BEE  6E08               	movwf	??_color_read_Red^0,c
 10666   003BF0  5008               	movf	??_color_read_Red^0,w,c
 10667   003BF2  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10668   003BF4  6A09               	clrf	(??_color_read_Red+1)^0,c
 10669   003BF6  500B               	movf	color_read_Red@tmp^0,w,c
 10670   003BF8  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10671   003BFA  6E0B               	movwf	color_read_Red@tmp^0,c
 10672   003BFC  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10673   003BFE  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10674   003C00  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10675                           
 10676                           ;color.c: 42:  I2C_2_Master_Stop();
 10677   003C02  EC12  F022         	call	_I2C_2_Master_Stop	;wreg free
 10678   003C06                     
 10679                           ;color.c: 43:  return tmp;
 10680   003C06  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10681   003C0A  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10682   003C0E  0012               	return		;funcret
 10683   003C10                     __end_of_color_read_Red:
 10684                           	callstack 0
 10685                           
 10686 ;; *************** function _color_read_Green *****************
 10687 ;; Defined at:
 10688 ;;		line 46 in file "color.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;		None
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  tmp             2   10[COMRAM] unsigned int 
 10693 ;; Return value:  Size  Location     Type
 10694 ;;                  2    5[COMRAM] unsigned int 
 10695 ;; Registers used:
 10696 ;;		wreg, status,2, status,0, cstack
 10697 ;; Tracked objects:
 10698 ;;		On entry : 0/0
 10699 ;;		On exit  : 0/0
 10700 ;;		Unchanged: 0/0
 10701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10706 ;;Total ram usage:        7 bytes
 10707 ;; Hardware stack levels used: 1
 10708 ;; Hardware stack levels required when called: 3
 10709 ;; This function calls:
 10710 ;;		_I2C_2_Master_Read
 10711 ;;		_I2C_2_Master_RepStart
 10712 ;;		_I2C_2_Master_Start
 10713 ;;		_I2C_2_Master_Stop
 10714 ;;		_I2C_2_Master_Write
 10715 ;; This function is called by:
 10716 ;;		_reading_hue
 10717 ;;		_calibration_routine
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text62
 10722   003C10                     __ptext62:
 10723                           	callstack 0
 10724   003C10                     _color_read_Green:
 10725                           	callstack 26
 10726   003C10                     
 10727                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10728   003C10  EC17  F022         	call	_I2C_2_Master_Start	;wreg free
 10729                           
 10730                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10731   003C14  0E52               	movlw	82
 10732   003C16  EC0C  F022         	call	_I2C_2_Master_Write
 10733                           
 10734                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10735   003C1A  0EB8               	movlw	184
 10736   003C1C  EC0C  F022         	call	_I2C_2_Master_Write
 10737                           
 10738                           ;color.c: 52:  I2C_2_Master_RepStart();
 10739   003C20  EC1C  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10740                           
 10741                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10742   003C24  0E53               	movlw	83
 10743   003C26  EC0C  F022         	call	_I2C_2_Master_Write
 10744                           
 10745                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10746   003C2A  0E01               	movlw	1
 10747   003C2C  EC06  F020         	call	_I2C_2_Master_Read
 10748   003C30  6E08               	movwf	??_color_read_Green^0,c
 10749   003C32  5008               	movf	??_color_read_Green^0,w,c
 10750   003C34  6E0B               	movwf	color_read_Green@tmp^0,c
 10751   003C36  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10752                           
 10753                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10754   003C38  0E00               	movlw	0
 10755   003C3A  EC06  F020         	call	_I2C_2_Master_Read
 10756   003C3E  6E08               	movwf	??_color_read_Green^0,c
 10757   003C40  5008               	movf	??_color_read_Green^0,w,c
 10758   003C42  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10759   003C44  6A09               	clrf	(??_color_read_Green+1)^0,c
 10760   003C46  500B               	movf	color_read_Green@tmp^0,w,c
 10761   003C48  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10762   003C4A  6E0B               	movwf	color_read_Green@tmp^0,c
 10763   003C4C  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10764   003C4E  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10765   003C50  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10766                           
 10767                           ;color.c: 56:  I2C_2_Master_Stop();
 10768   003C52  EC12  F022         	call	_I2C_2_Master_Stop	;wreg free
 10769   003C56                     
 10770                           ;color.c: 57:  return tmp;
 10771   003C56  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10772   003C5A  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10773   003C5E  0012               	return		;funcret
 10774   003C60                     __end_of_color_read_Green:
 10775                           	callstack 0
 10776                           
 10777 ;; *************** function _color_read_Clear *****************
 10778 ;; Defined at:
 10779 ;;		line 75 in file "color.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  tmp             2   10[COMRAM] unsigned int 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  2    5[COMRAM] unsigned int 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10795 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10796 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10797 ;;Total ram usage:        7 bytes
 10798 ;; Hardware stack levels used: 1
 10799 ;; Hardware stack levels required when called: 3
 10800 ;; This function calls:
 10801 ;;		_I2C_2_Master_Read
 10802 ;;		_I2C_2_Master_RepStart
 10803 ;;		_I2C_2_Master_Start
 10804 ;;		_I2C_2_Master_Stop
 10805 ;;		_I2C_2_Master_Write
 10806 ;; This function is called by:
 10807 ;;		_reading_hue
 10808 ;;		_calibration_routine
 10809 ;;		_main
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text63
 10814   003C60                     __ptext63:
 10815                           	callstack 0
 10816   003C60                     _color_read_Clear:
 10817                           	callstack 26
 10818   003C60                     
 10819                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10820   003C60  EC17  F022         	call	_I2C_2_Master_Start	;wreg free
 10821                           
 10822                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10823   003C64  0E52               	movlw	82
 10824   003C66  EC0C  F022         	call	_I2C_2_Master_Write
 10825                           
 10826                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10827   003C6A  0EB4               	movlw	180
 10828   003C6C  EC0C  F022         	call	_I2C_2_Master_Write
 10829                           
 10830                           ;color.c: 81:  I2C_2_Master_RepStart();
 10831   003C70  EC1C  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10832                           
 10833                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10834   003C74  0E53               	movlw	83
 10835   003C76  EC0C  F022         	call	_I2C_2_Master_Write
 10836                           
 10837                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10838   003C7A  0E01               	movlw	1
 10839   003C7C  EC06  F020         	call	_I2C_2_Master_Read
 10840   003C80  6E08               	movwf	??_color_read_Clear^0,c
 10841   003C82  5008               	movf	??_color_read_Clear^0,w,c
 10842   003C84  6E0B               	movwf	color_read_Clear@tmp^0,c
 10843   003C86  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 10844                           
 10845                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10846   003C88  0E00               	movlw	0
 10847   003C8A  EC06  F020         	call	_I2C_2_Master_Read
 10848   003C8E  6E08               	movwf	??_color_read_Clear^0,c
 10849   003C90  5008               	movf	??_color_read_Clear^0,w,c
 10850   003C92  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 10851   003C94  6A09               	clrf	(??_color_read_Clear+1)^0,c
 10852   003C96  500B               	movf	color_read_Clear@tmp^0,w,c
 10853   003C98  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 10854   003C9A  6E0B               	movwf	color_read_Clear@tmp^0,c
 10855   003C9C  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 10856   003C9E  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 10857   003CA0  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 10858                           
 10859                           ;color.c: 85:  I2C_2_Master_Stop();
 10860   003CA2  EC12  F022         	call	_I2C_2_Master_Stop	;wreg free
 10861   003CA6                     
 10862                           ;color.c: 86:  return tmp;
 10863   003CA6  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 10864   003CAA  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10865   003CAE  0012               	return		;funcret
 10866   003CB0                     __end_of_color_read_Clear:
 10867                           	callstack 0
 10868                           
 10869 ;; *************** function _color_read_Blue *****************
 10870 ;; Defined at:
 10871 ;;		line 60 in file "color.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;		None
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  tmp             2   10[COMRAM] unsigned int 
 10876 ;; Return value:  Size  Location     Type
 10877 ;;                  2    5[COMRAM] unsigned int 
 10878 ;; Registers used:
 10879 ;;		wreg, status,2, status,0, cstack
 10880 ;; Tracked objects:
 10881 ;;		On entry : 0/0
 10882 ;;		On exit  : 0/0
 10883 ;;		Unchanged: 0/0
 10884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10888 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10889 ;;Total ram usage:        7 bytes
 10890 ;; Hardware stack levels used: 1
 10891 ;; Hardware stack levels required when called: 3
 10892 ;; This function calls:
 10893 ;;		_I2C_2_Master_Read
 10894 ;;		_I2C_2_Master_RepStart
 10895 ;;		_I2C_2_Master_Start
 10896 ;;		_I2C_2_Master_Stop
 10897 ;;		_I2C_2_Master_Write
 10898 ;; This function is called by:
 10899 ;;		_reading_hue
 10900 ;;		_calibration_routine
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           	psect	text64
 10905   003CB0                     __ptext64:
 10906                           	callstack 0
 10907   003CB0                     _color_read_Blue:
 10908                           	callstack 26
 10909   003CB0                     
 10910                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 10911   003CB0  EC17  F022         	call	_I2C_2_Master_Start	;wreg free
 10912                           
 10913                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 10914   003CB4  0E52               	movlw	82
 10915   003CB6  EC0C  F022         	call	_I2C_2_Master_Write
 10916                           
 10917                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 10918   003CBA  0EBA               	movlw	186
 10919   003CBC  EC0C  F022         	call	_I2C_2_Master_Write
 10920                           
 10921                           ;color.c: 66:  I2C_2_Master_RepStart();
 10922   003CC0  EC1C  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10923                           
 10924                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 10925   003CC4  0E53               	movlw	83
 10926   003CC6  EC0C  F022         	call	_I2C_2_Master_Write
 10927                           
 10928                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 10929   003CCA  0E01               	movlw	1
 10930   003CCC  EC06  F020         	call	_I2C_2_Master_Read
 10931   003CD0  6E08               	movwf	??_color_read_Blue^0,c
 10932   003CD2  5008               	movf	??_color_read_Blue^0,w,c
 10933   003CD4  6E0B               	movwf	color_read_Blue@tmp^0,c
 10934   003CD6  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 10935                           
 10936                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10937   003CD8  0E00               	movlw	0
 10938   003CDA  EC06  F020         	call	_I2C_2_Master_Read
 10939   003CDE  6E08               	movwf	??_color_read_Blue^0,c
 10940   003CE0  5008               	movf	??_color_read_Blue^0,w,c
 10941   003CE2  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 10942   003CE4  6A09               	clrf	(??_color_read_Blue+1)^0,c
 10943   003CE6  500B               	movf	color_read_Blue@tmp^0,w,c
 10944   003CE8  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 10945   003CEA  6E0B               	movwf	color_read_Blue@tmp^0,c
 10946   003CEC  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 10947   003CEE  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 10948   003CF0  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 10949                           
 10950                           ;color.c: 70:  I2C_2_Master_Stop();
 10951   003CF2  EC12  F022         	call	_I2C_2_Master_Stop	;wreg free
 10952   003CF6                     
 10953                           ;color.c: 71:  return tmp;
 10954   003CF6  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 10955   003CFA  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10956   003CFE  0012               	return		;funcret
 10957   003D00                     __end_of_color_read_Blue:
 10958                           	callstack 0
 10959                           
 10960 ;; *************** function _I2C_2_Master_Write *****************
 10961 ;; Defined at:
 10962 ;;		line 45 in file "i2c.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;  data_byte       1    wreg     unsigned char 
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;  data_byte       1    2[COMRAM] unsigned char 
 10967 ;; Return value:  Size  Location     Type
 10968 ;;                  1    wreg      void 
 10969 ;; Registers used:
 10970 ;;		wreg, status,2, status,0, cstack
 10971 ;; Tracked objects:
 10972 ;;		On entry : 0/0
 10973 ;;		On exit  : 0/0
 10974 ;;		Unchanged: 0/0
 10975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10979 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10980 ;;Total ram usage:        1 bytes
 10981 ;; Hardware stack levels used: 1
 10982 ;; Hardware stack levels required when called: 2
 10983 ;; This function calls:
 10984 ;;		_I2C_2_Master_Idle
 10985 ;; This function is called by:
 10986 ;;		_color_writetoaddr
 10987 ;;		_color_read_Red
 10988 ;;		_color_read_Green
 10989 ;;		_color_read_Blue
 10990 ;;		_color_read_Clear
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           	psect	text65
 10995   004418                     __ptext65:
 10996                           	callstack 0
 10997   004418                     _I2C_2_Master_Write:
 10998                           	callstack 26
 10999                           
 11000                           ;incstack = 0
 11001                           ;I2C_2_Master_Write@data_byte stored from wreg
 11002   004418  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11003   00441A                     
 11004                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11005   00441A  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11006   00441E                     
 11007                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11008   00441E  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11009   004422  0012               	return		;funcret
 11010   004424                     __end_of_I2C_2_Master_Write:
 11011                           	callstack 0
 11012                           
 11013 ;; *************** function _I2C_2_Master_Stop *****************
 11014 ;; Defined at:
 11015 ;;		line 39 in file "i2c.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;		None
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      void 
 11022 ;; Registers used:
 11023 ;;		wreg, status,2, status,0, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11033 ;;Total ram usage:        0 bytes
 11034 ;; Hardware stack levels used: 1
 11035 ;; Hardware stack levels required when called: 2
 11036 ;; This function calls:
 11037 ;;		_I2C_2_Master_Idle
 11038 ;; This function is called by:
 11039 ;;		_color_writetoaddr
 11040 ;;		_color_read_Red
 11041 ;;		_color_read_Green
 11042 ;;		_color_read_Blue
 11043 ;;		_color_read_Clear
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           	psect	text66
 11048   004424                     __ptext66:
 11049                           	callstack 0
 11050   004424                     _I2C_2_Master_Stop:
 11051                           	callstack 26
 11052   004424                     
 11053                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11054   004424  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11055   004428                     
 11056                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11057   004428  010E               	movlb	14	; () banked
 11058   00442A  85DA               	bsf	218,2,b	;volatile
 11059   00442C                     
 11060                           ; BSR set to: 14
 11061   00442C  0012               	return		;funcret
 11062   00442E                     __end_of_I2C_2_Master_Stop:
 11063                           	callstack 0
 11064                           
 11065 ;; *************** function _I2C_2_Master_Start *****************
 11066 ;; Defined at:
 11067 ;;		line 27 in file "i2c.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;		None
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;		None
 11072 ;; Return value:  Size  Location     Type
 11073 ;;                  1    wreg      void 
 11074 ;; Registers used:
 11075 ;;		wreg, status,2, status,0, cstack
 11076 ;; Tracked objects:
 11077 ;;		On entry : 0/0
 11078 ;;		On exit  : 0/0
 11079 ;;		Unchanged: 0/0
 11080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11085 ;;Total ram usage:        0 bytes
 11086 ;; Hardware stack levels used: 1
 11087 ;; Hardware stack levels required when called: 2
 11088 ;; This function calls:
 11089 ;;		_I2C_2_Master_Idle
 11090 ;; This function is called by:
 11091 ;;		_color_writetoaddr
 11092 ;;		_color_read_Red
 11093 ;;		_color_read_Green
 11094 ;;		_color_read_Blue
 11095 ;;		_color_read_Clear
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           	psect	text67
 11100   00442E                     __ptext67:
 11101                           	callstack 0
 11102   00442E                     _I2C_2_Master_Start:
 11103                           	callstack 26
 11104   00442E                     
 11105                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11106   00442E  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11107   004432                     
 11108                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11109   004432  010E               	movlb	14	; () banked
 11110   004434  81DA               	bsf	218,0,b	;volatile
 11111   004436                     
 11112                           ; BSR set to: 14
 11113   004436  0012               	return		;funcret
 11114   004438                     __end_of_I2C_2_Master_Start:
 11115                           	callstack 0
 11116                           
 11117 ;; *************** function _I2C_2_Master_RepStart *****************
 11118 ;; Defined at:
 11119 ;;		line 33 in file "i2c.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11137 ;;Total ram usage:        0 bytes
 11138 ;; Hardware stack levels used: 1
 11139 ;; Hardware stack levels required when called: 2
 11140 ;; This function calls:
 11141 ;;		_I2C_2_Master_Idle
 11142 ;; This function is called by:
 11143 ;;		_color_read_Red
 11144 ;;		_color_read_Green
 11145 ;;		_color_read_Blue
 11146 ;;		_color_read_Clear
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text68
 11151   004438                     __ptext68:
 11152                           	callstack 0
 11153   004438                     _I2C_2_Master_RepStart:
 11154                           	callstack 26
 11155   004438                     
 11156                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11157   004438  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11158   00443C                     
 11159                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11160   00443C  010E               	movlb	14	; () banked
 11161   00443E  83DA               	bsf	218,1,b	;volatile
 11162   004440                     
 11163                           ; BSR set to: 14
 11164   004440  0012               	return		;funcret
 11165   004442                     __end_of_I2C_2_Master_RepStart:
 11166                           	callstack 0
 11167                           
 11168 ;; *************** function _I2C_2_Master_Read *****************
 11169 ;; Defined at:
 11170 ;;		line 51 in file "i2c.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;  ack             1    wreg     unsigned char 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  ack             1    3[COMRAM] unsigned char 
 11175 ;;  tmp             1    4[COMRAM] unsigned char 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      unsigned char 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11188 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11189 ;;Total ram usage:        3 bytes
 11190 ;; Hardware stack levels used: 1
 11191 ;; Hardware stack levels required when called: 2
 11192 ;; This function calls:
 11193 ;;		_I2C_2_Master_Idle
 11194 ;; This function is called by:
 11195 ;;		_color_read_Red
 11196 ;;		_color_read_Green
 11197 ;;		_color_read_Blue
 11198 ;;		_color_read_Clear
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	text69
 11203   00400C                     __ptext69:
 11204                           	callstack 0
 11205   00400C                     _I2C_2_Master_Read:
 11206                           	callstack 26
 11207                           
 11208                           ; BSR set to: 14
 11209                           ;incstack = 0
 11210                           ;I2C_2_Master_Read@ack stored from wreg
 11211   00400C  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11212   00400E                     
 11213                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11214   00400E  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11215   004012                     
 11216                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11217   004012  010E               	movlb	14	; () banked
 11218   004014  87DA               	bsf	218,3,b	;volatile
 11219                           
 11220                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11221   004016  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11222   00401A                     
 11223                           ;i2c.c: 57:   tmp = SSP2BUF;
 11224   00401A  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11225                           
 11226                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11227   00401E  EC8D  F021         	call	_I2C_2_Master_Idle	;wreg free
 11228   004022                     
 11229                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11230   004022  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11231   004024  B4D8               	btfsc	status,2,c
 11232   004026  EF17  F020         	goto	u4941
 11233   00402A  EF1B  F020         	goto	u4940
 11234   00402E                     u4941:
 11235   00402E  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11236   004030  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11237   004032  EF1C  F020         	goto	u4958
 11238   004036                     u4940:
 11239   004036  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11240   004038                     u4958:
 11241   004038  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11242   00403A  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11243   00403C  010E               	movlb	14	; () banked
 11244   00403E  51DA               	movf	218,w,b	;volatile
 11245   004040  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11246   004042  0BDF               	andlw	-33
 11247   004044  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11248   004046  6FDA               	movwf	218,b	;volatile
 11249   004048                     
 11250                           ; BSR set to: 14
 11251                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11252   004048  89DA               	bsf	218,4,b	;volatile
 11253   00404A                     
 11254                           ; BSR set to: 14
 11255                           ;i2c.c: 61:   return tmp;
 11256   00404A  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11257   00404C                     
 11258                           ; BSR set to: 14
 11259   00404C  0012               	return		;funcret
 11260   00404E                     __end_of_I2C_2_Master_Read:
 11261                           	callstack 0
 11262                           
 11263 ;; *************** function _I2C_2_Master_Idle *****************
 11264 ;; Defined at:
 11265 ;;		line 22 in file "i2c.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      void 
 11272 ;; Registers used:
 11273 ;;		wreg, status,2, status,0
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11283 ;;Total ram usage:        1 bytes
 11284 ;; Hardware stack levels used: 1
 11285 ;; Hardware stack levels required when called: 1
 11286 ;; This function calls:
 11287 ;;		Nothing
 11288 ;; This function is called by:
 11289 ;;		_I2C_2_Master_Start
 11290 ;;		_I2C_2_Master_RepStart
 11291 ;;		_I2C_2_Master_Stop
 11292 ;;		_I2C_2_Master_Write
 11293 ;;		_I2C_2_Master_Read
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           	psect	text70
 11298   00431A                     __ptext70:
 11299                           	callstack 0
 11300   00431A                     _I2C_2_Master_Idle:
 11301                           	callstack 26
 11302   00431A                     l194:
 11303   00431A  010E               	movlb	14	; () banked
 11304   00431C  B5D8               	btfsc	216,2,b	;volatile
 11305   00431E  EF93  F021         	goto	u4831
 11306   004322  EF95  F021         	goto	u4830
 11307   004326                     u4831:
 11308   004326  EF8D  F021         	goto	l194
 11309   00432A                     u4830:
 11310   00432A                     
 11311                           ; BSR set to: 14
 11312   00432A  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11313   00432E  0E1F               	movlw	31
 11314   004330  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11315   004332  A4D8               	btfss	status,2,c
 11316   004334  EF9E  F021         	goto	u4841
 11317   004338  EFA0  F021         	goto	u4840
 11318   00433C                     u4841:
 11319   00433C  EF8D  F021         	goto	l194
 11320   004340                     u4840:
 11321   004340                     
 11322                           ; BSR set to: 14
 11323   004340  0012               	return		;funcret
 11324   004342                     __end_of_I2C_2_Master_Idle:
 11325                           	callstack 0
 11326                           
 11327 ;; *************** function _ADC_init *****************
 11328 ;; Defined at:
 11329 ;;		line 9 in file "ADC.c"
 11330 ;; Parameters:    Size  Location     Type
 11331 ;;		None
 11332 ;; Auto vars:     Size  Location     Type
 11333 ;;		None
 11334 ;; Return value:  Size  Location     Type
 11335 ;;                  1    wreg      void 
 11336 ;; Registers used:
 11337 ;;		wreg, status,2
 11338 ;; Tracked objects:
 11339 ;;		On entry : 0/0
 11340 ;;		On exit  : 0/0
 11341 ;;		Unchanged: 0/0
 11342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11347 ;;Total ram usage:        0 bytes
 11348 ;; Hardware stack levels used: 1
 11349 ;; Hardware stack levels required when called: 1
 11350 ;; This function calls:
 11351 ;;		Nothing
 11352 ;; This function is called by:
 11353 ;;		_main
 11354 ;; This function uses a non-reentrant model
 11355 ;;
 11356                           
 11357                           	psect	text71
 11358   0043E6                     __ptext71:
 11359                           	callstack 0
 11360   0043E6                     _ADC_init:
 11361                           	callstack 29
 11362   0043E6                     
 11363                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11364   0043E6  8C86               	bsf	134,6,c	;volatile
 11365                           
 11366                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11367   0043E8  010E               	movlb	14	; () banked
 11368   0043EA  8DB4               	bsf	180,6,b	;volatile
 11369                           
 11370                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11371   0043EC  010F               	movlb	15	; () banked
 11372   0043EE  9958               	bcf	88,4,b	;volatile
 11373   0043F0                     
 11374                           ; BSR set to: 15
 11375                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11376   0043F0  0EFC               	movlw	-4
 11377   0043F2  1758               	andwf	88,f,b	;volatile
 11378                           
 11379                           ;ADC.c: 17:     ADPCH=0b101110;
 11380   0043F4  0E2E               	movlw	46
 11381   0043F6  6F5F               	movwf	95,b	;volatile
 11382   0043F8                     
 11383                           ; BSR set to: 15
 11384                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11385   0043F8  9460               	bcf	96,2,c	;volatile
 11386   0043FA                     
 11387                           ; BSR set to: 15
 11388                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11389   0043FA  8860               	bsf	96,4,c	;volatile
 11390   0043FC                     
 11391                           ; BSR set to: 15
 11392                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11393   0043FC  8E60               	bsf	96,7,c	;volatile
 11394   0043FE                     
 11395                           ; BSR set to: 15
 11396   0043FE  0012               	return		;funcret
 11397   004400                     __end_of_ADC_init:
 11398                           	callstack 0
 11399                           
 11400 ;; *************** function _LowISR *****************
 11401 ;; Defined at:
 11402 ;;		line 38 in file "timers.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;		None
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;		None
 11407 ;; Return value:  Size  Location     Type
 11408 ;;                  1    wreg      void 
 11409 ;; Registers used:
 11410 ;;		None
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11420 ;;Total ram usage:        1 bytes
 11421 ;; Hardware stack levels used: 1
 11422 ;; This function calls:
 11423 ;;		Nothing
 11424 ;; This function is called by:
 11425 ;;		Interrupt level 1
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           	psect	intcodelo
 11430   000018                     __pintcodelo:
 11431                           	callstack 0
 11432   000018                     _LowISR:
 11433                           	callstack 20
 11434                           
 11435                           ; BSR set to: 15
 11436                           ;incstack = 0
 11437   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11438   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11439   00001E                     
 11440                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11441   00001E  010E               	movlb	14	; () banked
 11442   000020  AB33               	btfss	51,5,b	;volatile
 11443   000022  EF15  F000         	goto	i1u222_21
 11444   000026  EF17  F000         	goto	i1u222_20
 11445   00002A                     i1u222_21:
 11446   00002A  EF19  F000         	goto	i1l663
 11447   00002E                     i1u222_20:
 11448   00002E                     
 11449                           ; BSR set to: 14
 11450                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11451   00002E  827F               	bsf	127,1,c	;volatile
 11452                           
 11453                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11454   000030  9B33               	bcf	51,5,b	;volatile
 11455   000032                     i1l663:
 11456                           
 11457                           ; BSR set to: 14
 11458   000032  C001  FFE0         	movff	??_LowISR,bsr
 11459   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11460   000038  0010               	retfie	
 11461   00003A                     __end_of_LowISR:
 11462                           	callstack 0
 11463                           
 11464                           	psect	rparam
 11465   000000                     
 11466                           	psect	temp
 11467   000052                     btemp:
 11468                           	callstack 0
 11469   000052                     	ds	1
 11470   000000                     int$flags	set	btemp
 11471   000000                     wtemp8	set	btemp+1
 11472   000000                     ttemp5	set	btemp+1
 11473   000000                     ttemp6	set	btemp+4
 11474   000000                     ttemp7	set	btemp+8
 11475                           
 11476                           	psect	config
 11477                           
 11478                           ;Config register CONFIG1L @ 0x300000
 11479                           ;	External Oscillator mode Selection bits
 11480                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11481                           ;	Power-up default value for COSC bits
 11482                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11483   300000                     	org	3145728
 11484   300000  AA                 	db	170
 11485                           
 11486                           ;Config register CONFIG1H @ 0x300001
 11487                           ;	unspecified, using default values
 11488                           ;	Clock Out Enable bit
 11489                           ;	CLKOUTEN = 0x1, unprogrammed default
 11490                           ;	Clock Switch Enable bit
 11491                           ;	CSWEN = 0x1, unprogrammed default
 11492                           ;	Fail-Safe Clock Monitor Enable bit
 11493                           ;	FCMEN = 0x1, unprogrammed default
 11494   300001                     	org	3145729
 11495   300001  FF                 	db	255
 11496                           
 11497                           ;Config register CONFIG3L @ 0x300004
 11498                           ;	WDT Period Select bits
 11499                           ;	WDTCPS = 0x1F, unprogrammed default
 11500                           ;	WDT operating mode
 11501                           ;	WDTE = OFF, WDT Disabled
 11502   300004                     	org	3145732
 11503   300004  9F                 	db	159
 11504                           
 11505                           ;Config register CONFIG3H @ 0x300005
 11506                           ;	unspecified, using default values
 11507                           ;	WDT Window Select bits
 11508                           ;	WDTCWS = 0x7, unprogrammed default
 11509                           ;	WDT input clock selector
 11510                           ;	WDTCCS = 0x7, unprogrammed default
 11511   300005                     	org	3145733
 11512   300005  FF                 	db	255
 11513                           tosu	equ	0xFFF
 11514                           tosh	equ	0xFFE
 11515                           tosl	equ	0xFFD
 11516                           stkptr	equ	0xFFC
 11517                           pclatu	equ	0xFFB
 11518                           pclath	equ	0xFFA
 11519                           pcl	equ	0xFF9
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           indf0	equ	0xFEF
 11527                           postinc0	equ	0xFEE
 11528                           postdec0	equ	0xFED
 11529                           preinc0	equ	0xFEC
 11530                           plusw0	equ	0xFEB
 11531                           fsr0h	equ	0xFEA
 11532                           fsr0l	equ	0xFE9
 11533                           wreg	equ	0xFE8
 11534                           indf1	equ	0xFE7
 11535                           postinc1	equ	0xFE6
 11536                           postdec1	equ	0xFE5
 11537                           preinc1	equ	0xFE4
 11538                           plusw1	equ	0xFE3
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           bsr	equ	0xFE0
 11542                           indf2	equ	0xFDF
 11543                           postinc2	equ	0xFDE
 11544                           postdec2	equ	0xFDD
 11545                           preinc2	equ	0xFDC
 11546                           plusw2	equ	0xFDB
 11547                           fsr2h	equ	0xFDA
 11548                           fsr2l	equ	0xFD9
 11549                           status	equ	0xFD8

Data Sizes:
    Strings     173
    Constant    0
    Data        1
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     92     142
    BANK1           256      0     132
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 250
		 -> path(BANK2[250]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2944$buffer	PTR unsigned char  size(2) Largest target is 0

    S2944$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_reverseTurn
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  320825
                                             76 COMRAM     2     2      0
                                             76 BANK0     16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   57910
                                             31 COMRAM    13     7      6
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   45414
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   11690
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16385
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15481
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  201252
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11776
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   26299
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   27019
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   26479
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   11252
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   27019
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   27199
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   27199
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   27379
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11792
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    5058
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    3190
                                              7 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11972
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6070
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4698
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4022
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12683
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10759
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9187
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8699
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    2032
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1592
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      66        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 21:35:19 2024

               _color_read_Red 3BC0                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 3CB0  
                           l81 3C0E                             l90 3CAE                             l75 40F8  
                           l84 3C5E                             l93 3238                             l78 43A8  
                           l87 3CFE                             l96 2792                             l98 27A0  
                           l99 27EE                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3C60               _color_read_Green 3C10                            l101 27FC  
                          l102 284E                            l111 293C                            l200 4436  
                          l104 285C                            l105 28AE                            l121 11A2  
                          l203 4440                            l107 28BC                            l131 1294  
                          l123 11FC                            l212 404C                            l108 2916  
                          l141 15AC                            l133 12A4                            l125 120C  
                          l206 442C                            l135 12FE                            l119 1192  
                          l209 4422                            l145 1624                            l137 130E  
                          l146 1640                            l331 43FE                            l403 2F44  
                          l411 38F4                            l164 276A                            l421 3972  
                          l158 275E                            l191 4318                            l431 3AE0  
                          l511 35EC                            l416 39F0                            l440 428C  
                          l504 331E                            l194 431A                            l434 4192  
                          l426 3A6A                            l443 41F6                            l452 41C4  
                          l197 4340                            l461 3EF6                            l437 425A  
                          l446 4228                            l470 3E1E                            l455 3D8E  
                          l480 3BBE                            l464 3D46                            l449 42EE  
                          l473 3E66                            l625 43E4                            l458 3EAE  
                          l562 43C6                            l571 4402                            l467 3DD6  
                          l491 3F82                            l580 42BE                            l396 3866  
                          l492 3F82                            l574 4416                            l910 3492  
                          l495 40AE                            l657 4388                            l666 4366  
                          l498 40C4                            l931 3108                            l925 3696  
                          l936 314E                            l963 304A                            l897 33E2  
                          _abs 412E                            _pad 3742                            _hue 00BC  
          convert_rgb2hue@cMax 003E                   ___awmod@sign 0007            convert_rgb2hue@diff 0094  
          logAction@pathLength 000A                            wreg 0FE8                   ___flmul@aexp 0013  
                 ___flmul@bexp 0014                   ___flmul@sign 000E                   ___flmul@temp 0019  
                 ___flmul@prod 0015                   ___fltol@exp1 003D                           l1211 194A  
                         l1203 1B00                           ?_abs 0008                           l1220 1A1A  
                         l1221 1A08                           l1321 2994                           l1250 2124  
                         l1164 3B54                           l1236 3FC8                           l1324 2AF0  
                         l1421 4160                           l1157 3B4C                           l1261 21E2  
                         l1253 20E8                           l1414 400A                           l1262 21D0  
                         l1335 2A88                           l1408 2C78                           l1344 412C  
                         l1248 22C4                           l4000 1F58                           l1280 1BC6  
                         l1328 2A2C                           l1433 3740                           l1441 408C  
                         l1418 4148                           l4010 1F92                           l4002 1F68  
                         l1290 1E22                           l1194 1830                           l1259 216A  
                         l1195 181E                           l1444 4442                           l1364 3778  
                         l1372 2CD8                           l4100 21FE                           l4020 1FBE  
                         l4012 1F98                           l4004 1F78                           l1284 1F2A  
                         l1196 17E4                           l4110 226A                           l4102 220C  
                         l4030 1FF8                           l4022 1FCE                           l4014 1F9E  
                         l4006 1F7A                           l1367 37B6                           l1287 1DBC  
                         l3400 3AE2                           l4120 22B8                           l4112 2284  
                         l4104 2236                           l4032 200E                           l4024 1FDE  
                         l4016 1FAC                           l4008 1F82                           l4200 1CEE  
                         l1369 37D6                           l1385 2DF0                           l1393 3540  
                         l1297 1EEC                           l1289 1E34                           l3410 3B1A  
                         l3402 3AEA                           l4122 22BA                           l4114 22A0  
                         l4106 223A                           l4050 2062                           l4034 201E  
                         l4042 203E                           l4026 1FE0                           l4018 1FAE  
                         l4210 1D84                           l4202 1CFA                           l4130 1B02  
                         l5100 3358                           l3420 3B46                           l3412 3B20  
                         l3404 3AFC                           l4116 22A4                           l4108 2254  
                         l4060 20B4                           l4052 207C                           l4044 204E  
                         l4036 2026                           l4028 1FE8                           l4300 314C  
                         l4220 1DDA                           l4212 1DA2                           l4204 1D16  
                         l4140 1B3E                           l4132 1B0E                           l1389 3538  
                         l5110 3390                           l5102 3360                           l3414 3B36  
                         l3406 3B04                           l4118 22B2                           l4070 2110  
                         l4062 20C4                           l4054 208C                           l4046 204E  
                         l4038 202A                           l4230 1E44                           l4222 1DDE  
                         l4214 1DAC                           l4206 1D40                           l4150 1B70  
                         l4142 1B4E                           l4134 1B1C                           l4310 2F70  
                         l5120 33BC                           l5112 3396                           l5104 3372  
                         l5200 2CCC                           l4400 4302                           l3416 3B3E  
                         l3408 3B0C                           l4080 2150                           l4072 2112  
                         l4064 20D8                           l4056 209C                           l4240 1EA6  
                         l4232 1E50                           l4224 1DEC                           l4216 1DBA  
                         l4208 1D76                           l4160 1BB0                           l4152 1B7E  
                         l4144 1B54                           l4136 1B1E                           l4320 2FBE  
                         l4312 2F9A                           l4304 2F46                           l5114 33AC  
                         l5106 337A                           l5122 33C2                           l5130 33E4  
                         l5210 2D22                           l5202 2CD4                           l4402 4304  
                         l3418 3B40                           l4090 218C                           l4082 215A  
                         l4074 2122                           l4066 20E6                           l4058 20AC  
                         l4250 1F0E                           l4242 1EBA                           l4234 1E5E  
                         l4226 1E1A                           l4218 1DCC                           l4170 1BFA  
                         l4162 1BB6                           l4154 1B80                           l4146 1B64  
                         l4138 1B2E                           l4330 2FEA                           l4314 2F9C  
                         l4306 2F5C                           l5124 33D2                           l5116 33B4  
                         l5108 3382                           l5140 3410                           l5132 33E8  
                         l5060 36A8                           l5220 2D74                           l5212 2D26  
                         l5204 2CE0                           l5300 2C10                           l4404 4306  
                         l4092 219A                           l4084 2168                           l4076 2134  
                         l4068 20F2                           l4252 1F10                           l4244 1ED4  
                         l4236 1E88                           l4180 1C4A                           l4172 1C06  
                         l4164 1BD6                           l4156 1B90                           l4148 1B6A  
                         l3700 1742                           l4260 3F84                           l4340 301A  
                         l4316 2FAC                           l5126 33DA                           l5118 33B6  
                         l5150 3448                           l5142 3418                           l5134 33F6  
                         l5062 36B8                           l5230 2DC4                           l5222 2D84  
                         l5214 2D2C                           l5206 2CEA                           l5302 2C28  
                         l6022 2B7A                           l4094 21C8                           l4078 214A  
                         l4086 217A                           l4270 362C                           l4246 1EF0  
                         l4254 1F16                           l4238 1E8C                           l4190 1C8C  
                         l4182 1C56                           l4174 1C10                           l4166 1BE6  
                         l4158 1BA0                           l3710 1756                           l3702 1746  
                         l4262 3F94                           l4342 302A                           l4326 2FD6  
                         l4318 2FB0                           l4350 2950                           l5160 3482  
                         l5152 345E                           l5144 342A                           l5136 33FE  
                         l5064 36C2                           l5072 404E                           l5232 2DD4  
                         l5224 2D9E                           l5208 2CF0                           l5216 2D48  
                         l5080 4342                           l5240 34C2                           l5304 2C32  
                         l5312 2C52                           l4088 2188                           l4272 365A  
                         l4256 1F1A                           l4248 1F00                           l4192 1C98  
                         l4184 1C62                           l4176 1C26                           l3800 199C  
                         l3720 176A                           l3712 175A                           l3704 174A  
                         l4344 303A                           l4336 2FFE                           l4328 2FE0  
                         l4360 29CE                           l4352 295E                           l4440 0F56  
                         l4432 0EB0                           l5322 431A                           l5090 3332  
                         l5162 348A                           l5154 3466                           l5146 3432  
                         l5138 3402                           l5066 36DE                           l5058 3698  
                         l5074 405A                           l5170 3762                           l5218 2D62  
                         l5226 2DAE                           l5082 435E                           l5242 34CA  
                         l5250 2DF2                           l5410 3AC0                           l5402 3A8C  
                         l5330 3882                           l4098 21F2                           l4274 366A  
                         l4266 35EE                           l4290 30C8                           l4282 304C  
                         l4194 1CA8                           l4186 1C70                           l4178 1C32  
                         l3810 19C8                           l3802 199E                           l3730 177E  
                         l3722 176E                           l3714 175E                           l3706 174E  
                         l4338 300A                           l4370 2A22                           l4362 29D6  
                         l4354 29A4                           l4450 105A                           l4442 0F8A  
                         l4434 0EC2                           l5324 432A                           l5092 333A  
                         l5156 346C                           l5148 343A                           l5068 3710  
                         l5076 4068                           l5180 37C6                           l5172 3770  
                         l5228 2DBE                           l5244 34E6                           l5236 3494  
                         l5308 2C46                           l5420 3FD2                           l5260 2EAE  
                         l5252 2E0C                           l5412 3AC4                           l5404 3AA0  
                         l5340 38B8                           l5332 388A                           l5500 3B58  
                         l4276 368E                           l4268 361C                           l4292 30D6  
                         l4284 307A                           l4196 1CC2                           l4188 1C7C  
                         l3820 1A00                           l3804 19AC                           l3812 19CA  
                         l3740 17DC                           l3724 1772                           l3716 1762  
                         l3708 1752                           l3732 1782                           l3660 165E  
                         l4380 2A98                           l4372 2A5E                           l4364 29E2  
                         l4356 29BA                           l4348 2940                           l4460 114C  
                         l4452 107E                           l4444 0FBE                           l4436 0EF2  
                         l5430 4432                           l5414 4402                           l5094 333E  
                         l5086 3320                           l5158 3472                           l5182 412E  
                         l5078 406C                           l5174 3784                           l5166 3742  
                         l5190 2C92                           l5246 3506                           l5238 349C  
                         l5270 2B20                           l5422 3FE2                           l5262 2EC8  
                         l5254 2E5A                           l5406 3AA8                           l5334 38A0  
                         l5342 38C8                           l5326 3868                           l5502 3B6E  
                         l5350 3996                           l5510 4186                           l4278 3694  
                         l4294 30E8                           l4286 308A                           l4198 1CD2  
                         l3830 1A7E                           l3806 19B4                           l3814 19D8  
                         l3750 1812                           l3742 17F2                           l3734 1786  
                         l3726 1776                           l3718 1766                           l3662 166E  
                         l3670 1698                           l3654 1642                           l4390 2AE0  
                         l4382 2A9C                           l4374 2A6A                           l4366 2A14  
                         l4470 124E                           l4462 117E                           l4454 10B2  
                         l4446 0FF2                           l4438 0F22                           ?_pad 0010  
                         l5440 4438                           l5432 441A                           l5416 4412  
                         l5096 334C                           l5088 3324                           l5184 413C  
                         l5176 3794                           l5168 3752                           l5192 2C9A  
                         l5248 350E                           l5280 2B4A                           l5272 2B2E  
                         l5424 4002                           l5264 2F08                           l5256 2E6C  
                         l5408 3AB0                           l5344 38DE                           l5336 38A8  
                         l5328 386C                           l5504 3BBA                           l5360 39B6  
                         l5352 399E                           l5520 4268                           l5512 422A  
                         l5600 3E2C                           l4800 385A                           l4296 30F6  
                         l4288 30B8                           l3840 1AC4                           l3824 1A2A  
                         l3832 1A80                           l3816 19DC                           l3808 19B8  
                         l3760 1862                           l3752 181C                           l3744 17FE  
                         l3736 17B0                           l3728 177A                           l3680 16C8  
                         l3672 16A8                           l3664 167E                           l3656 164E  
                         l4384 2AC0                           l4376 2A78                           l4368 2A16  
                         l4480 1384                           l4472 1280                           l4464 11B6  
                         l4456 10E6                           l4448 1026                           l5450 4022  
                         l5442 443C                           l5434 441E                           l5098 3354  
                         l5178 3798                           l5194 2CAA                           l5186 2C7A  
                         l5290 2BAC                           l5274 2B32                           l5266 2AF2  
                         l5418 3FCA                           l4394 42F0                           l5258 2E70  
                         l5338 38B0                           l5362 39BE                           l5346 3974  
                         l5522 4280                           l5514 4236                           l5530 41F8  
                         l5602 3E44                           l5370 38F6                           l5506 4162  
                         l5610 3D24                           l4802 3864                           l4298 3146  
                         l3850 1AEE                           l3842 1AD2                           l3834 1A90  
                         l3826 1A36                           l3818 19EA                           l3770 189E  
                         l3762 1872                           l3754 183E                           l3746 1802  
                         l3738 17CC                           l3690 1708                           l3682 16D6  
                         l3674 16AE                           l3666 168E                           l3658 165C  
                         l4386 2AD0                           l4378 2A96                           l4490 14EA  
                         l4482 139A                           l4474 12B8                           l4466 11E8  
                         l4458 111A                           l5452 4048                           l5444 400E  
                         l5428 442E                           l5436 4424                           l5196 2CB0  
                         l5188 2C7E                           l5292 2BBC                           l5284 2B52  
                         l5276 2B3A                           l5268 2B18                           l5460 4102  
                         l4396 42FA                           l5540 42E2                           l5364 39C6  
                         l5348 398E                           l5516 424E                           l5532 4204  
                         l5604 3E50                           l5372 3910                           l5524 41C6  
                         l5620 3E08                           l5508 416E                           l5612 3D30  
                         l4804 4368                           l3852 1AF0                           l3844 1AD8  
                         l3836 1AA0                           l3828 1A44                           l3780 18E4  
                         l3772 18AC                           l3764 1880                           l3756 184E  
                         l3748 1810                           l3692 170A                           l3684 16D8  
                         l3676 16C0                           l3668 1690                           l4388 2ADE  
                         l4492 151C                           l4484 13CC                           l4476 12EA  
                         l4468 121C                           l5700 31B8                           l5454 404A  
                         l5446 4012                           l5438 4428                           l5550 3BC0  
                         l5470 428E                           l5198 2CC0                           l5294 2BC6  
                         l5278 2B3E                           l5286 2B88                           l5462 410A  
                         l4398 4300                           l5366 39D6                           l5358 39A6  
                         l5518 425C                           l5534 421C                           l5390 3958  
                         l5382 3928                           l5374 3918                           l5526 41D2  
                         l5614 3DD8                           l5542 4194                           l5622 3D90  
                         l5606 3D00                           l5630 43C8                           l4806 4380  
                         l3846 1ADA                           l3838 1AC0                           l3790 1960  
                         l3782 1918                           l3774 18AE                           l3766 188E  
                         l3686 16E8                           l3694 1712                           l3678 16C2  
                         l4486 1428                           l4494 15AC                           l4478 131E  
                         l5710 31EC                           l5702 31BA                           l4760 43F0  
                         l5448 401A                           l5552 3C06                           l5472 4292  
                         l5296 2BD0                           l5288 2B98                           l5464 4112  
                         l5720 276C                           l5536 42C0                           l5368 39DA  
                         l5392 395C                           l5384 3938                           l5376 3920  
                         l5528 41EA                           l5616 3DE4                           l5544 41A0  
                         l5624 3D9C                           l5608 3D0C                           l5632 43DC  
                         l5800 265A                           l3848 1AE0                           l3792 1970  
                         l3784 191A                           l3776 18B8                           l3768 189A  
                         l3696 1722                           l3688 16F8                           l4496 15E0  
                         l4488 145A                           l5712 3206                           l5704 31D2  
                         l5480 39F2                           l5640 3F72                           l4762 43F8  
                         l5562 3CB0                           l5570 3CA6                           l5474 429E  
                         l5298 2BF0                           l5466 4122                           l5458 40FA  
                         l5730 27CC                           l5722 2772                           l5394 3A6C  
                         l5538 42CC                           l5386 3940                           l5618 3DFC  
                         l5546 41B8                           l5626 3DB4                           l5810 26BA  
                         l5802 266E                           l4770 43B4                           l3786 192A  
                         l3778 18BE                           l3698 1734                           l4498 15F0  
                         l5714 321C                           l5706 31E8                           l5490 3A2A  
                         l5482 3A0E                           l5650 3256                           l5634 3F3E  
                         l4764 43FA                           l5564 3CF6                           l5556 3C10  
                         l5476 42A0                           l5740 282C                           l5732 27CE  
                         l5724 278A                           l5548 438C                           l5396 3A84  
                         l5388 3948                           l5628 3DC0                           l5580 3D78  
                         l5820 2712                           l5812 26C6                           l5804 267A  
                         l4780 37D8                           l4772 43B6                           l3796 1984  
                         l3788 193A                           l5716 3230                           l5708 31EA  
                         l5492 3A32                           l5660 32BA                           l5652 3272  
                         l5636 3F50                           l5900 233E                           l4766 43FC  
                         l4758 43E6                           l5558 3C56                           l5478 42A8  
                         l5750 288C                           l5742 282E                           l5734 27E6  
                         l5726 27A2                           l5590 3EB0                           l5582 3E68  
                         l5574 3D48                           l5822 2728                           l5814 26DC  
                         l5806 2690                           l4790 3840                           l4782 37E8  
                         l4774 43C0                           l3798 198E                           l3990 40AA  
                         l5494 3A3A                           l5670 3312                           l5662 32D6  
                         l5654 327A                           l5638 3F60                           l5830 3542  
                         l5910 2348                           l5902 2340                           l5568 3C60  
                         l5760 28F0                           l5752 288E                           l5744 2846  
                         l5736 27FE                           l5728 27BA                           l5680 40EE  
                         l5672 40C6                           l5592 3EBC                           l5584 3E74  
                         l5576 3D54                           l5824 273E                           l5816 26F2  
                         l5808 26A6                           l4792 3842                           l4784 380E  
                         l4776 43C2                           l4768 43AA                           l3992 1F2C  
                         l5496 3A4A                           l5488 3A16                           l5664 32F2  
                         l5656 3296                           l5648 323A                           l5840 35A8  
                         l5832 354A                           l5920 236E                           l5912 2352  
                         l5904 2342                           l5770 2924                           l5762 28F2  
                         l5754 28A6                           l5746 285E                           l5738 2816  
                         l5674 40CA                           l5594 3ED4                           l5586 3E8C  
                         l5578 3D6C                           l5826 2752                           l5818 2706  
                         l4794 384C                           l4786 3812                           l4778 43C4  
                         l3994 1F38                           l5690 3182                           l5682 3150  
                         l3986 408E                           l5498 3A4E                           l5666 32FA  
                         l5658 32B2                           l5842 35BA                           l5930 2388  
                         l5922 2376                           l5914 2354                           l5906 2344  
                         l5850 22C6                           l5764 28F4                           l5756 28C2  
                         l5748 2876                           l5676 40D4                           l5596 3EE0  
                         l5588 3E98                           l5828 275E                           l5780 2596  
                         l5772 254A                           l4796 384E                           l4788 3836  
                         l3996 1F46                           l5692 3184                           l5684 3156  
                         l3988 409A                           l5668 3306                           l5844 35D2  
                         l5836 355C                           l5940 243E                           l5932 238A  
                         l5924 2378                           l5916 2356                           l5908 2346  
                         l5860 22DE                           l5852 22CA                           l5766 28F6  
                         l5758 28DA                           l5678 40E4                           l5598 3E20  
                         l5790 25F8                           l5782 25AC                           l5774 2560  
                         l4798 3858                           l3998 1F48                           l5694 3186  
                         l5686 316E                           l5846 35E2                           l5838 3582  
                         l5950 2486                           l5942 2456                           l5934 2396  
                         l5926 237A                           l5918 236C                           l5870 22FC  
                         l5862 22E4                           l5854 22CE                           l5768 290E  
                         l5792 260E                           l5784 25C2                           l5776 2576  
                         l5696 31B4                           l5688 3180                           l5960 24E6  
                         l5952 2492                           l5944 2462                           l5936 23B8  
                         l5928 237C                           l5880 2328                           l5872 2304  
                         l5864 22E8                           l5856 22D2                           l5794 2622  
                         l5786 25D6                           l5778 258A                           l5698 31B6  
                         l5970 251E                           l5962 24F4                           l5954 24AA  
                         l5946 246E                           l5938 23DA                           l5890 2332  
                         l5882 232A                           l5874 2308                           l5866 22EC  
                         l5858 22D2                           l5796 262E                           l5788 25E2  
                         l5972 252E                           l5964 24F4                           l5956 24B6  
                         l5948 2470                           l5892 2334                           l5884 232C  
                         l5876 230C                           l5868 22F4                           l5798 2644  
                         l5966 2500                           l5958 24CE                           l5894 2336  
                         l5886 232E                           l5878 2310                           l5968 251C  
                         l5896 2338                           l5888 2330                           l5898 233A  
                         STR_1 0E73                           STR_2 0EAC                           STR_3 0E22  
                         STR_4 0EAC                           STR_5 0E3F                           STR_6 0EAC  
                         STR_7 0E01                           STR_8 0EAC                           STR_9 0E5A  
                         u3000 1970                           u3001 196C                           u3010 199C  
                         u3011 1998                           u3100 1A7E                           u3020 19AC  
                         u3101 1A7A                           u3021 19A8                           u3110 1A90  
                         u3030 19C8                           u3111 1A8C                           u3031 19C4  
                         u3120 1AA0                           u3040 19D8                           u4000 15F0  
                 _BAUD4CONbits 0EE9                           u3121 1A9C                           u3041 19D4  
                         u4001 15EC                           u3130 1AC0                           u3050 19EA  
                         u3131 1ABC                           u3051 19E6                           u3300 204E  
                         u3140 1AD2                           u3060 1A00                           u3220 40C4  
                         u3301 204A                           u3141 1ACE                           u3061 19FC  
                         u3221 40C0                           u3310 20C4                           u3230 1F46  
                         u3150 1AEE                           u3070 1A16                           u3311 20C0  
                         u3231 1F42                           u3151 1AEA                           u3071 1A12  
                         u3400 21DE                           u3320 20E6                           u3240 1F58  
                         u3080 1A2A                           u5000 3F72                           u3401 21DA  
                         u3321 20E2                           u3241 1F54                           u3081 1A26  
                         u5001 3F6E                           u2450 3AFC                           u3410 21F2  
                         u3330 2110                           u3250 1F68                           u3090 1A44  
                         u5010 3256                           _T2PR 0FBC                           u2451 3AF8  
                         u3411 21EE                           u3331 210C                           u3251 1F64  
                         u3091 1A40                           u5011 3252                           u5100 28BC  
                         u2460 3B1A                           u3420 220C                           u3340 2134  
                         u3260 1FAC                           u3500 1B90                           u5020 3272  
                         u5101 28B8                           u2461 3B16                           u3421 2208  
                         u3341 2130                           u3261 1FA8                           u3501 1B8C  
                         u5021 326E                           u5110 2924                           u2470 3B36  
                         u3430 2254                           u3350 214A                           u3270 1FBE  
                         u3510 1BA0                           u5030 3296                           u5111 2920  
                         u2471 3B32                           u3431 2250                           u3351 2146  
                         u3271 1FBA                           u3511 1B9C                           u5031 3292  
                         u5200 2690                           u5120 2560                           u3440 2284  
                         u3360 2168                           u3280 1FCE                           u3600 1E44  
                         u3520 1BD6                           u2800 16C0                           u5040 32B2  
                         u5201 268C                           u5121 255C                           u3441 2280  
                         u3361 2164                           u3281 1FCA                           u3601 1E40  
                         u3521 1BD2                           u2801 16BC                           u5041 32AE  
                         u5210 26A6                           u5130 2576                           u3450 22B2  
                         u3370 2188                           u3290 200E                           u3610 1E5E  
                         u3530 1BE6                           u2810 16D6                           u5050 32D6  
                         u5211 26A2                           u5131 2572                           u3451 22AE  
                         u3371 2184                           u3291 200A                           u3611 1E5A  
                         u3531 1BE2                           u2811 16D2                           u5051 32D2  
                         u4500 3390                           u4420 36A8                           u5220 26DC  
                         u5140 25AC                           u3380 219A                           u3700 30D6  
                         u3620 1EA6                           u3540 1D60                           u3460 1B1C  
                         u2900 1810                           u2820 16E8                           u5060 32F2  
                         u5300 24F4                           u4501 338C                           u4421 36A4  
                         u5221 26D8                           u5141 25A8                           u3381 2196  
                         u3701 30D2                           u3621 1EA2                           u3461 1B18  
                         u2901 180C                           u2821 16E4                           u5061 32EE  
                         u5301 24F0                           u4510 33AC                           u4430 36B8  
                         u5070 27A0                           u5230 26F2                           u5150 25C2  
                         u3390 21C8                           u3710 30F6                           u3630 1ED4  
                         u3550 1DBA                           u3470 1B2E                           u2910 1830  
                         u2830 16F8                           u4511 33A8                           u4431 36B4  
                         u5071 279C                           u5231 26EE                           u5151 25BE  
                         u3391 21C4                           u3711 30F2                           u3631 1ED0  
                         u3551 1DB6                           u3471 1B2A                           u2911 182C  
                         u2831 16F4                           u4520 33D2                           u4440 36DE  
                         u4600 3770                           u5080 27FC                           u5240 2728  
                         u5160 25F8                           u3720 3146                           u3640 1F0E  
                         u3560 1DDA                           u3480 1B3E                           u2920 183E  
                         u2840 1734                           u3800 2950                           u4521 33CE  
                         u4441 36DA                           u4601 376C                           u5081 27F8  
                         u5241 2724                           u5161 25F4                           u3721 3142  
                         u3641 1F0A                           u3561 1DD6                           u3545 1D56  
                         u3481 1B3A                           u2921 183A                           u2841 1730  
                         u3801 294C                           u4530 33F6                           u4450 3710  
                         u4610 37B6                           u5090 285C                           u5250 273E  
                         u5170 260E                           u3650 361C                           u3570 1DEC  
                         u3490 1B7E                           u2930 184E                           u2850 1742  
                         u2770 165C                           u3730 2F5C                           u3810 295E  
                         u4531 33F2                           u4451 370C                           u4611 37B2  
                         u5091 2858                           u5251 273A                           u5171 260A  
                         u3651 3618                           u3571 1DE8                           u3491 1B7A  
                         u2931 184A                           u2851 173E                           u2771 1658  
                         u3731 2F58                           u3811 295A                           u4540 3410  
                         u4460 408C                           u4620 37C6                           u4700 2D84  
                         u5180 2644                           u3660 365A                           u3580 1E1A  
                         u2940 1880                           u2860 17B0                           u2780 166E  
                         u3740 2F90                           u3820 29BA                           u3900 114C  
                         u5260 3558                           u4541 340C                           u4461 4088  
                         u4621 37C2                           u4701 2D80                           u5181 2640  
                         u3661 3656                           u3581 1E16                           u2941 187C  
                         u2861 17AC                           u2781 166A                           u3821 29B6  
                         u3901 1148                           u5261 3554                           u4470 3332  
                         u4550 342A                           u4630 413C                           u4710 2D9E  
                         u5190 265A                           u3670 368E                           u3590 1E30  
                         u2950 188E                           u2870 17C8                           u2790 167E  
                         u3750 2FBE                           u3830 2A10                           u3910 117E  
                         u5270 35BA                           u4471 332E                           u4551 3426  
                         u4631 4138                           u4711 2D9A                           u5191 2656  
                         u3671 368A                           u3591 1E2C                           u2951 188A  
                         u2871 17C2                           u2791 167A                           u3751 2FBA  
                         u3831 2A0C                           u3911 117A                           u5407 31F8  
                         u5271 35B6                           u5327 2360                           u4480 334C  
                         u4560 3448                           u4720 2DAE                           u4640 2C8E  
                         u4800 2BBC                           u3680 307A                           u2960 18AC  
                         u2880 17CA                           u3760 2FD2                           u3840 2A5A  
                         u3920 11E8                           u5280 2456                           u4481 3348  
                         u4561 3444                           u4721 2DAA                           u4641 2C88  
                         u4801 2BB8                           u5417 3D16                           u3681 3076  
                         u2961 18A8                           u3761 2FCE                           u3745 2F86  
                         u3841 2A56                           u3921 11E4                           u5337 249C  
                         u5281 2452                           u4490 3372                           u4570 345E  
                         u4730 2DBE                           u4650 2C90                           u4810 2BF0  
                         u3690 30B8                           u2970 18E4                           u2890 17F2  
                         u3770 2FFA                           u3850 2A78                           u3930 124E  
                         u5290 24E6                           u4491 336E                           u4571 345A  
                         u4731 2DBA                           u4811 2BEC                           u5507 420E  
                         u5427 3D5E                           u3691 30B4                           u2971 18E0  
                         u2891 17EE                           u3771 2FF6                           u3851 2A74  
                         u3931 124A                           u5291 24E2                           u5347 24C0  
                         u4580 3482                           u4660 2CAA                           u4740 34C2  
                         u4820 2C10                           u4900 3972                           u2980 192A  
                         u3780 301A                           u3860 2A88                           u3940 1280  
                         u4581 347E                           u4661 2CA6                           u4741 34BE  
                         u4821 2C0C                           u5517 3E7E                           u4901 396E  
                         u5437 4178                           u2981 1926                           u3781 3016  
                         u3861 2A84                           u3941 127C                           u5357 3A40  
                         u4830 432A                           u4590 3752                           u4670 2CC0  
                         u4750 3538                           u4910 3AE0                           u2990 1960  
                         u3790 302A                           u3870 2A96                           u3950 12EA  
                         u4831 4326                           u4591 374E                           u4671 2CBC  
                         u4751 3534                           u5607 27AC                           u4911 3ADC  
                         u5527 4240                           u5447 3DA6                           u2991 195C  
                         u3791 3026                           u3871 2A92                           u3951 12E6  
                         u5367 40A0                           u4840 4340                           u4920 4412  
                         u4680 2D62                           u4760 2E0C                           u3880 2AD0  
                         u3960 1384                           u4841 433C                           u4921 440E  
                         u4681 2D5E                           u5617 2808                           u4761 2E08  
                         u5537 3EC6                           u5457 41AA                           u3881 2ACC  
                         u3961 1380                           u5377 3160                           u4690 2D74  
                         u4930 4002                           u4770 2EC8                           u4850 3882  
                         u3890 2ADE                           u3970 13CC                           u4691 2D70  
                         u4931 3FFE                           u5627 2868                           u4771 2EC4  
                         u4851 387E                           u5547 4272                           u5467 3DEE  
                         u3891 2ADA                           u3971 13C8                           u5387 3190  
                         u4940 4036                           u4780 2B18                           u4860 38A0  
                         u3980 145A                           u4941 402E                           u4781 2B14  
                         u5637 28CC                           u4861 389C                           u5557 39CC  
                         u5477 41DC                           u3981 1456                           u5397 31C4  
                         u4790 2B98                           u4870 38DE                           u3990 151C  
                         u4791 2B94                           u5647 292E                           u4871 38DA  
                         u5567 42D6                           u5487 394E                           u3991 1518  
                         u4960 42BE                           u4880 38F4                           u4961 42BA  
                         u5657 42A2                           u4881 38F0                           u5577 38BE  
                         u5497 3E36                           u4890 39F0                           u4970 3A6A  
                         u5587 3AB6                           u4891 39EC                           u4971 3A66  
                         u4980 3B6E                           u5597 40DA                           u4981 3B6A  
                         u4958 4038                           u4990 3F50                           u4991 3F4C  
                  main@current 00AC                    main@maximum 00B0                           abs@a 0008  
                         _dbuf 0164                           _main 22C6                           _dtoa 2C7A  
                         _path 0200           convert_rgb2hue@cCurr 003F                           _prec 00C6  
                         pad@i 0016                           pad@p 0013                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 0052                           _stop 3868  
          fullSpeedAhead@power 0017                           prodh 0FF4                           prodl 0FF3  
                         start 003A               __end_of_ADC_init 4400                ___fldiv@new_exp 002C  
       __end_of_color_read_Red 3C10                   ___param_bank 0000                 reading_hue@hue 0046  
                        ??_abs 000A                          ??_pad 0015                  ___fltol@sign1 003C  
              __end_of___fladd 1B02                          ?_main 0001                          ?_dtoa 0018  
                        _ADPCH 0F5F                __end_of___fldiv 22C6                __end_of___awdiv 33E4  
                        STR_10 0EAC                          STR_11 0E8B                          STR_12 0EA0  
              __end_of___awmod 3494                __end_of___flmul 1F2C                __end_of___flsub 3FCA  
              __end_of___fltol 304C                          ?_stop 0014                ___awdiv@divisor 0004  
              __end_of___lwdiv 3B56                          i1l663 0032                ___awdiv@counter 0006  
            ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024                          _TMR0H 0FD4  
                        _TMR0L 0FD3                __end_of_left135 422A        __end_of_sendCharSerial4 4418  
   __end_of_I2C_2_Master_Start 4438     __end_of_I2C_2_Master_Write 4424                          _flags 00C8  
          read_prec_or_width@c 000A            read_prec_or_width@n 000B                          _fputc 3698  
                        _fputs 404E                          pad@fp 0010                          _width 00C4  
                        _putch 4442                          dtoa@d 0019                          dtoa@i 0021  
                        dtoa@p 001D                __end_of_right90 4194                          dtoa@s 0020  
                        dtoa@w 001E                   ?_reading_hue 0042                __end_of_moveRed 3D90  
                        tablat 0FF5          moveYellow@path_length 001F                __end_of_turn180 428E  
                        ttemp5 0053                          ttemp6 0056                          ttemp7 005A  
                        status 0FD8                          wtemp8 0053                __end_of_sprintf 412E  
        convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 3D00          _I2C_2_Master_RepStart 4438  
              ?_color_read_Red 0006                __initialization 3EF8                   __end_of_main 254A  
                 __end_of_dtoa 2DF2                   __end_of_stop 38F6          __end_of_moveLightBlue 3E68  
              _get16bitTMR0val 4368                         ??_main 004D                         ??_dtoa 001B  
                       ??_stop 0016                  __activetblptr 0003     __end_of_read_prec_or_width 3542  
              _reverseStraight 323A                   ?_setMotorPWM 000F                         ?_fputc 0002  
                       ?_fputs 000A                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0002               __end_of_backHalf 42F0                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       i1l3250 002E                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3248 001E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 002C       __end_of_color_click_init 40FA  
                       _RX4PPS 0E15                         _TX4REG 0EE4               __end_of___xxtofl 2AF2  
  convert_rgb2hue@greencurrent 0068               __end_of_decision 276C                         _LowISR 0018  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031                         ___flge 304C  
                       ___fleq 35EE                      ??___fladd 000A                         ___wmul 4342  
                    ??___fldiv 0023               backOneAndHalf@mL 0019                      ??___awdiv 0006  
             backOneAndHalf@mR 001A                      ??___awmod 0006                      ??___flmul 000A  
                    ??___flsub 001A                      ??___fltol 0038                      ??___lwdiv 000C  
                       _left90 422A           read_prec_or_width@ap 0009                   ?_reverseTurn 001D  
                       clear_0 3F10                         clear_1 3F1C                         clear_2 3F28  
             ___awdiv@quotient 0008                ___awmod@divisor 0004                         _motorL 00D4  
                       _motorR 00CB                         isa$std 0001                ___awmod@counter 0006  
                    ??_left135 001B             send2USART@hue_char 0060                         pad@buf 0011  
             __end_of_right135 41F8                         dtoa@fp 0018               __end_of_moveBlue 3EF8  
             __end_of_movePink 3DD8                         fputc@c 0002                         fputs@c 000D  
                       fputs@i 000E                         fputs@s 000A                      ??_right90 001B  
                 __mediumconst 0000        calibration_routine@cCal 0045                      ??_moveRed 0021  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074  
                       putch@c 0001               __end_of_vfprintf 400C                      ??_turn180 001B  
                       stop@mL 0014                         stop@mR 0015              ??_initDCmotorsPWM 0004  
                    ??_sprintf 0038               __end_of_turnLeft 39F2                     ___flge@ff1 0002  
                   ___flge@ff2 0006                   ___xxtofl@arg 000C                   ___xxtofl@exp 000B  
                 ___xxtofl@val 0002                     ___fleq@ff1 0002                     ___fleq@ff2 0006  
              fullSpeedBack@mL 0014                fullSpeedBack@mR 0015                     __accesstop 0060  
      __end_of__initialization 3F34       __end_of_color_read_Clear 3CB0       __end_of_color_read_Green 3C60  
       ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 4194                  ___rparam_used 0001  
                   ___fltol@f1 0034               ?_color_read_Blue 0006                 __pcstackCOMRAM 0001  
      __end_of_get16bitTMR0val 438A                  _fullSpeedBack 3A6C                   __pidataBANK0 4444  
                __end_of_fputc 3742                  __end_of_fputs 408E                  __end_of_putch 4444  
      __end_of_reverseStraight 3320               reading_hue@cCurr 0042            moveBlue@path_length 001F  
                   ??_ADC_init 0002                 main@clear_norm 00B8                     backHalf@mL 0019  
                   backHalf@mR 001A                        ??_fputc 0005                        ??_fputs 000D  
                      ??_putch 0002                     __pbssBANK0 00BC                     __pbssBANK1 0100  
                   __pbssBANK2 0200         __end_of_backOneAndHalf 41C6                        ?_LowISR 0001  
            _color_writetoaddr 438A                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014  
              _convert_rgb2hue 0EB0                        ?___flge 0002                        ?___fleq 0002  
           ?_color_writetoaddr 0004                  _customDelayMs 408E                        ?___wmul 0002  
                      ?_left90 0019                      ?_backHalf 0019            ??_color_writetoaddr 0005  
                    ?___xxtofl 0002            _convert_rgb2hue$430 0084            _convert_rgb2hue$431 0088  
          _convert_rgb2hue$432 008C            _convert_rgb2hue$429 0080                      ?_decision 0047  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                  decision@color 004B  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                    moveGreen@mL 001D  
                  moveGreen@mR 001E                ?_backOneAndHalf 0019         color_writetoaddr@value 0004  
             ??_color_read_Red 0008      __end_of_color_writetoaddr 43AA                      _ADREFbits 0F58  
                    ?_right135 0019             _I2C_2_Master_Start 442E                     _initUSART4 43AA  
           _I2C_2_Master_Write 4418                      ?_moveBlue 001D                        __Hparam 0000  
                    ?_movePink 001D                        __Lparam 0000              color_read_Red@tmp 000B  
    customDelayMs@milliseconds 0002                 ?_customDelayMs 0002        sendStringSerial4@string 0003  
             ?_get16bitTMR0val 0002                        ___fladd 1642                        ___fldiv 1F2C  
                      ___awdiv 3320                        ___awmod 33E4                        ___flmul 1B02  
                      ___flsub 3F84                        ___fltol 2F46            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3AE2            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 3EF8                     ??_backHalf 001B  
            __end_of_logAction 3BC0                        __ramtop 0E00               ?_reverseStraight 0019  
                   _send2USART 43C8                      ?_turnLeft 0014                        _left135 41F8  
                      __ptext0 22C6                        __ptext1 3542                        __ptext2 3F3E  
                      __ptext3 323A                        __ptext4 39F2                        __ptext5 408E  
                      __ptext6 3150                        __ptext7 0EB0                        __ptext8 293E  
                      __ptext9 2F46                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 004B  
       reverseStraight@delayMs 001D                        _right90 4162                      _T2HLTbits 0FBE  
                      _moveRed 3D48                  _RxBufWriteCnt 0051                        _turn180 425C  
                      _sprintf 40FA                        main@hue 00B4           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 3F34              __end_of_moveGreen 3EB0  
                      fputc@fp 0004        __end_of_convert_rgb2hue 1642                        fputs@fp 000C  
            ?_color_click_init 0001             _read_prec_or_width 3494                     _moveOrange 3DD8  
                   ??_right135 001B                     _moveYellow 3D00                ??_fullSpeedBack 0016  
                   ??_moveBlue 0021             ??_color_click_init 0006        convert_rgb2hue@clearmax 007C  
                   ??_movePink 0021               _colorCalibration 00E5              __end_of_vfpfcnvrt 2C7A  
                      postdec1 0FE5                        postdec2 0FDD            ?_read_prec_or_width 0008  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0028                     ??_vfprintf 0031        convert_rgb2hue@greenmax 006C  
                 _colorCurrent 00DD                     _returnHome 3542                _initDCmotorsPWM 37D8  
                   ??_turnLeft 0016                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 3974                    ___fladd@grs 0011       reverseTurn@turnDirection 001F  
                ___xxtofl@sign 000A                    returnHome@i 002B                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88                  logAction@time 0008               convert_rgb2hue@b 00A8  
         ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4                    ___fldiv@grs 002E  
             convert_rgb2hue@r 00A0                    ___fldiv@rem 0027               fullSpeedAhead@mL 0014  
             fullSpeedAhead@mR 0015       color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003  
                  ___flmul@grs 000F                    _CCP1CONbits 0FAB            _calibration_routine 276C  
            ?_color_read_Clear 0006                   _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070  
          movePink@path_length 001F                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002                ??_customDelayMs 0004  
           ??_color_read_Clear 0008             ??_color_read_Green 0008                 __end_of_LowISR 003A  
    convert_rgb2hue@redcurrent 0060                 __end_of___flge 3150                 __end_of___fleq 3698  
               _fullSpeedAhead 39F2                    vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D  
                  vfpfcnvrt@fp 0023                 __end_of___wmul 4368                 __end_of_left90 425C  
                  ?_send2USART 0045           ?_calibration_routine 0045            reverseStraight@time 001B  
          color_read_Clear@tmp 000B            start_initialization 3EF8           moveGreen@path_length 001F  
 calibration_routine@cal_state 0060                    __end_of_abs 4162                    __end_of_pad 37D8  
                _TxBufWriteCnt 0050               ?_convert_rgb2hue 003E                    ?_moveOrange 001D  
                  ?_moveYellow 001D            color_read_Green@tmp 000B                       ??_LowISR 0001  
      __end_of_initDCmotorsPWM 3868                    vfprintf@fmt 002F         __end_of_fullSpeedAhead 3A6C  
                     ??___flge 000A                       ??___fleq 000A                       ??___wmul 0006  
                     ??_left90 001B                    __pdataBANK0 00ED                    ?_returnHome 0020  
        ??_calibration_routine 0046                  _moveLightBlue 3E20                      ___fladd@a 0006  
                    ___fladd@b 0002                      ___fldiv@a 001F                      ___fldiv@b 001B  
                    ___flmul@a 0006                      ___flmul@b 0002                    __pbssCOMRAM 004F  
                    ___flsub@a 0016                      ___flsub@b 0012                  __pcstackBANK0 0060  
             ??_backOneAndHalf 001B              reverseStraight@mL 0019              reverseStraight@mR 001A  
                ??_reading_hue 0044            decision@path_length 0049                     right135@mL 0019  
                   right135@mR 001A               ___lwdiv@dividend 0008                      _dtoa$3023 001B  
              ?_fullSpeedAhead 0014                       ?___fladd 0002                       ?___fldiv 001B  
                     ?___awdiv 0002                       ?___awmod 0002                       ?___flmul 0002  
                     ?___flsub 0012                       ?___fltol 0034                       ?___lwdiv 0008  
                   moveBlue@mL 001D                     moveBlue@mR 001E                 ?_moveLightBlue 001D  
                  __pintcodelo 0018                       ?_left135 0019                   _readingIndex 00C9  
         I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005                    __smallconst 0E00  
                   movePink@mL 001D                     movePink@mR 001E              _I2C_2_Master_Idle 431A  
                    _logAction 3B56              _I2C_2_Master_Init 42F0              _I2C_2_Master_Read 400C  
                     ?_right90 0019              _I2C_2_Master_Stop 4424                       ?_moveRed 001D  
                 _RxBufReadCnt 00CA                       _ADC_init 43E6             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
                     ?_turn180 0019             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C  
     initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032              _sendStringSerial4 428E  
          ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003  
               ___wmul@product 0006                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0003  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29             ?_sendStringSerial4 0003  
                    _moveGreen 3E68                       _PIE4bits 0E2D            __end_of_reading_hue 323A  
                     i1u222_20 002E                       i1u222_21 002A                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2AF2  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 4342      __end_of_I2C_2_Master_Init 431A  
    __end_of_I2C_2_Master_Read 404E              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 442E  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 013C  
                   ?_logAction 0008              ??_color_read_Blue 0008                   _TxBufReadCnt 004F  
                    _turnRight 38F6      __end_of_sendStringSerial4 42C0                   moveOrange@mL 001D  
                 moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 4442             color_read_Blue@tmp 000B  
          __end_of_setMotorPWM 2F46                main@path_length 00BA                   ??_initUSART4 0002  
                   ?_moveGreen 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3AE2  
              ??_moveLightBlue 0021                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023          moveOrange@path_length 001F                       _backHalf 42C0  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00ED                     sprintf@fmt 0033                       ___xxtofl 293E  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 254A  
          __end_of_reverseTurn 3F84                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 43C8                ___lwdiv@counter 000E  
                   ?_turnRight 0014                       __ptext10 3F84                       __ptext11 1642  
                     __ptext20 43C8                       __ptext12 1B02                       __ptext21 3D00  
                     __ptext13 304C                       __ptext30 41F8                       __ptext22 3D48  
                     __ptext14 35EE                       __ptext31 3E68                       __ptext23 4162  
                     __ptext15 1F2C                       __ptext40 2DF2                       __ptext32 422A  
                     __ptext24 3D90                       __ptext16 43AA                       __ptext41 3AE2  
                     __ptext33 3EB0                       __ptext25 4194                       __ptext17 37D8  
                     __ptext50 4342                       __ptext42 40C6                       __ptext34 425C  
                     __ptext26 3DD8                       __ptext18 4368                       __ptext51 2C7A  
                     __ptext43 438A                       __ptext35 3974                       __ptext27 41C6  
                     __ptext19 254A                       __ptext60 4400                       __ptext52 3742  
                     __ptext44 42F0                       __ptext36 3B56                       __ptext28 38F6  
                     __ptext61 3BC0                       __ptext53 404E                       __ptext45 276C  
                     __ptext37 42C0                       __ptext29 3E20                       __ptext70 431A  
                     __ptext62 3C10                       __ptext54 3698                       __ptext46 40FA  
                     __ptext38 3868                       __ptext71 43E6                       __ptext63 3C60  
                     __ptext55 4442                       __ptext47 3FCA                       __ptext39 3A6C  
                     __ptext64 3CB0                       __ptext56 412E                       __ptext48 2AF2  
                     __ptext65 4418                       __ptext57 33E4                       __ptext49 3494  
                     __ptext66 4424                       __ptext58 3320                       __ptext67 442E  
                     __ptext59 428E                       __ptext68 4438                       __ptext69 400C  
                  decision@hue 0047                      moveRed@mL 001D                      moveRed@mR 001E  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    _reading_hue 3150  
                reverseTurn@mL 001D                  reverseTurn@mR 001E                   ??_moveOrange 0021  
                   turnLeft@mL 0014                     turnLeft@mR 0015                   ??_moveYellow 0021  
           __end_of_send2USART 43E6                       _right135 41C6                       _moveBlue 3EB0  
                     _movePink 3D90                     turnRight@i 0017             moveRed@path_length 001F  
        __end_of_customDelayMs 40C6                       isa$xinst 0000                       left90@mL 0019  
                     left90@mR 001A                     _RC4STAbits 0EE7                       int$flags 0052  
                     _vfprintf 3FCA                   ??_returnHome 0026                       main@time 00B6  
                     _turnLeft 3974                      turn180@mL 0019                      turn180@mR 001A  
                  ??_logAction 000C                     _INTCONbits 0FF2                 customDelayMs@i 0005  
           __end_of_moveOrange 3E20             __end_of_moveYellow 3D48                    _setMotorPWM 2DF2  
            ??_get16bitTMR0val 0004                       intlevel1 0000                      sprintf@ap 0038  
         returnHome@pathLength 0024              ??_reverseStraight 001D               ??_fullSpeedAhead 0016  
     moveLightBlue@path_length 001F  get16bitTMR0val@combined_value 0008             __end_of_returnHome 35EE  
                  ??_moveGreen 0021               returnHome@action 002A                      turnLeft@i 0017  
  __end_of_calibration_routine 293E    convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045  
                  ??_vfpfcnvrt 0026                    _reverseTurn 3F3E               _color_click_init 40C6  
                     sprintf@f 0039                       sprintf@s 0032                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 4400                 returnHome@path 0022  
               returnHome@time 0028                   ___fladd@aexp 000F                   ___fladd@bexp 0010  
                 returnHome@mL 0020                   returnHome@mR 0021                logAction@action 000C  
