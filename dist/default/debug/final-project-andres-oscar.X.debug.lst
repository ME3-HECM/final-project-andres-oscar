

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 01:57:57 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 21/07/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F67K40 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000000                     
   131                           	psect	idataBANK0
   132   0048E0                     __pidataBANK0:
   133                           	callstack 0
   134                           
   135                           ;initializer for _dataFlag
   136   0048E0  01                 	db	1
   137   000000                     _TMR0H	set	4052
   138   000000                     _TX4REG	set	3812
   139   000000                     _RC4STAbits	set	3815
   140   000000                     _SP4BRGH	set	3814
   141   000000                     _LATHbits	set	3968
   142   000000                     _LATFbits	set	3966
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _PORTFbits	set	3982
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _ANSELDbits	set	3751
   154   000000                     _SSP2ADD	set	3798
   155   000000                     _SSP2CON1bits	set	3801
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATEbits	set	3965
   158   000000                     _LATGbits	set	3967
   159   000000                     _LATCbits	set	3963
   160   000000                     _LATDbits	set	3964
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RC4REG	set	3811
   164   000000                     _SP4BRGL	set	3813
   165   000000                     _TX4STAbits	set	3816
   166   000000                     _BAUD4CONbits	set	3817
   167   000000                     _SSP2CON2	set	3802
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _PIE0bits	set	3625
   175   000000                     _PIE4bits	set	3629
   176   000000                     _PIR4bits	set	3639
   177   000000                     _RC0PPS	set	3682
   178   000000                     _RC7PPS	set	3689
   179   000000                     _RD5PPS	set	3695
   180   000000                     _RE2PPS	set	3700
   181   000000                     _RD6PPS	set	3696
   182   000000                     _CCP1CONbits	set	4011
   183   000000                     _CCPTMRS0bits	set	4013
   184   000000                     _T2PR	set	4028
   185   000000                     _T2CONbits	set	4029
   186   000000                     _T0CON0bits	set	4053
   187   000000                     _CCP2CONbits	set	4007
   188   000000                     _CCP3CONbits	set	3878
   189   000000                     _ADREFbits	set	3928
   190   000000                     _CCP4CONbits	set	3874
   191   000000                     _TRISHbits	set	3976
   192   000000                     _TRISCbits	set	3971
   193   000000                     _INTCONbits	set	4082
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _ADPCH	set	3935
   196   000000                     _ADRESH	set	3940
   197   000000                     _ADCON0bits	set	3936
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _TMR0L	set	4051
   201   000000                     _T2CLKCONbits	set	4031
   202   000000                     _T2HLTbits	set	4030
   203   000000                     _PIR0bits	set	3635
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_3:
   210                           
   211                           ; BSR set to: 14
   212   000E01  43                 	db	67	;'C'
   213   000E02  61                 	db	97	;'a'
   214   000E03  6C                 	db	108	;'l'
   215   000E04  69                 	db	105	;'i'
   216   000E05  62                 	db	98	;'b'
   217   000E06  72                 	db	114	;'r'
   218   000E07  61                 	db	97	;'a'
   219   000E08  74                 	db	116	;'t'
   220   000E09  69                 	db	105	;'i'
   221   000E0A  6F                 	db	111	;'o'
   222   000E0B  6E                 	db	110	;'n'
   223   000E0C  20                 	db	32
   224   000E0D  73                 	db	115	;'s'
   225   000E0E  74                 	db	116	;'t'
   226   000E0F  61                 	db	97	;'a'
   227   000E10  74                 	db	116	;'t'
   228   000E11  65                 	db	101	;'e'
   229   000E12  20                 	db	32
   230   000E13  3D                 	db	61	;'='
   231   000E14  20                 	db	32
   232   000E15  67                 	db	103	;'g'
   233   000E16  72                 	db	114	;'r'
   234   000E17  65                 	db	101	;'e'
   235   000E18  65                 	db	101	;'e'
   236   000E19  6E                 	db	110	;'n'
   237   000E1A  20                 	db	32
   238   000E1B  0A                 	db	10
   239   000E1C  0D                 	db	13
   240   000E1D  00                 	db	0
   241   000E1E                     STR_9:
   242                           
   243                           ; BSR set to: 14
   244   000E1E  43                 	db	67	;'C'
   245   000E1F  61                 	db	97	;'a'
   246   000E20  6C                 	db	108	;'l'
   247   000E21  69                 	db	105	;'i'
   248   000E22  62                 	db	98	;'b'
   249   000E23  72                 	db	114	;'r'
   250   000E24  61                 	db	97	;'a'
   251   000E25  74                 	db	116	;'t'
   252   000E26  69                 	db	105	;'i'
   253   000E27  6F                 	db	111	;'o'
   254   000E28  6E                 	db	110	;'n'
   255   000E29  20                 	db	32
   256   000E2A  73                 	db	115	;'s'
   257   000E2B  74                 	db	116	;'t'
   258   000E2C  61                 	db	97	;'a'
   259   000E2D  74                 	db	116	;'t'
   260   000E2E  65                 	db	101	;'e'
   261   000E2F  20                 	db	32
   262   000E30  3D                 	db	61	;'='
   263   000E31  20                 	db	32
   264   000E32  20                 	db	32
   265   000E33  61                 	db	97	;'a'
   266   000E34  6D                 	db	109	;'m'
   267   000E35  62                 	db	98	;'b'
   268   000E36  69                 	db	105	;'i'
   269   000E37  65                 	db	101	;'e'
   270   000E38  6E                 	db	110	;'n'
   271   000E39  74                 	db	116	;'t'
   272   000E3A  00                 	db	0
   273   000E3B                     STR_5:
   274                           
   275                           ; BSR set to: 14
   276   000E3B  43                 	db	67	;'C'
   277   000E3C  61                 	db	97	;'a'
   278   000E3D  6C                 	db	108	;'l'
   279   000E3E  69                 	db	105	;'i'
   280   000E3F  62                 	db	98	;'b'
   281   000E40  72                 	db	114	;'r'
   282   000E41  61                 	db	97	;'a'
   283   000E42  74                 	db	116	;'t'
   284   000E43  69                 	db	105	;'i'
   285   000E44  6F                 	db	111	;'o'
   286   000E45  6E                 	db	110	;'n'
   287   000E46  20                 	db	32
   288   000E47  73                 	db	115	;'s'
   289   000E48  74                 	db	116	;'t'
   290   000E49  61                 	db	97	;'a'
   291   000E4A  74                 	db	116	;'t'
   292   000E4B  65                 	db	101	;'e'
   293   000E4C  3D                 	db	61	;'='
   294   000E4D  20                 	db	32
   295   000E4E  62                 	db	98	;'b'
   296   000E4F  6C                 	db	108	;'l'
   297   000E50  75                 	db	117	;'u'
   298   000E51  65                 	db	101	;'e'
   299   000E52  20                 	db	32
   300   000E53  0A                 	db	10
   301   000E54  0D                 	db	13
   302   000E55  00                 	db	0
   303   000E56                     STR_7:
   304                           
   305                           ; BSR set to: 14
   306   000E56  43                 	db	67	;'C'
   307   000E57  61                 	db	97	;'a'
   308   000E58  6C                 	db	108	;'l'
   309   000E59  69                 	db	105	;'i'
   310   000E5A  62                 	db	98	;'b'
   311   000E5B  72                 	db	114	;'r'
   312   000E5C  61                 	db	97	;'a'
   313   000E5D  74                 	db	116	;'t'
   314   000E5E  69                 	db	105	;'i'
   315   000E5F  6F                 	db	111	;'o'
   316   000E60  6E                 	db	110	;'n'
   317   000E61  20                 	db	32
   318   000E62  73                 	db	115	;'s'
   319   000E63  74                 	db	116	;'t'
   320   000E64  61                 	db	97	;'a'
   321   000E65  74                 	db	116	;'t'
   322   000E66  65                 	db	101	;'e'
   323   000E67  20                 	db	32
   324   000E68  3D                 	db	61	;'='
   325   000E69  20                 	db	32
   326   000E6A  20                 	db	32
   327   000E6B  77                 	db	119	;'w'
   328   000E6C  68                 	db	104	;'h'
   329   000E6D  69                 	db	105	;'i'
   330   000E6E  74                 	db	116	;'t'
   331   000E6F  65                 	db	101	;'e'
   332   000E70  00                 	db	0
   333   000E71                     STR_11:
   334                           
   335                           ; BSR set to: 14
   336   000E71  43                 	db	67	;'C'
   337   000E72  41                 	db	65	;'A'
   338   000E73  4C                 	db	76	;'L'
   339   000E74  49                 	db	73	;'I'
   340   000E75  42                 	db	66	;'B'
   341   000E76  52                 	db	82	;'R'
   342   000E77  41                 	db	65	;'A'
   343   000E78  54                 	db	84	;'T'
   344   000E79  49                 	db	73	;'I'
   345   000E7A  4F                 	db	79	;'O'
   346   000E7B  4E                 	db	78	;'N'
   347   000E7C  20                 	db	32
   348   000E7D  43                 	db	67	;'C'
   349   000E7E  4F                 	db	79	;'O'
   350   000E7F  4D                 	db	77	;'M'
   351   000E80  50                 	db	80	;'P'
   352   000E81  4C                 	db	76	;'L'
   353   000E82  45                 	db	69	;'E'
   354   000E83  54                 	db	84	;'T'
   355   000E84  45                 	db	69	;'E'
   356   000E85  44                 	db	68	;'D'
   357   000E86  20                 	db	32
   358   000E87  0A                 	db	10
   359   000E88  0D                 	db	13
   360   000E89  00                 	db	0
   361   000E8A                     STR_1:
   362                           
   363                           ; BSR set to: 14
   364   000E8A  43                 	db	67	;'C'
   365   000E8B  61                 	db	97	;'a'
   366   000E8C  6C                 	db	108	;'l'
   367   000E8D  69                 	db	105	;'i'
   368   000E8E  62                 	db	98	;'b'
   369   000E8F  72                 	db	114	;'r'
   370   000E90  61                 	db	97	;'a'
   371   000E91  74                 	db	116	;'t'
   372   000E92  69                 	db	105	;'i'
   373   000E93  6F                 	db	111	;'o'
   374   000E94  6E                 	db	110	;'n'
   375   000E95  20                 	db	32
   376   000E96  73                 	db	115	;'s'
   377   000E97  74                 	db	116	;'t'
   378   000E98  61                 	db	97	;'a'
   379   000E99  74                 	db	116	;'t'
   380   000E9A  65                 	db	101	;'e'
   381   000E9B  20                 	db	32
   382   000E9C  3D                 	db	61	;'='
   383   000E9D  20                 	db	32
   384   000E9E  72                 	db	114	;'r'
   385   000E9F  65                 	db	101	;'e'
   386   000EA0  64                 	db	100	;'d'
   387   000EA1  00                 	db	0
   388   000EA2                     
   389                           ; BSR set to: 14
   390   000EA2  56                 	db	86	;'V'
   391   000EA3  6F                 	db	111	;'o'
   392   000EA4  6C                 	db	108	;'l'
   393   000EA5  74                 	db	116	;'t'
   394   000EA6  61                 	db	97	;'a'
   395   000EA7  67                 	db	103	;'g'
   396   000EA8  65                 	db	101	;'e'
   397   000EA9  20                 	db	32
   398   000EAA  3D                 	db	61	;'='
   399   000EAB  20                 	db	32
   400   000EAC  25                 	db	37
   401   000EAD  64                 	db	100	;'d'
   402   000EAE  2E                 	db	46
   403   000EAF  25                 	db	37
   404   000EB0  30                 	db	48	;'0'
   405   000EB1  32                 	db	50	;'2'
   406   000EB2  64                 	db	100	;'d'
   407   000EB3  2C                 	db	44
   408   000EB4  20                 	db	32
   409   000EB5  20                 	db	32
   410   000EB6  00                 	db	0
   411   000EB7                     STR_14:
   412                           
   413                           ; BSR set to: 14
   414   000EB7  68                 	db	104	;'h'
   415   000EB8  75                 	db	117	;'u'
   416   000EB9  65                 	db	101	;'e'
   417   000EBA  3D                 	db	61	;'='
   418   000EBB  25                 	db	37
   419   000EBC  30                 	db	48	;'0'
   420   000EBD  33                 	db	51	;'3'
   421   000EBE  64                 	db	100	;'d'
   422   000EBF  2C                 	db	44
   423   000EC0  20                 	db	32
   424   000EC1  20                 	db	32
   425   000EC2  00                 	db	0
   426   000EC3                     STR_2:
   427                           
   428                           ; BSR set to: 14
   429   000EC3  2E                 	db	46
   430   000EC4  00                 	db	0
   431   000EC5  00                 	db	0	; dummy byte at the end
   432   000000                     
   433                           ; #config settings
   434                           
   435                           	psect	cinit
   436   00427A                     __pcinit:
   437                           	callstack 0
   438   00427A                     start_initialization:
   439                           	callstack 0
   440   00427A                     __initialization:
   441                           	callstack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (1 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445   00427A  0EE0               	movlw	low __pidataBANK0
   446   00427C  6EF6               	movwf	tblptrl,c
   447   00427E  0E48               	movlw	high __pidataBANK0
   448   004280  6EF7               	movwf	tblptrh,c
   449   004282  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450   004284  6EF8               	movwf	tblptru,c
   451   004286  0009               	tblrd		*+	;fetch initializer
   452   004288  CFF5 F0EF          	movff	tablat,__pdataBANK0
   453                           
   454                           ; Clear objects allocated to BANK2 (100 bytes)
   455   00428C  EE02  F000         	lfsr	0,__pbssBANK2
   456   004290  0E64               	movlw	100
   457   004292                     clear_0:
   458   004292  6AEE               	clrf	postinc0,c
   459   004294  06E8               	decf	wreg,f,c
   460   004296  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK1 (162 bytes)
   463   004298  EE01  F000         	lfsr	0,__pbssBANK1
   464   00429C  0EA2               	movlw	162
   465   00429E                     clear_1:
   466   00429E  6AEE               	clrf	postinc0,c
   467   0042A0  06E8               	decf	wreg,f,c
   468   0042A2  E1FD               	bnz	clear_1
   469                           
   470                           ; Clear objects allocated to BANK0 (67 bytes)
   471   0042A4  EE00  F0AC         	lfsr	0,__pbssBANK0
   472   0042A8  0E43               	movlw	67
   473   0042AA                     clear_2:
   474   0042AA  6AEE               	clrf	postinc0,c
   475   0042AC  06E8               	decf	wreg,f,c
   476   0042AE  E1FD               	bnz	clear_2
   477                           
   478                           ; Clear objects allocated to COMRAM (1 bytes)
   479   0042B0  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   480   0042B2                     end_of_initialization:
   481                           	callstack 0
   482   0042B2                     __end_of__initialization:
   483                           	callstack 0
   484   0042B2  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   0042B4  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   0042B6  0100               	movlb	0
   487   0042B8  EF8C  F00D         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   00005A                     __pbssCOMRAM:
   491                           	callstack 0
   492   00005A                     _TxBufWriteCnt:
   493                           	callstack 0
   494   00005A                     	ds	1
   495                           
   496                           	psect	bssBANK0
   497   0000AC                     __pbssBANK0:
   498                           	callstack 0
   499   0000AC                     _EUSART4RXbuf:
   500                           	callstack 0
   501   0000AC                     	ds	20
   502   0000C0                     _width:
   503                           	callstack 0
   504   0000C0                     	ds	2
   505   0000C2                     _prec:
   506                           	callstack 0
   507   0000C2                     	ds	2
   508   0000C4                     _flags:
   509                           	callstack 0
   510   0000C4                     	ds	1
   511   0000C5                     _readingIndex:
   512                           	callstack 0
   513   0000C5                     	ds	1
   514   0000C6                     _TxBufReadCnt:
   515                           	callstack 0
   516   0000C6                     	ds	1
   517   0000C7                     _RxBufReadCnt:
   518                           	callstack 0
   519   0000C7                     	ds	1
   520   0000C8                     _RxBufWriteCnt:
   521                           	callstack 0
   522   0000C8                     	ds	1
   523   0000C9                     _colorCurrent:
   524                           	callstack 0
   525   0000C9                     	ds	10
   526   0000D3                     _colorCalibration:
   527                           	callstack 0
   528   0000D3                     	ds	10
   529   0000DD                     _motorR:
   530                           	callstack 0
   531   0000DD                     	ds	9
   532   0000E6                     _motorL:
   533                           	callstack 0
   534   0000E6                     	ds	9
   535                           
   536                           	psect	dataBANK0
   537   0000EF                     __pdataBANK0:
   538                           	callstack 0
   539   0000EF                     _dataFlag:
   540                           	callstack 0
   541   0000EF                     	ds	1
   542                           
   543                           	psect	bssBANK1
   544   000100                     __pbssBANK1:
   545                           	callstack 0
   546   000100                     _EUSART4TXbuf:
   547                           	callstack 0
   548   000100                     	ds	60
   549   00013C                     _action:
   550                           	callstack 0
   551   00013C                     	ds	50
   552   00016E                     _ldrReadings:
   553                           	callstack 0
   554   00016E                     	ds	20
   555   000182                     _dbuf:
   556                           	callstack 0
   557   000182                     	ds	32
   558                           
   559                           	psect	bssBANK2
   560   000200                     __pbssBANK2:
   561                           	callstack 0
   562   000200                     _time:
   563                           	callstack 0
   564   000200                     	ds	100
   565                           
   566                           	psect	cstackBANK0
   567   000060                     __pcstackBANK0:
   568                           	callstack 0
   569   000060                     convert_rgb2hue@redcurrent:
   570                           	callstack 0
   571   000060                     send2USART@hue_char:
   572                           	callstack 0
   573                           
   574                           ; 50 bytes @ 0x0
   575   000060                     	ds	4
   576   000064                     convert_rgb2hue@redmax:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x4
   580   000064                     	ds	4
   581   000068                     convert_rgb2hue@greencurrent:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x8
   585   000068                     	ds	4
   586   00006C                     convert_rgb2hue@greenmax:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0xC
   590   00006C                     	ds	4
   591   000070                     convert_rgb2hue@bluecurrent:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x10
   595   000070                     	ds	4
   596   000074                     convert_rgb2hue@bluemax:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x14
   600   000074                     	ds	4
   601   000078                     convert_rgb2hue@clearcurrent:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x18
   605   000078                     	ds	4
   606   00007C                     convert_rgb2hue@clearmax:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x1C
   610   00007C                     	ds	4
   611   000080                     _convert_rgb2hue$432:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x20
   615   000080                     	ds	4
   616   000084                     _convert_rgb2hue$433:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x24
   620   000084                     	ds	4
   621   000088                     _convert_rgb2hue$434:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x28
   625   000088                     	ds	4
   626   00008C                     _convert_rgb2hue$435:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x2C
   630   00008C                     	ds	4
   631   000090                     convert_rgb2hue@min:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x30
   635   000090                     	ds	2
   636   000092                     calibration_routine@cal_state:
   637                           	callstack 0
   638                           
   639                           ; 20 bytes @ 0x32
   640   000092                     	ds	2
   641   000094                     convert_rgb2hue@diff:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x34
   645   000094                     	ds	4
   646   000098                     convert_rgb2hue@max:
   647                           	callstack 0
   648                           
   649                           ; 4 bytes @ 0x38
   650   000098                     	ds	4
   651   00009C                     convert_rgb2hue@hue:
   652                           	callstack 0
   653                           
   654                           ; 4 bytes @ 0x3C
   655   00009C                     	ds	4
   656   0000A0                     convert_rgb2hue@r:
   657                           	callstack 0
   658                           
   659                           ; 4 bytes @ 0x40
   660   0000A0                     	ds	4
   661   0000A4                     convert_rgb2hue@g:
   662                           	callstack 0
   663                           
   664                           ; 4 bytes @ 0x44
   665   0000A4                     	ds	4
   666   0000A8                     convert_rgb2hue@b:
   667                           	callstack 0
   668                           
   669                           ; 4 bytes @ 0x48
   670   0000A8                     	ds	4
   671                           
   672                           	psect	cstackCOMRAM
   673   000001                     __pcstackCOMRAM:
   674                           	callstack 0
   675   000001                     ??_LowISR:
   676   000001                     
   677                           ; 1 bytes @ 0x0
   678   000001                     	ds	1
   679   000002                     ??_I2C_2_Master_Idle:
   680   000002                     ?___wmul:
   681                           	callstack 0
   682   000002                     ?___awdiv:
   683                           	callstack 0
   684   000002                     ?___awmod:
   685                           	callstack 0
   686   000002                     ?___fladd:
   687                           	callstack 0
   688   000002                     ?___flmul:
   689                           	callstack 0
   690   000002                     ?___lmul:
   691                           	callstack 0
   692   000002                     ?___xxtofl:
   693                           	callstack 0
   694   000002                     fullSpeedAhead@mL:
   695                           	callstack 0
   696   000002                     sendCharSerial4@charToSend:
   697                           	callstack 0
   698   000002                     initDCmotorsPWM@PWMperiod:
   699                           	callstack 0
   700   000002                     logAction@newTime:
   701                           	callstack 0
   702   000002                     customDelayMs@milliseconds:
   703                           	callstack 0
   704   000002                     ___wmul@multiplier:
   705                           	callstack 0
   706   000002                     ___awdiv@dividend:
   707                           	callstack 0
   708   000002                     ___awmod@dividend:
   709                           	callstack 0
   710   000002                     fputc@c:
   711                           	callstack 0
   712   000002                     ___lmul@multiplier:
   713                           	callstack 0
   714   000002                     ___fleq@ff1:
   715                           	callstack 0
   716   000002                     ___flge@ff1:
   717                           	callstack 0
   718   000002                     ___fladd@b:
   719                           	callstack 0
   720   000002                     ___flmul@b:
   721                           	callstack 0
   722   000002                     ___xxtofl@val:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x1
   726   000002                     	ds	1
   727   000003                     ??_I2C_2_Master_Read:
   728   000003                     I2C_2_Master_Write@data_byte:
   729                           	callstack 0
   730   000003                     fullSpeedAhead@mR:
   731                           	callstack 0
   732   000003                     sendStringSerial4@string:
   733                           	callstack 0
   734                           
   735                           ; 1 bytes @ 0x2
   736   000003                     	ds	1
   737   000004                     ??_customDelayMs:
   738   000004                     color_writetoaddr@value:
   739                           	callstack 0
   740   000004                     I2C_2_Master_Read@ack:
   741                           	callstack 0
   742   000004                     fputc@fp:
   743                           	callstack 0
   744   000004                     logAction@path_step:
   745                           	callstack 0
   746   000004                     ___wmul@multiplicand:
   747                           	callstack 0
   748   000004                     ___awdiv@divisor:
   749                           	callstack 0
   750   000004                     ___awmod@divisor:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x3
   754   000004                     	ds	1
   755   000005                     ??_fputc:
   756   000005                     color_writetoaddr@address:
   757                           	callstack 0
   758   000005                     I2C_2_Master_Read@tmp:
   759                           	callstack 0
   760   000005                     customDelayMs@i:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x4
   764   000005                     	ds	1
   765   000006                     ??_color_click_init:
   766   000006                     ??___xxtofl:
   767   000006                     ?_color_read_Red:
   768                           	callstack 0
   769   000006                     ?_color_read_Green:
   770                           	callstack 0
   771   000006                     ?_color_read_Blue:
   772                           	callstack 0
   773   000006                     ?_color_read_Clear:
   774                           	callstack 0
   775   000006                     logAction@newAction:
   776                           	callstack 0
   777   000006                     ___awdiv@counter:
   778                           	callstack 0
   779   000006                     ___awmod@counter:
   780                           	callstack 0
   781   000006                     ___wmul@product:
   782                           	callstack 0
   783   000006                     ___lmul@multiplicand:
   784                           	callstack 0
   785   000006                     ___fleq@ff2:
   786                           	callstack 0
   787   000006                     ___flge@ff2:
   788                           	callstack 0
   789   000006                     ___fladd@a:
   790                           	callstack 0
   791   000006                     ___flmul@a:
   792                           	callstack 0
   793                           
   794                           ; 4 bytes @ 0x5
   795   000006                     	ds	1
   796   000007                     ?_get16bitTMR0val:
   797                           	callstack 0
   798   000007                     ___awdiv@sign:
   799                           	callstack 0
   800   000007                     ___awmod@sign:
   801                           	callstack 0
   802   000007                     get16bitTMR0val@path_step:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x6
   806   000007                     	ds	1
   807   000008                     ??_color_read_Red:
   808   000008                     ??_color_read_Green:
   809   000008                     ??_color_read_Blue:
   810   000008                     ??_color_read_Clear:
   811   000008                     ?_abs:
   812                           	callstack 0
   813   000008                     ?___lwdiv:
   814                           	callstack 0
   815   000008                     ?_read_prec_or_width:
   816                           	callstack 0
   817   000008                     read_prec_or_width@fmt:
   818                           	callstack 0
   819   000008                     ___awdiv@quotient:
   820                           	callstack 0
   821   000008                     ___lwdiv@dividend:
   822                           	callstack 0
   823   000008                     abs@a:
   824                           	callstack 0
   825                           
   826                           ; 2 bytes @ 0x7
   827   000008                     	ds	1
   828   000009                     ??_get16bitTMR0val:
   829   000009                     read_prec_or_width@ap:
   830                           	callstack 0
   831                           
   832                           ; 1 bytes @ 0x8
   833   000009                     	ds	1
   834   00000A                     ??___fladd:
   835   00000A                     ??___flmul:
   836   00000A                     ??_abs:
   837   00000A                     ??___fleq:
   838   00000A                     ??___flge:
   839   00000A                     ___xxtofl@sign:
   840                           	callstack 0
   841   00000A                     read_prec_or_width@c:
   842                           	callstack 0
   843   00000A                     ___lwdiv@divisor:
   844                           	callstack 0
   845   00000A                     fputs@s:
   846                           	callstack 0
   847   00000A                     ___lmul@product:
   848                           	callstack 0
   849                           
   850                           ; 4 bytes @ 0x9
   851   00000A                     	ds	1
   852   00000B                     ___xxtofl@exp:
   853                           	callstack 0
   854   00000B                     color_read_Red@tmp:
   855                           	callstack 0
   856   00000B                     color_read_Green@tmp:
   857                           	callstack 0
   858   00000B                     color_read_Blue@tmp:
   859                           	callstack 0
   860   00000B                     color_read_Clear@tmp:
   861                           	callstack 0
   862   00000B                     read_prec_or_width@n:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0xA
   866   00000B                     	ds	1
   867   00000C                     ___lwdiv@counter:
   868                           	callstack 0
   869   00000C                     fputs@fp:
   870                           	callstack 0
   871   00000C                     ___xxtofl@arg:
   872                           	callstack 0
   873                           
   874                           ; 4 bytes @ 0xB
   875   00000C                     	ds	1
   876   00000D                     fputs@c:
   877                           	callstack 0
   878   00000D                     get16bitTMR0val@combined_value:
   879                           	callstack 0
   880   00000D                     ___lwdiv@quotient:
   881                           	callstack 0
   882                           
   883                           ; 2 bytes @ 0xC
   884   00000D                     	ds	1
   885   00000E                     ?___aldiv:
   886                           	callstack 0
   887   00000E                     ___fladd@signs:
   888                           	callstack 0
   889   00000E                     ___flmul@sign:
   890                           	callstack 0
   891   00000E                     fputs@i:
   892                           	callstack 0
   893   00000E                     ___aldiv@dividend:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0xD
   897   00000E                     	ds	1
   898   00000F                     setMotorPWM@m:
   899                           	callstack 0
   900   00000F                     ___fladd@aexp:
   901                           	callstack 0
   902   00000F                     ___flmul@aexp:
   903                           	callstack 0
   904                           
   905                           ; 1 bytes @ 0xE
   906   00000F                     	ds	1
   907   000010                     ??_setMotorPWM:
   908   000010                     ___fladd@bexp:
   909                           	callstack 0
   910   000010                     pad@fp:
   911                           	callstack 0
   912   000010                     ___flmul@grs:
   913                           	callstack 0
   914                           
   915                           ; 4 bytes @ 0xF
   916   000010                     	ds	1
   917   000011                     ___fladd@grs:
   918                           	callstack 0
   919   000011                     pad@buf:
   920                           	callstack 0
   921                           
   922                           ; 2 bytes @ 0x10
   923   000011                     	ds	1
   924   000012                     ?___flsub:
   925                           	callstack 0
   926   000012                     setMotorPWM@posDuty:
   927                           	callstack 0
   928   000012                     ___aldiv@divisor:
   929                           	callstack 0
   930   000012                     ___flsub@b:
   931                           	callstack 0
   932                           
   933                           ; 4 bytes @ 0x11
   934   000012                     	ds	1
   935   000013                     setMotorPWM@negDuty:
   936                           	callstack 0
   937   000013                     pad@p:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x12
   941   000013                     	ds	1
   942   000014                     stop@mL:
   943                           	callstack 0
   944   000014                     turnLeft@mL:
   945                           	callstack 0
   946   000014                     turnRight@mL:
   947                           	callstack 0
   948   000014                     fullSpeedBack@mL:
   949                           	callstack 0
   950   000014                     ___flmul@bexp:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x13
   954   000014                     	ds	1
   955   000015                     ??_pad:
   956   000015                     stop@mR:
   957                           	callstack 0
   958   000015                     turnLeft@mR:
   959                           	callstack 0
   960   000015                     turnRight@mR:
   961                           	callstack 0
   962   000015                     fullSpeedBack@mR:
   963                           	callstack 0
   964   000015                     ___flmul@prod:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x14
   968   000015                     	ds	1
   969   000016                     ??_stop:
   970   000016                     ??_turnLeft:
   971   000016                     ??_turnRight:
   972   000016                     ??_fullSpeedBack:
   973   000016                     ___aldiv@counter:
   974                           	callstack 0
   975   000016                     pad@i:
   976                           	callstack 0
   977   000016                     ___flsub@a:
   978                           	callstack 0
   979                           
   980                           ; 4 bytes @ 0x15
   981   000016                     	ds	1
   982   000017                     reverseStraight@mL:
   983                           	callstack 0
   984   000017                     ___aldiv@sign:
   985                           	callstack 0
   986   000017                     turnLeft@i:
   987                           	callstack 0
   988   000017                     turnRight@i:
   989                           	callstack 0
   990   000017                     fullSpeedBack@power:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x16
   994   000017                     	ds	1
   995   000018                     reverseStraight@mR:
   996                           	callstack 0
   997   000018                     dtoa@fp:
   998                           	callstack 0
   999   000018                     ___aldiv@quotient:
  1000                           	callstack 0
  1001                           
  1002                           ; 4 bytes @ 0x17
  1003   000018                     	ds	1
  1004   000019                     right90@mL:
  1005                           	callstack 0
  1006   000019                     left90@mL:
  1007                           	callstack 0
  1008   000019                     turn180@mL:
  1009                           	callstack 0
  1010   000019                     right135@mL:
  1011                           	callstack 0
  1012   000019                     left135@mL:
  1013                           	callstack 0
  1014   000019                     backHalf@mL:
  1015                           	callstack 0
  1016   000019                     backOneAndHalf@mL:
  1017                           	callstack 0
  1018   000019                     ___flmul@temp:
  1019                           	callstack 0
  1020   000019                     dtoa@d:
  1021                           	callstack 0
  1022   000019                     reverseStraight@time_ms:
  1023                           	callstack 0
  1024                           
  1025                           ; 4 bytes @ 0x18
  1026   000019                     	ds	1
  1027   00001A                     right90@mR:
  1028                           	callstack 0
  1029   00001A                     left90@mR:
  1030                           	callstack 0
  1031   00001A                     turn180@mR:
  1032                           	callstack 0
  1033   00001A                     right135@mR:
  1034                           	callstack 0
  1035   00001A                     left135@mR:
  1036                           	callstack 0
  1037   00001A                     backHalf@mR:
  1038                           	callstack 0
  1039   00001A                     backOneAndHalf@mR:
  1040                           	callstack 0
  1041                           
  1042                           ; 1 bytes @ 0x19
  1043   00001A                     	ds	1
  1044   00001B                     ??_right90:
  1045   00001B                     ??_left90:
  1046   00001B                     ??_turn180:
  1047   00001B                     ??_right135:
  1048   00001B                     ??_left135:
  1049   00001B                     ??_backHalf:
  1050   00001B                     ??_backOneAndHalf:
  1051   00001B                     ?___fldiv:
  1052                           	callstack 0
  1053   00001B                     _dtoa$3069:
  1054                           	callstack 0
  1055   00001B                     ___fldiv@b:
  1056                           	callstack 0
  1057                           
  1058                           ; 4 bytes @ 0x1A
  1059   00001B                     	ds	2
  1060   00001D                     ??_reverseStraight:
  1061   00001D                     moveRed@mL:
  1062                           	callstack 0
  1063   00001D                     moveGreen@mL:
  1064                           	callstack 0
  1065   00001D                     moveBlue@mL:
  1066                           	callstack 0
  1067   00001D                     moveYellow@mL:
  1068                           	callstack 0
  1069   00001D                     movePink@mL:
  1070                           	callstack 0
  1071   00001D                     moveOrange@mL:
  1072                           	callstack 0
  1073   00001D                     moveLightBlue@mL:
  1074                           	callstack 0
  1075   00001D                     moveWhite@mL:
  1076                           	callstack 0
  1077   00001D                     reverseTurn@mL:
  1078                           	callstack 0
  1079   00001D                     dtoa@p:
  1080                           	callstack 0
  1081                           
  1082                           ; 1 bytes @ 0x1C
  1083   00001D                     	ds	1
  1084   00001E                     moveRed@mR:
  1085                           	callstack 0
  1086   00001E                     moveGreen@mR:
  1087                           	callstack 0
  1088   00001E                     moveBlue@mR:
  1089                           	callstack 0
  1090   00001E                     moveYellow@mR:
  1091                           	callstack 0
  1092   00001E                     movePink@mR:
  1093                           	callstack 0
  1094   00001E                     moveOrange@mR:
  1095                           	callstack 0
  1096   00001E                     moveLightBlue@mR:
  1097                           	callstack 0
  1098   00001E                     moveWhite@mR:
  1099                           	callstack 0
  1100   00001E                     reverseTurn@mR:
  1101                           	callstack 0
  1102   00001E                     dtoa@w:
  1103                           	callstack 0
  1104                           
  1105                           ; 2 bytes @ 0x1D
  1106   00001E                     	ds	1
  1107   00001F                     ??_moveRed:
  1108   00001F                     ??_moveGreen:
  1109   00001F                     ??_moveBlue:
  1110   00001F                     ??_moveLightBlue:
  1111   00001F                     ??_moveYellow:
  1112   00001F                     ??_moveOrange:
  1113   00001F                     ??_movePink:
  1114   00001F                     ??_moveWhite:
  1115   00001F                     reverseTurn@actionStep:
  1116                           	callstack 0
  1117   00001F                     reverseStraight@delayMs:
  1118                           	callstack 0
  1119   00001F                     ___fldiv@a:
  1120                           	callstack 0
  1121                           
  1122                           ; 4 bytes @ 0x1E
  1123   00001F                     	ds	1
  1124   000020                     ??_reverseTurn:
  1125   000020                     dtoa@s:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x1F
  1129   000020                     	ds	1
  1130   000021                     ?_decision:
  1131                           	callstack 0
  1132   000021                     decision@hue:
  1133                           	callstack 0
  1134   000021                     dtoa@i:
  1135                           	callstack 0
  1136                           
  1137                           ; 2 bytes @ 0x20
  1138   000021                     	ds	1
  1139   000022                     returnHome@mL:
  1140                           	callstack 0
  1141                           
  1142                           ; 1 bytes @ 0x21
  1143   000022                     	ds	1
  1144   000023                     ??___fldiv:
  1145   000023                     returnHome@mR:
  1146                           	callstack 0
  1147   000023                     vfpfcnvrt@fp:
  1148                           	callstack 0
  1149   000023                     decision@path_step:
  1150                           	callstack 0
  1151                           
  1152                           ; 2 bytes @ 0x22
  1153   000023                     	ds	1
  1154   000024                     vfpfcnvrt@fmt:
  1155                           	callstack 0
  1156   000024                     returnHome@path_step:
  1157                           	callstack 0
  1158                           
  1159                           ; 2 bytes @ 0x23
  1160   000024                     	ds	1
  1161   000025                     vfpfcnvrt@ap:
  1162                           	callstack 0
  1163                           
  1164                           ; 1 bytes @ 0x24
  1165   000025                     	ds	1
  1166   000026                     ??_vfpfcnvrt:
  1167   000026                     returnHome@time_ms:
  1168                           	callstack 0
  1169                           
  1170                           ; 4 bytes @ 0x25
  1171   000026                     	ds	1
  1172   000027                     ___fldiv@rem:
  1173                           	callstack 0
  1174                           
  1175                           ; 4 bytes @ 0x26
  1176   000027                     	ds	1
  1177   000028                     vfpfcnvrt@convarg:
  1178                           	callstack 0
  1179                           
  1180                           ; 4 bytes @ 0x27
  1181   000028                     	ds	2
  1182   00002A                     returnHome@action_turn:
  1183                           	callstack 0
  1184                           
  1185                           ; 1 bytes @ 0x29
  1186   00002A                     	ds	1
  1187   00002B                     ___fldiv@sign:
  1188                           	callstack 0
  1189   00002B                     returnHome@i:
  1190                           	callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x2A
  1193   00002B                     	ds	1
  1194   00002C                     vfpfcnvrt@done:
  1195                           	callstack 0
  1196   00002C                     ___fldiv@new_exp:
  1197                           	callstack 0
  1198                           
  1199                           ; 2 bytes @ 0x2B
  1200   00002C                     	ds	1
  1201   00002D                     vfpfcnvrt@cp:
  1202                           	callstack 0
  1203                           
  1204                           ; 1 bytes @ 0x2C
  1205   00002D                     	ds	1
  1206   00002E                     ?_vfprintf:
  1207                           	callstack 0
  1208   00002E                     vfprintf@fp:
  1209                           	callstack 0
  1210   00002E                     ___fldiv@grs:
  1211                           	callstack 0
  1212                           
  1213                           ; 4 bytes @ 0x2D
  1214   00002E                     	ds	1
  1215   00002F                     vfprintf@fmt:
  1216                           	callstack 0
  1217                           
  1218                           ; 1 bytes @ 0x2E
  1219   00002F                     	ds	1
  1220   000030                     vfprintf@ap:
  1221                           	callstack 0
  1222                           
  1223                           ; 1 bytes @ 0x2F
  1224   000030                     	ds	1
  1225   000031                     vfprintf@cfmt:
  1226                           	callstack 0
  1227                           
  1228                           ; 1 bytes @ 0x30
  1229   000031                     	ds	1
  1230   000032                     ?_sprintf:
  1231                           	callstack 0
  1232   000032                     ___fldiv@bexp:
  1233                           	callstack 0
  1234   000032                     sprintf@s:
  1235                           	callstack 0
  1236                           
  1237                           ; 1 bytes @ 0x31
  1238   000032                     	ds	1
  1239   000033                     ___fldiv@aexp:
  1240                           	callstack 0
  1241   000033                     sprintf@fmt:
  1242                           	callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x32
  1245   000033                     	ds	1
  1246   000034                     ?___fltol:
  1247                           	callstack 0
  1248   000034                     ___fltol@f1:
  1249                           	callstack 0
  1250                           
  1251                           ; 4 bytes @ 0x33
  1252   000034                     	ds	4
  1253   000038                     ??___fltol:
  1254   000038                     sprintf@ap:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x37
  1258   000038                     	ds	1
  1259   000039                     sprintf@f:
  1260                           	callstack 0
  1261                           
  1262                           ; 12 bytes @ 0x38
  1263   000039                     	ds	3
  1264   00003C                     ___fltol@sign1:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x3B
  1268   00003C                     	ds	1
  1269   00003D                     ___fltol@exp1:
  1270                           	callstack 0
  1271                           
  1272                           ; 1 bytes @ 0x3C
  1273   00003D                     	ds	1
  1274   00003E                     ?_convert_rgb2hue:
  1275                           	callstack 0
  1276   00003E                     convert_rgb2hue@cMax:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x3D
  1280   00003E                     	ds	1
  1281   00003F                     convert_rgb2hue@cCurr:
  1282                           	callstack 0
  1283                           
  1284                           ; 1 bytes @ 0x3E
  1285   00003F                     	ds	1
  1286   000040                     ??_convert_rgb2hue:
  1287                           
  1288                           ; 1 bytes @ 0x3F
  1289   000040                     	ds	2
  1290   000042                     ?_reading_hue:
  1291                           	callstack 0
  1292   000042                     reading_hue@cCurr:
  1293                           	callstack 0
  1294                           
  1295                           ; 1 bytes @ 0x41
  1296   000042                     	ds	2
  1297   000044                     ??_reading_hue:
  1298                           
  1299                           ; 1 bytes @ 0x43
  1300   000044                     	ds	1
  1301   000045                     send2USART@hue:
  1302                           	callstack 0
  1303                           
  1304                           ; 2 bytes @ 0x44
  1305   000045                     	ds	1
  1306   000046                     reading_hue@hue:
  1307                           	callstack 0
  1308                           
  1309                           ; 2 bytes @ 0x45
  1310   000046                     	ds	1
  1311   000047                     calibration_routine@cCal:
  1312                           	callstack 0
  1313                           
  1314                           ; 1 bytes @ 0x46
  1315   000047                     	ds	1
  1316   000048                     ??_calibration_routine:
  1317                           
  1318                           ; 1 bytes @ 0x47
  1319   000048                     	ds	2
  1320   00004A                     ??_main:
  1321                           
  1322                           ; 1 bytes @ 0x49
  1323   00004A                     	ds	2
  1324   00004C                     main@hue:
  1325                           	callstack 0
  1326                           
  1327                           ; 2 bytes @ 0x4B
  1328   00004C                     	ds	2
  1329   00004E                     main@clear_current:
  1330                           	callstack 0
  1331                           
  1332                           ; 4 bytes @ 0x4D
  1333   00004E                     	ds	4
  1334   000052                     main@clear_max:
  1335                           	callstack 0
  1336                           
  1337                           ; 4 bytes @ 0x51
  1338   000052                     	ds	4
  1339   000056                     main@path_step:
  1340                           	callstack 0
  1341                           
  1342                           ; 2 bytes @ 0x55
  1343   000056                     	ds	2
  1344   000058                     main@clear_norm:
  1345                           	callstack 0
  1346                           
  1347                           ; 2 bytes @ 0x57
  1348   000058                     	ds	2
  1349                           
  1350 ;;
  1351 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1352 ;;
  1353 ;; *************** function _main *****************
  1354 ;; Defined at:
  1355 ;;		line 29 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  white           2    0        unsigned int 
  1360 ;;  clear_max       4   81[COMRAM] float 
  1361 ;;  clear_curren    4   77[COMRAM] float 
  1362 ;;  clear_norm      2   87[COMRAM] unsigned int 
  1363 ;;  path_step       2   85[COMRAM] unsigned int 
  1364 ;;  hue             2   75[COMRAM] unsigned int 
  1365 ;;  PWMcycle        2    0        unsigned int 
  1366 ;;  ambient         2    0        unsigned int 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;Total ram usage:       16 bytes
  1381 ;; Hardware stack levels required when called: 11
  1382 ;; This function calls:
  1383 ;;		_ADC_init
  1384 ;;		___fldiv
  1385 ;;		___flmul
  1386 ;;		___fltol
  1387 ;;		___xxtofl
  1388 ;;		_calibration_routine
  1389 ;;		_color_click_init
  1390 ;;		_color_read_Clear
  1391 ;;		_decision
  1392 ;;		_fullSpeedAhead
  1393 ;;		_get16bitTMR0val
  1394 ;;		_initDCmotorsPWM
  1395 ;;		_initUSART4
  1396 ;;		_reading_hue
  1397 ;;		_returnHome
  1398 ;;		_send2USART
  1399 ;;		_stop
  1400 ;; This function is called by:
  1401 ;;		Startup code after reset
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text0
  1406   001B18                     __ptext0:
  1407                           	callstack 0
  1408   001B18                     _main:
  1409                           	callstack 20
  1410   001B18                     
  1411                           ;main.c: 31:     ADC_init();
  1412   001B18  EC40  F024         	call	_ADC_init	;wreg free
  1413   001B1C                     
  1414                           ;main.c: 32:     color_click_init();
  1415   001B1C  ECFB  F021         	call	_color_click_init	;wreg free
  1416   001B20                     
  1417                           ;main.c: 33:     initUSART4();
  1418   001B20  EC22  F024         	call	_initUSART4	;wreg free
  1419   001B24                     
  1420                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1421   001B24  0E00               	movlw	0
  1422   001B26  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1423   001B28  0E63               	movlw	99
  1424   001B2A  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1425   001B2C  ECA1  F01E         	call	_initDCmotorsPWM	;wreg free
  1426   001B30                     
  1427                           ;main.c: 40:     motorL.power = 0;
  1428   001B30  0E00               	movlw	0
  1429   001B32  0100               	movlb	0	; () banked
  1430   001B34  6FE6               	movwf	_motorL& (0+255),b
  1431   001B36                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 41:     motorL.direction = 1;
  1434   001B36  0E01               	movlw	1
  1435   001B38  6FE7               	movwf	(_motorL+1)& (0+255),b
  1436   001B3A                     
  1437                           ; BSR set to: 0
  1438                           ;main.c: 42:     motorL.brakemode = 1;
  1439   001B3A  0E01               	movlw	1
  1440   001B3C  6FE8               	movwf	(_motorL+2)& (0+255),b
  1441   001B3E                     
  1442                           ; BSR set to: 0
  1443                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1444   001B3E  0E00               	movlw	0
  1445   001B40  6FEA               	movwf	(_motorL+4)& (0+255),b
  1446   001B42  0E63               	movlw	99
  1447   001B44  6FE9               	movwf	(_motorL+3)& (0+255),b
  1448   001B46                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1451   001B46  0EAA               	movlw	170
  1452   001B48  6FEB               	movwf	(_motorL+5)& (0+255),b
  1453   001B4A  0E0F               	movlw	15
  1454   001B4C  6FEC               	movwf	(_motorL+6)& (0+255),b
  1455   001B4E                     
  1456                           ; BSR set to: 0
  1457                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1458   001B4E  0EA6               	movlw	166
  1459   001B50  6FED               	movwf	(_motorL+7)& (0+255),b
  1460   001B52  0E0F               	movlw	15
  1461   001B54  6FEE               	movwf	(_motorL+8)& (0+255),b
  1462   001B56                     
  1463                           ; BSR set to: 0
  1464                           ;main.c: 47:     motorR.power = 0;
  1465   001B56  0E00               	movlw	0
  1466   001B58  6FDD               	movwf	_motorR& (0+255),b
  1467   001B5A                     
  1468                           ; BSR set to: 0
  1469                           ;main.c: 48:     motorR.direction = 1;
  1470   001B5A  0E01               	movlw	1
  1471   001B5C  6FDE               	movwf	(_motorR+1)& (0+255),b
  1472   001B5E                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 49:     motorR.brakemode = 1;
  1475   001B5E  0E01               	movlw	1
  1476   001B60  6FDF               	movwf	(_motorR+2)& (0+255),b
  1477   001B62                     
  1478                           ; BSR set to: 0
  1479                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1480   001B62  0E00               	movlw	0
  1481   001B64  6FE1               	movwf	(_motorR+4)& (0+255),b
  1482   001B66  0E63               	movlw	99
  1483   001B68  6FE0               	movwf	(_motorR+3)& (0+255),b
  1484                           
  1485                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1486   001B6A  0E25               	movlw	37
  1487   001B6C  6FE2               	movwf	(_motorR+5)& (0+255),b
  1488   001B6E  0E0F               	movlw	15
  1489   001B70  6FE3               	movwf	(_motorR+6)& (0+255),b
  1490                           
  1491                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1492   001B72  0E21               	movlw	33
  1493   001B74  6FE4               	movwf	(_motorR+7)& (0+255),b
  1494   001B76  0E0F               	movlw	15
  1495   001B78  6FE5               	movwf	(_motorR+8)& (0+255),b
  1496   001B7A                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 55:     LATDbits.LATD7=0;
  1499   001B7A  9E7C               	bcf	124,7,c	;volatile
  1500   001B7C                     
  1501                           ; BSR set to: 0
  1502                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1503   001B7C  9E84               	bcf	132,7,c	;volatile
  1504   001B7E                     
  1505                           ; BSR set to: 0
  1506                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1507   001B7E  9087               	bcf	135,0,c	;volatile
  1508   001B80                     
  1509                           ; BSR set to: 0
  1510                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1511   001B80  907F               	bcf	127,0,c	;volatile
  1512   001B82                     
  1513                           ; BSR set to: 0
  1514                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1515   001B82  9E85               	bcf	133,7,c	;volatile
  1516   001B84                     
  1517                           ; BSR set to: 0
  1518                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1519   001B84  9E7D               	bcf	125,7,c	;volatile
  1520   001B86                     
  1521                           ; BSR set to: 0
  1522                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1523   001B86  9681               	bcf	129,3,c	;volatile
  1524   001B88                     
  1525                           ; BSR set to: 0
  1526                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1527   001B88  9679               	bcf	121,3,c	;volatile
  1528   001B8A                     
  1529                           ; BSR set to: 0
  1530                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1531   001B8A  8686               	bsf	134,3,c	;volatile
  1532   001B8C                     
  1533                           ; BSR set to: 0
  1534                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1535   001B8C  010E               	movlb	14	; () banked
  1536   001B8E  97B4               	bcf	180,3,b	;volatile
  1537   001B90                     
  1538                           ; BSR set to: 14
  1539                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1540   001B90  8486               	bsf	134,2,c	;volatile
  1541   001B92                     
  1542                           ; BSR set to: 14
  1543                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1544   001B92  947E               	bcf	126,2,c	;volatile
  1545   001B94                     
  1546                           ; BSR set to: 14
  1547                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1548   001B94  95B4               	bcf	180,2,b	;volatile
  1549   001B96                     
  1550                           ; BSR set to: 14
  1551                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1552   001B96  9287               	bcf	135,1,c	;volatile
  1553   001B98                     
  1554                           ; BSR set to: 14
  1555                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1556   001B98  927F               	bcf	127,1,c	;volatile
  1557   001B9A                     
  1558                           ; BSR set to: 14
  1559                           ;main.c: 87:     TRISHbits.TRISH3 = 0;
  1560   001B9A  9688               	bcf	136,3,c	;volatile
  1561   001B9C                     
  1562                           ; BSR set to: 14
  1563                           ;main.c: 88:     LATHbits.LATH3 = 1;
  1564   001B9C  8680               	bsf	128,3,c	;volatile
  1565   001B9E                     
  1566                           ; BSR set to: 14
  1567                           ;main.c: 89:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1568   001B9E  0E19               	movlw	25
  1569   001BA0  6E4B               	movwf	(??_main+1)^0,c
  1570   001BA2  0E5A               	movlw	90
  1571   001BA4  6E4A               	movwf	??_main^0,c
  1572   001BA6  0EB2               	movlw	178
  1573   001BA8                     u6927:
  1574   001BA8  2EE8               	decfsz	wreg,f,c
  1575   001BAA  D7FE               	bra	u6927
  1576   001BAC  2E4A               	decfsz	??_main^0,f,c
  1577   001BAE  D7FC               	bra	u6927
  1578   001BB0  2E4B               	decfsz	(??_main+1)^0,f,c
  1579   001BB2  D7FA               	bra	u6927
  1580   001BB4                     
  1581                           ;main.c: 90:     LATHbits.LATH3 = 0;
  1582   001BB4  9680               	bcf	128,3,c	;volatile
  1583   001BB6                     
  1584                           ;main.c: 94:     calibration_routine(&colorCalibration);
  1585   001BB6  0ED3               	movlw	low _colorCalibration
  1586   001BB8  6E47               	movwf	calibration_routine@cCal^0,c
  1587   001BBA  ECC7  F014         	call	_calibration_routine	;wreg free
  1588   001BBE                     
  1589                           ;main.c: 95:     unsigned int clear_norm;;main.c: 96:     unsigned int path_step = 0;
  1590   001BBE  0E00               	movlw	0
  1591   001BC0  6E57               	movwf	(main@path_step+1)^0,c
  1592   001BC2  0E00               	movlw	0
  1593   001BC4  6E56               	movwf	main@path_step^0,c
  1594   001BC6                     l7088:
  1595                           
  1596                           ;main.c: 109:         LATGbits.LATG0 = 1;
  1597   001BC6  807F               	bsf	127,0,c	;volatile
  1598   001BC8                     
  1599                           ;main.c: 110:         LATEbits.LATE7 = 1;
  1600   001BC8  8E7D               	bsf	125,7,c	;volatile
  1601   001BCA                     
  1602                           ;main.c: 111:         LATAbits.LATA3 = 1;
  1603   001BCA  8679               	bsf	121,3,c	;volatile
  1604   001BCC                     
  1605                           ;main.c: 114:         fullSpeedAhead(&motorL,&motorR);
  1606   001BCC  0EE6               	movlw	low _motorL
  1607   001BCE  6E02               	movwf	fullSpeedAhead@mL^0,c
  1608   001BD0  0EDD               	movlw	low _motorR
  1609   001BD2  6E03               	movwf	fullSpeedAhead@mR^0,c
  1610   001BD4  EC6E  F024         	call	_fullSpeedAhead	;wreg free
  1611   001BD8                     
  1612                           ;main.c: 115:         T0CON0bits.T0EN=1;
  1613   001BD8  8ED5               	bsf	213,7,c	;volatile
  1614   001BDA                     
  1615                           ;main.c: 117:         colorCurrent.clear = color_read_Clear();
  1616   001BDA  ECA8  F020         	call	_color_read_Clear	;wreg free
  1617   001BDE  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1618   001BE2  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1619   001BE6                     
  1620                           ;main.c: 119:         clear_current = colorCurrent.clear;
  1621   001BE6  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1622   001BEA  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1623   001BEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  1624   001BF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  1625   001BF2  0E00               	movlw	0
  1626   001BF4  ECEA  F015         	call	___xxtofl
  1627   001BF8  C002  F04E         	movff	?___xxtofl,main@clear_current
  1628   001BFC  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1629   001C00  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1630   001C04  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1631   001C08                     
  1632                           ;main.c: 120:         clear_max = colorCalibration.clear;
  1633   001C08  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1634   001C0C  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1635   001C10  6A04               	clrf	(___xxtofl@val+2)^0,c
  1636   001C12  6A05               	clrf	(___xxtofl@val+3)^0,c
  1637   001C14  0E00               	movlw	0
  1638   001C16  ECEA  F015         	call	___xxtofl
  1639   001C1A  C002  F052         	movff	?___xxtofl,main@clear_max
  1640   001C1E  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1641   001C22  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1642   001C26  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1643   001C2A                     
  1644                           ;main.c: 121:         clear_norm = clear_current*100/clear_max;
  1645   001C2A  C052  F01F         	movff	main@clear_max,___fldiv@a
  1646   001C2E  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1647   001C32  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1648   001C36  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1649   001C3A  0E00               	movlw	0
  1650   001C3C  6E06               	movwf	___flmul@a^0,c
  1651   001C3E  0E00               	movlw	0
  1652   001C40  6E07               	movwf	(___flmul@a+1)^0,c
  1653   001C42  0EC8               	movlw	200
  1654   001C44  6E08               	movwf	(___flmul@a+2)^0,c
  1655   001C46  0E42               	movlw	66
  1656   001C48  6E09               	movwf	(___flmul@a+3)^0,c
  1657   001C4A  C04E  F002         	movff	main@clear_current,___flmul@b
  1658   001C4E  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1659   001C52  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1660   001C56  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1661   001C5A  ECBF  F00F         	call	___flmul	;wreg free
  1662   001C5E  C002  F01B         	movff	?___flmul,___fldiv@b
  1663   001C62  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1664   001C66  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1665   001C6A  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1666   001C6E  ECD4  F011         	call	___fldiv	;wreg free
  1667   001C72  C01B  F034         	movff	?___fldiv,___fltol@f1
  1668   001C76  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1669   001C7A  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1670   001C7E  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1671   001C82  ECAB  F01A         	call	___fltol	;wreg free
  1672   001C86  C034  F058         	movff	?___fltol,main@clear_norm
  1673   001C8A  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1674   001C8E                     l7106:
  1675                           
  1676                           ;main.c: 124:         send2USART(clear_norm);
  1677   001C8E  C058  F045         	movff	main@clear_norm,send2USART@hue
  1678   001C92  C059  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1679   001C96  EC31  F024         	call	_send2USART	;wreg free
  1680                           
  1681                           ;main.c: 126:         while(clear_norm<8){
  1682   001C9A  EFAB  F00E         	goto	l7114
  1683   001C9E                     l7108:
  1684                           
  1685                           ;main.c: 127:             (colorCurrent.clear) = color_read_Clear();
  1686   001C9E  ECA8  F020         	call	_color_read_Clear	;wreg free
  1687   001CA2  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1688   001CA6  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1689                           
  1690                           ;main.c: 128:             clear_current = colorCurrent.clear;
  1691   001CAA  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1692   001CAE  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1693   001CB2  6A04               	clrf	(___xxtofl@val+2)^0,c
  1694   001CB4  6A05               	clrf	(___xxtofl@val+3)^0,c
  1695   001CB6  0E00               	movlw	0
  1696   001CB8  ECEA  F015         	call	___xxtofl
  1697   001CBC  C002  F04E         	movff	?___xxtofl,main@clear_current
  1698   001CC0  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1699   001CC4  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1700   001CC8  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1701                           
  1702                           ;main.c: 129:             clear_max = colorCalibration.clear;
  1703   001CCC  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1704   001CD0  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1705   001CD4  6A04               	clrf	(___xxtofl@val+2)^0,c
  1706   001CD6  6A05               	clrf	(___xxtofl@val+3)^0,c
  1707   001CD8  0E00               	movlw	0
  1708   001CDA  ECEA  F015         	call	___xxtofl
  1709   001CDE  C002  F052         	movff	?___xxtofl,main@clear_max
  1710   001CE2  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1711   001CE6  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1712   001CEA  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1713   001CEE                     
  1714                           ;main.c: 130:             clear_norm = clear_current*100/clear_max;
  1715   001CEE  C052  F01F         	movff	main@clear_max,___fldiv@a
  1716   001CF2  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1717   001CF6  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1718   001CFA  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1719   001CFE  0E00               	movlw	0
  1720   001D00  6E06               	movwf	___flmul@a^0,c
  1721   001D02  0E00               	movlw	0
  1722   001D04  6E07               	movwf	(___flmul@a+1)^0,c
  1723   001D06  0EC8               	movlw	200
  1724   001D08  6E08               	movwf	(___flmul@a+2)^0,c
  1725   001D0A  0E42               	movlw	66
  1726   001D0C  6E09               	movwf	(___flmul@a+3)^0,c
  1727   001D0E  C04E  F002         	movff	main@clear_current,___flmul@b
  1728   001D12  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1729   001D16  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1730   001D1A  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1731   001D1E  ECBF  F00F         	call	___flmul	;wreg free
  1732   001D22  C002  F01B         	movff	?___flmul,___fldiv@b
  1733   001D26  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1734   001D2A  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1735   001D2E  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1736   001D32  ECD4  F011         	call	___fldiv	;wreg free
  1737   001D36  C01B  F034         	movff	?___fldiv,___fltol@f1
  1738   001D3A  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1739   001D3E  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1740   001D42  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1741   001D46  ECAB  F01A         	call	___fltol	;wreg free
  1742   001D4A  C034  F058         	movff	?___fltol,main@clear_norm
  1743   001D4E  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1744   001D52  EF47  F00E         	goto	l7106
  1745   001D56                     l7114:
  1746                           
  1747                           ;main.c: 126:         while(clear_norm<8){
  1748   001D56  5059               	movf	(main@clear_norm+1)^0,w,c
  1749   001D58  E109               	bnz	u6850
  1750   001D5A  0E08               	movlw	8
  1751   001D5C  5C58               	subwf	main@clear_norm^0,w,c
  1752   001D5E  A0D8               	btfss	status,0,c
  1753   001D60  EFB4  F00E         	goto	u6851
  1754   001D64  EFB6  F00E         	goto	u6850
  1755   001D68                     u6851:
  1756   001D68  EF4F  F00E         	goto	l7108
  1757   001D6C                     u6850:
  1758   001D6C                     
  1759                           ;main.c: 135:         T0CON0bits.T0EN=0;
  1760   001D6C  9ED5               	bcf	213,7,c	;volatile
  1761   001D6E                     
  1762                           ;main.c: 136:         stop(&motorL,&motorR);
  1763   001D6E  0EE6               	movlw	low _motorL
  1764   001D70  6E14               	movwf	stop@mL^0,c
  1765   001D72  0EDD               	movlw	low _motorR
  1766   001D74  6E15               	movwf	stop@mR^0,c
  1767   001D76  ECE9  F01E         	call	_stop	;wreg free
  1768   001D7A                     
  1769                           ;main.c: 139:         path_step = get16bitTMR0val(path_step);
  1770   001D7A  C056  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1771   001D7E  C057  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1772   001D82  ECC0  F021         	call	_get16bitTMR0val	;wreg free
  1773   001D86  C007  F056         	movff	?_get16bitTMR0val,main@path_step
  1774   001D8A  C008  F057         	movff	?_get16bitTMR0val+1,main@path_step+1
  1775   001D8E                     
  1776                           ;main.c: 141:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1777   001D8E  0E11               	movlw	17
  1778   001D90  6E4B               	movwf	(??_main+1)^0,c
  1779   001D92  0E3C               	movlw	60
  1780   001D94  6E4A               	movwf	??_main^0,c
  1781   001D96  0ECB               	movlw	203
  1782   001D98                     u6937:
  1783   001D98  2EE8               	decfsz	wreg,f,c
  1784   001D9A  D7FE               	bra	u6937
  1785   001D9C  2E4A               	decfsz	??_main^0,f,c
  1786   001D9E  D7FC               	bra	u6937
  1787   001DA0  2E4B               	decfsz	(??_main+1)^0,f,c
  1788   001DA2  D7FA               	bra	u6937
  1789   001DA4  0000               	nop	
  1790   001DA6                     
  1791                           ;main.c: 144:         fullSpeedAhead(&motorL,&motorR);
  1792   001DA6  0EE6               	movlw	low _motorL
  1793   001DA8  6E02               	movwf	fullSpeedAhead@mL^0,c
  1794   001DAA  0EDD               	movlw	low _motorR
  1795   001DAC  6E03               	movwf	fullSpeedAhead@mR^0,c
  1796   001DAE  EC6E  F024         	call	_fullSpeedAhead	;wreg free
  1797   001DB2                     
  1798                           ;main.c: 145:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1799   001DB2  0E19               	movlw	25
  1800   001DB4  6E4B               	movwf	(??_main+1)^0,c
  1801   001DB6  0E5A               	movlw	90
  1802   001DB8  6E4A               	movwf	??_main^0,c
  1803   001DBA  0EB2               	movlw	178
  1804   001DBC                     u6947:
  1805   001DBC  2EE8               	decfsz	wreg,f,c
  1806   001DBE  D7FE               	bra	u6947
  1807   001DC0  2E4A               	decfsz	??_main^0,f,c
  1808   001DC2  D7FC               	bra	u6947
  1809   001DC4  2E4B               	decfsz	(??_main+1)^0,f,c
  1810   001DC6  D7FA               	bra	u6947
  1811   001DC8                     
  1812                           ;main.c: 146:         stop(&motorL,&motorR);
  1813   001DC8  0EE6               	movlw	low _motorL
  1814   001DCA  6E14               	movwf	stop@mL^0,c
  1815   001DCC  0EDD               	movlw	low _motorR
  1816   001DCE  6E15               	movwf	stop@mR^0,c
  1817   001DD0  ECE9  F01E         	call	_stop	;wreg free
  1818   001DD4                     
  1819                           ;main.c: 147:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1820   001DD4  0E19               	movlw	25
  1821   001DD6  6E4B               	movwf	(??_main+1)^0,c
  1822   001DD8  0E5A               	movlw	90
  1823   001DDA  6E4A               	movwf	??_main^0,c
  1824   001DDC  0EB2               	movlw	178
  1825   001DDE                     u6957:
  1826   001DDE  2EE8               	decfsz	wreg,f,c
  1827   001DE0  D7FE               	bra	u6957
  1828   001DE2  2E4A               	decfsz	??_main^0,f,c
  1829   001DE4  D7FC               	bra	u6957
  1830   001DE6  2E4B               	decfsz	(??_main+1)^0,f,c
  1831   001DE8  D7FA               	bra	u6957
  1832   001DEA                     
  1833                           ;main.c: 149:         hue = reading_hue(&colorCurrent);
  1834   001DEA  0EC9               	movlw	low _colorCurrent
  1835   001DEC  6E42               	movwf	reading_hue@cCurr^0,c
  1836   001DEE  EC26  F01C         	call	_reading_hue	;wreg free
  1837   001DF2  C042  F04C         	movff	?_reading_hue,main@hue
  1838   001DF6  C043  F04D         	movff	?_reading_hue+1,main@hue+1
  1839   001DFA                     
  1840                           ;main.c: 151:         clear_current = colorCurrent.clear;
  1841   001DFA  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1842   001DFE  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1843   001E02  6A04               	clrf	(___xxtofl@val+2)^0,c
  1844   001E04  6A05               	clrf	(___xxtofl@val+3)^0,c
  1845   001E06  0E00               	movlw	0
  1846   001E08  ECEA  F015         	call	___xxtofl
  1847   001E0C  C002  F04E         	movff	?___xxtofl,main@clear_current
  1848   001E10  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1849   001E14  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1850   001E18  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1851   001E1C                     
  1852                           ;main.c: 152:         clear_max = colorCalibration.clear;
  1853   001E1C  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1854   001E20  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1855   001E24  6A04               	clrf	(___xxtofl@val+2)^0,c
  1856   001E26  6A05               	clrf	(___xxtofl@val+3)^0,c
  1857   001E28  0E00               	movlw	0
  1858   001E2A  ECEA  F015         	call	___xxtofl
  1859   001E2E  C002  F052         	movff	?___xxtofl,main@clear_max
  1860   001E32  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1861   001E36  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1862   001E3A  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1863   001E3E                     
  1864                           ;main.c: 153:         clear_norm = clear_current*100/clear_max;
  1865   001E3E  C052  F01F         	movff	main@clear_max,___fldiv@a
  1866   001E42  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1867   001E46  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1868   001E4A  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1869   001E4E  0E00               	movlw	0
  1870   001E50  6E06               	movwf	___flmul@a^0,c
  1871   001E52  0E00               	movlw	0
  1872   001E54  6E07               	movwf	(___flmul@a+1)^0,c
  1873   001E56  0EC8               	movlw	200
  1874   001E58  6E08               	movwf	(___flmul@a+2)^0,c
  1875   001E5A  0E42               	movlw	66
  1876   001E5C  6E09               	movwf	(___flmul@a+3)^0,c
  1877   001E5E  C04E  F002         	movff	main@clear_current,___flmul@b
  1878   001E62  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1879   001E66  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1880   001E6A  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1881   001E6E  ECBF  F00F         	call	___flmul	;wreg free
  1882   001E72  C002  F01B         	movff	?___flmul,___fldiv@b
  1883   001E76  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1884   001E7A  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1885   001E7E  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1886   001E82  ECD4  F011         	call	___fldiv	;wreg free
  1887   001E86  C01B  F034         	movff	?___fldiv,___fltol@f1
  1888   001E8A  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1889   001E8E  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1890   001E92  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1891   001E96  ECAB  F01A         	call	___fltol	;wreg free
  1892   001E9A  C034  F058         	movff	?___fltol,main@clear_norm
  1893   001E9E  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1894   001EA2                     
  1895                           ;main.c: 155:         if (clear_norm > 20){
  1896   001EA2  5059               	movf	(main@clear_norm+1)^0,w,c
  1897   001EA4  E109               	bnz	u6860
  1898   001EA6  0E15               	movlw	21
  1899   001EA8  5C58               	subwf	main@clear_norm^0,w,c
  1900   001EAA  A0D8               	btfss	status,0,c
  1901   001EAC  EF5A  F00F         	goto	u6861
  1902   001EB0  EF5C  F00F         	goto	u6860
  1903   001EB4                     u6861:
  1904   001EB4  EF74  F00F         	goto	l7146
  1905   001EB8                     u6860:
  1906   001EB8                     
  1907                           ;main.c: 156:             fullSpeedAhead(&motorL,&motorR);
  1908   001EB8  0EE6               	movlw	low _motorL
  1909   001EBA  6E02               	movwf	fullSpeedAhead@mL^0,c
  1910   001EBC  0EDD               	movlw	low _motorR
  1911   001EBE  6E03               	movwf	fullSpeedAhead@mR^0,c
  1912   001EC0  EC6E  F024         	call	_fullSpeedAhead	;wreg free
  1913   001EC4                     
  1914                           ;main.c: 157:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1915   001EC4  0E09               	movlw	9
  1916   001EC6  6E4B               	movwf	(??_main+1)^0,c
  1917   001EC8  0E1E               	movlw	30
  1918   001ECA  6E4A               	movwf	??_main^0,c
  1919   001ECC  0EE4               	movlw	228
  1920   001ECE                     u6967:
  1921   001ECE  2EE8               	decfsz	wreg,f,c
  1922   001ED0  D7FE               	bra	u6967
  1923   001ED2  2E4A               	decfsz	??_main^0,f,c
  1924   001ED4  D7FC               	bra	u6967
  1925   001ED6  2E4B               	decfsz	(??_main+1)^0,f,c
  1926   001ED8  D7FA               	bra	u6967
  1927   001EDA  D000               	nop2	
  1928   001EDC                     
  1929                           ;main.c: 158:             stop(&motorL,&motorR);
  1930   001EDC  0EE6               	movlw	low _motorL
  1931   001EDE  6E14               	movwf	stop@mL^0,c
  1932   001EE0  0EDD               	movlw	low _motorR
  1933   001EE2  6E15               	movwf	stop@mR^0,c
  1934   001EE4  ECE9  F01E         	call	_stop	;wreg free
  1935   001EE8                     l7146:
  1936                           
  1937                           ;main.c: 160:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  1938   001EE8  5059               	movf	(main@clear_norm+1)^0,w,c
  1939   001EEA  E109               	bnz	u6870
  1940   001EEC  0E3D               	movlw	61
  1941   001EEE  5C58               	subwf	main@clear_norm^0,w,c
  1942   001EF0  A0D8               	btfss	status,0,c
  1943   001EF2  EF7D  F00F         	goto	u6871
  1944   001EF6  EF7F  F00F         	goto	u6870
  1945   001EFA                     u6871:
  1946   001EFA  EF95  F00F         	goto	l329
  1947   001EFE                     u6870:
  1948   001EFE  0E2E               	movlw	46
  1949   001F00  5C4C               	subwf	main@hue^0,w,c
  1950   001F02  0E01               	movlw	1
  1951   001F04  584D               	subwfb	(main@hue+1)^0,w,c
  1952   001F06  A0D8               	btfss	status,0,c
  1953   001F08  EF88  F00F         	goto	u6881
  1954   001F0C  EF8A  F00F         	goto	u6880
  1955   001F10                     u6881:
  1956   001F10  EF9C  F00F         	goto	l7152
  1957   001F14                     u6880:
  1958   001F14  0E5B               	movlw	91
  1959   001F16  5C4C               	subwf	main@hue^0,w,c
  1960   001F18  0E01               	movlw	1
  1961   001F1A  584D               	subwfb	(main@hue+1)^0,w,c
  1962   001F1C  B0D8               	btfsc	status,0,c
  1963   001F1E  EF93  F00F         	goto	u6891
  1964   001F22  EF95  F00F         	goto	u6890
  1965   001F26                     u6891:
  1966   001F26  EF9C  F00F         	goto	l7152
  1967   001F2A                     u6890:
  1968   001F2A                     l329:
  1969   001F2A  A27F               	btfss	127,1,c	;volatile
  1970   001F2C  EF9A  F00F         	goto	u6901
  1971   001F30  EF9C  F00F         	goto	u6900
  1972   001F34                     u6901:
  1973   001F34  EFAD  F00F         	goto	l7160
  1974   001F38                     u6900:
  1975   001F38                     l7152:
  1976   001F38                     
  1977                           ;main.c: 163:             send2USART(white);
  1978   001F38  0E00               	movlw	0
  1979   001F3A  6E46               	movwf	(send2USART@hue+1)^0,c
  1980   001F3C  0E08               	movlw	8
  1981   001F3E  6E45               	movwf	send2USART@hue^0,c
  1982   001F40  EC31  F024         	call	_send2USART	;wreg free
  1983   001F44                     
  1984                           ;main.c: 164:             returnHome(&motorL, &motorR, path_step);
  1985   001F44  0EE6               	movlw	low _motorL
  1986   001F46  6E22               	movwf	returnHome@mL^0,c
  1987   001F48  0EDD               	movlw	low _motorR
  1988   001F4A  6E23               	movwf	returnHome@mR^0,c
  1989   001F4C  C056  F024         	movff	main@path_step,returnHome@path_step
  1990   001F50  C057  F025         	movff	main@path_step+1,returnHome@path_step+1
  1991   001F54  EC9D  F019         	call	_returnHome	;wreg free
  1992   001F58                     
  1993                           ;main.c: 165:             LATGbits.LATG1 = 0;
  1994   001F58  927F               	bcf	127,1,c	;volatile
  1995   001F5A                     l7160:
  1996                           
  1997                           ;main.c: 168:         path_step = decision(hue, path_step);
  1998   001F5A  C04C  F021         	movff	main@hue,decision@hue
  1999   001F5E  C04D  F022         	movff	main@hue+1,decision@hue+1
  2000   001F62  C056  F023         	movff	main@path_step,decision@path_step
  2001   001F66  C057  F024         	movff	main@path_step+1,decision@path_step+1
  2002   001F6A  ECA1  F013         	call	_decision	;wreg free
  2003   001F6E  C021  F056         	movff	?_decision,main@path_step
  2004   001F72  C022  F057         	movff	?_decision+1,main@path_step+1
  2005   001F76  EFE3  F00D         	goto	l7088
  2006   001F7A  EF1D  F000         	goto	start
  2007   001F7E                     __end_of_main:
  2008                           	callstack 0
  2009                           
  2010 ;; *************** function _returnHome *****************
  2011 ;; Defined at:
  2012 ;;		line 76 in file "return_func.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  mL              1   33[COMRAM] PTR struct DC_motor
  2015 ;;		 -> motorL(9), 
  2016 ;;  mR              1   34[COMRAM] PTR struct DC_motor
  2017 ;;		 -> motorR(9), 
  2018 ;;  path_step       2   35[COMRAM] unsigned int 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  time_ms         4   37[COMRAM] long 
  2021 ;;  action_turn     1   41[COMRAM] unsigned char 
  2022 ;;  i               2   42[COMRAM] unsigned int 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2033 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;Total ram usage:       11 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 6
  2039 ;; This function calls:
  2040 ;;		___aldiv
  2041 ;;		___lmul
  2042 ;;		_moveWhite
  2043 ;;		_reverseStraight
  2044 ;;		_reverseTurn
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text1
  2051   00333A                     __ptext1:
  2052                           	callstack 0
  2053   00333A                     _returnHome:
  2054                           	callstack 24
  2055   00333A                     
  2056                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  2057   00333A  907F               	bcf	127,0,c	;volatile
  2058                           
  2059                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  2060   00333C  9E7D               	bcf	125,7,c	;volatile
  2061                           
  2062                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  2063   00333E  9679               	bcf	121,3,c	;volatile
  2064   003340                     
  2065                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  2066   003340  0EE6               	movlw	low _motorL
  2067   003342  6E1D               	movwf	moveWhite@mL^0,c
  2068   003344  0EDD               	movlw	low _motorR
  2069   003346  6E1E               	movwf	moveWhite@mR^0,c
  2070   003348  EC49  F022         	call	_moveWhite	;wreg free
  2071   00334C                     
  2072                           ;return_func.c: 85:     if (path_step > 0) {
  2073   00334C  5024               	movf	returnHome@path_step^0,w,c
  2074   00334E  1025               	iorwf	(returnHome@path_step+1)^0,w,c
  2075   003350  B4D8               	btfsc	status,2,c
  2076   003352  EFAD  F019         	goto	u6821
  2077   003356  EFAF  F019         	goto	u6820
  2078   00335A                     u6821:
  2079   00335A  EF23  F01A         	goto	l721
  2080   00335E                     u6820:
  2081   00335E                     
  2082                           ;return_func.c: 86:         for (unsigned int i = path_step - 1; ; i--) {
  2083   00335E  0EFF               	movlw	255
  2084   003360  2424               	addwf	returnHome@path_step^0,w,c
  2085   003362  6E2B               	movwf	returnHome@i^0,c
  2086   003364  0EFF               	movlw	255
  2087   003366  2025               	addwfc	(returnHome@path_step+1)^0,w,c
  2088   003368  6E2C               	movwf	(returnHome@i+1)^0,c
  2089   00336A                     l7000:
  2090                           
  2091                           ;return_func.c: 88:             long time_ms = time[i]*65535*4*8192/64000000;
  2092   00336A  90D8               	bcf	status,0,c
  2093   00336C  342B               	rlcf	returnHome@i^0,w,c
  2094   00336E  6ED9               	movwf	fsr2l,c
  2095   003370  342C               	rlcf	(returnHome@i+1)^0,w,c
  2096   003372  6EDA               	movwf	fsr2h,c
  2097   003374  0E00               	movlw	low _time
  2098   003376  26D9               	addwf	fsr2l,f,c
  2099   003378  0E02               	movlw	high _time
  2100   00337A  22DA               	addwfc	fsr2h,f,c
  2101   00337C  CFDE F002          	movff	postinc2,___lmul@multiplier
  2102   003380  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2103   003384  0E00               	movlw	0
  2104   003386  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2105   003388  0EFF               	movlw	-1
  2106   00338A  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2107   00338C  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2108   00338E  0E00               	movlw	0
  2109   003390  6E06               	movwf	___lmul@multiplicand^0,c
  2110   003392  0E80               	movlw	128
  2111   003394  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2112   003396  0EFF               	movlw	255
  2113   003398  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2114   00339A  0E7F               	movlw	127
  2115   00339C  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2116   00339E  EC23  F020         	call	___lmul	;wreg free
  2117   0033A2  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2118   0033A6  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2119   0033AA  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2120   0033AE  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2121   0033B2  0E00               	movlw	0
  2122   0033B4  6E12               	movwf	___aldiv@divisor^0,c
  2123   0033B6  0E90               	movlw	144
  2124   0033B8  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2125   0033BA  0ED0               	movlw	208
  2126   0033BC  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2127   0033BE  0E03               	movlw	3
  2128   0033C0  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2129   0033C2  EC25  F01A         	call	___aldiv	;wreg free
  2130   0033C6  C00E  F026         	movff	?___aldiv,returnHome@time_ms
  2131   0033CA  C00F  F027         	movff	?___aldiv+1,returnHome@time_ms+1
  2132   0033CE  C010  F028         	movff	?___aldiv+2,returnHome@time_ms+2
  2133   0033D2  C011  F029         	movff	?___aldiv+3,returnHome@time_ms+3
  2134   0033D6                     
  2135                           ;return_func.c: 89:             char action_turn = action[i];
  2136   0033D6  0E3C               	movlw	low _action
  2137   0033D8  242B               	addwf	returnHome@i^0,w,c
  2138   0033DA  6ED9               	movwf	fsr2l,c
  2139   0033DC  0E01               	movlw	high _action
  2140   0033DE  202C               	addwfc	(returnHome@i+1)^0,w,c
  2141   0033E0  6EDA               	movwf	fsr2h,c
  2142   0033E2  50DF               	movf	indf2,w,c
  2143   0033E4  6E2A               	movwf	returnHome@action_turn^0,c
  2144   0033E6                     
  2145                           ;return_func.c: 91:             if (action_turn == 0) {
  2146   0033E6  502A               	movf	returnHome@action_turn^0,w,c
  2147   0033E8  A4D8               	btfss	status,2,c
  2148   0033EA  EFF9  F019         	goto	u6831
  2149   0033EE  EFFB  F019         	goto	u6830
  2150   0033F2                     u6831:
  2151   0033F2  EF0B  F01A         	goto	l7008
  2152   0033F6                     u6830:
  2153   0033F6                     
  2154                           ;return_func.c: 92:                 reverseStraight(mL, mR, time_ms);
  2155   0033F6  C022  F017         	movff	returnHome@mL,reverseStraight@mL
  2156   0033FA  C023  F018         	movff	returnHome@mR,reverseStraight@mR
  2157   0033FE  C026  F019         	movff	returnHome@time_ms,reverseStraight@time_ms
  2158   003402  C027  F01A         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2159   003406  C028  F01B         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2160   00340A  C029  F01C         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2161   00340E  ECB0  F01B         	call	_reverseStraight	;wreg free
  2162                           
  2163                           ;return_func.c: 93:             } else {
  2164   003412  EF13  F01A         	goto	l7010
  2165   003416                     l7008:
  2166                           
  2167                           ;return_func.c: 94:                 reverseTurn(mL, mR, action_turn);
  2168   003416  C022  F01D         	movff	returnHome@mL,reverseTurn@mL
  2169   00341A  C023  F01E         	movff	returnHome@mR,reverseTurn@mR
  2170   00341E  C02A  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2171   003422  EC44  F018         	call	_reverseTurn	;wreg free
  2172   003426                     l7010:
  2173                           
  2174                           ;return_func.c: 97:             if (i == 0) break;
  2175   003426  502B               	movf	returnHome@i^0,w,c
  2176   003428  102C               	iorwf	(returnHome@i+1)^0,w,c
  2177   00342A  A4D8               	btfss	status,2,c
  2178   00342C  EF1A  F01A         	goto	u6841
  2179   003430  EF1C  F01A         	goto	u6840
  2180   003434                     u6841:
  2181   003434  EF1E  F01A         	goto	l7014
  2182   003438                     u6840:
  2183   003438  EF23  F01A         	goto	l721
  2184   00343C                     l7014:
  2185                           
  2186                           ;return_func.c: 98:         }
  2187   00343C  062B               	decf	returnHome@i^0,f,c
  2188   00343E  A0D8               	btfss	status,0,c
  2189   003440  062C               	decf	(returnHome@i+1)^0,f,c
  2190   003442  EFB5  F019         	goto	l7000
  2191   003446                     l721:
  2192   003446  0003               	sleep		;# 
  2193   003448  0012               	return		;funcret
  2194   00344A                     __end_of_returnHome:
  2195                           	callstack 0
  2196                           
  2197 ;; *************** function _reverseTurn *****************
  2198 ;; Defined at:
  2199 ;;		line 23 in file "return_func.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2202 ;;		 -> motorL(9), 
  2203 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2204 ;;		 -> motorR(9), 
  2205 ;;  actionStep      1   30[COMRAM] unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2217 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;Total ram usage:        5 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; Hardware stack levels required when called: 5
  2224 ;; This function calls:
  2225 ;;		_backHalf
  2226 ;;		_left135
  2227 ;;		_left90
  2228 ;;		_right135
  2229 ;;		_right90
  2230 ;;		_turn180
  2231 ;; This function is called by:
  2232 ;;		_returnHome
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text2
  2237   003088                     __ptext2:
  2238                           	callstack 0
  2239   003088                     _reverseTurn:
  2240                           	callstack 24
  2241   003088                     
  2242                           ;return_func.c: 24:     if (actionStep == 1) {
  2243   003088  041F               	decf	reverseTurn@actionStep^0,w,c
  2244   00308A  A4D8               	btfss	status,2,c
  2245   00308C  EF4A  F018         	goto	u6451
  2246   003090  EF4C  F018         	goto	u6450
  2247   003094                     u6451:
  2248   003094  EF66  F018         	goto	l6620
  2249   003098                     u6450:
  2250   003098                     
  2251                           ;return_func.c: 25:         backHalf(mL,mR);
  2252   003098  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2253   00309C  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2254   0030A0  ECBE  F023         	call	_backHalf	;wreg free
  2255   0030A4                     
  2256                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2257   0030A4  0E29               	movlw	41
  2258   0030A6  6E21               	movwf	(??_reverseTurn+1)^0,c
  2259   0030A8  0E96               	movlw	150
  2260   0030AA  6E20               	movwf	??_reverseTurn^0,c
  2261   0030AC  0E7F               	movlw	127
  2262   0030AE                     u6977:
  2263   0030AE  2EE8               	decfsz	wreg,f,c
  2264   0030B0  D7FE               	bra	u6977
  2265   0030B2  2E20               	decfsz	??_reverseTurn^0,f,c
  2266   0030B4  D7FC               	bra	u6977
  2267   0030B6  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2268   0030B8  D7FA               	bra	u6977
  2269   0030BA  0000               	nop	
  2270   0030BC                     
  2271                           ;return_func.c: 27:         left90(mL,mR);
  2272   0030BC  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2273   0030C0  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2274   0030C4  ECA6  F023         	call	_left90	;wreg free
  2275                           
  2276                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2277   0030C8  EFF2  F018         	goto	l704
  2278   0030CC                     l6620:
  2279   0030CC  0E02               	movlw	2
  2280   0030CE  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2281   0030D0  A4D8               	btfss	status,2,c
  2282   0030D2  EF6D  F018         	goto	u6461
  2283   0030D6  EF6F  F018         	goto	u6460
  2284   0030DA                     u6461:
  2285   0030DA  EF89  F018         	goto	l6628
  2286   0030DE                     u6460:
  2287   0030DE                     
  2288                           ;return_func.c: 30:         backHalf(mL,mR);
  2289   0030DE  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2290   0030E2  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2291   0030E6  ECBE  F023         	call	_backHalf	;wreg free
  2292   0030EA                     
  2293                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2294   0030EA  0E29               	movlw	41
  2295   0030EC  6E21               	movwf	(??_reverseTurn+1)^0,c
  2296   0030EE  0E96               	movlw	150
  2297   0030F0  6E20               	movwf	??_reverseTurn^0,c
  2298   0030F2  0E7F               	movlw	127
  2299   0030F4                     u6987:
  2300   0030F4  2EE8               	decfsz	wreg,f,c
  2301   0030F6  D7FE               	bra	u6987
  2302   0030F8  2E20               	decfsz	??_reverseTurn^0,f,c
  2303   0030FA  D7FC               	bra	u6987
  2304   0030FC  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2305   0030FE  D7FA               	bra	u6987
  2306   003100  0000               	nop	
  2307   003102                     
  2308                           ;return_func.c: 32:         right90(mL,mR);
  2309   003102  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2310   003106  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2311   00310A  EC8E  F023         	call	_right90	;wreg free
  2312                           
  2313                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2314   00310E  EFF2  F018         	goto	l704
  2315   003112                     l6628:
  2316   003112  0E03               	movlw	3
  2317   003114  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2318   003116  A4D8               	btfss	status,2,c
  2319   003118  EF90  F018         	goto	u6471
  2320   00311C  EF92  F018         	goto	u6470
  2321   003120                     u6471:
  2322   003120  EFAC  F018         	goto	l6636
  2323   003124                     u6470:
  2324   003124                     
  2325                           ;return_func.c: 35:          backHalf(mL,mR);
  2326   003124  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2327   003128  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2328   00312C  ECBE  F023         	call	_backHalf	;wreg free
  2329   003130                     
  2330                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2331   003130  0E29               	movlw	41
  2332   003132  6E21               	movwf	(??_reverseTurn+1)^0,c
  2333   003134  0E96               	movlw	150
  2334   003136  6E20               	movwf	??_reverseTurn^0,c
  2335   003138  0E7F               	movlw	127
  2336   00313A                     u6997:
  2337   00313A  2EE8               	decfsz	wreg,f,c
  2338   00313C  D7FE               	bra	u6997
  2339   00313E  2E20               	decfsz	??_reverseTurn^0,f,c
  2340   003140  D7FC               	bra	u6997
  2341   003142  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2342   003144  D7FA               	bra	u6997
  2343   003146  0000               	nop	
  2344   003148                     
  2345                           ;return_func.c: 37:         turn180(mL,mR);
  2346   003148  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2347   00314C  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2348   003150  EC5C  F023         	call	_turn180	;wreg free
  2349                           
  2350                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2351   003154  EFF2  F018         	goto	l704
  2352   003158                     l6636:
  2353   003158  0E04               	movlw	4
  2354   00315A  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2355   00315C  A4D8               	btfss	status,2,c
  2356   00315E  EFB3  F018         	goto	u6481
  2357   003162  EFB5  F018         	goto	u6480
  2358   003166                     u6481:
  2359   003166  EFCF  F018         	goto	l6644
  2360   00316A                     u6480:
  2361   00316A                     
  2362                           ;return_func.c: 40:         backHalf(mL,mR);
  2363   00316A  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2364   00316E  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2365   003172  ECBE  F023         	call	_backHalf	;wreg free
  2366   003176                     
  2367                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2368   003176  0E29               	movlw	41
  2369   003178  6E21               	movwf	(??_reverseTurn+1)^0,c
  2370   00317A  0E96               	movlw	150
  2371   00317C  6E20               	movwf	??_reverseTurn^0,c
  2372   00317E  0E7F               	movlw	127
  2373   003180                     u7007:
  2374   003180  2EE8               	decfsz	wreg,f,c
  2375   003182  D7FE               	bra	u7007
  2376   003184  2E20               	decfsz	??_reverseTurn^0,f,c
  2377   003186  D7FC               	bra	u7007
  2378   003188  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2379   00318A  D7FA               	bra	u7007
  2380   00318C  0000               	nop	
  2381   00318E                     
  2382                           ;return_func.c: 42:         left135(mL,mR);
  2383   00318E  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2384   003192  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2385   003196  EC11  F023         	call	_left135	;wreg free
  2386                           
  2387                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2388   00319A  EFF2  F018         	goto	l704
  2389   00319E                     l6644:
  2390   00319E  0E05               	movlw	5
  2391   0031A0  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2392   0031A2  A4D8               	btfss	status,2,c
  2393   0031A4  EFD6  F018         	goto	u6491
  2394   0031A8  EFD8  F018         	goto	u6490
  2395   0031AC                     u6491:
  2396   0031AC  EFF2  F018         	goto	l698
  2397   0031B0                     u6490:
  2398   0031B0                     
  2399                           ;return_func.c: 44:         backHalf(mL,mR);
  2400   0031B0  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2401   0031B4  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2402   0031B8  ECBE  F023         	call	_backHalf	;wreg free
  2403   0031BC                     
  2404                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2405   0031BC  0E29               	movlw	41
  2406   0031BE  6E21               	movwf	(??_reverseTurn+1)^0,c
  2407   0031C0  0E96               	movlw	150
  2408   0031C2  6E20               	movwf	??_reverseTurn^0,c
  2409   0031C4  0E7F               	movlw	127
  2410   0031C6                     u7017:
  2411   0031C6  2EE8               	decfsz	wreg,f,c
  2412   0031C8  D7FE               	bra	u7017
  2413   0031CA  2E20               	decfsz	??_reverseTurn^0,f,c
  2414   0031CC  D7FC               	bra	u7017
  2415   0031CE  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2416   0031D0  D7FA               	bra	u7017
  2417   0031D2  0000               	nop	
  2418   0031D4                     
  2419                           ;return_func.c: 46:         right135(mL,mR);
  2420   0031D4  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2421   0031D8  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2422   0031DC  ECDF  F022         	call	_right135	;wreg free
  2423   0031E0  EFF2  F018         	goto	l704
  2424   0031E4                     l698:
  2425   0031E4                     l704:
  2426   0031E4  0012               	return		;funcret
  2427   0031E6                     __end_of_reverseTurn:
  2428                           	callstack 0
  2429                           
  2430 ;; *************** function _reverseStraight *****************
  2431 ;; Defined at:
  2432 ;;		line 59 in file "return_func.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2435 ;;		 -> motorL(9), 
  2436 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2437 ;;		 -> motorR(9), 
  2438 ;;  time_ms         4   24[COMRAM] long 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  delayMs         2   30[COMRAM] unsigned int 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2450 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;Total ram usage:       10 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 4
  2457 ;; This function calls:
  2458 ;;		_customDelayMs
  2459 ;;		_fullSpeedAhead
  2460 ;;		_stop
  2461 ;; This function is called by:
  2462 ;;		_returnHome
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text3
  2467   003760                     __ptext3:
  2468                           	callstack 0
  2469   003760                     _reverseStraight:
  2470                           	callstack 25
  2471   003760                     
  2472                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2473   003760  0E03               	movlw	3
  2474   003762  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2475   003764  0EE8               	movlw	232
  2476   003766  6E1F               	movwf	reverseStraight@delayMs^0,c
  2477   003768                     
  2478                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2479   003768  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2480   00376A  EFC3  F01B         	goto	u6501
  2481   00376E  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2482   003770  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2483   003772  E10B               	bnz	u6500
  2484   003774  0E7D               	movlw	125
  2485   003776  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2486   003778  0E15               	movlw	21
  2487   00377A  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2488   00377C  A0D8               	btfss	status,0,c
  2489   00377E  EFC3  F01B         	goto	u6501
  2490   003782  EFC5  F01B         	goto	u6500
  2491   003786                     u6501:
  2492   003786  EFCB  F01B         	goto	l6658
  2493   00378A                     u6500:
  2494   00378A  0E0B               	movlw	11
  2495   00378C  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2496   00378E  0EB8               	movlw	184
  2497   003790  6E1F               	movwf	reverseStraight@delayMs^0,c
  2498   003792  EF08  F01C         	goto	l6668
  2499   003796                     l6658:
  2500   003796  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2501   003798  EFDA  F01B         	goto	u6511
  2502   00379C  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2503   00379E  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2504   0037A0  E10B               	bnz	u6510
  2505   0037A2  0EB9               	movlw	185
  2506   0037A4  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2507   0037A6  0E0B               	movlw	11
  2508   0037A8  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2509   0037AA  A0D8               	btfss	status,0,c
  2510   0037AC  EFDA  F01B         	goto	u6511
  2511   0037B0  EFDC  F01B         	goto	u6510
  2512   0037B4                     u6511:
  2513   0037B4  EFF3  F01B         	goto	l6664
  2514   0037B8                     u6510:
  2515   0037B8  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2516   0037BA  EFEB  F01B         	goto	u6521
  2517   0037BE  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2518   0037C0  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2519   0037C2  E10B               	bnz	u6520
  2520   0037C4  0E05               	movlw	5
  2521   0037C6  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2522   0037C8  0E10               	movlw	16
  2523   0037CA  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2524   0037CC  A0D8               	btfss	status,0,c
  2525   0037CE  EFEB  F01B         	goto	u6521
  2526   0037D2  EFED  F01B         	goto	u6520
  2527   0037D6                     u6521:
  2528   0037D6  EFF3  F01B         	goto	l6664
  2529   0037DA                     u6520:
  2530   0037DA  0E07               	movlw	7
  2531   0037DC  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2532   0037DE  0ED0               	movlw	208
  2533   0037E0  6E1F               	movwf	reverseStraight@delayMs^0,c
  2534   0037E2  EF08  F01C         	goto	l6668
  2535   0037E6                     l6664:
  2536   0037E6  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2537   0037E8  EF04  F01C         	goto	u6530
  2538   0037EC  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2539   0037EE  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2540   0037F0  E109               	bnz	u6531
  2541   0037F2  0EB8               	movlw	184
  2542   0037F4  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2543   0037F6  0E0B               	movlw	11
  2544   0037F8  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2545   0037FA  B0D8               	btfsc	status,0,c
  2546   0037FC  EF02  F01C         	goto	u6531
  2547   003800  EF04  F01C         	goto	u6530
  2548   003804                     u6531:
  2549   003804  EF08  F01C         	goto	l6668
  2550   003808                     u6530:
  2551   003808  0E03               	movlw	3
  2552   00380A  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2553   00380C  0EE8               	movlw	232
  2554   00380E  6E1F               	movwf	reverseStraight@delayMs^0,c
  2555   003810                     l6668:
  2556                           
  2557                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2558   003810  0EE6               	movlw	low _motorL
  2559   003812  6E02               	movwf	fullSpeedAhead@mL^0,c
  2560   003814  0EDD               	movlw	low _motorR
  2561   003816  6E03               	movwf	fullSpeedAhead@mR^0,c
  2562   003818  EC6E  F024         	call	_fullSpeedAhead	;wreg free
  2563   00381C                     
  2564                           ;return_func.c: 70:     customDelayMs(delayMs);
  2565   00381C  C01F  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2566   003820  C020  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2567   003824  ECDF  F021         	call	_customDelayMs	;wreg free
  2568   003828                     
  2569                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2570   003828  0EE6               	movlw	low _motorL
  2571   00382A  6E14               	movwf	stop@mL^0,c
  2572   00382C  0EDD               	movlw	low _motorR
  2573   00382E  6E15               	movwf	stop@mR^0,c
  2574   003830  ECE9  F01E         	call	_stop	;wreg free
  2575   003834                     
  2576                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2577   003834  0E19               	movlw	25
  2578   003836  6E1E               	movwf	(??_reverseStraight+1)^0,c
  2579   003838  0E5A               	movlw	90
  2580   00383A  6E1D               	movwf	??_reverseStraight^0,c
  2581   00383C  0EB2               	movlw	178
  2582   00383E                     u7027:
  2583   00383E  2EE8               	decfsz	wreg,f,c
  2584   003840  D7FE               	bra	u7027
  2585   003842  2E1D               	decfsz	??_reverseStraight^0,f,c
  2586   003844  D7FC               	bra	u7027
  2587   003846  2E1E               	decfsz	(??_reverseStraight+1)^0,f,c
  2588   003848  D7FA               	bra	u7027
  2589   00384A  0012               	return		;funcret
  2590   00384C                     __end_of_reverseStraight:
  2591                           	callstack 0
  2592                           
  2593 ;; *************** function _fullSpeedAhead *****************
  2594 ;; Defined at:
  2595 ;;		line 144 in file "dc_motor.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  mL              1    1[COMRAM] PTR struct DC_motor
  2598 ;;		 -> motorL(9), 
  2599 ;;  mR              1    2[COMRAM] PTR struct DC_motor
  2600 ;;		 -> motorR(9), 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		None
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2616 ;;Total ram usage:        2 bytes
  2617 ;; Hardware stack levels used: 1
  2618 ;; Hardware stack levels required when called: 1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;;		_reverseStraight
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text4
  2628   0048DC                     __ptext4:
  2629                           	callstack 0
  2630   0048DC                     _fullSpeedAhead:
  2631                           	callstack 27
  2632   0048DC  0012               	return		;funcret
  2633   0048DE                     __end_of_fullSpeedAhead:
  2634                           	callstack 0
  2635                           
  2636 ;; *************** function _customDelayMs *****************
  2637 ;; Defined at:
  2638 ;;		line 52 in file "return_func.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  i               2    4[COMRAM] unsigned int 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;Total ram usage:        5 bytes
  2657 ;; Hardware stack levels used: 1
  2658 ;; Hardware stack levels required when called: 1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_reverseStraight
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text5
  2667   0043BE                     __ptext5:
  2668                           	callstack 0
  2669   0043BE                     _customDelayMs:
  2670                           	callstack 27
  2671   0043BE                     
  2672                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2673   0043BE  0E00               	movlw	0
  2674   0043C0  6E06               	movwf	(customDelayMs@i+1)^0,c
  2675   0043C2  0E00               	movlw	0
  2676   0043C4  6E05               	movwf	customDelayMs@i^0,c
  2677   0043C6  EFEF  F021         	goto	l707
  2678   0043CA                     l6042:
  2679                           
  2680                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2681   0043CA  0E15               	movlw	21
  2682   0043CC  6E04               	movwf	??_customDelayMs^0,c
  2683   0043CE  0EC6               	movlw	198
  2684   0043D0                     u7037:
  2685   0043D0  2EE8               	decfsz	wreg,f,c
  2686   0043D2  D7FE               	bra	u7037
  2687   0043D4  2E04               	decfsz	??_customDelayMs^0,f,c
  2688   0043D6  D7FC               	bra	u7037
  2689   0043D8  D000               	nop2	
  2690   0043DA                     
  2691                           ;return_func.c: 55:     }
  2692   0043DA  4A05               	infsnz	customDelayMs@i^0,f,c
  2693   0043DC  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2694   0043DE                     l707:
  2695   0043DE  5002               	movf	customDelayMs@milliseconds^0,w,c
  2696   0043E0  5C05               	subwf	customDelayMs@i^0,w,c
  2697   0043E2  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2698   0043E4  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2699   0043E6  A0D8               	btfss	status,0,c
  2700   0043E8  EFF8  F021         	goto	u5651
  2701   0043EC  EFFA  F021         	goto	u5650
  2702   0043F0                     u5651:
  2703   0043F0  EFE5  F021         	goto	l6042
  2704   0043F4                     u5650:
  2705   0043F4  0012               	return		;funcret
  2706   0043F6                     __end_of_customDelayMs:
  2707                           	callstack 0
  2708                           
  2709 ;; *************** function _moveWhite *****************
  2710 ;; Defined at:
  2711 ;;		line 321 in file "dc_motor.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2714 ;;		 -> motorL(9), 
  2715 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2716 ;;		 -> motorR(9), 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2728 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2731 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;Total ram usage:        4 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; Hardware stack levels required when called: 5
  2735 ;; This function calls:
  2736 ;;		_backHalf
  2737 ;;		_turn180
  2738 ;; This function is called by:
  2739 ;;		_returnHome
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text6
  2744   004492                     __ptext6:
  2745                           	callstack 0
  2746   004492                     _moveWhite:
  2747                           	callstack 24
  2748   004492                     
  2749                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2750   004492  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2751   004496  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2752   00449A  ECBE  F023         	call	_backHalf	;wreg free
  2753   00449E                     
  2754                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2755   00449E  0E29               	movlw	41
  2756   0044A0  6E20               	movwf	(??_moveWhite+1)^0,c
  2757   0044A2  0E96               	movlw	150
  2758   0044A4  6E1F               	movwf	??_moveWhite^0,c
  2759   0044A6  0E7F               	movlw	127
  2760   0044A8                     u7047:
  2761   0044A8  2EE8               	decfsz	wreg,f,c
  2762   0044AA  D7FE               	bra	u7047
  2763   0044AC  2E1F               	decfsz	??_moveWhite^0,f,c
  2764   0044AE  D7FC               	bra	u7047
  2765   0044B0  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2766   0044B2  D7FA               	bra	u7047
  2767   0044B4  0000               	nop	
  2768   0044B6                     
  2769                           ;dc_motor.c: 326:     turn180(mL,mR);
  2770   0044B6  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2771   0044BA  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2772   0044BE  EC5C  F023         	call	_turn180	;wreg free
  2773   0044C2  0012               	return		;funcret
  2774   0044C4                     __end_of_moveWhite:
  2775                           	callstack 0
  2776                           
  2777 ;; *************** function ___lmul *****************
  2778 ;; Defined at:
  2779 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  multiplier      4    1[COMRAM] unsigned long 
  2782 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  product         4    9[COMRAM] unsigned long 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  4    1[COMRAM] unsigned long 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2794 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2795 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;Total ram usage:       12 bytes
  2799 ;; Hardware stack levels used: 1
  2800 ;; Hardware stack levels required when called: 1
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_returnHome
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text7
  2809   004046                     __ptext7:
  2810                           	callstack 0
  2811   004046                     ___lmul:
  2812                           	callstack 28
  2813   004046  0E00               	movlw	0
  2814   004048  6E0A               	movwf	___lmul@product^0,c
  2815   00404A  0E00               	movlw	0
  2816   00404C  6E0B               	movwf	(___lmul@product+1)^0,c
  2817   00404E  0E00               	movlw	0
  2818   004050  6E0C               	movwf	(___lmul@product+2)^0,c
  2819   004052  0E00               	movlw	0
  2820   004054  6E0D               	movwf	(___lmul@product+3)^0,c
  2821   004056                     l6678:
  2822   004056  A002               	btfss	___lmul@multiplier^0,0,c
  2823   004058  EF30  F020         	goto	u6541
  2824   00405C  EF32  F020         	goto	u6540
  2825   004060                     u6541:
  2826   004060  EF3A  F020         	goto	l6682
  2827   004064                     u6540:
  2828   004064  5006               	movf	___lmul@multiplicand^0,w,c
  2829   004066  260A               	addwf	___lmul@product^0,f,c
  2830   004068  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  2831   00406A  220B               	addwfc	(___lmul@product+1)^0,f,c
  2832   00406C  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  2833   00406E  220C               	addwfc	(___lmul@product+2)^0,f,c
  2834   004070  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  2835   004072  220D               	addwfc	(___lmul@product+3)^0,f,c
  2836   004074                     l6682:
  2837   004074  90D8               	bcf	status,0,c
  2838   004076  3606               	rlcf	___lmul@multiplicand^0,f,c
  2839   004078  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2840   00407A  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2841   00407C  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2842   00407E  90D8               	bcf	status,0,c
  2843   004080  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  2844   004082  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  2845   004084  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  2846   004086  3202               	rrcf	___lmul@multiplier^0,f,c
  2847   004088  5002               	movf	___lmul@multiplier^0,w,c
  2848   00408A  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  2849   00408C  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  2850   00408E  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  2851   004090  A4D8               	btfss	status,2,c
  2852   004092  EF4D  F020         	goto	u6551
  2853   004096  EF4F  F020         	goto	u6550
  2854   00409A                     u6551:
  2855   00409A  EF2B  F020         	goto	l6678
  2856   00409E                     u6550:
  2857   00409E  C00A  F002         	movff	___lmul@product,?___lmul
  2858   0040A2  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  2859   0040A6  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  2860   0040AA  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  2861   0040AE  0012               	return		;funcret
  2862   0040B0                     __end_of___lmul:
  2863                           	callstack 0
  2864                           
  2865 ;; *************** function ___aldiv *****************
  2866 ;; Defined at:
  2867 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  dividend        4   13[COMRAM] long 
  2870 ;;  divisor         4   17[COMRAM] long 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  quotient        4   23[COMRAM] long 
  2873 ;;  sign            1   22[COMRAM] unsigned char 
  2874 ;;  counter         1   21[COMRAM] unsigned char 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  4   13[COMRAM] long 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2, status,0
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2884 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2885 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;Total ram usage:       14 bytes
  2889 ;; Hardware stack levels used: 1
  2890 ;; Hardware stack levels required when called: 1
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_returnHome
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text8
  2899   00344A                     __ptext8:
  2900                           	callstack 0
  2901   00344A                     ___aldiv:
  2902                           	callstack 28
  2903   00344A  0E00               	movlw	0
  2904   00344C  6E17               	movwf	___aldiv@sign^0,c
  2905   00344E  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  2906   003450  EF2E  F01A         	goto	u6560
  2907   003454  EF2C  F01A         	goto	u6561
  2908   003458                     u6561:
  2909   003458  EF38  F01A         	goto	l6694
  2910   00345C                     u6560:
  2911   00345C  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  2912   00345E  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  2913   003460  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  2914   003462  6C12               	negf	___aldiv@divisor^0,c
  2915   003464  0E00               	movlw	0
  2916   003466  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  2917   003468  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  2918   00346A  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  2919   00346C  0E01               	movlw	1
  2920   00346E  6E17               	movwf	___aldiv@sign^0,c
  2921   003470                     l6694:
  2922   003470  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  2923   003472  EF3F  F01A         	goto	u6570
  2924   003476  EF3D  F01A         	goto	u6571
  2925   00347A                     u6571:
  2926   00347A  EF49  F01A         	goto	l6700
  2927   00347E                     u6570:
  2928   00347E  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  2929   003480  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  2930   003482  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  2931   003484  6C0E               	negf	___aldiv@dividend^0,c
  2932   003486  0E00               	movlw	0
  2933   003488  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  2934   00348A  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  2935   00348C  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  2936   00348E  0E01               	movlw	1
  2937   003490  1A17               	xorwf	___aldiv@sign^0,f,c
  2938   003492                     l6700:
  2939   003492  0E00               	movlw	0
  2940   003494  6E18               	movwf	___aldiv@quotient^0,c
  2941   003496  0E00               	movlw	0
  2942   003498  6E19               	movwf	(___aldiv@quotient+1)^0,c
  2943   00349A  0E00               	movlw	0
  2944   00349C  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  2945   00349E  0E00               	movlw	0
  2946   0034A0  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  2947   0034A2  5012               	movf	___aldiv@divisor^0,w,c
  2948   0034A4  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  2949   0034A6  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  2950   0034A8  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  2951   0034AA  B4D8               	btfsc	status,2,c
  2952   0034AC  EF5A  F01A         	goto	u6581
  2953   0034B0  EF5C  F01A         	goto	u6580
  2954   0034B4                     u6581:
  2955   0034B4  EF92  F01A         	goto	l6722
  2956   0034B8                     u6580:
  2957   0034B8  0E01               	movlw	1
  2958   0034BA  6E16               	movwf	___aldiv@counter^0,c
  2959   0034BC  EF66  F01A         	goto	l6708
  2960   0034C0                     l6706:
  2961   0034C0  90D8               	bcf	status,0,c
  2962   0034C2  3612               	rlcf	___aldiv@divisor^0,f,c
  2963   0034C4  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  2964   0034C6  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  2965   0034C8  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  2966   0034CA  2A16               	incf	___aldiv@counter^0,f,c
  2967   0034CC                     l6708:
  2968   0034CC  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  2969   0034CE  EF6B  F01A         	goto	u6591
  2970   0034D2  EF6D  F01A         	goto	u6590
  2971   0034D6                     u6591:
  2972   0034D6  EF60  F01A         	goto	l6706
  2973   0034DA                     u6590:
  2974   0034DA                     l6710:
  2975   0034DA  90D8               	bcf	status,0,c
  2976   0034DC  3618               	rlcf	___aldiv@quotient^0,f,c
  2977   0034DE  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  2978   0034E0  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  2979   0034E2  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  2980   0034E4  5012               	movf	___aldiv@divisor^0,w,c
  2981   0034E6  5C0E               	subwf	___aldiv@dividend^0,w,c
  2982   0034E8  5013               	movf	(___aldiv@divisor+1)^0,w,c
  2983   0034EA  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  2984   0034EC  5014               	movf	(___aldiv@divisor+2)^0,w,c
  2985   0034EE  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  2986   0034F0  5015               	movf	(___aldiv@divisor+3)^0,w,c
  2987   0034F2  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  2988   0034F4  A0D8               	btfss	status,0,c
  2989   0034F6  EF7F  F01A         	goto	u6601
  2990   0034FA  EF81  F01A         	goto	u6600
  2991   0034FE                     u6601:
  2992   0034FE  EF8A  F01A         	goto	l6718
  2993   003502                     u6600:
  2994   003502  5012               	movf	___aldiv@divisor^0,w,c
  2995   003504  5E0E               	subwf	___aldiv@dividend^0,f,c
  2996   003506  5013               	movf	(___aldiv@divisor+1)^0,w,c
  2997   003508  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  2998   00350A  5014               	movf	(___aldiv@divisor+2)^0,w,c
  2999   00350C  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3000   00350E  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3001   003510  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3002   003512  8018               	bsf	___aldiv@quotient^0,0,c
  3003   003514                     l6718:
  3004   003514  90D8               	bcf	status,0,c
  3005   003516  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3006   003518  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3007   00351A  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3008   00351C  3212               	rrcf	___aldiv@divisor^0,f,c
  3009   00351E  2E16               	decfsz	___aldiv@counter^0,f,c
  3010   003520  EF6D  F01A         	goto	l6710
  3011   003524                     l6722:
  3012   003524  5017               	movf	___aldiv@sign^0,w,c
  3013   003526  B4D8               	btfsc	status,2,c
  3014   003528  EF98  F01A         	goto	u6611
  3015   00352C  EF9A  F01A         	goto	u6610
  3016   003530                     u6611:
  3017   003530  EFA2  F01A         	goto	l6726
  3018   003534                     u6610:
  3019   003534  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3020   003536  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3021   003538  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3022   00353A  6C18               	negf	___aldiv@quotient^0,c
  3023   00353C  0E00               	movlw	0
  3024   00353E  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3025   003540  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3026   003542  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3027   003544                     l6726:
  3028   003544  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3029   003548  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3030   00354C  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3031   003550  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3032   003554  0012               	return		;funcret
  3033   003556                     __end_of___aldiv:
  3034                           	callstack 0
  3035                           
  3036 ;; *************** function _reading_hue *****************
  3037 ;; Defined at:
  3038 ;;		line 91 in file "color.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  cCurr           1   65[COMRAM] PTR struct colors
  3041 ;;		 -> colorCurrent(10), 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  led_state      50    0        unsigned char [50]
  3044 ;;  hue             2   69[COMRAM] unsigned int 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  2   65[COMRAM] unsigned int 
  3047 ;; Registers used:
  3048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3057 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3058 ;;Total ram usage:        6 bytes
  3059 ;; Hardware stack levels used: 1
  3060 ;; Hardware stack levels required when called: 4
  3061 ;; This function calls:
  3062 ;;		_color_read_Blue
  3063 ;;		_color_read_Clear
  3064 ;;		_color_read_Green
  3065 ;;		_color_read_Red
  3066 ;;		_convert_rgb2hue
  3067 ;; This function is called by:
  3068 ;;		_main
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text9
  3073   00384C                     __ptext9:
  3074                           	callstack 0
  3075   00384C                     _reading_hue:
  3076                           	callstack 26
  3077   00384C                     
  3078                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3079   00384C  807F               	bsf	127,0,c	;volatile
  3080                           
  3081                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3082   00384E  9E7D               	bcf	125,7,c	;volatile
  3083                           
  3084                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3085   003850  9679               	bcf	121,3,c	;volatile
  3086   003852                     
  3087                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3088   003852  0E29               	movlw	41
  3089   003854  6E45               	movwf	(??_reading_hue+1)^0,c
  3090   003856  0E96               	movlw	150
  3091   003858  6E44               	movwf	??_reading_hue^0,c
  3092   00385A  0E7F               	movlw	127
  3093   00385C                     u7057:
  3094   00385C  2EE8               	decfsz	wreg,f,c
  3095   00385E  D7FE               	bra	u7057
  3096   003860  2E44               	decfsz	??_reading_hue^0,f,c
  3097   003862  D7FC               	bra	u7057
  3098   003864  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3099   003866  D7FA               	bra	u7057
  3100   003868  0000               	nop	
  3101   00386A                     
  3102                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3103   00386A  EC58  F020         	call	_color_read_Red	;wreg free
  3104   00386E  5042               	movf	reading_hue@cCurr^0,w,c
  3105   003870  6ED9               	movwf	fsr2l,c
  3106   003872  6ADA               	clrf	fsr2h,c
  3107   003874  C006  FFDE         	movff	?_color_read_Red,postinc2
  3108   003878  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3109   00387C                     
  3110                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3111   00387C  907F               	bcf	127,0,c	;volatile
  3112   00387E                     
  3113                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3114   00387E  8E7D               	bsf	125,7,c	;volatile
  3115   003880                     
  3116                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3117   003880  9679               	bcf	121,3,c	;volatile
  3118   003882                     
  3119                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3120   003882  0E29               	movlw	41
  3121   003884  6E45               	movwf	(??_reading_hue+1)^0,c
  3122   003886  0E96               	movlw	150
  3123   003888  6E44               	movwf	??_reading_hue^0,c
  3124   00388A  0E7F               	movlw	127
  3125   00388C                     u7067:
  3126   00388C  2EE8               	decfsz	wreg,f,c
  3127   00388E  D7FE               	bra	u7067
  3128   003890  2E44               	decfsz	??_reading_hue^0,f,c
  3129   003892  D7FC               	bra	u7067
  3130   003894  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3131   003896  D7FA               	bra	u7067
  3132   003898  0000               	nop	
  3133                           
  3134                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3135   00389A  EC80  F020         	call	_color_read_Green	;wreg free
  3136   00389E  5042               	movf	reading_hue@cCurr^0,w,c
  3137   0038A0  6ED9               	movwf	fsr2l,c
  3138   0038A2  6ADA               	clrf	fsr2h,c
  3139   0038A4  0E02               	movlw	2
  3140   0038A6  26D9               	addwf	fsr2l,f,c
  3141   0038A8  C006  FFDE         	movff	?_color_read_Green,postinc2
  3142   0038AC  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3143   0038B0                     
  3144                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3145   0038B0  907F               	bcf	127,0,c	;volatile
  3146   0038B2                     
  3147                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3148   0038B2  9E7D               	bcf	125,7,c	;volatile
  3149   0038B4                     
  3150                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3151   0038B4  8679               	bsf	121,3,c	;volatile
  3152   0038B6                     
  3153                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3154   0038B6  0E29               	movlw	41
  3155   0038B8  6E45               	movwf	(??_reading_hue+1)^0,c
  3156   0038BA  0E96               	movlw	150
  3157   0038BC  6E44               	movwf	??_reading_hue^0,c
  3158   0038BE  0E7F               	movlw	127
  3159   0038C0                     u7077:
  3160   0038C0  2EE8               	decfsz	wreg,f,c
  3161   0038C2  D7FE               	bra	u7077
  3162   0038C4  2E44               	decfsz	??_reading_hue^0,f,c
  3163   0038C6  D7FC               	bra	u7077
  3164   0038C8  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3165   0038CA  D7FA               	bra	u7077
  3166   0038CC  0000               	nop	
  3167   0038CE                     
  3168                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3169   0038CE  ECD0  F020         	call	_color_read_Blue	;wreg free
  3170   0038D2  5042               	movf	reading_hue@cCurr^0,w,c
  3171   0038D4  6ED9               	movwf	fsr2l,c
  3172   0038D6  6ADA               	clrf	fsr2h,c
  3173   0038D8  0E04               	movlw	4
  3174   0038DA  26D9               	addwf	fsr2l,f,c
  3175   0038DC  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3176   0038E0  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3177   0038E4                     
  3178                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3179   0038E4  807F               	bsf	127,0,c	;volatile
  3180   0038E6                     
  3181                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3182   0038E6  8E7D               	bsf	125,7,c	;volatile
  3183   0038E8                     
  3184                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3185   0038E8  8679               	bsf	121,3,c	;volatile
  3186                           
  3187                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3188   0038EA  0E29               	movlw	41
  3189   0038EC  6E45               	movwf	(??_reading_hue+1)^0,c
  3190   0038EE  0E96               	movlw	150
  3191   0038F0  6E44               	movwf	??_reading_hue^0,c
  3192   0038F2  0E7F               	movlw	127
  3193   0038F4                     u7087:
  3194   0038F4  2EE8               	decfsz	wreg,f,c
  3195   0038F6  D7FE               	bra	u7087
  3196   0038F8  2E44               	decfsz	??_reading_hue^0,f,c
  3197   0038FA  D7FC               	bra	u7087
  3198   0038FC  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3199   0038FE  D7FA               	bra	u7087
  3200   003900  0000               	nop	
  3201   003902                     
  3202                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3203   003902  ECA8  F020         	call	_color_read_Clear	;wreg free
  3204   003906  5042               	movf	reading_hue@cCurr^0,w,c
  3205   003908  6ED9               	movwf	fsr2l,c
  3206   00390A  6ADA               	clrf	fsr2h,c
  3207   00390C  0E06               	movlw	6
  3208   00390E  26D9               	addwf	fsr2l,f,c
  3209   003910  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3210   003914  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3211   003918                     
  3212                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3213   003918  0ED3               	movlw	low _colorCalibration
  3214   00391A  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  3215   00391C  0EC9               	movlw	low _colorCurrent
  3216   00391E  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  3217   003920  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3218   003924  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  3219   003928  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3220   00392C                     
  3221                           ;color.c: 127:     return hue;
  3222   00392C  C046  F042         	movff	reading_hue@hue,?_reading_hue
  3223   003930  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  3224   003934  0012               	return		;funcret
  3225   003936                     __end_of_reading_hue:
  3226                           	callstack 0
  3227                           
  3228 ;; *************** function _convert_rgb2hue *****************
  3229 ;; Defined at:
  3230 ;;		line 227 in file "color.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  cMax            1   61[COMRAM] PTR struct colors
  3233 ;;		 -> colorCalibration(10), 
  3234 ;;  cCurr           1   62[COMRAM] PTR struct colors
  3235 ;;		 -> colorCurrent(10), 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  c_char         20    0        unsigned char [20]
  3238 ;;  b               4   72[BANK0 ] float 
  3239 ;;  g               4   68[BANK0 ] float 
  3240 ;;  r               4   64[BANK0 ] float 
  3241 ;;  hue             4   60[BANK0 ] float 
  3242 ;;  max             4   56[BANK0 ] float 
  3243 ;;  diff            4   52[BANK0 ] float 
  3244 ;;  min             4   48[BANK0 ] float 
  3245 ;;  clearmax        4   28[BANK0 ] float 
  3246 ;;  clearcurrent    4   24[BANK0 ] float 
  3247 ;;  bluemax         4   20[BANK0 ] float 
  3248 ;;  bluecurrent     4   16[BANK0 ] float 
  3249 ;;  greenmax        4   12[BANK0 ] float 
  3250 ;;  greencurrent    4    8[BANK0 ] float 
  3251 ;;  redmax          4    4[BANK0 ] float 
  3252 ;;  redcurrent      4    0[BANK0 ] float 
  3253 ;;  c               4    0        float 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  2   61[COMRAM] unsigned int 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3264 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3266 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3267 ;;Total ram usage:       80 bytes
  3268 ;; Hardware stack levels used: 1
  3269 ;; Hardware stack levels required when called: 3
  3270 ;; This function calls:
  3271 ;;		___fladd
  3272 ;;		___fldiv
  3273 ;;		___fleq
  3274 ;;		___flge
  3275 ;;		___flmul
  3276 ;;		___flsub
  3277 ;;		___fltol
  3278 ;;		___xxtofl
  3279 ;; This function is called by:
  3280 ;;		_reading_hue
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text10
  3285   000EC6                     __ptext10:
  3286                           	callstack 0
  3287   000EC6                     _convert_rgb2hue:
  3288                           	callstack 26
  3289   000EC6                     
  3290                           ;color.c: 227: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 228: {;color.c: 229:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 230:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3291   000EC6  0E00               	movlw	0
  3292   000EC8  0100               	movlb	0	; () banked
  3293   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3294   000ECC  0E00               	movlw	0
  3295   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3296   000ED0  0E00               	movlw	0
  3297   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3298   000ED4  0E00               	movlw	0
  3299   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3300   000ED8                     
  3301                           ; BSR set to: 0
  3302                           ;color.c: 232:     redcurrent = cCurr->red;
  3303   000ED8  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3304   000EDA  6ED9               	movwf	fsr2l,c
  3305   000EDC  6ADA               	clrf	fsr2h,c
  3306   000EDE  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3307   000EE2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3308   000EE6  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3309   000EEA  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3310   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3311   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3312   000EF2  0E00               	movlw	0
  3313   000EF4  ECEA  F015         	call	___xxtofl
  3314   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3315   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3316   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3317   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3318   000F08                     
  3319                           ;color.c: 233:     redmax = cMax->red;
  3320   000F08  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3321   000F0A  6ED9               	movwf	fsr2l,c
  3322   000F0C  6ADA               	clrf	fsr2h,c
  3323   000F0E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3324   000F12  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3325   000F16  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3326   000F1A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3327   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3328   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3329   000F22  0E00               	movlw	0
  3330   000F24  ECEA  F015         	call	___xxtofl
  3331   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3332   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3333   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3334   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3335   000F38                     
  3336                           ;color.c: 234:     greencurrent = cCurr->green;
  3337   000F38  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3338   000F3A  6ED9               	movwf	fsr2l,c
  3339   000F3C  6ADA               	clrf	fsr2h,c
  3340   000F3E  0E02               	movlw	2
  3341   000F40  26D9               	addwf	fsr2l,f,c
  3342   000F42  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3343   000F46  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3344   000F4A  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3345   000F4E  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3346   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3347   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3348   000F56  0E00               	movlw	0
  3349   000F58  ECEA  F015         	call	___xxtofl
  3350   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3351   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3352   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3353   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3354   000F6C                     
  3355                           ;color.c: 235:     greenmax = cMax->green;
  3356   000F6C  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3357   000F6E  6ED9               	movwf	fsr2l,c
  3358   000F70  6ADA               	clrf	fsr2h,c
  3359   000F72  0E02               	movlw	2
  3360   000F74  26D9               	addwf	fsr2l,f,c
  3361   000F76  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3362   000F7A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3363   000F7E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3364   000F82  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3365   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3366   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3367   000F8A  0E00               	movlw	0
  3368   000F8C  ECEA  F015         	call	___xxtofl
  3369   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3370   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3371   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3372   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3373   000FA0                     
  3374                           ;color.c: 236:     bluecurrent = cCurr->blue;
  3375   000FA0  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3376   000FA2  6ED9               	movwf	fsr2l,c
  3377   000FA4  6ADA               	clrf	fsr2h,c
  3378   000FA6  0E04               	movlw	4
  3379   000FA8  26D9               	addwf	fsr2l,f,c
  3380   000FAA  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3381   000FAE  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3382   000FB2  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3383   000FB6  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3384   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3385   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3386   000FBE  0E00               	movlw	0
  3387   000FC0  ECEA  F015         	call	___xxtofl
  3388   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3389   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3390   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3391   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3392   000FD4                     
  3393                           ;color.c: 237:     bluemax = cMax->blue;
  3394   000FD4  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3395   000FD6  6ED9               	movwf	fsr2l,c
  3396   000FD8  6ADA               	clrf	fsr2h,c
  3397   000FDA  0E04               	movlw	4
  3398   000FDC  26D9               	addwf	fsr2l,f,c
  3399   000FDE  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3400   000FE2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3401   000FE6  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3402   000FEA  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3403   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3404   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3405   000FF2  0E00               	movlw	0
  3406   000FF4  ECEA  F015         	call	___xxtofl
  3407   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3408   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3409   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3410   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3411   001008                     
  3412                           ;color.c: 238:     clearcurrent = cCurr->clear;
  3413   001008  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3414   00100A  6ED9               	movwf	fsr2l,c
  3415   00100C  6ADA               	clrf	fsr2h,c
  3416   00100E  0E06               	movlw	6
  3417   001010  26D9               	addwf	fsr2l,f,c
  3418   001012  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3419   001016  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3420   00101A  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3421   00101E  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3422   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3423   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3424   001026  0E00               	movlw	0
  3425   001028  ECEA  F015         	call	___xxtofl
  3426   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3427   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3428   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3429   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3430   00103C                     
  3431                           ;color.c: 239:     clearmax = cMax->clear;
  3432   00103C  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3433   00103E  6ED9               	movwf	fsr2l,c
  3434   001040  6ADA               	clrf	fsr2h,c
  3435   001042  0E06               	movlw	6
  3436   001044  26D9               	addwf	fsr2l,f,c
  3437   001046  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3438   00104A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3439   00104E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3440   001052  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3441   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3442   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3443   00105A  0E00               	movlw	0
  3444   00105C  ECEA  F015         	call	___xxtofl
  3445   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3446   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3447   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3448   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3449   001070  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3450   001074  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3451   001078  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3452   00107C  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3453   001080  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3454   001084  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3455   001088  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3456   00108C  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3457   001090  ECD4  F011         	call	___fldiv	;wreg free
  3458   001094                     
  3459                           ;color.c: 242:     char c_char[20];;color.c: 248:     r = redcurrent/redmax;
  3460   001094  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3461   001098  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3462   00109C  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3463   0010A0  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3464   0010A4  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  3465   0010A8  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3466   0010AC  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3467   0010B0  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3468   0010B4  ECD4  F011         	call	___fldiv	;wreg free
  3469   0010B8  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3470   0010BC  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3471   0010C0  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3472   0010C4  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3473   0010C8                     
  3474                           ;color.c: 249:     g = greencurrent/greenmax;
  3475   0010C8  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3476   0010CC  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3477   0010D0  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3478   0010D4  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3479   0010D8  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3480   0010DC  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3481   0010E0  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3482   0010E4  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3483   0010E8  ECD4  F011         	call	___fldiv	;wreg free
  3484   0010EC  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3485   0010F0  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3486   0010F4  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3487   0010F8  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3488   0010FC                     
  3489                           ;color.c: 250:     b = bluecurrent/bluemax;
  3490   0010FC  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3491   001100  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3492   001104  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3493   001108  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3494   00110C  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3495   001110  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3496   001114  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3497   001118  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3498   00111C  ECD4  F011         	call	___fldiv	;wreg free
  3499   001120  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3500   001124  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3501   001128  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3502   00112C  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3503   001130                     
  3504                           ;color.c: 252:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3505   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3506   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3507   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3508   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3509   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3510   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3511   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3512   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3513   001150  EC2E  F01B         	call	___flge	;wreg free
  3514   001154  A0D8               	btfss	status,0,c
  3515   001156  EFAF  F008         	goto	u6331
  3516   00115A  EFB1  F008         	goto	u6330
  3517   00115E                     u6331:
  3518   00115E  EFE6  F008         	goto	l6518
  3519   001162                     u6330:
  3520   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3521   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3522   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3523   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3524   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3525   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3526   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3527   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3528   001182  EC2E  F01B         	call	___flge	;wreg free
  3529   001186  A0D8               	btfss	status,0,c
  3530   001188  EFC8  F008         	goto	u6341
  3531   00118C  EFCA  F008         	goto	u6340
  3532   001190                     u6341:
  3533   001190  EFD4  F008         	goto	l128
  3534   001194                     u6340:
  3535   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3536   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3537   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3538   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3539   0011A4  EFDC  F008         	goto	l130
  3540   0011A8                     l128:
  3541   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$432
  3542   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$432+1
  3543   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$432+2
  3544   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$432+3
  3545   0011B8                     l130:
  3546   0011B8  C080  F090         	movff	_convert_rgb2hue$432,convert_rgb2hue@min
  3547   0011BC  C081  F091         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@min+1
  3548   0011C0  C082  F092         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@min+2
  3549   0011C4  C083  F093         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@min+3
  3550   0011C8  EF19  F009         	goto	l6522
  3551   0011CC                     l6518:
  3552   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3553   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3554   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3555   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3556   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3557   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3558   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3559   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3560   0011EC  EC2E  F01B         	call	___flge	;wreg free
  3561   0011F0  A0D8               	btfss	status,0,c
  3562   0011F2  EFFD  F008         	goto	u6351
  3563   0011F6  EFFF  F008         	goto	u6350
  3564   0011FA                     u6351:
  3565   0011FA  EF09  F009         	goto	l132
  3566   0011FE                     u6350:
  3567   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$433
  3568   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$433+1
  3569   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$433+2
  3570   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$433+3
  3571   00120E  EF11  F009         	goto	l134
  3572   001212                     l132:
  3573   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$433
  3574   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$433+1
  3575   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$433+2
  3576   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$433+3
  3577   001222                     l134:
  3578   001222  C084  F090         	movff	_convert_rgb2hue$433,convert_rgb2hue@min
  3579   001226  C085  F091         	movff	_convert_rgb2hue$433+1,convert_rgb2hue@min+1
  3580   00122A  C086  F092         	movff	_convert_rgb2hue$433+2,convert_rgb2hue@min+2
  3581   00122E  C087  F093         	movff	_convert_rgb2hue$433+3,convert_rgb2hue@min+3
  3582   001232                     l6522:
  3583                           
  3584                           ;color.c: 253:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3585   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3586   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3587   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3588   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3589   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3590   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3591   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3592   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3593   001252  EC2E  F01B         	call	___flge	;wreg free
  3594   001256  A0D8               	btfss	status,0,c
  3595   001258  EF30  F009         	goto	u6361
  3596   00125C  EF32  F009         	goto	u6360
  3597   001260                     u6361:
  3598   001260  EF67  F009         	goto	l6528
  3599   001264                     u6360:
  3600   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3601   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3602   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3603   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3604   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3605   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3606   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3607   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3608   001284  EC2E  F01B         	call	___flge	;wreg free
  3609   001288  A0D8               	btfss	status,0,c
  3610   00128A  EF49  F009         	goto	u6371
  3611   00128E  EF4B  F009         	goto	u6370
  3612   001292                     u6371:
  3613   001292  EF55  F009         	goto	l140
  3614   001296                     u6370:
  3615   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$434
  3616   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$434+1
  3617   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$434+2
  3618   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$434+3
  3619   0012A6  EF5D  F009         	goto	l142
  3620   0012AA                     l140:
  3621   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$434
  3622   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$434+1
  3623   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$434+2
  3624   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$434+3
  3625   0012BA                     l142:
  3626   0012BA  C088  F098         	movff	_convert_rgb2hue$434,convert_rgb2hue@max
  3627   0012BE  C089  F099         	movff	_convert_rgb2hue$434+1,convert_rgb2hue@max+1
  3628   0012C2  C08A  F09A         	movff	_convert_rgb2hue$434+2,convert_rgb2hue@max+2
  3629   0012C6  C08B  F09B         	movff	_convert_rgb2hue$434+3,convert_rgb2hue@max+3
  3630   0012CA  EF9A  F009         	goto	l6532
  3631   0012CE                     l6528:
  3632   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3633   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3634   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3635   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3636   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3637   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3638   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3639   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3640   0012EE  EC2E  F01B         	call	___flge	;wreg free
  3641   0012F2  A0D8               	btfss	status,0,c
  3642   0012F4  EF7E  F009         	goto	u6381
  3643   0012F8  EF80  F009         	goto	u6380
  3644   0012FC                     u6381:
  3645   0012FC  EF8A  F009         	goto	l144
  3646   001300                     u6380:
  3647   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3648   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3649   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3650   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3651   001310  EF92  F009         	goto	l146
  3652   001314                     l144:
  3653   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$435
  3654   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$435+1
  3655   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$435+2
  3656   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$435+3
  3657   001324                     l146:
  3658   001324  C08C  F098         	movff	_convert_rgb2hue$435,convert_rgb2hue@max
  3659   001328  C08D  F099         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@max+1
  3660   00132C  C08E  F09A         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@max+2
  3661   001330  C08F  F09B         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@max+3
  3662   001334                     l6532:
  3663                           
  3664                           ;color.c: 254:     diff = max - min;
  3665   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3666   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3667   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3668   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3669   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3670   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3671   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3672   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3673   001354  ECF8  F020         	call	___flsub	;wreg free
  3674   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3675   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3676   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3677   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3678                           
  3679                           ;color.c: 255:     if (max == min) {
  3680   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3681   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3682   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3683   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3684   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3685   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3686   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3687   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3688   001388  ECAC  F01D         	call	___fleq	;wreg free
  3689   00138C  A0D8               	btfss	status,0,c
  3690   00138E  EFCB  F009         	goto	u6391
  3691   001392  EFCD  F009         	goto	u6390
  3692   001396                     u6391:
  3693   001396  EFD8  F009         	goto	l6536
  3694   00139A                     u6390:
  3695   00139A                     
  3696                           ;color.c: 256:         hue = 0;
  3697   00139A  0E00               	movlw	0
  3698   00139C  0100               	movlb	0	; () banked
  3699   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3700   0013A0  0E00               	movlw	0
  3701   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3702   0013A4  0E00               	movlw	0
  3703   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3704   0013A8  0E00               	movlw	0
  3705   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3706                           
  3707                           ;color.c: 257:     } else if (max == r){
  3708   0013AC  EFE1  F00A         	goto	l6548
  3709   0013B0                     l6536:
  3710   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3711   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3712   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3713   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3714   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3715   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3716   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3717   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3718   0013D0  ECAC  F01D         	call	___fleq	;wreg free
  3719   0013D4  A0D8               	btfss	status,0,c
  3720   0013D6  EFEF  F009         	goto	u6401
  3721   0013DA  EFF1  F009         	goto	u6400
  3722   0013DE                     u6401:
  3723   0013DE  EF1F  F00A         	goto	l6540
  3724   0013E2                     u6400:
  3725   0013E2                     
  3726                           ;color.c: 258:         hue = (b - g) / diff;
  3727   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3728   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3729   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3730   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3731   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3732   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3733   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3734   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3735   001402  ECF8  F020         	call	___flsub	;wreg free
  3736   001406  C012  F01B         	movff	?___flsub,___fldiv@b
  3737   00140A  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3738   00140E  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3739   001412  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3740   001416  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3741   00141A  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3742   00141E  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3743   001422  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3744   001426  ECD4  F011         	call	___fldiv	;wreg free
  3745   00142A  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3746   00142E  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3747   001432  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3748   001436  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3749                           
  3750                           ;color.c: 259:     } else if (max == g){
  3751   00143A  EFE1  F00A         	goto	l6548
  3752   00143E                     l6540:
  3753   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3754   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3755   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3756   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3757   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3758   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3759   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3760   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3761   00145E  ECAC  F01D         	call	___fleq	;wreg free
  3762   001462  A0D8               	btfss	status,0,c
  3763   001464  EF36  F00A         	goto	u6411
  3764   001468  EF38  F00A         	goto	u6410
  3765   00146C                     u6411:
  3766   00146C  EF80  F00A         	goto	l6544
  3767   001470                     u6410:
  3768   001470                     
  3769                           ;color.c: 260:         hue = (b - r) / diff;
  3770   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3771   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3772   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3773   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3774   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3775   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3776   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3777   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3778   001490  ECF8  F020         	call	___flsub	;wreg free
  3779   001494  C012  F01B         	movff	?___flsub,___fldiv@b
  3780   001498  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3781   00149C  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3782   0014A0  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3783   0014A4  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3784   0014A8  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3785   0014AC  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3786   0014B0  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3787   0014B4  ECD4  F011         	call	___fldiv	;wreg free
  3788   0014B8  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3789   0014BC  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3790   0014C0  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3791   0014C4  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3792                           
  3793                           ;color.c: 261:         hue = hue + 2;
  3794   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3795   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3796   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3797   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3798   0014D8  0E00               	movlw	0
  3799   0014DA  6E06               	movwf	___fladd@a^0,c
  3800   0014DC  0E00               	movlw	0
  3801   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3802   0014E0  0E00               	movlw	0
  3803   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3804   0014E4  0E40               	movlw	64
  3805   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3806   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3807   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3808   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3809   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3810   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3811                           
  3812                           ;color.c: 262:     } else if (max == b){
  3813   0014FC  EFE1  F00A         	goto	l6548
  3814   001500                     l6544:
  3815   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3816   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3817   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3818   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3819   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3820   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3821   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3822   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3823   001520  ECAC  F01D         	call	___fleq	;wreg free
  3824   001524  A0D8               	btfss	status,0,c
  3825   001526  EF97  F00A         	goto	u6421
  3826   00152A  EF99  F00A         	goto	u6420
  3827   00152E                     u6421:
  3828   00152E  EFE1  F00A         	goto	l150
  3829   001532                     u6420:
  3830   001532                     
  3831                           ;color.c: 263:         hue = (r - g) / diff;
  3832   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3833   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3834   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3835   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3836   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3837   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3838   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3839   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3840   001552  ECF8  F020         	call	___flsub	;wreg free
  3841   001556  C012  F01B         	movff	?___flsub,___fldiv@b
  3842   00155A  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3843   00155E  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3844   001562  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3845   001566  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3846   00156A  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3847   00156E  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3848   001572  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3849   001576  ECD4  F011         	call	___fldiv	;wreg free
  3850   00157A  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3851   00157E  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3852   001582  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3853   001586  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3854                           
  3855                           ;color.c: 264:         hue = hue + 4;
  3856   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3857   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3858   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3859   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3860   00159A  0E00               	movlw	0
  3861   00159C  6E06               	movwf	___fladd@a^0,c
  3862   00159E  0E00               	movlw	0
  3863   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3864   0015A2  0E80               	movlw	128
  3865   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3866   0015A6  0E40               	movlw	64
  3867   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3868   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3869   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3870   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3871   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3872   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3873   0015BE  EFE1  F00A         	goto	l6548
  3874   0015C2                     l150:
  3875   0015C2                     l6548:
  3876                           
  3877                           ;color.c: 267:     hue = hue * 60;
  3878   0015C2  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3879   0015C6  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3880   0015CA  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3881   0015CE  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3882   0015D2  0E00               	movlw	0
  3883   0015D4  6E06               	movwf	___flmul@a^0,c
  3884   0015D6  0E00               	movlw	0
  3885   0015D8  6E07               	movwf	(___flmul@a+1)^0,c
  3886   0015DA  0E70               	movlw	112
  3887   0015DC  6E08               	movwf	(___flmul@a+2)^0,c
  3888   0015DE  0E42               	movlw	66
  3889   0015E0  6E09               	movwf	(___flmul@a+3)^0,c
  3890   0015E2  ECBF  F00F         	call	___flmul	;wreg free
  3891   0015E6  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3892   0015EA  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3893   0015EE  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3894   0015F2  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3895   0015F6                     
  3896                           ;color.c: 268:     if (hue < 0) {
  3897   0015F6  0100               	movlb	0	; () banked
  3898   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3899   0015FA  EF03  F00B         	goto	u6430
  3900   0015FE  EF01  F00B         	goto	u6431
  3901   001602                     u6431:
  3902   001602  EF1D  F00B         	goto	l154
  3903   001606                     u6430:
  3904   001606                     
  3905                           ; BSR set to: 0
  3906                           ;color.c: 269:         hue = hue + 360;
  3907   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3908   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3909   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3910   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3911   001616  0E00               	movlw	0
  3912   001618  6E06               	movwf	___fladd@a^0,c
  3913   00161A  0E00               	movlw	0
  3914   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3915   00161E  0EB4               	movlw	180
  3916   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3917   001622  0E43               	movlw	67
  3918   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3919   001626  EC2C  F00B         	call	___fladd	;wreg free
  3920   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3921   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3922   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3923   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3924   00163A                     l154:
  3925                           
  3926                           ;color.c: 272:     return (unsigned int)hue;
  3927   00163A  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3928   00163E  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3929   001642  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3930   001646  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3931   00164A  ECAB  F01A         	call	___fltol	;wreg free
  3932   00164E  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3933   001652  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3934   001656  0012               	return		;funcret
  3935   001658                     __end_of_convert_rgb2hue:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function ___xxtofl *****************
  3939 ;; Defined at:
  3940 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  sign            1    wreg     unsigned char 
  3943 ;;  val             4    1[COMRAM] long 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  sign            1    9[COMRAM] unsigned char 
  3946 ;;  arg             4   11[COMRAM] unsigned long 
  3947 ;;  exp             1   10[COMRAM] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  4    1[COMRAM] unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;Total ram usage:       14 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 1
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_convert_rgb2hue
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text11
  3973   002BD4                     __ptext11:
  3974                           	callstack 0
  3975   002BD4                     ___xxtofl:
  3976                           	callstack 27
  3977                           
  3978                           ;incstack = 0
  3979                           ;___xxtofl@sign stored from wreg
  3980   002BD4  6E0A               	movwf	___xxtofl@sign^0,c
  3981   002BD6  500A               	movf	___xxtofl@sign^0,w,c
  3982   002BD8  B4D8               	btfsc	status,2,c
  3983   002BDA  EFF1  F015         	goto	u6231
  3984   002BDE  EFF3  F015         	goto	u6230
  3985   002BE2                     u6231:
  3986   002BE2  EF15  F016         	goto	l1385
  3987   002BE6                     u6230:
  3988   002BE6  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3989   002BE8  EFFA  F015         	goto	u6240
  3990   002BEC  EFF8  F015         	goto	u6241
  3991   002BF0                     u6241:
  3992   002BF0  EF15  F016         	goto	l1385
  3993   002BF4                     u6240:
  3994   002BF4  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3995   002BF8  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3996   002BFC  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3997   002C00  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3998   002C04  1E06               	comf	??___xxtofl^0,f,c
  3999   002C06  1E07               	comf	(??___xxtofl+1)^0,f,c
  4000   002C08  1E08               	comf	(??___xxtofl+2)^0,f,c
  4001   002C0A  1E09               	comf	(??___xxtofl+3)^0,f,c
  4002   002C0C  2A06               	incf	??___xxtofl^0,f,c
  4003   002C0E  0E00               	movlw	0
  4004   002C10  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4005   002C12  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4006   002C14  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4007   002C16  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4008   002C1A  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4009   002C1E  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4010   002C22  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4011   002C26  EF1D  F016         	goto	l6408
  4012   002C2A                     l1385:
  4013   002C2A  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4014   002C2E  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4015   002C32  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4016   002C36  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4017   002C3A                     l6408:
  4018   002C3A  5002               	movf	___xxtofl@val^0,w,c
  4019   002C3C  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4020   002C3E  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4021   002C40  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4022   002C42  A4D8               	btfss	status,2,c
  4023   002C44  EF26  F016         	goto	u6251
  4024   002C48  EF28  F016         	goto	u6250
  4025   002C4C                     u6251:
  4026   002C4C  EF32  F016         	goto	l6414
  4027   002C50                     u6250:
  4028   002C50  0E00               	movlw	0
  4029   002C52  6E02               	movwf	?___xxtofl^0,c
  4030   002C54  0E00               	movlw	0
  4031   002C56  6E03               	movwf	(?___xxtofl+1)^0,c
  4032   002C58  0E00               	movlw	0
  4033   002C5A  6E04               	movwf	(?___xxtofl+2)^0,c
  4034   002C5C  0E00               	movlw	0
  4035   002C5E  6E05               	movwf	(?___xxtofl+3)^0,c
  4036   002C60  EFC3  F016         	goto	l1388
  4037   002C64                     l6414:
  4038   002C64  0E96               	movlw	150
  4039   002C66  6E0B               	movwf	___xxtofl@exp^0,c
  4040   002C68  EF3C  F016         	goto	l6418
  4041   002C6C                     l6416:
  4042   002C6C  2A0B               	incf	___xxtofl@exp^0,f,c
  4043   002C6E  90D8               	bcf	status,0,c
  4044   002C70  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4045   002C72  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4046   002C74  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4047   002C76  320C               	rrcf	___xxtofl@arg^0,f,c
  4048   002C78                     l6418:
  4049   002C78  0E00               	movlw	0
  4050   002C7A  140C               	andwf	___xxtofl@arg^0,w,c
  4051   002C7C  6E06               	movwf	??___xxtofl^0,c
  4052   002C7E  0E00               	movlw	0
  4053   002C80  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4054   002C82  6E07               	movwf	(??___xxtofl+1)^0,c
  4055   002C84  0E00               	movlw	0
  4056   002C86  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4057   002C88  6E08               	movwf	(??___xxtofl+2)^0,c
  4058   002C8A  0EFE               	movlw	254
  4059   002C8C  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4060   002C8E  6E09               	movwf	(??___xxtofl+3)^0,c
  4061   002C90  5006               	movf	??___xxtofl^0,w,c
  4062   002C92  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4063   002C94  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4064   002C96  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4065   002C98  A4D8               	btfss	status,2,c
  4066   002C9A  EF51  F016         	goto	u6261
  4067   002C9E  EF53  F016         	goto	u6260
  4068   002CA2                     u6261:
  4069   002CA2  EF36  F016         	goto	l6416
  4070   002CA6                     u6260:
  4071   002CA6  EF61  F016         	goto	l1392
  4072   002CAA                     l6420:
  4073   002CAA  2A0B               	incf	___xxtofl@exp^0,f,c
  4074   002CAC  0E01               	movlw	1
  4075   002CAE  260C               	addwf	___xxtofl@arg^0,f,c
  4076   002CB0  0E00               	movlw	0
  4077   002CB2  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4078   002CB4  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4079   002CB6  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4080   002CB8  90D8               	bcf	status,0,c
  4081   002CBA  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4082   002CBC  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4083   002CBE  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4084   002CC0  320C               	rrcf	___xxtofl@arg^0,f,c
  4085   002CC2                     l1392:
  4086   002CC2  0E00               	movlw	0
  4087   002CC4  140C               	andwf	___xxtofl@arg^0,w,c
  4088   002CC6  6E06               	movwf	??___xxtofl^0,c
  4089   002CC8  0E00               	movlw	0
  4090   002CCA  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4091   002CCC  6E07               	movwf	(??___xxtofl+1)^0,c
  4092   002CCE  0E00               	movlw	0
  4093   002CD0  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4094   002CD2  6E08               	movwf	(??___xxtofl+2)^0,c
  4095   002CD4  0EFF               	movlw	255
  4096   002CD6  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4097   002CD8  6E09               	movwf	(??___xxtofl+3)^0,c
  4098   002CDA  5006               	movf	??___xxtofl^0,w,c
  4099   002CDC  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4100   002CDE  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4101   002CE0  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4102   002CE2  A4D8               	btfss	status,2,c
  4103   002CE4  EF76  F016         	goto	u6271
  4104   002CE8  EF78  F016         	goto	u6270
  4105   002CEC                     u6271:
  4106   002CEC  EF55  F016         	goto	l6420
  4107   002CF0                     u6270:
  4108   002CF0  EF80  F016         	goto	l6428
  4109   002CF4                     l6426:
  4110   002CF4  060B               	decf	___xxtofl@exp^0,f,c
  4111   002CF6  90D8               	bcf	status,0,c
  4112   002CF8  360C               	rlcf	___xxtofl@arg^0,f,c
  4113   002CFA  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4114   002CFC  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4115   002CFE  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4116   002D00                     l6428:
  4117   002D00  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4118   002D02  EF85  F016         	goto	u6281
  4119   002D06  EF87  F016         	goto	u6280
  4120   002D0A                     u6281:
  4121   002D0A  EF8F  F016         	goto	l1399
  4122   002D0E                     u6280:
  4123   002D0E  0E02               	movlw	2
  4124   002D10  600B               	cpfslt	___xxtofl@exp^0,c
  4125   002D12  EF8D  F016         	goto	u6291
  4126   002D16  EF8F  F016         	goto	u6290
  4127   002D1A                     u6291:
  4128   002D1A  EF7A  F016         	goto	l6426
  4129   002D1E                     u6290:
  4130   002D1E                     l1399:
  4131   002D1E  B00B               	btfsc	___xxtofl@exp^0,0,c
  4132   002D20  EF94  F016         	goto	u6301
  4133   002D24  EF96  F016         	goto	u6300
  4134   002D28                     u6301:
  4135   002D28  EF97  F016         	goto	l6434
  4136   002D2C                     u6300:
  4137   002D2C  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4138   002D2E                     l6434:
  4139   002D2E  90D8               	bcf	status,0,c
  4140   002D30  320B               	rrcf	___xxtofl@exp^0,f,c
  4141   002D32  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4142   002D36  6A07               	clrf	(??___xxtofl+1)^0,c
  4143   002D38  6A08               	clrf	(??___xxtofl+2)^0,c
  4144   002D3A  6A09               	clrf	(??___xxtofl+3)^0,c
  4145   002D3C  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4146   002D40  6A08               	clrf	(??___xxtofl+2)^0,c
  4147   002D42  6A07               	clrf	(??___xxtofl+1)^0,c
  4148   002D44  6A06               	clrf	??___xxtofl^0,c
  4149   002D46  5006               	movf	??___xxtofl^0,w,c
  4150   002D48  120C               	iorwf	___xxtofl@arg^0,f,c
  4151   002D4A  5007               	movf	(??___xxtofl+1)^0,w,c
  4152   002D4C  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4153   002D4E  5008               	movf	(??___xxtofl+2)^0,w,c
  4154   002D50  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4155   002D52  5009               	movf	(??___xxtofl+3)^0,w,c
  4156   002D54  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4157   002D56  500A               	movf	___xxtofl@sign^0,w,c
  4158   002D58  B4D8               	btfsc	status,2,c
  4159   002D5A  EFB1  F016         	goto	u6311
  4160   002D5E  EFB3  F016         	goto	u6310
  4161   002D62                     u6311:
  4162   002D62  EFBB  F016         	goto	l6444
  4163   002D66                     u6310:
  4164   002D66  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4165   002D68  EFBA  F016         	goto	u6320
  4166   002D6C  EFB8  F016         	goto	u6321
  4167   002D70                     u6321:
  4168   002D70  EFBB  F016         	goto	l6444
  4169   002D74                     u6320:
  4170   002D74  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4171   002D76                     l6444:
  4172   002D76  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4173   002D7A  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4174   002D7E  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4175   002D82  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4176   002D86                     l1388:
  4177   002D86  0012               	return		;funcret
  4178   002D88                     __end_of___xxtofl:
  4179                           	callstack 0
  4180                           
  4181 ;; *************** function ___fltol *****************
  4182 ;; Defined at:
  4183 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  f1              4   51[COMRAM] unsigned char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  exp1            1   60[COMRAM] unsigned char 
  4188 ;;  sign1           1   59[COMRAM] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  4   51[COMRAM] long 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2, status,0
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4198 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4201 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4202 ;;Total ram usage:       10 bytes
  4203 ;; Hardware stack levels used: 1
  4204 ;; Hardware stack levels required when called: 1
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_convert_rgb2hue
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text12
  4214   003556                     __ptext12:
  4215                           	callstack 0
  4216   003556                     ___fltol:
  4217                           	callstack 27
  4218   003556  3436               	rlcf	(___fltol@f1+2)^0,w,c
  4219   003558  3437               	rlcf	(___fltol@f1+3)^0,w,c
  4220   00355A  6E3D               	movwf	___fltol@exp1^0,c
  4221   00355C  503D               	movf	___fltol@exp1^0,w,c
  4222   00355E  A4D8               	btfss	status,2,c
  4223   003560  EFB4  F01A         	goto	u6161
  4224   003564  EFB6  F01A         	goto	u6160
  4225   003568                     u6161:
  4226   003568  EFC0  F01A         	goto	l6364
  4227   00356C                     u6160:
  4228   00356C                     l6360:
  4229   00356C  0E00               	movlw	0
  4230   00356E  6E34               	movwf	?___fltol^0,c
  4231   003570  0E00               	movlw	0
  4232   003572  6E35               	movwf	(?___fltol+1)^0,c
  4233   003574  0E00               	movlw	0
  4234   003576  6E36               	movwf	(?___fltol+2)^0,c
  4235   003578  0E00               	movlw	0
  4236   00357A  6E37               	movwf	(?___fltol+3)^0,c
  4237   00357C  EF2D  F01B         	goto	l1027
  4238   003580                     l6364:
  4239   003580  C034  F038         	movff	___fltol@f1,??___fltol
  4240   003584  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4241   003588  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4242   00358C  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4243   003590  0E20               	movlw	32
  4244   003592  EFD0  F01A         	goto	u6170
  4245   003596                     u6175:
  4246   003596  90D8               	bcf	status,0,c
  4247   003598  323B               	rrcf	(??___fltol+3)^0,f,c
  4248   00359A  323A               	rrcf	(??___fltol+2)^0,f,c
  4249   00359C  3239               	rrcf	(??___fltol+1)^0,f,c
  4250   00359E  3238               	rrcf	??___fltol^0,f,c
  4251   0035A0                     u6170:
  4252   0035A0  2EE8               	decfsz	wreg,f,c
  4253   0035A2  EFCB  F01A         	goto	u6175
  4254   0035A6  5038               	movf	??___fltol^0,w,c
  4255   0035A8  6E3C               	movwf	___fltol@sign1^0,c
  4256   0035AA  8E36               	bsf	(___fltol@f1+2)^0,7,c
  4257   0035AC  0EFF               	movlw	255
  4258   0035AE  1634               	andwf	___fltol@f1^0,f,c
  4259   0035B0  0EFF               	movlw	255
  4260   0035B2  1635               	andwf	(___fltol@f1+1)^0,f,c
  4261   0035B4  0EFF               	movlw	255
  4262   0035B6  1636               	andwf	(___fltol@f1+2)^0,f,c
  4263   0035B8  0E00               	movlw	0
  4264   0035BA  1637               	andwf	(___fltol@f1+3)^0,f,c
  4265   0035BC  0E96               	movlw	150
  4266   0035BE  5E3D               	subwf	___fltol@exp1^0,f,c
  4267   0035C0  BE3D               	btfsc	___fltol@exp1^0,7,c
  4268   0035C2  EFE7  F01A         	goto	u6180
  4269   0035C6  EFE5  F01A         	goto	u6181
  4270   0035CA                     u6181:
  4271   0035CA  EFFD  F01A         	goto	l6384
  4272   0035CE                     u6180:
  4273   0035CE  503D               	movf	___fltol@exp1^0,w,c
  4274   0035D0  0A80               	xorlw	128
  4275   0035D2  0F97               	addlw	151
  4276   0035D4  B0D8               	btfsc	status,0,c
  4277   0035D6  EFEF  F01A         	goto	u6191
  4278   0035DA  EFF1  F01A         	goto	u6190
  4279   0035DE                     u6191:
  4280   0035DE  EFF3  F01A         	goto	l6380
  4281   0035E2                     u6190:
  4282   0035E2  EFB6  F01A         	goto	l6360
  4283   0035E6                     l6380:
  4284   0035E6  90D8               	bcf	status,0,c
  4285   0035E8  3237               	rrcf	(___fltol@f1+3)^0,f,c
  4286   0035EA  3236               	rrcf	(___fltol@f1+2)^0,f,c
  4287   0035EC  3235               	rrcf	(___fltol@f1+1)^0,f,c
  4288   0035EE  3234               	rrcf	___fltol@f1^0,f,c
  4289   0035F0  3E3D               	incfsz	___fltol@exp1^0,f,c
  4290   0035F2  EFF3  F01A         	goto	l6380
  4291   0035F6  EF15  F01B         	goto	l6394
  4292   0035FA                     l6384:
  4293   0035FA  0E1F               	movlw	31
  4294   0035FC  643D               	cpfsgt	___fltol@exp1^0,c
  4295   0035FE  EF03  F01B         	goto	u6201
  4296   003602  EF05  F01B         	goto	u6200
  4297   003606                     u6201:
  4298   003606  EF0D  F01B         	goto	l6392
  4299   00360A                     u6200:
  4300   00360A  EFB6  F01A         	goto	l6360
  4301   00360E                     l6390:
  4302   00360E  90D8               	bcf	status,0,c
  4303   003610  3634               	rlcf	___fltol@f1^0,f,c
  4304   003612  3635               	rlcf	(___fltol@f1+1)^0,f,c
  4305   003614  3636               	rlcf	(___fltol@f1+2)^0,f,c
  4306   003616  3637               	rlcf	(___fltol@f1+3)^0,f,c
  4307   003618  063D               	decf	___fltol@exp1^0,f,c
  4308   00361A                     l6392:
  4309   00361A  503D               	movf	___fltol@exp1^0,w,c
  4310   00361C  A4D8               	btfss	status,2,c
  4311   00361E  EF13  F01B         	goto	u6211
  4312   003622  EF15  F01B         	goto	u6210
  4313   003626                     u6211:
  4314   003626  EF07  F01B         	goto	l6390
  4315   00362A                     u6210:
  4316   00362A                     l6394:
  4317   00362A  503C               	movf	___fltol@sign1^0,w,c
  4318   00362C  B4D8               	btfsc	status,2,c
  4319   00362E  EF1B  F01B         	goto	u6221
  4320   003632  EF1D  F01B         	goto	u6220
  4321   003636                     u6221:
  4322   003636  EF25  F01B         	goto	l6398
  4323   00363A                     u6220:
  4324   00363A  1E37               	comf	(___fltol@f1+3)^0,f,c
  4325   00363C  1E36               	comf	(___fltol@f1+2)^0,f,c
  4326   00363E  1E35               	comf	(___fltol@f1+1)^0,f,c
  4327   003640  6C34               	negf	___fltol@f1^0,c
  4328   003642  0E00               	movlw	0
  4329   003644  2235               	addwfc	(___fltol@f1+1)^0,f,c
  4330   003646  2236               	addwfc	(___fltol@f1+2)^0,f,c
  4331   003648  2237               	addwfc	(___fltol@f1+3)^0,f,c
  4332   00364A                     l6398:
  4333   00364A  C034  F034         	movff	___fltol@f1,?___fltol
  4334   00364E  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4335   003652  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4336   003656  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4337   00365A                     l1027:
  4338   00365A  0012               	return		;funcret
  4339   00365C                     __end_of___fltol:
  4340                           	callstack 0
  4341                           
  4342 ;; *************** function ___flsub *****************
  4343 ;; Defined at:
  4344 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  b               4   17[COMRAM] long 
  4347 ;;  a               4   21[COMRAM] long 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;		None
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  4   17[COMRAM] long 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0, cstack
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4359 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;Total ram usage:        8 bytes
  4364 ;; Hardware stack levels used: 1
  4365 ;; Hardware stack levels required when called: 2
  4366 ;; This function calls:
  4367 ;;		___fladd
  4368 ;; This function is called by:
  4369 ;;		_convert_rgb2hue
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text13
  4374   0041F0                     __ptext13:
  4375                           	callstack 0
  4376   0041F0                     ___flsub:
  4377                           	callstack 26
  4378   0041F0  0E00               	movlw	0
  4379   0041F2  1A16               	xorwf	___flsub@a^0,f,c
  4380   0041F4  0E00               	movlw	0
  4381   0041F6  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4382   0041F8  0E00               	movlw	0
  4383   0041FA  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4384   0041FC  0E80               	movlw	128
  4385   0041FE  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4386   004200  C012  F002         	movff	___flsub@b,___fladd@b
  4387   004204  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4388   004208  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4389   00420C  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4390   004210  C016  F006         	movff	___flsub@a,___fladd@a
  4391   004214  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4392   004218  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4393   00421C  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4394   004220  EC2C  F00B         	call	___fladd	;wreg free
  4395   004224  C002  F012         	movff	?___fladd,?___flsub
  4396   004228  C003  F013         	movff	?___fladd+1,?___flsub+1
  4397   00422C  C004  F014         	movff	?___fladd+2,?___flsub+2
  4398   004230  C005  F015         	movff	?___fladd+3,?___flsub+3
  4399   004234  0012               	return		;funcret
  4400   004236                     __end_of___flsub:
  4401                           	callstack 0
  4402                           
  4403 ;; *************** function ___fladd *****************
  4404 ;; Defined at:
  4405 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  b               4    1[COMRAM] long 
  4408 ;;  a               4    5[COMRAM] long 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  grs             1   16[COMRAM] unsigned char 
  4411 ;;  bexp            1   15[COMRAM] unsigned char 
  4412 ;;  aexp            1   14[COMRAM] unsigned char 
  4413 ;;  signs           1   13[COMRAM] unsigned char 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  4    1[COMRAM] unsigned char 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2, status,0
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4423 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4424 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4425 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4426 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;Total ram usage:       16 bytes
  4428 ;; Hardware stack levels used: 1
  4429 ;; Hardware stack levels required when called: 1
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_convert_rgb2hue
  4434 ;;		___flsub
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text14
  4439   001658                     __ptext14:
  4440                           	callstack 0
  4441   001658                     ___fladd:
  4442                           	callstack 26
  4443   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4444   00165A  0B80               	andlw	128
  4445   00165C  6E0E               	movwf	___fladd@signs^0,c
  4446   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4447   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4448   001662  6E10               	movwf	___fladd@bexp^0,c
  4449   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4450   001666  EF37  F00B         	goto	u5221
  4451   00166A  EF39  F00B         	goto	u5220
  4452   00166E                     u5221:
  4453   00166E  EF3A  F00B         	goto	l5740
  4454   001672                     u5220:
  4455   001672  8010               	bsf	___fladd@bexp^0,0,c
  4456   001674                     l5740:
  4457   001674  5010               	movf	___fladd@bexp^0,w,c
  4458   001676  B4D8               	btfsc	status,2,c
  4459   001678  EF40  F00B         	goto	u5231
  4460   00167C  EF42  F00B         	goto	u5230
  4461   001680                     u5231:
  4462   001680  EF57  F00B         	goto	l5750
  4463   001684                     u5230:
  4464   001684  2810               	incf	___fladd@bexp^0,w,c
  4465   001686  A4D8               	btfss	status,2,c
  4466   001688  EF48  F00B         	goto	u5241
  4467   00168C  EF4A  F00B         	goto	u5240
  4468   001690                     u5241:
  4469   001690  EF52  F00B         	goto	l5746
  4470   001694                     u5240:
  4471   001694  0E00               	movlw	0
  4472   001696  6E02               	movwf	___fladd@b^0,c
  4473   001698  0E00               	movlw	0
  4474   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4475   00169C  0E00               	movlw	0
  4476   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4477   0016A0  0E00               	movlw	0
  4478   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4479   0016A4                     l5746:
  4480   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4481   0016A6  0E00               	movlw	0
  4482   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4483   0016AA  EF5F  F00B         	goto	l5752
  4484   0016AE                     l5750:
  4485   0016AE  0E00               	movlw	0
  4486   0016B0  6E02               	movwf	___fladd@b^0,c
  4487   0016B2  0E00               	movlw	0
  4488   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4489   0016B6  0E00               	movlw	0
  4490   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4491   0016BA  0E00               	movlw	0
  4492   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4493   0016BE                     l5752:
  4494   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4495   0016C0  0B80               	andlw	128
  4496   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4497   0016C4  500E               	movf	___fladd@signs^0,w,c
  4498   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4499   0016C8  B4D8               	btfsc	status,2,c
  4500   0016CA  EF69  F00B         	goto	u5251
  4501   0016CE  EF6B  F00B         	goto	u5250
  4502   0016D2                     u5251:
  4503   0016D2  EF6C  F00B         	goto	l5758
  4504   0016D6                     u5250:
  4505   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4506   0016D8                     l5758:
  4507   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4508   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4509   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4510   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4511   0016E0  EF74  F00B         	goto	u5261
  4512   0016E4  EF76  F00B         	goto	u5260
  4513   0016E8                     u5261:
  4514   0016E8  EF77  F00B         	goto	l5764
  4515   0016EC                     u5260:
  4516   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4517   0016EE                     l5764:
  4518   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4519   0016F0  B4D8               	btfsc	status,2,c
  4520   0016F2  EF7D  F00B         	goto	u5271
  4521   0016F6  EF7F  F00B         	goto	u5270
  4522   0016FA                     u5271:
  4523   0016FA  EF94  F00B         	goto	l5774
  4524   0016FE                     u5270:
  4525   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4526   001700  A4D8               	btfss	status,2,c
  4527   001702  EF85  F00B         	goto	u5281
  4528   001706  EF87  F00B         	goto	u5280
  4529   00170A                     u5281:
  4530   00170A  EF8F  F00B         	goto	l5770
  4531   00170E                     u5280:
  4532   00170E  0E00               	movlw	0
  4533   001710  6E06               	movwf	___fladd@a^0,c
  4534   001712  0E00               	movlw	0
  4535   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4536   001716  0E00               	movlw	0
  4537   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4538   00171A  0E00               	movlw	0
  4539   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4540   00171E                     l5770:
  4541   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4542   001720  0E00               	movlw	0
  4543   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4544   001724  EF9C  F00B         	goto	l5776
  4545   001728                     l5774:
  4546   001728  0E00               	movlw	0
  4547   00172A  6E06               	movwf	___fladd@a^0,c
  4548   00172C  0E00               	movlw	0
  4549   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4550   001730  0E00               	movlw	0
  4551   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4552   001734  0E00               	movlw	0
  4553   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4554   001738                     l5776:
  4555   001738  5010               	movf	___fladd@bexp^0,w,c
  4556   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4557   00173C  B0D8               	btfsc	status,0,c
  4558   00173E  EFA3  F00B         	goto	u5291
  4559   001742  EFA5  F00B         	goto	u5290
  4560   001746                     u5291:
  4561   001746  EFCC  F00B         	goto	l5812
  4562   00174A                     u5290:
  4563   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4564   00174C  EFAA  F00B         	goto	u5301
  4565   001750  EFAC  F00B         	goto	u5300
  4566   001754                     u5301:
  4567   001754  EFAE  F00B         	goto	l5782
  4568   001758                     u5300:
  4569   001758  0E80               	movlw	128
  4570   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4571   00175C                     l5782:
  4572   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4573   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4574   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4575   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4576   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4577   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4578   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4579   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4580   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4581   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4582   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4583   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4584   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4585   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4586   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4587   001798                     l5812:
  4588   001798  0E00               	movlw	0
  4589   00179A  6E11               	movwf	___fladd@grs^0,c
  4590   00179C  5010               	movf	___fladd@bexp^0,w,c
  4591   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4592   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4593   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4594   0017A6  0E00               	movlw	0
  4595   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4596   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4597   0017AC  EFE1  F00B         	goto	u5311
  4598   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4599   0017B2  E109               	bnz	u5310
  4600   0017B4  0E1A               	movlw	26
  4601   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4602   0017B8  A0D8               	btfss	status,0,c
  4603   0017BA  EFE1  F00B         	goto	u5311
  4604   0017BE  EFE3  F00B         	goto	u5310
  4605   0017C2                     u5311:
  4606   0017C2  EF1A  F00C         	goto	l1259
  4607   0017C6                     u5310:
  4608   0017C6  5002               	movf	___fladd@b^0,w,c
  4609   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4610   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4611   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4612   0017CE  A4D8               	btfss	status,2,c
  4613   0017D0  EFEC  F00B         	goto	u5321
  4614   0017D4  EFEF  F00B         	goto	u5320
  4615   0017D8                     u5321:
  4616   0017D8  0E01               	movlw	1
  4617   0017DA  EFF0  F00B         	goto	u5330
  4618   0017DE                     u5320:
  4619   0017DE  0E00               	movlw	0
  4620   0017E0                     u5330:
  4621   0017E0  6E11               	movwf	___fladd@grs^0,c
  4622   0017E2  0E00               	movlw	0
  4623   0017E4  6E02               	movwf	___fladd@b^0,c
  4624   0017E6  0E00               	movlw	0
  4625   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4626   0017EA  0E00               	movlw	0
  4627   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4628   0017EE  0E00               	movlw	0
  4629   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4630   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4631   0017F6  EF23  F00C         	goto	l1258
  4632   0017FA                     l1260:
  4633   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4634   0017FC  EF02  F00C         	goto	u5341
  4635   001800  EF04  F00C         	goto	u5340
  4636   001804                     u5341:
  4637   001804  EF0A  F00C         	goto	l5824
  4638   001808                     u5340:
  4639   001808  90D8               	bcf	status,0,c
  4640   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4641   00180C  0901               	iorlw	1
  4642   00180E  6E11               	movwf	___fladd@grs^0,c
  4643   001810  EF0C  F00C         	goto	l5826
  4644   001814                     l5824:
  4645   001814  90D8               	bcf	status,0,c
  4646   001816  3211               	rrcf	___fladd@grs^0,f,c
  4647   001818                     l5826:
  4648   001818  A002               	btfss	___fladd@b^0,0,c
  4649   00181A  EF11  F00C         	goto	u5351
  4650   00181E  EF13  F00C         	goto	u5350
  4651   001822                     u5351:
  4652   001822  EF14  F00C         	goto	l5830
  4653   001826                     u5350:
  4654   001826  8E11               	bsf	___fladd@grs^0,7,c
  4655   001828                     l5830:
  4656   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4657   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4658   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4659   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4660   001830  3202               	rrcf	___fladd@b^0,f,c
  4661   001832  2A10               	incf	___fladd@bexp^0,f,c
  4662   001834                     l1259:
  4663   001834  500F               	movf	___fladd@aexp^0,w,c
  4664   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4665   001838  A0D8               	btfss	status,0,c
  4666   00183A  EF21  F00C         	goto	u5361
  4667   00183E  EF23  F00C         	goto	u5360
  4668   001842                     u5361:
  4669   001842  EFFD  F00B         	goto	l1260
  4670   001846                     u5360:
  4671   001846                     l1258:
  4672   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4673   001848  EF28  F00C         	goto	u5371
  4674   00184C  EF2A  F00C         	goto	u5370
  4675   001850                     u5371:
  4676   001850  EF6A  F00C         	goto	l5858
  4677   001854                     u5370:
  4678   001854  5010               	movf	___fladd@bexp^0,w,c
  4679   001856  A4D8               	btfss	status,2,c
  4680   001858  EF30  F00C         	goto	u5381
  4681   00185C  EF32  F00C         	goto	u5380
  4682   001860                     u5381:
  4683   001860  EF3C  F00C         	goto	l5840
  4684   001864                     u5380:
  4685   001864  0E00               	movlw	0
  4686   001866  6E02               	movwf	?___fladd^0,c
  4687   001868  0E00               	movlw	0
  4688   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4689   00186C  0E00               	movlw	0
  4690   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4691   001870  0E00               	movlw	0
  4692   001872  6E05               	movwf	(?___fladd+3)^0,c
  4693   001874  EF8B  F00D         	goto	l1267
  4694   001878                     l5840:
  4695   001878  5006               	movf	___fladd@a^0,w,c
  4696   00187A  2602               	addwf	___fladd@b^0,f,c
  4697   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4698   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4699   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4700   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4701   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4702   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4703   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4704   00188A  EF49  F00C         	goto	u5391
  4705   00188E  EF4B  F00C         	goto	u5390
  4706   001892                     u5391:
  4707   001892  EFF7  F00C         	goto	l5894
  4708   001896                     u5390:
  4709   001896  A011               	btfss	___fladd@grs^0,0,c
  4710   001898  EF50  F00C         	goto	u5401
  4711   00189C  EF52  F00C         	goto	u5400
  4712   0018A0                     u5401:
  4713   0018A0  EF58  F00C         	goto	l5848
  4714   0018A4                     u5400:
  4715   0018A4  90D8               	bcf	status,0,c
  4716   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4717   0018A8  0901               	iorlw	1
  4718   0018AA  6E11               	movwf	___fladd@grs^0,c
  4719   0018AC  EF5A  F00C         	goto	l5850
  4720   0018B0                     l5848:
  4721   0018B0  90D8               	bcf	status,0,c
  4722   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4723   0018B4                     l5850:
  4724   0018B4  A002               	btfss	___fladd@b^0,0,c
  4725   0018B6  EF5F  F00C         	goto	u5411
  4726   0018BA  EF61  F00C         	goto	u5410
  4727   0018BE                     u5411:
  4728   0018BE  EF62  F00C         	goto	l5854
  4729   0018C2                     u5410:
  4730   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4731   0018C4                     l5854:
  4732   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4733   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4734   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4735   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4736   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4737   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4738   0018D0  EFF7  F00C         	goto	l5894
  4739   0018D4                     l5858:
  4740   0018D4  5006               	movf	___fladd@a^0,w,c
  4741   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4742   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4743   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4744   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4745   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4746   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4747   0018E2  0A80               	xorlw	128
  4748   0018E4  6E0A               	movwf	??___fladd^0,c
  4749   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4750   0018E8  0A80               	xorlw	128
  4751   0018EA  580A               	subwfb	??___fladd^0,w,c
  4752   0018EC  B0D8               	btfsc	status,0,c
  4753   0018EE  EF7B  F00C         	goto	u5421
  4754   0018F2  EF7D  F00C         	goto	u5420
  4755   0018F6                     u5421:
  4756   0018F6  EFA8  F00C         	goto	l5868
  4757   0018FA                     u5420:
  4758   0018FA  5002               	movf	___fladd@b^0,w,c
  4759   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4760   0018FE  6E0A               	movwf	??___fladd^0,c
  4761   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4762   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4763   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4764   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4765   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4766   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4767   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4768   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4769   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4770   001912  0EFF               	movlw	255
  4771   001914  240A               	addwf	??___fladd^0,w,c
  4772   001916  6E02               	movwf	___fladd@b^0,c
  4773   001918  0EFF               	movlw	255
  4774   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4775   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4776   00191E  0EFF               	movlw	255
  4777   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4778   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4779   001924  0EFF               	movlw	255
  4780   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4781   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4782   00192A  0E80               	movlw	128
  4783   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4784   00192E  6C11               	negf	___fladd@grs^0,c
  4785   001930  5011               	movf	___fladd@grs^0,w,c
  4786   001932  A4D8               	btfss	status,2,c
  4787   001934  EF9E  F00C         	goto	u5431
  4788   001938  EFA0  F00C         	goto	u5430
  4789   00193C                     u5431:
  4790   00193C  EFB0  F00C         	goto	l1275
  4791   001940                     u5430:
  4792   001940  0E01               	movlw	1
  4793   001942  2602               	addwf	___fladd@b^0,f,c
  4794   001944  0E00               	movlw	0
  4795   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4796   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4797   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4798   00194C  EFB0  F00C         	goto	l1275
  4799   001950                     l5868:
  4800   001950  5006               	movf	___fladd@a^0,w,c
  4801   001952  5E02               	subwf	___fladd@b^0,f,c
  4802   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4803   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4804   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4805   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4806   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4807   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4808   001960                     l1275:
  4809   001960  5002               	movf	___fladd@b^0,w,c
  4810   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4811   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4812   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4813   001968  A4D8               	btfss	status,2,c
  4814   00196A  EFB9  F00C         	goto	u5441
  4815   00196E  EFBB  F00C         	goto	u5440
  4816   001972                     u5441:
  4817   001972  EFF0  F00C         	goto	l5892
  4818   001976                     u5440:
  4819   001976  5011               	movf	___fladd@grs^0,w,c
  4820   001978  A4D8               	btfss	status,2,c
  4821   00197A  EFC1  F00C         	goto	u5451
  4822   00197E  EFC3  F00C         	goto	u5450
  4823   001982                     u5451:
  4824   001982  EFF0  F00C         	goto	l5892
  4825   001986                     u5450:
  4826   001986  0E00               	movlw	0
  4827   001988  6E02               	movwf	?___fladd^0,c
  4828   00198A  0E00               	movlw	0
  4829   00198C  6E03               	movwf	(?___fladd+1)^0,c
  4830   00198E  0E00               	movlw	0
  4831   001990  6E04               	movwf	(?___fladd+2)^0,c
  4832   001992  0E00               	movlw	0
  4833   001994  6E05               	movwf	(?___fladd+3)^0,c
  4834   001996  EF8B  F00D         	goto	l1267
  4835   00199A                     l5876:
  4836   00199A  90D8               	bcf	status,0,c
  4837   00199C  3602               	rlcf	___fladd@b^0,f,c
  4838   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  4839   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  4840   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  4841   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  4842   0019A6  EFD7  F00C         	goto	u5461
  4843   0019AA  EFD9  F00C         	goto	u5460
  4844   0019AE                     u5461:
  4845   0019AE  EFDA  F00C         	goto	l5882
  4846   0019B2                     u5460:
  4847   0019B2  8002               	bsf	___fladd@b^0,0,c
  4848   0019B4                     l5882:
  4849   0019B4  A011               	btfss	___fladd@grs^0,0,c
  4850   0019B6  EFDF  F00C         	goto	u5471
  4851   0019BA  EFE1  F00C         	goto	u5470
  4852   0019BE                     u5471:
  4853   0019BE  EFE5  F00C         	goto	l5886
  4854   0019C2                     u5470:
  4855   0019C2  80D8               	bsf	status,0,c
  4856   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  4857   0019C6  EFE7  F00C         	goto	l5888
  4858   0019CA                     l5886:
  4859   0019CA  90D8               	bcf	status,0,c
  4860   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  4861   0019CE                     l5888:
  4862   0019CE  5010               	movf	___fladd@bexp^0,w,c
  4863   0019D0  B4D8               	btfsc	status,2,c
  4864   0019D2  EFED  F00C         	goto	u5481
  4865   0019D6  EFEF  F00C         	goto	u5480
  4866   0019DA                     u5481:
  4867   0019DA  EFF0  F00C         	goto	l5892
  4868   0019DE                     u5480:
  4869   0019DE  0610               	decf	___fladd@bexp^0,f,c
  4870   0019E0                     l5892:
  4871   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  4872   0019E2  EFF5  F00C         	goto	u5491
  4873   0019E6  EFF7  F00C         	goto	u5490
  4874   0019EA                     u5491:
  4875   0019EA  EFCD  F00C         	goto	l5876
  4876   0019EE                     u5490:
  4877   0019EE                     l5894:
  4878   0019EE  0E00               	movlw	0
  4879   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  4880   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  4881   0019F4  EFFE  F00C         	goto	u5501
  4882   0019F8  EF00  F00D         	goto	u5500
  4883   0019FC                     u5501:
  4884   0019FC  EF18  F00D         	goto	l1284
  4885   001A00                     u5500:
  4886   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  4887   001A04  0E7F               	movlw	127
  4888   001A06  160A               	andwf	??___fladd^0,f,c
  4889   001A08  B4D8               	btfsc	status,2,c
  4890   001A0A  EF09  F00D         	goto	u5511
  4891   001A0E  EF0B  F00D         	goto	u5510
  4892   001A12                     u5511:
  4893   001A12  EF0F  F00D         	goto	l1285
  4894   001A16                     u5510:
  4895   001A16                     l5900:
  4896   001A16  0E01               	movlw	1
  4897   001A18  6E0F               	movwf	___fladd@aexp^0,c
  4898   001A1A  EF18  F00D         	goto	l1284
  4899   001A1E                     l1285:
  4900   001A1E  A002               	btfss	___fladd@b^0,0,c
  4901   001A20  EF14  F00D         	goto	u5521
  4902   001A24  EF16  F00D         	goto	u5520
  4903   001A28                     u5521:
  4904   001A28  EF18  F00D         	goto	l1284
  4905   001A2C                     u5520:
  4906   001A2C  EF0B  F00D         	goto	l5900
  4907   001A30                     l1284:
  4908   001A30  500F               	movf	___fladd@aexp^0,w,c
  4909   001A32  B4D8               	btfsc	status,2,c
  4910   001A34  EF1E  F00D         	goto	u5531
  4911   001A38  EF20  F00D         	goto	u5530
  4912   001A3C                     u5531:
  4913   001A3C  EF4B  F00D         	goto	l5912
  4914   001A40                     u5530:
  4915   001A40  0E01               	movlw	1
  4916   001A42  2602               	addwf	___fladd@b^0,f,c
  4917   001A44  0E00               	movlw	0
  4918   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  4919   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  4920   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4921   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  4922   001A4E  EF2B  F00D         	goto	u5541
  4923   001A52  EF2D  F00D         	goto	u5540
  4924   001A56                     u5541:
  4925   001A56  EF4B  F00D         	goto	l5912
  4926   001A5A                     u5540:
  4927   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  4928   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4929   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4930   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4931   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  4932   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  4933   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  4934   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  4935   001A72  320A               	rrcf	??___fladd^0,f,c
  4936   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  4937   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4938   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4939   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4940   001A84  2810               	incf	___fladd@bexp^0,w,c
  4941   001A86  B4D8               	btfsc	status,2,c
  4942   001A88  EF48  F00D         	goto	u5551
  4943   001A8C  EF4A  F00D         	goto	u5550
  4944   001A90                     u5551:
  4945   001A90  EF4B  F00D         	goto	l5912
  4946   001A94                     u5550:
  4947   001A94  2A10               	incf	___fladd@bexp^0,f,c
  4948   001A96                     l5912:
  4949   001A96  2810               	incf	___fladd@bexp^0,w,c
  4950   001A98  B4D8               	btfsc	status,2,c
  4951   001A9A  EF51  F00D         	goto	u5561
  4952   001A9E  EF53  F00D         	goto	u5560
  4953   001AA2                     u5561:
  4954   001AA2  EF5B  F00D         	goto	l5916
  4955   001AA6                     u5560:
  4956   001AA6  5010               	movf	___fladd@bexp^0,w,c
  4957   001AA8  A4D8               	btfss	status,2,c
  4958   001AAA  EF59  F00D         	goto	u5571
  4959   001AAE  EF5B  F00D         	goto	u5570
  4960   001AB2                     u5571:
  4961   001AB2  EF6D  F00D         	goto	l5920
  4962   001AB6                     u5570:
  4963   001AB6                     l5916:
  4964   001AB6  0E00               	movlw	0
  4965   001AB8  6E02               	movwf	___fladd@b^0,c
  4966   001ABA  0E00               	movlw	0
  4967   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  4968   001ABE  0E00               	movlw	0
  4969   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  4970   001AC2  0E00               	movlw	0
  4971   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  4972   001AC6  5010               	movf	___fladd@bexp^0,w,c
  4973   001AC8  A4D8               	btfss	status,2,c
  4974   001ACA  EF69  F00D         	goto	u5581
  4975   001ACE  EF6B  F00D         	goto	u5580
  4976   001AD2                     u5581:
  4977   001AD2  EF6D  F00D         	goto	l5920
  4978   001AD6                     u5580:
  4979   001AD6  0E00               	movlw	0
  4980   001AD8  6E0E               	movwf	___fladd@signs^0,c
  4981   001ADA                     l5920:
  4982   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  4983   001ADC  EF72  F00D         	goto	u5591
  4984   001AE0  EF74  F00D         	goto	u5590
  4985   001AE4                     u5591:
  4986   001AE4  EF77  F00D         	goto	l5924
  4987   001AE8                     u5590:
  4988   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  4989   001AEA  EF78  F00D         	goto	l5926
  4990   001AEE                     l5924:
  4991   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  4992   001AF0                     l5926:
  4993   001AF0  90D8               	bcf	status,0,c
  4994   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  4995   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  4996   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  4997   001AF8  EF80  F00D         	goto	u5601
  4998   001AFC  EF82  F00D         	goto	u5600
  4999   001B00                     u5601:
  5000   001B00  EF83  F00D         	goto	l5932
  5001   001B04                     u5600:
  5002   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5003   001B06                     l5932:
  5004   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5005   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5006   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5007   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5008   001B16                     l1267:
  5009   001B16  0012               	return		;funcret
  5010   001B18                     __end_of___fladd:
  5011                           	callstack 0
  5012                           
  5013 ;; *************** function ___flmul *****************
  5014 ;; Defined at:
  5015 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  b               4    1[COMRAM] unsigned char 
  5018 ;;  a               4    5[COMRAM] unsigned char 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;  prod            4   20[COMRAM] struct .
  5021 ;;  grs             4   15[COMRAM] unsigned long 
  5022 ;;  temp            2   24[COMRAM] struct .
  5023 ;;  bexp            1   19[COMRAM] unsigned char 
  5024 ;;  aexp            1   14[COMRAM] unsigned char 
  5025 ;;  sign            1   13[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  4    1[COMRAM] unsigned char 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, prodl, prodh
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5035 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5036 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5038 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5039 ;;Total ram usage:       25 bytes
  5040 ;; Hardware stack levels used: 1
  5041 ;; Hardware stack levels required when called: 1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_convert_rgb2hue
  5046 ;;		_main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text15
  5051   001F7E                     __ptext15:
  5052                           	callstack 0
  5053   001F7E                     ___flmul:
  5054                           	callstack 27
  5055   001F7E  5005               	movf	(___flmul@b+3)^0,w,c
  5056   001F80  0B80               	andlw	128
  5057   001F82  6E0E               	movwf	___flmul@sign^0,c
  5058   001F84  5005               	movf	(___flmul@b+3)^0,w,c
  5059   001F86  2405               	addwf	(___flmul@b+3)^0,w,c
  5060   001F88  6E14               	movwf	___flmul@bexp^0,c
  5061   001F8A  AE04               	btfss	(___flmul@b+2)^0,7,c
  5062   001F8C  EFCA  F00F         	goto	u5891
  5063   001F90  EFCC  F00F         	goto	u5890
  5064   001F94                     u5891:
  5065   001F94  EFCD  F00F         	goto	l6190
  5066   001F98                     u5890:
  5067   001F98  8014               	bsf	___flmul@bexp^0,0,c
  5068   001F9A                     l6190:
  5069   001F9A  5014               	movf	___flmul@bexp^0,w,c
  5070   001F9C  B4D8               	btfsc	status,2,c
  5071   001F9E  EFD3  F00F         	goto	u5901
  5072   001FA2  EFD5  F00F         	goto	u5900
  5073   001FA6                     u5901:
  5074   001FA6  EFE8  F00F         	goto	l6198
  5075   001FAA                     u5900:
  5076   001FAA  2814               	incf	___flmul@bexp^0,w,c
  5077   001FAC  A4D8               	btfss	status,2,c
  5078   001FAE  EFDB  F00F         	goto	u5911
  5079   001FB2  EFDD  F00F         	goto	u5910
  5080   001FB6                     u5911:
  5081   001FB6  EFE5  F00F         	goto	l6196
  5082   001FBA                     u5910:
  5083   001FBA  0E00               	movlw	0
  5084   001FBC  6E02               	movwf	___flmul@b^0,c
  5085   001FBE  0E00               	movlw	0
  5086   001FC0  6E03               	movwf	(___flmul@b+1)^0,c
  5087   001FC2  0E00               	movlw	0
  5088   001FC4  6E04               	movwf	(___flmul@b+2)^0,c
  5089   001FC6  0E00               	movlw	0
  5090   001FC8  6E05               	movwf	(___flmul@b+3)^0,c
  5091   001FCA                     l6196:
  5092   001FCA  8E04               	bsf	(___flmul@b+2)^0,7,c
  5093   001FCC  EFF0  F00F         	goto	l6200
  5094   001FD0                     l6198:
  5095   001FD0  0E00               	movlw	0
  5096   001FD2  6E02               	movwf	___flmul@b^0,c
  5097   001FD4  0E00               	movlw	0
  5098   001FD6  6E03               	movwf	(___flmul@b+1)^0,c
  5099   001FD8  0E00               	movlw	0
  5100   001FDA  6E04               	movwf	(___flmul@b+2)^0,c
  5101   001FDC  0E00               	movlw	0
  5102   001FDE  6E05               	movwf	(___flmul@b+3)^0,c
  5103   001FE0                     l6200:
  5104   001FE0  5009               	movf	(___flmul@a+3)^0,w,c
  5105   001FE2  0B80               	andlw	128
  5106   001FE4  1A0E               	xorwf	___flmul@sign^0,f,c
  5107   001FE6  5009               	movf	(___flmul@a+3)^0,w,c
  5108   001FE8  2409               	addwf	(___flmul@a+3)^0,w,c
  5109   001FEA  6E0F               	movwf	___flmul@aexp^0,c
  5110   001FEC  AE08               	btfss	(___flmul@a+2)^0,7,c
  5111   001FEE  EFFB  F00F         	goto	u5921
  5112   001FF2  EFFD  F00F         	goto	u5920
  5113   001FF6                     u5921:
  5114   001FF6  EFFE  F00F         	goto	l6208
  5115   001FFA                     u5920:
  5116   001FFA  800F               	bsf	___flmul@aexp^0,0,c
  5117   001FFC                     l6208:
  5118   001FFC  500F               	movf	___flmul@aexp^0,w,c
  5119   001FFE  B4D8               	btfsc	status,2,c
  5120   002000  EF04  F010         	goto	u5931
  5121   002004  EF06  F010         	goto	u5930
  5122   002008                     u5931:
  5123   002008  EF19  F010         	goto	l6216
  5124   00200C                     u5930:
  5125   00200C  280F               	incf	___flmul@aexp^0,w,c
  5126   00200E  A4D8               	btfss	status,2,c
  5127   002010  EF0C  F010         	goto	u5941
  5128   002014  EF0E  F010         	goto	u5940
  5129   002018                     u5941:
  5130   002018  EF16  F010         	goto	l6214
  5131   00201C                     u5940:
  5132   00201C  0E00               	movlw	0
  5133   00201E  6E06               	movwf	___flmul@a^0,c
  5134   002020  0E00               	movlw	0
  5135   002022  6E07               	movwf	(___flmul@a+1)^0,c
  5136   002024  0E00               	movlw	0
  5137   002026  6E08               	movwf	(___flmul@a+2)^0,c
  5138   002028  0E00               	movlw	0
  5139   00202A  6E09               	movwf	(___flmul@a+3)^0,c
  5140   00202C                     l6214:
  5141   00202C  8E08               	bsf	(___flmul@a+2)^0,7,c
  5142   00202E  EF21  F010         	goto	l1344
  5143   002032                     l6216:
  5144   002032  0E00               	movlw	0
  5145   002034  6E06               	movwf	___flmul@a^0,c
  5146   002036  0E00               	movlw	0
  5147   002038  6E07               	movwf	(___flmul@a+1)^0,c
  5148   00203A  0E00               	movlw	0
  5149   00203C  6E08               	movwf	(___flmul@a+2)^0,c
  5150   00203E  0E00               	movlw	0
  5151   002040  6E09               	movwf	(___flmul@a+3)^0,c
  5152   002042                     l1344:
  5153   002042  500F               	movf	___flmul@aexp^0,w,c
  5154   002044  B4D8               	btfsc	status,2,c
  5155   002046  EF27  F010         	goto	u5951
  5156   00204A  EF29  F010         	goto	u5950
  5157   00204E                     u5951:
  5158   00204E  EF31  F010         	goto	l6220
  5159   002052                     u5950:
  5160   002052  5014               	movf	___flmul@bexp^0,w,c
  5161   002054  A4D8               	btfss	status,2,c
  5162   002056  EF2F  F010         	goto	u5961
  5163   00205A  EF31  F010         	goto	u5960
  5164   00205E                     u5961:
  5165   00205E  EF3B  F010         	goto	l6224
  5166   002062                     u5960:
  5167   002062                     l6220:
  5168   002062  0E00               	movlw	0
  5169   002064  6E02               	movwf	?___flmul^0,c
  5170   002066  0E00               	movlw	0
  5171   002068  6E03               	movwf	(?___flmul+1)^0,c
  5172   00206A  0E00               	movlw	0
  5173   00206C  6E04               	movwf	(?___flmul+2)^0,c
  5174   00206E  0E00               	movlw	0
  5175   002070  6E05               	movwf	(?___flmul+3)^0,c
  5176   002072  EFD3  F011         	goto	l1348
  5177   002076                     l6224:
  5178   002076  5008               	movf	(___flmul@a+2)^0,w,c
  5179   002078  0202               	mulwf	___flmul@b^0,c
  5180   00207A  CFF3 F019          	movff	prodl,___flmul@temp
  5181   00207E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5182   002082  5019               	movf	___flmul@temp^0,w,c
  5183   002084  6E10               	movwf	___flmul@grs^0,c
  5184   002086  6A11               	clrf	(___flmul@grs+1)^0,c
  5185   002088  6A12               	clrf	(___flmul@grs+2)^0,c
  5186   00208A  6A13               	clrf	(___flmul@grs+3)^0,c
  5187   00208C  501A               	movf	(___flmul@temp+1)^0,w,c
  5188   00208E  6E15               	movwf	___flmul@prod^0,c
  5189   002090  6A16               	clrf	(___flmul@prod+1)^0,c
  5190   002092  6A17               	clrf	(___flmul@prod+2)^0,c
  5191   002094  6A18               	clrf	(___flmul@prod+3)^0,c
  5192   002096  5007               	movf	(___flmul@a+1)^0,w,c
  5193   002098  0203               	mulwf	(___flmul@b+1)^0,c
  5194   00209A  CFF3 F019          	movff	prodl,___flmul@temp
  5195   00209E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5196   0020A2  5019               	movf	___flmul@temp^0,w,c
  5197   0020A4  2610               	addwf	___flmul@grs^0,f,c
  5198   0020A6  0E00               	movlw	0
  5199   0020A8  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5200   0020AA  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5201   0020AC  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5202   0020AE  501A               	movf	(___flmul@temp+1)^0,w,c
  5203   0020B0  2615               	addwf	___flmul@prod^0,f,c
  5204   0020B2  0E00               	movlw	0
  5205   0020B4  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5206   0020B6  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5207   0020B8  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5208   0020BA  5006               	movf	___flmul@a^0,w,c
  5209   0020BC  0204               	mulwf	(___flmul@b+2)^0,c
  5210   0020BE  CFF3 F019          	movff	prodl,___flmul@temp
  5211   0020C2  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5212   0020C6  5019               	movf	___flmul@temp^0,w,c
  5213   0020C8  2610               	addwf	___flmul@grs^0,f,c
  5214   0020CA  0E00               	movlw	0
  5215   0020CC  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5216   0020CE  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5217   0020D0  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5218   0020D2  501A               	movf	(___flmul@temp+1)^0,w,c
  5219   0020D4  2615               	addwf	___flmul@prod^0,f,c
  5220   0020D6  0E00               	movlw	0
  5221   0020D8  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5222   0020DA  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5223   0020DC  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5224   0020DE  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5225   0020E2  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5226   0020E6  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5227   0020EA  6A10               	clrf	___flmul@grs^0,c
  5228   0020EC  5006               	movf	___flmul@a^0,w,c
  5229   0020EE  0203               	mulwf	(___flmul@b+1)^0,c
  5230   0020F0  CFF3 F019          	movff	prodl,___flmul@temp
  5231   0020F4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5232   0020F8  5019               	movf	___flmul@temp^0,w,c
  5233   0020FA  2610               	addwf	___flmul@grs^0,f,c
  5234   0020FC  501A               	movf	(___flmul@temp+1)^0,w,c
  5235   0020FE  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5236   002100  0E00               	movlw	0
  5237   002102  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5238   002104  0E00               	movlw	0
  5239   002106  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5240   002108  5007               	movf	(___flmul@a+1)^0,w,c
  5241   00210A  0202               	mulwf	___flmul@b^0,c
  5242   00210C  CFF3 F019          	movff	prodl,___flmul@temp
  5243   002110  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5244   002114  5019               	movf	___flmul@temp^0,w,c
  5245   002116  2610               	addwf	___flmul@grs^0,f,c
  5246   002118  501A               	movf	(___flmul@temp+1)^0,w,c
  5247   00211A  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5248   00211C  0E00               	movlw	0
  5249   00211E  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5250   002120  0E00               	movlw	0
  5251   002122  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5252   002124  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5253   002128  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5254   00212C  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5255   002130  6A10               	clrf	___flmul@grs^0,c
  5256   002132  5006               	movf	___flmul@a^0,w,c
  5257   002134  0202               	mulwf	___flmul@b^0,c
  5258   002136  CFF3 F019          	movff	prodl,___flmul@temp
  5259   00213A  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5260   00213E  5019               	movf	___flmul@temp^0,w,c
  5261   002140  2610               	addwf	___flmul@grs^0,f,c
  5262   002142  501A               	movf	(___flmul@temp+1)^0,w,c
  5263   002144  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5264   002146  0E00               	movlw	0
  5265   002148  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5266   00214A  0E00               	movlw	0
  5267   00214C  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5268   00214E  5008               	movf	(___flmul@a+2)^0,w,c
  5269   002150  0203               	mulwf	(___flmul@b+1)^0,c
  5270   002152  CFF3 F019          	movff	prodl,___flmul@temp
  5271   002156  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5272   00215A  5019               	movf	___flmul@temp^0,w,c
  5273   00215C  2615               	addwf	___flmul@prod^0,f,c
  5274   00215E  501A               	movf	(___flmul@temp+1)^0,w,c
  5275   002160  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5276   002162  0E00               	movlw	0
  5277   002164  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5278   002166  0E00               	movlw	0
  5279   002168  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5280   00216A  5007               	movf	(___flmul@a+1)^0,w,c
  5281   00216C  0204               	mulwf	(___flmul@b+2)^0,c
  5282   00216E  CFF3 F019          	movff	prodl,___flmul@temp
  5283   002172  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5284   002176  5019               	movf	___flmul@temp^0,w,c
  5285   002178  2615               	addwf	___flmul@prod^0,f,c
  5286   00217A  501A               	movf	(___flmul@temp+1)^0,w,c
  5287   00217C  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5288   00217E  0E00               	movlw	0
  5289   002180  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5290   002182  0E00               	movlw	0
  5291   002184  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5292   002186  5008               	movf	(___flmul@a+2)^0,w,c
  5293   002188  0204               	mulwf	(___flmul@b+2)^0,c
  5294   00218A  CFF3 F019          	movff	prodl,___flmul@temp
  5295   00218E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5296   002192  5019               	movf	___flmul@temp^0,w,c
  5297   002194  6E0A               	movwf	??___flmul^0,c
  5298   002196  501A               	movf	(___flmul@temp+1)^0,w,c
  5299   002198  6E0B               	movwf	(??___flmul+1)^0,c
  5300   00219A  6A0C               	clrf	(??___flmul+2)^0,c
  5301   00219C  6A0D               	clrf	(??___flmul+3)^0,c
  5302   00219E  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  5303   0021A2  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  5304   0021A6  C00A  F00B         	movff	??___flmul,??___flmul+1
  5305   0021AA  6A0A               	clrf	??___flmul^0,c
  5306   0021AC  500A               	movf	??___flmul^0,w,c
  5307   0021AE  2615               	addwf	___flmul@prod^0,f,c
  5308   0021B0  500B               	movf	(??___flmul+1)^0,w,c
  5309   0021B2  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5310   0021B4  500C               	movf	(??___flmul+2)^0,w,c
  5311   0021B6  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5312   0021B8  500D               	movf	(??___flmul+3)^0,w,c
  5313   0021BA  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5314   0021BC  C010  F00A         	movff	___flmul@grs,??___flmul
  5315   0021C0  C011  F00B         	movff	___flmul@grs+1,??___flmul+1
  5316   0021C4  C012  F00C         	movff	___flmul@grs+2,??___flmul+2
  5317   0021C8  C013  F00D         	movff	___flmul@grs+3,??___flmul+3
  5318   0021CC  0E19               	movlw	25
  5319   0021CE  EFEE  F010         	goto	u5970
  5320   0021D2                     u5975:
  5321   0021D2  90D8               	bcf	status,0,c
  5322   0021D4  320D               	rrcf	(??___flmul+3)^0,f,c
  5323   0021D6  320C               	rrcf	(??___flmul+2)^0,f,c
  5324   0021D8  320B               	rrcf	(??___flmul+1)^0,f,c
  5325   0021DA  320A               	rrcf	??___flmul^0,f,c
  5326   0021DC                     u5970:
  5327   0021DC  2EE8               	decfsz	wreg,f,c
  5328   0021DE  EFE9  F010         	goto	u5975
  5329   0021E2  500A               	movf	??___flmul^0,w,c
  5330   0021E4  2615               	addwf	___flmul@prod^0,f,c
  5331   0021E6  500B               	movf	(??___flmul+1)^0,w,c
  5332   0021E8  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5333   0021EA  500C               	movf	(??___flmul+2)^0,w,c
  5334   0021EC  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5335   0021EE  500D               	movf	(??___flmul+3)^0,w,c
  5336   0021F0  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5337   0021F2  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5338   0021F6  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5339   0021FA  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5340   0021FE  6A10               	clrf	___flmul@grs^0,c
  5341   002200  500F               	movf	___flmul@aexp^0,w,c
  5342   002202  C014  F00A         	movff	___flmul@bexp,??___flmul
  5343   002206  6A0B               	clrf	(??___flmul+1)^0,c
  5344   002208  260A               	addwf	??___flmul^0,f,c
  5345   00220A  0E00               	movlw	0
  5346   00220C  220B               	addwfc	(??___flmul+1)^0,f,c
  5347   00220E  0E82               	movlw	130
  5348   002210  240A               	addwf	??___flmul^0,w,c
  5349   002212  6E19               	movwf	___flmul@temp^0,c
  5350   002214  0EFF               	movlw	255
  5351   002216  200B               	addwfc	(??___flmul+1)^0,w,c
  5352   002218  6E1A               	movwf	(___flmul@temp+1)^0,c
  5353   00221A  EF24  F011         	goto	l6272
  5354   00221E                     l6266:
  5355   00221E  90D8               	bcf	status,0,c
  5356   002220  3615               	rlcf	___flmul@prod^0,f,c
  5357   002222  3616               	rlcf	(___flmul@prod+1)^0,f,c
  5358   002224  3617               	rlcf	(___flmul@prod+2)^0,f,c
  5359   002226  3618               	rlcf	(___flmul@prod+3)^0,f,c
  5360   002228  AE13               	btfss	(___flmul@grs+3)^0,7,c
  5361   00222A  EF19  F011         	goto	u5981
  5362   00222E  EF1B  F011         	goto	u5980
  5363   002232                     u5981:
  5364   002232  EF1C  F011         	goto	l1351
  5365   002236                     u5980:
  5366   002236  8015               	bsf	___flmul@prod^0,0,c
  5367   002238                     l1351:
  5368   002238  90D8               	bcf	status,0,c
  5369   00223A  3610               	rlcf	___flmul@grs^0,f,c
  5370   00223C  3611               	rlcf	(___flmul@grs+1)^0,f,c
  5371   00223E  3612               	rlcf	(___flmul@grs+2)^0,f,c
  5372   002240  3613               	rlcf	(___flmul@grs+3)^0,f,c
  5373   002242  0619               	decf	___flmul@temp^0,f,c
  5374   002244  A0D8               	btfss	status,0,c
  5375   002246  061A               	decf	(___flmul@temp+1)^0,f,c
  5376   002248                     l6272:
  5377   002248  AE17               	btfss	(___flmul@prod+2)^0,7,c
  5378   00224A  EF29  F011         	goto	u5991
  5379   00224E  EF2B  F011         	goto	u5990
  5380   002252                     u5991:
  5381   002252  EF0F  F011         	goto	l6266
  5382   002256                     u5990:
  5383   002256  0E00               	movlw	0
  5384   002258  6E0F               	movwf	___flmul@aexp^0,c
  5385   00225A  AE13               	btfss	(___flmul@grs+3)^0,7,c
  5386   00225C  EF32  F011         	goto	u6001
  5387   002260  EF34  F011         	goto	u6000
  5388   002264                     u6001:
  5389   002264  EF58  F011         	goto	l1353
  5390   002268                     u6000:
  5391   002268  0EFF               	movlw	255
  5392   00226A  1410               	andwf	___flmul@grs^0,w,c
  5393   00226C  6E0A               	movwf	??___flmul^0,c
  5394   00226E  0EFF               	movlw	255
  5395   002270  1411               	andwf	(___flmul@grs+1)^0,w,c
  5396   002272  6E0B               	movwf	(??___flmul+1)^0,c
  5397   002274  0EFF               	movlw	255
  5398   002276  1412               	andwf	(___flmul@grs+2)^0,w,c
  5399   002278  6E0C               	movwf	(??___flmul+2)^0,c
  5400   00227A  0E7F               	movlw	127
  5401   00227C  1413               	andwf	(___flmul@grs+3)^0,w,c
  5402   00227E  6E0D               	movwf	(??___flmul+3)^0,c
  5403   002280  500A               	movf	??___flmul^0,w,c
  5404   002282  100B               	iorwf	(??___flmul+1)^0,w,c
  5405   002284  100C               	iorwf	(??___flmul+2)^0,w,c
  5406   002286  100D               	iorwf	(??___flmul+3)^0,w,c
  5407   002288  B4D8               	btfsc	status,2,c
  5408   00228A  EF49  F011         	goto	u6011
  5409   00228E  EF4B  F011         	goto	u6010
  5410   002292                     u6011:
  5411   002292  EF4F  F011         	goto	l1354
  5412   002296                     u6010:
  5413   002296                     l6280:
  5414   002296  0E01               	movlw	1
  5415   002298  6E0F               	movwf	___flmul@aexp^0,c
  5416   00229A  EF58  F011         	goto	l1353
  5417   00229E                     l1354:
  5418   00229E  A015               	btfss	___flmul@prod^0,0,c
  5419   0022A0  EF54  F011         	goto	u6021
  5420   0022A4  EF56  F011         	goto	u6020
  5421   0022A8                     u6021:
  5422   0022A8  EF58  F011         	goto	l1353
  5423   0022AC                     u6020:
  5424   0022AC  EF4B  F011         	goto	l6280
  5425   0022B0                     l1353:
  5426   0022B0  500F               	movf	___flmul@aexp^0,w,c
  5427   0022B2  B4D8               	btfsc	status,2,c
  5428   0022B4  EF5E  F011         	goto	u6031
  5429   0022B8  EF60  F011         	goto	u6030
  5430   0022BC                     u6031:
  5431   0022BC  EF84  F011         	goto	l6292
  5432   0022C0                     u6030:
  5433   0022C0  0E01               	movlw	1
  5434   0022C2  2615               	addwf	___flmul@prod^0,f,c
  5435   0022C4  0E00               	movlw	0
  5436   0022C6  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5437   0022C8  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5438   0022CA  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5439   0022CC  A018               	btfss	(___flmul@prod+3)^0,0,c
  5440   0022CE  EF6B  F011         	goto	u6041
  5441   0022D2  EF6D  F011         	goto	u6040
  5442   0022D6                     u6041:
  5443   0022D6  EF84  F011         	goto	l6292
  5444   0022DA                     u6040:
  5445   0022DA  C015  F00A         	movff	___flmul@prod,??___flmul
  5446   0022DE  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  5447   0022E2  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  5448   0022E6  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  5449   0022EA  340D               	rlcf	(??___flmul+3)^0,w,c
  5450   0022EC  320D               	rrcf	(??___flmul+3)^0,f,c
  5451   0022EE  320C               	rrcf	(??___flmul+2)^0,f,c
  5452   0022F0  320B               	rrcf	(??___flmul+1)^0,f,c
  5453   0022F2  320A               	rrcf	??___flmul^0,f,c
  5454   0022F4  C00A  F015         	movff	??___flmul,___flmul@prod
  5455   0022F8  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  5456   0022FC  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  5457   002300  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  5458   002304  4A19               	infsnz	___flmul@temp^0,f,c
  5459   002306  2A1A               	incf	(___flmul@temp+1)^0,f,c
  5460   002308                     l6292:
  5461   002308  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5462   00230A  EF8F  F011         	goto	u6051
  5463   00230E  501A               	movf	(___flmul@temp+1)^0,w,c
  5464   002310  E108               	bnz	u6050
  5465   002312  2819               	incf	___flmul@temp^0,w,c
  5466   002314  A0D8               	btfss	status,0,c
  5467   002316  EF8F  F011         	goto	u6051
  5468   00231A  EF91  F011         	goto	u6050
  5469   00231E                     u6051:
  5470   00231E  EF9B  F011         	goto	l6296
  5471   002322                     u6050:
  5472   002322  0E00               	movlw	0
  5473   002324  6E15               	movwf	___flmul@prod^0,c
  5474   002326  0E00               	movlw	0
  5475   002328  6E16               	movwf	(___flmul@prod+1)^0,c
  5476   00232A  0E80               	movlw	128
  5477   00232C  6E17               	movwf	(___flmul@prod+2)^0,c
  5478   00232E  0E7F               	movlw	127
  5479   002330  6E18               	movwf	(___flmul@prod+3)^0,c
  5480   002332  EFC9  F011         	goto	l6308
  5481   002336                     l6296:
  5482   002336  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5483   002338  EFA8  F011         	goto	u6060
  5484   00233C  501A               	movf	(___flmul@temp+1)^0,w,c
  5485   00233E  E106               	bnz	u6061
  5486   002340  0419               	decf	___flmul@temp^0,w,c
  5487   002342  B0D8               	btfsc	status,0,c
  5488   002344  EFA6  F011         	goto	u6061
  5489   002348  EFA8  F011         	goto	u6060
  5490   00234C                     u6061:
  5491   00234C  EFB4  F011         	goto	l1361
  5492   002350                     u6060:
  5493   002350  0E00               	movlw	0
  5494   002352  6E15               	movwf	___flmul@prod^0,c
  5495   002354  0E00               	movlw	0
  5496   002356  6E16               	movwf	(___flmul@prod+1)^0,c
  5497   002358  0E00               	movlw	0
  5498   00235A  6E17               	movwf	(___flmul@prod+2)^0,c
  5499   00235C  0E00               	movlw	0
  5500   00235E  6E18               	movwf	(___flmul@prod+3)^0,c
  5501   002360  0E00               	movlw	0
  5502   002362  6E0E               	movwf	___flmul@sign^0,c
  5503   002364  EFC9  F011         	goto	l6308
  5504   002368                     l1361:
  5505   002368  C019  F014         	movff	___flmul@temp,___flmul@bexp
  5506   00236C  0EFF               	movlw	255
  5507   00236E  1615               	andwf	___flmul@prod^0,f,c
  5508   002370  0EFF               	movlw	255
  5509   002372  1616               	andwf	(___flmul@prod+1)^0,f,c
  5510   002374  0E7F               	movlw	127
  5511   002376  1617               	andwf	(___flmul@prod+2)^0,f,c
  5512   002378  0E00               	movlw	0
  5513   00237A  1618               	andwf	(___flmul@prod+3)^0,f,c
  5514   00237C  A014               	btfss	___flmul@bexp^0,0,c
  5515   00237E  EFC3  F011         	goto	u6071
  5516   002382  EFC5  F011         	goto	u6070
  5517   002386                     u6071:
  5518   002386  EFC6  F011         	goto	l6306
  5519   00238A                     u6070:
  5520   00238A  8E17               	bsf	(___flmul@prod+2)^0,7,c
  5521   00238C                     l6306:
  5522   00238C  90D8               	bcf	status,0,c
  5523   00238E  3014               	rrcf	___flmul@bexp^0,w,c
  5524   002390  6E18               	movwf	(___flmul@prod+3)^0,c
  5525   002392                     l6308:
  5526   002392  500E               	movf	___flmul@sign^0,w,c
  5527   002394  1218               	iorwf	(___flmul@prod+3)^0,f,c
  5528   002396  C015  F002         	movff	___flmul@prod,?___flmul
  5529   00239A  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  5530   00239E  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  5531   0023A2  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  5532   0023A6                     l1348:
  5533   0023A6  0012               	return		;funcret
  5534   0023A8                     __end_of___flmul:
  5535                           	callstack 0
  5536                           
  5537 ;; *************** function ___flge *****************
  5538 ;; Defined at:
  5539 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  ff1             4    1[COMRAM] unsigned char 
  5542 ;;  ff2             4    5[COMRAM] unsigned char 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5554 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5556 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5557 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5558 ;;Total ram usage:       12 bytes
  5559 ;; Hardware stack levels used: 1
  5560 ;; Hardware stack levels required when called: 1
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_convert_rgb2hue
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text16
  5569   00365C                     __ptext16:
  5570                           	callstack 0
  5571   00365C                     ___flge:
  5572                           	callstack 27
  5573   00365C  0E00               	movlw	0
  5574   00365E  1402               	andwf	___flge@ff1^0,w,c
  5575   003660  6E0A               	movwf	??___flge^0,c
  5576   003662  0E00               	movlw	0
  5577   003664  1403               	andwf	(___flge@ff1+1)^0,w,c
  5578   003666  6E0B               	movwf	(??___flge+1)^0,c
  5579   003668  0E80               	movlw	128
  5580   00366A  1404               	andwf	(___flge@ff1+2)^0,w,c
  5581   00366C  6E0C               	movwf	(??___flge+2)^0,c
  5582   00366E  0E7F               	movlw	127
  5583   003670  1405               	andwf	(___flge@ff1+3)^0,w,c
  5584   003672  6E0D               	movwf	(??___flge+3)^0,c
  5585   003674  500A               	movf	??___flge^0,w,c
  5586   003676  100B               	iorwf	(??___flge+1)^0,w,c
  5587   003678  100C               	iorwf	(??___flge+2)^0,w,c
  5588   00367A  100D               	iorwf	(??___flge+3)^0,w,c
  5589   00367C  A4D8               	btfss	status,2,c
  5590   00367E  EF43  F01B         	goto	u6111
  5591   003682  EF45  F01B         	goto	u6110
  5592   003686                     u6111:
  5593   003686  EF4D  F01B         	goto	l6340
  5594   00368A                     u6110:
  5595   00368A  0E00               	movlw	0
  5596   00368C  6E02               	movwf	___flge@ff1^0,c
  5597   00368E  0E00               	movlw	0
  5598   003690  6E03               	movwf	(___flge@ff1+1)^0,c
  5599   003692  0E00               	movlw	0
  5600   003694  6E04               	movwf	(___flge@ff1+2)^0,c
  5601   003696  0E00               	movlw	0
  5602   003698  6E05               	movwf	(___flge@ff1+3)^0,c
  5603   00369A                     l6340:
  5604   00369A  0E00               	movlw	0
  5605   00369C  1406               	andwf	___flge@ff2^0,w,c
  5606   00369E  6E0A               	movwf	??___flge^0,c
  5607   0036A0  0E00               	movlw	0
  5608   0036A2  1407               	andwf	(___flge@ff2+1)^0,w,c
  5609   0036A4  6E0B               	movwf	(??___flge+1)^0,c
  5610   0036A6  0E80               	movlw	128
  5611   0036A8  1408               	andwf	(___flge@ff2+2)^0,w,c
  5612   0036AA  6E0C               	movwf	(??___flge+2)^0,c
  5613   0036AC  0E7F               	movlw	127
  5614   0036AE  1409               	andwf	(___flge@ff2+3)^0,w,c
  5615   0036B0  6E0D               	movwf	(??___flge+3)^0,c
  5616   0036B2  500A               	movf	??___flge^0,w,c
  5617   0036B4  100B               	iorwf	(??___flge+1)^0,w,c
  5618   0036B6  100C               	iorwf	(??___flge+2)^0,w,c
  5619   0036B8  100D               	iorwf	(??___flge+3)^0,w,c
  5620   0036BA  A4D8               	btfss	status,2,c
  5621   0036BC  EF62  F01B         	goto	u6121
  5622   0036C0  EF64  F01B         	goto	u6120
  5623   0036C4                     u6121:
  5624   0036C4  EF6C  F01B         	goto	l6344
  5625   0036C8                     u6120:
  5626   0036C8  0E00               	movlw	0
  5627   0036CA  6E06               	movwf	___flge@ff2^0,c
  5628   0036CC  0E00               	movlw	0
  5629   0036CE  6E07               	movwf	(___flge@ff2+1)^0,c
  5630   0036D0  0E00               	movlw	0
  5631   0036D2  6E08               	movwf	(___flge@ff2+2)^0,c
  5632   0036D4  0E00               	movlw	0
  5633   0036D6  6E09               	movwf	(___flge@ff2+3)^0,c
  5634   0036D8                     l6344:
  5635   0036D8  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5636   0036DA  EF71  F01B         	goto	u6131
  5637   0036DE  EF73  F01B         	goto	u6130
  5638   0036E2                     u6131:
  5639   0036E2  EF7C  F01B         	goto	l6348
  5640   0036E6                     u6130:
  5641   0036E6  6C02               	negf	___flge@ff1^0,c
  5642   0036E8  1E03               	comf	(___flge@ff1+1)^0,f,c
  5643   0036EA  B0D8               	btfsc	status,0,c
  5644   0036EC  2A03               	incf	(___flge@ff1+1)^0,f,c
  5645   0036EE  1E04               	comf	(___flge@ff1+2)^0,f,c
  5646   0036F0  B0D8               	btfsc	status,0,c
  5647   0036F2  2A04               	incf	(___flge@ff1+2)^0,f,c
  5648   0036F4  0E80               	movlw	128
  5649   0036F6  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5650   0036F8                     l6348:
  5651   0036F8  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5652   0036FA  EF81  F01B         	goto	u6141
  5653   0036FE  EF83  F01B         	goto	u6140
  5654   003702                     u6141:
  5655   003702  EF8C  F01B         	goto	l995
  5656   003706                     u6140:
  5657   003706  6C06               	negf	___flge@ff2^0,c
  5658   003708  1E07               	comf	(___flge@ff2+1)^0,f,c
  5659   00370A  B0D8               	btfsc	status,0,c
  5660   00370C  2A07               	incf	(___flge@ff2+1)^0,f,c
  5661   00370E  1E08               	comf	(___flge@ff2+2)^0,f,c
  5662   003710  B0D8               	btfsc	status,0,c
  5663   003712  2A08               	incf	(___flge@ff2+2)^0,f,c
  5664   003714  0E80               	movlw	128
  5665   003716  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5666   003718                     l995:
  5667   003718  0E00               	movlw	0
  5668   00371A  1A02               	xorwf	___flge@ff1^0,f,c
  5669   00371C  0E00               	movlw	0
  5670   00371E  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5671   003720  0E00               	movlw	0
  5672   003722  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5673   003724  0E80               	movlw	128
  5674   003726  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5675   003728  0E00               	movlw	0
  5676   00372A  1A06               	xorwf	___flge@ff2^0,f,c
  5677   00372C  0E00               	movlw	0
  5678   00372E  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5679   003730  0E00               	movlw	0
  5680   003732  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5681   003734  0E80               	movlw	128
  5682   003736  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5683   003738  5006               	movf	___flge@ff2^0,w,c
  5684   00373A  5C02               	subwf	___flge@ff1^0,w,c
  5685   00373C  5007               	movf	(___flge@ff2+1)^0,w,c
  5686   00373E  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5687   003740  5008               	movf	(___flge@ff2+2)^0,w,c
  5688   003742  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5689   003744  5009               	movf	(___flge@ff2+3)^0,w,c
  5690   003746  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5691   003748  B0D8               	btfsc	status,0,c
  5692   00374A  EFA9  F01B         	goto	u6151
  5693   00374E  EFAB  F01B         	goto	u6150
  5694   003752                     u6151:
  5695   003752  EFAE  F01B         	goto	l6354
  5696   003756                     u6150:
  5697   003756  90D8               	bcf	status,0,c
  5698   003758  EFAF  F01B         	goto	l1000
  5699   00375C                     l6354:
  5700   00375C  80D8               	bsf	status,0,c
  5701   00375E                     l1000:
  5702   00375E  0012               	return		;funcret
  5703   003760                     __end_of___flge:
  5704                           	callstack 0
  5705                           
  5706 ;; *************** function ___fleq *****************
  5707 ;; Defined at:
  5708 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  ff1             4    1[COMRAM] unsigned char 
  5711 ;;  ff2             4    5[COMRAM] unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5723 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5725 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5726 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;Total ram usage:       12 bytes
  5728 ;; Hardware stack levels used: 1
  5729 ;; Hardware stack levels required when called: 1
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_convert_rgb2hue
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text17
  5738   003B58                     __ptext17:
  5739                           	callstack 0
  5740   003B58                     ___fleq:
  5741                           	callstack 27
  5742   003B58  0E00               	movlw	0
  5743   003B5A  1402               	andwf	___fleq@ff1^0,w,c
  5744   003B5C  6E0A               	movwf	??___fleq^0,c
  5745   003B5E  0E00               	movlw	0
  5746   003B60  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5747   003B62  6E0B               	movwf	(??___fleq+1)^0,c
  5748   003B64  0E80               	movlw	128
  5749   003B66  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5750   003B68  6E0C               	movwf	(??___fleq+2)^0,c
  5751   003B6A  0E7F               	movlw	127
  5752   003B6C  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5753   003B6E  6E0D               	movwf	(??___fleq+3)^0,c
  5754   003B70  500A               	movf	??___fleq^0,w,c
  5755   003B72  100B               	iorwf	(??___fleq+1)^0,w,c
  5756   003B74  100C               	iorwf	(??___fleq+2)^0,w,c
  5757   003B76  100D               	iorwf	(??___fleq+3)^0,w,c
  5758   003B78  A4D8               	btfss	status,2,c
  5759   003B7A  EFC1  F01D         	goto	u6081
  5760   003B7E  EFC3  F01D         	goto	u6080
  5761   003B82                     u6081:
  5762   003B82  EFCB  F01D         	goto	l6324
  5763   003B86                     u6080:
  5764   003B86  0E00               	movlw	0
  5765   003B88  6E02               	movwf	___fleq@ff1^0,c
  5766   003B8A  0E00               	movlw	0
  5767   003B8C  6E03               	movwf	(___fleq@ff1+1)^0,c
  5768   003B8E  0E00               	movlw	0
  5769   003B90  6E04               	movwf	(___fleq@ff1+2)^0,c
  5770   003B92  0E00               	movlw	0
  5771   003B94  6E05               	movwf	(___fleq@ff1+3)^0,c
  5772   003B96                     l6324:
  5773   003B96  0E00               	movlw	0
  5774   003B98  1406               	andwf	___fleq@ff2^0,w,c
  5775   003B9A  6E0A               	movwf	??___fleq^0,c
  5776   003B9C  0E00               	movlw	0
  5777   003B9E  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5778   003BA0  6E0B               	movwf	(??___fleq+1)^0,c
  5779   003BA2  0E80               	movlw	128
  5780   003BA4  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5781   003BA6  6E0C               	movwf	(??___fleq+2)^0,c
  5782   003BA8  0E7F               	movlw	127
  5783   003BAA  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5784   003BAC  6E0D               	movwf	(??___fleq+3)^0,c
  5785   003BAE  500A               	movf	??___fleq^0,w,c
  5786   003BB0  100B               	iorwf	(??___fleq+1)^0,w,c
  5787   003BB2  100C               	iorwf	(??___fleq+2)^0,w,c
  5788   003BB4  100D               	iorwf	(??___fleq+3)^0,w,c
  5789   003BB6  A4D8               	btfss	status,2,c
  5790   003BB8  EFE0  F01D         	goto	u6091
  5791   003BBC  EFE2  F01D         	goto	u6090
  5792   003BC0                     u6091:
  5793   003BC0  EFEA  F01D         	goto	l6328
  5794   003BC4                     u6090:
  5795   003BC4  0E00               	movlw	0
  5796   003BC6  6E06               	movwf	___fleq@ff2^0,c
  5797   003BC8  0E00               	movlw	0
  5798   003BCA  6E07               	movwf	(___fleq@ff2+1)^0,c
  5799   003BCC  0E00               	movlw	0
  5800   003BCE  6E08               	movwf	(___fleq@ff2+2)^0,c
  5801   003BD0  0E00               	movlw	0
  5802   003BD2  6E09               	movwf	(___fleq@ff2+3)^0,c
  5803   003BD4                     l6328:
  5804   003BD4  5006               	movf	___fleq@ff2^0,w,c
  5805   003BD6  1802               	xorwf	___fleq@ff1^0,w,c
  5806   003BD8  E10F               	bnz	u6100
  5807   003BDA  5007               	movf	(___fleq@ff2+1)^0,w,c
  5808   003BDC  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5809   003BDE  E10C               	bnz	u6100
  5810   003BE0  5008               	movf	(___fleq@ff2+2)^0,w,c
  5811   003BE2  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5812   003BE4  E109               	bnz	u6100
  5813   003BE6  5009               	movf	(___fleq@ff2+3)^0,w,c
  5814   003BE8  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5815   003BEA  B4D8               	btfsc	status,2,c
  5816   003BEC  EFFA  F01D         	goto	u6101
  5817   003BF0  EFFC  F01D         	goto	u6100
  5818   003BF4                     u6101:
  5819   003BF4  EFFF  F01D         	goto	l6332
  5820   003BF8                     u6100:
  5821   003BF8  90D8               	bcf	status,0,c
  5822   003BFA  EF00  F01E         	goto	l989
  5823   003BFE                     l6332:
  5824   003BFE  80D8               	bsf	status,0,c
  5825   003C00                     l989:
  5826   003C00  0012               	return		;funcret
  5827   003C02                     __end_of___fleq:
  5828                           	callstack 0
  5829                           
  5830 ;; *************** function ___fldiv *****************
  5831 ;; Defined at:
  5832 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  b               4   26[COMRAM] unsigned char 
  5835 ;;  a               4   30[COMRAM] unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  grs             4   45[COMRAM] unsigned long 
  5838 ;;  rem             4   38[COMRAM] unsigned long 
  5839 ;;  new_exp         2   43[COMRAM] short 
  5840 ;;  aexp            1   50[COMRAM] unsigned char 
  5841 ;;  bexp            1   49[COMRAM] unsigned char 
  5842 ;;  sign            1   42[COMRAM] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  4   26[COMRAM] unsigned char 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5852 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5853 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;Total ram usage:       25 bytes
  5857 ;; Hardware stack levels used: 1
  5858 ;; Hardware stack levels required when called: 1
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_convert_rgb2hue
  5863 ;;		_main
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text18
  5868   0023A8                     __ptext18:
  5869                           	callstack 0
  5870   0023A8                     ___fldiv:
  5871                           	callstack 27
  5872   0023A8  501E               	movf	(___fldiv@b+3)^0,w,c
  5873   0023AA  0B80               	andlw	128
  5874   0023AC  6E2B               	movwf	___fldiv@sign^0,c
  5875   0023AE  501E               	movf	(___fldiv@b+3)^0,w,c
  5876   0023B0  241E               	addwf	(___fldiv@b+3)^0,w,c
  5877   0023B2  6E32               	movwf	___fldiv@bexp^0,c
  5878   0023B4  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5879   0023B6  EFDF  F011         	goto	u5661
  5880   0023BA  EFE1  F011         	goto	u5660
  5881   0023BE                     u5661:
  5882   0023BE  EFE2  F011         	goto	l6052
  5883   0023C2                     u5660:
  5884   0023C2  8032               	bsf	___fldiv@bexp^0,0,c
  5885   0023C4                     l6052:
  5886   0023C4  5032               	movf	___fldiv@bexp^0,w,c
  5887   0023C6  B4D8               	btfsc	status,2,c
  5888   0023C8  EFE8  F011         	goto	u5671
  5889   0023CC  EFEA  F011         	goto	u5670
  5890   0023D0                     u5671:
  5891   0023D0  EFFF  F011         	goto	l6062
  5892   0023D4                     u5670:
  5893   0023D4  2832               	incf	___fldiv@bexp^0,w,c
  5894   0023D6  A4D8               	btfss	status,2,c
  5895   0023D8  EFF0  F011         	goto	u5681
  5896   0023DC  EFF2  F011         	goto	u5680
  5897   0023E0                     u5681:
  5898   0023E0  EFFA  F011         	goto	l6058
  5899   0023E4                     u5680:
  5900   0023E4  0E00               	movlw	0
  5901   0023E6  6E1B               	movwf	___fldiv@b^0,c
  5902   0023E8  0E00               	movlw	0
  5903   0023EA  6E1C               	movwf	(___fldiv@b+1)^0,c
  5904   0023EC  0E00               	movlw	0
  5905   0023EE  6E1D               	movwf	(___fldiv@b+2)^0,c
  5906   0023F0  0E00               	movlw	0
  5907   0023F2  6E1E               	movwf	(___fldiv@b+3)^0,c
  5908   0023F4                     l6058:
  5909   0023F4  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5910   0023F6  0E00               	movlw	0
  5911   0023F8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5912   0023FA  EF07  F012         	goto	l6064
  5913   0023FE                     l6062:
  5914   0023FE  0E00               	movlw	0
  5915   002400  6E1B               	movwf	___fldiv@b^0,c
  5916   002402  0E00               	movlw	0
  5917   002404  6E1C               	movwf	(___fldiv@b+1)^0,c
  5918   002406  0E00               	movlw	0
  5919   002408  6E1D               	movwf	(___fldiv@b+2)^0,c
  5920   00240A  0E00               	movlw	0
  5921   00240C  6E1E               	movwf	(___fldiv@b+3)^0,c
  5922   00240E                     l6064:
  5923   00240E  5022               	movf	(___fldiv@a+3)^0,w,c
  5924   002410  0B80               	andlw	128
  5925   002412  1A2B               	xorwf	___fldiv@sign^0,f,c
  5926   002414  5022               	movf	(___fldiv@a+3)^0,w,c
  5927   002416  2422               	addwf	(___fldiv@a+3)^0,w,c
  5928   002418  6E33               	movwf	___fldiv@aexp^0,c
  5929   00241A  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5930   00241C  EF12  F012         	goto	u5691
  5931   002420  EF14  F012         	goto	u5690
  5932   002424                     u5691:
  5933   002424  EF15  F012         	goto	l6072
  5934   002428                     u5690:
  5935   002428  8033               	bsf	___fldiv@aexp^0,0,c
  5936   00242A                     l6072:
  5937   00242A  5033               	movf	___fldiv@aexp^0,w,c
  5938   00242C  B4D8               	btfsc	status,2,c
  5939   00242E  EF1B  F012         	goto	u5701
  5940   002432  EF1D  F012         	goto	u5700
  5941   002436                     u5701:
  5942   002436  EF32  F012         	goto	l6082
  5943   00243A                     u5700:
  5944   00243A  2833               	incf	___fldiv@aexp^0,w,c
  5945   00243C  A4D8               	btfss	status,2,c
  5946   00243E  EF23  F012         	goto	u5711
  5947   002442  EF25  F012         	goto	u5710
  5948   002446                     u5711:
  5949   002446  EF2D  F012         	goto	l6078
  5950   00244A                     u5710:
  5951   00244A  0E00               	movlw	0
  5952   00244C  6E1F               	movwf	___fldiv@a^0,c
  5953   00244E  0E00               	movlw	0
  5954   002450  6E20               	movwf	(___fldiv@a+1)^0,c
  5955   002452  0E00               	movlw	0
  5956   002454  6E21               	movwf	(___fldiv@a+2)^0,c
  5957   002456  0E00               	movlw	0
  5958   002458  6E22               	movwf	(___fldiv@a+3)^0,c
  5959   00245A                     l6078:
  5960   00245A  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5961   00245C  0E00               	movlw	0
  5962   00245E  6E22               	movwf	(___fldiv@a+3)^0,c
  5963   002460  EF3A  F012         	goto	l6084
  5964   002464                     l6082:
  5965   002464  0E00               	movlw	0
  5966   002466  6E1F               	movwf	___fldiv@a^0,c
  5967   002468  0E00               	movlw	0
  5968   00246A  6E20               	movwf	(___fldiv@a+1)^0,c
  5969   00246C  0E00               	movlw	0
  5970   00246E  6E21               	movwf	(___fldiv@a+2)^0,c
  5971   002470  0E00               	movlw	0
  5972   002472  6E22               	movwf	(___fldiv@a+3)^0,c
  5973   002474                     l6084:
  5974   002474  501F               	movf	___fldiv@a^0,w,c
  5975   002476  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5976   002478  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5977   00247A  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5978   00247C  A4D8               	btfss	status,2,c
  5979   00247E  EF43  F012         	goto	u5721
  5980   002482  EF45  F012         	goto	u5720
  5981   002486                     u5721:
  5982   002486  EF5D  F012         	goto	l6096
  5983   00248A                     u5720:
  5984   00248A  0E00               	movlw	0
  5985   00248C  6E1B               	movwf	___fldiv@b^0,c
  5986   00248E  0E00               	movlw	0
  5987   002490  6E1C               	movwf	(___fldiv@b+1)^0,c
  5988   002492  0E00               	movlw	0
  5989   002494  6E1D               	movwf	(___fldiv@b+2)^0,c
  5990   002496  0E00               	movlw	0
  5991   002498  6E1E               	movwf	(___fldiv@b+3)^0,c
  5992   00249A  0E80               	movlw	128
  5993   00249C  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5994   00249E  0E7F               	movlw	127
  5995   0024A0  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5996   0024A2                     l6090:
  5997   0024A2  502B               	movf	___fldiv@sign^0,w,c
  5998   0024A4  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5999   0024A6  C01B  F01B         	movff	___fldiv@b,?___fldiv
  6000   0024AA  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  6001   0024AE  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  6002   0024B2  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  6003   0024B6  EFA0  F013         	goto	l1312
  6004   0024BA                     l6096:
  6005   0024BA  5032               	movf	___fldiv@bexp^0,w,c
  6006   0024BC  A4D8               	btfss	status,2,c
  6007   0024BE  EF63  F012         	goto	u5731
  6008   0024C2  EF65  F012         	goto	u5730
  6009   0024C6                     u5731:
  6010   0024C6  EF6F  F012         	goto	l6104
  6011   0024CA                     u5730:
  6012   0024CA  0E00               	movlw	0
  6013   0024CC  6E1B               	movwf	?___fldiv^0,c
  6014   0024CE  0E00               	movlw	0
  6015   0024D0  6E1C               	movwf	(?___fldiv+1)^0,c
  6016   0024D2  0E00               	movlw	0
  6017   0024D4  6E1D               	movwf	(?___fldiv+2)^0,c
  6018   0024D6  0E00               	movlw	0
  6019   0024D8  6E1E               	movwf	(?___fldiv+3)^0,c
  6020   0024DA  EFA0  F013         	goto	l1312
  6021   0024DE                     l6104:
  6022   0024DE  5033               	movf	___fldiv@aexp^0,w,c
  6023   0024E0  C032  F023         	movff	___fldiv@bexp,??___fldiv
  6024   0024E4  6A24               	clrf	(??___fldiv+1)^0,c
  6025   0024E6  5E23               	subwf	??___fldiv^0,f,c
  6026   0024E8  0E00               	movlw	0
  6027   0024EA  5A24               	subwfb	(??___fldiv+1)^0,f,c
  6028   0024EC  0E7F               	movlw	127
  6029   0024EE  2423               	addwf	??___fldiv^0,w,c
  6030   0024F0  6E2C               	movwf	___fldiv@new_exp^0,c
  6031   0024F2  0E00               	movlw	0
  6032   0024F4  2024               	addwfc	(??___fldiv+1)^0,w,c
  6033   0024F6  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6034   0024F8  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  6035   0024FC  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  6036   002500  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  6037   002504  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  6038   002508  0E00               	movlw	0
  6039   00250A  6E1B               	movwf	___fldiv@b^0,c
  6040   00250C  0E00               	movlw	0
  6041   00250E  6E1C               	movwf	(___fldiv@b+1)^0,c
  6042   002510  0E00               	movlw	0
  6043   002512  6E1D               	movwf	(___fldiv@b+2)^0,c
  6044   002514  0E00               	movlw	0
  6045   002516  6E1E               	movwf	(___fldiv@b+3)^0,c
  6046   002518  0E00               	movlw	0
  6047   00251A  6E2E               	movwf	___fldiv@grs^0,c
  6048   00251C  0E00               	movlw	0
  6049   00251E  6E2F               	movwf	(___fldiv@grs+1)^0,c
  6050   002520  0E00               	movlw	0
  6051   002522  6E30               	movwf	(___fldiv@grs+2)^0,c
  6052   002524  0E00               	movlw	0
  6053   002526  6E31               	movwf	(___fldiv@grs+3)^0,c
  6054   002528  0E00               	movlw	0
  6055   00252A  6E33               	movwf	___fldiv@aexp^0,c
  6056   00252C  EFD0  F012         	goto	l1314
  6057   002530                     l6114:
  6058   002530  5033               	movf	___fldiv@aexp^0,w,c
  6059   002532  B4D8               	btfsc	status,2,c
  6060   002534  EF9E  F012         	goto	u5741
  6061   002538  EFA0  F012         	goto	u5740
  6062   00253C                     u5741:
  6063   00253C  EFB7  F012         	goto	l6122
  6064   002540                     u5740:
  6065   002540  90D8               	bcf	status,0,c
  6066   002542  3627               	rlcf	___fldiv@rem^0,f,c
  6067   002544  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  6068   002546  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  6069   002548  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  6070   00254A  90D8               	bcf	status,0,c
  6071   00254C  361B               	rlcf	___fldiv@b^0,f,c
  6072   00254E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  6073   002550  361D               	rlcf	(___fldiv@b+2)^0,f,c
  6074   002552  361E               	rlcf	(___fldiv@b+3)^0,f,c
  6075   002554  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6076   002556  EFAF  F012         	goto	u5751
  6077   00255A  EFB1  F012         	goto	u5750
  6078   00255E                     u5751:
  6079   00255E  EFB2  F012         	goto	l1317
  6080   002562                     u5750:
  6081   002562  801B               	bsf	___fldiv@b^0,0,c
  6082   002564                     l1317:
  6083   002564  90D8               	bcf	status,0,c
  6084   002566  362E               	rlcf	___fldiv@grs^0,f,c
  6085   002568  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  6086   00256A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  6087   00256C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  6088   00256E                     l6122:
  6089   00256E  501F               	movf	___fldiv@a^0,w,c
  6090   002570  5C27               	subwf	___fldiv@rem^0,w,c
  6091   002572  5020               	movf	(___fldiv@a+1)^0,w,c
  6092   002574  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  6093   002576  5021               	movf	(___fldiv@a+2)^0,w,c
  6094   002578  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  6095   00257A  5022               	movf	(___fldiv@a+3)^0,w,c
  6096   00257C  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  6097   00257E  A0D8               	btfss	status,0,c
  6098   002580  EFC4  F012         	goto	u5761
  6099   002584  EFC6  F012         	goto	u5760
  6100   002588                     u5761:
  6101   002588  EFCF  F012         	goto	l6128
  6102   00258C                     u5760:
  6103   00258C  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  6104   00258E  501F               	movf	___fldiv@a^0,w,c
  6105   002590  5E27               	subwf	___fldiv@rem^0,f,c
  6106   002592  5020               	movf	(___fldiv@a+1)^0,w,c
  6107   002594  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  6108   002596  5021               	movf	(___fldiv@a+2)^0,w,c
  6109   002598  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  6110   00259A  5022               	movf	(___fldiv@a+3)^0,w,c
  6111   00259C  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  6112   00259E                     l6128:
  6113   00259E  2A33               	incf	___fldiv@aexp^0,f,c
  6114   0025A0                     l1314:
  6115   0025A0  0E19               	movlw	25
  6116   0025A2  6433               	cpfsgt	___fldiv@aexp^0,c
  6117   0025A4  EFD6  F012         	goto	u5771
  6118   0025A8  EFD8  F012         	goto	u5770
  6119   0025AC                     u5771:
  6120   0025AC  EF98  F012         	goto	l6114
  6121   0025B0                     u5770:
  6122   0025B0  5027               	movf	___fldiv@rem^0,w,c
  6123   0025B2  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  6124   0025B4  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  6125   0025B6  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  6126   0025B8  B4D8               	btfsc	status,2,c
  6127   0025BA  EFE1  F012         	goto	u5781
  6128   0025BE  EFE3  F012         	goto	u5780
  6129   0025C2                     u5781:
  6130   0025C2  EFFB  F012         	goto	l6140
  6131   0025C6                     u5780:
  6132   0025C6  802E               	bsf	___fldiv@grs^0,0,c
  6133   0025C8  EFFB  F012         	goto	l6140
  6134   0025CC                     l6134:
  6135   0025CC  90D8               	bcf	status,0,c
  6136   0025CE  361B               	rlcf	___fldiv@b^0,f,c
  6137   0025D0  361C               	rlcf	(___fldiv@b+1)^0,f,c
  6138   0025D2  361D               	rlcf	(___fldiv@b+2)^0,f,c
  6139   0025D4  361E               	rlcf	(___fldiv@b+3)^0,f,c
  6140   0025D6  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6141   0025D8  EFF0  F012         	goto	u5791
  6142   0025DC  EFF2  F012         	goto	u5790
  6143   0025E0                     u5791:
  6144   0025E0  EFF3  F012         	goto	l1323
  6145   0025E4                     u5790:
  6146   0025E4  801B               	bsf	___fldiv@b^0,0,c
  6147   0025E6                     l1323:
  6148   0025E6  90D8               	bcf	status,0,c
  6149   0025E8  362E               	rlcf	___fldiv@grs^0,f,c
  6150   0025EA  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  6151   0025EC  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  6152   0025EE  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  6153   0025F0  062C               	decf	___fldiv@new_exp^0,f,c
  6154   0025F2  A0D8               	btfss	status,0,c
  6155   0025F4  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  6156   0025F6                     l6140:
  6157   0025F6  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  6158   0025F8  EF00  F013         	goto	u5801
  6159   0025FC  EF02  F013         	goto	u5800
  6160   002600                     u5801:
  6161   002600  EFE6  F012         	goto	l6134
  6162   002604                     u5800:
  6163   002604  0E00               	movlw	0
  6164   002606  6E33               	movwf	___fldiv@aexp^0,c
  6165   002608  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6166   00260A  EF09  F013         	goto	u5811
  6167   00260E  EF0B  F013         	goto	u5810
  6168   002612                     u5811:
  6169   002612  EF2F  F013         	goto	l1325
  6170   002616                     u5810:
  6171   002616  0EFF               	movlw	255
  6172   002618  142E               	andwf	___fldiv@grs^0,w,c
  6173   00261A  6E23               	movwf	??___fldiv^0,c
  6174   00261C  0EFF               	movlw	255
  6175   00261E  142F               	andwf	(___fldiv@grs+1)^0,w,c
  6176   002620  6E24               	movwf	(??___fldiv+1)^0,c
  6177   002622  0EFF               	movlw	255
  6178   002624  1430               	andwf	(___fldiv@grs+2)^0,w,c
  6179   002626  6E25               	movwf	(??___fldiv+2)^0,c
  6180   002628  0E7F               	movlw	127
  6181   00262A  1431               	andwf	(___fldiv@grs+3)^0,w,c
  6182   00262C  6E26               	movwf	(??___fldiv+3)^0,c
  6183   00262E  5023               	movf	??___fldiv^0,w,c
  6184   002630  1024               	iorwf	(??___fldiv+1)^0,w,c
  6185   002632  1025               	iorwf	(??___fldiv+2)^0,w,c
  6186   002634  1026               	iorwf	(??___fldiv+3)^0,w,c
  6187   002636  B4D8               	btfsc	status,2,c
  6188   002638  EF20  F013         	goto	u5821
  6189   00263C  EF22  F013         	goto	u5820
  6190   002640                     u5821:
  6191   002640  EF26  F013         	goto	l1326
  6192   002644                     u5820:
  6193   002644                     l6148:
  6194   002644  0E01               	movlw	1
  6195   002646  6E33               	movwf	___fldiv@aexp^0,c
  6196   002648  EF2F  F013         	goto	l1325
  6197   00264C                     l1326:
  6198   00264C  A01B               	btfss	___fldiv@b^0,0,c
  6199   00264E  EF2B  F013         	goto	u5831
  6200   002652  EF2D  F013         	goto	u5830
  6201   002656                     u5831:
  6202   002656  EF2F  F013         	goto	l1325
  6203   00265A                     u5830:
  6204   00265A  EF22  F013         	goto	l6148
  6205   00265E                     l1325:
  6206   00265E  5033               	movf	___fldiv@aexp^0,w,c
  6207   002660  B4D8               	btfsc	status,2,c
  6208   002662  EF35  F013         	goto	u5841
  6209   002666  EF37  F013         	goto	u5840
  6210   00266A                     u5841:
  6211   00266A  EF5B  F013         	goto	l6160
  6212   00266E                     u5840:
  6213   00266E  0E01               	movlw	1
  6214   002670  261B               	addwf	___fldiv@b^0,f,c
  6215   002672  0E00               	movlw	0
  6216   002674  221C               	addwfc	(___fldiv@b+1)^0,f,c
  6217   002676  221D               	addwfc	(___fldiv@b+2)^0,f,c
  6218   002678  221E               	addwfc	(___fldiv@b+3)^0,f,c
  6219   00267A  A01E               	btfss	(___fldiv@b+3)^0,0,c
  6220   00267C  EF42  F013         	goto	u5851
  6221   002680  EF44  F013         	goto	u5850
  6222   002684                     u5851:
  6223   002684  EF5B  F013         	goto	l6160
  6224   002688                     u5850:
  6225   002688  C01B  F023         	movff	___fldiv@b,??___fldiv
  6226   00268C  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  6227   002690  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  6228   002694  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  6229   002698  3426               	rlcf	(??___fldiv+3)^0,w,c
  6230   00269A  3226               	rrcf	(??___fldiv+3)^0,f,c
  6231   00269C  3225               	rrcf	(??___fldiv+2)^0,f,c
  6232   00269E  3224               	rrcf	(??___fldiv+1)^0,f,c
  6233   0026A0  3223               	rrcf	??___fldiv^0,f,c
  6234   0026A2  C023  F01B         	movff	??___fldiv,___fldiv@b
  6235   0026A6  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  6236   0026AA  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  6237   0026AE  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  6238   0026B2  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  6239   0026B4  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  6240   0026B6                     l6160:
  6241   0026B6  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6242   0026B8  EF66  F013         	goto	u5861
  6243   0026BC  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  6244   0026BE  E108               	bnz	u5860
  6245   0026C0  282C               	incf	___fldiv@new_exp^0,w,c
  6246   0026C2  A0D8               	btfss	status,0,c
  6247   0026C4  EF66  F013         	goto	u5861
  6248   0026C8  EF68  F013         	goto	u5860
  6249   0026CC                     u5861:
  6250   0026CC  EF73  F013         	goto	l6164
  6251   0026D0                     u5860:
  6252   0026D0  0E00               	movlw	0
  6253   0026D2  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6254   0026D4  682C               	setf	___fldiv@new_exp^0,c
  6255   0026D6  0E00               	movlw	0
  6256   0026D8  6E1B               	movwf	___fldiv@b^0,c
  6257   0026DA  0E00               	movlw	0
  6258   0026DC  6E1C               	movwf	(___fldiv@b+1)^0,c
  6259   0026DE  0E00               	movlw	0
  6260   0026E0  6E1D               	movwf	(___fldiv@b+2)^0,c
  6261   0026E2  0E00               	movlw	0
  6262   0026E4  6E1E               	movwf	(___fldiv@b+3)^0,c
  6263   0026E6                     l6164:
  6264   0026E6  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6265   0026E8  EF80  F013         	goto	u5870
  6266   0026EC  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  6267   0026EE  E106               	bnz	u5871
  6268   0026F0  042C               	decf	___fldiv@new_exp^0,w,c
  6269   0026F2  B0D8               	btfsc	status,0,c
  6270   0026F4  EF7E  F013         	goto	u5871
  6271   0026F8  EF80  F013         	goto	u5870
  6272   0026FC                     u5871:
  6273   0026FC  EF8E  F013         	goto	l6168
  6274   002700                     u5870:
  6275   002700  0E00               	movlw	0
  6276   002702  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6277   002704  0E00               	movlw	0
  6278   002706  6E2C               	movwf	___fldiv@new_exp^0,c
  6279   002708  0E00               	movlw	0
  6280   00270A  6E1B               	movwf	___fldiv@b^0,c
  6281   00270C  0E00               	movlw	0
  6282   00270E  6E1C               	movwf	(___fldiv@b+1)^0,c
  6283   002710  0E00               	movlw	0
  6284   002712  6E1D               	movwf	(___fldiv@b+2)^0,c
  6285   002714  0E00               	movlw	0
  6286   002716  6E1E               	movwf	(___fldiv@b+3)^0,c
  6287   002718  0E00               	movlw	0
  6288   00271A  6E2B               	movwf	___fldiv@sign^0,c
  6289   00271C                     l6168:
  6290   00271C  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  6291   002720  A032               	btfss	___fldiv@bexp^0,0,c
  6292   002722  EF95  F013         	goto	u5881
  6293   002726  EF97  F013         	goto	u5880
  6294   00272A                     u5881:
  6295   00272A  EF9A  F013         	goto	l6174
  6296   00272E                     u5880:
  6297   00272E  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  6298   002730  EF9B  F013         	goto	l6176
  6299   002734                     l6174:
  6300   002734  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  6301   002736                     l6176:
  6302   002736  90D8               	bcf	status,0,c
  6303   002738  3032               	rrcf	___fldiv@bexp^0,w,c
  6304   00273A  6E1E               	movwf	(___fldiv@b+3)^0,c
  6305   00273C  EF51  F012         	goto	l6090
  6306   002740                     l1312:
  6307   002740  0012               	return		;funcret
  6308   002742                     __end_of___fldiv:
  6309                           	callstack 0
  6310                           
  6311 ;; *************** function _initUSART4 *****************
  6312 ;; Defined at:
  6313 ;;		line 14 in file "serial.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used: 1
  6333 ;; Hardware stack levels required when called: 1
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_main
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text19
  6342   004844                     __ptext19:
  6343                           	callstack 0
  6344   004844                     _initUSART4:
  6345                           	callstack 29
  6346   004844                     
  6347                           ;serial.c: 15:     RC0PPS = 0x12;
  6348   004844  0E12               	movlw	18
  6349   004846  010E               	movlb	14	; () banked
  6350   004848  6F62               	movwf	98,b	;volatile
  6351                           
  6352                           ;serial.c: 16:     RX4PPS = 0x11;
  6353   00484A  0E11               	movlw	17
  6354   00484C  6F15               	movwf	21,b	;volatile
  6355   00484E                     
  6356                           ; BSR set to: 14
  6357                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6358   00484E  97E9               	bcf	233,3,b	;volatile
  6359   004850                     
  6360                           ; BSR set to: 14
  6361                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6362   004850  95E8               	bcf	232,2,b	;volatile
  6363                           
  6364                           ;serial.c: 19:     SP4BRGL = 51;
  6365   004852  0E33               	movlw	51
  6366   004854  6FE5               	movwf	229,b	;volatile
  6367                           
  6368                           ;serial.c: 20:     SP4BRGH = 0;
  6369   004856  0E00               	movlw	0
  6370   004858  6FE6               	movwf	230,b	;volatile
  6371   00485A                     
  6372                           ; BSR set to: 14
  6373                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6374   00485A  89E7               	bsf	231,4,b	;volatile
  6375   00485C                     
  6376                           ; BSR set to: 14
  6377                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6378   00485C  8BE8               	bsf	232,5,b	;volatile
  6379   00485E                     
  6380                           ; BSR set to: 14
  6381                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6382   00485E  8FE7               	bsf	231,7,b	;volatile
  6383   004860                     
  6384                           ; BSR set to: 14
  6385   004860  0012               	return		;funcret
  6386   004862                     __end_of_initUSART4:
  6387                           	callstack 0
  6388                           
  6389 ;; *************** function _initDCmotorsPWM *****************
  6390 ;; Defined at:
  6391 ;;		line 5 in file "dc_motor.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      void 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6409 ;;Total ram usage:        2 bytes
  6410 ;; Hardware stack levels used: 1
  6411 ;; Hardware stack levels required when called: 1
  6412 ;; This function calls:
  6413 ;;		Nothing
  6414 ;; This function is called by:
  6415 ;;		_main
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text20
  6420   003D42                     __ptext20:
  6421                           	callstack 0
  6422   003D42                     _initDCmotorsPWM:
  6423                           	callstack 29
  6424   003D42                     
  6425                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6426   003D42  9485               	bcf	133,2,c	;volatile
  6427                           
  6428                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6429   003D44  9E83               	bcf	131,7,c	;volatile
  6430                           
  6431                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6432   003D46  9885               	bcf	133,4,c	;volatile
  6433                           
  6434                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6435   003D48  9C87               	bcf	135,6,c	;volatile
  6436                           
  6437                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6438   003D4A  947D               	bcf	125,2,c	;volatile
  6439                           
  6440                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6441   003D4C  9E7B               	bcf	123,7,c	;volatile
  6442                           
  6443                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6444   003D4E  987D               	bcf	125,4,c	;volatile
  6445                           
  6446                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6447   003D50  9C7F               	bcf	127,6,c	;volatile
  6448   003D52                     
  6449                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6450   003D52  0E05               	movlw	5
  6451   003D54  010E               	movlb	14	; () banked
  6452   003D56  6F74               	movwf	116,b	;volatile
  6453                           
  6454                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6455   003D58  0E06               	movlw	6
  6456   003D5A  6F76               	movwf	118,b	;volatile
  6457                           
  6458                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6459   003D5C  0E07               	movlw	7
  6460   003D5E  6F69               	movwf	105,b	;volatile
  6461                           
  6462                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6463   003D60  0E08               	movlw	8
  6464   003D62  6F88               	movwf	136,b	;volatile
  6465                           
  6466                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6467   003D64  50BD               	movf	189,w,c	;volatile
  6468   003D66  0B8F               	andlw	-113
  6469   003D68  0940               	iorlw	64
  6470   003D6A  6EBD               	movwf	189,c	;volatile
  6471                           
  6472                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6473   003D6C  0EE0               	movlw	-32
  6474   003D6E  16BE               	andwf	190,f,c	;volatile
  6475                           
  6476                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6477   003D70  50BF               	movf	191,w,c	;volatile
  6478   003D72  0BF0               	andlw	-16
  6479   003D74  0901               	iorlw	1
  6480   003D76  6EBF               	movwf	191,c	;volatile
  6481   003D78                     
  6482                           ; BSR set to: 14
  6483                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6484   003D78  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6485   003D7C                     
  6486                           ; BSR set to: 14
  6487                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6488   003D7C  8EBD               	bsf	189,7,c	;volatile
  6489                           
  6490                           ;dc_motor.c: 35:     CCPR1H=0;
  6491   003D7E  0E00               	movlw	0
  6492   003D80  6EAA               	movwf	170,c	;volatile
  6493                           
  6494                           ;dc_motor.c: 36:     CCPR2H=0;
  6495   003D82  0E00               	movlw	0
  6496   003D84  6EA6               	movwf	166,c	;volatile
  6497                           
  6498                           ;dc_motor.c: 37:     CCPR3H=0;
  6499   003D86  0E00               	movlw	0
  6500   003D88  010F               	movlb	15	; () banked
  6501   003D8A  6F25               	movwf	37,b	;volatile
  6502                           
  6503                           ;dc_motor.c: 38:     CCPR4H=0;
  6504   003D8C  0E00               	movlw	0
  6505   003D8E  6F21               	movwf	33,b	;volatile
  6506                           
  6507                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6508   003D90  0EFC               	movlw	-4
  6509   003D92  16AD               	andwf	173,f,c	;volatile
  6510                           
  6511                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6512   003D94  0EF3               	movlw	-13
  6513   003D96  16AD               	andwf	173,f,c	;volatile
  6514                           
  6515                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6516   003D98  0ECF               	movlw	-49
  6517   003D9A  16AD               	andwf	173,f,c	;volatile
  6518                           
  6519                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6520   003D9C  0E3F               	movlw	-193
  6521   003D9E  16AD               	andwf	173,f,c	;volatile
  6522   003DA0                     
  6523                           ; BSR set to: 15
  6524                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6525   003DA0  88AB               	bsf	171,4,c	;volatile
  6526                           
  6527                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6528   003DA2  50AB               	movf	171,w,c	;volatile
  6529   003DA4  0BF0               	andlw	-16
  6530   003DA6  090C               	iorlw	12
  6531   003DA8  6EAB               	movwf	171,c	;volatile
  6532   003DAA                     
  6533                           ; BSR set to: 15
  6534                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6535   003DAA  8EAB               	bsf	171,7,c	;volatile
  6536   003DAC                     
  6537                           ; BSR set to: 15
  6538                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6539   003DAC  88A7               	bsf	167,4,c	;volatile
  6540                           
  6541                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6542   003DAE  50A7               	movf	167,w,c	;volatile
  6543   003DB0  0BF0               	andlw	-16
  6544   003DB2  090C               	iorlw	12
  6545   003DB4  6EA7               	movwf	167,c	;volatile
  6546   003DB6                     
  6547                           ; BSR set to: 15
  6548                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6549   003DB6  8EA7               	bsf	167,7,c	;volatile
  6550   003DB8                     
  6551                           ; BSR set to: 15
  6552                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6553   003DB8  8926               	bsf	38,4,b	;volatile
  6554                           
  6555                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6556   003DBA  5126               	movf	38,w,b	;volatile
  6557   003DBC  0BF0               	andlw	-16
  6558   003DBE  090C               	iorlw	12
  6559   003DC0  6F26               	movwf	38,b	;volatile
  6560   003DC2                     
  6561                           ; BSR set to: 15
  6562                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6563   003DC2  8F26               	bsf	38,7,b	;volatile
  6564   003DC4                     
  6565                           ; BSR set to: 15
  6566                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6567   003DC4  8922               	bsf	34,4,b	;volatile
  6568                           
  6569                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6570   003DC6  5122               	movf	34,w,b	;volatile
  6571   003DC8  0BF0               	andlw	-16
  6572   003DCA  090C               	iorlw	12
  6573   003DCC  6F22               	movwf	34,b	;volatile
  6574   003DCE                     
  6575                           ; BSR set to: 15
  6576                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6577   003DCE  8F22               	bsf	34,7,b	;volatile
  6578   003DD0                     
  6579                           ; BSR set to: 15
  6580   003DD0  0012               	return		;funcret
  6581   003DD2                     __end_of_initDCmotorsPWM:
  6582                           	callstack 0
  6583                           
  6584 ;; *************** function _get16bitTMR0val *****************
  6585 ;; Defined at:
  6586 ;;		line 33 in file "timers.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  path_step       2    6[COMRAM] unsigned int 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  combined_val    2   12[COMRAM] int 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  2    6[COMRAM] unsigned int 
  6593 ;; Registers used:
  6594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6602 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6603 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6604 ;;Total ram usage:        8 bytes
  6605 ;; Hardware stack levels used: 1
  6606 ;; Hardware stack levels required when called: 2
  6607 ;; This function calls:
  6608 ;;		_logAction
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text21
  6615   004380                     __ptext21:
  6616                           	callstack 0
  6617   004380                     _get16bitTMR0val:
  6618                           	callstack 28
  6619   004380                     
  6620                           ;timers.c: 33: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 34: {;time
      +                          rs.c: 35:     int combined_value;;timers.c: 36:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6621   004380  50D4               	movf	212,w,c	;volatile
  6622   004382  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6623   004384  6A09               	clrf	??_get16bitTMR0val^0,c
  6624   004386  50D3               	movf	211,w,c	;volatile
  6625   004388  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6626   00438A  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6627   00438C  5009               	movf	??_get16bitTMR0val^0,w,c
  6628   00438E  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6629   004390  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6630   004392  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6631   004394  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6632   004396  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6633   004398                     
  6634                           ;timers.c: 37:     T0CON0bits.T0EN=0;
  6635   004398  9ED5               	bcf	213,7,c	;volatile
  6636   00439A                     
  6637                           ;timers.c: 38:     logAction('0',combined_value, path_step);
  6638   00439A  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6639   00439E  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6640   0043A2  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6641   0043A6  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6642   0043AA  0E30               	movlw	48
  6643   0043AC  EC1B  F021         	call	_logAction
  6644   0043B0                     
  6645                           ;timers.c: 39:     path_step++;
  6646   0043B0  4A07               	infsnz	get16bitTMR0val@path_step^0,f,c
  6647   0043B2  2A08               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  6648   0043B4                     
  6649                           ;timers.c: 40:     return path_step;
  6650   0043B4  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6651   0043B8  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6652   0043BC  0012               	return		;funcret
  6653   0043BE                     __end_of_get16bitTMR0val:
  6654                           	callstack 0
  6655                           
  6656 ;; *************** function _decision *****************
  6657 ;; Defined at:
  6658 ;;		line 275 in file "color.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  hue             2   32[COMRAM] unsigned int 
  6661 ;;  path_step       2   34[COMRAM] unsigned int 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  color           2    0        unsigned int 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  2   32[COMRAM] unsigned int 
  6666 ;; Registers used:
  6667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6676 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6677 ;;Total ram usage:        4 bytes
  6678 ;; Hardware stack levels used: 1
  6679 ;; Hardware stack levels required when called: 6
  6680 ;; This function calls:
  6681 ;;		_logAction
  6682 ;;		_moveBlue
  6683 ;;		_moveGreen
  6684 ;;		_moveLightBlue
  6685 ;;		_moveOrange
  6686 ;;		_movePink
  6687 ;;		_moveRed
  6688 ;;		_moveYellow
  6689 ;; This function is called by:
  6690 ;;		_main
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           	psect	text22
  6695   002742                     __ptext22:
  6696                           	callstack 0
  6697   002742                     _decision:
  6698                           	callstack 24
  6699   002742                     
  6700                           ;color.c: 280:     unsigned int color;;color.c: 282:     if (hue<=10 || hue>=355) {
  6701   002742  5022               	movf	(decision@hue+1)^0,w,c
  6702   002744  E109               	bnz	u6680
  6703   002746  0E0B               	movlw	11
  6704   002748  5C21               	subwf	decision@hue^0,w,c
  6705   00274A  A0D8               	btfss	status,0,c
  6706   00274C  EFAA  F013         	goto	u6681
  6707   002750  EFAC  F013         	goto	u6680
  6708   002754                     u6681:
  6709   002754  EFB7  F013         	goto	l6850
  6710   002758                     u6680:
  6711   002758  0E63               	movlw	99
  6712   00275A  5C21               	subwf	decision@hue^0,w,c
  6713   00275C  0E01               	movlw	1
  6714   00275E  5822               	subwfb	(decision@hue+1)^0,w,c
  6715   002760  A0D8               	btfss	status,0,c
  6716   002762  EFB5  F013         	goto	u6691
  6717   002766  EFB7  F013         	goto	u6690
  6718   00276A                     u6691:
  6719   00276A  EFCC  F013         	goto	l6858
  6720   00276E                     u6690:
  6721   00276E                     l6850:
  6722                           
  6723                           ;color.c: 283:         moveRed(&motorL, &motorR);
  6724   00276E  0EE6               	movlw	low _motorL
  6725   002770  6E1D               	movwf	moveRed@mL^0,c
  6726   002772  0EDD               	movlw	low _motorR
  6727   002774  6E1E               	movwf	moveRed@mR^0,c
  6728   002776  EC7B  F022         	call	_moveRed	;wreg free
  6729   00277A                     
  6730                           ;color.c: 284:         logAction('1',0, path_step);
  6731   00277A  0E00               	movlw	0
  6732   00277C  6E03               	movwf	(logAction@newTime+1)^0,c
  6733   00277E  0E00               	movlw	0
  6734   002780  6E02               	movwf	logAction@newTime^0,c
  6735   002782  C023  F004         	movff	decision@path_step,logAction@path_step
  6736   002786  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6737   00278A  0E31               	movlw	49
  6738   00278C  EC1B  F021         	call	_logAction
  6739   002790                     l6856:
  6740                           
  6741                           ;color.c: 286:         path_step++;
  6742   002790  4A23               	infsnz	decision@path_step^0,f,c
  6743   002792  2A24               	incf	(decision@path_step+1)^0,f,c
  6744                           
  6745                           ;color.c: 287:     }
  6746   002794  EFC2  F014         	goto	l6930
  6747   002798                     l6858:
  6748   002798  5022               	movf	(decision@hue+1)^0,w,c
  6749   00279A  E109               	bnz	u6700
  6750   00279C  0E69               	movlw	105
  6751   00279E  5C21               	subwf	decision@hue^0,w,c
  6752   0027A0  A0D8               	btfss	status,0,c
  6753   0027A2  EFD5  F013         	goto	u6701
  6754   0027A6  EFD7  F013         	goto	u6700
  6755   0027AA                     u6701:
  6756   0027AA  EFF5  F013         	goto	l6870
  6757   0027AE                     u6700:
  6758   0027AE  5022               	movf	(decision@hue+1)^0,w,c
  6759   0027B0  E107               	bnz	u6711
  6760   0027B2  0E83               	movlw	131
  6761   0027B4  5C21               	subwf	decision@hue^0,w,c
  6762   0027B6  B0D8               	btfsc	status,0,c
  6763   0027B8  EFE0  F013         	goto	u6711
  6764   0027BC  EFE2  F013         	goto	u6710
  6765   0027C0                     u6711:
  6766   0027C0  EFF5  F013         	goto	l6870
  6767   0027C4                     u6710:
  6768   0027C4                     
  6769                           ;color.c: 289:         moveGreen(&motorL, &motorR);
  6770   0027C4  0EE6               	movlw	low _motorL
  6771   0027C6  6E1D               	movwf	moveGreen@mL^0,c
  6772   0027C8  0EDD               	movlw	low _motorR
  6773   0027CA  6E1E               	movwf	moveGreen@mR^0,c
  6774   0027CC  EC2A  F023         	call	_moveGreen	;wreg free
  6775   0027D0                     
  6776                           ;color.c: 290:         logAction('2',0, path_step);
  6777   0027D0  0E00               	movlw	0
  6778   0027D2  6E03               	movwf	(logAction@newTime+1)^0,c
  6779   0027D4  0E00               	movlw	0
  6780   0027D6  6E02               	movwf	logAction@newTime^0,c
  6781   0027D8  C023  F004         	movff	decision@path_step,logAction@path_step
  6782   0027DC  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6783   0027E0  0E32               	movlw	50
  6784   0027E2  EC1B  F021         	call	_logAction
  6785   0027E6  EFC8  F013         	goto	l6856
  6786   0027EA                     l6870:
  6787   0027EA  5022               	movf	(decision@hue+1)^0,w,c
  6788   0027EC  E109               	bnz	u6720
  6789   0027EE  0EE6               	movlw	230
  6790   0027F0  5C21               	subwf	decision@hue^0,w,c
  6791   0027F2  A0D8               	btfss	status,0,c
  6792   0027F4  EFFE  F013         	goto	u6721
  6793   0027F8  EF00  F014         	goto	u6720
  6794   0027FC                     u6721:
  6795   0027FC  EF1E  F014         	goto	l6882
  6796   002800                     u6720:
  6797   002800  5022               	movf	(decision@hue+1)^0,w,c
  6798   002802  E107               	bnz	u6731
  6799   002804  0EF1               	movlw	241
  6800   002806  5C21               	subwf	decision@hue^0,w,c
  6801   002808  B0D8               	btfsc	status,0,c
  6802   00280A  EF09  F014         	goto	u6731
  6803   00280E  EF0B  F014         	goto	u6730
  6804   002812                     u6731:
  6805   002812  EF1E  F014         	goto	l6882
  6806   002816                     u6730:
  6807   002816                     
  6808                           ;color.c: 294:         moveBlue(&motorL,&motorR);
  6809   002816  0EE6               	movlw	low _motorL
  6810   002818  6E1D               	movwf	moveBlue@mL^0,c
  6811   00281A  0EDD               	movlw	low _motorR
  6812   00281C  6E1E               	movwf	moveBlue@mR^0,c
  6813   00281E  EC43  F023         	call	_moveBlue	;wreg free
  6814   002822                     
  6815                           ;color.c: 295:         logAction('3',0, path_step);
  6816   002822  0E00               	movlw	0
  6817   002824  6E03               	movwf	(logAction@newTime+1)^0,c
  6818   002826  0E00               	movlw	0
  6819   002828  6E02               	movwf	logAction@newTime^0,c
  6820   00282A  C023  F004         	movff	decision@path_step,logAction@path_step
  6821   00282E  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6822   002832  0E33               	movlw	51
  6823   002834  EC1B  F021         	call	_logAction
  6824   002838  EFC8  F013         	goto	l6856
  6825   00283C                     l6882:
  6826   00283C  5022               	movf	(decision@hue+1)^0,w,c
  6827   00283E  E109               	bnz	u6740
  6828   002840  0ED8               	movlw	216
  6829   002842  5C21               	subwf	decision@hue^0,w,c
  6830   002844  A0D8               	btfss	status,0,c
  6831   002846  EF27  F014         	goto	u6741
  6832   00284A  EF29  F014         	goto	u6740
  6833   00284E                     u6741:
  6834   00284E  EF47  F014         	goto	l6894
  6835   002852                     u6740:
  6836   002852  5022               	movf	(decision@hue+1)^0,w,c
  6837   002854  E107               	bnz	u6751
  6838   002856  0EDE               	movlw	222
  6839   002858  5C21               	subwf	decision@hue^0,w,c
  6840   00285A  B0D8               	btfsc	status,0,c
  6841   00285C  EF32  F014         	goto	u6751
  6842   002860  EF34  F014         	goto	u6750
  6843   002864                     u6751:
  6844   002864  EF47  F014         	goto	l6894
  6845   002868                     u6750:
  6846   002868                     
  6847                           ;color.c: 299:         moveLightBlue(&motorL,&motorR);
  6848   002868  0EE6               	movlw	low _motorL
  6849   00286A  6E1D               	movwf	moveLightBlue@mL^0,c
  6850   00286C  0EDD               	movlw	low _motorR
  6851   00286E  6E1E               	movwf	moveLightBlue@mR^0,c
  6852   002870  ECF8  F022         	call	_moveLightBlue	;wreg free
  6853   002874                     
  6854                           ;color.c: 300:         logAction('5',0, path_step);
  6855   002874  0E00               	movlw	0
  6856   002876  6E03               	movwf	(logAction@newTime+1)^0,c
  6857   002878  0E00               	movlw	0
  6858   00287A  6E02               	movwf	logAction@newTime^0,c
  6859   00287C  C023  F004         	movff	decision@path_step,logAction@path_step
  6860   002880  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6861   002884  0E35               	movlw	53
  6862   002886  EC1B  F021         	call	_logAction
  6863   00288A  EFC8  F013         	goto	l6856
  6864   00288E                     l6894:
  6865   00288E  0E2E               	movlw	46
  6866   002890  5C21               	subwf	decision@hue^0,w,c
  6867   002892  0E01               	movlw	1
  6868   002894  5822               	subwfb	(decision@hue+1)^0,w,c
  6869   002896  A0D8               	btfss	status,0,c
  6870   002898  EF50  F014         	goto	u6761
  6871   00289C  EF52  F014         	goto	u6760
  6872   0028A0                     u6761:
  6873   0028A0  EF70  F014         	goto	l6906
  6874   0028A4                     u6760:
  6875   0028A4  0E5B               	movlw	91
  6876   0028A6  5C21               	subwf	decision@hue^0,w,c
  6877   0028A8  0E01               	movlw	1
  6878   0028AA  5822               	subwfb	(decision@hue+1)^0,w,c
  6879   0028AC  B0D8               	btfsc	status,0,c
  6880   0028AE  EF5B  F014         	goto	u6771
  6881   0028B2  EF5D  F014         	goto	u6770
  6882   0028B6                     u6771:
  6883   0028B6  EF70  F014         	goto	l6906
  6884   0028BA                     u6770:
  6885   0028BA                     
  6886                           ;color.c: 304:         moveYellow(&motorL,&motorR);
  6887   0028BA  0EE6               	movlw	low _motorL
  6888   0028BC  6E1D               	movwf	moveYellow@mL^0,c
  6889   0028BE  0EDD               	movlw	low _motorR
  6890   0028C0  6E1E               	movwf	moveYellow@mR^0,c
  6891   0028C2  EC62  F022         	call	_moveYellow	;wreg free
  6892   0028C6                     
  6893                           ;color.c: 305:         logAction('1',0, path_step);
  6894   0028C6  0E00               	movlw	0
  6895   0028C8  6E03               	movwf	(logAction@newTime+1)^0,c
  6896   0028CA  0E00               	movlw	0
  6897   0028CC  6E02               	movwf	logAction@newTime^0,c
  6898   0028CE  C023  F004         	movff	decision@path_step,logAction@path_step
  6899   0028D2  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6900   0028D6  0E31               	movlw	49
  6901   0028D8  EC1B  F021         	call	_logAction
  6902   0028DC  EFC8  F013         	goto	l6856
  6903   0028E0                     l6906:
  6904   0028E0  5022               	movf	(decision@hue+1)^0,w,c
  6905   0028E2  E109               	bnz	u6780
  6906   0028E4  0E0F               	movlw	15
  6907   0028E6  5C21               	subwf	decision@hue^0,w,c
  6908   0028E8  A0D8               	btfss	status,0,c
  6909   0028EA  EF79  F014         	goto	u6781
  6910   0028EE  EF7B  F014         	goto	u6780
  6911   0028F2                     u6781:
  6912   0028F2  EF99  F014         	goto	l6918
  6913   0028F6                     u6780:
  6914   0028F6  5022               	movf	(decision@hue+1)^0,w,c
  6915   0028F8  E107               	bnz	u6791
  6916   0028FA  0E24               	movlw	36
  6917   0028FC  5C21               	subwf	decision@hue^0,w,c
  6918   0028FE  B0D8               	btfsc	status,0,c
  6919   002900  EF84  F014         	goto	u6791
  6920   002904  EF86  F014         	goto	u6790
  6921   002908                     u6791:
  6922   002908  EF99  F014         	goto	l6918
  6923   00290C                     u6790:
  6924   00290C                     
  6925                           ;color.c: 309:         moveOrange(&motorL,&motorR);
  6926   00290C  0EE6               	movlw	low _motorL
  6927   00290E  6E1D               	movwf	moveOrange@mL^0,c
  6928   002910  0EDD               	movlw	low _motorR
  6929   002912  6E1E               	movwf	moveOrange@mR^0,c
  6930   002914  ECC6  F022         	call	_moveOrange	;wreg free
  6931   002918                     
  6932                           ;color.c: 310:         logAction('4',0, path_step);
  6933   002918  0E00               	movlw	0
  6934   00291A  6E03               	movwf	(logAction@newTime+1)^0,c
  6935   00291C  0E00               	movlw	0
  6936   00291E  6E02               	movwf	logAction@newTime^0,c
  6937   002920  C023  F004         	movff	decision@path_step,logAction@path_step
  6938   002924  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6939   002928  0E34               	movlw	52
  6940   00292A  EC1B  F021         	call	_logAction
  6941   00292E  EFC8  F013         	goto	l6856
  6942   002932                     l6918:
  6943   002932  5022               	movf	(decision@hue+1)^0,w,c
  6944   002934  E109               	bnz	u6800
  6945   002936  0EF4               	movlw	244
  6946   002938  5C21               	subwf	decision@hue^0,w,c
  6947   00293A  A0D8               	btfss	status,0,c
  6948   00293C  EFA2  F014         	goto	u6801
  6949   002940  EFA4  F014         	goto	u6800
  6950   002944                     u6801:
  6951   002944  EFC2  F014         	goto	l167
  6952   002948                     u6800:
  6953   002948  5022               	movf	(decision@hue+1)^0,w,c
  6954   00294A  E107               	bnz	u6811
  6955   00294C  0EFC               	movlw	252
  6956   00294E  5C21               	subwf	decision@hue^0,w,c
  6957   002950  B0D8               	btfsc	status,0,c
  6958   002952  EFAD  F014         	goto	u6811
  6959   002956  EFAF  F014         	goto	u6810
  6960   00295A                     u6811:
  6961   00295A  EFC2  F014         	goto	l167
  6962   00295E                     u6810:
  6963   00295E                     
  6964                           ;color.c: 314:         movePink(&motorL,&motorR);
  6965   00295E  0EE6               	movlw	low _motorL
  6966   002960  6E1D               	movwf	movePink@mL^0,c
  6967   002962  0EDD               	movlw	low _motorR
  6968   002964  6E1E               	movwf	movePink@mR^0,c
  6969   002966  EC94  F022         	call	_movePink	;wreg free
  6970   00296A                     
  6971                           ;color.c: 315:         logAction('2',0, path_step);
  6972   00296A  0E00               	movlw	0
  6973   00296C  6E03               	movwf	(logAction@newTime+1)^0,c
  6974   00296E  0E00               	movlw	0
  6975   002970  6E02               	movwf	logAction@newTime^0,c
  6976   002972  C023  F004         	movff	decision@path_step,logAction@path_step
  6977   002976  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6978   00297A  0E32               	movlw	50
  6979   00297C  EC1B  F021         	call	_logAction
  6980   002980  EFC8  F013         	goto	l6856
  6981   002984                     l167:
  6982   002984                     l6930:
  6983                           
  6984                           ;color.c: 321:     return path_step;
  6985   002984  C023  F021         	movff	decision@path_step,?_decision
  6986   002988  C024  F022         	movff	decision@path_step+1,?_decision+1
  6987   00298C  0012               	return		;funcret
  6988   00298E                     __end_of_decision:
  6989                           	callstack 0
  6990                           
  6991 ;; *************** function _moveYellow *****************
  6992 ;; Defined at:
  6993 ;;		line 284 in file "dc_motor.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6996 ;;		 -> motorL(9), 
  6997 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6998 ;;		 -> motorR(9), 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;		None
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7014 ;;Total ram usage:        4 bytes
  7015 ;; Hardware stack levels used: 1
  7016 ;; Hardware stack levels required when called: 5
  7017 ;; This function calls:
  7018 ;;		_backOneAndHalf
  7019 ;;		_right90
  7020 ;; This function is called by:
  7021 ;;		_decision
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text23
  7026   0044C4                     __ptext23:
  7027                           	callstack 0
  7028   0044C4                     _moveYellow:
  7029                           	callstack 24
  7030   0044C4                     
  7031                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7032   0044C4  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7033   0044C8  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7034   0044CC  ECAD  F022         	call	_backOneAndHalf	;wreg free
  7035   0044D0                     
  7036                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7037   0044D0  0E29               	movlw	41
  7038   0044D2  6E20               	movwf	(??_moveYellow+1)^0,c
  7039   0044D4  0E96               	movlw	150
  7040   0044D6  6E1F               	movwf	??_moveYellow^0,c
  7041   0044D8  0E7F               	movlw	127
  7042   0044DA                     u7097:
  7043   0044DA  2EE8               	decfsz	wreg,f,c
  7044   0044DC  D7FE               	bra	u7097
  7045   0044DE  2E1F               	decfsz	??_moveYellow^0,f,c
  7046   0044E0  D7FC               	bra	u7097
  7047   0044E2  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7048   0044E4  D7FA               	bra	u7097
  7049   0044E6  0000               	nop	
  7050   0044E8                     
  7051                           ;dc_motor.c: 289:     right90(mL,mR);
  7052   0044E8  C01D  F019         	movff	moveYellow@mL,right90@mL
  7053   0044EC  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7054   0044F0  EC8E  F023         	call	_right90	;wreg free
  7055   0044F4  0012               	return		;funcret
  7056   0044F6                     __end_of_moveYellow:
  7057                           	callstack 0
  7058                           
  7059 ;; *************** function _moveRed *****************
  7060 ;; Defined at:
  7061 ;;		line 255 in file "dc_motor.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7064 ;;		 -> motorL(9), 
  7065 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7066 ;;		 -> motorR(9), 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;                  1    wreg      void 
  7071 ;; Registers used:
  7072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7081 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7082 ;;Total ram usage:        4 bytes
  7083 ;; Hardware stack levels used: 1
  7084 ;; Hardware stack levels required when called: 5
  7085 ;; This function calls:
  7086 ;;		_backHalf
  7087 ;;		_right90
  7088 ;; This function is called by:
  7089 ;;		_decision
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text24
  7094   0044F6                     __ptext24:
  7095                           	callstack 0
  7096   0044F6                     _moveRed:
  7097                           	callstack 24
  7098   0044F6                     
  7099                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7100   0044F6  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7101   0044FA  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7102   0044FE  ECBE  F023         	call	_backHalf	;wreg free
  7103   004502                     
  7104                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7105   004502  0E29               	movlw	41
  7106   004504  6E20               	movwf	(??_moveRed+1)^0,c
  7107   004506  0E96               	movlw	150
  7108   004508  6E1F               	movwf	??_moveRed^0,c
  7109   00450A  0E7F               	movlw	127
  7110   00450C                     u7107:
  7111   00450C  2EE8               	decfsz	wreg,f,c
  7112   00450E  D7FE               	bra	u7107
  7113   004510  2E1F               	decfsz	??_moveRed^0,f,c
  7114   004512  D7FC               	bra	u7107
  7115   004514  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7116   004516  D7FA               	bra	u7107
  7117   004518  0000               	nop	
  7118   00451A                     
  7119                           ;dc_motor.c: 260:     right90(mL,mR);
  7120   00451A  C01D  F019         	movff	moveRed@mL,right90@mL
  7121   00451E  C01E  F01A         	movff	moveRed@mR,right90@mR
  7122   004522  EC8E  F023         	call	_right90	;wreg free
  7123   004526  0012               	return		;funcret
  7124   004528                     __end_of_moveRed:
  7125                           	callstack 0
  7126                           
  7127 ;; *************** function _right90 *****************
  7128 ;; Defined at:
  7129 ;;		line 193 in file "dc_motor.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7132 ;;		 -> motorL(9), 
  7133 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7134 ;;		 -> motorR(9), 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;		None
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  1    wreg      void 
  7139 ;; Registers used:
  7140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7149 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7150 ;;Total ram usage:        4 bytes
  7151 ;; Hardware stack levels used: 1
  7152 ;; Hardware stack levels required when called: 4
  7153 ;; This function calls:
  7154 ;;		_stop
  7155 ;;		_turnRight
  7156 ;; This function is called by:
  7157 ;;		_moveRed
  7158 ;;		_moveYellow
  7159 ;;		_reverseTurn
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text25
  7164   00471C                     __ptext25:
  7165                           	callstack 0
  7166   00471C                     _right90:
  7167                           	callstack 24
  7168   00471C                     
  7169                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7170   00471C  C019  F014         	movff	right90@mL,turnRight@mL
  7171   004720  C01A  F015         	movff	right90@mR,turnRight@mR
  7172   004724  EC30  F01F         	call	_turnRight	;wreg free
  7173   004728                     
  7174                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7175   004728  0E18               	movlw	24
  7176   00472A  6E1C               	movwf	(??_right90+1)^0,c
  7177   00472C  0E8A               	movlw	138
  7178   00472E  6E1B               	movwf	??_right90^0,c
  7179   004730  0EE8               	movlw	232
  7180   004732                     u7117:
  7181   004732  2EE8               	decfsz	wreg,f,c
  7182   004734  D7FE               	bra	u7117
  7183   004736  2E1B               	decfsz	??_right90^0,f,c
  7184   004738  D7FC               	bra	u7117
  7185   00473A  2E1C               	decfsz	(??_right90+1)^0,f,c
  7186   00473C  D7FA               	bra	u7117
  7187   00473E                     
  7188                           ;dc_motor.c: 197:     stop(mL,mR);
  7189   00473E  C019  F014         	movff	right90@mL,stop@mL
  7190   004742  C01A  F015         	movff	right90@mR,stop@mR
  7191   004746  ECE9  F01E         	call	_stop	;wreg free
  7192   00474A  0012               	return		;funcret
  7193   00474C                     __end_of_right90:
  7194                           	callstack 0
  7195                           
  7196 ;; *************** function _movePink *****************
  7197 ;; Defined at:
  7198 ;;		line 293 in file "dc_motor.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7201 ;;		 -> motorL(9), 
  7202 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7203 ;;		 -> motorR(9), 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7218 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7219 ;;Total ram usage:        4 bytes
  7220 ;; Hardware stack levels used: 1
  7221 ;; Hardware stack levels required when called: 5
  7222 ;; This function calls:
  7223 ;;		_backOneAndHalf
  7224 ;;		_left90
  7225 ;; This function is called by:
  7226 ;;		_decision
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text26
  7231   004528                     __ptext26:
  7232                           	callstack 0
  7233   004528                     _movePink:
  7234                           	callstack 24
  7235   004528                     
  7236                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7237   004528  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7238   00452C  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7239   004530  ECAD  F022         	call	_backOneAndHalf	;wreg free
  7240   004534                     
  7241                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7242   004534  0E29               	movlw	41
  7243   004536  6E20               	movwf	(??_movePink+1)^0,c
  7244   004538  0E96               	movlw	150
  7245   00453A  6E1F               	movwf	??_movePink^0,c
  7246   00453C  0E7F               	movlw	127
  7247   00453E                     u7127:
  7248   00453E  2EE8               	decfsz	wreg,f,c
  7249   004540  D7FE               	bra	u7127
  7250   004542  2E1F               	decfsz	??_movePink^0,f,c
  7251   004544  D7FC               	bra	u7127
  7252   004546  2E20               	decfsz	(??_movePink+1)^0,f,c
  7253   004548  D7FA               	bra	u7127
  7254   00454A  0000               	nop	
  7255   00454C                     
  7256                           ;dc_motor.c: 298:     left90(mL,mR);
  7257   00454C  C01D  F019         	movff	movePink@mL,left90@mL
  7258   004550  C01E  F01A         	movff	movePink@mR,left90@mR
  7259   004554  ECA6  F023         	call	_left90	;wreg free
  7260   004558  0012               	return		;funcret
  7261   00455A                     __end_of_movePink:
  7262                           	callstack 0
  7263                           
  7264 ;; *************** function _backOneAndHalf *****************
  7265 ;; Defined at:
  7266 ;;		line 241 in file "dc_motor.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7269 ;;		 -> motorL(9), 
  7270 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7271 ;;		 -> motorR(9), 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7286 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7287 ;;Total ram usage:        4 bytes
  7288 ;; Hardware stack levels used: 1
  7289 ;; Hardware stack levels required when called: 4
  7290 ;; This function calls:
  7291 ;;		_fullSpeedBack
  7292 ;;		_stop
  7293 ;; This function is called by:
  7294 ;;		_moveYellow
  7295 ;;		_movePink
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text27
  7300   00455A                     __ptext27:
  7301                           	callstack 0
  7302   00455A                     _backOneAndHalf:
  7303                           	callstack 24
  7304   00455A                     
  7305                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7306   00455A  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7307   00455E  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7308   004562  ECAE  F01F         	call	_fullSpeedBack	;wreg free
  7309   004566                     
  7310                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7311   004566  0E6A               	movlw	106
  7312   004568  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7313   00456A  0E85               	movlw	133
  7314   00456C  6E1B               	movwf	??_backOneAndHalf^0,c
  7315   00456E  0EB4               	movlw	180
  7316   004570                     u7137:
  7317   004570  2EE8               	decfsz	wreg,f,c
  7318   004572  D7FE               	bra	u7137
  7319   004574  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7320   004576  D7FC               	bra	u7137
  7321   004578  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7322   00457A  D7FA               	bra	u7137
  7323   00457C  D000               	nop2	
  7324   00457E                     
  7325                           ;dc_motor.c: 245:     stop(mL,mR);
  7326   00457E  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7327   004582  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7328   004586  ECE9  F01E         	call	_stop	;wreg free
  7329   00458A  0012               	return		;funcret
  7330   00458C                     __end_of_backOneAndHalf:
  7331                           	callstack 0
  7332                           
  7333 ;; *************** function _moveOrange *****************
  7334 ;; Defined at:
  7335 ;;		line 302 in file "dc_motor.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7338 ;;		 -> motorL(9), 
  7339 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7340 ;;		 -> motorR(9), 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;		None
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7352 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;Total ram usage:        4 bytes
  7357 ;; Hardware stack levels used: 1
  7358 ;; Hardware stack levels required when called: 5
  7359 ;; This function calls:
  7360 ;;		_backHalf
  7361 ;;		_right135
  7362 ;; This function is called by:
  7363 ;;		_decision
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text28
  7368   00458C                     __ptext28:
  7369                           	callstack 0
  7370   00458C                     _moveOrange:
  7371                           	callstack 24
  7372   00458C                     
  7373                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7374   00458C  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7375   004590  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7376   004594  ECBE  F023         	call	_backHalf	;wreg free
  7377   004598                     
  7378                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7379   004598  0E29               	movlw	41
  7380   00459A  6E20               	movwf	(??_moveOrange+1)^0,c
  7381   00459C  0E96               	movlw	150
  7382   00459E  6E1F               	movwf	??_moveOrange^0,c
  7383   0045A0  0E7F               	movlw	127
  7384   0045A2                     u7147:
  7385   0045A2  2EE8               	decfsz	wreg,f,c
  7386   0045A4  D7FE               	bra	u7147
  7387   0045A6  2E1F               	decfsz	??_moveOrange^0,f,c
  7388   0045A8  D7FC               	bra	u7147
  7389   0045AA  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7390   0045AC  D7FA               	bra	u7147
  7391   0045AE  0000               	nop	
  7392   0045B0                     
  7393                           ;dc_motor.c: 307:     right135(mL,mR);
  7394   0045B0  C01D  F019         	movff	moveOrange@mL,right135@mL
  7395   0045B4  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7396   0045B8  ECDF  F022         	call	_right135	;wreg free
  7397   0045BC  0012               	return		;funcret
  7398   0045BE                     __end_of_moveOrange:
  7399                           	callstack 0
  7400                           
  7401 ;; *************** function _right135 *****************
  7402 ;; Defined at:
  7403 ;;		line 217 in file "dc_motor.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7406 ;;		 -> motorL(9), 
  7407 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7408 ;;		 -> motorR(9), 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7423 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7424 ;;Total ram usage:        4 bytes
  7425 ;; Hardware stack levels used: 1
  7426 ;; Hardware stack levels required when called: 4
  7427 ;; This function calls:
  7428 ;;		_stop
  7429 ;;		_turnRight
  7430 ;; This function is called by:
  7431 ;;		_moveOrange
  7432 ;;		_reverseTurn
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           	psect	text29
  7437   0045BE                     __ptext29:
  7438                           	callstack 0
  7439   0045BE                     _right135:
  7440                           	callstack 24
  7441   0045BE                     
  7442                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7443   0045BE  C019  F014         	movff	right135@mL,turnRight@mL
  7444   0045C2  C01A  F015         	movff	right135@mR,turnRight@mR
  7445   0045C6  EC30  F01F         	call	_turnRight	;wreg free
  7446   0045CA                     
  7447                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7448   0045CA  0E21               	movlw	33
  7449   0045CC  6E1C               	movwf	(??_right135+1)^0,c
  7450   0045CE  0E78               	movlw	120
  7451   0045D0  6E1B               	movwf	??_right135^0,c
  7452   0045D2  0E98               	movlw	152
  7453   0045D4                     u7157:
  7454   0045D4  2EE8               	decfsz	wreg,f,c
  7455   0045D6  D7FE               	bra	u7157
  7456   0045D8  2E1B               	decfsz	??_right135^0,f,c
  7457   0045DA  D7FC               	bra	u7157
  7458   0045DC  2E1C               	decfsz	(??_right135+1)^0,f,c
  7459   0045DE  D7FA               	bra	u7157
  7460   0045E0  D000               	nop2	
  7461   0045E2                     
  7462                           ;dc_motor.c: 221:     stop(mL,mR);
  7463   0045E2  C019  F014         	movff	right135@mL,stop@mL
  7464   0045E6  C01A  F015         	movff	right135@mR,stop@mR
  7465   0045EA  ECE9  F01E         	call	_stop	;wreg free
  7466   0045EE  0012               	return		;funcret
  7467   0045F0                     __end_of_right135:
  7468                           	callstack 0
  7469                           
  7470 ;; *************** function _turnRight *****************
  7471 ;; Defined at:
  7472 ;;		line 125 in file "dc_motor.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7475 ;;		 -> motorL(9), 
  7476 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7477 ;;		 -> motorR(9), 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  i               2   22[COMRAM] unsigned int 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7491 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7492 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7493 ;;Total ram usage:        5 bytes
  7494 ;; Hardware stack levels used: 1
  7495 ;; Hardware stack levels required when called: 3
  7496 ;; This function calls:
  7497 ;;		_setMotorPWM
  7498 ;; This function is called by:
  7499 ;;		_right90
  7500 ;;		_right135
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text30
  7505   003E60                     __ptext30:
  7506                           	callstack 0
  7507   003E60                     _turnRight:
  7508                           	callstack 24
  7509   003E60                     
  7510                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7511   003E60  5014               	movf	turnRight@mL^0,w,c
  7512   003E62  6ED9               	movwf	fsr2l,c
  7513   003E64  6ADA               	clrf	fsr2h,c
  7514   003E66  0E01               	movlw	1
  7515   003E68  26D9               	addwf	fsr2l,f,c
  7516   003E6A  0E01               	movlw	1
  7517   003E6C  6EDF               	movwf	indf2,c
  7518                           
  7519                           ;dc_motor.c: 129:     mR->direction = 0;
  7520   003E6E  5015               	movf	turnRight@mR^0,w,c
  7521   003E70  6ED9               	movwf	fsr2l,c
  7522   003E72  6ADA               	clrf	fsr2h,c
  7523   003E74  0E01               	movlw	1
  7524   003E76  26D9               	addwf	fsr2l,f,c
  7525   003E78  6ADF               	clrf	indf2,c
  7526   003E7A                     
  7527                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7528   003E7A  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7529   003E7E  ECF3  F018         	call	_setMotorPWM	;wreg free
  7530   003E82                     
  7531                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7532   003E82  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7533   003E86  ECF3  F018         	call	_setMotorPWM	;wreg free
  7534   003E8A                     
  7535                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7536   003E8A  0E00               	movlw	0
  7537   003E8C  6E18               	movwf	(turnRight@i+1)^0,c
  7538   003E8E  0E00               	movlw	0
  7539   003E90  6E17               	movwf	turnRight@i^0,c
  7540   003E92                     l5698:
  7541                           
  7542                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7543   003E92  5014               	movf	turnRight@mL^0,w,c
  7544   003E94  6ED9               	movwf	fsr2l,c
  7545   003E96  6ADA               	clrf	fsr2h,c
  7546   003E98  2ADF               	incf	indf2,f,c
  7547                           
  7548                           ;dc_motor.c: 136:         mR->power++;
  7549   003E9A  5015               	movf	turnRight@mR^0,w,c
  7550   003E9C  6ED9               	movwf	fsr2l,c
  7551   003E9E  6ADA               	clrf	fsr2h,c
  7552   003EA0  2ADF               	incf	indf2,f,c
  7553   003EA2                     
  7554                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7555   003EA2  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7556   003EA6  ECF3  F018         	call	_setMotorPWM	;wreg free
  7557   003EAA                     
  7558                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7559   003EAA  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7560   003EAE  ECF3  F018         	call	_setMotorPWM	;wreg free
  7561   003EB2                     
  7562                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7563   003EB2  0E0B               	movlw	11
  7564   003EB4  6E16               	movwf	??_turnRight^0,c
  7565   003EB6  0E62               	movlw	98
  7566   003EB8                     u7167:
  7567   003EB8  2EE8               	decfsz	wreg,f,c
  7568   003EBA  D7FE               	bra	u7167
  7569   003EBC  2E16               	decfsz	??_turnRight^0,f,c
  7570   003EBE  D7FC               	bra	u7167
  7571   003EC0  D000               	nop2	
  7572   003EC2                     
  7573                           ;dc_motor.c: 140:     }
  7574   003EC2  4A17               	infsnz	turnRight@i^0,f,c
  7575   003EC4  2A18               	incf	(turnRight@i+1)^0,f,c
  7576   003EC6  5018               	movf	(turnRight@i+1)^0,w,c
  7577   003EC8  E109               	bnz	u5190
  7578   003ECA  0E32               	movlw	50
  7579   003ECC  5C17               	subwf	turnRight@i^0,w,c
  7580   003ECE  A0D8               	btfss	status,0,c
  7581   003ED0  EF6C  F01F         	goto	u5191
  7582   003ED4  EF6E  F01F         	goto	u5190
  7583   003ED8                     u5191:
  7584   003ED8  EF49  F01F         	goto	l5698
  7585   003EDC                     u5190:
  7586   003EDC  0012               	return		;funcret
  7587   003EDE                     __end_of_turnRight:
  7588                           	callstack 0
  7589                           
  7590 ;; *************** function _moveLightBlue *****************
  7591 ;; Defined at:
  7592 ;;		line 311 in file "dc_motor.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7595 ;;		 -> motorL(9), 
  7596 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7597 ;;		 -> motorR(9), 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;		None
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7611 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7612 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7613 ;;Total ram usage:        4 bytes
  7614 ;; Hardware stack levels used: 1
  7615 ;; Hardware stack levels required when called: 5
  7616 ;; This function calls:
  7617 ;;		_backHalf
  7618 ;;		_left135
  7619 ;; This function is called by:
  7620 ;;		_decision
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text31
  7625   0045F0                     __ptext31:
  7626                           	callstack 0
  7627   0045F0                     _moveLightBlue:
  7628                           	callstack 24
  7629   0045F0                     
  7630                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7631   0045F0  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7632   0045F4  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7633   0045F8  ECBE  F023         	call	_backHalf	;wreg free
  7634   0045FC                     
  7635                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7636   0045FC  0E29               	movlw	41
  7637   0045FE  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7638   004600  0E96               	movlw	150
  7639   004602  6E1F               	movwf	??_moveLightBlue^0,c
  7640   004604  0E7F               	movlw	127
  7641   004606                     u7177:
  7642   004606  2EE8               	decfsz	wreg,f,c
  7643   004608  D7FE               	bra	u7177
  7644   00460A  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7645   00460C  D7FC               	bra	u7177
  7646   00460E  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7647   004610  D7FA               	bra	u7177
  7648   004612  0000               	nop	
  7649   004614                     
  7650                           ;dc_motor.c: 316:     left135(mL,mR);
  7651   004614  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7652   004618  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7653   00461C  EC11  F023         	call	_left135	;wreg free
  7654   004620  0012               	return		;funcret
  7655   004622                     __end_of_moveLightBlue:
  7656                           	callstack 0
  7657                           
  7658 ;; *************** function _left135 *****************
  7659 ;; Defined at:
  7660 ;;		line 225 in file "dc_motor.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7663 ;;		 -> motorL(9), 
  7664 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7665 ;;		 -> motorR(9), 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7679 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7680 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7681 ;;Total ram usage:        4 bytes
  7682 ;; Hardware stack levels used: 1
  7683 ;; Hardware stack levels required when called: 4
  7684 ;; This function calls:
  7685 ;;		_stop
  7686 ;;		_turnLeft
  7687 ;; This function is called by:
  7688 ;;		_moveLightBlue
  7689 ;;		_reverseTurn
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text32
  7694   004622                     __ptext32:
  7695                           	callstack 0
  7696   004622                     _left135:
  7697                           	callstack 24
  7698   004622                     
  7699                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7700   004622  C019  F014         	movff	left135@mL,turnLeft@mL
  7701   004626  C01A  F015         	movff	left135@mR,turnLeft@mR
  7702   00462A  EC6F  F01F         	call	_turnLeft	;wreg free
  7703   00462E                     
  7704                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7705   00462E  0E21               	movlw	33
  7706   004630  6E1C               	movwf	(??_left135+1)^0,c
  7707   004632  0E78               	movlw	120
  7708   004634  6E1B               	movwf	??_left135^0,c
  7709   004636  0E98               	movlw	152
  7710   004638                     u7187:
  7711   004638  2EE8               	decfsz	wreg,f,c
  7712   00463A  D7FE               	bra	u7187
  7713   00463C  2E1B               	decfsz	??_left135^0,f,c
  7714   00463E  D7FC               	bra	u7187
  7715   004640  2E1C               	decfsz	(??_left135+1)^0,f,c
  7716   004642  D7FA               	bra	u7187
  7717   004644  D000               	nop2	
  7718   004646                     
  7719                           ;dc_motor.c: 229:     stop(mL,mR);
  7720   004646  C019  F014         	movff	left135@mL,stop@mL
  7721   00464A  C01A  F015         	movff	left135@mR,stop@mR
  7722   00464E  ECE9  F01E         	call	_stop	;wreg free
  7723   004652  0012               	return		;funcret
  7724   004654                     __end_of_left135:
  7725                           	callstack 0
  7726                           
  7727 ;; *************** function _moveGreen *****************
  7728 ;; Defined at:
  7729 ;;		line 266 in file "dc_motor.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7732 ;;		 -> motorL(9), 
  7733 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7734 ;;		 -> motorR(9), 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;Total ram usage:        4 bytes
  7751 ;; Hardware stack levels used: 1
  7752 ;; Hardware stack levels required when called: 5
  7753 ;; This function calls:
  7754 ;;		_backHalf
  7755 ;;		_left90
  7756 ;; This function is called by:
  7757 ;;		_decision
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text33
  7762   004654                     __ptext33:
  7763                           	callstack 0
  7764   004654                     _moveGreen:
  7765                           	callstack 24
  7766   004654                     
  7767                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7768   004654  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7769   004658  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7770   00465C  ECBE  F023         	call	_backHalf	;wreg free
  7771   004660                     
  7772                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7773   004660  0E29               	movlw	41
  7774   004662  6E20               	movwf	(??_moveGreen+1)^0,c
  7775   004664  0E96               	movlw	150
  7776   004666  6E1F               	movwf	??_moveGreen^0,c
  7777   004668  0E7F               	movlw	127
  7778   00466A                     u7197:
  7779   00466A  2EE8               	decfsz	wreg,f,c
  7780   00466C  D7FE               	bra	u7197
  7781   00466E  2E1F               	decfsz	??_moveGreen^0,f,c
  7782   004670  D7FC               	bra	u7197
  7783   004672  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7784   004674  D7FA               	bra	u7197
  7785   004676  0000               	nop	
  7786   004678                     
  7787                           ;dc_motor.c: 271:     left90(mL,mR);
  7788   004678  C01D  F019         	movff	moveGreen@mL,left90@mL
  7789   00467C  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7790   004680  ECA6  F023         	call	_left90	;wreg free
  7791   004684  0012               	return		;funcret
  7792   004686                     __end_of_moveGreen:
  7793                           	callstack 0
  7794                           
  7795 ;; *************** function _left90 *****************
  7796 ;; Defined at:
  7797 ;;		line 201 in file "dc_motor.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7800 ;;		 -> motorL(9), 
  7801 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7802 ;;		 -> motorR(9), 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;		None
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      void 
  7807 ;; Registers used:
  7808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7814 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7818 ;;Total ram usage:        4 bytes
  7819 ;; Hardware stack levels used: 1
  7820 ;; Hardware stack levels required when called: 4
  7821 ;; This function calls:
  7822 ;;		_stop
  7823 ;;		_turnLeft
  7824 ;; This function is called by:
  7825 ;;		_moveGreen
  7826 ;;		_movePink
  7827 ;;		_reverseTurn
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text34
  7832   00474C                     __ptext34:
  7833                           	callstack 0
  7834   00474C                     _left90:
  7835                           	callstack 24
  7836   00474C                     
  7837                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7838   00474C  C019  F014         	movff	left90@mL,turnLeft@mL
  7839   004750  C01A  F015         	movff	left90@mR,turnLeft@mR
  7840   004754  EC6F  F01F         	call	_turnLeft	;wreg free
  7841   004758                     
  7842                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7843   004758  0E18               	movlw	24
  7844   00475A  6E1C               	movwf	(??_left90+1)^0,c
  7845   00475C  0E8A               	movlw	138
  7846   00475E  6E1B               	movwf	??_left90^0,c
  7847   004760  0EE8               	movlw	232
  7848   004762                     u7207:
  7849   004762  2EE8               	decfsz	wreg,f,c
  7850   004764  D7FE               	bra	u7207
  7851   004766  2E1B               	decfsz	??_left90^0,f,c
  7852   004768  D7FC               	bra	u7207
  7853   00476A  2E1C               	decfsz	(??_left90+1)^0,f,c
  7854   00476C  D7FA               	bra	u7207
  7855   00476E                     
  7856                           ;dc_motor.c: 205:     stop(mL,mR);
  7857   00476E  C019  F014         	movff	left90@mL,stop@mL
  7858   004772  C01A  F015         	movff	left90@mR,stop@mR
  7859   004776  ECE9  F01E         	call	_stop	;wreg free
  7860   00477A  0012               	return		;funcret
  7861   00477C                     __end_of_left90:
  7862                           	callstack 0
  7863                           
  7864 ;; *************** function _moveBlue *****************
  7865 ;; Defined at:
  7866 ;;		line 275 in file "dc_motor.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7869 ;;		 -> motorL(9), 
  7870 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7871 ;;		 -> motorR(9), 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;		None
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  1    wreg      void 
  7876 ;; Registers used:
  7877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7885 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7887 ;;Total ram usage:        4 bytes
  7888 ;; Hardware stack levels used: 1
  7889 ;; Hardware stack levels required when called: 5
  7890 ;; This function calls:
  7891 ;;		_backHalf
  7892 ;;		_turn180
  7893 ;; This function is called by:
  7894 ;;		_decision
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text35
  7899   004686                     __ptext35:
  7900                           	callstack 0
  7901   004686                     _moveBlue:
  7902                           	callstack 24
  7903   004686                     
  7904                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  7905   004686  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7906   00468A  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7907   00468E  ECBE  F023         	call	_backHalf	;wreg free
  7908   004692                     
  7909                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7910   004692  0E29               	movlw	41
  7911   004694  6E20               	movwf	(??_moveBlue+1)^0,c
  7912   004696  0E96               	movlw	150
  7913   004698  6E1F               	movwf	??_moveBlue^0,c
  7914   00469A  0E7F               	movlw	127
  7915   00469C                     u7217:
  7916   00469C  2EE8               	decfsz	wreg,f,c
  7917   00469E  D7FE               	bra	u7217
  7918   0046A0  2E1F               	decfsz	??_moveBlue^0,f,c
  7919   0046A2  D7FC               	bra	u7217
  7920   0046A4  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  7921   0046A6  D7FA               	bra	u7217
  7922   0046A8  0000               	nop	
  7923   0046AA                     
  7924                           ;dc_motor.c: 280:     turn180(mL,mR);
  7925   0046AA  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7926   0046AE  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7927   0046B2  EC5C  F023         	call	_turn180	;wreg free
  7928   0046B6  0012               	return		;funcret
  7929   0046B8                     __end_of_moveBlue:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function _turn180 *****************
  7933 ;; Defined at:
  7934 ;;		line 209 in file "dc_motor.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7937 ;;		 -> motorL(9), 
  7938 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7939 ;;		 -> motorR(9), 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;		None
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1    wreg      void 
  7944 ;; Registers used:
  7945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7953 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7954 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7955 ;;Total ram usage:        4 bytes
  7956 ;; Hardware stack levels used: 1
  7957 ;; Hardware stack levels required when called: 4
  7958 ;; This function calls:
  7959 ;;		_stop
  7960 ;;		_turnLeft
  7961 ;; This function is called by:
  7962 ;;		_moveBlue
  7963 ;;		_moveWhite
  7964 ;;		_reverseTurn
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           	psect	text36
  7969   0046B8                     __ptext36:
  7970                           	callstack 0
  7971   0046B8                     _turn180:
  7972                           	callstack 24
  7973   0046B8                     
  7974                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7975   0046B8  C019  F014         	movff	turn180@mL,turnLeft@mL
  7976   0046BC  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7977   0046C0  EC6F  F01F         	call	_turnLeft	;wreg free
  7978   0046C4                     
  7979                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7980   0046C4  0E30               	movlw	48
  7981   0046C6  6E1C               	movwf	(??_turn180+1)^0,c
  7982   0046C8  0E14               	movlw	20
  7983   0046CA  6E1B               	movwf	??_turn180^0,c
  7984   0046CC  0ED1               	movlw	209
  7985   0046CE                     u7227:
  7986   0046CE  2EE8               	decfsz	wreg,f,c
  7987   0046D0  D7FE               	bra	u7227
  7988   0046D2  2E1B               	decfsz	??_turn180^0,f,c
  7989   0046D4  D7FC               	bra	u7227
  7990   0046D6  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7991   0046D8  D7FA               	bra	u7227
  7992   0046DA  0000               	nop	
  7993   0046DC                     
  7994                           ;dc_motor.c: 213:     stop(mL,mR);
  7995   0046DC  C019  F014         	movff	turn180@mL,stop@mL
  7996   0046E0  C01A  F015         	movff	turn180@mR,stop@mR
  7997   0046E4  ECE9  F01E         	call	_stop	;wreg free
  7998   0046E8  0012               	return		;funcret
  7999   0046EA                     __end_of_turn180:
  8000                           	callstack 0
  8001                           
  8002 ;; *************** function _turnLeft *****************
  8003 ;; Defined at:
  8004 ;;		line 105 in file "dc_motor.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8007 ;;		 -> motorL(9), 
  8008 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8009 ;;		 -> motorR(9), 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  i               2   22[COMRAM] unsigned int 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      void 
  8014 ;; Registers used:
  8015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8023 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8024 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8025 ;;Total ram usage:        5 bytes
  8026 ;; Hardware stack levels used: 1
  8027 ;; Hardware stack levels required when called: 3
  8028 ;; This function calls:
  8029 ;;		_setMotorPWM
  8030 ;; This function is called by:
  8031 ;;		_left90
  8032 ;;		_turn180
  8033 ;;		_left135
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text37
  8038   003EDE                     __ptext37:
  8039                           	callstack 0
  8040   003EDE                     _turnLeft:
  8041                           	callstack 24
  8042   003EDE                     
  8043                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8044   003EDE  5014               	movf	turnLeft@mL^0,w,c
  8045   003EE0  6ED9               	movwf	fsr2l,c
  8046   003EE2  6ADA               	clrf	fsr2h,c
  8047   003EE4  0E01               	movlw	1
  8048   003EE6  26D9               	addwf	fsr2l,f,c
  8049   003EE8  6ADF               	clrf	indf2,c
  8050                           
  8051                           ;dc_motor.c: 109:     mR->direction = 1;
  8052   003EEA  5015               	movf	turnLeft@mR^0,w,c
  8053   003EEC  6ED9               	movwf	fsr2l,c
  8054   003EEE  6ADA               	clrf	fsr2h,c
  8055   003EF0  0E01               	movlw	1
  8056   003EF2  26D9               	addwf	fsr2l,f,c
  8057   003EF4  0E01               	movlw	1
  8058   003EF6  6EDF               	movwf	indf2,c
  8059   003EF8                     
  8060                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8061   003EF8  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8062   003EFC  ECF3  F018         	call	_setMotorPWM	;wreg free
  8063   003F00                     
  8064                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8065   003F00  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8066   003F04  ECF3  F018         	call	_setMotorPWM	;wreg free
  8067   003F08                     
  8068                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8069   003F08  0E00               	movlw	0
  8070   003F0A  6E18               	movwf	(turnLeft@i+1)^0,c
  8071   003F0C  0E00               	movlw	0
  8072   003F0E  6E17               	movwf	turnLeft@i^0,c
  8073   003F10                     l5674:
  8074                           
  8075                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8076   003F10  5014               	movf	turnLeft@mL^0,w,c
  8077   003F12  6ED9               	movwf	fsr2l,c
  8078   003F14  6ADA               	clrf	fsr2h,c
  8079   003F16  2ADF               	incf	indf2,f,c
  8080                           
  8081                           ;dc_motor.c: 116:         mR->power++;
  8082   003F18  5015               	movf	turnLeft@mR^0,w,c
  8083   003F1A  6ED9               	movwf	fsr2l,c
  8084   003F1C  6ADA               	clrf	fsr2h,c
  8085   003F1E  2ADF               	incf	indf2,f,c
  8086   003F20                     
  8087                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8088   003F20  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8089   003F24  ECF3  F018         	call	_setMotorPWM	;wreg free
  8090   003F28                     
  8091                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8092   003F28  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8093   003F2C  ECF3  F018         	call	_setMotorPWM	;wreg free
  8094   003F30                     
  8095                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8096   003F30  0E0B               	movlw	11
  8097   003F32  6E16               	movwf	??_turnLeft^0,c
  8098   003F34  0E62               	movlw	98
  8099   003F36                     u7237:
  8100   003F36  2EE8               	decfsz	wreg,f,c
  8101   003F38  D7FE               	bra	u7237
  8102   003F3A  2E16               	decfsz	??_turnLeft^0,f,c
  8103   003F3C  D7FC               	bra	u7237
  8104   003F3E  D000               	nop2	
  8105   003F40                     
  8106                           ;dc_motor.c: 120:     }
  8107   003F40  4A17               	infsnz	turnLeft@i^0,f,c
  8108   003F42  2A18               	incf	(turnLeft@i+1)^0,f,c
  8109   003F44  5018               	movf	(turnLeft@i+1)^0,w,c
  8110   003F46  E109               	bnz	u5180
  8111   003F48  0E32               	movlw	50
  8112   003F4A  5C17               	subwf	turnLeft@i^0,w,c
  8113   003F4C  A0D8               	btfss	status,0,c
  8114   003F4E  EFAB  F01F         	goto	u5181
  8115   003F52  EFAD  F01F         	goto	u5180
  8116   003F56                     u5181:
  8117   003F56  EF88  F01F         	goto	l5674
  8118   003F5A                     u5180:
  8119   003F5A  0012               	return		;funcret
  8120   003F5C                     __end_of_turnLeft:
  8121                           	callstack 0
  8122                           
  8123 ;; *************** function _backHalf *****************
  8124 ;; Defined at:
  8125 ;;		line 233 in file "dc_motor.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8128 ;;		 -> motorL(9), 
  8129 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8130 ;;		 -> motorR(9), 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      void 
  8135 ;; Registers used:
  8136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8146 ;;Total ram usage:        4 bytes
  8147 ;; Hardware stack levels used: 1
  8148 ;; Hardware stack levels required when called: 4
  8149 ;; This function calls:
  8150 ;;		_fullSpeedBack
  8151 ;;		_stop
  8152 ;; This function is called by:
  8153 ;;		_moveRed
  8154 ;;		_moveGreen
  8155 ;;		_moveBlue
  8156 ;;		_moveOrange
  8157 ;;		_moveLightBlue
  8158 ;;		_moveWhite
  8159 ;;		_reverseTurn
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           	psect	text38
  8164   00477C                     __ptext38:
  8165                           	callstack 0
  8166   00477C                     _backHalf:
  8167                           	callstack 24
  8168   00477C                     
  8169                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8170   00477C  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8171   004780  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8172   004784  ECAE  F01F         	call	_fullSpeedBack	;wreg free
  8173   004788                     
  8174                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8175   004788  0E19               	movlw	25
  8176   00478A  6E1C               	movwf	(??_backHalf+1)^0,c
  8177   00478C  0E5A               	movlw	90
  8178   00478E  6E1B               	movwf	??_backHalf^0,c
  8179   004790  0EB2               	movlw	178
  8180   004792                     u7247:
  8181   004792  2EE8               	decfsz	wreg,f,c
  8182   004794  D7FE               	bra	u7247
  8183   004796  2E1B               	decfsz	??_backHalf^0,f,c
  8184   004798  D7FC               	bra	u7247
  8185   00479A  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8186   00479C  D7FA               	bra	u7247
  8187   00479E                     
  8188                           ;dc_motor.c: 237:     stop(mL,mR);
  8189   00479E  C019  F014         	movff	backHalf@mL,stop@mL
  8190   0047A2  C01A  F015         	movff	backHalf@mR,stop@mR
  8191   0047A6  ECE9  F01E         	call	_stop	;wreg free
  8192   0047AA  0012               	return		;funcret
  8193   0047AC                     __end_of_backHalf:
  8194                           	callstack 0
  8195                           
  8196 ;; *************** function _stop *****************
  8197 ;; Defined at:
  8198 ;;		line 88 in file "dc_motor.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8201 ;;		 -> motorL(9), 
  8202 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8203 ;;		 -> motorR(9), 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8218 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8219 ;;Total ram usage:        3 bytes
  8220 ;; Hardware stack levels used: 1
  8221 ;; Hardware stack levels required when called: 3
  8222 ;; This function calls:
  8223 ;;		_setMotorPWM
  8224 ;; This function is called by:
  8225 ;;		_main
  8226 ;;		_right90
  8227 ;;		_left90
  8228 ;;		_turn180
  8229 ;;		_right135
  8230 ;;		_left135
  8231 ;;		_backHalf
  8232 ;;		_backOneAndHalf
  8233 ;;		_reverseStraight
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           	psect	text39
  8238   003DD2                     __ptext39:
  8239                           	callstack 0
  8240   003DD2                     _stop:
  8241                           	callstack 27
  8242   003DD2                     
  8243                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8244   003DD2  EF19  F01F         	goto	l5658
  8245   003DD6                     l5644:
  8246                           
  8247                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8248   003DD6  5014               	movf	stop@mL^0,w,c
  8249   003DD8  6ED9               	movwf	fsr2l,c
  8250   003DDA  6ADA               	clrf	fsr2h,c
  8251   003DDC  50DF               	movf	indf2,w,c
  8252   003DDE  B4D8               	btfsc	status,2,c
  8253   003DE0  EFF4  F01E         	goto	u5141
  8254   003DE4  EFF6  F01E         	goto	u5140
  8255   003DE8                     u5141:
  8256   003DE8  EFFA  F01E         	goto	l5648
  8257   003DEC                     u5140:
  8258   003DEC  5014               	movf	stop@mL^0,w,c
  8259   003DEE  6ED9               	movwf	fsr2l,c
  8260   003DF0  6ADA               	clrf	fsr2h,c
  8261   003DF2  06DF               	decf	indf2,f,c
  8262   003DF4                     l5648:
  8263                           
  8264                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8265   003DF4  5015               	movf	stop@mR^0,w,c
  8266   003DF6  6ED9               	movwf	fsr2l,c
  8267   003DF8  6ADA               	clrf	fsr2h,c
  8268   003DFA  50DF               	movf	indf2,w,c
  8269   003DFC  B4D8               	btfsc	status,2,c
  8270   003DFE  EF03  F01F         	goto	u5151
  8271   003E02  EF05  F01F         	goto	u5150
  8272   003E06                     u5151:
  8273   003E06  EF09  F01F         	goto	l5652
  8274   003E0A                     u5150:
  8275   003E0A  5015               	movf	stop@mR^0,w,c
  8276   003E0C  6ED9               	movwf	fsr2l,c
  8277   003E0E  6ADA               	clrf	fsr2h,c
  8278   003E10  06DF               	decf	indf2,f,c
  8279   003E12                     l5652:
  8280                           
  8281                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8282   003E12  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8283   003E16  ECF3  F018         	call	_setMotorPWM	;wreg free
  8284   003E1A                     
  8285                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8286   003E1A  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8287   003E1E  ECF3  F018         	call	_setMotorPWM	;wreg free
  8288   003E22                     
  8289                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8290   003E22  0E0B               	movlw	11
  8291   003E24  6E16               	movwf	??_stop^0,c
  8292   003E26  0E62               	movlw	98
  8293   003E28                     u7257:
  8294   003E28  2EE8               	decfsz	wreg,f,c
  8295   003E2A  D7FE               	bra	u7257
  8296   003E2C  2E16               	decfsz	??_stop^0,f,c
  8297   003E2E  D7FC               	bra	u7257
  8298   003E30  D000               	nop2	
  8299   003E32                     l5658:
  8300                           
  8301                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8302   003E32  5014               	movf	stop@mL^0,w,c
  8303   003E34  6ED9               	movwf	fsr2l,c
  8304   003E36  6ADA               	clrf	fsr2h,c
  8305   003E38  50DF               	movf	indf2,w,c
  8306   003E3A  A4D8               	btfss	status,2,c
  8307   003E3C  EF22  F01F         	goto	u5161
  8308   003E40  EF24  F01F         	goto	u5160
  8309   003E44                     u5161:
  8310   003E44  EFEB  F01E         	goto	l5644
  8311   003E48                     u5160:
  8312   003E48  5015               	movf	stop@mR^0,w,c
  8313   003E4A  6ED9               	movwf	fsr2l,c
  8314   003E4C  6ADA               	clrf	fsr2h,c
  8315   003E4E  50DF               	movf	indf2,w,c
  8316   003E50  A4D8               	btfss	status,2,c
  8317   003E52  EF2D  F01F         	goto	u5171
  8318   003E56  EF2F  F01F         	goto	u5170
  8319   003E5A                     u5171:
  8320   003E5A  EFEB  F01E         	goto	l5644
  8321   003E5E                     u5170:
  8322   003E5E  0012               	return		;funcret
  8323   003E60                     __end_of_stop:
  8324                           	callstack 0
  8325                           
  8326 ;; *************** function _fullSpeedBack *****************
  8327 ;; Defined at:
  8328 ;;		line 165 in file "dc_motor.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8331 ;;		 -> motorL(9), 
  8332 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8333 ;;		 -> motorR(9), 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  power           2   22[COMRAM] int 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      void 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8347 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8348 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8349 ;;Total ram usage:        5 bytes
  8350 ;; Hardware stack levels used: 1
  8351 ;; Hardware stack levels required when called: 3
  8352 ;; This function calls:
  8353 ;;		_setMotorPWM
  8354 ;; This function is called by:
  8355 ;;		_backHalf
  8356 ;;		_backOneAndHalf
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text40
  8361   003F5C                     __ptext40:
  8362                           	callstack 0
  8363   003F5C                     _fullSpeedBack:
  8364                           	callstack 24
  8365   003F5C                     
  8366                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8367   003F5C  5014               	movf	fullSpeedBack@mL^0,w,c
  8368   003F5E  6ED9               	movwf	fsr2l,c
  8369   003F60  6ADA               	clrf	fsr2h,c
  8370   003F62  0E01               	movlw	1
  8371   003F64  26D9               	addwf	fsr2l,f,c
  8372   003F66  6ADF               	clrf	indf2,c
  8373                           
  8374                           ;dc_motor.c: 169:     mR->direction = 0;
  8375   003F68  5015               	movf	fullSpeedBack@mR^0,w,c
  8376   003F6A  6ED9               	movwf	fsr2l,c
  8377   003F6C  6ADA               	clrf	fsr2h,c
  8378   003F6E  0E01               	movlw	1
  8379   003F70  26D9               	addwf	fsr2l,f,c
  8380   003F72  6ADF               	clrf	indf2,c
  8381   003F74                     
  8382                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8383   003F74  0E00               	movlw	0
  8384   003F76  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8385   003F78  0E00               	movlw	0
  8386   003F7A  6E17               	movwf	fullSpeedBack@power^0,c
  8387   003F7C                     l5718:
  8388                           
  8389                           ;dc_motor.c: 172:         mL->power = power;
  8390   003F7C  5014               	movf	fullSpeedBack@mL^0,w,c
  8391   003F7E  6ED9               	movwf	fsr2l,c
  8392   003F80  6ADA               	clrf	fsr2h,c
  8393   003F82  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8394                           
  8395                           ;dc_motor.c: 173:         mR->power = power;
  8396   003F86  5015               	movf	fullSpeedBack@mR^0,w,c
  8397   003F88  6ED9               	movwf	fsr2l,c
  8398   003F8A  6ADA               	clrf	fsr2h,c
  8399   003F8C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8400   003F90                     
  8401                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8402   003F90  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8403   003F94  ECF3  F018         	call	_setMotorPWM	;wreg free
  8404   003F98                     
  8405                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8406   003F98  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8407   003F9C  ECF3  F018         	call	_setMotorPWM	;wreg free
  8408   003FA0                     
  8409                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8410   003FA0  0E0B               	movlw	11
  8411   003FA2  6E16               	movwf	??_fullSpeedBack^0,c
  8412   003FA4  0E62               	movlw	98
  8413   003FA6                     u7267:
  8414   003FA6  2EE8               	decfsz	wreg,f,c
  8415   003FA8  D7FE               	bra	u7267
  8416   003FAA  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8417   003FAC  D7FC               	bra	u7267
  8418   003FAE  D000               	nop2	
  8419   003FB0                     
  8420                           ;dc_motor.c: 181:     }
  8421   003FB0  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8422   003FB2  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8423   003FB4  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8424   003FB6  EFE6  F01F         	goto	u5201
  8425   003FBA  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8426   003FBC  E109               	bnz	u5200
  8427   003FBE  0E33               	movlw	51
  8428   003FC0  5C17               	subwf	fullSpeedBack@power^0,w,c
  8429   003FC2  A0D8               	btfss	status,0,c
  8430   003FC4  EFE6  F01F         	goto	u5201
  8431   003FC8  EFE8  F01F         	goto	u5200
  8432   003FCC                     u5201:
  8433   003FCC  EFBE  F01F         	goto	l5718
  8434   003FD0                     u5200:
  8435   003FD0  0012               	return		;funcret
  8436   003FD2                     __end_of_fullSpeedBack:
  8437                           	callstack 0
  8438                           
  8439 ;; *************** function _setMotorPWM *****************
  8440 ;; Defined at:
  8441 ;;		line 65 in file "dc_motor.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8444 ;;		 -> motorR(9), motorL(9), 
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;  negDuty         1   18[COMRAM] unsigned char 
  8447 ;;  posDuty         1   17[COMRAM] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8457 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8460 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8461 ;;Total ram usage:        5 bytes
  8462 ;; Hardware stack levels used: 1
  8463 ;; Hardware stack levels required when called: 2
  8464 ;; This function calls:
  8465 ;;		___lwdiv
  8466 ;;		___wmul
  8467 ;; This function is called by:
  8468 ;;		_stop
  8469 ;;		_turnLeft
  8470 ;;		_turnRight
  8471 ;;		_fullSpeedBack
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           	psect	text41
  8476   0031E6                     __ptext41:
  8477                           	callstack 0
  8478   0031E6                     _setMotorPWM:
  8479                           	callstack 27
  8480   0031E6                     
  8481                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8482   0031E6  500F               	movf	setMotorPWM@m^0,w,c
  8483   0031E8  6ED9               	movwf	fsr2l,c
  8484   0031EA  6ADA               	clrf	fsr2h,c
  8485   0031EC  0E02               	movlw	2
  8486   0031EE  26D9               	addwf	fsr2l,f,c
  8487   0031F0  50DF               	movf	indf2,w,c
  8488   0031F2  B4D8               	btfsc	status,2,c
  8489   0031F4  EFFE  F018         	goto	u5051
  8490   0031F8  EF00  F019         	goto	u5050
  8491   0031FC                     u5051:
  8492   0031FC  EF30  F019         	goto	l5572
  8493   003200                     u5050:
  8494   003200                     
  8495                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8496   003200  500F               	movf	setMotorPWM@m^0,w,c
  8497   003202  6ED9               	movwf	fsr2l,c
  8498   003204  6ADA               	clrf	fsr2h,c
  8499   003206  50DF               	movf	indf2,w,c
  8500   003208  6E10               	movwf	??_setMotorPWM^0,c
  8501   00320A  5010               	movf	??_setMotorPWM^0,w,c
  8502   00320C  6E02               	movwf	___wmul@multiplier^0,c
  8503   00320E  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8504   003210  500F               	movf	setMotorPWM@m^0,w,c
  8505   003212  6ED9               	movwf	fsr2l,c
  8506   003214  6ADA               	clrf	fsr2h,c
  8507   003216  0E03               	movlw	3
  8508   003218  26D9               	addwf	fsr2l,f,c
  8509   00321A  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8510   00321E  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8511   003222  ECFF  F023         	call	___wmul	;wreg free
  8512   003226  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8513   00322A  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8514   00322E  0E00               	movlw	0
  8515   003230  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8516   003232  0E64               	movlw	100
  8517   003234  6E0A               	movwf	___lwdiv@divisor^0,c
  8518   003236  ECE9  F01F         	call	___lwdiv	;wreg free
  8519   00323A  500F               	movf	setMotorPWM@m^0,w,c
  8520   00323C  6ED9               	movwf	fsr2l,c
  8521   00323E  6ADA               	clrf	fsr2h,c
  8522   003240  0E03               	movlw	3
  8523   003242  26D9               	addwf	fsr2l,f,c
  8524   003244  50DF               	movf	indf2,w,c
  8525   003246  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8526   003248  5008               	movf	?___lwdiv^0,w,c
  8527   00324A  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8528   00324C  6E12               	movwf	setMotorPWM@posDuty^0,c
  8529   00324E                     
  8530                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8531   00324E  500F               	movf	setMotorPWM@m^0,w,c
  8532   003250  6ED9               	movwf	fsr2l,c
  8533   003252  6ADA               	clrf	fsr2h,c
  8534   003254  0E03               	movlw	3
  8535   003256  26D9               	addwf	fsr2l,f,c
  8536   003258  50DF               	movf	indf2,w,c
  8537   00325A  6E13               	movwf	setMotorPWM@negDuty^0,c
  8538                           
  8539                           ;dc_motor.c: 72:     }
  8540   00325C  EF51  F019         	goto	l5576
  8541   003260                     l5572:
  8542                           
  8543                           ;dc_motor.c: 74:         posDuty=0;
  8544   003260  0E00               	movlw	0
  8545   003262  6E12               	movwf	setMotorPWM@posDuty^0,c
  8546   003264                     
  8547                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8548   003264  500F               	movf	setMotorPWM@m^0,w,c
  8549   003266  6ED9               	movwf	fsr2l,c
  8550   003268  6ADA               	clrf	fsr2h,c
  8551   00326A  50DF               	movf	indf2,w,c
  8552   00326C  6E10               	movwf	??_setMotorPWM^0,c
  8553   00326E  5010               	movf	??_setMotorPWM^0,w,c
  8554   003270  6E02               	movwf	___wmul@multiplier^0,c
  8555   003272  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8556   003274  500F               	movf	setMotorPWM@m^0,w,c
  8557   003276  6ED9               	movwf	fsr2l,c
  8558   003278  6ADA               	clrf	fsr2h,c
  8559   00327A  0E03               	movlw	3
  8560   00327C  26D9               	addwf	fsr2l,f,c
  8561   00327E  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8562   003282  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8563   003286  ECFF  F023         	call	___wmul	;wreg free
  8564   00328A  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8565   00328E  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8566   003292  0E00               	movlw	0
  8567   003294  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8568   003296  0E64               	movlw	100
  8569   003298  6E0A               	movwf	___lwdiv@divisor^0,c
  8570   00329A  ECE9  F01F         	call	___lwdiv	;wreg free
  8571   00329E  5008               	movf	?___lwdiv^0,w,c
  8572   0032A0  6E13               	movwf	setMotorPWM@negDuty^0,c
  8573   0032A2                     l5576:
  8574                           
  8575                           ;dc_motor.c: 78:     if (m->direction) {
  8576   0032A2  500F               	movf	setMotorPWM@m^0,w,c
  8577   0032A4  6ED9               	movwf	fsr2l,c
  8578   0032A6  6ADA               	clrf	fsr2h,c
  8579   0032A8  0E01               	movlw	1
  8580   0032AA  26D9               	addwf	fsr2l,f,c
  8581   0032AC  50DF               	movf	indf2,w,c
  8582   0032AE  B4D8               	btfsc	status,2,c
  8583   0032B0  EF5C  F019         	goto	u5061
  8584   0032B4  EF5E  F019         	goto	u5060
  8585   0032B8                     u5061:
  8586   0032B8  EF7E  F019         	goto	l5580
  8587   0032BC                     u5060:
  8588   0032BC                     
  8589                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8590   0032BC  500F               	movf	setMotorPWM@m^0,w,c
  8591   0032BE  6ED9               	movwf	fsr2l,c
  8592   0032C0  6ADA               	clrf	fsr2h,c
  8593   0032C2  0E05               	movlw	5
  8594   0032C4  26D9               	addwf	fsr2l,f,c
  8595   0032C6  CFDE F010          	movff	postinc2,??_setMotorPWM
  8596   0032CA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8597   0032CE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8598   0032D2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8599   0032D6  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8600                           
  8601                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8602   0032DA  500F               	movf	setMotorPWM@m^0,w,c
  8603   0032DC  6ED9               	movwf	fsr2l,c
  8604   0032DE  6ADA               	clrf	fsr2h,c
  8605   0032E0  0E07               	movlw	7
  8606   0032E2  26D9               	addwf	fsr2l,f,c
  8607   0032E4  CFDE F010          	movff	postinc2,??_setMotorPWM
  8608   0032E8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8609   0032EC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8610   0032F0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8611   0032F4  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8612                           
  8613                           ;dc_motor.c: 81:     } else {
  8614   0032F8  EF9C  F019         	goto	l419
  8615   0032FC                     l5580:
  8616                           
  8617                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8618   0032FC  500F               	movf	setMotorPWM@m^0,w,c
  8619   0032FE  6ED9               	movwf	fsr2l,c
  8620   003300  6ADA               	clrf	fsr2h,c
  8621   003302  0E05               	movlw	5
  8622   003304  26D9               	addwf	fsr2l,f,c
  8623   003306  CFDE F010          	movff	postinc2,??_setMotorPWM
  8624   00330A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8625   00330E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8626   003312  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8627   003316  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8628                           
  8629                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8630   00331A  500F               	movf	setMotorPWM@m^0,w,c
  8631   00331C  6ED9               	movwf	fsr2l,c
  8632   00331E  6ADA               	clrf	fsr2h,c
  8633   003320  0E07               	movlw	7
  8634   003322  26D9               	addwf	fsr2l,f,c
  8635   003324  CFDE F010          	movff	postinc2,??_setMotorPWM
  8636   003328  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8637   00332C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8638   003330  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8639   003334  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8640   003338                     l419:
  8641   003338  0012               	return		;funcret
  8642   00333A                     __end_of_setMotorPWM:
  8643                           	callstack 0
  8644                           
  8645 ;; *************** function ___lwdiv *****************
  8646 ;; Defined at:
  8647 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  dividend        2    7[COMRAM] unsigned int 
  8650 ;;  divisor         2    9[COMRAM] unsigned int 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  quotient        2   12[COMRAM] unsigned int 
  8653 ;;  counter         1   11[COMRAM] unsigned char 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  2    7[COMRAM] unsigned int 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8664 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8667 ;;Total ram usage:        7 bytes
  8668 ;; Hardware stack levels used: 1
  8669 ;; Hardware stack levels required when called: 1
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_setMotorPWM
  8674 ;;		_ADC2String
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           	psect	text42
  8679   003FD2                     __ptext42:
  8680                           	callstack 0
  8681   003FD2                     ___lwdiv:
  8682                           	callstack 27
  8683   003FD2  0E00               	movlw	0
  8684   003FD4  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  8685   003FD6  0E00               	movlw	0
  8686   003FD8  6E0D               	movwf	___lwdiv@quotient^0,c
  8687   003FDA  500A               	movf	___lwdiv@divisor^0,w,c
  8688   003FDC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8689   003FDE  B4D8               	btfsc	status,2,c
  8690   003FE0  EFF4  F01F         	goto	u4901
  8691   003FE4  EFF6  F01F         	goto	u4900
  8692   003FE8                     u4901:
  8693   003FE8  EF1E  F020         	goto	l1221
  8694   003FEC                     u4900:
  8695   003FEC  0E01               	movlw	1
  8696   003FEE  6E0C               	movwf	___lwdiv@counter^0,c
  8697   003FF0  EFFE  F01F         	goto	l5488
  8698   003FF4                     l5486:
  8699   003FF4  90D8               	bcf	status,0,c
  8700   003FF6  360A               	rlcf	___lwdiv@divisor^0,f,c
  8701   003FF8  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8702   003FFA  2A0C               	incf	___lwdiv@counter^0,f,c
  8703   003FFC                     l5488:
  8704   003FFC  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8705   003FFE  EF03  F020         	goto	u4911
  8706   004002  EF05  F020         	goto	u4910
  8707   004006                     u4911:
  8708   004006  EFFA  F01F         	goto	l5486
  8709   00400A                     u4910:
  8710   00400A                     l5490:
  8711   00400A  90D8               	bcf	status,0,c
  8712   00400C  360D               	rlcf	___lwdiv@quotient^0,f,c
  8713   00400E  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8714   004010  500A               	movf	___lwdiv@divisor^0,w,c
  8715   004012  5C08               	subwf	___lwdiv@dividend^0,w,c
  8716   004014  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8717   004016  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8718   004018  A0D8               	btfss	status,0,c
  8719   00401A  EF11  F020         	goto	u4921
  8720   00401E  EF13  F020         	goto	u4920
  8721   004022                     u4921:
  8722   004022  EF18  F020         	goto	l5498
  8723   004026                     u4920:
  8724   004026  500A               	movf	___lwdiv@divisor^0,w,c
  8725   004028  5E08               	subwf	___lwdiv@dividend^0,f,c
  8726   00402A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8727   00402C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8728   00402E  800D               	bsf	___lwdiv@quotient^0,0,c
  8729   004030                     l5498:
  8730   004030  90D8               	bcf	status,0,c
  8731   004032  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8732   004034  320A               	rrcf	___lwdiv@divisor^0,f,c
  8733   004036  2E0C               	decfsz	___lwdiv@counter^0,f,c
  8734   004038  EF05  F020         	goto	l5490
  8735   00403C                     l1221:
  8736   00403C  C00D  F008         	movff	___lwdiv@quotient,?___lwdiv
  8737   004040  C00E  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8738   004044  0012               	return		;funcret
  8739   004046                     __end_of___lwdiv:
  8740                           	callstack 0
  8741                           
  8742 ;; *************** function _logAction *****************
  8743 ;; Defined at:
  8744 ;;		line 13 in file "return_func.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  newAction       1    wreg     unsigned char 
  8747 ;;  newTime         2    1[COMRAM] int 
  8748 ;;  path_step       2    3[COMRAM] unsigned int 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  newAction       1    5[COMRAM] unsigned char 
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8763 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8764 ;;Total ram usage:        5 bytes
  8765 ;; Hardware stack levels used: 1
  8766 ;; Hardware stack levels required when called: 1
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		_decision
  8771 ;;		_get16bitTMR0val
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text43
  8776   004236                     __ptext43:
  8777                           	callstack 0
  8778   004236                     _logAction:
  8779                           	callstack 28
  8780                           
  8781                           ;incstack = 0
  8782                           ;logAction@newAction stored from wreg
  8783   004236  6E06               	movwf	logAction@newAction^0,c
  8784   004238                     
  8785                           ;return_func.c: 14:     if (path_step < 50) {
  8786   004238  5005               	movf	(logAction@path_step+1)^0,w,c
  8787   00423A  E107               	bnz	u6441
  8788   00423C  0E32               	movlw	50
  8789   00423E  5C04               	subwf	logAction@path_step^0,w,c
  8790   004240  B0D8               	btfsc	status,0,c
  8791   004242  EF25  F021         	goto	u6441
  8792   004246  EF27  F021         	goto	u6440
  8793   00424A                     u6441:
  8794   00424A  EF3C  F021         	goto	l692
  8795   00424E                     u6440:
  8796   00424E                     
  8797                           ;return_func.c: 15:         action[path_step] = newAction;
  8798   00424E  0E3C               	movlw	low _action
  8799   004250  2404               	addwf	logAction@path_step^0,w,c
  8800   004252  6ED9               	movwf	fsr2l,c
  8801   004254  0E01               	movlw	high _action
  8802   004256  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8803   004258  6EDA               	movwf	fsr2h,c
  8804   00425A  C006  FFDF         	movff	logAction@newAction,indf2
  8805                           
  8806                           ;return_func.c: 16:         time[path_step] = newTime;
  8807   00425E  90D8               	bcf	status,0,c
  8808   004260  3404               	rlcf	logAction@path_step^0,w,c
  8809   004262  6ED9               	movwf	fsr2l,c
  8810   004264  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8811   004266  6EDA               	movwf	fsr2h,c
  8812   004268  0E00               	movlw	low _time
  8813   00426A  26D9               	addwf	fsr2l,f,c
  8814   00426C  0E02               	movlw	high _time
  8815   00426E  22DA               	addwfc	fsr2h,f,c
  8816   004270  C002  FFDE         	movff	logAction@newTime,postinc2
  8817   004274  C003  FFDD         	movff	logAction@newTime+1,postdec2
  8818   004278                     l692:
  8819   004278  0012               	return		;funcret
  8820   00427A                     __end_of_logAction:
  8821                           	callstack 0
  8822                           
  8823 ;; *************** function _color_click_init *****************
  8824 ;; Defined at:
  8825 ;;		line 9 in file "color.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;Total ram usage:        1 bytes
  8844 ;; Hardware stack levels used: 1
  8845 ;; Hardware stack levels required when called: 4
  8846 ;; This function calls:
  8847 ;;		_I2C_2_Master_Init
  8848 ;;		_color_writetoaddr
  8849 ;; This function is called by:
  8850 ;;		_main
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text44
  8855   0043F6                     __ptext44:
  8856                           	callstack 0
  8857   0043F6                     _color_click_init:
  8858                           	callstack 26
  8859   0043F6                     
  8860                           ;color.c: 12:     I2C_2_Master_Init();
  8861   0043F6  ECD6  F023         	call	_I2C_2_Master_Init	;wreg free
  8862   0043FA                     
  8863                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  8864   0043FA  0E01               	movlw	1
  8865   0043FC  6E04               	movwf	color_writetoaddr@value^0,c
  8866   0043FE  0E00               	movlw	0
  8867   004400  EC12  F024         	call	_color_writetoaddr
  8868   004404                     
  8869                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8870   004404  0E3F               	movlw	63
  8871   004406  6E06               	movwf	??_color_click_init^0,c
  8872   004408  0E55               	movlw	85
  8873   00440A                     u7277:
  8874   00440A  2EE8               	decfsz	wreg,f,c
  8875   00440C  D7FE               	bra	u7277
  8876   00440E  2E06               	decfsz	??_color_click_init^0,f,c
  8877   004410  D7FC               	bra	u7277
  8878   004412  0000               	nop	
  8879   004414                     
  8880                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  8881   004414  0E03               	movlw	3
  8882   004416  6E04               	movwf	color_writetoaddr@value^0,c
  8883   004418  0E00               	movlw	0
  8884   00441A  EC12  F024         	call	_color_writetoaddr
  8885   00441E                     
  8886                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  8887   00441E  0ED5               	movlw	213
  8888   004420  6E04               	movwf	color_writetoaddr@value^0,c
  8889   004422  0E01               	movlw	1
  8890   004424  EC12  F024         	call	_color_writetoaddr
  8891   004428  0012               	return		;funcret
  8892   00442A                     __end_of_color_click_init:
  8893                           	callstack 0
  8894                           
  8895 ;; *************** function _color_writetoaddr *****************
  8896 ;; Defined at:
  8897 ;;		line 25 in file "color.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;  address         1    wreg     unsigned char 
  8900 ;;  value           1    3[COMRAM] unsigned char 
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  address         1    4[COMRAM] unsigned char 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  1    wreg      void 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0, cstack
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8912 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8916 ;;Total ram usage:        2 bytes
  8917 ;; Hardware stack levels used: 1
  8918 ;; Hardware stack levels required when called: 3
  8919 ;; This function calls:
  8920 ;;		_I2C_2_Master_Start
  8921 ;;		_I2C_2_Master_Stop
  8922 ;;		_I2C_2_Master_Write
  8923 ;; This function is called by:
  8924 ;;		_color_click_init
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text45
  8929   004824                     __ptext45:
  8930                           	callstack 0
  8931   004824                     _color_writetoaddr:
  8932                           	callstack 26
  8933                           
  8934                           ;incstack = 0
  8935                           ;color_writetoaddr@address stored from wreg
  8936   004824  6E05               	movwf	color_writetoaddr@address^0,c
  8937   004826                     
  8938                           ;color.c: 26:     I2C_2_Master_Start();
  8939   004826  EC64  F024         	call	_I2C_2_Master_Start	;wreg free
  8940                           
  8941                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  8942   00482A  0E52               	movlw	82
  8943   00482C  EC59  F024         	call	_I2C_2_Master_Write
  8944                           
  8945                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  8946   004830  5005               	movf	color_writetoaddr@address^0,w,c
  8947   004832  0980               	iorlw	128
  8948   004834  EC59  F024         	call	_I2C_2_Master_Write
  8949                           
  8950                           ;color.c: 29:     I2C_2_Master_Write(value);
  8951   004838  5004               	movf	color_writetoaddr@value^0,w,c
  8952   00483A  EC59  F024         	call	_I2C_2_Master_Write
  8953                           
  8954                           ;color.c: 30:     I2C_2_Master_Stop();
  8955   00483E  EC5F  F024         	call	_I2C_2_Master_Stop	;wreg free
  8956   004842  0012               	return		;funcret
  8957   004844                     __end_of_color_writetoaddr:
  8958                           	callstack 0
  8959                           
  8960 ;; *************** function _I2C_2_Master_Init *****************
  8961 ;; Defined at:
  8962 ;;		line 4 in file "i2c.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;                  1    wreg      void 
  8969 ;; Registers used:
  8970 ;;		wreg, status,2
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8980 ;;Total ram usage:        0 bytes
  8981 ;; Hardware stack levels used: 1
  8982 ;; Hardware stack levels required when called: 1
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_color_click_init
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text46
  8991   0047AC                     __ptext46:
  8992                           	callstack 0
  8993   0047AC                     _I2C_2_Master_Init:
  8994                           	callstack 28
  8995   0047AC                     
  8996                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8997   0047AC  010E               	movlb	14	; () banked
  8998   0047AE  51D9               	movf	217,w,b	;volatile
  8999   0047B0  0BF0               	andlw	-16
  9000   0047B2  0908               	iorlw	8
  9001   0047B4  6FD9               	movwf	217,b	;volatile
  9002   0047B6                     
  9003                           ; BSR set to: 14
  9004                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9005   0047B6  8BD9               	bsf	217,5,b	;volatile
  9006                           
  9007                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9008   0047B8  0E9F               	movlw	159
  9009   0047BA  6FD6               	movwf	214,b	;volatile
  9010   0047BC                     
  9011                           ; BSR set to: 14
  9012                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9013   0047BC  8A84               	bsf	132,5,c	;volatile
  9014   0047BE                     
  9015                           ; BSR set to: 14
  9016                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9017   0047BE  8C84               	bsf	132,6,c	;volatile
  9018   0047C0                     
  9019                           ; BSR set to: 14
  9020                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9021   0047C0  9BA7               	bcf	167,5,b	;volatile
  9022   0047C2                     
  9023                           ; BSR set to: 14
  9024                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9025   0047C2  9DA7               	bcf	167,6,b	;volatile
  9026                           
  9027                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9028   0047C4  0E1D               	movlw	29
  9029   0047C6  6F1D               	movwf	29,b	;volatile
  9030                           
  9031                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9032   0047C8  0E1E               	movlw	30
  9033   0047CA  6F1C               	movwf	28,b	;volatile
  9034                           
  9035                           ;i2c.c: 18:   RD5PPS=0x1C;
  9036   0047CC  0E1C               	movlw	28
  9037   0047CE  6F6F               	movwf	111,b	;volatile
  9038                           
  9039                           ;i2c.c: 19:   RD6PPS=0x1B;
  9040   0047D0  0E1B               	movlw	27
  9041   0047D2  6F70               	movwf	112,b	;volatile
  9042   0047D4                     
  9043                           ; BSR set to: 14
  9044   0047D4  0012               	return		;funcret
  9045   0047D6                     __end_of_I2C_2_Master_Init:
  9046                           	callstack 0
  9047                           
  9048 ;; *************** function _calibration_routine *****************
  9049 ;; Defined at:
  9050 ;;		line 133 in file "color.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  cCal            1   70[COMRAM] PTR struct colors
  9053 ;;		 -> colorCalibration(10), 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      void 
  9058 ;; Registers used:
  9059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9065 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9066 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9068 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9069 ;;Total ram usage:       23 bytes
  9070 ;; Hardware stack levels used: 1
  9071 ;; Hardware stack levels required when called: 10
  9072 ;; This function calls:
  9073 ;;		_color_read_Blue
  9074 ;;		_color_read_Clear
  9075 ;;		_color_read_Green
  9076 ;;		_color_read_Red
  9077 ;;		_send2USART
  9078 ;;		_sendStringSerial4
  9079 ;;		_sprintf
  9080 ;; This function is called by:
  9081 ;;		_main
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text47
  9086   00298E                     __ptext47:
  9087                           	callstack 0
  9088   00298E                     _calibration_routine:
  9089                           	callstack 20
  9090   00298E                     
  9091                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9092   00298E  907F               	bcf	127,0,c	;volatile
  9093                           
  9094                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9095   002990  9E7D               	bcf	125,7,c	;volatile
  9096                           
  9097                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9098   002992  9679               	bcf	121,3,c	;volatile
  9099   002994                     
  9100                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9101   002994  0E92               	movlw	low calibration_routine@cal_state
  9102   002996  6E32               	movwf	sprintf@s^0,c
  9103   002998  0E8A               	movlw	low STR_1
  9104   00299A  6E33               	movwf	sprintf@fmt^0,c
  9105   00299C  0EC3               	movlw	low STR_2
  9106   00299E  6E34               	movwf	(?_sprintf+2)^0,c
  9107   0029A0  5034               	movf	(?_sprintf+2)^0,w,c
  9108   0029A2  A4D8               	btfss	status,2,c
  9109   0029A4  0E0E               	movlw	high __smallconst
  9110   0029A6  6E35               	movwf	(?_sprintf+3)^0,c
  9111   0029A8  EC15  F022         	call	_sprintf	;wreg free
  9112   0029AC                     
  9113                           ;color.c: 145:     sendStringSerial4(cal_state);
  9114   0029AC  0E92               	movlw	low calibration_routine@cal_state
  9115   0029AE  6E03               	movwf	sendStringSerial4@string^0,c
  9116   0029B0  EC75  F023         	call	_sendStringSerial4	;wreg free
  9117   0029B4                     l102:
  9118                           
  9119                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9120   0029B4  B48E               	btfsc	142,2,c	;volatile
  9121   0029B6  EFDF  F014         	goto	u6621
  9122   0029BA  EFE1  F014         	goto	u6620
  9123   0029BE                     u6621:
  9124   0029BE  EFDA  F014         	goto	l102
  9125   0029C2                     u6620:
  9126   0029C2                     
  9127                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9128   0029C2  807F               	bsf	127,0,c	;volatile
  9129   0029C4                     
  9130                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9131   0029C4  0E29               	movlw	41
  9132   0029C6  6E49               	movwf	(??_calibration_routine+1)^0,c
  9133   0029C8  0E96               	movlw	150
  9134   0029CA  6E48               	movwf	??_calibration_routine^0,c
  9135   0029CC  0E7F               	movlw	127
  9136   0029CE                     u7287:
  9137   0029CE  2EE8               	decfsz	wreg,f,c
  9138   0029D0  D7FE               	bra	u7287
  9139   0029D2  2E48               	decfsz	??_calibration_routine^0,f,c
  9140   0029D4  D7FC               	bra	u7287
  9141   0029D6  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9142   0029D8  D7FA               	bra	u7287
  9143   0029DA  0000               	nop	
  9144   0029DC                     
  9145                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9146   0029DC  EC58  F020         	call	_color_read_Red	;wreg free
  9147   0029E0  5047               	movf	calibration_routine@cCal^0,w,c
  9148   0029E2  6ED9               	movwf	fsr2l,c
  9149   0029E4  6ADA               	clrf	fsr2h,c
  9150   0029E6  C006  FFDE         	movff	?_color_read_Red,postinc2
  9151   0029EA  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9152   0029EE                     
  9153                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9154   0029EE  907F               	bcf	127,0,c	;volatile
  9155   0029F0                     
  9156                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9157   0029F0  0E92               	movlw	low calibration_routine@cal_state
  9158   0029F2  6E32               	movwf	sprintf@s^0,c
  9159   0029F4  0E01               	movlw	low STR_3
  9160   0029F6  6E33               	movwf	sprintf@fmt^0,c
  9161   0029F8  0EC3               	movlw	low STR_2
  9162   0029FA  6E34               	movwf	(?_sprintf+2)^0,c
  9163   0029FC  5034               	movf	(?_sprintf+2)^0,w,c
  9164   0029FE  A4D8               	btfss	status,2,c
  9165   002A00  0E0E               	movlw	high __smallconst
  9166   002A02  6E35               	movwf	(?_sprintf+3)^0,c
  9167   002A04  EC15  F022         	call	_sprintf	;wreg free
  9168   002A08                     
  9169                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9170   002A08  0E92               	movlw	low calibration_routine@cal_state
  9171   002A0A  6E03               	movwf	sendStringSerial4@string^0,c
  9172   002A0C  EC75  F023         	call	_sendStringSerial4	;wreg free
  9173   002A10                     l105:
  9174                           
  9175                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9176   002A10  B48E               	btfsc	142,2,c	;volatile
  9177   002A12  EF0D  F015         	goto	u6631
  9178   002A16  EF0F  F015         	goto	u6630
  9179   002A1A                     u6631:
  9180   002A1A  EF08  F015         	goto	l105
  9181   002A1E                     u6630:
  9182   002A1E                     
  9183                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9184   002A1E  8E7D               	bsf	125,7,c	;volatile
  9185   002A20                     
  9186                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9187   002A20  0E29               	movlw	41
  9188   002A22  6E49               	movwf	(??_calibration_routine+1)^0,c
  9189   002A24  0E96               	movlw	150
  9190   002A26  6E48               	movwf	??_calibration_routine^0,c
  9191   002A28  0E7F               	movlw	127
  9192   002A2A                     u7297:
  9193   002A2A  2EE8               	decfsz	wreg,f,c
  9194   002A2C  D7FE               	bra	u7297
  9195   002A2E  2E48               	decfsz	??_calibration_routine^0,f,c
  9196   002A30  D7FC               	bra	u7297
  9197   002A32  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9198   002A34  D7FA               	bra	u7297
  9199   002A36  0000               	nop	
  9200   002A38                     
  9201                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9202   002A38  EC80  F020         	call	_color_read_Green	;wreg free
  9203   002A3C  5047               	movf	calibration_routine@cCal^0,w,c
  9204   002A3E  6ED9               	movwf	fsr2l,c
  9205   002A40  6ADA               	clrf	fsr2h,c
  9206   002A42  0E02               	movlw	2
  9207   002A44  26D9               	addwf	fsr2l,f,c
  9208   002A46  C006  FFDE         	movff	?_color_read_Green,postinc2
  9209   002A4A  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9210   002A4E                     
  9211                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9212   002A4E  9E7D               	bcf	125,7,c	;volatile
  9213   002A50                     
  9214                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9215   002A50  0E92               	movlw	low calibration_routine@cal_state
  9216   002A52  6E32               	movwf	sprintf@s^0,c
  9217   002A54  0E3B               	movlw	low STR_5
  9218   002A56  6E33               	movwf	sprintf@fmt^0,c
  9219   002A58  0EC3               	movlw	low STR_2
  9220   002A5A  6E34               	movwf	(?_sprintf+2)^0,c
  9221   002A5C  5034               	movf	(?_sprintf+2)^0,w,c
  9222   002A5E  A4D8               	btfss	status,2,c
  9223   002A60  0E0E               	movlw	high __smallconst
  9224   002A62  6E35               	movwf	(?_sprintf+3)^0,c
  9225   002A64  EC15  F022         	call	_sprintf	;wreg free
  9226   002A68                     
  9227                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9228   002A68  0E92               	movlw	low calibration_routine@cal_state
  9229   002A6A  6E03               	movwf	sendStringSerial4@string^0,c
  9230   002A6C  EC75  F023         	call	_sendStringSerial4	;wreg free
  9231   002A70                     l108:
  9232                           
  9233                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9234   002A70  B48E               	btfsc	142,2,c	;volatile
  9235   002A72  EF3D  F015         	goto	u6641
  9236   002A76  EF3F  F015         	goto	u6640
  9237   002A7A                     u6641:
  9238   002A7A  EF38  F015         	goto	l108
  9239   002A7E                     u6640:
  9240   002A7E                     
  9241                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9242   002A7E  8679               	bsf	121,3,c	;volatile
  9243   002A80                     
  9244                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9245   002A80  0E29               	movlw	41
  9246   002A82  6E49               	movwf	(??_calibration_routine+1)^0,c
  9247   002A84  0E96               	movlw	150
  9248   002A86  6E48               	movwf	??_calibration_routine^0,c
  9249   002A88  0E7F               	movlw	127
  9250   002A8A                     u7307:
  9251   002A8A  2EE8               	decfsz	wreg,f,c
  9252   002A8C  D7FE               	bra	u7307
  9253   002A8E  2E48               	decfsz	??_calibration_routine^0,f,c
  9254   002A90  D7FC               	bra	u7307
  9255   002A92  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9256   002A94  D7FA               	bra	u7307
  9257   002A96  0000               	nop	
  9258   002A98                     
  9259                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9260   002A98  ECD0  F020         	call	_color_read_Blue	;wreg free
  9261   002A9C  5047               	movf	calibration_routine@cCal^0,w,c
  9262   002A9E  6ED9               	movwf	fsr2l,c
  9263   002AA0  6ADA               	clrf	fsr2h,c
  9264   002AA2  0E04               	movlw	4
  9265   002AA4  26D9               	addwf	fsr2l,f,c
  9266   002AA6  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9267   002AAA  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9268   002AAE                     
  9269                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9270   002AAE  9679               	bcf	121,3,c	;volatile
  9271   002AB0                     
  9272                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9273   002AB0  0E92               	movlw	low calibration_routine@cal_state
  9274   002AB2  6E32               	movwf	sprintf@s^0,c
  9275   002AB4  0E56               	movlw	low STR_7
  9276   002AB6  6E33               	movwf	sprintf@fmt^0,c
  9277   002AB8  0EC3               	movlw	low STR_2
  9278   002ABA  6E34               	movwf	(?_sprintf+2)^0,c
  9279   002ABC  5034               	movf	(?_sprintf+2)^0,w,c
  9280   002ABE  A4D8               	btfss	status,2,c
  9281   002AC0  0E0E               	movlw	high __smallconst
  9282   002AC2  6E35               	movwf	(?_sprintf+3)^0,c
  9283   002AC4  EC15  F022         	call	_sprintf	;wreg free
  9284   002AC8                     
  9285                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9286   002AC8  0E92               	movlw	low calibration_routine@cal_state
  9287   002ACA  6E03               	movwf	sendStringSerial4@string^0,c
  9288   002ACC  EC75  F023         	call	_sendStringSerial4	;wreg free
  9289   002AD0                     l111:
  9290                           
  9291                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9292   002AD0  B48E               	btfsc	142,2,c	;volatile
  9293   002AD2  EF6D  F015         	goto	u6651
  9294   002AD6  EF6F  F015         	goto	u6650
  9295   002ADA                     u6651:
  9296   002ADA  EF68  F015         	goto	l111
  9297   002ADE                     u6650:
  9298   002ADE                     
  9299                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9300   002ADE  807F               	bsf	127,0,c	;volatile
  9301                           
  9302                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9303   002AE0  8E7D               	bsf	125,7,c	;volatile
  9304                           
  9305                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9306   002AE2  8679               	bsf	121,3,c	;volatile
  9307   002AE4                     
  9308                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9309   002AE4  0E29               	movlw	41
  9310   002AE6  6E49               	movwf	(??_calibration_routine+1)^0,c
  9311   002AE8  0E96               	movlw	150
  9312   002AEA  6E48               	movwf	??_calibration_routine^0,c
  9313   002AEC  0E7F               	movlw	127
  9314   002AEE                     u7317:
  9315   002AEE  2EE8               	decfsz	wreg,f,c
  9316   002AF0  D7FE               	bra	u7317
  9317   002AF2  2E48               	decfsz	??_calibration_routine^0,f,c
  9318   002AF4  D7FC               	bra	u7317
  9319   002AF6  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9320   002AF8  D7FA               	bra	u7317
  9321   002AFA  0000               	nop	
  9322   002AFC                     
  9323                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9324   002AFC  ECA8  F020         	call	_color_read_Clear	;wreg free
  9325   002B00  5047               	movf	calibration_routine@cCal^0,w,c
  9326   002B02  6ED9               	movwf	fsr2l,c
  9327   002B04  6ADA               	clrf	fsr2h,c
  9328   002B06  0E06               	movlw	6
  9329   002B08  26D9               	addwf	fsr2l,f,c
  9330   002B0A  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9331   002B0E  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9332   002B12                     
  9333                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9334   002B12  907F               	bcf	127,0,c	;volatile
  9335   002B14                     
  9336                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9337   002B14  9E7D               	bcf	125,7,c	;volatile
  9338   002B16                     
  9339                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9340   002B16  9679               	bcf	121,3,c	;volatile
  9341   002B18                     
  9342                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9343   002B18  0E92               	movlw	low calibration_routine@cal_state
  9344   002B1A  6E32               	movwf	sprintf@s^0,c
  9345   002B1C  0E1E               	movlw	low STR_9
  9346   002B1E  6E33               	movwf	sprintf@fmt^0,c
  9347   002B20  0EC3               	movlw	low STR_2
  9348   002B22  6E34               	movwf	(?_sprintf+2)^0,c
  9349   002B24  5034               	movf	(?_sprintf+2)^0,w,c
  9350   002B26  A4D8               	btfss	status,2,c
  9351   002B28  0E0E               	movlw	high __smallconst
  9352   002B2A  6E35               	movwf	(?_sprintf+3)^0,c
  9353   002B2C  EC15  F022         	call	_sprintf	;wreg free
  9354   002B30                     
  9355                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9356   002B30  0E92               	movlw	low calibration_routine@cal_state
  9357   002B32  6E03               	movwf	sendStringSerial4@string^0,c
  9358   002B34  EC75  F023         	call	_sendStringSerial4	;wreg free
  9359   002B38                     l114:
  9360                           
  9361                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9362   002B38  B48E               	btfsc	142,2,c	;volatile
  9363   002B3A  EFA1  F015         	goto	u6661
  9364   002B3E  EFA3  F015         	goto	u6660
  9365   002B42                     u6661:
  9366   002B42  EF9C  F015         	goto	l114
  9367   002B46                     u6660:
  9368   002B46                     
  9369                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9370   002B46  807F               	bsf	127,0,c	;volatile
  9371                           
  9372                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9373   002B48  8E7D               	bsf	125,7,c	;volatile
  9374                           
  9375                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9376   002B4A  8679               	bsf	121,3,c	;volatile
  9377   002B4C                     
  9378                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9379   002B4C  0E29               	movlw	41
  9380   002B4E  6E49               	movwf	(??_calibration_routine+1)^0,c
  9381   002B50  0E96               	movlw	150
  9382   002B52  6E48               	movwf	??_calibration_routine^0,c
  9383   002B54  0E7F               	movlw	127
  9384   002B56                     u7327:
  9385   002B56  2EE8               	decfsz	wreg,f,c
  9386   002B58  D7FE               	bra	u7327
  9387   002B5A  2E48               	decfsz	??_calibration_routine^0,f,c
  9388   002B5C  D7FC               	bra	u7327
  9389   002B5E  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9390   002B60  D7FA               	bra	u7327
  9391   002B62  0000               	nop	
  9392   002B64                     
  9393                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9394   002B64  ECA8  F020         	call	_color_read_Clear	;wreg free
  9395   002B68  5047               	movf	calibration_routine@cCal^0,w,c
  9396   002B6A  6ED9               	movwf	fsr2l,c
  9397   002B6C  6ADA               	clrf	fsr2h,c
  9398   002B6E  0E08               	movlw	8
  9399   002B70  26D9               	addwf	fsr2l,f,c
  9400   002B72  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9401   002B76  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9402   002B7A                     
  9403                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9404   002B7A  907F               	bcf	127,0,c	;volatile
  9405   002B7C                     
  9406                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9407   002B7C  9E7D               	bcf	125,7,c	;volatile
  9408   002B7E                     
  9409                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9410   002B7E  9679               	bcf	121,3,c	;volatile
  9411   002B80                     
  9412                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9413   002B80  0E92               	movlw	low calibration_routine@cal_state
  9414   002B82  6E32               	movwf	sprintf@s^0,c
  9415   002B84  0E71               	movlw	low STR_11
  9416   002B86  6E33               	movwf	sprintf@fmt^0,c
  9417   002B88  0EC3               	movlw	low STR_2
  9418   002B8A  6E34               	movwf	(?_sprintf+2)^0,c
  9419   002B8C  5034               	movf	(?_sprintf+2)^0,w,c
  9420   002B8E  A4D8               	btfss	status,2,c
  9421   002B90  0E0E               	movlw	high __smallconst
  9422   002B92  6E35               	movwf	(?_sprintf+3)^0,c
  9423   002B94  EC15  F022         	call	_sprintf	;wreg free
  9424   002B98                     
  9425                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9426   002B98  0E92               	movlw	low calibration_routine@cal_state
  9427   002B9A  6E03               	movwf	sendStringSerial4@string^0,c
  9428   002B9C  EC75  F023         	call	_sendStringSerial4	;wreg free
  9429   002BA0                     
  9430                           ;color.c: 218:     send2USART(colorCalibration.ambient);
  9431   002BA0  C0DB  F045         	movff	_colorCalibration+8,send2USART@hue
  9432   002BA4  C0DC  F046         	movff	_colorCalibration+9,send2USART@hue+1
  9433   002BA8  EC31  F024         	call	_send2USART	;wreg free
  9434   002BAC                     l117:
  9435                           
  9436                           ;color.c: 220:     while(PORTFbits.RF2 == 1){
  9437   002BAC  B48E               	btfsc	142,2,c	;volatile
  9438   002BAE  EFDB  F015         	goto	u6671
  9439   002BB2  EFDD  F015         	goto	u6670
  9440   002BB6                     u6671:
  9441   002BB6  EFD6  F015         	goto	l117
  9442   002BBA                     u6670:
  9443   002BBA                     
  9444                           ;color.c: 223:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9445   002BBA  0E29               	movlw	41
  9446   002BBC  6E49               	movwf	(??_calibration_routine+1)^0,c
  9447   002BBE  0E96               	movlw	150
  9448   002BC0  6E48               	movwf	??_calibration_routine^0,c
  9449   002BC2  0E7F               	movlw	127
  9450   002BC4                     u7337:
  9451   002BC4  2EE8               	decfsz	wreg,f,c
  9452   002BC6  D7FE               	bra	u7337
  9453   002BC8  2E48               	decfsz	??_calibration_routine^0,f,c
  9454   002BCA  D7FC               	bra	u7337
  9455   002BCC  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9456   002BCE  D7FA               	bra	u7337
  9457   002BD0  0000               	nop	
  9458   002BD2  0012               	return		;funcret
  9459   002BD4                     __end_of_calibration_routine:
  9460                           	callstack 0
  9461                           
  9462 ;; *************** function _send2USART *****************
  9463 ;; Defined at:
  9464 ;;		line 146 in file "serial.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  hue             2   68[COMRAM] unsigned int 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9479 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9481 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9482 ;;Total ram usage:       52 bytes
  9483 ;; Hardware stack levels used: 1
  9484 ;; Hardware stack levels required when called: 9
  9485 ;; This function calls:
  9486 ;;		_sendStringSerial4
  9487 ;;		_sprintf
  9488 ;; This function is called by:
  9489 ;;		_calibration_routine
  9490 ;;		_main
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           	psect	text48
  9495   004862                     __ptext48:
  9496                           	callstack 0
  9497   004862                     _send2USART:
  9498                           	callstack 21
  9499   004862                     
  9500                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  9501   004862  0E60               	movlw	low send2USART@hue_char
  9502   004864  6E32               	movwf	sprintf@s^0,c
  9503   004866  0EB7               	movlw	low STR_14
  9504   004868  6E33               	movwf	sprintf@fmt^0,c
  9505   00486A  C045  F034         	movff	send2USART@hue,?_sprintf+2
  9506   00486E  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  9507   004872  EC15  F022         	call	_sprintf	;wreg free
  9508   004876                     
  9509                           ;serial.c: 158:         sendStringSerial4(hue_char);
  9510   004876  0E60               	movlw	low send2USART@hue_char
  9511   004878  6E03               	movwf	sendStringSerial4@string^0,c
  9512   00487A  EC75  F023         	call	_sendStringSerial4	;wreg free
  9513   00487E  0012               	return		;funcret
  9514   004880                     __end_of_send2USART:
  9515                           	callstack 0
  9516                           
  9517 ;; *************** function _sprintf *****************
  9518 ;; Defined at:
  9519 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;  s               1   49[COMRAM] PTR unsigned char 
  9522 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9523 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9524 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9525 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;  f              12   56[COMRAM] struct _IO_FILE
  9528 ;;  ret             2    0        int 
  9529 ;;  ap              1   55[COMRAM] PTR void [1]
  9530 ;;		 -> ?_sprintf(2), 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  2   49[COMRAM] int 
  9533 ;; Registers used:
  9534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9540 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9541 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9543 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9544 ;;Total ram usage:       19 bytes
  9545 ;; Hardware stack levels used: 1
  9546 ;; Hardware stack levels required when called: 8
  9547 ;; This function calls:
  9548 ;;		_vfprintf
  9549 ;; This function is called by:
  9550 ;;		_calibration_routine
  9551 ;;		_send2USART
  9552 ;;		_ADC2String
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text49
  9557   00442A                     __ptext49:
  9558                           	callstack 0
  9559   00442A                     _sprintf:
  9560                           	callstack 21
  9561   00442A  0E34               	movlw	low (?_sprintf+2)
  9562   00442C  6E38               	movwf	sprintf@ap^0,c
  9563   00442E  C032  F039         	movff	sprintf@s,sprintf@f
  9564   004432  0E00               	movlw	0
  9565   004434  6E3D               	movwf	(sprintf@f+4)^0,c
  9566   004436  0E00               	movlw	0
  9567   004438  6E3C               	movwf	(sprintf@f+3)^0,c
  9568   00443A  0E00               	movlw	0
  9569   00443C  6E44               	movwf	(sprintf@f+11)^0,c
  9570   00443E  0E00               	movlw	0
  9571   004440  6E43               	movwf	(sprintf@f+10)^0,c
  9572   004442  0E39               	movlw	low sprintf@f
  9573   004444  6E2E               	movwf	vfprintf@fp^0,c
  9574   004446  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9575   00444A  0E38               	movlw	low sprintf@ap
  9576   00444C  6E30               	movwf	vfprintf@ap^0,c
  9577   00444E  EC5E  F021         	call	_vfprintf	;wreg free
  9578   004452  5032               	movf	sprintf@s^0,w,c
  9579   004454  243C               	addwf	(sprintf@f+3)^0,w,c
  9580   004456  6ED9               	movwf	fsr2l,c
  9581   004458  6ADA               	clrf	fsr2h,c
  9582   00445A  6ADF               	clrf	indf2,c
  9583   00445C  0012               	return		;funcret
  9584   00445E                     __end_of_sprintf:
  9585                           	callstack 0
  9586                           
  9587 ;; *************** function _vfprintf *****************
  9588 ;; Defined at:
  9589 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9592 ;;		 -> sprintf@f(12), 
  9593 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9594 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9595 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9596 ;;  ap              1   47[COMRAM] PTR PTR void 
  9597 ;;		 -> sprintf@ap(1), 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9600 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9601 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  2   45[COMRAM] int 
  9604 ;; Registers used:
  9605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9611 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9614 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9615 ;;Total ram usage:        4 bytes
  9616 ;; Hardware stack levels used: 1
  9617 ;; Hardware stack levels required when called: 7
  9618 ;; This function calls:
  9619 ;;		_vfpfcnvrt
  9620 ;; This function is called by:
  9621 ;;		_sprintf
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           	psect	text50
  9626   0042BC                     __ptext50:
  9627                           	callstack 0
  9628   0042BC                     _vfprintf:
  9629                           	callstack 21
  9630   0042BC                     
  9631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9632   0042BC  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9633                           
  9634                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9635   0042C0  EF6A  F021         	goto	l5940
  9636   0042C4                     l5938:
  9637                           
  9638                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9639   0042C4  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9640   0042C8  0E31               	movlw	low vfprintf@cfmt
  9641   0042CA  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9642   0042CC  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9643   0042D0  ECC4  F016         	call	_vfpfcnvrt	;wreg free
  9644   0042D4                     l5940:
  9645                           
  9646                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9647   0042D4  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9648   0042D8                     	if	1	;There is more than 1 active tblptr byte
  9649   0042D8  0E0E               	movlw	high __smallconst
  9650   0042DA  6EF7               	movwf	tblptrh,c
  9651   0042DC                     	endif
  9652   0042DC                     	if	0	;tblptru may be non-zero
  9653   0042DC                     	endif
  9654   0042DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9655   0042DC  0E00               	movlw	low (__smallconst shr (0+16))
  9656   0042DE  6EF8               	movwf	tblptru,c
  9657   0042E0                     	endif
  9658   0042E0  0008               	tblrd		*
  9659   0042E2  50F5               	movf	tablat,w,c
  9660   0042E4  0900               	iorlw	0
  9661   0042E6  A4D8               	btfss	status,2,c
  9662   0042E8  EF78  F021         	goto	u5611
  9663   0042EC  EF7A  F021         	goto	u5610
  9664   0042F0                     u5611:
  9665   0042F0  EF62  F021         	goto	l5938
  9666   0042F4                     u5610:
  9667   0042F4                     
  9668                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9669   0042F4  0E00               	movlw	0
  9670   0042F6  6E2F               	movwf	(?_vfprintf+1)^0,c
  9671   0042F8  0E00               	movlw	0
  9672   0042FA  6E2E               	movwf	?_vfprintf^0,c
  9673   0042FC  0012               	return		;funcret
  9674   0042FE                     __end_of_vfprintf:
  9675                           	callstack 0
  9676                           
  9677 ;; *************** function _vfpfcnvrt *****************
  9678 ;; Defined at:
  9679 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9682 ;;		 -> sprintf@f(12), 
  9683 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9684 ;;		 -> vfprintf@cfmt(1), 
  9685 ;;  ap              1   36[COMRAM] PTR PTR void 
  9686 ;;		 -> sprintf@ap(1), 
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;  convarg         4   39[COMRAM] struct .
  9689 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9690 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9691 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9692 ;;  done            1   43[COMRAM] _Bool 
  9693 ;;  c               1    0        unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      void 
  9696 ;; Registers used:
  9697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9703 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9704 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9705 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9706 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9707 ;;Total ram usage:       11 bytes
  9708 ;; Hardware stack levels used: 1
  9709 ;; Hardware stack levels required when called: 6
  9710 ;; This function calls:
  9711 ;;		_dtoa
  9712 ;;		_fputc
  9713 ;;		_read_prec_or_width
  9714 ;; This function is called by:
  9715 ;;		_vfprintf
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text51
  9720   002D88                     __ptext51:
  9721                           	callstack 0
  9722   002D88                     _vfpfcnvrt:
  9723                           	callstack 21
  9724   002D88                     
  9725                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9726   002D88  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9727   002D8A  6ED9               	movwf	fsr2l,c
  9728   002D8C  6ADA               	clrf	fsr2h,c
  9729   002D8E  CFDF FFF6          	movff	indf2,tblptrl
  9730   002D92                     	if	1	;There is more than 1 active tblptr byte
  9731   002D92  0E0E               	movlw	high __smallconst
  9732   002D94  6EF7               	movwf	tblptrh,c
  9733   002D96                     	endif
  9734   002D96                     	if	0	;tblptru may be non-zero
  9735   002D96                     	endif
  9736   002D96                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9737   002D96  0E00               	movlw	low (__smallconst shr (0+16))
  9738   002D98  6EF8               	movwf	tblptru,c
  9739   002D9A                     	endif
  9740   002D9A  0008               	tblrd		*
  9741   002D9C  50F5               	movf	tablat,w,c
  9742   002D9E  0A25               	xorlw	37
  9743   002DA0  A4D8               	btfss	status,2,c
  9744   002DA2  EFD5  F016         	goto	u5071
  9745   002DA6  EFD7  F016         	goto	u5070
  9746   002DAA                     u5071:
  9747   002DAA  EF74  F017         	goto	l5628
  9748   002DAE                     u5070:
  9749   002DAE                     
  9750                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9751   002DAE  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9752   002DB0  6ED9               	movwf	fsr2l,c
  9753   002DB2  6ADA               	clrf	fsr2h,c
  9754   002DB4  2ADF               	incf	indf2,f,c
  9755   002DB6                     
  9756                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9757   002DB6  0E00               	movlw	0
  9758   002DB8  0100               	movlb	0	; () banked
  9759   002DBA  6FC1               	movwf	(_width+1)& (0+255),b
  9760   002DBC  0E00               	movlw	0
  9761   002DBE  6FC0               	movwf	_width& (0+255),b
  9762   002DC0  C0C0  F0C4         	movff	_width,_flags
  9763   002DC4                     
  9764                           ; BSR set to: 0
  9765                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9766   002DC4  69C2               	setf	_prec& (0+255),b
  9767   002DC6  69C3               	setf	(_prec+1)& (0+255),b
  9768   002DC8                     
  9769                           ; BSR set to: 0
  9770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9771   002DC8  0E00               	movlw	0
  9772   002DCA  6E2C               	movwf	vfpfcnvrt@done^0,c
  9773                           
  9774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9775   002DCC  EF0F  F017         	goto	l5602
  9776   002DD0                     l5592:
  9777                           
  9778                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9779   002DD0  0100               	movlb	0	; () banked
  9780   002DD2  83C4               	bsf	_flags& (0+255),1,b
  9781   002DD4                     
  9782                           ; BSR set to: 0
  9783                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9784   002DD4  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9785   002DD6  6ED9               	movwf	fsr2l,c
  9786   002DD8  6ADA               	clrf	fsr2h,c
  9787   002DDA  2ADF               	incf	indf2,f,c
  9788                           
  9789                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9790   002DDC  EF0F  F017         	goto	l5602
  9791   002DE0                     l5596:
  9792                           
  9793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9794   002DE0  0E01               	movlw	1
  9795   002DE2  6E2C               	movwf	vfpfcnvrt@done^0,c
  9796                           
  9797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9798   002DE4  EF0F  F017         	goto	l5602
  9799   002DE8                     l5600:
  9800   002DE8  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9801   002DEA  6ED9               	movwf	fsr2l,c
  9802   002DEC  6ADA               	clrf	fsr2h,c
  9803   002DEE  CFDF FFF6          	movff	indf2,tblptrl
  9804   002DF2                     	if	1	;There is more than 1 active tblptr byte
  9805   002DF2  0E0E               	movlw	high __smallconst
  9806   002DF4  6EF7               	movwf	tblptrh,c
  9807   002DF6                     	endif
  9808   002DF6                     	if	0	;tblptru may be non-zero
  9809   002DF6                     	endif
  9810   002DF6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9811   002DF6  0E00               	movlw	low (__smallconst shr (0+16))
  9812   002DF8  6EF8               	movwf	tblptru,c
  9813   002DFA                     	endif
  9814   002DFA  0008               	tblrd		*
  9815   002DFC  50F5               	movf	tablat,w,c
  9816   002DFE  6E26               	movwf	??_vfpfcnvrt^0,c
  9817   002E00  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9818                           
  9819                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9820                           ; Switch size 1, requested type "simple"
  9821                           ; Number of cases is 1, Range of values is 0 to 0
  9822                           ; switch strategies available:
  9823                           ; Name         Instructions Cycles
  9824                           ; simple_byte            4     3 (average)
  9825                           ;	Chosen strategy is simple_byte
  9826   002E02  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9827   002E04  0A00               	xorlw	0	; case 0
  9828   002E06  B4D8               	btfsc	status,2,c
  9829   002E08  EF08  F017         	goto	l7204
  9830   002E0C  EFF0  F016         	goto	l5596
  9831   002E10                     l7204:
  9832                           
  9833                           ; Switch size 1, requested type "simple"
  9834                           ; Number of cases is 1, Range of values is 48 to 48
  9835                           ; switch strategies available:
  9836                           ; Name         Instructions Cycles
  9837                           ; simple_byte            4     3 (average)
  9838                           ;	Chosen strategy is simple_byte
  9839   002E10  5026               	movf	??_vfpfcnvrt^0,w,c
  9840   002E12  0A30               	xorlw	48	; case 48
  9841   002E14  B4D8               	btfsc	status,2,c
  9842   002E16  EFE8  F016         	goto	l5592
  9843   002E1A  EFF0  F016         	goto	l5596
  9844   002E1E                     l5602:
  9845                           
  9846                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9847   002E1E  502C               	movf	vfpfcnvrt@done^0,w,c
  9848   002E20  B4D8               	btfsc	status,2,c
  9849   002E22  EF15  F017         	goto	u5081
  9850   002E26  EF17  F017         	goto	u5080
  9851   002E2A                     u5081:
  9852   002E2A  EFF4  F016         	goto	l5600
  9853   002E2E                     u5080:
  9854   002E2E                     
  9855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9856   002E2E  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9857   002E32  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9858   002E36  EC55  F01D         	call	_read_prec_or_width	;wreg free
  9859   002E3A  C008  F0C0         	movff	?_read_prec_or_width,_width
  9860   002E3E  C009  F0C1         	movff	?_read_prec_or_width+1,_width+1
  9861   002E42                     
  9862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9863   002E42  0100               	movlb	0	; () banked
  9864   002E44  BFC1               	btfsc	(_width+1)& (0+255),7,b
  9865   002E46  EF29  F017         	goto	u5090
  9866   002E4A  EF27  F017         	goto	u5091
  9867   002E4E                     u5091:
  9868   002E4E  EF2E  F017         	goto	l5610
  9869   002E52                     u5090:
  9870   002E52                     
  9871                           ; BSR set to: 0
  9872                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9873   002E52  81C4               	bsf	_flags& (0+255),0,b
  9874                           
  9875                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9876   002E54  6DC0               	negf	_width& (0+255),b
  9877   002E56  1FC1               	comf	(_width+1)& (0+255),f,b
  9878   002E58  B0D8               	btfsc	status,0,c
  9879   002E5A  2BC1               	incf	(_width+1)& (0+255),f,b
  9880   002E5C                     l5610:
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9884   002E5C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9885   002E5E  6ED9               	movwf	fsr2l,c
  9886   002E60  6ADA               	clrf	fsr2h,c
  9887   002E62  50DF               	movf	indf2,w,c
  9888   002E64  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9889   002E66                     
  9890                           ; BSR set to: 0
  9891                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9892   002E66  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9893   002E6A                     	if	1	;There is more than 1 active tblptr byte
  9894   002E6A  0E0E               	movlw	high __smallconst
  9895   002E6C  6EF7               	movwf	tblptrh,c
  9896   002E6E                     	endif
  9897   002E6E                     	if	0	;tblptru may be non-zero
  9898   002E6E                     	endif
  9899   002E6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9900   002E6E  0E00               	movlw	low (__smallconst shr (0+16))
  9901   002E70  6EF8               	movwf	tblptru,c
  9902   002E72                     	endif
  9903   002E72  0008               	tblrd		*
  9904   002E74  50F5               	movf	tablat,w,c
  9905   002E76  0A64               	xorlw	100
  9906   002E78  B4D8               	btfsc	status,2,c
  9907   002E7A  EF41  F017         	goto	u5101
  9908   002E7E  EF43  F017         	goto	u5100
  9909   002E82                     u5101:
  9910   002E82  EF53  F017         	goto	l5616
  9911   002E86                     u5100:
  9912   002E86                     
  9913                           ; BSR set to: 0
  9914   002E86  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9915   002E8A                     	if	1	;There is more than 1 active tblptr byte
  9916   002E8A  0E0E               	movlw	high __smallconst
  9917   002E8C  6EF7               	movwf	tblptrh,c
  9918   002E8E                     	endif
  9919   002E8E                     	if	0	;tblptru may be non-zero
  9920   002E8E                     	endif
  9921   002E8E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9922   002E8E  0E00               	movlw	low (__smallconst shr (0+16))
  9923   002E90  6EF8               	movwf	tblptru,c
  9924   002E92                     	endif
  9925   002E92  0008               	tblrd		*
  9926   002E94  50F5               	movf	tablat,w,c
  9927   002E96  0A69               	xorlw	105
  9928   002E98  A4D8               	btfss	status,2,c
  9929   002E9A  EF51  F017         	goto	u5111
  9930   002E9E  EF53  F017         	goto	u5110
  9931   002EA2                     u5111:
  9932   002EA2  EF6E  F017         	goto	l5624
  9933   002EA6                     u5110:
  9934   002EA6                     l5616:
  9935                           
  9936                           ; BSR set to: 0
  9937                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9938   002EA6  5025               	movf	vfpfcnvrt@ap^0,w,c
  9939   002EA8  6ED9               	movwf	fsr2l,c
  9940   002EAA  6ADA               	clrf	fsr2h,c
  9941   002EAC  0E02               	movlw	2
  9942   002EAE  26DF               	addwf	indf2,f,c
  9943   002EB0  5CDF               	subwf	indf2,w,c
  9944   002EB2  6ED9               	movwf	fsr2l,c
  9945   002EB4  6ADA               	clrf	fsr2h,c
  9946   002EB6  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9947   002EBA  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9948   002EBE                     
  9949                           ; BSR set to: 0
  9950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9951   002EBE  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9952   002EC0  6ED9               	movwf	fsr2l,c
  9953   002EC2  6ADA               	clrf	fsr2h,c
  9954   002EC4  282D               	incf	vfpfcnvrt@cp^0,w,c
  9955   002EC6  6EDF               	movwf	indf2,c
  9956   002EC8                     
  9957                           ; BSR set to: 0
  9958                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9959   002EC8  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9960   002ECC  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9961   002ED0  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9962   002ED4  EC88  F017         	call	_dtoa	;wreg free
  9963   002ED8  EF87  F017         	goto	l1472
  9964   002EDC                     l5624:
  9965                           
  9966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9967   002EDC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9968   002EDE  6ED9               	movwf	fsr2l,c
  9969   002EE0  6ADA               	clrf	fsr2h,c
  9970   002EE2  2ADF               	incf	indf2,f,c
  9971   002EE4  EF87  F017         	goto	l1472
  9972   002EE8                     l5628:
  9973                           
  9974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9975   002EE8  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9976   002EEA  6ED9               	movwf	fsr2l,c
  9977   002EEC  6ADA               	clrf	fsr2h,c
  9978   002EEE  CFDF FFF6          	movff	indf2,tblptrl
  9979   002EF2                     	if	1	;There is more than 1 active tblptr byte
  9980   002EF2  0E0E               	movlw	high __smallconst
  9981   002EF4  6EF7               	movwf	tblptrh,c
  9982   002EF6                     	endif
  9983   002EF6                     	if	0	;tblptru may be non-zero
  9984   002EF6                     	endif
  9985   002EF6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9986   002EF6  0E00               	movlw	low (__smallconst shr (0+16))
  9987   002EF8  6EF8               	movwf	tblptru,c
  9988   002EFA                     	endif
  9989   002EFA  0008               	tblrd		*
  9990   002EFC  50F5               	movf	tablat,w,c
  9991   002EFE  6E02               	movwf	fputc@c^0,c
  9992   002F00  6A03               	clrf	(fputc@c+1)^0,c
  9993   002F02  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9994   002F06  EC01  F01E         	call	_fputc	;wreg free
  9995   002F0A  EF6E  F017         	goto	l5624
  9996   002F0E                     l1472:
  9997   002F0E  0012               	return		;funcret
  9998   002F10                     __end_of_vfpfcnvrt:
  9999                           	callstack 0
 10000                           
 10001 ;; *************** function _read_prec_or_width *****************
 10002 ;; Defined at:
 10003 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10006 ;;		 -> vfprintf@cfmt(1), 
 10007 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10008 ;;		 -> sprintf@ap(1), 
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;  c               1    9[COMRAM] unsigned char 
 10011 ;;  n               2   10[COMRAM] int 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  2    7[COMRAM] int 
 10014 ;; Registers used:
 10015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10022 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10024 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10025 ;;Total ram usage:        5 bytes
 10026 ;; Hardware stack levels used: 1
 10027 ;; Hardware stack levels required when called: 2
 10028 ;; This function calls:
 10029 ;;		___wmul
 10030 ;; This function is called by:
 10031 ;;		_vfpfcnvrt
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text52
 10036   003AAA                     __ptext52:
 10037                           	callstack 0
 10038   003AAA                     _read_prec_or_width:
 10039                           	callstack 24
 10040   003AAA                     
 10041                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10042   003AAA  0E00               	movlw	0
 10043   003AAC  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10044   003AAE  0E00               	movlw	0
 10045   003AB0  6E0B               	movwf	read_prec_or_width@n^0,c
 10046   003AB2                     
 10047                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10048   003AB2  5008               	movf	read_prec_or_width@fmt^0,w,c
 10049   003AB4  6ED9               	movwf	fsr2l,c
 10050   003AB6  6ADA               	clrf	fsr2h,c
 10051   003AB8  CFDF FFF6          	movff	indf2,tblptrl
 10052   003ABC                     	if	1	;There is more than 1 active tblptr byte
 10053   003ABC  0E0E               	movlw	high __smallconst
 10054   003ABE  6EF7               	movwf	tblptrh,c
 10055   003AC0                     	endif
 10056   003AC0                     	if	0	;tblptru may be non-zero
 10057   003AC0                     	endif
 10058   003AC0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10059   003AC0  0E00               	movlw	low (__smallconst shr (0+16))
 10060   003AC2  6EF8               	movwf	tblptru,c
 10061   003AC4                     	endif
 10062   003AC4  0008               	tblrd		*
 10063   003AC6  50F5               	movf	tablat,w,c
 10064   003AC8  0A2A               	xorlw	42
 10065   003ACA  A4D8               	btfss	status,2,c
 10066   003ACC  EF6A  F01D         	goto	u5031
 10067   003AD0  EF6C  F01D         	goto	u5030
 10068   003AD4                     u5031:
 10069   003AD4  EF92  F01D         	goto	l5564
 10070   003AD8                     u5030:
 10071   003AD8                     
 10072                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10073   003AD8  5008               	movf	read_prec_or_width@fmt^0,w,c
 10074   003ADA  6ED9               	movwf	fsr2l,c
 10075   003ADC  6ADA               	clrf	fsr2h,c
 10076   003ADE  2ADF               	incf	indf2,f,c
 10077   003AE0                     
 10078                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10079   003AE0  5009               	movf	read_prec_or_width@ap^0,w,c
 10080   003AE2  6ED9               	movwf	fsr2l,c
 10081   003AE4  6ADA               	clrf	fsr2h,c
 10082   003AE6  0E02               	movlw	2
 10083   003AE8  26DF               	addwf	indf2,f,c
 10084   003AEA  5CDF               	subwf	indf2,w,c
 10085   003AEC  6ED9               	movwf	fsr2l,c
 10086   003AEE  6ADA               	clrf	fsr2h,c
 10087   003AF0  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10088   003AF4  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10089                           
 10090                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10091   003AF8  EFA7  F01D         	goto	l1453
 10092   003AFC                     l5560:
 10093                           
 10094                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10095   003AFC  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10096   003B00  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10097   003B04  0E00               	movlw	0
 10098   003B06  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10099   003B08  0E0A               	movlw	10
 10100   003B0A  6E04               	movwf	___wmul@multiplicand^0,c
 10101   003B0C  ECFF  F023         	call	___wmul	;wreg free
 10102   003B10  500A               	movf	read_prec_or_width@c^0,w,c
 10103   003B12  2402               	addwf	?___wmul^0,w,c
 10104   003B14  6E0B               	movwf	read_prec_or_width@n^0,c
 10105   003B16  0E00               	movlw	0
 10106   003B18  2003               	addwfc	(?___wmul+1)^0,w,c
 10107   003B1A  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10108   003B1C                     
 10109                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10110   003B1C  5008               	movf	read_prec_or_width@fmt^0,w,c
 10111   003B1E  6ED9               	movwf	fsr2l,c
 10112   003B20  6ADA               	clrf	fsr2h,c
 10113   003B22  2ADF               	incf	indf2,f,c
 10114   003B24                     l5564:
 10115                           
 10116                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10117   003B24  5008               	movf	read_prec_or_width@fmt^0,w,c
 10118   003B26  6ED9               	movwf	fsr2l,c
 10119   003B28  6ADA               	clrf	fsr2h,c
 10120   003B2A  CFDF FFF6          	movff	indf2,tblptrl
 10121   003B2E                     	if	1	;There is more than 1 active tblptr byte
 10122   003B2E  0E0E               	movlw	high __smallconst
 10123   003B30  6EF7               	movwf	tblptrh,c
 10124   003B32                     	endif
 10125   003B32                     	if	0	;tblptru may be non-zero
 10126   003B32                     	endif
 10127   003B32                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10128   003B32  0E00               	movlw	low (__smallconst shr (0+16))
 10129   003B34  6EF8               	movwf	tblptru,c
 10130   003B36                     	endif
 10131   003B36  0008               	tblrd		*
 10132   003B38  50F5               	movf	tablat,w,c
 10133   003B3A  0FD0               	addlw	208
 10134   003B3C  6E0A               	movwf	read_prec_or_width@c^0,c
 10135   003B3E  0E09               	movlw	9
 10136   003B40  640A               	cpfsgt	read_prec_or_width@c^0,c
 10137   003B42  EFA5  F01D         	goto	u5041
 10138   003B46  EFA7  F01D         	goto	u5040
 10139   003B4A                     u5041:
 10140   003B4A  EF7E  F01D         	goto	l5560
 10141   003B4E                     u5040:
 10142   003B4E                     l1453:
 10143                           
 10144                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10145   003B4E  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10146   003B52  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10147   003B56  0012               	return		;funcret
 10148   003B58                     __end_of_read_prec_or_width:
 10149                           	callstack 0
 10150                           
 10151 ;; *************** function ___wmul *****************
 10152 ;; Defined at:
 10153 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  multiplier      2    1[COMRAM] unsigned int 
 10156 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  product         2    5[COMRAM] unsigned int 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  2    1[COMRAM] unsigned int 
 10161 ;; Registers used:
 10162 ;;		wreg, status,2, status,0, prodl, prodh
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10171 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10172 ;;Total ram usage:        6 bytes
 10173 ;; Hardware stack levels used: 1
 10174 ;; Hardware stack levels required when called: 1
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_setMotorPWM
 10179 ;;		_read_prec_or_width
 10180 ;;		_ADC2String
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text53
 10185   0047FE                     __ptext53:
 10186                           	callstack 0
 10187   0047FE                     ___wmul:
 10188                           	callstack 27
 10189   0047FE  5002               	movf	___wmul@multiplier^0,w,c
 10190   004800  0204               	mulwf	___wmul@multiplicand^0,c
 10191   004802  CFF3 F006          	movff	prodl,___wmul@product
 10192   004806  CFF4 F007          	movff	prodh,___wmul@product+1
 10193   00480A  5002               	movf	___wmul@multiplier^0,w,c
 10194   00480C  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10195   00480E  50F3               	movf	243,w,c
 10196   004810  2607               	addwf	(___wmul@product+1)^0,f,c
 10197   004812  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10198   004814  0204               	mulwf	___wmul@multiplicand^0,c
 10199   004816  50F3               	movf	243,w,c
 10200   004818  2607               	addwf	(___wmul@product+1)^0,f,c
 10201   00481A  C006  F002         	movff	___wmul@product,?___wmul
 10202   00481E  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10203   004822  0012               	return		;funcret
 10204   004824                     __end_of___wmul:
 10205                           	callstack 0
 10206                           
 10207 ;; *************** function _dtoa *****************
 10208 ;; Defined at:
 10209 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10212 ;;		 -> sprintf@f(12), 
 10213 ;;  d               2   24[COMRAM] int 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  i               2   32[COMRAM] int 
 10216 ;;  w               2   29[COMRAM] int 
 10217 ;;  s               1   31[COMRAM] unsigned char 
 10218 ;;  p               1   28[COMRAM] _Bool 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10228 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10229 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10231 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10232 ;;Total ram usage:       11 bytes
 10233 ;; Hardware stack levels used: 1
 10234 ;; Hardware stack levels required when called: 5
 10235 ;; This function calls:
 10236 ;;		___awdiv
 10237 ;;		___awmod
 10238 ;;		_abs
 10239 ;;		_pad
 10240 ;; This function is called by:
 10241 ;;		_vfpfcnvrt
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           	psect	text54
 10246   002F10                     __ptext54:
 10247                           	callstack 0
 10248   002F10                     _dtoa:
 10249                           	callstack 21
 10250   002F10                     
 10251                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10252   002F10  0E01               	movlw	1
 10253   002F12  6E1D               	movwf	dtoa@p^0,c
 10254   002F14                     
 10255                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10256   002F14  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10257   002F16  EF8F  F017         	goto	u4931
 10258   002F1A  EF92  F017         	goto	u4930
 10259   002F1E                     u4931:
 10260   002F1E  0E01               	movlw	1
 10261   002F20  EF93  F017         	goto	u4940
 10262   002F24                     u4930:
 10263   002F24  0E00               	movlw	0
 10264   002F26                     u4940:
 10265   002F26  6E20               	movwf	dtoa@s^0,c
 10266   002F28                     
 10267                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10268   002F28  C0C0  F01E         	movff	_width,dtoa@w
 10269   002F2C  C0C1  F01F         	movff	_width+1,dtoa@w+1
 10270   002F30                     
 10271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10272   002F30  5020               	movf	dtoa@s^0,w,c
 10273   002F32  B4D8               	btfsc	status,2,c
 10274   002F34  EF9E  F017         	goto	u4951
 10275   002F38  EFA0  F017         	goto	u4950
 10276   002F3C                     u4951:
 10277   002F3C  EFB7  F017         	goto	l1436
 10278   002F40                     u4950:
 10279   002F40                     
 10280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10281   002F40  061E               	decf	dtoa@w^0,f,c
 10282   002F42  A0D8               	btfss	status,0,c
 10283   002F44  061F               	decf	(dtoa@w+1)^0,f,c
 10284   002F46                     
 10285                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10286   002F46  5020               	movf	dtoa@s^0,w,c
 10287   002F48  A4D8               	btfss	status,2,c
 10288   002F4A  EFA9  F017         	goto	u4961
 10289   002F4E  EFAB  F017         	goto	u4960
 10290   002F52                     u4961:
 10291   002F52  EFB1  F017         	goto	l5516
 10292   002F56                     u4960:
 10293   002F56  0E00               	movlw	0
 10294   002F58  6E1C               	movwf	(_dtoa$3069+1)^0,c
 10295   002F5A  0E2B               	movlw	43
 10296   002F5C  6E1B               	movwf	_dtoa$3069^0,c
 10297   002F5E  EFB5  F017         	goto	l5518
 10298   002F62                     l5516:
 10299   002F62  0E00               	movlw	0
 10300   002F64  6E1C               	movwf	(_dtoa$3069+1)^0,c
 10301   002F66  0E2D               	movlw	45
 10302   002F68  6E1B               	movwf	_dtoa$3069^0,c
 10303   002F6A                     l5518:
 10304   002F6A  C01B  F020         	movff	_dtoa$3069,dtoa@s
 10305   002F6E                     l1436:
 10306                           
 10307                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10308   002F6E  0E00               	movlw	0
 10309   002F70  6E22               	movwf	(dtoa@i+1)^0,c
 10310   002F72  0E1F               	movlw	31
 10311   002F74  6E21               	movwf	dtoa@i^0,c
 10312   002F76                     
 10313                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10314   002F76  0E00               	movlw	0
 10315   002F78  0101               	movlb	1	; () banked
 10316   002F7A  6FA1               	movwf	(_dbuf+31)& (0+255),b
 10317                           
 10318                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10319   002F7C  EFEF  F017         	goto	l5532
 10320   002F80                     l5522:
 10321                           
 10322                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10323   002F80  0621               	decf	dtoa@i^0,f,c
 10324   002F82  A0D8               	btfss	status,0,c
 10325   002F84  0622               	decf	(dtoa@i+1)^0,f,c
 10326   002F86                     
 10327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10328   002F86  0E82               	movlw	low _dbuf
 10329   002F88  2421               	addwf	dtoa@i^0,w,c
 10330   002F8A  6ED9               	movwf	fsr2l,c
 10331   002F8C  0E01               	movlw	high _dbuf
 10332   002F8E  2022               	addwfc	(dtoa@i+1)^0,w,c
 10333   002F90  6EDA               	movwf	fsr2h,c
 10334   002F92  C019  F002         	movff	dtoa@d,___awmod@dividend
 10335   002F96  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10336   002F9A  0E00               	movlw	0
 10337   002F9C  6E05               	movwf	(___awmod@divisor+1)^0,c
 10338   002F9E  0E0A               	movlw	10
 10339   002FA0  6E04               	movwf	___awmod@divisor^0,c
 10340   002FA2  ECFD  F01C         	call	___awmod	;wreg free
 10341   002FA6  C002  F008         	movff	?___awmod,abs@a
 10342   002FAA  C003  F009         	movff	?___awmod+1,abs@a+1
 10343   002FAE  EC2F  F022         	call	_abs	;wreg free
 10344   002FB2  5008               	movf	?_abs^0,w,c
 10345   002FB4  0F30               	addlw	48
 10346   002FB6  6EDF               	movwf	indf2,c
 10347   002FB8                     
 10348                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10349   002FB8  0E00               	movlw	0
 10350   002FBA  6E1D               	movwf	dtoa@p^0,c
 10351   002FBC                     
 10352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10353   002FBC  061E               	decf	dtoa@w^0,f,c
 10354   002FBE  A0D8               	btfss	status,0,c
 10355   002FC0  061F               	decf	(dtoa@w+1)^0,f,c
 10356   002FC2                     
 10357                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10358   002FC2  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10359   002FC6  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10360   002FCA  0E00               	movlw	0
 10361   002FCC  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10362   002FCE  0E0A               	movlw	10
 10363   002FD0  6E04               	movwf	___awdiv@divisor^0,c
 10364   002FD2  EC9B  F01C         	call	___awdiv	;wreg free
 10365   002FD6  C002  F019         	movff	?___awdiv,dtoa@d
 10366   002FDA  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10367   002FDE                     l5532:
 10368                           
 10369                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10370   002FDE  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10371   002FE0  EFFA  F017         	goto	u4971
 10372   002FE4  5022               	movf	(dtoa@i+1)^0,w,c
 10373   002FE6  E108               	bnz	u4970
 10374   002FE8  0421               	decf	dtoa@i^0,w,c
 10375   002FEA  A0D8               	btfss	status,0,c
 10376   002FEC  EFFA  F017         	goto	u4971
 10377   002FF0  EFFC  F017         	goto	u4970
 10378   002FF4                     u4971:
 10379   002FF4  EF22  F018         	goto	l5542
 10380   002FF8                     u4970:
 10381   002FF8  5019               	movf	dtoa@d^0,w,c
 10382   002FFA  101A               	iorwf	(dtoa@d+1)^0,w,c
 10383   002FFC  A4D8               	btfss	status,2,c
 10384   002FFE  EF03  F018         	goto	u4981
 10385   003002  EF05  F018         	goto	u4980
 10386   003006                     u4981:
 10387   003006  EFC0  F017         	goto	l5522
 10388   00300A                     u4980:
 10389   00300A  501D               	movf	dtoa@p^0,w,c
 10390   00300C  A4D8               	btfss	status,2,c
 10391   00300E  EF0B  F018         	goto	u4991
 10392   003012  EF0D  F018         	goto	u4990
 10393   003016                     u4991:
 10394   003016  EFC0  F017         	goto	l5522
 10395   00301A                     u4990:
 10396   00301A  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10397   00301C  EF18  F018         	goto	u5001
 10398   003020  501F               	movf	(dtoa@w+1)^0,w,c
 10399   003022  E108               	bnz	u5000
 10400   003024  041E               	decf	dtoa@w^0,w,c
 10401   003026  A0D8               	btfss	status,0,c
 10402   003028  EF18  F018         	goto	u5001
 10403   00302C  EF1A  F018         	goto	u5000
 10404   003030                     u5001:
 10405   003030  EF22  F018         	goto	l5542
 10406   003034                     u5000:
 10407   003034  0100               	movlb	0	; () banked
 10408   003036  B3C4               	btfsc	_flags& (0+255),1,b
 10409   003038  EF20  F018         	goto	u5011
 10410   00303C  EF22  F018         	goto	u5010
 10411   003040                     u5011:
 10412   003040  EFC0  F017         	goto	l5522
 10413   003044                     u5010:
 10414   003044                     l5542:
 10415                           
 10416                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10417   003044  5020               	movf	dtoa@s^0,w,c
 10418   003046  B4D8               	btfsc	status,2,c
 10419   003048  EF28  F018         	goto	u5021
 10420   00304C  EF2A  F018         	goto	u5020
 10421   003050                     u5021:
 10422   003050  EF35  F018         	goto	l5548
 10423   003054                     u5020:
 10424   003054                     
 10425                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10426   003054  0621               	decf	dtoa@i^0,f,c
 10427   003056  A0D8               	btfss	status,0,c
 10428   003058  0622               	decf	(dtoa@i+1)^0,f,c
 10429   00305A                     
 10430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10431   00305A  0E82               	movlw	low _dbuf
 10432   00305C  2421               	addwf	dtoa@i^0,w,c
 10433   00305E  6ED9               	movwf	fsr2l,c
 10434   003060  0E01               	movlw	high _dbuf
 10435   003062  2022               	addwfc	(dtoa@i+1)^0,w,c
 10436   003064  6EDA               	movwf	fsr2h,c
 10437   003066  C020  FFDF         	movff	dtoa@s,indf2
 10438   00306A                     l5548:
 10439                           
 10440                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10441   00306A  C018  F010         	movff	dtoa@fp,pad@fp
 10442   00306E  0E82               	movlw	low _dbuf
 10443   003070  2421               	addwf	dtoa@i^0,w,c
 10444   003072  6E11               	movwf	pad@buf^0,c
 10445   003074  0E01               	movlw	high _dbuf
 10446   003076  2022               	addwfc	(dtoa@i+1)^0,w,c
 10447   003078  6E12               	movwf	(pad@buf+1)^0,c
 10448   00307A  C01E  F013         	movff	dtoa@w,pad@p
 10449   00307E  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10450   003082  EC56  F01E         	call	_pad	;wreg free
 10451   003086  0012               	return		;funcret
 10452   003088                     __end_of_dtoa:
 10453                           	callstack 0
 10454                           
 10455 ;; *************** function _pad *****************
 10456 ;; Defined at:
 10457 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10460 ;;		 -> sprintf@f(12), 
 10461 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10462 ;;		 -> dbuf(32), 
 10463 ;;  p               2   18[COMRAM] int 
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;  i               2   21[COMRAM] int 
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10475 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10477 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10478 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10479 ;;Total ram usage:        8 bytes
 10480 ;; Hardware stack levels used: 1
 10481 ;; Hardware stack levels required when called: 4
 10482 ;; This function calls:
 10483 ;;		_fputc
 10484 ;;		_fputs
 10485 ;; This function is called by:
 10486 ;;		_dtoa
 10487 ;; This function uses a non-reentrant model
 10488 ;;
 10489                           
 10490                           	psect	text55
 10491   003CAC                     __ptext55:
 10492                           	callstack 0
 10493   003CAC                     _pad:
 10494                           	callstack 21
 10495   003CAC                     
 10496                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10497   003CAC  0100               	movlb	0	; () banked
 10498   003CAE  A1C4               	btfss	_flags& (0+255),0,b
 10499   003CB0  EF5C  F01E         	goto	u4851
 10500   003CB4  EF5E  F01E         	goto	u4850
 10501   003CB8                     u4851:
 10502   003CB8  EF66  F01E         	goto	l5464
 10503   003CBC                     u4850:
 10504   003CBC                     
 10505                           ; BSR set to: 0
 10506                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10507   003CBC  C011  F00A         	movff	pad@buf,fputs@s
 10508   003CC0  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10509   003CC4  C010  F00C         	movff	pad@fp,fputs@fp
 10510   003CC8  ECA0  F021         	call	_fputs	;wreg free
 10511   003CCC                     l5464:
 10512                           
 10513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10514   003CCC  BE14               	btfsc	(pad@p+1)^0,7,c
 10515   003CCE  EF6D  F01E         	goto	u4860
 10516   003CD2  EF6B  F01E         	goto	u4861
 10517   003CD6                     u4861:
 10518   003CD6  EF71  F01E         	goto	l1428
 10519   003CDA                     u4860:
 10520   003CDA                     
 10521                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10522   003CDA  0E00               	movlw	0
 10523   003CDC  6E14               	movwf	(pad@p+1)^0,c
 10524   003CDE  0E00               	movlw	0
 10525   003CE0  6E13               	movwf	pad@p^0,c
 10526   003CE2                     l1428:
 10527                           
 10528                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10529   003CE2  0E00               	movlw	0
 10530   003CE4  6E17               	movwf	(pad@i+1)^0,c
 10531   003CE6  0E00               	movlw	0
 10532   003CE8  6E16               	movwf	pad@i^0,c
 10533                           
 10534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10535   003CEA  EF81  F01E         	goto	l5472
 10536   003CEE                     l5468:
 10537                           
 10538                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10539   003CEE  0E00               	movlw	0
 10540   003CF0  6E03               	movwf	(fputc@c+1)^0,c
 10541   003CF2  0E20               	movlw	32
 10542   003CF4  6E02               	movwf	fputc@c^0,c
 10543   003CF6  C010  F004         	movff	pad@fp,fputc@fp
 10544   003CFA  EC01  F01E         	call	_fputc	;wreg free
 10545   003CFE                     
 10546                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10547   003CFE  4A16               	infsnz	pad@i^0,f,c
 10548   003D00  2A17               	incf	(pad@i+1)^0,f,c
 10549   003D02                     l5472:
 10550                           
 10551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10552   003D02  5013               	movf	pad@p^0,w,c
 10553   003D04  5C16               	subwf	pad@i^0,w,c
 10554   003D06  5017               	movf	(pad@i+1)^0,w,c
 10555   003D08  0A80               	xorlw	128
 10556   003D0A  6E15               	movwf	??_pad^0,c
 10557   003D0C  5014               	movf	(pad@p+1)^0,w,c
 10558   003D0E  0A80               	xorlw	128
 10559   003D10  5815               	subwfb	??_pad^0,w,c
 10560   003D12  A0D8               	btfss	status,0,c
 10561   003D14  EF8E  F01E         	goto	u4871
 10562   003D18  EF90  F01E         	goto	u4870
 10563   003D1C                     u4871:
 10564   003D1C  EF77  F01E         	goto	l5468
 10565   003D20                     u4870:
 10566   003D20                     
 10567                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10568   003D20  0100               	movlb	0	; () banked
 10569   003D22  B1C4               	btfsc	_flags& (0+255),0,b
 10570   003D24  EF96  F01E         	goto	u4881
 10571   003D28  EF98  F01E         	goto	u4880
 10572   003D2C                     u4881:
 10573   003D2C  EFA0  F01E         	goto	l1433
 10574   003D30                     u4880:
 10575   003D30                     
 10576                           ; BSR set to: 0
 10577                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10578   003D30  C011  F00A         	movff	pad@buf,fputs@s
 10579   003D34  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10580   003D38  C010  F00C         	movff	pad@fp,fputs@fp
 10581   003D3C  ECA0  F021         	call	_fputs	;wreg free
 10582   003D40                     l1433:
 10583   003D40  0012               	return		;funcret
 10584   003D42                     __end_of_pad:
 10585                           	callstack 0
 10586                           
 10587 ;; *************** function _fputs *****************
 10588 ;; Defined at:
 10589 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10592 ;;		 -> dbuf(32), 
 10593 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10594 ;;		 -> sprintf@f(12), 
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;  i               2   13[COMRAM] int 
 10597 ;;  c               1   12[COMRAM] unsigned char 
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  2    9[COMRAM] int 
 10600 ;; Registers used:
 10601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10607 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10611 ;;Total ram usage:        6 bytes
 10612 ;; Hardware stack levels used: 1
 10613 ;; Hardware stack levels required when called: 3
 10614 ;; This function calls:
 10615 ;;		_fputc
 10616 ;; This function is called by:
 10617 ;;		_pad
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           	psect	text56
 10622   004340                     __ptext56:
 10623                           	callstack 0
 10624   004340                     _fputs:
 10625                           	callstack 21
 10626   004340  0E00               	movlw	0
 10627   004342  6E0F               	movwf	(fputs@i+1)^0,c
 10628   004344  0E00               	movlw	0
 10629   004346  6E0E               	movwf	fputs@i^0,c
 10630   004348  EFAF  F021         	goto	l5372
 10631   00434C                     l5368:
 10632   00434C  C00D  F002         	movff	fputs@c,fputc@c
 10633   004350  6A03               	clrf	(fputc@c+1)^0,c
 10634   004352  C00C  F004         	movff	fputs@fp,fputc@fp
 10635   004356  EC01  F01E         	call	_fputc	;wreg free
 10636   00435A  4A0E               	infsnz	fputs@i^0,f,c
 10637   00435C  2A0F               	incf	(fputs@i+1)^0,f,c
 10638   00435E                     l5372:
 10639   00435E  500E               	movf	fputs@i^0,w,c
 10640   004360  240A               	addwf	fputs@s^0,w,c
 10641   004362  6ED9               	movwf	fsr2l,c
 10642   004364  500F               	movf	(fputs@i+1)^0,w,c
 10643   004366  200B               	addwfc	(fputs@s+1)^0,w,c
 10644   004368  6EDA               	movwf	fsr2h,c
 10645   00436A  50DF               	movf	indf2,w,c
 10646   00436C  6E0D               	movwf	fputs@c^0,c
 10647   00436E  500D               	movf	fputs@c^0,w,c
 10648   004370  A4D8               	btfss	status,2,c
 10649   004372  EFBD  F021         	goto	u4721
 10650   004376  EFBF  F021         	goto	u4720
 10651   00437A                     u4721:
 10652   00437A  EFA6  F021         	goto	l5368
 10653   00437E                     u4720:
 10654   00437E  0012               	return		;funcret
 10655   004380                     __end_of_fputs:
 10656                           	callstack 0
 10657                           
 10658 ;; *************** function _fputc *****************
 10659 ;; Defined at:
 10660 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  c               2    1[COMRAM] int 
 10663 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10664 ;;		 -> sprintf@f(12), 
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;		None
 10667 ;; Return value:  Size  Location     Type
 10668 ;;                  2    1[COMRAM] int 
 10669 ;; Registers used:
 10670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10676 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10678 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10679 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10680 ;;Total ram usage:        8 bytes
 10681 ;; Hardware stack levels used: 1
 10682 ;; Hardware stack levels required when called: 2
 10683 ;; This function calls:
 10684 ;;		_putch
 10685 ;; This function is called by:
 10686 ;;		_pad
 10687 ;;		_vfpfcnvrt
 10688 ;;		_fputs
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           	psect	text57
 10693   003C02                     __ptext57:
 10694                           	callstack 0
 10695   003C02                     _fputc:
 10696                           	callstack 24
 10697   003C02  5004               	movf	fputc@fp^0,w,c
 10698   003C04  B4D8               	btfsc	status,2,c
 10699   003C06  EF07  F01E         	goto	u4681
 10700   003C0A  EF09  F01E         	goto	u4680
 10701   003C0E                     u4681:
 10702   003C0E  EF11  F01E         	goto	l5356
 10703   003C12                     u4680:
 10704   003C12  5004               	movf	fputc@fp^0,w,c
 10705   003C14  A4D8               	btfss	status,2,c
 10706   003C16  EF0F  F01E         	goto	u4691
 10707   003C1A  EF11  F01E         	goto	u4690
 10708   003C1E                     u4691:
 10709   003C1E  EF16  F01E         	goto	l5358
 10710   003C22                     u4690:
 10711   003C22                     l5356:
 10712   003C22  5002               	movf	fputc@c^0,w,c
 10713   003C24  EC6F  F024         	call	_putch
 10714   003C28  EF55  F01E         	goto	l1497
 10715   003C2C                     l5358:
 10716   003C2C  5004               	movf	fputc@fp^0,w,c
 10717   003C2E  6ED9               	movwf	fsr2l,c
 10718   003C30  6ADA               	clrf	fsr2h,c
 10719   003C32  0E0A               	movlw	10
 10720   003C34  26D9               	addwf	fsr2l,f,c
 10721   003C36  50DE               	movf	postinc2,w,c
 10722   003C38  10DE               	iorwf	postinc2,w,c
 10723   003C3A  B4D8               	btfsc	status,2,c
 10724   003C3C  EF22  F01E         	goto	u4701
 10725   003C40  EF24  F01E         	goto	u4700
 10726   003C44                     u4701:
 10727   003C44  EF3D  F01E         	goto	l5362
 10728   003C48                     u4700:
 10729   003C48  5004               	movf	fputc@fp^0,w,c
 10730   003C4A  6ED9               	movwf	fsr2l,c
 10731   003C4C  6ADA               	clrf	fsr2h,c
 10732   003C4E  0E0A               	movlw	10
 10733   003C50  26D9               	addwf	fsr2l,f,c
 10734   003C52  5004               	movf	fputc@fp^0,w,c
 10735   003C54  6EE1               	movwf	fsr1l,c
 10736   003C56  6AE2               	clrf	fsr1h,c
 10737   003C58  0E03               	movlw	3
 10738   003C5A  26E1               	addwf	fsr1l,f,c
 10739   003C5C  50DE               	movf	postinc2,w,c
 10740   003C5E  5CE6               	subwf	postinc1,w,c
 10741   003C60  50E6               	movf	postinc1,w,c
 10742   003C62  0A80               	xorlw	128
 10743   003C64  6E09               	movwf	(??_fputc+4)^0,c
 10744   003C66  50DE               	movf	postinc2,w,c
 10745   003C68  0A80               	xorlw	128
 10746   003C6A  5809               	subwfb	(??_fputc+4)^0,w,c
 10747   003C6C  B0D8               	btfsc	status,0,c
 10748   003C6E  EF3B  F01E         	goto	u4711
 10749   003C72  EF3D  F01E         	goto	u4710
 10750   003C76                     u4711:
 10751   003C76  EF55  F01E         	goto	l1497
 10752   003C7A                     u4710:
 10753   003C7A                     l5362:
 10754   003C7A  5004               	movf	fputc@fp^0,w,c
 10755   003C7C  6ED9               	movwf	fsr2l,c
 10756   003C7E  6ADA               	clrf	fsr2h,c
 10757   003C80  0E03               	movlw	3
 10758   003C82  26D9               	addwf	fsr2l,f,c
 10759   003C84  50DF               	movf	indf2,w,c
 10760   003C86  6E05               	movwf	??_fputc^0,c
 10761   003C88  5004               	movf	fputc@fp^0,w,c
 10762   003C8A  6ED9               	movwf	fsr2l,c
 10763   003C8C  6ADA               	clrf	fsr2h,c
 10764   003C8E  50DF               	movf	indf2,w,c
 10765   003C90  2405               	addwf	??_fputc^0,w,c
 10766   003C92  6ED9               	movwf	fsr2l,c
 10767   003C94  6ADA               	clrf	fsr2h,c
 10768   003C96  C002  FFDF         	movff	fputc@c,indf2
 10769   003C9A  5004               	movf	fputc@fp^0,w,c
 10770   003C9C  6ED9               	movwf	fsr2l,c
 10771   003C9E  6ADA               	clrf	fsr2h,c
 10772   003CA0  0E03               	movlw	3
 10773   003CA2  26D9               	addwf	fsr2l,f,c
 10774   003CA4  2ADE               	incf	postinc2,f,c
 10775   003CA6  0E00               	movlw	0
 10776   003CA8  22DD               	addwfc	postdec2,f,c
 10777   003CAA                     l1497:
 10778   003CAA  0012               	return		;funcret
 10779   003CAC                     __end_of_fputc:
 10780                           	callstack 0
 10781                           
 10782 ;; *************** function _putch *****************
 10783 ;; Defined at:
 10784 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  c               1    wreg     unsigned char 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  c               1    0[COMRAM] unsigned char 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used: 1
 10804 ;; Hardware stack levels required when called: 1
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_fputc
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           	psect	text58
 10813   0048DE                     __ptext58:
 10814                           	callstack 0
 10815   0048DE                     _putch:
 10816                           	callstack 24
 10817   0048DE  0012               	return		;funcret
 10818   0048E0                     __end_of_putch:
 10819                           	callstack 0
 10820                           
 10821 ;; *************** function _abs *****************
 10822 ;; Defined at:
 10823 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  a               2    7[COMRAM] int 
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;		None
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  2    7[COMRAM] int 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10840 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10841 ;;Total ram usage:        4 bytes
 10842 ;; Hardware stack levels used: 1
 10843 ;; Hardware stack levels required when called: 1
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_dtoa
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text59
 10852   00445E                     __ptext59:
 10853                           	callstack 0
 10854   00445E                     _abs:
 10855                           	callstack 24
 10856   00445E  BE09               	btfsc	(abs@a+1)^0,7,c
 10857   004460  EF34  F022         	goto	u4891
 10858   004464  EF36  F022         	goto	u4890
 10859   004468                     u4891:
 10860   004468  EF3C  F022         	goto	l1482
 10861   00446C                     u4890:
 10862   00446C  C008  F008         	movff	abs@a,?_abs
 10863   004470  C009  F009         	movff	abs@a+1,?_abs+1
 10864   004474  EF48  F022         	goto	l1485
 10865   004478                     l1482:
 10866   004478  C008  F00A         	movff	abs@a,??_abs
 10867   00447C  C009  F00B         	movff	abs@a+1,??_abs+1
 10868   004480  1E0A               	comf	??_abs^0,f,c
 10869   004482  1E0B               	comf	(??_abs+1)^0,f,c
 10870   004484  4A0A               	infsnz	??_abs^0,f,c
 10871   004486  2A0B               	incf	(??_abs+1)^0,f,c
 10872   004488  C00A  F008         	movff	??_abs,?_abs
 10873   00448C  C00B  F009         	movff	??_abs+1,?_abs+1
 10874   004490                     l1485:
 10875   004490  0012               	return		;funcret
 10876   004492                     __end_of_abs:
 10877                           	callstack 0
 10878                           
 10879 ;; *************** function ___awmod *****************
 10880 ;; Defined at:
 10881 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  dividend        2    1[COMRAM] int 
 10884 ;;  divisor         2    3[COMRAM] int 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  sign            1    6[COMRAM] unsigned char 
 10887 ;;  counter         1    5[COMRAM] unsigned char 
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  2    1[COMRAM] int 
 10890 ;; Registers used:
 10891 ;;		wreg, status,2, status,0
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10900 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10901 ;;Total ram usage:        6 bytes
 10902 ;; Hardware stack levels used: 1
 10903 ;; Hardware stack levels required when called: 1
 10904 ;; This function calls:
 10905 ;;		Nothing
 10906 ;; This function is called by:
 10907 ;;		_dtoa
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text60
 10912   0039FA                     __ptext60:
 10913                           	callstack 0
 10914   0039FA                     ___awmod:
 10915                           	callstack 24
 10916   0039FA  0E00               	movlw	0
 10917   0039FC  6E07               	movwf	___awmod@sign^0,c
 10918   0039FE  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10919   003A00  EF06  F01D         	goto	u4790
 10920   003A04  EF04  F01D         	goto	u4791
 10921   003A08                     u4791:
 10922   003A08  EF0C  F01D         	goto	l5432
 10923   003A0C                     u4790:
 10924   003A0C  6C02               	negf	___awmod@dividend^0,c
 10925   003A0E  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10926   003A10  B0D8               	btfsc	status,0,c
 10927   003A12  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10928   003A14  0E01               	movlw	1
 10929   003A16  6E07               	movwf	___awmod@sign^0,c
 10930   003A18                     l5432:
 10931   003A18  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10932   003A1A  EF13  F01D         	goto	u4800
 10933   003A1E  EF11  F01D         	goto	u4801
 10934   003A22                     u4801:
 10935   003A22  EF17  F01D         	goto	l5436
 10936   003A26                     u4800:
 10937   003A26  6C04               	negf	___awmod@divisor^0,c
 10938   003A28  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10939   003A2A  B0D8               	btfsc	status,0,c
 10940   003A2C  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10941   003A2E                     l5436:
 10942   003A2E  5004               	movf	___awmod@divisor^0,w,c
 10943   003A30  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10944   003A32  B4D8               	btfsc	status,2,c
 10945   003A34  EF1E  F01D         	goto	u4811
 10946   003A38  EF20  F01D         	goto	u4810
 10947   003A3C                     u4811:
 10948   003A3C  EF44  F01D         	goto	l5452
 10949   003A40                     u4810:
 10950   003A40  0E01               	movlw	1
 10951   003A42  6E06               	movwf	___awmod@counter^0,c
 10952   003A44  EF28  F01D         	goto	l5442
 10953   003A48                     l5440:
 10954   003A48  90D8               	bcf	status,0,c
 10955   003A4A  3604               	rlcf	___awmod@divisor^0,f,c
 10956   003A4C  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10957   003A4E  2A06               	incf	___awmod@counter^0,f,c
 10958   003A50                     l5442:
 10959   003A50  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10960   003A52  EF2D  F01D         	goto	u4821
 10961   003A56  EF2F  F01D         	goto	u4820
 10962   003A5A                     u4821:
 10963   003A5A  EF24  F01D         	goto	l5440
 10964   003A5E                     u4820:
 10965   003A5E                     l5444:
 10966   003A5E  5004               	movf	___awmod@divisor^0,w,c
 10967   003A60  5C02               	subwf	___awmod@dividend^0,w,c
 10968   003A62  5005               	movf	(___awmod@divisor+1)^0,w,c
 10969   003A64  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10970   003A66  A0D8               	btfss	status,0,c
 10971   003A68  EF38  F01D         	goto	u4831
 10972   003A6C  EF3A  F01D         	goto	u4830
 10973   003A70                     u4831:
 10974   003A70  EF3E  F01D         	goto	l5448
 10975   003A74                     u4830:
 10976   003A74  5004               	movf	___awmod@divisor^0,w,c
 10977   003A76  5E02               	subwf	___awmod@dividend^0,f,c
 10978   003A78  5005               	movf	(___awmod@divisor+1)^0,w,c
 10979   003A7A  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10980   003A7C                     l5448:
 10981   003A7C  90D8               	bcf	status,0,c
 10982   003A7E  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10983   003A80  3204               	rrcf	___awmod@divisor^0,f,c
 10984   003A82  2E06               	decfsz	___awmod@counter^0,f,c
 10985   003A84  EF2F  F01D         	goto	l5444
 10986   003A88                     l5452:
 10987   003A88  5007               	movf	___awmod@sign^0,w,c
 10988   003A8A  B4D8               	btfsc	status,2,c
 10989   003A8C  EF4A  F01D         	goto	u4841
 10990   003A90  EF4C  F01D         	goto	u4840
 10991   003A94                     u4841:
 10992   003A94  EF50  F01D         	goto	l5456
 10993   003A98                     u4840:
 10994   003A98  6C02               	negf	___awmod@dividend^0,c
 10995   003A9A  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10996   003A9C  B0D8               	btfsc	status,0,c
 10997   003A9E  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10998   003AA0                     l5456:
 10999   003AA0  C002  F002         	movff	___awmod@dividend,?___awmod
 11000   003AA4  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11001   003AA8  0012               	return		;funcret
 11002   003AAA                     __end_of___awmod:
 11003                           	callstack 0
 11004                           
 11005 ;; *************** function ___awdiv *****************
 11006 ;; Defined at:
 11007 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  dividend        2    1[COMRAM] int 
 11010 ;;  divisor         2    3[COMRAM] int 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  quotient        2    7[COMRAM] int 
 11013 ;;  sign            1    6[COMRAM] unsigned char 
 11014 ;;  counter         1    5[COMRAM] unsigned char 
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  2    1[COMRAM] int 
 11017 ;; Registers used:
 11018 ;;		wreg, status,2, status,0
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11025 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11027 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11028 ;;Total ram usage:        8 bytes
 11029 ;; Hardware stack levels used: 1
 11030 ;; Hardware stack levels required when called: 1
 11031 ;; This function calls:
 11032 ;;		Nothing
 11033 ;; This function is called by:
 11034 ;;		_dtoa
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           	psect	text61
 11039   003936                     __ptext61:
 11040                           	callstack 0
 11041   003936                     ___awdiv:
 11042                           	callstack 24
 11043   003936  0E00               	movlw	0
 11044   003938  6E07               	movwf	___awdiv@sign^0,c
 11045   00393A  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11046   00393C  EFA4  F01C         	goto	u4730
 11047   003940  EFA2  F01C         	goto	u4731
 11048   003944                     u4731:
 11049   003944  EFAA  F01C         	goto	l5388
 11050   003948                     u4730:
 11051   003948  6C04               	negf	___awdiv@divisor^0,c
 11052   00394A  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11053   00394C  B0D8               	btfsc	status,0,c
 11054   00394E  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11055   003950  0E01               	movlw	1
 11056   003952  6E07               	movwf	___awdiv@sign^0,c
 11057   003954                     l5388:
 11058   003954  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11059   003956  EFB1  F01C         	goto	u4740
 11060   00395A  EFAF  F01C         	goto	u4741
 11061   00395E                     u4741:
 11062   00395E  EFB7  F01C         	goto	l5394
 11063   003962                     u4740:
 11064   003962  6C02               	negf	___awdiv@dividend^0,c
 11065   003964  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11066   003966  B0D8               	btfsc	status,0,c
 11067   003968  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11068   00396A  0E01               	movlw	1
 11069   00396C  1A07               	xorwf	___awdiv@sign^0,f,c
 11070   00396E                     l5394:
 11071   00396E  0E00               	movlw	0
 11072   003970  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11073   003972  0E00               	movlw	0
 11074   003974  6E08               	movwf	___awdiv@quotient^0,c
 11075   003976  5004               	movf	___awdiv@divisor^0,w,c
 11076   003978  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11077   00397A  B4D8               	btfsc	status,2,c
 11078   00397C  EFC2  F01C         	goto	u4751
 11079   003980  EFC4  F01C         	goto	u4750
 11080   003984                     u4751:
 11081   003984  EFEC  F01C         	goto	l5416
 11082   003988                     u4750:
 11083   003988  0E01               	movlw	1
 11084   00398A  6E06               	movwf	___awdiv@counter^0,c
 11085   00398C  EFCC  F01C         	goto	l5402
 11086   003990                     l5400:
 11087   003990  90D8               	bcf	status,0,c
 11088   003992  3604               	rlcf	___awdiv@divisor^0,f,c
 11089   003994  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11090   003996  2A06               	incf	___awdiv@counter^0,f,c
 11091   003998                     l5402:
 11092   003998  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11093   00399A  EFD1  F01C         	goto	u4761
 11094   00399E  EFD3  F01C         	goto	u4760
 11095   0039A2                     u4761:
 11096   0039A2  EFC8  F01C         	goto	l5400
 11097   0039A6                     u4760:
 11098   0039A6                     l5404:
 11099   0039A6  90D8               	bcf	status,0,c
 11100   0039A8  3608               	rlcf	___awdiv@quotient^0,f,c
 11101   0039AA  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11102   0039AC  5004               	movf	___awdiv@divisor^0,w,c
 11103   0039AE  5C02               	subwf	___awdiv@dividend^0,w,c
 11104   0039B0  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11105   0039B2  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11106   0039B4  A0D8               	btfss	status,0,c
 11107   0039B6  EFDF  F01C         	goto	u4771
 11108   0039BA  EFE1  F01C         	goto	u4770
 11109   0039BE                     u4771:
 11110   0039BE  EFE6  F01C         	goto	l5412
 11111   0039C2                     u4770:
 11112   0039C2  5004               	movf	___awdiv@divisor^0,w,c
 11113   0039C4  5E02               	subwf	___awdiv@dividend^0,f,c
 11114   0039C6  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11115   0039C8  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11116   0039CA  8008               	bsf	___awdiv@quotient^0,0,c
 11117   0039CC                     l5412:
 11118   0039CC  90D8               	bcf	status,0,c
 11119   0039CE  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11120   0039D0  3204               	rrcf	___awdiv@divisor^0,f,c
 11121   0039D2  2E06               	decfsz	___awdiv@counter^0,f,c
 11122   0039D4  EFD3  F01C         	goto	l5404
 11123   0039D8                     l5416:
 11124   0039D8  5007               	movf	___awdiv@sign^0,w,c
 11125   0039DA  B4D8               	btfsc	status,2,c
 11126   0039DC  EFF2  F01C         	goto	u4781
 11127   0039E0  EFF4  F01C         	goto	u4780
 11128   0039E4                     u4781:
 11129   0039E4  EFF8  F01C         	goto	l5420
 11130   0039E8                     u4780:
 11131   0039E8  6C08               	negf	___awdiv@quotient^0,c
 11132   0039EA  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11133   0039EC  B0D8               	btfsc	status,0,c
 11134   0039EE  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11135   0039F0                     l5420:
 11136   0039F0  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11137   0039F4  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11138   0039F8  0012               	return		;funcret
 11139   0039FA                     __end_of___awdiv:
 11140                           	callstack 0
 11141                           
 11142 ;; *************** function _sendStringSerial4 *****************
 11143 ;; Defined at:
 11144 ;;		line 41 in file "serial.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  string          1    2[COMRAM] PTR unsigned char 
 11147 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11148 ;; Auto vars:     Size  Location     Type
 11149 ;;		None
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  1    wreg      void 
 11152 ;; Registers used:
 11153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11159 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11163 ;;Total ram usage:        1 bytes
 11164 ;; Hardware stack levels used: 1
 11165 ;; Hardware stack levels required when called: 2
 11166 ;; This function calls:
 11167 ;;		_sendCharSerial4
 11168 ;; This function is called by:
 11169 ;;		_calibration_routine
 11170 ;;		_send2USART
 11171 ;;		_sendAllReadings
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text62
 11176   0046EA                     __ptext62:
 11177                           	callstack 0
 11178   0046EA                     _sendStringSerial4:
 11179                           	callstack 27
 11180   0046EA                     
 11181                           ;serial.c: 44:     while(*string != 0){
 11182   0046EA  EF82  F023         	goto	l5996
 11183   0046EE                     l5990:
 11184                           
 11185                           ;serial.c: 46:   sendCharSerial4(*string++);
 11186   0046EE  5003               	movf	sendStringSerial4@string^0,w,c
 11187   0046F0  6ED9               	movwf	fsr2l,c
 11188   0046F2  6ADA               	clrf	fsr2h,c
 11189   0046F4  50DF               	movf	indf2,w,c
 11190   0046F6  EC4D  F024         	call	_sendCharSerial4
 11191   0046FA  2A03               	incf	sendStringSerial4@string^0,f,c
 11192   0046FC                     
 11193                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11194   0046FC  0E6A               	movlw	106
 11195   0046FE                     u7347:
 11196   0046FE  2EE8               	decfsz	wreg,f,c
 11197   004700  D7FE               	bra	u7347
 11198   004702  D000               	nop2	
 11199   004704                     l5996:
 11200                           
 11201                           ;serial.c: 44:     while(*string != 0){
 11202   004704  5003               	movf	sendStringSerial4@string^0,w,c
 11203   004706  6ED9               	movwf	fsr2l,c
 11204   004708  6ADA               	clrf	fsr2h,c
 11205   00470A  50DF               	movf	indf2,w,c
 11206   00470C  A4D8               	btfss	status,2,c
 11207   00470E  EF8B  F023         	goto	u5641
 11208   004712  EF8D  F023         	goto	u5640
 11209   004716                     u5641:
 11210   004716  EF77  F023         	goto	l5990
 11211   00471A                     u5640:
 11212   00471A  0012               	return		;funcret
 11213   00471C                     __end_of_sendStringSerial4:
 11214                           	callstack 0
 11215                           
 11216 ;; *************** function _sendCharSerial4 *****************
 11217 ;; Defined at:
 11218 ;;		line 35 in file "serial.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;  charToSend      1    wreg     unsigned char 
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  charToSend      1    1[COMRAM] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      void 
 11225 ;; Registers used:
 11226 ;;		wreg
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11236 ;;Total ram usage:        1 bytes
 11237 ;; Hardware stack levels used: 1
 11238 ;; Hardware stack levels required when called: 1
 11239 ;; This function calls:
 11240 ;;		Nothing
 11241 ;; This function is called by:
 11242 ;;		_sendStringSerial4
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text63
 11247   00489A                     __ptext63:
 11248                           	callstack 0
 11249   00489A                     _sendCharSerial4:
 11250                           	callstack 27
 11251                           
 11252                           ;incstack = 0
 11253                           ;sendCharSerial4@charToSend stored from wreg
 11254   00489A  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11255   00489C                     l550:
 11256   00489C  010E               	movlb	14	; () banked
 11257   00489E  A537               	btfss	55,2,b	;volatile
 11258   0048A0  EF54  F024         	goto	u5211
 11259   0048A4  EF56  F024         	goto	u5210
 11260   0048A8                     u5211:
 11261   0048A8  EF4E  F024         	goto	l550
 11262   0048AC                     u5210:
 11263   0048AC                     
 11264                           ; BSR set to: 14
 11265                           ;serial.c: 37:     TX4REG = charToSend;
 11266   0048AC  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11267   0048B0                     
 11268                           ; BSR set to: 14
 11269   0048B0  0012               	return		;funcret
 11270   0048B2                     __end_of_sendCharSerial4:
 11271                           	callstack 0
 11272                           
 11273 ;; *************** function _color_read_Red *****************
 11274 ;; Defined at:
 11275 ;;		line 33 in file "color.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;		None
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  tmp             2   10[COMRAM] unsigned int 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  2    5[COMRAM] unsigned int 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11291 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11292 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11293 ;;Total ram usage:        7 bytes
 11294 ;; Hardware stack levels used: 1
 11295 ;; Hardware stack levels required when called: 3
 11296 ;; This function calls:
 11297 ;;		_I2C_2_Master_Read
 11298 ;;		_I2C_2_Master_RepStart
 11299 ;;		_I2C_2_Master_Start
 11300 ;;		_I2C_2_Master_Stop
 11301 ;;		_I2C_2_Master_Write
 11302 ;; This function is called by:
 11303 ;;		_reading_hue
 11304 ;;		_calibration_routine
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text64
 11309   0040B0                     __ptext64:
 11310                           	callstack 0
 11311   0040B0                     _color_read_Red:
 11312                           	callstack 26
 11313   0040B0                     
 11314                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11315   0040B0  EC64  F024         	call	_I2C_2_Master_Start	;wreg free
 11316                           
 11317                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11318   0040B4  0E52               	movlw	82
 11319   0040B6  EC59  F024         	call	_I2C_2_Master_Write
 11320                           
 11321                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11322   0040BA  0EB6               	movlw	182
 11323   0040BC  EC59  F024         	call	_I2C_2_Master_Write
 11324                           
 11325                           ;color.c: 39:  I2C_2_Master_RepStart();
 11326   0040C0  EC69  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11327                           
 11328                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11329   0040C4  0E53               	movlw	83
 11330   0040C6  EC59  F024         	call	_I2C_2_Master_Write
 11331                           
 11332                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11333   0040CA  0E01               	movlw	1
 11334   0040CC  EC7F  F021         	call	_I2C_2_Master_Read
 11335   0040D0  6E08               	movwf	??_color_read_Red^0,c
 11336   0040D2  5008               	movf	??_color_read_Red^0,w,c
 11337   0040D4  6E0B               	movwf	color_read_Red@tmp^0,c
 11338   0040D6  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11339                           
 11340                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11341   0040D8  0E00               	movlw	0
 11342   0040DA  EC7F  F021         	call	_I2C_2_Master_Read
 11343   0040DE  6E08               	movwf	??_color_read_Red^0,c
 11344   0040E0  5008               	movf	??_color_read_Red^0,w,c
 11345   0040E2  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11346   0040E4  6A09               	clrf	(??_color_read_Red+1)^0,c
 11347   0040E6  500B               	movf	color_read_Red@tmp^0,w,c
 11348   0040E8  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11349   0040EA  6E0B               	movwf	color_read_Red@tmp^0,c
 11350   0040EC  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11351   0040EE  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11352   0040F0  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11353                           
 11354                           ;color.c: 43:  I2C_2_Master_Stop();
 11355   0040F2  EC5F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11356   0040F6                     
 11357                           ;color.c: 44:  return tmp;
 11358   0040F6  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11359   0040FA  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11360   0040FE  0012               	return		;funcret
 11361   004100                     __end_of_color_read_Red:
 11362                           	callstack 0
 11363                           
 11364 ;; *************** function _color_read_Green *****************
 11365 ;; Defined at:
 11366 ;;		line 47 in file "color.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  tmp             2   10[COMRAM] unsigned int 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  2    5[COMRAM] unsigned int 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11382 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11383 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11384 ;;Total ram usage:        7 bytes
 11385 ;; Hardware stack levels used: 1
 11386 ;; Hardware stack levels required when called: 3
 11387 ;; This function calls:
 11388 ;;		_I2C_2_Master_Read
 11389 ;;		_I2C_2_Master_RepStart
 11390 ;;		_I2C_2_Master_Start
 11391 ;;		_I2C_2_Master_Stop
 11392 ;;		_I2C_2_Master_Write
 11393 ;; This function is called by:
 11394 ;;		_reading_hue
 11395 ;;		_calibration_routine
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           	psect	text65
 11400   004100                     __ptext65:
 11401                           	callstack 0
 11402   004100                     _color_read_Green:
 11403                           	callstack 26
 11404   004100                     
 11405                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11406   004100  EC64  F024         	call	_I2C_2_Master_Start	;wreg free
 11407                           
 11408                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11409   004104  0E52               	movlw	82
 11410   004106  EC59  F024         	call	_I2C_2_Master_Write
 11411                           
 11412                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11413   00410A  0EB8               	movlw	184
 11414   00410C  EC59  F024         	call	_I2C_2_Master_Write
 11415                           
 11416                           ;color.c: 53:  I2C_2_Master_RepStart();
 11417   004110  EC69  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11418                           
 11419                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11420   004114  0E53               	movlw	83
 11421   004116  EC59  F024         	call	_I2C_2_Master_Write
 11422                           
 11423                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11424   00411A  0E01               	movlw	1
 11425   00411C  EC7F  F021         	call	_I2C_2_Master_Read
 11426   004120  6E08               	movwf	??_color_read_Green^0,c
 11427   004122  5008               	movf	??_color_read_Green^0,w,c
 11428   004124  6E0B               	movwf	color_read_Green@tmp^0,c
 11429   004126  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11430                           
 11431                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11432   004128  0E00               	movlw	0
 11433   00412A  EC7F  F021         	call	_I2C_2_Master_Read
 11434   00412E  6E08               	movwf	??_color_read_Green^0,c
 11435   004130  5008               	movf	??_color_read_Green^0,w,c
 11436   004132  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11437   004134  6A09               	clrf	(??_color_read_Green+1)^0,c
 11438   004136  500B               	movf	color_read_Green@tmp^0,w,c
 11439   004138  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11440   00413A  6E0B               	movwf	color_read_Green@tmp^0,c
 11441   00413C  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11442   00413E  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11443   004140  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11444                           
 11445                           ;color.c: 57:  I2C_2_Master_Stop();
 11446   004142  EC5F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11447   004146                     
 11448                           ;color.c: 58:  return tmp;
 11449   004146  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11450   00414A  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11451   00414E  0012               	return		;funcret
 11452   004150                     __end_of_color_read_Green:
 11453                           	callstack 0
 11454                           
 11455 ;; *************** function _color_read_Clear *****************
 11456 ;; Defined at:
 11457 ;;		line 76 in file "color.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;		None
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  tmp             2   10[COMRAM] unsigned int 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  2    5[COMRAM] unsigned int 
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11474 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11475 ;;Total ram usage:        7 bytes
 11476 ;; Hardware stack levels used: 1
 11477 ;; Hardware stack levels required when called: 3
 11478 ;; This function calls:
 11479 ;;		_I2C_2_Master_Read
 11480 ;;		_I2C_2_Master_RepStart
 11481 ;;		_I2C_2_Master_Start
 11482 ;;		_I2C_2_Master_Stop
 11483 ;;		_I2C_2_Master_Write
 11484 ;; This function is called by:
 11485 ;;		_reading_hue
 11486 ;;		_calibration_routine
 11487 ;;		_main
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           	psect	text66
 11492   004150                     __ptext66:
 11493                           	callstack 0
 11494   004150                     _color_read_Clear:
 11495                           	callstack 26
 11496   004150                     
 11497                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11498   004150  EC64  F024         	call	_I2C_2_Master_Start	;wreg free
 11499                           
 11500                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11501   004154  0E52               	movlw	82
 11502   004156  EC59  F024         	call	_I2C_2_Master_Write
 11503                           
 11504                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11505   00415A  0EB4               	movlw	180
 11506   00415C  EC59  F024         	call	_I2C_2_Master_Write
 11507                           
 11508                           ;color.c: 82:  I2C_2_Master_RepStart();
 11509   004160  EC69  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11510                           
 11511                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11512   004164  0E53               	movlw	83
 11513   004166  EC59  F024         	call	_I2C_2_Master_Write
 11514                           
 11515                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11516   00416A  0E01               	movlw	1
 11517   00416C  EC7F  F021         	call	_I2C_2_Master_Read
 11518   004170  6E08               	movwf	??_color_read_Clear^0,c
 11519   004172  5008               	movf	??_color_read_Clear^0,w,c
 11520   004174  6E0B               	movwf	color_read_Clear@tmp^0,c
 11521   004176  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11522                           
 11523                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11524   004178  0E00               	movlw	0
 11525   00417A  EC7F  F021         	call	_I2C_2_Master_Read
 11526   00417E  6E08               	movwf	??_color_read_Clear^0,c
 11527   004180  5008               	movf	??_color_read_Clear^0,w,c
 11528   004182  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11529   004184  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11530   004186  500B               	movf	color_read_Clear@tmp^0,w,c
 11531   004188  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11532   00418A  6E0B               	movwf	color_read_Clear@tmp^0,c
 11533   00418C  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11534   00418E  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11535   004190  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11536                           
 11537                           ;color.c: 86:  I2C_2_Master_Stop();
 11538   004192  EC5F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11539   004196                     
 11540                           ;color.c: 87:  return tmp;
 11541   004196  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11542   00419A  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11543   00419E  0012               	return		;funcret
 11544   0041A0                     __end_of_color_read_Clear:
 11545                           	callstack 0
 11546                           
 11547 ;; *************** function _color_read_Blue *****************
 11548 ;; Defined at:
 11549 ;;		line 61 in file "color.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  tmp             2   10[COMRAM] unsigned int 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  2    5[COMRAM] unsigned int 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11566 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11567 ;;Total ram usage:        7 bytes
 11568 ;; Hardware stack levels used: 1
 11569 ;; Hardware stack levels required when called: 3
 11570 ;; This function calls:
 11571 ;;		_I2C_2_Master_Read
 11572 ;;		_I2C_2_Master_RepStart
 11573 ;;		_I2C_2_Master_Start
 11574 ;;		_I2C_2_Master_Stop
 11575 ;;		_I2C_2_Master_Write
 11576 ;; This function is called by:
 11577 ;;		_reading_hue
 11578 ;;		_calibration_routine
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           	psect	text67
 11583   0041A0                     __ptext67:
 11584                           	callstack 0
 11585   0041A0                     _color_read_Blue:
 11586                           	callstack 26
 11587   0041A0                     
 11588                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11589   0041A0  EC64  F024         	call	_I2C_2_Master_Start	;wreg free
 11590                           
 11591                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11592   0041A4  0E52               	movlw	82
 11593   0041A6  EC59  F024         	call	_I2C_2_Master_Write
 11594                           
 11595                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11596   0041AA  0EBA               	movlw	186
 11597   0041AC  EC59  F024         	call	_I2C_2_Master_Write
 11598                           
 11599                           ;color.c: 67:  I2C_2_Master_RepStart();
 11600   0041B0  EC69  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11601                           
 11602                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11603   0041B4  0E53               	movlw	83
 11604   0041B6  EC59  F024         	call	_I2C_2_Master_Write
 11605                           
 11606                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11607   0041BA  0E01               	movlw	1
 11608   0041BC  EC7F  F021         	call	_I2C_2_Master_Read
 11609   0041C0  6E08               	movwf	??_color_read_Blue^0,c
 11610   0041C2  5008               	movf	??_color_read_Blue^0,w,c
 11611   0041C4  6E0B               	movwf	color_read_Blue@tmp^0,c
 11612   0041C6  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11613                           
 11614                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11615   0041C8  0E00               	movlw	0
 11616   0041CA  EC7F  F021         	call	_I2C_2_Master_Read
 11617   0041CE  6E08               	movwf	??_color_read_Blue^0,c
 11618   0041D0  5008               	movf	??_color_read_Blue^0,w,c
 11619   0041D2  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11620   0041D4  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11621   0041D6  500B               	movf	color_read_Blue@tmp^0,w,c
 11622   0041D8  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11623   0041DA  6E0B               	movwf	color_read_Blue@tmp^0,c
 11624   0041DC  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11625   0041DE  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11626   0041E0  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11627                           
 11628                           ;color.c: 71:  I2C_2_Master_Stop();
 11629   0041E2  EC5F  F024         	call	_I2C_2_Master_Stop	;wreg free
 11630   0041E6                     
 11631                           ;color.c: 72:  return tmp;
 11632   0041E6  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11633   0041EA  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11634   0041EE  0012               	return		;funcret
 11635   0041F0                     __end_of_color_read_Blue:
 11636                           	callstack 0
 11637                           
 11638 ;; *************** function _I2C_2_Master_Write *****************
 11639 ;; Defined at:
 11640 ;;		line 45 in file "i2c.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  data_byte       1    wreg     unsigned char 
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;  data_byte       1    2[COMRAM] unsigned char 
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  1    wreg      void 
 11647 ;; Registers used:
 11648 ;;		wreg, status,2, status,0, cstack
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11658 ;;Total ram usage:        1 bytes
 11659 ;; Hardware stack levels used: 1
 11660 ;; Hardware stack levels required when called: 2
 11661 ;; This function calls:
 11662 ;;		_I2C_2_Master_Idle
 11663 ;; This function is called by:
 11664 ;;		_color_writetoaddr
 11665 ;;		_color_read_Red
 11666 ;;		_color_read_Green
 11667 ;;		_color_read_Blue
 11668 ;;		_color_read_Clear
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           	psect	text68
 11673   0048B2                     __ptext68:
 11674                           	callstack 0
 11675   0048B2                     _I2C_2_Master_Write:
 11676                           	callstack 26
 11677                           
 11678                           ;incstack = 0
 11679                           ;I2C_2_Master_Write@data_byte stored from wreg
 11680   0048B2  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11681   0048B4                     
 11682                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11683   0048B4  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11684   0048B8                     
 11685                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11686   0048B8  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11687   0048BC  0012               	return		;funcret
 11688   0048BE                     __end_of_I2C_2_Master_Write:
 11689                           	callstack 0
 11690                           
 11691 ;; *************** function _I2C_2_Master_Stop *****************
 11692 ;; Defined at:
 11693 ;;		line 39 in file "i2c.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;		None
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      void 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0, cstack
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11711 ;;Total ram usage:        0 bytes
 11712 ;; Hardware stack levels used: 1
 11713 ;; Hardware stack levels required when called: 2
 11714 ;; This function calls:
 11715 ;;		_I2C_2_Master_Idle
 11716 ;; This function is called by:
 11717 ;;		_color_writetoaddr
 11718 ;;		_color_read_Red
 11719 ;;		_color_read_Green
 11720 ;;		_color_read_Blue
 11721 ;;		_color_read_Clear
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           	psect	text69
 11726   0048BE                     __ptext69:
 11727                           	callstack 0
 11728   0048BE                     _I2C_2_Master_Stop:
 11729                           	callstack 26
 11730   0048BE                     
 11731                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11732   0048BE  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11733   0048C2                     
 11734                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11735   0048C2  010E               	movlb	14	; () banked
 11736   0048C4  85DA               	bsf	218,2,b	;volatile
 11737   0048C6                     
 11738                           ; BSR set to: 14
 11739   0048C6  0012               	return		;funcret
 11740   0048C8                     __end_of_I2C_2_Master_Stop:
 11741                           	callstack 0
 11742                           
 11743 ;; *************** function _I2C_2_Master_Start *****************
 11744 ;; Defined at:
 11745 ;;		line 27 in file "i2c.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      void 
 11752 ;; Registers used:
 11753 ;;		wreg, status,2, status,0, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11763 ;;Total ram usage:        0 bytes
 11764 ;; Hardware stack levels used: 1
 11765 ;; Hardware stack levels required when called: 2
 11766 ;; This function calls:
 11767 ;;		_I2C_2_Master_Idle
 11768 ;; This function is called by:
 11769 ;;		_color_writetoaddr
 11770 ;;		_color_read_Red
 11771 ;;		_color_read_Green
 11772 ;;		_color_read_Blue
 11773 ;;		_color_read_Clear
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text70
 11778   0048C8                     __ptext70:
 11779                           	callstack 0
 11780   0048C8                     _I2C_2_Master_Start:
 11781                           	callstack 26
 11782   0048C8                     
 11783                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11784   0048C8  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11785   0048CC                     
 11786                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11787   0048CC  010E               	movlb	14	; () banked
 11788   0048CE  81DA               	bsf	218,0,b	;volatile
 11789   0048D0                     
 11790                           ; BSR set to: 14
 11791   0048D0  0012               	return		;funcret
 11792   0048D2                     __end_of_I2C_2_Master_Start:
 11793                           	callstack 0
 11794                           
 11795 ;; *************** function _I2C_2_Master_RepStart *****************
 11796 ;; Defined at:
 11797 ;;		line 33 in file "i2c.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;		None
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;		None
 11802 ;; Return value:  Size  Location     Type
 11803 ;;                  1    wreg      void 
 11804 ;; Registers used:
 11805 ;;		wreg, status,2, status,0, cstack
 11806 ;; Tracked objects:
 11807 ;;		On entry : 0/0
 11808 ;;		On exit  : 0/0
 11809 ;;		Unchanged: 0/0
 11810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11815 ;;Total ram usage:        0 bytes
 11816 ;; Hardware stack levels used: 1
 11817 ;; Hardware stack levels required when called: 2
 11818 ;; This function calls:
 11819 ;;		_I2C_2_Master_Idle
 11820 ;; This function is called by:
 11821 ;;		_color_read_Red
 11822 ;;		_color_read_Green
 11823 ;;		_color_read_Blue
 11824 ;;		_color_read_Clear
 11825 ;; This function uses a non-reentrant model
 11826 ;;
 11827                           
 11828                           	psect	text71
 11829   0048D2                     __ptext71:
 11830                           	callstack 0
 11831   0048D2                     _I2C_2_Master_RepStart:
 11832                           	callstack 26
 11833   0048D2                     
 11834                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11835   0048D2  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11836   0048D6                     
 11837                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11838   0048D6  010E               	movlb	14	; () banked
 11839   0048D8  83DA               	bsf	218,1,b	;volatile
 11840   0048DA                     
 11841                           ; BSR set to: 14
 11842   0048DA  0012               	return		;funcret
 11843   0048DC                     __end_of_I2C_2_Master_RepStart:
 11844                           	callstack 0
 11845                           
 11846 ;; *************** function _I2C_2_Master_Read *****************
 11847 ;; Defined at:
 11848 ;;		line 51 in file "i2c.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;  ack             1    wreg     unsigned char 
 11851 ;; Auto vars:     Size  Location     Type
 11852 ;;  ack             1    3[COMRAM] unsigned char 
 11853 ;;  tmp             1    4[COMRAM] unsigned char 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      unsigned char 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11866 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11867 ;;Total ram usage:        3 bytes
 11868 ;; Hardware stack levels used: 1
 11869 ;; Hardware stack levels required when called: 2
 11870 ;; This function calls:
 11871 ;;		_I2C_2_Master_Idle
 11872 ;; This function is called by:
 11873 ;;		_color_read_Red
 11874 ;;		_color_read_Green
 11875 ;;		_color_read_Blue
 11876 ;;		_color_read_Clear
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text72
 11881   0042FE                     __ptext72:
 11882                           	callstack 0
 11883   0042FE                     _I2C_2_Master_Read:
 11884                           	callstack 26
 11885                           
 11886                           ; BSR set to: 14
 11887                           ;incstack = 0
 11888                           ;I2C_2_Master_Read@ack stored from wreg
 11889   0042FE  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11890   004300                     
 11891                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11892   004300  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11893   004304                     
 11894                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11895   004304  010E               	movlb	14	; () banked
 11896   004306  87DA               	bsf	218,3,b	;volatile
 11897                           
 11898                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11899   004308  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11900   00430C                     
 11901                           ;i2c.c: 57:   tmp = SSP2BUF;
 11902   00430C  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11903                           
 11904                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11905   004310  ECEB  F023         	call	_I2C_2_Master_Idle	;wreg free
 11906   004314                     
 11907                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11908   004314  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11909   004316  B4D8               	btfsc	status,2,c
 11910   004318  EF90  F021         	goto	u5621
 11911   00431C  EF94  F021         	goto	u5620
 11912   004320                     u5621:
 11913   004320  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11914   004322  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11915   004324  EF95  F021         	goto	u5638
 11916   004328                     u5620:
 11917   004328  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11918   00432A                     u5638:
 11919   00432A  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11920   00432C  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11921   00432E  010E               	movlb	14	; () banked
 11922   004330  51DA               	movf	218,w,b	;volatile
 11923   004332  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11924   004334  0BDF               	andlw	-33
 11925   004336  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11926   004338  6FDA               	movwf	218,b	;volatile
 11927   00433A                     
 11928                           ; BSR set to: 14
 11929                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11930   00433A  89DA               	bsf	218,4,b	;volatile
 11931   00433C                     
 11932                           ; BSR set to: 14
 11933                           ;i2c.c: 61:   return tmp;
 11934   00433C  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11935   00433E                     
 11936                           ; BSR set to: 14
 11937   00433E  0012               	return		;funcret
 11938   004340                     __end_of_I2C_2_Master_Read:
 11939                           	callstack 0
 11940                           
 11941 ;; *************** function _I2C_2_Master_Idle *****************
 11942 ;; Defined at:
 11943 ;;		line 22 in file "i2c.c"
 11944 ;; Parameters:    Size  Location     Type
 11945 ;;		None
 11946 ;; Auto vars:     Size  Location     Type
 11947 ;;		None
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  1    wreg      void 
 11950 ;; Registers used:
 11951 ;;		wreg, status,2, status,0
 11952 ;; Tracked objects:
 11953 ;;		On entry : 0/0
 11954 ;;		On exit  : 0/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11959 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11961 ;;Total ram usage:        1 bytes
 11962 ;; Hardware stack levels used: 1
 11963 ;; Hardware stack levels required when called: 1
 11964 ;; This function calls:
 11965 ;;		Nothing
 11966 ;; This function is called by:
 11967 ;;		_I2C_2_Master_Start
 11968 ;;		_I2C_2_Master_RepStart
 11969 ;;		_I2C_2_Master_Stop
 11970 ;;		_I2C_2_Master_Write
 11971 ;;		_I2C_2_Master_Read
 11972 ;; This function uses a non-reentrant model
 11973 ;;
 11974                           
 11975                           	psect	text73
 11976   0047D6                     __ptext73:
 11977                           	callstack 0
 11978   0047D6                     _I2C_2_Master_Idle:
 11979                           	callstack 26
 11980   0047D6                     l203:
 11981   0047D6  010E               	movlb	14	; () banked
 11982   0047D8  B5D8               	btfsc	216,2,b	;volatile
 11983   0047DA  EFF1  F023         	goto	u5121
 11984   0047DE  EFF3  F023         	goto	u5120
 11985   0047E2                     u5121:
 11986   0047E2  EFEB  F023         	goto	l203
 11987   0047E6                     u5120:
 11988   0047E6                     
 11989                           ; BSR set to: 14
 11990   0047E6  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11991   0047EA  0E1F               	movlw	31
 11992   0047EC  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11993   0047EE  A4D8               	btfss	status,2,c
 11994   0047F0  EFFC  F023         	goto	u5131
 11995   0047F4  EFFE  F023         	goto	u5130
 11996   0047F8                     u5131:
 11997   0047F8  EFEB  F023         	goto	l203
 11998   0047FC                     u5130:
 11999   0047FC                     
 12000                           ; BSR set to: 14
 12001   0047FC  0012               	return		;funcret
 12002   0047FE                     __end_of_I2C_2_Master_Idle:
 12003                           	callstack 0
 12004                           
 12005 ;; *************** function _ADC_init *****************
 12006 ;; Defined at:
 12007 ;;		line 9 in file "ADC.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;		None
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;		None
 12012 ;; Return value:  Size  Location     Type
 12013 ;;                  1    wreg      void 
 12014 ;; Registers used:
 12015 ;;		wreg, status,2
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12025 ;;Total ram usage:        0 bytes
 12026 ;; Hardware stack levels used: 1
 12027 ;; Hardware stack levels required when called: 1
 12028 ;; This function calls:
 12029 ;;		Nothing
 12030 ;; This function is called by:
 12031 ;;		_main
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text74
 12036   004880                     __ptext74:
 12037                           	callstack 0
 12038   004880                     _ADC_init:
 12039                           	callstack 29
 12040   004880                     
 12041                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12042   004880  8C86               	bsf	134,6,c	;volatile
 12043                           
 12044                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12045   004882  010E               	movlb	14	; () banked
 12046   004884  8DB4               	bsf	180,6,b	;volatile
 12047                           
 12048                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12049   004886  010F               	movlb	15	; () banked
 12050   004888  9958               	bcf	88,4,b	;volatile
 12051   00488A                     
 12052                           ; BSR set to: 15
 12053                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12054   00488A  0EFC               	movlw	-4
 12055   00488C  1758               	andwf	88,f,b	;volatile
 12056                           
 12057                           ;ADC.c: 17:     ADPCH=0b101110;
 12058   00488E  0E2E               	movlw	46
 12059   004890  6F5F               	movwf	95,b	;volatile
 12060   004892                     
 12061                           ; BSR set to: 15
 12062                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12063   004892  9460               	bcf	96,2,c	;volatile
 12064   004894                     
 12065                           ; BSR set to: 15
 12066                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12067   004894  8860               	bsf	96,4,c	;volatile
 12068   004896                     
 12069                           ; BSR set to: 15
 12070                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12071   004896  8E60               	bsf	96,7,c	;volatile
 12072   004898                     
 12073                           ; BSR set to: 15
 12074   004898  0012               	return		;funcret
 12075   00489A                     __end_of_ADC_init:
 12076                           	callstack 0
 12077                           
 12078 ;; *************** function _LowISR *****************
 12079 ;; Defined at:
 12080 ;;		line 42 in file "timers.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;		None
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;		None
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		None
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12097 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12098 ;;Total ram usage:        1 bytes
 12099 ;; Hardware stack levels used: 1
 12100 ;; This function calls:
 12101 ;;		Nothing
 12102 ;; This function is called by:
 12103 ;;		Interrupt level 1
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           	psect	intcodelo
 12108   000018                     __pintcodelo:
 12109                           	callstack 0
 12110   000018                     _LowISR:
 12111                           	callstack 20
 12112                           
 12113                           ; BSR set to: 15
 12114                           ;incstack = 0
 12115   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12116   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12117   00001E                     
 12118                           ;timers.c: 45:     if (PIR0bits.TMR0IF == 1) {
 12119   00001E  010E               	movlb	14	; () banked
 12120   000020  AB33               	btfss	51,5,b	;volatile
 12121   000022  EF15  F000         	goto	i1u235_21
 12122   000026  EF17  F000         	goto	i1u235_20
 12123   00002A                     i1u235_21:
 12124   00002A  EF19  F000         	goto	i1l650
 12125   00002E                     i1u235_20:
 12126   00002E                     
 12127                           ; BSR set to: 14
 12128                           ;timers.c: 46:         LATGbits.LATG1 = 1;
 12129   00002E  827F               	bsf	127,1,c	;volatile
 12130                           
 12131                           ;timers.c: 48:         PIR0bits.TMR0IF = 0;
 12132   000030  9B33               	bcf	51,5,b	;volatile
 12133   000032                     i1l650:
 12134                           
 12135                           ; BSR set to: 14
 12136   000032  C001  FFE0         	movff	??_LowISR,bsr
 12137   000036  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12138   000038  0010               	retfie	
 12139   00003A                     __end_of_LowISR:
 12140                           	callstack 0
 12141                           
 12142                           	psect	rparam
 12143   000000                     
 12144                           	psect	temp
 12145   00005B                     btemp:
 12146                           	callstack 0
 12147   00005B                     	ds	1
 12148   000000                     int$flags	set	btemp
 12149   000000                     wtemp8	set	btemp+1
 12150   000000                     ttemp5	set	btemp+1
 12151   000000                     ttemp6	set	btemp+4
 12152   000000                     ttemp7	set	btemp+8
 12153                           
 12154                           	psect	config
 12155                           
 12156                           ;Config register CONFIG1L @ 0x300000
 12157                           ;	External Oscillator mode Selection bits
 12158                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12159                           ;	Power-up default value for COSC bits
 12160                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12161   300000                     	org	3145728
 12162   300000  AA                 	db	170
 12163                           
 12164                           ;Config register CONFIG1H @ 0x300001
 12165                           ;	unspecified, using default values
 12166                           ;	Clock Out Enable bit
 12167                           ;	CLKOUTEN = 0x1, unprogrammed default
 12168                           ;	Clock Switch Enable bit
 12169                           ;	CSWEN = 0x1, unprogrammed default
 12170                           ;	Fail-Safe Clock Monitor Enable bit
 12171                           ;	FCMEN = 0x1, unprogrammed default
 12172   300001                     	org	3145729
 12173   300001  FF                 	db	255
 12174                           
 12175                           ;Config register CONFIG3L @ 0x300004
 12176                           ;	WDT Period Select bits
 12177                           ;	WDTCPS = 0x1F, unprogrammed default
 12178                           ;	WDT operating mode
 12179                           ;	WDTE = OFF, WDT Disabled
 12180   300004                     	org	3145732
 12181   300004  9F                 	db	159
 12182                           
 12183                           ;Config register CONFIG3H @ 0x300005
 12184                           ;	unspecified, using default values
 12185                           ;	WDT Window Select bits
 12186                           ;	WDTCWS = 0x7, unprogrammed default
 12187                           ;	WDT input clock selector
 12188                           ;	WDTCCS = 0x7, unprogrammed default
 12189   300005                     	org	3145733
 12190   300005  FF                 	db	255
 12191                           tosu	equ	0xFFF
 12192                           tosh	equ	0xFFE
 12193                           tosl	equ	0xFFD
 12194                           stkptr	equ	0xFFC
 12195                           pclatu	equ	0xFFB
 12196                           pclath	equ	0xFFA
 12197                           pcl	equ	0xFF9
 12198                           tblptru	equ	0xFF8
 12199                           tblptrh	equ	0xFF7
 12200                           tblptrl	equ	0xFF6
 12201                           tablat	equ	0xFF5
 12202                           prodh	equ	0xFF4
 12203                           prodl	equ	0xFF3
 12204                           indf0	equ	0xFEF
 12205                           postinc0	equ	0xFEE
 12206                           postdec0	equ	0xFED
 12207                           preinc0	equ	0xFEC
 12208                           plusw0	equ	0xFEB
 12209                           fsr0h	equ	0xFEA
 12210                           fsr0l	equ	0xFE9
 12211                           wreg	equ	0xFE8
 12212                           indf1	equ	0xFE7
 12213                           postinc1	equ	0xFE6
 12214                           postdec1	equ	0xFE5
 12215                           preinc1	equ	0xFE4
 12216                           plusw1	equ	0xFE3
 12217                           fsr1h	equ	0xFE2
 12218                           fsr1l	equ	0xFE1
 12219                           bsr	equ	0xFE0
 12220                           indf2	equ	0xFDF
 12221                           postinc2	equ	0xFDE
 12222                           postdec2	equ	0xFDD
 12223                           preinc2	equ	0xFDC
 12224                           plusw2	equ	0xFDB
 12225                           fsr2h	equ	0xFDA
 12226                           fsr2l	equ	0xFD9
 12227                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         330
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      90
    BANK0           160     76     144
    BANK1           256      0     162
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S2990$buffer	PTR unsigned char  size(2) Largest target is 0

    S2990$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _returnHome->_reverseTurn
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_stop
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _get16bitTMR0val->_logAction
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_send2USART
    _send2USART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_routine->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0  332254
                                             73 COMRAM    16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4   96908
                                             33 COMRAM    11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   65365
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6    6984
                                             22 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       2     0      2     720
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     158
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   23075
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   22171
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1496
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     697
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3053
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3623
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1784
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  158127
                                             32 COMRAM     4     0      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   21024
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   22644
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   10450
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   21204
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10270
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   22464
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   10270
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4117
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   22644
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   10450
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10630
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   10630
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4297
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11890
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5669
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4117
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3441
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1595
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   24112
                                             70 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11646
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10359
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1012
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5A       1       95.7%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F0      66        0.0%
DATA                 0      0     1F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 01:57:57 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 40B0  
                 ___fldiv@aexp 0033                   ___fldiv@bexp 0032             fullSpeedBack@power 0017  
                 ___fldiv@sign 002B                _color_read_Blue 41A0                             l81 4428  
                           l90 414E                             l84 4842                             l93 41EE  
                           l87 40FE                             l96 419E                             l99 3934  
                 ___awdiv@sign 0007                             bsr 0FE0            ___wmul@multiplicand 0004  
              moveLightBlue@mL 001D                moveLightBlue@mR 001E             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 4150  
             _color_read_Green 4100                            l110 2A7E                            l102 29B4  
                          l111 2AD0                            l120 2BD2                            l104 29C2  
                          l200 47D4                            l113 2ADE                            l105 2A10  
                          l114 2B38                            l130 11B8                            l203 47D6  
                          l107 2A1E                            l212 48DA                            l116 2B46  
                          l108 2A70                            l140 12AA                            l132 1212  
                          l221 433E                            l117 2BAC                            l206 47FC  
                          l150 15C2                            l142 12BA                            l134 1222  
                          l215 48C6                            l144 1314                            l128 11A8  
                          l209 48D0                            l218 48BC                            l154 163A  
                          l146 1324             logAction@path_step 0004                            l155 1656  
                          l323 1D6C                            l412 3DD0                            l173 298C  
                          l167 2984                            l432 3F5A                            l440 48DC  
                          l329 1F2A                            l347 4898                            l419 3338  
                          l427 3E5E                            l451 477A                            l604 487E  
                          l460 4652                            l445 3FD0                            l437 3EDC  
                          l541 4860                            l550 489C                            l454 46E8  
                          l710 43F4                            l463 47AA                            l472 4684  
                          l448 474A                            l704 31E4                            l553 48B0  
                          l457 45EE                            l481 4558                            l721 3446  
                          l730 4822                            l466 458A                            l490 44C2  
                          l475 46B6                            l707 43DE                            l484 45BC  
                          l644 43BC                            l469 4526                            l741 409E  
                          l478 44F4                            l742 40AE                            l718 384A  
                          l559 471A                            l487 4620                            l727 3448  
                          l809 3554                            l692 4278                            l961 39F8  
                          l698 31E4                            l974 3AA8                            l995 3718  
                          l989 3C00                            _abs 445E                            _pad 3CAC  
          convert_rgb2hue@cMax 003E                   ___awmod@sign 0007            convert_rgb2hue@diff 0094  
                          wreg 0FE8                   ___flmul@aexp 000F                   ___flmul@bexp 0014  
                 ___flmul@sign 000E                   ___flmul@temp 0019                   ___flmul@prod 0015  
                 ___fltol@exp1 003D                           l1000 375E                           l1027 365A  
                         ?_abs 0008                           l1300 4234                           l1221 403C  
                         l1312 2740                           l1314 25A0                           l1323 25E6  
                         l1228 4044                           l1260 17FA                           l1325 265E  
                         l1317 2564                           l1326 264C                           l1431 3D20  
                         l1351 2238                           l1408 445C                           l1344 2042  
                         l1505 437E                           l1433 3D40                           l1361 2368  
                         l1353 22B0                           l1354 229E                           l1258 1846  
                         l1275 1960                           l1267 1B16                           l1259 1834  
                         l1508 48DE                           l1428 3CE2                           l1436 2F6E  
                         l1348 23A6                           l1284 1A30                           l1453 3B4E  
                         l1285 1A1E                           l1472 2F0E                           l1392 2CC2  
                         l1449 3086                           l1457 3B56                           l1385 2C2A  
                         l1482 4478                           l1388 2D86                           l1485 4490  
                         l1478 42FC                           l1399 2D1E                           l6000 4728  
                         l1497 3CAA                           l6010 46B8                           l6002 473E  
                         l6012 46C4                           l6004 474C                           l6020 45E2  
                         l6100 24CA                           l6030 4788                           l6014 46DC  
                         l6006 4758                           l6022 4622                           l6110 2518  
                         l5400 3990                           l6032 479E                           l6008 476E  
                         l6024 462E                           l6016 45BE                           l6120 2562  
                         l6112 2528                           l6104 24DE                           l6200 1FE0  
                         l6040 43BE                           l7000 336A                           l5410 39CA  
                         l5402 3998                           l6026 4646                           l6018 45CA  
                         l6034 455A                           l6130 25B0                           l6122 256E  
                         l6114 2530                           l6106 24F8                           l6050 23C2  
                         l6210 200C                           l6202 1FE6                           l6042 43CA  
                         l7010 3426                           l7002 33D6                           l5420 39F0  
                         l5412 39CC                           l5404 39A6                           l5500 4036  
                         l6028 477C                           l6036 4566                           l6132 25C6  
                         l6140 25F6                           l6124 258C                           l6116 2540  
                         l6108 2508                           l6060 23F6                           l6052 23C4  
                         l6300 236C                           l6220 2062                           l6212 201C  
                         l6204 1FEC                           l6044 43DA                           l7004 33E6  
                         l7100 1BE6                           l7020 1B20                           l5414 39D2  
                         l5406 39AC                           l5430 3A14                           l5510 2F40  
                         l5502 2F10                           l6038 457E                           l6142 2604  
                         l6134 25CC                           l6126 258E                           l6118 2554  
                         l6070 2428                           l6054 23D4                           l6062 23FE  
                         l6046 23A8                           l6310 2396                           l6302 237C  
                         l6230 20A2                           l6214 202C                           l6206 1FFA  
                         l7014 343C                           l7006 33F6                           l7110 1CEE  
                         l7102 1C08                           l7030 1B3A                           l7022 1B24  
                         ?_pad 0010                           l5408 39C2                           l5416 39D8  
                         l5440 3A48                           l5432 3A18                           l5424 39FA  
                         l5360 3C48                           l5352 3C02                           l5520 2F76  
                         l5512 2F46                           l5504 2F14                           l5600 2DE8  
                         l6152 266E                           l6160 26B6                           l6144 2608  
                         l6136 25D6                           l6128 259E                           l6080 245C  
                         l6072 242A                           l6064 240E                           l6056 23E4  
                         l6048 23B4                           l6320 3B58                           l6304 238A  
                         l6240 20EC                           l6232 20AE                           l6224 2076  
                         l6216 2032                           l6208 1FFC                           l7008 3416  
                         l7120 1D8E                           l7104 1C2A                           l7040 1B5A  
                         l7032 1B3E                           l7024 1B24                           l7016 1B18  
                         l5418 39E8                           l5450 3A82                           l5442 3A50  
                         l5434 3A26                           l5426 39FE                           l5362 3C7A  
                         l5354 3C12                           l5370 435A                           l5530 2FC2  
                         l5522 2F80                           l5514 2F56                           l5506 2F28  
                         l5610 2E5C                           l5602 2E1E                           l6170 2720  
                         l6162 26D0                           l6154 267A                           l6146 2616  
                         l6138 25E4                           l6090 24A2                           l6074 243A  
                         l6082 2464                           l6066 2414                           l6058 23F4  
                         l6330 3BF8                           l6322 3B86                           l6306 238C  
                         l6250 213E                           l6242 20F8                           l6234 20C6  
                         l6226 2082                           l6218 2052                           l6314 41F0  
                         l6410 2C50                           l6402 2BD6                           l7130 1DEA  
                         l7122 1DA6                           l7114 1D56                           l7106 1C8E  
                         l7050 1B7E                           l7042 1B5E                           l7034 1B46  
                         l7026 1B30                           l7018 1B1C                           l5380 3936  
                         l5444 3A5E                           l5452 3A88                           l5436 3A2E  
                         l5428 3A0C                           l5356 3C22                           l5372 435E  
                         l5460 3CAC                           l5540 3034                           l5524 2F86  
                         l5532 2FDE                           l5516 2F62                           l5508 2F30  
                         l5620 2EC8                           l5612 2E66                           l5604 2E2E  
                         l7204 2E10                           l5700 3EA2                           l6172 272E  
                         l6164 26E6                           l6156 2688                           l6148 2644  
                         l6092 24A6                           l6084 2474                           l6076 244A  
                         l6068 241A                           l6332 3BFE                           l6324 3B96  
                         l6340 369A                           l6308 2392                           l6260 21BC  
                         l6252 214E                           l6244 2108                           l6236 20D2  
                         l6228 208C                           l6316 4200                           l6420 2CAA  
                         l6404 2BE6                           l6500 1008                           l7140 1EB8  
                         l7132 1DFA                           l7124 1DB2                           l7116 1D6E  
                         l7108 1C9E                           l7060 1B88                           l7052 1B80  
                         l7044 1B62                           l7036 1B4E                           l7028 1B36  
                         l5390 3962                           l5382 393A                           l5454 3A98  
                         l5446 3A74                           l5438 3A40                           l5358 3C2C  
                         l5366 4340                           l5470 3CFE                           l5462 3CBC  
                         l5534 2FF8                           l5542 3044                           l5526 2FB8  
                         l5518 2F6A                           l5374 47FE                           l5614 2E86  
                         l5606 2E42                           l5710 3F5C                           l5702 3EAA  
                         l6174 2734                           l6166 2700                           l6158 26B2  
                         l6086 248A                           l6078 245A                           l6326 3BC4  
                         l6350 3706                           l6342 36C8                           l6270 2236  
                         l6262 21F2                           l6254 216A                           l6246 2114  
                         l6238 20DE                           l6190 1F9A                           l6430 2D0E  
                         l6422 2CAC                           l6414 2C64                           l6406 2BF4  
                         l6510 10FC                           l6502 103C                           l7150 1F14  
                         l7142 1EC4                           l7134 1E1C                           l7126 1DC8  
                         l7118 1D7A                           l7070 1B94                           l7062 1B8A  
                         l7054 1B82                           l7046 1B7A                           l7038 1B56  
                         l5640 47E6                           l5392 396A                           l5384 3948  
                         l5456 3AA0                           l5448 3A7C                           l5368 434C  
                         l5472 3D02                           l5464 3CCC                           l5544 3054  
                         l5536 300A                           l5528 2FBC                           l5376 481A  
                         l5560 3AFC                           l5552 3AAA                           l5624 2EDC  
                         l5616 2EA6                           l5608 2E52                           l5480 3FD2  
                         l5720 3F90                           l5712 3F74                           l5704 3EB2  
                         l6600 4528                           l6176 2736                           l6168 271C  
                         l6088 249A                           l6096 24BA                           l6328 3BD4  
                         l6352 3756                           l6344 36D8                           l6336 365C  
                         l6280 2296                           l6272 2248                           l6264 2200  
                         l6256 2176                           l6248 2124                           l6192 1FAA  
                         l6184 1F7E                           l5800 1780                           l6360 356C  
                         l6440 2D66                           l6432 2D2C                           l6424 2CB8  
                         l6416 2C6C                           l6408 2C3A                           l6520 11FE  
                         l6512 1130                           l6504 1070                           l7160 1F5A  
                         l7152 1F38                           l7144 1EDC                           l7136 1E3E  
                         l7128 1DD4                           l7080 1B9E                           l7072 1B96  
                         l7064 1B8C                           l7056 1B84                           l7048 1B7C  
                         l5730 489C                           l5394 396E                           l5386 3950  
                         l5474 3D30                           l5466 3CDA                           l5546 305A  
                         l5538 301A                           l5562 3B1C                           l5554 3AB2  
                         l5618 2EBE                           l6450 47B6                           l5490 400A  
                         l5482 3FDA                           l5570 324E                           l5722 3F98  
                         l5650 3E0A                           l5642 3DD2                           l5706 3EC2  
                         l6602 4534                           l6098 24CA                           l6354 375C  
                         l6346 36E6                           l6338 368A                           l6290 2304  
                         l6274 2256                           l6266 221E                           l6258 2192  
                         l6194 1FBA                           l6186 1F8A                           l5810 1794  
                         l5802 1784                           l6370 35BC                           l6442 2D74  
                         l6434 2D2E                           l6426 2CF4                           l6418 2C78  
                         l6530 1300                           l6522 1232                           l6514 1162  
                         l6506 1094                           l6610 44B6                           l7154 1F38  
                         l7146 1EE8                           l7138 1EA2                           l7090 1BC8  
                         l7082 1BB4                           l7074 1B98                           l7066 1B90  
                         l7058 1B86                           l5732 48AC                           l5396 3976  
                         l5388 3954                           l5476 445E                           l5468 3CEE  
                         l5548 306A                           l5556 3AD8                           l5564 3B24  
                         l5628 2EE8                           l6452 47BC                           l6460 4826  
                         l5492 4010                           l5484 3FEC                           l5580 32FC  
                         l5572 3260                           l5724 3FA0                           l5660 3E48  
                         l5652 3E12                           l5644 3DD6                           l5708 3EC6  
                         l6604 454C                           l6348 36F8                           l6284 22C0  
                         l6292 2308                           l6276 225A                           l6268 2228  
                         l6196 1FCA                           l6188 1F98                           l5900 1A16  
                         l5820 17F2                           l5804 1788                           l5812 1798  
                         l5740 1674                           l6380 35E6                           l6372 35C0  
                         l6364 3580                           l6444 2D76                           l6436 2D32  
                         l6428 2D00                           l6540 143E                           l6532 1334  
                         l6524 1264                           l6516 1194                           l6508 10C8  
                         l6700 3492                           l6620 30CC                           l6612 3088  
                         l7156 1F44                           l7148 1EFE                           l7092 1BCA  
                         l7084 1BB6                           l7076 1B9A                           l7068 1B92  
                         l5638 47D6                           l6470 4146                           l6462 40B0  
                         l5398 3988                           l5478 446C                           l5558 3AE0  
                         l5590 2DC8                           l5582 2D88                           l6454 47BE  
                         l5494 4026                           l5486 3FF4                           l5574 3264  
                         l5566 31E6                           l5726 3FB0                           l5718 3F7C  
                         l5654 3E1A                           l5646 3DEC                           l5662 3EDE  
                         l6294 2322                           l6286 22CC                           l6278 2268  
                         l6198 1FD0                           l5910 1A94                           l5830 1828  
                         l5822 1808                           l5814 179C                           l5806 178C  
                         l5742 1684                           l5750 16AE                           l5734 1658  
                         l6390 360E                           l6382 35F0                           l6374 35CE  
                         l6366 35AA                           l6358 3556                           l6438 2D56  
                         l6550 15F6                           l6542 1470                           l6534 139A  
                         l6526 1296                           l6518 11CC                           l6710 34DA  
                         l6702 34A2                           l6606 4492                           l6630 3124  
                         l6622 30DE                           l6614 3098                           l7158 1F58  
                         l7094 1BCC                           l7086 1BBE                           l7078 1B9C  
                         l6480 4150                           l6464 40F6                           l5592 2DD0  
                         l5584 2DAE                           l6800 2A50                           l6456 47C0  
                         l6448 47AC                           l5496 402E                           l5488 3FFC  
                         l5576 32A2                           l5568 3200                           l5728 3FB4  
                         l5656 3E22                           l5648 3DF4                           l5680 3F30  
                         l5664 3EF8                           l6560 44F6                           l6296 2336  
                         l6288 22DA                           l5920 1ADA                           l5904 1A40  
                         l5912 1A96                           l5840 1878                           l5832 1832  
                         l5824 1814                           l5816 17C6                           l5808 1790  
                         l5760 16DE                           l5752 16BE                           l5744 1694  
                         l5736 1664                           l6392 361A                           l6384 35FA  
                         l6368 35AC                           l6552 1606                           l6544 1500  
                         l6536 13B0                           l6528 12CE                           l6720 351E  
                         l6712 34E4                           l6704 34B8                           l6608 449E  
                         l6640 3176                           l6632 3130                           l6624 30EA  
                         l6616 30A4                           l7096 1BD8                           l7088 1BC6  
                         l6474 41A0                           l6482 4196                           l5594 2DD4  
                         l5586 2DB6                           l6810 2AB0                           l6802 2A68  
                         l6458 47C2                           l6730 43F6                           l5498 4030  
                         l5578 32BC                           l5658 3E32                           l5682 3F40  
                         l5674 3F10                           l5666 3F00                           l6570 4654  
                         l5690 3E82                           l6562 4502                           l6298 2350  
                         l5930 1B04                           l5922 1AE8                           l5914 1AA6  
                         l5906 1A4C                           l5850 18B4                           l5842 1888  
                         l5834 1854                           l5826 1818                           l5818 17E2  
                         l5770 171E                           l5762 16EC                           l5754 16C4  
                         l5746 16A4                           l5738 1672                           l6394 362A  
                         l6546 1532                           l6538 13E2                           l6490 0F08  
                         l6714 3502                           l6706 34C0                           l6722 3524  
                         l6650 31D4                           l6642 318E                           l6634 3148  
                         l6626 3102                           l6618 30BC                           l7098 1BDA  
                         l6476 41E6                           l6468 4100                           l5596 2DE0  
                         l5588 2DC4                           l5940 42D4                           l6556 4862  
                         l6820 2B14                           l6812 2AC8                           l6804 2A80  
                         l6732 43FA                           l5684 3F44                           l5676 3F20  
                         l5668 3F08                           l6580 46AA                           l6572 4660  
                         l5692 3E8A                           l6564 451A                           l6900 28C6  
                         l5932 1B06                           l5924 1AEE                           l5916 1AB6  
                         l5908 1A5A                           l5860 18FA                           l5852 18C2  
                         l5844 1896                           l5836 1864                           l5828 1826  
                         l5780 1758                           l5772 1720                           l5764 16EE  
                         l5756 16D6                           l5748 16A6                           l6396 363A  
                         l6548 15C2                           l6492 0F38                           l6740 384C  
                         l6724 3534                           l6716 3512                           l6708 34CC  
                         l6660 37B8                           l6652 3760                           l6644 319E  
                         l6636 3158                           l6628 3112                           l5950 48B4  
                         l5942 42F4                           l6558 4876                           l6830 2B64  
                         l6822 2B16                           l6814 2AE4                           l6806 2A98  
                         l6734 4404                           l6566 4238                           l5678 3F28  
                         l6574 4678                           l6582 45F0                           l5686 3E60  
                         l6590 44D0                           l6910 290C                           l6902 28DC  
                         l5926 1AF0                           l5918 1AD6                           l5870 1976  
                         l5862 192E                           l5854 18C4                           l5846 18A4  
                         l5790 176C                           l5782 175C                           l5766 16FE  
                         l5774 1728                           l5758 16D8                           l6398 364A  
                         l6494 0F6C                           l6486 0EC6                           l6750 3880  
                         l6742 3852                           l6726 3544                           l6718 3514  
                         l6670 381C                           l6662 37DA                           l6654 3768  
                         l6646 31B0                           l6638 316A                           l5960 48D6  
                         l5952 48B8                           l5936 42BC                           l6840 2B98  
                         l6832 2B7A                           l6824 2B18                           l6816 2AFC  
                         l6808 2AAE                           l6736 4414                           l6568 424E  
                         l6576 4686                           l6584 45FC                           l5688 3E7A  
                         l6592 44E8                           l6920 2948                           l6912 2918  
                         l5928 1AF6                           l5880 19B2                           l5872 1986  
                         l5864 1930                           l5856 18CE                           l5848 18B0  
                         l5792 1770                           l5784 1760                           l5776 1738  
                         l5768 170E                           l6496 0FA0                           l6488 0ED8  
                         l6760 38B6                           l6752 3882                           l6744 386A  
                         l6680 4064                           l6672 3828                           l6664 37E6  
                         l6656 378A                           l6648 31BC                           l5970 433A  
                         l5962 4300                           l5946 48C8                           l5954 48BE  
                         l5938 42C4                           l6842 2BA0                           l6834 2B7C  
                         l6826 2B30                           l6818 2B12                           l6738 441E  
                         l6578 4692                           l6586 4614                           l5698 3E92  
                         l6594 458C                           l6922 295E                           l6914 292E  
                         l6906 28E0                           l6930 2984                           l6850 276E  
                         l5890 19DE                           l5882 19B4                           l5866 1940  
                         l5858 18D4                           l5794 1774                           l5786 1764  
                         l5778 174A                           l6498 0FD4                           l6770 3902  
                         l6762 38CE                           l6754 38B0                           l6746 387C  
                         l6690 345C                           l6682 4074                           l6674 3834  
                         l6666 3808                           l6658 3796                           l6940 4894  
                         l5972 433C                           l5964 4304                           l5948 48CC  
                         l5956 48C2                           l5980 443A                           l6844 2BBA  
                         l6836 2B7E                           l6828 2B4C                           l6780 2994  
                         l6596 4598                           l6588 44C4                           l6924 296A  
                         l6908 28F6                           l6860 27AE                           l6852 277A  
                         l5884 19C2                           l5876 199A                           l5892 19E0  
                         l5868 1950                           l5796 1778                           l5788 1768  
                         l6772 3918                           l6764 38E4                           l6756 38B2  
                         l6748 387E                           l6692 346C                           l6684 407E  
                         l6676 4046                           l6668 3810                           l6942 4896  
                         l6934 4880                           l5966 430C                           l5958 48D2  
                         l5990 46EE                           l5982 4442                           l6838 2B80  
                         l6790 29F0                           l6782 29AC                           l6598 45B0  
                         l6926 2980                           l6918 2932                           l6862 27C4  
                         l6870 27EA                           l6854 2790                           l6846 2742  
                         l6950 485A                           l5886 19CA                           l5878 19A4  
                         l5894 19EE                           l5798 177C                           l6774 392C  
                         l6766 38E6                           l6758 38B4                           l6694 3470  
                         l6686 344A                           l6678 4056                           l6936 488A  
                         l5968 4314                           l5992 46FA                           l5984 4452  
                         l5976 442A                           l6792 2A08                           l6784 29C4  
                         l6872 2800                           l6864 27D0                           l6856 2790  
                         l6848 2758                           l6960 3D78                           l6952 485C  
                         l6944 4844                           l5896 19F2                           l5888 19CE  
                         l6768 38E8                           l6696 347E                           l6688 344E  
                         l6938 4892                           l5994 46FC                           l5978 4432  
                         l6794 2A20                           l6786 29DC                           l6778 298E  
                         l6890 288A                           l6874 2816                           l6882 283C  
                         l6866 27E6                           l6858 2798                           l6970 3DB6  
                         l6962 3D7C                           l6954 485E                           l6946 484E  
                         l5898 1A00                           l6698 348E                           l5996 4704  
                         l5988 46EA                           l6796 2A38                           l6788 29EE  
                         l6884 2852                           l6876 2822                           l6980 4380  
                         l6972 3DB8                           l6964 3DA0                           l6956 3D42  
                         l6948 4850                           l6798 2A4E                           l5998 471C  
                         l6886 2868                           l6894 288E                           l6878 2838  
                         l6982 4398                           l6974 3DC2                           l6966 3DAA  
                         l6958 3D52                           l6896 28A4                           l6888 2874  
                         l6984 439A                           l6976 3DC4                           l6968 3DAC  
                         l6992 333A                           l6898 28BA                           l6986 43B0  
                         l6978 3DCE                           l6994 3340                           l6988 43B4  
                         l6996 334C                           l6998 335E                           STR_1 0E8A  
                         STR_2 0EC3                           STR_3 0E01                           STR_4 0EC3  
                         STR_5 0E3B                           STR_6 0EC3                           STR_7 0E56  
                         STR_8 0EC3                           STR_9 0E1E                   _BAUD4CONbits 0EE9  
                         u5000 3034                           u5001 3030                           u5010 3044  
                         _T2PR 0FBC                           u5011 3040                           u5020 3054  
                         u5100 2E86                           u5021 3050                           u5101 2E82  
                         u5030 3AD8                           u5110 2EA6                           u5031 3AD4  
                         u5111 2EA2                           u5120 47E6                           u5040 3B4E  
                         u5200 3FD0                           u6000 2268                           u5121 47E2  
                         u5041 3B4A                           u5201 3FCC                           u6001 2264  
                         u5130 47FC                           u5210 48AC                           u5050 3200  
                         u6010 2296                           u5131 47F8                           u5211 48A8  
                         u5051 31FC                           u6011 2292                           u5060 32BC  
                         u5140 3DEC                           u6100 3BF8                           u6020 22AC  
                         u5300 1758                           u5220 1672                           u5061 32B8  
                         u5141 3DE8                           u6101 3BF4                           u6021 22A8  
                         u5301 1754                           u5221 166E                           u5070 2DAE  
                         u5150 3E0A                           u6110 368A                           u6030 22C0  
                         u5310 17C6                           u5230 1684                           u5071 2DAA  
                         u5151 3E06                           u6111 3686                           u6031 22BC  
                         u5311 17C2                           u5231 1680                           u5080 2E2E  
                         u5160 3E48                           u6120 36C8                           u6040 22DA  
                         u5400 18A4                           u5320 17DE                           u5240 1694  
                         u6200 360A                           u5081 2E2A                           u5161 3E44  
                         u6121 36C4                           u6041 22D6                           u5401 18A0  
                         u5321 17D8                           u5241 1690                           u6201 3606  
                         u5090 2E52                           u5170 3E5E                           u6130 36E6  
                         u6050 2322                           u5410 18C2                           u5330 17E0  
                         u5250 16D6                           u6210 362A                           u5091 2E4E  
                         u5171 3E5A                           u6131 36E2                           u6051 231E  
                         u5411 18BE                           u5251 16D2                           u6211 3626  
                         u4700 3C48                           u5180 3F5A                           u6140 3706  
                         u6060 2350                           u5500 1A00                           u5420 18FA  
                         u5340 1808                           u5260 16EC                           u6220 363A  
                         u6300 2D2C                           u4701 3C44                           u5181 3F56  
                         u6141 3702                           u6061 234C                           u5501 19FC  
                         u5421 18F6                           u5341 1804                           u5261 16E8  
                         u6221 3636                           u6301 2D28                           u4710 3C7A  
                         u5190 3EDC                           u6150 3756                           u6070 238A  
                         u5510 1A16                           u5430 1940                           u5350 1826  
                         u5270 16FE                           u6310 2D66                           u6230 2BE6  
                         u4711 3C76                           u5191 3ED8                           u6151 3752  
                         u6071 2386                           u5511 1A12                           u5431 193C  
                         u5351 1822                           u5271 16FA                           u6311 2D62  
                         u6231 2BE2                           u7007 3180                           u4800 3A26  
                         u4720 437E                           u6080 3B86                           u5600 1B04  
                         u5520 1A2C                           u5440 1976                           u5360 1846  
                         u5280 170E                           u6160 356C                           u6320 2D74  
                         u6240 2BF4                           u6400 13E2                           u4801 3A22  
                         u4721 437A                           u6081 3B82                           u5601 1B00  
                         u5521 1A28                           u5441 1972                           u5361 1842  
                         u5281 170A                           u6161 3568                           u6321 2D70  
                         u6241 2BF0                           u6401 13DE                           u7017 31C6  
                         u4730 3948                           u4810 3A40                           u5610 42F4  
                         u6090 3BC4                           u5530 1A40                           u5450 1986  
                         u5370 1854                           u5290 174A                           u6170 35A0  
                         u6250 2C50                           u6410 1470                           u6330 1162  
                         u4731 3944                           u4811 3A3C                           u5611 42F0  
                         u7107 450C                           u6091 3BC0                           u5531 1A3C  
                         u5451 1982                           u5371 1850                           u5291 1746  
                         u6251 2C4C                           u6411 146C                           u6331 115E  
                         u7027 383E                           u5620 4328                           u4740 3962  
                         u4820 3A5E                           u4900 3FEC                           u5700 243A  
                         u5540 1A5A                           u5460 19B2                           u5380 1864  
                         u6180 35CE                           u6260 2CA6                           u6420 1532  
                         u6340 1194                           u6500 378A                           u5621 4320  
                         u4741 395E                           u4821 3A5A                           u4901 3FE8  
                         u7117 4732                           u5701 2436                           u5541 1A56  
                         u5461 19AE                           u5381 1860                           u6181 35CA  
                         u6261 2CA2                           u6421 152E                           u6341 1190  
                         u7037 43D0                           u6501 3786                           u4750 3988  
                         u4830 3A74                           u4910 400A                           u5710 244A  
                         u5550 1A94                           u5470 19C2                           u5390 1896  
                         u6190 35E2                           u6270 2CF0                           u6430 1606  
                         u6350 11FE                           u6510 37B8                           u4751 3984  
                         u4831 3A70                           u4911 4006                           u7207 4762  
                         u7127 453E                           u5711 2446                           u5551 1A90  
                         u5471 19BE                           u5391 1892                           u6191 35DE  
                         u6175 3596                           u6271 2CEC                           u6431 1602  
                         u6351 11FA                           u7047 44A8                           u6511 37B4  
                         u5640 471A                           u4760 39A6                           u4840 3A98  
                         u4680 3C12                           u6440 424E                           u4920 4026  
                         u5800 2604                           u5720 248A                           u5560 1AA6  
                         u5480 19DE                           u6280 2D0E                           u6360 1264  
                         u6600 3502                           u6520 37DA                           u5641 4716  
                         u4761 39A2                           u4841 3A94                           u4681 3C0E  
                         u6441 424A                           u4921 4022                           u7217 469C  
                         u7137 4570                           u5801 2600                           u5721 2486  
                         u5561 1AA2                           u5481 19DA                           u6281 2D0A  
                         u6361 1260                           u7057 385C                           u6601 34FE  
                         u6521 37D6                           u4770 39C2                           u4690 3C22  
                         u4850 3CBC                           u4930 2F24                           u5810 2616  
                         u5730 24CA                           u5570 1AB6                           u5490 19EE  
                         u6290 2D1E                           u6370 1296                           u6610 3534  
                         u5650 43F4                           u6530 3808                           u6450 3098  
                         u4771 39BE                           u4691 3C1E                           u4851 3CB8  
                         u4931 2F1E                           u7307 2A8A                           u7227 46CE  
                         u7147 45A2                           u5811 2612                           u5731 24C6  
                         u5571 1AB2                           u5491 19EA                           u6291 2D1A  
                         u6371 1292                           u7067 388C                           u6611 3530  
                         u5651 43F0                           u6531 3804                           u6451 3094  
                         u4780 39E8                           u4860 3CDA                           u4940 2F26  
                         u6620 29C2                           u6700 27AE                           u5820 2644  
                         u5740 2540                           u5660 23C2                           u5900 1FAA  
                         u5580 1AD6                           u6380 1300                           u6540 4064  
                         u6460 30DE                           u4781 39E4                           u4861 3CD6  
                         u7317 2AEE                           u6621 29BE                           u7237 3F36  
                         u7157 45D4                           u6701 27AA                           u5821 2640  
                         u5741 253C                           u5661 23BE                           u5901 1FA6  
                         u5581 1AD2                           u6381 12FC                           u7077 38C0  
                         u6541 4060                           u6461 30DA                           u5638 432A  
                         u4790 3A0C                           u4870 3D20                           u4950 2F40  
                         u6630 2A1E                           u6710 27C4                           u5830 265A  
                         u5750 2562                           u5670 23D4                           u5910 1FBA  
                         u5590 1AE8                           u6390 139A                           u6550 409E  
                         u6470 3124                           u4791 3A08                           u4871 3D1C  
                         u4951 2F3C                           u7327 2B56                           u6631 2A1A  
                         u7247 4792                           u7167 3EB8                           u6711 27C0  
                         u5831 2656                           u5751 255E                           u5671 23D0  
                         u5911 1FB6                           u5591 1AE4                           u6391 1396  
                         u7087 38F4                           u6551 409A                           u6471 3120  
                         u4880 3D30                           u4960 2F56                           u6640 2A7E  
                         u6800 2948                           u6720 2800                           u5840 266E  
                         u5760 258C                           u5680 23E4                           u5920 1FFA  
                         u6560 345C                           u6480 316A                           u4881 3D2C  
                         u4961 2F52                           u7337 2BC4                           u6641 2A7A  
                         u7257 3E28                           u7177 4606                           u7097 44DA  
                         u6801 2944                           u6721 27FC                           u5841 266A  
                         u5761 2588                           u5681 23E0                           u5921 1FF6  
                         u6561 3458                           u6481 3166                           u4890 446C  
                         u4970 2FF8                           u6650 2ADE                           u6810 295E  
                         u6730 2816                           u5850 2688                           u5770 25B0  
                         u5690 2428                           u5930 200C                           u6570 347E  
                         u6490 31B0                           u7347 46FE                           u4891 4468  
                         u4971 2FF4                           u6651 2ADA                           u7267 3FA6  
                         u7187 4638                           u6811 295A                           u6731 2812  
                         u5851 2684                           u5771 25AC                           u5691 2424  
                         u5931 2008                           u6571 347A                           u6491 31AC  
                         u4980 300A                           u6660 2B46                           u6740 2852  
                         u5860 26D0                           u5780 25C6                           u5940 201C  
                         u6580 34B8                           u6820 335E                           u6900 1F38  
                         u4981 3006                           u6661 2B42                           u7277 440A  
                         u7197 466A                           u6741 284E                           u5861 26CC  
                         u5781 25C2                           u5941 2018                           u6581 34B4  
                         u6821 335A                           u6901 1F34                           u4990 301A  
                         u6670 2BBA                           u6750 2868                           u5870 2700  
                         u5790 25E4                           u5950 2052                           u6590 34DA  
                         u6830 33F6                           u4991 3016                           u6671 2BB6  
                         u7287 29CE                           u6751 2864                           u5871 26FC  
                         u5791 25E0                           u5951 204E                           u6591 34D6  
                         u6831 33F2                           u6760 28A4                           u6680 2758  
                         u5880 272E                           u5960 2062                           u6840 3438  
                         u7297 2A2A                           u6761 28A0                           u6681 2754  
                         u5881 272A                           u5961 205E                           u6841 3434  
                         u6770 28BA                           u6690 276E                           u5970 21DC  
                         u5890 1F98                           u6850 1D6C                           u6771 28B6  
                         u6691 276A                           u5891 1F94                           u6851 1D68  
                         u6780 28F6                           u5980 2236                           u6860 1EB8  
                         u6781 28F2                           u5981 2232                           u6861 1EB4  
                         u6790 290C                           u5990 2256                           u6870 1EFE  
                         u6791 2908                           u5991 2252                           u5975 21D2  
                         u6871 1EFA                           u6927 1BA8                           u6880 1F14  
                         u6881 1F10                           u6937 1D98                           u6890 1F2A  
                         u6891 1F26                           u6947 1DBC                           u6957 1DDE  
                         u6967 1ECE                           u6977 30AE                           u6987 30F4  
                         u6997 313A                           abs@a 0008                           _dbuf 0182  
                         _main 1B18                           _dtoa 2F10           convert_rgb2hue@cCurr 003F  
                         _prec 00C2                           _time 0200                           pad@i 0016  
                         pad@p 0013                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 005B                           _stop 3DD2                           prodh 0FF4  
                         prodl 0FF3                           start 003A               __end_of_ADC_init 489A  
              ___fldiv@new_exp 002C         __end_of_color_read_Red 4100                   ___param_bank 0000  
               reading_hue@hue 0046                          ??_abs 000A                          ??_pad 0015  
                ___fltol@sign1 003C                __end_of___aldiv 3556                __end_of___fladd 1B18  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 2742                __end_of___awdiv 39FA                          STR_10 0EC3  
                        STR_11 0E71                          STR_12 0EC3                          STR_13 0EA2  
                        STR_14 0EB7                __end_of___awmod 3AAA                __end_of___flmul 23A8  
              __end_of___flsub 4236                __end_of___fltol 365C                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 4046                          i1l650 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3            ___lmul@multiplicand 0006  
              __end_of_left135 4654        __end_of_sendCharSerial4 48B2     __end_of_I2C_2_Master_Start 48D2  
   __end_of_I2C_2_Master_Write 48BE                          _flags 00C4            read_prec_or_width@c 000A  
          read_prec_or_width@n 000B                          _fputc 3C02                          _fputs 4340  
                        pad@fp 0010                          _width 00C0                          _putch 48DE  
                        dtoa@d 0019                          dtoa@i 0021                          dtoa@p 001D  
              __end_of_right90 474C                          dtoa@s 0020                          dtoa@w 001E  
                 ?_reading_hue 0042                __end_of_moveRed 4528                          tablat 0FF5  
              __end_of_turn180 46EA                          ttemp5 005C                          ttemp6 005F  
                        ttemp7 0063                          status 0FD8                          wtemp8 005C  
              __end_of_sprintf 445E          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 41F0  
        _I2C_2_Master_RepStart 48D2                ?_color_read_Red 0006                __initialization 427A  
                 __end_of_main 1F7E                   __end_of_dtoa 3088                   __end_of_stop 3E60  
        __end_of_moveLightBlue 4622                  main@clear_max 0052                _get16bitTMR0val 4380  
                       ??_main 004A                         ??_dtoa 001B                         ??_stop 0016  
                __activetblptr 0003     __end_of_read_prec_or_width 3B58                _reverseStraight 3760  
                 ?_setMotorPWM 000F                         ?_fputc 0002                         ?_fputs 000A  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0002  
             __end_of_backHalf 47AC                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         i1l3420 001E                         i1l3422 002E  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         _RG6PPS 0E88  
                vfpfcnvrt@done 002C       __end_of_color_click_init 442A                         _RX4PPS 0E15  
                       _TX4REG 0EE4               __end_of___xxtofl 2D88    convert_rgb2hue@greencurrent 0068  
             __end_of_decision 298E                         _LowISR 0018                  main@path_step 0056  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031                         ___flge 365C  
                       ___fleq 3B58                         ___lmul 4046                      ??___aldiv 0016  
                    ??___fladd 000A                         ___wmul 47FE                      ??___fldiv 0023  
             backOneAndHalf@mL 0019                      ??___awdiv 0006               backOneAndHalf@mR 001A  
                    ??___awmod 0006                      ??___flmul 000A                         _action 013C  
                    ??___flsub 001A                      ??___fltol 0038                      ??___lwdiv 000C  
                       _left90 474C           read_prec_or_width@ap 0009                   ?_reverseTurn 001D  
                       clear_0 4292                         clear_1 429E                         clear_2 42AA  
             ___awdiv@quotient 0008                ___awmod@divisor 0004                         _motorL 00E6  
                       _motorR 00DD                         isa$std 0001                ___awmod@counter 0006  
                    ??_left135 001B             send2USART@hue_char 0060                         pad@buf 0011  
             __end_of_right135 45F0                         dtoa@fp 0018               __end_of_moveBlue 46B8  
             __end_of_movePink 455A                         fputc@c 0002                         fputs@c 000D  
                       fputs@i 000E                         fputs@s 000A                      ??_right90 001B  
                 __mediumconst 0000        calibration_routine@cCal 0047                      ??_moveRed 001F  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074  
                       putch@c 0001               __end_of_vfprintf 42FE                      ??_turn180 001B  
                       stop@mL 0014                         stop@mR 0015              ??_initDCmotorsPWM 0004  
                    ??_sprintf 0038               __end_of_turnLeft 3F5C       get16bitTMR0val@path_step 0007  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 42B2       __end_of_color_read_Clear 41A0  
     __end_of_color_read_Green 4150         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 455A  
                ___rparam_used 0001                     ___fltol@f1 0034               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 43BE                  _fullSpeedBack 3F5C  
                 __pidataBANK0 48E0                  __end_of_fputc 3CAC                  __end_of_fputs 4380  
                __end_of_putch 48E0        __end_of_reverseStraight 384C               reading_hue@cCurr 0042  
                   ??_ADC_init 0002                 main@clear_norm 0058                     backHalf@mL 0019  
                   backHalf@mR 001A                        ??_fputc 0005                        ??_fputs 000D  
                      ??_putch 0002                     __pbssBANK0 00AC                     __pbssBANK1 0100  
                   __pbssBANK2 0200         __end_of_backOneAndHalf 458C                        ?_LowISR 0001  
            _color_writetoaddr 4824                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014  
              _convert_rgb2hue 0EC6                        ?___flge 0002                        ?___fleq 0002  
           ?_color_writetoaddr 0004                        ?___lmul 0002                  _customDelayMs 43BE  
                      ?___wmul 0002                        ?_left90 0019          reverseTurn@actionStep 001F  
               ___lmul@product 000A                      ?_backHalf 0019            ??_color_writetoaddr 0005  
                    ?___xxtofl 0002            _convert_rgb2hue$432 0080            _convert_rgb2hue$433 0084  
          _convert_rgb2hue$434 0088            _convert_rgb2hue$435 008C                      ?_decision 0021  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001D                    moveGreen@mR 001E  
              ?_backOneAndHalf 0019         color_writetoaddr@value 0004               ??_color_read_Red 0008  
    __end_of_color_writetoaddr 4844                      _ADREFbits 0F58                      ?_right135 0019  
           _I2C_2_Master_Start 48C8                     _initUSART4 4844             _I2C_2_Master_Write 48B2  
                    ?_moveBlue 001D              main@clear_current 004E                        __Hparam 0000  
                    ?_movePink 001D                        __Lparam 0000              color_read_Red@tmp 000B  
                  moveWhite@mL 001D                    moveWhite@mR 001E      customDelayMs@milliseconds 0002  
               ?_customDelayMs 0002        sendStringSerial4@string 0003               ?_get16bitTMR0val 0007  
                      ___aldiv 344A                        ___fladd 1658                        ___fldiv 23A8  
                      ___awdiv 3936                        ___awmod 39FA                        ___flmul 1F7E  
                      ___flsub 41F0                        ___fltol 3556            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3FD2            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 427A                     ??_backHalf 001B  
            __end_of_logAction 427A                        __ramtop 0E00               ?_reverseStraight 0017  
                   _send2USART 4862                      ?_turnLeft 0014                        _left135 4622  
                      __ptext0 1B18                        __ptext1 333A                        __ptext2 3088  
                      __ptext3 3760                        __ptext4 48DC                        __ptext5 43BE  
                      __ptext6 4492                        __ptext7 4046                        __ptext8 344A  
                      __ptext9 384C                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 0025  
       reverseStraight@delayMs 001F               ___aldiv@dividend 000E                        _right90 471C  
                    _T2HLTbits 0FBE                        _moveRed 44F6                  _RxBufWriteCnt 00C8  
                      _turn180 46B8                        _sprintf 442A                        main@hue 004C  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 42B2  
            __end_of_moveGreen 4686         reverseStraight@time_ms 0019              __end_of_moveWhite 44C4  
                      fputc@fp 0004        __end_of_convert_rgb2hue 1658                        fputs@fp 000C  
            ?_color_click_init 0001             _read_prec_or_width 3AAA                     _moveOrange 458C  
                   ??_right135 001B                     _moveYellow 44C4                ??_fullSpeedBack 0016  
                   ??_moveBlue 001F             ??_color_click_init 0006        convert_rgb2hue@clearmax 007C  
                   ??_movePink 001F               _colorCalibration 00D3            returnHome@path_step 0024  
            __end_of_vfpfcnvrt 2F10               ___aldiv@quotient 0018                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00C9                     _returnHome 333A  
              _initDCmotorsPWM 3D42                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 3EDE                    ___fladd@grs 0011  
                ___xxtofl@sign 000A                    returnHome@i 002B                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88               convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A  
             convert_rgb2hue@g 00A4                    ___fldiv@grs 002E               convert_rgb2hue@r 00A0  
                  ___fldiv@rem 0027               fullSpeedAhead@mL 0002               fullSpeedAhead@mR 0003  
     color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 0010  
                  _CCP1CONbits 0FAB            _calibration_routine 298E              ?_color_read_Clear 0006  
                 _EUSART4RXbuf 00AC                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 3760  
               __end_of___fleq 3C02                 _fullSpeedAhead 48DC                 __end_of___lmul 40B0  
                  vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023  
               __end_of___wmul 4824                 __end_of_left90 477C                    ?_send2USART 0045  
         ?_calibration_routine 0047            color_read_Clear@tmp 000B            start_initialization 427A  
 calibration_routine@cal_state 0092                    __end_of_abs 4492                    __end_of_pad 3D42  
                _TxBufWriteCnt 005A               ?_convert_rgb2hue 003E                    ?_moveOrange 001D  
                  ?_moveYellow 001D            color_read_Green@tmp 000B                       ??_LowISR 0001  
      __end_of_initDCmotorsPWM 3DD2                    vfprintf@fmt 002F         __end_of_fullSpeedAhead 48DE  
                     ??___flge 000A                       ??___fleq 000A                       ??___lmul 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00EF  
                  ?_returnHome 0022          ??_calibration_routine 0048                  _moveLightBlue 45F0  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 001F  
                    ___fldiv@b 001B                      ___flmul@a 0006                      ___flmul@b 0002  
                  __pbssCOMRAM 005A                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0017  
            reverseStraight@mR 0018          returnHome@action_turn 002A                  ??_reading_hue 0044  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3069 001B                ?_fullSpeedAhead 0002                       ?___aldiv 000E  
                     ?___fladd 0002                       ?___fldiv 001B                       ?___awdiv 0002  
                     ?___awmod 0002                       ?___flmul 0002                       ?___flsub 0012  
                     ?___fltol 0034                       ?___lwdiv 0008                     moveBlue@mL 001D  
                   moveBlue@mR 001E                 ?_moveLightBlue 001D                    __pintcodelo 0018  
                     ?_left135 0019                   _readingIndex 00C5           I2C_2_Master_Read@ack 0004  
         I2C_2_Master_Read@tmp 0005                    __smallconst 0E00                     movePink@mL 001D  
                   movePink@mR 001E              _I2C_2_Master_Idle 47D6                      _logAction 4236  
            _I2C_2_Master_Init 47AC              _I2C_2_Master_Read 42FE                       ?_right90 0019  
            _I2C_2_Master_Stop 48BE                       ?_moveRed 001D                   _RxBufReadCnt 00C7  
                     _ADC_init 4880             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010                       ?_turn180 0019  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D       initDCmotorsPWM@PWMperiod 0002  
                     ?_sprintf 0032                ___aldiv@divisor 0012              _sendStringSerial4 46EA  
          ??_I2C_2_Master_Idle 0002                ___aldiv@counter 0016            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _IPR0bits 0E1F                       _PIE0bits 0E29  
           ?_sendStringSerial4 0003                      _moveGreen 4654                       _PIE4bits 0E2D  
          __end_of_reading_hue 3936                       i1u235_20 002E                       i1u235_21 002A  
                    _moveWhite 4492                    turnRight@mL 0014                    turnRight@mR 0015  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0002  
                    left135@mL 0019                      left135@mR 001A              ??_sendCharSerial4 0002  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                ??_reverseTurn 0020                      _vfpfcnvrt 2D88                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 47FE      __end_of_I2C_2_Master_Init 47D6      __end_of_I2C_2_Master_Read 4340  
            ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 48C8                   setMotorPWM@m 000F  
  I2C_2_Master_Write@data_byte 0003                    _ldrReadings 016E                     ?_logAction 0002  
            ??_color_read_Blue 0008                   _TxBufReadCnt 00C6                      _turnRight 3E60  
            ___lmul@multiplier 0002      __end_of_sendStringSerial4 471C                   moveOrange@mL 001D  
                 moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 48DC             color_read_Blue@tmp 000B  
          __end_of_setMotorPWM 333A                   ??_initUSART4 0002                     ?_moveGreen 001D  
                   ?_moveWhite 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3FD2  
              ??_moveLightBlue 001F                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023                       _backHalf 477C                   ??_send2USART 0047  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00EF  
                   sprintf@fmt 0033                       ___xxtofl 2BD4                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6                       _decision 2742            __end_of_reverseTurn 31E6  
                    right90@mL 0019                      right90@mR 001A                ___lwdiv@divisor 000A  
           __end_of_initUSART4 4862                ___lwdiv@counter 000C                     ?_turnRight 0014  
                     __ptext10 0EC6                       __ptext11 2BD4                       __ptext20 3D42  
                     __ptext12 3556                       __ptext21 4380                       __ptext13 41F0  
                     __ptext30 3E60                       __ptext22 2742                       __ptext14 1658  
                     __ptext31 45F0                       __ptext23 44C4                       __ptext15 1F7E  
                     __ptext40 3F5C                       __ptext32 4622                       __ptext24 44F6  
                     __ptext16 365C                       __ptext41 31E6                       __ptext33 4654  
                     __ptext25 471C                       __ptext17 3B58                       __ptext50 42BC  
                     __ptext42 3FD2                       __ptext34 474C                       __ptext26 4528  
                     __ptext18 23A8                       __ptext51 2D88                       __ptext43 4236  
                     __ptext35 4686                       __ptext27 455A                       __ptext19 4844  
                     __ptext60 39FA                       __ptext52 3AAA                       __ptext44 43F6  
                     __ptext36 46B8                       __ptext28 458C                       __ptext61 3936  
                     __ptext53 47FE                       __ptext45 4824                       __ptext37 3EDE  
                     __ptext29 45BE                       __ptext70 48C8                       __ptext62 46EA  
                     __ptext54 2F10                       __ptext46 47AC                       __ptext38 477C  
                     __ptext71 48D2                       __ptext63 489A                       __ptext55 3CAC  
                     __ptext47 298E                       __ptext39 3DD2                       __ptext72 42FE  
                     __ptext64 40B0                       __ptext56 4340                       __ptext48 4862  
                     __ptext73 47D6                       __ptext65 4100                       __ptext57 3C02  
                     __ptext49 442A                       __ptext74 4880                       __ptext66 4150  
                     __ptext58 48DE                       __ptext67 41A0                       __ptext59 445E  
                     __ptext68 48B2                       __ptext69 48BE                    decision@hue 0021  
                    moveRed@mL 001D                      moveRed@mR 001E                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    _reading_hue 384C                  reverseTurn@mL 001D  
                reverseTurn@mR 001E                   ??_moveOrange 001F                     turnLeft@mL 0014  
                   turnLeft@mR 0015                   ??_moveYellow 001F             __end_of_send2USART 4880  
                     _right135 45BE                       _moveBlue 4686                       _movePink 4528  
                   turnRight@i 0017          __end_of_customDelayMs 43F6                       isa$xinst 0000  
                     left90@mL 0019                       left90@mR 001A                     _RC4STAbits 0EE7  
            returnHome@time_ms 0026                       int$flags 005B                       _vfprintf 42BC  
                 ??_returnHome 0026                       _turnLeft 3EDE                      turn180@mL 0019  
                    turn180@mR 001A                    ??_logAction 0006                     _INTCONbits 0FF2  
               customDelayMs@i 0005             __end_of_moveOrange 45BE             __end_of_moveYellow 44F6  
                  _setMotorPWM 31E6              ??_get16bitTMR0val 0009                       intlevel1 0000  
                    sprintf@ap 0038              decision@path_step 0023              ??_reverseStraight 001D  
             ??_fullSpeedAhead 0004  get16bitTMR0val@combined_value 000D             __end_of_returnHome 344A  
                  ??_moveGreen 001F                      turnLeft@i 0017                    ??_moveWhite 001F  
  __end_of_calibration_routine 2BD4    convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045  
                  ??_vfpfcnvrt 0026                    _reverseTurn 3088               _color_click_init 43F6  
                     sprintf@f 0039                       sprintf@s 0032                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                   ___aldiv@sign 0017                    ??_turnRight 0016  
                ___fladd@signs 000E                     _TX4STAbits 0EE8                _sendCharSerial4 489A  
                 ___fladd@aexp 000F                   ___fladd@bexp 0010                   returnHome@mL 0022  
                 returnHome@mR 0023  
