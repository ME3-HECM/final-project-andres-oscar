

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 02:34:31 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96   000000                     
    97                           ; Generated 21/07/2023 GMT
    98                           ; 
    99                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F67K40 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131   000000                     
   132                           	psect	idataBANK0
   133   004914                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for _dataFlag
   137   004914  01                 	db	1
   138   000000                     _TMR0H	set	4052
   139   000000                     _TX4REG	set	3812
   140   000000                     _RC4STAbits	set	3815
   141   000000                     _SP4BRGH	set	3814
   142   000000                     _LATHbits	set	3968
   143   000000                     _LATFbits	set	3966
   144   000000                     _TRISFbits	set	3974
   145   000000                     _TRISAbits	set	3969
   146   000000                     _TRISEbits	set	3973
   147   000000                     _TRISGbits	set	3975
   148   000000                     _TRISDbits	set	3972
   149   000000                     _PORTFbits	set	3982
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _ANSELDbits	set	3751
   155   000000                     _SSP2ADD	set	3798
   156   000000                     _SSP2CON1bits	set	3801
   157   000000                     _LATAbits	set	3961
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATGbits	set	3967
   160   000000                     _LATCbits	set	3963
   161   000000                     _LATDbits	set	3964
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RC4REG	set	3811
   165   000000                     _SP4BRGL	set	3813
   166   000000                     _TX4STAbits	set	3816
   167   000000                     _BAUD4CONbits	set	3817
   168   000000                     _SSP2CON2	set	3802
   169   000000                     _CCPR4H	set	3873
   170   000000                     _CCPR3H	set	3877
   171   000000                     _SSP2STAT	set	3800
   172   000000                     _ANSELFbits	set	3764
   173   000000                     _SSP2BUF	set	3797
   174   000000                     _IPR0bits	set	3615
   175   000000                     _PIE0bits	set	3625
   176   000000                     _PIE4bits	set	3629
   177   000000                     _PIR4bits	set	3639
   178   000000                     _RC0PPS	set	3682
   179   000000                     _RC7PPS	set	3689
   180   000000                     _RD5PPS	set	3695
   181   000000                     _RE2PPS	set	3700
   182   000000                     _RD6PPS	set	3696
   183   000000                     _CCP1CONbits	set	4011
   184   000000                     _CCPTMRS0bits	set	4013
   185   000000                     _T2PR	set	4028
   186   000000                     _T2CONbits	set	4029
   187   000000                     _T0CON0bits	set	4053
   188   000000                     _CCP2CONbits	set	4007
   189   000000                     _CCP3CONbits	set	3878
   190   000000                     _ADREFbits	set	3928
   191   000000                     _CCP4CONbits	set	3874
   192   000000                     _TRISHbits	set	3976
   193   000000                     _TRISCbits	set	3971
   194   000000                     _INTCONbits	set	4082
   195   000000                     _T0CON1bits	set	4054
   196   000000                     _ADPCH	set	3935
   197   000000                     _ADRESH	set	3940
   198   000000                     _ADCON0bits	set	3936
   199   000000                     _RE4PPS	set	3702
   200   000000                     _RG6PPS	set	3720
   201   000000                     _TMR0L	set	4051
   202   000000                     _T2CLKCONbits	set	4031
   203   000000                     _T2HLTbits	set	4030
   204   000000                     _PIR0bits	set	3635
   205                           
   206                           	psect	smallconst
   207   000E00                     __psmallconst:
   208                           	callstack 0
   209   000E00  00                 	db	0
   210   000E01                     STR_3:
   211                           
   212                           ; BSR set to: 14
   213   000E01  43                 	db	67	;'C'
   214   000E02  61                 	db	97	;'a'
   215   000E03  6C                 	db	108	;'l'
   216   000E04  69                 	db	105	;'i'
   217   000E05  62                 	db	98	;'b'
   218   000E06  72                 	db	114	;'r'
   219   000E07  61                 	db	97	;'a'
   220   000E08  74                 	db	116	;'t'
   221   000E09  69                 	db	105	;'i'
   222   000E0A  6F                 	db	111	;'o'
   223   000E0B  6E                 	db	110	;'n'
   224   000E0C  20                 	db	32
   225   000E0D  73                 	db	115	;'s'
   226   000E0E  74                 	db	116	;'t'
   227   000E0F  61                 	db	97	;'a'
   228   000E10  74                 	db	116	;'t'
   229   000E11  65                 	db	101	;'e'
   230   000E12  20                 	db	32
   231   000E13  3D                 	db	61	;'='
   232   000E14  20                 	db	32
   233   000E15  67                 	db	103	;'g'
   234   000E16  72                 	db	114	;'r'
   235   000E17  65                 	db	101	;'e'
   236   000E18  65                 	db	101	;'e'
   237   000E19  6E                 	db	110	;'n'
   238   000E1A  20                 	db	32
   239   000E1B  0A                 	db	10
   240   000E1C  0D                 	db	13
   241   000E1D  00                 	db	0
   242   000E1E                     STR_9:
   243                           
   244                           ; BSR set to: 14
   245   000E1E  43                 	db	67	;'C'
   246   000E1F  61                 	db	97	;'a'
   247   000E20  6C                 	db	108	;'l'
   248   000E21  69                 	db	105	;'i'
   249   000E22  62                 	db	98	;'b'
   250   000E23  72                 	db	114	;'r'
   251   000E24  61                 	db	97	;'a'
   252   000E25  74                 	db	116	;'t'
   253   000E26  69                 	db	105	;'i'
   254   000E27  6F                 	db	111	;'o'
   255   000E28  6E                 	db	110	;'n'
   256   000E29  20                 	db	32
   257   000E2A  73                 	db	115	;'s'
   258   000E2B  74                 	db	116	;'t'
   259   000E2C  61                 	db	97	;'a'
   260   000E2D  74                 	db	116	;'t'
   261   000E2E  65                 	db	101	;'e'
   262   000E2F  20                 	db	32
   263   000E30  3D                 	db	61	;'='
   264   000E31  20                 	db	32
   265   000E32  20                 	db	32
   266   000E33  61                 	db	97	;'a'
   267   000E34  6D                 	db	109	;'m'
   268   000E35  62                 	db	98	;'b'
   269   000E36  69                 	db	105	;'i'
   270   000E37  65                 	db	101	;'e'
   271   000E38  6E                 	db	110	;'n'
   272   000E39  74                 	db	116	;'t'
   273   000E3A  00                 	db	0
   274   000E3B                     STR_5:
   275                           
   276                           ; BSR set to: 14
   277   000E3B  43                 	db	67	;'C'
   278   000E3C  61                 	db	97	;'a'
   279   000E3D  6C                 	db	108	;'l'
   280   000E3E  69                 	db	105	;'i'
   281   000E3F  62                 	db	98	;'b'
   282   000E40  72                 	db	114	;'r'
   283   000E41  61                 	db	97	;'a'
   284   000E42  74                 	db	116	;'t'
   285   000E43  69                 	db	105	;'i'
   286   000E44  6F                 	db	111	;'o'
   287   000E45  6E                 	db	110	;'n'
   288   000E46  20                 	db	32
   289   000E47  73                 	db	115	;'s'
   290   000E48  74                 	db	116	;'t'
   291   000E49  61                 	db	97	;'a'
   292   000E4A  74                 	db	116	;'t'
   293   000E4B  65                 	db	101	;'e'
   294   000E4C  3D                 	db	61	;'='
   295   000E4D  20                 	db	32
   296   000E4E  62                 	db	98	;'b'
   297   000E4F  6C                 	db	108	;'l'
   298   000E50  75                 	db	117	;'u'
   299   000E51  65                 	db	101	;'e'
   300   000E52  20                 	db	32
   301   000E53  0A                 	db	10
   302   000E54  0D                 	db	13
   303   000E55  00                 	db	0
   304   000E56                     STR_7:
   305                           
   306                           ; BSR set to: 14
   307   000E56  43                 	db	67	;'C'
   308   000E57  61                 	db	97	;'a'
   309   000E58  6C                 	db	108	;'l'
   310   000E59  69                 	db	105	;'i'
   311   000E5A  62                 	db	98	;'b'
   312   000E5B  72                 	db	114	;'r'
   313   000E5C  61                 	db	97	;'a'
   314   000E5D  74                 	db	116	;'t'
   315   000E5E  69                 	db	105	;'i'
   316   000E5F  6F                 	db	111	;'o'
   317   000E60  6E                 	db	110	;'n'
   318   000E61  20                 	db	32
   319   000E62  73                 	db	115	;'s'
   320   000E63  74                 	db	116	;'t'
   321   000E64  61                 	db	97	;'a'
   322   000E65  74                 	db	116	;'t'
   323   000E66  65                 	db	101	;'e'
   324   000E67  20                 	db	32
   325   000E68  3D                 	db	61	;'='
   326   000E69  20                 	db	32
   327   000E6A  20                 	db	32
   328   000E6B  77                 	db	119	;'w'
   329   000E6C  68                 	db	104	;'h'
   330   000E6D  69                 	db	105	;'i'
   331   000E6E  74                 	db	116	;'t'
   332   000E6F  65                 	db	101	;'e'
   333   000E70  00                 	db	0
   334   000E71                     STR_11:
   335                           
   336                           ; BSR set to: 14
   337   000E71  43                 	db	67	;'C'
   338   000E72  41                 	db	65	;'A'
   339   000E73  4C                 	db	76	;'L'
   340   000E74  49                 	db	73	;'I'
   341   000E75  42                 	db	66	;'B'
   342   000E76  52                 	db	82	;'R'
   343   000E77  41                 	db	65	;'A'
   344   000E78  54                 	db	84	;'T'
   345   000E79  49                 	db	73	;'I'
   346   000E7A  4F                 	db	79	;'O'
   347   000E7B  4E                 	db	78	;'N'
   348   000E7C  20                 	db	32
   349   000E7D  43                 	db	67	;'C'
   350   000E7E  4F                 	db	79	;'O'
   351   000E7F  4D                 	db	77	;'M'
   352   000E80  50                 	db	80	;'P'
   353   000E81  4C                 	db	76	;'L'
   354   000E82  45                 	db	69	;'E'
   355   000E83  54                 	db	84	;'T'
   356   000E84  45                 	db	69	;'E'
   357   000E85  44                 	db	68	;'D'
   358   000E86  20                 	db	32
   359   000E87  0A                 	db	10
   360   000E88  0D                 	db	13
   361   000E89  00                 	db	0
   362   000E8A                     STR_1:
   363                           
   364                           ; BSR set to: 14
   365   000E8A  43                 	db	67	;'C'
   366   000E8B  61                 	db	97	;'a'
   367   000E8C  6C                 	db	108	;'l'
   368   000E8D  69                 	db	105	;'i'
   369   000E8E  62                 	db	98	;'b'
   370   000E8F  72                 	db	114	;'r'
   371   000E90  61                 	db	97	;'a'
   372   000E91  74                 	db	116	;'t'
   373   000E92  69                 	db	105	;'i'
   374   000E93  6F                 	db	111	;'o'
   375   000E94  6E                 	db	110	;'n'
   376   000E95  20                 	db	32
   377   000E96  73                 	db	115	;'s'
   378   000E97  74                 	db	116	;'t'
   379   000E98  61                 	db	97	;'a'
   380   000E99  74                 	db	116	;'t'
   381   000E9A  65                 	db	101	;'e'
   382   000E9B  20                 	db	32
   383   000E9C  3D                 	db	61	;'='
   384   000E9D  20                 	db	32
   385   000E9E  72                 	db	114	;'r'
   386   000E9F  65                 	db	101	;'e'
   387   000EA0  64                 	db	100	;'d'
   388   000EA1  00                 	db	0
   389   000EA2                     
   390                           ; BSR set to: 14
   391   000EA2  56                 	db	86	;'V'
   392   000EA3  6F                 	db	111	;'o'
   393   000EA4  6C                 	db	108	;'l'
   394   000EA5  74                 	db	116	;'t'
   395   000EA6  61                 	db	97	;'a'
   396   000EA7  67                 	db	103	;'g'
   397   000EA8  65                 	db	101	;'e'
   398   000EA9  20                 	db	32
   399   000EAA  3D                 	db	61	;'='
   400   000EAB  20                 	db	32
   401   000EAC  25                 	db	37
   402   000EAD  64                 	db	100	;'d'
   403   000EAE  2E                 	db	46
   404   000EAF  25                 	db	37
   405   000EB0  30                 	db	48	;'0'
   406   000EB1  32                 	db	50	;'2'
   407   000EB2  64                 	db	100	;'d'
   408   000EB3  2C                 	db	44
   409   000EB4  20                 	db	32
   410   000EB5  20                 	db	32
   411   000EB6  00                 	db	0
   412   000EB7                     STR_14:
   413                           
   414                           ; BSR set to: 14
   415   000EB7  68                 	db	104	;'h'
   416   000EB8  75                 	db	117	;'u'
   417   000EB9  65                 	db	101	;'e'
   418   000EBA  3D                 	db	61	;'='
   419   000EBB  25                 	db	37
   420   000EBC  30                 	db	48	;'0'
   421   000EBD  33                 	db	51	;'3'
   422   000EBE  64                 	db	100	;'d'
   423   000EBF  2C                 	db	44
   424   000EC0  20                 	db	32
   425   000EC1  20                 	db	32
   426   000EC2  00                 	db	0
   427   000EC3                     STR_2:
   428                           
   429                           ; BSR set to: 14
   430   000EC3  2E                 	db	46
   431   000EC4  00                 	db	0
   432   000EC5  00                 	db	0	; dummy byte at the end
   433   000000                     
   434                           ; #config settings
   435                           
   436                           	psect	cinit
   437   004280                     __pcinit:
   438                           	callstack 0
   439   004280                     start_initialization:
   440                           	callstack 0
   441   004280                     __initialization:
   442                           	callstack 0
   443                           
   444                           ; Initialize objects allocated to BANK0 (1 bytes)
   445                           ; load TBLPTR registers with __pidataBANK0
   446   004280  0E14               	movlw	low __pidataBANK0
   447   004282  6EF6               	movwf	tblptrl,c
   448   004284  0E49               	movlw	high __pidataBANK0
   449   004286  6EF7               	movwf	tblptrh,c
   450   004288  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   451   00428A  6EF8               	movwf	tblptru,c
   452   00428C  0009               	tblrd		*+	;fetch initializer
   453   00428E  CFF5 F0EF          	movff	tablat,__pdataBANK0
   454                           
   455                           ; Clear objects allocated to BANK2 (100 bytes)
   456   004292  EE02  F000         	lfsr	0,__pbssBANK2
   457   004296  0E64               	movlw	100
   458   004298                     clear_0:
   459   004298  6AEE               	clrf	postinc0,c
   460   00429A  06E8               	decf	wreg,f,c
   461   00429C  E1FD               	bnz	clear_0
   462                           
   463                           ; Clear objects allocated to BANK1 (162 bytes)
   464   00429E  EE01  F000         	lfsr	0,__pbssBANK1
   465   0042A2  0EA2               	movlw	162
   466   0042A4                     clear_1:
   467   0042A4  6AEE               	clrf	postinc0,c
   468   0042A6  06E8               	decf	wreg,f,c
   469   0042A8  E1FD               	bnz	clear_1
   470                           
   471                           ; Clear objects allocated to BANK0 (67 bytes)
   472   0042AA  EE00  F0AC         	lfsr	0,__pbssBANK0
   473   0042AE  0E43               	movlw	67
   474   0042B0                     clear_2:
   475   0042B0  6AEE               	clrf	postinc0,c
   476   0042B2  06E8               	decf	wreg,f,c
   477   0042B4  E1FD               	bnz	clear_2
   478                           
   479                           ; Clear objects allocated to COMRAM (1 bytes)
   480   0042B6  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   481   0042B8                     end_of_initialization:
   482                           	callstack 0
   483   0042B8                     __end_of__initialization:
   484                           	callstack 0
   485   0042B8  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   486   0042BA  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   487   0042BC  0100               	movlb	0
   488   0042BE  EF8C  F00D         	goto	_main	;jump to C main() function
   489                           
   490                           	psect	bssCOMRAM
   491   00005A                     __pbssCOMRAM:
   492                           	callstack 0
   493   00005A                     _TxBufWriteCnt:
   494                           	callstack 0
   495   00005A                     	ds	1
   496                           
   497                           	psect	bssBANK0
   498   0000AC                     __pbssBANK0:
   499                           	callstack 0
   500   0000AC                     _EUSART4RXbuf:
   501                           	callstack 0
   502   0000AC                     	ds	20
   503   0000C0                     _width:
   504                           	callstack 0
   505   0000C0                     	ds	2
   506   0000C2                     _prec:
   507                           	callstack 0
   508   0000C2                     	ds	2
   509   0000C4                     _flags:
   510                           	callstack 0
   511   0000C4                     	ds	1
   512   0000C5                     _readingIndex:
   513                           	callstack 0
   514   0000C5                     	ds	1
   515   0000C6                     _TxBufReadCnt:
   516                           	callstack 0
   517   0000C6                     	ds	1
   518   0000C7                     _RxBufReadCnt:
   519                           	callstack 0
   520   0000C7                     	ds	1
   521   0000C8                     _RxBufWriteCnt:
   522                           	callstack 0
   523   0000C8                     	ds	1
   524   0000C9                     _colorCurrent:
   525                           	callstack 0
   526   0000C9                     	ds	10
   527   0000D3                     _colorCalibration:
   528                           	callstack 0
   529   0000D3                     	ds	10
   530   0000DD                     _motorR:
   531                           	callstack 0
   532   0000DD                     	ds	9
   533   0000E6                     _motorL:
   534                           	callstack 0
   535   0000E6                     	ds	9
   536                           
   537                           	psect	dataBANK0
   538   0000EF                     __pdataBANK0:
   539                           	callstack 0
   540   0000EF                     _dataFlag:
   541                           	callstack 0
   542   0000EF                     	ds	1
   543                           
   544                           	psect	bssBANK1
   545   000100                     __pbssBANK1:
   546                           	callstack 0
   547   000100                     _EUSART4TXbuf:
   548                           	callstack 0
   549   000100                     	ds	60
   550   00013C                     _action:
   551                           	callstack 0
   552   00013C                     	ds	50
   553   00016E                     _ldrReadings:
   554                           	callstack 0
   555   00016E                     	ds	20
   556   000182                     _dbuf:
   557                           	callstack 0
   558   000182                     	ds	32
   559                           
   560                           	psect	bssBANK2
   561   000200                     __pbssBANK2:
   562                           	callstack 0
   563   000200                     _time:
   564                           	callstack 0
   565   000200                     	ds	100
   566                           
   567                           	psect	cstackBANK0
   568   000060                     __pcstackBANK0:
   569                           	callstack 0
   570   000060                     convert_rgb2hue@redcurrent:
   571                           	callstack 0
   572   000060                     send2USART@hue_char:
   573                           	callstack 0
   574                           
   575                           ; 50 bytes @ 0x0
   576   000060                     	ds	4
   577   000064                     convert_rgb2hue@redmax:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x4
   581   000064                     	ds	4
   582   000068                     convert_rgb2hue@greencurrent:
   583                           	callstack 0
   584                           
   585                           ; 4 bytes @ 0x8
   586   000068                     	ds	4
   587   00006C                     convert_rgb2hue@greenmax:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0xC
   591   00006C                     	ds	4
   592   000070                     convert_rgb2hue@bluecurrent:
   593                           	callstack 0
   594                           
   595                           ; 4 bytes @ 0x10
   596   000070                     	ds	4
   597   000074                     convert_rgb2hue@bluemax:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x14
   601   000074                     	ds	4
   602   000078                     convert_rgb2hue@clearcurrent:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x18
   606   000078                     	ds	4
   607   00007C                     convert_rgb2hue@clearmax:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x1C
   611   00007C                     	ds	4
   612   000080                     _convert_rgb2hue$432:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x20
   616   000080                     	ds	4
   617   000084                     _convert_rgb2hue$433:
   618                           	callstack 0
   619                           
   620                           ; 4 bytes @ 0x24
   621   000084                     	ds	4
   622   000088                     _convert_rgb2hue$434:
   623                           	callstack 0
   624                           
   625                           ; 4 bytes @ 0x28
   626   000088                     	ds	4
   627   00008C                     _convert_rgb2hue$435:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x2C
   631   00008C                     	ds	4
   632   000090                     convert_rgb2hue@min:
   633                           	callstack 0
   634                           
   635                           ; 4 bytes @ 0x30
   636   000090                     	ds	2
   637   000092                     calibration_routine@cal_state:
   638                           	callstack 0
   639                           
   640                           ; 20 bytes @ 0x32
   641   000092                     	ds	2
   642   000094                     convert_rgb2hue@diff:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x34
   646   000094                     	ds	4
   647   000098                     convert_rgb2hue@max:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0x38
   651   000098                     	ds	4
   652   00009C                     convert_rgb2hue@hue:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x3C
   656   00009C                     	ds	4
   657   0000A0                     convert_rgb2hue@r:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x40
   661   0000A0                     	ds	4
   662   0000A4                     convert_rgb2hue@g:
   663                           	callstack 0
   664                           
   665                           ; 4 bytes @ 0x44
   666   0000A4                     	ds	4
   667   0000A8                     convert_rgb2hue@b:
   668                           	callstack 0
   669                           
   670                           ; 4 bytes @ 0x48
   671   0000A8                     	ds	4
   672                           
   673                           	psect	cstackCOMRAM
   674   000001                     __pcstackCOMRAM:
   675                           	callstack 0
   676   000001                     ??_LowISR:
   677   000001                     
   678                           ; 1 bytes @ 0x0
   679   000001                     	ds	1
   680   000002                     ??_I2C_2_Master_Idle:
   681   000002                     ?___wmul:
   682                           	callstack 0
   683   000002                     ?___awdiv:
   684                           	callstack 0
   685   000002                     ?___awmod:
   686                           	callstack 0
   687   000002                     ?___fladd:
   688                           	callstack 0
   689   000002                     ?___flmul:
   690                           	callstack 0
   691   000002                     ?___lmul:
   692                           	callstack 0
   693   000002                     ?___xxtofl:
   694                           	callstack 0
   695   000002                     fullSpeedAhead@mL:
   696                           	callstack 0
   697   000002                     sendCharSerial4@charToSend:
   698                           	callstack 0
   699   000002                     initDCmotorsPWM@PWMperiod:
   700                           	callstack 0
   701   000002                     logAction@newTime:
   702                           	callstack 0
   703   000002                     customDelayMs@milliseconds:
   704                           	callstack 0
   705   000002                     ___wmul@multiplier:
   706                           	callstack 0
   707   000002                     ___awdiv@dividend:
   708                           	callstack 0
   709   000002                     ___awmod@dividend:
   710                           	callstack 0
   711   000002                     fputc@c:
   712                           	callstack 0
   713   000002                     ___lmul@multiplier:
   714                           	callstack 0
   715   000002                     ___fleq@ff1:
   716                           	callstack 0
   717   000002                     ___flge@ff1:
   718                           	callstack 0
   719   000002                     ___fladd@b:
   720                           	callstack 0
   721   000002                     ___flmul@b:
   722                           	callstack 0
   723   000002                     ___xxtofl@val:
   724                           	callstack 0
   725                           
   726                           ; 4 bytes @ 0x1
   727   000002                     	ds	1
   728   000003                     ??_I2C_2_Master_Read:
   729   000003                     I2C_2_Master_Write@data_byte:
   730                           	callstack 0
   731   000003                     fullSpeedAhead@mR:
   732                           	callstack 0
   733   000003                     sendStringSerial4@string:
   734                           	callstack 0
   735                           
   736                           ; 1 bytes @ 0x2
   737   000003                     	ds	1
   738   000004                     ??_customDelayMs:
   739   000004                     color_writetoaddr@value:
   740                           	callstack 0
   741   000004                     I2C_2_Master_Read@ack:
   742                           	callstack 0
   743   000004                     fputc@fp:
   744                           	callstack 0
   745   000004                     logAction@path_step:
   746                           	callstack 0
   747   000004                     ___wmul@multiplicand:
   748                           	callstack 0
   749   000004                     ___awdiv@divisor:
   750                           	callstack 0
   751   000004                     ___awmod@divisor:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x3
   755   000004                     	ds	1
   756   000005                     ??_fputc:
   757   000005                     color_writetoaddr@address:
   758                           	callstack 0
   759   000005                     I2C_2_Master_Read@tmp:
   760                           	callstack 0
   761   000005                     customDelayMs@i:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x4
   765   000005                     	ds	1
   766   000006                     ??_color_click_init:
   767   000006                     ??___xxtofl:
   768   000006                     ?_color_read_Red:
   769                           	callstack 0
   770   000006                     ?_color_read_Green:
   771                           	callstack 0
   772   000006                     ?_color_read_Blue:
   773                           	callstack 0
   774   000006                     ?_color_read_Clear:
   775                           	callstack 0
   776   000006                     logAction@newAction:
   777                           	callstack 0
   778   000006                     ___awdiv@counter:
   779                           	callstack 0
   780   000006                     ___awmod@counter:
   781                           	callstack 0
   782   000006                     ___wmul@product:
   783                           	callstack 0
   784   000006                     ___lmul@multiplicand:
   785                           	callstack 0
   786   000006                     ___fleq@ff2:
   787                           	callstack 0
   788   000006                     ___flge@ff2:
   789                           	callstack 0
   790   000006                     ___fladd@a:
   791                           	callstack 0
   792   000006                     ___flmul@a:
   793                           	callstack 0
   794                           
   795                           ; 4 bytes @ 0x5
   796   000006                     	ds	1
   797   000007                     ?_get16bitTMR0val:
   798                           	callstack 0
   799   000007                     ___awdiv@sign:
   800                           	callstack 0
   801   000007                     ___awmod@sign:
   802                           	callstack 0
   803   000007                     get16bitTMR0val@path_step:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x6
   807   000007                     	ds	1
   808   000008                     ??_color_read_Red:
   809   000008                     ??_color_read_Green:
   810   000008                     ??_color_read_Blue:
   811   000008                     ??_color_read_Clear:
   812   000008                     ?_abs:
   813                           	callstack 0
   814   000008                     ?___lwdiv:
   815                           	callstack 0
   816   000008                     ?_read_prec_or_width:
   817                           	callstack 0
   818   000008                     read_prec_or_width@fmt:
   819                           	callstack 0
   820   000008                     ___awdiv@quotient:
   821                           	callstack 0
   822   000008                     ___lwdiv@dividend:
   823                           	callstack 0
   824   000008                     abs@a:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x7
   828   000008                     	ds	1
   829   000009                     ??_get16bitTMR0val:
   830   000009                     read_prec_or_width@ap:
   831                           	callstack 0
   832                           
   833                           ; 1 bytes @ 0x8
   834   000009                     	ds	1
   835   00000A                     ??___fladd:
   836   00000A                     ??___flmul:
   837   00000A                     ??_abs:
   838   00000A                     ??___fleq:
   839   00000A                     ??___flge:
   840   00000A                     ___xxtofl@sign:
   841                           	callstack 0
   842   00000A                     read_prec_or_width@c:
   843                           	callstack 0
   844   00000A                     ___lwdiv@divisor:
   845                           	callstack 0
   846   00000A                     fputs@s:
   847                           	callstack 0
   848   00000A                     ___lmul@product:
   849                           	callstack 0
   850                           
   851                           ; 4 bytes @ 0x9
   852   00000A                     	ds	1
   853   00000B                     ___xxtofl@exp:
   854                           	callstack 0
   855   00000B                     color_read_Red@tmp:
   856                           	callstack 0
   857   00000B                     color_read_Green@tmp:
   858                           	callstack 0
   859   00000B                     color_read_Blue@tmp:
   860                           	callstack 0
   861   00000B                     color_read_Clear@tmp:
   862                           	callstack 0
   863   00000B                     read_prec_or_width@n:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0xA
   867   00000B                     	ds	1
   868   00000C                     ___lwdiv@counter:
   869                           	callstack 0
   870   00000C                     fputs@fp:
   871                           	callstack 0
   872   00000C                     ___xxtofl@arg:
   873                           	callstack 0
   874                           
   875                           ; 4 bytes @ 0xB
   876   00000C                     	ds	1
   877   00000D                     fputs@c:
   878                           	callstack 0
   879   00000D                     get16bitTMR0val@combined_value:
   880                           	callstack 0
   881   00000D                     ___lwdiv@quotient:
   882                           	callstack 0
   883                           
   884                           ; 2 bytes @ 0xC
   885   00000D                     	ds	1
   886   00000E                     ?___aldiv:
   887                           	callstack 0
   888   00000E                     ___fladd@signs:
   889                           	callstack 0
   890   00000E                     ___flmul@sign:
   891                           	callstack 0
   892   00000E                     fputs@i:
   893                           	callstack 0
   894   00000E                     ___aldiv@dividend:
   895                           	callstack 0
   896                           
   897                           ; 4 bytes @ 0xD
   898   00000E                     	ds	1
   899   00000F                     setMotorPWM@m:
   900                           	callstack 0
   901   00000F                     ___fladd@aexp:
   902                           	callstack 0
   903   00000F                     ___flmul@aexp:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0xE
   907   00000F                     	ds	1
   908   000010                     ??_setMotorPWM:
   909   000010                     ___fladd@bexp:
   910                           	callstack 0
   911   000010                     pad@fp:
   912                           	callstack 0
   913   000010                     ___flmul@grs:
   914                           	callstack 0
   915                           
   916                           ; 4 bytes @ 0xF
   917   000010                     	ds	1
   918   000011                     ___fladd@grs:
   919                           	callstack 0
   920   000011                     pad@buf:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x10
   924   000011                     	ds	1
   925   000012                     ?___flsub:
   926                           	callstack 0
   927   000012                     setMotorPWM@posDuty:
   928                           	callstack 0
   929   000012                     ___aldiv@divisor:
   930                           	callstack 0
   931   000012                     ___flsub@b:
   932                           	callstack 0
   933                           
   934                           ; 4 bytes @ 0x11
   935   000012                     	ds	1
   936   000013                     setMotorPWM@negDuty:
   937                           	callstack 0
   938   000013                     pad@p:
   939                           	callstack 0
   940                           
   941                           ; 2 bytes @ 0x12
   942   000013                     	ds	1
   943   000014                     stop@mL:
   944                           	callstack 0
   945   000014                     turnLeft@mL:
   946                           	callstack 0
   947   000014                     turnRight@mL:
   948                           	callstack 0
   949   000014                     fullSpeedBack@mL:
   950                           	callstack 0
   951   000014                     ___flmul@bexp:
   952                           	callstack 0
   953                           
   954                           ; 1 bytes @ 0x13
   955   000014                     	ds	1
   956   000015                     ??_pad:
   957   000015                     stop@mR:
   958                           	callstack 0
   959   000015                     turnLeft@mR:
   960                           	callstack 0
   961   000015                     turnRight@mR:
   962                           	callstack 0
   963   000015                     fullSpeedBack@mR:
   964                           	callstack 0
   965   000015                     ___flmul@prod:
   966                           	callstack 0
   967                           
   968                           ; 4 bytes @ 0x14
   969   000015                     	ds	1
   970   000016                     ??_stop:
   971   000016                     ??_turnLeft:
   972   000016                     ??_turnRight:
   973   000016                     ??_fullSpeedBack:
   974   000016                     ___aldiv@counter:
   975                           	callstack 0
   976   000016                     pad@i:
   977                           	callstack 0
   978   000016                     ___flsub@a:
   979                           	callstack 0
   980                           
   981                           ; 4 bytes @ 0x15
   982   000016                     	ds	1
   983   000017                     reverseStraight@mL:
   984                           	callstack 0
   985   000017                     ___aldiv@sign:
   986                           	callstack 0
   987   000017                     turnLeft@i:
   988                           	callstack 0
   989   000017                     turnRight@i:
   990                           	callstack 0
   991   000017                     fullSpeedBack@power:
   992                           	callstack 0
   993                           
   994                           ; 2 bytes @ 0x16
   995   000017                     	ds	1
   996   000018                     reverseStraight@mR:
   997                           	callstack 0
   998   000018                     dtoa@fp:
   999                           	callstack 0
  1000   000018                     ___aldiv@quotient:
  1001                           	callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x17
  1004   000018                     	ds	1
  1005   000019                     right90@mL:
  1006                           	callstack 0
  1007   000019                     left90@mL:
  1008                           	callstack 0
  1009   000019                     turn180@mL:
  1010                           	callstack 0
  1011   000019                     right135@mL:
  1012                           	callstack 0
  1013   000019                     left135@mL:
  1014                           	callstack 0
  1015   000019                     backHalf@mL:
  1016                           	callstack 0
  1017   000019                     backOneAndHalf@mL:
  1018                           	callstack 0
  1019   000019                     ___flmul@temp:
  1020                           	callstack 0
  1021   000019                     dtoa@d:
  1022                           	callstack 0
  1023   000019                     reverseStraight@time_ms:
  1024                           	callstack 0
  1025                           
  1026                           ; 4 bytes @ 0x18
  1027   000019                     	ds	1
  1028   00001A                     right90@mR:
  1029                           	callstack 0
  1030   00001A                     left90@mR:
  1031                           	callstack 0
  1032   00001A                     turn180@mR:
  1033                           	callstack 0
  1034   00001A                     right135@mR:
  1035                           	callstack 0
  1036   00001A                     left135@mR:
  1037                           	callstack 0
  1038   00001A                     backHalf@mR:
  1039                           	callstack 0
  1040   00001A                     backOneAndHalf@mR:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x19
  1044   00001A                     	ds	1
  1045   00001B                     ??_right90:
  1046   00001B                     ??_left90:
  1047   00001B                     ??_turn180:
  1048   00001B                     ??_right135:
  1049   00001B                     ??_left135:
  1050   00001B                     ??_backHalf:
  1051   00001B                     ??_backOneAndHalf:
  1052   00001B                     ?___fldiv:
  1053                           	callstack 0
  1054   00001B                     _dtoa$3073:
  1055                           	callstack 0
  1056   00001B                     ___fldiv@b:
  1057                           	callstack 0
  1058                           
  1059                           ; 4 bytes @ 0x1A
  1060   00001B                     	ds	2
  1061   00001D                     ??_reverseStraight:
  1062   00001D                     moveRed@mL:
  1063                           	callstack 0
  1064   00001D                     moveGreen@mL:
  1065                           	callstack 0
  1066   00001D                     moveBlue@mL:
  1067                           	callstack 0
  1068   00001D                     moveYellow@mL:
  1069                           	callstack 0
  1070   00001D                     movePink@mL:
  1071                           	callstack 0
  1072   00001D                     moveOrange@mL:
  1073                           	callstack 0
  1074   00001D                     moveLightBlue@mL:
  1075                           	callstack 0
  1076   00001D                     moveWhite@mL:
  1077                           	callstack 0
  1078   00001D                     reverseTurn@mL:
  1079                           	callstack 0
  1080   00001D                     dtoa@p:
  1081                           	callstack 0
  1082                           
  1083                           ; 1 bytes @ 0x1C
  1084   00001D                     	ds	1
  1085   00001E                     moveRed@mR:
  1086                           	callstack 0
  1087   00001E                     moveGreen@mR:
  1088                           	callstack 0
  1089   00001E                     moveBlue@mR:
  1090                           	callstack 0
  1091   00001E                     moveYellow@mR:
  1092                           	callstack 0
  1093   00001E                     movePink@mR:
  1094                           	callstack 0
  1095   00001E                     moveOrange@mR:
  1096                           	callstack 0
  1097   00001E                     moveLightBlue@mR:
  1098                           	callstack 0
  1099   00001E                     moveWhite@mR:
  1100                           	callstack 0
  1101   00001E                     reverseTurn@mR:
  1102                           	callstack 0
  1103   00001E                     dtoa@w:
  1104                           	callstack 0
  1105                           
  1106                           ; 2 bytes @ 0x1D
  1107   00001E                     	ds	1
  1108   00001F                     ??_moveRed:
  1109   00001F                     ??_moveGreen:
  1110   00001F                     ??_moveBlue:
  1111   00001F                     ??_moveLightBlue:
  1112   00001F                     ??_moveYellow:
  1113   00001F                     ??_moveOrange:
  1114   00001F                     ??_movePink:
  1115   00001F                     ??_moveWhite:
  1116   00001F                     reverseTurn@actionStep:
  1117                           	callstack 0
  1118   00001F                     reverseStraight@delayMs:
  1119                           	callstack 0
  1120   00001F                     ___fldiv@a:
  1121                           	callstack 0
  1122                           
  1123                           ; 4 bytes @ 0x1E
  1124   00001F                     	ds	1
  1125   000020                     ??_reverseTurn:
  1126   000020                     dtoa@s:
  1127                           	callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x1F
  1130   000020                     	ds	1
  1131   000021                     ?_decision:
  1132                           	callstack 0
  1133   000021                     decision@hue:
  1134                           	callstack 0
  1135   000021                     dtoa@i:
  1136                           	callstack 0
  1137                           
  1138                           ; 2 bytes @ 0x20
  1139   000021                     	ds	1
  1140   000022                     returnHome@mL:
  1141                           	callstack 0
  1142                           
  1143                           ; 1 bytes @ 0x21
  1144   000022                     	ds	1
  1145   000023                     ??___fldiv:
  1146   000023                     returnHome@mR:
  1147                           	callstack 0
  1148   000023                     vfpfcnvrt@fp:
  1149                           	callstack 0
  1150   000023                     decision@path_step:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x22
  1154   000023                     	ds	1
  1155   000024                     vfpfcnvrt@fmt:
  1156                           	callstack 0
  1157   000024                     returnHome@path_step:
  1158                           	callstack 0
  1159                           
  1160                           ; 2 bytes @ 0x23
  1161   000024                     	ds	1
  1162   000025                     vfpfcnvrt@ap:
  1163                           	callstack 0
  1164                           
  1165                           ; 1 bytes @ 0x24
  1166   000025                     	ds	1
  1167   000026                     ??_vfpfcnvrt:
  1168   000026                     returnHome@time_ms:
  1169                           	callstack 0
  1170                           
  1171                           ; 4 bytes @ 0x25
  1172   000026                     	ds	1
  1173   000027                     ___fldiv@rem:
  1174                           	callstack 0
  1175                           
  1176                           ; 4 bytes @ 0x26
  1177   000027                     	ds	1
  1178   000028                     vfpfcnvrt@convarg:
  1179                           	callstack 0
  1180                           
  1181                           ; 4 bytes @ 0x27
  1182   000028                     	ds	2
  1183   00002A                     returnHome@action_turn:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x29
  1187   00002A                     	ds	1
  1188   00002B                     ___fldiv@sign:
  1189                           	callstack 0
  1190   00002B                     returnHome@i:
  1191                           	callstack 0
  1192                           
  1193                           ; 2 bytes @ 0x2A
  1194   00002B                     	ds	1
  1195   00002C                     vfpfcnvrt@done:
  1196                           	callstack 0
  1197   00002C                     ___fldiv@new_exp:
  1198                           	callstack 0
  1199                           
  1200                           ; 2 bytes @ 0x2B
  1201   00002C                     	ds	1
  1202   00002D                     vfpfcnvrt@cp:
  1203                           	callstack 0
  1204                           
  1205                           ; 1 bytes @ 0x2C
  1206   00002D                     	ds	1
  1207   00002E                     ?_vfprintf:
  1208                           	callstack 0
  1209   00002E                     vfprintf@fp:
  1210                           	callstack 0
  1211   00002E                     ___fldiv@grs:
  1212                           	callstack 0
  1213                           
  1214                           ; 4 bytes @ 0x2D
  1215   00002E                     	ds	1
  1216   00002F                     vfprintf@fmt:
  1217                           	callstack 0
  1218                           
  1219                           ; 1 bytes @ 0x2E
  1220   00002F                     	ds	1
  1221   000030                     vfprintf@ap:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x2F
  1225   000030                     	ds	1
  1226   000031                     vfprintf@cfmt:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x30
  1230   000031                     	ds	1
  1231   000032                     ?_sprintf:
  1232                           	callstack 0
  1233   000032                     ___fldiv@bexp:
  1234                           	callstack 0
  1235   000032                     sprintf@s:
  1236                           	callstack 0
  1237                           
  1238                           ; 1 bytes @ 0x31
  1239   000032                     	ds	1
  1240   000033                     ___fldiv@aexp:
  1241                           	callstack 0
  1242   000033                     sprintf@fmt:
  1243                           	callstack 0
  1244                           
  1245                           ; 1 bytes @ 0x32
  1246   000033                     	ds	1
  1247   000034                     ?___fltol:
  1248                           	callstack 0
  1249   000034                     ___fltol@f1:
  1250                           	callstack 0
  1251                           
  1252                           ; 4 bytes @ 0x33
  1253   000034                     	ds	4
  1254   000038                     ??___fltol:
  1255   000038                     sprintf@ap:
  1256                           	callstack 0
  1257                           
  1258                           ; 1 bytes @ 0x37
  1259   000038                     	ds	1
  1260   000039                     sprintf@f:
  1261                           	callstack 0
  1262                           
  1263                           ; 12 bytes @ 0x38
  1264   000039                     	ds	3
  1265   00003C                     ___fltol@sign1:
  1266                           	callstack 0
  1267                           
  1268                           ; 1 bytes @ 0x3B
  1269   00003C                     	ds	1
  1270   00003D                     ___fltol@exp1:
  1271                           	callstack 0
  1272                           
  1273                           ; 1 bytes @ 0x3C
  1274   00003D                     	ds	1
  1275   00003E                     ?_convert_rgb2hue:
  1276                           	callstack 0
  1277   00003E                     convert_rgb2hue@cMax:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x3D
  1281   00003E                     	ds	1
  1282   00003F                     convert_rgb2hue@cCurr:
  1283                           	callstack 0
  1284                           
  1285                           ; 1 bytes @ 0x3E
  1286   00003F                     	ds	1
  1287   000040                     ??_convert_rgb2hue:
  1288                           
  1289                           ; 1 bytes @ 0x3F
  1290   000040                     	ds	2
  1291   000042                     ?_reading_hue:
  1292                           	callstack 0
  1293   000042                     reading_hue@cCurr:
  1294                           	callstack 0
  1295                           
  1296                           ; 1 bytes @ 0x41
  1297   000042                     	ds	2
  1298   000044                     ??_reading_hue:
  1299                           
  1300                           ; 1 bytes @ 0x43
  1301   000044                     	ds	1
  1302   000045                     send2USART@hue:
  1303                           	callstack 0
  1304                           
  1305                           ; 2 bytes @ 0x44
  1306   000045                     	ds	1
  1307   000046                     reading_hue@hue:
  1308                           	callstack 0
  1309                           
  1310                           ; 2 bytes @ 0x45
  1311   000046                     	ds	1
  1312   000047                     calibration_routine@cCal:
  1313                           	callstack 0
  1314                           
  1315                           ; 1 bytes @ 0x46
  1316   000047                     	ds	1
  1317   000048                     ??_calibration_routine:
  1318                           
  1319                           ; 1 bytes @ 0x47
  1320   000048                     	ds	2
  1321   00004A                     ??_main:
  1322                           
  1323                           ; 1 bytes @ 0x49
  1324   00004A                     	ds	2
  1325   00004C                     main@hue:
  1326                           	callstack 0
  1327                           
  1328                           ; 2 bytes @ 0x4B
  1329   00004C                     	ds	2
  1330   00004E                     main@clear_current:
  1331                           	callstack 0
  1332                           
  1333                           ; 4 bytes @ 0x4D
  1334   00004E                     	ds	4
  1335   000052                     main@clear_max:
  1336                           	callstack 0
  1337                           
  1338                           ; 4 bytes @ 0x51
  1339   000052                     	ds	4
  1340   000056                     main@path_step:
  1341                           	callstack 0
  1342                           
  1343                           ; 2 bytes @ 0x55
  1344   000056                     	ds	2
  1345   000058                     main@clear_norm:
  1346                           	callstack 0
  1347                           
  1348                           ; 2 bytes @ 0x57
  1349   000058                     	ds	2
  1350                           
  1351 ;;
  1352 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1353 ;;
  1354 ;; *************** function _main *****************
  1355 ;; Defined at:
  1356 ;;		line 29 in file "main.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  white           2    0        unsigned int 
  1361 ;;  clear_max       4   81[COMRAM] float 
  1362 ;;  clear_curren    4   77[COMRAM] float 
  1363 ;;  clear_norm      2   87[COMRAM] unsigned int 
  1364 ;;  path_step       2   85[COMRAM] unsigned int 
  1365 ;;  hue             2   75[COMRAM] unsigned int 
  1366 ;;  PWMcycle        2    0        unsigned int 
  1367 ;;  ambient         2    0        unsigned int 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1381 ;;Total ram usage:       16 bytes
  1382 ;; Hardware stack levels required when called: 11
  1383 ;; This function calls:
  1384 ;;		_ADC_init
  1385 ;;		_Timer0_init
  1386 ;;		___fldiv
  1387 ;;		___flmul
  1388 ;;		___fltol
  1389 ;;		___xxtofl
  1390 ;;		_calibration_routine
  1391 ;;		_color_click_init
  1392 ;;		_color_read_Clear
  1393 ;;		_decision
  1394 ;;		_fullSpeedAhead
  1395 ;;		_get16bitTMR0val
  1396 ;;		_initDCmotorsPWM
  1397 ;;		_initUSART4
  1398 ;;		_reading_hue
  1399 ;;		_returnHome
  1400 ;;		_send2USART
  1401 ;;		_stop
  1402 ;; This function is called by:
  1403 ;;		Startup code after reset
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text0
  1408   001B18                     __ptext0:
  1409                           	callstack 0
  1410   001B18                     _main:
  1411                           	callstack 20
  1412   001B18                     
  1413                           ;main.c: 31:     ADC_init();
  1414   001B18  EC5A  F024         	call	_ADC_init	;wreg free
  1415   001B1C                     
  1416                           ;main.c: 32:     color_click_init();
  1417   001B1C  ECFD  F021         	call	_color_click_init	;wreg free
  1418   001B20                     
  1419                           ;main.c: 33:     initUSART4();
  1420   001B20  EC3C  F024         	call	_initUSART4	;wreg free
  1421   001B24                     
  1422                           ;main.c: 34:     Timer0_init();
  1423   001B24  ECD8  F023         	call	_Timer0_init	;wreg free
  1424   001B28                     
  1425                           ;main.c: 38:     initDCmotorsPWM(PWMcycle);
  1426   001B28  0E00               	movlw	0
  1427   001B2A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1428   001B2C  0E63               	movlw	99
  1429   001B2E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1430   001B30  ECA4  F01E         	call	_initDCmotorsPWM	;wreg free
  1431   001B34                     
  1432                           ;main.c: 41:     motorL.power = 0;
  1433   001B34  0E00               	movlw	0
  1434   001B36  0100               	movlb	0	; () banked
  1435   001B38  6FE6               	movwf	_motorL& (0+255),b
  1436   001B3A                     
  1437                           ; BSR set to: 0
  1438                           ;main.c: 42:     motorL.direction = 1;
  1439   001B3A  0E01               	movlw	1
  1440   001B3C  6FE7               	movwf	(_motorL+1)& (0+255),b
  1441   001B3E                     
  1442                           ; BSR set to: 0
  1443                           ;main.c: 43:     motorL.brakemode = 1;
  1444   001B3E  0E01               	movlw	1
  1445   001B40  6FE8               	movwf	(_motorL+2)& (0+255),b
  1446   001B42                     
  1447                           ; BSR set to: 0
  1448                           ;main.c: 44:     motorL.PWMperiod = PWMcycle;
  1449   001B42  0E00               	movlw	0
  1450   001B44  6FEA               	movwf	(_motorL+4)& (0+255),b
  1451   001B46  0E63               	movlw	99
  1452   001B48  6FE9               	movwf	(_motorL+3)& (0+255),b
  1453   001B4A                     
  1454                           ; BSR set to: 0
  1455                           ;main.c: 45:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1456   001B4A  0EAA               	movlw	170
  1457   001B4C  6FEB               	movwf	(_motorL+5)& (0+255),b
  1458   001B4E  0E0F               	movlw	15
  1459   001B50  6FEC               	movwf	(_motorL+6)& (0+255),b
  1460   001B52                     
  1461                           ; BSR set to: 0
  1462                           ;main.c: 46:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1463   001B52  0EA6               	movlw	166
  1464   001B54  6FED               	movwf	(_motorL+7)& (0+255),b
  1465   001B56  0E0F               	movlw	15
  1466   001B58  6FEE               	movwf	(_motorL+8)& (0+255),b
  1467   001B5A                     
  1468                           ; BSR set to: 0
  1469                           ;main.c: 48:     motorR.power = 0;
  1470   001B5A  0E00               	movlw	0
  1471   001B5C  6FDD               	movwf	_motorR& (0+255),b
  1472   001B5E                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 49:     motorR.direction = 1;
  1475   001B5E  0E01               	movlw	1
  1476   001B60  6FDE               	movwf	(_motorR+1)& (0+255),b
  1477   001B62                     
  1478                           ; BSR set to: 0
  1479                           ;main.c: 50:     motorR.brakemode = 1;
  1480   001B62  0E01               	movlw	1
  1481   001B64  6FDF               	movwf	(_motorR+2)& (0+255),b
  1482   001B66                     
  1483                           ; BSR set to: 0
  1484                           ;main.c: 51:     motorR.PWMperiod = PWMcycle;
  1485   001B66  0E00               	movlw	0
  1486   001B68  6FE1               	movwf	(_motorR+4)& (0+255),b
  1487   001B6A  0E63               	movlw	99
  1488   001B6C  6FE0               	movwf	(_motorR+3)& (0+255),b
  1489   001B6E                     
  1490                           ; BSR set to: 0
  1491                           ;main.c: 52:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1492   001B6E  0E25               	movlw	37
  1493   001B70  6FE2               	movwf	(_motorR+5)& (0+255),b
  1494   001B72  0E0F               	movlw	15
  1495   001B74  6FE3               	movwf	(_motorR+6)& (0+255),b
  1496   001B76                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 53:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1499   001B76  0E21               	movlw	33
  1500   001B78  6FE4               	movwf	(_motorR+7)& (0+255),b
  1501   001B7A  0E0F               	movlw	15
  1502   001B7C  6FE5               	movwf	(_motorR+8)& (0+255),b
  1503   001B7E                     
  1504                           ; BSR set to: 0
  1505                           ;main.c: 56:     LATDbits.LATD7=0;
  1506   001B7E  9E7C               	bcf	124,7,c	;volatile
  1507   001B80                     
  1508                           ; BSR set to: 0
  1509                           ;main.c: 57:     TRISDbits.TRISD7=0;
  1510   001B80  9E84               	bcf	132,7,c	;volatile
  1511   001B82                     
  1512                           ; BSR set to: 0
  1513                           ;main.c: 64:     TRISGbits.TRISG0 = 0;
  1514   001B82  9087               	bcf	135,0,c	;volatile
  1515   001B84                     
  1516                           ; BSR set to: 0
  1517                           ;main.c: 65:     LATGbits.LATG0 = 0;
  1518   001B84  907F               	bcf	127,0,c	;volatile
  1519   001B86                     
  1520                           ; BSR set to: 0
  1521                           ;main.c: 66:     TRISEbits.TRISE7 = 0;
  1522   001B86  9E85               	bcf	133,7,c	;volatile
  1523   001B88                     
  1524                           ; BSR set to: 0
  1525                           ;main.c: 67:     LATEbits.LATE7 = 0;
  1526   001B88  9E7D               	bcf	125,7,c	;volatile
  1527   001B8A                     
  1528                           ; BSR set to: 0
  1529                           ;main.c: 68:     TRISAbits.TRISA3 = 0;
  1530   001B8A  9681               	bcf	129,3,c	;volatile
  1531   001B8C                     
  1532                           ; BSR set to: 0
  1533                           ;main.c: 69:     LATAbits.LATA3 = 0;
  1534   001B8C  9679               	bcf	121,3,c	;volatile
  1535   001B8E                     
  1536                           ; BSR set to: 0
  1537                           ;main.c: 74:     TRISFbits.TRISF3=1;
  1538   001B8E  8686               	bsf	134,3,c	;volatile
  1539   001B90                     
  1540                           ; BSR set to: 0
  1541                           ;main.c: 75:     ANSELFbits.ANSELF3=0;
  1542   001B90  010E               	movlb	14	; () banked
  1543   001B92  97B4               	bcf	180,3,b	;volatile
  1544   001B94                     
  1545                           ; BSR set to: 14
  1546                           ;main.c: 76:     TRISFbits.TRISF2 = 1;
  1547   001B94  8486               	bsf	134,2,c	;volatile
  1548   001B96                     
  1549                           ; BSR set to: 14
  1550                           ;main.c: 77:     LATFbits.LATF2 = 0;
  1551   001B96  947E               	bcf	126,2,c	;volatile
  1552   001B98                     
  1553                           ; BSR set to: 14
  1554                           ;main.c: 78:     ANSELFbits.ANSELF2 = 0;
  1555   001B98  95B4               	bcf	180,2,b	;volatile
  1556   001B9A                     
  1557                           ; BSR set to: 14
  1558                           ;main.c: 81:     TRISGbits.TRISG1 = 0;
  1559   001B9A  9287               	bcf	135,1,c	;volatile
  1560   001B9C                     
  1561                           ; BSR set to: 14
  1562                           ;main.c: 82:     LATGbits.LATG1 = 0;
  1563   001B9C  927F               	bcf	127,1,c	;volatile
  1564   001B9E                     
  1565                           ; BSR set to: 14
  1566                           ;main.c: 88:     TRISHbits.TRISH3 = 0;
  1567   001B9E  9688               	bcf	136,3,c	;volatile
  1568   001BA0                     
  1569                           ; BSR set to: 14
  1570                           ;main.c: 89:     LATHbits.LATH3 = 1;
  1571   001BA0  8680               	bsf	128,3,c	;volatile
  1572   001BA2                     
  1573                           ; BSR set to: 14
  1574                           ;main.c: 90:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1575   001BA2  0E19               	movlw	25
  1576   001BA4  6E4B               	movwf	(??_main+1)^0,c
  1577   001BA6  0E5A               	movlw	90
  1578   001BA8  6E4A               	movwf	??_main^0,c
  1579   001BAA  0EB2               	movlw	178
  1580   001BAC                     u6927:
  1581   001BAC  2EE8               	decfsz	wreg,f,c
  1582   001BAE  D7FE               	bra	u6927
  1583   001BB0  2E4A               	decfsz	??_main^0,f,c
  1584   001BB2  D7FC               	bra	u6927
  1585   001BB4  2E4B               	decfsz	(??_main+1)^0,f,c
  1586   001BB6  D7FA               	bra	u6927
  1587   001BB8                     
  1588                           ;main.c: 91:     LATHbits.LATH3 = 0;
  1589   001BB8  9680               	bcf	128,3,c	;volatile
  1590   001BBA                     
  1591                           ;main.c: 95:     calibration_routine(&colorCalibration);
  1592   001BBA  0ED3               	movlw	low _colorCalibration
  1593   001BBC  6E47               	movwf	calibration_routine@cCal^0,c
  1594   001BBE  ECC9  F014         	call	_calibration_routine	;wreg free
  1595   001BC2                     
  1596                           ;main.c: 96:     unsigned int clear_norm;;main.c: 97:     unsigned int path_step = 0;
  1597   001BC2  0E00               	movlw	0
  1598   001BC4  6E57               	movwf	(main@path_step+1)^0,c
  1599   001BC6  0E00               	movlw	0
  1600   001BC8  6E56               	movwf	main@path_step^0,c
  1601   001BCA                     l7146:
  1602                           
  1603                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1604   001BCA  807F               	bsf	127,0,c	;volatile
  1605   001BCC                     
  1606                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1607   001BCC  8E7D               	bsf	125,7,c	;volatile
  1608   001BCE                     
  1609                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1610   001BCE  8679               	bsf	121,3,c	;volatile
  1611   001BD0                     
  1612                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1613   001BD0  0EE6               	movlw	low _motorL
  1614   001BD2  6E02               	movwf	fullSpeedAhead@mL^0,c
  1615   001BD4  0EDD               	movlw	low _motorR
  1616   001BD6  6E03               	movwf	fullSpeedAhead@mR^0,c
  1617   001BD8  EC88  F024         	call	_fullSpeedAhead	;wreg free
  1618   001BDC                     
  1619                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1620   001BDC  8ED5               	bsf	213,7,c	;volatile
  1621   001BDE                     
  1622                           ;main.c: 118:         colorCurrent.clear = color_read_Clear();
  1623   001BDE  ECAB  F020         	call	_color_read_Clear	;wreg free
  1624   001BE2  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1625   001BE6  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1626   001BEA                     
  1627                           ;main.c: 120:         clear_current = colorCurrent.clear;
  1628   001BEA  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1629   001BEE  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1630   001BF2  6A04               	clrf	(___xxtofl@val+2)^0,c
  1631   001BF4  6A05               	clrf	(___xxtofl@val+3)^0,c
  1632   001BF6  0E00               	movlw	0
  1633   001BF8  ECEC  F015         	call	___xxtofl
  1634   001BFC  C002  F04E         	movff	?___xxtofl,main@clear_current
  1635   001C00  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1636   001C04  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1637   001C08  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1638   001C0C                     
  1639                           ;main.c: 121:         clear_max = colorCalibration.clear;
  1640   001C0C  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1641   001C10  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1642   001C14  6A04               	clrf	(___xxtofl@val+2)^0,c
  1643   001C16  6A05               	clrf	(___xxtofl@val+3)^0,c
  1644   001C18  0E00               	movlw	0
  1645   001C1A  ECEC  F015         	call	___xxtofl
  1646   001C1E  C002  F052         	movff	?___xxtofl,main@clear_max
  1647   001C22  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1648   001C26  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1649   001C2A  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1650   001C2E                     
  1651                           ;main.c: 122:         clear_norm = clear_current*100/clear_max;
  1652   001C2E  C052  F01F         	movff	main@clear_max,___fldiv@a
  1653   001C32  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1654   001C36  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1655   001C3A  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1656   001C3E  0E00               	movlw	0
  1657   001C40  6E06               	movwf	___flmul@a^0,c
  1658   001C42  0E00               	movlw	0
  1659   001C44  6E07               	movwf	(___flmul@a+1)^0,c
  1660   001C46  0EC8               	movlw	200
  1661   001C48  6E08               	movwf	(___flmul@a+2)^0,c
  1662   001C4A  0E42               	movlw	66
  1663   001C4C  6E09               	movwf	(___flmul@a+3)^0,c
  1664   001C4E  C04E  F002         	movff	main@clear_current,___flmul@b
  1665   001C52  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1666   001C56  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1667   001C5A  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1668   001C5E  ECC1  F00F         	call	___flmul	;wreg free
  1669   001C62  C002  F01B         	movff	?___flmul,___fldiv@b
  1670   001C66  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1671   001C6A  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1672   001C6E  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1673   001C72  ECD6  F011         	call	___fldiv	;wreg free
  1674   001C76  C01B  F034         	movff	?___fldiv,___fltol@f1
  1675   001C7A  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1676   001C7E  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1677   001C82  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1678   001C86  ECAE  F01A         	call	___fltol	;wreg free
  1679   001C8A  C034  F058         	movff	?___fltol,main@clear_norm
  1680   001C8E  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1681   001C92                     l7164:
  1682                           
  1683                           ;main.c: 125:         send2USART(clear_norm);
  1684   001C92  C058  F045         	movff	main@clear_norm,send2USART@hue
  1685   001C96  C059  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1686   001C9A  EC4B  F024         	call	_send2USART	;wreg free
  1687                           
  1688                           ;main.c: 127:         while(clear_norm<8){
  1689   001C9E  EFAD  F00E         	goto	l7172
  1690   001CA2                     l7166:
  1691                           
  1692                           ;main.c: 128:             (colorCurrent.clear) = color_read_Clear();
  1693   001CA2  ECAB  F020         	call	_color_read_Clear	;wreg free
  1694   001CA6  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1695   001CAA  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1696                           
  1697                           ;main.c: 129:             clear_current = colorCurrent.clear;
  1698   001CAE  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1699   001CB2  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1700   001CB6  6A04               	clrf	(___xxtofl@val+2)^0,c
  1701   001CB8  6A05               	clrf	(___xxtofl@val+3)^0,c
  1702   001CBA  0E00               	movlw	0
  1703   001CBC  ECEC  F015         	call	___xxtofl
  1704   001CC0  C002  F04E         	movff	?___xxtofl,main@clear_current
  1705   001CC4  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1706   001CC8  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1707   001CCC  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1708                           
  1709                           ;main.c: 130:             clear_max = colorCalibration.clear;
  1710   001CD0  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1711   001CD4  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1712   001CD8  6A04               	clrf	(___xxtofl@val+2)^0,c
  1713   001CDA  6A05               	clrf	(___xxtofl@val+3)^0,c
  1714   001CDC  0E00               	movlw	0
  1715   001CDE  ECEC  F015         	call	___xxtofl
  1716   001CE2  C002  F052         	movff	?___xxtofl,main@clear_max
  1717   001CE6  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1718   001CEA  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1719   001CEE  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1720   001CF2                     
  1721                           ;main.c: 131:             clear_norm = clear_current*100/clear_max;
  1722   001CF2  C052  F01F         	movff	main@clear_max,___fldiv@a
  1723   001CF6  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1724   001CFA  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1725   001CFE  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1726   001D02  0E00               	movlw	0
  1727   001D04  6E06               	movwf	___flmul@a^0,c
  1728   001D06  0E00               	movlw	0
  1729   001D08  6E07               	movwf	(___flmul@a+1)^0,c
  1730   001D0A  0EC8               	movlw	200
  1731   001D0C  6E08               	movwf	(___flmul@a+2)^0,c
  1732   001D0E  0E42               	movlw	66
  1733   001D10  6E09               	movwf	(___flmul@a+3)^0,c
  1734   001D12  C04E  F002         	movff	main@clear_current,___flmul@b
  1735   001D16  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1736   001D1A  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1737   001D1E  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1738   001D22  ECC1  F00F         	call	___flmul	;wreg free
  1739   001D26  C002  F01B         	movff	?___flmul,___fldiv@b
  1740   001D2A  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1741   001D2E  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1742   001D32  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1743   001D36  ECD6  F011         	call	___fldiv	;wreg free
  1744   001D3A  C01B  F034         	movff	?___fldiv,___fltol@f1
  1745   001D3E  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1746   001D42  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1747   001D46  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1748   001D4A  ECAE  F01A         	call	___fltol	;wreg free
  1749   001D4E  C034  F058         	movff	?___fltol,main@clear_norm
  1750   001D52  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1751   001D56  EF49  F00E         	goto	l7164
  1752   001D5A                     l7172:
  1753                           
  1754                           ;main.c: 127:         while(clear_norm<8){
  1755   001D5A  5059               	movf	(main@clear_norm+1)^0,w,c
  1756   001D5C  E109               	bnz	u6850
  1757   001D5E  0E08               	movlw	8
  1758   001D60  5C58               	subwf	main@clear_norm^0,w,c
  1759   001D62  A0D8               	btfss	status,0,c
  1760   001D64  EFB6  F00E         	goto	u6851
  1761   001D68  EFB8  F00E         	goto	u6850
  1762   001D6C                     u6851:
  1763   001D6C  EF51  F00E         	goto	l7166
  1764   001D70                     u6850:
  1765   001D70                     
  1766                           ;main.c: 135:         T0CON0bits.T0EN=0;
  1767   001D70  9ED5               	bcf	213,7,c	;volatile
  1768   001D72                     
  1769                           ;main.c: 137:         stop(&motorL,&motorR);
  1770   001D72  0EE6               	movlw	low _motorL
  1771   001D74  6E14               	movwf	stop@mL^0,c
  1772   001D76  0EDD               	movlw	low _motorR
  1773   001D78  6E15               	movwf	stop@mR^0,c
  1774   001D7A  ECEC  F01E         	call	_stop	;wreg free
  1775   001D7E                     
  1776                           ;main.c: 140:         path_step = get16bitTMR0val(path_step);
  1777   001D7E  C056  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1778   001D82  C057  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1779   001D86  ECC3  F021         	call	_get16bitTMR0val	;wreg free
  1780   001D8A  C007  F056         	movff	?_get16bitTMR0val,main@path_step
  1781   001D8E  C008  F057         	movff	?_get16bitTMR0val+1,main@path_step+1
  1782   001D92                     
  1783                           ;main.c: 142:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1784   001D92  0E11               	movlw	17
  1785   001D94  6E4B               	movwf	(??_main+1)^0,c
  1786   001D96  0E3C               	movlw	60
  1787   001D98  6E4A               	movwf	??_main^0,c
  1788   001D9A  0ECB               	movlw	203
  1789   001D9C                     u6937:
  1790   001D9C  2EE8               	decfsz	wreg,f,c
  1791   001D9E  D7FE               	bra	u6937
  1792   001DA0  2E4A               	decfsz	??_main^0,f,c
  1793   001DA2  D7FC               	bra	u6937
  1794   001DA4  2E4B               	decfsz	(??_main+1)^0,f,c
  1795   001DA6  D7FA               	bra	u6937
  1796   001DA8  0000               	nop	
  1797   001DAA                     
  1798                           ;main.c: 145:         fullSpeedAhead(&motorL,&motorR);
  1799   001DAA  0EE6               	movlw	low _motorL
  1800   001DAC  6E02               	movwf	fullSpeedAhead@mL^0,c
  1801   001DAE  0EDD               	movlw	low _motorR
  1802   001DB0  6E03               	movwf	fullSpeedAhead@mR^0,c
  1803   001DB2  EC88  F024         	call	_fullSpeedAhead	;wreg free
  1804   001DB6                     
  1805                           ;main.c: 146:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1806   001DB6  0E19               	movlw	25
  1807   001DB8  6E4B               	movwf	(??_main+1)^0,c
  1808   001DBA  0E5A               	movlw	90
  1809   001DBC  6E4A               	movwf	??_main^0,c
  1810   001DBE  0EB2               	movlw	178
  1811   001DC0                     u6947:
  1812   001DC0  2EE8               	decfsz	wreg,f,c
  1813   001DC2  D7FE               	bra	u6947
  1814   001DC4  2E4A               	decfsz	??_main^0,f,c
  1815   001DC6  D7FC               	bra	u6947
  1816   001DC8  2E4B               	decfsz	(??_main+1)^0,f,c
  1817   001DCA  D7FA               	bra	u6947
  1818   001DCC                     
  1819                           ;main.c: 147:         stop(&motorL,&motorR);
  1820   001DCC  0EE6               	movlw	low _motorL
  1821   001DCE  6E14               	movwf	stop@mL^0,c
  1822   001DD0  0EDD               	movlw	low _motorR
  1823   001DD2  6E15               	movwf	stop@mR^0,c
  1824   001DD4  ECEC  F01E         	call	_stop	;wreg free
  1825   001DD8                     
  1826                           ;main.c: 148:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1827   001DD8  0E19               	movlw	25
  1828   001DDA  6E4B               	movwf	(??_main+1)^0,c
  1829   001DDC  0E5A               	movlw	90
  1830   001DDE  6E4A               	movwf	??_main^0,c
  1831   001DE0  0EB2               	movlw	178
  1832   001DE2                     u6957:
  1833   001DE2  2EE8               	decfsz	wreg,f,c
  1834   001DE4  D7FE               	bra	u6957
  1835   001DE6  2E4A               	decfsz	??_main^0,f,c
  1836   001DE8  D7FC               	bra	u6957
  1837   001DEA  2E4B               	decfsz	(??_main+1)^0,f,c
  1838   001DEC  D7FA               	bra	u6957
  1839   001DEE                     
  1840                           ;main.c: 150:         hue = reading_hue(&colorCurrent);
  1841   001DEE  0EC9               	movlw	low _colorCurrent
  1842   001DF0  6E42               	movwf	reading_hue@cCurr^0,c
  1843   001DF2  EC29  F01C         	call	_reading_hue	;wreg free
  1844   001DF6  C042  F04C         	movff	?_reading_hue,main@hue
  1845   001DFA  C043  F04D         	movff	?_reading_hue+1,main@hue+1
  1846   001DFE                     
  1847                           ;main.c: 152:         clear_current = colorCurrent.clear;
  1848   001DFE  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1849   001E02  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1850   001E06  6A04               	clrf	(___xxtofl@val+2)^0,c
  1851   001E08  6A05               	clrf	(___xxtofl@val+3)^0,c
  1852   001E0A  0E00               	movlw	0
  1853   001E0C  ECEC  F015         	call	___xxtofl
  1854   001E10  C002  F04E         	movff	?___xxtofl,main@clear_current
  1855   001E14  C003  F04F         	movff	?___xxtofl+1,main@clear_current+1
  1856   001E18  C004  F050         	movff	?___xxtofl+2,main@clear_current+2
  1857   001E1C  C005  F051         	movff	?___xxtofl+3,main@clear_current+3
  1858   001E20                     
  1859                           ;main.c: 153:         clear_max = colorCalibration.clear;
  1860   001E20  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1861   001E24  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1862   001E28  6A04               	clrf	(___xxtofl@val+2)^0,c
  1863   001E2A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1864   001E2C  0E00               	movlw	0
  1865   001E2E  ECEC  F015         	call	___xxtofl
  1866   001E32  C002  F052         	movff	?___xxtofl,main@clear_max
  1867   001E36  C003  F053         	movff	?___xxtofl+1,main@clear_max+1
  1868   001E3A  C004  F054         	movff	?___xxtofl+2,main@clear_max+2
  1869   001E3E  C005  F055         	movff	?___xxtofl+3,main@clear_max+3
  1870   001E42                     
  1871                           ;main.c: 154:         clear_norm = clear_current*100/clear_max;
  1872   001E42  C052  F01F         	movff	main@clear_max,___fldiv@a
  1873   001E46  C053  F020         	movff	main@clear_max+1,___fldiv@a+1
  1874   001E4A  C054  F021         	movff	main@clear_max+2,___fldiv@a+2
  1875   001E4E  C055  F022         	movff	main@clear_max+3,___fldiv@a+3
  1876   001E52  0E00               	movlw	0
  1877   001E54  6E06               	movwf	___flmul@a^0,c
  1878   001E56  0E00               	movlw	0
  1879   001E58  6E07               	movwf	(___flmul@a+1)^0,c
  1880   001E5A  0EC8               	movlw	200
  1881   001E5C  6E08               	movwf	(___flmul@a+2)^0,c
  1882   001E5E  0E42               	movlw	66
  1883   001E60  6E09               	movwf	(___flmul@a+3)^0,c
  1884   001E62  C04E  F002         	movff	main@clear_current,___flmul@b
  1885   001E66  C04F  F003         	movff	main@clear_current+1,___flmul@b+1
  1886   001E6A  C050  F004         	movff	main@clear_current+2,___flmul@b+2
  1887   001E6E  C051  F005         	movff	main@clear_current+3,___flmul@b+3
  1888   001E72  ECC1  F00F         	call	___flmul	;wreg free
  1889   001E76  C002  F01B         	movff	?___flmul,___fldiv@b
  1890   001E7A  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1891   001E7E  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1892   001E82  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1893   001E86  ECD6  F011         	call	___fldiv	;wreg free
  1894   001E8A  C01B  F034         	movff	?___fldiv,___fltol@f1
  1895   001E8E  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1896   001E92  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1897   001E96  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1898   001E9A  ECAE  F01A         	call	___fltol	;wreg free
  1899   001E9E  C034  F058         	movff	?___fltol,main@clear_norm
  1900   001EA2  C035  F059         	movff	?___fltol+1,main@clear_norm+1
  1901   001EA6                     
  1902                           ;main.c: 156:         if (clear_norm > 20){
  1903   001EA6  5059               	movf	(main@clear_norm+1)^0,w,c
  1904   001EA8  E109               	bnz	u6860
  1905   001EAA  0E15               	movlw	21
  1906   001EAC  5C58               	subwf	main@clear_norm^0,w,c
  1907   001EAE  A0D8               	btfss	status,0,c
  1908   001EB0  EF5C  F00F         	goto	u6861
  1909   001EB4  EF5E  F00F         	goto	u6860
  1910   001EB8                     u6861:
  1911   001EB8  EF76  F00F         	goto	l7204
  1912   001EBC                     u6860:
  1913   001EBC                     
  1914                           ;main.c: 157:             fullSpeedAhead(&motorL,&motorR);
  1915   001EBC  0EE6               	movlw	low _motorL
  1916   001EBE  6E02               	movwf	fullSpeedAhead@mL^0,c
  1917   001EC0  0EDD               	movlw	low _motorR
  1918   001EC2  6E03               	movwf	fullSpeedAhead@mR^0,c
  1919   001EC4  EC88  F024         	call	_fullSpeedAhead	;wreg free
  1920   001EC8                     
  1921                           ;main.c: 158:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1922   001EC8  0E09               	movlw	9
  1923   001ECA  6E4B               	movwf	(??_main+1)^0,c
  1924   001ECC  0E1E               	movlw	30
  1925   001ECE  6E4A               	movwf	??_main^0,c
  1926   001ED0  0EE4               	movlw	228
  1927   001ED2                     u6967:
  1928   001ED2  2EE8               	decfsz	wreg,f,c
  1929   001ED4  D7FE               	bra	u6967
  1930   001ED6  2E4A               	decfsz	??_main^0,f,c
  1931   001ED8  D7FC               	bra	u6967
  1932   001EDA  2E4B               	decfsz	(??_main+1)^0,f,c
  1933   001EDC  D7FA               	bra	u6967
  1934   001EDE  D000               	nop2	
  1935   001EE0                     
  1936                           ;main.c: 159:             stop(&motorL,&motorR);
  1937   001EE0  0EE6               	movlw	low _motorL
  1938   001EE2  6E14               	movwf	stop@mL^0,c
  1939   001EE4  0EDD               	movlw	low _motorR
  1940   001EE6  6E15               	movwf	stop@mR^0,c
  1941   001EE8  ECEC  F01E         	call	_stop	;wreg free
  1942   001EEC                     l7204:
  1943                           
  1944                           ;main.c: 161:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  1945   001EEC  5059               	movf	(main@clear_norm+1)^0,w,c
  1946   001EEE  E109               	bnz	u6870
  1947   001EF0  0E3D               	movlw	61
  1948   001EF2  5C58               	subwf	main@clear_norm^0,w,c
  1949   001EF4  A0D8               	btfss	status,0,c
  1950   001EF6  EF7F  F00F         	goto	u6871
  1951   001EFA  EF81  F00F         	goto	u6870
  1952   001EFE                     u6871:
  1953   001EFE  EF97  F00F         	goto	l331
  1954   001F02                     u6870:
  1955   001F02  0E2E               	movlw	46
  1956   001F04  5C4C               	subwf	main@hue^0,w,c
  1957   001F06  0E01               	movlw	1
  1958   001F08  584D               	subwfb	(main@hue+1)^0,w,c
  1959   001F0A  A0D8               	btfss	status,0,c
  1960   001F0C  EF8A  F00F         	goto	u6881
  1961   001F10  EF8C  F00F         	goto	u6880
  1962   001F14                     u6881:
  1963   001F14  EF9E  F00F         	goto	l7210
  1964   001F18                     u6880:
  1965   001F18  0E5B               	movlw	91
  1966   001F1A  5C4C               	subwf	main@hue^0,w,c
  1967   001F1C  0E01               	movlw	1
  1968   001F1E  584D               	subwfb	(main@hue+1)^0,w,c
  1969   001F20  B0D8               	btfsc	status,0,c
  1970   001F22  EF95  F00F         	goto	u6891
  1971   001F26  EF97  F00F         	goto	u6890
  1972   001F2A                     u6891:
  1973   001F2A  EF9E  F00F         	goto	l7210
  1974   001F2E                     u6890:
  1975   001F2E                     l331:
  1976   001F2E  A27F               	btfss	127,1,c	;volatile
  1977   001F30  EF9C  F00F         	goto	u6901
  1978   001F34  EF9E  F00F         	goto	u6900
  1979   001F38                     u6901:
  1980   001F38  EFAF  F00F         	goto	l7218
  1981   001F3C                     u6900:
  1982   001F3C                     l7210:
  1983   001F3C                     
  1984                           ;main.c: 164:             send2USART(white);
  1985   001F3C  0E00               	movlw	0
  1986   001F3E  6E46               	movwf	(send2USART@hue+1)^0,c
  1987   001F40  0E08               	movlw	8
  1988   001F42  6E45               	movwf	send2USART@hue^0,c
  1989   001F44  EC4B  F024         	call	_send2USART	;wreg free
  1990   001F48                     
  1991                           ;main.c: 165:             returnHome(&motorL, &motorR, path_step);
  1992   001F48  0EE6               	movlw	low _motorL
  1993   001F4A  6E22               	movwf	returnHome@mL^0,c
  1994   001F4C  0EDD               	movlw	low _motorR
  1995   001F4E  6E23               	movwf	returnHome@mR^0,c
  1996   001F50  C056  F024         	movff	main@path_step,returnHome@path_step
  1997   001F54  C057  F025         	movff	main@path_step+1,returnHome@path_step+1
  1998   001F58  ECA0  F019         	call	_returnHome	;wreg free
  1999   001F5C                     
  2000                           ;main.c: 166:             LATGbits.LATG1 = 0;
  2001   001F5C  927F               	bcf	127,1,c	;volatile
  2002   001F5E                     l7218:
  2003                           
  2004                           ;main.c: 169:         path_step = decision(hue, path_step);
  2005   001F5E  C04C  F021         	movff	main@hue,decision@hue
  2006   001F62  C04D  F022         	movff	main@hue+1,decision@hue+1
  2007   001F66  C056  F023         	movff	main@path_step,decision@path_step
  2008   001F6A  C057  F024         	movff	main@path_step+1,decision@path_step+1
  2009   001F6E  ECA3  F013         	call	_decision	;wreg free
  2010   001F72  C021  F056         	movff	?_decision,main@path_step
  2011   001F76  C022  F057         	movff	?_decision+1,main@path_step+1
  2012   001F7A  EFE5  F00D         	goto	l7146
  2013   001F7E  EF1D  F000         	goto	start
  2014   001F82                     __end_of_main:
  2015                           	callstack 0
  2016                           
  2017 ;; *************** function _returnHome *****************
  2018 ;; Defined at:
  2019 ;;		line 76 in file "return_func.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  mL              1   33[COMRAM] PTR struct DC_motor
  2022 ;;		 -> motorL(9), 
  2023 ;;  mR              1   34[COMRAM] PTR struct DC_motor
  2024 ;;		 -> motorR(9), 
  2025 ;;  path_step       2   35[COMRAM] unsigned int 
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  time_ms         4   37[COMRAM] long 
  2028 ;;  action_turn     1   41[COMRAM] unsigned char 
  2029 ;;  i               2   42[COMRAM] unsigned int 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2039 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2040 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2042 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2043 ;;Total ram usage:       11 bytes
  2044 ;; Hardware stack levels used: 1
  2045 ;; Hardware stack levels required when called: 6
  2046 ;; This function calls:
  2047 ;;		___aldiv
  2048 ;;		___lmul
  2049 ;;		_moveWhite
  2050 ;;		_reverseStraight
  2051 ;;		_reverseTurn
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text1
  2058   003340                     __ptext1:
  2059                           	callstack 0
  2060   003340                     _returnHome:
  2061                           	callstack 24
  2062   003340                     
  2063                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  2064   003340  907F               	bcf	127,0,c	;volatile
  2065                           
  2066                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  2067   003342  9E7D               	bcf	125,7,c	;volatile
  2068                           
  2069                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  2070   003344  9679               	bcf	121,3,c	;volatile
  2071   003346                     
  2072                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  2073   003346  0EE6               	movlw	low _motorL
  2074   003348  6E1D               	movwf	moveWhite@mL^0,c
  2075   00334A  0EDD               	movlw	low _motorR
  2076   00334C  6E1E               	movwf	moveWhite@mR^0,c
  2077   00334E  EC4B  F022         	call	_moveWhite	;wreg free
  2078   003352                     
  2079                           ;return_func.c: 85:     if (path_step > 0) {
  2080   003352  5024               	movf	returnHome@path_step^0,w,c
  2081   003354  1025               	iorwf	(returnHome@path_step+1)^0,w,c
  2082   003356  B4D8               	btfsc	status,2,c
  2083   003358  EFB0  F019         	goto	u6821
  2084   00335C  EFB2  F019         	goto	u6820
  2085   003360                     u6821:
  2086   003360  EF26  F01A         	goto	l723
  2087   003364                     u6820:
  2088   003364                     
  2089                           ;return_func.c: 86:         for (unsigned int i = path_step - 1; ; i--) {
  2090   003364  0EFF               	movlw	255
  2091   003366  2424               	addwf	returnHome@path_step^0,w,c
  2092   003368  6E2B               	movwf	returnHome@i^0,c
  2093   00336A  0EFF               	movlw	255
  2094   00336C  2025               	addwfc	(returnHome@path_step+1)^0,w,c
  2095   00336E  6E2C               	movwf	(returnHome@i+1)^0,c
  2096   003370                     l7052:
  2097                           
  2098                           ;return_func.c: 88:             long time_ms = time[i]*65535*4*8192/64000000;
  2099   003370  90D8               	bcf	status,0,c
  2100   003372  342B               	rlcf	returnHome@i^0,w,c
  2101   003374  6ED9               	movwf	fsr2l,c
  2102   003376  342C               	rlcf	(returnHome@i+1)^0,w,c
  2103   003378  6EDA               	movwf	fsr2h,c
  2104   00337A  0E00               	movlw	low _time
  2105   00337C  26D9               	addwf	fsr2l,f,c
  2106   00337E  0E02               	movlw	high _time
  2107   003380  22DA               	addwfc	fsr2h,f,c
  2108   003382  CFDE F002          	movff	postinc2,___lmul@multiplier
  2109   003386  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2110   00338A  0E00               	movlw	0
  2111   00338C  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2112   00338E  0EFF               	movlw	-1
  2113   003390  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2114   003392  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2115   003394  0E00               	movlw	0
  2116   003396  6E06               	movwf	___lmul@multiplicand^0,c
  2117   003398  0E80               	movlw	128
  2118   00339A  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2119   00339C  0EFF               	movlw	255
  2120   00339E  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2121   0033A0  0E7F               	movlw	127
  2122   0033A2  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2123   0033A4  EC26  F020         	call	___lmul	;wreg free
  2124   0033A8  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2125   0033AC  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2126   0033B0  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2127   0033B4  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2128   0033B8  0E00               	movlw	0
  2129   0033BA  6E12               	movwf	___aldiv@divisor^0,c
  2130   0033BC  0E90               	movlw	144
  2131   0033BE  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2132   0033C0  0ED0               	movlw	208
  2133   0033C2  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2134   0033C4  0E03               	movlw	3
  2135   0033C6  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2136   0033C8  EC28  F01A         	call	___aldiv	;wreg free
  2137   0033CC  C00E  F026         	movff	?___aldiv,returnHome@time_ms
  2138   0033D0  C00F  F027         	movff	?___aldiv+1,returnHome@time_ms+1
  2139   0033D4  C010  F028         	movff	?___aldiv+2,returnHome@time_ms+2
  2140   0033D8  C011  F029         	movff	?___aldiv+3,returnHome@time_ms+3
  2141   0033DC                     
  2142                           ;return_func.c: 89:             char action_turn = action[i];
  2143   0033DC  0E3C               	movlw	low _action
  2144   0033DE  242B               	addwf	returnHome@i^0,w,c
  2145   0033E0  6ED9               	movwf	fsr2l,c
  2146   0033E2  0E01               	movlw	high _action
  2147   0033E4  202C               	addwfc	(returnHome@i+1)^0,w,c
  2148   0033E6  6EDA               	movwf	fsr2h,c
  2149   0033E8  50DF               	movf	indf2,w,c
  2150   0033EA  6E2A               	movwf	returnHome@action_turn^0,c
  2151   0033EC                     
  2152                           ;return_func.c: 91:             if (action_turn == 0) {
  2153   0033EC  502A               	movf	returnHome@action_turn^0,w,c
  2154   0033EE  A4D8               	btfss	status,2,c
  2155   0033F0  EFFC  F019         	goto	u6831
  2156   0033F4  EFFE  F019         	goto	u6830
  2157   0033F8                     u6831:
  2158   0033F8  EF0E  F01A         	goto	l7060
  2159   0033FC                     u6830:
  2160   0033FC                     
  2161                           ;return_func.c: 92:                 reverseStraight(mL, mR, time_ms);
  2162   0033FC  C022  F017         	movff	returnHome@mL,reverseStraight@mL
  2163   003400  C023  F018         	movff	returnHome@mR,reverseStraight@mR
  2164   003404  C026  F019         	movff	returnHome@time_ms,reverseStraight@time_ms
  2165   003408  C027  F01A         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2166   00340C  C028  F01B         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2167   003410  C029  F01C         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2168   003414  ECB3  F01B         	call	_reverseStraight	;wreg free
  2169                           
  2170                           ;return_func.c: 93:             } else {
  2171   003418  EF16  F01A         	goto	l7062
  2172   00341C                     l7060:
  2173                           
  2174                           ;return_func.c: 94:                 reverseTurn(mL, mR, action_turn);
  2175   00341C  C022  F01D         	movff	returnHome@mL,reverseTurn@mL
  2176   003420  C023  F01E         	movff	returnHome@mR,reverseTurn@mR
  2177   003424  C02A  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2178   003428  EC46  F018         	call	_reverseTurn	;wreg free
  2179   00342C                     l7062:
  2180                           
  2181                           ;return_func.c: 97:             if (i == 0) break;
  2182   00342C  502B               	movf	returnHome@i^0,w,c
  2183   00342E  102C               	iorwf	(returnHome@i+1)^0,w,c
  2184   003430  A4D8               	btfss	status,2,c
  2185   003432  EF1D  F01A         	goto	u6841
  2186   003436  EF1F  F01A         	goto	u6840
  2187   00343A                     u6841:
  2188   00343A  EF21  F01A         	goto	l7066
  2189   00343E                     u6840:
  2190   00343E  EF26  F01A         	goto	l723
  2191   003442                     l7066:
  2192                           
  2193                           ;return_func.c: 98:         }
  2194   003442  062B               	decf	returnHome@i^0,f,c
  2195   003444  A0D8               	btfss	status,0,c
  2196   003446  062C               	decf	(returnHome@i+1)^0,f,c
  2197   003448  EFB8  F019         	goto	l7052
  2198   00344C                     l723:
  2199   00344C  0003               	sleep		;# 
  2200   00344E  0012               	return		;funcret
  2201   003450                     __end_of_returnHome:
  2202                           	callstack 0
  2203                           
  2204 ;; *************** function _reverseTurn *****************
  2205 ;; Defined at:
  2206 ;;		line 23 in file "return_func.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2209 ;;		 -> motorL(9), 
  2210 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2211 ;;		 -> motorR(9), 
  2212 ;;  actionStep      1   30[COMRAM] unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2224 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;Total ram usage:        5 bytes
  2229 ;; Hardware stack levels used: 1
  2230 ;; Hardware stack levels required when called: 5
  2231 ;; This function calls:
  2232 ;;		_backHalf
  2233 ;;		_left135
  2234 ;;		_left90
  2235 ;;		_right135
  2236 ;;		_right90
  2237 ;;		_turn180
  2238 ;; This function is called by:
  2239 ;;		_returnHome
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text2
  2244   00308C                     __ptext2:
  2245                           	callstack 0
  2246   00308C                     _reverseTurn:
  2247                           	callstack 24
  2248   00308C                     
  2249                           ;return_func.c: 24:     if (actionStep == 49) {
  2250   00308C  0E31               	movlw	49
  2251   00308E  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2252   003090  A4D8               	btfss	status,2,c
  2253   003092  EF4D  F018         	goto	u6451
  2254   003096  EF4F  F018         	goto	u6450
  2255   00309A                     u6451:
  2256   00309A  EF69  F018         	goto	l6652
  2257   00309E                     u6450:
  2258   00309E                     
  2259                           ;return_func.c: 25:         backHalf(mL,mR);
  2260   00309E  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2261   0030A2  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2262   0030A6  ECC0  F023         	call	_backHalf	;wreg free
  2263   0030AA                     
  2264                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2265   0030AA  0E29               	movlw	41
  2266   0030AC  6E21               	movwf	(??_reverseTurn+1)^0,c
  2267   0030AE  0E96               	movlw	150
  2268   0030B0  6E20               	movwf	??_reverseTurn^0,c
  2269   0030B2  0E7F               	movlw	127
  2270   0030B4                     u6977:
  2271   0030B4  2EE8               	decfsz	wreg,f,c
  2272   0030B6  D7FE               	bra	u6977
  2273   0030B8  2E20               	decfsz	??_reverseTurn^0,f,c
  2274   0030BA  D7FC               	bra	u6977
  2275   0030BC  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2276   0030BE  D7FA               	bra	u6977
  2277   0030C0  0000               	nop	
  2278   0030C2                     
  2279                           ;return_func.c: 27:         left90(mL,mR);
  2280   0030C2  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2281   0030C6  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2282   0030CA  ECA8  F023         	call	_left90	;wreg free
  2283                           
  2284                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2285   0030CE  EFF5  F018         	goto	l706
  2286   0030D2                     l6652:
  2287   0030D2  0E02               	movlw	2
  2288   0030D4  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2289   0030D6  A4D8               	btfss	status,2,c
  2290   0030D8  EF70  F018         	goto	u6461
  2291   0030DC  EF72  F018         	goto	u6460
  2292   0030E0                     u6461:
  2293   0030E0  EF8C  F018         	goto	l6660
  2294   0030E4                     u6460:
  2295   0030E4                     
  2296                           ;return_func.c: 30:         backHalf(mL,mR);
  2297   0030E4  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2298   0030E8  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2299   0030EC  ECC0  F023         	call	_backHalf	;wreg free
  2300   0030F0                     
  2301                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2302   0030F0  0E29               	movlw	41
  2303   0030F2  6E21               	movwf	(??_reverseTurn+1)^0,c
  2304   0030F4  0E96               	movlw	150
  2305   0030F6  6E20               	movwf	??_reverseTurn^0,c
  2306   0030F8  0E7F               	movlw	127
  2307   0030FA                     u6987:
  2308   0030FA  2EE8               	decfsz	wreg,f,c
  2309   0030FC  D7FE               	bra	u6987
  2310   0030FE  2E20               	decfsz	??_reverseTurn^0,f,c
  2311   003100  D7FC               	bra	u6987
  2312   003102  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2313   003104  D7FA               	bra	u6987
  2314   003106  0000               	nop	
  2315   003108                     
  2316                           ;return_func.c: 32:         right90(mL,mR);
  2317   003108  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2318   00310C  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2319   003110  EC90  F023         	call	_right90	;wreg free
  2320                           
  2321                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2322   003114  EFF5  F018         	goto	l706
  2323   003118                     l6660:
  2324   003118  0E03               	movlw	3
  2325   00311A  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2326   00311C  A4D8               	btfss	status,2,c
  2327   00311E  EF93  F018         	goto	u6471
  2328   003122  EF95  F018         	goto	u6470
  2329   003126                     u6471:
  2330   003126  EFAF  F018         	goto	l6668
  2331   00312A                     u6470:
  2332   00312A                     
  2333                           ;return_func.c: 35:          backHalf(mL,mR);
  2334   00312A  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2335   00312E  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2336   003132  ECC0  F023         	call	_backHalf	;wreg free
  2337   003136                     
  2338                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2339   003136  0E29               	movlw	41
  2340   003138  6E21               	movwf	(??_reverseTurn+1)^0,c
  2341   00313A  0E96               	movlw	150
  2342   00313C  6E20               	movwf	??_reverseTurn^0,c
  2343   00313E  0E7F               	movlw	127
  2344   003140                     u6997:
  2345   003140  2EE8               	decfsz	wreg,f,c
  2346   003142  D7FE               	bra	u6997
  2347   003144  2E20               	decfsz	??_reverseTurn^0,f,c
  2348   003146  D7FC               	bra	u6997
  2349   003148  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2350   00314A  D7FA               	bra	u6997
  2351   00314C  0000               	nop	
  2352   00314E                     
  2353                           ;return_func.c: 37:         turn180(mL,mR);
  2354   00314E  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2355   003152  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2356   003156  EC5E  F023         	call	_turn180	;wreg free
  2357                           
  2358                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2359   00315A  EFF5  F018         	goto	l706
  2360   00315E                     l6668:
  2361   00315E  0E04               	movlw	4
  2362   003160  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2363   003162  A4D8               	btfss	status,2,c
  2364   003164  EFB6  F018         	goto	u6481
  2365   003168  EFB8  F018         	goto	u6480
  2366   00316C                     u6481:
  2367   00316C  EFD2  F018         	goto	l6676
  2368   003170                     u6480:
  2369   003170                     
  2370                           ;return_func.c: 40:         backHalf(mL,mR);
  2371   003170  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2372   003174  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2373   003178  ECC0  F023         	call	_backHalf	;wreg free
  2374   00317C                     
  2375                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2376   00317C  0E29               	movlw	41
  2377   00317E  6E21               	movwf	(??_reverseTurn+1)^0,c
  2378   003180  0E96               	movlw	150
  2379   003182  6E20               	movwf	??_reverseTurn^0,c
  2380   003184  0E7F               	movlw	127
  2381   003186                     u7007:
  2382   003186  2EE8               	decfsz	wreg,f,c
  2383   003188  D7FE               	bra	u7007
  2384   00318A  2E20               	decfsz	??_reverseTurn^0,f,c
  2385   00318C  D7FC               	bra	u7007
  2386   00318E  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2387   003190  D7FA               	bra	u7007
  2388   003192  0000               	nop	
  2389   003194                     
  2390                           ;return_func.c: 42:         left135(mL,mR);
  2391   003194  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2392   003198  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2393   00319C  EC13  F023         	call	_left135	;wreg free
  2394                           
  2395                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2396   0031A0  EFF5  F018         	goto	l706
  2397   0031A4                     l6676:
  2398   0031A4  0E05               	movlw	5
  2399   0031A6  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2400   0031A8  A4D8               	btfss	status,2,c
  2401   0031AA  EFD9  F018         	goto	u6491
  2402   0031AE  EFDB  F018         	goto	u6490
  2403   0031B2                     u6491:
  2404   0031B2  EFF5  F018         	goto	l700
  2405   0031B6                     u6490:
  2406   0031B6                     
  2407                           ;return_func.c: 44:         backHalf(mL,mR);
  2408   0031B6  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2409   0031BA  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2410   0031BE  ECC0  F023         	call	_backHalf	;wreg free
  2411   0031C2                     
  2412                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2413   0031C2  0E29               	movlw	41
  2414   0031C4  6E21               	movwf	(??_reverseTurn+1)^0,c
  2415   0031C6  0E96               	movlw	150
  2416   0031C8  6E20               	movwf	??_reverseTurn^0,c
  2417   0031CA  0E7F               	movlw	127
  2418   0031CC                     u7017:
  2419   0031CC  2EE8               	decfsz	wreg,f,c
  2420   0031CE  D7FE               	bra	u7017
  2421   0031D0  2E20               	decfsz	??_reverseTurn^0,f,c
  2422   0031D2  D7FC               	bra	u7017
  2423   0031D4  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2424   0031D6  D7FA               	bra	u7017
  2425   0031D8  0000               	nop	
  2426   0031DA                     
  2427                           ;return_func.c: 46:         right135(mL,mR);
  2428   0031DA  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2429   0031DE  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2430   0031E2  ECE1  F022         	call	_right135	;wreg free
  2431   0031E6  EFF5  F018         	goto	l706
  2432   0031EA                     l700:
  2433   0031EA                     l706:
  2434   0031EA  0012               	return		;funcret
  2435   0031EC                     __end_of_reverseTurn:
  2436                           	callstack 0
  2437                           
  2438 ;; *************** function _reverseStraight *****************
  2439 ;; Defined at:
  2440 ;;		line 59 in file "return_func.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2443 ;;		 -> motorL(9), 
  2444 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2445 ;;		 -> motorR(9), 
  2446 ;;  time_ms         4   24[COMRAM] long 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  delayMs         2   30[COMRAM] unsigned int 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  1    wreg      void 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2461 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2462 ;;Total ram usage:       10 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; Hardware stack levels required when called: 4
  2465 ;; This function calls:
  2466 ;;		_customDelayMs
  2467 ;;		_fullSpeedAhead
  2468 ;;		_stop
  2469 ;; This function is called by:
  2470 ;;		_returnHome
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text3
  2475   003766                     __ptext3:
  2476                           	callstack 0
  2477   003766                     _reverseStraight:
  2478                           	callstack 25
  2479   003766                     
  2480                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2481   003766  0E03               	movlw	3
  2482   003768  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2483   00376A  0EE8               	movlw	232
  2484   00376C  6E1F               	movwf	reverseStraight@delayMs^0,c
  2485   00376E                     
  2486                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2487   00376E  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2488   003770  EFC6  F01B         	goto	u6501
  2489   003774  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2490   003776  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2491   003778  E10B               	bnz	u6500
  2492   00377A  0E7D               	movlw	125
  2493   00377C  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2494   00377E  0E15               	movlw	21
  2495   003780  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2496   003782  A0D8               	btfss	status,0,c
  2497   003784  EFC6  F01B         	goto	u6501
  2498   003788  EFC8  F01B         	goto	u6500
  2499   00378C                     u6501:
  2500   00378C  EFCE  F01B         	goto	l6690
  2501   003790                     u6500:
  2502   003790  0E0B               	movlw	11
  2503   003792  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2504   003794  0EB8               	movlw	184
  2505   003796  6E1F               	movwf	reverseStraight@delayMs^0,c
  2506   003798  EF0B  F01C         	goto	l6700
  2507   00379C                     l6690:
  2508   00379C  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2509   00379E  EFDD  F01B         	goto	u6511
  2510   0037A2  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2511   0037A4  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2512   0037A6  E10B               	bnz	u6510
  2513   0037A8  0EB9               	movlw	185
  2514   0037AA  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2515   0037AC  0E0B               	movlw	11
  2516   0037AE  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2517   0037B0  A0D8               	btfss	status,0,c
  2518   0037B2  EFDD  F01B         	goto	u6511
  2519   0037B6  EFDF  F01B         	goto	u6510
  2520   0037BA                     u6511:
  2521   0037BA  EFF6  F01B         	goto	l6696
  2522   0037BE                     u6510:
  2523   0037BE  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2524   0037C0  EFEE  F01B         	goto	u6521
  2525   0037C4  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2526   0037C6  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2527   0037C8  E10B               	bnz	u6520
  2528   0037CA  0E05               	movlw	5
  2529   0037CC  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2530   0037CE  0E10               	movlw	16
  2531   0037D0  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2532   0037D2  A0D8               	btfss	status,0,c
  2533   0037D4  EFEE  F01B         	goto	u6521
  2534   0037D8  EFF0  F01B         	goto	u6520
  2535   0037DC                     u6521:
  2536   0037DC  EFF6  F01B         	goto	l6696
  2537   0037E0                     u6520:
  2538   0037E0  0E07               	movlw	7
  2539   0037E2  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2540   0037E4  0ED0               	movlw	208
  2541   0037E6  6E1F               	movwf	reverseStraight@delayMs^0,c
  2542   0037E8  EF0B  F01C         	goto	l6700
  2543   0037EC                     l6696:
  2544   0037EC  BE1C               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2545   0037EE  EF07  F01C         	goto	u6530
  2546   0037F2  501C               	movf	(reverseStraight@time_ms+3)^0,w,c
  2547   0037F4  101B               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2548   0037F6  E109               	bnz	u6531
  2549   0037F8  0EB8               	movlw	184
  2550   0037FA  5C19               	subwf	reverseStraight@time_ms^0,w,c
  2551   0037FC  0E0B               	movlw	11
  2552   0037FE  581A               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2553   003800  B0D8               	btfsc	status,0,c
  2554   003802  EF05  F01C         	goto	u6531
  2555   003806  EF07  F01C         	goto	u6530
  2556   00380A                     u6531:
  2557   00380A  EF0B  F01C         	goto	l6700
  2558   00380E                     u6530:
  2559   00380E  0E03               	movlw	3
  2560   003810  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2561   003812  0EE8               	movlw	232
  2562   003814  6E1F               	movwf	reverseStraight@delayMs^0,c
  2563   003816                     l6700:
  2564                           
  2565                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2566   003816  0EE6               	movlw	low _motorL
  2567   003818  6E02               	movwf	fullSpeedAhead@mL^0,c
  2568   00381A  0EDD               	movlw	low _motorR
  2569   00381C  6E03               	movwf	fullSpeedAhead@mR^0,c
  2570   00381E  EC88  F024         	call	_fullSpeedAhead	;wreg free
  2571   003822                     
  2572                           ;return_func.c: 70:     customDelayMs(delayMs);
  2573   003822  C01F  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2574   003826  C020  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2575   00382A  ECE1  F021         	call	_customDelayMs	;wreg free
  2576   00382E                     
  2577                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2578   00382E  0EE6               	movlw	low _motorL
  2579   003830  6E14               	movwf	stop@mL^0,c
  2580   003832  0EDD               	movlw	low _motorR
  2581   003834  6E15               	movwf	stop@mR^0,c
  2582   003836  ECEC  F01E         	call	_stop	;wreg free
  2583   00383A                     
  2584                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2585   00383A  0E19               	movlw	25
  2586   00383C  6E1E               	movwf	(??_reverseStraight+1)^0,c
  2587   00383E  0E5A               	movlw	90
  2588   003840  6E1D               	movwf	??_reverseStraight^0,c
  2589   003842  0EB2               	movlw	178
  2590   003844                     u7027:
  2591   003844  2EE8               	decfsz	wreg,f,c
  2592   003846  D7FE               	bra	u7027
  2593   003848  2E1D               	decfsz	??_reverseStraight^0,f,c
  2594   00384A  D7FC               	bra	u7027
  2595   00384C  2E1E               	decfsz	(??_reverseStraight+1)^0,f,c
  2596   00384E  D7FA               	bra	u7027
  2597   003850  0012               	return		;funcret
  2598   003852                     __end_of_reverseStraight:
  2599                           	callstack 0
  2600                           
  2601 ;; *************** function _fullSpeedAhead *****************
  2602 ;; Defined at:
  2603 ;;		line 144 in file "dc_motor.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  mL              1    1[COMRAM] PTR struct DC_motor
  2606 ;;		 -> motorL(9), 
  2607 ;;  mR              1    2[COMRAM] PTR struct DC_motor
  2608 ;;		 -> motorR(9), 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		None
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;Total ram usage:        2 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;;		_reverseStraight
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text4
  2636   004910                     __ptext4:
  2637                           	callstack 0
  2638   004910                     _fullSpeedAhead:
  2639                           	callstack 27
  2640   004910  0012               	return		;funcret
  2641   004912                     __end_of_fullSpeedAhead:
  2642                           	callstack 0
  2643                           
  2644 ;; *************** function _customDelayMs *****************
  2645 ;; Defined at:
  2646 ;;		line 52 in file "return_func.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  i               2    4[COMRAM] unsigned int 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2663 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;Total ram usage:        5 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_reverseStraight
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text5
  2675   0043C2                     __ptext5:
  2676                           	callstack 0
  2677   0043C2                     _customDelayMs:
  2678                           	callstack 27
  2679   0043C2                     
  2680                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2681   0043C2  0E00               	movlw	0
  2682   0043C4  6E06               	movwf	(customDelayMs@i+1)^0,c
  2683   0043C6  0E00               	movlw	0
  2684   0043C8  6E05               	movwf	customDelayMs@i^0,c
  2685   0043CA  EFF1  F021         	goto	l709
  2686   0043CE                     l6074:
  2687                           
  2688                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2689   0043CE  0E15               	movlw	21
  2690   0043D0  6E04               	movwf	??_customDelayMs^0,c
  2691   0043D2  0EC6               	movlw	198
  2692   0043D4                     u7037:
  2693   0043D4  2EE8               	decfsz	wreg,f,c
  2694   0043D6  D7FE               	bra	u7037
  2695   0043D8  2E04               	decfsz	??_customDelayMs^0,f,c
  2696   0043DA  D7FC               	bra	u7037
  2697   0043DC  D000               	nop2	
  2698   0043DE                     
  2699                           ;return_func.c: 55:     }
  2700   0043DE  4A05               	infsnz	customDelayMs@i^0,f,c
  2701   0043E0  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2702   0043E2                     l709:
  2703   0043E2  5002               	movf	customDelayMs@milliseconds^0,w,c
  2704   0043E4  5C05               	subwf	customDelayMs@i^0,w,c
  2705   0043E6  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2706   0043E8  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2707   0043EA  A0D8               	btfss	status,0,c
  2708   0043EC  EFFA  F021         	goto	u5651
  2709   0043F0  EFFC  F021         	goto	u5650
  2710   0043F4                     u5651:
  2711   0043F4  EFE7  F021         	goto	l6074
  2712   0043F8                     u5650:
  2713   0043F8  0012               	return		;funcret
  2714   0043FA                     __end_of_customDelayMs:
  2715                           	callstack 0
  2716                           
  2717 ;; *************** function _moveWhite *****************
  2718 ;; Defined at:
  2719 ;;		line 321 in file "dc_motor.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2722 ;;		 -> motorL(9), 
  2723 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2724 ;;		 -> motorR(9), 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2739 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;Total ram usage:        4 bytes
  2741 ;; Hardware stack levels used: 1
  2742 ;; Hardware stack levels required when called: 5
  2743 ;; This function calls:
  2744 ;;		_backHalf
  2745 ;;		_turn180
  2746 ;; This function is called by:
  2747 ;;		_returnHome
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text6
  2752   004496                     __ptext6:
  2753                           	callstack 0
  2754   004496                     _moveWhite:
  2755                           	callstack 24
  2756   004496                     
  2757                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2758   004496  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2759   00449A  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2760   00449E  ECC0  F023         	call	_backHalf	;wreg free
  2761   0044A2                     
  2762                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2763   0044A2  0E29               	movlw	41
  2764   0044A4  6E20               	movwf	(??_moveWhite+1)^0,c
  2765   0044A6  0E96               	movlw	150
  2766   0044A8  6E1F               	movwf	??_moveWhite^0,c
  2767   0044AA  0E7F               	movlw	127
  2768   0044AC                     u7047:
  2769   0044AC  2EE8               	decfsz	wreg,f,c
  2770   0044AE  D7FE               	bra	u7047
  2771   0044B0  2E1F               	decfsz	??_moveWhite^0,f,c
  2772   0044B2  D7FC               	bra	u7047
  2773   0044B4  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2774   0044B6  D7FA               	bra	u7047
  2775   0044B8  0000               	nop	
  2776   0044BA                     
  2777                           ;dc_motor.c: 326:     turn180(mL,mR);
  2778   0044BA  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2779   0044BE  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2780   0044C2  EC5E  F023         	call	_turn180	;wreg free
  2781   0044C6  0012               	return		;funcret
  2782   0044C8                     __end_of_moveWhite:
  2783                           	callstack 0
  2784                           
  2785 ;; *************** function ___lmul *****************
  2786 ;; Defined at:
  2787 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  multiplier      4    1[COMRAM] unsigned long 
  2790 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  product         4    9[COMRAM] unsigned long 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  4    1[COMRAM] unsigned long 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2802 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2805 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2806 ;;Total ram usage:       12 bytes
  2807 ;; Hardware stack levels used: 1
  2808 ;; Hardware stack levels required when called: 1
  2809 ;; This function calls:
  2810 ;;		Nothing
  2811 ;; This function is called by:
  2812 ;;		_returnHome
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text7
  2817   00404C                     __ptext7:
  2818                           	callstack 0
  2819   00404C                     ___lmul:
  2820                           	callstack 28
  2821   00404C  0E00               	movlw	0
  2822   00404E  6E0A               	movwf	___lmul@product^0,c
  2823   004050  0E00               	movlw	0
  2824   004052  6E0B               	movwf	(___lmul@product+1)^0,c
  2825   004054  0E00               	movlw	0
  2826   004056  6E0C               	movwf	(___lmul@product+2)^0,c
  2827   004058  0E00               	movlw	0
  2828   00405A  6E0D               	movwf	(___lmul@product+3)^0,c
  2829   00405C                     l6710:
  2830   00405C  A002               	btfss	___lmul@multiplier^0,0,c
  2831   00405E  EF33  F020         	goto	u6541
  2832   004062  EF35  F020         	goto	u6540
  2833   004066                     u6541:
  2834   004066  EF3D  F020         	goto	l6714
  2835   00406A                     u6540:
  2836   00406A  5006               	movf	___lmul@multiplicand^0,w,c
  2837   00406C  260A               	addwf	___lmul@product^0,f,c
  2838   00406E  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  2839   004070  220B               	addwfc	(___lmul@product+1)^0,f,c
  2840   004072  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  2841   004074  220C               	addwfc	(___lmul@product+2)^0,f,c
  2842   004076  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  2843   004078  220D               	addwfc	(___lmul@product+3)^0,f,c
  2844   00407A                     l6714:
  2845   00407A  90D8               	bcf	status,0,c
  2846   00407C  3606               	rlcf	___lmul@multiplicand^0,f,c
  2847   00407E  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2848   004080  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2849   004082  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2850   004084  90D8               	bcf	status,0,c
  2851   004086  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  2852   004088  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  2853   00408A  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  2854   00408C  3202               	rrcf	___lmul@multiplier^0,f,c
  2855   00408E  5002               	movf	___lmul@multiplier^0,w,c
  2856   004090  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  2857   004092  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  2858   004094  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  2859   004096  A4D8               	btfss	status,2,c
  2860   004098  EF50  F020         	goto	u6551
  2861   00409C  EF52  F020         	goto	u6550
  2862   0040A0                     u6551:
  2863   0040A0  EF2E  F020         	goto	l6710
  2864   0040A4                     u6550:
  2865   0040A4  C00A  F002         	movff	___lmul@product,?___lmul
  2866   0040A8  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  2867   0040AC  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  2868   0040B0  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  2869   0040B4  0012               	return		;funcret
  2870   0040B6                     __end_of___lmul:
  2871                           	callstack 0
  2872                           
  2873 ;; *************** function ___aldiv *****************
  2874 ;; Defined at:
  2875 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  dividend        4   13[COMRAM] long 
  2878 ;;  divisor         4   17[COMRAM] long 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  quotient        4   23[COMRAM] long 
  2881 ;;  sign            1   22[COMRAM] unsigned char 
  2882 ;;  counter         1   21[COMRAM] unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  4   13[COMRAM] long 
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2892 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2893 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2895 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;Total ram usage:       14 bytes
  2897 ;; Hardware stack levels used: 1
  2898 ;; Hardware stack levels required when called: 1
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_returnHome
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text8
  2907   003450                     __ptext8:
  2908                           	callstack 0
  2909   003450                     ___aldiv:
  2910                           	callstack 28
  2911   003450  0E00               	movlw	0
  2912   003452  6E17               	movwf	___aldiv@sign^0,c
  2913   003454  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  2914   003456  EF31  F01A         	goto	u6560
  2915   00345A  EF2F  F01A         	goto	u6561
  2916   00345E                     u6561:
  2917   00345E  EF3B  F01A         	goto	l6726
  2918   003462                     u6560:
  2919   003462  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  2920   003464  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  2921   003466  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  2922   003468  6C12               	negf	___aldiv@divisor^0,c
  2923   00346A  0E00               	movlw	0
  2924   00346C  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  2925   00346E  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  2926   003470  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  2927   003472  0E01               	movlw	1
  2928   003474  6E17               	movwf	___aldiv@sign^0,c
  2929   003476                     l6726:
  2930   003476  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  2931   003478  EF42  F01A         	goto	u6570
  2932   00347C  EF40  F01A         	goto	u6571
  2933   003480                     u6571:
  2934   003480  EF4C  F01A         	goto	l6732
  2935   003484                     u6570:
  2936   003484  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  2937   003486  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  2938   003488  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  2939   00348A  6C0E               	negf	___aldiv@dividend^0,c
  2940   00348C  0E00               	movlw	0
  2941   00348E  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  2942   003490  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  2943   003492  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  2944   003494  0E01               	movlw	1
  2945   003496  1A17               	xorwf	___aldiv@sign^0,f,c
  2946   003498                     l6732:
  2947   003498  0E00               	movlw	0
  2948   00349A  6E18               	movwf	___aldiv@quotient^0,c
  2949   00349C  0E00               	movlw	0
  2950   00349E  6E19               	movwf	(___aldiv@quotient+1)^0,c
  2951   0034A0  0E00               	movlw	0
  2952   0034A2  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  2953   0034A4  0E00               	movlw	0
  2954   0034A6  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  2955   0034A8  5012               	movf	___aldiv@divisor^0,w,c
  2956   0034AA  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  2957   0034AC  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  2958   0034AE  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  2959   0034B0  B4D8               	btfsc	status,2,c
  2960   0034B2  EF5D  F01A         	goto	u6581
  2961   0034B6  EF5F  F01A         	goto	u6580
  2962   0034BA                     u6581:
  2963   0034BA  EF95  F01A         	goto	l6754
  2964   0034BE                     u6580:
  2965   0034BE  0E01               	movlw	1
  2966   0034C0  6E16               	movwf	___aldiv@counter^0,c
  2967   0034C2  EF69  F01A         	goto	l6740
  2968   0034C6                     l6738:
  2969   0034C6  90D8               	bcf	status,0,c
  2970   0034C8  3612               	rlcf	___aldiv@divisor^0,f,c
  2971   0034CA  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  2972   0034CC  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  2973   0034CE  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  2974   0034D0  2A16               	incf	___aldiv@counter^0,f,c
  2975   0034D2                     l6740:
  2976   0034D2  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  2977   0034D4  EF6E  F01A         	goto	u6591
  2978   0034D8  EF70  F01A         	goto	u6590
  2979   0034DC                     u6591:
  2980   0034DC  EF63  F01A         	goto	l6738
  2981   0034E0                     u6590:
  2982   0034E0                     l6742:
  2983   0034E0  90D8               	bcf	status,0,c
  2984   0034E2  3618               	rlcf	___aldiv@quotient^0,f,c
  2985   0034E4  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  2986   0034E6  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  2987   0034E8  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  2988   0034EA  5012               	movf	___aldiv@divisor^0,w,c
  2989   0034EC  5C0E               	subwf	___aldiv@dividend^0,w,c
  2990   0034EE  5013               	movf	(___aldiv@divisor+1)^0,w,c
  2991   0034F0  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  2992   0034F2  5014               	movf	(___aldiv@divisor+2)^0,w,c
  2993   0034F4  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  2994   0034F6  5015               	movf	(___aldiv@divisor+3)^0,w,c
  2995   0034F8  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  2996   0034FA  A0D8               	btfss	status,0,c
  2997   0034FC  EF82  F01A         	goto	u6601
  2998   003500  EF84  F01A         	goto	u6600
  2999   003504                     u6601:
  3000   003504  EF8D  F01A         	goto	l6750
  3001   003508                     u6600:
  3002   003508  5012               	movf	___aldiv@divisor^0,w,c
  3003   00350A  5E0E               	subwf	___aldiv@dividend^0,f,c
  3004   00350C  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3005   00350E  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  3006   003510  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3007   003512  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3008   003514  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3009   003516  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3010   003518  8018               	bsf	___aldiv@quotient^0,0,c
  3011   00351A                     l6750:
  3012   00351A  90D8               	bcf	status,0,c
  3013   00351C  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3014   00351E  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3015   003520  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3016   003522  3212               	rrcf	___aldiv@divisor^0,f,c
  3017   003524  2E16               	decfsz	___aldiv@counter^0,f,c
  3018   003526  EF70  F01A         	goto	l6742
  3019   00352A                     l6754:
  3020   00352A  5017               	movf	___aldiv@sign^0,w,c
  3021   00352C  B4D8               	btfsc	status,2,c
  3022   00352E  EF9B  F01A         	goto	u6611
  3023   003532  EF9D  F01A         	goto	u6610
  3024   003536                     u6611:
  3025   003536  EFA5  F01A         	goto	l6758
  3026   00353A                     u6610:
  3027   00353A  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3028   00353C  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3029   00353E  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3030   003540  6C18               	negf	___aldiv@quotient^0,c
  3031   003542  0E00               	movlw	0
  3032   003544  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3033   003546  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3034   003548  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3035   00354A                     l6758:
  3036   00354A  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3037   00354E  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3038   003552  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3039   003556  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3040   00355A  0012               	return		;funcret
  3041   00355C                     __end_of___aldiv:
  3042                           	callstack 0
  3043                           
  3044 ;; *************** function _reading_hue *****************
  3045 ;; Defined at:
  3046 ;;		line 91 in file "color.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  cCurr           1   65[COMRAM] PTR struct colors
  3049 ;;		 -> colorCurrent(10), 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  led_state      50    0        unsigned char [50]
  3052 ;;  hue             2   69[COMRAM] unsigned int 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  2   65[COMRAM] unsigned int 
  3055 ;; Registers used:
  3056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;Total ram usage:        6 bytes
  3067 ;; Hardware stack levels used: 1
  3068 ;; Hardware stack levels required when called: 4
  3069 ;; This function calls:
  3070 ;;		_color_read_Blue
  3071 ;;		_color_read_Clear
  3072 ;;		_color_read_Green
  3073 ;;		_color_read_Red
  3074 ;;		_convert_rgb2hue
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text9
  3081   003852                     __ptext9:
  3082                           	callstack 0
  3083   003852                     _reading_hue:
  3084                           	callstack 26
  3085   003852                     
  3086                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3087   003852  807F               	bsf	127,0,c	;volatile
  3088                           
  3089                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3090   003854  9E7D               	bcf	125,7,c	;volatile
  3091                           
  3092                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3093   003856  9679               	bcf	121,3,c	;volatile
  3094   003858                     
  3095                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3096   003858  0E29               	movlw	41
  3097   00385A  6E45               	movwf	(??_reading_hue+1)^0,c
  3098   00385C  0E96               	movlw	150
  3099   00385E  6E44               	movwf	??_reading_hue^0,c
  3100   003860  0E7F               	movlw	127
  3101   003862                     u7057:
  3102   003862  2EE8               	decfsz	wreg,f,c
  3103   003864  D7FE               	bra	u7057
  3104   003866  2E44               	decfsz	??_reading_hue^0,f,c
  3105   003868  D7FC               	bra	u7057
  3106   00386A  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3107   00386C  D7FA               	bra	u7057
  3108   00386E  0000               	nop	
  3109   003870                     
  3110                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3111   003870  EC5B  F020         	call	_color_read_Red	;wreg free
  3112   003874  5042               	movf	reading_hue@cCurr^0,w,c
  3113   003876  6ED9               	movwf	fsr2l,c
  3114   003878  6ADA               	clrf	fsr2h,c
  3115   00387A  C006  FFDE         	movff	?_color_read_Red,postinc2
  3116   00387E  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3117   003882                     
  3118                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3119   003882  907F               	bcf	127,0,c	;volatile
  3120   003884                     
  3121                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3122   003884  8E7D               	bsf	125,7,c	;volatile
  3123   003886                     
  3124                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3125   003886  9679               	bcf	121,3,c	;volatile
  3126   003888                     
  3127                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3128   003888  0E29               	movlw	41
  3129   00388A  6E45               	movwf	(??_reading_hue+1)^0,c
  3130   00388C  0E96               	movlw	150
  3131   00388E  6E44               	movwf	??_reading_hue^0,c
  3132   003890  0E7F               	movlw	127
  3133   003892                     u7067:
  3134   003892  2EE8               	decfsz	wreg,f,c
  3135   003894  D7FE               	bra	u7067
  3136   003896  2E44               	decfsz	??_reading_hue^0,f,c
  3137   003898  D7FC               	bra	u7067
  3138   00389A  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3139   00389C  D7FA               	bra	u7067
  3140   00389E  0000               	nop	
  3141                           
  3142                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3143   0038A0  EC83  F020         	call	_color_read_Green	;wreg free
  3144   0038A4  5042               	movf	reading_hue@cCurr^0,w,c
  3145   0038A6  6ED9               	movwf	fsr2l,c
  3146   0038A8  6ADA               	clrf	fsr2h,c
  3147   0038AA  0E02               	movlw	2
  3148   0038AC  26D9               	addwf	fsr2l,f,c
  3149   0038AE  C006  FFDE         	movff	?_color_read_Green,postinc2
  3150   0038B2  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3151   0038B6                     
  3152                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3153   0038B6  907F               	bcf	127,0,c	;volatile
  3154   0038B8                     
  3155                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3156   0038B8  9E7D               	bcf	125,7,c	;volatile
  3157   0038BA                     
  3158                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3159   0038BA  8679               	bsf	121,3,c	;volatile
  3160   0038BC                     
  3161                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3162   0038BC  0E29               	movlw	41
  3163   0038BE  6E45               	movwf	(??_reading_hue+1)^0,c
  3164   0038C0  0E96               	movlw	150
  3165   0038C2  6E44               	movwf	??_reading_hue^0,c
  3166   0038C4  0E7F               	movlw	127
  3167   0038C6                     u7077:
  3168   0038C6  2EE8               	decfsz	wreg,f,c
  3169   0038C8  D7FE               	bra	u7077
  3170   0038CA  2E44               	decfsz	??_reading_hue^0,f,c
  3171   0038CC  D7FC               	bra	u7077
  3172   0038CE  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3173   0038D0  D7FA               	bra	u7077
  3174   0038D2  0000               	nop	
  3175   0038D4                     
  3176                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3177   0038D4  ECD3  F020         	call	_color_read_Blue	;wreg free
  3178   0038D8  5042               	movf	reading_hue@cCurr^0,w,c
  3179   0038DA  6ED9               	movwf	fsr2l,c
  3180   0038DC  6ADA               	clrf	fsr2h,c
  3181   0038DE  0E04               	movlw	4
  3182   0038E0  26D9               	addwf	fsr2l,f,c
  3183   0038E2  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3184   0038E6  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3185   0038EA                     
  3186                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3187   0038EA  807F               	bsf	127,0,c	;volatile
  3188   0038EC                     
  3189                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3190   0038EC  8E7D               	bsf	125,7,c	;volatile
  3191   0038EE                     
  3192                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3193   0038EE  8679               	bsf	121,3,c	;volatile
  3194                           
  3195                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3196   0038F0  0E29               	movlw	41
  3197   0038F2  6E45               	movwf	(??_reading_hue+1)^0,c
  3198   0038F4  0E96               	movlw	150
  3199   0038F6  6E44               	movwf	??_reading_hue^0,c
  3200   0038F8  0E7F               	movlw	127
  3201   0038FA                     u7087:
  3202   0038FA  2EE8               	decfsz	wreg,f,c
  3203   0038FC  D7FE               	bra	u7087
  3204   0038FE  2E44               	decfsz	??_reading_hue^0,f,c
  3205   003900  D7FC               	bra	u7087
  3206   003902  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  3207   003904  D7FA               	bra	u7087
  3208   003906  0000               	nop	
  3209   003908                     
  3210                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3211   003908  ECAB  F020         	call	_color_read_Clear	;wreg free
  3212   00390C  5042               	movf	reading_hue@cCurr^0,w,c
  3213   00390E  6ED9               	movwf	fsr2l,c
  3214   003910  6ADA               	clrf	fsr2h,c
  3215   003912  0E06               	movlw	6
  3216   003914  26D9               	addwf	fsr2l,f,c
  3217   003916  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3218   00391A  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3219   00391E                     
  3220                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3221   00391E  0ED3               	movlw	low _colorCalibration
  3222   003920  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  3223   003922  0EC9               	movlw	low _colorCurrent
  3224   003924  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  3225   003926  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3226   00392A  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  3227   00392E  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3228   003932                     
  3229                           ;color.c: 127:     return hue;
  3230   003932  C046  F042         	movff	reading_hue@hue,?_reading_hue
  3231   003936  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  3232   00393A  0012               	return		;funcret
  3233   00393C                     __end_of_reading_hue:
  3234                           	callstack 0
  3235                           
  3236 ;; *************** function _convert_rgb2hue *****************
  3237 ;; Defined at:
  3238 ;;		line 227 in file "color.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  cMax            1   61[COMRAM] PTR struct colors
  3241 ;;		 -> colorCalibration(10), 
  3242 ;;  cCurr           1   62[COMRAM] PTR struct colors
  3243 ;;		 -> colorCurrent(10), 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  c_char         20    0        unsigned char [20]
  3246 ;;  b               4   72[BANK0 ] float 
  3247 ;;  g               4   68[BANK0 ] float 
  3248 ;;  r               4   64[BANK0 ] float 
  3249 ;;  hue             4   60[BANK0 ] float 
  3250 ;;  max             4   56[BANK0 ] float 
  3251 ;;  diff            4   52[BANK0 ] float 
  3252 ;;  min             4   48[BANK0 ] float 
  3253 ;;  clearmax        4   28[BANK0 ] float 
  3254 ;;  clearcurrent    4   24[BANK0 ] float 
  3255 ;;  bluemax         4   20[BANK0 ] float 
  3256 ;;  bluecurrent     4   16[BANK0 ] float 
  3257 ;;  greenmax        4   12[BANK0 ] float 
  3258 ;;  greencurrent    4    8[BANK0 ] float 
  3259 ;;  redmax          4    4[BANK0 ] float 
  3260 ;;  redcurrent      4    0[BANK0 ] float 
  3261 ;;  c               4    0        float 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  2   61[COMRAM] unsigned int 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;Total ram usage:       80 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; Hardware stack levels required when called: 3
  3278 ;; This function calls:
  3279 ;;		___fladd
  3280 ;;		___fldiv
  3281 ;;		___fleq
  3282 ;;		___flge
  3283 ;;		___flmul
  3284 ;;		___flsub
  3285 ;;		___fltol
  3286 ;;		___xxtofl
  3287 ;; This function is called by:
  3288 ;;		_reading_hue
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text10
  3293   000EC6                     __ptext10:
  3294                           	callstack 0
  3295   000EC6                     _convert_rgb2hue:
  3296                           	callstack 26
  3297   000EC6                     
  3298                           ;color.c: 227: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 228: {;color.c: 229:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 230:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3299   000EC6  0E00               	movlw	0
  3300   000EC8  0100               	movlb	0	; () banked
  3301   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3302   000ECC  0E00               	movlw	0
  3303   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3304   000ED0  0E00               	movlw	0
  3305   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3306   000ED4  0E00               	movlw	0
  3307   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3308   000ED8                     
  3309                           ; BSR set to: 0
  3310                           ;color.c: 232:     redcurrent = cCurr->red;
  3311   000ED8  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3312   000EDA  6ED9               	movwf	fsr2l,c
  3313   000EDC  6ADA               	clrf	fsr2h,c
  3314   000EDE  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3315   000EE2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3316   000EE6  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3317   000EEA  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3318   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3319   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3320   000EF2  0E00               	movlw	0
  3321   000EF4  ECEC  F015         	call	___xxtofl
  3322   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3323   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3324   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3325   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3326   000F08                     
  3327                           ;color.c: 233:     redmax = cMax->red;
  3328   000F08  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3329   000F0A  6ED9               	movwf	fsr2l,c
  3330   000F0C  6ADA               	clrf	fsr2h,c
  3331   000F0E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3332   000F12  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3333   000F16  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3334   000F1A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3335   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3336   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3337   000F22  0E00               	movlw	0
  3338   000F24  ECEC  F015         	call	___xxtofl
  3339   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3340   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3341   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3342   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3343   000F38                     
  3344                           ;color.c: 234:     greencurrent = cCurr->green;
  3345   000F38  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3346   000F3A  6ED9               	movwf	fsr2l,c
  3347   000F3C  6ADA               	clrf	fsr2h,c
  3348   000F3E  0E02               	movlw	2
  3349   000F40  26D9               	addwf	fsr2l,f,c
  3350   000F42  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3351   000F46  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3352   000F4A  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3353   000F4E  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3354   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3355   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3356   000F56  0E00               	movlw	0
  3357   000F58  ECEC  F015         	call	___xxtofl
  3358   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3359   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3360   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3361   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3362   000F6C                     
  3363                           ;color.c: 235:     greenmax = cMax->green;
  3364   000F6C  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3365   000F6E  6ED9               	movwf	fsr2l,c
  3366   000F70  6ADA               	clrf	fsr2h,c
  3367   000F72  0E02               	movlw	2
  3368   000F74  26D9               	addwf	fsr2l,f,c
  3369   000F76  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3370   000F7A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3371   000F7E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3372   000F82  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3373   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3374   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3375   000F8A  0E00               	movlw	0
  3376   000F8C  ECEC  F015         	call	___xxtofl
  3377   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3378   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3379   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3380   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3381   000FA0                     
  3382                           ;color.c: 236:     bluecurrent = cCurr->blue;
  3383   000FA0  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3384   000FA2  6ED9               	movwf	fsr2l,c
  3385   000FA4  6ADA               	clrf	fsr2h,c
  3386   000FA6  0E04               	movlw	4
  3387   000FA8  26D9               	addwf	fsr2l,f,c
  3388   000FAA  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3389   000FAE  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3390   000FB2  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3391   000FB6  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3392   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3393   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3394   000FBE  0E00               	movlw	0
  3395   000FC0  ECEC  F015         	call	___xxtofl
  3396   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3397   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3398   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3399   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3400   000FD4                     
  3401                           ;color.c: 237:     bluemax = cMax->blue;
  3402   000FD4  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3403   000FD6  6ED9               	movwf	fsr2l,c
  3404   000FD8  6ADA               	clrf	fsr2h,c
  3405   000FDA  0E04               	movlw	4
  3406   000FDC  26D9               	addwf	fsr2l,f,c
  3407   000FDE  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3408   000FE2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3409   000FE6  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3410   000FEA  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3411   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3412   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3413   000FF2  0E00               	movlw	0
  3414   000FF4  ECEC  F015         	call	___xxtofl
  3415   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3416   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3417   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3418   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3419   001008                     
  3420                           ;color.c: 238:     clearcurrent = cCurr->clear;
  3421   001008  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3422   00100A  6ED9               	movwf	fsr2l,c
  3423   00100C  6ADA               	clrf	fsr2h,c
  3424   00100E  0E06               	movlw	6
  3425   001010  26D9               	addwf	fsr2l,f,c
  3426   001012  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3427   001016  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3428   00101A  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3429   00101E  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3430   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3431   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3432   001026  0E00               	movlw	0
  3433   001028  ECEC  F015         	call	___xxtofl
  3434   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3435   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3436   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3437   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3438   00103C                     
  3439                           ;color.c: 239:     clearmax = cMax->clear;
  3440   00103C  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3441   00103E  6ED9               	movwf	fsr2l,c
  3442   001040  6ADA               	clrf	fsr2h,c
  3443   001042  0E06               	movlw	6
  3444   001044  26D9               	addwf	fsr2l,f,c
  3445   001046  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3446   00104A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3447   00104E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3448   001052  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3449   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3450   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3451   00105A  0E00               	movlw	0
  3452   00105C  ECEC  F015         	call	___xxtofl
  3453   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3454   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3455   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3456   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3457   001070  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3458   001074  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3459   001078  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3460   00107C  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3461   001080  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3462   001084  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3463   001088  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3464   00108C  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3465   001090  ECD6  F011         	call	___fldiv	;wreg free
  3466   001094                     
  3467                           ;color.c: 242:     char c_char[20];;color.c: 248:     r = redcurrent/redmax;
  3468   001094  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3469   001098  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3470   00109C  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3471   0010A0  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3472   0010A4  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  3473   0010A8  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3474   0010AC  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3475   0010B0  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3476   0010B4  ECD6  F011         	call	___fldiv	;wreg free
  3477   0010B8  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3478   0010BC  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3479   0010C0  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3480   0010C4  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3481   0010C8                     
  3482                           ;color.c: 249:     g = greencurrent/greenmax;
  3483   0010C8  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3484   0010CC  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3485   0010D0  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3486   0010D4  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3487   0010D8  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3488   0010DC  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3489   0010E0  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3490   0010E4  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3491   0010E8  ECD6  F011         	call	___fldiv	;wreg free
  3492   0010EC  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3493   0010F0  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3494   0010F4  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3495   0010F8  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3496   0010FC                     
  3497                           ;color.c: 250:     b = bluecurrent/bluemax;
  3498   0010FC  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3499   001100  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3500   001104  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3501   001108  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3502   00110C  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3503   001110  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3504   001114  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3505   001118  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3506   00111C  ECD6  F011         	call	___fldiv	;wreg free
  3507   001120  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3508   001124  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3509   001128  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3510   00112C  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3511   001130                     
  3512                           ;color.c: 252:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3513   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3514   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3515   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3516   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3517   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3518   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3519   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3520   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3521   001150  EC31  F01B         	call	___flge	;wreg free
  3522   001154  A0D8               	btfss	status,0,c
  3523   001156  EFAF  F008         	goto	u6331
  3524   00115A  EFB1  F008         	goto	u6330
  3525   00115E                     u6331:
  3526   00115E  EFE6  F008         	goto	l6550
  3527   001162                     u6330:
  3528   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3529   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3530   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3531   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3532   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3533   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3534   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3535   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3536   001182  EC31  F01B         	call	___flge	;wreg free
  3537   001186  A0D8               	btfss	status,0,c
  3538   001188  EFC8  F008         	goto	u6341
  3539   00118C  EFCA  F008         	goto	u6340
  3540   001190                     u6341:
  3541   001190  EFD4  F008         	goto	l128
  3542   001194                     u6340:
  3543   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3544   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3545   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3546   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3547   0011A4  EFDC  F008         	goto	l130
  3548   0011A8                     l128:
  3549   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$432
  3550   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$432+1
  3551   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$432+2
  3552   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$432+3
  3553   0011B8                     l130:
  3554   0011B8  C080  F090         	movff	_convert_rgb2hue$432,convert_rgb2hue@min
  3555   0011BC  C081  F091         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@min+1
  3556   0011C0  C082  F092         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@min+2
  3557   0011C4  C083  F093         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@min+3
  3558   0011C8  EF19  F009         	goto	l6554
  3559   0011CC                     l6550:
  3560   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3561   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3562   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3563   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3564   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3565   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3566   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3567   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3568   0011EC  EC31  F01B         	call	___flge	;wreg free
  3569   0011F0  A0D8               	btfss	status,0,c
  3570   0011F2  EFFD  F008         	goto	u6351
  3571   0011F6  EFFF  F008         	goto	u6350
  3572   0011FA                     u6351:
  3573   0011FA  EF09  F009         	goto	l132
  3574   0011FE                     u6350:
  3575   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$433
  3576   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$433+1
  3577   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$433+2
  3578   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$433+3
  3579   00120E  EF11  F009         	goto	l134
  3580   001212                     l132:
  3581   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$433
  3582   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$433+1
  3583   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$433+2
  3584   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$433+3
  3585   001222                     l134:
  3586   001222  C084  F090         	movff	_convert_rgb2hue$433,convert_rgb2hue@min
  3587   001226  C085  F091         	movff	_convert_rgb2hue$433+1,convert_rgb2hue@min+1
  3588   00122A  C086  F092         	movff	_convert_rgb2hue$433+2,convert_rgb2hue@min+2
  3589   00122E  C087  F093         	movff	_convert_rgb2hue$433+3,convert_rgb2hue@min+3
  3590   001232                     l6554:
  3591                           
  3592                           ;color.c: 253:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3593   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3594   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3595   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3596   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3597   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3598   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3599   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3600   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3601   001252  EC31  F01B         	call	___flge	;wreg free
  3602   001256  A0D8               	btfss	status,0,c
  3603   001258  EF30  F009         	goto	u6361
  3604   00125C  EF32  F009         	goto	u6360
  3605   001260                     u6361:
  3606   001260  EF67  F009         	goto	l6560
  3607   001264                     u6360:
  3608   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3609   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3610   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3611   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3612   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3613   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3614   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3615   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3616   001284  EC31  F01B         	call	___flge	;wreg free
  3617   001288  A0D8               	btfss	status,0,c
  3618   00128A  EF49  F009         	goto	u6371
  3619   00128E  EF4B  F009         	goto	u6370
  3620   001292                     u6371:
  3621   001292  EF55  F009         	goto	l140
  3622   001296                     u6370:
  3623   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$434
  3624   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$434+1
  3625   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$434+2
  3626   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$434+3
  3627   0012A6  EF5D  F009         	goto	l142
  3628   0012AA                     l140:
  3629   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$434
  3630   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$434+1
  3631   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$434+2
  3632   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$434+3
  3633   0012BA                     l142:
  3634   0012BA  C088  F098         	movff	_convert_rgb2hue$434,convert_rgb2hue@max
  3635   0012BE  C089  F099         	movff	_convert_rgb2hue$434+1,convert_rgb2hue@max+1
  3636   0012C2  C08A  F09A         	movff	_convert_rgb2hue$434+2,convert_rgb2hue@max+2
  3637   0012C6  C08B  F09B         	movff	_convert_rgb2hue$434+3,convert_rgb2hue@max+3
  3638   0012CA  EF9A  F009         	goto	l6564
  3639   0012CE                     l6560:
  3640   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3641   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3642   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3643   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3644   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3645   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3646   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3647   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3648   0012EE  EC31  F01B         	call	___flge	;wreg free
  3649   0012F2  A0D8               	btfss	status,0,c
  3650   0012F4  EF7E  F009         	goto	u6381
  3651   0012F8  EF80  F009         	goto	u6380
  3652   0012FC                     u6381:
  3653   0012FC  EF8A  F009         	goto	l144
  3654   001300                     u6380:
  3655   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3656   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3657   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3658   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3659   001310  EF92  F009         	goto	l146
  3660   001314                     l144:
  3661   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$435
  3662   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$435+1
  3663   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$435+2
  3664   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$435+3
  3665   001324                     l146:
  3666   001324  C08C  F098         	movff	_convert_rgb2hue$435,convert_rgb2hue@max
  3667   001328  C08D  F099         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@max+1
  3668   00132C  C08E  F09A         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@max+2
  3669   001330  C08F  F09B         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@max+3
  3670   001334                     l6564:
  3671                           
  3672                           ;color.c: 254:     diff = max - min;
  3673   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3674   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3675   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3676   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3677   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3678   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3679   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3680   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3681   001354  ECFB  F020         	call	___flsub	;wreg free
  3682   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3683   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3684   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3685   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3686                           
  3687                           ;color.c: 255:     if (max == min) {
  3688   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3689   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3690   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3691   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3692   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3693   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3694   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3695   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3696   001388  ECAF  F01D         	call	___fleq	;wreg free
  3697   00138C  A0D8               	btfss	status,0,c
  3698   00138E  EFCB  F009         	goto	u6391
  3699   001392  EFCD  F009         	goto	u6390
  3700   001396                     u6391:
  3701   001396  EFD8  F009         	goto	l6568
  3702   00139A                     u6390:
  3703   00139A                     
  3704                           ;color.c: 256:         hue = 0;
  3705   00139A  0E00               	movlw	0
  3706   00139C  0100               	movlb	0	; () banked
  3707   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3708   0013A0  0E00               	movlw	0
  3709   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3710   0013A4  0E00               	movlw	0
  3711   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3712   0013A8  0E00               	movlw	0
  3713   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3714                           
  3715                           ;color.c: 257:     } else if (max == r){
  3716   0013AC  EFE1  F00A         	goto	l6580
  3717   0013B0                     l6568:
  3718   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3719   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3720   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3721   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3722   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3723   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3724   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3725   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3726   0013D0  ECAF  F01D         	call	___fleq	;wreg free
  3727   0013D4  A0D8               	btfss	status,0,c
  3728   0013D6  EFEF  F009         	goto	u6401
  3729   0013DA  EFF1  F009         	goto	u6400
  3730   0013DE                     u6401:
  3731   0013DE  EF1F  F00A         	goto	l6572
  3732   0013E2                     u6400:
  3733   0013E2                     
  3734                           ;color.c: 258:         hue = (b - g) / diff;
  3735   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3736   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3737   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3738   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3739   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3740   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3741   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3742   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3743   001402  ECFB  F020         	call	___flsub	;wreg free
  3744   001406  C012  F01B         	movff	?___flsub,___fldiv@b
  3745   00140A  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3746   00140E  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3747   001412  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3748   001416  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3749   00141A  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3750   00141E  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3751   001422  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3752   001426  ECD6  F011         	call	___fldiv	;wreg free
  3753   00142A  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3754   00142E  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3755   001432  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3756   001436  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3757                           
  3758                           ;color.c: 259:     } else if (max == g){
  3759   00143A  EFE1  F00A         	goto	l6580
  3760   00143E                     l6572:
  3761   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3762   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3763   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3764   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3765   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3766   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3767   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3768   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3769   00145E  ECAF  F01D         	call	___fleq	;wreg free
  3770   001462  A0D8               	btfss	status,0,c
  3771   001464  EF36  F00A         	goto	u6411
  3772   001468  EF38  F00A         	goto	u6410
  3773   00146C                     u6411:
  3774   00146C  EF80  F00A         	goto	l6576
  3775   001470                     u6410:
  3776   001470                     
  3777                           ;color.c: 260:         hue = (b - r) / diff;
  3778   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3779   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3780   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3781   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3782   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3783   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3784   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3785   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3786   001490  ECFB  F020         	call	___flsub	;wreg free
  3787   001494  C012  F01B         	movff	?___flsub,___fldiv@b
  3788   001498  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3789   00149C  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3790   0014A0  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3791   0014A4  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3792   0014A8  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3793   0014AC  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3794   0014B0  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3795   0014B4  ECD6  F011         	call	___fldiv	;wreg free
  3796   0014B8  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3797   0014BC  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3798   0014C0  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3799   0014C4  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3800                           
  3801                           ;color.c: 261:         hue = hue + 2;
  3802   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3803   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3804   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3805   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3806   0014D8  0E00               	movlw	0
  3807   0014DA  6E06               	movwf	___fladd@a^0,c
  3808   0014DC  0E00               	movlw	0
  3809   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3810   0014E0  0E00               	movlw	0
  3811   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3812   0014E4  0E40               	movlw	64
  3813   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3814   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3815   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3816   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3817   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3818   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3819                           
  3820                           ;color.c: 262:     } else if (max == b){
  3821   0014FC  EFE1  F00A         	goto	l6580
  3822   001500                     l6576:
  3823   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3824   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3825   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3826   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3827   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3828   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3829   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3830   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3831   001520  ECAF  F01D         	call	___fleq	;wreg free
  3832   001524  A0D8               	btfss	status,0,c
  3833   001526  EF97  F00A         	goto	u6421
  3834   00152A  EF99  F00A         	goto	u6420
  3835   00152E                     u6421:
  3836   00152E  EFE1  F00A         	goto	l150
  3837   001532                     u6420:
  3838   001532                     
  3839                           ;color.c: 263:         hue = (r - g) / diff;
  3840   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3841   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3842   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3843   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3844   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3845   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3846   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3847   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3848   001552  ECFB  F020         	call	___flsub	;wreg free
  3849   001556  C012  F01B         	movff	?___flsub,___fldiv@b
  3850   00155A  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3851   00155E  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3852   001562  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3853   001566  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3854   00156A  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3855   00156E  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3856   001572  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3857   001576  ECD6  F011         	call	___fldiv	;wreg free
  3858   00157A  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3859   00157E  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3860   001582  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3861   001586  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3862                           
  3863                           ;color.c: 264:         hue = hue + 4;
  3864   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3865   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3866   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3867   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3868   00159A  0E00               	movlw	0
  3869   00159C  6E06               	movwf	___fladd@a^0,c
  3870   00159E  0E00               	movlw	0
  3871   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3872   0015A2  0E80               	movlw	128
  3873   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3874   0015A6  0E40               	movlw	64
  3875   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3876   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3877   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3878   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3879   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3880   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3881   0015BE  EFE1  F00A         	goto	l6580
  3882   0015C2                     l150:
  3883   0015C2                     l6580:
  3884                           
  3885                           ;color.c: 267:     hue = hue * 60;
  3886   0015C2  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3887   0015C6  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3888   0015CA  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3889   0015CE  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3890   0015D2  0E00               	movlw	0
  3891   0015D4  6E06               	movwf	___flmul@a^0,c
  3892   0015D6  0E00               	movlw	0
  3893   0015D8  6E07               	movwf	(___flmul@a+1)^0,c
  3894   0015DA  0E70               	movlw	112
  3895   0015DC  6E08               	movwf	(___flmul@a+2)^0,c
  3896   0015DE  0E42               	movlw	66
  3897   0015E0  6E09               	movwf	(___flmul@a+3)^0,c
  3898   0015E2  ECC1  F00F         	call	___flmul	;wreg free
  3899   0015E6  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3900   0015EA  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3901   0015EE  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3902   0015F2  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3903   0015F6                     
  3904                           ;color.c: 268:     if (hue < 0) {
  3905   0015F6  0100               	movlb	0	; () banked
  3906   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3907   0015FA  EF03  F00B         	goto	u6430
  3908   0015FE  EF01  F00B         	goto	u6431
  3909   001602                     u6431:
  3910   001602  EF1D  F00B         	goto	l154
  3911   001606                     u6430:
  3912   001606                     
  3913                           ; BSR set to: 0
  3914                           ;color.c: 269:         hue = hue + 360;
  3915   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3916   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3917   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3918   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3919   001616  0E00               	movlw	0
  3920   001618  6E06               	movwf	___fladd@a^0,c
  3921   00161A  0E00               	movlw	0
  3922   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3923   00161E  0EB4               	movlw	180
  3924   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3925   001622  0E43               	movlw	67
  3926   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3927   001626  EC2C  F00B         	call	___fladd	;wreg free
  3928   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3929   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3930   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3931   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3932   00163A                     l154:
  3933                           
  3934                           ;color.c: 272:     return (unsigned int)hue;
  3935   00163A  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3936   00163E  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3937   001642  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3938   001646  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3939   00164A  ECAE  F01A         	call	___fltol	;wreg free
  3940   00164E  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3941   001652  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3942   001656  0012               	return		;funcret
  3943   001658                     __end_of_convert_rgb2hue:
  3944                           	callstack 0
  3945                           
  3946 ;; *************** function ___xxtofl *****************
  3947 ;; Defined at:
  3948 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  sign            1    wreg     unsigned char 
  3951 ;;  val             4    1[COMRAM] long 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  sign            1    9[COMRAM] unsigned char 
  3954 ;;  arg             4   11[COMRAM] unsigned long 
  3955 ;;  exp             1   10[COMRAM] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  4    1[COMRAM] unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;Total ram usage:       14 bytes
  3970 ;; Hardware stack levels used: 1
  3971 ;; Hardware stack levels required when called: 1
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_convert_rgb2hue
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text11
  3981   002BD8                     __ptext11:
  3982                           	callstack 0
  3983   002BD8                     ___xxtofl:
  3984                           	callstack 27
  3985                           
  3986                           ;incstack = 0
  3987                           ;___xxtofl@sign stored from wreg
  3988   002BD8  6E0A               	movwf	___xxtofl@sign^0,c
  3989   002BDA  500A               	movf	___xxtofl@sign^0,w,c
  3990   002BDC  B4D8               	btfsc	status,2,c
  3991   002BDE  EFF3  F015         	goto	u6231
  3992   002BE2  EFF5  F015         	goto	u6230
  3993   002BE6                     u6231:
  3994   002BE6  EF17  F016         	goto	l1387
  3995   002BEA                     u6230:
  3996   002BEA  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3997   002BEC  EFFC  F015         	goto	u6240
  3998   002BF0  EFFA  F015         	goto	u6241
  3999   002BF4                     u6241:
  4000   002BF4  EF17  F016         	goto	l1387
  4001   002BF8                     u6240:
  4002   002BF8  C002  F006         	movff	___xxtofl@val,??___xxtofl
  4003   002BFC  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  4004   002C00  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  4005   002C04  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  4006   002C08  1E06               	comf	??___xxtofl^0,f,c
  4007   002C0A  1E07               	comf	(??___xxtofl+1)^0,f,c
  4008   002C0C  1E08               	comf	(??___xxtofl+2)^0,f,c
  4009   002C0E  1E09               	comf	(??___xxtofl+3)^0,f,c
  4010   002C10  2A06               	incf	??___xxtofl^0,f,c
  4011   002C12  0E00               	movlw	0
  4012   002C14  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4013   002C16  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4014   002C18  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4015   002C1A  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4016   002C1E  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4017   002C22  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4018   002C26  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4019   002C2A  EF1F  F016         	goto	l6440
  4020   002C2E                     l1387:
  4021   002C2E  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4022   002C32  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4023   002C36  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4024   002C3A  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4025   002C3E                     l6440:
  4026   002C3E  5002               	movf	___xxtofl@val^0,w,c
  4027   002C40  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4028   002C42  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4029   002C44  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4030   002C46  A4D8               	btfss	status,2,c
  4031   002C48  EF28  F016         	goto	u6251
  4032   002C4C  EF2A  F016         	goto	u6250
  4033   002C50                     u6251:
  4034   002C50  EF34  F016         	goto	l6446
  4035   002C54                     u6250:
  4036   002C54  0E00               	movlw	0
  4037   002C56  6E02               	movwf	?___xxtofl^0,c
  4038   002C58  0E00               	movlw	0
  4039   002C5A  6E03               	movwf	(?___xxtofl+1)^0,c
  4040   002C5C  0E00               	movlw	0
  4041   002C5E  6E04               	movwf	(?___xxtofl+2)^0,c
  4042   002C60  0E00               	movlw	0
  4043   002C62  6E05               	movwf	(?___xxtofl+3)^0,c
  4044   002C64  EFC5  F016         	goto	l1390
  4045   002C68                     l6446:
  4046   002C68  0E96               	movlw	150
  4047   002C6A  6E0B               	movwf	___xxtofl@exp^0,c
  4048   002C6C  EF3E  F016         	goto	l6450
  4049   002C70                     l6448:
  4050   002C70  2A0B               	incf	___xxtofl@exp^0,f,c
  4051   002C72  90D8               	bcf	status,0,c
  4052   002C74  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4053   002C76  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4054   002C78  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4055   002C7A  320C               	rrcf	___xxtofl@arg^0,f,c
  4056   002C7C                     l6450:
  4057   002C7C  0E00               	movlw	0
  4058   002C7E  140C               	andwf	___xxtofl@arg^0,w,c
  4059   002C80  6E06               	movwf	??___xxtofl^0,c
  4060   002C82  0E00               	movlw	0
  4061   002C84  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4062   002C86  6E07               	movwf	(??___xxtofl+1)^0,c
  4063   002C88  0E00               	movlw	0
  4064   002C8A  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4065   002C8C  6E08               	movwf	(??___xxtofl+2)^0,c
  4066   002C8E  0EFE               	movlw	254
  4067   002C90  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4068   002C92  6E09               	movwf	(??___xxtofl+3)^0,c
  4069   002C94  5006               	movf	??___xxtofl^0,w,c
  4070   002C96  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4071   002C98  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4072   002C9A  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4073   002C9C  A4D8               	btfss	status,2,c
  4074   002C9E  EF53  F016         	goto	u6261
  4075   002CA2  EF55  F016         	goto	u6260
  4076   002CA6                     u6261:
  4077   002CA6  EF38  F016         	goto	l6448
  4078   002CAA                     u6260:
  4079   002CAA  EF63  F016         	goto	l1394
  4080   002CAE                     l6452:
  4081   002CAE  2A0B               	incf	___xxtofl@exp^0,f,c
  4082   002CB0  0E01               	movlw	1
  4083   002CB2  260C               	addwf	___xxtofl@arg^0,f,c
  4084   002CB4  0E00               	movlw	0
  4085   002CB6  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4086   002CB8  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4087   002CBA  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4088   002CBC  90D8               	bcf	status,0,c
  4089   002CBE  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4090   002CC0  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4091   002CC2  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4092   002CC4  320C               	rrcf	___xxtofl@arg^0,f,c
  4093   002CC6                     l1394:
  4094   002CC6  0E00               	movlw	0
  4095   002CC8  140C               	andwf	___xxtofl@arg^0,w,c
  4096   002CCA  6E06               	movwf	??___xxtofl^0,c
  4097   002CCC  0E00               	movlw	0
  4098   002CCE  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4099   002CD0  6E07               	movwf	(??___xxtofl+1)^0,c
  4100   002CD2  0E00               	movlw	0
  4101   002CD4  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4102   002CD6  6E08               	movwf	(??___xxtofl+2)^0,c
  4103   002CD8  0EFF               	movlw	255
  4104   002CDA  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4105   002CDC  6E09               	movwf	(??___xxtofl+3)^0,c
  4106   002CDE  5006               	movf	??___xxtofl^0,w,c
  4107   002CE0  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4108   002CE2  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4109   002CE4  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4110   002CE6  A4D8               	btfss	status,2,c
  4111   002CE8  EF78  F016         	goto	u6271
  4112   002CEC  EF7A  F016         	goto	u6270
  4113   002CF0                     u6271:
  4114   002CF0  EF57  F016         	goto	l6452
  4115   002CF4                     u6270:
  4116   002CF4  EF82  F016         	goto	l6460
  4117   002CF8                     l6458:
  4118   002CF8  060B               	decf	___xxtofl@exp^0,f,c
  4119   002CFA  90D8               	bcf	status,0,c
  4120   002CFC  360C               	rlcf	___xxtofl@arg^0,f,c
  4121   002CFE  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4122   002D00  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4123   002D02  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4124   002D04                     l6460:
  4125   002D04  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4126   002D06  EF87  F016         	goto	u6281
  4127   002D0A  EF89  F016         	goto	u6280
  4128   002D0E                     u6281:
  4129   002D0E  EF91  F016         	goto	l1401
  4130   002D12                     u6280:
  4131   002D12  0E02               	movlw	2
  4132   002D14  600B               	cpfslt	___xxtofl@exp^0,c
  4133   002D16  EF8F  F016         	goto	u6291
  4134   002D1A  EF91  F016         	goto	u6290
  4135   002D1E                     u6291:
  4136   002D1E  EF7C  F016         	goto	l6458
  4137   002D22                     u6290:
  4138   002D22                     l1401:
  4139   002D22  B00B               	btfsc	___xxtofl@exp^0,0,c
  4140   002D24  EF96  F016         	goto	u6301
  4141   002D28  EF98  F016         	goto	u6300
  4142   002D2C                     u6301:
  4143   002D2C  EF99  F016         	goto	l6466
  4144   002D30                     u6300:
  4145   002D30  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4146   002D32                     l6466:
  4147   002D32  90D8               	bcf	status,0,c
  4148   002D34  320B               	rrcf	___xxtofl@exp^0,f,c
  4149   002D36  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4150   002D3A  6A07               	clrf	(??___xxtofl+1)^0,c
  4151   002D3C  6A08               	clrf	(??___xxtofl+2)^0,c
  4152   002D3E  6A09               	clrf	(??___xxtofl+3)^0,c
  4153   002D40  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4154   002D44  6A08               	clrf	(??___xxtofl+2)^0,c
  4155   002D46  6A07               	clrf	(??___xxtofl+1)^0,c
  4156   002D48  6A06               	clrf	??___xxtofl^0,c
  4157   002D4A  5006               	movf	??___xxtofl^0,w,c
  4158   002D4C  120C               	iorwf	___xxtofl@arg^0,f,c
  4159   002D4E  5007               	movf	(??___xxtofl+1)^0,w,c
  4160   002D50  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4161   002D52  5008               	movf	(??___xxtofl+2)^0,w,c
  4162   002D54  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4163   002D56  5009               	movf	(??___xxtofl+3)^0,w,c
  4164   002D58  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4165   002D5A  500A               	movf	___xxtofl@sign^0,w,c
  4166   002D5C  B4D8               	btfsc	status,2,c
  4167   002D5E  EFB3  F016         	goto	u6311
  4168   002D62  EFB5  F016         	goto	u6310
  4169   002D66                     u6311:
  4170   002D66  EFBD  F016         	goto	l6476
  4171   002D6A                     u6310:
  4172   002D6A  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4173   002D6C  EFBC  F016         	goto	u6320
  4174   002D70  EFBA  F016         	goto	u6321
  4175   002D74                     u6321:
  4176   002D74  EFBD  F016         	goto	l6476
  4177   002D78                     u6320:
  4178   002D78  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4179   002D7A                     l6476:
  4180   002D7A  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4181   002D7E  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4182   002D82  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4183   002D86  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4184   002D8A                     l1390:
  4185   002D8A  0012               	return		;funcret
  4186   002D8C                     __end_of___xxtofl:
  4187                           	callstack 0
  4188                           
  4189 ;; *************** function ___fltol *****************
  4190 ;; Defined at:
  4191 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  f1              4   51[COMRAM] unsigned char 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  exp1            1   60[COMRAM] unsigned char 
  4196 ;;  sign1           1   59[COMRAM] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  4   51[COMRAM] long 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2, status,0
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4210 ;;Total ram usage:       10 bytes
  4211 ;; Hardware stack levels used: 1
  4212 ;; Hardware stack levels required when called: 1
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_convert_rgb2hue
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text12
  4222   00355C                     __ptext12:
  4223                           	callstack 0
  4224   00355C                     ___fltol:
  4225                           	callstack 27
  4226   00355C  3436               	rlcf	(___fltol@f1+2)^0,w,c
  4227   00355E  3437               	rlcf	(___fltol@f1+3)^0,w,c
  4228   003560  6E3D               	movwf	___fltol@exp1^0,c
  4229   003562  503D               	movf	___fltol@exp1^0,w,c
  4230   003564  A4D8               	btfss	status,2,c
  4231   003566  EFB7  F01A         	goto	u6161
  4232   00356A  EFB9  F01A         	goto	u6160
  4233   00356E                     u6161:
  4234   00356E  EFC3  F01A         	goto	l6396
  4235   003572                     u6160:
  4236   003572                     l6392:
  4237   003572  0E00               	movlw	0
  4238   003574  6E34               	movwf	?___fltol^0,c
  4239   003576  0E00               	movlw	0
  4240   003578  6E35               	movwf	(?___fltol+1)^0,c
  4241   00357A  0E00               	movlw	0
  4242   00357C  6E36               	movwf	(?___fltol+2)^0,c
  4243   00357E  0E00               	movlw	0
  4244   003580  6E37               	movwf	(?___fltol+3)^0,c
  4245   003582  EF30  F01B         	goto	l1029
  4246   003586                     l6396:
  4247   003586  C034  F038         	movff	___fltol@f1,??___fltol
  4248   00358A  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4249   00358E  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4250   003592  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4251   003596  0E20               	movlw	32
  4252   003598  EFD3  F01A         	goto	u6170
  4253   00359C                     u6175:
  4254   00359C  90D8               	bcf	status,0,c
  4255   00359E  323B               	rrcf	(??___fltol+3)^0,f,c
  4256   0035A0  323A               	rrcf	(??___fltol+2)^0,f,c
  4257   0035A2  3239               	rrcf	(??___fltol+1)^0,f,c
  4258   0035A4  3238               	rrcf	??___fltol^0,f,c
  4259   0035A6                     u6170:
  4260   0035A6  2EE8               	decfsz	wreg,f,c
  4261   0035A8  EFCE  F01A         	goto	u6175
  4262   0035AC  5038               	movf	??___fltol^0,w,c
  4263   0035AE  6E3C               	movwf	___fltol@sign1^0,c
  4264   0035B0  8E36               	bsf	(___fltol@f1+2)^0,7,c
  4265   0035B2  0EFF               	movlw	255
  4266   0035B4  1634               	andwf	___fltol@f1^0,f,c
  4267   0035B6  0EFF               	movlw	255
  4268   0035B8  1635               	andwf	(___fltol@f1+1)^0,f,c
  4269   0035BA  0EFF               	movlw	255
  4270   0035BC  1636               	andwf	(___fltol@f1+2)^0,f,c
  4271   0035BE  0E00               	movlw	0
  4272   0035C0  1637               	andwf	(___fltol@f1+3)^0,f,c
  4273   0035C2  0E96               	movlw	150
  4274   0035C4  5E3D               	subwf	___fltol@exp1^0,f,c
  4275   0035C6  BE3D               	btfsc	___fltol@exp1^0,7,c
  4276   0035C8  EFEA  F01A         	goto	u6180
  4277   0035CC  EFE8  F01A         	goto	u6181
  4278   0035D0                     u6181:
  4279   0035D0  EF00  F01B         	goto	l6416
  4280   0035D4                     u6180:
  4281   0035D4  503D               	movf	___fltol@exp1^0,w,c
  4282   0035D6  0A80               	xorlw	128
  4283   0035D8  0F97               	addlw	151
  4284   0035DA  B0D8               	btfsc	status,0,c
  4285   0035DC  EFF2  F01A         	goto	u6191
  4286   0035E0  EFF4  F01A         	goto	u6190
  4287   0035E4                     u6191:
  4288   0035E4  EFF6  F01A         	goto	l6412
  4289   0035E8                     u6190:
  4290   0035E8  EFB9  F01A         	goto	l6392
  4291   0035EC                     l6412:
  4292   0035EC  90D8               	bcf	status,0,c
  4293   0035EE  3237               	rrcf	(___fltol@f1+3)^0,f,c
  4294   0035F0  3236               	rrcf	(___fltol@f1+2)^0,f,c
  4295   0035F2  3235               	rrcf	(___fltol@f1+1)^0,f,c
  4296   0035F4  3234               	rrcf	___fltol@f1^0,f,c
  4297   0035F6  3E3D               	incfsz	___fltol@exp1^0,f,c
  4298   0035F8  EFF6  F01A         	goto	l6412
  4299   0035FC  EF18  F01B         	goto	l6426
  4300   003600                     l6416:
  4301   003600  0E1F               	movlw	31
  4302   003602  643D               	cpfsgt	___fltol@exp1^0,c
  4303   003604  EF06  F01B         	goto	u6201
  4304   003608  EF08  F01B         	goto	u6200
  4305   00360C                     u6201:
  4306   00360C  EF10  F01B         	goto	l6424
  4307   003610                     u6200:
  4308   003610  EFB9  F01A         	goto	l6392
  4309   003614                     l6422:
  4310   003614  90D8               	bcf	status,0,c
  4311   003616  3634               	rlcf	___fltol@f1^0,f,c
  4312   003618  3635               	rlcf	(___fltol@f1+1)^0,f,c
  4313   00361A  3636               	rlcf	(___fltol@f1+2)^0,f,c
  4314   00361C  3637               	rlcf	(___fltol@f1+3)^0,f,c
  4315   00361E  063D               	decf	___fltol@exp1^0,f,c
  4316   003620                     l6424:
  4317   003620  503D               	movf	___fltol@exp1^0,w,c
  4318   003622  A4D8               	btfss	status,2,c
  4319   003624  EF16  F01B         	goto	u6211
  4320   003628  EF18  F01B         	goto	u6210
  4321   00362C                     u6211:
  4322   00362C  EF0A  F01B         	goto	l6422
  4323   003630                     u6210:
  4324   003630                     l6426:
  4325   003630  503C               	movf	___fltol@sign1^0,w,c
  4326   003632  B4D8               	btfsc	status,2,c
  4327   003634  EF1E  F01B         	goto	u6221
  4328   003638  EF20  F01B         	goto	u6220
  4329   00363C                     u6221:
  4330   00363C  EF28  F01B         	goto	l6430
  4331   003640                     u6220:
  4332   003640  1E37               	comf	(___fltol@f1+3)^0,f,c
  4333   003642  1E36               	comf	(___fltol@f1+2)^0,f,c
  4334   003644  1E35               	comf	(___fltol@f1+1)^0,f,c
  4335   003646  6C34               	negf	___fltol@f1^0,c
  4336   003648  0E00               	movlw	0
  4337   00364A  2235               	addwfc	(___fltol@f1+1)^0,f,c
  4338   00364C  2236               	addwfc	(___fltol@f1+2)^0,f,c
  4339   00364E  2237               	addwfc	(___fltol@f1+3)^0,f,c
  4340   003650                     l6430:
  4341   003650  C034  F034         	movff	___fltol@f1,?___fltol
  4342   003654  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4343   003658  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4344   00365C  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4345   003660                     l1029:
  4346   003660  0012               	return		;funcret
  4347   003662                     __end_of___fltol:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function ___flsub *****************
  4351 ;; Defined at:
  4352 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  b               4   17[COMRAM] long 
  4355 ;;  a               4   21[COMRAM] long 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  4   17[COMRAM] long 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4367 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4370 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4371 ;;Total ram usage:        8 bytes
  4372 ;; Hardware stack levels used: 1
  4373 ;; Hardware stack levels required when called: 2
  4374 ;; This function calls:
  4375 ;;		___fladd
  4376 ;; This function is called by:
  4377 ;;		_convert_rgb2hue
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text13
  4382   0041F6                     __ptext13:
  4383                           	callstack 0
  4384   0041F6                     ___flsub:
  4385                           	callstack 26
  4386   0041F6  0E00               	movlw	0
  4387   0041F8  1A16               	xorwf	___flsub@a^0,f,c
  4388   0041FA  0E00               	movlw	0
  4389   0041FC  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4390   0041FE  0E00               	movlw	0
  4391   004200  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4392   004202  0E80               	movlw	128
  4393   004204  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4394   004206  C012  F002         	movff	___flsub@b,___fladd@b
  4395   00420A  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4396   00420E  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4397   004212  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4398   004216  C016  F006         	movff	___flsub@a,___fladd@a
  4399   00421A  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4400   00421E  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4401   004222  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4402   004226  EC2C  F00B         	call	___fladd	;wreg free
  4403   00422A  C002  F012         	movff	?___fladd,?___flsub
  4404   00422E  C003  F013         	movff	?___fladd+1,?___flsub+1
  4405   004232  C004  F014         	movff	?___fladd+2,?___flsub+2
  4406   004236  C005  F015         	movff	?___fladd+3,?___flsub+3
  4407   00423A  0012               	return		;funcret
  4408   00423C                     __end_of___flsub:
  4409                           	callstack 0
  4410                           
  4411 ;; *************** function ___fladd *****************
  4412 ;; Defined at:
  4413 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  b               4    1[COMRAM] long 
  4416 ;;  a               4    5[COMRAM] long 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  grs             1   16[COMRAM] unsigned char 
  4419 ;;  bexp            1   15[COMRAM] unsigned char 
  4420 ;;  aexp            1   14[COMRAM] unsigned char 
  4421 ;;  signs           1   13[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  4    1[COMRAM] unsigned char 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4431 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;Total ram usage:       16 bytes
  4436 ;; Hardware stack levels used: 1
  4437 ;; Hardware stack levels required when called: 1
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_convert_rgb2hue
  4442 ;;		___flsub
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text14
  4447   001658                     __ptext14:
  4448                           	callstack 0
  4449   001658                     ___fladd:
  4450                           	callstack 26
  4451   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4452   00165A  0B80               	andlw	128
  4453   00165C  6E0E               	movwf	___fladd@signs^0,c
  4454   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4455   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4456   001662  6E10               	movwf	___fladd@bexp^0,c
  4457   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4458   001666  EF37  F00B         	goto	u5221
  4459   00166A  EF39  F00B         	goto	u5220
  4460   00166E                     u5221:
  4461   00166E  EF3A  F00B         	goto	l5772
  4462   001672                     u5220:
  4463   001672  8010               	bsf	___fladd@bexp^0,0,c
  4464   001674                     l5772:
  4465   001674  5010               	movf	___fladd@bexp^0,w,c
  4466   001676  B4D8               	btfsc	status,2,c
  4467   001678  EF40  F00B         	goto	u5231
  4468   00167C  EF42  F00B         	goto	u5230
  4469   001680                     u5231:
  4470   001680  EF57  F00B         	goto	l5782
  4471   001684                     u5230:
  4472   001684  2810               	incf	___fladd@bexp^0,w,c
  4473   001686  A4D8               	btfss	status,2,c
  4474   001688  EF48  F00B         	goto	u5241
  4475   00168C  EF4A  F00B         	goto	u5240
  4476   001690                     u5241:
  4477   001690  EF52  F00B         	goto	l5778
  4478   001694                     u5240:
  4479   001694  0E00               	movlw	0
  4480   001696  6E02               	movwf	___fladd@b^0,c
  4481   001698  0E00               	movlw	0
  4482   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4483   00169C  0E00               	movlw	0
  4484   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4485   0016A0  0E00               	movlw	0
  4486   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4487   0016A4                     l5778:
  4488   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4489   0016A6  0E00               	movlw	0
  4490   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4491   0016AA  EF5F  F00B         	goto	l5784
  4492   0016AE                     l5782:
  4493   0016AE  0E00               	movlw	0
  4494   0016B0  6E02               	movwf	___fladd@b^0,c
  4495   0016B2  0E00               	movlw	0
  4496   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4497   0016B6  0E00               	movlw	0
  4498   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4499   0016BA  0E00               	movlw	0
  4500   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4501   0016BE                     l5784:
  4502   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4503   0016C0  0B80               	andlw	128
  4504   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4505   0016C4  500E               	movf	___fladd@signs^0,w,c
  4506   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4507   0016C8  B4D8               	btfsc	status,2,c
  4508   0016CA  EF69  F00B         	goto	u5251
  4509   0016CE  EF6B  F00B         	goto	u5250
  4510   0016D2                     u5251:
  4511   0016D2  EF6C  F00B         	goto	l5790
  4512   0016D6                     u5250:
  4513   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4514   0016D8                     l5790:
  4515   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4516   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4517   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4518   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4519   0016E0  EF74  F00B         	goto	u5261
  4520   0016E4  EF76  F00B         	goto	u5260
  4521   0016E8                     u5261:
  4522   0016E8  EF77  F00B         	goto	l5796
  4523   0016EC                     u5260:
  4524   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4525   0016EE                     l5796:
  4526   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4527   0016F0  B4D8               	btfsc	status,2,c
  4528   0016F2  EF7D  F00B         	goto	u5271
  4529   0016F6  EF7F  F00B         	goto	u5270
  4530   0016FA                     u5271:
  4531   0016FA  EF94  F00B         	goto	l5806
  4532   0016FE                     u5270:
  4533   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4534   001700  A4D8               	btfss	status,2,c
  4535   001702  EF85  F00B         	goto	u5281
  4536   001706  EF87  F00B         	goto	u5280
  4537   00170A                     u5281:
  4538   00170A  EF8F  F00B         	goto	l5802
  4539   00170E                     u5280:
  4540   00170E  0E00               	movlw	0
  4541   001710  6E06               	movwf	___fladd@a^0,c
  4542   001712  0E00               	movlw	0
  4543   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4544   001716  0E00               	movlw	0
  4545   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4546   00171A  0E00               	movlw	0
  4547   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4548   00171E                     l5802:
  4549   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4550   001720  0E00               	movlw	0
  4551   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4552   001724  EF9C  F00B         	goto	l5808
  4553   001728                     l5806:
  4554   001728  0E00               	movlw	0
  4555   00172A  6E06               	movwf	___fladd@a^0,c
  4556   00172C  0E00               	movlw	0
  4557   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4558   001730  0E00               	movlw	0
  4559   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4560   001734  0E00               	movlw	0
  4561   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4562   001738                     l5808:
  4563   001738  5010               	movf	___fladd@bexp^0,w,c
  4564   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4565   00173C  B0D8               	btfsc	status,0,c
  4566   00173E  EFA3  F00B         	goto	u5291
  4567   001742  EFA5  F00B         	goto	u5290
  4568   001746                     u5291:
  4569   001746  EFCC  F00B         	goto	l5844
  4570   00174A                     u5290:
  4571   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4572   00174C  EFAA  F00B         	goto	u5301
  4573   001750  EFAC  F00B         	goto	u5300
  4574   001754                     u5301:
  4575   001754  EFAE  F00B         	goto	l5814
  4576   001758                     u5300:
  4577   001758  0E80               	movlw	128
  4578   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4579   00175C                     l5814:
  4580   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4581   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4582   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4583   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4584   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4585   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4586   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4587   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4588   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4589   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4590   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4591   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4592   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4593   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4594   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4595   001798                     l5844:
  4596   001798  0E00               	movlw	0
  4597   00179A  6E11               	movwf	___fladd@grs^0,c
  4598   00179C  5010               	movf	___fladd@bexp^0,w,c
  4599   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4600   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4601   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4602   0017A6  0E00               	movlw	0
  4603   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4604   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4605   0017AC  EFE1  F00B         	goto	u5311
  4606   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4607   0017B2  E109               	bnz	u5310
  4608   0017B4  0E1A               	movlw	26
  4609   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4610   0017B8  A0D8               	btfss	status,0,c
  4611   0017BA  EFE1  F00B         	goto	u5311
  4612   0017BE  EFE3  F00B         	goto	u5310
  4613   0017C2                     u5311:
  4614   0017C2  EF1A  F00C         	goto	l1261
  4615   0017C6                     u5310:
  4616   0017C6  5002               	movf	___fladd@b^0,w,c
  4617   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4618   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4619   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4620   0017CE  A4D8               	btfss	status,2,c
  4621   0017D0  EFEC  F00B         	goto	u5321
  4622   0017D4  EFEF  F00B         	goto	u5320
  4623   0017D8                     u5321:
  4624   0017D8  0E01               	movlw	1
  4625   0017DA  EFF0  F00B         	goto	u5330
  4626   0017DE                     u5320:
  4627   0017DE  0E00               	movlw	0
  4628   0017E0                     u5330:
  4629   0017E0  6E11               	movwf	___fladd@grs^0,c
  4630   0017E2  0E00               	movlw	0
  4631   0017E4  6E02               	movwf	___fladd@b^0,c
  4632   0017E6  0E00               	movlw	0
  4633   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4634   0017EA  0E00               	movlw	0
  4635   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4636   0017EE  0E00               	movlw	0
  4637   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4638   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4639   0017F6  EF23  F00C         	goto	l1260
  4640   0017FA                     l1262:
  4641   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4642   0017FC  EF02  F00C         	goto	u5341
  4643   001800  EF04  F00C         	goto	u5340
  4644   001804                     u5341:
  4645   001804  EF0A  F00C         	goto	l5856
  4646   001808                     u5340:
  4647   001808  90D8               	bcf	status,0,c
  4648   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4649   00180C  0901               	iorlw	1
  4650   00180E  6E11               	movwf	___fladd@grs^0,c
  4651   001810  EF0C  F00C         	goto	l5858
  4652   001814                     l5856:
  4653   001814  90D8               	bcf	status,0,c
  4654   001816  3211               	rrcf	___fladd@grs^0,f,c
  4655   001818                     l5858:
  4656   001818  A002               	btfss	___fladd@b^0,0,c
  4657   00181A  EF11  F00C         	goto	u5351
  4658   00181E  EF13  F00C         	goto	u5350
  4659   001822                     u5351:
  4660   001822  EF14  F00C         	goto	l5862
  4661   001826                     u5350:
  4662   001826  8E11               	bsf	___fladd@grs^0,7,c
  4663   001828                     l5862:
  4664   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4665   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4666   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4667   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4668   001830  3202               	rrcf	___fladd@b^0,f,c
  4669   001832  2A10               	incf	___fladd@bexp^0,f,c
  4670   001834                     l1261:
  4671   001834  500F               	movf	___fladd@aexp^0,w,c
  4672   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4673   001838  A0D8               	btfss	status,0,c
  4674   00183A  EF21  F00C         	goto	u5361
  4675   00183E  EF23  F00C         	goto	u5360
  4676   001842                     u5361:
  4677   001842  EFFD  F00B         	goto	l1262
  4678   001846                     u5360:
  4679   001846                     l1260:
  4680   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4681   001848  EF28  F00C         	goto	u5371
  4682   00184C  EF2A  F00C         	goto	u5370
  4683   001850                     u5371:
  4684   001850  EF6A  F00C         	goto	l5890
  4685   001854                     u5370:
  4686   001854  5010               	movf	___fladd@bexp^0,w,c
  4687   001856  A4D8               	btfss	status,2,c
  4688   001858  EF30  F00C         	goto	u5381
  4689   00185C  EF32  F00C         	goto	u5380
  4690   001860                     u5381:
  4691   001860  EF3C  F00C         	goto	l5872
  4692   001864                     u5380:
  4693   001864  0E00               	movlw	0
  4694   001866  6E02               	movwf	?___fladd^0,c
  4695   001868  0E00               	movlw	0
  4696   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4697   00186C  0E00               	movlw	0
  4698   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4699   001870  0E00               	movlw	0
  4700   001872  6E05               	movwf	(?___fladd+3)^0,c
  4701   001874  EF8B  F00D         	goto	l1269
  4702   001878                     l5872:
  4703   001878  5006               	movf	___fladd@a^0,w,c
  4704   00187A  2602               	addwf	___fladd@b^0,f,c
  4705   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4706   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4707   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4708   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4709   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4710   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4711   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4712   00188A  EF49  F00C         	goto	u5391
  4713   00188E  EF4B  F00C         	goto	u5390
  4714   001892                     u5391:
  4715   001892  EFF7  F00C         	goto	l5926
  4716   001896                     u5390:
  4717   001896  A011               	btfss	___fladd@grs^0,0,c
  4718   001898  EF50  F00C         	goto	u5401
  4719   00189C  EF52  F00C         	goto	u5400
  4720   0018A0                     u5401:
  4721   0018A0  EF58  F00C         	goto	l5880
  4722   0018A4                     u5400:
  4723   0018A4  90D8               	bcf	status,0,c
  4724   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4725   0018A8  0901               	iorlw	1
  4726   0018AA  6E11               	movwf	___fladd@grs^0,c
  4727   0018AC  EF5A  F00C         	goto	l5882
  4728   0018B0                     l5880:
  4729   0018B0  90D8               	bcf	status,0,c
  4730   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4731   0018B4                     l5882:
  4732   0018B4  A002               	btfss	___fladd@b^0,0,c
  4733   0018B6  EF5F  F00C         	goto	u5411
  4734   0018BA  EF61  F00C         	goto	u5410
  4735   0018BE                     u5411:
  4736   0018BE  EF62  F00C         	goto	l5886
  4737   0018C2                     u5410:
  4738   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4739   0018C4                     l5886:
  4740   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4741   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4742   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4743   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4744   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4745   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4746   0018D0  EFF7  F00C         	goto	l5926
  4747   0018D4                     l5890:
  4748   0018D4  5006               	movf	___fladd@a^0,w,c
  4749   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4750   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4751   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4752   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4753   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4754   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4755   0018E2  0A80               	xorlw	128
  4756   0018E4  6E0A               	movwf	??___fladd^0,c
  4757   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4758   0018E8  0A80               	xorlw	128
  4759   0018EA  580A               	subwfb	??___fladd^0,w,c
  4760   0018EC  B0D8               	btfsc	status,0,c
  4761   0018EE  EF7B  F00C         	goto	u5421
  4762   0018F2  EF7D  F00C         	goto	u5420
  4763   0018F6                     u5421:
  4764   0018F6  EFA8  F00C         	goto	l5900
  4765   0018FA                     u5420:
  4766   0018FA  5002               	movf	___fladd@b^0,w,c
  4767   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4768   0018FE  6E0A               	movwf	??___fladd^0,c
  4769   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4770   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4771   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4772   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4773   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4774   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4775   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4776   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4777   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4778   001912  0EFF               	movlw	255
  4779   001914  240A               	addwf	??___fladd^0,w,c
  4780   001916  6E02               	movwf	___fladd@b^0,c
  4781   001918  0EFF               	movlw	255
  4782   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4783   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4784   00191E  0EFF               	movlw	255
  4785   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4786   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4787   001924  0EFF               	movlw	255
  4788   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4789   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4790   00192A  0E80               	movlw	128
  4791   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4792   00192E  6C11               	negf	___fladd@grs^0,c
  4793   001930  5011               	movf	___fladd@grs^0,w,c
  4794   001932  A4D8               	btfss	status,2,c
  4795   001934  EF9E  F00C         	goto	u5431
  4796   001938  EFA0  F00C         	goto	u5430
  4797   00193C                     u5431:
  4798   00193C  EFB0  F00C         	goto	l1277
  4799   001940                     u5430:
  4800   001940  0E01               	movlw	1
  4801   001942  2602               	addwf	___fladd@b^0,f,c
  4802   001944  0E00               	movlw	0
  4803   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4804   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4805   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4806   00194C  EFB0  F00C         	goto	l1277
  4807   001950                     l5900:
  4808   001950  5006               	movf	___fladd@a^0,w,c
  4809   001952  5E02               	subwf	___fladd@b^0,f,c
  4810   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4811   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4812   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4813   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4814   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4815   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4816   001960                     l1277:
  4817   001960  5002               	movf	___fladd@b^0,w,c
  4818   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4819   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4820   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4821   001968  A4D8               	btfss	status,2,c
  4822   00196A  EFB9  F00C         	goto	u5441
  4823   00196E  EFBB  F00C         	goto	u5440
  4824   001972                     u5441:
  4825   001972  EFF0  F00C         	goto	l5924
  4826   001976                     u5440:
  4827   001976  5011               	movf	___fladd@grs^0,w,c
  4828   001978  A4D8               	btfss	status,2,c
  4829   00197A  EFC1  F00C         	goto	u5451
  4830   00197E  EFC3  F00C         	goto	u5450
  4831   001982                     u5451:
  4832   001982  EFF0  F00C         	goto	l5924
  4833   001986                     u5450:
  4834   001986  0E00               	movlw	0
  4835   001988  6E02               	movwf	?___fladd^0,c
  4836   00198A  0E00               	movlw	0
  4837   00198C  6E03               	movwf	(?___fladd+1)^0,c
  4838   00198E  0E00               	movlw	0
  4839   001990  6E04               	movwf	(?___fladd+2)^0,c
  4840   001992  0E00               	movlw	0
  4841   001994  6E05               	movwf	(?___fladd+3)^0,c
  4842   001996  EF8B  F00D         	goto	l1269
  4843   00199A                     l5908:
  4844   00199A  90D8               	bcf	status,0,c
  4845   00199C  3602               	rlcf	___fladd@b^0,f,c
  4846   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  4847   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  4848   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  4849   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  4850   0019A6  EFD7  F00C         	goto	u5461
  4851   0019AA  EFD9  F00C         	goto	u5460
  4852   0019AE                     u5461:
  4853   0019AE  EFDA  F00C         	goto	l5914
  4854   0019B2                     u5460:
  4855   0019B2  8002               	bsf	___fladd@b^0,0,c
  4856   0019B4                     l5914:
  4857   0019B4  A011               	btfss	___fladd@grs^0,0,c
  4858   0019B6  EFDF  F00C         	goto	u5471
  4859   0019BA  EFE1  F00C         	goto	u5470
  4860   0019BE                     u5471:
  4861   0019BE  EFE5  F00C         	goto	l5918
  4862   0019C2                     u5470:
  4863   0019C2  80D8               	bsf	status,0,c
  4864   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  4865   0019C6  EFE7  F00C         	goto	l5920
  4866   0019CA                     l5918:
  4867   0019CA  90D8               	bcf	status,0,c
  4868   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  4869   0019CE                     l5920:
  4870   0019CE  5010               	movf	___fladd@bexp^0,w,c
  4871   0019D0  B4D8               	btfsc	status,2,c
  4872   0019D2  EFED  F00C         	goto	u5481
  4873   0019D6  EFEF  F00C         	goto	u5480
  4874   0019DA                     u5481:
  4875   0019DA  EFF0  F00C         	goto	l5924
  4876   0019DE                     u5480:
  4877   0019DE  0610               	decf	___fladd@bexp^0,f,c
  4878   0019E0                     l5924:
  4879   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  4880   0019E2  EFF5  F00C         	goto	u5491
  4881   0019E6  EFF7  F00C         	goto	u5490
  4882   0019EA                     u5491:
  4883   0019EA  EFCD  F00C         	goto	l5908
  4884   0019EE                     u5490:
  4885   0019EE                     l5926:
  4886   0019EE  0E00               	movlw	0
  4887   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  4888   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  4889   0019F4  EFFE  F00C         	goto	u5501
  4890   0019F8  EF00  F00D         	goto	u5500
  4891   0019FC                     u5501:
  4892   0019FC  EF18  F00D         	goto	l1286
  4893   001A00                     u5500:
  4894   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  4895   001A04  0E7F               	movlw	127
  4896   001A06  160A               	andwf	??___fladd^0,f,c
  4897   001A08  B4D8               	btfsc	status,2,c
  4898   001A0A  EF09  F00D         	goto	u5511
  4899   001A0E  EF0B  F00D         	goto	u5510
  4900   001A12                     u5511:
  4901   001A12  EF0F  F00D         	goto	l1287
  4902   001A16                     u5510:
  4903   001A16                     l5932:
  4904   001A16  0E01               	movlw	1
  4905   001A18  6E0F               	movwf	___fladd@aexp^0,c
  4906   001A1A  EF18  F00D         	goto	l1286
  4907   001A1E                     l1287:
  4908   001A1E  A002               	btfss	___fladd@b^0,0,c
  4909   001A20  EF14  F00D         	goto	u5521
  4910   001A24  EF16  F00D         	goto	u5520
  4911   001A28                     u5521:
  4912   001A28  EF18  F00D         	goto	l1286
  4913   001A2C                     u5520:
  4914   001A2C  EF0B  F00D         	goto	l5932
  4915   001A30                     l1286:
  4916   001A30  500F               	movf	___fladd@aexp^0,w,c
  4917   001A32  B4D8               	btfsc	status,2,c
  4918   001A34  EF1E  F00D         	goto	u5531
  4919   001A38  EF20  F00D         	goto	u5530
  4920   001A3C                     u5531:
  4921   001A3C  EF4B  F00D         	goto	l5944
  4922   001A40                     u5530:
  4923   001A40  0E01               	movlw	1
  4924   001A42  2602               	addwf	___fladd@b^0,f,c
  4925   001A44  0E00               	movlw	0
  4926   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  4927   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  4928   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4929   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  4930   001A4E  EF2B  F00D         	goto	u5541
  4931   001A52  EF2D  F00D         	goto	u5540
  4932   001A56                     u5541:
  4933   001A56  EF4B  F00D         	goto	l5944
  4934   001A5A                     u5540:
  4935   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  4936   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4937   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4938   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4939   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  4940   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  4941   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  4942   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  4943   001A72  320A               	rrcf	??___fladd^0,f,c
  4944   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  4945   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4946   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4947   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4948   001A84  2810               	incf	___fladd@bexp^0,w,c
  4949   001A86  B4D8               	btfsc	status,2,c
  4950   001A88  EF48  F00D         	goto	u5551
  4951   001A8C  EF4A  F00D         	goto	u5550
  4952   001A90                     u5551:
  4953   001A90  EF4B  F00D         	goto	l5944
  4954   001A94                     u5550:
  4955   001A94  2A10               	incf	___fladd@bexp^0,f,c
  4956   001A96                     l5944:
  4957   001A96  2810               	incf	___fladd@bexp^0,w,c
  4958   001A98  B4D8               	btfsc	status,2,c
  4959   001A9A  EF51  F00D         	goto	u5561
  4960   001A9E  EF53  F00D         	goto	u5560
  4961   001AA2                     u5561:
  4962   001AA2  EF5B  F00D         	goto	l5948
  4963   001AA6                     u5560:
  4964   001AA6  5010               	movf	___fladd@bexp^0,w,c
  4965   001AA8  A4D8               	btfss	status,2,c
  4966   001AAA  EF59  F00D         	goto	u5571
  4967   001AAE  EF5B  F00D         	goto	u5570
  4968   001AB2                     u5571:
  4969   001AB2  EF6D  F00D         	goto	l5952
  4970   001AB6                     u5570:
  4971   001AB6                     l5948:
  4972   001AB6  0E00               	movlw	0
  4973   001AB8  6E02               	movwf	___fladd@b^0,c
  4974   001ABA  0E00               	movlw	0
  4975   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  4976   001ABE  0E00               	movlw	0
  4977   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  4978   001AC2  0E00               	movlw	0
  4979   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  4980   001AC6  5010               	movf	___fladd@bexp^0,w,c
  4981   001AC8  A4D8               	btfss	status,2,c
  4982   001ACA  EF69  F00D         	goto	u5581
  4983   001ACE  EF6B  F00D         	goto	u5580
  4984   001AD2                     u5581:
  4985   001AD2  EF6D  F00D         	goto	l5952
  4986   001AD6                     u5580:
  4987   001AD6  0E00               	movlw	0
  4988   001AD8  6E0E               	movwf	___fladd@signs^0,c
  4989   001ADA                     l5952:
  4990   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  4991   001ADC  EF72  F00D         	goto	u5591
  4992   001AE0  EF74  F00D         	goto	u5590
  4993   001AE4                     u5591:
  4994   001AE4  EF77  F00D         	goto	l5956
  4995   001AE8                     u5590:
  4996   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  4997   001AEA  EF78  F00D         	goto	l5958
  4998   001AEE                     l5956:
  4999   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  5000   001AF0                     l5958:
  5001   001AF0  90D8               	bcf	status,0,c
  5002   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  5003   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  5004   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  5005   001AF8  EF80  F00D         	goto	u5601
  5006   001AFC  EF82  F00D         	goto	u5600
  5007   001B00                     u5601:
  5008   001B00  EF83  F00D         	goto	l5964
  5009   001B04                     u5600:
  5010   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5011   001B06                     l5964:
  5012   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5013   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5014   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5015   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5016   001B16                     l1269:
  5017   001B16  0012               	return		;funcret
  5018   001B18                     __end_of___fladd:
  5019                           	callstack 0
  5020                           
  5021 ;; *************** function ___flmul *****************
  5022 ;; Defined at:
  5023 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  b               4    1[COMRAM] unsigned char 
  5026 ;;  a               4    5[COMRAM] unsigned char 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  prod            4   20[COMRAM] struct .
  5029 ;;  grs             4   15[COMRAM] unsigned long 
  5030 ;;  temp            2   24[COMRAM] struct .
  5031 ;;  bexp            1   19[COMRAM] unsigned char 
  5032 ;;  aexp            1   14[COMRAM] unsigned char 
  5033 ;;  sign            1   13[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  4    1[COMRAM] unsigned char 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, prodl, prodh
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5043 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5044 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;Total ram usage:       25 bytes
  5048 ;; Hardware stack levels used: 1
  5049 ;; Hardware stack levels required when called: 1
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_convert_rgb2hue
  5054 ;;		_main
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text15
  5059   001F82                     __ptext15:
  5060                           	callstack 0
  5061   001F82                     ___flmul:
  5062                           	callstack 27
  5063   001F82  5005               	movf	(___flmul@b+3)^0,w,c
  5064   001F84  0B80               	andlw	128
  5065   001F86  6E0E               	movwf	___flmul@sign^0,c
  5066   001F88  5005               	movf	(___flmul@b+3)^0,w,c
  5067   001F8A  2405               	addwf	(___flmul@b+3)^0,w,c
  5068   001F8C  6E14               	movwf	___flmul@bexp^0,c
  5069   001F8E  AE04               	btfss	(___flmul@b+2)^0,7,c
  5070   001F90  EFCC  F00F         	goto	u5891
  5071   001F94  EFCE  F00F         	goto	u5890
  5072   001F98                     u5891:
  5073   001F98  EFCF  F00F         	goto	l6222
  5074   001F9C                     u5890:
  5075   001F9C  8014               	bsf	___flmul@bexp^0,0,c
  5076   001F9E                     l6222:
  5077   001F9E  5014               	movf	___flmul@bexp^0,w,c
  5078   001FA0  B4D8               	btfsc	status,2,c
  5079   001FA2  EFD5  F00F         	goto	u5901
  5080   001FA6  EFD7  F00F         	goto	u5900
  5081   001FAA                     u5901:
  5082   001FAA  EFEA  F00F         	goto	l6230
  5083   001FAE                     u5900:
  5084   001FAE  2814               	incf	___flmul@bexp^0,w,c
  5085   001FB0  A4D8               	btfss	status,2,c
  5086   001FB2  EFDD  F00F         	goto	u5911
  5087   001FB6  EFDF  F00F         	goto	u5910
  5088   001FBA                     u5911:
  5089   001FBA  EFE7  F00F         	goto	l6228
  5090   001FBE                     u5910:
  5091   001FBE  0E00               	movlw	0
  5092   001FC0  6E02               	movwf	___flmul@b^0,c
  5093   001FC2  0E00               	movlw	0
  5094   001FC4  6E03               	movwf	(___flmul@b+1)^0,c
  5095   001FC6  0E00               	movlw	0
  5096   001FC8  6E04               	movwf	(___flmul@b+2)^0,c
  5097   001FCA  0E00               	movlw	0
  5098   001FCC  6E05               	movwf	(___flmul@b+3)^0,c
  5099   001FCE                     l6228:
  5100   001FCE  8E04               	bsf	(___flmul@b+2)^0,7,c
  5101   001FD0  EFF2  F00F         	goto	l6232
  5102   001FD4                     l6230:
  5103   001FD4  0E00               	movlw	0
  5104   001FD6  6E02               	movwf	___flmul@b^0,c
  5105   001FD8  0E00               	movlw	0
  5106   001FDA  6E03               	movwf	(___flmul@b+1)^0,c
  5107   001FDC  0E00               	movlw	0
  5108   001FDE  6E04               	movwf	(___flmul@b+2)^0,c
  5109   001FE0  0E00               	movlw	0
  5110   001FE2  6E05               	movwf	(___flmul@b+3)^0,c
  5111   001FE4                     l6232:
  5112   001FE4  5009               	movf	(___flmul@a+3)^0,w,c
  5113   001FE6  0B80               	andlw	128
  5114   001FE8  1A0E               	xorwf	___flmul@sign^0,f,c
  5115   001FEA  5009               	movf	(___flmul@a+3)^0,w,c
  5116   001FEC  2409               	addwf	(___flmul@a+3)^0,w,c
  5117   001FEE  6E0F               	movwf	___flmul@aexp^0,c
  5118   001FF0  AE08               	btfss	(___flmul@a+2)^0,7,c
  5119   001FF2  EFFD  F00F         	goto	u5921
  5120   001FF6  EFFF  F00F         	goto	u5920
  5121   001FFA                     u5921:
  5122   001FFA  EF00  F010         	goto	l6240
  5123   001FFE                     u5920:
  5124   001FFE  800F               	bsf	___flmul@aexp^0,0,c
  5125   002000                     l6240:
  5126   002000  500F               	movf	___flmul@aexp^0,w,c
  5127   002002  B4D8               	btfsc	status,2,c
  5128   002004  EF06  F010         	goto	u5931
  5129   002008  EF08  F010         	goto	u5930
  5130   00200C                     u5931:
  5131   00200C  EF1B  F010         	goto	l6248
  5132   002010                     u5930:
  5133   002010  280F               	incf	___flmul@aexp^0,w,c
  5134   002012  A4D8               	btfss	status,2,c
  5135   002014  EF0E  F010         	goto	u5941
  5136   002018  EF10  F010         	goto	u5940
  5137   00201C                     u5941:
  5138   00201C  EF18  F010         	goto	l6246
  5139   002020                     u5940:
  5140   002020  0E00               	movlw	0
  5141   002022  6E06               	movwf	___flmul@a^0,c
  5142   002024  0E00               	movlw	0
  5143   002026  6E07               	movwf	(___flmul@a+1)^0,c
  5144   002028  0E00               	movlw	0
  5145   00202A  6E08               	movwf	(___flmul@a+2)^0,c
  5146   00202C  0E00               	movlw	0
  5147   00202E  6E09               	movwf	(___flmul@a+3)^0,c
  5148   002030                     l6246:
  5149   002030  8E08               	bsf	(___flmul@a+2)^0,7,c
  5150   002032  EF23  F010         	goto	l1346
  5151   002036                     l6248:
  5152   002036  0E00               	movlw	0
  5153   002038  6E06               	movwf	___flmul@a^0,c
  5154   00203A  0E00               	movlw	0
  5155   00203C  6E07               	movwf	(___flmul@a+1)^0,c
  5156   00203E  0E00               	movlw	0
  5157   002040  6E08               	movwf	(___flmul@a+2)^0,c
  5158   002042  0E00               	movlw	0
  5159   002044  6E09               	movwf	(___flmul@a+3)^0,c
  5160   002046                     l1346:
  5161   002046  500F               	movf	___flmul@aexp^0,w,c
  5162   002048  B4D8               	btfsc	status,2,c
  5163   00204A  EF29  F010         	goto	u5951
  5164   00204E  EF2B  F010         	goto	u5950
  5165   002052                     u5951:
  5166   002052  EF33  F010         	goto	l6252
  5167   002056                     u5950:
  5168   002056  5014               	movf	___flmul@bexp^0,w,c
  5169   002058  A4D8               	btfss	status,2,c
  5170   00205A  EF31  F010         	goto	u5961
  5171   00205E  EF33  F010         	goto	u5960
  5172   002062                     u5961:
  5173   002062  EF3D  F010         	goto	l6256
  5174   002066                     u5960:
  5175   002066                     l6252:
  5176   002066  0E00               	movlw	0
  5177   002068  6E02               	movwf	?___flmul^0,c
  5178   00206A  0E00               	movlw	0
  5179   00206C  6E03               	movwf	(?___flmul+1)^0,c
  5180   00206E  0E00               	movlw	0
  5181   002070  6E04               	movwf	(?___flmul+2)^0,c
  5182   002072  0E00               	movlw	0
  5183   002074  6E05               	movwf	(?___flmul+3)^0,c
  5184   002076  EFD5  F011         	goto	l1350
  5185   00207A                     l6256:
  5186   00207A  5008               	movf	(___flmul@a+2)^0,w,c
  5187   00207C  0202               	mulwf	___flmul@b^0,c
  5188   00207E  CFF3 F019          	movff	prodl,___flmul@temp
  5189   002082  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5190   002086  5019               	movf	___flmul@temp^0,w,c
  5191   002088  6E10               	movwf	___flmul@grs^0,c
  5192   00208A  6A11               	clrf	(___flmul@grs+1)^0,c
  5193   00208C  6A12               	clrf	(___flmul@grs+2)^0,c
  5194   00208E  6A13               	clrf	(___flmul@grs+3)^0,c
  5195   002090  501A               	movf	(___flmul@temp+1)^0,w,c
  5196   002092  6E15               	movwf	___flmul@prod^0,c
  5197   002094  6A16               	clrf	(___flmul@prod+1)^0,c
  5198   002096  6A17               	clrf	(___flmul@prod+2)^0,c
  5199   002098  6A18               	clrf	(___flmul@prod+3)^0,c
  5200   00209A  5007               	movf	(___flmul@a+1)^0,w,c
  5201   00209C  0203               	mulwf	(___flmul@b+1)^0,c
  5202   00209E  CFF3 F019          	movff	prodl,___flmul@temp
  5203   0020A2  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5204   0020A6  5019               	movf	___flmul@temp^0,w,c
  5205   0020A8  2610               	addwf	___flmul@grs^0,f,c
  5206   0020AA  0E00               	movlw	0
  5207   0020AC  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5208   0020AE  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5209   0020B0  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5210   0020B2  501A               	movf	(___flmul@temp+1)^0,w,c
  5211   0020B4  2615               	addwf	___flmul@prod^0,f,c
  5212   0020B6  0E00               	movlw	0
  5213   0020B8  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5214   0020BA  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5215   0020BC  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5216   0020BE  5006               	movf	___flmul@a^0,w,c
  5217   0020C0  0204               	mulwf	(___flmul@b+2)^0,c
  5218   0020C2  CFF3 F019          	movff	prodl,___flmul@temp
  5219   0020C6  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5220   0020CA  5019               	movf	___flmul@temp^0,w,c
  5221   0020CC  2610               	addwf	___flmul@grs^0,f,c
  5222   0020CE  0E00               	movlw	0
  5223   0020D0  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5224   0020D2  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5225   0020D4  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5226   0020D6  501A               	movf	(___flmul@temp+1)^0,w,c
  5227   0020D8  2615               	addwf	___flmul@prod^0,f,c
  5228   0020DA  0E00               	movlw	0
  5229   0020DC  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5230   0020DE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5231   0020E0  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5232   0020E2  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5233   0020E6  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5234   0020EA  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5235   0020EE  6A10               	clrf	___flmul@grs^0,c
  5236   0020F0  5006               	movf	___flmul@a^0,w,c
  5237   0020F2  0203               	mulwf	(___flmul@b+1)^0,c
  5238   0020F4  CFF3 F019          	movff	prodl,___flmul@temp
  5239   0020F8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5240   0020FC  5019               	movf	___flmul@temp^0,w,c
  5241   0020FE  2610               	addwf	___flmul@grs^0,f,c
  5242   002100  501A               	movf	(___flmul@temp+1)^0,w,c
  5243   002102  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5244   002104  0E00               	movlw	0
  5245   002106  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5246   002108  0E00               	movlw	0
  5247   00210A  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5248   00210C  5007               	movf	(___flmul@a+1)^0,w,c
  5249   00210E  0202               	mulwf	___flmul@b^0,c
  5250   002110  CFF3 F019          	movff	prodl,___flmul@temp
  5251   002114  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5252   002118  5019               	movf	___flmul@temp^0,w,c
  5253   00211A  2610               	addwf	___flmul@grs^0,f,c
  5254   00211C  501A               	movf	(___flmul@temp+1)^0,w,c
  5255   00211E  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5256   002120  0E00               	movlw	0
  5257   002122  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5258   002124  0E00               	movlw	0
  5259   002126  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5260   002128  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5261   00212C  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5262   002130  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5263   002134  6A10               	clrf	___flmul@grs^0,c
  5264   002136  5006               	movf	___flmul@a^0,w,c
  5265   002138  0202               	mulwf	___flmul@b^0,c
  5266   00213A  CFF3 F019          	movff	prodl,___flmul@temp
  5267   00213E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5268   002142  5019               	movf	___flmul@temp^0,w,c
  5269   002144  2610               	addwf	___flmul@grs^0,f,c
  5270   002146  501A               	movf	(___flmul@temp+1)^0,w,c
  5271   002148  2211               	addwfc	(___flmul@grs+1)^0,f,c
  5272   00214A  0E00               	movlw	0
  5273   00214C  2212               	addwfc	(___flmul@grs+2)^0,f,c
  5274   00214E  0E00               	movlw	0
  5275   002150  2213               	addwfc	(___flmul@grs+3)^0,f,c
  5276   002152  5008               	movf	(___flmul@a+2)^0,w,c
  5277   002154  0203               	mulwf	(___flmul@b+1)^0,c
  5278   002156  CFF3 F019          	movff	prodl,___flmul@temp
  5279   00215A  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5280   00215E  5019               	movf	___flmul@temp^0,w,c
  5281   002160  2615               	addwf	___flmul@prod^0,f,c
  5282   002162  501A               	movf	(___flmul@temp+1)^0,w,c
  5283   002164  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5284   002166  0E00               	movlw	0
  5285   002168  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5286   00216A  0E00               	movlw	0
  5287   00216C  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5288   00216E  5007               	movf	(___flmul@a+1)^0,w,c
  5289   002170  0204               	mulwf	(___flmul@b+2)^0,c
  5290   002172  CFF3 F019          	movff	prodl,___flmul@temp
  5291   002176  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5292   00217A  5019               	movf	___flmul@temp^0,w,c
  5293   00217C  2615               	addwf	___flmul@prod^0,f,c
  5294   00217E  501A               	movf	(___flmul@temp+1)^0,w,c
  5295   002180  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5296   002182  0E00               	movlw	0
  5297   002184  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5298   002186  0E00               	movlw	0
  5299   002188  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5300   00218A  5008               	movf	(___flmul@a+2)^0,w,c
  5301   00218C  0204               	mulwf	(___flmul@b+2)^0,c
  5302   00218E  CFF3 F019          	movff	prodl,___flmul@temp
  5303   002192  CFF4 F01A          	movff	prodh,___flmul@temp+1
  5304   002196  5019               	movf	___flmul@temp^0,w,c
  5305   002198  6E0A               	movwf	??___flmul^0,c
  5306   00219A  501A               	movf	(___flmul@temp+1)^0,w,c
  5307   00219C  6E0B               	movwf	(??___flmul+1)^0,c
  5308   00219E  6A0C               	clrf	(??___flmul+2)^0,c
  5309   0021A0  6A0D               	clrf	(??___flmul+3)^0,c
  5310   0021A2  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  5311   0021A6  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  5312   0021AA  C00A  F00B         	movff	??___flmul,??___flmul+1
  5313   0021AE  6A0A               	clrf	??___flmul^0,c
  5314   0021B0  500A               	movf	??___flmul^0,w,c
  5315   0021B2  2615               	addwf	___flmul@prod^0,f,c
  5316   0021B4  500B               	movf	(??___flmul+1)^0,w,c
  5317   0021B6  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5318   0021B8  500C               	movf	(??___flmul+2)^0,w,c
  5319   0021BA  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5320   0021BC  500D               	movf	(??___flmul+3)^0,w,c
  5321   0021BE  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5322   0021C0  C010  F00A         	movff	___flmul@grs,??___flmul
  5323   0021C4  C011  F00B         	movff	___flmul@grs+1,??___flmul+1
  5324   0021C8  C012  F00C         	movff	___flmul@grs+2,??___flmul+2
  5325   0021CC  C013  F00D         	movff	___flmul@grs+3,??___flmul+3
  5326   0021D0  0E19               	movlw	25
  5327   0021D2  EFF0  F010         	goto	u5970
  5328   0021D6                     u5975:
  5329   0021D6  90D8               	bcf	status,0,c
  5330   0021D8  320D               	rrcf	(??___flmul+3)^0,f,c
  5331   0021DA  320C               	rrcf	(??___flmul+2)^0,f,c
  5332   0021DC  320B               	rrcf	(??___flmul+1)^0,f,c
  5333   0021DE  320A               	rrcf	??___flmul^0,f,c
  5334   0021E0                     u5970:
  5335   0021E0  2EE8               	decfsz	wreg,f,c
  5336   0021E2  EFEB  F010         	goto	u5975
  5337   0021E6  500A               	movf	??___flmul^0,w,c
  5338   0021E8  2615               	addwf	___flmul@prod^0,f,c
  5339   0021EA  500B               	movf	(??___flmul+1)^0,w,c
  5340   0021EC  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5341   0021EE  500C               	movf	(??___flmul+2)^0,w,c
  5342   0021F0  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5343   0021F2  500D               	movf	(??___flmul+3)^0,w,c
  5344   0021F4  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5345   0021F6  C012  F013         	movff	___flmul@grs+2,___flmul@grs+3
  5346   0021FA  C011  F012         	movff	___flmul@grs+1,___flmul@grs+2
  5347   0021FE  C010  F011         	movff	___flmul@grs,___flmul@grs+1
  5348   002202  6A10               	clrf	___flmul@grs^0,c
  5349   002204  500F               	movf	___flmul@aexp^0,w,c
  5350   002206  C014  F00A         	movff	___flmul@bexp,??___flmul
  5351   00220A  6A0B               	clrf	(??___flmul+1)^0,c
  5352   00220C  260A               	addwf	??___flmul^0,f,c
  5353   00220E  0E00               	movlw	0
  5354   002210  220B               	addwfc	(??___flmul+1)^0,f,c
  5355   002212  0E82               	movlw	130
  5356   002214  240A               	addwf	??___flmul^0,w,c
  5357   002216  6E19               	movwf	___flmul@temp^0,c
  5358   002218  0EFF               	movlw	255
  5359   00221A  200B               	addwfc	(??___flmul+1)^0,w,c
  5360   00221C  6E1A               	movwf	(___flmul@temp+1)^0,c
  5361   00221E  EF26  F011         	goto	l6304
  5362   002222                     l6298:
  5363   002222  90D8               	bcf	status,0,c
  5364   002224  3615               	rlcf	___flmul@prod^0,f,c
  5365   002226  3616               	rlcf	(___flmul@prod+1)^0,f,c
  5366   002228  3617               	rlcf	(___flmul@prod+2)^0,f,c
  5367   00222A  3618               	rlcf	(___flmul@prod+3)^0,f,c
  5368   00222C  AE13               	btfss	(___flmul@grs+3)^0,7,c
  5369   00222E  EF1B  F011         	goto	u5981
  5370   002232  EF1D  F011         	goto	u5980
  5371   002236                     u5981:
  5372   002236  EF1E  F011         	goto	l1353
  5373   00223A                     u5980:
  5374   00223A  8015               	bsf	___flmul@prod^0,0,c
  5375   00223C                     l1353:
  5376   00223C  90D8               	bcf	status,0,c
  5377   00223E  3610               	rlcf	___flmul@grs^0,f,c
  5378   002240  3611               	rlcf	(___flmul@grs+1)^0,f,c
  5379   002242  3612               	rlcf	(___flmul@grs+2)^0,f,c
  5380   002244  3613               	rlcf	(___flmul@grs+3)^0,f,c
  5381   002246  0619               	decf	___flmul@temp^0,f,c
  5382   002248  A0D8               	btfss	status,0,c
  5383   00224A  061A               	decf	(___flmul@temp+1)^0,f,c
  5384   00224C                     l6304:
  5385   00224C  AE17               	btfss	(___flmul@prod+2)^0,7,c
  5386   00224E  EF2B  F011         	goto	u5991
  5387   002252  EF2D  F011         	goto	u5990
  5388   002256                     u5991:
  5389   002256  EF11  F011         	goto	l6298
  5390   00225A                     u5990:
  5391   00225A  0E00               	movlw	0
  5392   00225C  6E0F               	movwf	___flmul@aexp^0,c
  5393   00225E  AE13               	btfss	(___flmul@grs+3)^0,7,c
  5394   002260  EF34  F011         	goto	u6001
  5395   002264  EF36  F011         	goto	u6000
  5396   002268                     u6001:
  5397   002268  EF5A  F011         	goto	l1355
  5398   00226C                     u6000:
  5399   00226C  0EFF               	movlw	255
  5400   00226E  1410               	andwf	___flmul@grs^0,w,c
  5401   002270  6E0A               	movwf	??___flmul^0,c
  5402   002272  0EFF               	movlw	255
  5403   002274  1411               	andwf	(___flmul@grs+1)^0,w,c
  5404   002276  6E0B               	movwf	(??___flmul+1)^0,c
  5405   002278  0EFF               	movlw	255
  5406   00227A  1412               	andwf	(___flmul@grs+2)^0,w,c
  5407   00227C  6E0C               	movwf	(??___flmul+2)^0,c
  5408   00227E  0E7F               	movlw	127
  5409   002280  1413               	andwf	(___flmul@grs+3)^0,w,c
  5410   002282  6E0D               	movwf	(??___flmul+3)^0,c
  5411   002284  500A               	movf	??___flmul^0,w,c
  5412   002286  100B               	iorwf	(??___flmul+1)^0,w,c
  5413   002288  100C               	iorwf	(??___flmul+2)^0,w,c
  5414   00228A  100D               	iorwf	(??___flmul+3)^0,w,c
  5415   00228C  B4D8               	btfsc	status,2,c
  5416   00228E  EF4B  F011         	goto	u6011
  5417   002292  EF4D  F011         	goto	u6010
  5418   002296                     u6011:
  5419   002296  EF51  F011         	goto	l1356
  5420   00229A                     u6010:
  5421   00229A                     l6312:
  5422   00229A  0E01               	movlw	1
  5423   00229C  6E0F               	movwf	___flmul@aexp^0,c
  5424   00229E  EF5A  F011         	goto	l1355
  5425   0022A2                     l1356:
  5426   0022A2  A015               	btfss	___flmul@prod^0,0,c
  5427   0022A4  EF56  F011         	goto	u6021
  5428   0022A8  EF58  F011         	goto	u6020
  5429   0022AC                     u6021:
  5430   0022AC  EF5A  F011         	goto	l1355
  5431   0022B0                     u6020:
  5432   0022B0  EF4D  F011         	goto	l6312
  5433   0022B4                     l1355:
  5434   0022B4  500F               	movf	___flmul@aexp^0,w,c
  5435   0022B6  B4D8               	btfsc	status,2,c
  5436   0022B8  EF60  F011         	goto	u6031
  5437   0022BC  EF62  F011         	goto	u6030
  5438   0022C0                     u6031:
  5439   0022C0  EF86  F011         	goto	l6324
  5440   0022C4                     u6030:
  5441   0022C4  0E01               	movlw	1
  5442   0022C6  2615               	addwf	___flmul@prod^0,f,c
  5443   0022C8  0E00               	movlw	0
  5444   0022CA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5445   0022CC  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5446   0022CE  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5447   0022D0  A018               	btfss	(___flmul@prod+3)^0,0,c
  5448   0022D2  EF6D  F011         	goto	u6041
  5449   0022D6  EF6F  F011         	goto	u6040
  5450   0022DA                     u6041:
  5451   0022DA  EF86  F011         	goto	l6324
  5452   0022DE                     u6040:
  5453   0022DE  C015  F00A         	movff	___flmul@prod,??___flmul
  5454   0022E2  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  5455   0022E6  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  5456   0022EA  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  5457   0022EE  340D               	rlcf	(??___flmul+3)^0,w,c
  5458   0022F0  320D               	rrcf	(??___flmul+3)^0,f,c
  5459   0022F2  320C               	rrcf	(??___flmul+2)^0,f,c
  5460   0022F4  320B               	rrcf	(??___flmul+1)^0,f,c
  5461   0022F6  320A               	rrcf	??___flmul^0,f,c
  5462   0022F8  C00A  F015         	movff	??___flmul,___flmul@prod
  5463   0022FC  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  5464   002300  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  5465   002304  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  5466   002308  4A19               	infsnz	___flmul@temp^0,f,c
  5467   00230A  2A1A               	incf	(___flmul@temp+1)^0,f,c
  5468   00230C                     l6324:
  5469   00230C  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5470   00230E  EF91  F011         	goto	u6051
  5471   002312  501A               	movf	(___flmul@temp+1)^0,w,c
  5472   002314  E108               	bnz	u6050
  5473   002316  2819               	incf	___flmul@temp^0,w,c
  5474   002318  A0D8               	btfss	status,0,c
  5475   00231A  EF91  F011         	goto	u6051
  5476   00231E  EF93  F011         	goto	u6050
  5477   002322                     u6051:
  5478   002322  EF9D  F011         	goto	l6328
  5479   002326                     u6050:
  5480   002326  0E00               	movlw	0
  5481   002328  6E15               	movwf	___flmul@prod^0,c
  5482   00232A  0E00               	movlw	0
  5483   00232C  6E16               	movwf	(___flmul@prod+1)^0,c
  5484   00232E  0E80               	movlw	128
  5485   002330  6E17               	movwf	(___flmul@prod+2)^0,c
  5486   002332  0E7F               	movlw	127
  5487   002334  6E18               	movwf	(___flmul@prod+3)^0,c
  5488   002336  EFCB  F011         	goto	l6340
  5489   00233A                     l6328:
  5490   00233A  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5491   00233C  EFAA  F011         	goto	u6060
  5492   002340  501A               	movf	(___flmul@temp+1)^0,w,c
  5493   002342  E106               	bnz	u6061
  5494   002344  0419               	decf	___flmul@temp^0,w,c
  5495   002346  B0D8               	btfsc	status,0,c
  5496   002348  EFA8  F011         	goto	u6061
  5497   00234C  EFAA  F011         	goto	u6060
  5498   002350                     u6061:
  5499   002350  EFB6  F011         	goto	l1363
  5500   002354                     u6060:
  5501   002354  0E00               	movlw	0
  5502   002356  6E15               	movwf	___flmul@prod^0,c
  5503   002358  0E00               	movlw	0
  5504   00235A  6E16               	movwf	(___flmul@prod+1)^0,c
  5505   00235C  0E00               	movlw	0
  5506   00235E  6E17               	movwf	(___flmul@prod+2)^0,c
  5507   002360  0E00               	movlw	0
  5508   002362  6E18               	movwf	(___flmul@prod+3)^0,c
  5509   002364  0E00               	movlw	0
  5510   002366  6E0E               	movwf	___flmul@sign^0,c
  5511   002368  EFCB  F011         	goto	l6340
  5512   00236C                     l1363:
  5513   00236C  C019  F014         	movff	___flmul@temp,___flmul@bexp
  5514   002370  0EFF               	movlw	255
  5515   002372  1615               	andwf	___flmul@prod^0,f,c
  5516   002374  0EFF               	movlw	255
  5517   002376  1616               	andwf	(___flmul@prod+1)^0,f,c
  5518   002378  0E7F               	movlw	127
  5519   00237A  1617               	andwf	(___flmul@prod+2)^0,f,c
  5520   00237C  0E00               	movlw	0
  5521   00237E  1618               	andwf	(___flmul@prod+3)^0,f,c
  5522   002380  A014               	btfss	___flmul@bexp^0,0,c
  5523   002382  EFC5  F011         	goto	u6071
  5524   002386  EFC7  F011         	goto	u6070
  5525   00238A                     u6071:
  5526   00238A  EFC8  F011         	goto	l6338
  5527   00238E                     u6070:
  5528   00238E  8E17               	bsf	(___flmul@prod+2)^0,7,c
  5529   002390                     l6338:
  5530   002390  90D8               	bcf	status,0,c
  5531   002392  3014               	rrcf	___flmul@bexp^0,w,c
  5532   002394  6E18               	movwf	(___flmul@prod+3)^0,c
  5533   002396                     l6340:
  5534   002396  500E               	movf	___flmul@sign^0,w,c
  5535   002398  1218               	iorwf	(___flmul@prod+3)^0,f,c
  5536   00239A  C015  F002         	movff	___flmul@prod,?___flmul
  5537   00239E  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  5538   0023A2  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  5539   0023A6  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  5540   0023AA                     l1350:
  5541   0023AA  0012               	return		;funcret
  5542   0023AC                     __end_of___flmul:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function ___flge *****************
  5546 ;; Defined at:
  5547 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  ff1             4    1[COMRAM] unsigned char 
  5550 ;;  ff2             4    5[COMRAM] unsigned char 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;		None               void
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5562 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5566 ;;Total ram usage:       12 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 1
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_convert_rgb2hue
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text16
  5577   003662                     __ptext16:
  5578                           	callstack 0
  5579   003662                     ___flge:
  5580                           	callstack 27
  5581   003662  0E00               	movlw	0
  5582   003664  1402               	andwf	___flge@ff1^0,w,c
  5583   003666  6E0A               	movwf	??___flge^0,c
  5584   003668  0E00               	movlw	0
  5585   00366A  1403               	andwf	(___flge@ff1+1)^0,w,c
  5586   00366C  6E0B               	movwf	(??___flge+1)^0,c
  5587   00366E  0E80               	movlw	128
  5588   003670  1404               	andwf	(___flge@ff1+2)^0,w,c
  5589   003672  6E0C               	movwf	(??___flge+2)^0,c
  5590   003674  0E7F               	movlw	127
  5591   003676  1405               	andwf	(___flge@ff1+3)^0,w,c
  5592   003678  6E0D               	movwf	(??___flge+3)^0,c
  5593   00367A  500A               	movf	??___flge^0,w,c
  5594   00367C  100B               	iorwf	(??___flge+1)^0,w,c
  5595   00367E  100C               	iorwf	(??___flge+2)^0,w,c
  5596   003680  100D               	iorwf	(??___flge+3)^0,w,c
  5597   003682  A4D8               	btfss	status,2,c
  5598   003684  EF46  F01B         	goto	u6111
  5599   003688  EF48  F01B         	goto	u6110
  5600   00368C                     u6111:
  5601   00368C  EF50  F01B         	goto	l6372
  5602   003690                     u6110:
  5603   003690  0E00               	movlw	0
  5604   003692  6E02               	movwf	___flge@ff1^0,c
  5605   003694  0E00               	movlw	0
  5606   003696  6E03               	movwf	(___flge@ff1+1)^0,c
  5607   003698  0E00               	movlw	0
  5608   00369A  6E04               	movwf	(___flge@ff1+2)^0,c
  5609   00369C  0E00               	movlw	0
  5610   00369E  6E05               	movwf	(___flge@ff1+3)^0,c
  5611   0036A0                     l6372:
  5612   0036A0  0E00               	movlw	0
  5613   0036A2  1406               	andwf	___flge@ff2^0,w,c
  5614   0036A4  6E0A               	movwf	??___flge^0,c
  5615   0036A6  0E00               	movlw	0
  5616   0036A8  1407               	andwf	(___flge@ff2+1)^0,w,c
  5617   0036AA  6E0B               	movwf	(??___flge+1)^0,c
  5618   0036AC  0E80               	movlw	128
  5619   0036AE  1408               	andwf	(___flge@ff2+2)^0,w,c
  5620   0036B0  6E0C               	movwf	(??___flge+2)^0,c
  5621   0036B2  0E7F               	movlw	127
  5622   0036B4  1409               	andwf	(___flge@ff2+3)^0,w,c
  5623   0036B6  6E0D               	movwf	(??___flge+3)^0,c
  5624   0036B8  500A               	movf	??___flge^0,w,c
  5625   0036BA  100B               	iorwf	(??___flge+1)^0,w,c
  5626   0036BC  100C               	iorwf	(??___flge+2)^0,w,c
  5627   0036BE  100D               	iorwf	(??___flge+3)^0,w,c
  5628   0036C0  A4D8               	btfss	status,2,c
  5629   0036C2  EF65  F01B         	goto	u6121
  5630   0036C6  EF67  F01B         	goto	u6120
  5631   0036CA                     u6121:
  5632   0036CA  EF6F  F01B         	goto	l6376
  5633   0036CE                     u6120:
  5634   0036CE  0E00               	movlw	0
  5635   0036D0  6E06               	movwf	___flge@ff2^0,c
  5636   0036D2  0E00               	movlw	0
  5637   0036D4  6E07               	movwf	(___flge@ff2+1)^0,c
  5638   0036D6  0E00               	movlw	0
  5639   0036D8  6E08               	movwf	(___flge@ff2+2)^0,c
  5640   0036DA  0E00               	movlw	0
  5641   0036DC  6E09               	movwf	(___flge@ff2+3)^0,c
  5642   0036DE                     l6376:
  5643   0036DE  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5644   0036E0  EF74  F01B         	goto	u6131
  5645   0036E4  EF76  F01B         	goto	u6130
  5646   0036E8                     u6131:
  5647   0036E8  EF7F  F01B         	goto	l6380
  5648   0036EC                     u6130:
  5649   0036EC  6C02               	negf	___flge@ff1^0,c
  5650   0036EE  1E03               	comf	(___flge@ff1+1)^0,f,c
  5651   0036F0  B0D8               	btfsc	status,0,c
  5652   0036F2  2A03               	incf	(___flge@ff1+1)^0,f,c
  5653   0036F4  1E04               	comf	(___flge@ff1+2)^0,f,c
  5654   0036F6  B0D8               	btfsc	status,0,c
  5655   0036F8  2A04               	incf	(___flge@ff1+2)^0,f,c
  5656   0036FA  0E80               	movlw	128
  5657   0036FC  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5658   0036FE                     l6380:
  5659   0036FE  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5660   003700  EF84  F01B         	goto	u6141
  5661   003704  EF86  F01B         	goto	u6140
  5662   003708                     u6141:
  5663   003708  EF8F  F01B         	goto	l997
  5664   00370C                     u6140:
  5665   00370C  6C06               	negf	___flge@ff2^0,c
  5666   00370E  1E07               	comf	(___flge@ff2+1)^0,f,c
  5667   003710  B0D8               	btfsc	status,0,c
  5668   003712  2A07               	incf	(___flge@ff2+1)^0,f,c
  5669   003714  1E08               	comf	(___flge@ff2+2)^0,f,c
  5670   003716  B0D8               	btfsc	status,0,c
  5671   003718  2A08               	incf	(___flge@ff2+2)^0,f,c
  5672   00371A  0E80               	movlw	128
  5673   00371C  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5674   00371E                     l997:
  5675   00371E  0E00               	movlw	0
  5676   003720  1A02               	xorwf	___flge@ff1^0,f,c
  5677   003722  0E00               	movlw	0
  5678   003724  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5679   003726  0E00               	movlw	0
  5680   003728  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5681   00372A  0E80               	movlw	128
  5682   00372C  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5683   00372E  0E00               	movlw	0
  5684   003730  1A06               	xorwf	___flge@ff2^0,f,c
  5685   003732  0E00               	movlw	0
  5686   003734  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5687   003736  0E00               	movlw	0
  5688   003738  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5689   00373A  0E80               	movlw	128
  5690   00373C  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5691   00373E  5006               	movf	___flge@ff2^0,w,c
  5692   003740  5C02               	subwf	___flge@ff1^0,w,c
  5693   003742  5007               	movf	(___flge@ff2+1)^0,w,c
  5694   003744  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5695   003746  5008               	movf	(___flge@ff2+2)^0,w,c
  5696   003748  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5697   00374A  5009               	movf	(___flge@ff2+3)^0,w,c
  5698   00374C  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5699   00374E  B0D8               	btfsc	status,0,c
  5700   003750  EFAC  F01B         	goto	u6151
  5701   003754  EFAE  F01B         	goto	u6150
  5702   003758                     u6151:
  5703   003758  EFB1  F01B         	goto	l6386
  5704   00375C                     u6150:
  5705   00375C  90D8               	bcf	status,0,c
  5706   00375E  EFB2  F01B         	goto	l1002
  5707   003762                     l6386:
  5708   003762  80D8               	bsf	status,0,c
  5709   003764                     l1002:
  5710   003764  0012               	return		;funcret
  5711   003766                     __end_of___flge:
  5712                           	callstack 0
  5713                           
  5714 ;; *************** function ___fleq *****************
  5715 ;; Defined at:
  5716 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  ff1             4    1[COMRAM] unsigned char 
  5719 ;;  ff2             4    5[COMRAM] unsigned char 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;		None               void
  5724 ;; Registers used:
  5725 ;;		wreg, status,2, status,0
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5731 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;Total ram usage:       12 bytes
  5736 ;; Hardware stack levels used: 1
  5737 ;; Hardware stack levels required when called: 1
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_convert_rgb2hue
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text17
  5746   003B5E                     __ptext17:
  5747                           	callstack 0
  5748   003B5E                     ___fleq:
  5749                           	callstack 27
  5750   003B5E  0E00               	movlw	0
  5751   003B60  1402               	andwf	___fleq@ff1^0,w,c
  5752   003B62  6E0A               	movwf	??___fleq^0,c
  5753   003B64  0E00               	movlw	0
  5754   003B66  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5755   003B68  6E0B               	movwf	(??___fleq+1)^0,c
  5756   003B6A  0E80               	movlw	128
  5757   003B6C  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5758   003B6E  6E0C               	movwf	(??___fleq+2)^0,c
  5759   003B70  0E7F               	movlw	127
  5760   003B72  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5761   003B74  6E0D               	movwf	(??___fleq+3)^0,c
  5762   003B76  500A               	movf	??___fleq^0,w,c
  5763   003B78  100B               	iorwf	(??___fleq+1)^0,w,c
  5764   003B7A  100C               	iorwf	(??___fleq+2)^0,w,c
  5765   003B7C  100D               	iorwf	(??___fleq+3)^0,w,c
  5766   003B7E  A4D8               	btfss	status,2,c
  5767   003B80  EFC4  F01D         	goto	u6081
  5768   003B84  EFC6  F01D         	goto	u6080
  5769   003B88                     u6081:
  5770   003B88  EFCE  F01D         	goto	l6356
  5771   003B8C                     u6080:
  5772   003B8C  0E00               	movlw	0
  5773   003B8E  6E02               	movwf	___fleq@ff1^0,c
  5774   003B90  0E00               	movlw	0
  5775   003B92  6E03               	movwf	(___fleq@ff1+1)^0,c
  5776   003B94  0E00               	movlw	0
  5777   003B96  6E04               	movwf	(___fleq@ff1+2)^0,c
  5778   003B98  0E00               	movlw	0
  5779   003B9A  6E05               	movwf	(___fleq@ff1+3)^0,c
  5780   003B9C                     l6356:
  5781   003B9C  0E00               	movlw	0
  5782   003B9E  1406               	andwf	___fleq@ff2^0,w,c
  5783   003BA0  6E0A               	movwf	??___fleq^0,c
  5784   003BA2  0E00               	movlw	0
  5785   003BA4  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5786   003BA6  6E0B               	movwf	(??___fleq+1)^0,c
  5787   003BA8  0E80               	movlw	128
  5788   003BAA  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5789   003BAC  6E0C               	movwf	(??___fleq+2)^0,c
  5790   003BAE  0E7F               	movlw	127
  5791   003BB0  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5792   003BB2  6E0D               	movwf	(??___fleq+3)^0,c
  5793   003BB4  500A               	movf	??___fleq^0,w,c
  5794   003BB6  100B               	iorwf	(??___fleq+1)^0,w,c
  5795   003BB8  100C               	iorwf	(??___fleq+2)^0,w,c
  5796   003BBA  100D               	iorwf	(??___fleq+3)^0,w,c
  5797   003BBC  A4D8               	btfss	status,2,c
  5798   003BBE  EFE3  F01D         	goto	u6091
  5799   003BC2  EFE5  F01D         	goto	u6090
  5800   003BC6                     u6091:
  5801   003BC6  EFED  F01D         	goto	l6360
  5802   003BCA                     u6090:
  5803   003BCA  0E00               	movlw	0
  5804   003BCC  6E06               	movwf	___fleq@ff2^0,c
  5805   003BCE  0E00               	movlw	0
  5806   003BD0  6E07               	movwf	(___fleq@ff2+1)^0,c
  5807   003BD2  0E00               	movlw	0
  5808   003BD4  6E08               	movwf	(___fleq@ff2+2)^0,c
  5809   003BD6  0E00               	movlw	0
  5810   003BD8  6E09               	movwf	(___fleq@ff2+3)^0,c
  5811   003BDA                     l6360:
  5812   003BDA  5006               	movf	___fleq@ff2^0,w,c
  5813   003BDC  1802               	xorwf	___fleq@ff1^0,w,c
  5814   003BDE  E10F               	bnz	u6100
  5815   003BE0  5007               	movf	(___fleq@ff2+1)^0,w,c
  5816   003BE2  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5817   003BE4  E10C               	bnz	u6100
  5818   003BE6  5008               	movf	(___fleq@ff2+2)^0,w,c
  5819   003BE8  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5820   003BEA  E109               	bnz	u6100
  5821   003BEC  5009               	movf	(___fleq@ff2+3)^0,w,c
  5822   003BEE  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5823   003BF0  B4D8               	btfsc	status,2,c
  5824   003BF2  EFFD  F01D         	goto	u6101
  5825   003BF6  EFFF  F01D         	goto	u6100
  5826   003BFA                     u6101:
  5827   003BFA  EF02  F01E         	goto	l6364
  5828   003BFE                     u6100:
  5829   003BFE  90D8               	bcf	status,0,c
  5830   003C00  EF03  F01E         	goto	l991
  5831   003C04                     l6364:
  5832   003C04  80D8               	bsf	status,0,c
  5833   003C06                     l991:
  5834   003C06  0012               	return		;funcret
  5835   003C08                     __end_of___fleq:
  5836                           	callstack 0
  5837                           
  5838 ;; *************** function ___fldiv *****************
  5839 ;; Defined at:
  5840 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  b               4   26[COMRAM] unsigned char 
  5843 ;;  a               4   30[COMRAM] unsigned char 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  grs             4   45[COMRAM] unsigned long 
  5846 ;;  rem             4   38[COMRAM] unsigned long 
  5847 ;;  new_exp         2   43[COMRAM] short 
  5848 ;;  aexp            1   50[COMRAM] unsigned char 
  5849 ;;  bexp            1   49[COMRAM] unsigned char 
  5850 ;;  sign            1   42[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  4   26[COMRAM] unsigned char 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5860 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5861 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5862 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5863 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;Total ram usage:       25 bytes
  5865 ;; Hardware stack levels used: 1
  5866 ;; Hardware stack levels required when called: 1
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_convert_rgb2hue
  5871 ;;		_main
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text18
  5876   0023AC                     __ptext18:
  5877                           	callstack 0
  5878   0023AC                     ___fldiv:
  5879                           	callstack 27
  5880   0023AC  501E               	movf	(___fldiv@b+3)^0,w,c
  5881   0023AE  0B80               	andlw	128
  5882   0023B0  6E2B               	movwf	___fldiv@sign^0,c
  5883   0023B2  501E               	movf	(___fldiv@b+3)^0,w,c
  5884   0023B4  241E               	addwf	(___fldiv@b+3)^0,w,c
  5885   0023B6  6E32               	movwf	___fldiv@bexp^0,c
  5886   0023B8  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5887   0023BA  EFE1  F011         	goto	u5661
  5888   0023BE  EFE3  F011         	goto	u5660
  5889   0023C2                     u5661:
  5890   0023C2  EFE4  F011         	goto	l6084
  5891   0023C6                     u5660:
  5892   0023C6  8032               	bsf	___fldiv@bexp^0,0,c
  5893   0023C8                     l6084:
  5894   0023C8  5032               	movf	___fldiv@bexp^0,w,c
  5895   0023CA  B4D8               	btfsc	status,2,c
  5896   0023CC  EFEA  F011         	goto	u5671
  5897   0023D0  EFEC  F011         	goto	u5670
  5898   0023D4                     u5671:
  5899   0023D4  EF01  F012         	goto	l6094
  5900   0023D8                     u5670:
  5901   0023D8  2832               	incf	___fldiv@bexp^0,w,c
  5902   0023DA  A4D8               	btfss	status,2,c
  5903   0023DC  EFF2  F011         	goto	u5681
  5904   0023E0  EFF4  F011         	goto	u5680
  5905   0023E4                     u5681:
  5906   0023E4  EFFC  F011         	goto	l6090
  5907   0023E8                     u5680:
  5908   0023E8  0E00               	movlw	0
  5909   0023EA  6E1B               	movwf	___fldiv@b^0,c
  5910   0023EC  0E00               	movlw	0
  5911   0023EE  6E1C               	movwf	(___fldiv@b+1)^0,c
  5912   0023F0  0E00               	movlw	0
  5913   0023F2  6E1D               	movwf	(___fldiv@b+2)^0,c
  5914   0023F4  0E00               	movlw	0
  5915   0023F6  6E1E               	movwf	(___fldiv@b+3)^0,c
  5916   0023F8                     l6090:
  5917   0023F8  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5918   0023FA  0E00               	movlw	0
  5919   0023FC  6E1E               	movwf	(___fldiv@b+3)^0,c
  5920   0023FE  EF09  F012         	goto	l6096
  5921   002402                     l6094:
  5922   002402  0E00               	movlw	0
  5923   002404  6E1B               	movwf	___fldiv@b^0,c
  5924   002406  0E00               	movlw	0
  5925   002408  6E1C               	movwf	(___fldiv@b+1)^0,c
  5926   00240A  0E00               	movlw	0
  5927   00240C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5928   00240E  0E00               	movlw	0
  5929   002410  6E1E               	movwf	(___fldiv@b+3)^0,c
  5930   002412                     l6096:
  5931   002412  5022               	movf	(___fldiv@a+3)^0,w,c
  5932   002414  0B80               	andlw	128
  5933   002416  1A2B               	xorwf	___fldiv@sign^0,f,c
  5934   002418  5022               	movf	(___fldiv@a+3)^0,w,c
  5935   00241A  2422               	addwf	(___fldiv@a+3)^0,w,c
  5936   00241C  6E33               	movwf	___fldiv@aexp^0,c
  5937   00241E  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5938   002420  EF14  F012         	goto	u5691
  5939   002424  EF16  F012         	goto	u5690
  5940   002428                     u5691:
  5941   002428  EF17  F012         	goto	l6104
  5942   00242C                     u5690:
  5943   00242C  8033               	bsf	___fldiv@aexp^0,0,c
  5944   00242E                     l6104:
  5945   00242E  5033               	movf	___fldiv@aexp^0,w,c
  5946   002430  B4D8               	btfsc	status,2,c
  5947   002432  EF1D  F012         	goto	u5701
  5948   002436  EF1F  F012         	goto	u5700
  5949   00243A                     u5701:
  5950   00243A  EF34  F012         	goto	l6114
  5951   00243E                     u5700:
  5952   00243E  2833               	incf	___fldiv@aexp^0,w,c
  5953   002440  A4D8               	btfss	status,2,c
  5954   002442  EF25  F012         	goto	u5711
  5955   002446  EF27  F012         	goto	u5710
  5956   00244A                     u5711:
  5957   00244A  EF2F  F012         	goto	l6110
  5958   00244E                     u5710:
  5959   00244E  0E00               	movlw	0
  5960   002450  6E1F               	movwf	___fldiv@a^0,c
  5961   002452  0E00               	movlw	0
  5962   002454  6E20               	movwf	(___fldiv@a+1)^0,c
  5963   002456  0E00               	movlw	0
  5964   002458  6E21               	movwf	(___fldiv@a+2)^0,c
  5965   00245A  0E00               	movlw	0
  5966   00245C  6E22               	movwf	(___fldiv@a+3)^0,c
  5967   00245E                     l6110:
  5968   00245E  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5969   002460  0E00               	movlw	0
  5970   002462  6E22               	movwf	(___fldiv@a+3)^0,c
  5971   002464  EF3C  F012         	goto	l6116
  5972   002468                     l6114:
  5973   002468  0E00               	movlw	0
  5974   00246A  6E1F               	movwf	___fldiv@a^0,c
  5975   00246C  0E00               	movlw	0
  5976   00246E  6E20               	movwf	(___fldiv@a+1)^0,c
  5977   002470  0E00               	movlw	0
  5978   002472  6E21               	movwf	(___fldiv@a+2)^0,c
  5979   002474  0E00               	movlw	0
  5980   002476  6E22               	movwf	(___fldiv@a+3)^0,c
  5981   002478                     l6116:
  5982   002478  501F               	movf	___fldiv@a^0,w,c
  5983   00247A  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5984   00247C  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5985   00247E  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5986   002480  A4D8               	btfss	status,2,c
  5987   002482  EF45  F012         	goto	u5721
  5988   002486  EF47  F012         	goto	u5720
  5989   00248A                     u5721:
  5990   00248A  EF5F  F012         	goto	l6128
  5991   00248E                     u5720:
  5992   00248E  0E00               	movlw	0
  5993   002490  6E1B               	movwf	___fldiv@b^0,c
  5994   002492  0E00               	movlw	0
  5995   002494  6E1C               	movwf	(___fldiv@b+1)^0,c
  5996   002496  0E00               	movlw	0
  5997   002498  6E1D               	movwf	(___fldiv@b+2)^0,c
  5998   00249A  0E00               	movlw	0
  5999   00249C  6E1E               	movwf	(___fldiv@b+3)^0,c
  6000   00249E  0E80               	movlw	128
  6001   0024A0  121D               	iorwf	(___fldiv@b+2)^0,f,c
  6002   0024A2  0E7F               	movlw	127
  6003   0024A4  121E               	iorwf	(___fldiv@b+3)^0,f,c
  6004   0024A6                     l6122:
  6005   0024A6  502B               	movf	___fldiv@sign^0,w,c
  6006   0024A8  121E               	iorwf	(___fldiv@b+3)^0,f,c
  6007   0024AA  C01B  F01B         	movff	___fldiv@b,?___fldiv
  6008   0024AE  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  6009   0024B2  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  6010   0024B6  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  6011   0024BA  EFA2  F013         	goto	l1314
  6012   0024BE                     l6128:
  6013   0024BE  5032               	movf	___fldiv@bexp^0,w,c
  6014   0024C0  A4D8               	btfss	status,2,c
  6015   0024C2  EF65  F012         	goto	u5731
  6016   0024C6  EF67  F012         	goto	u5730
  6017   0024CA                     u5731:
  6018   0024CA  EF71  F012         	goto	l6136
  6019   0024CE                     u5730:
  6020   0024CE  0E00               	movlw	0
  6021   0024D0  6E1B               	movwf	?___fldiv^0,c
  6022   0024D2  0E00               	movlw	0
  6023   0024D4  6E1C               	movwf	(?___fldiv+1)^0,c
  6024   0024D6  0E00               	movlw	0
  6025   0024D8  6E1D               	movwf	(?___fldiv+2)^0,c
  6026   0024DA  0E00               	movlw	0
  6027   0024DC  6E1E               	movwf	(?___fldiv+3)^0,c
  6028   0024DE  EFA2  F013         	goto	l1314
  6029   0024E2                     l6136:
  6030   0024E2  5033               	movf	___fldiv@aexp^0,w,c
  6031   0024E4  C032  F023         	movff	___fldiv@bexp,??___fldiv
  6032   0024E8  6A24               	clrf	(??___fldiv+1)^0,c
  6033   0024EA  5E23               	subwf	??___fldiv^0,f,c
  6034   0024EC  0E00               	movlw	0
  6035   0024EE  5A24               	subwfb	(??___fldiv+1)^0,f,c
  6036   0024F0  0E7F               	movlw	127
  6037   0024F2  2423               	addwf	??___fldiv^0,w,c
  6038   0024F4  6E2C               	movwf	___fldiv@new_exp^0,c
  6039   0024F6  0E00               	movlw	0
  6040   0024F8  2024               	addwfc	(??___fldiv+1)^0,w,c
  6041   0024FA  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6042   0024FC  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  6043   002500  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  6044   002504  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  6045   002508  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  6046   00250C  0E00               	movlw	0
  6047   00250E  6E1B               	movwf	___fldiv@b^0,c
  6048   002510  0E00               	movlw	0
  6049   002512  6E1C               	movwf	(___fldiv@b+1)^0,c
  6050   002514  0E00               	movlw	0
  6051   002516  6E1D               	movwf	(___fldiv@b+2)^0,c
  6052   002518  0E00               	movlw	0
  6053   00251A  6E1E               	movwf	(___fldiv@b+3)^0,c
  6054   00251C  0E00               	movlw	0
  6055   00251E  6E2E               	movwf	___fldiv@grs^0,c
  6056   002520  0E00               	movlw	0
  6057   002522  6E2F               	movwf	(___fldiv@grs+1)^0,c
  6058   002524  0E00               	movlw	0
  6059   002526  6E30               	movwf	(___fldiv@grs+2)^0,c
  6060   002528  0E00               	movlw	0
  6061   00252A  6E31               	movwf	(___fldiv@grs+3)^0,c
  6062   00252C  0E00               	movlw	0
  6063   00252E  6E33               	movwf	___fldiv@aexp^0,c
  6064   002530  EFD2  F012         	goto	l1316
  6065   002534                     l6146:
  6066   002534  5033               	movf	___fldiv@aexp^0,w,c
  6067   002536  B4D8               	btfsc	status,2,c
  6068   002538  EFA0  F012         	goto	u5741
  6069   00253C  EFA2  F012         	goto	u5740
  6070   002540                     u5741:
  6071   002540  EFB9  F012         	goto	l6154
  6072   002544                     u5740:
  6073   002544  90D8               	bcf	status,0,c
  6074   002546  3627               	rlcf	___fldiv@rem^0,f,c
  6075   002548  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  6076   00254A  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  6077   00254C  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  6078   00254E  90D8               	bcf	status,0,c
  6079   002550  361B               	rlcf	___fldiv@b^0,f,c
  6080   002552  361C               	rlcf	(___fldiv@b+1)^0,f,c
  6081   002554  361D               	rlcf	(___fldiv@b+2)^0,f,c
  6082   002556  361E               	rlcf	(___fldiv@b+3)^0,f,c
  6083   002558  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6084   00255A  EFB1  F012         	goto	u5751
  6085   00255E  EFB3  F012         	goto	u5750
  6086   002562                     u5751:
  6087   002562  EFB4  F012         	goto	l1319
  6088   002566                     u5750:
  6089   002566  801B               	bsf	___fldiv@b^0,0,c
  6090   002568                     l1319:
  6091   002568  90D8               	bcf	status,0,c
  6092   00256A  362E               	rlcf	___fldiv@grs^0,f,c
  6093   00256C  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  6094   00256E  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  6095   002570  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  6096   002572                     l6154:
  6097   002572  501F               	movf	___fldiv@a^0,w,c
  6098   002574  5C27               	subwf	___fldiv@rem^0,w,c
  6099   002576  5020               	movf	(___fldiv@a+1)^0,w,c
  6100   002578  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  6101   00257A  5021               	movf	(___fldiv@a+2)^0,w,c
  6102   00257C  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  6103   00257E  5022               	movf	(___fldiv@a+3)^0,w,c
  6104   002580  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  6105   002582  A0D8               	btfss	status,0,c
  6106   002584  EFC6  F012         	goto	u5761
  6107   002588  EFC8  F012         	goto	u5760
  6108   00258C                     u5761:
  6109   00258C  EFD1  F012         	goto	l6160
  6110   002590                     u5760:
  6111   002590  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  6112   002592  501F               	movf	___fldiv@a^0,w,c
  6113   002594  5E27               	subwf	___fldiv@rem^0,f,c
  6114   002596  5020               	movf	(___fldiv@a+1)^0,w,c
  6115   002598  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  6116   00259A  5021               	movf	(___fldiv@a+2)^0,w,c
  6117   00259C  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  6118   00259E  5022               	movf	(___fldiv@a+3)^0,w,c
  6119   0025A0  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  6120   0025A2                     l6160:
  6121   0025A2  2A33               	incf	___fldiv@aexp^0,f,c
  6122   0025A4                     l1316:
  6123   0025A4  0E19               	movlw	25
  6124   0025A6  6433               	cpfsgt	___fldiv@aexp^0,c
  6125   0025A8  EFD8  F012         	goto	u5771
  6126   0025AC  EFDA  F012         	goto	u5770
  6127   0025B0                     u5771:
  6128   0025B0  EF9A  F012         	goto	l6146
  6129   0025B4                     u5770:
  6130   0025B4  5027               	movf	___fldiv@rem^0,w,c
  6131   0025B6  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  6132   0025B8  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  6133   0025BA  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  6134   0025BC  B4D8               	btfsc	status,2,c
  6135   0025BE  EFE3  F012         	goto	u5781
  6136   0025C2  EFE5  F012         	goto	u5780
  6137   0025C6                     u5781:
  6138   0025C6  EFFD  F012         	goto	l6172
  6139   0025CA                     u5780:
  6140   0025CA  802E               	bsf	___fldiv@grs^0,0,c
  6141   0025CC  EFFD  F012         	goto	l6172
  6142   0025D0                     l6166:
  6143   0025D0  90D8               	bcf	status,0,c
  6144   0025D2  361B               	rlcf	___fldiv@b^0,f,c
  6145   0025D4  361C               	rlcf	(___fldiv@b+1)^0,f,c
  6146   0025D6  361D               	rlcf	(___fldiv@b+2)^0,f,c
  6147   0025D8  361E               	rlcf	(___fldiv@b+3)^0,f,c
  6148   0025DA  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6149   0025DC  EFF2  F012         	goto	u5791
  6150   0025E0  EFF4  F012         	goto	u5790
  6151   0025E4                     u5791:
  6152   0025E4  EFF5  F012         	goto	l1325
  6153   0025E8                     u5790:
  6154   0025E8  801B               	bsf	___fldiv@b^0,0,c
  6155   0025EA                     l1325:
  6156   0025EA  90D8               	bcf	status,0,c
  6157   0025EC  362E               	rlcf	___fldiv@grs^0,f,c
  6158   0025EE  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  6159   0025F0  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  6160   0025F2  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  6161   0025F4  062C               	decf	___fldiv@new_exp^0,f,c
  6162   0025F6  A0D8               	btfss	status,0,c
  6163   0025F8  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  6164   0025FA                     l6172:
  6165   0025FA  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  6166   0025FC  EF02  F013         	goto	u5801
  6167   002600  EF04  F013         	goto	u5800
  6168   002604                     u5801:
  6169   002604  EFE8  F012         	goto	l6166
  6170   002608                     u5800:
  6171   002608  0E00               	movlw	0
  6172   00260A  6E33               	movwf	___fldiv@aexp^0,c
  6173   00260C  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  6174   00260E  EF0B  F013         	goto	u5811
  6175   002612  EF0D  F013         	goto	u5810
  6176   002616                     u5811:
  6177   002616  EF31  F013         	goto	l1327
  6178   00261A                     u5810:
  6179   00261A  0EFF               	movlw	255
  6180   00261C  142E               	andwf	___fldiv@grs^0,w,c
  6181   00261E  6E23               	movwf	??___fldiv^0,c
  6182   002620  0EFF               	movlw	255
  6183   002622  142F               	andwf	(___fldiv@grs+1)^0,w,c
  6184   002624  6E24               	movwf	(??___fldiv+1)^0,c
  6185   002626  0EFF               	movlw	255
  6186   002628  1430               	andwf	(___fldiv@grs+2)^0,w,c
  6187   00262A  6E25               	movwf	(??___fldiv+2)^0,c
  6188   00262C  0E7F               	movlw	127
  6189   00262E  1431               	andwf	(___fldiv@grs+3)^0,w,c
  6190   002630  6E26               	movwf	(??___fldiv+3)^0,c
  6191   002632  5023               	movf	??___fldiv^0,w,c
  6192   002634  1024               	iorwf	(??___fldiv+1)^0,w,c
  6193   002636  1025               	iorwf	(??___fldiv+2)^0,w,c
  6194   002638  1026               	iorwf	(??___fldiv+3)^0,w,c
  6195   00263A  B4D8               	btfsc	status,2,c
  6196   00263C  EF22  F013         	goto	u5821
  6197   002640  EF24  F013         	goto	u5820
  6198   002644                     u5821:
  6199   002644  EF28  F013         	goto	l1328
  6200   002648                     u5820:
  6201   002648                     l6180:
  6202   002648  0E01               	movlw	1
  6203   00264A  6E33               	movwf	___fldiv@aexp^0,c
  6204   00264C  EF31  F013         	goto	l1327
  6205   002650                     l1328:
  6206   002650  A01B               	btfss	___fldiv@b^0,0,c
  6207   002652  EF2D  F013         	goto	u5831
  6208   002656  EF2F  F013         	goto	u5830
  6209   00265A                     u5831:
  6210   00265A  EF31  F013         	goto	l1327
  6211   00265E                     u5830:
  6212   00265E  EF24  F013         	goto	l6180
  6213   002662                     l1327:
  6214   002662  5033               	movf	___fldiv@aexp^0,w,c
  6215   002664  B4D8               	btfsc	status,2,c
  6216   002666  EF37  F013         	goto	u5841
  6217   00266A  EF39  F013         	goto	u5840
  6218   00266E                     u5841:
  6219   00266E  EF5D  F013         	goto	l6192
  6220   002672                     u5840:
  6221   002672  0E01               	movlw	1
  6222   002674  261B               	addwf	___fldiv@b^0,f,c
  6223   002676  0E00               	movlw	0
  6224   002678  221C               	addwfc	(___fldiv@b+1)^0,f,c
  6225   00267A  221D               	addwfc	(___fldiv@b+2)^0,f,c
  6226   00267C  221E               	addwfc	(___fldiv@b+3)^0,f,c
  6227   00267E  A01E               	btfss	(___fldiv@b+3)^0,0,c
  6228   002680  EF44  F013         	goto	u5851
  6229   002684  EF46  F013         	goto	u5850
  6230   002688                     u5851:
  6231   002688  EF5D  F013         	goto	l6192
  6232   00268C                     u5850:
  6233   00268C  C01B  F023         	movff	___fldiv@b,??___fldiv
  6234   002690  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  6235   002694  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  6236   002698  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  6237   00269C  3426               	rlcf	(??___fldiv+3)^0,w,c
  6238   00269E  3226               	rrcf	(??___fldiv+3)^0,f,c
  6239   0026A0  3225               	rrcf	(??___fldiv+2)^0,f,c
  6240   0026A2  3224               	rrcf	(??___fldiv+1)^0,f,c
  6241   0026A4  3223               	rrcf	??___fldiv^0,f,c
  6242   0026A6  C023  F01B         	movff	??___fldiv,___fldiv@b
  6243   0026AA  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  6244   0026AE  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  6245   0026B2  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  6246   0026B6  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  6247   0026B8  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  6248   0026BA                     l6192:
  6249   0026BA  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6250   0026BC  EF68  F013         	goto	u5861
  6251   0026C0  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  6252   0026C2  E108               	bnz	u5860
  6253   0026C4  282C               	incf	___fldiv@new_exp^0,w,c
  6254   0026C6  A0D8               	btfss	status,0,c
  6255   0026C8  EF68  F013         	goto	u5861
  6256   0026CC  EF6A  F013         	goto	u5860
  6257   0026D0                     u5861:
  6258   0026D0  EF75  F013         	goto	l6196
  6259   0026D4                     u5860:
  6260   0026D4  0E00               	movlw	0
  6261   0026D6  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6262   0026D8  682C               	setf	___fldiv@new_exp^0,c
  6263   0026DA  0E00               	movlw	0
  6264   0026DC  6E1B               	movwf	___fldiv@b^0,c
  6265   0026DE  0E00               	movlw	0
  6266   0026E0  6E1C               	movwf	(___fldiv@b+1)^0,c
  6267   0026E2  0E00               	movlw	0
  6268   0026E4  6E1D               	movwf	(___fldiv@b+2)^0,c
  6269   0026E6  0E00               	movlw	0
  6270   0026E8  6E1E               	movwf	(___fldiv@b+3)^0,c
  6271   0026EA                     l6196:
  6272   0026EA  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6273   0026EC  EF82  F013         	goto	u5870
  6274   0026F0  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  6275   0026F2  E106               	bnz	u5871
  6276   0026F4  042C               	decf	___fldiv@new_exp^0,w,c
  6277   0026F6  B0D8               	btfsc	status,0,c
  6278   0026F8  EF80  F013         	goto	u5871
  6279   0026FC  EF82  F013         	goto	u5870
  6280   002700                     u5871:
  6281   002700  EF90  F013         	goto	l6200
  6282   002704                     u5870:
  6283   002704  0E00               	movlw	0
  6284   002706  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  6285   002708  0E00               	movlw	0
  6286   00270A  6E2C               	movwf	___fldiv@new_exp^0,c
  6287   00270C  0E00               	movlw	0
  6288   00270E  6E1B               	movwf	___fldiv@b^0,c
  6289   002710  0E00               	movlw	0
  6290   002712  6E1C               	movwf	(___fldiv@b+1)^0,c
  6291   002714  0E00               	movlw	0
  6292   002716  6E1D               	movwf	(___fldiv@b+2)^0,c
  6293   002718  0E00               	movlw	0
  6294   00271A  6E1E               	movwf	(___fldiv@b+3)^0,c
  6295   00271C  0E00               	movlw	0
  6296   00271E  6E2B               	movwf	___fldiv@sign^0,c
  6297   002720                     l6200:
  6298   002720  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  6299   002724  A032               	btfss	___fldiv@bexp^0,0,c
  6300   002726  EF97  F013         	goto	u5881
  6301   00272A  EF99  F013         	goto	u5880
  6302   00272E                     u5881:
  6303   00272E  EF9C  F013         	goto	l6206
  6304   002732                     u5880:
  6305   002732  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  6306   002734  EF9D  F013         	goto	l6208
  6307   002738                     l6206:
  6308   002738  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  6309   00273A                     l6208:
  6310   00273A  90D8               	bcf	status,0,c
  6311   00273C  3032               	rrcf	___fldiv@bexp^0,w,c
  6312   00273E  6E1E               	movwf	(___fldiv@b+3)^0,c
  6313   002740  EF53  F012         	goto	l6122
  6314   002744                     l1314:
  6315   002744  0012               	return		;funcret
  6316   002746                     __end_of___fldiv:
  6317                           	callstack 0
  6318                           
  6319 ;; *************** function _initUSART4 *****************
  6320 ;; Defined at:
  6321 ;;		line 14 in file "serial.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;		None
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;Total ram usage:        0 bytes
  6340 ;; Hardware stack levels used: 1
  6341 ;; Hardware stack levels required when called: 1
  6342 ;; This function calls:
  6343 ;;		Nothing
  6344 ;; This function is called by:
  6345 ;;		_main
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text19
  6350   004878                     __ptext19:
  6351                           	callstack 0
  6352   004878                     _initUSART4:
  6353                           	callstack 29
  6354   004878                     
  6355                           ;serial.c: 15:     RC0PPS = 0x12;
  6356   004878  0E12               	movlw	18
  6357   00487A  010E               	movlb	14	; () banked
  6358   00487C  6F62               	movwf	98,b	;volatile
  6359                           
  6360                           ;serial.c: 16:     RX4PPS = 0x11;
  6361   00487E  0E11               	movlw	17
  6362   004880  6F15               	movwf	21,b	;volatile
  6363   004882                     
  6364                           ; BSR set to: 14
  6365                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6366   004882  97E9               	bcf	233,3,b	;volatile
  6367   004884                     
  6368                           ; BSR set to: 14
  6369                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6370   004884  95E8               	bcf	232,2,b	;volatile
  6371                           
  6372                           ;serial.c: 19:     SP4BRGL = 51;
  6373   004886  0E33               	movlw	51
  6374   004888  6FE5               	movwf	229,b	;volatile
  6375                           
  6376                           ;serial.c: 20:     SP4BRGH = 0;
  6377   00488A  0E00               	movlw	0
  6378   00488C  6FE6               	movwf	230,b	;volatile
  6379   00488E                     
  6380                           ; BSR set to: 14
  6381                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6382   00488E  89E7               	bsf	231,4,b	;volatile
  6383   004890                     
  6384                           ; BSR set to: 14
  6385                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6386   004890  8BE8               	bsf	232,5,b	;volatile
  6387   004892                     
  6388                           ; BSR set to: 14
  6389                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6390   004892  8FE7               	bsf	231,7,b	;volatile
  6391   004894                     
  6392                           ; BSR set to: 14
  6393   004894  0012               	return		;funcret
  6394   004896                     __end_of_initUSART4:
  6395                           	callstack 0
  6396                           
  6397 ;; *************** function _initDCmotorsPWM *****************
  6398 ;; Defined at:
  6399 ;;		line 5 in file "dc_motor.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg, status,2
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6417 ;;Total ram usage:        2 bytes
  6418 ;; Hardware stack levels used: 1
  6419 ;; Hardware stack levels required when called: 1
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_main
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text20
  6428   003D48                     __ptext20:
  6429                           	callstack 0
  6430   003D48                     _initDCmotorsPWM:
  6431                           	callstack 29
  6432   003D48                     
  6433                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6434   003D48  9485               	bcf	133,2,c	;volatile
  6435                           
  6436                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6437   003D4A  9E83               	bcf	131,7,c	;volatile
  6438                           
  6439                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6440   003D4C  9885               	bcf	133,4,c	;volatile
  6441                           
  6442                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6443   003D4E  9C87               	bcf	135,6,c	;volatile
  6444                           
  6445                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6446   003D50  947D               	bcf	125,2,c	;volatile
  6447                           
  6448                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6449   003D52  9E7B               	bcf	123,7,c	;volatile
  6450                           
  6451                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6452   003D54  987D               	bcf	125,4,c	;volatile
  6453                           
  6454                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6455   003D56  9C7F               	bcf	127,6,c	;volatile
  6456   003D58                     
  6457                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6458   003D58  0E05               	movlw	5
  6459   003D5A  010E               	movlb	14	; () banked
  6460   003D5C  6F74               	movwf	116,b	;volatile
  6461                           
  6462                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6463   003D5E  0E06               	movlw	6
  6464   003D60  6F76               	movwf	118,b	;volatile
  6465                           
  6466                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6467   003D62  0E07               	movlw	7
  6468   003D64  6F69               	movwf	105,b	;volatile
  6469                           
  6470                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6471   003D66  0E08               	movlw	8
  6472   003D68  6F88               	movwf	136,b	;volatile
  6473                           
  6474                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6475   003D6A  50BD               	movf	189,w,c	;volatile
  6476   003D6C  0B8F               	andlw	-113
  6477   003D6E  0940               	iorlw	64
  6478   003D70  6EBD               	movwf	189,c	;volatile
  6479                           
  6480                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6481   003D72  0EE0               	movlw	-32
  6482   003D74  16BE               	andwf	190,f,c	;volatile
  6483                           
  6484                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6485   003D76  50BF               	movf	191,w,c	;volatile
  6486   003D78  0BF0               	andlw	-16
  6487   003D7A  0901               	iorlw	1
  6488   003D7C  6EBF               	movwf	191,c	;volatile
  6489   003D7E                     
  6490                           ; BSR set to: 14
  6491                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6492   003D7E  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6493   003D82                     
  6494                           ; BSR set to: 14
  6495                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6496   003D82  8EBD               	bsf	189,7,c	;volatile
  6497                           
  6498                           ;dc_motor.c: 35:     CCPR1H=0;
  6499   003D84  0E00               	movlw	0
  6500   003D86  6EAA               	movwf	170,c	;volatile
  6501                           
  6502                           ;dc_motor.c: 36:     CCPR2H=0;
  6503   003D88  0E00               	movlw	0
  6504   003D8A  6EA6               	movwf	166,c	;volatile
  6505                           
  6506                           ;dc_motor.c: 37:     CCPR3H=0;
  6507   003D8C  0E00               	movlw	0
  6508   003D8E  010F               	movlb	15	; () banked
  6509   003D90  6F25               	movwf	37,b	;volatile
  6510                           
  6511                           ;dc_motor.c: 38:     CCPR4H=0;
  6512   003D92  0E00               	movlw	0
  6513   003D94  6F21               	movwf	33,b	;volatile
  6514                           
  6515                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6516   003D96  0EFC               	movlw	-4
  6517   003D98  16AD               	andwf	173,f,c	;volatile
  6518                           
  6519                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6520   003D9A  0EF3               	movlw	-13
  6521   003D9C  16AD               	andwf	173,f,c	;volatile
  6522                           
  6523                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6524   003D9E  0ECF               	movlw	-49
  6525   003DA0  16AD               	andwf	173,f,c	;volatile
  6526                           
  6527                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6528   003DA2  0E3F               	movlw	-193
  6529   003DA4  16AD               	andwf	173,f,c	;volatile
  6530   003DA6                     
  6531                           ; BSR set to: 15
  6532                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6533   003DA6  88AB               	bsf	171,4,c	;volatile
  6534                           
  6535                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6536   003DA8  50AB               	movf	171,w,c	;volatile
  6537   003DAA  0BF0               	andlw	-16
  6538   003DAC  090C               	iorlw	12
  6539   003DAE  6EAB               	movwf	171,c	;volatile
  6540   003DB0                     
  6541                           ; BSR set to: 15
  6542                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6543   003DB0  8EAB               	bsf	171,7,c	;volatile
  6544   003DB2                     
  6545                           ; BSR set to: 15
  6546                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6547   003DB2  88A7               	bsf	167,4,c	;volatile
  6548                           
  6549                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6550   003DB4  50A7               	movf	167,w,c	;volatile
  6551   003DB6  0BF0               	andlw	-16
  6552   003DB8  090C               	iorlw	12
  6553   003DBA  6EA7               	movwf	167,c	;volatile
  6554   003DBC                     
  6555                           ; BSR set to: 15
  6556                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6557   003DBC  8EA7               	bsf	167,7,c	;volatile
  6558   003DBE                     
  6559                           ; BSR set to: 15
  6560                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6561   003DBE  8926               	bsf	38,4,b	;volatile
  6562                           
  6563                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6564   003DC0  5126               	movf	38,w,b	;volatile
  6565   003DC2  0BF0               	andlw	-16
  6566   003DC4  090C               	iorlw	12
  6567   003DC6  6F26               	movwf	38,b	;volatile
  6568   003DC8                     
  6569                           ; BSR set to: 15
  6570                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6571   003DC8  8F26               	bsf	38,7,b	;volatile
  6572   003DCA                     
  6573                           ; BSR set to: 15
  6574                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6575   003DCA  8922               	bsf	34,4,b	;volatile
  6576                           
  6577                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6578   003DCC  5122               	movf	34,w,b	;volatile
  6579   003DCE  0BF0               	andlw	-16
  6580   003DD0  090C               	iorlw	12
  6581   003DD2  6F22               	movwf	34,b	;volatile
  6582   003DD4                     
  6583                           ; BSR set to: 15
  6584                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6585   003DD4  8F22               	bsf	34,7,b	;volatile
  6586   003DD6                     
  6587                           ; BSR set to: 15
  6588   003DD6  0012               	return		;funcret
  6589   003DD8                     __end_of_initDCmotorsPWM:
  6590                           	callstack 0
  6591                           
  6592 ;; *************** function _get16bitTMR0val *****************
  6593 ;; Defined at:
  6594 ;;		line 34 in file "timers.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  path_step       2    6[COMRAM] unsigned int 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  combined_val    2   12[COMRAM] int 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  2    6[COMRAM] unsigned int 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6610 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6611 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6612 ;;Total ram usage:        8 bytes
  6613 ;; Hardware stack levels used: 1
  6614 ;; Hardware stack levels required when called: 2
  6615 ;; This function calls:
  6616 ;;		_logAction
  6617 ;; This function is called by:
  6618 ;;		_main
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text21
  6623   004386                     __ptext21:
  6624                           	callstack 0
  6625   004386                     _get16bitTMR0val:
  6626                           	callstack 28
  6627   004386                     
  6628                           ;timers.c: 34: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 35: {;time
      +                          rs.c: 36:     int combined_value;;timers.c: 37:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6629   004386  50D4               	movf	212,w,c	;volatile
  6630   004388  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6631   00438A  6A09               	clrf	??_get16bitTMR0val^0,c
  6632   00438C  50D3               	movf	211,w,c	;volatile
  6633   00438E  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6634   004390  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6635   004392  5009               	movf	??_get16bitTMR0val^0,w,c
  6636   004394  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6637   004396  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6638   004398  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6639   00439A  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6640   00439C  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6641   00439E                     
  6642                           ;timers.c: 38:     logAction('0',combined_value, path_step);
  6643   00439E  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6644   0043A2  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6645   0043A6  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6646   0043AA  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6647   0043AE  0E30               	movlw	48
  6648   0043B0  EC1E  F021         	call	_logAction
  6649   0043B4                     
  6650                           ;timers.c: 39:     path_step++;
  6651   0043B4  4A07               	infsnz	get16bitTMR0val@path_step^0,f,c
  6652   0043B6  2A08               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  6653   0043B8                     
  6654                           ;timers.c: 40:     return path_step;
  6655   0043B8  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6656   0043BC  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6657   0043C0  0012               	return		;funcret
  6658   0043C2                     __end_of_get16bitTMR0val:
  6659                           	callstack 0
  6660                           
  6661 ;; *************** function _decision *****************
  6662 ;; Defined at:
  6663 ;;		line 275 in file "color.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  hue             2   32[COMRAM] unsigned int 
  6666 ;;  path_step       2   34[COMRAM] unsigned int 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  color           2    0        unsigned int 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  2   32[COMRAM] unsigned int 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6681 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6682 ;;Total ram usage:        4 bytes
  6683 ;; Hardware stack levels used: 1
  6684 ;; Hardware stack levels required when called: 6
  6685 ;; This function calls:
  6686 ;;		_logAction
  6687 ;;		_moveBlue
  6688 ;;		_moveGreen
  6689 ;;		_moveLightBlue
  6690 ;;		_moveOrange
  6691 ;;		_movePink
  6692 ;;		_moveRed
  6693 ;;		_moveYellow
  6694 ;; This function is called by:
  6695 ;;		_main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text22
  6700   002746                     __ptext22:
  6701                           	callstack 0
  6702   002746                     _decision:
  6703                           	callstack 24
  6704   002746                     
  6705                           ;color.c: 280:     unsigned int color;;color.c: 282:     if (hue<=10 || hue>=355) {
  6706   002746  5022               	movf	(decision@hue+1)^0,w,c
  6707   002748  E109               	bnz	u6680
  6708   00274A  0E0B               	movlw	11
  6709   00274C  5C21               	subwf	decision@hue^0,w,c
  6710   00274E  A0D8               	btfss	status,0,c
  6711   002750  EFAC  F013         	goto	u6681
  6712   002754  EFAE  F013         	goto	u6680
  6713   002758                     u6681:
  6714   002758  EFB9  F013         	goto	l6882
  6715   00275C                     u6680:
  6716   00275C  0E63               	movlw	99
  6717   00275E  5C21               	subwf	decision@hue^0,w,c
  6718   002760  0E01               	movlw	1
  6719   002762  5822               	subwfb	(decision@hue+1)^0,w,c
  6720   002764  A0D8               	btfss	status,0,c
  6721   002766  EFB7  F013         	goto	u6691
  6722   00276A  EFB9  F013         	goto	u6690
  6723   00276E                     u6691:
  6724   00276E  EFCE  F013         	goto	l6890
  6725   002772                     u6690:
  6726   002772                     l6882:
  6727                           
  6728                           ;color.c: 283:         moveRed(&motorL, &motorR);
  6729   002772  0EE6               	movlw	low _motorL
  6730   002774  6E1D               	movwf	moveRed@mL^0,c
  6731   002776  0EDD               	movlw	low _motorR
  6732   002778  6E1E               	movwf	moveRed@mR^0,c
  6733   00277A  EC7D  F022         	call	_moveRed	;wreg free
  6734   00277E                     
  6735                           ;color.c: 284:         logAction('1',0, path_step);
  6736   00277E  0E00               	movlw	0
  6737   002780  6E03               	movwf	(logAction@newTime+1)^0,c
  6738   002782  0E00               	movlw	0
  6739   002784  6E02               	movwf	logAction@newTime^0,c
  6740   002786  C023  F004         	movff	decision@path_step,logAction@path_step
  6741   00278A  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6742   00278E  0E31               	movlw	49
  6743   002790  EC1E  F021         	call	_logAction
  6744   002794                     l6888:
  6745                           
  6746                           ;color.c: 286:         path_step++;
  6747   002794  4A23               	infsnz	decision@path_step^0,f,c
  6748   002796  2A24               	incf	(decision@path_step+1)^0,f,c
  6749                           
  6750                           ;color.c: 287:     }
  6751   002798  EFC4  F014         	goto	l6962
  6752   00279C                     l6890:
  6753   00279C  5022               	movf	(decision@hue+1)^0,w,c
  6754   00279E  E109               	bnz	u6700
  6755   0027A0  0E69               	movlw	105
  6756   0027A2  5C21               	subwf	decision@hue^0,w,c
  6757   0027A4  A0D8               	btfss	status,0,c
  6758   0027A6  EFD7  F013         	goto	u6701
  6759   0027AA  EFD9  F013         	goto	u6700
  6760   0027AE                     u6701:
  6761   0027AE  EFF7  F013         	goto	l6902
  6762   0027B2                     u6700:
  6763   0027B2  5022               	movf	(decision@hue+1)^0,w,c
  6764   0027B4  E107               	bnz	u6711
  6765   0027B6  0E83               	movlw	131
  6766   0027B8  5C21               	subwf	decision@hue^0,w,c
  6767   0027BA  B0D8               	btfsc	status,0,c
  6768   0027BC  EFE2  F013         	goto	u6711
  6769   0027C0  EFE4  F013         	goto	u6710
  6770   0027C4                     u6711:
  6771   0027C4  EFF7  F013         	goto	l6902
  6772   0027C8                     u6710:
  6773   0027C8                     
  6774                           ;color.c: 289:         moveGreen(&motorL, &motorR);
  6775   0027C8  0EE6               	movlw	low _motorL
  6776   0027CA  6E1D               	movwf	moveGreen@mL^0,c
  6777   0027CC  0EDD               	movlw	low _motorR
  6778   0027CE  6E1E               	movwf	moveGreen@mR^0,c
  6779   0027D0  EC2C  F023         	call	_moveGreen	;wreg free
  6780   0027D4                     
  6781                           ;color.c: 290:         logAction('2',0, path_step);
  6782   0027D4  0E00               	movlw	0
  6783   0027D6  6E03               	movwf	(logAction@newTime+1)^0,c
  6784   0027D8  0E00               	movlw	0
  6785   0027DA  6E02               	movwf	logAction@newTime^0,c
  6786   0027DC  C023  F004         	movff	decision@path_step,logAction@path_step
  6787   0027E0  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6788   0027E4  0E32               	movlw	50
  6789   0027E6  EC1E  F021         	call	_logAction
  6790   0027EA  EFCA  F013         	goto	l6888
  6791   0027EE                     l6902:
  6792   0027EE  5022               	movf	(decision@hue+1)^0,w,c
  6793   0027F0  E109               	bnz	u6720
  6794   0027F2  0EE6               	movlw	230
  6795   0027F4  5C21               	subwf	decision@hue^0,w,c
  6796   0027F6  A0D8               	btfss	status,0,c
  6797   0027F8  EF00  F014         	goto	u6721
  6798   0027FC  EF02  F014         	goto	u6720
  6799   002800                     u6721:
  6800   002800  EF20  F014         	goto	l6914
  6801   002804                     u6720:
  6802   002804  5022               	movf	(decision@hue+1)^0,w,c
  6803   002806  E107               	bnz	u6731
  6804   002808  0EF1               	movlw	241
  6805   00280A  5C21               	subwf	decision@hue^0,w,c
  6806   00280C  B0D8               	btfsc	status,0,c
  6807   00280E  EF0B  F014         	goto	u6731
  6808   002812  EF0D  F014         	goto	u6730
  6809   002816                     u6731:
  6810   002816  EF20  F014         	goto	l6914
  6811   00281A                     u6730:
  6812   00281A                     
  6813                           ;color.c: 294:         moveBlue(&motorL,&motorR);
  6814   00281A  0EE6               	movlw	low _motorL
  6815   00281C  6E1D               	movwf	moveBlue@mL^0,c
  6816   00281E  0EDD               	movlw	low _motorR
  6817   002820  6E1E               	movwf	moveBlue@mR^0,c
  6818   002822  EC45  F023         	call	_moveBlue	;wreg free
  6819   002826                     
  6820                           ;color.c: 295:         logAction('3',0, path_step);
  6821   002826  0E00               	movlw	0
  6822   002828  6E03               	movwf	(logAction@newTime+1)^0,c
  6823   00282A  0E00               	movlw	0
  6824   00282C  6E02               	movwf	logAction@newTime^0,c
  6825   00282E  C023  F004         	movff	decision@path_step,logAction@path_step
  6826   002832  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6827   002836  0E33               	movlw	51
  6828   002838  EC1E  F021         	call	_logAction
  6829   00283C  EFCA  F013         	goto	l6888
  6830   002840                     l6914:
  6831   002840  5022               	movf	(decision@hue+1)^0,w,c
  6832   002842  E109               	bnz	u6740
  6833   002844  0ED8               	movlw	216
  6834   002846  5C21               	subwf	decision@hue^0,w,c
  6835   002848  A0D8               	btfss	status,0,c
  6836   00284A  EF29  F014         	goto	u6741
  6837   00284E  EF2B  F014         	goto	u6740
  6838   002852                     u6741:
  6839   002852  EF49  F014         	goto	l6926
  6840   002856                     u6740:
  6841   002856  5022               	movf	(decision@hue+1)^0,w,c
  6842   002858  E107               	bnz	u6751
  6843   00285A  0EDE               	movlw	222
  6844   00285C  5C21               	subwf	decision@hue^0,w,c
  6845   00285E  B0D8               	btfsc	status,0,c
  6846   002860  EF34  F014         	goto	u6751
  6847   002864  EF36  F014         	goto	u6750
  6848   002868                     u6751:
  6849   002868  EF49  F014         	goto	l6926
  6850   00286C                     u6750:
  6851   00286C                     
  6852                           ;color.c: 299:         moveLightBlue(&motorL,&motorR);
  6853   00286C  0EE6               	movlw	low _motorL
  6854   00286E  6E1D               	movwf	moveLightBlue@mL^0,c
  6855   002870  0EDD               	movlw	low _motorR
  6856   002872  6E1E               	movwf	moveLightBlue@mR^0,c
  6857   002874  ECFA  F022         	call	_moveLightBlue	;wreg free
  6858   002878                     
  6859                           ;color.c: 300:         logAction('5',0, path_step);
  6860   002878  0E00               	movlw	0
  6861   00287A  6E03               	movwf	(logAction@newTime+1)^0,c
  6862   00287C  0E00               	movlw	0
  6863   00287E  6E02               	movwf	logAction@newTime^0,c
  6864   002880  C023  F004         	movff	decision@path_step,logAction@path_step
  6865   002884  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6866   002888  0E35               	movlw	53
  6867   00288A  EC1E  F021         	call	_logAction
  6868   00288E  EFCA  F013         	goto	l6888
  6869   002892                     l6926:
  6870   002892  0E2E               	movlw	46
  6871   002894  5C21               	subwf	decision@hue^0,w,c
  6872   002896  0E01               	movlw	1
  6873   002898  5822               	subwfb	(decision@hue+1)^0,w,c
  6874   00289A  A0D8               	btfss	status,0,c
  6875   00289C  EF52  F014         	goto	u6761
  6876   0028A0  EF54  F014         	goto	u6760
  6877   0028A4                     u6761:
  6878   0028A4  EF72  F014         	goto	l6938
  6879   0028A8                     u6760:
  6880   0028A8  0E5B               	movlw	91
  6881   0028AA  5C21               	subwf	decision@hue^0,w,c
  6882   0028AC  0E01               	movlw	1
  6883   0028AE  5822               	subwfb	(decision@hue+1)^0,w,c
  6884   0028B0  B0D8               	btfsc	status,0,c
  6885   0028B2  EF5D  F014         	goto	u6771
  6886   0028B6  EF5F  F014         	goto	u6770
  6887   0028BA                     u6771:
  6888   0028BA  EF72  F014         	goto	l6938
  6889   0028BE                     u6770:
  6890   0028BE                     
  6891                           ;color.c: 304:         moveYellow(&motorL,&motorR);
  6892   0028BE  0EE6               	movlw	low _motorL
  6893   0028C0  6E1D               	movwf	moveYellow@mL^0,c
  6894   0028C2  0EDD               	movlw	low _motorR
  6895   0028C4  6E1E               	movwf	moveYellow@mR^0,c
  6896   0028C6  EC64  F022         	call	_moveYellow	;wreg free
  6897   0028CA                     
  6898                           ;color.c: 305:         logAction('1',0, path_step);
  6899   0028CA  0E00               	movlw	0
  6900   0028CC  6E03               	movwf	(logAction@newTime+1)^0,c
  6901   0028CE  0E00               	movlw	0
  6902   0028D0  6E02               	movwf	logAction@newTime^0,c
  6903   0028D2  C023  F004         	movff	decision@path_step,logAction@path_step
  6904   0028D6  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6905   0028DA  0E31               	movlw	49
  6906   0028DC  EC1E  F021         	call	_logAction
  6907   0028E0  EFCA  F013         	goto	l6888
  6908   0028E4                     l6938:
  6909   0028E4  5022               	movf	(decision@hue+1)^0,w,c
  6910   0028E6  E109               	bnz	u6780
  6911   0028E8  0E0F               	movlw	15
  6912   0028EA  5C21               	subwf	decision@hue^0,w,c
  6913   0028EC  A0D8               	btfss	status,0,c
  6914   0028EE  EF7B  F014         	goto	u6781
  6915   0028F2  EF7D  F014         	goto	u6780
  6916   0028F6                     u6781:
  6917   0028F6  EF9B  F014         	goto	l6950
  6918   0028FA                     u6780:
  6919   0028FA  5022               	movf	(decision@hue+1)^0,w,c
  6920   0028FC  E107               	bnz	u6791
  6921   0028FE  0E24               	movlw	36
  6922   002900  5C21               	subwf	decision@hue^0,w,c
  6923   002902  B0D8               	btfsc	status,0,c
  6924   002904  EF86  F014         	goto	u6791
  6925   002908  EF88  F014         	goto	u6790
  6926   00290C                     u6791:
  6927   00290C  EF9B  F014         	goto	l6950
  6928   002910                     u6790:
  6929   002910                     
  6930                           ;color.c: 309:         moveOrange(&motorL,&motorR);
  6931   002910  0EE6               	movlw	low _motorL
  6932   002912  6E1D               	movwf	moveOrange@mL^0,c
  6933   002914  0EDD               	movlw	low _motorR
  6934   002916  6E1E               	movwf	moveOrange@mR^0,c
  6935   002918  ECC8  F022         	call	_moveOrange	;wreg free
  6936   00291C                     
  6937                           ;color.c: 310:         logAction('4',0, path_step);
  6938   00291C  0E00               	movlw	0
  6939   00291E  6E03               	movwf	(logAction@newTime+1)^0,c
  6940   002920  0E00               	movlw	0
  6941   002922  6E02               	movwf	logAction@newTime^0,c
  6942   002924  C023  F004         	movff	decision@path_step,logAction@path_step
  6943   002928  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6944   00292C  0E34               	movlw	52
  6945   00292E  EC1E  F021         	call	_logAction
  6946   002932  EFCA  F013         	goto	l6888
  6947   002936                     l6950:
  6948   002936  5022               	movf	(decision@hue+1)^0,w,c
  6949   002938  E109               	bnz	u6800
  6950   00293A  0EF4               	movlw	244
  6951   00293C  5C21               	subwf	decision@hue^0,w,c
  6952   00293E  A0D8               	btfss	status,0,c
  6953   002940  EFA4  F014         	goto	u6801
  6954   002944  EFA6  F014         	goto	u6800
  6955   002948                     u6801:
  6956   002948  EFC4  F014         	goto	l167
  6957   00294C                     u6800:
  6958   00294C  5022               	movf	(decision@hue+1)^0,w,c
  6959   00294E  E107               	bnz	u6811
  6960   002950  0EFC               	movlw	252
  6961   002952  5C21               	subwf	decision@hue^0,w,c
  6962   002954  B0D8               	btfsc	status,0,c
  6963   002956  EFAF  F014         	goto	u6811
  6964   00295A  EFB1  F014         	goto	u6810
  6965   00295E                     u6811:
  6966   00295E  EFC4  F014         	goto	l167
  6967   002962                     u6810:
  6968   002962                     
  6969                           ;color.c: 314:         movePink(&motorL,&motorR);
  6970   002962  0EE6               	movlw	low _motorL
  6971   002964  6E1D               	movwf	movePink@mL^0,c
  6972   002966  0EDD               	movlw	low _motorR
  6973   002968  6E1E               	movwf	movePink@mR^0,c
  6974   00296A  EC96  F022         	call	_movePink	;wreg free
  6975   00296E                     
  6976                           ;color.c: 315:         logAction('2',0, path_step);
  6977   00296E  0E00               	movlw	0
  6978   002970  6E03               	movwf	(logAction@newTime+1)^0,c
  6979   002972  0E00               	movlw	0
  6980   002974  6E02               	movwf	logAction@newTime^0,c
  6981   002976  C023  F004         	movff	decision@path_step,logAction@path_step
  6982   00297A  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6983   00297E  0E32               	movlw	50
  6984   002980  EC1E  F021         	call	_logAction
  6985   002984  EFCA  F013         	goto	l6888
  6986   002988                     l167:
  6987   002988                     l6962:
  6988                           
  6989                           ;color.c: 321:     return path_step;
  6990   002988  C023  F021         	movff	decision@path_step,?_decision
  6991   00298C  C024  F022         	movff	decision@path_step+1,?_decision+1
  6992   002990  0012               	return		;funcret
  6993   002992                     __end_of_decision:
  6994                           	callstack 0
  6995                           
  6996 ;; *************** function _moveYellow *****************
  6997 ;; Defined at:
  6998 ;;		line 284 in file "dc_motor.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7001 ;;		 -> motorL(9), 
  7002 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7003 ;;		 -> motorR(9), 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;		None
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      void 
  7008 ;; Registers used:
  7009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7015 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7019 ;;Total ram usage:        4 bytes
  7020 ;; Hardware stack levels used: 1
  7021 ;; Hardware stack levels required when called: 5
  7022 ;; This function calls:
  7023 ;;		_backOneAndHalf
  7024 ;;		_right90
  7025 ;; This function is called by:
  7026 ;;		_decision
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           	psect	text23
  7031   0044C8                     __ptext23:
  7032                           	callstack 0
  7033   0044C8                     _moveYellow:
  7034                           	callstack 24
  7035   0044C8                     
  7036                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7037   0044C8  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7038   0044CC  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7039   0044D0  ECAF  F022         	call	_backOneAndHalf	;wreg free
  7040   0044D4                     
  7041                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7042   0044D4  0E29               	movlw	41
  7043   0044D6  6E20               	movwf	(??_moveYellow+1)^0,c
  7044   0044D8  0E96               	movlw	150
  7045   0044DA  6E1F               	movwf	??_moveYellow^0,c
  7046   0044DC  0E7F               	movlw	127
  7047   0044DE                     u7097:
  7048   0044DE  2EE8               	decfsz	wreg,f,c
  7049   0044E0  D7FE               	bra	u7097
  7050   0044E2  2E1F               	decfsz	??_moveYellow^0,f,c
  7051   0044E4  D7FC               	bra	u7097
  7052   0044E6  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7053   0044E8  D7FA               	bra	u7097
  7054   0044EA  0000               	nop	
  7055   0044EC                     
  7056                           ;dc_motor.c: 289:     right90(mL,mR);
  7057   0044EC  C01D  F019         	movff	moveYellow@mL,right90@mL
  7058   0044F0  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7059   0044F4  EC90  F023         	call	_right90	;wreg free
  7060   0044F8  0012               	return		;funcret
  7061   0044FA                     __end_of_moveYellow:
  7062                           	callstack 0
  7063                           
  7064 ;; *************** function _moveRed *****************
  7065 ;; Defined at:
  7066 ;;		line 255 in file "dc_motor.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7069 ;;		 -> motorL(9), 
  7070 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7071 ;;		 -> motorR(9), 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7087 ;;Total ram usage:        4 bytes
  7088 ;; Hardware stack levels used: 1
  7089 ;; Hardware stack levels required when called: 5
  7090 ;; This function calls:
  7091 ;;		_backHalf
  7092 ;;		_right90
  7093 ;; This function is called by:
  7094 ;;		_decision
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text24
  7099   0044FA                     __ptext24:
  7100                           	callstack 0
  7101   0044FA                     _moveRed:
  7102                           	callstack 24
  7103   0044FA                     
  7104                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7105   0044FA  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7106   0044FE  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7107   004502  ECC0  F023         	call	_backHalf	;wreg free
  7108   004506                     
  7109                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7110   004506  0E29               	movlw	41
  7111   004508  6E20               	movwf	(??_moveRed+1)^0,c
  7112   00450A  0E96               	movlw	150
  7113   00450C  6E1F               	movwf	??_moveRed^0,c
  7114   00450E  0E7F               	movlw	127
  7115   004510                     u7107:
  7116   004510  2EE8               	decfsz	wreg,f,c
  7117   004512  D7FE               	bra	u7107
  7118   004514  2E1F               	decfsz	??_moveRed^0,f,c
  7119   004516  D7FC               	bra	u7107
  7120   004518  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7121   00451A  D7FA               	bra	u7107
  7122   00451C  0000               	nop	
  7123   00451E                     
  7124                           ;dc_motor.c: 260:     right90(mL,mR);
  7125   00451E  C01D  F019         	movff	moveRed@mL,right90@mL
  7126   004522  C01E  F01A         	movff	moveRed@mR,right90@mR
  7127   004526  EC90  F023         	call	_right90	;wreg free
  7128   00452A  0012               	return		;funcret
  7129   00452C                     __end_of_moveRed:
  7130                           	callstack 0
  7131                           
  7132 ;; *************** function _right90 *****************
  7133 ;; Defined at:
  7134 ;;		line 193 in file "dc_motor.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7137 ;;		 -> motorL(9), 
  7138 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7139 ;;		 -> motorR(9), 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      void 
  7144 ;; Registers used:
  7145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;Total ram usage:        4 bytes
  7156 ;; Hardware stack levels used: 1
  7157 ;; Hardware stack levels required when called: 4
  7158 ;; This function calls:
  7159 ;;		_stop
  7160 ;;		_turnRight
  7161 ;; This function is called by:
  7162 ;;		_moveRed
  7163 ;;		_moveYellow
  7164 ;;		_reverseTurn
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text25
  7169   004720                     __ptext25:
  7170                           	callstack 0
  7171   004720                     _right90:
  7172                           	callstack 24
  7173   004720                     
  7174                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7175   004720  C019  F014         	movff	right90@mL,turnRight@mL
  7176   004724  C01A  F015         	movff	right90@mR,turnRight@mR
  7177   004728  EC33  F01F         	call	_turnRight	;wreg free
  7178   00472C                     
  7179                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7180   00472C  0E18               	movlw	24
  7181   00472E  6E1C               	movwf	(??_right90+1)^0,c
  7182   004730  0E8A               	movlw	138
  7183   004732  6E1B               	movwf	??_right90^0,c
  7184   004734  0EE8               	movlw	232
  7185   004736                     u7117:
  7186   004736  2EE8               	decfsz	wreg,f,c
  7187   004738  D7FE               	bra	u7117
  7188   00473A  2E1B               	decfsz	??_right90^0,f,c
  7189   00473C  D7FC               	bra	u7117
  7190   00473E  2E1C               	decfsz	(??_right90+1)^0,f,c
  7191   004740  D7FA               	bra	u7117
  7192   004742                     
  7193                           ;dc_motor.c: 197:     stop(mL,mR);
  7194   004742  C019  F014         	movff	right90@mL,stop@mL
  7195   004746  C01A  F015         	movff	right90@mR,stop@mR
  7196   00474A  ECEC  F01E         	call	_stop	;wreg free
  7197   00474E  0012               	return		;funcret
  7198   004750                     __end_of_right90:
  7199                           	callstack 0
  7200                           
  7201 ;; *************** function _movePink *****************
  7202 ;; Defined at:
  7203 ;;		line 293 in file "dc_motor.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7206 ;;		 -> motorL(9), 
  7207 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7208 ;;		 -> motorR(9), 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;		None
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7224 ;;Total ram usage:        4 bytes
  7225 ;; Hardware stack levels used: 1
  7226 ;; Hardware stack levels required when called: 5
  7227 ;; This function calls:
  7228 ;;		_backOneAndHalf
  7229 ;;		_left90
  7230 ;; This function is called by:
  7231 ;;		_decision
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text26
  7236   00452C                     __ptext26:
  7237                           	callstack 0
  7238   00452C                     _movePink:
  7239                           	callstack 24
  7240   00452C                     
  7241                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7242   00452C  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7243   004530  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7244   004534  ECAF  F022         	call	_backOneAndHalf	;wreg free
  7245   004538                     
  7246                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7247   004538  0E29               	movlw	41
  7248   00453A  6E20               	movwf	(??_movePink+1)^0,c
  7249   00453C  0E96               	movlw	150
  7250   00453E  6E1F               	movwf	??_movePink^0,c
  7251   004540  0E7F               	movlw	127
  7252   004542                     u7127:
  7253   004542  2EE8               	decfsz	wreg,f,c
  7254   004544  D7FE               	bra	u7127
  7255   004546  2E1F               	decfsz	??_movePink^0,f,c
  7256   004548  D7FC               	bra	u7127
  7257   00454A  2E20               	decfsz	(??_movePink+1)^0,f,c
  7258   00454C  D7FA               	bra	u7127
  7259   00454E  0000               	nop	
  7260   004550                     
  7261                           ;dc_motor.c: 298:     left90(mL,mR);
  7262   004550  C01D  F019         	movff	movePink@mL,left90@mL
  7263   004554  C01E  F01A         	movff	movePink@mR,left90@mR
  7264   004558  ECA8  F023         	call	_left90	;wreg free
  7265   00455C  0012               	return		;funcret
  7266   00455E                     __end_of_movePink:
  7267                           	callstack 0
  7268                           
  7269 ;; *************** function _backOneAndHalf *****************
  7270 ;; Defined at:
  7271 ;;		line 241 in file "dc_motor.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7274 ;;		 -> motorL(9), 
  7275 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7276 ;;		 -> motorR(9), 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      void 
  7281 ;; Registers used:
  7282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7291 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;Total ram usage:        4 bytes
  7293 ;; Hardware stack levels used: 1
  7294 ;; Hardware stack levels required when called: 4
  7295 ;; This function calls:
  7296 ;;		_fullSpeedBack
  7297 ;;		_stop
  7298 ;; This function is called by:
  7299 ;;		_moveYellow
  7300 ;;		_movePink
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text27
  7305   00455E                     __ptext27:
  7306                           	callstack 0
  7307   00455E                     _backOneAndHalf:
  7308                           	callstack 24
  7309   00455E                     
  7310                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7311   00455E  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7312   004562  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7313   004566  ECB1  F01F         	call	_fullSpeedBack	;wreg free
  7314   00456A                     
  7315                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7316   00456A  0E6A               	movlw	106
  7317   00456C  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7318   00456E  0E85               	movlw	133
  7319   004570  6E1B               	movwf	??_backOneAndHalf^0,c
  7320   004572  0EB4               	movlw	180
  7321   004574                     u7137:
  7322   004574  2EE8               	decfsz	wreg,f,c
  7323   004576  D7FE               	bra	u7137
  7324   004578  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7325   00457A  D7FC               	bra	u7137
  7326   00457C  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7327   00457E  D7FA               	bra	u7137
  7328   004580  D000               	nop2	
  7329   004582                     
  7330                           ;dc_motor.c: 245:     stop(mL,mR);
  7331   004582  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7332   004586  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7333   00458A  ECEC  F01E         	call	_stop	;wreg free
  7334   00458E  0012               	return		;funcret
  7335   004590                     __end_of_backOneAndHalf:
  7336                           	callstack 0
  7337                           
  7338 ;; *************** function _moveOrange *****************
  7339 ;; Defined at:
  7340 ;;		line 302 in file "dc_motor.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7343 ;;		 -> motorL(9), 
  7344 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7345 ;;		 -> motorR(9), 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7360 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7361 ;;Total ram usage:        4 bytes
  7362 ;; Hardware stack levels used: 1
  7363 ;; Hardware stack levels required when called: 5
  7364 ;; This function calls:
  7365 ;;		_backHalf
  7366 ;;		_right135
  7367 ;; This function is called by:
  7368 ;;		_decision
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text28
  7373   004590                     __ptext28:
  7374                           	callstack 0
  7375   004590                     _moveOrange:
  7376                           	callstack 24
  7377   004590                     
  7378                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7379   004590  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7380   004594  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7381   004598  ECC0  F023         	call	_backHalf	;wreg free
  7382   00459C                     
  7383                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7384   00459C  0E29               	movlw	41
  7385   00459E  6E20               	movwf	(??_moveOrange+1)^0,c
  7386   0045A0  0E96               	movlw	150
  7387   0045A2  6E1F               	movwf	??_moveOrange^0,c
  7388   0045A4  0E7F               	movlw	127
  7389   0045A6                     u7147:
  7390   0045A6  2EE8               	decfsz	wreg,f,c
  7391   0045A8  D7FE               	bra	u7147
  7392   0045AA  2E1F               	decfsz	??_moveOrange^0,f,c
  7393   0045AC  D7FC               	bra	u7147
  7394   0045AE  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7395   0045B0  D7FA               	bra	u7147
  7396   0045B2  0000               	nop	
  7397   0045B4                     
  7398                           ;dc_motor.c: 307:     right135(mL,mR);
  7399   0045B4  C01D  F019         	movff	moveOrange@mL,right135@mL
  7400   0045B8  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7401   0045BC  ECE1  F022         	call	_right135	;wreg free
  7402   0045C0  0012               	return		;funcret
  7403   0045C2                     __end_of_moveOrange:
  7404                           	callstack 0
  7405                           
  7406 ;; *************** function _right135 *****************
  7407 ;; Defined at:
  7408 ;;		line 217 in file "dc_motor.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7411 ;;		 -> motorL(9), 
  7412 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7413 ;;		 -> motorR(9), 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7429 ;;Total ram usage:        4 bytes
  7430 ;; Hardware stack levels used: 1
  7431 ;; Hardware stack levels required when called: 4
  7432 ;; This function calls:
  7433 ;;		_stop
  7434 ;;		_turnRight
  7435 ;; This function is called by:
  7436 ;;		_moveOrange
  7437 ;;		_reverseTurn
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text29
  7442   0045C2                     __ptext29:
  7443                           	callstack 0
  7444   0045C2                     _right135:
  7445                           	callstack 24
  7446   0045C2                     
  7447                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7448   0045C2  C019  F014         	movff	right135@mL,turnRight@mL
  7449   0045C6  C01A  F015         	movff	right135@mR,turnRight@mR
  7450   0045CA  EC33  F01F         	call	_turnRight	;wreg free
  7451   0045CE                     
  7452                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7453   0045CE  0E21               	movlw	33
  7454   0045D0  6E1C               	movwf	(??_right135+1)^0,c
  7455   0045D2  0E78               	movlw	120
  7456   0045D4  6E1B               	movwf	??_right135^0,c
  7457   0045D6  0E98               	movlw	152
  7458   0045D8                     u7157:
  7459   0045D8  2EE8               	decfsz	wreg,f,c
  7460   0045DA  D7FE               	bra	u7157
  7461   0045DC  2E1B               	decfsz	??_right135^0,f,c
  7462   0045DE  D7FC               	bra	u7157
  7463   0045E0  2E1C               	decfsz	(??_right135+1)^0,f,c
  7464   0045E2  D7FA               	bra	u7157
  7465   0045E4  D000               	nop2	
  7466   0045E6                     
  7467                           ;dc_motor.c: 221:     stop(mL,mR);
  7468   0045E6  C019  F014         	movff	right135@mL,stop@mL
  7469   0045EA  C01A  F015         	movff	right135@mR,stop@mR
  7470   0045EE  ECEC  F01E         	call	_stop	;wreg free
  7471   0045F2  0012               	return		;funcret
  7472   0045F4                     __end_of_right135:
  7473                           	callstack 0
  7474                           
  7475 ;; *************** function _turnRight *****************
  7476 ;; Defined at:
  7477 ;;		line 125 in file "dc_motor.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7480 ;;		 -> motorL(9), 
  7481 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7482 ;;		 -> motorR(9), 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  i               2   22[COMRAM] unsigned int 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7497 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7498 ;;Total ram usage:        5 bytes
  7499 ;; Hardware stack levels used: 1
  7500 ;; Hardware stack levels required when called: 3
  7501 ;; This function calls:
  7502 ;;		_setMotorPWM
  7503 ;; This function is called by:
  7504 ;;		_right90
  7505 ;;		_right135
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text30
  7510   003E66                     __ptext30:
  7511                           	callstack 0
  7512   003E66                     _turnRight:
  7513                           	callstack 24
  7514   003E66                     
  7515                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7516   003E66  5014               	movf	turnRight@mL^0,w,c
  7517   003E68  6ED9               	movwf	fsr2l,c
  7518   003E6A  6ADA               	clrf	fsr2h,c
  7519   003E6C  0E01               	movlw	1
  7520   003E6E  26D9               	addwf	fsr2l,f,c
  7521   003E70  0E01               	movlw	1
  7522   003E72  6EDF               	movwf	indf2,c
  7523                           
  7524                           ;dc_motor.c: 129:     mR->direction = 0;
  7525   003E74  5015               	movf	turnRight@mR^0,w,c
  7526   003E76  6ED9               	movwf	fsr2l,c
  7527   003E78  6ADA               	clrf	fsr2h,c
  7528   003E7A  0E01               	movlw	1
  7529   003E7C  26D9               	addwf	fsr2l,f,c
  7530   003E7E  6ADF               	clrf	indf2,c
  7531   003E80                     
  7532                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7533   003E80  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7534   003E84  ECF6  F018         	call	_setMotorPWM	;wreg free
  7535   003E88                     
  7536                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7537   003E88  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7538   003E8C  ECF6  F018         	call	_setMotorPWM	;wreg free
  7539   003E90                     
  7540                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7541   003E90  0E00               	movlw	0
  7542   003E92  6E18               	movwf	(turnRight@i+1)^0,c
  7543   003E94  0E00               	movlw	0
  7544   003E96  6E17               	movwf	turnRight@i^0,c
  7545   003E98                     l5730:
  7546                           
  7547                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7548   003E98  5014               	movf	turnRight@mL^0,w,c
  7549   003E9A  6ED9               	movwf	fsr2l,c
  7550   003E9C  6ADA               	clrf	fsr2h,c
  7551   003E9E  2ADF               	incf	indf2,f,c
  7552                           
  7553                           ;dc_motor.c: 136:         mR->power++;
  7554   003EA0  5015               	movf	turnRight@mR^0,w,c
  7555   003EA2  6ED9               	movwf	fsr2l,c
  7556   003EA4  6ADA               	clrf	fsr2h,c
  7557   003EA6  2ADF               	incf	indf2,f,c
  7558   003EA8                     
  7559                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7560   003EA8  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7561   003EAC  ECF6  F018         	call	_setMotorPWM	;wreg free
  7562   003EB0                     
  7563                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7564   003EB0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7565   003EB4  ECF6  F018         	call	_setMotorPWM	;wreg free
  7566   003EB8                     
  7567                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7568   003EB8  0E0B               	movlw	11
  7569   003EBA  6E16               	movwf	??_turnRight^0,c
  7570   003EBC  0E62               	movlw	98
  7571   003EBE                     u7167:
  7572   003EBE  2EE8               	decfsz	wreg,f,c
  7573   003EC0  D7FE               	bra	u7167
  7574   003EC2  2E16               	decfsz	??_turnRight^0,f,c
  7575   003EC4  D7FC               	bra	u7167
  7576   003EC6  D000               	nop2	
  7577   003EC8                     
  7578                           ;dc_motor.c: 140:     }
  7579   003EC8  4A17               	infsnz	turnRight@i^0,f,c
  7580   003ECA  2A18               	incf	(turnRight@i+1)^0,f,c
  7581   003ECC  5018               	movf	(turnRight@i+1)^0,w,c
  7582   003ECE  E109               	bnz	u5190
  7583   003ED0  0E32               	movlw	50
  7584   003ED2  5C17               	subwf	turnRight@i^0,w,c
  7585   003ED4  A0D8               	btfss	status,0,c
  7586   003ED6  EF6F  F01F         	goto	u5191
  7587   003EDA  EF71  F01F         	goto	u5190
  7588   003EDE                     u5191:
  7589   003EDE  EF4C  F01F         	goto	l5730
  7590   003EE2                     u5190:
  7591   003EE2  0012               	return		;funcret
  7592   003EE4                     __end_of_turnRight:
  7593                           	callstack 0
  7594                           
  7595 ;; *************** function _moveLightBlue *****************
  7596 ;; Defined at:
  7597 ;;		line 311 in file "dc_motor.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7600 ;;		 -> motorL(9), 
  7601 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7602 ;;		 -> motorR(9), 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;		None
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      void 
  7607 ;; Registers used:
  7608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7617 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7618 ;;Total ram usage:        4 bytes
  7619 ;; Hardware stack levels used: 1
  7620 ;; Hardware stack levels required when called: 5
  7621 ;; This function calls:
  7622 ;;		_backHalf
  7623 ;;		_left135
  7624 ;; This function is called by:
  7625 ;;		_decision
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text31
  7630   0045F4                     __ptext31:
  7631                           	callstack 0
  7632   0045F4                     _moveLightBlue:
  7633                           	callstack 24
  7634   0045F4                     
  7635                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7636   0045F4  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7637   0045F8  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7638   0045FC  ECC0  F023         	call	_backHalf	;wreg free
  7639   004600                     
  7640                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7641   004600  0E29               	movlw	41
  7642   004602  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7643   004604  0E96               	movlw	150
  7644   004606  6E1F               	movwf	??_moveLightBlue^0,c
  7645   004608  0E7F               	movlw	127
  7646   00460A                     u7177:
  7647   00460A  2EE8               	decfsz	wreg,f,c
  7648   00460C  D7FE               	bra	u7177
  7649   00460E  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7650   004610  D7FC               	bra	u7177
  7651   004612  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7652   004614  D7FA               	bra	u7177
  7653   004616  0000               	nop	
  7654   004618                     
  7655                           ;dc_motor.c: 316:     left135(mL,mR);
  7656   004618  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7657   00461C  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7658   004620  EC13  F023         	call	_left135	;wreg free
  7659   004624  0012               	return		;funcret
  7660   004626                     __end_of_moveLightBlue:
  7661                           	callstack 0
  7662                           
  7663 ;; *************** function _left135 *****************
  7664 ;; Defined at:
  7665 ;;		line 225 in file "dc_motor.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7668 ;;		 -> motorL(9), 
  7669 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7670 ;;		 -> motorR(9), 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7684 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7685 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7686 ;;Total ram usage:        4 bytes
  7687 ;; Hardware stack levels used: 1
  7688 ;; Hardware stack levels required when called: 4
  7689 ;; This function calls:
  7690 ;;		_stop
  7691 ;;		_turnLeft
  7692 ;; This function is called by:
  7693 ;;		_moveLightBlue
  7694 ;;		_reverseTurn
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text32
  7699   004626                     __ptext32:
  7700                           	callstack 0
  7701   004626                     _left135:
  7702                           	callstack 24
  7703   004626                     
  7704                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7705   004626  C019  F014         	movff	left135@mL,turnLeft@mL
  7706   00462A  C01A  F015         	movff	left135@mR,turnLeft@mR
  7707   00462E  EC72  F01F         	call	_turnLeft	;wreg free
  7708   004632                     
  7709                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7710   004632  0E21               	movlw	33
  7711   004634  6E1C               	movwf	(??_left135+1)^0,c
  7712   004636  0E78               	movlw	120
  7713   004638  6E1B               	movwf	??_left135^0,c
  7714   00463A  0E98               	movlw	152
  7715   00463C                     u7187:
  7716   00463C  2EE8               	decfsz	wreg,f,c
  7717   00463E  D7FE               	bra	u7187
  7718   004640  2E1B               	decfsz	??_left135^0,f,c
  7719   004642  D7FC               	bra	u7187
  7720   004644  2E1C               	decfsz	(??_left135+1)^0,f,c
  7721   004646  D7FA               	bra	u7187
  7722   004648  D000               	nop2	
  7723   00464A                     
  7724                           ;dc_motor.c: 229:     stop(mL,mR);
  7725   00464A  C019  F014         	movff	left135@mL,stop@mL
  7726   00464E  C01A  F015         	movff	left135@mR,stop@mR
  7727   004652  ECEC  F01E         	call	_stop	;wreg free
  7728   004656  0012               	return		;funcret
  7729   004658                     __end_of_left135:
  7730                           	callstack 0
  7731                           
  7732 ;; *************** function _moveGreen *****************
  7733 ;; Defined at:
  7734 ;;		line 266 in file "dc_motor.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7737 ;;		 -> motorL(9), 
  7738 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7739 ;;		 -> motorR(9), 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;		None
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      void 
  7744 ;; Registers used:
  7745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7751 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7755 ;;Total ram usage:        4 bytes
  7756 ;; Hardware stack levels used: 1
  7757 ;; Hardware stack levels required when called: 5
  7758 ;; This function calls:
  7759 ;;		_backHalf
  7760 ;;		_left90
  7761 ;; This function is called by:
  7762 ;;		_decision
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text33
  7767   004658                     __ptext33:
  7768                           	callstack 0
  7769   004658                     _moveGreen:
  7770                           	callstack 24
  7771   004658                     
  7772                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7773   004658  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7774   00465C  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7775   004660  ECC0  F023         	call	_backHalf	;wreg free
  7776   004664                     
  7777                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7778   004664  0E29               	movlw	41
  7779   004666  6E20               	movwf	(??_moveGreen+1)^0,c
  7780   004668  0E96               	movlw	150
  7781   00466A  6E1F               	movwf	??_moveGreen^0,c
  7782   00466C  0E7F               	movlw	127
  7783   00466E                     u7197:
  7784   00466E  2EE8               	decfsz	wreg,f,c
  7785   004670  D7FE               	bra	u7197
  7786   004672  2E1F               	decfsz	??_moveGreen^0,f,c
  7787   004674  D7FC               	bra	u7197
  7788   004676  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7789   004678  D7FA               	bra	u7197
  7790   00467A  0000               	nop	
  7791   00467C                     
  7792                           ;dc_motor.c: 271:     left90(mL,mR);
  7793   00467C  C01D  F019         	movff	moveGreen@mL,left90@mL
  7794   004680  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7795   004684  ECA8  F023         	call	_left90	;wreg free
  7796   004688  0012               	return		;funcret
  7797   00468A                     __end_of_moveGreen:
  7798                           	callstack 0
  7799                           
  7800 ;; *************** function _left90 *****************
  7801 ;; Defined at:
  7802 ;;		line 201 in file "dc_motor.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7805 ;;		 -> motorL(9), 
  7806 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7807 ;;		 -> motorR(9), 
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7822 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7823 ;;Total ram usage:        4 bytes
  7824 ;; Hardware stack levels used: 1
  7825 ;; Hardware stack levels required when called: 4
  7826 ;; This function calls:
  7827 ;;		_stop
  7828 ;;		_turnLeft
  7829 ;; This function is called by:
  7830 ;;		_moveGreen
  7831 ;;		_movePink
  7832 ;;		_reverseTurn
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text34
  7837   004750                     __ptext34:
  7838                           	callstack 0
  7839   004750                     _left90:
  7840                           	callstack 24
  7841   004750                     
  7842                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7843   004750  C019  F014         	movff	left90@mL,turnLeft@mL
  7844   004754  C01A  F015         	movff	left90@mR,turnLeft@mR
  7845   004758  EC72  F01F         	call	_turnLeft	;wreg free
  7846   00475C                     
  7847                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7848   00475C  0E18               	movlw	24
  7849   00475E  6E1C               	movwf	(??_left90+1)^0,c
  7850   004760  0E8A               	movlw	138
  7851   004762  6E1B               	movwf	??_left90^0,c
  7852   004764  0EE8               	movlw	232
  7853   004766                     u7207:
  7854   004766  2EE8               	decfsz	wreg,f,c
  7855   004768  D7FE               	bra	u7207
  7856   00476A  2E1B               	decfsz	??_left90^0,f,c
  7857   00476C  D7FC               	bra	u7207
  7858   00476E  2E1C               	decfsz	(??_left90+1)^0,f,c
  7859   004770  D7FA               	bra	u7207
  7860   004772                     
  7861                           ;dc_motor.c: 205:     stop(mL,mR);
  7862   004772  C019  F014         	movff	left90@mL,stop@mL
  7863   004776  C01A  F015         	movff	left90@mR,stop@mR
  7864   00477A  ECEC  F01E         	call	_stop	;wreg free
  7865   00477E  0012               	return		;funcret
  7866   004780                     __end_of_left90:
  7867                           	callstack 0
  7868                           
  7869 ;; *************** function _moveBlue *****************
  7870 ;; Defined at:
  7871 ;;		line 275 in file "dc_motor.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7874 ;;		 -> motorL(9), 
  7875 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7876 ;;		 -> motorR(9), 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;		None
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7891 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7892 ;;Total ram usage:        4 bytes
  7893 ;; Hardware stack levels used: 1
  7894 ;; Hardware stack levels required when called: 5
  7895 ;; This function calls:
  7896 ;;		_backHalf
  7897 ;;		_turn180
  7898 ;; This function is called by:
  7899 ;;		_decision
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           	psect	text35
  7904   00468A                     __ptext35:
  7905                           	callstack 0
  7906   00468A                     _moveBlue:
  7907                           	callstack 24
  7908   00468A                     
  7909                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  7910   00468A  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7911   00468E  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7912   004692  ECC0  F023         	call	_backHalf	;wreg free
  7913   004696                     
  7914                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7915   004696  0E29               	movlw	41
  7916   004698  6E20               	movwf	(??_moveBlue+1)^0,c
  7917   00469A  0E96               	movlw	150
  7918   00469C  6E1F               	movwf	??_moveBlue^0,c
  7919   00469E  0E7F               	movlw	127
  7920   0046A0                     u7217:
  7921   0046A0  2EE8               	decfsz	wreg,f,c
  7922   0046A2  D7FE               	bra	u7217
  7923   0046A4  2E1F               	decfsz	??_moveBlue^0,f,c
  7924   0046A6  D7FC               	bra	u7217
  7925   0046A8  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  7926   0046AA  D7FA               	bra	u7217
  7927   0046AC  0000               	nop	
  7928   0046AE                     
  7929                           ;dc_motor.c: 280:     turn180(mL,mR);
  7930   0046AE  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7931   0046B2  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7932   0046B6  EC5E  F023         	call	_turn180	;wreg free
  7933   0046BA  0012               	return		;funcret
  7934   0046BC                     __end_of_moveBlue:
  7935                           	callstack 0
  7936                           
  7937 ;; *************** function _turn180 *****************
  7938 ;; Defined at:
  7939 ;;		line 209 in file "dc_motor.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7942 ;;		 -> motorL(9), 
  7943 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7944 ;;		 -> motorR(9), 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;		None
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  1    wreg      void 
  7949 ;; Registers used:
  7950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7958 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7959 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7960 ;;Total ram usage:        4 bytes
  7961 ;; Hardware stack levels used: 1
  7962 ;; Hardware stack levels required when called: 4
  7963 ;; This function calls:
  7964 ;;		_stop
  7965 ;;		_turnLeft
  7966 ;; This function is called by:
  7967 ;;		_moveBlue
  7968 ;;		_moveWhite
  7969 ;;		_reverseTurn
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text36
  7974   0046BC                     __ptext36:
  7975                           	callstack 0
  7976   0046BC                     _turn180:
  7977                           	callstack 24
  7978   0046BC                     
  7979                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7980   0046BC  C019  F014         	movff	turn180@mL,turnLeft@mL
  7981   0046C0  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7982   0046C4  EC72  F01F         	call	_turnLeft	;wreg free
  7983   0046C8                     
  7984                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7985   0046C8  0E30               	movlw	48
  7986   0046CA  6E1C               	movwf	(??_turn180+1)^0,c
  7987   0046CC  0E14               	movlw	20
  7988   0046CE  6E1B               	movwf	??_turn180^0,c
  7989   0046D0  0ED1               	movlw	209
  7990   0046D2                     u7227:
  7991   0046D2  2EE8               	decfsz	wreg,f,c
  7992   0046D4  D7FE               	bra	u7227
  7993   0046D6  2E1B               	decfsz	??_turn180^0,f,c
  7994   0046D8  D7FC               	bra	u7227
  7995   0046DA  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7996   0046DC  D7FA               	bra	u7227
  7997   0046DE  0000               	nop	
  7998   0046E0                     
  7999                           ;dc_motor.c: 213:     stop(mL,mR);
  8000   0046E0  C019  F014         	movff	turn180@mL,stop@mL
  8001   0046E4  C01A  F015         	movff	turn180@mR,stop@mR
  8002   0046E8  ECEC  F01E         	call	_stop	;wreg free
  8003   0046EC  0012               	return		;funcret
  8004   0046EE                     __end_of_turn180:
  8005                           	callstack 0
  8006                           
  8007 ;; *************** function _turnLeft *****************
  8008 ;; Defined at:
  8009 ;;		line 105 in file "dc_motor.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8012 ;;		 -> motorL(9), 
  8013 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8014 ;;		 -> motorR(9), 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  i               2   22[COMRAM] unsigned int 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      void 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8029 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8030 ;;Total ram usage:        5 bytes
  8031 ;; Hardware stack levels used: 1
  8032 ;; Hardware stack levels required when called: 3
  8033 ;; This function calls:
  8034 ;;		_setMotorPWM
  8035 ;; This function is called by:
  8036 ;;		_left90
  8037 ;;		_turn180
  8038 ;;		_left135
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text37
  8043   003EE4                     __ptext37:
  8044                           	callstack 0
  8045   003EE4                     _turnLeft:
  8046                           	callstack 24
  8047   003EE4                     
  8048                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8049   003EE4  5014               	movf	turnLeft@mL^0,w,c
  8050   003EE6  6ED9               	movwf	fsr2l,c
  8051   003EE8  6ADA               	clrf	fsr2h,c
  8052   003EEA  0E01               	movlw	1
  8053   003EEC  26D9               	addwf	fsr2l,f,c
  8054   003EEE  6ADF               	clrf	indf2,c
  8055                           
  8056                           ;dc_motor.c: 109:     mR->direction = 1;
  8057   003EF0  5015               	movf	turnLeft@mR^0,w,c
  8058   003EF2  6ED9               	movwf	fsr2l,c
  8059   003EF4  6ADA               	clrf	fsr2h,c
  8060   003EF6  0E01               	movlw	1
  8061   003EF8  26D9               	addwf	fsr2l,f,c
  8062   003EFA  0E01               	movlw	1
  8063   003EFC  6EDF               	movwf	indf2,c
  8064   003EFE                     
  8065                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8066   003EFE  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8067   003F02  ECF6  F018         	call	_setMotorPWM	;wreg free
  8068   003F06                     
  8069                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8070   003F06  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8071   003F0A  ECF6  F018         	call	_setMotorPWM	;wreg free
  8072   003F0E                     
  8073                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8074   003F0E  0E00               	movlw	0
  8075   003F10  6E18               	movwf	(turnLeft@i+1)^0,c
  8076   003F12  0E00               	movlw	0
  8077   003F14  6E17               	movwf	turnLeft@i^0,c
  8078   003F16                     l5706:
  8079                           
  8080                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8081   003F16  5014               	movf	turnLeft@mL^0,w,c
  8082   003F18  6ED9               	movwf	fsr2l,c
  8083   003F1A  6ADA               	clrf	fsr2h,c
  8084   003F1C  2ADF               	incf	indf2,f,c
  8085                           
  8086                           ;dc_motor.c: 116:         mR->power++;
  8087   003F1E  5015               	movf	turnLeft@mR^0,w,c
  8088   003F20  6ED9               	movwf	fsr2l,c
  8089   003F22  6ADA               	clrf	fsr2h,c
  8090   003F24  2ADF               	incf	indf2,f,c
  8091   003F26                     
  8092                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8093   003F26  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8094   003F2A  ECF6  F018         	call	_setMotorPWM	;wreg free
  8095   003F2E                     
  8096                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8097   003F2E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8098   003F32  ECF6  F018         	call	_setMotorPWM	;wreg free
  8099   003F36                     
  8100                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8101   003F36  0E0B               	movlw	11
  8102   003F38  6E16               	movwf	??_turnLeft^0,c
  8103   003F3A  0E62               	movlw	98
  8104   003F3C                     u7237:
  8105   003F3C  2EE8               	decfsz	wreg,f,c
  8106   003F3E  D7FE               	bra	u7237
  8107   003F40  2E16               	decfsz	??_turnLeft^0,f,c
  8108   003F42  D7FC               	bra	u7237
  8109   003F44  D000               	nop2	
  8110   003F46                     
  8111                           ;dc_motor.c: 120:     }
  8112   003F46  4A17               	infsnz	turnLeft@i^0,f,c
  8113   003F48  2A18               	incf	(turnLeft@i+1)^0,f,c
  8114   003F4A  5018               	movf	(turnLeft@i+1)^0,w,c
  8115   003F4C  E109               	bnz	u5180
  8116   003F4E  0E32               	movlw	50
  8117   003F50  5C17               	subwf	turnLeft@i^0,w,c
  8118   003F52  A0D8               	btfss	status,0,c
  8119   003F54  EFAE  F01F         	goto	u5181
  8120   003F58  EFB0  F01F         	goto	u5180
  8121   003F5C                     u5181:
  8122   003F5C  EF8B  F01F         	goto	l5706
  8123   003F60                     u5180:
  8124   003F60  0012               	return		;funcret
  8125   003F62                     __end_of_turnLeft:
  8126                           	callstack 0
  8127                           
  8128 ;; *************** function _backHalf *****************
  8129 ;; Defined at:
  8130 ;;		line 233 in file "dc_motor.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8133 ;;		 -> motorL(9), 
  8134 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8135 ;;		 -> motorR(9), 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1    wreg      void 
  8140 ;; Registers used:
  8141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8150 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8151 ;;Total ram usage:        4 bytes
  8152 ;; Hardware stack levels used: 1
  8153 ;; Hardware stack levels required when called: 4
  8154 ;; This function calls:
  8155 ;;		_fullSpeedBack
  8156 ;;		_stop
  8157 ;; This function is called by:
  8158 ;;		_moveRed
  8159 ;;		_moveGreen
  8160 ;;		_moveBlue
  8161 ;;		_moveOrange
  8162 ;;		_moveLightBlue
  8163 ;;		_moveWhite
  8164 ;;		_reverseTurn
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text38
  8169   004780                     __ptext38:
  8170                           	callstack 0
  8171   004780                     _backHalf:
  8172                           	callstack 24
  8173   004780                     
  8174                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8175   004780  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8176   004784  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8177   004788  ECB1  F01F         	call	_fullSpeedBack	;wreg free
  8178   00478C                     
  8179                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8180   00478C  0E19               	movlw	25
  8181   00478E  6E1C               	movwf	(??_backHalf+1)^0,c
  8182   004790  0E5A               	movlw	90
  8183   004792  6E1B               	movwf	??_backHalf^0,c
  8184   004794  0EB2               	movlw	178
  8185   004796                     u7247:
  8186   004796  2EE8               	decfsz	wreg,f,c
  8187   004798  D7FE               	bra	u7247
  8188   00479A  2E1B               	decfsz	??_backHalf^0,f,c
  8189   00479C  D7FC               	bra	u7247
  8190   00479E  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8191   0047A0  D7FA               	bra	u7247
  8192   0047A2                     
  8193                           ;dc_motor.c: 237:     stop(mL,mR);
  8194   0047A2  C019  F014         	movff	backHalf@mL,stop@mL
  8195   0047A6  C01A  F015         	movff	backHalf@mR,stop@mR
  8196   0047AA  ECEC  F01E         	call	_stop	;wreg free
  8197   0047AE  0012               	return		;funcret
  8198   0047B0                     __end_of_backHalf:
  8199                           	callstack 0
  8200                           
  8201 ;; *************** function _stop *****************
  8202 ;; Defined at:
  8203 ;;		line 88 in file "dc_motor.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8206 ;;		 -> motorL(9), 
  8207 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8208 ;;		 -> motorR(9), 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;		None
  8211 ;; Return value:  Size  Location     Type
  8212 ;;                  1    wreg      void 
  8213 ;; Registers used:
  8214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8224 ;;Total ram usage:        3 bytes
  8225 ;; Hardware stack levels used: 1
  8226 ;; Hardware stack levels required when called: 3
  8227 ;; This function calls:
  8228 ;;		_setMotorPWM
  8229 ;; This function is called by:
  8230 ;;		_main
  8231 ;;		_right90
  8232 ;;		_left90
  8233 ;;		_turn180
  8234 ;;		_right135
  8235 ;;		_left135
  8236 ;;		_backHalf
  8237 ;;		_backOneAndHalf
  8238 ;;		_reverseStraight
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text39
  8243   003DD8                     __ptext39:
  8244                           	callstack 0
  8245   003DD8                     _stop:
  8246                           	callstack 27
  8247   003DD8                     
  8248                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8249   003DD8  EF1C  F01F         	goto	l5690
  8250   003DDC                     l5676:
  8251                           
  8252                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8253   003DDC  5014               	movf	stop@mL^0,w,c
  8254   003DDE  6ED9               	movwf	fsr2l,c
  8255   003DE0  6ADA               	clrf	fsr2h,c
  8256   003DE2  50DF               	movf	indf2,w,c
  8257   003DE4  B4D8               	btfsc	status,2,c
  8258   003DE6  EFF7  F01E         	goto	u5141
  8259   003DEA  EFF9  F01E         	goto	u5140
  8260   003DEE                     u5141:
  8261   003DEE  EFFD  F01E         	goto	l5680
  8262   003DF2                     u5140:
  8263   003DF2  5014               	movf	stop@mL^0,w,c
  8264   003DF4  6ED9               	movwf	fsr2l,c
  8265   003DF6  6ADA               	clrf	fsr2h,c
  8266   003DF8  06DF               	decf	indf2,f,c
  8267   003DFA                     l5680:
  8268                           
  8269                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8270   003DFA  5015               	movf	stop@mR^0,w,c
  8271   003DFC  6ED9               	movwf	fsr2l,c
  8272   003DFE  6ADA               	clrf	fsr2h,c
  8273   003E00  50DF               	movf	indf2,w,c
  8274   003E02  B4D8               	btfsc	status,2,c
  8275   003E04  EF06  F01F         	goto	u5151
  8276   003E08  EF08  F01F         	goto	u5150
  8277   003E0C                     u5151:
  8278   003E0C  EF0C  F01F         	goto	l5684
  8279   003E10                     u5150:
  8280   003E10  5015               	movf	stop@mR^0,w,c
  8281   003E12  6ED9               	movwf	fsr2l,c
  8282   003E14  6ADA               	clrf	fsr2h,c
  8283   003E16  06DF               	decf	indf2,f,c
  8284   003E18                     l5684:
  8285                           
  8286                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8287   003E18  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8288   003E1C  ECF6  F018         	call	_setMotorPWM	;wreg free
  8289   003E20                     
  8290                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8291   003E20  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8292   003E24  ECF6  F018         	call	_setMotorPWM	;wreg free
  8293   003E28                     
  8294                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8295   003E28  0E0B               	movlw	11
  8296   003E2A  6E16               	movwf	??_stop^0,c
  8297   003E2C  0E62               	movlw	98
  8298   003E2E                     u7257:
  8299   003E2E  2EE8               	decfsz	wreg,f,c
  8300   003E30  D7FE               	bra	u7257
  8301   003E32  2E16               	decfsz	??_stop^0,f,c
  8302   003E34  D7FC               	bra	u7257
  8303   003E36  D000               	nop2	
  8304   003E38                     l5690:
  8305                           
  8306                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8307   003E38  5014               	movf	stop@mL^0,w,c
  8308   003E3A  6ED9               	movwf	fsr2l,c
  8309   003E3C  6ADA               	clrf	fsr2h,c
  8310   003E3E  50DF               	movf	indf2,w,c
  8311   003E40  A4D8               	btfss	status,2,c
  8312   003E42  EF25  F01F         	goto	u5161
  8313   003E46  EF27  F01F         	goto	u5160
  8314   003E4A                     u5161:
  8315   003E4A  EFEE  F01E         	goto	l5676
  8316   003E4E                     u5160:
  8317   003E4E  5015               	movf	stop@mR^0,w,c
  8318   003E50  6ED9               	movwf	fsr2l,c
  8319   003E52  6ADA               	clrf	fsr2h,c
  8320   003E54  50DF               	movf	indf2,w,c
  8321   003E56  A4D8               	btfss	status,2,c
  8322   003E58  EF30  F01F         	goto	u5171
  8323   003E5C  EF32  F01F         	goto	u5170
  8324   003E60                     u5171:
  8325   003E60  EFEE  F01E         	goto	l5676
  8326   003E64                     u5170:
  8327   003E64  0012               	return		;funcret
  8328   003E66                     __end_of_stop:
  8329                           	callstack 0
  8330                           
  8331 ;; *************** function _fullSpeedBack *****************
  8332 ;; Defined at:
  8333 ;;		line 165 in file "dc_motor.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8336 ;;		 -> motorL(9), 
  8337 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8338 ;;		 -> motorR(9), 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  power           2   22[COMRAM] int 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8353 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8354 ;;Total ram usage:        5 bytes
  8355 ;; Hardware stack levels used: 1
  8356 ;; Hardware stack levels required when called: 3
  8357 ;; This function calls:
  8358 ;;		_setMotorPWM
  8359 ;; This function is called by:
  8360 ;;		_backHalf
  8361 ;;		_backOneAndHalf
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text40
  8366   003F62                     __ptext40:
  8367                           	callstack 0
  8368   003F62                     _fullSpeedBack:
  8369                           	callstack 24
  8370   003F62                     
  8371                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8372   003F62  5014               	movf	fullSpeedBack@mL^0,w,c
  8373   003F64  6ED9               	movwf	fsr2l,c
  8374   003F66  6ADA               	clrf	fsr2h,c
  8375   003F68  0E01               	movlw	1
  8376   003F6A  26D9               	addwf	fsr2l,f,c
  8377   003F6C  6ADF               	clrf	indf2,c
  8378                           
  8379                           ;dc_motor.c: 169:     mR->direction = 0;
  8380   003F6E  5015               	movf	fullSpeedBack@mR^0,w,c
  8381   003F70  6ED9               	movwf	fsr2l,c
  8382   003F72  6ADA               	clrf	fsr2h,c
  8383   003F74  0E01               	movlw	1
  8384   003F76  26D9               	addwf	fsr2l,f,c
  8385   003F78  6ADF               	clrf	indf2,c
  8386   003F7A                     
  8387                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8388   003F7A  0E00               	movlw	0
  8389   003F7C  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8390   003F7E  0E00               	movlw	0
  8391   003F80  6E17               	movwf	fullSpeedBack@power^0,c
  8392   003F82                     l5750:
  8393                           
  8394                           ;dc_motor.c: 172:         mL->power = power;
  8395   003F82  5014               	movf	fullSpeedBack@mL^0,w,c
  8396   003F84  6ED9               	movwf	fsr2l,c
  8397   003F86  6ADA               	clrf	fsr2h,c
  8398   003F88  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8399                           
  8400                           ;dc_motor.c: 173:         mR->power = power;
  8401   003F8C  5015               	movf	fullSpeedBack@mR^0,w,c
  8402   003F8E  6ED9               	movwf	fsr2l,c
  8403   003F90  6ADA               	clrf	fsr2h,c
  8404   003F92  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8405   003F96                     
  8406                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8407   003F96  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8408   003F9A  ECF6  F018         	call	_setMotorPWM	;wreg free
  8409   003F9E                     
  8410                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8411   003F9E  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8412   003FA2  ECF6  F018         	call	_setMotorPWM	;wreg free
  8413   003FA6                     
  8414                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8415   003FA6  0E0B               	movlw	11
  8416   003FA8  6E16               	movwf	??_fullSpeedBack^0,c
  8417   003FAA  0E62               	movlw	98
  8418   003FAC                     u7267:
  8419   003FAC  2EE8               	decfsz	wreg,f,c
  8420   003FAE  D7FE               	bra	u7267
  8421   003FB0  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8422   003FB2  D7FC               	bra	u7267
  8423   003FB4  D000               	nop2	
  8424   003FB6                     
  8425                           ;dc_motor.c: 181:     }
  8426   003FB6  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8427   003FB8  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8428   003FBA  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8429   003FBC  EFE9  F01F         	goto	u5201
  8430   003FC0  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8431   003FC2  E109               	bnz	u5200
  8432   003FC4  0E33               	movlw	51
  8433   003FC6  5C17               	subwf	fullSpeedBack@power^0,w,c
  8434   003FC8  A0D8               	btfss	status,0,c
  8435   003FCA  EFE9  F01F         	goto	u5201
  8436   003FCE  EFEB  F01F         	goto	u5200
  8437   003FD2                     u5201:
  8438   003FD2  EFC1  F01F         	goto	l5750
  8439   003FD6                     u5200:
  8440   003FD6  0012               	return		;funcret
  8441   003FD8                     __end_of_fullSpeedBack:
  8442                           	callstack 0
  8443                           
  8444 ;; *************** function _setMotorPWM *****************
  8445 ;; Defined at:
  8446 ;;		line 65 in file "dc_motor.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8449 ;;		 -> motorR(9), motorL(9), 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;  negDuty         1   18[COMRAM] unsigned char 
  8452 ;;  posDuty         1   17[COMRAM] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  1    wreg      void 
  8455 ;; Registers used:
  8456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8462 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8465 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8466 ;;Total ram usage:        5 bytes
  8467 ;; Hardware stack levels used: 1
  8468 ;; Hardware stack levels required when called: 2
  8469 ;; This function calls:
  8470 ;;		___lwdiv
  8471 ;;		___wmul
  8472 ;; This function is called by:
  8473 ;;		_stop
  8474 ;;		_turnLeft
  8475 ;;		_turnRight
  8476 ;;		_fullSpeedBack
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text41
  8481   0031EC                     __ptext41:
  8482                           	callstack 0
  8483   0031EC                     _setMotorPWM:
  8484                           	callstack 27
  8485   0031EC                     
  8486                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8487   0031EC  500F               	movf	setMotorPWM@m^0,w,c
  8488   0031EE  6ED9               	movwf	fsr2l,c
  8489   0031F0  6ADA               	clrf	fsr2h,c
  8490   0031F2  0E02               	movlw	2
  8491   0031F4  26D9               	addwf	fsr2l,f,c
  8492   0031F6  50DF               	movf	indf2,w,c
  8493   0031F8  B4D8               	btfsc	status,2,c
  8494   0031FA  EF01  F019         	goto	u5051
  8495   0031FE  EF03  F019         	goto	u5050
  8496   003202                     u5051:
  8497   003202  EF33  F019         	goto	l5604
  8498   003206                     u5050:
  8499   003206                     
  8500                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8501   003206  500F               	movf	setMotorPWM@m^0,w,c
  8502   003208  6ED9               	movwf	fsr2l,c
  8503   00320A  6ADA               	clrf	fsr2h,c
  8504   00320C  50DF               	movf	indf2,w,c
  8505   00320E  6E10               	movwf	??_setMotorPWM^0,c
  8506   003210  5010               	movf	??_setMotorPWM^0,w,c
  8507   003212  6E02               	movwf	___wmul@multiplier^0,c
  8508   003214  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8509   003216  500F               	movf	setMotorPWM@m^0,w,c
  8510   003218  6ED9               	movwf	fsr2l,c
  8511   00321A  6ADA               	clrf	fsr2h,c
  8512   00321C  0E03               	movlw	3
  8513   00321E  26D9               	addwf	fsr2l,f,c
  8514   003220  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8515   003224  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8516   003228  EC19  F024         	call	___wmul	;wreg free
  8517   00322C  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8518   003230  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8519   003234  0E00               	movlw	0
  8520   003236  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8521   003238  0E64               	movlw	100
  8522   00323A  6E0A               	movwf	___lwdiv@divisor^0,c
  8523   00323C  ECEC  F01F         	call	___lwdiv	;wreg free
  8524   003240  500F               	movf	setMotorPWM@m^0,w,c
  8525   003242  6ED9               	movwf	fsr2l,c
  8526   003244  6ADA               	clrf	fsr2h,c
  8527   003246  0E03               	movlw	3
  8528   003248  26D9               	addwf	fsr2l,f,c
  8529   00324A  50DF               	movf	indf2,w,c
  8530   00324C  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8531   00324E  5008               	movf	?___lwdiv^0,w,c
  8532   003250  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8533   003252  6E12               	movwf	setMotorPWM@posDuty^0,c
  8534   003254                     
  8535                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8536   003254  500F               	movf	setMotorPWM@m^0,w,c
  8537   003256  6ED9               	movwf	fsr2l,c
  8538   003258  6ADA               	clrf	fsr2h,c
  8539   00325A  0E03               	movlw	3
  8540   00325C  26D9               	addwf	fsr2l,f,c
  8541   00325E  50DF               	movf	indf2,w,c
  8542   003260  6E13               	movwf	setMotorPWM@negDuty^0,c
  8543                           
  8544                           ;dc_motor.c: 72:     }
  8545   003262  EF54  F019         	goto	l5608
  8546   003266                     l5604:
  8547                           
  8548                           ;dc_motor.c: 74:         posDuty=0;
  8549   003266  0E00               	movlw	0
  8550   003268  6E12               	movwf	setMotorPWM@posDuty^0,c
  8551   00326A                     
  8552                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8553   00326A  500F               	movf	setMotorPWM@m^0,w,c
  8554   00326C  6ED9               	movwf	fsr2l,c
  8555   00326E  6ADA               	clrf	fsr2h,c
  8556   003270  50DF               	movf	indf2,w,c
  8557   003272  6E10               	movwf	??_setMotorPWM^0,c
  8558   003274  5010               	movf	??_setMotorPWM^0,w,c
  8559   003276  6E02               	movwf	___wmul@multiplier^0,c
  8560   003278  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8561   00327A  500F               	movf	setMotorPWM@m^0,w,c
  8562   00327C  6ED9               	movwf	fsr2l,c
  8563   00327E  6ADA               	clrf	fsr2h,c
  8564   003280  0E03               	movlw	3
  8565   003282  26D9               	addwf	fsr2l,f,c
  8566   003284  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8567   003288  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8568   00328C  EC19  F024         	call	___wmul	;wreg free
  8569   003290  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8570   003294  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8571   003298  0E00               	movlw	0
  8572   00329A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8573   00329C  0E64               	movlw	100
  8574   00329E  6E0A               	movwf	___lwdiv@divisor^0,c
  8575   0032A0  ECEC  F01F         	call	___lwdiv	;wreg free
  8576   0032A4  5008               	movf	?___lwdiv^0,w,c
  8577   0032A6  6E13               	movwf	setMotorPWM@negDuty^0,c
  8578   0032A8                     l5608:
  8579                           
  8580                           ;dc_motor.c: 78:     if (m->direction) {
  8581   0032A8  500F               	movf	setMotorPWM@m^0,w,c
  8582   0032AA  6ED9               	movwf	fsr2l,c
  8583   0032AC  6ADA               	clrf	fsr2h,c
  8584   0032AE  0E01               	movlw	1
  8585   0032B0  26D9               	addwf	fsr2l,f,c
  8586   0032B2  50DF               	movf	indf2,w,c
  8587   0032B4  B4D8               	btfsc	status,2,c
  8588   0032B6  EF5F  F019         	goto	u5061
  8589   0032BA  EF61  F019         	goto	u5060
  8590   0032BE                     u5061:
  8591   0032BE  EF81  F019         	goto	l5612
  8592   0032C2                     u5060:
  8593   0032C2                     
  8594                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8595   0032C2  500F               	movf	setMotorPWM@m^0,w,c
  8596   0032C4  6ED9               	movwf	fsr2l,c
  8597   0032C6  6ADA               	clrf	fsr2h,c
  8598   0032C8  0E05               	movlw	5
  8599   0032CA  26D9               	addwf	fsr2l,f,c
  8600   0032CC  CFDE F010          	movff	postinc2,??_setMotorPWM
  8601   0032D0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8602   0032D4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8603   0032D8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8604   0032DC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8605                           
  8606                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8607   0032E0  500F               	movf	setMotorPWM@m^0,w,c
  8608   0032E2  6ED9               	movwf	fsr2l,c
  8609   0032E4  6ADA               	clrf	fsr2h,c
  8610   0032E6  0E07               	movlw	7
  8611   0032E8  26D9               	addwf	fsr2l,f,c
  8612   0032EA  CFDE F010          	movff	postinc2,??_setMotorPWM
  8613   0032EE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8614   0032F2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8615   0032F6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8616   0032FA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8617                           
  8618                           ;dc_motor.c: 81:     } else {
  8619   0032FE  EF9F  F019         	goto	l421
  8620   003302                     l5612:
  8621                           
  8622                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8623   003302  500F               	movf	setMotorPWM@m^0,w,c
  8624   003304  6ED9               	movwf	fsr2l,c
  8625   003306  6ADA               	clrf	fsr2h,c
  8626   003308  0E05               	movlw	5
  8627   00330A  26D9               	addwf	fsr2l,f,c
  8628   00330C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8629   003310  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8630   003314  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8631   003318  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8632   00331C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8633                           
  8634                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8635   003320  500F               	movf	setMotorPWM@m^0,w,c
  8636   003322  6ED9               	movwf	fsr2l,c
  8637   003324  6ADA               	clrf	fsr2h,c
  8638   003326  0E07               	movlw	7
  8639   003328  26D9               	addwf	fsr2l,f,c
  8640   00332A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8641   00332E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8642   003332  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8643   003336  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8644   00333A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8645   00333E                     l421:
  8646   00333E  0012               	return		;funcret
  8647   003340                     __end_of_setMotorPWM:
  8648                           	callstack 0
  8649                           
  8650 ;; *************** function ___lwdiv *****************
  8651 ;; Defined at:
  8652 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  dividend        2    7[COMRAM] unsigned int 
  8655 ;;  divisor         2    9[COMRAM] unsigned int 
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  quotient        2   12[COMRAM] unsigned int 
  8658 ;;  counter         1   11[COMRAM] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  2    7[COMRAM] unsigned int 
  8661 ;; Registers used:
  8662 ;;		wreg, status,2, status,0
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8668 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8669 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8671 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8672 ;;Total ram usage:        7 bytes
  8673 ;; Hardware stack levels used: 1
  8674 ;; Hardware stack levels required when called: 1
  8675 ;; This function calls:
  8676 ;;		Nothing
  8677 ;; This function is called by:
  8678 ;;		_setMotorPWM
  8679 ;;		_ADC2String
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text42
  8684   003FD8                     __ptext42:
  8685                           	callstack 0
  8686   003FD8                     ___lwdiv:
  8687                           	callstack 27
  8688   003FD8  0E00               	movlw	0
  8689   003FDA  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  8690   003FDC  0E00               	movlw	0
  8691   003FDE  6E0D               	movwf	___lwdiv@quotient^0,c
  8692   003FE0  500A               	movf	___lwdiv@divisor^0,w,c
  8693   003FE2  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8694   003FE4  B4D8               	btfsc	status,2,c
  8695   003FE6  EFF7  F01F         	goto	u4901
  8696   003FEA  EFF9  F01F         	goto	u4900
  8697   003FEE                     u4901:
  8698   003FEE  EF21  F020         	goto	l1223
  8699   003FF2                     u4900:
  8700   003FF2  0E01               	movlw	1
  8701   003FF4  6E0C               	movwf	___lwdiv@counter^0,c
  8702   003FF6  EF01  F020         	goto	l5520
  8703   003FFA                     l5518:
  8704   003FFA  90D8               	bcf	status,0,c
  8705   003FFC  360A               	rlcf	___lwdiv@divisor^0,f,c
  8706   003FFE  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8707   004000  2A0C               	incf	___lwdiv@counter^0,f,c
  8708   004002                     l5520:
  8709   004002  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8710   004004  EF06  F020         	goto	u4911
  8711   004008  EF08  F020         	goto	u4910
  8712   00400C                     u4911:
  8713   00400C  EFFD  F01F         	goto	l5518
  8714   004010                     u4910:
  8715   004010                     l5522:
  8716   004010  90D8               	bcf	status,0,c
  8717   004012  360D               	rlcf	___lwdiv@quotient^0,f,c
  8718   004014  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8719   004016  500A               	movf	___lwdiv@divisor^0,w,c
  8720   004018  5C08               	subwf	___lwdiv@dividend^0,w,c
  8721   00401A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8722   00401C  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8723   00401E  A0D8               	btfss	status,0,c
  8724   004020  EF14  F020         	goto	u4921
  8725   004024  EF16  F020         	goto	u4920
  8726   004028                     u4921:
  8727   004028  EF1B  F020         	goto	l5530
  8728   00402C                     u4920:
  8729   00402C  500A               	movf	___lwdiv@divisor^0,w,c
  8730   00402E  5E08               	subwf	___lwdiv@dividend^0,f,c
  8731   004030  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8732   004032  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8733   004034  800D               	bsf	___lwdiv@quotient^0,0,c
  8734   004036                     l5530:
  8735   004036  90D8               	bcf	status,0,c
  8736   004038  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8737   00403A  320A               	rrcf	___lwdiv@divisor^0,f,c
  8738   00403C  2E0C               	decfsz	___lwdiv@counter^0,f,c
  8739   00403E  EF08  F020         	goto	l5522
  8740   004042                     l1223:
  8741   004042  C00D  F008         	movff	___lwdiv@quotient,?___lwdiv
  8742   004046  C00E  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8743   00404A  0012               	return		;funcret
  8744   00404C                     __end_of___lwdiv:
  8745                           	callstack 0
  8746                           
  8747 ;; *************** function _logAction *****************
  8748 ;; Defined at:
  8749 ;;		line 13 in file "return_func.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  newAction       1    wreg     unsigned char 
  8752 ;;  newTime         2    1[COMRAM] int 
  8753 ;;  path_step       2    3[COMRAM] unsigned int 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  newAction       1    5[COMRAM] unsigned char 
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  1    wreg      void 
  8758 ;; Registers used:
  8759 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8769 ;;Total ram usage:        5 bytes
  8770 ;; Hardware stack levels used: 1
  8771 ;; Hardware stack levels required when called: 1
  8772 ;; This function calls:
  8773 ;;		Nothing
  8774 ;; This function is called by:
  8775 ;;		_decision
  8776 ;;		_get16bitTMR0val
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text43
  8781   00423C                     __ptext43:
  8782                           	callstack 0
  8783   00423C                     _logAction:
  8784                           	callstack 28
  8785                           
  8786                           ;incstack = 0
  8787                           ;logAction@newAction stored from wreg
  8788   00423C  6E06               	movwf	logAction@newAction^0,c
  8789   00423E                     
  8790                           ;return_func.c: 14:     if (path_step < 50) {
  8791   00423E  5005               	movf	(logAction@path_step+1)^0,w,c
  8792   004240  E107               	bnz	u6441
  8793   004242  0E32               	movlw	50
  8794   004244  5C04               	subwf	logAction@path_step^0,w,c
  8795   004246  B0D8               	btfsc	status,0,c
  8796   004248  EF28  F021         	goto	u6441
  8797   00424C  EF2A  F021         	goto	u6440
  8798   004250                     u6441:
  8799   004250  EF3F  F021         	goto	l694
  8800   004254                     u6440:
  8801   004254                     
  8802                           ;return_func.c: 15:         action[path_step] = newAction;
  8803   004254  0E3C               	movlw	low _action
  8804   004256  2404               	addwf	logAction@path_step^0,w,c
  8805   004258  6ED9               	movwf	fsr2l,c
  8806   00425A  0E01               	movlw	high _action
  8807   00425C  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8808   00425E  6EDA               	movwf	fsr2h,c
  8809   004260  C006  FFDF         	movff	logAction@newAction,indf2
  8810                           
  8811                           ;return_func.c: 16:         time[path_step] = newTime;
  8812   004264  90D8               	bcf	status,0,c
  8813   004266  3404               	rlcf	logAction@path_step^0,w,c
  8814   004268  6ED9               	movwf	fsr2l,c
  8815   00426A  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8816   00426C  6EDA               	movwf	fsr2h,c
  8817   00426E  0E00               	movlw	low _time
  8818   004270  26D9               	addwf	fsr2l,f,c
  8819   004272  0E02               	movlw	high _time
  8820   004274  22DA               	addwfc	fsr2h,f,c
  8821   004276  C002  FFDE         	movff	logAction@newTime,postinc2
  8822   00427A  C003  FFDD         	movff	logAction@newTime+1,postdec2
  8823   00427E                     l694:
  8824   00427E  0012               	return		;funcret
  8825   004280                     __end_of_logAction:
  8826                           	callstack 0
  8827                           
  8828 ;; *************** function _color_click_init *****************
  8829 ;; Defined at:
  8830 ;;		line 9 in file "color.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;                  1    wreg      void 
  8837 ;; Registers used:
  8838 ;;		wreg, status,2, status,0, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8847 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8848 ;;Total ram usage:        1 bytes
  8849 ;; Hardware stack levels used: 1
  8850 ;; Hardware stack levels required when called: 4
  8851 ;; This function calls:
  8852 ;;		_I2C_2_Master_Init
  8853 ;;		_color_writetoaddr
  8854 ;; This function is called by:
  8855 ;;		_main
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859                           	psect	text44
  8860   0043FA                     __ptext44:
  8861                           	callstack 0
  8862   0043FA                     _color_click_init:
  8863                           	callstack 26
  8864   0043FA                     
  8865                           ;color.c: 12:     I2C_2_Master_Init();
  8866   0043FA  ECF0  F023         	call	_I2C_2_Master_Init	;wreg free
  8867   0043FE                     
  8868                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  8869   0043FE  0E01               	movlw	1
  8870   004400  6E04               	movwf	color_writetoaddr@value^0,c
  8871   004402  0E00               	movlw	0
  8872   004404  EC2C  F024         	call	_color_writetoaddr
  8873   004408                     
  8874                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8875   004408  0E3F               	movlw	63
  8876   00440A  6E06               	movwf	??_color_click_init^0,c
  8877   00440C  0E55               	movlw	85
  8878   00440E                     u7277:
  8879   00440E  2EE8               	decfsz	wreg,f,c
  8880   004410  D7FE               	bra	u7277
  8881   004412  2E06               	decfsz	??_color_click_init^0,f,c
  8882   004414  D7FC               	bra	u7277
  8883   004416  0000               	nop	
  8884   004418                     
  8885                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  8886   004418  0E03               	movlw	3
  8887   00441A  6E04               	movwf	color_writetoaddr@value^0,c
  8888   00441C  0E00               	movlw	0
  8889   00441E  EC2C  F024         	call	_color_writetoaddr
  8890   004422                     
  8891                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  8892   004422  0ED5               	movlw	213
  8893   004424  6E04               	movwf	color_writetoaddr@value^0,c
  8894   004426  0E01               	movlw	1
  8895   004428  EC2C  F024         	call	_color_writetoaddr
  8896   00442C  0012               	return		;funcret
  8897   00442E                     __end_of_color_click_init:
  8898                           	callstack 0
  8899                           
  8900 ;; *************** function _color_writetoaddr *****************
  8901 ;; Defined at:
  8902 ;;		line 25 in file "color.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  address         1    wreg     unsigned char 
  8905 ;;  value           1    3[COMRAM] unsigned char 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  address         1    4[COMRAM] unsigned char 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  1    wreg      void 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0, cstack
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8917 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8921 ;;Total ram usage:        2 bytes
  8922 ;; Hardware stack levels used: 1
  8923 ;; Hardware stack levels required when called: 3
  8924 ;; This function calls:
  8925 ;;		_I2C_2_Master_Start
  8926 ;;		_I2C_2_Master_Stop
  8927 ;;		_I2C_2_Master_Write
  8928 ;; This function is called by:
  8929 ;;		_color_click_init
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text45
  8934   004858                     __ptext45:
  8935                           	callstack 0
  8936   004858                     _color_writetoaddr:
  8937                           	callstack 26
  8938                           
  8939                           ;incstack = 0
  8940                           ;color_writetoaddr@address stored from wreg
  8941   004858  6E05               	movwf	color_writetoaddr@address^0,c
  8942   00485A                     
  8943                           ;color.c: 26:     I2C_2_Master_Start();
  8944   00485A  EC7E  F024         	call	_I2C_2_Master_Start	;wreg free
  8945                           
  8946                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  8947   00485E  0E52               	movlw	82
  8948   004860  EC73  F024         	call	_I2C_2_Master_Write
  8949                           
  8950                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  8951   004864  5005               	movf	color_writetoaddr@address^0,w,c
  8952   004866  0980               	iorlw	128
  8953   004868  EC73  F024         	call	_I2C_2_Master_Write
  8954                           
  8955                           ;color.c: 29:     I2C_2_Master_Write(value);
  8956   00486C  5004               	movf	color_writetoaddr@value^0,w,c
  8957   00486E  EC73  F024         	call	_I2C_2_Master_Write
  8958                           
  8959                           ;color.c: 30:     I2C_2_Master_Stop();
  8960   004872  EC79  F024         	call	_I2C_2_Master_Stop	;wreg free
  8961   004876  0012               	return		;funcret
  8962   004878                     __end_of_color_writetoaddr:
  8963                           	callstack 0
  8964                           
  8965 ;; *************** function _I2C_2_Master_Init *****************
  8966 ;; Defined at:
  8967 ;;		line 4 in file "i2c.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;		None
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;		None
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      void 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8985 ;;Total ram usage:        0 bytes
  8986 ;; Hardware stack levels used: 1
  8987 ;; Hardware stack levels required when called: 1
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_color_click_init
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text46
  8996   0047E0                     __ptext46:
  8997                           	callstack 0
  8998   0047E0                     _I2C_2_Master_Init:
  8999                           	callstack 28
  9000   0047E0                     
  9001                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9002   0047E0  010E               	movlb	14	; () banked
  9003   0047E2  51D9               	movf	217,w,b	;volatile
  9004   0047E4  0BF0               	andlw	-16
  9005   0047E6  0908               	iorlw	8
  9006   0047E8  6FD9               	movwf	217,b	;volatile
  9007   0047EA                     
  9008                           ; BSR set to: 14
  9009                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9010   0047EA  8BD9               	bsf	217,5,b	;volatile
  9011                           
  9012                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9013   0047EC  0E9F               	movlw	159
  9014   0047EE  6FD6               	movwf	214,b	;volatile
  9015   0047F0                     
  9016                           ; BSR set to: 14
  9017                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9018   0047F0  8A84               	bsf	132,5,c	;volatile
  9019   0047F2                     
  9020                           ; BSR set to: 14
  9021                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9022   0047F2  8C84               	bsf	132,6,c	;volatile
  9023   0047F4                     
  9024                           ; BSR set to: 14
  9025                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9026   0047F4  9BA7               	bcf	167,5,b	;volatile
  9027   0047F6                     
  9028                           ; BSR set to: 14
  9029                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9030   0047F6  9DA7               	bcf	167,6,b	;volatile
  9031                           
  9032                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9033   0047F8  0E1D               	movlw	29
  9034   0047FA  6F1D               	movwf	29,b	;volatile
  9035                           
  9036                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9037   0047FC  0E1E               	movlw	30
  9038   0047FE  6F1C               	movwf	28,b	;volatile
  9039                           
  9040                           ;i2c.c: 18:   RD5PPS=0x1C;
  9041   004800  0E1C               	movlw	28
  9042   004802  6F6F               	movwf	111,b	;volatile
  9043                           
  9044                           ;i2c.c: 19:   RD6PPS=0x1B;
  9045   004804  0E1B               	movlw	27
  9046   004806  6F70               	movwf	112,b	;volatile
  9047   004808                     
  9048                           ; BSR set to: 14
  9049   004808  0012               	return		;funcret
  9050   00480A                     __end_of_I2C_2_Master_Init:
  9051                           	callstack 0
  9052                           
  9053 ;; *************** function _calibration_routine *****************
  9054 ;; Defined at:
  9055 ;;		line 133 in file "color.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  cCal            1   70[COMRAM] PTR struct colors
  9058 ;;		 -> colorCalibration(10), 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  1    wreg      void 
  9063 ;; Registers used:
  9064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9070 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9073 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9074 ;;Total ram usage:       23 bytes
  9075 ;; Hardware stack levels used: 1
  9076 ;; Hardware stack levels required when called: 10
  9077 ;; This function calls:
  9078 ;;		_color_read_Blue
  9079 ;;		_color_read_Clear
  9080 ;;		_color_read_Green
  9081 ;;		_color_read_Red
  9082 ;;		_send2USART
  9083 ;;		_sendStringSerial4
  9084 ;;		_sprintf
  9085 ;; This function is called by:
  9086 ;;		_main
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           	psect	text47
  9091   002992                     __ptext47:
  9092                           	callstack 0
  9093   002992                     _calibration_routine:
  9094                           	callstack 20
  9095   002992                     
  9096                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9097   002992  907F               	bcf	127,0,c	;volatile
  9098                           
  9099                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9100   002994  9E7D               	bcf	125,7,c	;volatile
  9101                           
  9102                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9103   002996  9679               	bcf	121,3,c	;volatile
  9104   002998                     
  9105                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9106   002998  0E92               	movlw	low calibration_routine@cal_state
  9107   00299A  6E32               	movwf	sprintf@s^0,c
  9108   00299C  0E8A               	movlw	low STR_1
  9109   00299E  6E33               	movwf	sprintf@fmt^0,c
  9110   0029A0  0EC3               	movlw	low STR_2
  9111   0029A2  6E34               	movwf	(?_sprintf+2)^0,c
  9112   0029A4  5034               	movf	(?_sprintf+2)^0,w,c
  9113   0029A6  A4D8               	btfss	status,2,c
  9114   0029A8  0E0E               	movlw	high __smallconst
  9115   0029AA  6E35               	movwf	(?_sprintf+3)^0,c
  9116   0029AC  EC17  F022         	call	_sprintf	;wreg free
  9117   0029B0                     
  9118                           ;color.c: 145:     sendStringSerial4(cal_state);
  9119   0029B0  0E92               	movlw	low calibration_routine@cal_state
  9120   0029B2  6E03               	movwf	sendStringSerial4@string^0,c
  9121   0029B4  EC77  F023         	call	_sendStringSerial4	;wreg free
  9122   0029B8                     l102:
  9123                           
  9124                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9125   0029B8  B48E               	btfsc	142,2,c	;volatile
  9126   0029BA  EFE1  F014         	goto	u6621
  9127   0029BE  EFE3  F014         	goto	u6620
  9128   0029C2                     u6621:
  9129   0029C2  EFDC  F014         	goto	l102
  9130   0029C6                     u6620:
  9131   0029C6                     
  9132                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9133   0029C6  807F               	bsf	127,0,c	;volatile
  9134   0029C8                     
  9135                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9136   0029C8  0E29               	movlw	41
  9137   0029CA  6E49               	movwf	(??_calibration_routine+1)^0,c
  9138   0029CC  0E96               	movlw	150
  9139   0029CE  6E48               	movwf	??_calibration_routine^0,c
  9140   0029D0  0E7F               	movlw	127
  9141   0029D2                     u7287:
  9142   0029D2  2EE8               	decfsz	wreg,f,c
  9143   0029D4  D7FE               	bra	u7287
  9144   0029D6  2E48               	decfsz	??_calibration_routine^0,f,c
  9145   0029D8  D7FC               	bra	u7287
  9146   0029DA  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9147   0029DC  D7FA               	bra	u7287
  9148   0029DE  0000               	nop	
  9149   0029E0                     
  9150                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9151   0029E0  EC5B  F020         	call	_color_read_Red	;wreg free
  9152   0029E4  5047               	movf	calibration_routine@cCal^0,w,c
  9153   0029E6  6ED9               	movwf	fsr2l,c
  9154   0029E8  6ADA               	clrf	fsr2h,c
  9155   0029EA  C006  FFDE         	movff	?_color_read_Red,postinc2
  9156   0029EE  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9157   0029F2                     
  9158                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9159   0029F2  907F               	bcf	127,0,c	;volatile
  9160   0029F4                     
  9161                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9162   0029F4  0E92               	movlw	low calibration_routine@cal_state
  9163   0029F6  6E32               	movwf	sprintf@s^0,c
  9164   0029F8  0E01               	movlw	low STR_3
  9165   0029FA  6E33               	movwf	sprintf@fmt^0,c
  9166   0029FC  0EC3               	movlw	low STR_2
  9167   0029FE  6E34               	movwf	(?_sprintf+2)^0,c
  9168   002A00  5034               	movf	(?_sprintf+2)^0,w,c
  9169   002A02  A4D8               	btfss	status,2,c
  9170   002A04  0E0E               	movlw	high __smallconst
  9171   002A06  6E35               	movwf	(?_sprintf+3)^0,c
  9172   002A08  EC17  F022         	call	_sprintf	;wreg free
  9173   002A0C                     
  9174                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9175   002A0C  0E92               	movlw	low calibration_routine@cal_state
  9176   002A0E  6E03               	movwf	sendStringSerial4@string^0,c
  9177   002A10  EC77  F023         	call	_sendStringSerial4	;wreg free
  9178   002A14                     l105:
  9179                           
  9180                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9181   002A14  B48E               	btfsc	142,2,c	;volatile
  9182   002A16  EF0F  F015         	goto	u6631
  9183   002A1A  EF11  F015         	goto	u6630
  9184   002A1E                     u6631:
  9185   002A1E  EF0A  F015         	goto	l105
  9186   002A22                     u6630:
  9187   002A22                     
  9188                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9189   002A22  8E7D               	bsf	125,7,c	;volatile
  9190   002A24                     
  9191                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9192   002A24  0E29               	movlw	41
  9193   002A26  6E49               	movwf	(??_calibration_routine+1)^0,c
  9194   002A28  0E96               	movlw	150
  9195   002A2A  6E48               	movwf	??_calibration_routine^0,c
  9196   002A2C  0E7F               	movlw	127
  9197   002A2E                     u7297:
  9198   002A2E  2EE8               	decfsz	wreg,f,c
  9199   002A30  D7FE               	bra	u7297
  9200   002A32  2E48               	decfsz	??_calibration_routine^0,f,c
  9201   002A34  D7FC               	bra	u7297
  9202   002A36  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9203   002A38  D7FA               	bra	u7297
  9204   002A3A  0000               	nop	
  9205   002A3C                     
  9206                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9207   002A3C  EC83  F020         	call	_color_read_Green	;wreg free
  9208   002A40  5047               	movf	calibration_routine@cCal^0,w,c
  9209   002A42  6ED9               	movwf	fsr2l,c
  9210   002A44  6ADA               	clrf	fsr2h,c
  9211   002A46  0E02               	movlw	2
  9212   002A48  26D9               	addwf	fsr2l,f,c
  9213   002A4A  C006  FFDE         	movff	?_color_read_Green,postinc2
  9214   002A4E  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9215   002A52                     
  9216                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9217   002A52  9E7D               	bcf	125,7,c	;volatile
  9218   002A54                     
  9219                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9220   002A54  0E92               	movlw	low calibration_routine@cal_state
  9221   002A56  6E32               	movwf	sprintf@s^0,c
  9222   002A58  0E3B               	movlw	low STR_5
  9223   002A5A  6E33               	movwf	sprintf@fmt^0,c
  9224   002A5C  0EC3               	movlw	low STR_2
  9225   002A5E  6E34               	movwf	(?_sprintf+2)^0,c
  9226   002A60  5034               	movf	(?_sprintf+2)^0,w,c
  9227   002A62  A4D8               	btfss	status,2,c
  9228   002A64  0E0E               	movlw	high __smallconst
  9229   002A66  6E35               	movwf	(?_sprintf+3)^0,c
  9230   002A68  EC17  F022         	call	_sprintf	;wreg free
  9231   002A6C                     
  9232                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9233   002A6C  0E92               	movlw	low calibration_routine@cal_state
  9234   002A6E  6E03               	movwf	sendStringSerial4@string^0,c
  9235   002A70  EC77  F023         	call	_sendStringSerial4	;wreg free
  9236   002A74                     l108:
  9237                           
  9238                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9239   002A74  B48E               	btfsc	142,2,c	;volatile
  9240   002A76  EF3F  F015         	goto	u6641
  9241   002A7A  EF41  F015         	goto	u6640
  9242   002A7E                     u6641:
  9243   002A7E  EF3A  F015         	goto	l108
  9244   002A82                     u6640:
  9245   002A82                     
  9246                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9247   002A82  8679               	bsf	121,3,c	;volatile
  9248   002A84                     
  9249                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9250   002A84  0E29               	movlw	41
  9251   002A86  6E49               	movwf	(??_calibration_routine+1)^0,c
  9252   002A88  0E96               	movlw	150
  9253   002A8A  6E48               	movwf	??_calibration_routine^0,c
  9254   002A8C  0E7F               	movlw	127
  9255   002A8E                     u7307:
  9256   002A8E  2EE8               	decfsz	wreg,f,c
  9257   002A90  D7FE               	bra	u7307
  9258   002A92  2E48               	decfsz	??_calibration_routine^0,f,c
  9259   002A94  D7FC               	bra	u7307
  9260   002A96  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9261   002A98  D7FA               	bra	u7307
  9262   002A9A  0000               	nop	
  9263   002A9C                     
  9264                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9265   002A9C  ECD3  F020         	call	_color_read_Blue	;wreg free
  9266   002AA0  5047               	movf	calibration_routine@cCal^0,w,c
  9267   002AA2  6ED9               	movwf	fsr2l,c
  9268   002AA4  6ADA               	clrf	fsr2h,c
  9269   002AA6  0E04               	movlw	4
  9270   002AA8  26D9               	addwf	fsr2l,f,c
  9271   002AAA  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9272   002AAE  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9273   002AB2                     
  9274                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9275   002AB2  9679               	bcf	121,3,c	;volatile
  9276   002AB4                     
  9277                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9278   002AB4  0E92               	movlw	low calibration_routine@cal_state
  9279   002AB6  6E32               	movwf	sprintf@s^0,c
  9280   002AB8  0E56               	movlw	low STR_7
  9281   002ABA  6E33               	movwf	sprintf@fmt^0,c
  9282   002ABC  0EC3               	movlw	low STR_2
  9283   002ABE  6E34               	movwf	(?_sprintf+2)^0,c
  9284   002AC0  5034               	movf	(?_sprintf+2)^0,w,c
  9285   002AC2  A4D8               	btfss	status,2,c
  9286   002AC4  0E0E               	movlw	high __smallconst
  9287   002AC6  6E35               	movwf	(?_sprintf+3)^0,c
  9288   002AC8  EC17  F022         	call	_sprintf	;wreg free
  9289   002ACC                     
  9290                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9291   002ACC  0E92               	movlw	low calibration_routine@cal_state
  9292   002ACE  6E03               	movwf	sendStringSerial4@string^0,c
  9293   002AD0  EC77  F023         	call	_sendStringSerial4	;wreg free
  9294   002AD4                     l111:
  9295                           
  9296                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9297   002AD4  B48E               	btfsc	142,2,c	;volatile
  9298   002AD6  EF6F  F015         	goto	u6651
  9299   002ADA  EF71  F015         	goto	u6650
  9300   002ADE                     u6651:
  9301   002ADE  EF6A  F015         	goto	l111
  9302   002AE2                     u6650:
  9303   002AE2                     
  9304                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9305   002AE2  807F               	bsf	127,0,c	;volatile
  9306                           
  9307                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9308   002AE4  8E7D               	bsf	125,7,c	;volatile
  9309                           
  9310                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9311   002AE6  8679               	bsf	121,3,c	;volatile
  9312   002AE8                     
  9313                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9314   002AE8  0E29               	movlw	41
  9315   002AEA  6E49               	movwf	(??_calibration_routine+1)^0,c
  9316   002AEC  0E96               	movlw	150
  9317   002AEE  6E48               	movwf	??_calibration_routine^0,c
  9318   002AF0  0E7F               	movlw	127
  9319   002AF2                     u7317:
  9320   002AF2  2EE8               	decfsz	wreg,f,c
  9321   002AF4  D7FE               	bra	u7317
  9322   002AF6  2E48               	decfsz	??_calibration_routine^0,f,c
  9323   002AF8  D7FC               	bra	u7317
  9324   002AFA  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9325   002AFC  D7FA               	bra	u7317
  9326   002AFE  0000               	nop	
  9327   002B00                     
  9328                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9329   002B00  ECAB  F020         	call	_color_read_Clear	;wreg free
  9330   002B04  5047               	movf	calibration_routine@cCal^0,w,c
  9331   002B06  6ED9               	movwf	fsr2l,c
  9332   002B08  6ADA               	clrf	fsr2h,c
  9333   002B0A  0E06               	movlw	6
  9334   002B0C  26D9               	addwf	fsr2l,f,c
  9335   002B0E  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9336   002B12  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9337   002B16                     
  9338                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9339   002B16  907F               	bcf	127,0,c	;volatile
  9340   002B18                     
  9341                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9342   002B18  9E7D               	bcf	125,7,c	;volatile
  9343   002B1A                     
  9344                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9345   002B1A  9679               	bcf	121,3,c	;volatile
  9346   002B1C                     
  9347                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9348   002B1C  0E92               	movlw	low calibration_routine@cal_state
  9349   002B1E  6E32               	movwf	sprintf@s^0,c
  9350   002B20  0E1E               	movlw	low STR_9
  9351   002B22  6E33               	movwf	sprintf@fmt^0,c
  9352   002B24  0EC3               	movlw	low STR_2
  9353   002B26  6E34               	movwf	(?_sprintf+2)^0,c
  9354   002B28  5034               	movf	(?_sprintf+2)^0,w,c
  9355   002B2A  A4D8               	btfss	status,2,c
  9356   002B2C  0E0E               	movlw	high __smallconst
  9357   002B2E  6E35               	movwf	(?_sprintf+3)^0,c
  9358   002B30  EC17  F022         	call	_sprintf	;wreg free
  9359   002B34                     
  9360                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9361   002B34  0E92               	movlw	low calibration_routine@cal_state
  9362   002B36  6E03               	movwf	sendStringSerial4@string^0,c
  9363   002B38  EC77  F023         	call	_sendStringSerial4	;wreg free
  9364   002B3C                     l114:
  9365                           
  9366                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9367   002B3C  B48E               	btfsc	142,2,c	;volatile
  9368   002B3E  EFA3  F015         	goto	u6661
  9369   002B42  EFA5  F015         	goto	u6660
  9370   002B46                     u6661:
  9371   002B46  EF9E  F015         	goto	l114
  9372   002B4A                     u6660:
  9373   002B4A                     
  9374                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9375   002B4A  807F               	bsf	127,0,c	;volatile
  9376                           
  9377                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9378   002B4C  8E7D               	bsf	125,7,c	;volatile
  9379                           
  9380                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9381   002B4E  8679               	bsf	121,3,c	;volatile
  9382   002B50                     
  9383                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9384   002B50  0E29               	movlw	41
  9385   002B52  6E49               	movwf	(??_calibration_routine+1)^0,c
  9386   002B54  0E96               	movlw	150
  9387   002B56  6E48               	movwf	??_calibration_routine^0,c
  9388   002B58  0E7F               	movlw	127
  9389   002B5A                     u7327:
  9390   002B5A  2EE8               	decfsz	wreg,f,c
  9391   002B5C  D7FE               	bra	u7327
  9392   002B5E  2E48               	decfsz	??_calibration_routine^0,f,c
  9393   002B60  D7FC               	bra	u7327
  9394   002B62  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9395   002B64  D7FA               	bra	u7327
  9396   002B66  0000               	nop	
  9397   002B68                     
  9398                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9399   002B68  ECAB  F020         	call	_color_read_Clear	;wreg free
  9400   002B6C  5047               	movf	calibration_routine@cCal^0,w,c
  9401   002B6E  6ED9               	movwf	fsr2l,c
  9402   002B70  6ADA               	clrf	fsr2h,c
  9403   002B72  0E08               	movlw	8
  9404   002B74  26D9               	addwf	fsr2l,f,c
  9405   002B76  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9406   002B7A  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9407   002B7E                     
  9408                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9409   002B7E  907F               	bcf	127,0,c	;volatile
  9410   002B80                     
  9411                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9412   002B80  9E7D               	bcf	125,7,c	;volatile
  9413   002B82                     
  9414                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9415   002B82  9679               	bcf	121,3,c	;volatile
  9416   002B84                     
  9417                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9418   002B84  0E92               	movlw	low calibration_routine@cal_state
  9419   002B86  6E32               	movwf	sprintf@s^0,c
  9420   002B88  0E71               	movlw	low STR_11
  9421   002B8A  6E33               	movwf	sprintf@fmt^0,c
  9422   002B8C  0EC3               	movlw	low STR_2
  9423   002B8E  6E34               	movwf	(?_sprintf+2)^0,c
  9424   002B90  5034               	movf	(?_sprintf+2)^0,w,c
  9425   002B92  A4D8               	btfss	status,2,c
  9426   002B94  0E0E               	movlw	high __smallconst
  9427   002B96  6E35               	movwf	(?_sprintf+3)^0,c
  9428   002B98  EC17  F022         	call	_sprintf	;wreg free
  9429   002B9C                     
  9430                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9431   002B9C  0E92               	movlw	low calibration_routine@cal_state
  9432   002B9E  6E03               	movwf	sendStringSerial4@string^0,c
  9433   002BA0  EC77  F023         	call	_sendStringSerial4	;wreg free
  9434   002BA4                     
  9435                           ;color.c: 218:     send2USART(colorCalibration.ambient);
  9436   002BA4  C0DB  F045         	movff	_colorCalibration+8,send2USART@hue
  9437   002BA8  C0DC  F046         	movff	_colorCalibration+9,send2USART@hue+1
  9438   002BAC  EC4B  F024         	call	_send2USART	;wreg free
  9439   002BB0                     l117:
  9440                           
  9441                           ;color.c: 220:     while(PORTFbits.RF2 == 1){
  9442   002BB0  B48E               	btfsc	142,2,c	;volatile
  9443   002BB2  EFDD  F015         	goto	u6671
  9444   002BB6  EFDF  F015         	goto	u6670
  9445   002BBA                     u6671:
  9446   002BBA  EFD8  F015         	goto	l117
  9447   002BBE                     u6670:
  9448   002BBE                     
  9449                           ;color.c: 223:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9450   002BBE  0E29               	movlw	41
  9451   002BC0  6E49               	movwf	(??_calibration_routine+1)^0,c
  9452   002BC2  0E96               	movlw	150
  9453   002BC4  6E48               	movwf	??_calibration_routine^0,c
  9454   002BC6  0E7F               	movlw	127
  9455   002BC8                     u7337:
  9456   002BC8  2EE8               	decfsz	wreg,f,c
  9457   002BCA  D7FE               	bra	u7337
  9458   002BCC  2E48               	decfsz	??_calibration_routine^0,f,c
  9459   002BCE  D7FC               	bra	u7337
  9460   002BD0  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9461   002BD2  D7FA               	bra	u7337
  9462   002BD4  0000               	nop	
  9463   002BD6  0012               	return		;funcret
  9464   002BD8                     __end_of_calibration_routine:
  9465                           	callstack 0
  9466                           
  9467 ;; *************** function _send2USART *****************
  9468 ;; Defined at:
  9469 ;;		line 146 in file "serial.c"
  9470 ;; Parameters:    Size  Location     Type
  9471 ;;  hue             2   68[COMRAM] unsigned int 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  9474 ;; Return value:  Size  Location     Type
  9475 ;;                  1    wreg      void 
  9476 ;; Registers used:
  9477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9484 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9486 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9487 ;;Total ram usage:       52 bytes
  9488 ;; Hardware stack levels used: 1
  9489 ;; Hardware stack levels required when called: 9
  9490 ;; This function calls:
  9491 ;;		_sendStringSerial4
  9492 ;;		_sprintf
  9493 ;; This function is called by:
  9494 ;;		_calibration_routine
  9495 ;;		_main
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text48
  9500   004896                     __ptext48:
  9501                           	callstack 0
  9502   004896                     _send2USART:
  9503                           	callstack 21
  9504   004896                     
  9505                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  9506   004896  0E60               	movlw	low send2USART@hue_char
  9507   004898  6E32               	movwf	sprintf@s^0,c
  9508   00489A  0EB7               	movlw	low STR_14
  9509   00489C  6E33               	movwf	sprintf@fmt^0,c
  9510   00489E  C045  F034         	movff	send2USART@hue,?_sprintf+2
  9511   0048A2  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  9512   0048A6  EC17  F022         	call	_sprintf	;wreg free
  9513   0048AA                     
  9514                           ;serial.c: 158:         sendStringSerial4(hue_char);
  9515   0048AA  0E60               	movlw	low send2USART@hue_char
  9516   0048AC  6E03               	movwf	sendStringSerial4@string^0,c
  9517   0048AE  EC77  F023         	call	_sendStringSerial4	;wreg free
  9518   0048B2  0012               	return		;funcret
  9519   0048B4                     __end_of_send2USART:
  9520                           	callstack 0
  9521                           
  9522 ;; *************** function _sprintf *****************
  9523 ;; Defined at:
  9524 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;  s               1   49[COMRAM] PTR unsigned char 
  9527 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9528 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9529 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9530 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  f              12   56[COMRAM] struct _IO_FILE
  9533 ;;  ret             2    0        int 
  9534 ;;  ap              1   55[COMRAM] PTR void [1]
  9535 ;;		 -> ?_sprintf(2), 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  2   49[COMRAM] int 
  9538 ;; Registers used:
  9539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9545 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9546 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9548 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9549 ;;Total ram usage:       19 bytes
  9550 ;; Hardware stack levels used: 1
  9551 ;; Hardware stack levels required when called: 8
  9552 ;; This function calls:
  9553 ;;		_vfprintf
  9554 ;; This function is called by:
  9555 ;;		_calibration_routine
  9556 ;;		_send2USART
  9557 ;;		_ADC2String
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text49
  9562   00442E                     __ptext49:
  9563                           	callstack 0
  9564   00442E                     _sprintf:
  9565                           	callstack 21
  9566   00442E  0E34               	movlw	low (?_sprintf+2)
  9567   004430  6E38               	movwf	sprintf@ap^0,c
  9568   004432  C032  F039         	movff	sprintf@s,sprintf@f
  9569   004436  0E00               	movlw	0
  9570   004438  6E3D               	movwf	(sprintf@f+4)^0,c
  9571   00443A  0E00               	movlw	0
  9572   00443C  6E3C               	movwf	(sprintf@f+3)^0,c
  9573   00443E  0E00               	movlw	0
  9574   004440  6E44               	movwf	(sprintf@f+11)^0,c
  9575   004442  0E00               	movlw	0
  9576   004444  6E43               	movwf	(sprintf@f+10)^0,c
  9577   004446  0E39               	movlw	low sprintf@f
  9578   004448  6E2E               	movwf	vfprintf@fp^0,c
  9579   00444A  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9580   00444E  0E38               	movlw	low sprintf@ap
  9581   004450  6E30               	movwf	vfprintf@ap^0,c
  9582   004452  EC61  F021         	call	_vfprintf	;wreg free
  9583   004456  5032               	movf	sprintf@s^0,w,c
  9584   004458  243C               	addwf	(sprintf@f+3)^0,w,c
  9585   00445A  6ED9               	movwf	fsr2l,c
  9586   00445C  6ADA               	clrf	fsr2h,c
  9587   00445E  6ADF               	clrf	indf2,c
  9588   004460  0012               	return		;funcret
  9589   004462                     __end_of_sprintf:
  9590                           	callstack 0
  9591                           
  9592 ;; *************** function _vfprintf *****************
  9593 ;; Defined at:
  9594 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9597 ;;		 -> sprintf@f(12), 
  9598 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9599 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9600 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9601 ;;  ap              1   47[COMRAM] PTR PTR void 
  9602 ;;		 -> sprintf@ap(1), 
  9603 ;; Auto vars:     Size  Location     Type
  9604 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9605 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9606 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  2   45[COMRAM] int 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9616 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9619 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9620 ;;Total ram usage:        4 bytes
  9621 ;; Hardware stack levels used: 1
  9622 ;; Hardware stack levels required when called: 7
  9623 ;; This function calls:
  9624 ;;		_vfpfcnvrt
  9625 ;; This function is called by:
  9626 ;;		_sprintf
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text50
  9631   0042C2                     __ptext50:
  9632                           	callstack 0
  9633   0042C2                     _vfprintf:
  9634                           	callstack 21
  9635   0042C2                     
  9636                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9637   0042C2  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9638                           
  9639                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9640   0042C6  EF6D  F021         	goto	l5972
  9641   0042CA                     l5970:
  9642                           
  9643                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9644   0042CA  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9645   0042CE  0E31               	movlw	low vfprintf@cfmt
  9646   0042D0  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9647   0042D2  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9648   0042D6  ECC6  F016         	call	_vfpfcnvrt	;wreg free
  9649   0042DA                     l5972:
  9650                           
  9651                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9652   0042DA  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9653   0042DE                     	if	1	;There is more than 1 active tblptr byte
  9654   0042DE  0E0E               	movlw	high __smallconst
  9655   0042E0  6EF7               	movwf	tblptrh,c
  9656   0042E2                     	endif
  9657   0042E2                     	if	0	;tblptru may be non-zero
  9658   0042E2                     	endif
  9659   0042E2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9660   0042E2  0E00               	movlw	low (__smallconst shr (0+16))
  9661   0042E4  6EF8               	movwf	tblptru,c
  9662   0042E6                     	endif
  9663   0042E6  0008               	tblrd		*
  9664   0042E8  50F5               	movf	tablat,w,c
  9665   0042EA  0900               	iorlw	0
  9666   0042EC  A4D8               	btfss	status,2,c
  9667   0042EE  EF7B  F021         	goto	u5611
  9668   0042F2  EF7D  F021         	goto	u5610
  9669   0042F6                     u5611:
  9670   0042F6  EF65  F021         	goto	l5970
  9671   0042FA                     u5610:
  9672   0042FA                     
  9673                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9674   0042FA  0E00               	movlw	0
  9675   0042FC  6E2F               	movwf	(?_vfprintf+1)^0,c
  9676   0042FE  0E00               	movlw	0
  9677   004300  6E2E               	movwf	?_vfprintf^0,c
  9678   004302  0012               	return		;funcret
  9679   004304                     __end_of_vfprintf:
  9680                           	callstack 0
  9681                           
  9682 ;; *************** function _vfpfcnvrt *****************
  9683 ;; Defined at:
  9684 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9687 ;;		 -> sprintf@f(12), 
  9688 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9689 ;;		 -> vfprintf@cfmt(1), 
  9690 ;;  ap              1   36[COMRAM] PTR PTR void 
  9691 ;;		 -> sprintf@ap(1), 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  convarg         4   39[COMRAM] struct .
  9694 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9695 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9696 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9697 ;;  done            1   43[COMRAM] _Bool 
  9698 ;;  c               1    0        unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9708 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9709 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9711 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9712 ;;Total ram usage:       11 bytes
  9713 ;; Hardware stack levels used: 1
  9714 ;; Hardware stack levels required when called: 6
  9715 ;; This function calls:
  9716 ;;		_dtoa
  9717 ;;		_fputc
  9718 ;;		_read_prec_or_width
  9719 ;; This function is called by:
  9720 ;;		_vfprintf
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text51
  9725   002D8C                     __ptext51:
  9726                           	callstack 0
  9727   002D8C                     _vfpfcnvrt:
  9728                           	callstack 21
  9729   002D8C                     
  9730                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9731   002D8C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9732   002D8E  6ED9               	movwf	fsr2l,c
  9733   002D90  6ADA               	clrf	fsr2h,c
  9734   002D92  CFDF FFF6          	movff	indf2,tblptrl
  9735   002D96                     	if	1	;There is more than 1 active tblptr byte
  9736   002D96  0E0E               	movlw	high __smallconst
  9737   002D98  6EF7               	movwf	tblptrh,c
  9738   002D9A                     	endif
  9739   002D9A                     	if	0	;tblptru may be non-zero
  9740   002D9A                     	endif
  9741   002D9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9742   002D9A  0E00               	movlw	low (__smallconst shr (0+16))
  9743   002D9C  6EF8               	movwf	tblptru,c
  9744   002D9E                     	endif
  9745   002D9E  0008               	tblrd		*
  9746   002DA0  50F5               	movf	tablat,w,c
  9747   002DA2  0A25               	xorlw	37
  9748   002DA4  A4D8               	btfss	status,2,c
  9749   002DA6  EFD7  F016         	goto	u5071
  9750   002DAA  EFD9  F016         	goto	u5070
  9751   002DAE                     u5071:
  9752   002DAE  EF76  F017         	goto	l5660
  9753   002DB2                     u5070:
  9754   002DB2                     
  9755                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9756   002DB2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9757   002DB4  6ED9               	movwf	fsr2l,c
  9758   002DB6  6ADA               	clrf	fsr2h,c
  9759   002DB8  2ADF               	incf	indf2,f,c
  9760   002DBA                     
  9761                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9762   002DBA  0E00               	movlw	0
  9763   002DBC  0100               	movlb	0	; () banked
  9764   002DBE  6FC1               	movwf	(_width+1)& (0+255),b
  9765   002DC0  0E00               	movlw	0
  9766   002DC2  6FC0               	movwf	_width& (0+255),b
  9767   002DC4  C0C0  F0C4         	movff	_width,_flags
  9768   002DC8                     
  9769                           ; BSR set to: 0
  9770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9771   002DC8  69C2               	setf	_prec& (0+255),b
  9772   002DCA  69C3               	setf	(_prec+1)& (0+255),b
  9773   002DCC                     
  9774                           ; BSR set to: 0
  9775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9776   002DCC  0E00               	movlw	0
  9777   002DCE  6E2C               	movwf	vfpfcnvrt@done^0,c
  9778                           
  9779                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9780   002DD0  EF11  F017         	goto	l5634
  9781   002DD4                     l5624:
  9782                           
  9783                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9784   002DD4  0100               	movlb	0	; () banked
  9785   002DD6  83C4               	bsf	_flags& (0+255),1,b
  9786   002DD8                     
  9787                           ; BSR set to: 0
  9788                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9789   002DD8  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9790   002DDA  6ED9               	movwf	fsr2l,c
  9791   002DDC  6ADA               	clrf	fsr2h,c
  9792   002DDE  2ADF               	incf	indf2,f,c
  9793                           
  9794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9795   002DE0  EF11  F017         	goto	l5634
  9796   002DE4                     l5628:
  9797                           
  9798                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9799   002DE4  0E01               	movlw	1
  9800   002DE6  6E2C               	movwf	vfpfcnvrt@done^0,c
  9801                           
  9802                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9803   002DE8  EF11  F017         	goto	l5634
  9804   002DEC                     l5632:
  9805   002DEC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9806   002DEE  6ED9               	movwf	fsr2l,c
  9807   002DF0  6ADA               	clrf	fsr2h,c
  9808   002DF2  CFDF FFF6          	movff	indf2,tblptrl
  9809   002DF6                     	if	1	;There is more than 1 active tblptr byte
  9810   002DF6  0E0E               	movlw	high __smallconst
  9811   002DF8  6EF7               	movwf	tblptrh,c
  9812   002DFA                     	endif
  9813   002DFA                     	if	0	;tblptru may be non-zero
  9814   002DFA                     	endif
  9815   002DFA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9816   002DFA  0E00               	movlw	low (__smallconst shr (0+16))
  9817   002DFC  6EF8               	movwf	tblptru,c
  9818   002DFE                     	endif
  9819   002DFE  0008               	tblrd		*
  9820   002E00  50F5               	movf	tablat,w,c
  9821   002E02  6E26               	movwf	??_vfpfcnvrt^0,c
  9822   002E04  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9823                           
  9824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9825                           ; Switch size 1, requested type "simple"
  9826                           ; Number of cases is 1, Range of values is 0 to 0
  9827                           ; switch strategies available:
  9828                           ; Name         Instructions Cycles
  9829                           ; simple_byte            4     3 (average)
  9830                           ;	Chosen strategy is simple_byte
  9831   002E06  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9832   002E08  0A00               	xorlw	0	; case 0
  9833   002E0A  B4D8               	btfsc	status,2,c
  9834   002E0C  EF0A  F017         	goto	l7262
  9835   002E10  EFF2  F016         	goto	l5628
  9836   002E14                     l7262:
  9837                           
  9838                           ; Switch size 1, requested type "simple"
  9839                           ; Number of cases is 1, Range of values is 48 to 48
  9840                           ; switch strategies available:
  9841                           ; Name         Instructions Cycles
  9842                           ; simple_byte            4     3 (average)
  9843                           ;	Chosen strategy is simple_byte
  9844   002E14  5026               	movf	??_vfpfcnvrt^0,w,c
  9845   002E16  0A30               	xorlw	48	; case 48
  9846   002E18  B4D8               	btfsc	status,2,c
  9847   002E1A  EFEA  F016         	goto	l5624
  9848   002E1E  EFF2  F016         	goto	l5628
  9849   002E22                     l5634:
  9850                           
  9851                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9852   002E22  502C               	movf	vfpfcnvrt@done^0,w,c
  9853   002E24  B4D8               	btfsc	status,2,c
  9854   002E26  EF17  F017         	goto	u5081
  9855   002E2A  EF19  F017         	goto	u5080
  9856   002E2E                     u5081:
  9857   002E2E  EFF6  F016         	goto	l5632
  9858   002E32                     u5080:
  9859   002E32                     
  9860                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9861   002E32  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9862   002E36  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9863   002E3A  EC58  F01D         	call	_read_prec_or_width	;wreg free
  9864   002E3E  C008  F0C0         	movff	?_read_prec_or_width,_width
  9865   002E42  C009  F0C1         	movff	?_read_prec_or_width+1,_width+1
  9866   002E46                     
  9867                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9868   002E46  0100               	movlb	0	; () banked
  9869   002E48  BFC1               	btfsc	(_width+1)& (0+255),7,b
  9870   002E4A  EF2B  F017         	goto	u5090
  9871   002E4E  EF29  F017         	goto	u5091
  9872   002E52                     u5091:
  9873   002E52  EF30  F017         	goto	l5642
  9874   002E56                     u5090:
  9875   002E56                     
  9876                           ; BSR set to: 0
  9877                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9878   002E56  81C4               	bsf	_flags& (0+255),0,b
  9879                           
  9880                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9881   002E58  6DC0               	negf	_width& (0+255),b
  9882   002E5A  1FC1               	comf	(_width+1)& (0+255),f,b
  9883   002E5C  B0D8               	btfsc	status,0,c
  9884   002E5E  2BC1               	incf	(_width+1)& (0+255),f,b
  9885   002E60                     l5642:
  9886                           
  9887                           ; BSR set to: 0
  9888                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9889   002E60  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9890   002E62  6ED9               	movwf	fsr2l,c
  9891   002E64  6ADA               	clrf	fsr2h,c
  9892   002E66  50DF               	movf	indf2,w,c
  9893   002E68  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9894   002E6A                     
  9895                           ; BSR set to: 0
  9896                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9897   002E6A  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9898   002E6E                     	if	1	;There is more than 1 active tblptr byte
  9899   002E6E  0E0E               	movlw	high __smallconst
  9900   002E70  6EF7               	movwf	tblptrh,c
  9901   002E72                     	endif
  9902   002E72                     	if	0	;tblptru may be non-zero
  9903   002E72                     	endif
  9904   002E72                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9905   002E72  0E00               	movlw	low (__smallconst shr (0+16))
  9906   002E74  6EF8               	movwf	tblptru,c
  9907   002E76                     	endif
  9908   002E76  0008               	tblrd		*
  9909   002E78  50F5               	movf	tablat,w,c
  9910   002E7A  0A64               	xorlw	100
  9911   002E7C  B4D8               	btfsc	status,2,c
  9912   002E7E  EF43  F017         	goto	u5101
  9913   002E82  EF45  F017         	goto	u5100
  9914   002E86                     u5101:
  9915   002E86  EF55  F017         	goto	l5648
  9916   002E8A                     u5100:
  9917   002E8A                     
  9918                           ; BSR set to: 0
  9919   002E8A  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9920   002E8E                     	if	1	;There is more than 1 active tblptr byte
  9921   002E8E  0E0E               	movlw	high __smallconst
  9922   002E90  6EF7               	movwf	tblptrh,c
  9923   002E92                     	endif
  9924   002E92                     	if	0	;tblptru may be non-zero
  9925   002E92                     	endif
  9926   002E92                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9927   002E92  0E00               	movlw	low (__smallconst shr (0+16))
  9928   002E94  6EF8               	movwf	tblptru,c
  9929   002E96                     	endif
  9930   002E96  0008               	tblrd		*
  9931   002E98  50F5               	movf	tablat,w,c
  9932   002E9A  0A69               	xorlw	105
  9933   002E9C  A4D8               	btfss	status,2,c
  9934   002E9E  EF53  F017         	goto	u5111
  9935   002EA2  EF55  F017         	goto	u5110
  9936   002EA6                     u5111:
  9937   002EA6  EF70  F017         	goto	l5656
  9938   002EAA                     u5110:
  9939   002EAA                     l5648:
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9943   002EAA  5025               	movf	vfpfcnvrt@ap^0,w,c
  9944   002EAC  6ED9               	movwf	fsr2l,c
  9945   002EAE  6ADA               	clrf	fsr2h,c
  9946   002EB0  0E02               	movlw	2
  9947   002EB2  26DF               	addwf	indf2,f,c
  9948   002EB4  5CDF               	subwf	indf2,w,c
  9949   002EB6  6ED9               	movwf	fsr2l,c
  9950   002EB8  6ADA               	clrf	fsr2h,c
  9951   002EBA  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9952   002EBE  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9953   002EC2                     
  9954                           ; BSR set to: 0
  9955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9956   002EC2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9957   002EC4  6ED9               	movwf	fsr2l,c
  9958   002EC6  6ADA               	clrf	fsr2h,c
  9959   002EC8  282D               	incf	vfpfcnvrt@cp^0,w,c
  9960   002ECA  6EDF               	movwf	indf2,c
  9961   002ECC                     
  9962                           ; BSR set to: 0
  9963                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9964   002ECC  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9965   002ED0  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9966   002ED4  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9967   002ED8  EC8A  F017         	call	_dtoa	;wreg free
  9968   002EDC  EF89  F017         	goto	l1474
  9969   002EE0                     l5656:
  9970                           
  9971                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9972   002EE0  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9973   002EE2  6ED9               	movwf	fsr2l,c
  9974   002EE4  6ADA               	clrf	fsr2h,c
  9975   002EE6  2ADF               	incf	indf2,f,c
  9976   002EE8  EF89  F017         	goto	l1474
  9977   002EEC                     l5660:
  9978                           
  9979                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9980   002EEC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9981   002EEE  6ED9               	movwf	fsr2l,c
  9982   002EF0  6ADA               	clrf	fsr2h,c
  9983   002EF2  CFDF FFF6          	movff	indf2,tblptrl
  9984   002EF6                     	if	1	;There is more than 1 active tblptr byte
  9985   002EF6  0E0E               	movlw	high __smallconst
  9986   002EF8  6EF7               	movwf	tblptrh,c
  9987   002EFA                     	endif
  9988   002EFA                     	if	0	;tblptru may be non-zero
  9989   002EFA                     	endif
  9990   002EFA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9991   002EFA  0E00               	movlw	low (__smallconst shr (0+16))
  9992   002EFC  6EF8               	movwf	tblptru,c
  9993   002EFE                     	endif
  9994   002EFE  0008               	tblrd		*
  9995   002F00  50F5               	movf	tablat,w,c
  9996   002F02  6E02               	movwf	fputc@c^0,c
  9997   002F04  6A03               	clrf	(fputc@c+1)^0,c
  9998   002F06  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9999   002F0A  EC04  F01E         	call	_fputc	;wreg free
 10000   002F0E  EF70  F017         	goto	l5656
 10001   002F12                     l1474:
 10002   002F12  0012               	return		;funcret
 10003   002F14                     __end_of_vfpfcnvrt:
 10004                           	callstack 0
 10005                           
 10006 ;; *************** function _read_prec_or_width *****************
 10007 ;; Defined at:
 10008 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10011 ;;		 -> vfprintf@cfmt(1), 
 10012 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10013 ;;		 -> sprintf@ap(1), 
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;  c               1    9[COMRAM] unsigned char 
 10016 ;;  n               2   10[COMRAM] int 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  2    7[COMRAM] int 
 10019 ;; Registers used:
 10020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10027 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10029 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10030 ;;Total ram usage:        5 bytes
 10031 ;; Hardware stack levels used: 1
 10032 ;; Hardware stack levels required when called: 2
 10033 ;; This function calls:
 10034 ;;		___wmul
 10035 ;; This function is called by:
 10036 ;;		_vfpfcnvrt
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text52
 10041   003AB0                     __ptext52:
 10042                           	callstack 0
 10043   003AB0                     _read_prec_or_width:
 10044                           	callstack 24
 10045   003AB0                     
 10046                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10047   003AB0  0E00               	movlw	0
 10048   003AB2  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10049   003AB4  0E00               	movlw	0
 10050   003AB6  6E0B               	movwf	read_prec_or_width@n^0,c
 10051   003AB8                     
 10052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10053   003AB8  5008               	movf	read_prec_or_width@fmt^0,w,c
 10054   003ABA  6ED9               	movwf	fsr2l,c
 10055   003ABC  6ADA               	clrf	fsr2h,c
 10056   003ABE  CFDF FFF6          	movff	indf2,tblptrl
 10057   003AC2                     	if	1	;There is more than 1 active tblptr byte
 10058   003AC2  0E0E               	movlw	high __smallconst
 10059   003AC4  6EF7               	movwf	tblptrh,c
 10060   003AC6                     	endif
 10061   003AC6                     	if	0	;tblptru may be non-zero
 10062   003AC6                     	endif
 10063   003AC6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10064   003AC6  0E00               	movlw	low (__smallconst shr (0+16))
 10065   003AC8  6EF8               	movwf	tblptru,c
 10066   003ACA                     	endif
 10067   003ACA  0008               	tblrd		*
 10068   003ACC  50F5               	movf	tablat,w,c
 10069   003ACE  0A2A               	xorlw	42
 10070   003AD0  A4D8               	btfss	status,2,c
 10071   003AD2  EF6D  F01D         	goto	u5031
 10072   003AD6  EF6F  F01D         	goto	u5030
 10073   003ADA                     u5031:
 10074   003ADA  EF95  F01D         	goto	l5596
 10075   003ADE                     u5030:
 10076   003ADE                     
 10077                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10078   003ADE  5008               	movf	read_prec_or_width@fmt^0,w,c
 10079   003AE0  6ED9               	movwf	fsr2l,c
 10080   003AE2  6ADA               	clrf	fsr2h,c
 10081   003AE4  2ADF               	incf	indf2,f,c
 10082   003AE6                     
 10083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10084   003AE6  5009               	movf	read_prec_or_width@ap^0,w,c
 10085   003AE8  6ED9               	movwf	fsr2l,c
 10086   003AEA  6ADA               	clrf	fsr2h,c
 10087   003AEC  0E02               	movlw	2
 10088   003AEE  26DF               	addwf	indf2,f,c
 10089   003AF0  5CDF               	subwf	indf2,w,c
 10090   003AF2  6ED9               	movwf	fsr2l,c
 10091   003AF4  6ADA               	clrf	fsr2h,c
 10092   003AF6  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10093   003AFA  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10094                           
 10095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10096   003AFE  EFAA  F01D         	goto	l1455
 10097   003B02                     l5592:
 10098                           
 10099                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10100   003B02  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10101   003B06  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10102   003B0A  0E00               	movlw	0
 10103   003B0C  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10104   003B0E  0E0A               	movlw	10
 10105   003B10  6E04               	movwf	___wmul@multiplicand^0,c
 10106   003B12  EC19  F024         	call	___wmul	;wreg free
 10107   003B16  500A               	movf	read_prec_or_width@c^0,w,c
 10108   003B18  2402               	addwf	?___wmul^0,w,c
 10109   003B1A  6E0B               	movwf	read_prec_or_width@n^0,c
 10110   003B1C  0E00               	movlw	0
 10111   003B1E  2003               	addwfc	(?___wmul+1)^0,w,c
 10112   003B20  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10113   003B22                     
 10114                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10115   003B22  5008               	movf	read_prec_or_width@fmt^0,w,c
 10116   003B24  6ED9               	movwf	fsr2l,c
 10117   003B26  6ADA               	clrf	fsr2h,c
 10118   003B28  2ADF               	incf	indf2,f,c
 10119   003B2A                     l5596:
 10120                           
 10121                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10122   003B2A  5008               	movf	read_prec_or_width@fmt^0,w,c
 10123   003B2C  6ED9               	movwf	fsr2l,c
 10124   003B2E  6ADA               	clrf	fsr2h,c
 10125   003B30  CFDF FFF6          	movff	indf2,tblptrl
 10126   003B34                     	if	1	;There is more than 1 active tblptr byte
 10127   003B34  0E0E               	movlw	high __smallconst
 10128   003B36  6EF7               	movwf	tblptrh,c
 10129   003B38                     	endif
 10130   003B38                     	if	0	;tblptru may be non-zero
 10131   003B38                     	endif
 10132   003B38                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10133   003B38  0E00               	movlw	low (__smallconst shr (0+16))
 10134   003B3A  6EF8               	movwf	tblptru,c
 10135   003B3C                     	endif
 10136   003B3C  0008               	tblrd		*
 10137   003B3E  50F5               	movf	tablat,w,c
 10138   003B40  0FD0               	addlw	208
 10139   003B42  6E0A               	movwf	read_prec_or_width@c^0,c
 10140   003B44  0E09               	movlw	9
 10141   003B46  640A               	cpfsgt	read_prec_or_width@c^0,c
 10142   003B48  EFA8  F01D         	goto	u5041
 10143   003B4C  EFAA  F01D         	goto	u5040
 10144   003B50                     u5041:
 10145   003B50  EF81  F01D         	goto	l5592
 10146   003B54                     u5040:
 10147   003B54                     l1455:
 10148                           
 10149                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10150   003B54  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10151   003B58  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10152   003B5C  0012               	return		;funcret
 10153   003B5E                     __end_of_read_prec_or_width:
 10154                           	callstack 0
 10155                           
 10156 ;; *************** function ___wmul *****************
 10157 ;; Defined at:
 10158 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;  multiplier      2    1[COMRAM] unsigned int 
 10161 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10162 ;; Auto vars:     Size  Location     Type
 10163 ;;  product         2    5[COMRAM] unsigned int 
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  2    1[COMRAM] unsigned int 
 10166 ;; Registers used:
 10167 ;;		wreg, status,2, status,0, prodl, prodh
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10174 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10176 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10177 ;;Total ram usage:        6 bytes
 10178 ;; Hardware stack levels used: 1
 10179 ;; Hardware stack levels required when called: 1
 10180 ;; This function calls:
 10181 ;;		Nothing
 10182 ;; This function is called by:
 10183 ;;		_setMotorPWM
 10184 ;;		_read_prec_or_width
 10185 ;;		_ADC2String
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           	psect	text53
 10190   004832                     __ptext53:
 10191                           	callstack 0
 10192   004832                     ___wmul:
 10193                           	callstack 27
 10194   004832  5002               	movf	___wmul@multiplier^0,w,c
 10195   004834  0204               	mulwf	___wmul@multiplicand^0,c
 10196   004836  CFF3 F006          	movff	prodl,___wmul@product
 10197   00483A  CFF4 F007          	movff	prodh,___wmul@product+1
 10198   00483E  5002               	movf	___wmul@multiplier^0,w,c
 10199   004840  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10200   004842  50F3               	movf	243,w,c
 10201   004844  2607               	addwf	(___wmul@product+1)^0,f,c
 10202   004846  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10203   004848  0204               	mulwf	___wmul@multiplicand^0,c
 10204   00484A  50F3               	movf	243,w,c
 10205   00484C  2607               	addwf	(___wmul@product+1)^0,f,c
 10206   00484E  C006  F002         	movff	___wmul@product,?___wmul
 10207   004852  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10208   004856  0012               	return		;funcret
 10209   004858                     __end_of___wmul:
 10210                           	callstack 0
 10211                           
 10212 ;; *************** function _dtoa *****************
 10213 ;; Defined at:
 10214 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10217 ;;		 -> sprintf@f(12), 
 10218 ;;  d               2   24[COMRAM] int 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  i               2   32[COMRAM] int 
 10221 ;;  w               2   29[COMRAM] int 
 10222 ;;  s               1   31[COMRAM] unsigned char 
 10223 ;;  p               1   28[COMRAM] _Bool 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      void 
 10226 ;; Registers used:
 10227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10233 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10234 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10236 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10237 ;;Total ram usage:       11 bytes
 10238 ;; Hardware stack levels used: 1
 10239 ;; Hardware stack levels required when called: 5
 10240 ;; This function calls:
 10241 ;;		___awdiv
 10242 ;;		___awmod
 10243 ;;		_abs
 10244 ;;		_pad
 10245 ;; This function is called by:
 10246 ;;		_vfpfcnvrt
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text54
 10251   002F14                     __ptext54:
 10252                           	callstack 0
 10253   002F14                     _dtoa:
 10254                           	callstack 21
 10255   002F14                     
 10256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10257   002F14  0E01               	movlw	1
 10258   002F16  6E1D               	movwf	dtoa@p^0,c
 10259   002F18                     
 10260                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10261   002F18  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10262   002F1A  EF91  F017         	goto	u4931
 10263   002F1E  EF94  F017         	goto	u4930
 10264   002F22                     u4931:
 10265   002F22  0E01               	movlw	1
 10266   002F24  EF95  F017         	goto	u4940
 10267   002F28                     u4930:
 10268   002F28  0E00               	movlw	0
 10269   002F2A                     u4940:
 10270   002F2A  6E20               	movwf	dtoa@s^0,c
 10271   002F2C                     
 10272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10273   002F2C  C0C0  F01E         	movff	_width,dtoa@w
 10274   002F30  C0C1  F01F         	movff	_width+1,dtoa@w+1
 10275   002F34                     
 10276                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10277   002F34  5020               	movf	dtoa@s^0,w,c
 10278   002F36  B4D8               	btfsc	status,2,c
 10279   002F38  EFA0  F017         	goto	u4951
 10280   002F3C  EFA2  F017         	goto	u4950
 10281   002F40                     u4951:
 10282   002F40  EFB9  F017         	goto	l1438
 10283   002F44                     u4950:
 10284   002F44                     
 10285                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10286   002F44  061E               	decf	dtoa@w^0,f,c
 10287   002F46  A0D8               	btfss	status,0,c
 10288   002F48  061F               	decf	(dtoa@w+1)^0,f,c
 10289   002F4A                     
 10290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10291   002F4A  5020               	movf	dtoa@s^0,w,c
 10292   002F4C  A4D8               	btfss	status,2,c
 10293   002F4E  EFAB  F017         	goto	u4961
 10294   002F52  EFAD  F017         	goto	u4960
 10295   002F56                     u4961:
 10296   002F56  EFB3  F017         	goto	l5548
 10297   002F5A                     u4960:
 10298   002F5A  0E00               	movlw	0
 10299   002F5C  6E1C               	movwf	(_dtoa$3073+1)^0,c
 10300   002F5E  0E2B               	movlw	43
 10301   002F60  6E1B               	movwf	_dtoa$3073^0,c
 10302   002F62  EFB7  F017         	goto	l5550
 10303   002F66                     l5548:
 10304   002F66  0E00               	movlw	0
 10305   002F68  6E1C               	movwf	(_dtoa$3073+1)^0,c
 10306   002F6A  0E2D               	movlw	45
 10307   002F6C  6E1B               	movwf	_dtoa$3073^0,c
 10308   002F6E                     l5550:
 10309   002F6E  C01B  F020         	movff	_dtoa$3073,dtoa@s
 10310   002F72                     l1438:
 10311                           
 10312                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10313   002F72  0E00               	movlw	0
 10314   002F74  6E22               	movwf	(dtoa@i+1)^0,c
 10315   002F76  0E1F               	movlw	31
 10316   002F78  6E21               	movwf	dtoa@i^0,c
 10317   002F7A                     
 10318                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10319   002F7A  0E00               	movlw	0
 10320   002F7C  0101               	movlb	1	; () banked
 10321   002F7E  6FA1               	movwf	(_dbuf+31)& (0+255),b
 10322                           
 10323                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10324   002F80  EFF1  F017         	goto	l5564
 10325   002F84                     l5554:
 10326                           
 10327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10328   002F84  0621               	decf	dtoa@i^0,f,c
 10329   002F86  A0D8               	btfss	status,0,c
 10330   002F88  0622               	decf	(dtoa@i+1)^0,f,c
 10331   002F8A                     
 10332                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10333   002F8A  0E82               	movlw	low _dbuf
 10334   002F8C  2421               	addwf	dtoa@i^0,w,c
 10335   002F8E  6ED9               	movwf	fsr2l,c
 10336   002F90  0E01               	movlw	high _dbuf
 10337   002F92  2022               	addwfc	(dtoa@i+1)^0,w,c
 10338   002F94  6EDA               	movwf	fsr2h,c
 10339   002F96  C019  F002         	movff	dtoa@d,___awmod@dividend
 10340   002F9A  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10341   002F9E  0E00               	movlw	0
 10342   002FA0  6E05               	movwf	(___awmod@divisor+1)^0,c
 10343   002FA2  0E0A               	movlw	10
 10344   002FA4  6E04               	movwf	___awmod@divisor^0,c
 10345   002FA6  EC00  F01D         	call	___awmod	;wreg free
 10346   002FAA  C002  F008         	movff	?___awmod,abs@a
 10347   002FAE  C003  F009         	movff	?___awmod+1,abs@a+1
 10348   002FB2  EC31  F022         	call	_abs	;wreg free
 10349   002FB6  5008               	movf	?_abs^0,w,c
 10350   002FB8  0F30               	addlw	48
 10351   002FBA  6EDF               	movwf	indf2,c
 10352   002FBC                     
 10353                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10354   002FBC  0E00               	movlw	0
 10355   002FBE  6E1D               	movwf	dtoa@p^0,c
 10356   002FC0                     
 10357                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10358   002FC0  061E               	decf	dtoa@w^0,f,c
 10359   002FC2  A0D8               	btfss	status,0,c
 10360   002FC4  061F               	decf	(dtoa@w+1)^0,f,c
 10361   002FC6                     
 10362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10363   002FC6  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10364   002FCA  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10365   002FCE  0E00               	movlw	0
 10366   002FD0  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10367   002FD2  0E0A               	movlw	10
 10368   002FD4  6E04               	movwf	___awdiv@divisor^0,c
 10369   002FD6  EC9E  F01C         	call	___awdiv	;wreg free
 10370   002FDA  C002  F019         	movff	?___awdiv,dtoa@d
 10371   002FDE  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10372   002FE2                     l5564:
 10373                           
 10374                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10375   002FE2  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10376   002FE4  EFFC  F017         	goto	u4971
 10377   002FE8  5022               	movf	(dtoa@i+1)^0,w,c
 10378   002FEA  E108               	bnz	u4970
 10379   002FEC  0421               	decf	dtoa@i^0,w,c
 10380   002FEE  A0D8               	btfss	status,0,c
 10381   002FF0  EFFC  F017         	goto	u4971
 10382   002FF4  EFFE  F017         	goto	u4970
 10383   002FF8                     u4971:
 10384   002FF8  EF24  F018         	goto	l5574
 10385   002FFC                     u4970:
 10386   002FFC  5019               	movf	dtoa@d^0,w,c
 10387   002FFE  101A               	iorwf	(dtoa@d+1)^0,w,c
 10388   003000  A4D8               	btfss	status,2,c
 10389   003002  EF05  F018         	goto	u4981
 10390   003006  EF07  F018         	goto	u4980
 10391   00300A                     u4981:
 10392   00300A  EFC2  F017         	goto	l5554
 10393   00300E                     u4980:
 10394   00300E  501D               	movf	dtoa@p^0,w,c
 10395   003010  A4D8               	btfss	status,2,c
 10396   003012  EF0D  F018         	goto	u4991
 10397   003016  EF0F  F018         	goto	u4990
 10398   00301A                     u4991:
 10399   00301A  EFC2  F017         	goto	l5554
 10400   00301E                     u4990:
 10401   00301E  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10402   003020  EF1A  F018         	goto	u5001
 10403   003024  501F               	movf	(dtoa@w+1)^0,w,c
 10404   003026  E108               	bnz	u5000
 10405   003028  041E               	decf	dtoa@w^0,w,c
 10406   00302A  A0D8               	btfss	status,0,c
 10407   00302C  EF1A  F018         	goto	u5001
 10408   003030  EF1C  F018         	goto	u5000
 10409   003034                     u5001:
 10410   003034  EF24  F018         	goto	l5574
 10411   003038                     u5000:
 10412   003038  0100               	movlb	0	; () banked
 10413   00303A  B3C4               	btfsc	_flags& (0+255),1,b
 10414   00303C  EF22  F018         	goto	u5011
 10415   003040  EF24  F018         	goto	u5010
 10416   003044                     u5011:
 10417   003044  EFC2  F017         	goto	l5554
 10418   003048                     u5010:
 10419   003048                     l5574:
 10420                           
 10421                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10422   003048  5020               	movf	dtoa@s^0,w,c
 10423   00304A  B4D8               	btfsc	status,2,c
 10424   00304C  EF2A  F018         	goto	u5021
 10425   003050  EF2C  F018         	goto	u5020
 10426   003054                     u5021:
 10427   003054  EF37  F018         	goto	l5580
 10428   003058                     u5020:
 10429   003058                     
 10430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10431   003058  0621               	decf	dtoa@i^0,f,c
 10432   00305A  A0D8               	btfss	status,0,c
 10433   00305C  0622               	decf	(dtoa@i+1)^0,f,c
 10434   00305E                     
 10435                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10436   00305E  0E82               	movlw	low _dbuf
 10437   003060  2421               	addwf	dtoa@i^0,w,c
 10438   003062  6ED9               	movwf	fsr2l,c
 10439   003064  0E01               	movlw	high _dbuf
 10440   003066  2022               	addwfc	(dtoa@i+1)^0,w,c
 10441   003068  6EDA               	movwf	fsr2h,c
 10442   00306A  C020  FFDF         	movff	dtoa@s,indf2
 10443   00306E                     l5580:
 10444                           
 10445                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10446   00306E  C018  F010         	movff	dtoa@fp,pad@fp
 10447   003072  0E82               	movlw	low _dbuf
 10448   003074  2421               	addwf	dtoa@i^0,w,c
 10449   003076  6E11               	movwf	pad@buf^0,c
 10450   003078  0E01               	movlw	high _dbuf
 10451   00307A  2022               	addwfc	(dtoa@i+1)^0,w,c
 10452   00307C  6E12               	movwf	(pad@buf+1)^0,c
 10453   00307E  C01E  F013         	movff	dtoa@w,pad@p
 10454   003082  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10455   003086  EC59  F01E         	call	_pad	;wreg free
 10456   00308A  0012               	return		;funcret
 10457   00308C                     __end_of_dtoa:
 10458                           	callstack 0
 10459                           
 10460 ;; *************** function _pad *****************
 10461 ;; Defined at:
 10462 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10463 ;; Parameters:    Size  Location     Type
 10464 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10465 ;;		 -> sprintf@f(12), 
 10466 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10467 ;;		 -> dbuf(32), 
 10468 ;;  p               2   18[COMRAM] int 
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;  i               2   21[COMRAM] int 
 10471 ;; Return value:  Size  Location     Type
 10472 ;;                  1    wreg      void 
 10473 ;; Registers used:
 10474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/0
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10480 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10483 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10484 ;;Total ram usage:        8 bytes
 10485 ;; Hardware stack levels used: 1
 10486 ;; Hardware stack levels required when called: 4
 10487 ;; This function calls:
 10488 ;;		_fputc
 10489 ;;		_fputs
 10490 ;; This function is called by:
 10491 ;;		_dtoa
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text55
 10496   003CB2                     __ptext55:
 10497                           	callstack 0
 10498   003CB2                     _pad:
 10499                           	callstack 21
 10500   003CB2                     
 10501                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10502   003CB2  0100               	movlb	0	; () banked
 10503   003CB4  A1C4               	btfss	_flags& (0+255),0,b
 10504   003CB6  EF5F  F01E         	goto	u4851
 10505   003CBA  EF61  F01E         	goto	u4850
 10506   003CBE                     u4851:
 10507   003CBE  EF69  F01E         	goto	l5496
 10508   003CC2                     u4850:
 10509   003CC2                     
 10510                           ; BSR set to: 0
 10511                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10512   003CC2  C011  F00A         	movff	pad@buf,fputs@s
 10513   003CC6  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10514   003CCA  C010  F00C         	movff	pad@fp,fputs@fp
 10515   003CCE  ECA3  F021         	call	_fputs	;wreg free
 10516   003CD2                     l5496:
 10517                           
 10518                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10519   003CD2  BE14               	btfsc	(pad@p+1)^0,7,c
 10520   003CD4  EF70  F01E         	goto	u4860
 10521   003CD8  EF6E  F01E         	goto	u4861
 10522   003CDC                     u4861:
 10523   003CDC  EF74  F01E         	goto	l1430
 10524   003CE0                     u4860:
 10525   003CE0                     
 10526                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10527   003CE0  0E00               	movlw	0
 10528   003CE2  6E14               	movwf	(pad@p+1)^0,c
 10529   003CE4  0E00               	movlw	0
 10530   003CE6  6E13               	movwf	pad@p^0,c
 10531   003CE8                     l1430:
 10532                           
 10533                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10534   003CE8  0E00               	movlw	0
 10535   003CEA  6E17               	movwf	(pad@i+1)^0,c
 10536   003CEC  0E00               	movlw	0
 10537   003CEE  6E16               	movwf	pad@i^0,c
 10538                           
 10539                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10540   003CF0  EF84  F01E         	goto	l5504
 10541   003CF4                     l5500:
 10542                           
 10543                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10544   003CF4  0E00               	movlw	0
 10545   003CF6  6E03               	movwf	(fputc@c+1)^0,c
 10546   003CF8  0E20               	movlw	32
 10547   003CFA  6E02               	movwf	fputc@c^0,c
 10548   003CFC  C010  F004         	movff	pad@fp,fputc@fp
 10549   003D00  EC04  F01E         	call	_fputc	;wreg free
 10550   003D04                     
 10551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10552   003D04  4A16               	infsnz	pad@i^0,f,c
 10553   003D06  2A17               	incf	(pad@i+1)^0,f,c
 10554   003D08                     l5504:
 10555                           
 10556                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10557   003D08  5013               	movf	pad@p^0,w,c
 10558   003D0A  5C16               	subwf	pad@i^0,w,c
 10559   003D0C  5017               	movf	(pad@i+1)^0,w,c
 10560   003D0E  0A80               	xorlw	128
 10561   003D10  6E15               	movwf	??_pad^0,c
 10562   003D12  5014               	movf	(pad@p+1)^0,w,c
 10563   003D14  0A80               	xorlw	128
 10564   003D16  5815               	subwfb	??_pad^0,w,c
 10565   003D18  A0D8               	btfss	status,0,c
 10566   003D1A  EF91  F01E         	goto	u4871
 10567   003D1E  EF93  F01E         	goto	u4870
 10568   003D22                     u4871:
 10569   003D22  EF7A  F01E         	goto	l5500
 10570   003D26                     u4870:
 10571   003D26                     
 10572                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10573   003D26  0100               	movlb	0	; () banked
 10574   003D28  B1C4               	btfsc	_flags& (0+255),0,b
 10575   003D2A  EF99  F01E         	goto	u4881
 10576   003D2E  EF9B  F01E         	goto	u4880
 10577   003D32                     u4881:
 10578   003D32  EFA3  F01E         	goto	l1435
 10579   003D36                     u4880:
 10580   003D36                     
 10581                           ; BSR set to: 0
 10582                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10583   003D36  C011  F00A         	movff	pad@buf,fputs@s
 10584   003D3A  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10585   003D3E  C010  F00C         	movff	pad@fp,fputs@fp
 10586   003D42  ECA3  F021         	call	_fputs	;wreg free
 10587   003D46                     l1435:
 10588   003D46  0012               	return		;funcret
 10589   003D48                     __end_of_pad:
 10590                           	callstack 0
 10591                           
 10592 ;; *************** function _fputs *****************
 10593 ;; Defined at:
 10594 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10597 ;;		 -> dbuf(32), 
 10598 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10599 ;;		 -> sprintf@f(12), 
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  i               2   13[COMRAM] int 
 10602 ;;  c               1   12[COMRAM] unsigned char 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  2    9[COMRAM] int 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10612 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10613 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10616 ;;Total ram usage:        6 bytes
 10617 ;; Hardware stack levels used: 1
 10618 ;; Hardware stack levels required when called: 3
 10619 ;; This function calls:
 10620 ;;		_fputc
 10621 ;; This function is called by:
 10622 ;;		_pad
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text56
 10627   004346                     __ptext56:
 10628                           	callstack 0
 10629   004346                     _fputs:
 10630                           	callstack 21
 10631   004346  0E00               	movlw	0
 10632   004348  6E0F               	movwf	(fputs@i+1)^0,c
 10633   00434A  0E00               	movlw	0
 10634   00434C  6E0E               	movwf	fputs@i^0,c
 10635   00434E  EFB2  F021         	goto	l5404
 10636   004352                     l5400:
 10637   004352  C00D  F002         	movff	fputs@c,fputc@c
 10638   004356  6A03               	clrf	(fputc@c+1)^0,c
 10639   004358  C00C  F004         	movff	fputs@fp,fputc@fp
 10640   00435C  EC04  F01E         	call	_fputc	;wreg free
 10641   004360  4A0E               	infsnz	fputs@i^0,f,c
 10642   004362  2A0F               	incf	(fputs@i+1)^0,f,c
 10643   004364                     l5404:
 10644   004364  500E               	movf	fputs@i^0,w,c
 10645   004366  240A               	addwf	fputs@s^0,w,c
 10646   004368  6ED9               	movwf	fsr2l,c
 10647   00436A  500F               	movf	(fputs@i+1)^0,w,c
 10648   00436C  200B               	addwfc	(fputs@s+1)^0,w,c
 10649   00436E  6EDA               	movwf	fsr2h,c
 10650   004370  50DF               	movf	indf2,w,c
 10651   004372  6E0D               	movwf	fputs@c^0,c
 10652   004374  500D               	movf	fputs@c^0,w,c
 10653   004376  A4D8               	btfss	status,2,c
 10654   004378  EFC0  F021         	goto	u4721
 10655   00437C  EFC2  F021         	goto	u4720
 10656   004380                     u4721:
 10657   004380  EFA9  F021         	goto	l5400
 10658   004384                     u4720:
 10659   004384  0012               	return		;funcret
 10660   004386                     __end_of_fputs:
 10661                           	callstack 0
 10662                           
 10663 ;; *************** function _fputc *****************
 10664 ;; Defined at:
 10665 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  c               2    1[COMRAM] int 
 10668 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10669 ;;		 -> sprintf@f(12), 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;		None
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  2    1[COMRAM] int 
 10674 ;; Registers used:
 10675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10681 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10683 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10684 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10685 ;;Total ram usage:        8 bytes
 10686 ;; Hardware stack levels used: 1
 10687 ;; Hardware stack levels required when called: 2
 10688 ;; This function calls:
 10689 ;;		_putch
 10690 ;; This function is called by:
 10691 ;;		_pad
 10692 ;;		_vfpfcnvrt
 10693 ;;		_fputs
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           	psect	text57
 10698   003C08                     __ptext57:
 10699                           	callstack 0
 10700   003C08                     _fputc:
 10701                           	callstack 24
 10702   003C08  5004               	movf	fputc@fp^0,w,c
 10703   003C0A  B4D8               	btfsc	status,2,c
 10704   003C0C  EF0A  F01E         	goto	u4681
 10705   003C10  EF0C  F01E         	goto	u4680
 10706   003C14                     u4681:
 10707   003C14  EF14  F01E         	goto	l5388
 10708   003C18                     u4680:
 10709   003C18  5004               	movf	fputc@fp^0,w,c
 10710   003C1A  A4D8               	btfss	status,2,c
 10711   003C1C  EF12  F01E         	goto	u4691
 10712   003C20  EF14  F01E         	goto	u4690
 10713   003C24                     u4691:
 10714   003C24  EF19  F01E         	goto	l5390
 10715   003C28                     u4690:
 10716   003C28                     l5388:
 10717   003C28  5002               	movf	fputc@c^0,w,c
 10718   003C2A  EC89  F024         	call	_putch
 10719   003C2E  EF58  F01E         	goto	l1499
 10720   003C32                     l5390:
 10721   003C32  5004               	movf	fputc@fp^0,w,c
 10722   003C34  6ED9               	movwf	fsr2l,c
 10723   003C36  6ADA               	clrf	fsr2h,c
 10724   003C38  0E0A               	movlw	10
 10725   003C3A  26D9               	addwf	fsr2l,f,c
 10726   003C3C  50DE               	movf	postinc2,w,c
 10727   003C3E  10DE               	iorwf	postinc2,w,c
 10728   003C40  B4D8               	btfsc	status,2,c
 10729   003C42  EF25  F01E         	goto	u4701
 10730   003C46  EF27  F01E         	goto	u4700
 10731   003C4A                     u4701:
 10732   003C4A  EF40  F01E         	goto	l5394
 10733   003C4E                     u4700:
 10734   003C4E  5004               	movf	fputc@fp^0,w,c
 10735   003C50  6ED9               	movwf	fsr2l,c
 10736   003C52  6ADA               	clrf	fsr2h,c
 10737   003C54  0E0A               	movlw	10
 10738   003C56  26D9               	addwf	fsr2l,f,c
 10739   003C58  5004               	movf	fputc@fp^0,w,c
 10740   003C5A  6EE1               	movwf	fsr1l,c
 10741   003C5C  6AE2               	clrf	fsr1h,c
 10742   003C5E  0E03               	movlw	3
 10743   003C60  26E1               	addwf	fsr1l,f,c
 10744   003C62  50DE               	movf	postinc2,w,c
 10745   003C64  5CE6               	subwf	postinc1,w,c
 10746   003C66  50E6               	movf	postinc1,w,c
 10747   003C68  0A80               	xorlw	128
 10748   003C6A  6E09               	movwf	(??_fputc+4)^0,c
 10749   003C6C  50DE               	movf	postinc2,w,c
 10750   003C6E  0A80               	xorlw	128
 10751   003C70  5809               	subwfb	(??_fputc+4)^0,w,c
 10752   003C72  B0D8               	btfsc	status,0,c
 10753   003C74  EF3E  F01E         	goto	u4711
 10754   003C78  EF40  F01E         	goto	u4710
 10755   003C7C                     u4711:
 10756   003C7C  EF58  F01E         	goto	l1499
 10757   003C80                     u4710:
 10758   003C80                     l5394:
 10759   003C80  5004               	movf	fputc@fp^0,w,c
 10760   003C82  6ED9               	movwf	fsr2l,c
 10761   003C84  6ADA               	clrf	fsr2h,c
 10762   003C86  0E03               	movlw	3
 10763   003C88  26D9               	addwf	fsr2l,f,c
 10764   003C8A  50DF               	movf	indf2,w,c
 10765   003C8C  6E05               	movwf	??_fputc^0,c
 10766   003C8E  5004               	movf	fputc@fp^0,w,c
 10767   003C90  6ED9               	movwf	fsr2l,c
 10768   003C92  6ADA               	clrf	fsr2h,c
 10769   003C94  50DF               	movf	indf2,w,c
 10770   003C96  2405               	addwf	??_fputc^0,w,c
 10771   003C98  6ED9               	movwf	fsr2l,c
 10772   003C9A  6ADA               	clrf	fsr2h,c
 10773   003C9C  C002  FFDF         	movff	fputc@c,indf2
 10774   003CA0  5004               	movf	fputc@fp^0,w,c
 10775   003CA2  6ED9               	movwf	fsr2l,c
 10776   003CA4  6ADA               	clrf	fsr2h,c
 10777   003CA6  0E03               	movlw	3
 10778   003CA8  26D9               	addwf	fsr2l,f,c
 10779   003CAA  2ADE               	incf	postinc2,f,c
 10780   003CAC  0E00               	movlw	0
 10781   003CAE  22DD               	addwfc	postdec2,f,c
 10782   003CB0                     l1499:
 10783   003CB0  0012               	return		;funcret
 10784   003CB2                     __end_of_fputc:
 10785                           	callstack 0
 10786                           
 10787 ;; *************** function _putch *****************
 10788 ;; Defined at:
 10789 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  c               1    wreg     unsigned char 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  c               1    0[COMRAM] unsigned char 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10807 ;;Total ram usage:        0 bytes
 10808 ;; Hardware stack levels used: 1
 10809 ;; Hardware stack levels required when called: 1
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_fputc
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text58
 10818   004912                     __ptext58:
 10819                           	callstack 0
 10820   004912                     _putch:
 10821                           	callstack 24
 10822   004912  0012               	return		;funcret
 10823   004914                     __end_of_putch:
 10824                           	callstack 0
 10825                           
 10826 ;; *************** function _abs *****************
 10827 ;; Defined at:
 10828 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  a               2    7[COMRAM] int 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  2    7[COMRAM] int 
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, status,0
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10845 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10846 ;;Total ram usage:        4 bytes
 10847 ;; Hardware stack levels used: 1
 10848 ;; Hardware stack levels required when called: 1
 10849 ;; This function calls:
 10850 ;;		Nothing
 10851 ;; This function is called by:
 10852 ;;		_dtoa
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text59
 10857   004462                     __ptext59:
 10858                           	callstack 0
 10859   004462                     _abs:
 10860                           	callstack 24
 10861   004462  BE09               	btfsc	(abs@a+1)^0,7,c
 10862   004464  EF36  F022         	goto	u4891
 10863   004468  EF38  F022         	goto	u4890
 10864   00446C                     u4891:
 10865   00446C  EF3E  F022         	goto	l1484
 10866   004470                     u4890:
 10867   004470  C008  F008         	movff	abs@a,?_abs
 10868   004474  C009  F009         	movff	abs@a+1,?_abs+1
 10869   004478  EF4A  F022         	goto	l1487
 10870   00447C                     l1484:
 10871   00447C  C008  F00A         	movff	abs@a,??_abs
 10872   004480  C009  F00B         	movff	abs@a+1,??_abs+1
 10873   004484  1E0A               	comf	??_abs^0,f,c
 10874   004486  1E0B               	comf	(??_abs+1)^0,f,c
 10875   004488  4A0A               	infsnz	??_abs^0,f,c
 10876   00448A  2A0B               	incf	(??_abs+1)^0,f,c
 10877   00448C  C00A  F008         	movff	??_abs,?_abs
 10878   004490  C00B  F009         	movff	??_abs+1,?_abs+1
 10879   004494                     l1487:
 10880   004494  0012               	return		;funcret
 10881   004496                     __end_of_abs:
 10882                           	callstack 0
 10883                           
 10884 ;; *************** function ___awmod *****************
 10885 ;; Defined at:
 10886 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;  dividend        2    1[COMRAM] int 
 10889 ;;  divisor         2    3[COMRAM] int 
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;  sign            1    6[COMRAM] unsigned char 
 10892 ;;  counter         1    5[COMRAM] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  2    1[COMRAM] int 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10905 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10906 ;;Total ram usage:        6 bytes
 10907 ;; Hardware stack levels used: 1
 10908 ;; Hardware stack levels required when called: 1
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		_dtoa
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           	psect	text60
 10917   003A00                     __ptext60:
 10918                           	callstack 0
 10919   003A00                     ___awmod:
 10920                           	callstack 24
 10921   003A00  0E00               	movlw	0
 10922   003A02  6E07               	movwf	___awmod@sign^0,c
 10923   003A04  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10924   003A06  EF09  F01D         	goto	u4790
 10925   003A0A  EF07  F01D         	goto	u4791
 10926   003A0E                     u4791:
 10927   003A0E  EF0F  F01D         	goto	l5464
 10928   003A12                     u4790:
 10929   003A12  6C02               	negf	___awmod@dividend^0,c
 10930   003A14  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10931   003A16  B0D8               	btfsc	status,0,c
 10932   003A18  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10933   003A1A  0E01               	movlw	1
 10934   003A1C  6E07               	movwf	___awmod@sign^0,c
 10935   003A1E                     l5464:
 10936   003A1E  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10937   003A20  EF16  F01D         	goto	u4800
 10938   003A24  EF14  F01D         	goto	u4801
 10939   003A28                     u4801:
 10940   003A28  EF1A  F01D         	goto	l5468
 10941   003A2C                     u4800:
 10942   003A2C  6C04               	negf	___awmod@divisor^0,c
 10943   003A2E  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10944   003A30  B0D8               	btfsc	status,0,c
 10945   003A32  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10946   003A34                     l5468:
 10947   003A34  5004               	movf	___awmod@divisor^0,w,c
 10948   003A36  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10949   003A38  B4D8               	btfsc	status,2,c
 10950   003A3A  EF21  F01D         	goto	u4811
 10951   003A3E  EF23  F01D         	goto	u4810
 10952   003A42                     u4811:
 10953   003A42  EF47  F01D         	goto	l5484
 10954   003A46                     u4810:
 10955   003A46  0E01               	movlw	1
 10956   003A48  6E06               	movwf	___awmod@counter^0,c
 10957   003A4A  EF2B  F01D         	goto	l5474
 10958   003A4E                     l5472:
 10959   003A4E  90D8               	bcf	status,0,c
 10960   003A50  3604               	rlcf	___awmod@divisor^0,f,c
 10961   003A52  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10962   003A54  2A06               	incf	___awmod@counter^0,f,c
 10963   003A56                     l5474:
 10964   003A56  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10965   003A58  EF30  F01D         	goto	u4821
 10966   003A5C  EF32  F01D         	goto	u4820
 10967   003A60                     u4821:
 10968   003A60  EF27  F01D         	goto	l5472
 10969   003A64                     u4820:
 10970   003A64                     l5476:
 10971   003A64  5004               	movf	___awmod@divisor^0,w,c
 10972   003A66  5C02               	subwf	___awmod@dividend^0,w,c
 10973   003A68  5005               	movf	(___awmod@divisor+1)^0,w,c
 10974   003A6A  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10975   003A6C  A0D8               	btfss	status,0,c
 10976   003A6E  EF3B  F01D         	goto	u4831
 10977   003A72  EF3D  F01D         	goto	u4830
 10978   003A76                     u4831:
 10979   003A76  EF41  F01D         	goto	l5480
 10980   003A7A                     u4830:
 10981   003A7A  5004               	movf	___awmod@divisor^0,w,c
 10982   003A7C  5E02               	subwf	___awmod@dividend^0,f,c
 10983   003A7E  5005               	movf	(___awmod@divisor+1)^0,w,c
 10984   003A80  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10985   003A82                     l5480:
 10986   003A82  90D8               	bcf	status,0,c
 10987   003A84  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10988   003A86  3204               	rrcf	___awmod@divisor^0,f,c
 10989   003A88  2E06               	decfsz	___awmod@counter^0,f,c
 10990   003A8A  EF32  F01D         	goto	l5476
 10991   003A8E                     l5484:
 10992   003A8E  5007               	movf	___awmod@sign^0,w,c
 10993   003A90  B4D8               	btfsc	status,2,c
 10994   003A92  EF4D  F01D         	goto	u4841
 10995   003A96  EF4F  F01D         	goto	u4840
 10996   003A9A                     u4841:
 10997   003A9A  EF53  F01D         	goto	l5488
 10998   003A9E                     u4840:
 10999   003A9E  6C02               	negf	___awmod@dividend^0,c
 11000   003AA0  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11001   003AA2  B0D8               	btfsc	status,0,c
 11002   003AA4  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11003   003AA6                     l5488:
 11004   003AA6  C002  F002         	movff	___awmod@dividend,?___awmod
 11005   003AAA  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11006   003AAE  0012               	return		;funcret
 11007   003AB0                     __end_of___awmod:
 11008                           	callstack 0
 11009                           
 11010 ;; *************** function ___awdiv *****************
 11011 ;; Defined at:
 11012 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  dividend        2    1[COMRAM] int 
 11015 ;;  divisor         2    3[COMRAM] int 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  quotient        2    7[COMRAM] int 
 11018 ;;  sign            1    6[COMRAM] unsigned char 
 11019 ;;  counter         1    5[COMRAM] unsigned char 
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  2    1[COMRAM] int 
 11022 ;; Registers used:
 11023 ;;		wreg, status,2, status,0
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11030 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11032 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11033 ;;Total ram usage:        8 bytes
 11034 ;; Hardware stack levels used: 1
 11035 ;; Hardware stack levels required when called: 1
 11036 ;; This function calls:
 11037 ;;		Nothing
 11038 ;; This function is called by:
 11039 ;;		_dtoa
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text61
 11044   00393C                     __ptext61:
 11045                           	callstack 0
 11046   00393C                     ___awdiv:
 11047                           	callstack 24
 11048   00393C  0E00               	movlw	0
 11049   00393E  6E07               	movwf	___awdiv@sign^0,c
 11050   003940  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11051   003942  EFA7  F01C         	goto	u4730
 11052   003946  EFA5  F01C         	goto	u4731
 11053   00394A                     u4731:
 11054   00394A  EFAD  F01C         	goto	l5420
 11055   00394E                     u4730:
 11056   00394E  6C04               	negf	___awdiv@divisor^0,c
 11057   003950  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11058   003952  B0D8               	btfsc	status,0,c
 11059   003954  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11060   003956  0E01               	movlw	1
 11061   003958  6E07               	movwf	___awdiv@sign^0,c
 11062   00395A                     l5420:
 11063   00395A  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11064   00395C  EFB4  F01C         	goto	u4740
 11065   003960  EFB2  F01C         	goto	u4741
 11066   003964                     u4741:
 11067   003964  EFBA  F01C         	goto	l5426
 11068   003968                     u4740:
 11069   003968  6C02               	negf	___awdiv@dividend^0,c
 11070   00396A  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11071   00396C  B0D8               	btfsc	status,0,c
 11072   00396E  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11073   003970  0E01               	movlw	1
 11074   003972  1A07               	xorwf	___awdiv@sign^0,f,c
 11075   003974                     l5426:
 11076   003974  0E00               	movlw	0
 11077   003976  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11078   003978  0E00               	movlw	0
 11079   00397A  6E08               	movwf	___awdiv@quotient^0,c
 11080   00397C  5004               	movf	___awdiv@divisor^0,w,c
 11081   00397E  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11082   003980  B4D8               	btfsc	status,2,c
 11083   003982  EFC5  F01C         	goto	u4751
 11084   003986  EFC7  F01C         	goto	u4750
 11085   00398A                     u4751:
 11086   00398A  EFEF  F01C         	goto	l5448
 11087   00398E                     u4750:
 11088   00398E  0E01               	movlw	1
 11089   003990  6E06               	movwf	___awdiv@counter^0,c
 11090   003992  EFCF  F01C         	goto	l5434
 11091   003996                     l5432:
 11092   003996  90D8               	bcf	status,0,c
 11093   003998  3604               	rlcf	___awdiv@divisor^0,f,c
 11094   00399A  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11095   00399C  2A06               	incf	___awdiv@counter^0,f,c
 11096   00399E                     l5434:
 11097   00399E  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11098   0039A0  EFD4  F01C         	goto	u4761
 11099   0039A4  EFD6  F01C         	goto	u4760
 11100   0039A8                     u4761:
 11101   0039A8  EFCB  F01C         	goto	l5432
 11102   0039AC                     u4760:
 11103   0039AC                     l5436:
 11104   0039AC  90D8               	bcf	status,0,c
 11105   0039AE  3608               	rlcf	___awdiv@quotient^0,f,c
 11106   0039B0  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11107   0039B2  5004               	movf	___awdiv@divisor^0,w,c
 11108   0039B4  5C02               	subwf	___awdiv@dividend^0,w,c
 11109   0039B6  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11110   0039B8  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11111   0039BA  A0D8               	btfss	status,0,c
 11112   0039BC  EFE2  F01C         	goto	u4771
 11113   0039C0  EFE4  F01C         	goto	u4770
 11114   0039C4                     u4771:
 11115   0039C4  EFE9  F01C         	goto	l5444
 11116   0039C8                     u4770:
 11117   0039C8  5004               	movf	___awdiv@divisor^0,w,c
 11118   0039CA  5E02               	subwf	___awdiv@dividend^0,f,c
 11119   0039CC  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11120   0039CE  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11121   0039D0  8008               	bsf	___awdiv@quotient^0,0,c
 11122   0039D2                     l5444:
 11123   0039D2  90D8               	bcf	status,0,c
 11124   0039D4  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11125   0039D6  3204               	rrcf	___awdiv@divisor^0,f,c
 11126   0039D8  2E06               	decfsz	___awdiv@counter^0,f,c
 11127   0039DA  EFD6  F01C         	goto	l5436
 11128   0039DE                     l5448:
 11129   0039DE  5007               	movf	___awdiv@sign^0,w,c
 11130   0039E0  B4D8               	btfsc	status,2,c
 11131   0039E2  EFF5  F01C         	goto	u4781
 11132   0039E6  EFF7  F01C         	goto	u4780
 11133   0039EA                     u4781:
 11134   0039EA  EFFB  F01C         	goto	l5452
 11135   0039EE                     u4780:
 11136   0039EE  6C08               	negf	___awdiv@quotient^0,c
 11137   0039F0  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11138   0039F2  B0D8               	btfsc	status,0,c
 11139   0039F4  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11140   0039F6                     l5452:
 11141   0039F6  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11142   0039FA  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11143   0039FE  0012               	return		;funcret
 11144   003A00                     __end_of___awdiv:
 11145                           	callstack 0
 11146                           
 11147 ;; *************** function _sendStringSerial4 *****************
 11148 ;; Defined at:
 11149 ;;		line 41 in file "serial.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  string          1    2[COMRAM] PTR unsigned char 
 11152 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;		None
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      void 
 11157 ;; Registers used:
 11158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11164 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11168 ;;Total ram usage:        1 bytes
 11169 ;; Hardware stack levels used: 1
 11170 ;; Hardware stack levels required when called: 2
 11171 ;; This function calls:
 11172 ;;		_sendCharSerial4
 11173 ;; This function is called by:
 11174 ;;		_calibration_routine
 11175 ;;		_send2USART
 11176 ;;		_sendAllReadings
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           	psect	text62
 11181   0046EE                     __ptext62:
 11182                           	callstack 0
 11183   0046EE                     _sendStringSerial4:
 11184                           	callstack 27
 11185   0046EE                     
 11186                           ;serial.c: 44:     while(*string != 0){
 11187   0046EE  EF84  F023         	goto	l6028
 11188   0046F2                     l6022:
 11189                           
 11190                           ;serial.c: 46:   sendCharSerial4(*string++);
 11191   0046F2  5003               	movf	sendStringSerial4@string^0,w,c
 11192   0046F4  6ED9               	movwf	fsr2l,c
 11193   0046F6  6ADA               	clrf	fsr2h,c
 11194   0046F8  50DF               	movf	indf2,w,c
 11195   0046FA  EC67  F024         	call	_sendCharSerial4
 11196   0046FE  2A03               	incf	sendStringSerial4@string^0,f,c
 11197   004700                     
 11198                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11199   004700  0E6A               	movlw	106
 11200   004702                     u7347:
 11201   004702  2EE8               	decfsz	wreg,f,c
 11202   004704  D7FE               	bra	u7347
 11203   004706  D000               	nop2	
 11204   004708                     l6028:
 11205                           
 11206                           ;serial.c: 44:     while(*string != 0){
 11207   004708  5003               	movf	sendStringSerial4@string^0,w,c
 11208   00470A  6ED9               	movwf	fsr2l,c
 11209   00470C  6ADA               	clrf	fsr2h,c
 11210   00470E  50DF               	movf	indf2,w,c
 11211   004710  A4D8               	btfss	status,2,c
 11212   004712  EF8D  F023         	goto	u5641
 11213   004716  EF8F  F023         	goto	u5640
 11214   00471A                     u5641:
 11215   00471A  EF79  F023         	goto	l6022
 11216   00471E                     u5640:
 11217   00471E  0012               	return		;funcret
 11218   004720                     __end_of_sendStringSerial4:
 11219                           	callstack 0
 11220                           
 11221 ;; *************** function _sendCharSerial4 *****************
 11222 ;; Defined at:
 11223 ;;		line 35 in file "serial.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  charToSend      1    wreg     unsigned char 
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  charToSend      1    1[COMRAM] unsigned char 
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11238 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11241 ;;Total ram usage:        1 bytes
 11242 ;; Hardware stack levels used: 1
 11243 ;; Hardware stack levels required when called: 1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_sendStringSerial4
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text63
 11252   0048CE                     __ptext63:
 11253                           	callstack 0
 11254   0048CE                     _sendCharSerial4:
 11255                           	callstack 27
 11256                           
 11257                           ;incstack = 0
 11258                           ;sendCharSerial4@charToSend stored from wreg
 11259   0048CE  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11260   0048D0                     l552:
 11261   0048D0  010E               	movlb	14	; () banked
 11262   0048D2  A537               	btfss	55,2,b	;volatile
 11263   0048D4  EF6E  F024         	goto	u5211
 11264   0048D8  EF70  F024         	goto	u5210
 11265   0048DC                     u5211:
 11266   0048DC  EF68  F024         	goto	l552
 11267   0048E0                     u5210:
 11268   0048E0                     
 11269                           ; BSR set to: 14
 11270                           ;serial.c: 37:     TX4REG = charToSend;
 11271   0048E0  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11272   0048E4                     
 11273                           ; BSR set to: 14
 11274   0048E4  0012               	return		;funcret
 11275   0048E6                     __end_of_sendCharSerial4:
 11276                           	callstack 0
 11277                           
 11278 ;; *************** function _color_read_Red *****************
 11279 ;; Defined at:
 11280 ;;		line 33 in file "color.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  tmp             2   10[COMRAM] unsigned int 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  2    5[COMRAM] unsigned int 
 11287 ;; Registers used:
 11288 ;;		wreg, status,2, status,0, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11296 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11297 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11298 ;;Total ram usage:        7 bytes
 11299 ;; Hardware stack levels used: 1
 11300 ;; Hardware stack levels required when called: 3
 11301 ;; This function calls:
 11302 ;;		_I2C_2_Master_Read
 11303 ;;		_I2C_2_Master_RepStart
 11304 ;;		_I2C_2_Master_Start
 11305 ;;		_I2C_2_Master_Stop
 11306 ;;		_I2C_2_Master_Write
 11307 ;; This function is called by:
 11308 ;;		_reading_hue
 11309 ;;		_calibration_routine
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           	psect	text64
 11314   0040B6                     __ptext64:
 11315                           	callstack 0
 11316   0040B6                     _color_read_Red:
 11317                           	callstack 26
 11318   0040B6                     
 11319                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11320   0040B6  EC7E  F024         	call	_I2C_2_Master_Start	;wreg free
 11321                           
 11322                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11323   0040BA  0E52               	movlw	82
 11324   0040BC  EC73  F024         	call	_I2C_2_Master_Write
 11325                           
 11326                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11327   0040C0  0EB6               	movlw	182
 11328   0040C2  EC73  F024         	call	_I2C_2_Master_Write
 11329                           
 11330                           ;color.c: 39:  I2C_2_Master_RepStart();
 11331   0040C6  EC83  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11332                           
 11333                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11334   0040CA  0E53               	movlw	83
 11335   0040CC  EC73  F024         	call	_I2C_2_Master_Write
 11336                           
 11337                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11338   0040D0  0E01               	movlw	1
 11339   0040D2  EC82  F021         	call	_I2C_2_Master_Read
 11340   0040D6  6E08               	movwf	??_color_read_Red^0,c
 11341   0040D8  5008               	movf	??_color_read_Red^0,w,c
 11342   0040DA  6E0B               	movwf	color_read_Red@tmp^0,c
 11343   0040DC  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11344                           
 11345                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11346   0040DE  0E00               	movlw	0
 11347   0040E0  EC82  F021         	call	_I2C_2_Master_Read
 11348   0040E4  6E08               	movwf	??_color_read_Red^0,c
 11349   0040E6  5008               	movf	??_color_read_Red^0,w,c
 11350   0040E8  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11351   0040EA  6A09               	clrf	(??_color_read_Red+1)^0,c
 11352   0040EC  500B               	movf	color_read_Red@tmp^0,w,c
 11353   0040EE  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11354   0040F0  6E0B               	movwf	color_read_Red@tmp^0,c
 11355   0040F2  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11356   0040F4  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11357   0040F6  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11358                           
 11359                           ;color.c: 43:  I2C_2_Master_Stop();
 11360   0040F8  EC79  F024         	call	_I2C_2_Master_Stop	;wreg free
 11361   0040FC                     
 11362                           ;color.c: 44:  return tmp;
 11363   0040FC  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11364   004100  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11365   004104  0012               	return		;funcret
 11366   004106                     __end_of_color_read_Red:
 11367                           	callstack 0
 11368                           
 11369 ;; *************** function _color_read_Green *****************
 11370 ;; Defined at:
 11371 ;;		line 47 in file "color.c"
 11372 ;; Parameters:    Size  Location     Type
 11373 ;;		None
 11374 ;; Auto vars:     Size  Location     Type
 11375 ;;  tmp             2   10[COMRAM] unsigned int 
 11376 ;; Return value:  Size  Location     Type
 11377 ;;                  2    5[COMRAM] unsigned int 
 11378 ;; Registers used:
 11379 ;;		wreg, status,2, status,0, cstack
 11380 ;; Tracked objects:
 11381 ;;		On entry : 0/0
 11382 ;;		On exit  : 0/0
 11383 ;;		Unchanged: 0/0
 11384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11387 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11388 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11389 ;;Total ram usage:        7 bytes
 11390 ;; Hardware stack levels used: 1
 11391 ;; Hardware stack levels required when called: 3
 11392 ;; This function calls:
 11393 ;;		_I2C_2_Master_Read
 11394 ;;		_I2C_2_Master_RepStart
 11395 ;;		_I2C_2_Master_Start
 11396 ;;		_I2C_2_Master_Stop
 11397 ;;		_I2C_2_Master_Write
 11398 ;; This function is called by:
 11399 ;;		_reading_hue
 11400 ;;		_calibration_routine
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           	psect	text65
 11405   004106                     __ptext65:
 11406                           	callstack 0
 11407   004106                     _color_read_Green:
 11408                           	callstack 26
 11409   004106                     
 11410                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11411   004106  EC7E  F024         	call	_I2C_2_Master_Start	;wreg free
 11412                           
 11413                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11414   00410A  0E52               	movlw	82
 11415   00410C  EC73  F024         	call	_I2C_2_Master_Write
 11416                           
 11417                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11418   004110  0EB8               	movlw	184
 11419   004112  EC73  F024         	call	_I2C_2_Master_Write
 11420                           
 11421                           ;color.c: 53:  I2C_2_Master_RepStart();
 11422   004116  EC83  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11423                           
 11424                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11425   00411A  0E53               	movlw	83
 11426   00411C  EC73  F024         	call	_I2C_2_Master_Write
 11427                           
 11428                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11429   004120  0E01               	movlw	1
 11430   004122  EC82  F021         	call	_I2C_2_Master_Read
 11431   004126  6E08               	movwf	??_color_read_Green^0,c
 11432   004128  5008               	movf	??_color_read_Green^0,w,c
 11433   00412A  6E0B               	movwf	color_read_Green@tmp^0,c
 11434   00412C  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11435                           
 11436                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11437   00412E  0E00               	movlw	0
 11438   004130  EC82  F021         	call	_I2C_2_Master_Read
 11439   004134  6E08               	movwf	??_color_read_Green^0,c
 11440   004136  5008               	movf	??_color_read_Green^0,w,c
 11441   004138  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11442   00413A  6A09               	clrf	(??_color_read_Green+1)^0,c
 11443   00413C  500B               	movf	color_read_Green@tmp^0,w,c
 11444   00413E  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11445   004140  6E0B               	movwf	color_read_Green@tmp^0,c
 11446   004142  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11447   004144  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11448   004146  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11449                           
 11450                           ;color.c: 57:  I2C_2_Master_Stop();
 11451   004148  EC79  F024         	call	_I2C_2_Master_Stop	;wreg free
 11452   00414C                     
 11453                           ;color.c: 58:  return tmp;
 11454   00414C  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11455   004150  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11456   004154  0012               	return		;funcret
 11457   004156                     __end_of_color_read_Green:
 11458                           	callstack 0
 11459                           
 11460 ;; *************** function _color_read_Clear *****************
 11461 ;; Defined at:
 11462 ;;		line 76 in file "color.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;		None
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;  tmp             2   10[COMRAM] unsigned int 
 11467 ;; Return value:  Size  Location     Type
 11468 ;;                  2    5[COMRAM] unsigned int 
 11469 ;; Registers used:
 11470 ;;		wreg, status,2, status,0, cstack
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : 0/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11478 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11479 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11480 ;;Total ram usage:        7 bytes
 11481 ;; Hardware stack levels used: 1
 11482 ;; Hardware stack levels required when called: 3
 11483 ;; This function calls:
 11484 ;;		_I2C_2_Master_Read
 11485 ;;		_I2C_2_Master_RepStart
 11486 ;;		_I2C_2_Master_Start
 11487 ;;		_I2C_2_Master_Stop
 11488 ;;		_I2C_2_Master_Write
 11489 ;; This function is called by:
 11490 ;;		_reading_hue
 11491 ;;		_calibration_routine
 11492 ;;		_main
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           	psect	text66
 11497   004156                     __ptext66:
 11498                           	callstack 0
 11499   004156                     _color_read_Clear:
 11500                           	callstack 26
 11501   004156                     
 11502                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11503   004156  EC7E  F024         	call	_I2C_2_Master_Start	;wreg free
 11504                           
 11505                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11506   00415A  0E52               	movlw	82
 11507   00415C  EC73  F024         	call	_I2C_2_Master_Write
 11508                           
 11509                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11510   004160  0EB4               	movlw	180
 11511   004162  EC73  F024         	call	_I2C_2_Master_Write
 11512                           
 11513                           ;color.c: 82:  I2C_2_Master_RepStart();
 11514   004166  EC83  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11515                           
 11516                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11517   00416A  0E53               	movlw	83
 11518   00416C  EC73  F024         	call	_I2C_2_Master_Write
 11519                           
 11520                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11521   004170  0E01               	movlw	1
 11522   004172  EC82  F021         	call	_I2C_2_Master_Read
 11523   004176  6E08               	movwf	??_color_read_Clear^0,c
 11524   004178  5008               	movf	??_color_read_Clear^0,w,c
 11525   00417A  6E0B               	movwf	color_read_Clear@tmp^0,c
 11526   00417C  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11527                           
 11528                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11529   00417E  0E00               	movlw	0
 11530   004180  EC82  F021         	call	_I2C_2_Master_Read
 11531   004184  6E08               	movwf	??_color_read_Clear^0,c
 11532   004186  5008               	movf	??_color_read_Clear^0,w,c
 11533   004188  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11534   00418A  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11535   00418C  500B               	movf	color_read_Clear@tmp^0,w,c
 11536   00418E  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11537   004190  6E0B               	movwf	color_read_Clear@tmp^0,c
 11538   004192  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11539   004194  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11540   004196  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11541                           
 11542                           ;color.c: 86:  I2C_2_Master_Stop();
 11543   004198  EC79  F024         	call	_I2C_2_Master_Stop	;wreg free
 11544   00419C                     
 11545                           ;color.c: 87:  return tmp;
 11546   00419C  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11547   0041A0  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11548   0041A4  0012               	return		;funcret
 11549   0041A6                     __end_of_color_read_Clear:
 11550                           	callstack 0
 11551                           
 11552 ;; *************** function _color_read_Blue *****************
 11553 ;; Defined at:
 11554 ;;		line 61 in file "color.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;		None
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  tmp             2   10[COMRAM] unsigned int 
 11559 ;; Return value:  Size  Location     Type
 11560 ;;                  2    5[COMRAM] unsigned int 
 11561 ;; Registers used:
 11562 ;;		wreg, status,2, status,0, cstack
 11563 ;; Tracked objects:
 11564 ;;		On entry : 0/0
 11565 ;;		On exit  : 0/0
 11566 ;;		Unchanged: 0/0
 11567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11568 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11570 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11571 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11572 ;;Total ram usage:        7 bytes
 11573 ;; Hardware stack levels used: 1
 11574 ;; Hardware stack levels required when called: 3
 11575 ;; This function calls:
 11576 ;;		_I2C_2_Master_Read
 11577 ;;		_I2C_2_Master_RepStart
 11578 ;;		_I2C_2_Master_Start
 11579 ;;		_I2C_2_Master_Stop
 11580 ;;		_I2C_2_Master_Write
 11581 ;; This function is called by:
 11582 ;;		_reading_hue
 11583 ;;		_calibration_routine
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           	psect	text67
 11588   0041A6                     __ptext67:
 11589                           	callstack 0
 11590   0041A6                     _color_read_Blue:
 11591                           	callstack 26
 11592   0041A6                     
 11593                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11594   0041A6  EC7E  F024         	call	_I2C_2_Master_Start	;wreg free
 11595                           
 11596                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11597   0041AA  0E52               	movlw	82
 11598   0041AC  EC73  F024         	call	_I2C_2_Master_Write
 11599                           
 11600                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11601   0041B0  0EBA               	movlw	186
 11602   0041B2  EC73  F024         	call	_I2C_2_Master_Write
 11603                           
 11604                           ;color.c: 67:  I2C_2_Master_RepStart();
 11605   0041B6  EC83  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11606                           
 11607                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11608   0041BA  0E53               	movlw	83
 11609   0041BC  EC73  F024         	call	_I2C_2_Master_Write
 11610                           
 11611                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11612   0041C0  0E01               	movlw	1
 11613   0041C2  EC82  F021         	call	_I2C_2_Master_Read
 11614   0041C6  6E08               	movwf	??_color_read_Blue^0,c
 11615   0041C8  5008               	movf	??_color_read_Blue^0,w,c
 11616   0041CA  6E0B               	movwf	color_read_Blue@tmp^0,c
 11617   0041CC  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11618                           
 11619                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11620   0041CE  0E00               	movlw	0
 11621   0041D0  EC82  F021         	call	_I2C_2_Master_Read
 11622   0041D4  6E08               	movwf	??_color_read_Blue^0,c
 11623   0041D6  5008               	movf	??_color_read_Blue^0,w,c
 11624   0041D8  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11625   0041DA  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11626   0041DC  500B               	movf	color_read_Blue@tmp^0,w,c
 11627   0041DE  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11628   0041E0  6E0B               	movwf	color_read_Blue@tmp^0,c
 11629   0041E2  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11630   0041E4  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11631   0041E6  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11632                           
 11633                           ;color.c: 71:  I2C_2_Master_Stop();
 11634   0041E8  EC79  F024         	call	_I2C_2_Master_Stop	;wreg free
 11635   0041EC                     
 11636                           ;color.c: 72:  return tmp;
 11637   0041EC  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11638   0041F0  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11639   0041F4  0012               	return		;funcret
 11640   0041F6                     __end_of_color_read_Blue:
 11641                           	callstack 0
 11642                           
 11643 ;; *************** function _I2C_2_Master_Write *****************
 11644 ;; Defined at:
 11645 ;;		line 45 in file "i2c.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  data_byte       1    wreg     unsigned char 
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  data_byte       1    2[COMRAM] unsigned char 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      void 
 11652 ;; Registers used:
 11653 ;;		wreg, status,2, status,0, cstack
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11663 ;;Total ram usage:        1 bytes
 11664 ;; Hardware stack levels used: 1
 11665 ;; Hardware stack levels required when called: 2
 11666 ;; This function calls:
 11667 ;;		_I2C_2_Master_Idle
 11668 ;; This function is called by:
 11669 ;;		_color_writetoaddr
 11670 ;;		_color_read_Red
 11671 ;;		_color_read_Green
 11672 ;;		_color_read_Blue
 11673 ;;		_color_read_Clear
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text68
 11678   0048E6                     __ptext68:
 11679                           	callstack 0
 11680   0048E6                     _I2C_2_Master_Write:
 11681                           	callstack 26
 11682                           
 11683                           ;incstack = 0
 11684                           ;I2C_2_Master_Write@data_byte stored from wreg
 11685   0048E6  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11686   0048E8                     
 11687                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11688   0048E8  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11689   0048EC                     
 11690                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11691   0048EC  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11692   0048F0  0012               	return		;funcret
 11693   0048F2                     __end_of_I2C_2_Master_Write:
 11694                           	callstack 0
 11695                           
 11696 ;; *************** function _I2C_2_Master_Stop *****************
 11697 ;; Defined at:
 11698 ;;		line 39 in file "i2c.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;		None
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;		None
 11703 ;; Return value:  Size  Location     Type
 11704 ;;                  1    wreg      void 
 11705 ;; Registers used:
 11706 ;;		wreg, status,2, status,0, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11716 ;;Total ram usage:        0 bytes
 11717 ;; Hardware stack levels used: 1
 11718 ;; Hardware stack levels required when called: 2
 11719 ;; This function calls:
 11720 ;;		_I2C_2_Master_Idle
 11721 ;; This function is called by:
 11722 ;;		_color_writetoaddr
 11723 ;;		_color_read_Red
 11724 ;;		_color_read_Green
 11725 ;;		_color_read_Blue
 11726 ;;		_color_read_Clear
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text69
 11731   0048F2                     __ptext69:
 11732                           	callstack 0
 11733   0048F2                     _I2C_2_Master_Stop:
 11734                           	callstack 26
 11735   0048F2                     
 11736                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11737   0048F2  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11738   0048F6                     
 11739                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11740   0048F6  010E               	movlb	14	; () banked
 11741   0048F8  85DA               	bsf	218,2,b	;volatile
 11742   0048FA                     
 11743                           ; BSR set to: 14
 11744   0048FA  0012               	return		;funcret
 11745   0048FC                     __end_of_I2C_2_Master_Stop:
 11746                           	callstack 0
 11747                           
 11748 ;; *************** function _I2C_2_Master_Start *****************
 11749 ;; Defined at:
 11750 ;;		line 27 in file "i2c.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;		None
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;		None
 11755 ;; Return value:  Size  Location     Type
 11756 ;;                  1    wreg      void 
 11757 ;; Registers used:
 11758 ;;		wreg, status,2, status,0, cstack
 11759 ;; Tracked objects:
 11760 ;;		On entry : 0/0
 11761 ;;		On exit  : 0/0
 11762 ;;		Unchanged: 0/0
 11763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11768 ;;Total ram usage:        0 bytes
 11769 ;; Hardware stack levels used: 1
 11770 ;; Hardware stack levels required when called: 2
 11771 ;; This function calls:
 11772 ;;		_I2C_2_Master_Idle
 11773 ;; This function is called by:
 11774 ;;		_color_writetoaddr
 11775 ;;		_color_read_Red
 11776 ;;		_color_read_Green
 11777 ;;		_color_read_Blue
 11778 ;;		_color_read_Clear
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           	psect	text70
 11783   0048FC                     __ptext70:
 11784                           	callstack 0
 11785   0048FC                     _I2C_2_Master_Start:
 11786                           	callstack 26
 11787   0048FC                     
 11788                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11789   0048FC  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11790   004900                     
 11791                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11792   004900  010E               	movlb	14	; () banked
 11793   004902  81DA               	bsf	218,0,b	;volatile
 11794   004904                     
 11795                           ; BSR set to: 14
 11796   004904  0012               	return		;funcret
 11797   004906                     __end_of_I2C_2_Master_Start:
 11798                           	callstack 0
 11799                           
 11800 ;; *************** function _I2C_2_Master_RepStart *****************
 11801 ;; Defined at:
 11802 ;;		line 33 in file "i2c.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2, status,0, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11820 ;;Total ram usage:        0 bytes
 11821 ;; Hardware stack levels used: 1
 11822 ;; Hardware stack levels required when called: 2
 11823 ;; This function calls:
 11824 ;;		_I2C_2_Master_Idle
 11825 ;; This function is called by:
 11826 ;;		_color_read_Red
 11827 ;;		_color_read_Green
 11828 ;;		_color_read_Blue
 11829 ;;		_color_read_Clear
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           	psect	text71
 11834   004906                     __ptext71:
 11835                           	callstack 0
 11836   004906                     _I2C_2_Master_RepStart:
 11837                           	callstack 26
 11838   004906                     
 11839                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11840   004906  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11841   00490A                     
 11842                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11843   00490A  010E               	movlb	14	; () banked
 11844   00490C  83DA               	bsf	218,1,b	;volatile
 11845   00490E                     
 11846                           ; BSR set to: 14
 11847   00490E  0012               	return		;funcret
 11848   004910                     __end_of_I2C_2_Master_RepStart:
 11849                           	callstack 0
 11850                           
 11851 ;; *************** function _I2C_2_Master_Read *****************
 11852 ;; Defined at:
 11853 ;;		line 51 in file "i2c.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  ack             1    wreg     unsigned char 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  ack             1    3[COMRAM] unsigned char 
 11858 ;;  tmp             1    4[COMRAM] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  1    wreg      unsigned char 
 11861 ;; Registers used:
 11862 ;;		wreg, status,2, status,0, cstack
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11872 ;;Total ram usage:        3 bytes
 11873 ;; Hardware stack levels used: 1
 11874 ;; Hardware stack levels required when called: 2
 11875 ;; This function calls:
 11876 ;;		_I2C_2_Master_Idle
 11877 ;; This function is called by:
 11878 ;;		_color_read_Red
 11879 ;;		_color_read_Green
 11880 ;;		_color_read_Blue
 11881 ;;		_color_read_Clear
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text72
 11886   004304                     __ptext72:
 11887                           	callstack 0
 11888   004304                     _I2C_2_Master_Read:
 11889                           	callstack 26
 11890                           
 11891                           ; BSR set to: 14
 11892                           ;incstack = 0
 11893                           ;I2C_2_Master_Read@ack stored from wreg
 11894   004304  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11895   004306                     
 11896                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11897   004306  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11898   00430A                     
 11899                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11900   00430A  010E               	movlb	14	; () banked
 11901   00430C  87DA               	bsf	218,3,b	;volatile
 11902                           
 11903                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11904   00430E  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11905   004312                     
 11906                           ;i2c.c: 57:   tmp = SSP2BUF;
 11907   004312  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11908                           
 11909                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11910   004316  EC05  F024         	call	_I2C_2_Master_Idle	;wreg free
 11911   00431A                     
 11912                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11913   00431A  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11914   00431C  B4D8               	btfsc	status,2,c
 11915   00431E  EF93  F021         	goto	u5621
 11916   004322  EF97  F021         	goto	u5620
 11917   004326                     u5621:
 11918   004326  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11919   004328  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11920   00432A  EF98  F021         	goto	u5638
 11921   00432E                     u5620:
 11922   00432E  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11923   004330                     u5638:
 11924   004330  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11925   004332  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11926   004334  010E               	movlb	14	; () banked
 11927   004336  51DA               	movf	218,w,b	;volatile
 11928   004338  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11929   00433A  0BDF               	andlw	-33
 11930   00433C  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11931   00433E  6FDA               	movwf	218,b	;volatile
 11932   004340                     
 11933                           ; BSR set to: 14
 11934                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11935   004340  89DA               	bsf	218,4,b	;volatile
 11936   004342                     
 11937                           ; BSR set to: 14
 11938                           ;i2c.c: 61:   return tmp;
 11939   004342  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11940   004344                     
 11941                           ; BSR set to: 14
 11942   004344  0012               	return		;funcret
 11943   004346                     __end_of_I2C_2_Master_Read:
 11944                           	callstack 0
 11945                           
 11946 ;; *************** function _I2C_2_Master_Idle *****************
 11947 ;; Defined at:
 11948 ;;		line 22 in file "i2c.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;		None
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;		None
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  1    wreg      void 
 11955 ;; Registers used:
 11956 ;;		wreg, status,2, status,0
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11966 ;;Total ram usage:        1 bytes
 11967 ;; Hardware stack levels used: 1
 11968 ;; Hardware stack levels required when called: 1
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;;		_I2C_2_Master_Start
 11973 ;;		_I2C_2_Master_RepStart
 11974 ;;		_I2C_2_Master_Stop
 11975 ;;		_I2C_2_Master_Write
 11976 ;;		_I2C_2_Master_Read
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           	psect	text73
 11981   00480A                     __ptext73:
 11982                           	callstack 0
 11983   00480A                     _I2C_2_Master_Idle:
 11984                           	callstack 26
 11985   00480A                     l203:
 11986   00480A  010E               	movlb	14	; () banked
 11987   00480C  B5D8               	btfsc	216,2,b	;volatile
 11988   00480E  EF0B  F024         	goto	u5121
 11989   004812  EF0D  F024         	goto	u5120
 11990   004816                     u5121:
 11991   004816  EF05  F024         	goto	l203
 11992   00481A                     u5120:
 11993   00481A                     
 11994                           ; BSR set to: 14
 11995   00481A  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11996   00481E  0E1F               	movlw	31
 11997   004820  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11998   004822  A4D8               	btfss	status,2,c
 11999   004824  EF16  F024         	goto	u5131
 12000   004828  EF18  F024         	goto	u5130
 12001   00482C                     u5131:
 12002   00482C  EF05  F024         	goto	l203
 12003   004830                     u5130:
 12004   004830                     
 12005                           ; BSR set to: 14
 12006   004830  0012               	return		;funcret
 12007   004832                     __end_of_I2C_2_Master_Idle:
 12008                           	callstack 0
 12009                           
 12010 ;; *************** function _Timer0_init *****************
 12011 ;; Defined at:
 12012 ;;		line 8 in file "timers.c"
 12013 ;; Parameters:    Size  Location     Type
 12014 ;;		None
 12015 ;; Auto vars:     Size  Location     Type
 12016 ;;		None
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  1    wreg      void 
 12019 ;; Registers used:
 12020 ;;		wreg, status,2
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12030 ;;Total ram usage:        0 bytes
 12031 ;; Hardware stack levels used: 1
 12032 ;; Hardware stack levels required when called: 1
 12033 ;; This function calls:
 12034 ;;		Nothing
 12035 ;; This function is called by:
 12036 ;;		_main
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text74
 12041   0047B0                     __ptext74:
 12042                           	callstack 0
 12043   0047B0                     _Timer0_init:
 12044                           	callstack 29
 12045   0047B0                     
 12046                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 12047   0047B0  50D6               	movf	214,w,c	;volatile
 12048   0047B2  0B1F               	andlw	-225
 12049   0047B4  0940               	iorlw	64
 12050   0047B6  6ED6               	movwf	214,c	;volatile
 12051   0047B8                     
 12052                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 12053   0047B8  88D6               	bsf	214,4,c	;volatile
 12054                           
 12055                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 12056   0047BA  50D6               	movf	214,w,c	;volatile
 12057   0047BC  0BF0               	andlw	-16
 12058   0047BE  090D               	iorlw	13
 12059   0047C0  6ED6               	movwf	214,c	;volatile
 12060   0047C2                     
 12061                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 12062   0047C2  88D5               	bsf	213,4,c	;volatile
 12063   0047C4                     
 12064                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 12065   0047C4  010E               	movlb	14	; () banked
 12066   0047C6  8B29               	bsf	41,5,b	;volatile
 12067   0047C8                     
 12068                           ; BSR set to: 14
 12069                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 12070   0047C8  9B33               	bcf	51,5,b	;volatile
 12071   0047CA                     
 12072                           ; BSR set to: 14
 12073                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 12074   0047CA  9B1F               	bcf	31,5,b	;volatile
 12075   0047CC                     
 12076                           ; BSR set to: 14
 12077                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 12078   0047CC  8AF2               	bsf	242,5,c	;volatile
 12079   0047CE                     
 12080                           ; BSR set to: 14
 12081                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 12082   0047CE  8CF2               	bsf	242,6,c	;volatile
 12083   0047D0                     
 12084                           ; BSR set to: 14
 12085                           ;timers.c: 20:     INTCONbits.GIE = 1;
 12086   0047D0  8EF2               	bsf	242,7,c	;volatile
 12087   0047D2                     
 12088                           ; BSR set to: 14
 12089                           ;timers.c: 22:     TRISGbits.TRISG1 = 1;
 12090   0047D2  8287               	bsf	135,1,c	;volatile
 12091   0047D4                     
 12092                           ; BSR set to: 14
 12093                           ;timers.c: 23:     LATGbits.LATG1 = 0;
 12094   0047D4  927F               	bcf	127,1,c	;volatile
 12095                           
 12096                           ;timers.c: 25:     TMR0L = 0;
 12097   0047D6  0E00               	movlw	0
 12098   0047D8  6ED3               	movwf	211,c	;volatile
 12099                           
 12100                           ;timers.c: 26:     TMR0H = 0;
 12101   0047DA  0E00               	movlw	0
 12102   0047DC  6ED4               	movwf	212,c	;volatile
 12103   0047DE                     
 12104                           ; BSR set to: 14
 12105   0047DE  0012               	return		;funcret
 12106   0047E0                     __end_of_Timer0_init:
 12107                           	callstack 0
 12108                           
 12109 ;; *************** function _ADC_init *****************
 12110 ;; Defined at:
 12111 ;;		line 9 in file "ADC.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;		None
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;		None
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      void 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12129 ;;Total ram usage:        0 bytes
 12130 ;; Hardware stack levels used: 1
 12131 ;; Hardware stack levels required when called: 1
 12132 ;; This function calls:
 12133 ;;		Nothing
 12134 ;; This function is called by:
 12135 ;;		_main
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           	psect	text75
 12140   0048B4                     __ptext75:
 12141                           	callstack 0
 12142   0048B4                     _ADC_init:
 12143                           	callstack 29
 12144   0048B4                     
 12145                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12146   0048B4  8C86               	bsf	134,6,c	;volatile
 12147                           
 12148                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12149   0048B6  010E               	movlb	14	; () banked
 12150   0048B8  8DB4               	bsf	180,6,b	;volatile
 12151                           
 12152                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12153   0048BA  010F               	movlb	15	; () banked
 12154   0048BC  9958               	bcf	88,4,b	;volatile
 12155   0048BE                     
 12156                           ; BSR set to: 15
 12157                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12158   0048BE  0EFC               	movlw	-4
 12159   0048C0  1758               	andwf	88,f,b	;volatile
 12160                           
 12161                           ;ADC.c: 17:     ADPCH=0b101110;
 12162   0048C2  0E2E               	movlw	46
 12163   0048C4  6F5F               	movwf	95,b	;volatile
 12164   0048C6                     
 12165                           ; BSR set to: 15
 12166                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12167   0048C6  9460               	bcf	96,2,c	;volatile
 12168   0048C8                     
 12169                           ; BSR set to: 15
 12170                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12171   0048C8  8860               	bsf	96,4,c	;volatile
 12172   0048CA                     
 12173                           ; BSR set to: 15
 12174                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12175   0048CA  8E60               	bsf	96,7,c	;volatile
 12176   0048CC                     
 12177                           ; BSR set to: 15
 12178   0048CC  0012               	return		;funcret
 12179   0048CE                     __end_of_ADC_init:
 12180                           	callstack 0
 12181                           
 12182 ;; *************** function _LowISR *****************
 12183 ;; Defined at:
 12184 ;;		line 42 in file "timers.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;		None
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;		None
 12189 ;; Return value:  Size  Location     Type
 12190 ;;                  1    wreg      void 
 12191 ;; Registers used:
 12192 ;;		None
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12202 ;;Total ram usage:        1 bytes
 12203 ;; Hardware stack levels used: 1
 12204 ;; This function calls:
 12205 ;;		Nothing
 12206 ;; This function is called by:
 12207 ;;		Interrupt level 1
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           	psect	intcodelo
 12212   000018                     __pintcodelo:
 12213                           	callstack 0
 12214   000018                     _LowISR:
 12215                           	callstack 20
 12216                           
 12217                           ; BSR set to: 15
 12218                           ;incstack = 0
 12219   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12220   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12221   00001E                     
 12222                           ;timers.c: 45:     if (PIR0bits.TMR0IF == 1) {
 12223   00001E  010E               	movlb	14	; () banked
 12224   000020  AB33               	btfss	51,5,b	;volatile
 12225   000022  EF15  F000         	goto	i1u235_21
 12226   000026  EF17  F000         	goto	i1u235_20
 12227   00002A                     i1u235_21:
 12228   00002A  EF19  F000         	goto	i1l652
 12229   00002E                     i1u235_20:
 12230   00002E                     
 12231                           ; BSR set to: 14
 12232                           ;timers.c: 46:         LATGbits.LATG1 = 1;
 12233   00002E  827F               	bsf	127,1,c	;volatile
 12234                           
 12235                           ;timers.c: 48:         PIR0bits.TMR0IF = 0;
 12236   000030  9B33               	bcf	51,5,b	;volatile
 12237   000032                     i1l652:
 12238                           
 12239                           ; BSR set to: 14
 12240   000032  C001  FFE0         	movff	??_LowISR,bsr
 12241   000036  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12242   000038  0010               	retfie	
 12243   00003A                     __end_of_LowISR:
 12244                           	callstack 0
 12245                           
 12246                           	psect	rparam
 12247   000000                     
 12248                           	psect	temp
 12249   00005B                     btemp:
 12250                           	callstack 0
 12251   00005B                     	ds	1
 12252   000000                     int$flags	set	btemp
 12253   000000                     wtemp8	set	btemp+1
 12254   000000                     ttemp5	set	btemp+1
 12255   000000                     ttemp6	set	btemp+4
 12256   000000                     ttemp7	set	btemp+8
 12257                           
 12258                           	psect	config
 12259                           
 12260                           ;Config register CONFIG1L @ 0x300000
 12261                           ;	External Oscillator mode Selection bits
 12262                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12263                           ;	Power-up default value for COSC bits
 12264                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12265   300000                     	org	3145728
 12266   300000  AA                 	db	170
 12267                           
 12268                           ;Config register CONFIG1H @ 0x300001
 12269                           ;	unspecified, using default values
 12270                           ;	Clock Out Enable bit
 12271                           ;	CLKOUTEN = 0x1, unprogrammed default
 12272                           ;	Clock Switch Enable bit
 12273                           ;	CSWEN = 0x1, unprogrammed default
 12274                           ;	Fail-Safe Clock Monitor Enable bit
 12275                           ;	FCMEN = 0x1, unprogrammed default
 12276   300001                     	org	3145729
 12277   300001  FF                 	db	255
 12278                           
 12279                           ;Config register CONFIG3L @ 0x300004
 12280                           ;	WDT Period Select bits
 12281                           ;	WDTCPS = 0x1F, unprogrammed default
 12282                           ;	WDT operating mode
 12283                           ;	WDTE = OFF, WDT Disabled
 12284   300004                     	org	3145732
 12285   300004  9F                 	db	159
 12286                           
 12287                           ;Config register CONFIG3H @ 0x300005
 12288                           ;	unspecified, using default values
 12289                           ;	WDT Window Select bits
 12290                           ;	WDTCWS = 0x7, unprogrammed default
 12291                           ;	WDT input clock selector
 12292                           ;	WDTCCS = 0x7, unprogrammed default
 12293   300005                     	org	3145733
 12294   300005  FF                 	db	255
 12295                           tosu	equ	0xFFF
 12296                           tosh	equ	0xFFE
 12297                           tosl	equ	0xFFD
 12298                           stkptr	equ	0xFFC
 12299                           pclatu	equ	0xFFB
 12300                           pclath	equ	0xFFA
 12301                           pcl	equ	0xFF9
 12302                           tblptru	equ	0xFF8
 12303                           tblptrh	equ	0xFF7
 12304                           tblptrl	equ	0xFF6
 12305                           tablat	equ	0xFF5
 12306                           prodh	equ	0xFF4
 12307                           prodl	equ	0xFF3
 12308                           indf0	equ	0xFEF
 12309                           postinc0	equ	0xFEE
 12310                           postdec0	equ	0xFED
 12311                           preinc0	equ	0xFEC
 12312                           plusw0	equ	0xFEB
 12313                           fsr0h	equ	0xFEA
 12314                           fsr0l	equ	0xFE9
 12315                           wreg	equ	0xFE8
 12316                           indf1	equ	0xFE7
 12317                           postinc1	equ	0xFE6
 12318                           postdec1	equ	0xFE5
 12319                           preinc1	equ	0xFE4
 12320                           plusw1	equ	0xFE3
 12321                           fsr1h	equ	0xFE2
 12322                           fsr1l	equ	0xFE1
 12323                           bsr	equ	0xFE0
 12324                           indf2	equ	0xFDF
 12325                           postinc2	equ	0xFDE
 12326                           postdec2	equ	0xFDD
 12327                           preinc2	equ	0xFDC
 12328                           plusw2	equ	0xFDB
 12329                           fsr2h	equ	0xFDA
 12330                           fsr2l	equ	0xFD9
 12331                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         330
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      90
    BANK0           160     76     144
    BANK1           256      0     162
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S2994$buffer	PTR unsigned char  size(2) Largest target is 0

    S2994$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _returnHome->_reverseTurn
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_stop
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _get16bitTMR0val->_logAction
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_send2USART
    _send2USART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_routine->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0  332254
                                             73 COMRAM    16    16      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4   96908
                                             33 COMRAM    11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   65365
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6    6984
                                             22 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       2     0      2     720
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     158
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   23075
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   22171
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1496
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     697
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3053
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3623
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1784
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  158127
                                             32 COMRAM     4     0      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   21024
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   22644
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   10450
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   21204
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10270
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   22464
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   10270
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4117
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   22644
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   10450
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10630
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   22824
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   10630
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4297
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11890
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5669
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4117
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3441
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1595
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   24112
                                             70 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11646
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10359
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1012
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5A       1       95.7%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F0      66        0.0%
DATA                 0      0     1F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 02:34:31 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 40B6  
                 ___fldiv@aexp 0033                   ___fldiv@bexp 0032             fullSpeedBack@power 0017  
                 ___fldiv@sign 002B                _color_read_Blue 41A6                             l81 442C  
                           l90 4154                             l84 4876                             l93 41F4  
                           l87 4104                             l96 41A4                             l99 393A  
                 ___awdiv@sign 0007                             bsr 0FE0            ___wmul@multiplicand 0004  
              moveLightBlue@mL 001D                moveLightBlue@mR 001E             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 4156  
             _color_read_Green 4106                            l110 2A82                            l102 29B8  
                          l111 2AD4                            l120 2BD6                            l104 29C6  
                          l200 4808                            l113 2AE2                            l105 2A14  
                          l114 2B3C                            l130 11B8                            l203 480A  
                          l107 2A22                            l212 490E                            l116 2B4A  
                          l108 2A74                            l140 12AA                            l132 1212  
                          l221 4344                            l117 2BB0                            l206 4830  
                          l150 15C2                            l142 12BA                            l134 1222  
                          l215 48FA                            l144 1314                            l128 11A8  
                          l209 4904                            l218 48F0                            l154 163A  
                          l146 1324             logAction@path_step 0004                            l155 1656  
                          l331 1F2E                            l421 333E                            l173 2990  
                          l325 1D70                            l414 3DD6                            l167 2988  
                          l434 3F60                            l450 474E                            l442 4910  
                          l700 31EA                            l349 48CC                            l429 3E64  
                          l453 477E                            l606 48B2                            l462 4656  
                          l447 3FD6                            l439 3EE2                            l471 452A  
                          l543 4894                            l552 48D0                            l456 46EC  
                          l480 44F8                            l712 43F8                            l720 3850  
                          l561 471E                            l465 47AE                            l474 4688  
                          l706 31EA                            l643 47DE                            l555 48E4  
                          l459 45F2                            l483 455C                            l811 355A  
                          l723 344C                            l732 4856                            l468 458E  
                          l492 44C6                            l477 46BA                            l709 43E2  
                          l486 45C0                            l646 43C0                            l743 40A4  
                          l744 40B4                            l489 4624                            l729 344E  
                          l694 427E                            l963 39FE                            l991 3C06  
                          l976 3AAE                            l997 371E                            _abs 4462  
                          _pad 3CB2            convert_rgb2hue@cMax 003E                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 000F  
                 ___flmul@bexp 0014                   ___flmul@sign 000E                   ___flmul@temp 0019  
                 ___flmul@prod 0015                   ___fltol@exp1 003D                           l1002 3764  
                         ?_abs 0008                           l1029 3660                           l1230 404A  
                         l1302 423A                           l1223 4042                           l1401 2D22  
                         l1410 4460                           l1314 2744                           l1316 25A4  
                         l1260 1846                           l1325 25EA                           l1261 1834  
                         l1510 4912                           l1430 3CE8                           l1350 23AA  
                         l1262 17FA                           l1327 2662                           l1319 2568  
                         l1328 2650                           l1433 3D26                           l1353 223C  
                         l1346 2046                           l1507 4384                           l1435 3D46  
                         l1451 308A                           l1363 236C                           l1355 22B4  
                         l1356 22A2                           l1277 1960                           l1269 1B16  
                         l1438 2F72                           l1286 1A30                           l1390 2D8A  
                         l1455 3B54                           l1287 1A1E                           l1480 4302  
                         l1474 2F12                           l1394 2CC6                           l1459 3B5C  
                         l1387 2C2E                           l1484 447C                           l1487 4494  
                         l6000 431A                           l6002 4340                           l6010 4436  
                         l1499 3CB0                           l6004 4342                           l6020 46EE  
                         l6012 443E                           l6100 241E                           l6022 46F2  
                         l6014 4446                           l6030 4720                           l6110 245E  
                         l6102 242C                           l7000 47CC                           l6024 46FE  
                         l5400 4352                           l6016 4456                           l6008 442E  
                         l6040 4772                           l6032 472C                           l6200 2720  
                         l6120 249E                           l6112 2460                           l6104 242E  
                         l7002 47CE                           l6026 4700                           l5402 4360  
                         l6042 46BC                           l6050 45CE                           l6034 4742  
                         l7010 3D48                           l6202 2724                           l6130 24CE  
                         l6122 24A6                           l6106 243E                           l6114 2468  
                         l7004 47D0                           l6028 4708                           l5420 395A  
                         l5412 393C                           l5404 4364                           l5500 3CF4  
                         l6060 4780                           l6044 46C8                           l6036 4750  
                         l6052 45E6                           l7020 3DB0                           l7012 3D58  
                         l6204 2732                           l6140 250C                           l6132 24CE  
                         l6124 24AA                           l6116 2478                           l6108 244E  
                         l6300 222C                           l6220 1F9C                           l7100 1B6E  
                         l7006 47D2                           l5430 398E                           l5422 3968  
                         l5414 3940                           l5510 4470                           l5502 3D04  
                         l5406 4832                           l6062 478C                           l6046 46E0  
                         l6038 475C                           l6054 4626                           l6070 4582  
                         l7030 3DCA                           l7022 3DB2                           l7014 3D7E  
                         l6206 2738                           l6150 2558                           l6142 251C  
                         l6118 248E                           l6310 226C                           l6302 223A  
                         l6230 1FD4                           l6222 1F9E                           l7110 1B84  
                         l7102 1B76                           ?_pad 0010                           l7008 47D4  
                         l5440 39C8                           l5432 3996                           l5424 3970  
                         l5416 394E                           l5504 3D08                           l5408 484E  
                         l5520 4002                           l5512 3FD8                           l5600 3206  
                         l6064 47A2                           l6056 4632                           l6048 45C2  
                         l7040 43B8                           l7032 3DD4                           l7024 3DBC  
                         l7016 3D82                           l6208 273A                           l6160 25A2  
                         l6152 2566                           l6144 252C                           l6136 24E2  
                         l6128 24BE                           l6080 23B8                           l6320 22DE  
                         l6312 229A                           l6304 224C                           l6240 2000  
                         l6232 1FE4                           l6224 1FAE                           l6216 1F82  
                         l6400 35B2                           l6072 43C2                           l7200 1EC8  
                         l7120 1B8E                           l7112 1B86                           l7104 1B7E  
                         l5450 39EE                           l5442 39D0                           l5434 399E  
                         l5426 3974                           l5418 3956                           l5506 3D36  
                         l5530 4036                           l5522 4010                           l5514 3FE0  
                         l5610 32C2                           l5602 3254                           l6058 464A  
                         l6066 455E                           l7034 4386                           l7026 3DBE  
                         l7018 3DA6                           l6170 25E8                           l6162 25B4  
                         l6154 2572                           l6146 2534                           l6138 24FC  
                         l6090 23F8                           l6082 23C6                           l6330 2354  
                         l6322 2308                           l6306 225A                           l6250 2056  
                         l6242 2010                           l6234 1FEA                           l6226 1FBE  
                         l6218 1F8E                           l6402 35C2                           l6074 43CE  
                         l7050 3364                           l7210 1F3C                           l7202 1EE0  
                         l7130 1B9A                           l7122 1B90                           l7114 1B88  
                         l7106 1B80                           l6500 4106                           l5452 39F6  
                         l5444 39D2                           l5436 39AC                           l5428 397C  
                         l5460 3A12                           l5508 4462                           l5540 2F34  
                         l5620 2DC8                           l5532 403C                           l5524 4016  
                         l5516 3FF2                           l5612 3302                           l5604 3266  
                         l5700 3F0E                           l6068 456A                           l7036 439E  
                         l7028 3DC8                           l6180 2648                           l6164 25CA  
                         l6172 25FA                           l6156 2590                           l6148 2544  
                         l6092 23FA                           l6084 23C8                           l6332 2370  
                         l6340 2396                           l6316 22C4                           l6324 230C  
                         l6308 225E                           l6260 2090                           l6252 2066  
                         l6244 2020                           l6236 1FF0                           l6228 1FCE  
                         l6412 35EC                           l6404 35C6                           l6076 43DE  
                         l7060 341C                           l7052 3370                           l7044 3340  
                         l7212 1F3C                           l7204 1EEC                           l7140 1BB8  
                         l7132 1B9C                           l7124 1B94                           l7116 1B8A  
                         l7108 1B82                           l6502 414C                           l5446 39D8  
                         l5438 39B2                           l5470 3A46                           l5462 3A1A  
                         l5390 3C32                           l5550 2F6E                           l5542 2F44  
                         l5534 2F14                           l5622 2DCC                           l5614 2D8C  
                         l5526 402C                           l5518 3FFA                           l5606 326A  
                         l5710 3F2E                           l7038 43B4                           l6190 26B6  
                         l6174 2608                           l6166 25D0                           l6158 2592  
                         l6086 23D8                           l6094 2402                           l6078 23AC  
                         l6342 239A                           l6334 2380                           l6326 2326  
                         l6318 22D0                           l6270 20E2                           l6262 20A6  
                         l6246 2030                           l6238 1FFE                           l6430 3650  
                         l6422 3614                           l6414 35F6                           l6406 35D4  
                         l7062 342C                           l7054 33DC                           l7046 3346  
                         l7214 1F48                           l7206 1F02                           l7150 1BCE  
                         l7142 1BBA                           l7134 1B9E                           l7126 1B96  
                         l7118 1B8C                           l7070 1B1C                           l6512 4156  
                         l5448 39DE                           l5480 3A82                           l5472 3A4E  
                         l5464 3A1E                           l5456 3A00                           l5392 3C4E  
                         l5384 3C08                           l5560 2FC0                           l5552 2F7A  
                         l5544 2F4A                           l5536 2F18                           l5640 2E56  
                         l5632 2DEC                           l5624 2DD4                           l5616 2DB2  
                         l6600 4254                           l5528 4034                           l5608 32A8  
                         l5712 3F36                           l5720 3E80                           l6184 2672  
                         l6192 26BA                           l6176 260C                           l6168 25DA  
                         l6096 2412                           l6088 23E8                           l6360 3BDA  
                         l6352 3B5E                           l6336 238E                           l6328 233A  
                         l6280 2128                           l6272 20F0                           l6264 20B2  
                         l6256 207A                           l6248 2036                           l5800 170E  
                         l6424 3620                           l6416 3600                           l6440 2C3E  
                         l6520 0ED8                           l7056 33EC                           l7048 3352  
                         l7216 1F5C                           l7208 1F18                           l7160 1C0C  
                         l7152 1BD0                           l7144 1BC2                           l7136 1BA0  
                         l7128 1B98                           l7080 1B34                           l7072 1B20  
                         l6506 41A6                           l6514 419C                           l5482 3A88  
                         l5474 3A56                           l5466 3A2C                           l5458 3A04  
                         l5394 3C80                           l5386 3C18                           l5570 301E  
                         l5562 2FC6                           l5554 2F84                           l5546 2F5A  
                         l5538 2F2C                           l5650 2EC2                           l5642 2E60  
                         l5626 2DD8                           l5634 2E22                           l5618 2DBA  
                         l5714 3F46                           l5706 3F16                           l6610 4696  
                         l6602 4658                           l5730 3E98                           l5722 3E88  
                         l6194 26D4                           l6186 267E                           l6178 261A  
                         l6098 2418                           l6362 3BFE                           l6354 3B8C  
                         l6370 3690                           l6338 2390                           l6290 2196  
                         l6282 2142                           l6274 20FC                           l6266 20CA  
                         l6258 2086                           l5810 174A                           l5802 171E  
                         l6346 41F6                           l6426 3630                           l6450 2C7C  
                         l6442 2C54                           l6434 2BDA                           l6530 0FD4  
                         l6522 0F08                           l7066 3442                           l7058 33FC  
                         l7218 1F5E                           l7162 1C2E                           l7154 1BDC  
                         l7146 1BCA                           l7138 1BA2                           l7090 1B52  
                         l7082 1B3A                           l7074 1B24                           l6508 41EC  
                         l5476 3A64                           l5484 3A8E                           l5468 3A34  
                         l5388 3C28                           l5492 3CB2                           l5580 306E  
                         l5572 3038                           l5556 2F8A                           l5564 2FE2  
                         l5548 2F66                           l5652 2ECC                           l5644 2E6A  
                         l5636 2E32                           l5628 2DE4                           l5660 2EEC  
                         l5716 3F4A                           l5708 3F26                           l6612 46AE  
                         l6604 4664                           l5740 3ECC                           l5732 3EA8  
                         l5724 3E90                           l6620 44C8                           l6196 26EA  
                         l6188 268C                           l6364 3C04                           l6356 3B9C  
                         l6380 36FE                           l6372 36A0                           l6292 21C0  
                         l6284 2152                           l6276 210C                           l6268 20D6  
                         l5900 1950                           l5820 1768                           l5812 1758  
                         l5804 1720                           l6348 4206                           l6428 3640  
                         l6460 2D04                           l6452 2CAE                           l6436 2BEA  
                         l6540 10C8                           l6532 1008                           l6524 0F38  
                         l6700 3816                           l7180 1DAA                           l7172 1D5A  
                         l7164 1C92                           l7156 1BDE                           l7148 1BCC  
                         l7092 1B5A                           l7084 1B3E                           l7076 1B28  
                         l7068 1B18                           l5670 480A                           l5486 3A9E  
                         l5478 3A7A                           l5398 4346                           l5494 3CC2  
                         l5566 2FFC                           l5574 3048                           l5558 2FBC  
                         l5590 3AE6                           l5646 2E8A                           l5638 2E46  
                         l7262 2E14                           l5750 3F82                           l5742 3F62  
                         l6606 467C                           l6614 45F4                           l5734 3EB0  
                         l5718 3E66                           l6630 45B4                           l6622 44D4  
                         l6198 2704                           l6358 3BCA                           l6382 370C  
                         l6374 36CE                           l6294 21F6                           l6286 216E  
                         l6278 2118                           l5910 19A4                           l5902 1976  
                         l5830 177C                           l5822 176C                           l5814 175C  
                         l5806 1728                           l6390 355C                           l6470 2D5A  
                         l6462 2D12                           l6454 2CB0                           l6446 2C68  
                         l6438 2BF8                           l6550 11CC                           l6542 10FC  
                         l6534 103C                           l6526 0F6C                           l6518 0EC6  
                         l6710 405C                           l6702 3822                           l7190 1DFE  
                         l7182 1DB6                           l7174 1D72                           l7166 1CA2  
                         l7158 1BEA                           l7094 1B5E                           l7086 1B42  
                         l7078 1B28                           l5672 481A                           l5488 3AA6  
                         l5496 3CD2                           l5576 3058                           l5568 300E  
                         l5592 3B02                           l5584 3AB0                           l5656 2EE0  
                         l5648 2EAA                           l6480 47E0                           l5760 3FBA  
                         l5752 3F96                           l5744 3F7A                           l5680 3DFA  
                         l6608 468A                           l6616 4600                           l5736 3EB8  
                         l6632 452C                           l6624 44EC                           l6384 375C  
                         l6376 36DE                           l6368 3662                           l6296 2204  
                         l6288 217A                           l5920 19CE                           l5912 19B2  
                         l5904 1986                           l5840 1790                           l5832 1780  
                         l5824 1770                           l5816 1760                           l5808 1738  
                         l6392 3572                           l6472 2D6A                           l6464 2D30  
                         l6456 2CBC                           l6448 2C70                           l6560 12CE  
                         l6552 11FE                           l6544 1130                           l6536 1070  
                         l6528 0FA0                           l6800 38EE                           l6720 3454  
                         l6712 406A                           l6640 44A2                           l6704 382E  
                         l7192 1E20                           l7184 1DCC                           l7176 1D7E  
                         l7168 1CF2                           l7096 1B62                           l7088 1B4A  
                         l5762 48D0                           l5498 3CE0                           l5578 305E  
                         l5594 3B22                           l5586 3AB8                           l6810 2992  
                         l6490 47F6                           l6482 47EA                           l5754 3F9E  
                         l5682 3E10                           l5690 3E38                           l5674 3DD8  
                         l6618 4618                           l5738 3EC8                           l6626 4590  
                         l6634 4538                           l6386 3762                           l6378 36EC  
                         l6298 2222                           l5930 1A00                           l5922 19DE  
                         l5914 19B4                           l5850 17E2                           l5842 1794  
                         l5834 1784                           l5826 1774                           l5818 1764  
                         l5770 1672                           l6474 2D78                           l6466 2D32  
                         l6458 2CF8                           l6570 13E2                           l6562 1300  
                         l6554 1232                           l6546 1162                           l6538 1094  
                         l6802 3908                           l6730 3494                           l6722 3462  
                         l6714 407A                           l6642 44BA                           l6706 383A  
                         l6650 30C2                           l7194 1E42                           l7186 1DD8  
                         l7178 1D92                           l7098 1B66                           l5764 48E0  
                         l5588 3ADE                           l5596 3B2A                           l6820 29F2  
                         l6812 2998                           l6484 47F0                           l6492 485A  
                         l5756 3FA6                           l5692 3E4E                           l5684 3E18  
                         l5676 3DDC                           l6628 459C                           l6636 4550  
                         l5940 1A5A                           l5932 1A16                           l5916 19C2  
                         l5908 199A                           l5924 19E0                           l5860 1826  
                         l5852 17F2                           l5836 1788                           l5828 1778  
                         l5844 1798                           l5780 16A6                           l5772 1674  
                         l6396 3586                           l6476 2D7A                           l6468 2D36  
                         l6572 143E                           l6580 15C2                           l6564 1334  
                         l6556 1264                           l6548 1194                           l6804 391E  
                         l6740 34D2                           l6732 3498                           l6724 3472  
                         l6716 4084                           l6708 404C                           l6660 3118  
                         l6652 30D2                           l6644 308C                           l7196 1EA6  
                         l7188 1DEE                           l6494 40B6                           l6590 48AA  
                         l6830 2A52                           l6822 29F4                           l6814 29B0  
                         l6486 47F2                           l5598 31EC                           l5758 3FB6  
                         l5686 3E20                           l5678 3DF2                           l5694 3EE4  
                         l6910 283C                           l6902 27EE                           l5950 1AD6  
                         l5942 1A94                           l5918 19CA                           l5926 19EE  
                         l5862 1828                           l5854 1808                           l5846 179C  
                         l5838 178C                           l5790 16D8                           l5774 1684  
                         l5782 16AE                           l5766 1658                           l6398 35B0  
                         l6582 15F6                           l6574 1470                           l6566 139A  
                         l6558 1296                           l6806 3932                           l6750 351A  
                         l6742 34E0                           l6734 34A8                           l6726 3476  
                         l6718 3450                           l6638 4496                           l6670 3170  
                         l6662 312A                           l6654 30E4                           l6646 309E  
                         l7198 1EBC                           l6496 40FC                           l6840 2AB2  
                         l6832 2A54                           l6824 2A0C                           l6816 29C8  
                         l6488 47F4                           l5688 3E28                           l5696 3EFE  
                         l6592 44FA                           l6920 2878                           l6904 2804  
                         l5960 1AF6                           l5952 1ADA                           l5936 1A40  
                         l5944 1A96                           l5928 19F2                           l5880 18B0  
                         l5872 1878                           l5864 1832                           l5856 1814  
                         l5848 17C6                           l5792 16DE                           l5784 16BE  
                         l5776 1694                           l5768 1664                           l6584 1606  
                         l6576 1500                           l6568 13B0                           l6752 3524  
                         l6744 34EA                           l6736 34BE                           l6728 3484  
                         l6680 31C2                           l6672 317C                           l6664 3136  
                         l6656 30F0                           l6648 30AA                           l5970 42CA  
                         l6850 2B16                           l6842 2AB4                           l6834 2A6C  
                         l6826 2A24                           l6818 29E0                           l6770 4422  
                         l6762 43FA                           l5698 3F06                           l6594 4506  
                         l6930 28BE                           l6922 288E                           l6906 281A  
                         l6914 2840                           l5962 1B04                           l5954 1AE8  
                         l5946 1AA6                           l5938 1A4C                           l5882 18B4  
                         l5874 1888                           l5866 1854                           l5890 18D4  
                         l5858 1818                           l5794 16EC                           l5786 16C4  
                         l5778 16A4                           l6578 1532                           l6746 3508  
                         l6738 34C6                           l6754 352A                           l6690 379C  
                         l6682 31DA                           l6674 3194                           l6666 314E  
                         l6658 3108                           l5980 4900                           l5972 42DA  
                         l6588 4896                           l6860 2B50                           l6852 2B18  
                         l6844 2ACC                           l6836 2A84                           l6828 2A3C  
                         l6764 43FE                           l6596 451E                           l6940 28FA  
                         l6932 28CA                           l6916 2856                           l6908 2826  
                         l5964 1B06                           l5956 1AEE                           l5948 1AB6  
                         l5892 18FA                           l5884 18C2                           l5876 1896  
                         l5868 1864                           l5796 16EE                           l5788 16D6  
                         l6780 3884                           l6772 3852                           l6756 353A  
                         l6748 3518                           l6692 37BE                           l6684 3766  
                         l6676 31A4                           l6668 315E                           l5990 4906  
                         l5982 48E8                           l5974 42FA                           l6870 2B84  
                         l6862 2B68                           l6854 2B1A                           l6846 2AE8  
                         l6838 2A9C                           l6766 4408                           l6598 423E  
                         l6942 2910                           l6950 2936                           l6934 28E0  
                         l6918 286C                           l6926 2892                           l5958 1AF0  
                         l5894 192E                           l5886 18C4                           l5878 18A4  
                         l5798 16FE                           l6790 38BA                           l6782 3886  
                         l6774 3858                           l6758 354A                           l6694 37E0  
                         l6686 376E                           l6678 31B6                           l5992 490A  
                         l5984 48EC                           l5968 42C2                           l6872 2B9C  
                         l6864 2B7E                           l6856 2B1C                           l6848 2B00  
                         l6768 4418                           l6952 294C                           l6944 291C  
                         l6928 28A8                           l6880 275C                           l5896 1930  
                         l5888 18CE                           l6792 38BC                           l6784 3888  
                         l6776 3870                           l6696 37EC                           l6688 3790  
                         l6970 48C6                           l5994 4306                           l5978 48FC  
                         l5986 48F2                           l6874 2BA4                           l6866 2B80  
                         l6858 2B34                           l6954 2962                           l6946 2932  
                         l6938 28E4                           l6962 2988                           l6890 279C  
                         l6882 2772                           l5898 1940                           l6794 38D4  
                         l6786 38B6                           l6778 3882                           l6698 380E  
                         l6972 48C8                           l5996 430A                           l5988 48F6  
                         l6876 2BBE                           l6868 2B82                           l6956 296E  
                         l6892 27B2                           l6884 277E                           l6980 4884  
                         l6796 38EA                           l6788 38B8                           l6974 48CA  
                         l6966 48B4                           l6990 47B8                           l5998 4312  
                         l6958 2984                           l6894 27C8                           l6886 2794  
                         l6878 2746                           l6982 488E                           l6798 38EC  
                         l6968 48BE                           l6992 47C2                           l6896 27D4  
                         l6888 2794                           l6984 4890                           l6976 4878  
                         l6994 47C4                           l6898 27EA                           l6986 4892  
                         l6978 4882                           l6996 47C8                           l6988 47B0  
                         l6998 47CA                           STR_1 0E8A                           STR_2 0EC3  
                         STR_3 0E01                           STR_4 0EC3                           STR_5 0E3B  
                         STR_6 0EC3                           STR_7 0E56                           STR_8 0EC3  
                         STR_9 0E1E                   _BAUD4CONbits 0EE9                           u5000 3038  
                         u5001 3034                           u5010 3048                           _T2PR 0FBC  
                         u5011 3044                           u5020 3058                           u5100 2E8A  
                         u5021 3054                           u5101 2E86                           u5030 3ADE  
                         u5110 2EAA                           u5031 3ADA                           u5111 2EA6  
                         u5120 481A                           u5040 3B54                           u5200 3FD6  
                         u6000 226C                           u5121 4816                           u5041 3B50  
                         u5201 3FD2                           u6001 2268                           u5130 4830  
                         u5210 48E0                           u5050 3206                           u6010 229A  
                         u5131 482C                           u5211 48DC                           u5051 3202  
                         u6011 2296                           u5060 32C2                           u5140 3DF2  
                         u6100 3BFE                           u6020 22B0                           u5300 1758  
                         u5220 1672                           u5061 32BE                           u5141 3DEE  
                         u6101 3BFA                           u6021 22AC                           u5301 1754  
                         u5221 166E                           u5070 2DB2                           u5150 3E10  
                         u6110 3690                           u6030 22C4                           u5310 17C6  
                         u5230 1684                           u5071 2DAE                           u5151 3E0C  
                         u6111 368C                           u6031 22C0                           u5311 17C2  
                         u5231 1680                           u5080 2E32                           u5160 3E4E  
                         u6120 36CE                           u6040 22DE                           u5400 18A4  
                         u5320 17DE                           u5240 1694                           u6200 3610  
                         u5081 2E2E                           u5161 3E4A                           u6121 36CA  
                         u6041 22DA                           u5401 18A0                           u5321 17D8  
                         u5241 1690                           u6201 360C                           u5090 2E56  
                         u5170 3E64                           u6130 36EC                           u6050 2326  
                         u5410 18C2                           u5330 17E0                           u5250 16D6  
                         u6210 3630                           u5091 2E52                           u5171 3E60  
                         u6131 36E8                           u6051 2322                           u5411 18BE  
                         u5251 16D2                           u6211 362C                           u4700 3C4E  
                         u5180 3F60                           u6140 370C                           u6060 2354  
                         u5500 1A00                           u5420 18FA                           u5340 1808  
                         u5260 16EC                           u6220 3640                           u6300 2D30  
                         u4701 3C4A                           u5181 3F5C                           u6141 3708  
                         u6061 2350                           u5501 19FC                           u5421 18F6  
                         u5341 1804                           u5261 16E8                           u6221 363C  
                         u6301 2D2C                           u4710 3C80                           u5190 3EE2  
                         u6150 375C                           u6070 238E                           u5510 1A16  
                         u5430 1940                           u5350 1826                           u5270 16FE  
                         u6310 2D6A                           u6230 2BEA                           u4711 3C7C  
                         u5191 3EDE                           u6151 3758                           u6071 238A  
                         u5511 1A12                           u5431 193C                           u5351 1822  
                         u5271 16FA                           u6311 2D66                           u6231 2BE6  
                         u7007 3186                           u4800 3A2C                           u4720 4384  
                         u6080 3B8C                           u5600 1B04                           u5520 1A2C  
                         u5440 1976                           u5360 1846                           u5280 170E  
                         u6160 3572                           u6320 2D78                           u6240 2BF8  
                         u6400 13E2                           u4801 3A28                           u4721 4380  
                         u6081 3B88                           u5601 1B00                           u5521 1A28  
                         u5441 1972                           u5361 1842                           u5281 170A  
                         u6161 356E                           u6321 2D74                           u6241 2BF4  
                         u6401 13DE                           u7017 31CC                           u4730 394E  
                         u4810 3A46                           u5610 42FA                           u6090 3BCA  
                         u5530 1A40                           u5450 1986                           u5370 1854  
                         u5290 174A                           u6170 35A6                           u6250 2C54  
                         u6410 1470                           u6330 1162                           u4731 394A  
                         u4811 3A42                           u5611 42F6                           u7107 4510  
                         u6091 3BC6                           u5531 1A3C                           u5451 1982  
                         u5371 1850                           u5291 1746                           u6251 2C50  
                         u6411 146C                           u6331 115E                           u7027 3844  
                         u5620 432E                           u4740 3968                           u4820 3A64  
                         u4900 3FF2                           u5700 243E                           u5540 1A5A  
                         u5460 19B2                           u5380 1864                           u6180 35D4  
                         u6260 2CAA                           u6420 1532                           u6340 1194  
                         u6500 3790                           u5621 4326                           u4741 3964  
                         u4821 3A60                           u4901 3FEE                           u7117 4736  
                         u5701 243A                           u5541 1A56                           u5461 19AE  
                         u5381 1860                           u6181 35D0                           u6261 2CA6  
                         u6421 152E                           u6341 1190                           u7037 43D4  
                         u6501 378C                           u4750 398E                           u4830 3A7A  
                         u4910 4010                           u5710 244E                           u5550 1A94  
                         u5470 19C2                           u5390 1896                           u6190 35E8  
                         u6270 2CF4                           u6430 1606                           u6350 11FE  
                         u6510 37BE                           u4751 398A                           u4831 3A76  
                         u4911 400C                           u7207 4766                           u7127 4542  
                         u5711 244A                           u5551 1A90                           u5471 19BE  
                         u5391 1892                           u6191 35E4                           u6175 359C  
                         u6271 2CF0                           u6431 1602                           u6351 11FA  
                         u7047 44AC                           u6511 37BA                           u5640 471E  
                         u4760 39AC                           u4840 3A9E                           u4680 3C18  
                         u6440 4254                           u4920 402C                           u5800 2608  
                         u5720 248E                           u5560 1AA6                           u5480 19DE  
                         u6280 2D12                           u6360 1264                           u6600 3508  
                         u6520 37E0                           u5641 471A                           u4761 39A8  
                         u4841 3A9A                           u4681 3C14                           u6441 4250  
                         u4921 4028                           u7217 46A0                           u7137 4574  
                         u5801 2604                           u5721 248A                           u5561 1AA2  
                         u5481 19DA                           u6281 2D0E                           u6361 1260  
                         u7057 3862                           u6601 3504                           u6521 37DC  
                         u4770 39C8                           u4690 3C28                           u4850 3CC2  
                         u4930 2F28                           u5810 261A                           u5730 24CE  
                         u5570 1AB6                           u5490 19EE                           u6290 2D22  
                         u6370 1296                           u6610 353A                           u5650 43F8  
                         u6530 380E                           u6450 309E                           u4771 39C4  
                         u4691 3C24                           u4851 3CBE                           u4931 2F22  
                         u7307 2A8E                           u7227 46D2                           u7147 45A6  
                         u5811 2616                           u5731 24CA                           u5571 1AB2  
                         u5491 19EA                           u6291 2D1E                           u6371 1292  
                         u7067 3892                           u6611 3536                           u5651 43F4  
                         u6531 380A                           u6451 309A                           u4780 39EE  
                         u4860 3CE0                           u4940 2F2A                           u6620 29C6  
                         u6700 27B2                           u5820 2648                           u5740 2544  
                         u5660 23C6                           u5900 1FAE                           u5580 1AD6  
                         u6380 1300                           u6540 406A                           u6460 30E4  
                         u4781 39EA                           u4861 3CDC                           u7317 2AF2  
                         u6621 29C2                           u7237 3F3C                           u7157 45D8  
                         u6701 27AE                           u5821 2644                           u5741 2540  
                         u5661 23C2                           u5901 1FAA                           u5581 1AD2  
                         u6381 12FC                           u7077 38C6                           u6541 4066  
                         u6461 30E0                           u5638 4330                           u4790 3A12  
                         u4870 3D26                           u4950 2F44                           u6630 2A22  
                         u6710 27C8                           u5830 265E                           u5750 2566  
                         u5670 23D8                           u5910 1FBE                           u5590 1AE8  
                         u6390 139A                           u6550 40A4                           u6470 312A  
                         u4791 3A0E                           u4871 3D22                           u4951 2F40  
                         u7327 2B5A                           u6631 2A1E                           u7247 4796  
                         u7167 3EBE                           u6711 27C4                           u5831 265A  
                         u5751 2562                           u5671 23D4                           u5911 1FBA  
                         u5591 1AE4                           u6391 1396                           u7087 38FA  
                         u6551 40A0                           u6471 3126                           u4880 3D36  
                         u4960 2F5A                           u6640 2A82                           u6800 294C  
                         u6720 2804                           u5840 2672                           u5760 2590  
                         u5680 23E8                           u5920 1FFE                           u6560 3462  
                         u6480 3170                           u4881 3D32                           u4961 2F56  
                         u7337 2BC8                           u6641 2A7E                           u7257 3E2E  
                         u7177 460A                           u7097 44DE                           u6801 2948  
                         u6721 2800                           u5841 266E                           u5761 258C  
                         u5681 23E4                           u5921 1FFA                           u6561 345E  
                         u6481 316C                           u4890 4470                           u4970 2FFC  
                         u6650 2AE2                           u6810 2962                           u6730 281A  
                         u5850 268C                           u5770 25B4                           u5690 242C  
                         u5930 2010                           u6570 3484                           u6490 31B6  
                         u7347 4702                           u4891 446C                           u4971 2FF8  
                         u6651 2ADE                           u7267 3FAC                           u7187 463C  
                         u6811 295E                           u6731 2816                           u5851 2688  
                         u5771 25B0                           u5691 2428                           u5931 200C  
                         u6571 3480                           u6491 31B2                           u4980 300E  
                         u6660 2B4A                           u6740 2856                           u5860 26D4  
                         u5780 25CA                           u5940 2020                           u6580 34BE  
                         u6820 3364                           u6900 1F3C                           u4981 300A  
                         u6661 2B46                           u7277 440E                           u7197 466E  
                         u6741 2852                           u5861 26D0                           u5781 25C6  
                         u5941 201C                           u6581 34BA                           u6821 3360  
                         u6901 1F38                           u4990 301E                           u6670 2BBE  
                         u6750 286C                           u5870 2704                           u5790 25E8  
                         u5950 2056                           u6590 34E0                           u6830 33FC  
                         u4991 301A                           u6671 2BBA                           u7287 29D2  
                         u6751 2868                           u5871 2700                           u5791 25E4  
                         u5951 2052                           u6591 34DC                           u6831 33F8  
                         u6760 28A8                           u6680 275C                           u5880 2732  
                         u5960 2066                           u6840 343E                           u7297 2A2E  
                         u6761 28A4                           u6681 2758                           u5881 272E  
                         u5961 2062                           u6841 343A                           u6770 28BE  
                         u6690 2772                           u5970 21E0                           u5890 1F9C  
                         u6850 1D70                           u6771 28BA                           u6691 276E  
                         u5891 1F98                           u6851 1D6C                           u6780 28FA  
                         u5980 223A                           u6860 1EBC                           u6781 28F6  
                         u5981 2236                           u6861 1EB8                           u6790 2910  
                         u5990 225A                           u6870 1F02                           u6791 290C  
                         u5991 2256                           u5975 21D6                           u6871 1EFE  
                         u6927 1BAC                           u6880 1F18                           u6881 1F14  
                         u6937 1D9C                           u6890 1F2E                           u6891 1F2A  
                         u6947 1DC0                           u6957 1DE2                           u6967 1ED2  
                         u6977 30B4                           u6987 30FA                           u6997 3140  
                         abs@a 0008                           _dbuf 0182                           _main 1B18  
                         _dtoa 2F14           convert_rgb2hue@cCurr 003F                           _prec 00C2  
                         _time 0200                           pad@i 0016                           pad@p 0013  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 005B  
                         _stop 3DD8                           prodh 0FF4                           prodl 0FF3  
                         start 003A               __end_of_ADC_init 48CE                ___fldiv@new_exp 002C  
       __end_of_color_read_Red 4106                   ___param_bank 0000                 reading_hue@hue 0046  
                        ??_abs 000A                          ??_pad 0015                  ___fltol@sign1 003C  
              __end_of___aldiv 355C                __end_of___fladd 1B18                          ?_main 0001  
                        ?_dtoa 0018                          _ADPCH 0F5F                __end_of___fldiv 2746  
              __end_of___awdiv 3A00                          STR_10 0EC3                          STR_11 0E71  
                        STR_12 0EC3                          STR_13 0EA2                          STR_14 0EB7  
              __end_of___awmod 3AB0                __end_of___flmul 23AC                __end_of___flsub 423C  
              __end_of___fltol 3662                          ?_stop 0014                ___awdiv@divisor 0004  
              __end_of___lwdiv 404C                          i1l652 0032                ___awdiv@counter 0006  
            ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024                          _TMR0H 0FD4  
                        _TMR0L 0FD3            ___lmul@multiplicand 0006                __end_of_left135 4658  
      __end_of_sendCharSerial4 48E6     __end_of_I2C_2_Master_Start 4906     __end_of_I2C_2_Master_Write 48F2  
                        _flags 00C4            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 3C08                          _fputs 4346                          pad@fp 0010  
                        _width 00C0                          _putch 4912                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 4750  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 0042  
              __end_of_moveRed 452C                          tablat 0FF5                __end_of_turn180 46EE  
                        ttemp5 005C                          ttemp6 005F                          ttemp7 0063  
                        status 0FD8                          wtemp8 005C                __end_of_sprintf 4462  
        convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 41F6          _I2C_2_Master_RepStart 4906  
              ?_color_read_Red 0006                __initialization 4280                   __end_of_main 1F82  
                 __end_of_dtoa 308C                   __end_of_stop 3E66          __end_of_moveLightBlue 4626  
                main@clear_max 0052                _get16bitTMR0val 4386                         ??_main 004A  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 3B5E                _reverseStraight 3766                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 47B0  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3426 001E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i1l3428 002E                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 442E                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2D8C    convert_rgb2hue@greencurrent 0068               __end_of_decision 2992  
                       _LowISR 0018                  ??_Timer0_init 0002                  main@path_step 0056  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031                         ___flge 3662  
                       ___fleq 3B5E                         ___lmul 404C                      ??___aldiv 0016  
                    ??___fladd 000A                         ___wmul 4832                      ??___fldiv 0023  
             backOneAndHalf@mL 0019                      ??___awdiv 0006               backOneAndHalf@mR 001A  
                    ??___awmod 0006                      ??___flmul 000A                         _action 013C  
                    ??___flsub 001A                      ??___fltol 0038                      ??___lwdiv 000C  
                       _left90 4750           read_prec_or_width@ap 0009                   ?_reverseTurn 001D  
                       clear_0 4298                         clear_1 42A4                         clear_2 42B0  
             ___awdiv@quotient 0008                ___awmod@divisor 0004                         _motorL 00E6  
                       _motorR 00DD                         isa$std 0001                ___awmod@counter 0006  
                    ??_left135 001B             send2USART@hue_char 0060                         pad@buf 0011  
             __end_of_right135 45F4                         dtoa@fp 0018               __end_of_moveBlue 46BC  
             __end_of_movePink 455E                         fputc@c 0002                         fputs@c 000D  
                       fputs@i 000E                         fputs@s 000A                      ??_right90 001B  
                 __mediumconst 0000        calibration_routine@cCal 0047                      ??_moveRed 001F  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074  
                       putch@c 0001               __end_of_vfprintf 4304                      ??_turn180 001B  
                       stop@mL 0014                         stop@mR 0015              ??_initDCmotorsPWM 0004  
                    ??_sprintf 0038               __end_of_turnLeft 3F62       get16bitTMR0val@path_step 0007  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 42B8       __end_of_color_read_Clear 41A6  
     __end_of_color_read_Green 4156         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 455E  
                ___rparam_used 0001                     ___fltol@f1 0034               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 43C2                  _fullSpeedBack 3F62  
                 __pidataBANK0 4914                  __end_of_fputc 3CB2                  __end_of_fputs 4386  
                __end_of_putch 4914        __end_of_reverseStraight 3852            __end_of_Timer0_init 47E0  
             reading_hue@cCurr 0042                     ??_ADC_init 0002                 main@clear_norm 0058  
                   backHalf@mL 0019                     backHalf@mR 001A                        ??_fputc 0005  
                      ??_fputs 000D                        ??_putch 0002                     __pbssBANK0 00AC  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 4590  
                      ?_LowISR 0001              _color_writetoaddr 4858                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0014                _convert_rgb2hue 0EC6                        ?___flge 0002  
                      ?___fleq 0002             ?_color_writetoaddr 0004                        ?___lmul 0002  
                _customDelayMs 43C2                        ?___wmul 0002                        ?_left90 0019  
        reverseTurn@actionStep 001F                 ___lmul@product 000A                      ?_backHalf 0019  
          ??_color_writetoaddr 0005                      ?___xxtofl 0002            _convert_rgb2hue$432 0080  
          _convert_rgb2hue$433 0084            _convert_rgb2hue$434 0088            _convert_rgb2hue$435 008C  
                    ?_decision 0021                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                    moveGreen@mL 001D  
                  moveGreen@mR 001E                ?_backOneAndHalf 0019         color_writetoaddr@value 0004  
             ??_color_read_Red 0008      __end_of_color_writetoaddr 4878                      _ADREFbits 0F58  
                    ?_right135 0019             _I2C_2_Master_Start 48FC                     _initUSART4 4878  
           _I2C_2_Master_Write 48E6                      ?_moveBlue 001D              main@clear_current 004E  
                      __Hparam 0000                      ?_movePink 001D                        __Lparam 0000  
            color_read_Red@tmp 000B                    moveWhite@mL 001D                    moveWhite@mR 001E  
    customDelayMs@milliseconds 0002                    _Timer0_init 47B0                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0007                        ___aldiv 3450  
                      ___fladd 1658                        ___fldiv 23AC                        ___awdiv 393C  
                      ___awmod 3A00                        ___flmul 1F82                        ___flsub 41F6  
                      ___fltol 355C            ?_I2C_2_Master_Start 0001                        ___lwdiv 3FD8  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E                   __psmallconst 0E00  
                      __pcinit 4280                     ??_backHalf 001B              __end_of_logAction 4280  
                      __ramtop 0E00               ?_reverseStraight 0017                     _send2USART 4896  
                    ?_turnLeft 0014                        _left135 4626                        __ptext0 1B18  
                      __ptext1 3340                        __ptext2 308C                        __ptext3 3766  
                      __ptext4 4910                        __ptext5 43C2                        __ptext6 4496  
                      __ptext7 404C                        __ptext8 3450                        __ptext9 3852  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0008                     ??___xxtofl 0006  
             ___awmod@dividend 0002                     ??_decision 0025         reverseStraight@delayMs 001F  
             ___aldiv@dividend 000E                        _right90 4720                      _T2HLTbits 0FBE  
                      _moveRed 44FA                  _RxBufWriteCnt 00C8                        _turn180 46BC  
                      _sprintf 442E                        main@hue 004C           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 42B8              __end_of_moveGreen 468A  
       reverseStraight@time_ms 0019              __end_of_moveWhite 44C8                        fputc@fp 0004  
      __end_of_convert_rgb2hue 1658                        fputs@fp 000C              ?_color_click_init 0001  
           _read_prec_or_width 3AB0                     _moveOrange 4590                     ??_right135 001B  
                   _moveYellow 44C8                ??_fullSpeedBack 0016                     ??_moveBlue 001F  
           ??_color_click_init 0006        convert_rgb2hue@clearmax 007C                     ??_movePink 001F  
             _colorCalibration 00D3            returnHome@path_step 0024              __end_of_vfpfcnvrt 2F14  
             ___aldiv@quotient 0018                        postdec2 0FDD            ?_read_prec_or_width 0008  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0028                     ??_vfprintf 0031        convert_rgb2hue@greenmax 006C  
                 _colorCurrent 00C9                     _returnHome 3340                _initDCmotorsPWM 3D48  
                   ??_turnLeft 0016                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 3EE4                    ___fladd@grs 0011                  ___xxtofl@sign 000A  
                  returnHome@i 002B                      _TRISAbits 0F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002E               convert_rgb2hue@r 00A0                    ___fldiv@rem 0027  
             fullSpeedAhead@mL 0002               fullSpeedAhead@mR 0003       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 0010                    _CCP1CONbits 0FAB  
          _calibration_routine 2992              ?_color_read_Clear 0006                   _EUSART4RXbuf 00AC  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002                ??_customDelayMs 0004  
           ??_color_read_Clear 0008             ??_color_read_Green 0008                 __end_of_LowISR 003A  
    convert_rgb2hue@redcurrent 0060                 __end_of___flge 3766                 __end_of___fleq 3C08  
               _fullSpeedAhead 4910                 __end_of___lmul 40B6                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 4858  
               __end_of_left90 4780                    ?_send2USART 0045           ?_calibration_routine 0047  
          color_read_Clear@tmp 000B            start_initialization 4280   calibration_routine@cal_state 0092  
                  __end_of_abs 4496                    __end_of_pad 3D48                  _TxBufWriteCnt 005A  
             ?_convert_rgb2hue 003E                    ?_moveOrange 001D                    ?_moveYellow 001D  
          color_read_Green@tmp 000B                       ??_LowISR 0001        __end_of_initDCmotorsPWM 3DD8  
                  vfprintf@fmt 002F         __end_of_fullSpeedAhead 4912                       ??___flge 000A  
                     ??___fleq 000A                       ??___lmul 000A                       ??___wmul 0006  
                     ??_left90 001B                    __pdataBANK0 00EF                    ?_returnHome 0022  
        ??_calibration_routine 0048                  _moveLightBlue 45F4                      ___fladd@a 0006  
                    ___fladd@b 0002                      ___fldiv@a 001F                      ___fldiv@b 001B  
                    ___flmul@a 0006                      ___flmul@b 0002                    __pbssCOMRAM 005A  
                    ___flsub@a 0016                      ___flsub@b 0012                  __pcstackBANK0 0060  
             ??_backOneAndHalf 001B              reverseStraight@mL 0017              reverseStraight@mR 0018  
        returnHome@action_turn 002A                  ??_reading_hue 0044                     right135@mL 0019  
                   right135@mR 001A               ___lwdiv@dividend 0008                      _dtoa$3073 001B  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0002                       ?___aldiv 000E  
                     ?___fladd 0002                       ?___fldiv 001B                       ?___awdiv 0002  
                     ?___awmod 0002                       ?___flmul 0002                       ?___flsub 0012  
                     ?___fltol 0034                       ?___lwdiv 0008                     moveBlue@mL 001D  
                   moveBlue@mR 001E                 ?_moveLightBlue 001D                    __pintcodelo 0018  
                     ?_left135 0019                   _readingIndex 00C5           I2C_2_Master_Read@ack 0004  
         I2C_2_Master_Read@tmp 0005                    __smallconst 0E00                     movePink@mL 001D  
                   movePink@mR 001E              _I2C_2_Master_Idle 480A                      _logAction 423C  
            _I2C_2_Master_Init 47E0              _I2C_2_Master_Read 4304                       ?_right90 0019  
            _I2C_2_Master_Stop 48F2                       ?_moveRed 001D                   _RxBufReadCnt 00C7  
                     _ADC_init 48B4             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010                       ?_turn180 0019  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D       initDCmotorsPWM@PWMperiod 0002  
                     ?_sprintf 0032                ___aldiv@divisor 0012              _sendStringSerial4 46EE  
          ??_I2C_2_Master_Idle 0002                ___aldiv@counter 0016            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _IPR0bits 0E1F                       _PIE0bits 0E29  
           ?_sendStringSerial4 0003                      _moveGreen 4658                       _PIE4bits 0E2D  
          __end_of_reading_hue 393C                       i1u235_20 002E                       i1u235_21 002A  
                    _moveWhite 4496                    turnRight@mL 0014                    turnRight@mR 0015  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0002  
                    left135@mL 0019                      left135@mR 001A              ??_sendCharSerial4 0002  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                ??_reverseTurn 0020                      _vfpfcnvrt 2D8C                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 4832      __end_of_I2C_2_Master_Init 480A      __end_of_I2C_2_Master_Read 4346  
            ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 48FC                   setMotorPWM@m 000F  
  I2C_2_Master_Write@data_byte 0003                    _ldrReadings 016E                     ?_logAction 0002  
            ??_color_read_Blue 0008                   _TxBufReadCnt 00C6                      _turnRight 3E66  
            ___lmul@multiplier 0002      __end_of_sendStringSerial4 4720                   moveOrange@mL 001D  
                 moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 4910             color_read_Blue@tmp 000B  
          __end_of_setMotorPWM 3340                   ??_initUSART4 0002                     ?_moveGreen 001D  
                   ?_moveWhite 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3FD8  
              ??_moveLightBlue 001F                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023                       _backHalf 4780                   ??_send2USART 0047  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00EF  
                   sprintf@fmt 0033                       ___xxtofl 2BD8                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6                       _decision 2746            __end_of_reverseTurn 31EC  
                    right90@mL 0019                      right90@mR 001A                ___lwdiv@divisor 000A  
           __end_of_initUSART4 4896                ___lwdiv@counter 000C                     ?_turnRight 0014  
                     __ptext10 0EC6                       __ptext11 2BD8                       __ptext20 3D48  
                     __ptext12 355C                       __ptext21 4386                       __ptext13 41F6  
                     __ptext30 3E66                       __ptext22 2746                       __ptext14 1658  
                     __ptext31 45F4                       __ptext23 44C8                       __ptext15 1F82  
                     __ptext40 3F62                       __ptext32 4626                       __ptext24 44FA  
                     __ptext16 3662                       __ptext41 31EC                       __ptext33 4658  
                     __ptext25 4720                       __ptext17 3B5E                       __ptext50 42C2  
                     __ptext42 3FD8                       __ptext34 4750                       __ptext26 452C  
                     __ptext18 23AC                       __ptext51 2D8C                       __ptext43 423C  
                     __ptext35 468A                       __ptext27 455E                       __ptext19 4878  
                     __ptext60 3A00                       __ptext52 3AB0                       __ptext44 43FA  
                     __ptext36 46BC                       __ptext28 4590                       __ptext61 393C  
                     __ptext53 4832                       __ptext45 4858                       __ptext37 3EE4  
                     __ptext29 45C2                       __ptext70 48FC                       __ptext62 46EE  
                     __ptext54 2F14                       __ptext46 47E0                       __ptext38 4780  
                     __ptext71 4906                       __ptext63 48CE                       __ptext55 3CB2  
                     __ptext47 2992                       __ptext39 3DD8                       __ptext72 4304  
                     __ptext64 40B6                       __ptext56 4346                       __ptext48 4896  
                     __ptext73 480A                       __ptext65 4106                       __ptext57 3C08  
                     __ptext49 442E                       __ptext74 47B0                       __ptext66 4156  
                     __ptext58 4912                       __ptext75 48B4                       __ptext67 41A6  
                     __ptext59 4462                       __ptext68 48E6                       __ptext69 48F2  
                  decision@hue 0021                      moveRed@mL 001D                      moveRed@mR 001E  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    _reading_hue 3852  
                reverseTurn@mL 001D                  reverseTurn@mR 001E                   ??_moveOrange 001F  
                   turnLeft@mL 0014                     turnLeft@mR 0015                   ??_moveYellow 001F  
           __end_of_send2USART 48B4                       _right135 45C2                       _moveBlue 468A  
                     _movePink 452C                     turnRight@i 0017          __end_of_customDelayMs 43FA  
                     isa$xinst 0000                       left90@mL 0019                       left90@mR 001A  
                   _RC4STAbits 0EE7              returnHome@time_ms 0026                       int$flags 005B  
                     _vfprintf 42C2                   ??_returnHome 0026                       _turnLeft 3EE4  
                    turn180@mL 0019                      turn180@mR 001A                    ??_logAction 0006  
                   _INTCONbits 0FF2                 customDelayMs@i 0005             __end_of_moveOrange 45C2  
           __end_of_moveYellow 44FA                    _setMotorPWM 31EC              ??_get16bitTMR0val 0009  
                     intlevel1 0000                      sprintf@ap 0038              decision@path_step 0023  
            ??_reverseStraight 001D               ??_fullSpeedAhead 0004  get16bitTMR0val@combined_value 000D  
           __end_of_returnHome 3450                    ??_moveGreen 001F                      turnLeft@i 0017  
                  ??_moveWhite 001F    __end_of_calibration_routine 2BD8    convert_rgb2hue@clearcurrent 0078  
                send2USART@hue 0045                    ??_vfpfcnvrt 0026                    _reverseTurn 308C  
             _color_click_init 43FA                       sprintf@f 0039                       sprintf@s 0032  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                   ___aldiv@sign 0017  
                  ??_turnRight 0016                  ___fladd@signs 000E                     _TX4STAbits 0EE8  
              _sendCharSerial4 48CE                   ___fladd@aexp 000F                   ___fladd@bexp 0010  
                 returnHome@mL 0022                   returnHome@mR 0023  
