

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 16:18:12 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    94   000000                     
    95                           ; Generated 21/07/2023 GMT
    96                           ; 
    97                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution. Publication is not required when
   111                           ;        this file is used in an embedded application.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC18F67K40 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129   000000                     
   130                           	psect	idataBANK0
   131   004610                     __pidataBANK0:
   132                           	callstack 0
   133                           
   134                           ;initializer for _dataFlag
   135   004610  01                 	db	1
   136   000000                     _TMR0H	set	4052
   137   000000                     _TX4REG	set	3812
   138   000000                     _RC4STAbits	set	3815
   139   000000                     _SP4BRGH	set	3814
   140   000000                     _LATHbits	set	3968
   141   000000                     _LATFbits	set	3966
   142   000000                     _TRISFbits	set	3974
   143   000000                     _TRISAbits	set	3969
   144   000000                     _TRISEbits	set	3973
   145   000000                     _TRISGbits	set	3975
   146   000000                     _TRISDbits	set	3972
   147   000000                     _PORTFbits	set	3982
   148   000000                     _SSP2CON2bits	set	3802
   149   000000                     _RX4PPS	set	3605
   150   000000                     _SSP2CLKPPS	set	3612
   151   000000                     _SSP2DATPPS	set	3613
   152   000000                     _ANSELDbits	set	3751
   153   000000                     _SSP2ADD	set	3798
   154   000000                     _SSP2CON1bits	set	3801
   155   000000                     _LATAbits	set	3961
   156   000000                     _LATEbits	set	3965
   157   000000                     _LATGbits	set	3967
   158   000000                     _LATCbits	set	3963
   159   000000                     _LATDbits	set	3964
   160   000000                     _CCPR2H	set	4006
   161   000000                     _CCPR1H	set	4010
   162   000000                     _RC4REG	set	3811
   163   000000                     _SP4BRGL	set	3813
   164   000000                     _TX4STAbits	set	3816
   165   000000                     _BAUD4CONbits	set	3817
   166   000000                     _SSP2CON2	set	3802
   167   000000                     _CCPR4H	set	3873
   168   000000                     _CCPR3H	set	3877
   169   000000                     _SSP2STAT	set	3800
   170   000000                     _ANSELFbits	set	3764
   171   000000                     _SSP2BUF	set	3797
   172   000000                     _IPR0bits	set	3615
   173   000000                     _PIE0bits	set	3625
   174   000000                     _PIE4bits	set	3629
   175   000000                     _PIR4bits	set	3639
   176   000000                     _RC0PPS	set	3682
   177   000000                     _RC7PPS	set	3689
   178   000000                     _RD5PPS	set	3695
   179   000000                     _RE2PPS	set	3700
   180   000000                     _RD6PPS	set	3696
   181   000000                     _CCP1CONbits	set	4011
   182   000000                     _CCPTMRS0bits	set	4013
   183   000000                     _T2PR	set	4028
   184   000000                     _T2CONbits	set	4029
   185   000000                     _T0CON0bits	set	4053
   186   000000                     _CCP2CONbits	set	4007
   187   000000                     _CCP3CONbits	set	3878
   188   000000                     _ADREFbits	set	3928
   189   000000                     _CCP4CONbits	set	3874
   190   000000                     _TRISHbits	set	3976
   191   000000                     _TRISCbits	set	3971
   192   000000                     _INTCONbits	set	4082
   193   000000                     _T0CON1bits	set	4054
   194   000000                     _ADPCH	set	3935
   195   000000                     _ADRESH	set	3940
   196   000000                     _ADCON0bits	set	3936
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _TMR0L	set	4051
   200   000000                     _T2CLKCONbits	set	4031
   201   000000                     _T2HLTbits	set	4030
   202   000000                     _PIR0bits	set	3635
   203                           
   204                           	psect	smallconst
   205   000E00                     __psmallconst:
   206                           	callstack 0
   207   000E00  00                 	db	0
   208   000E01                     STR_3:
   209                           
   210                           ; BSR set to: 14
   211   000E01  43                 	db	67	;'C'
   212   000E02  61                 	db	97	;'a'
   213   000E03  6C                 	db	108	;'l'
   214   000E04  69                 	db	105	;'i'
   215   000E05  62                 	db	98	;'b'
   216   000E06  72                 	db	114	;'r'
   217   000E07  61                 	db	97	;'a'
   218   000E08  74                 	db	116	;'t'
   219   000E09  69                 	db	105	;'i'
   220   000E0A  6F                 	db	111	;'o'
   221   000E0B  6E                 	db	110	;'n'
   222   000E0C  20                 	db	32
   223   000E0D  73                 	db	115	;'s'
   224   000E0E  74                 	db	116	;'t'
   225   000E0F  61                 	db	97	;'a'
   226   000E10  74                 	db	116	;'t'
   227   000E11  65                 	db	101	;'e'
   228   000E12  20                 	db	32
   229   000E13  3D                 	db	61	;'='
   230   000E14  20                 	db	32
   231   000E15  67                 	db	103	;'g'
   232   000E16  72                 	db	114	;'r'
   233   000E17  65                 	db	101	;'e'
   234   000E18  65                 	db	101	;'e'
   235   000E19  6E                 	db	110	;'n'
   236   000E1A  20                 	db	32
   237   000E1B  0A                 	db	10
   238   000E1C  0D                 	db	13
   239   000E1D  00                 	db	0
   240   000E1E                     STR_5:
   241                           
   242                           ; BSR set to: 14
   243   000E1E  43                 	db	67	;'C'
   244   000E1F  61                 	db	97	;'a'
   245   000E20  6C                 	db	108	;'l'
   246   000E21  69                 	db	105	;'i'
   247   000E22  62                 	db	98	;'b'
   248   000E23  72                 	db	114	;'r'
   249   000E24  61                 	db	97	;'a'
   250   000E25  74                 	db	116	;'t'
   251   000E26  69                 	db	105	;'i'
   252   000E27  6F                 	db	111	;'o'
   253   000E28  6E                 	db	110	;'n'
   254   000E29  20                 	db	32
   255   000E2A  73                 	db	115	;'s'
   256   000E2B  74                 	db	116	;'t'
   257   000E2C  61                 	db	97	;'a'
   258   000E2D  74                 	db	116	;'t'
   259   000E2E  65                 	db	101	;'e'
   260   000E2F  3D                 	db	61	;'='
   261   000E30  20                 	db	32
   262   000E31  62                 	db	98	;'b'
   263   000E32  6C                 	db	108	;'l'
   264   000E33  75                 	db	117	;'u'
   265   000E34  65                 	db	101	;'e'
   266   000E35  20                 	db	32
   267   000E36  0A                 	db	10
   268   000E37  0D                 	db	13
   269   000E38  00                 	db	0
   270   000E39                     STR_7:
   271                           
   272                           ; BSR set to: 14
   273   000E39  43                 	db	67	;'C'
   274   000E3A  61                 	db	97	;'a'
   275   000E3B  6C                 	db	108	;'l'
   276   000E3C  69                 	db	105	;'i'
   277   000E3D  62                 	db	98	;'b'
   278   000E3E  72                 	db	114	;'r'
   279   000E3F  61                 	db	97	;'a'
   280   000E40  74                 	db	116	;'t'
   281   000E41  69                 	db	105	;'i'
   282   000E42  6F                 	db	111	;'o'
   283   000E43  6E                 	db	110	;'n'
   284   000E44  20                 	db	32
   285   000E45  73                 	db	115	;'s'
   286   000E46  74                 	db	116	;'t'
   287   000E47  61                 	db	97	;'a'
   288   000E48  74                 	db	116	;'t'
   289   000E49  65                 	db	101	;'e'
   290   000E4A  20                 	db	32
   291   000E4B  3D                 	db	61	;'='
   292   000E4C  20                 	db	32
   293   000E4D  20                 	db	32
   294   000E4E  77                 	db	119	;'w'
   295   000E4F  68                 	db	104	;'h'
   296   000E50  69                 	db	105	;'i'
   297   000E51  74                 	db	116	;'t'
   298   000E52  65                 	db	101	;'e'
   299   000E53  00                 	db	0
   300   000E54                     STR_9:
   301                           
   302                           ; BSR set to: 14
   303   000E54  43                 	db	67	;'C'
   304   000E55  41                 	db	65	;'A'
   305   000E56  4C                 	db	76	;'L'
   306   000E57  49                 	db	73	;'I'
   307   000E58  42                 	db	66	;'B'
   308   000E59  52                 	db	82	;'R'
   309   000E5A  41                 	db	65	;'A'
   310   000E5B  54                 	db	84	;'T'
   311   000E5C  49                 	db	73	;'I'
   312   000E5D  4F                 	db	79	;'O'
   313   000E5E  4E                 	db	78	;'N'
   314   000E5F  20                 	db	32
   315   000E60  43                 	db	67	;'C'
   316   000E61  4F                 	db	79	;'O'
   317   000E62  4D                 	db	77	;'M'
   318   000E63  50                 	db	80	;'P'
   319   000E64  4C                 	db	76	;'L'
   320   000E65  45                 	db	69	;'E'
   321   000E66  54                 	db	84	;'T'
   322   000E67  45                 	db	69	;'E'
   323   000E68  44                 	db	68	;'D'
   324   000E69  20                 	db	32
   325   000E6A  0A                 	db	10
   326   000E6B  0D                 	db	13
   327   000E6C  00                 	db	0
   328   000E6D                     STR_1:
   329                           
   330                           ; BSR set to: 14
   331   000E6D  43                 	db	67	;'C'
   332   000E6E  61                 	db	97	;'a'
   333   000E6F  6C                 	db	108	;'l'
   334   000E70  69                 	db	105	;'i'
   335   000E71  62                 	db	98	;'b'
   336   000E72  72                 	db	114	;'r'
   337   000E73  61                 	db	97	;'a'
   338   000E74  74                 	db	116	;'t'
   339   000E75  69                 	db	105	;'i'
   340   000E76  6F                 	db	111	;'o'
   341   000E77  6E                 	db	110	;'n'
   342   000E78  20                 	db	32
   343   000E79  73                 	db	115	;'s'
   344   000E7A  74                 	db	116	;'t'
   345   000E7B  61                 	db	97	;'a'
   346   000E7C  74                 	db	116	;'t'
   347   000E7D  65                 	db	101	;'e'
   348   000E7E  20                 	db	32
   349   000E7F  3D                 	db	61	;'='
   350   000E80  20                 	db	32
   351   000E81  72                 	db	114	;'r'
   352   000E82  65                 	db	101	;'e'
   353   000E83  64                 	db	100	;'d'
   354   000E84  00                 	db	0
   355   000E85                     
   356                           ; BSR set to: 14
   357   000E85  56                 	db	86	;'V'
   358   000E86  6F                 	db	111	;'o'
   359   000E87  6C                 	db	108	;'l'
   360   000E88  74                 	db	116	;'t'
   361   000E89  61                 	db	97	;'a'
   362   000E8A  67                 	db	103	;'g'
   363   000E8B  65                 	db	101	;'e'
   364   000E8C  20                 	db	32
   365   000E8D  3D                 	db	61	;'='
   366   000E8E  20                 	db	32
   367   000E8F  25                 	db	37
   368   000E90  64                 	db	100	;'d'
   369   000E91  2E                 	db	46
   370   000E92  25                 	db	37
   371   000E93  30                 	db	48	;'0'
   372   000E94  32                 	db	50	;'2'
   373   000E95  64                 	db	100	;'d'
   374   000E96  2C                 	db	44
   375   000E97  20                 	db	32
   376   000E98  20                 	db	32
   377   000E99  00                 	db	0
   378   000E9A                     STR_12:
   379                           
   380                           ; BSR set to: 14
   381   000E9A  68                 	db	104	;'h'
   382   000E9B  75                 	db	117	;'u'
   383   000E9C  65                 	db	101	;'e'
   384   000E9D  3D                 	db	61	;'='
   385   000E9E  25                 	db	37
   386   000E9F  30                 	db	48	;'0'
   387   000EA0  33                 	db	51	;'3'
   388   000EA1  64                 	db	100	;'d'
   389   000EA2  2C                 	db	44
   390   000EA3  20                 	db	32
   391   000EA4  20                 	db	32
   392   000EA5  00                 	db	0
   393   000EA6                     STR_2:
   394                           
   395                           ; BSR set to: 14
   396   000EA6  2E                 	db	46
   397   000EA7  00                 	db	0
   398   000EA8  00                 	db	0	; dummy byte at the end
   399   000000                     
   400                           ; #config settings
   401                           
   402                           	psect	cinit
   403   00406E                     __pcinit:
   404                           	callstack 0
   405   00406E                     start_initialization:
   406                           	callstack 0
   407   00406E                     __initialization:
   408                           	callstack 0
   409                           
   410                           ; Initialize objects allocated to BANK0 (1 bytes)
   411                           ; load TBLPTR registers with __pidataBANK0
   412   00406E  0E10               	movlw	low __pidataBANK0
   413   004070  6EF6               	movwf	tblptrl,c
   414   004072  0E46               	movlw	high __pidataBANK0
   415   004074  6EF7               	movwf	tblptrh,c
   416   004076  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   417   004078  6EF8               	movwf	tblptru,c
   418   00407A  0009               	tblrd		*+	;fetch initializer
   419   00407C  CFF5 F0ED          	movff	tablat,__pdataBANK0
   420                           
   421                           ; Clear objects allocated to BANK2 (60 bytes)
   422   004080  EE02  F000         	lfsr	0,__pbssBANK2
   423   004084  0E3C               	movlw	60
   424   004086                     clear_0:
   425   004086  6AEE               	clrf	postinc0,c
   426   004088  06E8               	decf	wreg,f,c
   427   00408A  E1FD               	bnz	clear_0
   428                           
   429                           ; Clear objects allocated to BANK1 (222 bytes)
   430   00408C  EE01  F000         	lfsr	0,__pbssBANK1
   431   004090  0EDE               	movlw	222
   432   004092                     clear_1:
   433   004092  6AEE               	clrf	postinc0,c
   434   004094  06E8               	decf	wreg,f,c
   435   004096  E1FD               	bnz	clear_1
   436                           
   437                           ; Clear objects allocated to BANK0 (49 bytes)
   438   004098  EE00  F0BC         	lfsr	0,__pbssBANK0
   439   00409C  0E31               	movlw	49
   440   00409E                     clear_2:
   441   00409E  6AEE               	clrf	postinc0,c
   442   0040A0  06E8               	decf	wreg,f,c
   443   0040A2  E1FD               	bnz	clear_2
   444                           
   445                           ; Clear objects allocated to COMRAM (3 bytes)
   446   0040A4  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   447   0040A6  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   448   0040A8  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   449   0040AA                     end_of_initialization:
   450                           	callstack 0
   451   0040AA                     __end_of__initialization:
   452                           	callstack 0
   453   0040AA  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   454   0040AC  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   455   0040AE  0100               	movlb	0
   456   0040B0  EF60  F011         	goto	_main	;jump to C main() function
   457                           
   458                           	psect	bssCOMRAM
   459   00004F                     __pbssCOMRAM:
   460                           	callstack 0
   461   00004F                     _TxBufReadCnt:
   462                           	callstack 0
   463   00004F                     	ds	1
   464   000050                     _TxBufWriteCnt:
   465                           	callstack 0
   466   000050                     	ds	1
   467   000051                     _RxBufWriteCnt:
   468                           	callstack 0
   469   000051                     	ds	1
   470                           
   471                           	psect	bssBANK0
   472   0000BC                     __pbssBANK0:
   473                           	callstack 0
   474   0000BC                     _hue:
   475                           	callstack 0
   476   0000BC                     	ds	8
   477   0000C4                     _width:
   478                           	callstack 0
   479   0000C4                     	ds	2
   480   0000C6                     _prec:
   481                           	callstack 0
   482   0000C6                     	ds	2
   483   0000C8                     _flags:
   484                           	callstack 0
   485   0000C8                     	ds	1
   486   0000C9                     _readingIndex:
   487                           	callstack 0
   488   0000C9                     	ds	1
   489   0000CA                     _RxBufReadCnt:
   490                           	callstack 0
   491   0000CA                     	ds	1
   492   0000CB                     _motorR:
   493                           	callstack 0
   494   0000CB                     	ds	9
   495   0000D4                     _motorL:
   496                           	callstack 0
   497   0000D4                     	ds	9
   498   0000DD                     _colorCurrent:
   499                           	callstack 0
   500   0000DD                     	ds	8
   501   0000E5                     _colorCalibration:
   502                           	callstack 0
   503   0000E5                     	ds	8
   504                           
   505                           	psect	dataBANK0
   506   0000ED                     __pdataBANK0:
   507                           	callstack 0
   508   0000ED                     _dataFlag:
   509                           	callstack 0
   510   0000ED                     	ds	1
   511                           
   512                           	psect	bssBANK1
   513   000100                     __pbssBANK1:
   514                           	callstack 0
   515   000100                     _ldrReadings:
   516                           	callstack 0
   517   000100                     	ds	20
   518   000114                     _EUSART4RXbuf:
   519                           	callstack 0
   520   000114                     	ds	20
   521   000128                     _path:
   522                           	callstack 0
   523   000128                     	ds	150
   524   0001BE                     _dbuf:
   525                           	callstack 0
   526   0001BE                     	ds	32
   527                           
   528                           	psect	bssBANK2
   529   000200                     __pbssBANK2:
   530                           	callstack 0
   531   000200                     _EUSART4TXbuf:
   532                           	callstack 0
   533   000200                     	ds	60
   534                           
   535                           	psect	cstackBANK0
   536   000060                     __pcstackBANK0:
   537                           	callstack 0
   538   000060                     convert_rgb2hue@redcurrent:
   539                           	callstack 0
   540   000060                     calibration_routine@cal_state:
   541                           	callstack 0
   542   000060                     send2USART@hue_char:
   543                           	callstack 0
   544                           
   545                           ; 50 bytes @ 0x0
   546   000060                     	ds	4
   547   000064                     convert_rgb2hue@redmax:
   548                           	callstack 0
   549                           
   550                           ; 4 bytes @ 0x4
   551   000064                     	ds	4
   552   000068                     convert_rgb2hue@greencurrent:
   553                           	callstack 0
   554                           
   555                           ; 4 bytes @ 0x8
   556   000068                     	ds	4
   557   00006C                     convert_rgb2hue@greenmax:
   558                           	callstack 0
   559                           
   560                           ; 4 bytes @ 0xC
   561   00006C                     	ds	4
   562   000070                     convert_rgb2hue@bluecurrent:
   563                           	callstack 0
   564                           
   565                           ; 4 bytes @ 0x10
   566   000070                     	ds	4
   567   000074                     convert_rgb2hue@bluemax:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0x14
   571   000074                     	ds	4
   572   000078                     convert_rgb2hue@clearcurrent:
   573                           	callstack 0
   574                           
   575                           ; 4 bytes @ 0x18
   576   000078                     	ds	4
   577   00007C                     convert_rgb2hue@clearmax:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x1C
   581   00007C                     	ds	4
   582   000080                     _convert_rgb2hue$428:
   583                           	callstack 0
   584                           
   585                           ; 4 bytes @ 0x20
   586   000080                     	ds	4
   587   000084                     _convert_rgb2hue$429:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x24
   591   000084                     	ds	4
   592   000088                     _convert_rgb2hue$430:
   593                           	callstack 0
   594                           
   595                           ; 4 bytes @ 0x28
   596   000088                     	ds	4
   597   00008C                     _convert_rgb2hue$431:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x2C
   601   00008C                     	ds	4
   602   000090                     convert_rgb2hue@min:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x30
   606   000090                     	ds	4
   607   000094                     convert_rgb2hue@diff:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x34
   611   000094                     	ds	4
   612   000098                     convert_rgb2hue@max:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x38
   616   000098                     	ds	4
   617   00009C                     convert_rgb2hue@hue:
   618                           	callstack 0
   619                           
   620                           ; 4 bytes @ 0x3C
   621   00009C                     	ds	4
   622   0000A0                     convert_rgb2hue@r:
   623                           	callstack 0
   624                           
   625                           ; 4 bytes @ 0x40
   626   0000A0                     	ds	4
   627   0000A4                     convert_rgb2hue@g:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x44
   631   0000A4                     	ds	4
   632   0000A8                     convert_rgb2hue@b:
   633                           	callstack 0
   634                           
   635                           ; 4 bytes @ 0x48
   636   0000A8                     	ds	4
   637   0000AC                     main@maximum:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x4C
   641   0000AC                     	ds	4
   642   0000B0                     main@time:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x50
   646   0000B0                     	ds	2
   647   0000B2                     main@current:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0x52
   651   0000B2                     	ds	4
   652   0000B6                     main@clear_norm:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x56
   656   0000B6                     	ds	2
   657   0000B8                     main@hue:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x58
   661   0000B8                     	ds	2
   662   0000BA                     main@path_length:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x5A
   666   0000BA                     	ds	2
   667                           
   668                           	psect	cstackCOMRAM
   669   000001                     __pcstackCOMRAM:
   670                           	callstack 0
   671   000001                     ??_LowISR:
   672   000001                     
   673                           ; 1 bytes @ 0x0
   674   000001                     	ds	1
   675   000002                     ??_I2C_2_Master_Idle:
   676   000002                     ?_get16bitTMR0val:
   677                           	callstack 0
   678   000002                     ?___wmul:
   679                           	callstack 0
   680   000002                     ?___awdiv:
   681                           	callstack 0
   682   000002                     ?___awmod:
   683                           	callstack 0
   684   000002                     ?___fladd:
   685                           	callstack 0
   686   000002                     ?___flmul:
   687                           	callstack 0
   688   000002                     ?___xxtofl:
   689                           	callstack 0
   690   000002                     sendCharSerial4@charToSend:
   691                           	callstack 0
   692   000002                     initDCmotorsPWM@PWMperiod:
   693                           	callstack 0
   694   000002                     customDelayMs@milliseconds:
   695                           	callstack 0
   696   000002                     ___wmul@multiplier:
   697                           	callstack 0
   698   000002                     ___awdiv@dividend:
   699                           	callstack 0
   700   000002                     ___awmod@dividend:
   701                           	callstack 0
   702   000002                     fputc@c:
   703                           	callstack 0
   704   000002                     ___fleq@ff1:
   705                           	callstack 0
   706   000002                     ___flge@ff1:
   707                           	callstack 0
   708   000002                     ___fladd@b:
   709                           	callstack 0
   710   000002                     ___flmul@b:
   711                           	callstack 0
   712   000002                     ___xxtofl@val:
   713                           	callstack 0
   714                           
   715                           ; 4 bytes @ 0x1
   716   000002                     	ds	1
   717   000003                     ??_I2C_2_Master_Read:
   718   000003                     I2C_2_Master_Write@data_byte:
   719                           	callstack 0
   720   000003                     sendStringSerial4@string:
   721                           	callstack 0
   722                           
   723                           ; 1 bytes @ 0x2
   724   000003                     	ds	1
   725   000004                     ??_get16bitTMR0val:
   726   000004                     ??_customDelayMs:
   727   000004                     color_writetoaddr@value:
   728                           	callstack 0
   729   000004                     I2C_2_Master_Read@ack:
   730                           	callstack 0
   731   000004                     fputc@fp:
   732                           	callstack 0
   733   000004                     ___wmul@multiplicand:
   734                           	callstack 0
   735   000004                     ___awdiv@divisor:
   736                           	callstack 0
   737   000004                     ___awmod@divisor:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x3
   741   000004                     	ds	1
   742   000005                     ??_fputc:
   743   000005                     color_writetoaddr@address:
   744                           	callstack 0
   745   000005                     I2C_2_Master_Read@tmp:
   746                           	callstack 0
   747   000005                     customDelayMs@i:
   748                           	callstack 0
   749                           
   750                           ; 2 bytes @ 0x4
   751   000005                     	ds	1
   752   000006                     ??_color_click_init:
   753   000006                     ??___xxtofl:
   754   000006                     ?_color_read_Red:
   755                           	callstack 0
   756   000006                     ?_color_read_Green:
   757                           	callstack 0
   758   000006                     ?_color_read_Blue:
   759                           	callstack 0
   760   000006                     ?_color_read_Clear:
   761                           	callstack 0
   762   000006                     ___awdiv@counter:
   763                           	callstack 0
   764   000006                     ___awmod@counter:
   765                           	callstack 0
   766   000006                     ___wmul@product:
   767                           	callstack 0
   768   000006                     ___fleq@ff2:
   769                           	callstack 0
   770   000006                     ___flge@ff2:
   771                           	callstack 0
   772   000006                     ___fladd@a:
   773                           	callstack 0
   774   000006                     ___flmul@a:
   775                           	callstack 0
   776                           
   777                           ; 4 bytes @ 0x5
   778   000006                     	ds	1
   779   000007                     ___awdiv@sign:
   780                           	callstack 0
   781   000007                     ___awmod@sign:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x6
   785   000007                     	ds	1
   786   000008                     ??_color_read_Red:
   787   000008                     ??_color_read_Green:
   788   000008                     ??_color_read_Blue:
   789   000008                     ??_color_read_Clear:
   790   000008                     ?_logAction:
   791                           	callstack 0
   792   000008                     ?_abs:
   793                           	callstack 0
   794   000008                     ?___lwdiv:
   795                           	callstack 0
   796   000008                     ?_read_prec_or_width:
   797                           	callstack 0
   798   000008                     read_prec_or_width@fmt:
   799                           	callstack 0
   800   000008                     logAction@time:
   801                           	callstack 0
   802   000008                     get16bitTMR0val@combined_value:
   803                           	callstack 0
   804   000008                     ___awdiv@quotient:
   805                           	callstack 0
   806   000008                     ___lwdiv@dividend:
   807                           	callstack 0
   808   000008                     abs@a:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x7
   812   000008                     	ds	1
   813   000009                     read_prec_or_width@ap:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x8
   817   000009                     	ds	1
   818   00000A                     ??___fladd:
   819   00000A                     ??___flmul:
   820   00000A                     ??_abs:
   821   00000A                     ??___fleq:
   822   00000A                     ??___flge:
   823   00000A                     ___xxtofl@sign:
   824                           	callstack 0
   825   00000A                     read_prec_or_width@c:
   826                           	callstack 0
   827   00000A                     logAction@path_length:
   828                           	callstack 0
   829   00000A                     ___lwdiv@divisor:
   830                           	callstack 0
   831   00000A                     fputs@s:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x9
   835   00000A                     	ds	1
   836   00000B                     ___xxtofl@exp:
   837                           	callstack 0
   838   00000B                     color_read_Red@tmp:
   839                           	callstack 0
   840   00000B                     color_read_Green@tmp:
   841                           	callstack 0
   842   00000B                     color_read_Blue@tmp:
   843                           	callstack 0
   844   00000B                     color_read_Clear@tmp:
   845                           	callstack 0
   846   00000B                     read_prec_or_width@n:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0xA
   850   00000B                     	ds	1
   851   00000C                     fputs@fp:
   852                           	callstack 0
   853   00000C                     logAction@path:
   854                           	callstack 0
   855   00000C                     ___lwdiv@quotient:
   856                           	callstack 0
   857   00000C                     ___xxtofl@arg:
   858                           	callstack 0
   859                           
   860                           ; 4 bytes @ 0xB
   861   00000C                     	ds	1
   862   00000D                     fputs@c:
   863                           	callstack 0
   864                           
   865                           ; 1 bytes @ 0xC
   866   00000D                     	ds	1
   867   00000E                     ??_logAction:
   868   00000E                     ___lwdiv@counter:
   869                           	callstack 0
   870   00000E                     ___fladd@signs:
   871                           	callstack 0
   872   00000E                     ___flmul@sign:
   873                           	callstack 0
   874   00000E                     fputs@i:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0xD
   878   00000E                     	ds	1
   879   00000F                     setMotorPWM@m:
   880                           	callstack 0
   881   00000F                     ___fladd@aexp:
   882                           	callstack 0
   883   00000F                     ___flmul@grs:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0xE
   887   00000F                     	ds	1
   888   000010                     ??_setMotorPWM:
   889   000010                     logAction@action:
   890                           	callstack 0
   891   000010                     ___fladd@bexp:
   892                           	callstack 0
   893   000010                     pad@fp:
   894                           	callstack 0
   895                           
   896                           ; 1 bytes @ 0xF
   897   000010                     	ds	1
   898   000011                     ___fladd@grs:
   899                           	callstack 0
   900   000011                     pad@buf:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x10
   904   000011                     	ds	1
   905   000012                     ?___flsub:
   906                           	callstack 0
   907   000012                     setMotorPWM@posDuty:
   908                           	callstack 0
   909   000012                     ___flsub@b:
   910                           	callstack 0
   911                           
   912                           ; 4 bytes @ 0x11
   913   000012                     	ds	1
   914   000013                     setMotorPWM@negDuty:
   915                           	callstack 0
   916   000013                     ___flmul@aexp:
   917                           	callstack 0
   918   000013                     pad@p:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0x12
   922   000013                     	ds	1
   923   000014                     stop@mL:
   924                           	callstack 0
   925   000014                     turnLeft@mL:
   926                           	callstack 0
   927   000014                     turnRight@mL:
   928                           	callstack 0
   929   000014                     fullSpeedAhead@mL:
   930                           	callstack 0
   931   000014                     fullSpeedBack@mL:
   932                           	callstack 0
   933   000014                     ___flmul@bexp:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0x13
   937   000014                     	ds	1
   938   000015                     ??_pad:
   939   000015                     stop@mR:
   940                           	callstack 0
   941   000015                     turnLeft@mR:
   942                           	callstack 0
   943   000015                     turnRight@mR:
   944                           	callstack 0
   945   000015                     fullSpeedAhead@mR:
   946                           	callstack 0
   947   000015                     fullSpeedBack@mR:
   948                           	callstack 0
   949   000015                     ___flmul@prod:
   950                           	callstack 0
   951                           
   952                           ; 4 bytes @ 0x14
   953   000015                     	ds	1
   954   000016                     ??_turnLeft:
   955   000016                     ??_turnRight:
   956   000016                     ??_fullSpeedAhead:
   957   000016                     ??_fullSpeedBack:
   958   000016                     pad@i:
   959                           	callstack 0
   960   000016                     ___flsub@a:
   961                           	callstack 0
   962                           
   963                           ; 4 bytes @ 0x15
   964   000016                     	ds	1
   965   000017                     turnLeft@i:
   966                           	callstack 0
   967   000017                     turnRight@i:
   968                           	callstack 0
   969   000017                     fullSpeedAhead@power:
   970                           	callstack 0
   971   000017                     fullSpeedBack@power:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x16
   975   000017                     	ds	1
   976   000018                     dtoa@fp:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x17
   980   000018                     	ds	1
   981   000019                     right90@mL:
   982                           	callstack 0
   983   000019                     left90@mL:
   984                           	callstack 0
   985   000019                     turn180@mL:
   986                           	callstack 0
   987   000019                     right135@mL:
   988                           	callstack 0
   989   000019                     left135@mL:
   990                           	callstack 0
   991   000019                     backHalf@mL:
   992                           	callstack 0
   993   000019                     backOneAndHalf@mL:
   994                           	callstack 0
   995   000019                     reverseStraight@mL:
   996                           	callstack 0
   997   000019                     ___flmul@temp:
   998                           	callstack 0
   999   000019                     dtoa@d:
  1000                           	callstack 0
  1001                           
  1002                           ; 2 bytes @ 0x18
  1003   000019                     	ds	1
  1004   00001A                     right90@mR:
  1005                           	callstack 0
  1006   00001A                     left90@mR:
  1007                           	callstack 0
  1008   00001A                     turn180@mR:
  1009                           	callstack 0
  1010   00001A                     right135@mR:
  1011                           	callstack 0
  1012   00001A                     left135@mR:
  1013                           	callstack 0
  1014   00001A                     backHalf@mR:
  1015                           	callstack 0
  1016   00001A                     backOneAndHalf@mR:
  1017                           	callstack 0
  1018   00001A                     reverseStraight@mR:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x19
  1022   00001A                     	ds	1
  1023   00001B                     ??_right90:
  1024   00001B                     ??_left90:
  1025   00001B                     ??_turn180:
  1026   00001B                     ??_right135:
  1027   00001B                     ??_left135:
  1028   00001B                     ??_backHalf:
  1029   00001B                     ??_backOneAndHalf:
  1030   00001B                     ?___fldiv:
  1031                           	callstack 0
  1032   00001B                     reverseStraight@time:
  1033                           	callstack 0
  1034   00001B                     _dtoa$3062:
  1035                           	callstack 0
  1036   00001B                     ___fldiv@b:
  1037                           	callstack 0
  1038                           
  1039                           ; 4 bytes @ 0x1A
  1040   00001B                     	ds	2
  1041   00001D                     moveRed@mL:
  1042                           	callstack 0
  1043   00001D                     moveGreen@mL:
  1044                           	callstack 0
  1045   00001D                     moveBlue@mL:
  1046                           	callstack 0
  1047   00001D                     moveYellow@mL:
  1048                           	callstack 0
  1049   00001D                     movePink@mL:
  1050                           	callstack 0
  1051   00001D                     moveOrange@mL:
  1052                           	callstack 0
  1053   00001D                     moveLightBlue@mL:
  1054                           	callstack 0
  1055   00001D                     moveWhite@mL:
  1056                           	callstack 0
  1057   00001D                     reverseTurn@mL:
  1058                           	callstack 0
  1059   00001D                     dtoa@p:
  1060                           	callstack 0
  1061   00001D                     reverseStraight@delayMs:
  1062                           	callstack 0
  1063                           
  1064                           ; 2 bytes @ 0x1C
  1065   00001D                     	ds	1
  1066   00001E                     moveRed@mR:
  1067                           	callstack 0
  1068   00001E                     moveGreen@mR:
  1069                           	callstack 0
  1070   00001E                     moveBlue@mR:
  1071                           	callstack 0
  1072   00001E                     moveYellow@mR:
  1073                           	callstack 0
  1074   00001E                     movePink@mR:
  1075                           	callstack 0
  1076   00001E                     moveOrange@mR:
  1077                           	callstack 0
  1078   00001E                     moveLightBlue@mR:
  1079                           	callstack 0
  1080   00001E                     moveWhite@mR:
  1081                           	callstack 0
  1082   00001E                     reverseTurn@mR:
  1083                           	callstack 0
  1084   00001E                     dtoa@w:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x1D
  1088   00001E                     	ds	1
  1089   00001F                     ??_moveWhite:
  1090   00001F                     reverseTurn@turnDirection:
  1091                           	callstack 0
  1092   00001F                     moveRed@path_length:
  1093                           	callstack 0
  1094   00001F                     moveGreen@path_length:
  1095                           	callstack 0
  1096   00001F                     moveBlue@path_length:
  1097                           	callstack 0
  1098   00001F                     moveYellow@path_length:
  1099                           	callstack 0
  1100   00001F                     movePink@path_length:
  1101                           	callstack 0
  1102   00001F                     moveOrange@path_length:
  1103                           	callstack 0
  1104   00001F                     moveLightBlue@path_length:
  1105                           	callstack 0
  1106   00001F                     ___fldiv@a:
  1107                           	callstack 0
  1108                           
  1109                           ; 4 bytes @ 0x1E
  1110   00001F                     	ds	1
  1111   000020                     dtoa@s:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x1F
  1115   000020                     	ds	1
  1116   000021                     ??_moveRed:
  1117   000021                     ??_moveGreen:
  1118   000021                     ??_moveBlue:
  1119   000021                     ??_moveLightBlue:
  1120   000021                     ??_moveYellow:
  1121   000021                     ??_moveOrange:
  1122   000021                     ??_movePink:
  1123   000021                     returnHome@mL:
  1124                           	callstack 0
  1125   000021                     dtoa@i:
  1126                           	callstack 0
  1127                           
  1128                           ; 2 bytes @ 0x20
  1129   000021                     	ds	1
  1130   000022                     returnHome@mR:
  1131                           	callstack 0
  1132                           
  1133                           ; 1 bytes @ 0x21
  1134   000022                     	ds	1
  1135   000023                     ??___fldiv:
  1136   000023                     vfpfcnvrt@fp:
  1137                           	callstack 0
  1138   000023                     returnHome@path:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x22
  1142   000023                     	ds	1
  1143   000024                     vfpfcnvrt@fmt:
  1144                           	callstack 0
  1145                           
  1146                           ; 1 bytes @ 0x23
  1147   000024                     	ds	1
  1148   000025                     vfpfcnvrt@ap:
  1149                           	callstack 0
  1150   000025                     returnHome@pathLength:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x24
  1154   000025                     	ds	1
  1155   000026                     ??_vfpfcnvrt:
  1156                           
  1157                           ; 1 bytes @ 0x25
  1158   000026                     	ds	1
  1159   000027                     ??_returnHome:
  1160   000027                     ___fldiv@rem:
  1161                           	callstack 0
  1162                           
  1163                           ; 4 bytes @ 0x26
  1164   000027                     	ds	1
  1165   000028                     vfpfcnvrt@convarg:
  1166                           	callstack 0
  1167                           
  1168                           ; 4 bytes @ 0x27
  1169   000028                     	ds	1
  1170   000029                     returnHome@time:
  1171                           	callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x28
  1174   000029                     	ds	2
  1175   00002B                     returnHome@action:
  1176                           	callstack 0
  1177   00002B                     ___fldiv@sign:
  1178                           	callstack 0
  1179                           
  1180                           ; 1 bytes @ 0x2A
  1181   00002B                     	ds	1
  1182   00002C                     vfpfcnvrt@done:
  1183                           	callstack 0
  1184   00002C                     returnHome@i:
  1185                           	callstack 0
  1186   00002C                     ___fldiv@new_exp:
  1187                           	callstack 0
  1188                           
  1189                           ; 2 bytes @ 0x2B
  1190   00002C                     	ds	1
  1191   00002D                     vfpfcnvrt@cp:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x2C
  1195   00002D                     	ds	1
  1196   00002E                     ?_vfprintf:
  1197                           	callstack 0
  1198   00002E                     vfprintf@fp:
  1199                           	callstack 0
  1200   00002E                     ___fldiv@grs:
  1201                           	callstack 0
  1202                           
  1203                           ; 4 bytes @ 0x2D
  1204   00002E                     	ds	1
  1205   00002F                     vfprintf@fmt:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2E
  1209   00002F                     	ds	1
  1210   000030                     vfprintf@ap:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x2F
  1214   000030                     	ds	1
  1215   000031                     vfprintf@cfmt:
  1216                           	callstack 0
  1217                           
  1218                           ; 1 bytes @ 0x30
  1219   000031                     	ds	1
  1220   000032                     ?_sprintf:
  1221                           	callstack 0
  1222   000032                     ___fldiv@bexp:
  1223                           	callstack 0
  1224   000032                     sprintf@s:
  1225                           	callstack 0
  1226                           
  1227                           ; 1 bytes @ 0x31
  1228   000032                     	ds	1
  1229   000033                     ___fldiv@aexp:
  1230                           	callstack 0
  1231   000033                     sprintf@fmt:
  1232                           	callstack 0
  1233                           
  1234                           ; 1 bytes @ 0x32
  1235   000033                     	ds	1
  1236   000034                     ?___fltol:
  1237                           	callstack 0
  1238   000034                     ___fltol@f1:
  1239                           	callstack 0
  1240                           
  1241                           ; 4 bytes @ 0x33
  1242   000034                     	ds	4
  1243   000038                     ??___fltol:
  1244   000038                     sprintf@ap:
  1245                           	callstack 0
  1246                           
  1247                           ; 1 bytes @ 0x37
  1248   000038                     	ds	1
  1249   000039                     sprintf@f:
  1250                           	callstack 0
  1251                           
  1252                           ; 12 bytes @ 0x38
  1253   000039                     	ds	3
  1254   00003C                     ___fltol@sign1:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x3B
  1258   00003C                     	ds	1
  1259   00003D                     ___fltol@exp1:
  1260                           	callstack 0
  1261                           
  1262                           ; 1 bytes @ 0x3C
  1263   00003D                     	ds	1
  1264   00003E                     ?_convert_rgb2hue:
  1265                           	callstack 0
  1266   00003E                     convert_rgb2hue@cMax:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x3D
  1270   00003E                     	ds	1
  1271   00003F                     convert_rgb2hue@cCurr:
  1272                           	callstack 0
  1273                           
  1274                           ; 1 bytes @ 0x3E
  1275   00003F                     	ds	1
  1276   000040                     ??_convert_rgb2hue:
  1277                           
  1278                           ; 1 bytes @ 0x3F
  1279   000040                     	ds	2
  1280   000042                     ?_reading_hue:
  1281                           	callstack 0
  1282   000042                     reading_hue@cCurr:
  1283                           	callstack 0
  1284                           
  1285                           ; 1 bytes @ 0x41
  1286   000042                     	ds	2
  1287   000044                     ??_reading_hue:
  1288                           
  1289                           ; 1 bytes @ 0x43
  1290   000044                     	ds	1
  1291   000045                     calibration_routine@cCal:
  1292                           	callstack 0
  1293   000045                     send2USART@hue:
  1294                           	callstack 0
  1295                           
  1296                           ; 2 bytes @ 0x44
  1297   000045                     	ds	1
  1298   000046                     ??_calibration_routine:
  1299   000046                     reading_hue@hue:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x45
  1303   000046                     	ds	1
  1304   000047                     decision@hue:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x46
  1308   000047                     	ds	2
  1309   000049                     decision@path_length:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x48
  1313   000049                     	ds	2
  1314   00004B                     decision@color:
  1315                           	callstack 0
  1316                           
  1317                           ; 2 bytes @ 0x4A
  1318   00004B                     	ds	2
  1319   00004D                     ??_main:
  1320                           
  1321                           ; 1 bytes @ 0x4C
  1322   00004D                     	ds	2
  1323                           
  1324 ;;
  1325 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1326 ;;
  1327 ;; *************** function _main *****************
  1328 ;; Defined at:
  1329 ;;		line 29 in file "main.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;		None
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  white           2    0        unsigned int 
  1334 ;;  time            2   80[BANK0 ] int 
  1335 ;;  hue_char       20    0        unsigned char [20]
  1336 ;;  current         4   82[BANK0 ] float 
  1337 ;;  maximum         4   76[BANK0 ] float 
  1338 ;;  path_length     2   90[BANK0 ] unsigned int 
  1339 ;;  hue             2   88[BANK0 ] unsigned int 
  1340 ;;  PWMcycle        2    0        unsigned int 
  1341 ;;  clear_norm      2   86[BANK0 ] unsigned int 
  1342 ;;  clear           2    0        unsigned int 
  1343 ;;  green           2    0        unsigned int 
  1344 ;;  blue            2    0        unsigned int 
  1345 ;;  red             2    0        unsigned int 
  1346 ;;  battery_leve    2    0        unsigned int 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;Total ram usage:       18 bytes
  1361 ;; Hardware stack levels required when called: 11
  1362 ;; This function calls:
  1363 ;;		_ADC_init
  1364 ;;		_Timer0_init
  1365 ;;		___fldiv
  1366 ;;		___flmul
  1367 ;;		___fltol
  1368 ;;		___xxtofl
  1369 ;;		_calibration_routine
  1370 ;;		_color_click_init
  1371 ;;		_color_read_Clear
  1372 ;;		_decision
  1373 ;;		_get16bitTMR0val
  1374 ;;		_initDCmotorsPWM
  1375 ;;		_initUSART4
  1376 ;;		_logAction
  1377 ;;		_reading_hue
  1378 ;;		_returnHome
  1379 ;;		_send2USART
  1380 ;;		_stop
  1381 ;; This function is called by:
  1382 ;;		Startup code after reset
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text0
  1387   0022C0                     __ptext0:
  1388                           	callstack 0
  1389   0022C0                     _main:
  1390                           	callstack 20
  1391   0022C0                     
  1392                           ;main.c: 31:     ADC_init();
  1393   0022C0  ECD9  F022         	call	_ADC_init	;wreg free
  1394   0022C4                     
  1395                           ;main.c: 32:     color_click_init();
  1396   0022C4  EC1E  F021         	call	_color_click_init	;wreg free
  1397   0022C8                     
  1398                           ;main.c: 33:     initUSART4();
  1399   0022C8  ECBB  F022         	call	_initUSART4	;wreg free
  1400   0022CC                     
  1401                           ;main.c: 34:     Timer0_init();
  1402   0022CC  EC73  F022         	call	_Timer0_init	;wreg free
  1403   0022D0                     
  1404                           ;main.c: 38:     initDCmotorsPWM(PWMcycle);
  1405   0022D0  0E00               	movlw	0
  1406   0022D2  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1407   0022D4  0E63               	movlw	99
  1408   0022D6  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1409   0022D8  EC5F  F01C         	call	_initDCmotorsPWM	;wreg free
  1410   0022DC                     
  1411                           ;main.c: 41:     motorL.power = 0;
  1412   0022DC  0E00               	movlw	0
  1413   0022DE  0100               	movlb	0	; () banked
  1414   0022E0  6FD4               	movwf	_motorL& (0+255),b
  1415   0022E2                     
  1416                           ; BSR set to: 0
  1417                           ;main.c: 42:     motorL.direction = 1;
  1418   0022E2  0E01               	movlw	1
  1419   0022E4  6FD5               	movwf	(_motorL+1)& (0+255),b
  1420   0022E6                     
  1421                           ; BSR set to: 0
  1422                           ;main.c: 43:     motorL.brakemode = 1;
  1423   0022E6  0E01               	movlw	1
  1424   0022E8  6FD6               	movwf	(_motorL+2)& (0+255),b
  1425   0022EA                     
  1426                           ; BSR set to: 0
  1427                           ;main.c: 44:     motorL.PWMperiod = PWMcycle;
  1428   0022EA  0E00               	movlw	0
  1429   0022EC  6FD8               	movwf	(_motorL+4)& (0+255),b
  1430   0022EE  0E63               	movlw	99
  1431   0022F0  6FD7               	movwf	(_motorL+3)& (0+255),b
  1432   0022F2                     
  1433                           ; BSR set to: 0
  1434                           ;main.c: 45:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1435   0022F2  0EAA               	movlw	170
  1436   0022F4  6FD9               	movwf	(_motorL+5)& (0+255),b
  1437   0022F6  0E0F               	movlw	15
  1438   0022F8  6FDA               	movwf	(_motorL+6)& (0+255),b
  1439   0022FA                     
  1440                           ; BSR set to: 0
  1441                           ;main.c: 46:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1442   0022FA  0EA6               	movlw	166
  1443   0022FC  6FDB               	movwf	(_motorL+7)& (0+255),b
  1444   0022FE  0E0F               	movlw	15
  1445   002300  6FDC               	movwf	(_motorL+8)& (0+255),b
  1446   002302                     
  1447                           ; BSR set to: 0
  1448                           ;main.c: 48:     motorR.power = 0;
  1449   002302  0E00               	movlw	0
  1450   002304  6FCB               	movwf	_motorR& (0+255),b
  1451   002306                     
  1452                           ; BSR set to: 0
  1453                           ;main.c: 49:     motorR.direction = 1;
  1454   002306  0E01               	movlw	1
  1455   002308  6FCC               	movwf	(_motorR+1)& (0+255),b
  1456   00230A                     
  1457                           ; BSR set to: 0
  1458                           ;main.c: 50:     motorR.brakemode = 1;
  1459   00230A  0E01               	movlw	1
  1460   00230C  6FCD               	movwf	(_motorR+2)& (0+255),b
  1461   00230E                     
  1462                           ; BSR set to: 0
  1463                           ;main.c: 51:     motorR.PWMperiod = PWMcycle;
  1464   00230E  0E00               	movlw	0
  1465   002310  6FCF               	movwf	(_motorR+4)& (0+255),b
  1466   002312  0E63               	movlw	99
  1467   002314  6FCE               	movwf	(_motorR+3)& (0+255),b
  1468   002316                     
  1469                           ; BSR set to: 0
  1470                           ;main.c: 52:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1471   002316  0E25               	movlw	37
  1472   002318  6FD0               	movwf	(_motorR+5)& (0+255),b
  1473   00231A  0E0F               	movlw	15
  1474   00231C  6FD1               	movwf	(_motorR+6)& (0+255),b
  1475   00231E                     
  1476                           ; BSR set to: 0
  1477                           ;main.c: 53:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1478   00231E  0E21               	movlw	33
  1479   002320  6FD2               	movwf	(_motorR+7)& (0+255),b
  1480   002322  0E0F               	movlw	15
  1481   002324  6FD3               	movwf	(_motorR+8)& (0+255),b
  1482   002326                     
  1483                           ; BSR set to: 0
  1484                           ;main.c: 56:     LATDbits.LATD7=0;
  1485   002326  9E7C               	bcf	124,7,c	;volatile
  1486   002328                     
  1487                           ; BSR set to: 0
  1488                           ;main.c: 57:     TRISDbits.TRISD7=0;
  1489   002328  9E84               	bcf	132,7,c	;volatile
  1490   00232A                     
  1491                           ; BSR set to: 0
  1492                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1493   00232A  9087               	bcf	135,0,c	;volatile
  1494   00232C                     
  1495                           ; BSR set to: 0
  1496                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1497   00232C  907F               	bcf	127,0,c	;volatile
  1498   00232E                     
  1499                           ; BSR set to: 0
  1500                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1501   00232E  9E85               	bcf	133,7,c	;volatile
  1502   002330                     
  1503                           ; BSR set to: 0
  1504                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1505   002330  9E7D               	bcf	125,7,c	;volatile
  1506   002332                     
  1507                           ; BSR set to: 0
  1508                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1509   002332  9681               	bcf	129,3,c	;volatile
  1510   002334                     
  1511                           ; BSR set to: 0
  1512                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1513   002334  9679               	bcf	121,3,c	;volatile
  1514   002336                     
  1515                           ; BSR set to: 0
  1516                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1517   002336  8686               	bsf	134,3,c	;volatile
  1518   002338                     
  1519                           ; BSR set to: 0
  1520                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1521   002338  010E               	movlb	14	; () banked
  1522   00233A  97B4               	bcf	180,3,b	;volatile
  1523   00233C                     
  1524                           ; BSR set to: 14
  1525                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1526   00233C  8486               	bsf	134,2,c	;volatile
  1527   00233E                     
  1528                           ; BSR set to: 14
  1529                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1530   00233E  947E               	bcf	126,2,c	;volatile
  1531   002340                     
  1532                           ; BSR set to: 14
  1533                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1534   002340  95B4               	bcf	180,2,b	;volatile
  1535   002342                     
  1536                           ; BSR set to: 14
  1537                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1538   002342  9287               	bcf	135,1,c	;volatile
  1539   002344                     
  1540                           ; BSR set to: 14
  1541                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1542   002344  927F               	bcf	127,1,c	;volatile
  1543   002346                     
  1544                           ; BSR set to: 14
  1545                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1546   002346  0E00               	movlw	0
  1547   002348  0100               	movlb	0	; () banked
  1548   00234A  6FBB               	movwf	(main@path_length+1)& (0+255),b
  1549   00234C  0E00               	movlw	0
  1550   00234E  6FBA               	movwf	main@path_length& (0+255),b
  1551   002350                     
  1552                           ; BSR set to: 0
  1553                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1554   002350  9688               	bcf	136,3,c	;volatile
  1555   002352                     
  1556                           ; BSR set to: 0
  1557                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1558   002352  8680               	bsf	128,3,c	;volatile
  1559   002354                     
  1560                           ; BSR set to: 0
  1561                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1562   002354  0E19               	movlw	25
  1563   002356  6E4E               	movwf	(??_main+1)^0,c
  1564   002358  0E5A               	movlw	90
  1565   00235A  6E4D               	movwf	??_main^0,c
  1566   00235C  0EB2               	movlw	178
  1567   00235E                     u5387:
  1568   00235E  2EE8               	decfsz	wreg,f,c
  1569   002360  D7FE               	bra	u5387
  1570   002362  2E4D               	decfsz	??_main^0,f,c
  1571   002364  D7FC               	bra	u5387
  1572   002366  2E4E               	decfsz	(??_main+1)^0,f,c
  1573   002368  D7FA               	bra	u5387
  1574   00236A                     
  1575                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1576   00236A  9680               	bcf	128,3,c	;volatile
  1577   00236C                     
  1578                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1579   00236C  0EE5               	movlw	low _colorCalibration
  1580   00236E  6E45               	movwf	calibration_routine@cCal^0,c
  1581   002370  EC2B  F014         	call	_calibration_routine	;wreg free
  1582   002374                     
  1583                           ;main.c: 104:     TRISDbits.TRISD3 = 0;
  1584   002374  9684               	bcf	132,3,c	;volatile
  1585   002376                     
  1586                           ;main.c: 105:     LATDbits.LATD3 = 1;
  1587   002376  867C               	bsf	124,3,c	;volatile
  1588   002378                     
  1589                           ;main.c: 107:     TRISHbits.TRISH1 = 0;
  1590   002378  9288               	bcf	136,1,c	;volatile
  1591   00237A                     
  1592                           ;main.c: 108:     LATHbits.LATH1 = 0;
  1593   00237A  9280               	bcf	128,1,c	;volatile
  1594   00237C                     
  1595                           ;main.c: 111:     TRISDbits.TRISD4 = 0;
  1596   00237C  9884               	bcf	132,4,c	;volatile
  1597   00237E                     
  1598                           ;main.c: 112:     LATDbits.LATD4 = 0;
  1599   00237E  987C               	bcf	124,4,c	;volatile
  1600   002380                     
  1601                           ;main.c: 114:     float maximum = colorCalibration.clear;
  1602   002380  C0EB  F002         	movff	_colorCalibration+6,___xxtofl@val
  1603   002384  C0EC  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1604   002388  6A04               	clrf	(___xxtofl@val+2)^0,c
  1605   00238A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1606   00238C  0E00               	movlw	0
  1607   00238E  EC14  F015         	call	___xxtofl
  1608   002392  C002  F0AC         	movff	?___xxtofl,main@maximum
  1609   002396  C003  F0AD         	movff	?___xxtofl+1,main@maximum+1
  1610   00239A  C004  F0AE         	movff	?___xxtofl+2,main@maximum+2
  1611   00239E  C005  F0AF         	movff	?___xxtofl+3,main@maximum+3
  1612   0023A2                     l6046:
  1613                           
  1614                           ;main.c: 120:         LATGbits.LATG0 = 1;
  1615   0023A2  807F               	bsf	127,0,c	;volatile
  1616   0023A4                     
  1617                           ;main.c: 121:         LATEbits.LATE7 = 1;
  1618   0023A4  8E7D               	bsf	125,7,c	;volatile
  1619   0023A6                     
  1620                           ;main.c: 122:         LATAbits.LATA3 = 1;
  1621   0023A6  8679               	bsf	121,3,c	;volatile
  1622   0023A8                     
  1623                           ;main.c: 127:         T0CON0bits.T0EN=1;
  1624   0023A8  8ED5               	bsf	213,7,c	;volatile
  1625   0023AA                     
  1626                           ;main.c: 128:         LATHbits.LATH1 = 1;
  1627   0023AA  8280               	bsf	128,1,c	;volatile
  1628   0023AC                     
  1629                           ;main.c: 130:         (colorCurrent.clear) = color_read_Clear();
  1630   0023AC  ECE7  F01F         	call	_color_read_Clear	;wreg free
  1631   0023B0  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1632   0023B4  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1633   0023B8                     
  1634                           ;main.c: 131:         current = colorCurrent.clear;
  1635   0023B8  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1636   0023BC  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1637   0023C0  6A04               	clrf	(___xxtofl@val+2)^0,c
  1638   0023C2  6A05               	clrf	(___xxtofl@val+3)^0,c
  1639   0023C4  0E00               	movlw	0
  1640   0023C6  EC14  F015         	call	___xxtofl
  1641   0023CA  C002  F0B2         	movff	?___xxtofl,main@current
  1642   0023CE  C003  F0B3         	movff	?___xxtofl+1,main@current+1
  1643   0023D2  C004  F0B4         	movff	?___xxtofl+2,main@current+2
  1644   0023D6  C005  F0B5         	movff	?___xxtofl+3,main@current+3
  1645   0023DA                     
  1646                           ;main.c: 133:         clear_norm = (current)*100/(maximum);
  1647   0023DA  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1648   0023DE  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1649   0023E2  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1650   0023E6  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1651   0023EA  0E00               	movlw	0
  1652   0023EC  6E06               	movwf	___flmul@a^0,c
  1653   0023EE  0E00               	movlw	0
  1654   0023F0  6E07               	movwf	(___flmul@a+1)^0,c
  1655   0023F2  0EC8               	movlw	200
  1656   0023F4  6E08               	movwf	(___flmul@a+2)^0,c
  1657   0023F6  0E42               	movlw	66
  1658   0023F8  6E09               	movwf	(___flmul@a+3)^0,c
  1659   0023FA  C0B2  F002         	movff	main@current,___flmul@b
  1660   0023FE  C0B3  F003         	movff	main@current+1,___flmul@b+1
  1661   002402  C0B4  F004         	movff	main@current+2,___flmul@b+2
  1662   002406  C0B5  F005         	movff	main@current+3,___flmul@b+3
  1663   00240A  EC7E  F00D         	call	___flmul	;wreg free
  1664   00240E  C002  F01B         	movff	?___flmul,___fldiv@b
  1665   002412  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1666   002416  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1667   00241A  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1668   00241E  EC93  F00F         	call	___fldiv	;wreg free
  1669   002422  C01B  F034         	movff	?___fldiv,___fltol@f1
  1670   002426  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1671   00242A  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1672   00242E  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1673   002432  EC18  F018         	call	___fltol	;wreg free
  1674   002436  C034  F0B6         	movff	?___fltol,main@clear_norm
  1675   00243A  C035  F0B7         	movff	?___fltol+1,main@clear_norm+1
  1676                           
  1677                           ;main.c: 138:         while(clear_norm<15){
  1678   00243E  EF6A  F012         	goto	l6066
  1679   002442                     l6062:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 139:             (colorCurrent.clear) = color_read_Clear();
  1683   002442  ECE7  F01F         	call	_color_read_Clear	;wreg free
  1684   002446  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1685   00244A  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1686                           
  1687                           ;main.c: 140:             current = colorCurrent.clear;
  1688   00244E  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1689   002452  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1690   002456  6A04               	clrf	(___xxtofl@val+2)^0,c
  1691   002458  6A05               	clrf	(___xxtofl@val+3)^0,c
  1692   00245A  0E00               	movlw	0
  1693   00245C  EC14  F015         	call	___xxtofl
  1694   002460  C002  F0B2         	movff	?___xxtofl,main@current
  1695   002464  C003  F0B3         	movff	?___xxtofl+1,main@current+1
  1696   002468  C004  F0B4         	movff	?___xxtofl+2,main@current+2
  1697   00246C  C005  F0B5         	movff	?___xxtofl+3,main@current+3
  1698   002470                     
  1699                           ;main.c: 142:             clear_norm = (current)*100/(maximum);
  1700   002470  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1701   002474  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1702   002478  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1703   00247C  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1704   002480  0E00               	movlw	0
  1705   002482  6E06               	movwf	___flmul@a^0,c
  1706   002484  0E00               	movlw	0
  1707   002486  6E07               	movwf	(___flmul@a+1)^0,c
  1708   002488  0EC8               	movlw	200
  1709   00248A  6E08               	movwf	(___flmul@a+2)^0,c
  1710   00248C  0E42               	movlw	66
  1711   00248E  6E09               	movwf	(___flmul@a+3)^0,c
  1712   002490  C0B2  F002         	movff	main@current,___flmul@b
  1713   002494  C0B3  F003         	movff	main@current+1,___flmul@b+1
  1714   002498  C0B4  F004         	movff	main@current+2,___flmul@b+2
  1715   00249C  C0B5  F005         	movff	main@current+3,___flmul@b+3
  1716   0024A0  EC7E  F00D         	call	___flmul	;wreg free
  1717   0024A4  C002  F01B         	movff	?___flmul,___fldiv@b
  1718   0024A8  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1719   0024AC  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1720   0024B0  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1721   0024B4  EC93  F00F         	call	___fldiv	;wreg free
  1722   0024B8  C01B  F034         	movff	?___fldiv,___fltol@f1
  1723   0024BC  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1724   0024C0  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1725   0024C4  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1726   0024C8  EC18  F018         	call	___fltol	;wreg free
  1727   0024CC  C034  F0B6         	movff	?___fltol,main@clear_norm
  1728   0024D0  C035  F0B7         	movff	?___fltol+1,main@clear_norm+1
  1729   0024D4                     l6066:
  1730                           
  1731                           ;main.c: 138:         while(clear_norm<15){
  1732   0024D4  0100               	movlb	0	; () banked
  1733   0024D6  51B7               	movf	(main@clear_norm+1)& (0+255),w,b
  1734   0024D8  E109               	bnz	u5320
  1735   0024DA  0E0F               	movlw	15
  1736   0024DC  5DB6               	subwf	main@clear_norm& (0+255),w,b
  1737   0024DE  A0D8               	btfss	status,0,c
  1738   0024E0  EF74  F012         	goto	u5321
  1739   0024E4  EF76  F012         	goto	u5320
  1740   0024E8                     u5321:
  1741   0024E8  EF21  F012         	goto	l6062
  1742   0024EC                     u5320:
  1743   0024EC                     
  1744                           ; BSR set to: 0
  1745                           ;main.c: 145:         stop(&motorL,&motorR);
  1746   0024EC  0ED4               	movlw	low _motorL
  1747   0024EE  6E14               	movwf	stop@mL^0,c
  1748   0024F0  0ECB               	movlw	low _motorR
  1749   0024F2  6E15               	movwf	stop@mR^0,c
  1750   0024F4  ECA7  F01C         	call	_stop	;wreg free
  1751   0024F8                     
  1752                           ;main.c: 147:         int time = get16bitTMR0val();
  1753   0024F8  EC9A  F022         	call	_get16bitTMR0val	;wreg free
  1754   0024FC  C002  F0B0         	movff	?_get16bitTMR0val,main@time
  1755   002500  C003  F0B1         	movff	?_get16bitTMR0val+1,main@time+1
  1756   002504                     
  1757                           ;main.c: 148:         send2USART(time);
  1758   002504  C0B0  F045         	movff	main@time,send2USART@hue
  1759   002508  C0B1  F046         	movff	main@time+1,send2USART@hue+1
  1760   00250C  ECCA  F022         	call	_send2USART	;wreg free
  1761   002510                     
  1762                           ;main.c: 149:         T0CON0bits.T0EN=0;
  1763   002510  9ED5               	bcf	213,7,c	;volatile
  1764   002512                     
  1765                           ;main.c: 150:         path_length = logAction('F',time, path_length, &path);
  1766   002512  C0B0  F008         	movff	main@time,logAction@time
  1767   002516  C0B1  F009         	movff	main@time+1,logAction@time+1
  1768   00251A  C0BA  F00A         	movff	main@path_length,logAction@path_length
  1769   00251E  C0BB  F00B         	movff	main@path_length+1,logAction@path_length+1
  1770   002522  0E28               	movlw	low _path
  1771   002524  6E0C               	movwf	logAction@path^0,c
  1772   002526  0E01               	movlw	high _path
  1773   002528  6E0D               	movwf	(logAction@path+1)^0,c
  1774   00252A  0E46               	movlw	70
  1775   00252C  ECEE  F01C         	call	_logAction
  1776   002530  C008  F0BA         	movff	?_logAction,main@path_length
  1777   002534  C009  F0BB         	movff	?_logAction+1,main@path_length+1
  1778   002538                     
  1779                           ;main.c: 151:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1780   002538  0E05               	movlw	5
  1781   00253A  6E4E               	movwf	(??_main+1)^0,c
  1782   00253C  0E0F               	movlw	15
  1783   00253E  6E4D               	movwf	??_main^0,c
  1784   002540  0EF1               	movlw	241
  1785   002542                     u5397:
  1786   002542  2EE8               	decfsz	wreg,f,c
  1787   002544  D7FE               	bra	u5397
  1788   002546  2E4D               	decfsz	??_main^0,f,c
  1789   002548  D7FC               	bra	u5397
  1790   00254A  2E4E               	decfsz	(??_main+1)^0,f,c
  1791   00254C  D7FA               	bra	u5397
  1792   00254E  0000               	nop	
  1793   002550                     
  1794                           ;main.c: 153:         LATDbits.LATD4 = 0;
  1795   002550  987C               	bcf	124,4,c	;volatile
  1796   002552                     
  1797                           ;main.c: 158:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1798   002552  0E19               	movlw	25
  1799   002554  6E4E               	movwf	(??_main+1)^0,c
  1800   002556  0E5A               	movlw	90
  1801   002558  6E4D               	movwf	??_main^0,c
  1802   00255A  0EB2               	movlw	178
  1803   00255C                     u5407:
  1804   00255C  2EE8               	decfsz	wreg,f,c
  1805   00255E  D7FE               	bra	u5407
  1806   002560  2E4D               	decfsz	??_main^0,f,c
  1807   002562  D7FC               	bra	u5407
  1808   002564  2E4E               	decfsz	(??_main+1)^0,f,c
  1809   002566  D7FA               	bra	u5407
  1810   002568                     
  1811                           ;main.c: 159:             stop(&motorL,&motorR);
  1812   002568  0ED4               	movlw	low _motorL
  1813   00256A  6E14               	movwf	stop@mL^0,c
  1814   00256C  0ECB               	movlw	low _motorR
  1815   00256E  6E15               	movwf	stop@mR^0,c
  1816   002570  ECA7  F01C         	call	_stop	;wreg free
  1817   002574                     
  1818                           ;main.c: 160:             _delay((unsigned long)((50)*(64000000/4000.0)));
  1819   002574  0E05               	movlw	5
  1820   002576  6E4E               	movwf	(??_main+1)^0,c
  1821   002578  0E0F               	movlw	15
  1822   00257A  6E4D               	movwf	??_main^0,c
  1823   00257C  0EF1               	movlw	241
  1824   00257E                     u5417:
  1825   00257E  2EE8               	decfsz	wreg,f,c
  1826   002580  D7FE               	bra	u5417
  1827   002582  2E4D               	decfsz	??_main^0,f,c
  1828   002584  D7FC               	bra	u5417
  1829   002586  2E4E               	decfsz	(??_main+1)^0,f,c
  1830   002588  D7FA               	bra	u5417
  1831   00258A  0000               	nop	
  1832   00258C                     
  1833                           ;main.c: 162:         if (clear_norm > 50 && !(hue>=302 && hue<=346) || LATGbits.LATG1 =
      +                          = 1){
  1834   00258C  0100               	movlb	0	; () banked
  1835   00258E  51B7               	movf	(main@clear_norm+1)& (0+255),w,b
  1836   002590  E109               	bnz	u5330
  1837   002592  0E33               	movlw	51
  1838   002594  5DB6               	subwf	main@clear_norm& (0+255),w,b
  1839   002596  A0D8               	btfss	status,0,c
  1840   002598  EFD0  F012         	goto	u5331
  1841   00259C  EFD2  F012         	goto	u5330
  1842   0025A0                     u5331:
  1843   0025A0  EFE8  F012         	goto	l317
  1844   0025A4                     u5330:
  1845   0025A4                     
  1846                           ; BSR set to: 0
  1847   0025A4  0E2E               	movlw	46
  1848   0025A6  5DB8               	subwf	main@hue& (0+255),w,b
  1849   0025A8  0E01               	movlw	1
  1850   0025AA  59B9               	subwfb	(main@hue+1)& (0+255),w,b
  1851   0025AC  A0D8               	btfss	status,0,c
  1852   0025AE  EFDB  F012         	goto	u5341
  1853   0025B2  EFDD  F012         	goto	u5340
  1854   0025B6                     u5341:
  1855   0025B6  EFEF  F012         	goto	l6094
  1856   0025BA                     u5340:
  1857   0025BA                     
  1858                           ; BSR set to: 0
  1859   0025BA  0E5B               	movlw	91
  1860   0025BC  5DB8               	subwf	main@hue& (0+255),w,b
  1861   0025BE  0E01               	movlw	1
  1862   0025C0  59B9               	subwfb	(main@hue+1)& (0+255),w,b
  1863   0025C2  B0D8               	btfsc	status,0,c
  1864   0025C4  EFE6  F012         	goto	u5351
  1865   0025C8  EFE8  F012         	goto	u5350
  1866   0025CC                     u5351:
  1867   0025CC  EFEF  F012         	goto	l6094
  1868   0025D0                     u5350:
  1869   0025D0                     l317:
  1870                           
  1871                           ; BSR set to: 0
  1872   0025D0  A27F               	btfss	127,1,c	;volatile
  1873   0025D2  EFED  F012         	goto	u5361
  1874   0025D6  EFEF  F012         	goto	u5360
  1875   0025DA                     u5361:
  1876   0025DA  EF04  F013         	goto	l6102
  1877   0025DE                     u5360:
  1878   0025DE                     l6094:
  1879   0025DE                     
  1880                           ; BSR set to: 0
  1881                           ;main.c: 165:             send2USART(white);
  1882   0025DE  0E00               	movlw	0
  1883   0025E0  6E46               	movwf	(send2USART@hue+1)^0,c
  1884   0025E2  0E08               	movlw	8
  1885   0025E4  6E45               	movwf	send2USART@hue^0,c
  1886   0025E6  ECCA  F022         	call	_send2USART	;wreg free
  1887   0025EA                     
  1888                           ;main.c: 166:             returnHome(&motorL, &motorR, &path, path_length);
  1889   0025EA  0ED4               	movlw	low _motorL
  1890   0025EC  6E21               	movwf	returnHome@mL^0,c
  1891   0025EE  0ECB               	movlw	low _motorR
  1892   0025F0  6E22               	movwf	returnHome@mR^0,c
  1893   0025F2  0E28               	movlw	low _path
  1894   0025F4  6E23               	movwf	returnHome@path^0,c
  1895   0025F6  0E01               	movlw	high _path
  1896   0025F8  6E24               	movwf	(returnHome@path+1)^0,c
  1897   0025FA  C0BA  F025         	movff	main@path_length,returnHome@pathLength
  1898   0025FE  C0BB  F026         	movff	main@path_length+1,returnHome@pathLength+1
  1899   002602  EC92  F019         	call	_returnHome	;wreg free
  1900   002606                     
  1901                           ;main.c: 167:             LATGbits.LATG1 = 0;
  1902   002606  927F               	bcf	127,1,c	;volatile
  1903   002608                     l6102:
  1904                           
  1905                           ;main.c: 170:         hue = reading_hue(&colorCurrent);
  1906   002608  0EDD               	movlw	low _colorCurrent
  1907   00260A  6E42               	movwf	reading_hue@cCurr^0,c
  1908   00260C  EC1D  F019         	call	_reading_hue	;wreg free
  1909   002610  C042  F0B8         	movff	?_reading_hue,main@hue
  1910   002614  C043  F0B9         	movff	?_reading_hue+1,main@hue+1
  1911   002618                     
  1912                           ;main.c: 171:         decision(hue, path_length);
  1913   002618  C0B8  F047         	movff	main@hue,decision@hue
  1914   00261C  C0B9  F048         	movff	main@hue+1,decision@hue+1
  1915   002620  C0BA  F049         	movff	main@path_length,decision@path_length
  1916   002624  C0BB  F04A         	movff	main@path_length+1,decision@path_length+1
  1917   002628  EC1A  F013         	call	_decision	;wreg free
  1918   00262C  EFD1  F011         	goto	l6046
  1919   002630  EF1D  F000         	goto	start
  1920   002634                     __end_of_main:
  1921                           	callstack 0
  1922                           
  1923 ;; *************** function _returnHome *****************
  1924 ;; Defined at:
  1925 ;;		line 388 in file "dc_motor.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1928 ;;		 -> motorL(9), 
  1929 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1930 ;;		 -> motorR(9), 
  1931 ;;  path            2   34[COMRAM] PTR struct PathStep
  1932 ;;		 -> path(150), 
  1933 ;;  pathLength      2   36[COMRAM] unsigned int 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  time            2   40[COMRAM] unsigned int 
  1936 ;;  action          1   42[COMRAM] unsigned char 
  1937 ;;  i               2   43[COMRAM] int 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1947 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;Total ram usage:       13 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; Hardware stack levels required when called: 6
  1954 ;; This function calls:
  1955 ;;		___wmul
  1956 ;;		_moveWhite
  1957 ;;		_reverseStraight
  1958 ;;		_reverseTurn
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text1
  1965   003324                     __ptext1:
  1966                           	callstack 0
  1967   003324                     _returnHome:
  1968                           	callstack 24
  1969   003324                     
  1970                           ;dc_motor.c: 388: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path, unsigned int pathLength);dc_motor.c: 389: {;dc_motor.c: 391:     LATGbits.LAT
      +                          G0 = 0;
  1971   003324  907F               	bcf	127,0,c	;volatile
  1972                           
  1973                           ;dc_motor.c: 392:     LATEbits.LATE7 = 0;
  1974   003326  9E7D               	bcf	125,7,c	;volatile
  1975                           
  1976                           ;dc_motor.c: 393:     LATAbits.LATA3 = 0;
  1977   003328  9679               	bcf	121,3,c	;volatile
  1978   00332A                     
  1979                           ;dc_motor.c: 395:     moveWhite(&motorL,&motorR);
  1980   00332A  0ED4               	movlw	low _motorL
  1981   00332C  6E1D               	movwf	moveWhite@mL^0,c
  1982   00332E  0ECB               	movlw	low _motorR
  1983   003330  6E1E               	movwf	moveWhite@mR^0,c
  1984   003332  EC6C  F021         	call	_moveWhite	;wreg free
  1985   003336                     
  1986                           ;dc_motor.c: 397:     for (int i = pathLength; i >= 0; i--) {
  1987   003336  C025  F02C         	movff	returnHome@pathLength,returnHome@i
  1988   00333A  C026  F02D         	movff	returnHome@pathLength+1,returnHome@i+1
  1989   00333E                     l5938:
  1990   00333E  BE2D               	btfsc	(returnHome@i+1)^0,7,c
  1991   003340  EFA6  F019         	goto	u5300
  1992   003344  EFA4  F019         	goto	u5301
  1993   003348                     u5301:
  1994   003348  EFA8  F019         	goto	l5942
  1995   00334C                     u5300:
  1996   00334C  EFF6  F019         	goto	l516
  1997   003350                     l5942:
  1998                           
  1999                           ;dc_motor.c: 398:         char action = path[i].action;
  2000   003350  C02C  F002         	movff	returnHome@i,___wmul@multiplier
  2001   003354  C02D  F003         	movff	returnHome@i+1,___wmul@multiplier+1
  2002   003358  0E00               	movlw	0
  2003   00335A  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  2004   00335C  0E03               	movlw	3
  2005   00335E  6E04               	movwf	___wmul@multiplicand^0,c
  2006   003360  EC87  F022         	call	___wmul	;wreg free
  2007   003364  5002               	movf	?___wmul^0,w,c
  2008   003366  2423               	addwf	returnHome@path^0,w,c
  2009   003368  6ED9               	movwf	fsr2l,c
  2010   00336A  5003               	movf	(?___wmul+1)^0,w,c
  2011   00336C  2024               	addwfc	(returnHome@path+1)^0,w,c
  2012   00336E  6EDA               	movwf	fsr2h,c
  2013   003370  50DF               	movf	indf2,w,c
  2014   003372  6E2B               	movwf	returnHome@action^0,c
  2015                           
  2016                           ;dc_motor.c: 399:         unsigned int time = path[i].time;
  2017   003374  C02C  F002         	movff	returnHome@i,___wmul@multiplier
  2018   003378  C02D  F003         	movff	returnHome@i+1,___wmul@multiplier+1
  2019   00337C  0E00               	movlw	0
  2020   00337E  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  2021   003380  0E03               	movlw	3
  2022   003382  6E04               	movwf	___wmul@multiplicand^0,c
  2023   003384  EC87  F022         	call	___wmul	;wreg free
  2024   003388  5002               	movf	?___wmul^0,w,c
  2025   00338A  2423               	addwf	returnHome@path^0,w,c
  2026   00338C  6E27               	movwf	??_returnHome^0,c
  2027   00338E  5003               	movf	(?___wmul+1)^0,w,c
  2028   003390  2024               	addwfc	(returnHome@path+1)^0,w,c
  2029   003392  6E28               	movwf	(??_returnHome+1)^0,c
  2030   003394  0E01               	movlw	1
  2031   003396  2427               	addwf	??_returnHome^0,w,c
  2032   003398  6ED9               	movwf	fsr2l,c
  2033   00339A  0E00               	movlw	0
  2034   00339C  2028               	addwfc	(??_returnHome+1)^0,w,c
  2035   00339E  6EDA               	movwf	fsr2h,c
  2036   0033A0  CFDE F029          	movff	postinc2,returnHome@time
  2037   0033A4  CFDD F02A          	movff	postdec2,returnHome@time+1
  2038   0033A8                     
  2039                           ;dc_motor.c: 401:         if (action == 'F'){reverseStraight(mL, mR, time);}
  2040   0033A8  0E46               	movlw	70
  2041   0033AA  182B               	xorwf	returnHome@action^0,w,c
  2042   0033AC  A4D8               	btfss	status,2,c
  2043   0033AE  EFDB  F019         	goto	u5311
  2044   0033B2  EFDD  F019         	goto	u5310
  2045   0033B6                     u5311:
  2046   0033B6  EFE9  F019         	goto	l5948
  2047   0033BA                     u5310:
  2048   0033BA  C021  F019         	movff	returnHome@mL,reverseStraight@mL
  2049   0033BE  C022  F01A         	movff	returnHome@mR,reverseStraight@mR
  2050   0033C2  C029  F01B         	movff	returnHome@time,reverseStraight@time
  2051   0033C6  C02A  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  2052   0033CA  EC5A  F01A         	call	_reverseStraight	;wreg free
  2053   0033CE  EFF1  F019         	goto	l5950
  2054   0033D2                     l5948:
  2055   0033D2  C021  F01D         	movff	returnHome@mL,reverseTurn@mL
  2056   0033D6  C022  F01E         	movff	returnHome@mR,reverseTurn@mR
  2057   0033DA  C02B  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  2058   0033DE  EC5A  F020         	call	_reverseTurn	;wreg free
  2059   0033E2                     l5950:
  2060                           
  2061                           ;dc_motor.c: 405:     }
  2062   0033E2  062C               	decf	returnHome@i^0,f,c
  2063   0033E4  A0D8               	btfss	status,0,c
  2064   0033E6  062D               	decf	(returnHome@i+1)^0,f,c
  2065   0033E8  EF9F  F019         	goto	l5938
  2066   0033EC                     l516:
  2067   0033EC  0003               	sleep		;# 
  2068   0033EE  0012               	return		;funcret
  2069   0033F0                     __end_of_returnHome:
  2070                           	callstack 0
  2071                           
  2072 ;; *************** function _reverseTurn *****************
  2073 ;; Defined at:
  2074 ;;		line 350 in file "dc_motor.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2077 ;;		 -> motorL(9), 
  2078 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2079 ;;		 -> motorR(9), 
  2080 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2092 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2095 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2096 ;;Total ram usage:        3 bytes
  2097 ;; Hardware stack levels used: 1
  2098 ;; Hardware stack levels required when called: 5
  2099 ;; This function calls:
  2100 ;;		_left135
  2101 ;;		_right135
  2102 ;;		_turn180
  2103 ;;		_turnLeft
  2104 ;;		_turnRight
  2105 ;; This function is called by:
  2106 ;;		_returnHome
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text2
  2111   0040B4                     __ptext2:
  2112                           	callstack 0
  2113   0040B4                     _reverseTurn:
  2114                           	callstack 24
  2115   0040B4                     
  2116                           ;dc_motor.c: 351:     if (turnDirection == 'R') {
  2117   0040B4  0E52               	movlw	82
  2118   0040B6  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2119   0040B8  A4D8               	btfss	status,2,c
  2120   0040BA  EF61  F020         	goto	u5031
  2121   0040BE  EF63  F020         	goto	u5030
  2122   0040C2                     u5031:
  2123   0040C2  EF6B  F020         	goto	l5740
  2124   0040C6                     u5030:
  2125   0040C6                     
  2126                           ;dc_motor.c: 352:         turnLeft(mL, mR);
  2127   0040C6  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  2128   0040CA  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  2129   0040CE  EC72  F01D         	call	_turnLeft	;wreg free
  2130                           
  2131                           ;dc_motor.c: 353:     } else if (turnDirection == 'L') {
  2132   0040D2  EF7C  F020         	goto	l500
  2133   0040D6                     l5740:
  2134   0040D6  0E4C               	movlw	76
  2135   0040D8  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2136   0040DA  A4D8               	btfss	status,2,c
  2137   0040DC  EF72  F020         	goto	u5041
  2138   0040E0  EF74  F020         	goto	u5040
  2139   0040E4                     u5041:
  2140   0040E4  EF7C  F020         	goto	l499
  2141   0040E8                     u5040:
  2142   0040E8                     
  2143                           ;dc_motor.c: 354:         turnRight(mL, mR);
  2144   0040E8  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  2145   0040EC  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  2146   0040F0  EC33  F01D         	call	_turnRight	;wreg free
  2147                           
  2148                           ;dc_motor.c: 355:     } else if (turnDirection == '180') {
  2149   0040F4  EF7C  F020         	goto	l500
  2150   0040F8                     l499:
  2151   0040F8                     l500:
  2152   0040F8  0012               	return		;funcret
  2153   0040FA                     __end_of_reverseTurn:
  2154                           	callstack 0
  2155                           
  2156 ;; *************** function _reverseStraight *****************
  2157 ;; Defined at:
  2158 ;;		line 373 in file "dc_motor.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2161 ;;		 -> motorL(9), 
  2162 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2163 ;;		 -> motorR(9), 
  2164 ;;  time            2   26[COMRAM] unsigned int 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  delayMs         2   28[COMRAM] int 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2179 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2180 ;;Total ram usage:        6 bytes
  2181 ;; Hardware stack levels used: 1
  2182 ;; Hardware stack levels required when called: 4
  2183 ;; This function calls:
  2184 ;;		_customDelayMs
  2185 ;;		_fullSpeedAhead
  2186 ;;		_stop
  2187 ;; This function is called by:
  2188 ;;		_returnHome
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text3
  2193   0034B4                     __ptext3:
  2194                           	callstack 0
  2195   0034B4                     _reverseStraight:
  2196                           	callstack 25
  2197   0034B4                     
  2198                           ;dc_motor.c: 375:     int delayMs;;dc_motor.c: 378:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2199   0034B4  0E7C               	movlw	124
  2200   0034B6  5C1B               	subwf	reverseStraight@time^0,w,c
  2201   0034B8  0E15               	movlw	21
  2202   0034BA  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2203   0034BC  B0D8               	btfsc	status,0,c
  2204   0034BE  EF63  F01A         	goto	u5051
  2205   0034C2  EF65  F01A         	goto	u5050
  2206   0034C6                     u5051:
  2207   0034C6  EF74  F01A         	goto	l5756
  2208   0034CA                     u5050:
  2209   0034CA  0ED5               	movlw	213
  2210   0034CC  5C1B               	subwf	reverseStraight@time^0,w,c
  2211   0034CE  0E17               	movlw	23
  2212   0034D0  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2213   0034D2  A0D8               	btfss	status,0,c
  2214   0034D4  EF6E  F01A         	goto	u5061
  2215   0034D8  EF70  F01A         	goto	u5060
  2216   0034DC                     u5061:
  2217   0034DC  EF74  F01A         	goto	l5756
  2218   0034E0                     u5060:
  2219   0034E0  0E0B               	movlw	11
  2220   0034E2  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2221   0034E4  0EB8               	movlw	184
  2222   0034E6  6E1D               	movwf	reverseStraight@delayMs^0,c
  2223   0034E8                     l5756:
  2224                           
  2225                           ;dc_motor.c: 379:     if (time<3700 && time>4100){delayMs = 2000; }
  2226   0034E8  0E74               	movlw	116
  2227   0034EA  5C1B               	subwf	reverseStraight@time^0,w,c
  2228   0034EC  0E0E               	movlw	14
  2229   0034EE  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2230   0034F0  B0D8               	btfsc	status,0,c
  2231   0034F2  EF7D  F01A         	goto	u5071
  2232   0034F6  EF7F  F01A         	goto	u5070
  2233   0034FA                     u5071:
  2234   0034FA  EF8E  F01A         	goto	l5762
  2235   0034FE                     u5070:
  2236   0034FE  0E05               	movlw	5
  2237   003500  5C1B               	subwf	reverseStraight@time^0,w,c
  2238   003502  0E10               	movlw	16
  2239   003504  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2240   003506  A0D8               	btfss	status,0,c
  2241   003508  EF88  F01A         	goto	u5081
  2242   00350C  EF8A  F01A         	goto	u5080
  2243   003510                     u5081:
  2244   003510  EF8E  F01A         	goto	l5762
  2245   003514                     u5080:
  2246   003514  0E07               	movlw	7
  2247   003516  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2248   003518  0ED0               	movlw	208
  2249   00351A  6E1D               	movwf	reverseStraight@delayMs^0,c
  2250   00351C                     l5762:
  2251                           
  2252                           ;dc_motor.c: 380:     if (time<1700 && time>2100){delayMs = 1000;}
  2253   00351C  0EA4               	movlw	164
  2254   00351E  5C1B               	subwf	reverseStraight@time^0,w,c
  2255   003520  0E06               	movlw	6
  2256   003522  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2257   003524  B0D8               	btfsc	status,0,c
  2258   003526  EF97  F01A         	goto	u5091
  2259   00352A  EF99  F01A         	goto	u5090
  2260   00352E                     u5091:
  2261   00352E  EFA8  F01A         	goto	l5768
  2262   003532                     u5090:
  2263   003532  0E35               	movlw	53
  2264   003534  5C1B               	subwf	reverseStraight@time^0,w,c
  2265   003536  0E08               	movlw	8
  2266   003538  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2267   00353A  A0D8               	btfss	status,0,c
  2268   00353C  EFA2  F01A         	goto	u5101
  2269   003540  EFA4  F01A         	goto	u5100
  2270   003544                     u5101:
  2271   003544  EFA8  F01A         	goto	l5768
  2272   003548                     u5100:
  2273   003548  0E03               	movlw	3
  2274   00354A  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2275   00354C  0EE8               	movlw	232
  2276   00354E  6E1D               	movwf	reverseStraight@delayMs^0,c
  2277   003550                     l5768:
  2278                           
  2279                           ;dc_motor.c: 382:     fullSpeedAhead(mL, mR);
  2280   003550  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2281   003554  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2282   003558  ECB1  F01D         	call	_fullSpeedAhead	;wreg free
  2283   00355C                     
  2284                           ;dc_motor.c: 383:     customDelayMs(delayMs);
  2285   00355C  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2286   003560  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2287   003564  EC02  F021         	call	_customDelayMs	;wreg free
  2288   003568                     
  2289                           ;dc_motor.c: 384:     stop(mL, mR);
  2290   003568  C019  F014         	movff	reverseStraight@mL,stop@mL
  2291   00356C  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2292   003570  ECA7  F01C         	call	_stop	;wreg free
  2293   003574  0012               	return		;funcret
  2294   003576                     __end_of_reverseStraight:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _fullSpeedAhead *****************
  2298 ;; Defined at:
  2299 ;;		line 147 in file "dc_motor.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2302 ;;		 -> motorL(9), 
  2303 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2304 ;;		 -> motorR(9), 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  power           2   22[COMRAM] int 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2320 ;;Total ram usage:        5 bytes
  2321 ;; Hardware stack levels used: 1
  2322 ;; Hardware stack levels required when called: 3
  2323 ;; This function calls:
  2324 ;;		_setMotorPWM
  2325 ;; This function is called by:
  2326 ;;		_reverseStraight
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text4
  2331   003B62                     __ptext4:
  2332                           	callstack 0
  2333   003B62                     _fullSpeedAhead:
  2334                           	callstack 25
  2335   003B62                     
  2336                           ;dc_motor.c: 147: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 148: {;dc_
      +                          motor.c: 150:     mL->direction = 1;
  2337   003B62  5014               	movf	fullSpeedAhead@mL^0,w,c
  2338   003B64  6ED9               	movwf	fsr2l,c
  2339   003B66  6ADA               	clrf	fsr2h,c
  2340   003B68  0E01               	movlw	1
  2341   003B6A  26D9               	addwf	fsr2l,f,c
  2342   003B6C  0E01               	movlw	1
  2343   003B6E  6EDF               	movwf	indf2,c
  2344                           
  2345                           ;dc_motor.c: 151:     mR->direction = 1;
  2346   003B70  5015               	movf	fullSpeedAhead@mR^0,w,c
  2347   003B72  6ED9               	movwf	fsr2l,c
  2348   003B74  6ADA               	clrf	fsr2h,c
  2349   003B76  0E01               	movlw	1
  2350   003B78  26D9               	addwf	fsr2l,f,c
  2351   003B7A  0E01               	movlw	1
  2352   003B7C  6EDF               	movwf	indf2,c
  2353   003B7E                     
  2354                           ;dc_motor.c: 153:     for(int power = 0; power <= 50; power++) {
  2355   003B7E  0E00               	movlw	0
  2356   003B80  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2357   003B82  0E00               	movlw	0
  2358   003B84  6E17               	movwf	fullSpeedAhead@power^0,c
  2359   003B86                     l5590:
  2360                           
  2361                           ;dc_motor.c: 154:         mL->power = power;
  2362   003B86  5014               	movf	fullSpeedAhead@mL^0,w,c
  2363   003B88  6ED9               	movwf	fsr2l,c
  2364   003B8A  6ADA               	clrf	fsr2h,c
  2365   003B8C  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2366                           
  2367                           ;dc_motor.c: 155:         mR->power = power;
  2368   003B90  5015               	movf	fullSpeedAhead@mR^0,w,c
  2369   003B92  6ED9               	movwf	fsr2l,c
  2370   003B94  6ADA               	clrf	fsr2h,c
  2371   003B96  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2372   003B9A                     
  2373                           ;dc_motor.c: 158:         setMotorPWM(mL);
  2374   003B9A  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2375   003B9E  EC6E  F017         	call	_setMotorPWM	;wreg free
  2376   003BA2                     
  2377                           ;dc_motor.c: 159:         setMotorPWM(mR);
  2378   003BA2  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2379   003BA6  EC6E  F017         	call	_setMotorPWM	;wreg free
  2380   003BAA                     
  2381                           ;dc_motor.c: 162:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2382   003BAA  0E0B               	movlw	11
  2383   003BAC  6E16               	movwf	??_fullSpeedAhead^0,c
  2384   003BAE  0E62               	movlw	98
  2385   003BB0                     u5427:
  2386   003BB0  2EE8               	decfsz	wreg,f,c
  2387   003BB2  D7FE               	bra	u5427
  2388   003BB4  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2389   003BB6  D7FC               	bra	u5427
  2390   003BB8  D000               	nop2	
  2391   003BBA                     
  2392                           ;dc_motor.c: 163:     }
  2393   003BBA  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2394   003BBC  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2395   003BBE  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2396   003BC0  EFEB  F01D         	goto	u5021
  2397   003BC4  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2398   003BC6  E109               	bnz	u5020
  2399   003BC8  0E33               	movlw	51
  2400   003BCA  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2401   003BCC  A0D8               	btfss	status,0,c
  2402   003BCE  EFEB  F01D         	goto	u5021
  2403   003BD2  EFED  F01D         	goto	u5020
  2404   003BD6                     u5021:
  2405   003BD6  EFC3  F01D         	goto	l5590
  2406   003BDA                     u5020:
  2407   003BDA  0012               	return		;funcret
  2408   003BDC                     __end_of_fullSpeedAhead:
  2409                           	callstack 0
  2410                           
  2411 ;; *************** function _customDelayMs *****************
  2412 ;; Defined at:
  2413 ;;		line 366 in file "dc_motor.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  i               2    4[COMRAM] unsigned int 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2427 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;Total ram usage:        5 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 1
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_reverseStraight
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text5
  2442   004204                     __ptext5:
  2443                           	callstack 0
  2444   004204                     _customDelayMs:
  2445                           	callstack 27
  2446   004204                     
  2447                           ;dc_motor.c: 367:     for (unsigned int i = 0; i < milliseconds; i++) {
  2448   004204  0E00               	movlw	0
  2449   004206  6E06               	movwf	(customDelayMs@i+1)^0,c
  2450   004208  0E00               	movlw	0
  2451   00420A  6E05               	movwf	customDelayMs@i^0,c
  2452   00420C  EF12  F021         	goto	l503
  2453   004210                     l4030:
  2454                           
  2455                           ;dc_motor.c: 368:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2456   004210  0E15               	movlw	21
  2457   004212  6E04               	movwf	??_customDelayMs^0,c
  2458   004214  0EC6               	movlw	198
  2459   004216                     u5437:
  2460   004216  2EE8               	decfsz	wreg,f,c
  2461   004218  D7FE               	bra	u5437
  2462   00421A  2E04               	decfsz	??_customDelayMs^0,f,c
  2463   00421C  D7FC               	bra	u5437
  2464   00421E  D000               	nop2	
  2465   004220                     
  2466                           ;dc_motor.c: 369:     }
  2467   004220  4A05               	infsnz	customDelayMs@i^0,f,c
  2468   004222  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2469   004224                     l503:
  2470   004224  5002               	movf	customDelayMs@milliseconds^0,w,c
  2471   004226  5C05               	subwf	customDelayMs@i^0,w,c
  2472   004228  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2473   00422A  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2474   00422C  A0D8               	btfss	status,0,c
  2475   00422E  EF1B  F021         	goto	u3241
  2476   004232  EF1D  F021         	goto	u3240
  2477   004236                     u3241:
  2478   004236  EF08  F021         	goto	l4030
  2479   00423A                     u3240:
  2480   00423A  0012               	return		;funcret
  2481   00423C                     __end_of_customDelayMs:
  2482                           	callstack 0
  2483                           
  2484 ;; *************** function _moveWhite *****************
  2485 ;; Defined at:
  2486 ;;		line 321 in file "dc_motor.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2489 ;;		 -> motorL(9), 
  2490 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2491 ;;		 -> motorR(9), 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2506 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2507 ;;Total ram usage:        4 bytes
  2508 ;; Hardware stack levels used: 1
  2509 ;; Hardware stack levels required when called: 5
  2510 ;; This function calls:
  2511 ;;		_backHalf
  2512 ;;		_turn180
  2513 ;; This function is called by:
  2514 ;;		_returnHome
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text6
  2519   0042D8                     __ptext6:
  2520                           	callstack 0
  2521   0042D8                     _moveWhite:
  2522                           	callstack 24
  2523   0042D8                     
  2524                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2525   0042D8  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2526   0042DC  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2527   0042E0  EC32  F022         	call	_backHalf	;wreg free
  2528   0042E4                     
  2529                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2530   0042E4  0E29               	movlw	41
  2531   0042E6  6E20               	movwf	(??_moveWhite+1)^0,c
  2532   0042E8  0E96               	movlw	150
  2533   0042EA  6E1F               	movwf	??_moveWhite^0,c
  2534   0042EC  0E7F               	movlw	127
  2535   0042EE                     u5447:
  2536   0042EE  2EE8               	decfsz	wreg,f,c
  2537   0042F0  D7FE               	bra	u5447
  2538   0042F2  2E1F               	decfsz	??_moveWhite^0,f,c
  2539   0042F4  D7FC               	bra	u5447
  2540   0042F6  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2541   0042F8  D7FA               	bra	u5447
  2542   0042FA  0000               	nop	
  2543   0042FC                     
  2544                           ;dc_motor.c: 326:     turn180(mL,mR);
  2545   0042FC  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2546   004300  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2547   004304  ECD0  F021         	call	_turn180	;wreg free
  2548   004308  0012               	return		;funcret
  2549   00430A                     __end_of_moveWhite:
  2550                           	callstack 0
  2551                           
  2552 ;; *************** function _reading_hue *****************
  2553 ;; Defined at:
  2554 ;;		line 90 in file "color.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2557 ;;		 -> colorCurrent(8), 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  led_state      50    0        unsigned char [50]
  2560 ;;  hue             2   69[COMRAM] unsigned int 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  2   65[COMRAM] unsigned int 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;Total ram usage:        6 bytes
  2575 ;; Hardware stack levels used: 1
  2576 ;; Hardware stack levels required when called: 4
  2577 ;; This function calls:
  2578 ;;		_color_read_Blue
  2579 ;;		_color_read_Clear
  2580 ;;		_color_read_Green
  2581 ;;		_color_read_Red
  2582 ;;		_convert_rgb2hue
  2583 ;; This function is called by:
  2584 ;;		_main
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text7
  2589   00323A                     __ptext7:
  2590                           	callstack 0
  2591   00323A                     _reading_hue:
  2592                           	callstack 26
  2593   00323A                     
  2594                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2595   00323A  807F               	bsf	127,0,c	;volatile
  2596                           
  2597                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2598   00323C  9E7D               	bcf	125,7,c	;volatile
  2599                           
  2600                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2601   00323E  9679               	bcf	121,3,c	;volatile
  2602   003240                     
  2603                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2604   003240  0E29               	movlw	41
  2605   003242  6E45               	movwf	(??_reading_hue+1)^0,c
  2606   003244  0E96               	movlw	150
  2607   003246  6E44               	movwf	??_reading_hue^0,c
  2608   003248  0E7F               	movlw	127
  2609   00324A                     u5457:
  2610   00324A  2EE8               	decfsz	wreg,f,c
  2611   00324C  D7FE               	bra	u5457
  2612   00324E  2E44               	decfsz	??_reading_hue^0,f,c
  2613   003250  D7FC               	bra	u5457
  2614   003252  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2615   003254  D7FA               	bra	u5457
  2616   003256  0000               	nop	
  2617   003258                     
  2618                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2619   003258  EC97  F01F         	call	_color_read_Red	;wreg free
  2620   00325C  5042               	movf	reading_hue@cCurr^0,w,c
  2621   00325E  6ED9               	movwf	fsr2l,c
  2622   003260  6ADA               	clrf	fsr2h,c
  2623   003262  C006  FFDE         	movff	?_color_read_Red,postinc2
  2624   003266  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2625   00326A                     
  2626                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2627   00326A  907F               	bcf	127,0,c	;volatile
  2628   00326C                     
  2629                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2630   00326C  8E7D               	bsf	125,7,c	;volatile
  2631   00326E                     
  2632                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2633   00326E  9679               	bcf	121,3,c	;volatile
  2634   003270                     
  2635                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2636   003270  0E29               	movlw	41
  2637   003272  6E45               	movwf	(??_reading_hue+1)^0,c
  2638   003274  0E96               	movlw	150
  2639   003276  6E44               	movwf	??_reading_hue^0,c
  2640   003278  0E7F               	movlw	127
  2641   00327A                     u5467:
  2642   00327A  2EE8               	decfsz	wreg,f,c
  2643   00327C  D7FE               	bra	u5467
  2644   00327E  2E44               	decfsz	??_reading_hue^0,f,c
  2645   003280  D7FC               	bra	u5467
  2646   003282  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2647   003284  D7FA               	bra	u5467
  2648   003286  0000               	nop	
  2649                           
  2650                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2651   003288  ECBF  F01F         	call	_color_read_Green	;wreg free
  2652   00328C  5042               	movf	reading_hue@cCurr^0,w,c
  2653   00328E  6ED9               	movwf	fsr2l,c
  2654   003290  6ADA               	clrf	fsr2h,c
  2655   003292  0E02               	movlw	2
  2656   003294  26D9               	addwf	fsr2l,f,c
  2657   003296  C006  FFDE         	movff	?_color_read_Green,postinc2
  2658   00329A  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2659   00329E                     
  2660                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2661   00329E  907F               	bcf	127,0,c	;volatile
  2662   0032A0                     
  2663                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2664   0032A0  9E7D               	bcf	125,7,c	;volatile
  2665   0032A2                     
  2666                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2667   0032A2  8679               	bsf	121,3,c	;volatile
  2668   0032A4                     
  2669                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2670   0032A4  0E29               	movlw	41
  2671   0032A6  6E45               	movwf	(??_reading_hue+1)^0,c
  2672   0032A8  0E96               	movlw	150
  2673   0032AA  6E44               	movwf	??_reading_hue^0,c
  2674   0032AC  0E7F               	movlw	127
  2675   0032AE                     u5477:
  2676   0032AE  2EE8               	decfsz	wreg,f,c
  2677   0032B0  D7FE               	bra	u5477
  2678   0032B2  2E44               	decfsz	??_reading_hue^0,f,c
  2679   0032B4  D7FC               	bra	u5477
  2680   0032B6  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2681   0032B8  D7FA               	bra	u5477
  2682   0032BA  0000               	nop	
  2683   0032BC                     
  2684                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2685   0032BC  EC0F  F020         	call	_color_read_Blue	;wreg free
  2686   0032C0  5042               	movf	reading_hue@cCurr^0,w,c
  2687   0032C2  6ED9               	movwf	fsr2l,c
  2688   0032C4  6ADA               	clrf	fsr2h,c
  2689   0032C6  0E04               	movlw	4
  2690   0032C8  26D9               	addwf	fsr2l,f,c
  2691   0032CA  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2692   0032CE  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2693   0032D2                     
  2694                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2695   0032D2  807F               	bsf	127,0,c	;volatile
  2696   0032D4                     
  2697                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2698   0032D4  8E7D               	bsf	125,7,c	;volatile
  2699   0032D6                     
  2700                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2701   0032D6  8679               	bsf	121,3,c	;volatile
  2702                           
  2703                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2704   0032D8  0E29               	movlw	41
  2705   0032DA  6E45               	movwf	(??_reading_hue+1)^0,c
  2706   0032DC  0E96               	movlw	150
  2707   0032DE  6E44               	movwf	??_reading_hue^0,c
  2708   0032E0  0E7F               	movlw	127
  2709   0032E2                     u5487:
  2710   0032E2  2EE8               	decfsz	wreg,f,c
  2711   0032E4  D7FE               	bra	u5487
  2712   0032E6  2E44               	decfsz	??_reading_hue^0,f,c
  2713   0032E8  D7FC               	bra	u5487
  2714   0032EA  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2715   0032EC  D7FA               	bra	u5487
  2716   0032EE  0000               	nop	
  2717   0032F0                     
  2718                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2719   0032F0  ECE7  F01F         	call	_color_read_Clear	;wreg free
  2720   0032F4  5042               	movf	reading_hue@cCurr^0,w,c
  2721   0032F6  6ED9               	movwf	fsr2l,c
  2722   0032F8  6ADA               	clrf	fsr2h,c
  2723   0032FA  0E06               	movlw	6
  2724   0032FC  26D9               	addwf	fsr2l,f,c
  2725   0032FE  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2726   003302  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2727   003306                     
  2728                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2729   003306  0EE5               	movlw	low _colorCalibration
  2730   003308  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2731   00330A  0EDD               	movlw	low _colorCurrent
  2732   00330C  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2733   00330E  EC55  F007         	call	_convert_rgb2hue	;wreg free
  2734   003312  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2735   003316  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2736   00331A                     
  2737                           ;color.c: 145:     return hue;
  2738   00331A  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2739   00331E  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2740   003322  0012               	return		;funcret
  2741   003324                     __end_of_reading_hue:
  2742                           	callstack 0
  2743                           
  2744 ;; *************** function _convert_rgb2hue *****************
  2745 ;; Defined at:
  2746 ;;		line 229 in file "color.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  cMax            1   61[COMRAM] PTR struct colors
  2749 ;;		 -> colorCalibration(8), 
  2750 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2751 ;;		 -> colorCurrent(8), 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  c_char         20    0        unsigned char [20]
  2754 ;;  b               4   72[BANK0 ] float 
  2755 ;;  g               4   68[BANK0 ] float 
  2756 ;;  r               4   64[BANK0 ] float 
  2757 ;;  hue             4   60[BANK0 ] float 
  2758 ;;  max             4   56[BANK0 ] float 
  2759 ;;  diff            4   52[BANK0 ] float 
  2760 ;;  min             4   48[BANK0 ] float 
  2761 ;;  clearmax        4   28[BANK0 ] float 
  2762 ;;  clearcurrent    4   24[BANK0 ] float 
  2763 ;;  bluemax         4   20[BANK0 ] float 
  2764 ;;  bluecurrent     4   16[BANK0 ] float 
  2765 ;;  greenmax        4   12[BANK0 ] float 
  2766 ;;  greencurrent    4    8[BANK0 ] float 
  2767 ;;  redmax          4    4[BANK0 ] float 
  2768 ;;  redcurrent      4    0[BANK0 ] float 
  2769 ;;  c               4    0        float 
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  2   61[COMRAM] unsigned int 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;Total ram usage:       80 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 3
  2786 ;; This function calls:
  2787 ;;		___fladd
  2788 ;;		___fldiv
  2789 ;;		___fleq
  2790 ;;		___flge
  2791 ;;		___flmul
  2792 ;;		___flsub
  2793 ;;		___fltol
  2794 ;;		___xxtofl
  2795 ;; This function is called by:
  2796 ;;		_reading_hue
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text8
  2801   000EAA                     __ptext8:
  2802                           	callstack 0
  2803   000EAA                     _convert_rgb2hue:
  2804                           	callstack 26
  2805   000EAA                     
  2806                           ;color.c: 229: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 230: {;color.c: 231:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 232:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2807   000EAA  0E00               	movlw	0
  2808   000EAC  0100               	movlb	0	; () banked
  2809   000EAE  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2810   000EB0  0E00               	movlw	0
  2811   000EB2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2812   000EB4  0E00               	movlw	0
  2813   000EB6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2814   000EB8  0E00               	movlw	0
  2815   000EBA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2816   000EBC                     
  2817                           ; BSR set to: 0
  2818                           ;color.c: 234:     redcurrent = cCurr->red;
  2819   000EBC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2820   000EBE  6ED9               	movwf	fsr2l,c
  2821   000EC0  6ADA               	clrf	fsr2h,c
  2822   000EC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2823   000EC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2824   000ECA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2825   000ECE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2826   000ED2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2827   000ED4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2828   000ED6  0E00               	movlw	0
  2829   000ED8  EC14  F015         	call	___xxtofl
  2830   000EDC  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2831   000EE0  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2832   000EE4  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2833   000EE8  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2834   000EEC                     
  2835                           ;color.c: 235:     redmax = cMax->red;
  2836   000EEC  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2837   000EEE  6ED9               	movwf	fsr2l,c
  2838   000EF0  6ADA               	clrf	fsr2h,c
  2839   000EF2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2840   000EF6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2841   000EFA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2842   000EFE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2843   000F02  6A04               	clrf	(___xxtofl@val+2)^0,c
  2844   000F04  6A05               	clrf	(___xxtofl@val+3)^0,c
  2845   000F06  0E00               	movlw	0
  2846   000F08  EC14  F015         	call	___xxtofl
  2847   000F0C  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2848   000F10  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2849   000F14  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2850   000F18  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2851   000F1C                     
  2852                           ;color.c: 236:     greencurrent = cCurr->green;
  2853   000F1C  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2854   000F1E  6ED9               	movwf	fsr2l,c
  2855   000F20  6ADA               	clrf	fsr2h,c
  2856   000F22  0E02               	movlw	2
  2857   000F24  26D9               	addwf	fsr2l,f,c
  2858   000F26  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2859   000F2A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2860   000F2E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2861   000F32  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2862   000F36  6A04               	clrf	(___xxtofl@val+2)^0,c
  2863   000F38  6A05               	clrf	(___xxtofl@val+3)^0,c
  2864   000F3A  0E00               	movlw	0
  2865   000F3C  EC14  F015         	call	___xxtofl
  2866   000F40  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2867   000F44  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2868   000F48  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2869   000F4C  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2870   000F50                     
  2871                           ;color.c: 237:     greenmax = cMax->green;
  2872   000F50  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2873   000F52  6ED9               	movwf	fsr2l,c
  2874   000F54  6ADA               	clrf	fsr2h,c
  2875   000F56  0E02               	movlw	2
  2876   000F58  26D9               	addwf	fsr2l,f,c
  2877   000F5A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2878   000F5E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2879   000F62  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2880   000F66  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2881   000F6A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2882   000F6C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2883   000F6E  0E00               	movlw	0
  2884   000F70  EC14  F015         	call	___xxtofl
  2885   000F74  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2886   000F78  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2887   000F7C  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2888   000F80  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2889   000F84                     
  2890                           ;color.c: 238:     bluecurrent = cCurr->blue;
  2891   000F84  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2892   000F86  6ED9               	movwf	fsr2l,c
  2893   000F88  6ADA               	clrf	fsr2h,c
  2894   000F8A  0E04               	movlw	4
  2895   000F8C  26D9               	addwf	fsr2l,f,c
  2896   000F8E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2897   000F92  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2898   000F96  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2899   000F9A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2900   000F9E  6A04               	clrf	(___xxtofl@val+2)^0,c
  2901   000FA0  6A05               	clrf	(___xxtofl@val+3)^0,c
  2902   000FA2  0E00               	movlw	0
  2903   000FA4  EC14  F015         	call	___xxtofl
  2904   000FA8  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2905   000FAC  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2906   000FB0  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2907   000FB4  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2908   000FB8                     
  2909                           ;color.c: 239:     bluemax = cMax->blue;
  2910   000FB8  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2911   000FBA  6ED9               	movwf	fsr2l,c
  2912   000FBC  6ADA               	clrf	fsr2h,c
  2913   000FBE  0E04               	movlw	4
  2914   000FC0  26D9               	addwf	fsr2l,f,c
  2915   000FC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2916   000FC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2917   000FCA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2918   000FCE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2919   000FD2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2920   000FD4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2921   000FD6  0E00               	movlw	0
  2922   000FD8  EC14  F015         	call	___xxtofl
  2923   000FDC  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2924   000FE0  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2925   000FE4  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2926   000FE8  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2927   000FEC                     
  2928                           ;color.c: 240:     clearcurrent = cCurr->clear;
  2929   000FEC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2930   000FEE  6ED9               	movwf	fsr2l,c
  2931   000FF0  6ADA               	clrf	fsr2h,c
  2932   000FF2  0E06               	movlw	6
  2933   000FF4  26D9               	addwf	fsr2l,f,c
  2934   000FF6  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2935   000FFA  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2936   000FFE  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2937   001002  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2938   001006  6A04               	clrf	(___xxtofl@val+2)^0,c
  2939   001008  6A05               	clrf	(___xxtofl@val+3)^0,c
  2940   00100A  0E00               	movlw	0
  2941   00100C  EC14  F015         	call	___xxtofl
  2942   001010  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2943   001014  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2944   001018  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2945   00101C  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2946   001020                     
  2947                           ;color.c: 241:     clearmax = cMax->clear;
  2948   001020  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2949   001022  6ED9               	movwf	fsr2l,c
  2950   001024  6ADA               	clrf	fsr2h,c
  2951   001026  0E06               	movlw	6
  2952   001028  26D9               	addwf	fsr2l,f,c
  2953   00102A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2954   00102E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2955   001032  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2956   001036  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2957   00103A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2958   00103C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2959   00103E  0E00               	movlw	0
  2960   001040  EC14  F015         	call	___xxtofl
  2961   001044  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2962   001048  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2963   00104C  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2964   001050  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2965   001054  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2966   001058  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2967   00105C  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2968   001060  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2969   001064  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2970   001068  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2971   00106C  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2972   001070  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2973   001074  EC93  F00F         	call	___fldiv	;wreg free
  2974   001078                     
  2975                           ;color.c: 244:     char c_char[20];;color.c: 250:     r = redcurrent/redmax;
  2976   001078  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2977   00107C  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2978   001080  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2979   001084  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2980   001088  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  2981   00108C  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2982   001090  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2983   001094  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2984   001098  EC93  F00F         	call	___fldiv	;wreg free
  2985   00109C  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2986   0010A0  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2987   0010A4  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2988   0010A8  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2989   0010AC                     
  2990                           ;color.c: 251:     g = greencurrent/greenmax;
  2991   0010AC  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2992   0010B0  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2993   0010B4  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2994   0010B8  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2995   0010BC  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2996   0010C0  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2997   0010C4  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2998   0010C8  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2999   0010CC  EC93  F00F         	call	___fldiv	;wreg free
  3000   0010D0  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3001   0010D4  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3002   0010D8  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3003   0010DC  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3004   0010E0                     
  3005                           ;color.c: 252:     b = bluecurrent/bluemax;
  3006   0010E0  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3007   0010E4  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3008   0010E8  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3009   0010EC  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3010   0010F0  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3011   0010F4  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3012   0010F8  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3013   0010FC  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3014   001100  EC93  F00F         	call	___fldiv	;wreg free
  3015   001104  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3016   001108  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3017   00110C  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3018   001110  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3019   001114                     
  3020                           ;color.c: 254:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3021   001114  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3022   001118  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3023   00111C  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3024   001120  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3025   001124  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3026   001128  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3027   00112C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3028   001130  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3029   001134  EC9B  F018         	call	___flge	;wreg free
  3030   001138  A0D8               	btfss	status,0,c
  3031   00113A  EFA1  F008         	goto	u3921
  3032   00113E  EFA3  F008         	goto	u3920
  3033   001142                     u3921:
  3034   001142  EFD8  F008         	goto	l4506
  3035   001146                     u3920:
  3036   001146  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3037   00114A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3038   00114E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3039   001152  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3040   001156  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3041   00115A  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3042   00115E  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3043   001162  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3044   001166  EC9B  F018         	call	___flge	;wreg free
  3045   00116A  A0D8               	btfss	status,0,c
  3046   00116C  EFBA  F008         	goto	u3931
  3047   001170  EFBC  F008         	goto	u3930
  3048   001174                     u3931:
  3049   001174  EFC6  F008         	goto	l119
  3050   001178                     u3930:
  3051   001178  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$428
  3052   00117C  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$428+1
  3053   001180  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$428+2
  3054   001184  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$428+3
  3055   001188  EFCE  F008         	goto	l121
  3056   00118C                     l119:
  3057   00118C  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$428
  3058   001190  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$428+1
  3059   001194  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$428+2
  3060   001198  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$428+3
  3061   00119C                     l121:
  3062   00119C  C080  F090         	movff	_convert_rgb2hue$428,convert_rgb2hue@min
  3063   0011A0  C081  F091         	movff	_convert_rgb2hue$428+1,convert_rgb2hue@min+1
  3064   0011A4  C082  F092         	movff	_convert_rgb2hue$428+2,convert_rgb2hue@min+2
  3065   0011A8  C083  F093         	movff	_convert_rgb2hue$428+3,convert_rgb2hue@min+3
  3066   0011AC  EF0B  F009         	goto	l4510
  3067   0011B0                     l4506:
  3068   0011B0  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3069   0011B4  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3070   0011B8  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3071   0011BC  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3072   0011C0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3073   0011C4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3074   0011C8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3075   0011CC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3076   0011D0  EC9B  F018         	call	___flge	;wreg free
  3077   0011D4  A0D8               	btfss	status,0,c
  3078   0011D6  EFEF  F008         	goto	u3941
  3079   0011DA  EFF1  F008         	goto	u3940
  3080   0011DE                     u3941:
  3081   0011DE  EFFB  F008         	goto	l123
  3082   0011E2                     u3940:
  3083   0011E2  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  3084   0011E6  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  3085   0011EA  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  3086   0011EE  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  3087   0011F2  EF03  F009         	goto	l125
  3088   0011F6                     l123:
  3089   0011F6  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$429
  3090   0011FA  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$429+1
  3091   0011FE  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$429+2
  3092   001202  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$429+3
  3093   001206                     l125:
  3094   001206  C084  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  3095   00120A  C085  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  3096   00120E  C086  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  3097   001212  C087  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  3098   001216                     l4510:
  3099                           
  3100                           ;color.c: 255:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3101   001216  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3102   00121A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3103   00121E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3104   001222  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3105   001226  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3106   00122A  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3107   00122E  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3108   001232  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3109   001236  EC9B  F018         	call	___flge	;wreg free
  3110   00123A  A0D8               	btfss	status,0,c
  3111   00123C  EF22  F009         	goto	u3951
  3112   001240  EF24  F009         	goto	u3950
  3113   001244                     u3951:
  3114   001244  EF59  F009         	goto	l4516
  3115   001248                     u3950:
  3116   001248  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3117   00124C  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3118   001250  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3119   001254  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3120   001258  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3121   00125C  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3122   001260  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3123   001264  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3124   001268  EC9B  F018         	call	___flge	;wreg free
  3125   00126C  A0D8               	btfss	status,0,c
  3126   00126E  EF3B  F009         	goto	u3961
  3127   001272  EF3D  F009         	goto	u3960
  3128   001276                     u3961:
  3129   001276  EF47  F009         	goto	l131
  3130   00127A                     u3960:
  3131   00127A  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  3132   00127E  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  3133   001282  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  3134   001286  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  3135   00128A  EF4F  F009         	goto	l133
  3136   00128E                     l131:
  3137   00128E  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$430
  3138   001292  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$430+1
  3139   001296  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$430+2
  3140   00129A  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$430+3
  3141   00129E                     l133:
  3142   00129E  C088  F098         	movff	_convert_rgb2hue$430,convert_rgb2hue@max
  3143   0012A2  C089  F099         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@max+1
  3144   0012A6  C08A  F09A         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@max+2
  3145   0012AA  C08B  F09B         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@max+3
  3146   0012AE  EF8C  F009         	goto	l4520
  3147   0012B2                     l4516:
  3148   0012B2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3149   0012B6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3150   0012BA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3151   0012BE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3152   0012C2  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3153   0012C6  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3154   0012CA  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3155   0012CE  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3156   0012D2  EC9B  F018         	call	___flge	;wreg free
  3157   0012D6  A0D8               	btfss	status,0,c
  3158   0012D8  EF70  F009         	goto	u3971
  3159   0012DC  EF72  F009         	goto	u3970
  3160   0012E0                     u3971:
  3161   0012E0  EF7C  F009         	goto	l135
  3162   0012E4                     u3970:
  3163   0012E4  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  3164   0012E8  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  3165   0012EC  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  3166   0012F0  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  3167   0012F4  EF84  F009         	goto	l137
  3168   0012F8                     l135:
  3169   0012F8  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$431
  3170   0012FC  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$431+1
  3171   001300  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$431+2
  3172   001304  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$431+3
  3173   001308                     l137:
  3174   001308  C08C  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  3175   00130C  C08D  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  3176   001310  C08E  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  3177   001314  C08F  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  3178   001318                     l4520:
  3179                           
  3180                           ;color.c: 256:     diff = max - min;
  3181   001318  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3182   00131C  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3183   001320  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3184   001324  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3185   001328  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3186   00132C  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3187   001330  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3188   001334  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3189   001338  EC7D  F020         	call	___flsub	;wreg free
  3190   00133C  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3191   001340  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3192   001344  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3193   001348  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3194                           
  3195                           ;color.c: 257:     if (max == min) {
  3196   00134C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3197   001350  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3198   001354  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3199   001358  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3200   00135C  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3201   001360  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3202   001364  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3203   001368  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3204   00136C  EC6A  F01B         	call	___fleq	;wreg free
  3205   001370  A0D8               	btfss	status,0,c
  3206   001372  EFBD  F009         	goto	u3981
  3207   001376  EFBF  F009         	goto	u3980
  3208   00137A                     u3981:
  3209   00137A  EFCA  F009         	goto	l4524
  3210   00137E                     u3980:
  3211   00137E                     
  3212                           ;color.c: 258:         hue = 0;
  3213   00137E  0E00               	movlw	0
  3214   001380  0100               	movlb	0	; () banked
  3215   001382  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3216   001384  0E00               	movlw	0
  3217   001386  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3218   001388  0E00               	movlw	0
  3219   00138A  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3220   00138C  0E00               	movlw	0
  3221   00138E  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3222                           
  3223                           ;color.c: 259:     } else if (max == r){
  3224   001390  EFD3  F00A         	goto	l4536
  3225   001394                     l4524:
  3226   001394  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3227   001398  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3228   00139C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3229   0013A0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3230   0013A4  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3231   0013A8  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3232   0013AC  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3233   0013B0  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3234   0013B4  EC6A  F01B         	call	___fleq	;wreg free
  3235   0013B8  A0D8               	btfss	status,0,c
  3236   0013BA  EFE1  F009         	goto	u3991
  3237   0013BE  EFE3  F009         	goto	u3990
  3238   0013C2                     u3991:
  3239   0013C2  EF11  F00A         	goto	l4528
  3240   0013C6                     u3990:
  3241   0013C6                     
  3242                           ;color.c: 260:         hue = (b - g) / diff;
  3243   0013C6  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3244   0013CA  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3245   0013CE  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3246   0013D2  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3247   0013D6  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3248   0013DA  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3249   0013DE  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3250   0013E2  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3251   0013E6  EC7D  F020         	call	___flsub	;wreg free
  3252   0013EA  C012  F01B         	movff	?___flsub,___fldiv@b
  3253   0013EE  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3254   0013F2  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3255   0013F6  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3256   0013FA  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3257   0013FE  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3258   001402  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3259   001406  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3260   00140A  EC93  F00F         	call	___fldiv	;wreg free
  3261   00140E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3262   001412  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3263   001416  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3264   00141A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3265                           
  3266                           ;color.c: 261:     } else if (max == g){
  3267   00141E  EFD3  F00A         	goto	l4536
  3268   001422                     l4528:
  3269   001422  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3270   001426  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3271   00142A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3272   00142E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3273   001432  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3274   001436  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3275   00143A  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3276   00143E  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3277   001442  EC6A  F01B         	call	___fleq	;wreg free
  3278   001446  A0D8               	btfss	status,0,c
  3279   001448  EF28  F00A         	goto	u4001
  3280   00144C  EF2A  F00A         	goto	u4000
  3281   001450                     u4001:
  3282   001450  EF72  F00A         	goto	l4532
  3283   001454                     u4000:
  3284   001454                     
  3285                           ;color.c: 262:         hue = (b - r) / diff;
  3286   001454  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3287   001458  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3288   00145C  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3289   001460  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3290   001464  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3291   001468  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3292   00146C  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3293   001470  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3294   001474  EC7D  F020         	call	___flsub	;wreg free
  3295   001478  C012  F01B         	movff	?___flsub,___fldiv@b
  3296   00147C  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3297   001480  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3298   001484  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3299   001488  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3300   00148C  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3301   001490  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3302   001494  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3303   001498  EC93  F00F         	call	___fldiv	;wreg free
  3304   00149C  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3305   0014A0  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3306   0014A4  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3307   0014A8  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3308                           
  3309                           ;color.c: 263:         hue = hue + 2;
  3310   0014AC  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3311   0014B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3312   0014B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3313   0014B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3314   0014BC  0E00               	movlw	0
  3315   0014BE  6E06               	movwf	___fladd@a^0,c
  3316   0014C0  0E00               	movlw	0
  3317   0014C2  6E07               	movwf	(___fladd@a+1)^0,c
  3318   0014C4  0E00               	movlw	0
  3319   0014C6  6E08               	movwf	(___fladd@a+2)^0,c
  3320   0014C8  0E40               	movlw	64
  3321   0014CA  6E09               	movwf	(___fladd@a+3)^0,c
  3322   0014CC  EC1E  F00B         	call	___fladd	;wreg free
  3323   0014D0  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3324   0014D4  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3325   0014D8  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3326   0014DC  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3327                           
  3328                           ;color.c: 264:     } else if (max == b){
  3329   0014E0  EFD3  F00A         	goto	l4536
  3330   0014E4                     l4532:
  3331   0014E4  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3332   0014E8  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3333   0014EC  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3334   0014F0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3335   0014F4  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3336   0014F8  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3337   0014FC  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3338   001500  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3339   001504  EC6A  F01B         	call	___fleq	;wreg free
  3340   001508  A0D8               	btfss	status,0,c
  3341   00150A  EF89  F00A         	goto	u4011
  3342   00150E  EF8B  F00A         	goto	u4010
  3343   001512                     u4011:
  3344   001512  EFD3  F00A         	goto	l141
  3345   001516                     u4010:
  3346   001516                     
  3347                           ;color.c: 265:         hue = (r - g) / diff;
  3348   001516  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3349   00151A  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3350   00151E  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3351   001522  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3352   001526  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3353   00152A  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3354   00152E  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3355   001532  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3356   001536  EC7D  F020         	call	___flsub	;wreg free
  3357   00153A  C012  F01B         	movff	?___flsub,___fldiv@b
  3358   00153E  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3359   001542  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3360   001546  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3361   00154A  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3362   00154E  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3363   001552  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3364   001556  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3365   00155A  EC93  F00F         	call	___fldiv	;wreg free
  3366   00155E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3367   001562  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3368   001566  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3369   00156A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3370                           
  3371                           ;color.c: 266:         hue = hue + 4;
  3372   00156E  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3373   001572  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3374   001576  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3375   00157A  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3376   00157E  0E00               	movlw	0
  3377   001580  6E06               	movwf	___fladd@a^0,c
  3378   001582  0E00               	movlw	0
  3379   001584  6E07               	movwf	(___fladd@a+1)^0,c
  3380   001586  0E80               	movlw	128
  3381   001588  6E08               	movwf	(___fladd@a+2)^0,c
  3382   00158A  0E40               	movlw	64
  3383   00158C  6E09               	movwf	(___fladd@a+3)^0,c
  3384   00158E  EC1E  F00B         	call	___fladd	;wreg free
  3385   001592  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3386   001596  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3387   00159A  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3388   00159E  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3389   0015A2  EFD3  F00A         	goto	l4536
  3390   0015A6                     l141:
  3391   0015A6                     l4536:
  3392                           
  3393                           ;color.c: 269:     hue = hue * 60;
  3394   0015A6  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3395   0015AA  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3396   0015AE  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3397   0015B2  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3398   0015B6  0E00               	movlw	0
  3399   0015B8  6E06               	movwf	___flmul@a^0,c
  3400   0015BA  0E00               	movlw	0
  3401   0015BC  6E07               	movwf	(___flmul@a+1)^0,c
  3402   0015BE  0E70               	movlw	112
  3403   0015C0  6E08               	movwf	(___flmul@a+2)^0,c
  3404   0015C2  0E42               	movlw	66
  3405   0015C4  6E09               	movwf	(___flmul@a+3)^0,c
  3406   0015C6  EC7E  F00D         	call	___flmul	;wreg free
  3407   0015CA  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3408   0015CE  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3409   0015D2  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3410   0015D6  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3411   0015DA                     
  3412                           ;color.c: 270:     if (hue < 0) {
  3413   0015DA  0100               	movlb	0	; () banked
  3414   0015DC  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3415   0015DE  EFF5  F00A         	goto	u4020
  3416   0015E2  EFF3  F00A         	goto	u4021
  3417   0015E6                     u4021:
  3418   0015E6  EF0F  F00B         	goto	l145
  3419   0015EA                     u4020:
  3420   0015EA                     
  3421                           ; BSR set to: 0
  3422                           ;color.c: 271:         hue = hue + 360;
  3423   0015EA  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3424   0015EE  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3425   0015F2  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3426   0015F6  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3427   0015FA  0E00               	movlw	0
  3428   0015FC  6E06               	movwf	___fladd@a^0,c
  3429   0015FE  0E00               	movlw	0
  3430   001600  6E07               	movwf	(___fladd@a+1)^0,c
  3431   001602  0EB4               	movlw	180
  3432   001604  6E08               	movwf	(___fladd@a+2)^0,c
  3433   001606  0E43               	movlw	67
  3434   001608  6E09               	movwf	(___fladd@a+3)^0,c
  3435   00160A  EC1E  F00B         	call	___fladd	;wreg free
  3436   00160E  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3437   001612  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3438   001616  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3439   00161A  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3440   00161E                     l145:
  3441                           
  3442                           ;color.c: 274:     return (unsigned int)hue;
  3443   00161E  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3444   001622  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3445   001626  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3446   00162A  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3447   00162E  EC18  F018         	call	___fltol	;wreg free
  3448   001632  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3449   001636  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3450   00163A  0012               	return		;funcret
  3451   00163C                     __end_of_convert_rgb2hue:
  3452                           	callstack 0
  3453                           
  3454 ;; *************** function ___xxtofl *****************
  3455 ;; Defined at:
  3456 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  sign            1    wreg     unsigned char 
  3459 ;;  val             4    1[COMRAM] long 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  sign            1    9[COMRAM] unsigned char 
  3462 ;;  arg             4   11[COMRAM] unsigned long 
  3463 ;;  exp             1   10[COMRAM] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  4    1[COMRAM] unsigned char 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3474 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3475 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3476 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3477 ;;Total ram usage:       14 bytes
  3478 ;; Hardware stack levels used: 1
  3479 ;; Hardware stack levels required when called: 1
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_convert_rgb2hue
  3484 ;;		_main
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text9
  3489   002A28                     __ptext9:
  3490                           	callstack 0
  3491   002A28                     ___xxtofl:
  3492                           	callstack 27
  3493                           
  3494                           ;incstack = 0
  3495                           ;___xxtofl@sign stored from wreg
  3496   002A28  6E0A               	movwf	___xxtofl@sign^0,c
  3497   002A2A  500A               	movf	___xxtofl@sign^0,w,c
  3498   002A2C  B4D8               	btfsc	status,2,c
  3499   002A2E  EF1B  F015         	goto	u3821
  3500   002A32  EF1D  F015         	goto	u3820
  3501   002A36                     u3821:
  3502   002A36  EF3F  F015         	goto	l1329
  3503   002A3A                     u3820:
  3504   002A3A  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3505   002A3C  EF24  F015         	goto	u3830
  3506   002A40  EF22  F015         	goto	u3831
  3507   002A44                     u3831:
  3508   002A44  EF3F  F015         	goto	l1329
  3509   002A48                     u3830:
  3510   002A48  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3511   002A4C  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3512   002A50  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3513   002A54  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3514   002A58  1E06               	comf	??___xxtofl^0,f,c
  3515   002A5A  1E07               	comf	(??___xxtofl+1)^0,f,c
  3516   002A5C  1E08               	comf	(??___xxtofl+2)^0,f,c
  3517   002A5E  1E09               	comf	(??___xxtofl+3)^0,f,c
  3518   002A60  2A06               	incf	??___xxtofl^0,f,c
  3519   002A62  0E00               	movlw	0
  3520   002A64  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3521   002A66  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3522   002A68  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3523   002A6A  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3524   002A6E  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3525   002A72  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3526   002A76  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3527   002A7A  EF47  F015         	goto	l4396
  3528   002A7E                     l1329:
  3529   002A7E  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3530   002A82  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3531   002A86  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3532   002A8A  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3533   002A8E                     l4396:
  3534   002A8E  5002               	movf	___xxtofl@val^0,w,c
  3535   002A90  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3536   002A92  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3537   002A94  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3538   002A96  A4D8               	btfss	status,2,c
  3539   002A98  EF50  F015         	goto	u3841
  3540   002A9C  EF52  F015         	goto	u3840
  3541   002AA0                     u3841:
  3542   002AA0  EF5C  F015         	goto	l4402
  3543   002AA4                     u3840:
  3544   002AA4  0E00               	movlw	0
  3545   002AA6  6E02               	movwf	?___xxtofl^0,c
  3546   002AA8  0E00               	movlw	0
  3547   002AAA  6E03               	movwf	(?___xxtofl+1)^0,c
  3548   002AAC  0E00               	movlw	0
  3549   002AAE  6E04               	movwf	(?___xxtofl+2)^0,c
  3550   002AB0  0E00               	movlw	0
  3551   002AB2  6E05               	movwf	(?___xxtofl+3)^0,c
  3552   002AB4  EFED  F015         	goto	l1332
  3553   002AB8                     l4402:
  3554   002AB8  0E96               	movlw	150
  3555   002ABA  6E0B               	movwf	___xxtofl@exp^0,c
  3556   002ABC  EF66  F015         	goto	l4406
  3557   002AC0                     l4404:
  3558   002AC0  2A0B               	incf	___xxtofl@exp^0,f,c
  3559   002AC2  90D8               	bcf	status,0,c
  3560   002AC4  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3561   002AC6  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3562   002AC8  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3563   002ACA  320C               	rrcf	___xxtofl@arg^0,f,c
  3564   002ACC                     l4406:
  3565   002ACC  0E00               	movlw	0
  3566   002ACE  140C               	andwf	___xxtofl@arg^0,w,c
  3567   002AD0  6E06               	movwf	??___xxtofl^0,c
  3568   002AD2  0E00               	movlw	0
  3569   002AD4  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3570   002AD6  6E07               	movwf	(??___xxtofl+1)^0,c
  3571   002AD8  0E00               	movlw	0
  3572   002ADA  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3573   002ADC  6E08               	movwf	(??___xxtofl+2)^0,c
  3574   002ADE  0EFE               	movlw	254
  3575   002AE0  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3576   002AE2  6E09               	movwf	(??___xxtofl+3)^0,c
  3577   002AE4  5006               	movf	??___xxtofl^0,w,c
  3578   002AE6  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3579   002AE8  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3580   002AEA  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3581   002AEC  A4D8               	btfss	status,2,c
  3582   002AEE  EF7B  F015         	goto	u3851
  3583   002AF2  EF7D  F015         	goto	u3850
  3584   002AF6                     u3851:
  3585   002AF6  EF60  F015         	goto	l4404
  3586   002AFA                     u3850:
  3587   002AFA  EF8B  F015         	goto	l1336
  3588   002AFE                     l4408:
  3589   002AFE  2A0B               	incf	___xxtofl@exp^0,f,c
  3590   002B00  0E01               	movlw	1
  3591   002B02  260C               	addwf	___xxtofl@arg^0,f,c
  3592   002B04  0E00               	movlw	0
  3593   002B06  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3594   002B08  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3595   002B0A  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3596   002B0C  90D8               	bcf	status,0,c
  3597   002B0E  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3598   002B10  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3599   002B12  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3600   002B14  320C               	rrcf	___xxtofl@arg^0,f,c
  3601   002B16                     l1336:
  3602   002B16  0E00               	movlw	0
  3603   002B18  140C               	andwf	___xxtofl@arg^0,w,c
  3604   002B1A  6E06               	movwf	??___xxtofl^0,c
  3605   002B1C  0E00               	movlw	0
  3606   002B1E  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3607   002B20  6E07               	movwf	(??___xxtofl+1)^0,c
  3608   002B22  0E00               	movlw	0
  3609   002B24  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3610   002B26  6E08               	movwf	(??___xxtofl+2)^0,c
  3611   002B28  0EFF               	movlw	255
  3612   002B2A  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3613   002B2C  6E09               	movwf	(??___xxtofl+3)^0,c
  3614   002B2E  5006               	movf	??___xxtofl^0,w,c
  3615   002B30  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3616   002B32  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3617   002B34  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3618   002B36  A4D8               	btfss	status,2,c
  3619   002B38  EFA0  F015         	goto	u3861
  3620   002B3C  EFA2  F015         	goto	u3860
  3621   002B40                     u3861:
  3622   002B40  EF7F  F015         	goto	l4408
  3623   002B44                     u3860:
  3624   002B44  EFAA  F015         	goto	l4416
  3625   002B48                     l4414:
  3626   002B48  060B               	decf	___xxtofl@exp^0,f,c
  3627   002B4A  90D8               	bcf	status,0,c
  3628   002B4C  360C               	rlcf	___xxtofl@arg^0,f,c
  3629   002B4E  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3630   002B50  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3631   002B52  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3632   002B54                     l4416:
  3633   002B54  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3634   002B56  EFAF  F015         	goto	u3871
  3635   002B5A  EFB1  F015         	goto	u3870
  3636   002B5E                     u3871:
  3637   002B5E  EFB9  F015         	goto	l1343
  3638   002B62                     u3870:
  3639   002B62  0E02               	movlw	2
  3640   002B64  600B               	cpfslt	___xxtofl@exp^0,c
  3641   002B66  EFB7  F015         	goto	u3881
  3642   002B6A  EFB9  F015         	goto	u3880
  3643   002B6E                     u3881:
  3644   002B6E  EFA4  F015         	goto	l4414
  3645   002B72                     u3880:
  3646   002B72                     l1343:
  3647   002B72  B00B               	btfsc	___xxtofl@exp^0,0,c
  3648   002B74  EFBE  F015         	goto	u3891
  3649   002B78  EFC0  F015         	goto	u3890
  3650   002B7C                     u3891:
  3651   002B7C  EFC1  F015         	goto	l4422
  3652   002B80                     u3890:
  3653   002B80  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3654   002B82                     l4422:
  3655   002B82  90D8               	bcf	status,0,c
  3656   002B84  320B               	rrcf	___xxtofl@exp^0,f,c
  3657   002B86  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3658   002B8A  6A07               	clrf	(??___xxtofl+1)^0,c
  3659   002B8C  6A08               	clrf	(??___xxtofl+2)^0,c
  3660   002B8E  6A09               	clrf	(??___xxtofl+3)^0,c
  3661   002B90  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3662   002B94  6A08               	clrf	(??___xxtofl+2)^0,c
  3663   002B96  6A07               	clrf	(??___xxtofl+1)^0,c
  3664   002B98  6A06               	clrf	??___xxtofl^0,c
  3665   002B9A  5006               	movf	??___xxtofl^0,w,c
  3666   002B9C  120C               	iorwf	___xxtofl@arg^0,f,c
  3667   002B9E  5007               	movf	(??___xxtofl+1)^0,w,c
  3668   002BA0  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3669   002BA2  5008               	movf	(??___xxtofl+2)^0,w,c
  3670   002BA4  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3671   002BA6  5009               	movf	(??___xxtofl+3)^0,w,c
  3672   002BA8  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3673   002BAA  500A               	movf	___xxtofl@sign^0,w,c
  3674   002BAC  B4D8               	btfsc	status,2,c
  3675   002BAE  EFDB  F015         	goto	u3901
  3676   002BB2  EFDD  F015         	goto	u3900
  3677   002BB6                     u3901:
  3678   002BB6  EFE5  F015         	goto	l4432
  3679   002BBA                     u3900:
  3680   002BBA  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3681   002BBC  EFE4  F015         	goto	u3910
  3682   002BC0  EFE2  F015         	goto	u3911
  3683   002BC4                     u3911:
  3684   002BC4  EFE5  F015         	goto	l4432
  3685   002BC8                     u3910:
  3686   002BC8  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3687   002BCA                     l4432:
  3688   002BCA  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3689   002BCE  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3690   002BD2  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3691   002BD6  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3692   002BDA                     l1332:
  3693   002BDA  0012               	return		;funcret
  3694   002BDC                     __end_of___xxtofl:
  3695                           	callstack 0
  3696                           
  3697 ;; *************** function ___fltol *****************
  3698 ;; Defined at:
  3699 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  f1              4   51[COMRAM] unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  exp1            1   60[COMRAM] unsigned char 
  3704 ;;  sign1           1   59[COMRAM] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  4   51[COMRAM] long 
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3717 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3718 ;;Total ram usage:       10 bytes
  3719 ;; Hardware stack levels used: 1
  3720 ;; Hardware stack levels required when called: 1
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_convert_rgb2hue
  3725 ;;		_main
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text10
  3730   003030                     __ptext10:
  3731                           	callstack 0
  3732   003030                     ___fltol:
  3733                           	callstack 27
  3734   003030  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3735   003032  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3736   003034  6E3D               	movwf	___fltol@exp1^0,c
  3737   003036  503D               	movf	___fltol@exp1^0,w,c
  3738   003038  A4D8               	btfss	status,2,c
  3739   00303A  EF21  F018         	goto	u3751
  3740   00303E  EF23  F018         	goto	u3750
  3741   003042                     u3751:
  3742   003042  EF2D  F018         	goto	l4352
  3743   003046                     u3750:
  3744   003046                     l4348:
  3745   003046  0E00               	movlw	0
  3746   003048  6E34               	movwf	?___fltol^0,c
  3747   00304A  0E00               	movlw	0
  3748   00304C  6E35               	movwf	(?___fltol+1)^0,c
  3749   00304E  0E00               	movlw	0
  3750   003050  6E36               	movwf	(?___fltol+2)^0,c
  3751   003052  0E00               	movlw	0
  3752   003054  6E37               	movwf	(?___fltol+3)^0,c
  3753   003056  EF9A  F018         	goto	l971
  3754   00305A                     l4352:
  3755   00305A  C034  F038         	movff	___fltol@f1,??___fltol
  3756   00305E  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3757   003062  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3758   003066  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3759   00306A  0E20               	movlw	32
  3760   00306C  EF3D  F018         	goto	u3760
  3761   003070                     u3765:
  3762   003070  90D8               	bcf	status,0,c
  3763   003072  323B               	rrcf	(??___fltol+3)^0,f,c
  3764   003074  323A               	rrcf	(??___fltol+2)^0,f,c
  3765   003076  3239               	rrcf	(??___fltol+1)^0,f,c
  3766   003078  3238               	rrcf	??___fltol^0,f,c
  3767   00307A                     u3760:
  3768   00307A  2EE8               	decfsz	wreg,f,c
  3769   00307C  EF38  F018         	goto	u3765
  3770   003080  5038               	movf	??___fltol^0,w,c
  3771   003082  6E3C               	movwf	___fltol@sign1^0,c
  3772   003084  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3773   003086  0EFF               	movlw	255
  3774   003088  1634               	andwf	___fltol@f1^0,f,c
  3775   00308A  0EFF               	movlw	255
  3776   00308C  1635               	andwf	(___fltol@f1+1)^0,f,c
  3777   00308E  0EFF               	movlw	255
  3778   003090  1636               	andwf	(___fltol@f1+2)^0,f,c
  3779   003092  0E00               	movlw	0
  3780   003094  1637               	andwf	(___fltol@f1+3)^0,f,c
  3781   003096  0E96               	movlw	150
  3782   003098  5E3D               	subwf	___fltol@exp1^0,f,c
  3783   00309A  BE3D               	btfsc	___fltol@exp1^0,7,c
  3784   00309C  EF54  F018         	goto	u3770
  3785   0030A0  EF52  F018         	goto	u3771
  3786   0030A4                     u3771:
  3787   0030A4  EF6A  F018         	goto	l4372
  3788   0030A8                     u3770:
  3789   0030A8  503D               	movf	___fltol@exp1^0,w,c
  3790   0030AA  0A80               	xorlw	128
  3791   0030AC  0F97               	addlw	151
  3792   0030AE  B0D8               	btfsc	status,0,c
  3793   0030B0  EF5C  F018         	goto	u3781
  3794   0030B4  EF5E  F018         	goto	u3780
  3795   0030B8                     u3781:
  3796   0030B8  EF60  F018         	goto	l4368
  3797   0030BC                     u3780:
  3798   0030BC  EF23  F018         	goto	l4348
  3799   0030C0                     l4368:
  3800   0030C0  90D8               	bcf	status,0,c
  3801   0030C2  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3802   0030C4  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3803   0030C6  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3804   0030C8  3234               	rrcf	___fltol@f1^0,f,c
  3805   0030CA  3E3D               	incfsz	___fltol@exp1^0,f,c
  3806   0030CC  EF60  F018         	goto	l4368
  3807   0030D0  EF82  F018         	goto	l4382
  3808   0030D4                     l4372:
  3809   0030D4  0E1F               	movlw	31
  3810   0030D6  643D               	cpfsgt	___fltol@exp1^0,c
  3811   0030D8  EF70  F018         	goto	u3791
  3812   0030DC  EF72  F018         	goto	u3790
  3813   0030E0                     u3791:
  3814   0030E0  EF7A  F018         	goto	l4380
  3815   0030E4                     u3790:
  3816   0030E4  EF23  F018         	goto	l4348
  3817   0030E8                     l4378:
  3818   0030E8  90D8               	bcf	status,0,c
  3819   0030EA  3634               	rlcf	___fltol@f1^0,f,c
  3820   0030EC  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3821   0030EE  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3822   0030F0  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3823   0030F2  063D               	decf	___fltol@exp1^0,f,c
  3824   0030F4                     l4380:
  3825   0030F4  503D               	movf	___fltol@exp1^0,w,c
  3826   0030F6  A4D8               	btfss	status,2,c
  3827   0030F8  EF80  F018         	goto	u3801
  3828   0030FC  EF82  F018         	goto	u3800
  3829   003100                     u3801:
  3830   003100  EF74  F018         	goto	l4378
  3831   003104                     u3800:
  3832   003104                     l4382:
  3833   003104  503C               	movf	___fltol@sign1^0,w,c
  3834   003106  B4D8               	btfsc	status,2,c
  3835   003108  EF88  F018         	goto	u3811
  3836   00310C  EF8A  F018         	goto	u3810
  3837   003110                     u3811:
  3838   003110  EF92  F018         	goto	l4386
  3839   003114                     u3810:
  3840   003114  1E37               	comf	(___fltol@f1+3)^0,f,c
  3841   003116  1E36               	comf	(___fltol@f1+2)^0,f,c
  3842   003118  1E35               	comf	(___fltol@f1+1)^0,f,c
  3843   00311A  6C34               	negf	___fltol@f1^0,c
  3844   00311C  0E00               	movlw	0
  3845   00311E  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3846   003120  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3847   003122  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3848   003124                     l4386:
  3849   003124  C034  F034         	movff	___fltol@f1,?___fltol
  3850   003128  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3851   00312C  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3852   003130  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3853   003134                     l971:
  3854   003134  0012               	return		;funcret
  3855   003136                     __end_of___fltol:
  3856                           	callstack 0
  3857                           
  3858 ;; *************** function ___flsub *****************
  3859 ;; Defined at:
  3860 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  b               4   17[COMRAM] long 
  3863 ;;  a               4   21[COMRAM] long 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;		None
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  4   17[COMRAM] long 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3875 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;Total ram usage:        8 bytes
  3880 ;; Hardware stack levels used: 1
  3881 ;; Hardware stack levels required when called: 2
  3882 ;; This function calls:
  3883 ;;		___fladd
  3884 ;; This function is called by:
  3885 ;;		_convert_rgb2hue
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text11
  3890   0040FA                     __ptext11:
  3891                           	callstack 0
  3892   0040FA                     ___flsub:
  3893                           	callstack 26
  3894   0040FA  0E00               	movlw	0
  3895   0040FC  1A16               	xorwf	___flsub@a^0,f,c
  3896   0040FE  0E00               	movlw	0
  3897   004100  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3898   004102  0E00               	movlw	0
  3899   004104  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3900   004106  0E80               	movlw	128
  3901   004108  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3902   00410A  C012  F002         	movff	___flsub@b,___fladd@b
  3903   00410E  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3904   004112  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3905   004116  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3906   00411A  C016  F006         	movff	___flsub@a,___fladd@a
  3907   00411E  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3908   004122  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3909   004126  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3910   00412A  EC1E  F00B         	call	___fladd	;wreg free
  3911   00412E  C002  F012         	movff	?___fladd,?___flsub
  3912   004132  C003  F013         	movff	?___fladd+1,?___flsub+1
  3913   004136  C004  F014         	movff	?___fladd+2,?___flsub+2
  3914   00413A  C005  F015         	movff	?___fladd+3,?___flsub+3
  3915   00413E  0012               	return		;funcret
  3916   004140                     __end_of___flsub:
  3917                           	callstack 0
  3918                           
  3919 ;; *************** function ___fladd *****************
  3920 ;; Defined at:
  3921 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;  b               4    1[COMRAM] long 
  3924 ;;  a               4    5[COMRAM] long 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  grs             1   16[COMRAM] unsigned char 
  3927 ;;  bexp            1   15[COMRAM] unsigned char 
  3928 ;;  aexp            1   14[COMRAM] unsigned char 
  3929 ;;  signs           1   13[COMRAM] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  4    1[COMRAM] unsigned char 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3939 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3941 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3942 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3943 ;;Total ram usage:       16 bytes
  3944 ;; Hardware stack levels used: 1
  3945 ;; Hardware stack levels required when called: 1
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_convert_rgb2hue
  3950 ;;		___flsub
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text12
  3955   00163C                     __ptext12:
  3956                           	callstack 0
  3957   00163C                     ___fladd:
  3958                           	callstack 26
  3959   00163C  5005               	movf	(___fladd@b+3)^0,w,c
  3960   00163E  0B80               	andlw	128
  3961   001640  6E0E               	movwf	___fladd@signs^0,c
  3962   001642  5005               	movf	(___fladd@b+3)^0,w,c
  3963   001644  2405               	addwf	(___fladd@b+3)^0,w,c
  3964   001646  6E10               	movwf	___fladd@bexp^0,c
  3965   001648  AE04               	btfss	(___fladd@b+2)^0,7,c
  3966   00164A  EF29  F00B         	goto	u2791
  3967   00164E  EF2B  F00B         	goto	u2790
  3968   001652                     u2791:
  3969   001652  EF2C  F00B         	goto	l3700
  3970   001656                     u2790:
  3971   001656  8010               	bsf	___fladd@bexp^0,0,c
  3972   001658                     l3700:
  3973   001658  5010               	movf	___fladd@bexp^0,w,c
  3974   00165A  B4D8               	btfsc	status,2,c
  3975   00165C  EF32  F00B         	goto	u2801
  3976   001660  EF34  F00B         	goto	u2800
  3977   001664                     u2801:
  3978   001664  EF49  F00B         	goto	l3710
  3979   001668                     u2800:
  3980   001668  2810               	incf	___fladd@bexp^0,w,c
  3981   00166A  A4D8               	btfss	status,2,c
  3982   00166C  EF3A  F00B         	goto	u2811
  3983   001670  EF3C  F00B         	goto	u2810
  3984   001674                     u2811:
  3985   001674  EF44  F00B         	goto	l3706
  3986   001678                     u2810:
  3987   001678  0E00               	movlw	0
  3988   00167A  6E02               	movwf	___fladd@b^0,c
  3989   00167C  0E00               	movlw	0
  3990   00167E  6E03               	movwf	(___fladd@b+1)^0,c
  3991   001680  0E00               	movlw	0
  3992   001682  6E04               	movwf	(___fladd@b+2)^0,c
  3993   001684  0E00               	movlw	0
  3994   001686  6E05               	movwf	(___fladd@b+3)^0,c
  3995   001688                     l3706:
  3996   001688  8E04               	bsf	(___fladd@b+2)^0,7,c
  3997   00168A  0E00               	movlw	0
  3998   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  3999   00168E  EF51  F00B         	goto	l3712
  4000   001692                     l3710:
  4001   001692  0E00               	movlw	0
  4002   001694  6E02               	movwf	___fladd@b^0,c
  4003   001696  0E00               	movlw	0
  4004   001698  6E03               	movwf	(___fladd@b+1)^0,c
  4005   00169A  0E00               	movlw	0
  4006   00169C  6E04               	movwf	(___fladd@b+2)^0,c
  4007   00169E  0E00               	movlw	0
  4008   0016A0  6E05               	movwf	(___fladd@b+3)^0,c
  4009   0016A2                     l3712:
  4010   0016A2  5009               	movf	(___fladd@a+3)^0,w,c
  4011   0016A4  0B80               	andlw	128
  4012   0016A6  6E0F               	movwf	___fladd@aexp^0,c
  4013   0016A8  500E               	movf	___fladd@signs^0,w,c
  4014   0016AA  180F               	xorwf	___fladd@aexp^0,w,c
  4015   0016AC  B4D8               	btfsc	status,2,c
  4016   0016AE  EF5B  F00B         	goto	u2821
  4017   0016B2  EF5D  F00B         	goto	u2820
  4018   0016B6                     u2821:
  4019   0016B6  EF5E  F00B         	goto	l3718
  4020   0016BA                     u2820:
  4021   0016BA  8C0E               	bsf	___fladd@signs^0,6,c
  4022   0016BC                     l3718:
  4023   0016BC  5009               	movf	(___fladd@a+3)^0,w,c
  4024   0016BE  2409               	addwf	(___fladd@a+3)^0,w,c
  4025   0016C0  6E0F               	movwf	___fladd@aexp^0,c
  4026   0016C2  AE08               	btfss	(___fladd@a+2)^0,7,c
  4027   0016C4  EF66  F00B         	goto	u2831
  4028   0016C8  EF68  F00B         	goto	u2830
  4029   0016CC                     u2831:
  4030   0016CC  EF69  F00B         	goto	l3724
  4031   0016D0                     u2830:
  4032   0016D0  800F               	bsf	___fladd@aexp^0,0,c
  4033   0016D2                     l3724:
  4034   0016D2  500F               	movf	___fladd@aexp^0,w,c
  4035   0016D4  B4D8               	btfsc	status,2,c
  4036   0016D6  EF6F  F00B         	goto	u2841
  4037   0016DA  EF71  F00B         	goto	u2840
  4038   0016DE                     u2841:
  4039   0016DE  EF86  F00B         	goto	l3734
  4040   0016E2                     u2840:
  4041   0016E2  280F               	incf	___fladd@aexp^0,w,c
  4042   0016E4  A4D8               	btfss	status,2,c
  4043   0016E6  EF77  F00B         	goto	u2851
  4044   0016EA  EF79  F00B         	goto	u2850
  4045   0016EE                     u2851:
  4046   0016EE  EF81  F00B         	goto	l3730
  4047   0016F2                     u2850:
  4048   0016F2  0E00               	movlw	0
  4049   0016F4  6E06               	movwf	___fladd@a^0,c
  4050   0016F6  0E00               	movlw	0
  4051   0016F8  6E07               	movwf	(___fladd@a+1)^0,c
  4052   0016FA  0E00               	movlw	0
  4053   0016FC  6E08               	movwf	(___fladd@a+2)^0,c
  4054   0016FE  0E00               	movlw	0
  4055   001700  6E09               	movwf	(___fladd@a+3)^0,c
  4056   001702                     l3730:
  4057   001702  8E08               	bsf	(___fladd@a+2)^0,7,c
  4058   001704  0E00               	movlw	0
  4059   001706  6E09               	movwf	(___fladd@a+3)^0,c
  4060   001708  EF8E  F00B         	goto	l3736
  4061   00170C                     l3734:
  4062   00170C  0E00               	movlw	0
  4063   00170E  6E06               	movwf	___fladd@a^0,c
  4064   001710  0E00               	movlw	0
  4065   001712  6E07               	movwf	(___fladd@a+1)^0,c
  4066   001714  0E00               	movlw	0
  4067   001716  6E08               	movwf	(___fladd@a+2)^0,c
  4068   001718  0E00               	movlw	0
  4069   00171A  6E09               	movwf	(___fladd@a+3)^0,c
  4070   00171C                     l3736:
  4071   00171C  5010               	movf	___fladd@bexp^0,w,c
  4072   00171E  5C0F               	subwf	___fladd@aexp^0,w,c
  4073   001720  B0D8               	btfsc	status,0,c
  4074   001722  EF95  F00B         	goto	u2861
  4075   001726  EF97  F00B         	goto	u2860
  4076   00172A                     u2861:
  4077   00172A  EFBE  F00B         	goto	l3772
  4078   00172E                     u2860:
  4079   00172E  AC0E               	btfss	___fladd@signs^0,6,c
  4080   001730  EF9C  F00B         	goto	u2871
  4081   001734  EF9E  F00B         	goto	u2870
  4082   001738                     u2871:
  4083   001738  EFA0  F00B         	goto	l3742
  4084   00173C                     u2870:
  4085   00173C  0E80               	movlw	128
  4086   00173E  1A0E               	xorwf	___fladd@signs^0,f,c
  4087   001740                     l3742:
  4088   001740  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4089   001744  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4090   001748  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4091   00174C  C002  F011         	movff	___fladd@b,___fladd@grs
  4092   001750  C006  F002         	movff	___fladd@a,___fladd@b
  4093   001754  C011  F006         	movff	___fladd@grs,___fladd@a
  4094   001758  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4095   00175C  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4096   001760  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4097   001764  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4098   001768  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4099   00176C  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4100   001770  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4101   001774  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4102   001778  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4103   00177C                     l3772:
  4104   00177C  0E00               	movlw	0
  4105   00177E  6E11               	movwf	___fladd@grs^0,c
  4106   001780  5010               	movf	___fladd@bexp^0,w,c
  4107   001782  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4108   001786  6A0B               	clrf	(??___fladd+1)^0,c
  4109   001788  5E0A               	subwf	??___fladd^0,f,c
  4110   00178A  0E00               	movlw	0
  4111   00178C  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4112   00178E  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4113   001790  EFD3  F00B         	goto	u2881
  4114   001794  500B               	movf	(??___fladd+1)^0,w,c
  4115   001796  E109               	bnz	u2880
  4116   001798  0E1A               	movlw	26
  4117   00179A  5C0A               	subwf	??___fladd^0,w,c
  4118   00179C  A0D8               	btfss	status,0,c
  4119   00179E  EFD3  F00B         	goto	u2881
  4120   0017A2  EFD5  F00B         	goto	u2880
  4121   0017A6                     u2881:
  4122   0017A6  EF0C  F00C         	goto	l1203
  4123   0017AA                     u2880:
  4124   0017AA  5002               	movf	___fladd@b^0,w,c
  4125   0017AC  1003               	iorwf	(___fladd@b+1)^0,w,c
  4126   0017AE  1004               	iorwf	(___fladd@b+2)^0,w,c
  4127   0017B0  1005               	iorwf	(___fladd@b+3)^0,w,c
  4128   0017B2  A4D8               	btfss	status,2,c
  4129   0017B4  EFDE  F00B         	goto	u2891
  4130   0017B8  EFE1  F00B         	goto	u2890
  4131   0017BC                     u2891:
  4132   0017BC  0E01               	movlw	1
  4133   0017BE  EFE2  F00B         	goto	u2900
  4134   0017C2                     u2890:
  4135   0017C2  0E00               	movlw	0
  4136   0017C4                     u2900:
  4137   0017C4  6E11               	movwf	___fladd@grs^0,c
  4138   0017C6  0E00               	movlw	0
  4139   0017C8  6E02               	movwf	___fladd@b^0,c
  4140   0017CA  0E00               	movlw	0
  4141   0017CC  6E03               	movwf	(___fladd@b+1)^0,c
  4142   0017CE  0E00               	movlw	0
  4143   0017D0  6E04               	movwf	(___fladd@b+2)^0,c
  4144   0017D2  0E00               	movlw	0
  4145   0017D4  6E05               	movwf	(___fladd@b+3)^0,c
  4146   0017D6  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4147   0017DA  EF15  F00C         	goto	l1202
  4148   0017DE                     l1204:
  4149   0017DE  A011               	btfss	___fladd@grs^0,0,c
  4150   0017E0  EFF4  F00B         	goto	u2911
  4151   0017E4  EFF6  F00B         	goto	u2910
  4152   0017E8                     u2911:
  4153   0017E8  EFFC  F00B         	goto	l3784
  4154   0017EC                     u2910:
  4155   0017EC  90D8               	bcf	status,0,c
  4156   0017EE  3011               	rrcf	___fladd@grs^0,w,c
  4157   0017F0  0901               	iorlw	1
  4158   0017F2  6E11               	movwf	___fladd@grs^0,c
  4159   0017F4  EFFE  F00B         	goto	l3786
  4160   0017F8                     l3784:
  4161   0017F8  90D8               	bcf	status,0,c
  4162   0017FA  3211               	rrcf	___fladd@grs^0,f,c
  4163   0017FC                     l3786:
  4164   0017FC  A002               	btfss	___fladd@b^0,0,c
  4165   0017FE  EF03  F00C         	goto	u2921
  4166   001802  EF05  F00C         	goto	u2920
  4167   001806                     u2921:
  4168   001806  EF06  F00C         	goto	l3790
  4169   00180A                     u2920:
  4170   00180A  8E11               	bsf	___fladd@grs^0,7,c
  4171   00180C                     l3790:
  4172   00180C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4173   00180E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4174   001810  3204               	rrcf	(___fladd@b+2)^0,f,c
  4175   001812  3203               	rrcf	(___fladd@b+1)^0,f,c
  4176   001814  3202               	rrcf	___fladd@b^0,f,c
  4177   001816  2A10               	incf	___fladd@bexp^0,f,c
  4178   001818                     l1203:
  4179   001818  500F               	movf	___fladd@aexp^0,w,c
  4180   00181A  5C10               	subwf	___fladd@bexp^0,w,c
  4181   00181C  A0D8               	btfss	status,0,c
  4182   00181E  EF13  F00C         	goto	u2931
  4183   001822  EF15  F00C         	goto	u2930
  4184   001826                     u2931:
  4185   001826  EFEF  F00B         	goto	l1204
  4186   00182A                     u2930:
  4187   00182A                     l1202:
  4188   00182A  BC0E               	btfsc	___fladd@signs^0,6,c
  4189   00182C  EF1A  F00C         	goto	u2941
  4190   001830  EF1C  F00C         	goto	u2940
  4191   001834                     u2941:
  4192   001834  EF5C  F00C         	goto	l3818
  4193   001838                     u2940:
  4194   001838  5010               	movf	___fladd@bexp^0,w,c
  4195   00183A  A4D8               	btfss	status,2,c
  4196   00183C  EF22  F00C         	goto	u2951
  4197   001840  EF24  F00C         	goto	u2950
  4198   001844                     u2951:
  4199   001844  EF2E  F00C         	goto	l3800
  4200   001848                     u2950:
  4201   001848  0E00               	movlw	0
  4202   00184A  6E02               	movwf	?___fladd^0,c
  4203   00184C  0E00               	movlw	0
  4204   00184E  6E03               	movwf	(?___fladd+1)^0,c
  4205   001850  0E00               	movlw	0
  4206   001852  6E04               	movwf	(?___fladd+2)^0,c
  4207   001854  0E00               	movlw	0
  4208   001856  6E05               	movwf	(?___fladd+3)^0,c
  4209   001858  EF7D  F00D         	goto	l1211
  4210   00185C                     l3800:
  4211   00185C  5006               	movf	___fladd@a^0,w,c
  4212   00185E  2602               	addwf	___fladd@b^0,f,c
  4213   001860  5007               	movf	(___fladd@a+1)^0,w,c
  4214   001862  2203               	addwfc	(___fladd@b+1)^0,f,c
  4215   001864  5008               	movf	(___fladd@a+2)^0,w,c
  4216   001866  2204               	addwfc	(___fladd@b+2)^0,f,c
  4217   001868  5009               	movf	(___fladd@a+3)^0,w,c
  4218   00186A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4219   00186C  A005               	btfss	(___fladd@b+3)^0,0,c
  4220   00186E  EF3B  F00C         	goto	u2961
  4221   001872  EF3D  F00C         	goto	u2960
  4222   001876                     u2961:
  4223   001876  EFE9  F00C         	goto	l3854
  4224   00187A                     u2960:
  4225   00187A  A011               	btfss	___fladd@grs^0,0,c
  4226   00187C  EF42  F00C         	goto	u2971
  4227   001880  EF44  F00C         	goto	u2970
  4228   001884                     u2971:
  4229   001884  EF4A  F00C         	goto	l3808
  4230   001888                     u2970:
  4231   001888  90D8               	bcf	status,0,c
  4232   00188A  3011               	rrcf	___fladd@grs^0,w,c
  4233   00188C  0901               	iorlw	1
  4234   00188E  6E11               	movwf	___fladd@grs^0,c
  4235   001890  EF4C  F00C         	goto	l3810
  4236   001894                     l3808:
  4237   001894  90D8               	bcf	status,0,c
  4238   001896  3211               	rrcf	___fladd@grs^0,f,c
  4239   001898                     l3810:
  4240   001898  A002               	btfss	___fladd@b^0,0,c
  4241   00189A  EF51  F00C         	goto	u2981
  4242   00189E  EF53  F00C         	goto	u2980
  4243   0018A2                     u2981:
  4244   0018A2  EF54  F00C         	goto	l3814
  4245   0018A6                     u2980:
  4246   0018A6  8E11               	bsf	___fladd@grs^0,7,c
  4247   0018A8                     l3814:
  4248   0018A8  3405               	rlcf	(___fladd@b+3)^0,w,c
  4249   0018AA  3205               	rrcf	(___fladd@b+3)^0,f,c
  4250   0018AC  3204               	rrcf	(___fladd@b+2)^0,f,c
  4251   0018AE  3203               	rrcf	(___fladd@b+1)^0,f,c
  4252   0018B0  3202               	rrcf	___fladd@b^0,f,c
  4253   0018B2  2A10               	incf	___fladd@bexp^0,f,c
  4254   0018B4  EFE9  F00C         	goto	l3854
  4255   0018B8                     l3818:
  4256   0018B8  5006               	movf	___fladd@a^0,w,c
  4257   0018BA  5C02               	subwf	___fladd@b^0,w,c
  4258   0018BC  5007               	movf	(___fladd@a+1)^0,w,c
  4259   0018BE  5803               	subwfb	(___fladd@b+1)^0,w,c
  4260   0018C0  5008               	movf	(___fladd@a+2)^0,w,c
  4261   0018C2  5804               	subwfb	(___fladd@b+2)^0,w,c
  4262   0018C4  5005               	movf	(___fladd@b+3)^0,w,c
  4263   0018C6  0A80               	xorlw	128
  4264   0018C8  6E0A               	movwf	??___fladd^0,c
  4265   0018CA  5009               	movf	(___fladd@a+3)^0,w,c
  4266   0018CC  0A80               	xorlw	128
  4267   0018CE  580A               	subwfb	??___fladd^0,w,c
  4268   0018D0  B0D8               	btfsc	status,0,c
  4269   0018D2  EF6D  F00C         	goto	u2991
  4270   0018D6  EF6F  F00C         	goto	u2990
  4271   0018DA                     u2991:
  4272   0018DA  EF9A  F00C         	goto	l3828
  4273   0018DE                     u2990:
  4274   0018DE  5002               	movf	___fladd@b^0,w,c
  4275   0018E0  5C06               	subwf	___fladd@a^0,w,c
  4276   0018E2  6E0A               	movwf	??___fladd^0,c
  4277   0018E4  5003               	movf	(___fladd@b+1)^0,w,c
  4278   0018E6  5807               	subwfb	(___fladd@a+1)^0,w,c
  4279   0018E8  6E0B               	movwf	(??___fladd+1)^0,c
  4280   0018EA  5004               	movf	(___fladd@b+2)^0,w,c
  4281   0018EC  5808               	subwfb	(___fladd@a+2)^0,w,c
  4282   0018EE  6E0C               	movwf	(??___fladd+2)^0,c
  4283   0018F0  5005               	movf	(___fladd@b+3)^0,w,c
  4284   0018F2  5809               	subwfb	(___fladd@a+3)^0,w,c
  4285   0018F4  6E0D               	movwf	(??___fladd+3)^0,c
  4286   0018F6  0EFF               	movlw	255
  4287   0018F8  240A               	addwf	??___fladd^0,w,c
  4288   0018FA  6E02               	movwf	___fladd@b^0,c
  4289   0018FC  0EFF               	movlw	255
  4290   0018FE  200B               	addwfc	(??___fladd+1)^0,w,c
  4291   001900  6E03               	movwf	(___fladd@b+1)^0,c
  4292   001902  0EFF               	movlw	255
  4293   001904  200C               	addwfc	(??___fladd+2)^0,w,c
  4294   001906  6E04               	movwf	(___fladd@b+2)^0,c
  4295   001908  0EFF               	movlw	255
  4296   00190A  200D               	addwfc	(??___fladd+3)^0,w,c
  4297   00190C  6E05               	movwf	(___fladd@b+3)^0,c
  4298   00190E  0E80               	movlw	128
  4299   001910  1A0E               	xorwf	___fladd@signs^0,f,c
  4300   001912  6C11               	negf	___fladd@grs^0,c
  4301   001914  5011               	movf	___fladd@grs^0,w,c
  4302   001916  A4D8               	btfss	status,2,c
  4303   001918  EF90  F00C         	goto	u3001
  4304   00191C  EF92  F00C         	goto	u3000
  4305   001920                     u3001:
  4306   001920  EFA2  F00C         	goto	l1219
  4307   001924                     u3000:
  4308   001924  0E01               	movlw	1
  4309   001926  2602               	addwf	___fladd@b^0,f,c
  4310   001928  0E00               	movlw	0
  4311   00192A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4312   00192C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4313   00192E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4314   001930  EFA2  F00C         	goto	l1219
  4315   001934                     l3828:
  4316   001934  5006               	movf	___fladd@a^0,w,c
  4317   001936  5E02               	subwf	___fladd@b^0,f,c
  4318   001938  5007               	movf	(___fladd@a+1)^0,w,c
  4319   00193A  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4320   00193C  5008               	movf	(___fladd@a+2)^0,w,c
  4321   00193E  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4322   001940  5009               	movf	(___fladd@a+3)^0,w,c
  4323   001942  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4324   001944                     l1219:
  4325   001944  5002               	movf	___fladd@b^0,w,c
  4326   001946  1003               	iorwf	(___fladd@b+1)^0,w,c
  4327   001948  1004               	iorwf	(___fladd@b+2)^0,w,c
  4328   00194A  1005               	iorwf	(___fladd@b+3)^0,w,c
  4329   00194C  A4D8               	btfss	status,2,c
  4330   00194E  EFAB  F00C         	goto	u3011
  4331   001952  EFAD  F00C         	goto	u3010
  4332   001956                     u3011:
  4333   001956  EFE2  F00C         	goto	l3852
  4334   00195A                     u3010:
  4335   00195A  5011               	movf	___fladd@grs^0,w,c
  4336   00195C  A4D8               	btfss	status,2,c
  4337   00195E  EFB3  F00C         	goto	u3021
  4338   001962  EFB5  F00C         	goto	u3020
  4339   001966                     u3021:
  4340   001966  EFE2  F00C         	goto	l3852
  4341   00196A                     u3020:
  4342   00196A  0E00               	movlw	0
  4343   00196C  6E02               	movwf	?___fladd^0,c
  4344   00196E  0E00               	movlw	0
  4345   001970  6E03               	movwf	(?___fladd+1)^0,c
  4346   001972  0E00               	movlw	0
  4347   001974  6E04               	movwf	(?___fladd+2)^0,c
  4348   001976  0E00               	movlw	0
  4349   001978  6E05               	movwf	(?___fladd+3)^0,c
  4350   00197A  EF7D  F00D         	goto	l1211
  4351   00197E                     l3836:
  4352   00197E  90D8               	bcf	status,0,c
  4353   001980  3602               	rlcf	___fladd@b^0,f,c
  4354   001982  3603               	rlcf	(___fladd@b+1)^0,f,c
  4355   001984  3604               	rlcf	(___fladd@b+2)^0,f,c
  4356   001986  3605               	rlcf	(___fladd@b+3)^0,f,c
  4357   001988  AE11               	btfss	___fladd@grs^0,7,c
  4358   00198A  EFC9  F00C         	goto	u3031
  4359   00198E  EFCB  F00C         	goto	u3030
  4360   001992                     u3031:
  4361   001992  EFCC  F00C         	goto	l3842
  4362   001996                     u3030:
  4363   001996  8002               	bsf	___fladd@b^0,0,c
  4364   001998                     l3842:
  4365   001998  A011               	btfss	___fladd@grs^0,0,c
  4366   00199A  EFD1  F00C         	goto	u3041
  4367   00199E  EFD3  F00C         	goto	u3040
  4368   0019A2                     u3041:
  4369   0019A2  EFD7  F00C         	goto	l3846
  4370   0019A6                     u3040:
  4371   0019A6  80D8               	bsf	status,0,c
  4372   0019A8  3611               	rlcf	___fladd@grs^0,f,c
  4373   0019AA  EFD9  F00C         	goto	l3848
  4374   0019AE                     l3846:
  4375   0019AE  90D8               	bcf	status,0,c
  4376   0019B0  3611               	rlcf	___fladd@grs^0,f,c
  4377   0019B2                     l3848:
  4378   0019B2  5010               	movf	___fladd@bexp^0,w,c
  4379   0019B4  B4D8               	btfsc	status,2,c
  4380   0019B6  EFDF  F00C         	goto	u3051
  4381   0019BA  EFE1  F00C         	goto	u3050
  4382   0019BE                     u3051:
  4383   0019BE  EFE2  F00C         	goto	l3852
  4384   0019C2                     u3050:
  4385   0019C2  0610               	decf	___fladd@bexp^0,f,c
  4386   0019C4                     l3852:
  4387   0019C4  AE04               	btfss	(___fladd@b+2)^0,7,c
  4388   0019C6  EFE7  F00C         	goto	u3061
  4389   0019CA  EFE9  F00C         	goto	u3060
  4390   0019CE                     u3061:
  4391   0019CE  EFBF  F00C         	goto	l3836
  4392   0019D2                     u3060:
  4393   0019D2                     l3854:
  4394   0019D2  0E00               	movlw	0
  4395   0019D4  6E0F               	movwf	___fladd@aexp^0,c
  4396   0019D6  AE11               	btfss	___fladd@grs^0,7,c
  4397   0019D8  EFF0  F00C         	goto	u3071
  4398   0019DC  EFF2  F00C         	goto	u3070
  4399   0019E0                     u3071:
  4400   0019E0  EF0A  F00D         	goto	l1228
  4401   0019E4                     u3070:
  4402   0019E4  C011  F00A         	movff	___fladd@grs,??___fladd
  4403   0019E8  0E7F               	movlw	127
  4404   0019EA  160A               	andwf	??___fladd^0,f,c
  4405   0019EC  B4D8               	btfsc	status,2,c
  4406   0019EE  EFFB  F00C         	goto	u3081
  4407   0019F2  EFFD  F00C         	goto	u3080
  4408   0019F6                     u3081:
  4409   0019F6  EF01  F00D         	goto	l1229
  4410   0019FA                     u3080:
  4411   0019FA                     l3860:
  4412   0019FA  0E01               	movlw	1
  4413   0019FC  6E0F               	movwf	___fladd@aexp^0,c
  4414   0019FE  EF0A  F00D         	goto	l1228
  4415   001A02                     l1229:
  4416   001A02  A002               	btfss	___fladd@b^0,0,c
  4417   001A04  EF06  F00D         	goto	u3091
  4418   001A08  EF08  F00D         	goto	u3090
  4419   001A0C                     u3091:
  4420   001A0C  EF0A  F00D         	goto	l1228
  4421   001A10                     u3090:
  4422   001A10  EFFD  F00C         	goto	l3860
  4423   001A14                     l1228:
  4424   001A14  500F               	movf	___fladd@aexp^0,w,c
  4425   001A16  B4D8               	btfsc	status,2,c
  4426   001A18  EF10  F00D         	goto	u3101
  4427   001A1C  EF12  F00D         	goto	u3100
  4428   001A20                     u3101:
  4429   001A20  EF3D  F00D         	goto	l3872
  4430   001A24                     u3100:
  4431   001A24  0E01               	movlw	1
  4432   001A26  2602               	addwf	___fladd@b^0,f,c
  4433   001A28  0E00               	movlw	0
  4434   001A2A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4435   001A2C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4436   001A2E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4437   001A30  A005               	btfss	(___fladd@b+3)^0,0,c
  4438   001A32  EF1D  F00D         	goto	u3111
  4439   001A36  EF1F  F00D         	goto	u3110
  4440   001A3A                     u3111:
  4441   001A3A  EF3D  F00D         	goto	l3872
  4442   001A3E                     u3110:
  4443   001A3E  C002  F00A         	movff	___fladd@b,??___fladd
  4444   001A42  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4445   001A46  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4446   001A4A  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4447   001A4E  340D               	rlcf	(??___fladd+3)^0,w,c
  4448   001A50  320D               	rrcf	(??___fladd+3)^0,f,c
  4449   001A52  320C               	rrcf	(??___fladd+2)^0,f,c
  4450   001A54  320B               	rrcf	(??___fladd+1)^0,f,c
  4451   001A56  320A               	rrcf	??___fladd^0,f,c
  4452   001A58  C00A  F002         	movff	??___fladd,___fladd@b
  4453   001A5C  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4454   001A60  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4455   001A64  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4456   001A68  2810               	incf	___fladd@bexp^0,w,c
  4457   001A6A  B4D8               	btfsc	status,2,c
  4458   001A6C  EF3A  F00D         	goto	u3121
  4459   001A70  EF3C  F00D         	goto	u3120
  4460   001A74                     u3121:
  4461   001A74  EF3D  F00D         	goto	l3872
  4462   001A78                     u3120:
  4463   001A78  2A10               	incf	___fladd@bexp^0,f,c
  4464   001A7A                     l3872:
  4465   001A7A  2810               	incf	___fladd@bexp^0,w,c
  4466   001A7C  B4D8               	btfsc	status,2,c
  4467   001A7E  EF43  F00D         	goto	u3131
  4468   001A82  EF45  F00D         	goto	u3130
  4469   001A86                     u3131:
  4470   001A86  EF4D  F00D         	goto	l3876
  4471   001A8A                     u3130:
  4472   001A8A  5010               	movf	___fladd@bexp^0,w,c
  4473   001A8C  A4D8               	btfss	status,2,c
  4474   001A8E  EF4B  F00D         	goto	u3141
  4475   001A92  EF4D  F00D         	goto	u3140
  4476   001A96                     u3141:
  4477   001A96  EF5F  F00D         	goto	l3880
  4478   001A9A                     u3140:
  4479   001A9A                     l3876:
  4480   001A9A  0E00               	movlw	0
  4481   001A9C  6E02               	movwf	___fladd@b^0,c
  4482   001A9E  0E00               	movlw	0
  4483   001AA0  6E03               	movwf	(___fladd@b+1)^0,c
  4484   001AA2  0E00               	movlw	0
  4485   001AA4  6E04               	movwf	(___fladd@b+2)^0,c
  4486   001AA6  0E00               	movlw	0
  4487   001AA8  6E05               	movwf	(___fladd@b+3)^0,c
  4488   001AAA  5010               	movf	___fladd@bexp^0,w,c
  4489   001AAC  A4D8               	btfss	status,2,c
  4490   001AAE  EF5B  F00D         	goto	u3151
  4491   001AB2  EF5D  F00D         	goto	u3150
  4492   001AB6                     u3151:
  4493   001AB6  EF5F  F00D         	goto	l3880
  4494   001ABA                     u3150:
  4495   001ABA  0E00               	movlw	0
  4496   001ABC  6E0E               	movwf	___fladd@signs^0,c
  4497   001ABE                     l3880:
  4498   001ABE  A010               	btfss	___fladd@bexp^0,0,c
  4499   001AC0  EF64  F00D         	goto	u3161
  4500   001AC4  EF66  F00D         	goto	u3160
  4501   001AC8                     u3161:
  4502   001AC8  EF69  F00D         	goto	l3884
  4503   001ACC                     u3160:
  4504   001ACC  8E04               	bsf	(___fladd@b+2)^0,7,c
  4505   001ACE  EF6A  F00D         	goto	l3886
  4506   001AD2                     l3884:
  4507   001AD2  9E04               	bcf	(___fladd@b+2)^0,7,c
  4508   001AD4                     l3886:
  4509   001AD4  90D8               	bcf	status,0,c
  4510   001AD6  3010               	rrcf	___fladd@bexp^0,w,c
  4511   001AD8  6E05               	movwf	(___fladd@b+3)^0,c
  4512   001ADA  AE0E               	btfss	___fladd@signs^0,7,c
  4513   001ADC  EF72  F00D         	goto	u3171
  4514   001AE0  EF74  F00D         	goto	u3170
  4515   001AE4                     u3171:
  4516   001AE4  EF75  F00D         	goto	l3892
  4517   001AE8                     u3170:
  4518   001AE8  8E05               	bsf	(___fladd@b+3)^0,7,c
  4519   001AEA                     l3892:
  4520   001AEA  C002  F002         	movff	___fladd@b,?___fladd
  4521   001AEE  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4522   001AF2  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4523   001AF6  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4524   001AFA                     l1211:
  4525   001AFA  0012               	return		;funcret
  4526   001AFC                     __end_of___fladd:
  4527                           	callstack 0
  4528                           
  4529 ;; *************** function ___flmul *****************
  4530 ;; Defined at:
  4531 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  b               4    1[COMRAM] unsigned char 
  4534 ;;  a               4    5[COMRAM] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  prod            4   20[COMRAM] struct .
  4537 ;;  grs             4   14[COMRAM] unsigned long 
  4538 ;;  temp            2   24[COMRAM] struct .
  4539 ;;  bexp            1   19[COMRAM] unsigned char 
  4540 ;;  aexp            1   18[COMRAM] unsigned char 
  4541 ;;  sign            1   13[COMRAM] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  4    1[COMRAM] unsigned char 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0, prodl, prodh
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4551 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4552 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4555 ;;Total ram usage:       25 bytes
  4556 ;; Hardware stack levels used: 1
  4557 ;; Hardware stack levels required when called: 1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_convert_rgb2hue
  4562 ;;		_main
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text13
  4567   001AFC                     __ptext13:
  4568                           	callstack 0
  4569   001AFC                     ___flmul:
  4570                           	callstack 27
  4571   001AFC  5005               	movf	(___flmul@b+3)^0,w,c
  4572   001AFE  0B80               	andlw	128
  4573   001B00  6E0E               	movwf	___flmul@sign^0,c
  4574   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4575   001B04  2405               	addwf	(___flmul@b+3)^0,w,c
  4576   001B06  6E14               	movwf	___flmul@bexp^0,c
  4577   001B08  AE04               	btfss	(___flmul@b+2)^0,7,c
  4578   001B0A  EF89  F00D         	goto	u3481
  4579   001B0E  EF8B  F00D         	goto	u3480
  4580   001B12                     u3481:
  4581   001B12  EF8C  F00D         	goto	l4178
  4582   001B16                     u3480:
  4583   001B16  8014               	bsf	___flmul@bexp^0,0,c
  4584   001B18                     l4178:
  4585   001B18  5014               	movf	___flmul@bexp^0,w,c
  4586   001B1A  B4D8               	btfsc	status,2,c
  4587   001B1C  EF92  F00D         	goto	u3491
  4588   001B20  EF94  F00D         	goto	u3490
  4589   001B24                     u3491:
  4590   001B24  EFA7  F00D         	goto	l4186
  4591   001B28                     u3490:
  4592   001B28  2814               	incf	___flmul@bexp^0,w,c
  4593   001B2A  A4D8               	btfss	status,2,c
  4594   001B2C  EF9A  F00D         	goto	u3501
  4595   001B30  EF9C  F00D         	goto	u3500
  4596   001B34                     u3501:
  4597   001B34  EFA4  F00D         	goto	l4184
  4598   001B38                     u3500:
  4599   001B38  0E00               	movlw	0
  4600   001B3A  6E02               	movwf	___flmul@b^0,c
  4601   001B3C  0E00               	movlw	0
  4602   001B3E  6E03               	movwf	(___flmul@b+1)^0,c
  4603   001B40  0E00               	movlw	0
  4604   001B42  6E04               	movwf	(___flmul@b+2)^0,c
  4605   001B44  0E00               	movlw	0
  4606   001B46  6E05               	movwf	(___flmul@b+3)^0,c
  4607   001B48                     l4184:
  4608   001B48  8E04               	bsf	(___flmul@b+2)^0,7,c
  4609   001B4A  EFAF  F00D         	goto	l4188
  4610   001B4E                     l4186:
  4611   001B4E  0E00               	movlw	0
  4612   001B50  6E02               	movwf	___flmul@b^0,c
  4613   001B52  0E00               	movlw	0
  4614   001B54  6E03               	movwf	(___flmul@b+1)^0,c
  4615   001B56  0E00               	movlw	0
  4616   001B58  6E04               	movwf	(___flmul@b+2)^0,c
  4617   001B5A  0E00               	movlw	0
  4618   001B5C  6E05               	movwf	(___flmul@b+3)^0,c
  4619   001B5E                     l4188:
  4620   001B5E  5009               	movf	(___flmul@a+3)^0,w,c
  4621   001B60  0B80               	andlw	128
  4622   001B62  1A0E               	xorwf	___flmul@sign^0,f,c
  4623   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4624   001B66  2409               	addwf	(___flmul@a+3)^0,w,c
  4625   001B68  6E13               	movwf	___flmul@aexp^0,c
  4626   001B6A  AE08               	btfss	(___flmul@a+2)^0,7,c
  4627   001B6C  EFBA  F00D         	goto	u3511
  4628   001B70  EFBC  F00D         	goto	u3510
  4629   001B74                     u3511:
  4630   001B74  EFBD  F00D         	goto	l4196
  4631   001B78                     u3510:
  4632   001B78  8013               	bsf	___flmul@aexp^0,0,c
  4633   001B7A                     l4196:
  4634   001B7A  5013               	movf	___flmul@aexp^0,w,c
  4635   001B7C  B4D8               	btfsc	status,2,c
  4636   001B7E  EFC3  F00D         	goto	u3521
  4637   001B82  EFC5  F00D         	goto	u3520
  4638   001B86                     u3521:
  4639   001B86  EFD8  F00D         	goto	l4204
  4640   001B8A                     u3520:
  4641   001B8A  2813               	incf	___flmul@aexp^0,w,c
  4642   001B8C  A4D8               	btfss	status,2,c
  4643   001B8E  EFCB  F00D         	goto	u3531
  4644   001B92  EFCD  F00D         	goto	u3530
  4645   001B96                     u3531:
  4646   001B96  EFD5  F00D         	goto	l4202
  4647   001B9A                     u3530:
  4648   001B9A  0E00               	movlw	0
  4649   001B9C  6E06               	movwf	___flmul@a^0,c
  4650   001B9E  0E00               	movlw	0
  4651   001BA0  6E07               	movwf	(___flmul@a+1)^0,c
  4652   001BA2  0E00               	movlw	0
  4653   001BA4  6E08               	movwf	(___flmul@a+2)^0,c
  4654   001BA6  0E00               	movlw	0
  4655   001BA8  6E09               	movwf	(___flmul@a+3)^0,c
  4656   001BAA                     l4202:
  4657   001BAA  8E08               	bsf	(___flmul@a+2)^0,7,c
  4658   001BAC  EFE0  F00D         	goto	l1288
  4659   001BB0                     l4204:
  4660   001BB0  0E00               	movlw	0
  4661   001BB2  6E06               	movwf	___flmul@a^0,c
  4662   001BB4  0E00               	movlw	0
  4663   001BB6  6E07               	movwf	(___flmul@a+1)^0,c
  4664   001BB8  0E00               	movlw	0
  4665   001BBA  6E08               	movwf	(___flmul@a+2)^0,c
  4666   001BBC  0E00               	movlw	0
  4667   001BBE  6E09               	movwf	(___flmul@a+3)^0,c
  4668   001BC0                     l1288:
  4669   001BC0  5013               	movf	___flmul@aexp^0,w,c
  4670   001BC2  B4D8               	btfsc	status,2,c
  4671   001BC4  EFE6  F00D         	goto	u3541
  4672   001BC8  EFE8  F00D         	goto	u3540
  4673   001BCC                     u3541:
  4674   001BCC  EFF0  F00D         	goto	l4208
  4675   001BD0                     u3540:
  4676   001BD0  5014               	movf	___flmul@bexp^0,w,c
  4677   001BD2  A4D8               	btfss	status,2,c
  4678   001BD4  EFEE  F00D         	goto	u3551
  4679   001BD8  EFF0  F00D         	goto	u3550
  4680   001BDC                     u3551:
  4681   001BDC  EFFA  F00D         	goto	l4212
  4682   001BE0                     u3550:
  4683   001BE0                     l4208:
  4684   001BE0  0E00               	movlw	0
  4685   001BE2  6E02               	movwf	?___flmul^0,c
  4686   001BE4  0E00               	movlw	0
  4687   001BE6  6E03               	movwf	(?___flmul+1)^0,c
  4688   001BE8  0E00               	movlw	0
  4689   001BEA  6E04               	movwf	(?___flmul+2)^0,c
  4690   001BEC  0E00               	movlw	0
  4691   001BEE  6E05               	movwf	(?___flmul+3)^0,c
  4692   001BF0  EF92  F00F         	goto	l1292
  4693   001BF4                     l4212:
  4694   001BF4  5008               	movf	(___flmul@a+2)^0,w,c
  4695   001BF6  0202               	mulwf	___flmul@b^0,c
  4696   001BF8  CFF3 F019          	movff	prodl,___flmul@temp
  4697   001BFC  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4698   001C00  5019               	movf	___flmul@temp^0,w,c
  4699   001C02  6E0F               	movwf	___flmul@grs^0,c
  4700   001C04  6A10               	clrf	(___flmul@grs+1)^0,c
  4701   001C06  6A11               	clrf	(___flmul@grs+2)^0,c
  4702   001C08  6A12               	clrf	(___flmul@grs+3)^0,c
  4703   001C0A  501A               	movf	(___flmul@temp+1)^0,w,c
  4704   001C0C  6E15               	movwf	___flmul@prod^0,c
  4705   001C0E  6A16               	clrf	(___flmul@prod+1)^0,c
  4706   001C10  6A17               	clrf	(___flmul@prod+2)^0,c
  4707   001C12  6A18               	clrf	(___flmul@prod+3)^0,c
  4708   001C14  5007               	movf	(___flmul@a+1)^0,w,c
  4709   001C16  0203               	mulwf	(___flmul@b+1)^0,c
  4710   001C18  CFF3 F019          	movff	prodl,___flmul@temp
  4711   001C1C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4712   001C20  5019               	movf	___flmul@temp^0,w,c
  4713   001C22  260F               	addwf	___flmul@grs^0,f,c
  4714   001C24  0E00               	movlw	0
  4715   001C26  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4716   001C28  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4717   001C2A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4718   001C2C  501A               	movf	(___flmul@temp+1)^0,w,c
  4719   001C2E  2615               	addwf	___flmul@prod^0,f,c
  4720   001C30  0E00               	movlw	0
  4721   001C32  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4722   001C34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4723   001C36  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4724   001C38  5006               	movf	___flmul@a^0,w,c
  4725   001C3A  0204               	mulwf	(___flmul@b+2)^0,c
  4726   001C3C  CFF3 F019          	movff	prodl,___flmul@temp
  4727   001C40  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4728   001C44  5019               	movf	___flmul@temp^0,w,c
  4729   001C46  260F               	addwf	___flmul@grs^0,f,c
  4730   001C48  0E00               	movlw	0
  4731   001C4A  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4732   001C4C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4733   001C4E  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4734   001C50  501A               	movf	(___flmul@temp+1)^0,w,c
  4735   001C52  2615               	addwf	___flmul@prod^0,f,c
  4736   001C54  0E00               	movlw	0
  4737   001C56  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4738   001C58  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4739   001C5A  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4740   001C5C  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4741   001C60  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4742   001C64  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4743   001C68  6A0F               	clrf	___flmul@grs^0,c
  4744   001C6A  5006               	movf	___flmul@a^0,w,c
  4745   001C6C  0203               	mulwf	(___flmul@b+1)^0,c
  4746   001C6E  CFF3 F019          	movff	prodl,___flmul@temp
  4747   001C72  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4748   001C76  5019               	movf	___flmul@temp^0,w,c
  4749   001C78  260F               	addwf	___flmul@grs^0,f,c
  4750   001C7A  501A               	movf	(___flmul@temp+1)^0,w,c
  4751   001C7C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4752   001C7E  0E00               	movlw	0
  4753   001C80  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4754   001C82  0E00               	movlw	0
  4755   001C84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4756   001C86  5007               	movf	(___flmul@a+1)^0,w,c
  4757   001C88  0202               	mulwf	___flmul@b^0,c
  4758   001C8A  CFF3 F019          	movff	prodl,___flmul@temp
  4759   001C8E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4760   001C92  5019               	movf	___flmul@temp^0,w,c
  4761   001C94  260F               	addwf	___flmul@grs^0,f,c
  4762   001C96  501A               	movf	(___flmul@temp+1)^0,w,c
  4763   001C98  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4764   001C9A  0E00               	movlw	0
  4765   001C9C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4766   001C9E  0E00               	movlw	0
  4767   001CA0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4768   001CA2  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4769   001CA6  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4770   001CAA  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4771   001CAE  6A0F               	clrf	___flmul@grs^0,c
  4772   001CB0  5006               	movf	___flmul@a^0,w,c
  4773   001CB2  0202               	mulwf	___flmul@b^0,c
  4774   001CB4  CFF3 F019          	movff	prodl,___flmul@temp
  4775   001CB8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4776   001CBC  5019               	movf	___flmul@temp^0,w,c
  4777   001CBE  260F               	addwf	___flmul@grs^0,f,c
  4778   001CC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4779   001CC2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4780   001CC4  0E00               	movlw	0
  4781   001CC6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4782   001CC8  0E00               	movlw	0
  4783   001CCA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4784   001CCC  5008               	movf	(___flmul@a+2)^0,w,c
  4785   001CCE  0203               	mulwf	(___flmul@b+1)^0,c
  4786   001CD0  CFF3 F019          	movff	prodl,___flmul@temp
  4787   001CD4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4788   001CD8  5019               	movf	___flmul@temp^0,w,c
  4789   001CDA  2615               	addwf	___flmul@prod^0,f,c
  4790   001CDC  501A               	movf	(___flmul@temp+1)^0,w,c
  4791   001CDE  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4792   001CE0  0E00               	movlw	0
  4793   001CE2  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4794   001CE4  0E00               	movlw	0
  4795   001CE6  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4796   001CE8  5007               	movf	(___flmul@a+1)^0,w,c
  4797   001CEA  0204               	mulwf	(___flmul@b+2)^0,c
  4798   001CEC  CFF3 F019          	movff	prodl,___flmul@temp
  4799   001CF0  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4800   001CF4  5019               	movf	___flmul@temp^0,w,c
  4801   001CF6  2615               	addwf	___flmul@prod^0,f,c
  4802   001CF8  501A               	movf	(___flmul@temp+1)^0,w,c
  4803   001CFA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4804   001CFC  0E00               	movlw	0
  4805   001CFE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4806   001D00  0E00               	movlw	0
  4807   001D02  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4808   001D04  5008               	movf	(___flmul@a+2)^0,w,c
  4809   001D06  0204               	mulwf	(___flmul@b+2)^0,c
  4810   001D08  CFF3 F019          	movff	prodl,___flmul@temp
  4811   001D0C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4812   001D10  5019               	movf	___flmul@temp^0,w,c
  4813   001D12  6E0A               	movwf	??___flmul^0,c
  4814   001D14  501A               	movf	(___flmul@temp+1)^0,w,c
  4815   001D16  6E0B               	movwf	(??___flmul+1)^0,c
  4816   001D18  6A0C               	clrf	(??___flmul+2)^0,c
  4817   001D1A  6A0D               	clrf	(??___flmul+3)^0,c
  4818   001D1C  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4819   001D20  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4820   001D24  C00A  F00B         	movff	??___flmul,??___flmul+1
  4821   001D28  6A0A               	clrf	??___flmul^0,c
  4822   001D2A  500A               	movf	??___flmul^0,w,c
  4823   001D2C  2615               	addwf	___flmul@prod^0,f,c
  4824   001D2E  500B               	movf	(??___flmul+1)^0,w,c
  4825   001D30  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4826   001D32  500C               	movf	(??___flmul+2)^0,w,c
  4827   001D34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4828   001D36  500D               	movf	(??___flmul+3)^0,w,c
  4829   001D38  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4830   001D3A  C00F  F00A         	movff	___flmul@grs,??___flmul
  4831   001D3E  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4832   001D42  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4833   001D46  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4834   001D4A  0E19               	movlw	25
  4835   001D4C  EFAD  F00E         	goto	u3560
  4836   001D50                     u3565:
  4837   001D50  90D8               	bcf	status,0,c
  4838   001D52  320D               	rrcf	(??___flmul+3)^0,f,c
  4839   001D54  320C               	rrcf	(??___flmul+2)^0,f,c
  4840   001D56  320B               	rrcf	(??___flmul+1)^0,f,c
  4841   001D58  320A               	rrcf	??___flmul^0,f,c
  4842   001D5A                     u3560:
  4843   001D5A  2EE8               	decfsz	wreg,f,c
  4844   001D5C  EFA8  F00E         	goto	u3565
  4845   001D60  500A               	movf	??___flmul^0,w,c
  4846   001D62  2615               	addwf	___flmul@prod^0,f,c
  4847   001D64  500B               	movf	(??___flmul+1)^0,w,c
  4848   001D66  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4849   001D68  500C               	movf	(??___flmul+2)^0,w,c
  4850   001D6A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4851   001D6C  500D               	movf	(??___flmul+3)^0,w,c
  4852   001D6E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4853   001D70  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4854   001D74  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4855   001D78  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4856   001D7C  6A0F               	clrf	___flmul@grs^0,c
  4857   001D7E  5013               	movf	___flmul@aexp^0,w,c
  4858   001D80  C014  F00A         	movff	___flmul@bexp,??___flmul
  4859   001D84  6A0B               	clrf	(??___flmul+1)^0,c
  4860   001D86  260A               	addwf	??___flmul^0,f,c
  4861   001D88  0E00               	movlw	0
  4862   001D8A  220B               	addwfc	(??___flmul+1)^0,f,c
  4863   001D8C  0E82               	movlw	130
  4864   001D8E  240A               	addwf	??___flmul^0,w,c
  4865   001D90  6E19               	movwf	___flmul@temp^0,c
  4866   001D92  0EFF               	movlw	255
  4867   001D94  200B               	addwfc	(??___flmul+1)^0,w,c
  4868   001D96  6E1A               	movwf	(___flmul@temp+1)^0,c
  4869   001D98  EFE3  F00E         	goto	l4260
  4870   001D9C                     l4254:
  4871   001D9C  90D8               	bcf	status,0,c
  4872   001D9E  3615               	rlcf	___flmul@prod^0,f,c
  4873   001DA0  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4874   001DA2  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4875   001DA4  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4876   001DA6  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4877   001DA8  EFD8  F00E         	goto	u3571
  4878   001DAC  EFDA  F00E         	goto	u3570
  4879   001DB0                     u3571:
  4880   001DB0  EFDB  F00E         	goto	l1295
  4881   001DB4                     u3570:
  4882   001DB4  8015               	bsf	___flmul@prod^0,0,c
  4883   001DB6                     l1295:
  4884   001DB6  90D8               	bcf	status,0,c
  4885   001DB8  360F               	rlcf	___flmul@grs^0,f,c
  4886   001DBA  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4887   001DBC  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4888   001DBE  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4889   001DC0  0619               	decf	___flmul@temp^0,f,c
  4890   001DC2  A0D8               	btfss	status,0,c
  4891   001DC4  061A               	decf	(___flmul@temp+1)^0,f,c
  4892   001DC6                     l4260:
  4893   001DC6  AE17               	btfss	(___flmul@prod+2)^0,7,c
  4894   001DC8  EFE8  F00E         	goto	u3581
  4895   001DCC  EFEA  F00E         	goto	u3580
  4896   001DD0                     u3581:
  4897   001DD0  EFCE  F00E         	goto	l4254
  4898   001DD4                     u3580:
  4899   001DD4  0E00               	movlw	0
  4900   001DD6  6E13               	movwf	___flmul@aexp^0,c
  4901   001DD8  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4902   001DDA  EFF1  F00E         	goto	u3591
  4903   001DDE  EFF3  F00E         	goto	u3590
  4904   001DE2                     u3591:
  4905   001DE2  EF17  F00F         	goto	l1297
  4906   001DE6                     u3590:
  4907   001DE6  0EFF               	movlw	255
  4908   001DE8  140F               	andwf	___flmul@grs^0,w,c
  4909   001DEA  6E0A               	movwf	??___flmul^0,c
  4910   001DEC  0EFF               	movlw	255
  4911   001DEE  1410               	andwf	(___flmul@grs+1)^0,w,c
  4912   001DF0  6E0B               	movwf	(??___flmul+1)^0,c
  4913   001DF2  0EFF               	movlw	255
  4914   001DF4  1411               	andwf	(___flmul@grs+2)^0,w,c
  4915   001DF6  6E0C               	movwf	(??___flmul+2)^0,c
  4916   001DF8  0E7F               	movlw	127
  4917   001DFA  1412               	andwf	(___flmul@grs+3)^0,w,c
  4918   001DFC  6E0D               	movwf	(??___flmul+3)^0,c
  4919   001DFE  500A               	movf	??___flmul^0,w,c
  4920   001E00  100B               	iorwf	(??___flmul+1)^0,w,c
  4921   001E02  100C               	iorwf	(??___flmul+2)^0,w,c
  4922   001E04  100D               	iorwf	(??___flmul+3)^0,w,c
  4923   001E06  B4D8               	btfsc	status,2,c
  4924   001E08  EF08  F00F         	goto	u3601
  4925   001E0C  EF0A  F00F         	goto	u3600
  4926   001E10                     u3601:
  4927   001E10  EF0E  F00F         	goto	l1298
  4928   001E14                     u3600:
  4929   001E14                     l4268:
  4930   001E14  0E01               	movlw	1
  4931   001E16  6E13               	movwf	___flmul@aexp^0,c
  4932   001E18  EF17  F00F         	goto	l1297
  4933   001E1C                     l1298:
  4934   001E1C  A015               	btfss	___flmul@prod^0,0,c
  4935   001E1E  EF13  F00F         	goto	u3611
  4936   001E22  EF15  F00F         	goto	u3610
  4937   001E26                     u3611:
  4938   001E26  EF17  F00F         	goto	l1297
  4939   001E2A                     u3610:
  4940   001E2A  EF0A  F00F         	goto	l4268
  4941   001E2E                     l1297:
  4942   001E2E  5013               	movf	___flmul@aexp^0,w,c
  4943   001E30  B4D8               	btfsc	status,2,c
  4944   001E32  EF1D  F00F         	goto	u3621
  4945   001E36  EF1F  F00F         	goto	u3620
  4946   001E3A                     u3621:
  4947   001E3A  EF43  F00F         	goto	l4280
  4948   001E3E                     u3620:
  4949   001E3E  0E01               	movlw	1
  4950   001E40  2615               	addwf	___flmul@prod^0,f,c
  4951   001E42  0E00               	movlw	0
  4952   001E44  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4953   001E46  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4954   001E48  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4955   001E4A  A018               	btfss	(___flmul@prod+3)^0,0,c
  4956   001E4C  EF2A  F00F         	goto	u3631
  4957   001E50  EF2C  F00F         	goto	u3630
  4958   001E54                     u3631:
  4959   001E54  EF43  F00F         	goto	l4280
  4960   001E58                     u3630:
  4961   001E58  C015  F00A         	movff	___flmul@prod,??___flmul
  4962   001E5C  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  4963   001E60  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  4964   001E64  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  4965   001E68  340D               	rlcf	(??___flmul+3)^0,w,c
  4966   001E6A  320D               	rrcf	(??___flmul+3)^0,f,c
  4967   001E6C  320C               	rrcf	(??___flmul+2)^0,f,c
  4968   001E6E  320B               	rrcf	(??___flmul+1)^0,f,c
  4969   001E70  320A               	rrcf	??___flmul^0,f,c
  4970   001E72  C00A  F015         	movff	??___flmul,___flmul@prod
  4971   001E76  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  4972   001E7A  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  4973   001E7E  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  4974   001E82  4A19               	infsnz	___flmul@temp^0,f,c
  4975   001E84  2A1A               	incf	(___flmul@temp+1)^0,f,c
  4976   001E86                     l4280:
  4977   001E86  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4978   001E88  EF4E  F00F         	goto	u3641
  4979   001E8C  501A               	movf	(___flmul@temp+1)^0,w,c
  4980   001E8E  E108               	bnz	u3640
  4981   001E90  2819               	incf	___flmul@temp^0,w,c
  4982   001E92  A0D8               	btfss	status,0,c
  4983   001E94  EF4E  F00F         	goto	u3641
  4984   001E98  EF50  F00F         	goto	u3640
  4985   001E9C                     u3641:
  4986   001E9C  EF5A  F00F         	goto	l4284
  4987   001EA0                     u3640:
  4988   001EA0  0E00               	movlw	0
  4989   001EA2  6E15               	movwf	___flmul@prod^0,c
  4990   001EA4  0E00               	movlw	0
  4991   001EA6  6E16               	movwf	(___flmul@prod+1)^0,c
  4992   001EA8  0E80               	movlw	128
  4993   001EAA  6E17               	movwf	(___flmul@prod+2)^0,c
  4994   001EAC  0E7F               	movlw	127
  4995   001EAE  6E18               	movwf	(___flmul@prod+3)^0,c
  4996   001EB0  EF88  F00F         	goto	l4296
  4997   001EB4                     l4284:
  4998   001EB4  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4999   001EB6  EF67  F00F         	goto	u3650
  5000   001EBA  501A               	movf	(___flmul@temp+1)^0,w,c
  5001   001EBC  E106               	bnz	u3651
  5002   001EBE  0419               	decf	___flmul@temp^0,w,c
  5003   001EC0  B0D8               	btfsc	status,0,c
  5004   001EC2  EF65  F00F         	goto	u3651
  5005   001EC6  EF67  F00F         	goto	u3650
  5006   001ECA                     u3651:
  5007   001ECA  EF73  F00F         	goto	l1305
  5008   001ECE                     u3650:
  5009   001ECE  0E00               	movlw	0
  5010   001ED0  6E15               	movwf	___flmul@prod^0,c
  5011   001ED2  0E00               	movlw	0
  5012   001ED4  6E16               	movwf	(___flmul@prod+1)^0,c
  5013   001ED6  0E00               	movlw	0
  5014   001ED8  6E17               	movwf	(___flmul@prod+2)^0,c
  5015   001EDA  0E00               	movlw	0
  5016   001EDC  6E18               	movwf	(___flmul@prod+3)^0,c
  5017   001EDE  0E00               	movlw	0
  5018   001EE0  6E0E               	movwf	___flmul@sign^0,c
  5019   001EE2  EF88  F00F         	goto	l4296
  5020   001EE6                     l1305:
  5021   001EE6  C019  F014         	movff	___flmul@temp,___flmul@bexp
  5022   001EEA  0EFF               	movlw	255
  5023   001EEC  1615               	andwf	___flmul@prod^0,f,c
  5024   001EEE  0EFF               	movlw	255
  5025   001EF0  1616               	andwf	(___flmul@prod+1)^0,f,c
  5026   001EF2  0E7F               	movlw	127
  5027   001EF4  1617               	andwf	(___flmul@prod+2)^0,f,c
  5028   001EF6  0E00               	movlw	0
  5029   001EF8  1618               	andwf	(___flmul@prod+3)^0,f,c
  5030   001EFA  A014               	btfss	___flmul@bexp^0,0,c
  5031   001EFC  EF82  F00F         	goto	u3661
  5032   001F00  EF84  F00F         	goto	u3660
  5033   001F04                     u3661:
  5034   001F04  EF85  F00F         	goto	l4294
  5035   001F08                     u3660:
  5036   001F08  8E17               	bsf	(___flmul@prod+2)^0,7,c
  5037   001F0A                     l4294:
  5038   001F0A  90D8               	bcf	status,0,c
  5039   001F0C  3014               	rrcf	___flmul@bexp^0,w,c
  5040   001F0E  6E18               	movwf	(___flmul@prod+3)^0,c
  5041   001F10                     l4296:
  5042   001F10  500E               	movf	___flmul@sign^0,w,c
  5043   001F12  1218               	iorwf	(___flmul@prod+3)^0,f,c
  5044   001F14  C015  F002         	movff	___flmul@prod,?___flmul
  5045   001F18  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  5046   001F1C  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  5047   001F20  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  5048   001F24                     l1292:
  5049   001F24  0012               	return		;funcret
  5050   001F26                     __end_of___flmul:
  5051                           	callstack 0
  5052                           
  5053 ;; *************** function ___flge *****************
  5054 ;; Defined at:
  5055 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  ff1             4    1[COMRAM] unsigned char 
  5058 ;;  ff2             4    5[COMRAM] unsigned char 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;		None               void
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5070 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5072 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5073 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5074 ;;Total ram usage:       12 bytes
  5075 ;; Hardware stack levels used: 1
  5076 ;; Hardware stack levels required when called: 1
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_convert_rgb2hue
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text14
  5085   003136                     __ptext14:
  5086                           	callstack 0
  5087   003136                     ___flge:
  5088                           	callstack 27
  5089   003136  0E00               	movlw	0
  5090   003138  1402               	andwf	___flge@ff1^0,w,c
  5091   00313A  6E0A               	movwf	??___flge^0,c
  5092   00313C  0E00               	movlw	0
  5093   00313E  1403               	andwf	(___flge@ff1+1)^0,w,c
  5094   003140  6E0B               	movwf	(??___flge+1)^0,c
  5095   003142  0E80               	movlw	128
  5096   003144  1404               	andwf	(___flge@ff1+2)^0,w,c
  5097   003146  6E0C               	movwf	(??___flge+2)^0,c
  5098   003148  0E7F               	movlw	127
  5099   00314A  1405               	andwf	(___flge@ff1+3)^0,w,c
  5100   00314C  6E0D               	movwf	(??___flge+3)^0,c
  5101   00314E  500A               	movf	??___flge^0,w,c
  5102   003150  100B               	iorwf	(??___flge+1)^0,w,c
  5103   003152  100C               	iorwf	(??___flge+2)^0,w,c
  5104   003154  100D               	iorwf	(??___flge+3)^0,w,c
  5105   003156  A4D8               	btfss	status,2,c
  5106   003158  EFB0  F018         	goto	u3701
  5107   00315C  EFB2  F018         	goto	u3700
  5108   003160                     u3701:
  5109   003160  EFBA  F018         	goto	l4328
  5110   003164                     u3700:
  5111   003164  0E00               	movlw	0
  5112   003166  6E02               	movwf	___flge@ff1^0,c
  5113   003168  0E00               	movlw	0
  5114   00316A  6E03               	movwf	(___flge@ff1+1)^0,c
  5115   00316C  0E00               	movlw	0
  5116   00316E  6E04               	movwf	(___flge@ff1+2)^0,c
  5117   003170  0E00               	movlw	0
  5118   003172  6E05               	movwf	(___flge@ff1+3)^0,c
  5119   003174                     l4328:
  5120   003174  0E00               	movlw	0
  5121   003176  1406               	andwf	___flge@ff2^0,w,c
  5122   003178  6E0A               	movwf	??___flge^0,c
  5123   00317A  0E00               	movlw	0
  5124   00317C  1407               	andwf	(___flge@ff2+1)^0,w,c
  5125   00317E  6E0B               	movwf	(??___flge+1)^0,c
  5126   003180  0E80               	movlw	128
  5127   003182  1408               	andwf	(___flge@ff2+2)^0,w,c
  5128   003184  6E0C               	movwf	(??___flge+2)^0,c
  5129   003186  0E7F               	movlw	127
  5130   003188  1409               	andwf	(___flge@ff2+3)^0,w,c
  5131   00318A  6E0D               	movwf	(??___flge+3)^0,c
  5132   00318C  500A               	movf	??___flge^0,w,c
  5133   00318E  100B               	iorwf	(??___flge+1)^0,w,c
  5134   003190  100C               	iorwf	(??___flge+2)^0,w,c
  5135   003192  100D               	iorwf	(??___flge+3)^0,w,c
  5136   003194  A4D8               	btfss	status,2,c
  5137   003196  EFCF  F018         	goto	u3711
  5138   00319A  EFD1  F018         	goto	u3710
  5139   00319E                     u3711:
  5140   00319E  EFD9  F018         	goto	l4332
  5141   0031A2                     u3710:
  5142   0031A2  0E00               	movlw	0
  5143   0031A4  6E06               	movwf	___flge@ff2^0,c
  5144   0031A6  0E00               	movlw	0
  5145   0031A8  6E07               	movwf	(___flge@ff2+1)^0,c
  5146   0031AA  0E00               	movlw	0
  5147   0031AC  6E08               	movwf	(___flge@ff2+2)^0,c
  5148   0031AE  0E00               	movlw	0
  5149   0031B0  6E09               	movwf	(___flge@ff2+3)^0,c
  5150   0031B2                     l4332:
  5151   0031B2  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5152   0031B4  EFDE  F018         	goto	u3721
  5153   0031B8  EFE0  F018         	goto	u3720
  5154   0031BC                     u3721:
  5155   0031BC  EFE9  F018         	goto	l4336
  5156   0031C0                     u3720:
  5157   0031C0  6C02               	negf	___flge@ff1^0,c
  5158   0031C2  1E03               	comf	(___flge@ff1+1)^0,f,c
  5159   0031C4  B0D8               	btfsc	status,0,c
  5160   0031C6  2A03               	incf	(___flge@ff1+1)^0,f,c
  5161   0031C8  1E04               	comf	(___flge@ff1+2)^0,f,c
  5162   0031CA  B0D8               	btfsc	status,0,c
  5163   0031CC  2A04               	incf	(___flge@ff1+2)^0,f,c
  5164   0031CE  0E80               	movlw	128
  5165   0031D0  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5166   0031D2                     l4336:
  5167   0031D2  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5168   0031D4  EFEE  F018         	goto	u3731
  5169   0031D8  EFF0  F018         	goto	u3730
  5170   0031DC                     u3731:
  5171   0031DC  EFF9  F018         	goto	l939
  5172   0031E0                     u3730:
  5173   0031E0  6C06               	negf	___flge@ff2^0,c
  5174   0031E2  1E07               	comf	(___flge@ff2+1)^0,f,c
  5175   0031E4  B0D8               	btfsc	status,0,c
  5176   0031E6  2A07               	incf	(___flge@ff2+1)^0,f,c
  5177   0031E8  1E08               	comf	(___flge@ff2+2)^0,f,c
  5178   0031EA  B0D8               	btfsc	status,0,c
  5179   0031EC  2A08               	incf	(___flge@ff2+2)^0,f,c
  5180   0031EE  0E80               	movlw	128
  5181   0031F0  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5182   0031F2                     l939:
  5183   0031F2  0E00               	movlw	0
  5184   0031F4  1A02               	xorwf	___flge@ff1^0,f,c
  5185   0031F6  0E00               	movlw	0
  5186   0031F8  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5187   0031FA  0E00               	movlw	0
  5188   0031FC  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5189   0031FE  0E80               	movlw	128
  5190   003200  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5191   003202  0E00               	movlw	0
  5192   003204  1A06               	xorwf	___flge@ff2^0,f,c
  5193   003206  0E00               	movlw	0
  5194   003208  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5195   00320A  0E00               	movlw	0
  5196   00320C  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5197   00320E  0E80               	movlw	128
  5198   003210  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5199   003212  5006               	movf	___flge@ff2^0,w,c
  5200   003214  5C02               	subwf	___flge@ff1^0,w,c
  5201   003216  5007               	movf	(___flge@ff2+1)^0,w,c
  5202   003218  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5203   00321A  5008               	movf	(___flge@ff2+2)^0,w,c
  5204   00321C  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5205   00321E  5009               	movf	(___flge@ff2+3)^0,w,c
  5206   003220  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5207   003222  B0D8               	btfsc	status,0,c
  5208   003224  EF16  F019         	goto	u3741
  5209   003228  EF18  F019         	goto	u3740
  5210   00322C                     u3741:
  5211   00322C  EF1B  F019         	goto	l4342
  5212   003230                     u3740:
  5213   003230  90D8               	bcf	status,0,c
  5214   003232  EF1C  F019         	goto	l944
  5215   003236                     l4342:
  5216   003236  80D8               	bsf	status,0,c
  5217   003238                     l944:
  5218   003238  0012               	return		;funcret
  5219   00323A                     __end_of___flge:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function ___fleq *****************
  5223 ;; Defined at:
  5224 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  ff1             4    1[COMRAM] unsigned char 
  5227 ;;  ff2             4    5[COMRAM] unsigned char 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;		None
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5239 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;Total ram usage:       12 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 1
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_convert_rgb2hue
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text15
  5254   0036D4                     __ptext15:
  5255                           	callstack 0
  5256   0036D4                     ___fleq:
  5257                           	callstack 27
  5258   0036D4  0E00               	movlw	0
  5259   0036D6  1402               	andwf	___fleq@ff1^0,w,c
  5260   0036D8  6E0A               	movwf	??___fleq^0,c
  5261   0036DA  0E00               	movlw	0
  5262   0036DC  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5263   0036DE  6E0B               	movwf	(??___fleq+1)^0,c
  5264   0036E0  0E80               	movlw	128
  5265   0036E2  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5266   0036E4  6E0C               	movwf	(??___fleq+2)^0,c
  5267   0036E6  0E7F               	movlw	127
  5268   0036E8  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5269   0036EA  6E0D               	movwf	(??___fleq+3)^0,c
  5270   0036EC  500A               	movf	??___fleq^0,w,c
  5271   0036EE  100B               	iorwf	(??___fleq+1)^0,w,c
  5272   0036F0  100C               	iorwf	(??___fleq+2)^0,w,c
  5273   0036F2  100D               	iorwf	(??___fleq+3)^0,w,c
  5274   0036F4  A4D8               	btfss	status,2,c
  5275   0036F6  EF7F  F01B         	goto	u3671
  5276   0036FA  EF81  F01B         	goto	u3670
  5277   0036FE                     u3671:
  5278   0036FE  EF89  F01B         	goto	l4312
  5279   003702                     u3670:
  5280   003702  0E00               	movlw	0
  5281   003704  6E02               	movwf	___fleq@ff1^0,c
  5282   003706  0E00               	movlw	0
  5283   003708  6E03               	movwf	(___fleq@ff1+1)^0,c
  5284   00370A  0E00               	movlw	0
  5285   00370C  6E04               	movwf	(___fleq@ff1+2)^0,c
  5286   00370E  0E00               	movlw	0
  5287   003710  6E05               	movwf	(___fleq@ff1+3)^0,c
  5288   003712                     l4312:
  5289   003712  0E00               	movlw	0
  5290   003714  1406               	andwf	___fleq@ff2^0,w,c
  5291   003716  6E0A               	movwf	??___fleq^0,c
  5292   003718  0E00               	movlw	0
  5293   00371A  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5294   00371C  6E0B               	movwf	(??___fleq+1)^0,c
  5295   00371E  0E80               	movlw	128
  5296   003720  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5297   003722  6E0C               	movwf	(??___fleq+2)^0,c
  5298   003724  0E7F               	movlw	127
  5299   003726  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5300   003728  6E0D               	movwf	(??___fleq+3)^0,c
  5301   00372A  500A               	movf	??___fleq^0,w,c
  5302   00372C  100B               	iorwf	(??___fleq+1)^0,w,c
  5303   00372E  100C               	iorwf	(??___fleq+2)^0,w,c
  5304   003730  100D               	iorwf	(??___fleq+3)^0,w,c
  5305   003732  A4D8               	btfss	status,2,c
  5306   003734  EF9E  F01B         	goto	u3681
  5307   003738  EFA0  F01B         	goto	u3680
  5308   00373C                     u3681:
  5309   00373C  EFA8  F01B         	goto	l4316
  5310   003740                     u3680:
  5311   003740  0E00               	movlw	0
  5312   003742  6E06               	movwf	___fleq@ff2^0,c
  5313   003744  0E00               	movlw	0
  5314   003746  6E07               	movwf	(___fleq@ff2+1)^0,c
  5315   003748  0E00               	movlw	0
  5316   00374A  6E08               	movwf	(___fleq@ff2+2)^0,c
  5317   00374C  0E00               	movlw	0
  5318   00374E  6E09               	movwf	(___fleq@ff2+3)^0,c
  5319   003750                     l4316:
  5320   003750  5006               	movf	___fleq@ff2^0,w,c
  5321   003752  1802               	xorwf	___fleq@ff1^0,w,c
  5322   003754  E10F               	bnz	u3690
  5323   003756  5007               	movf	(___fleq@ff2+1)^0,w,c
  5324   003758  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5325   00375A  E10C               	bnz	u3690
  5326   00375C  5008               	movf	(___fleq@ff2+2)^0,w,c
  5327   00375E  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5328   003760  E109               	bnz	u3690
  5329   003762  5009               	movf	(___fleq@ff2+3)^0,w,c
  5330   003764  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5331   003766  B4D8               	btfsc	status,2,c
  5332   003768  EFB8  F01B         	goto	u3691
  5333   00376C  EFBA  F01B         	goto	u3690
  5334   003770                     u3691:
  5335   003770  EFBD  F01B         	goto	l4320
  5336   003774                     u3690:
  5337   003774  90D8               	bcf	status,0,c
  5338   003776  EFBE  F01B         	goto	l933
  5339   00377A                     l4320:
  5340   00377A  80D8               	bsf	status,0,c
  5341   00377C                     l933:
  5342   00377C  0012               	return		;funcret
  5343   00377E                     __end_of___fleq:
  5344                           	callstack 0
  5345                           
  5346 ;; *************** function ___fldiv *****************
  5347 ;; Defined at:
  5348 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  b               4   26[COMRAM] unsigned char 
  5351 ;;  a               4   30[COMRAM] unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  grs             4   45[COMRAM] unsigned long 
  5354 ;;  rem             4   38[COMRAM] unsigned long 
  5355 ;;  new_exp         2   43[COMRAM] short 
  5356 ;;  aexp            1   50[COMRAM] unsigned char 
  5357 ;;  bexp            1   49[COMRAM] unsigned char 
  5358 ;;  sign            1   42[COMRAM] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  4   26[COMRAM] unsigned char 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5368 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5370 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5371 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5372 ;;Total ram usage:       25 bytes
  5373 ;; Hardware stack levels used: 1
  5374 ;; Hardware stack levels required when called: 1
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_convert_rgb2hue
  5379 ;;		_main
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text16
  5384   001F26                     __ptext16:
  5385                           	callstack 0
  5386   001F26                     ___fldiv:
  5387                           	callstack 27
  5388   001F26  501E               	movf	(___fldiv@b+3)^0,w,c
  5389   001F28  0B80               	andlw	128
  5390   001F2A  6E2B               	movwf	___fldiv@sign^0,c
  5391   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5392   001F2E  241E               	addwf	(___fldiv@b+3)^0,w,c
  5393   001F30  6E32               	movwf	___fldiv@bexp^0,c
  5394   001F32  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5395   001F34  EF9E  F00F         	goto	u3251
  5396   001F38  EFA0  F00F         	goto	u3250
  5397   001F3C                     u3251:
  5398   001F3C  EFA1  F00F         	goto	l4040
  5399   001F40                     u3250:
  5400   001F40  8032               	bsf	___fldiv@bexp^0,0,c
  5401   001F42                     l4040:
  5402   001F42  5032               	movf	___fldiv@bexp^0,w,c
  5403   001F44  B4D8               	btfsc	status,2,c
  5404   001F46  EFA7  F00F         	goto	u3261
  5405   001F4A  EFA9  F00F         	goto	u3260
  5406   001F4E                     u3261:
  5407   001F4E  EFBE  F00F         	goto	l4050
  5408   001F52                     u3260:
  5409   001F52  2832               	incf	___fldiv@bexp^0,w,c
  5410   001F54  A4D8               	btfss	status,2,c
  5411   001F56  EFAF  F00F         	goto	u3271
  5412   001F5A  EFB1  F00F         	goto	u3270
  5413   001F5E                     u3271:
  5414   001F5E  EFB9  F00F         	goto	l4046
  5415   001F62                     u3270:
  5416   001F62  0E00               	movlw	0
  5417   001F64  6E1B               	movwf	___fldiv@b^0,c
  5418   001F66  0E00               	movlw	0
  5419   001F68  6E1C               	movwf	(___fldiv@b+1)^0,c
  5420   001F6A  0E00               	movlw	0
  5421   001F6C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5422   001F6E  0E00               	movlw	0
  5423   001F70  6E1E               	movwf	(___fldiv@b+3)^0,c
  5424   001F72                     l4046:
  5425   001F72  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5426   001F74  0E00               	movlw	0
  5427   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5428   001F78  EFC6  F00F         	goto	l4052
  5429   001F7C                     l4050:
  5430   001F7C  0E00               	movlw	0
  5431   001F7E  6E1B               	movwf	___fldiv@b^0,c
  5432   001F80  0E00               	movlw	0
  5433   001F82  6E1C               	movwf	(___fldiv@b+1)^0,c
  5434   001F84  0E00               	movlw	0
  5435   001F86  6E1D               	movwf	(___fldiv@b+2)^0,c
  5436   001F88  0E00               	movlw	0
  5437   001F8A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5438   001F8C                     l4052:
  5439   001F8C  5022               	movf	(___fldiv@a+3)^0,w,c
  5440   001F8E  0B80               	andlw	128
  5441   001F90  1A2B               	xorwf	___fldiv@sign^0,f,c
  5442   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5443   001F94  2422               	addwf	(___fldiv@a+3)^0,w,c
  5444   001F96  6E33               	movwf	___fldiv@aexp^0,c
  5445   001F98  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5446   001F9A  EFD1  F00F         	goto	u3281
  5447   001F9E  EFD3  F00F         	goto	u3280
  5448   001FA2                     u3281:
  5449   001FA2  EFD4  F00F         	goto	l4060
  5450   001FA6                     u3280:
  5451   001FA6  8033               	bsf	___fldiv@aexp^0,0,c
  5452   001FA8                     l4060:
  5453   001FA8  5033               	movf	___fldiv@aexp^0,w,c
  5454   001FAA  B4D8               	btfsc	status,2,c
  5455   001FAC  EFDA  F00F         	goto	u3291
  5456   001FB0  EFDC  F00F         	goto	u3290
  5457   001FB4                     u3291:
  5458   001FB4  EFF1  F00F         	goto	l4070
  5459   001FB8                     u3290:
  5460   001FB8  2833               	incf	___fldiv@aexp^0,w,c
  5461   001FBA  A4D8               	btfss	status,2,c
  5462   001FBC  EFE2  F00F         	goto	u3301
  5463   001FC0  EFE4  F00F         	goto	u3300
  5464   001FC4                     u3301:
  5465   001FC4  EFEC  F00F         	goto	l4066
  5466   001FC8                     u3300:
  5467   001FC8  0E00               	movlw	0
  5468   001FCA  6E1F               	movwf	___fldiv@a^0,c
  5469   001FCC  0E00               	movlw	0
  5470   001FCE  6E20               	movwf	(___fldiv@a+1)^0,c
  5471   001FD0  0E00               	movlw	0
  5472   001FD2  6E21               	movwf	(___fldiv@a+2)^0,c
  5473   001FD4  0E00               	movlw	0
  5474   001FD6  6E22               	movwf	(___fldiv@a+3)^0,c
  5475   001FD8                     l4066:
  5476   001FD8  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5477   001FDA  0E00               	movlw	0
  5478   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5479   001FDE  EFF9  F00F         	goto	l4072
  5480   001FE2                     l4070:
  5481   001FE2  0E00               	movlw	0
  5482   001FE4  6E1F               	movwf	___fldiv@a^0,c
  5483   001FE6  0E00               	movlw	0
  5484   001FE8  6E20               	movwf	(___fldiv@a+1)^0,c
  5485   001FEA  0E00               	movlw	0
  5486   001FEC  6E21               	movwf	(___fldiv@a+2)^0,c
  5487   001FEE  0E00               	movlw	0
  5488   001FF0  6E22               	movwf	(___fldiv@a+3)^0,c
  5489   001FF2                     l4072:
  5490   001FF2  501F               	movf	___fldiv@a^0,w,c
  5491   001FF4  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5492   001FF6  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5493   001FF8  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5494   001FFA  A4D8               	btfss	status,2,c
  5495   001FFC  EF02  F010         	goto	u3311
  5496   002000  EF04  F010         	goto	u3310
  5497   002004                     u3311:
  5498   002004  EF1C  F010         	goto	l4084
  5499   002008                     u3310:
  5500   002008  0E00               	movlw	0
  5501   00200A  6E1B               	movwf	___fldiv@b^0,c
  5502   00200C  0E00               	movlw	0
  5503   00200E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5504   002010  0E00               	movlw	0
  5505   002012  6E1D               	movwf	(___fldiv@b+2)^0,c
  5506   002014  0E00               	movlw	0
  5507   002016  6E1E               	movwf	(___fldiv@b+3)^0,c
  5508   002018  0E80               	movlw	128
  5509   00201A  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5510   00201C  0E7F               	movlw	127
  5511   00201E  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5512   002020                     l4078:
  5513   002020  502B               	movf	___fldiv@sign^0,w,c
  5514   002022  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5515   002024  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5516   002028  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5517   00202C  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5518   002030  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5519   002034  EF5F  F011         	goto	l1256
  5520   002038                     l4084:
  5521   002038  5032               	movf	___fldiv@bexp^0,w,c
  5522   00203A  A4D8               	btfss	status,2,c
  5523   00203C  EF22  F010         	goto	u3321
  5524   002040  EF24  F010         	goto	u3320
  5525   002044                     u3321:
  5526   002044  EF2E  F010         	goto	l4092
  5527   002048                     u3320:
  5528   002048  0E00               	movlw	0
  5529   00204A  6E1B               	movwf	?___fldiv^0,c
  5530   00204C  0E00               	movlw	0
  5531   00204E  6E1C               	movwf	(?___fldiv+1)^0,c
  5532   002050  0E00               	movlw	0
  5533   002052  6E1D               	movwf	(?___fldiv+2)^0,c
  5534   002054  0E00               	movlw	0
  5535   002056  6E1E               	movwf	(?___fldiv+3)^0,c
  5536   002058  EF5F  F011         	goto	l1256
  5537   00205C                     l4092:
  5538   00205C  5033               	movf	___fldiv@aexp^0,w,c
  5539   00205E  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5540   002062  6A24               	clrf	(??___fldiv+1)^0,c
  5541   002064  5E23               	subwf	??___fldiv^0,f,c
  5542   002066  0E00               	movlw	0
  5543   002068  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5544   00206A  0E7F               	movlw	127
  5545   00206C  2423               	addwf	??___fldiv^0,w,c
  5546   00206E  6E2C               	movwf	___fldiv@new_exp^0,c
  5547   002070  0E00               	movlw	0
  5548   002072  2024               	addwfc	(??___fldiv+1)^0,w,c
  5549   002074  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5550   002076  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5551   00207A  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5552   00207E  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5553   002082  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5554   002086  0E00               	movlw	0
  5555   002088  6E1B               	movwf	___fldiv@b^0,c
  5556   00208A  0E00               	movlw	0
  5557   00208C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5558   00208E  0E00               	movlw	0
  5559   002090  6E1D               	movwf	(___fldiv@b+2)^0,c
  5560   002092  0E00               	movlw	0
  5561   002094  6E1E               	movwf	(___fldiv@b+3)^0,c
  5562   002096  0E00               	movlw	0
  5563   002098  6E2E               	movwf	___fldiv@grs^0,c
  5564   00209A  0E00               	movlw	0
  5565   00209C  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5566   00209E  0E00               	movlw	0
  5567   0020A0  6E30               	movwf	(___fldiv@grs+2)^0,c
  5568   0020A2  0E00               	movlw	0
  5569   0020A4  6E31               	movwf	(___fldiv@grs+3)^0,c
  5570   0020A6  0E00               	movlw	0
  5571   0020A8  6E33               	movwf	___fldiv@aexp^0,c
  5572   0020AA  EF8F  F010         	goto	l1258
  5573   0020AE                     l4102:
  5574   0020AE  5033               	movf	___fldiv@aexp^0,w,c
  5575   0020B0  B4D8               	btfsc	status,2,c
  5576   0020B2  EF5D  F010         	goto	u3331
  5577   0020B6  EF5F  F010         	goto	u3330
  5578   0020BA                     u3331:
  5579   0020BA  EF76  F010         	goto	l4110
  5580   0020BE                     u3330:
  5581   0020BE  90D8               	bcf	status,0,c
  5582   0020C0  3627               	rlcf	___fldiv@rem^0,f,c
  5583   0020C2  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5584   0020C4  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5585   0020C6  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5586   0020C8  90D8               	bcf	status,0,c
  5587   0020CA  361B               	rlcf	___fldiv@b^0,f,c
  5588   0020CC  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5589   0020CE  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5590   0020D0  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5591   0020D2  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5592   0020D4  EF6E  F010         	goto	u3341
  5593   0020D8  EF70  F010         	goto	u3340
  5594   0020DC                     u3341:
  5595   0020DC  EF71  F010         	goto	l1261
  5596   0020E0                     u3340:
  5597   0020E0  801B               	bsf	___fldiv@b^0,0,c
  5598   0020E2                     l1261:
  5599   0020E2  90D8               	bcf	status,0,c
  5600   0020E4  362E               	rlcf	___fldiv@grs^0,f,c
  5601   0020E6  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5602   0020E8  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5603   0020EA  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5604   0020EC                     l4110:
  5605   0020EC  501F               	movf	___fldiv@a^0,w,c
  5606   0020EE  5C27               	subwf	___fldiv@rem^0,w,c
  5607   0020F0  5020               	movf	(___fldiv@a+1)^0,w,c
  5608   0020F2  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5609   0020F4  5021               	movf	(___fldiv@a+2)^0,w,c
  5610   0020F6  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5611   0020F8  5022               	movf	(___fldiv@a+3)^0,w,c
  5612   0020FA  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5613   0020FC  A0D8               	btfss	status,0,c
  5614   0020FE  EF83  F010         	goto	u3351
  5615   002102  EF85  F010         	goto	u3350
  5616   002106                     u3351:
  5617   002106  EF8E  F010         	goto	l4116
  5618   00210A                     u3350:
  5619   00210A  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5620   00210C  501F               	movf	___fldiv@a^0,w,c
  5621   00210E  5E27               	subwf	___fldiv@rem^0,f,c
  5622   002110  5020               	movf	(___fldiv@a+1)^0,w,c
  5623   002112  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5624   002114  5021               	movf	(___fldiv@a+2)^0,w,c
  5625   002116  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5626   002118  5022               	movf	(___fldiv@a+3)^0,w,c
  5627   00211A  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5628   00211C                     l4116:
  5629   00211C  2A33               	incf	___fldiv@aexp^0,f,c
  5630   00211E                     l1258:
  5631   00211E  0E19               	movlw	25
  5632   002120  6433               	cpfsgt	___fldiv@aexp^0,c
  5633   002122  EF95  F010         	goto	u3361
  5634   002126  EF97  F010         	goto	u3360
  5635   00212A                     u3361:
  5636   00212A  EF57  F010         	goto	l4102
  5637   00212E                     u3360:
  5638   00212E  5027               	movf	___fldiv@rem^0,w,c
  5639   002130  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5640   002132  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5641   002134  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5642   002136  B4D8               	btfsc	status,2,c
  5643   002138  EFA0  F010         	goto	u3371
  5644   00213C  EFA2  F010         	goto	u3370
  5645   002140                     u3371:
  5646   002140  EFBA  F010         	goto	l4128
  5647   002144                     u3370:
  5648   002144  802E               	bsf	___fldiv@grs^0,0,c
  5649   002146  EFBA  F010         	goto	l4128
  5650   00214A                     l4122:
  5651   00214A  90D8               	bcf	status,0,c
  5652   00214C  361B               	rlcf	___fldiv@b^0,f,c
  5653   00214E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5654   002150  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5655   002152  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5656   002154  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5657   002156  EFAF  F010         	goto	u3381
  5658   00215A  EFB1  F010         	goto	u3380
  5659   00215E                     u3381:
  5660   00215E  EFB2  F010         	goto	l1267
  5661   002162                     u3380:
  5662   002162  801B               	bsf	___fldiv@b^0,0,c
  5663   002164                     l1267:
  5664   002164  90D8               	bcf	status,0,c
  5665   002166  362E               	rlcf	___fldiv@grs^0,f,c
  5666   002168  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5667   00216A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5668   00216C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5669   00216E  062C               	decf	___fldiv@new_exp^0,f,c
  5670   002170  A0D8               	btfss	status,0,c
  5671   002172  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5672   002174                     l4128:
  5673   002174  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5674   002176  EFBF  F010         	goto	u3391
  5675   00217A  EFC1  F010         	goto	u3390
  5676   00217E                     u3391:
  5677   00217E  EFA5  F010         	goto	l4122
  5678   002182                     u3390:
  5679   002182  0E00               	movlw	0
  5680   002184  6E33               	movwf	___fldiv@aexp^0,c
  5681   002186  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5682   002188  EFC8  F010         	goto	u3401
  5683   00218C  EFCA  F010         	goto	u3400
  5684   002190                     u3401:
  5685   002190  EFEE  F010         	goto	l1269
  5686   002194                     u3400:
  5687   002194  0EFF               	movlw	255
  5688   002196  142E               	andwf	___fldiv@grs^0,w,c
  5689   002198  6E23               	movwf	??___fldiv^0,c
  5690   00219A  0EFF               	movlw	255
  5691   00219C  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5692   00219E  6E24               	movwf	(??___fldiv+1)^0,c
  5693   0021A0  0EFF               	movlw	255
  5694   0021A2  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5695   0021A4  6E25               	movwf	(??___fldiv+2)^0,c
  5696   0021A6  0E7F               	movlw	127
  5697   0021A8  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5698   0021AA  6E26               	movwf	(??___fldiv+3)^0,c
  5699   0021AC  5023               	movf	??___fldiv^0,w,c
  5700   0021AE  1024               	iorwf	(??___fldiv+1)^0,w,c
  5701   0021B0  1025               	iorwf	(??___fldiv+2)^0,w,c
  5702   0021B2  1026               	iorwf	(??___fldiv+3)^0,w,c
  5703   0021B4  B4D8               	btfsc	status,2,c
  5704   0021B6  EFDF  F010         	goto	u3411
  5705   0021BA  EFE1  F010         	goto	u3410
  5706   0021BE                     u3411:
  5707   0021BE  EFE5  F010         	goto	l1270
  5708   0021C2                     u3410:
  5709   0021C2                     l4136:
  5710   0021C2  0E01               	movlw	1
  5711   0021C4  6E33               	movwf	___fldiv@aexp^0,c
  5712   0021C6  EFEE  F010         	goto	l1269
  5713   0021CA                     l1270:
  5714   0021CA  A01B               	btfss	___fldiv@b^0,0,c
  5715   0021CC  EFEA  F010         	goto	u3421
  5716   0021D0  EFEC  F010         	goto	u3420
  5717   0021D4                     u3421:
  5718   0021D4  EFEE  F010         	goto	l1269
  5719   0021D8                     u3420:
  5720   0021D8  EFE1  F010         	goto	l4136
  5721   0021DC                     l1269:
  5722   0021DC  5033               	movf	___fldiv@aexp^0,w,c
  5723   0021DE  B4D8               	btfsc	status,2,c
  5724   0021E0  EFF4  F010         	goto	u3431
  5725   0021E4  EFF6  F010         	goto	u3430
  5726   0021E8                     u3431:
  5727   0021E8  EF1A  F011         	goto	l4148
  5728   0021EC                     u3430:
  5729   0021EC  0E01               	movlw	1
  5730   0021EE  261B               	addwf	___fldiv@b^0,f,c
  5731   0021F0  0E00               	movlw	0
  5732   0021F2  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5733   0021F4  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5734   0021F6  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5735   0021F8  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5736   0021FA  EF01  F011         	goto	u3441
  5737   0021FE  EF03  F011         	goto	u3440
  5738   002202                     u3441:
  5739   002202  EF1A  F011         	goto	l4148
  5740   002206                     u3440:
  5741   002206  C01B  F023         	movff	___fldiv@b,??___fldiv
  5742   00220A  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5743   00220E  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5744   002212  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5745   002216  3426               	rlcf	(??___fldiv+3)^0,w,c
  5746   002218  3226               	rrcf	(??___fldiv+3)^0,f,c
  5747   00221A  3225               	rrcf	(??___fldiv+2)^0,f,c
  5748   00221C  3224               	rrcf	(??___fldiv+1)^0,f,c
  5749   00221E  3223               	rrcf	??___fldiv^0,f,c
  5750   002220  C023  F01B         	movff	??___fldiv,___fldiv@b
  5751   002224  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5752   002228  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5753   00222C  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5754   002230  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5755   002232  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5756   002234                     l4148:
  5757   002234  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5758   002236  EF25  F011         	goto	u3451
  5759   00223A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5760   00223C  E108               	bnz	u3450
  5761   00223E  282C               	incf	___fldiv@new_exp^0,w,c
  5762   002240  A0D8               	btfss	status,0,c
  5763   002242  EF25  F011         	goto	u3451
  5764   002246  EF27  F011         	goto	u3450
  5765   00224A                     u3451:
  5766   00224A  EF32  F011         	goto	l4152
  5767   00224E                     u3450:
  5768   00224E  0E00               	movlw	0
  5769   002250  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5770   002252  682C               	setf	___fldiv@new_exp^0,c
  5771   002254  0E00               	movlw	0
  5772   002256  6E1B               	movwf	___fldiv@b^0,c
  5773   002258  0E00               	movlw	0
  5774   00225A  6E1C               	movwf	(___fldiv@b+1)^0,c
  5775   00225C  0E00               	movlw	0
  5776   00225E  6E1D               	movwf	(___fldiv@b+2)^0,c
  5777   002260  0E00               	movlw	0
  5778   002262  6E1E               	movwf	(___fldiv@b+3)^0,c
  5779   002264                     l4152:
  5780   002264  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5781   002266  EF3F  F011         	goto	u3460
  5782   00226A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5783   00226C  E106               	bnz	u3461
  5784   00226E  042C               	decf	___fldiv@new_exp^0,w,c
  5785   002270  B0D8               	btfsc	status,0,c
  5786   002272  EF3D  F011         	goto	u3461
  5787   002276  EF3F  F011         	goto	u3460
  5788   00227A                     u3461:
  5789   00227A  EF4D  F011         	goto	l4156
  5790   00227E                     u3460:
  5791   00227E  0E00               	movlw	0
  5792   002280  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5793   002282  0E00               	movlw	0
  5794   002284  6E2C               	movwf	___fldiv@new_exp^0,c
  5795   002286  0E00               	movlw	0
  5796   002288  6E1B               	movwf	___fldiv@b^0,c
  5797   00228A  0E00               	movlw	0
  5798   00228C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5799   00228E  0E00               	movlw	0
  5800   002290  6E1D               	movwf	(___fldiv@b+2)^0,c
  5801   002292  0E00               	movlw	0
  5802   002294  6E1E               	movwf	(___fldiv@b+3)^0,c
  5803   002296  0E00               	movlw	0
  5804   002298  6E2B               	movwf	___fldiv@sign^0,c
  5805   00229A                     l4156:
  5806   00229A  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5807   00229E  A032               	btfss	___fldiv@bexp^0,0,c
  5808   0022A0  EF54  F011         	goto	u3471
  5809   0022A4  EF56  F011         	goto	u3470
  5810   0022A8                     u3471:
  5811   0022A8  EF59  F011         	goto	l4162
  5812   0022AC                     u3470:
  5813   0022AC  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5814   0022AE  EF5A  F011         	goto	l4164
  5815   0022B2                     l4162:
  5816   0022B2  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5817   0022B4                     l4164:
  5818   0022B4  90D8               	bcf	status,0,c
  5819   0022B6  3032               	rrcf	___fldiv@bexp^0,w,c
  5820   0022B8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5821   0022BA  EF10  F010         	goto	l4078
  5822   0022BE                     l1256:
  5823   0022BE  0012               	return		;funcret
  5824   0022C0                     __end_of___fldiv:
  5825                           	callstack 0
  5826                           
  5827 ;; *************** function _initUSART4 *****************
  5828 ;; Defined at:
  5829 ;;		line 14 in file "serial.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5847 ;;Total ram usage:        0 bytes
  5848 ;; Hardware stack levels used: 1
  5849 ;; Hardware stack levels required when called: 1
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text17
  5858   004576                     __ptext17:
  5859                           	callstack 0
  5860   004576                     _initUSART4:
  5861                           	callstack 29
  5862   004576                     
  5863                           ;serial.c: 15:     RC0PPS = 0x12;
  5864   004576  0E12               	movlw	18
  5865   004578  010E               	movlb	14	; () banked
  5866   00457A  6F62               	movwf	98,b	;volatile
  5867                           
  5868                           ;serial.c: 16:     RX4PPS = 0x11;
  5869   00457C  0E11               	movlw	17
  5870   00457E  6F15               	movwf	21,b	;volatile
  5871   004580                     
  5872                           ; BSR set to: 14
  5873                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5874   004580  97E9               	bcf	233,3,b	;volatile
  5875   004582                     
  5876                           ; BSR set to: 14
  5877                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5878   004582  95E8               	bcf	232,2,b	;volatile
  5879                           
  5880                           ;serial.c: 19:     SP4BRGL = 51;
  5881   004584  0E33               	movlw	51
  5882   004586  6FE5               	movwf	229,b	;volatile
  5883                           
  5884                           ;serial.c: 20:     SP4BRGH = 0;
  5885   004588  0E00               	movlw	0
  5886   00458A  6FE6               	movwf	230,b	;volatile
  5887   00458C                     
  5888                           ; BSR set to: 14
  5889                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5890   00458C  89E7               	bsf	231,4,b	;volatile
  5891   00458E                     
  5892                           ; BSR set to: 14
  5893                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5894   00458E  8BE8               	bsf	232,5,b	;volatile
  5895   004590                     
  5896                           ; BSR set to: 14
  5897                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5898   004590  8FE7               	bsf	231,7,b	;volatile
  5899   004592                     
  5900                           ; BSR set to: 14
  5901   004592  0012               	return		;funcret
  5902   004594                     __end_of_initUSART4:
  5903                           	callstack 0
  5904                           
  5905 ;; *************** function _initDCmotorsPWM *****************
  5906 ;; Defined at:
  5907 ;;		line 5 in file "dc_motor.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5924 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5925 ;;Total ram usage:        2 bytes
  5926 ;; Hardware stack levels used: 1
  5927 ;; Hardware stack levels required when called: 1
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text18
  5936   0038BE                     __ptext18:
  5937                           	callstack 0
  5938   0038BE                     _initDCmotorsPWM:
  5939                           	callstack 29
  5940   0038BE                     
  5941                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5942   0038BE  9485               	bcf	133,2,c	;volatile
  5943                           
  5944                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5945   0038C0  9E83               	bcf	131,7,c	;volatile
  5946                           
  5947                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5948   0038C2  9885               	bcf	133,4,c	;volatile
  5949                           
  5950                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5951   0038C4  9C87               	bcf	135,6,c	;volatile
  5952                           
  5953                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5954   0038C6  947D               	bcf	125,2,c	;volatile
  5955                           
  5956                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5957   0038C8  9E7B               	bcf	123,7,c	;volatile
  5958                           
  5959                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5960   0038CA  987D               	bcf	125,4,c	;volatile
  5961                           
  5962                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5963   0038CC  9C7F               	bcf	127,6,c	;volatile
  5964   0038CE                     
  5965                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5966   0038CE  0E05               	movlw	5
  5967   0038D0  010E               	movlb	14	; () banked
  5968   0038D2  6F74               	movwf	116,b	;volatile
  5969                           
  5970                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5971   0038D4  0E06               	movlw	6
  5972   0038D6  6F76               	movwf	118,b	;volatile
  5973                           
  5974                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5975   0038D8  0E07               	movlw	7
  5976   0038DA  6F69               	movwf	105,b	;volatile
  5977                           
  5978                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5979   0038DC  0E08               	movlw	8
  5980   0038DE  6F88               	movwf	136,b	;volatile
  5981                           
  5982                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5983   0038E0  50BD               	movf	189,w,c	;volatile
  5984   0038E2  0B8F               	andlw	-113
  5985   0038E4  0940               	iorlw	64
  5986   0038E6  6EBD               	movwf	189,c	;volatile
  5987                           
  5988                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5989   0038E8  0EE0               	movlw	-32
  5990   0038EA  16BE               	andwf	190,f,c	;volatile
  5991                           
  5992                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5993   0038EC  50BF               	movf	191,w,c	;volatile
  5994   0038EE  0BF0               	andlw	-16
  5995   0038F0  0901               	iorlw	1
  5996   0038F2  6EBF               	movwf	191,c	;volatile
  5997   0038F4                     
  5998                           ; BSR set to: 14
  5999                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6000   0038F4  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6001   0038F8                     
  6002                           ; BSR set to: 14
  6003                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6004   0038F8  8EBD               	bsf	189,7,c	;volatile
  6005                           
  6006                           ;dc_motor.c: 35:     CCPR1H=0;
  6007   0038FA  0E00               	movlw	0
  6008   0038FC  6EAA               	movwf	170,c	;volatile
  6009                           
  6010                           ;dc_motor.c: 36:     CCPR2H=0;
  6011   0038FE  0E00               	movlw	0
  6012   003900  6EA6               	movwf	166,c	;volatile
  6013                           
  6014                           ;dc_motor.c: 37:     CCPR3H=0;
  6015   003902  0E00               	movlw	0
  6016   003904  010F               	movlb	15	; () banked
  6017   003906  6F25               	movwf	37,b	;volatile
  6018                           
  6019                           ;dc_motor.c: 38:     CCPR4H=0;
  6020   003908  0E00               	movlw	0
  6021   00390A  6F21               	movwf	33,b	;volatile
  6022                           
  6023                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6024   00390C  0EFC               	movlw	-4
  6025   00390E  16AD               	andwf	173,f,c	;volatile
  6026                           
  6027                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6028   003910  0EF3               	movlw	-13
  6029   003912  16AD               	andwf	173,f,c	;volatile
  6030                           
  6031                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6032   003914  0ECF               	movlw	-49
  6033   003916  16AD               	andwf	173,f,c	;volatile
  6034                           
  6035                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6036   003918  0E3F               	movlw	-193
  6037   00391A  16AD               	andwf	173,f,c	;volatile
  6038   00391C                     
  6039                           ; BSR set to: 15
  6040                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6041   00391C  88AB               	bsf	171,4,c	;volatile
  6042                           
  6043                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6044   00391E  50AB               	movf	171,w,c	;volatile
  6045   003920  0BF0               	andlw	-16
  6046   003922  090C               	iorlw	12
  6047   003924  6EAB               	movwf	171,c	;volatile
  6048   003926                     
  6049                           ; BSR set to: 15
  6050                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6051   003926  8EAB               	bsf	171,7,c	;volatile
  6052   003928                     
  6053                           ; BSR set to: 15
  6054                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6055   003928  88A7               	bsf	167,4,c	;volatile
  6056                           
  6057                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6058   00392A  50A7               	movf	167,w,c	;volatile
  6059   00392C  0BF0               	andlw	-16
  6060   00392E  090C               	iorlw	12
  6061   003930  6EA7               	movwf	167,c	;volatile
  6062   003932                     
  6063                           ; BSR set to: 15
  6064                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6065   003932  8EA7               	bsf	167,7,c	;volatile
  6066   003934                     
  6067                           ; BSR set to: 15
  6068                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6069   003934  8926               	bsf	38,4,b	;volatile
  6070                           
  6071                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6072   003936  5126               	movf	38,w,b	;volatile
  6073   003938  0BF0               	andlw	-16
  6074   00393A  090C               	iorlw	12
  6075   00393C  6F26               	movwf	38,b	;volatile
  6076   00393E                     
  6077                           ; BSR set to: 15
  6078                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6079   00393E  8F26               	bsf	38,7,b	;volatile
  6080   003940                     
  6081                           ; BSR set to: 15
  6082                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6083   003940  8922               	bsf	34,4,b	;volatile
  6084                           
  6085                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6086   003942  5122               	movf	34,w,b	;volatile
  6087   003944  0BF0               	andlw	-16
  6088   003946  090C               	iorlw	12
  6089   003948  6F22               	movwf	34,b	;volatile
  6090   00394A                     
  6091                           ; BSR set to: 15
  6092                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6093   00394A  8F22               	bsf	34,7,b	;volatile
  6094   00394C                     
  6095                           ; BSR set to: 15
  6096   00394C  0012               	return		;funcret
  6097   00394E                     __end_of_initDCmotorsPWM:
  6098                           	callstack 0
  6099                           
  6100 ;; *************** function _get16bitTMR0val *****************
  6101 ;; Defined at:
  6102 ;;		line 32 in file "timers.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  combined_val    2    7[COMRAM] unsigned int 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  2    1[COMRAM] unsigned int 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6118 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;Total ram usage:        8 bytes
  6121 ;; Hardware stack levels used: 1
  6122 ;; Hardware stack levels required when called: 1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_main
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text19
  6131   004534                     __ptext19:
  6132                           	callstack 0
  6133   004534                     _get16bitTMR0val:
  6134                           	callstack 29
  6135   004534                     
  6136                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6137   004534  50D4               	movf	212,w,c	;volatile
  6138   004536  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6139   004538  6A04               	clrf	??_get16bitTMR0val^0,c
  6140   00453A  50D3               	movf	211,w,c	;volatile
  6141   00453C  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6142   00453E  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6143   004540  5004               	movf	??_get16bitTMR0val^0,w,c
  6144   004542  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6145   004544  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6146   004546  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6147   004548  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6148   00454A  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6149   00454C                     
  6150                           ;timers.c: 36:     return combined_value;
  6151   00454C  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6152   004550  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6153   004554  0012               	return		;funcret
  6154   004556                     __end_of_get16bitTMR0val:
  6155                           	callstack 0
  6156                           
  6157 ;; *************** function _decision *****************
  6158 ;; Defined at:
  6159 ;;		line 277 in file "color.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  hue             2   70[COMRAM] unsigned int 
  6162 ;;  path_length     2   72[COMRAM] unsigned int 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  color           2   74[COMRAM] unsigned int 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6175 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6177 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6178 ;;Total ram usage:        6 bytes
  6179 ;; Hardware stack levels used: 1
  6180 ;; Hardware stack levels required when called: 10
  6181 ;; This function calls:
  6182 ;;		_moveBlue
  6183 ;;		_moveGreen
  6184 ;;		_moveLightBlue
  6185 ;;		_moveOrange
  6186 ;;		_movePink
  6187 ;;		_moveRed
  6188 ;;		_moveYellow
  6189 ;;		_send2USART
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text20
  6196   002634                     __ptext20:
  6197                           	callstack 0
  6198   002634                     _decision:
  6199                           	callstack 20
  6200   002634                     
  6201                           ;color.c: 282:     unsigned int color;;color.c: 284:     if (hue<=10 || hue>=355) {
  6202   002634  5048               	movf	(decision@hue+1)^0,w,c
  6203   002636  E109               	bnz	u5160
  6204   002638  0E0B               	movlw	11
  6205   00263A  5C47               	subwf	decision@hue^0,w,c
  6206   00263C  A0D8               	btfss	status,0,c
  6207   00263E  EF23  F013         	goto	u5161
  6208   002642  EF25  F013         	goto	u5160
  6209   002646                     u5161:
  6210   002646  EF30  F013         	goto	l5878
  6211   00264A                     u5160:
  6212   00264A  0E63               	movlw	99
  6213   00264C  5C47               	subwf	decision@hue^0,w,c
  6214   00264E  0E01               	movlw	1
  6215   002650  5848               	subwfb	(decision@hue+1)^0,w,c
  6216   002652  A0D8               	btfss	status,0,c
  6217   002654  EF2E  F013         	goto	u5171
  6218   002658  EF30  F013         	goto	u5170
  6219   00265C                     u5171:
  6220   00265C  EF40  F013         	goto	l5882
  6221   002660                     u5170:
  6222   002660                     l5878:
  6223                           
  6224                           ;color.c: 285:         moveRed(&motorL, &motorR, path_length);
  6225   002660  0ED4               	movlw	low _motorL
  6226   002662  6E1D               	movwf	moveRed@mL^0,c
  6227   002664  0ECB               	movlw	low _motorR
  6228   002666  6E1E               	movwf	moveRed@mR^0,c
  6229   002668  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6230   00266C  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6231   002670  EC8F  F01E         	call	_moveRed	;wreg free
  6232   002674                     
  6233                           ;color.c: 286:         color = 1;
  6234   002674  0E00               	movlw	0
  6235   002676  6E4C               	movwf	(decision@color+1)^0,c
  6236   002678  0E01               	movlw	1
  6237   00267A  6E4B               	movwf	decision@color^0,c
  6238                           
  6239                           ;color.c: 287:     } else if (hue>=105 && hue<=130){
  6240   00267C  EF24  F014         	goto	l5930
  6241   002680                     l5882:
  6242   002680  5048               	movf	(decision@hue+1)^0,w,c
  6243   002682  E109               	bnz	u5180
  6244   002684  0E69               	movlw	105
  6245   002686  5C47               	subwf	decision@hue^0,w,c
  6246   002688  A0D8               	btfss	status,0,c
  6247   00268A  EF49  F013         	goto	u5181
  6248   00268E  EF4B  F013         	goto	u5180
  6249   002692                     u5181:
  6250   002692  EF66  F013         	goto	l5890
  6251   002696                     u5180:
  6252   002696  5048               	movf	(decision@hue+1)^0,w,c
  6253   002698  E107               	bnz	u5191
  6254   00269A  0E83               	movlw	131
  6255   00269C  5C47               	subwf	decision@hue^0,w,c
  6256   00269E  B0D8               	btfsc	status,0,c
  6257   0026A0  EF54  F013         	goto	u5191
  6258   0026A4  EF56  F013         	goto	u5190
  6259   0026A8                     u5191:
  6260   0026A8  EF66  F013         	goto	l5890
  6261   0026AC                     u5190:
  6262   0026AC                     
  6263                           ;color.c: 288:         moveGreen(&motorL, &motorR, path_length);
  6264   0026AC  0ED4               	movlw	low _motorL
  6265   0026AE  6E1D               	movwf	moveGreen@mL^0,c
  6266   0026B0  0ECB               	movlw	low _motorR
  6267   0026B2  6E1E               	movwf	moveGreen@mR^0,c
  6268   0026B4  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6269   0026B8  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6270   0026BC  EC3F  F01F         	call	_moveGreen	;wreg free
  6271   0026C0                     
  6272                           ;color.c: 289:         color = 2;
  6273   0026C0  0E00               	movlw	0
  6274   0026C2  6E4C               	movwf	(decision@color+1)^0,c
  6275   0026C4  0E02               	movlw	2
  6276   0026C6  6E4B               	movwf	decision@color^0,c
  6277                           
  6278                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6279   0026C8  EF24  F014         	goto	l5930
  6280   0026CC                     l5890:
  6281   0026CC  5048               	movf	(decision@hue+1)^0,w,c
  6282   0026CE  E109               	bnz	u5200
  6283   0026D0  0EE6               	movlw	230
  6284   0026D2  5C47               	subwf	decision@hue^0,w,c
  6285   0026D4  A0D8               	btfss	status,0,c
  6286   0026D6  EF6F  F013         	goto	u5201
  6287   0026DA  EF71  F013         	goto	u5200
  6288   0026DE                     u5201:
  6289   0026DE  EF8C  F013         	goto	l5898
  6290   0026E2                     u5200:
  6291   0026E2  5048               	movf	(decision@hue+1)^0,w,c
  6292   0026E4  E107               	bnz	u5211
  6293   0026E6  0EF1               	movlw	241
  6294   0026E8  5C47               	subwf	decision@hue^0,w,c
  6295   0026EA  B0D8               	btfsc	status,0,c
  6296   0026EC  EF7A  F013         	goto	u5211
  6297   0026F0  EF7C  F013         	goto	u5210
  6298   0026F4                     u5211:
  6299   0026F4  EF8C  F013         	goto	l5898
  6300   0026F8                     u5210:
  6301   0026F8                     
  6302                           ;color.c: 291:         moveBlue(&motorL,&motorR, path_length);
  6303   0026F8  0ED4               	movlw	low _motorL
  6304   0026FA  6E1D               	movwf	moveBlue@mL^0,c
  6305   0026FC  0ECB               	movlw	low _motorR
  6306   0026FE  6E1E               	movwf	moveBlue@mR^0,c
  6307   002700  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6308   002704  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6309   002708  EC6B  F01F         	call	_moveBlue	;wreg free
  6310   00270C                     
  6311                           ;color.c: 292:         color = 3;
  6312   00270C  0E00               	movlw	0
  6313   00270E  6E4C               	movwf	(decision@color+1)^0,c
  6314   002710  0E03               	movlw	3
  6315   002712  6E4B               	movwf	decision@color^0,c
  6316                           
  6317                           ;color.c: 293:     } else if (hue>=216 && hue<=221){
  6318   002714  EF24  F014         	goto	l5930
  6319   002718                     l5898:
  6320   002718  5048               	movf	(decision@hue+1)^0,w,c
  6321   00271A  E109               	bnz	u5220
  6322   00271C  0ED8               	movlw	216
  6323   00271E  5C47               	subwf	decision@hue^0,w,c
  6324   002720  A0D8               	btfss	status,0,c
  6325   002722  EF95  F013         	goto	u5221
  6326   002726  EF97  F013         	goto	u5220
  6327   00272A                     u5221:
  6328   00272A  EFB2  F013         	goto	l5906
  6329   00272E                     u5220:
  6330   00272E  5048               	movf	(decision@hue+1)^0,w,c
  6331   002730  E107               	bnz	u5231
  6332   002732  0EDE               	movlw	222
  6333   002734  5C47               	subwf	decision@hue^0,w,c
  6334   002736  B0D8               	btfsc	status,0,c
  6335   002738  EFA0  F013         	goto	u5231
  6336   00273C  EFA2  F013         	goto	u5230
  6337   002740                     u5231:
  6338   002740  EFB2  F013         	goto	l5906
  6339   002744                     u5230:
  6340   002744                     
  6341                           ;color.c: 294:         moveLightBlue(&motorL,&motorR, path_length);
  6342   002744  0ED4               	movlw	low _motorL
  6343   002746  6E1D               	movwf	moveLightBlue@mL^0,c
  6344   002748  0ECB               	movlw	low _motorR
  6345   00274A  6E1E               	movwf	moveLightBlue@mR^0,c
  6346   00274C  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6347   002750  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6348   002754  EC13  F01F         	call	_moveLightBlue	;wreg free
  6349   002758                     
  6350                           ;color.c: 295:         color = 4;
  6351   002758  0E00               	movlw	0
  6352   00275A  6E4C               	movwf	(decision@color+1)^0,c
  6353   00275C  0E04               	movlw	4
  6354   00275E  6E4B               	movwf	decision@color^0,c
  6355                           
  6356                           ;color.c: 296:     } else if (hue>=302 && hue<=346){
  6357   002760  EF24  F014         	goto	l5930
  6358   002764                     l5906:
  6359   002764  0E2E               	movlw	46
  6360   002766  5C47               	subwf	decision@hue^0,w,c
  6361   002768  0E01               	movlw	1
  6362   00276A  5848               	subwfb	(decision@hue+1)^0,w,c
  6363   00276C  A0D8               	btfss	status,0,c
  6364   00276E  EFBB  F013         	goto	u5241
  6365   002772  EFBD  F013         	goto	u5240
  6366   002776                     u5241:
  6367   002776  EFD8  F013         	goto	l5914
  6368   00277A                     u5240:
  6369   00277A  0E5B               	movlw	91
  6370   00277C  5C47               	subwf	decision@hue^0,w,c
  6371   00277E  0E01               	movlw	1
  6372   002780  5848               	subwfb	(decision@hue+1)^0,w,c
  6373   002782  B0D8               	btfsc	status,0,c
  6374   002784  EFC6  F013         	goto	u5251
  6375   002788  EFC8  F013         	goto	u5250
  6376   00278C                     u5251:
  6377   00278C  EFD8  F013         	goto	l5914
  6378   002790                     u5250:
  6379   002790                     
  6380                           ;color.c: 297:         moveYellow(&motorL,&motorR, path_length);
  6381   002790  0ED4               	movlw	low _motorL
  6382   002792  6E1D               	movwf	moveYellow@mL^0,c
  6383   002794  0ECB               	movlw	low _motorR
  6384   002796  6E1E               	movwf	moveYellow@mR^0,c
  6385   002798  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6386   00279C  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6387   0027A0  EC63  F01E         	call	_moveYellow	;wreg free
  6388   0027A4                     
  6389                           ;color.c: 298:         color = 5;
  6390   0027A4  0E00               	movlw	0
  6391   0027A6  6E4C               	movwf	(decision@color+1)^0,c
  6392   0027A8  0E05               	movlw	5
  6393   0027AA  6E4B               	movwf	decision@color^0,c
  6394                           
  6395                           ;color.c: 299:     } else if (hue>14 && hue<=35){
  6396   0027AC  EF24  F014         	goto	l5930
  6397   0027B0                     l5914:
  6398   0027B0  5048               	movf	(decision@hue+1)^0,w,c
  6399   0027B2  E109               	bnz	u5260
  6400   0027B4  0E0F               	movlw	15
  6401   0027B6  5C47               	subwf	decision@hue^0,w,c
  6402   0027B8  A0D8               	btfss	status,0,c
  6403   0027BA  EFE1  F013         	goto	u5261
  6404   0027BE  EFE3  F013         	goto	u5260
  6405   0027C2                     u5261:
  6406   0027C2  EFFE  F013         	goto	l5922
  6407   0027C6                     u5260:
  6408   0027C6  5048               	movf	(decision@hue+1)^0,w,c
  6409   0027C8  E107               	bnz	u5271
  6410   0027CA  0E24               	movlw	36
  6411   0027CC  5C47               	subwf	decision@hue^0,w,c
  6412   0027CE  B0D8               	btfsc	status,0,c
  6413   0027D0  EFEC  F013         	goto	u5271
  6414   0027D4  EFEE  F013         	goto	u5270
  6415   0027D8                     u5271:
  6416   0027D8  EFFE  F013         	goto	l5922
  6417   0027DC                     u5270:
  6418   0027DC                     
  6419                           ;color.c: 300:         moveOrange(&motorL,&motorR, path_length);
  6420   0027DC  0ED4               	movlw	low _motorL
  6421   0027DE  6E1D               	movwf	moveOrange@mL^0,c
  6422   0027E0  0ECB               	movlw	low _motorR
  6423   0027E2  6E1E               	movwf	moveOrange@mR^0,c
  6424   0027E4  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6425   0027E8  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6426   0027EC  ECE7  F01E         	call	_moveOrange	;wreg free
  6427   0027F0                     
  6428                           ;color.c: 301:         color= 6;
  6429   0027F0  0E00               	movlw	0
  6430   0027F2  6E4C               	movwf	(decision@color+1)^0,c
  6431   0027F4  0E06               	movlw	6
  6432   0027F6  6E4B               	movwf	decision@color^0,c
  6433                           
  6434                           ;color.c: 302:     } else if (hue>=244 && hue<=251){
  6435   0027F8  EF24  F014         	goto	l5930
  6436   0027FC                     l5922:
  6437   0027FC  5048               	movf	(decision@hue+1)^0,w,c
  6438   0027FE  E109               	bnz	u5280
  6439   002800  0EF4               	movlw	244
  6440   002802  5C47               	subwf	decision@hue^0,w,c
  6441   002804  A0D8               	btfss	status,0,c
  6442   002806  EF07  F014         	goto	u5281
  6443   00280A  EF09  F014         	goto	u5280
  6444   00280E                     u5281:
  6445   00280E  EF24  F014         	goto	l158
  6446   002812                     u5280:
  6447   002812  5048               	movf	(decision@hue+1)^0,w,c
  6448   002814  E107               	bnz	u5291
  6449   002816  0EFC               	movlw	252
  6450   002818  5C47               	subwf	decision@hue^0,w,c
  6451   00281A  B0D8               	btfsc	status,0,c
  6452   00281C  EF12  F014         	goto	u5291
  6453   002820  EF14  F014         	goto	u5290
  6454   002824                     u5291:
  6455   002824  EF24  F014         	goto	l158
  6456   002828                     u5290:
  6457   002828                     
  6458                           ;color.c: 303:         movePink(&motorL,&motorR, path_length);
  6459   002828  0ED4               	movlw	low _motorL
  6460   00282A  6E1D               	movwf	movePink@mL^0,c
  6461   00282C  0ECB               	movlw	low _motorR
  6462   00282E  6E1E               	movwf	movePink@mR^0,c
  6463   002830  C049  F01F         	movff	decision@path_length,movePink@path_length
  6464   002834  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6465   002838  ECBB  F01E         	call	_movePink	;wreg free
  6466   00283C                     
  6467                           ;color.c: 304:         color = 7;
  6468   00283C  0E00               	movlw	0
  6469   00283E  6E4C               	movwf	(decision@color+1)^0,c
  6470   002840  0E07               	movlw	7
  6471   002842  6E4B               	movwf	decision@color^0,c
  6472   002844  EF24  F014         	goto	l5930
  6473   002848                     l158:
  6474   002848                     l5930:
  6475                           
  6476                           ;color.c: 307:     send2USART(color);
  6477   002848  C04B  F045         	movff	decision@color,send2USART@hue
  6478   00284C  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6479   002850  ECCA  F022         	call	_send2USART	;wreg free
  6480   002854  0012               	return		;funcret
  6481   002856                     __end_of_decision:
  6482                           	callstack 0
  6483                           
  6484 ;; *************** function _send2USART *****************
  6485 ;; Defined at:
  6486 ;;		line 146 in file "serial.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  hue             2   68[COMRAM] unsigned int 
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6500 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6501 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6503 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6504 ;;Total ram usage:       52 bytes
  6505 ;; Hardware stack levels used: 1
  6506 ;; Hardware stack levels required when called: 9
  6507 ;; This function calls:
  6508 ;;		_sendStringSerial4
  6509 ;;		_sprintf
  6510 ;; This function is called by:
  6511 ;;		_decision
  6512 ;;		_main
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text21
  6517   004594                     __ptext21:
  6518                           	callstack 0
  6519   004594                     _send2USART:
  6520                           	callstack 21
  6521   004594                     
  6522                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6523   004594  0E60               	movlw	low send2USART@hue_char
  6524   004596  6E32               	movwf	sprintf@s^0,c
  6525   004598  0E9A               	movlw	low STR_12
  6526   00459A  6E33               	movwf	sprintf@fmt^0,c
  6527   00459C  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6528   0045A0  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6529   0045A4  EC38  F021         	call	_sprintf	;wreg free
  6530   0045A8                     
  6531                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6532   0045A8  0E60               	movlw	low send2USART@hue_char
  6533   0045AA  6E03               	movwf	sendStringSerial4@string^0,c
  6534   0045AC  ECE9  F021         	call	_sendStringSerial4	;wreg free
  6535   0045B0  0012               	return		;funcret
  6536   0045B2                     __end_of_send2USART:
  6537                           	callstack 0
  6538                           
  6539 ;; *************** function _moveYellow *****************
  6540 ;; Defined at:
  6541 ;;		line 285 in file "dc_motor.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6544 ;;		 -> motorL(9), 
  6545 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6546 ;;		 -> motorR(9), 
  6547 ;;  path_length     2   30[COMRAM] unsigned int 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6563 ;;Total ram usage:        6 bytes
  6564 ;; Hardware stack levels used: 1
  6565 ;; Hardware stack levels required when called: 5
  6566 ;; This function calls:
  6567 ;;		_backOneAndHalf
  6568 ;;		_logAction
  6569 ;;		_right90
  6570 ;; This function is called by:
  6571 ;;		_decision
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text22
  6576   003CC6                     __ptext22:
  6577                           	callstack 0
  6578   003CC6                     _moveYellow:
  6579                           	callstack 24
  6580   003CC6                     
  6581                           ;dc_motor.c: 285: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 286: {;dc_motor.c: 288:     backOneAndHalf(mL,mR);
  6582   003CC6  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6583   003CCA  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6584   003CCE  EC85  F021         	call	_backOneAndHalf	;wreg free
  6585   003CD2                     
  6586                           ;dc_motor.c: 289:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6587   003CD2  0E29               	movlw	41
  6588   003CD4  6E22               	movwf	(??_moveYellow+1)^0,c
  6589   003CD6  0E96               	movlw	150
  6590   003CD8  6E21               	movwf	??_moveYellow^0,c
  6591   003CDA  0E7F               	movlw	127
  6592   003CDC                     u5497:
  6593   003CDC  2EE8               	decfsz	wreg,f,c
  6594   003CDE  D7FE               	bra	u5497
  6595   003CE0  2E21               	decfsz	??_moveYellow^0,f,c
  6596   003CE2  D7FC               	bra	u5497
  6597   003CE4  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6598   003CE6  D7FA               	bra	u5497
  6599   003CE8  0000               	nop	
  6600   003CEA                     
  6601                           ;dc_motor.c: 290:     right90(mL,mR);
  6602   003CEA  C01D  F019         	movff	moveYellow@mL,right90@mL
  6603   003CEE  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6604   003CF2  EC02  F022         	call	_right90	;wreg free
  6605   003CF6                     
  6606                           ;dc_motor.c: 291:     path_length = logAction('R',0, path_length, &path);
  6607   003CF6  0E00               	movlw	0
  6608   003CF8  6E09               	movwf	(logAction@time+1)^0,c
  6609   003CFA  0E00               	movlw	0
  6610   003CFC  6E08               	movwf	logAction@time^0,c
  6611   003CFE  C01F  F00A         	movff	moveYellow@path_length,logAction@path_length
  6612   003D02  C020  F00B         	movff	moveYellow@path_length+1,logAction@path_length+1
  6613   003D06  0E28               	movlw	low _path
  6614   003D08  6E0C               	movwf	logAction@path^0,c
  6615   003D0A  0E01               	movlw	high _path
  6616   003D0C  6E0D               	movwf	(logAction@path+1)^0,c
  6617   003D0E  0E52               	movlw	82
  6618   003D10  ECEE  F01C         	call	_logAction
  6619   003D14  C008  F01F         	movff	?_logAction,moveYellow@path_length
  6620   003D18  C009  F020         	movff	?_logAction+1,moveYellow@path_length+1
  6621   003D1C  0012               	return		;funcret
  6622   003D1E                     __end_of_moveYellow:
  6623                           	callstack 0
  6624                           
  6625 ;; *************** function _moveRed *****************
  6626 ;; Defined at:
  6627 ;;		line 258 in file "dc_motor.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6630 ;;		 -> motorL(9), 
  6631 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6632 ;;		 -> motorR(9), 
  6633 ;;  path_length     2   30[COMRAM] unsigned int 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;		None
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      void 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6645 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6648 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6649 ;;Total ram usage:        6 bytes
  6650 ;; Hardware stack levels used: 1
  6651 ;; Hardware stack levels required when called: 5
  6652 ;; This function calls:
  6653 ;;		_backHalf
  6654 ;;		_logAction
  6655 ;;		_right90
  6656 ;; This function is called by:
  6657 ;;		_decision
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text23
  6662   003D1E                     __ptext23:
  6663                           	callstack 0
  6664   003D1E                     _moveRed:
  6665                           	callstack 24
  6666   003D1E                     
  6667                           ;dc_motor.c: 258: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 259: {;dc_motor.c: 261:     backHalf(mL,mR);
  6668   003D1E  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6669   003D22  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6670   003D26  EC32  F022         	call	_backHalf	;wreg free
  6671   003D2A                     
  6672                           ;dc_motor.c: 262:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6673   003D2A  0E29               	movlw	41
  6674   003D2C  6E22               	movwf	(??_moveRed+1)^0,c
  6675   003D2E  0E96               	movlw	150
  6676   003D30  6E21               	movwf	??_moveRed^0,c
  6677   003D32  0E7F               	movlw	127
  6678   003D34                     u5507:
  6679   003D34  2EE8               	decfsz	wreg,f,c
  6680   003D36  D7FE               	bra	u5507
  6681   003D38  2E21               	decfsz	??_moveRed^0,f,c
  6682   003D3A  D7FC               	bra	u5507
  6683   003D3C  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6684   003D3E  D7FA               	bra	u5507
  6685   003D40  0000               	nop	
  6686   003D42                     
  6687                           ;dc_motor.c: 263:     right90(mL,mR);
  6688   003D42  C01D  F019         	movff	moveRed@mL,right90@mL
  6689   003D46  C01E  F01A         	movff	moveRed@mR,right90@mR
  6690   003D4A  EC02  F022         	call	_right90	;wreg free
  6691   003D4E                     
  6692                           ;dc_motor.c: 264:     path_length = logAction('R',0, path_length, &path);
  6693   003D4E  0E00               	movlw	0
  6694   003D50  6E09               	movwf	(logAction@time+1)^0,c
  6695   003D52  0E00               	movlw	0
  6696   003D54  6E08               	movwf	logAction@time^0,c
  6697   003D56  C01F  F00A         	movff	moveRed@path_length,logAction@path_length
  6698   003D5A  C020  F00B         	movff	moveRed@path_length+1,logAction@path_length+1
  6699   003D5E  0E28               	movlw	low _path
  6700   003D60  6E0C               	movwf	logAction@path^0,c
  6701   003D62  0E01               	movlw	high _path
  6702   003D64  6E0D               	movwf	(logAction@path+1)^0,c
  6703   003D66  0E52               	movlw	82
  6704   003D68  ECEE  F01C         	call	_logAction
  6705   003D6C  C008  F01F         	movff	?_logAction,moveRed@path_length
  6706   003D70  C009  F020         	movff	?_logAction+1,moveRed@path_length+1
  6707   003D74  0012               	return		;funcret
  6708   003D76                     __end_of_moveRed:
  6709                           	callstack 0
  6710                           
  6711 ;; *************** function _right90 *****************
  6712 ;; Defined at:
  6713 ;;		line 196 in file "dc_motor.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6716 ;;		 -> motorL(9), 
  6717 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6718 ;;		 -> motorR(9), 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6732 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6733 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6734 ;;Total ram usage:        4 bytes
  6735 ;; Hardware stack levels used: 1
  6736 ;; Hardware stack levels required when called: 4
  6737 ;; This function calls:
  6738 ;;		_stop
  6739 ;;		_turnRight
  6740 ;; This function is called by:
  6741 ;;		_moveRed
  6742 ;;		_moveYellow
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text24
  6747   004404                     __ptext24:
  6748                           	callstack 0
  6749   004404                     _right90:
  6750                           	callstack 24
  6751   004404                     
  6752                           ;dc_motor.c: 196: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 197
      +                          : {;dc_motor.c: 198:     turnRight(mL,mR);
  6753   004404  C019  F014         	movff	right90@mL,turnRight@mL
  6754   004408  C01A  F015         	movff	right90@mR,turnRight@mR
  6755   00440C  EC33  F01D         	call	_turnRight	;wreg free
  6756   004410                     
  6757                           ;dc_motor.c: 199:     _delay((unsigned long)((290)*(64000000/4000.0)));
  6758   004410  0E18               	movlw	24
  6759   004412  6E1C               	movwf	(??_right90+1)^0,c
  6760   004414  0E8A               	movlw	138
  6761   004416  6E1B               	movwf	??_right90^0,c
  6762   004418  0EE8               	movlw	232
  6763   00441A                     u5517:
  6764   00441A  2EE8               	decfsz	wreg,f,c
  6765   00441C  D7FE               	bra	u5517
  6766   00441E  2E1B               	decfsz	??_right90^0,f,c
  6767   004420  D7FC               	bra	u5517
  6768   004422  2E1C               	decfsz	(??_right90+1)^0,f,c
  6769   004424  D7FA               	bra	u5517
  6770   004426                     
  6771                           ;dc_motor.c: 200:     stop(mL,mR);
  6772   004426  C019  F014         	movff	right90@mL,stop@mL
  6773   00442A  C01A  F015         	movff	right90@mR,stop@mR
  6774   00442E  ECA7  F01C         	call	_stop	;wreg free
  6775   004432  0012               	return		;funcret
  6776   004434                     __end_of_right90:
  6777                           	callstack 0
  6778                           
  6779 ;; *************** function _movePink *****************
  6780 ;; Defined at:
  6781 ;;		line 294 in file "dc_motor.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6784 ;;		 -> motorL(9), 
  6785 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6786 ;;		 -> motorR(9), 
  6787 ;;  path_length     2   30[COMRAM] unsigned int 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6799 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;Total ram usage:        6 bytes
  6804 ;; Hardware stack levels used: 1
  6805 ;; Hardware stack levels required when called: 5
  6806 ;; This function calls:
  6807 ;;		_backOneAndHalf
  6808 ;;		_left90
  6809 ;;		_logAction
  6810 ;; This function is called by:
  6811 ;;		_decision
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text25
  6816   003D76                     __ptext25:
  6817                           	callstack 0
  6818   003D76                     _movePink:
  6819                           	callstack 24
  6820   003D76                     
  6821                           ;dc_motor.c: 294: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 295: {;dc_motor.c: 297:     backOneAndHalf(mL,mR);
  6822   003D76  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6823   003D7A  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6824   003D7E  EC85  F021         	call	_backOneAndHalf	;wreg free
  6825   003D82                     
  6826                           ;dc_motor.c: 298:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6827   003D82  0E29               	movlw	41
  6828   003D84  6E22               	movwf	(??_movePink+1)^0,c
  6829   003D86  0E96               	movlw	150
  6830   003D88  6E21               	movwf	??_movePink^0,c
  6831   003D8A  0E7F               	movlw	127
  6832   003D8C                     u5527:
  6833   003D8C  2EE8               	decfsz	wreg,f,c
  6834   003D8E  D7FE               	bra	u5527
  6835   003D90  2E21               	decfsz	??_movePink^0,f,c
  6836   003D92  D7FC               	bra	u5527
  6837   003D94  2E22               	decfsz	(??_movePink+1)^0,f,c
  6838   003D96  D7FA               	bra	u5527
  6839   003D98  0000               	nop	
  6840   003D9A                     
  6841                           ;dc_motor.c: 299:     left90(mL,mR);
  6842   003D9A  C01D  F019         	movff	movePink@mL,left90@mL
  6843   003D9E  C01E  F01A         	movff	movePink@mR,left90@mR
  6844   003DA2  EC1A  F022         	call	_left90	;wreg free
  6845   003DA6                     
  6846                           ;dc_motor.c: 300:     path_length = logAction('L',0, path_length, &path);
  6847   003DA6  0E00               	movlw	0
  6848   003DA8  6E09               	movwf	(logAction@time+1)^0,c
  6849   003DAA  0E00               	movlw	0
  6850   003DAC  6E08               	movwf	logAction@time^0,c
  6851   003DAE  C01F  F00A         	movff	movePink@path_length,logAction@path_length
  6852   003DB2  C020  F00B         	movff	movePink@path_length+1,logAction@path_length+1
  6853   003DB6  0E28               	movlw	low _path
  6854   003DB8  6E0C               	movwf	logAction@path^0,c
  6855   003DBA  0E01               	movlw	high _path
  6856   003DBC  6E0D               	movwf	(logAction@path+1)^0,c
  6857   003DBE  0E4C               	movlw	76
  6858   003DC0  ECEE  F01C         	call	_logAction
  6859   003DC4  C008  F01F         	movff	?_logAction,movePink@path_length
  6860   003DC8  C009  F020         	movff	?_logAction+1,movePink@path_length+1
  6861   003DCC  0012               	return		;funcret
  6862   003DCE                     __end_of_movePink:
  6863                           	callstack 0
  6864                           
  6865 ;; *************** function _backOneAndHalf *****************
  6866 ;; Defined at:
  6867 ;;		line 244 in file "dc_motor.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6870 ;;		 -> motorL(9), 
  6871 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6872 ;;		 -> motorR(9), 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6887 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6888 ;;Total ram usage:        4 bytes
  6889 ;; Hardware stack levels used: 1
  6890 ;; Hardware stack levels required when called: 4
  6891 ;; This function calls:
  6892 ;;		_fullSpeedBack
  6893 ;;		_stop
  6894 ;; This function is called by:
  6895 ;;		_moveYellow
  6896 ;;		_movePink
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text26
  6901   00430A                     __ptext26:
  6902                           	callstack 0
  6903   00430A                     _backOneAndHalf:
  6904                           	callstack 24
  6905   00430A                     
  6906                           ;dc_motor.c: 244: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 245: {;dc_motor.c: 246:     fullSpeedBack(mL,mR);
  6907   00430A  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6908   00430E  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6909   004312  ECEE  F01D         	call	_fullSpeedBack	;wreg free
  6910   004316                     
  6911                           ;dc_motor.c: 247:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6912   004316  0E6A               	movlw	106
  6913   004318  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6914   00431A  0E85               	movlw	133
  6915   00431C  6E1B               	movwf	??_backOneAndHalf^0,c
  6916   00431E  0EB4               	movlw	180
  6917   004320                     u5537:
  6918   004320  2EE8               	decfsz	wreg,f,c
  6919   004322  D7FE               	bra	u5537
  6920   004324  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6921   004326  D7FC               	bra	u5537
  6922   004328  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6923   00432A  D7FA               	bra	u5537
  6924   00432C  D000               	nop2	
  6925   00432E                     
  6926                           ;dc_motor.c: 248:     stop(mL,mR);
  6927   00432E  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6928   004332  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6929   004336  ECA7  F01C         	call	_stop	;wreg free
  6930   00433A  0012               	return		;funcret
  6931   00433C                     __end_of_backOneAndHalf:
  6932                           	callstack 0
  6933                           
  6934 ;; *************** function _moveOrange *****************
  6935 ;; Defined at:
  6936 ;;		line 303 in file "dc_motor.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6939 ;;		 -> motorL(9), 
  6940 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6941 ;;		 -> motorR(9), 
  6942 ;;  path_length     2   30[COMRAM] unsigned int 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6954 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6958 ;;Total ram usage:        6 bytes
  6959 ;; Hardware stack levels used: 1
  6960 ;; Hardware stack levels required when called: 5
  6961 ;; This function calls:
  6962 ;;		_backHalf
  6963 ;;		_logAction
  6964 ;;		_right135
  6965 ;; This function is called by:
  6966 ;;		_decision
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text27
  6971   003DCE                     __ptext27:
  6972                           	callstack 0
  6973   003DCE                     _moveOrange:
  6974                           	callstack 24
  6975   003DCE                     
  6976                           ;dc_motor.c: 303: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 304: {;dc_motor.c: 306:     backHalf(mL,mR);
  6977   003DCE  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6978   003DD2  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6979   003DD6  EC32  F022         	call	_backHalf	;wreg free
  6980   003DDA                     
  6981                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6982   003DDA  0E29               	movlw	41
  6983   003DDC  6E22               	movwf	(??_moveOrange+1)^0,c
  6984   003DDE  0E96               	movlw	150
  6985   003DE0  6E21               	movwf	??_moveOrange^0,c
  6986   003DE2  0E7F               	movlw	127
  6987   003DE4                     u5547:
  6988   003DE4  2EE8               	decfsz	wreg,f,c
  6989   003DE6  D7FE               	bra	u5547
  6990   003DE8  2E21               	decfsz	??_moveOrange^0,f,c
  6991   003DEA  D7FC               	bra	u5547
  6992   003DEC  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6993   003DEE  D7FA               	bra	u5547
  6994   003DF0  0000               	nop	
  6995   003DF2                     
  6996                           ;dc_motor.c: 308:     right135(mL,mR);
  6997   003DF2  C01D  F019         	movff	moveOrange@mL,right135@mL
  6998   003DF6  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6999   003DFA  EC9E  F021         	call	_right135	;wreg free
  7000   003DFE                     
  7001                           ;dc_motor.c: 309:     path_length = logAction('135R',0, path_length, &path);
  7002   003DFE  0E00               	movlw	0
  7003   003E00  6E09               	movwf	(logAction@time+1)^0,c
  7004   003E02  0E00               	movlw	0
  7005   003E04  6E08               	movwf	logAction@time^0,c
  7006   003E06  C01F  F00A         	movff	moveOrange@path_length,logAction@path_length
  7007   003E0A  C020  F00B         	movff	moveOrange@path_length+1,logAction@path_length+1
  7008   003E0E  0E28               	movlw	low _path
  7009   003E10  6E0C               	movwf	logAction@path^0,c
  7010   003E12  0E01               	movlw	high _path
  7011   003E14  6E0D               	movwf	(logAction@path+1)^0,c
  7012   003E16  0E52               	movlw	82
  7013   003E18  ECEE  F01C         	call	_logAction
  7014   003E1C  C008  F01F         	movff	?_logAction,moveOrange@path_length
  7015   003E20  C009  F020         	movff	?_logAction+1,moveOrange@path_length+1
  7016   003E24  0012               	return		;funcret
  7017   003E26                     __end_of_moveOrange:
  7018                           	callstack 0
  7019                           
  7020 ;; *************** function _right135 *****************
  7021 ;; Defined at:
  7022 ;;		line 220 in file "dc_motor.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7025 ;;		 -> motorL(9), 
  7026 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7027 ;;		 -> motorR(9), 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7039 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7041 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7042 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7043 ;;Total ram usage:        4 bytes
  7044 ;; Hardware stack levels used: 1
  7045 ;; Hardware stack levels required when called: 4
  7046 ;; This function calls:
  7047 ;;		_stop
  7048 ;;		_turnRight
  7049 ;; This function is called by:
  7050 ;;		_moveOrange
  7051 ;;		_reverseTurn
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text28
  7056   00433C                     __ptext28:
  7057                           	callstack 0
  7058   00433C                     _right135:
  7059                           	callstack 24
  7060   00433C                     
  7061                           ;dc_motor.c: 220: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 22
      +                          1: {;dc_motor.c: 222:     turnRight(mL,mR);
  7062   00433C  C019  F014         	movff	right135@mL,turnRight@mL
  7063   004340  C01A  F015         	movff	right135@mR,turnRight@mR
  7064   004344  EC33  F01D         	call	_turnRight	;wreg free
  7065   004348                     
  7066                           ;dc_motor.c: 223:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7067   004348  0E21               	movlw	33
  7068   00434A  6E1C               	movwf	(??_right135+1)^0,c
  7069   00434C  0E78               	movlw	120
  7070   00434E  6E1B               	movwf	??_right135^0,c
  7071   004350  0E98               	movlw	152
  7072   004352                     u5557:
  7073   004352  2EE8               	decfsz	wreg,f,c
  7074   004354  D7FE               	bra	u5557
  7075   004356  2E1B               	decfsz	??_right135^0,f,c
  7076   004358  D7FC               	bra	u5557
  7077   00435A  2E1C               	decfsz	(??_right135+1)^0,f,c
  7078   00435C  D7FA               	bra	u5557
  7079   00435E  D000               	nop2	
  7080   004360                     
  7081                           ;dc_motor.c: 224:     stop(mL,mR);
  7082   004360  C019  F014         	movff	right135@mL,stop@mL
  7083   004364  C01A  F015         	movff	right135@mR,stop@mR
  7084   004368  ECA7  F01C         	call	_stop	;wreg free
  7085   00436C  0012               	return		;funcret
  7086   00436E                     __end_of_right135:
  7087                           	callstack 0
  7088                           
  7089 ;; *************** function _turnRight *****************
  7090 ;; Defined at:
  7091 ;;		line 128 in file "dc_motor.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7094 ;;		 -> motorL(9), 
  7095 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7096 ;;		 -> motorR(9), 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  i               2   22[COMRAM] unsigned int 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7111 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7112 ;;Total ram usage:        5 bytes
  7113 ;; Hardware stack levels used: 1
  7114 ;; Hardware stack levels required when called: 3
  7115 ;; This function calls:
  7116 ;;		_setMotorPWM
  7117 ;; This function is called by:
  7118 ;;		_right90
  7119 ;;		_right135
  7120 ;;		_reverseTurn
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text29
  7125   003A66                     __ptext29:
  7126                           	callstack 0
  7127   003A66                     _turnRight:
  7128                           	callstack 25
  7129   003A66                     
  7130                           ;dc_motor.c: 128: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 129: {;dc_motor
      +                          .c: 131:     mL->direction = 1;
  7131   003A66  5014               	movf	turnRight@mL^0,w,c
  7132   003A68  6ED9               	movwf	fsr2l,c
  7133   003A6A  6ADA               	clrf	fsr2h,c
  7134   003A6C  0E01               	movlw	1
  7135   003A6E  26D9               	addwf	fsr2l,f,c
  7136   003A70  0E01               	movlw	1
  7137   003A72  6EDF               	movwf	indf2,c
  7138                           
  7139                           ;dc_motor.c: 132:     mR->direction = 0;
  7140   003A74  5015               	movf	turnRight@mR^0,w,c
  7141   003A76  6ED9               	movwf	fsr2l,c
  7142   003A78  6ADA               	clrf	fsr2h,c
  7143   003A7A  0E01               	movlw	1
  7144   003A7C  26D9               	addwf	fsr2l,f,c
  7145   003A7E  6ADF               	clrf	indf2,c
  7146   003A80                     
  7147                           ;dc_motor.c: 134:     setMotorPWM(mL);
  7148   003A80  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7149   003A84  EC6E  F017         	call	_setMotorPWM	;wreg free
  7150   003A88                     
  7151                           ;dc_motor.c: 135:     setMotorPWM(mR);
  7152   003A88  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7153   003A8C  EC6E  F017         	call	_setMotorPWM	;wreg free
  7154   003A90                     
  7155                           ;dc_motor.c: 136:     for (unsigned int i = 0; i <50; i++)
  7156   003A90  0E00               	movlw	0
  7157   003A92  6E18               	movwf	(turnRight@i+1)^0,c
  7158   003A94  0E00               	movlw	0
  7159   003A96  6E17               	movwf	turnRight@i^0,c
  7160   003A98                     l5476:
  7161                           
  7162                           ;dc_motor.c: 137:     {;dc_motor.c: 138:         mL->power++;
  7163   003A98  5014               	movf	turnRight@mL^0,w,c
  7164   003A9A  6ED9               	movwf	fsr2l,c
  7165   003A9C  6ADA               	clrf	fsr2h,c
  7166   003A9E  2ADF               	incf	indf2,f,c
  7167                           
  7168                           ;dc_motor.c: 139:         mR->power++;
  7169   003AA0  5015               	movf	turnRight@mR^0,w,c
  7170   003AA2  6ED9               	movwf	fsr2l,c
  7171   003AA4  6ADA               	clrf	fsr2h,c
  7172   003AA6  2ADF               	incf	indf2,f,c
  7173   003AA8                     
  7174                           ;dc_motor.c: 140:         setMotorPWM(mL);
  7175   003AA8  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7176   003AAC  EC6E  F017         	call	_setMotorPWM	;wreg free
  7177   003AB0                     
  7178                           ;dc_motor.c: 141:         setMotorPWM(mR);
  7179   003AB0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7180   003AB4  EC6E  F017         	call	_setMotorPWM	;wreg free
  7181   003AB8                     
  7182                           ;dc_motor.c: 142:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7183   003AB8  0E0B               	movlw	11
  7184   003ABA  6E16               	movwf	??_turnRight^0,c
  7185   003ABC  0E62               	movlw	98
  7186   003ABE                     u5567:
  7187   003ABE  2EE8               	decfsz	wreg,f,c
  7188   003AC0  D7FE               	bra	u5567
  7189   003AC2  2E16               	decfsz	??_turnRight^0,f,c
  7190   003AC4  D7FC               	bra	u5567
  7191   003AC6  D000               	nop2	
  7192   003AC8                     
  7193                           ;dc_motor.c: 143:     }
  7194   003AC8  4A17               	infsnz	turnRight@i^0,f,c
  7195   003ACA  2A18               	incf	(turnRight@i+1)^0,f,c
  7196   003ACC  5018               	movf	(turnRight@i+1)^0,w,c
  7197   003ACE  E109               	bnz	u4940
  7198   003AD0  0E32               	movlw	50
  7199   003AD2  5C17               	subwf	turnRight@i^0,w,c
  7200   003AD4  A0D8               	btfss	status,0,c
  7201   003AD6  EF6F  F01D         	goto	u4941
  7202   003ADA  EF71  F01D         	goto	u4940
  7203   003ADE                     u4941:
  7204   003ADE  EF4C  F01D         	goto	l5476
  7205   003AE2                     u4940:
  7206   003AE2  0012               	return		;funcret
  7207   003AE4                     __end_of_turnRight:
  7208                           	callstack 0
  7209                           
  7210 ;; *************** function _moveLightBlue *****************
  7211 ;; Defined at:
  7212 ;;		line 312 in file "dc_motor.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7215 ;;		 -> motorL(9), 
  7216 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7217 ;;		 -> motorR(9), 
  7218 ;;  path_length     2   30[COMRAM] unsigned int 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7234 ;;Total ram usage:        6 bytes
  7235 ;; Hardware stack levels used: 1
  7236 ;; Hardware stack levels required when called: 5
  7237 ;; This function calls:
  7238 ;;		_backHalf
  7239 ;;		_left135
  7240 ;;		_logAction
  7241 ;; This function is called by:
  7242 ;;		_decision
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text30
  7247   003E26                     __ptext30:
  7248                           	callstack 0
  7249   003E26                     _moveLightBlue:
  7250                           	callstack 24
  7251   003E26                     
  7252                           ;dc_motor.c: 312: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 313: {;dc_motor.c: 315:     backHalf(mL,mR);
  7253   003E26  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7254   003E2A  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7255   003E2E  EC32  F022         	call	_backHalf	;wreg free
  7256   003E32                     
  7257                           ;dc_motor.c: 316:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7258   003E32  0E29               	movlw	41
  7259   003E34  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7260   003E36  0E96               	movlw	150
  7261   003E38  6E21               	movwf	??_moveLightBlue^0,c
  7262   003E3A  0E7F               	movlw	127
  7263   003E3C                     u5577:
  7264   003E3C  2EE8               	decfsz	wreg,f,c
  7265   003E3E  D7FE               	bra	u5577
  7266   003E40  2E21               	decfsz	??_moveLightBlue^0,f,c
  7267   003E42  D7FC               	bra	u5577
  7268   003E44  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7269   003E46  D7FA               	bra	u5577
  7270   003E48  0000               	nop	
  7271   003E4A                     
  7272                           ;dc_motor.c: 317:     left135(mL,mR);
  7273   003E4A  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7274   003E4E  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7275   003E52  ECB7  F021         	call	_left135	;wreg free
  7276   003E56                     
  7277                           ;dc_motor.c: 318:     path_length = logAction('135L',0, path_length, &path);
  7278   003E56  0E00               	movlw	0
  7279   003E58  6E09               	movwf	(logAction@time+1)^0,c
  7280   003E5A  0E00               	movlw	0
  7281   003E5C  6E08               	movwf	logAction@time^0,c
  7282   003E5E  C01F  F00A         	movff	moveLightBlue@path_length,logAction@path_length
  7283   003E62  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@path_length+1
  7284   003E66  0E28               	movlw	low _path
  7285   003E68  6E0C               	movwf	logAction@path^0,c
  7286   003E6A  0E01               	movlw	high _path
  7287   003E6C  6E0D               	movwf	(logAction@path+1)^0,c
  7288   003E6E  0E4C               	movlw	76
  7289   003E70  ECEE  F01C         	call	_logAction
  7290   003E74  C008  F01F         	movff	?_logAction,moveLightBlue@path_length
  7291   003E78  C009  F020         	movff	?_logAction+1,moveLightBlue@path_length+1
  7292   003E7C  0012               	return		;funcret
  7293   003E7E                     __end_of_moveLightBlue:
  7294                           	callstack 0
  7295                           
  7296 ;; *************** function _left135 *****************
  7297 ;; Defined at:
  7298 ;;		line 228 in file "dc_motor.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7301 ;;		 -> motorL(9), 
  7302 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7303 ;;		 -> motorR(9), 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;		None
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      void 
  7308 ;; Registers used:
  7309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7318 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;Total ram usage:        4 bytes
  7320 ;; Hardware stack levels used: 1
  7321 ;; Hardware stack levels required when called: 4
  7322 ;; This function calls:
  7323 ;;		_stop
  7324 ;;		_turnLeft
  7325 ;; This function is called by:
  7326 ;;		_moveLightBlue
  7327 ;;		_reverseTurn
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text31
  7332   00436E                     __ptext31:
  7333                           	callstack 0
  7334   00436E                     _left135:
  7335                           	callstack 24
  7336   00436E                     
  7337                           ;dc_motor.c: 228: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 229
      +                          : {;dc_motor.c: 230:     turnLeft(mL,mR);
  7338   00436E  C019  F014         	movff	left135@mL,turnLeft@mL
  7339   004372  C01A  F015         	movff	left135@mR,turnLeft@mR
  7340   004376  EC72  F01D         	call	_turnLeft	;wreg free
  7341   00437A                     
  7342                           ;dc_motor.c: 231:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7343   00437A  0E21               	movlw	33
  7344   00437C  6E1C               	movwf	(??_left135+1)^0,c
  7345   00437E  0E78               	movlw	120
  7346   004380  6E1B               	movwf	??_left135^0,c
  7347   004382  0E98               	movlw	152
  7348   004384                     u5587:
  7349   004384  2EE8               	decfsz	wreg,f,c
  7350   004386  D7FE               	bra	u5587
  7351   004388  2E1B               	decfsz	??_left135^0,f,c
  7352   00438A  D7FC               	bra	u5587
  7353   00438C  2E1C               	decfsz	(??_left135+1)^0,f,c
  7354   00438E  D7FA               	bra	u5587
  7355   004390  D000               	nop2	
  7356   004392                     
  7357                           ;dc_motor.c: 232:     stop(mL,mR);
  7358   004392  C019  F014         	movff	left135@mL,stop@mL
  7359   004396  C01A  F015         	movff	left135@mR,stop@mR
  7360   00439A  ECA7  F01C         	call	_stop	;wreg free
  7361   00439E  0012               	return		;funcret
  7362   0043A0                     __end_of_left135:
  7363                           	callstack 0
  7364                           
  7365 ;; *************** function _moveGreen *****************
  7366 ;; Defined at:
  7367 ;;		line 267 in file "dc_motor.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7370 ;;		 -> motorL(9), 
  7371 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7372 ;;		 -> motorR(9), 
  7373 ;;  path_length     2   30[COMRAM] unsigned int 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      void 
  7378 ;; Registers used:
  7379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;Total ram usage:        6 bytes
  7390 ;; Hardware stack levels used: 1
  7391 ;; Hardware stack levels required when called: 5
  7392 ;; This function calls:
  7393 ;;		_backHalf
  7394 ;;		_left90
  7395 ;;		_logAction
  7396 ;; This function is called by:
  7397 ;;		_decision
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	text32
  7402   003E7E                     __ptext32:
  7403                           	callstack 0
  7404   003E7E                     _moveGreen:
  7405                           	callstack 24
  7406   003E7E                     
  7407                           ;dc_motor.c: 267: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 268: {;dc_motor.c: 270:     backHalf(mL,mR);
  7408   003E7E  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7409   003E82  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7410   003E86  EC32  F022         	call	_backHalf	;wreg free
  7411   003E8A                     
  7412                           ;dc_motor.c: 271:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7413   003E8A  0E29               	movlw	41
  7414   003E8C  6E22               	movwf	(??_moveGreen+1)^0,c
  7415   003E8E  0E96               	movlw	150
  7416   003E90  6E21               	movwf	??_moveGreen^0,c
  7417   003E92  0E7F               	movlw	127
  7418   003E94                     u5597:
  7419   003E94  2EE8               	decfsz	wreg,f,c
  7420   003E96  D7FE               	bra	u5597
  7421   003E98  2E21               	decfsz	??_moveGreen^0,f,c
  7422   003E9A  D7FC               	bra	u5597
  7423   003E9C  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7424   003E9E  D7FA               	bra	u5597
  7425   003EA0  0000               	nop	
  7426   003EA2                     
  7427                           ;dc_motor.c: 272:     left90(mL,mR);
  7428   003EA2  C01D  F019         	movff	moveGreen@mL,left90@mL
  7429   003EA6  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7430   003EAA  EC1A  F022         	call	_left90	;wreg free
  7431   003EAE                     
  7432                           ;dc_motor.c: 273:     path_length = logAction('L',0, path_length, &path);
  7433   003EAE  0E00               	movlw	0
  7434   003EB0  6E09               	movwf	(logAction@time+1)^0,c
  7435   003EB2  0E00               	movlw	0
  7436   003EB4  6E08               	movwf	logAction@time^0,c
  7437   003EB6  C01F  F00A         	movff	moveGreen@path_length,logAction@path_length
  7438   003EBA  C020  F00B         	movff	moveGreen@path_length+1,logAction@path_length+1
  7439   003EBE  0E28               	movlw	low _path
  7440   003EC0  6E0C               	movwf	logAction@path^0,c
  7441   003EC2  0E01               	movlw	high _path
  7442   003EC4  6E0D               	movwf	(logAction@path+1)^0,c
  7443   003EC6  0E4C               	movlw	76
  7444   003EC8  ECEE  F01C         	call	_logAction
  7445   003ECC  C008  F01F         	movff	?_logAction,moveGreen@path_length
  7446   003ED0  C009  F020         	movff	?_logAction+1,moveGreen@path_length+1
  7447   003ED4  0012               	return		;funcret
  7448   003ED6                     __end_of_moveGreen:
  7449                           	callstack 0
  7450                           
  7451 ;; *************** function _left90 *****************
  7452 ;; Defined at:
  7453 ;;		line 204 in file "dc_motor.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7456 ;;		 -> motorL(9), 
  7457 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7458 ;;		 -> motorR(9), 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;		None
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      void 
  7463 ;; Registers used:
  7464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7474 ;;Total ram usage:        4 bytes
  7475 ;; Hardware stack levels used: 1
  7476 ;; Hardware stack levels required when called: 4
  7477 ;; This function calls:
  7478 ;;		_stop
  7479 ;;		_turnLeft
  7480 ;; This function is called by:
  7481 ;;		_moveGreen
  7482 ;;		_movePink
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text33
  7487   004434                     __ptext33:
  7488                           	callstack 0
  7489   004434                     _left90:
  7490                           	callstack 24
  7491   004434                     
  7492                           ;dc_motor.c: 204: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 205:
      +                           {;dc_motor.c: 206:     turnLeft(mL,mR);
  7493   004434  C019  F014         	movff	left90@mL,turnLeft@mL
  7494   004438  C01A  F015         	movff	left90@mR,turnLeft@mR
  7495   00443C  EC72  F01D         	call	_turnLeft	;wreg free
  7496   004440                     
  7497                           ;dc_motor.c: 207:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7498   004440  0E18               	movlw	24
  7499   004442  6E1C               	movwf	(??_left90+1)^0,c
  7500   004444  0E8A               	movlw	138
  7501   004446  6E1B               	movwf	??_left90^0,c
  7502   004448  0EE8               	movlw	232
  7503   00444A                     u5607:
  7504   00444A  2EE8               	decfsz	wreg,f,c
  7505   00444C  D7FE               	bra	u5607
  7506   00444E  2E1B               	decfsz	??_left90^0,f,c
  7507   004450  D7FC               	bra	u5607
  7508   004452  2E1C               	decfsz	(??_left90+1)^0,f,c
  7509   004454  D7FA               	bra	u5607
  7510   004456                     
  7511                           ;dc_motor.c: 208:     stop(mL,mR);
  7512   004456  C019  F014         	movff	left90@mL,stop@mL
  7513   00445A  C01A  F015         	movff	left90@mR,stop@mR
  7514   00445E  ECA7  F01C         	call	_stop	;wreg free
  7515   004462  0012               	return		;funcret
  7516   004464                     __end_of_left90:
  7517                           	callstack 0
  7518                           
  7519 ;; *************** function _moveBlue *****************
  7520 ;; Defined at:
  7521 ;;		line 276 in file "dc_motor.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7524 ;;		 -> motorL(9), 
  7525 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7526 ;;		 -> motorR(9), 
  7527 ;;  path_length     2   30[COMRAM] unsigned int 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;		None
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7539 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7541 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7542 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7543 ;;Total ram usage:        6 bytes
  7544 ;; Hardware stack levels used: 1
  7545 ;; Hardware stack levels required when called: 5
  7546 ;; This function calls:
  7547 ;;		_backHalf
  7548 ;;		_logAction
  7549 ;;		_turn180
  7550 ;; This function is called by:
  7551 ;;		_decision
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text34
  7556   003ED6                     __ptext34:
  7557                           	callstack 0
  7558   003ED6                     _moveBlue:
  7559                           	callstack 24
  7560   003ED6                     
  7561                           ;dc_motor.c: 276: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 277: {;dc_motor.c: 279:     backHalf(mL,mR);
  7562   003ED6  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7563   003EDA  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7564   003EDE  EC32  F022         	call	_backHalf	;wreg free
  7565   003EE2                     
  7566                           ;dc_motor.c: 280:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7567   003EE2  0E29               	movlw	41
  7568   003EE4  6E22               	movwf	(??_moveBlue+1)^0,c
  7569   003EE6  0E96               	movlw	150
  7570   003EE8  6E21               	movwf	??_moveBlue^0,c
  7571   003EEA  0E7F               	movlw	127
  7572   003EEC                     u5617:
  7573   003EEC  2EE8               	decfsz	wreg,f,c
  7574   003EEE  D7FE               	bra	u5617
  7575   003EF0  2E21               	decfsz	??_moveBlue^0,f,c
  7576   003EF2  D7FC               	bra	u5617
  7577   003EF4  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7578   003EF6  D7FA               	bra	u5617
  7579   003EF8  0000               	nop	
  7580   003EFA                     
  7581                           ;dc_motor.c: 281:     turn180(mL,mR);
  7582   003EFA  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7583   003EFE  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7584   003F02  ECD0  F021         	call	_turn180	;wreg free
  7585   003F06                     
  7586                           ;dc_motor.c: 282:     path_length = logAction('180',0, path_length, &path);
  7587   003F06  0E00               	movlw	0
  7588   003F08  6E09               	movwf	(logAction@time+1)^0,c
  7589   003F0A  0E00               	movlw	0
  7590   003F0C  6E08               	movwf	logAction@time^0,c
  7591   003F0E  C01F  F00A         	movff	moveBlue@path_length,logAction@path_length
  7592   003F12  C020  F00B         	movff	moveBlue@path_length+1,logAction@path_length+1
  7593   003F16  0E28               	movlw	low _path
  7594   003F18  6E0C               	movwf	logAction@path^0,c
  7595   003F1A  0E01               	movlw	high _path
  7596   003F1C  6E0D               	movwf	(logAction@path+1)^0,c
  7597   003F1E  0E30               	movlw	48
  7598   003F20  ECEE  F01C         	call	_logAction
  7599   003F24  C008  F01F         	movff	?_logAction,moveBlue@path_length
  7600   003F28  C009  F020         	movff	?_logAction+1,moveBlue@path_length+1
  7601   003F2C  0012               	return		;funcret
  7602   003F2E                     __end_of_moveBlue:
  7603                           	callstack 0
  7604                           
  7605 ;; *************** function _turn180 *****************
  7606 ;; Defined at:
  7607 ;;		line 212 in file "dc_motor.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7610 ;;		 -> motorL(9), 
  7611 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7612 ;;		 -> motorR(9), 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;		None
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      void 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7627 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7628 ;;Total ram usage:        4 bytes
  7629 ;; Hardware stack levels used: 1
  7630 ;; Hardware stack levels required when called: 4
  7631 ;; This function calls:
  7632 ;;		_stop
  7633 ;;		_turnLeft
  7634 ;; This function is called by:
  7635 ;;		_moveBlue
  7636 ;;		_moveWhite
  7637 ;;		_reverseTurn
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text35
  7642   0043A0                     __ptext35:
  7643                           	callstack 0
  7644   0043A0                     _turn180:
  7645                           	callstack 24
  7646   0043A0                     
  7647                           ;dc_motor.c: 212: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 213
      +                          : {;dc_motor.c: 214:     turnLeft(mL,mR);
  7648   0043A0  C019  F014         	movff	turn180@mL,turnLeft@mL
  7649   0043A4  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7650   0043A8  EC72  F01D         	call	_turnLeft	;wreg free
  7651   0043AC                     
  7652                           ;dc_motor.c: 215:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7653   0043AC  0E30               	movlw	48
  7654   0043AE  6E1C               	movwf	(??_turn180+1)^0,c
  7655   0043B0  0E14               	movlw	20
  7656   0043B2  6E1B               	movwf	??_turn180^0,c
  7657   0043B4  0ED1               	movlw	209
  7658   0043B6                     u5627:
  7659   0043B6  2EE8               	decfsz	wreg,f,c
  7660   0043B8  D7FE               	bra	u5627
  7661   0043BA  2E1B               	decfsz	??_turn180^0,f,c
  7662   0043BC  D7FC               	bra	u5627
  7663   0043BE  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7664   0043C0  D7FA               	bra	u5627
  7665   0043C2  0000               	nop	
  7666   0043C4                     
  7667                           ;dc_motor.c: 216:     stop(mL,mR);
  7668   0043C4  C019  F014         	movff	turn180@mL,stop@mL
  7669   0043C8  C01A  F015         	movff	turn180@mR,stop@mR
  7670   0043CC  ECA7  F01C         	call	_stop	;wreg free
  7671   0043D0  0012               	return		;funcret
  7672   0043D2                     __end_of_turn180:
  7673                           	callstack 0
  7674                           
  7675 ;; *************** function _turnLeft *****************
  7676 ;; Defined at:
  7677 ;;		line 108 in file "dc_motor.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7680 ;;		 -> motorL(9), 
  7681 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7682 ;;		 -> motorR(9), 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  i               2   22[COMRAM] unsigned int 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  1    wreg      void 
  7687 ;; Registers used:
  7688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7697 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7698 ;;Total ram usage:        5 bytes
  7699 ;; Hardware stack levels used: 1
  7700 ;; Hardware stack levels required when called: 3
  7701 ;; This function calls:
  7702 ;;		_setMotorPWM
  7703 ;; This function is called by:
  7704 ;;		_left90
  7705 ;;		_turn180
  7706 ;;		_left135
  7707 ;;		_reverseTurn
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text36
  7712   003AE4                     __ptext36:
  7713                           	callstack 0
  7714   003AE4                     _turnLeft:
  7715                           	callstack 25
  7716   003AE4                     
  7717                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 109: {;dc_motor.
      +                          c: 111:     mL->direction = 0;
  7718   003AE4  5014               	movf	turnLeft@mL^0,w,c
  7719   003AE6  6ED9               	movwf	fsr2l,c
  7720   003AE8  6ADA               	clrf	fsr2h,c
  7721   003AEA  0E01               	movlw	1
  7722   003AEC  26D9               	addwf	fsr2l,f,c
  7723   003AEE  6ADF               	clrf	indf2,c
  7724                           
  7725                           ;dc_motor.c: 112:     mR->direction = 1;
  7726   003AF0  5015               	movf	turnLeft@mR^0,w,c
  7727   003AF2  6ED9               	movwf	fsr2l,c
  7728   003AF4  6ADA               	clrf	fsr2h,c
  7729   003AF6  0E01               	movlw	1
  7730   003AF8  26D9               	addwf	fsr2l,f,c
  7731   003AFA  0E01               	movlw	1
  7732   003AFC  6EDF               	movwf	indf2,c
  7733   003AFE                     
  7734                           ;dc_motor.c: 114:     setMotorPWM(mL);
  7735   003AFE  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7736   003B02  EC6E  F017         	call	_setMotorPWM	;wreg free
  7737   003B06                     
  7738                           ;dc_motor.c: 115:     setMotorPWM(mR);
  7739   003B06  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7740   003B0A  EC6E  F017         	call	_setMotorPWM	;wreg free
  7741   003B0E                     
  7742                           ;dc_motor.c: 116:     for (unsigned int i = 0; i <50; i++)
  7743   003B0E  0E00               	movlw	0
  7744   003B10  6E18               	movwf	(turnLeft@i+1)^0,c
  7745   003B12  0E00               	movlw	0
  7746   003B14  6E17               	movwf	turnLeft@i^0,c
  7747   003B16                     l5452:
  7748                           
  7749                           ;dc_motor.c: 117:     {;dc_motor.c: 118:         mL->power++;
  7750   003B16  5014               	movf	turnLeft@mL^0,w,c
  7751   003B18  6ED9               	movwf	fsr2l,c
  7752   003B1A  6ADA               	clrf	fsr2h,c
  7753   003B1C  2ADF               	incf	indf2,f,c
  7754                           
  7755                           ;dc_motor.c: 119:         mR->power++;
  7756   003B1E  5015               	movf	turnLeft@mR^0,w,c
  7757   003B20  6ED9               	movwf	fsr2l,c
  7758   003B22  6ADA               	clrf	fsr2h,c
  7759   003B24  2ADF               	incf	indf2,f,c
  7760   003B26                     
  7761                           ;dc_motor.c: 120:         setMotorPWM(mL);
  7762   003B26  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7763   003B2A  EC6E  F017         	call	_setMotorPWM	;wreg free
  7764   003B2E                     
  7765                           ;dc_motor.c: 121:         setMotorPWM(mR);
  7766   003B2E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7767   003B32  EC6E  F017         	call	_setMotorPWM	;wreg free
  7768   003B36                     
  7769                           ;dc_motor.c: 122:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7770   003B36  0E0B               	movlw	11
  7771   003B38  6E16               	movwf	??_turnLeft^0,c
  7772   003B3A  0E62               	movlw	98
  7773   003B3C                     u5637:
  7774   003B3C  2EE8               	decfsz	wreg,f,c
  7775   003B3E  D7FE               	bra	u5637
  7776   003B40  2E16               	decfsz	??_turnLeft^0,f,c
  7777   003B42  D7FC               	bra	u5637
  7778   003B44  D000               	nop2	
  7779   003B46                     
  7780                           ;dc_motor.c: 123:     }
  7781   003B46  4A17               	infsnz	turnLeft@i^0,f,c
  7782   003B48  2A18               	incf	(turnLeft@i+1)^0,f,c
  7783   003B4A  5018               	movf	(turnLeft@i+1)^0,w,c
  7784   003B4C  E109               	bnz	u4930
  7785   003B4E  0E32               	movlw	50
  7786   003B50  5C17               	subwf	turnLeft@i^0,w,c
  7787   003B52  A0D8               	btfss	status,0,c
  7788   003B54  EFAE  F01D         	goto	u4931
  7789   003B58  EFB0  F01D         	goto	u4930
  7790   003B5C                     u4931:
  7791   003B5C  EF8B  F01D         	goto	l5452
  7792   003B60                     u4930:
  7793   003B60  0012               	return		;funcret
  7794   003B62                     __end_of_turnLeft:
  7795                           	callstack 0
  7796                           
  7797 ;; *************** function _logAction *****************
  7798 ;; Defined at:
  7799 ;;		line 339 in file "dc_motor.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  action          1    wreg     unsigned char 
  7802 ;;  time            2    7[COMRAM] int 
  7803 ;;  path_length     2    9[COMRAM] unsigned int 
  7804 ;;  path            2   11[COMRAM] PTR struct PathStep
  7805 ;;		 -> path(150), 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  action          1   15[COMRAM] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  2    7[COMRAM] unsigned int 
  7810 ;; Registers used:
  7811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7817 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7820 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7821 ;;Total ram usage:        9 bytes
  7822 ;; Hardware stack levels used: 1
  7823 ;; Hardware stack levels required when called: 2
  7824 ;; This function calls:
  7825 ;;		___wmul
  7826 ;; This function is called by:
  7827 ;;		_main
  7828 ;;		_moveRed
  7829 ;;		_moveGreen
  7830 ;;		_moveBlue
  7831 ;;		_moveYellow
  7832 ;;		_movePink
  7833 ;;		_moveOrange
  7834 ;;		_moveLightBlue
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text37
  7839   0039DC                     __ptext37:
  7840                           	callstack 0
  7841   0039DC                     _logAction:
  7842                           	callstack 28
  7843                           
  7844                           ;incstack = 0
  7845                           ;logAction@action stored from wreg
  7846   0039DC  6E10               	movwf	logAction@action^0,c
  7847   0039DE                     
  7848                           ;dc_motor.c: 340:     if (path_length < 50) {
  7849   0039DE  500B               	movf	(logAction@path_length+1)^0,w,c
  7850   0039E0  E107               	bnz	u5011
  7851   0039E2  0E32               	movlw	50
  7852   0039E4  5C0A               	subwf	logAction@path_length^0,w,c
  7853   0039E6  B0D8               	btfsc	status,0,c
  7854   0039E8  EFF8  F01C         	goto	u5011
  7855   0039EC  EFFA  F01C         	goto	u5010
  7856   0039F0                     u5011:
  7857   0039F0  EF2E  F01D         	goto	l487
  7858   0039F4                     u5010:
  7859   0039F4                     
  7860                           ;dc_motor.c: 341:         path[path_length].action = action;
  7861   0039F4  C00A  F002         	movff	logAction@path_length,___wmul@multiplier
  7862   0039F8  C00B  F003         	movff	logAction@path_length+1,___wmul@multiplier+1
  7863   0039FC  0E00               	movlw	0
  7864   0039FE  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7865   003A00  0E03               	movlw	3
  7866   003A02  6E04               	movwf	___wmul@multiplicand^0,c
  7867   003A04  EC87  F022         	call	___wmul	;wreg free
  7868   003A08  5002               	movf	?___wmul^0,w,c
  7869   003A0A  240C               	addwf	logAction@path^0,w,c
  7870   003A0C  6ED9               	movwf	fsr2l,c
  7871   003A0E  5003               	movf	(?___wmul+1)^0,w,c
  7872   003A10  200D               	addwfc	(logAction@path+1)^0,w,c
  7873   003A12  6EDA               	movwf	fsr2h,c
  7874   003A14  C010  FFDF         	movff	logAction@action,indf2
  7875                           
  7876                           ;dc_motor.c: 342:         path[path_length].time = time;
  7877   003A18  C00A  F002         	movff	logAction@path_length,___wmul@multiplier
  7878   003A1C  C00B  F003         	movff	logAction@path_length+1,___wmul@multiplier+1
  7879   003A20  0E00               	movlw	0
  7880   003A22  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7881   003A24  0E03               	movlw	3
  7882   003A26  6E04               	movwf	___wmul@multiplicand^0,c
  7883   003A28  EC87  F022         	call	___wmul	;wreg free
  7884   003A2C  5002               	movf	?___wmul^0,w,c
  7885   003A2E  240C               	addwf	logAction@path^0,w,c
  7886   003A30  6E0E               	movwf	??_logAction^0,c
  7887   003A32  5003               	movf	(?___wmul+1)^0,w,c
  7888   003A34  200D               	addwfc	(logAction@path+1)^0,w,c
  7889   003A36  6E0F               	movwf	(??_logAction+1)^0,c
  7890   003A38  0E01               	movlw	1
  7891   003A3A  240E               	addwf	??_logAction^0,w,c
  7892   003A3C  6ED9               	movwf	fsr2l,c
  7893   003A3E  0E00               	movlw	0
  7894   003A40  200F               	addwfc	(??_logAction+1)^0,w,c
  7895   003A42  6EDA               	movwf	fsr2h,c
  7896   003A44  C008  FFDE         	movff	logAction@time,postinc2
  7897   003A48  C009  FFDD         	movff	logAction@time+1,postdec2
  7898   003A4C                     
  7899                           ;dc_motor.c: 343:         return path_length + 1;
  7900   003A4C  0E01               	movlw	1
  7901   003A4E  240A               	addwf	logAction@path_length^0,w,c
  7902   003A50  6E08               	movwf	?_logAction^0,c
  7903   003A52  0E00               	movlw	0
  7904   003A54  200B               	addwfc	(logAction@path_length+1)^0,w,c
  7905   003A56  6E09               	movwf	(?_logAction+1)^0,c
  7906   003A58  EF32  F01D         	goto	l488
  7907   003A5C                     l487:
  7908                           
  7909                           ;dc_motor.c: 345:     return path_length;
  7910   003A5C  C00A  F008         	movff	logAction@path_length,?_logAction
  7911   003A60  C00B  F009         	movff	logAction@path_length+1,?_logAction+1
  7912   003A64                     l488:
  7913   003A64  0012               	return		;funcret
  7914   003A66                     __end_of_logAction:
  7915                           	callstack 0
  7916                           
  7917 ;; *************** function _backHalf *****************
  7918 ;; Defined at:
  7919 ;;		line 236 in file "dc_motor.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7922 ;;		 -> motorL(9), 
  7923 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7924 ;;		 -> motorR(9), 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7940 ;;Total ram usage:        4 bytes
  7941 ;; Hardware stack levels used: 1
  7942 ;; Hardware stack levels required when called: 4
  7943 ;; This function calls:
  7944 ;;		_fullSpeedBack
  7945 ;;		_stop
  7946 ;; This function is called by:
  7947 ;;		_moveRed
  7948 ;;		_moveGreen
  7949 ;;		_moveBlue
  7950 ;;		_moveOrange
  7951 ;;		_moveLightBlue
  7952 ;;		_moveWhite
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text38
  7957   004464                     __ptext38:
  7958                           	callstack 0
  7959   004464                     _backHalf:
  7960                           	callstack 24
  7961   004464                     
  7962                           ;dc_motor.c: 236: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          7: {;dc_motor.c: 238:     fullSpeedBack(mL,mR);
  7963   004464  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7964   004468  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7965   00446C  ECEE  F01D         	call	_fullSpeedBack	;wreg free
  7966   004470                     
  7967                           ;dc_motor.c: 239:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7968   004470  0E19               	movlw	25
  7969   004472  6E1C               	movwf	(??_backHalf+1)^0,c
  7970   004474  0E5A               	movlw	90
  7971   004476  6E1B               	movwf	??_backHalf^0,c
  7972   004478  0EB2               	movlw	178
  7973   00447A                     u5647:
  7974   00447A  2EE8               	decfsz	wreg,f,c
  7975   00447C  D7FE               	bra	u5647
  7976   00447E  2E1B               	decfsz	??_backHalf^0,f,c
  7977   004480  D7FC               	bra	u5647
  7978   004482  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7979   004484  D7FA               	bra	u5647
  7980   004486                     
  7981                           ;dc_motor.c: 240:     stop(mL,mR);
  7982   004486  C019  F014         	movff	backHalf@mL,stop@mL
  7983   00448A  C01A  F015         	movff	backHalf@mR,stop@mR
  7984   00448E  ECA7  F01C         	call	_stop	;wreg free
  7985   004492  0012               	return		;funcret
  7986   004494                     __end_of_backHalf:
  7987                           	callstack 0
  7988                           
  7989 ;; *************** function _stop *****************
  7990 ;; Defined at:
  7991 ;;		line 88 in file "dc_motor.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7994 ;;		 -> motorL(9), 
  7995 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7996 ;;		 -> motorR(9), 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8012 ;;Total ram usage:        2 bytes
  8013 ;; Hardware stack levels used: 1
  8014 ;; Hardware stack levels required when called: 3
  8015 ;; This function calls:
  8016 ;;		_setMotorPWM
  8017 ;; This function is called by:
  8018 ;;		_main
  8019 ;;		_right90
  8020 ;;		_left90
  8021 ;;		_turn180
  8022 ;;		_right135
  8023 ;;		_left135
  8024 ;;		_backHalf
  8025 ;;		_backOneAndHalf
  8026 ;;		_reverseStraight
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text39
  8031   00394E                     __ptext39:
  8032                           	callstack 0
  8033   00394E                     _stop:
  8034                           	callstack 27
  8035   00394E                     
  8036                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 90:
      +                               LATDbits.LATD4 = 1;
  8037   00394E  887C               	bsf	124,4,c	;volatile
  8038                           
  8039                           ;dc_motor.c: 93:     while(mL->power > 0 || mR->power > 0) {
  8040   003950  EFD7  F01C         	goto	l5436
  8041   003954                     l5422:
  8042                           
  8043                           ;dc_motor.c: 94:         if (mL->power > 0) mL->power--;
  8044   003954  5014               	movf	stop@mL^0,w,c
  8045   003956  6ED9               	movwf	fsr2l,c
  8046   003958  6ADA               	clrf	fsr2h,c
  8047   00395A  50DF               	movf	indf2,w,c
  8048   00395C  B4D8               	btfsc	status,2,c
  8049   00395E  EFB3  F01C         	goto	u4891
  8050   003962  EFB5  F01C         	goto	u4890
  8051   003966                     u4891:
  8052   003966  EFB9  F01C         	goto	l5426
  8053   00396A                     u4890:
  8054   00396A  5014               	movf	stop@mL^0,w,c
  8055   00396C  6ED9               	movwf	fsr2l,c
  8056   00396E  6ADA               	clrf	fsr2h,c
  8057   003970  06DF               	decf	indf2,f,c
  8058   003972                     l5426:
  8059                           
  8060                           ;dc_motor.c: 95:         if (mR->power > 0) mR->power--;
  8061   003972  5015               	movf	stop@mR^0,w,c
  8062   003974  6ED9               	movwf	fsr2l,c
  8063   003976  6ADA               	clrf	fsr2h,c
  8064   003978  50DF               	movf	indf2,w,c
  8065   00397A  B4D8               	btfsc	status,2,c
  8066   00397C  EFC2  F01C         	goto	u4901
  8067   003980  EFC4  F01C         	goto	u4900
  8068   003984                     u4901:
  8069   003984  EFC8  F01C         	goto	l5430
  8070   003988                     u4900:
  8071   003988  5015               	movf	stop@mR^0,w,c
  8072   00398A  6ED9               	movwf	fsr2l,c
  8073   00398C  6ADA               	clrf	fsr2h,c
  8074   00398E  06DF               	decf	indf2,f,c
  8075   003990                     l5430:
  8076                           
  8077                           ;dc_motor.c: 98:         setMotorPWM(mL);
  8078   003990  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8079   003994  EC6E  F017         	call	_setMotorPWM	;wreg free
  8080   003998                     
  8081                           ;dc_motor.c: 99:         setMotorPWM(mR);
  8082   003998  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8083   00399C  EC6E  F017         	call	_setMotorPWM	;wreg free
  8084   0039A0                     
  8085                           ;dc_motor.c: 102:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  8086   0039A0  0EE4               	movlw	228
  8087   0039A2                     u5657:
  8088   0039A2  D000               	nop2	
  8089   0039A4  D000               	nop2	
  8090   0039A6  2EE8               	decfsz	wreg,f,c
  8091   0039A8  D7FC               	bra	u5657
  8092   0039AA  D000               	nop2	
  8093   0039AC  D000               	nop2	
  8094   0039AE                     l5436:
  8095                           
  8096                           ;dc_motor.c: 93:     while(mL->power > 0 || mR->power > 0) {
  8097   0039AE  5014               	movf	stop@mL^0,w,c
  8098   0039B0  6ED9               	movwf	fsr2l,c
  8099   0039B2  6ADA               	clrf	fsr2h,c
  8100   0039B4  50DF               	movf	indf2,w,c
  8101   0039B6  A4D8               	btfss	status,2,c
  8102   0039B8  EFE0  F01C         	goto	u4911
  8103   0039BC  EFE2  F01C         	goto	u4910
  8104   0039C0                     u4911:
  8105   0039C0  EFAA  F01C         	goto	l5422
  8106   0039C4                     u4910:
  8107   0039C4  5015               	movf	stop@mR^0,w,c
  8108   0039C6  6ED9               	movwf	fsr2l,c
  8109   0039C8  6ADA               	clrf	fsr2h,c
  8110   0039CA  50DF               	movf	indf2,w,c
  8111   0039CC  A4D8               	btfss	status,2,c
  8112   0039CE  EFEB  F01C         	goto	u4921
  8113   0039D2  EFED  F01C         	goto	u4920
  8114   0039D6                     u4921:
  8115   0039D6  EFAA  F01C         	goto	l5422
  8116   0039DA                     u4920:
  8117   0039DA  0012               	return		;funcret
  8118   0039DC                     __end_of_stop:
  8119                           	callstack 0
  8120                           
  8121 ;; *************** function _fullSpeedBack *****************
  8122 ;; Defined at:
  8123 ;;		line 168 in file "dc_motor.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8126 ;;		 -> motorL(9), 
  8127 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8128 ;;		 -> motorR(9), 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  power           2   22[COMRAM] int 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      void 
  8133 ;; Registers used:
  8134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8143 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8144 ;;Total ram usage:        5 bytes
  8145 ;; Hardware stack levels used: 1
  8146 ;; Hardware stack levels required when called: 3
  8147 ;; This function calls:
  8148 ;;		_setMotorPWM
  8149 ;; This function is called by:
  8150 ;;		_backHalf
  8151 ;;		_backOneAndHalf
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text40
  8156   003BDC                     __ptext40:
  8157                           	callstack 0
  8158   003BDC                     _fullSpeedBack:
  8159                           	callstack 24
  8160   003BDC                     
  8161                           ;dc_motor.c: 168: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 169: {;dc_m
      +                          otor.c: 171:     mL->direction = 0;
  8162   003BDC  5014               	movf	fullSpeedBack@mL^0,w,c
  8163   003BDE  6ED9               	movwf	fsr2l,c
  8164   003BE0  6ADA               	clrf	fsr2h,c
  8165   003BE2  0E01               	movlw	1
  8166   003BE4  26D9               	addwf	fsr2l,f,c
  8167   003BE6  6ADF               	clrf	indf2,c
  8168                           
  8169                           ;dc_motor.c: 172:     mR->direction = 0;
  8170   003BE8  5015               	movf	fullSpeedBack@mR^0,w,c
  8171   003BEA  6ED9               	movwf	fsr2l,c
  8172   003BEC  6ADA               	clrf	fsr2h,c
  8173   003BEE  0E01               	movlw	1
  8174   003BF0  26D9               	addwf	fsr2l,f,c
  8175   003BF2  6ADF               	clrf	indf2,c
  8176   003BF4                     
  8177                           ;dc_motor.c: 174:     for(int power = 0; power <= 50; power++) {
  8178   003BF4  0E00               	movlw	0
  8179   003BF6  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8180   003BF8  0E00               	movlw	0
  8181   003BFA  6E17               	movwf	fullSpeedBack@power^0,c
  8182   003BFC                     l5496:
  8183                           
  8184                           ;dc_motor.c: 175:         mL->power = power;
  8185   003BFC  5014               	movf	fullSpeedBack@mL^0,w,c
  8186   003BFE  6ED9               	movwf	fsr2l,c
  8187   003C00  6ADA               	clrf	fsr2h,c
  8188   003C02  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8189                           
  8190                           ;dc_motor.c: 176:         mR->power = power;
  8191   003C06  5015               	movf	fullSpeedBack@mR^0,w,c
  8192   003C08  6ED9               	movwf	fsr2l,c
  8193   003C0A  6ADA               	clrf	fsr2h,c
  8194   003C0C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8195   003C10                     
  8196                           ;dc_motor.c: 179:         setMotorPWM(mL);
  8197   003C10  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8198   003C14  EC6E  F017         	call	_setMotorPWM	;wreg free
  8199   003C18                     
  8200                           ;dc_motor.c: 180:         setMotorPWM(mR);
  8201   003C18  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8202   003C1C  EC6E  F017         	call	_setMotorPWM	;wreg free
  8203   003C20                     
  8204                           ;dc_motor.c: 183:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8205   003C20  0E0B               	movlw	11
  8206   003C22  6E16               	movwf	??_fullSpeedBack^0,c
  8207   003C24  0E62               	movlw	98
  8208   003C26                     u5667:
  8209   003C26  2EE8               	decfsz	wreg,f,c
  8210   003C28  D7FE               	bra	u5667
  8211   003C2A  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8212   003C2C  D7FC               	bra	u5667
  8213   003C2E  D000               	nop2	
  8214   003C30                     
  8215                           ;dc_motor.c: 184:     }
  8216   003C30  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8217   003C32  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8218   003C34  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8219   003C36  EF26  F01E         	goto	u4951
  8220   003C3A  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8221   003C3C  E109               	bnz	u4950
  8222   003C3E  0E33               	movlw	51
  8223   003C40  5C17               	subwf	fullSpeedBack@power^0,w,c
  8224   003C42  A0D8               	btfss	status,0,c
  8225   003C44  EF26  F01E         	goto	u4951
  8226   003C48  EF28  F01E         	goto	u4950
  8227   003C4C                     u4951:
  8228   003C4C  EFFE  F01D         	goto	l5496
  8229   003C50                     u4950:
  8230   003C50  0012               	return		;funcret
  8231   003C52                     __end_of_fullSpeedBack:
  8232                           	callstack 0
  8233                           
  8234 ;; *************** function _setMotorPWM *****************
  8235 ;; Defined at:
  8236 ;;		line 65 in file "dc_motor.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8239 ;;		 -> motorR(9), motorL(9), 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  negDuty         1   18[COMRAM] unsigned char 
  8242 ;;  posDuty         1   17[COMRAM] unsigned char 
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  1    wreg      void 
  8245 ;; Registers used:
  8246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8252 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8256 ;;Total ram usage:        5 bytes
  8257 ;; Hardware stack levels used: 1
  8258 ;; Hardware stack levels required when called: 2
  8259 ;; This function calls:
  8260 ;;		___lwdiv
  8261 ;;		___wmul
  8262 ;; This function is called by:
  8263 ;;		_stop
  8264 ;;		_turnLeft
  8265 ;;		_turnRight
  8266 ;;		_fullSpeedAhead
  8267 ;;		_fullSpeedBack
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text41
  8272   002EDC                     __ptext41:
  8273                           	callstack 0
  8274   002EDC                     _setMotorPWM:
  8275                           	callstack 27
  8276   002EDC                     
  8277                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8278   002EDC  500F               	movf	setMotorPWM@m^0,w,c
  8279   002EDE  6ED9               	movwf	fsr2l,c
  8280   002EE0  6ADA               	clrf	fsr2h,c
  8281   002EE2  0E02               	movlw	2
  8282   002EE4  26D9               	addwf	fsr2l,f,c
  8283   002EE6  50DF               	movf	indf2,w,c
  8284   002EE8  B4D8               	btfsc	status,2,c
  8285   002EEA  EF79  F017         	goto	u4801
  8286   002EEE  EF7B  F017         	goto	u4800
  8287   002EF2                     u4801:
  8288   002EF2  EFAB  F017         	goto	l5350
  8289   002EF6                     u4800:
  8290   002EF6                     
  8291                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8292   002EF6  500F               	movf	setMotorPWM@m^0,w,c
  8293   002EF8  6ED9               	movwf	fsr2l,c
  8294   002EFA  6ADA               	clrf	fsr2h,c
  8295   002EFC  50DF               	movf	indf2,w,c
  8296   002EFE  6E10               	movwf	??_setMotorPWM^0,c
  8297   002F00  5010               	movf	??_setMotorPWM^0,w,c
  8298   002F02  6E02               	movwf	___wmul@multiplier^0,c
  8299   002F04  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8300   002F06  500F               	movf	setMotorPWM@m^0,w,c
  8301   002F08  6ED9               	movwf	fsr2l,c
  8302   002F0A  6ADA               	clrf	fsr2h,c
  8303   002F0C  0E03               	movlw	3
  8304   002F0E  26D9               	addwf	fsr2l,f,c
  8305   002F10  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8306   002F14  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8307   002F18  EC87  F022         	call	___wmul	;wreg free
  8308   002F1C  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8309   002F20  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8310   002F24  0E00               	movlw	0
  8311   002F26  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8312   002F28  0E64               	movlw	100
  8313   002F2A  6E0A               	movwf	___lwdiv@divisor^0,c
  8314   002F2C  EC29  F01E         	call	___lwdiv	;wreg free
  8315   002F30  500F               	movf	setMotorPWM@m^0,w,c
  8316   002F32  6ED9               	movwf	fsr2l,c
  8317   002F34  6ADA               	clrf	fsr2h,c
  8318   002F36  0E03               	movlw	3
  8319   002F38  26D9               	addwf	fsr2l,f,c
  8320   002F3A  50DF               	movf	indf2,w,c
  8321   002F3C  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8322   002F3E  5008               	movf	?___lwdiv^0,w,c
  8323   002F40  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8324   002F42  6E12               	movwf	setMotorPWM@posDuty^0,c
  8325   002F44                     
  8326                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8327   002F44  500F               	movf	setMotorPWM@m^0,w,c
  8328   002F46  6ED9               	movwf	fsr2l,c
  8329   002F48  6ADA               	clrf	fsr2h,c
  8330   002F4A  0E03               	movlw	3
  8331   002F4C  26D9               	addwf	fsr2l,f,c
  8332   002F4E  50DF               	movf	indf2,w,c
  8333   002F50  6E13               	movwf	setMotorPWM@negDuty^0,c
  8334                           
  8335                           ;dc_motor.c: 72:     }
  8336   002F52  EFCC  F017         	goto	l5354
  8337   002F56                     l5350:
  8338                           
  8339                           ;dc_motor.c: 74:         posDuty=0;
  8340   002F56  0E00               	movlw	0
  8341   002F58  6E12               	movwf	setMotorPWM@posDuty^0,c
  8342   002F5A                     
  8343                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8344   002F5A  500F               	movf	setMotorPWM@m^0,w,c
  8345   002F5C  6ED9               	movwf	fsr2l,c
  8346   002F5E  6ADA               	clrf	fsr2h,c
  8347   002F60  50DF               	movf	indf2,w,c
  8348   002F62  6E10               	movwf	??_setMotorPWM^0,c
  8349   002F64  5010               	movf	??_setMotorPWM^0,w,c
  8350   002F66  6E02               	movwf	___wmul@multiplier^0,c
  8351   002F68  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8352   002F6A  500F               	movf	setMotorPWM@m^0,w,c
  8353   002F6C  6ED9               	movwf	fsr2l,c
  8354   002F6E  6ADA               	clrf	fsr2h,c
  8355   002F70  0E03               	movlw	3
  8356   002F72  26D9               	addwf	fsr2l,f,c
  8357   002F74  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8358   002F78  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8359   002F7C  EC87  F022         	call	___wmul	;wreg free
  8360   002F80  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8361   002F84  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8362   002F88  0E00               	movlw	0
  8363   002F8A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8364   002F8C  0E64               	movlw	100
  8365   002F8E  6E0A               	movwf	___lwdiv@divisor^0,c
  8366   002F90  EC29  F01E         	call	___lwdiv	;wreg free
  8367   002F94  5008               	movf	?___lwdiv^0,w,c
  8368   002F96  6E13               	movwf	setMotorPWM@negDuty^0,c
  8369   002F98                     l5354:
  8370                           
  8371                           ;dc_motor.c: 78:     if (m->direction) {
  8372   002F98  500F               	movf	setMotorPWM@m^0,w,c
  8373   002F9A  6ED9               	movwf	fsr2l,c
  8374   002F9C  6ADA               	clrf	fsr2h,c
  8375   002F9E  0E01               	movlw	1
  8376   002FA0  26D9               	addwf	fsr2l,f,c
  8377   002FA2  50DF               	movf	indf2,w,c
  8378   002FA4  B4D8               	btfsc	status,2,c
  8379   002FA6  EFD7  F017         	goto	u4811
  8380   002FAA  EFD9  F017         	goto	u4810
  8381   002FAE                     u4811:
  8382   002FAE  EFF9  F017         	goto	l5358
  8383   002FB2                     u4810:
  8384   002FB2                     
  8385                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8386   002FB2  500F               	movf	setMotorPWM@m^0,w,c
  8387   002FB4  6ED9               	movwf	fsr2l,c
  8388   002FB6  6ADA               	clrf	fsr2h,c
  8389   002FB8  0E05               	movlw	5
  8390   002FBA  26D9               	addwf	fsr2l,f,c
  8391   002FBC  CFDE F010          	movff	postinc2,??_setMotorPWM
  8392   002FC0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8393   002FC4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8394   002FC8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8395   002FCC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8396                           
  8397                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8398   002FD0  500F               	movf	setMotorPWM@m^0,w,c
  8399   002FD2  6ED9               	movwf	fsr2l,c
  8400   002FD4  6ADA               	clrf	fsr2h,c
  8401   002FD6  0E07               	movlw	7
  8402   002FD8  26D9               	addwf	fsr2l,f,c
  8403   002FDA  CFDE F010          	movff	postinc2,??_setMotorPWM
  8404   002FDE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8405   002FE2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8406   002FE6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8407   002FEA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8408                           
  8409                           ;dc_motor.c: 81:     } else {
  8410   002FEE  EF17  F018         	goto	l411
  8411   002FF2                     l5358:
  8412                           
  8413                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8414   002FF2  500F               	movf	setMotorPWM@m^0,w,c
  8415   002FF4  6ED9               	movwf	fsr2l,c
  8416   002FF6  6ADA               	clrf	fsr2h,c
  8417   002FF8  0E05               	movlw	5
  8418   002FFA  26D9               	addwf	fsr2l,f,c
  8419   002FFC  CFDE F010          	movff	postinc2,??_setMotorPWM
  8420   003000  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8421   003004  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8422   003008  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8423   00300C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8424                           
  8425                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8426   003010  500F               	movf	setMotorPWM@m^0,w,c
  8427   003012  6ED9               	movwf	fsr2l,c
  8428   003014  6ADA               	clrf	fsr2h,c
  8429   003016  0E07               	movlw	7
  8430   003018  26D9               	addwf	fsr2l,f,c
  8431   00301A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8432   00301E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8433   003022  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8434   003026  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8435   00302A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8436   00302E                     l411:
  8437   00302E  0012               	return		;funcret
  8438   003030                     __end_of_setMotorPWM:
  8439                           	callstack 0
  8440                           
  8441 ;; *************** function ___lwdiv *****************
  8442 ;; Defined at:
  8443 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  dividend        2    7[COMRAM] unsigned int 
  8446 ;;  divisor         2    9[COMRAM] unsigned int 
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  quotient        2   11[COMRAM] unsigned int 
  8449 ;;  counter         1   13[COMRAM] unsigned char 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;                  2    7[COMRAM] unsigned int 
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8459 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8460 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8462 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8463 ;;Total ram usage:        7 bytes
  8464 ;; Hardware stack levels used: 1
  8465 ;; Hardware stack levels required when called: 1
  8466 ;; This function calls:
  8467 ;;		Nothing
  8468 ;; This function is called by:
  8469 ;;		_setMotorPWM
  8470 ;;		_ADC2String
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text42
  8475   003C52                     __ptext42:
  8476                           	callstack 0
  8477   003C52                     ___lwdiv:
  8478                           	callstack 27
  8479   003C52  0E00               	movlw	0
  8480   003C54  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8481   003C56  0E00               	movlw	0
  8482   003C58  6E0C               	movwf	___lwdiv@quotient^0,c
  8483   003C5A  500A               	movf	___lwdiv@divisor^0,w,c
  8484   003C5C  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8485   003C5E  B4D8               	btfsc	status,2,c
  8486   003C60  EF34  F01E         	goto	u2471
  8487   003C64  EF36  F01E         	goto	u2470
  8488   003C68                     u2471:
  8489   003C68  EF5E  F01E         	goto	l1165
  8490   003C6C                     u2470:
  8491   003C6C  0E01               	movlw	1
  8492   003C6E  6E0E               	movwf	___lwdiv@counter^0,c
  8493   003C70  EF3E  F01E         	goto	l3448
  8494   003C74                     l3446:
  8495   003C74  90D8               	bcf	status,0,c
  8496   003C76  360A               	rlcf	___lwdiv@divisor^0,f,c
  8497   003C78  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8498   003C7A  2A0E               	incf	___lwdiv@counter^0,f,c
  8499   003C7C                     l3448:
  8500   003C7C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8501   003C7E  EF43  F01E         	goto	u2481
  8502   003C82  EF45  F01E         	goto	u2480
  8503   003C86                     u2481:
  8504   003C86  EF3A  F01E         	goto	l3446
  8505   003C8A                     u2480:
  8506   003C8A                     l3450:
  8507   003C8A  90D8               	bcf	status,0,c
  8508   003C8C  360C               	rlcf	___lwdiv@quotient^0,f,c
  8509   003C8E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8510   003C90  500A               	movf	___lwdiv@divisor^0,w,c
  8511   003C92  5C08               	subwf	___lwdiv@dividend^0,w,c
  8512   003C94  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8513   003C96  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8514   003C98  A0D8               	btfss	status,0,c
  8515   003C9A  EF51  F01E         	goto	u2491
  8516   003C9E  EF53  F01E         	goto	u2490
  8517   003CA2                     u2491:
  8518   003CA2  EF58  F01E         	goto	l3458
  8519   003CA6                     u2490:
  8520   003CA6  500A               	movf	___lwdiv@divisor^0,w,c
  8521   003CA8  5E08               	subwf	___lwdiv@dividend^0,f,c
  8522   003CAA  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8523   003CAC  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8524   003CAE  800C               	bsf	___lwdiv@quotient^0,0,c
  8525   003CB0                     l3458:
  8526   003CB0  90D8               	bcf	status,0,c
  8527   003CB2  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8528   003CB4  320A               	rrcf	___lwdiv@divisor^0,f,c
  8529   003CB6  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8530   003CB8  EF45  F01E         	goto	l3450
  8531   003CBC                     l1165:
  8532   003CBC  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8533   003CC0  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8534   003CC4  0012               	return		;funcret
  8535   003CC6                     __end_of___lwdiv:
  8536                           	callstack 0
  8537                           
  8538 ;; *************** function _color_click_init *****************
  8539 ;; Defined at:
  8540 ;;		line 8 in file "color.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;		None
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;		None
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  1    wreg      void 
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8558 ;;Total ram usage:        1 bytes
  8559 ;; Hardware stack levels used: 1
  8560 ;; Hardware stack levels required when called: 4
  8561 ;; This function calls:
  8562 ;;		_I2C_2_Master_Init
  8563 ;;		_color_writetoaddr
  8564 ;; This function is called by:
  8565 ;;		_main
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           	psect	text43
  8570   00423C                     __ptext43:
  8571                           	callstack 0
  8572   00423C                     _color_click_init:
  8573                           	callstack 26
  8574   00423C                     
  8575                           ;color.c: 11:     I2C_2_Master_Init();
  8576   00423C  EC4A  F022         	call	_I2C_2_Master_Init	;wreg free
  8577   004240                     
  8578                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8579   004240  0E01               	movlw	1
  8580   004242  6E04               	movwf	color_writetoaddr@value^0,c
  8581   004244  0E00               	movlw	0
  8582   004246  ECAB  F022         	call	_color_writetoaddr
  8583   00424A                     
  8584                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8585   00424A  0E3F               	movlw	63
  8586   00424C  6E06               	movwf	??_color_click_init^0,c
  8587   00424E  0E55               	movlw	85
  8588   004250                     u5677:
  8589   004250  2EE8               	decfsz	wreg,f,c
  8590   004252  D7FE               	bra	u5677
  8591   004254  2E06               	decfsz	??_color_click_init^0,f,c
  8592   004256  D7FC               	bra	u5677
  8593   004258  0000               	nop	
  8594   00425A                     
  8595                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8596   00425A  0E03               	movlw	3
  8597   00425C  6E04               	movwf	color_writetoaddr@value^0,c
  8598   00425E  0E00               	movlw	0
  8599   004260  ECAB  F022         	call	_color_writetoaddr
  8600   004264                     
  8601                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8602   004264  0ED5               	movlw	213
  8603   004266  6E04               	movwf	color_writetoaddr@value^0,c
  8604   004268  0E01               	movlw	1
  8605   00426A  ECAB  F022         	call	_color_writetoaddr
  8606   00426E  0012               	return		;funcret
  8607   004270                     __end_of_color_click_init:
  8608                           	callstack 0
  8609                           
  8610 ;; *************** function _color_writetoaddr *****************
  8611 ;; Defined at:
  8612 ;;		line 24 in file "color.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  address         1    wreg     unsigned char 
  8615 ;;  value           1    3[COMRAM] unsigned char 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  address         1    4[COMRAM] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8627 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8631 ;;Total ram usage:        2 bytes
  8632 ;; Hardware stack levels used: 1
  8633 ;; Hardware stack levels required when called: 3
  8634 ;; This function calls:
  8635 ;;		_I2C_2_Master_Start
  8636 ;;		_I2C_2_Master_Stop
  8637 ;;		_I2C_2_Master_Write
  8638 ;; This function is called by:
  8639 ;;		_color_click_init
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           	psect	text44
  8644   004556                     __ptext44:
  8645                           	callstack 0
  8646   004556                     _color_writetoaddr:
  8647                           	callstack 26
  8648                           
  8649                           ;incstack = 0
  8650                           ;color_writetoaddr@address stored from wreg
  8651   004556  6E05               	movwf	color_writetoaddr@address^0,c
  8652   004558                     
  8653                           ;color.c: 25:     I2C_2_Master_Start();
  8654   004558  ECFD  F022         	call	_I2C_2_Master_Start	;wreg free
  8655                           
  8656                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8657   00455C  0E52               	movlw	82
  8658   00455E  ECF2  F022         	call	_I2C_2_Master_Write
  8659                           
  8660                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8661   004562  5005               	movf	color_writetoaddr@address^0,w,c
  8662   004564  0980               	iorlw	128
  8663   004566  ECF2  F022         	call	_I2C_2_Master_Write
  8664                           
  8665                           ;color.c: 28:     I2C_2_Master_Write(value);
  8666   00456A  5004               	movf	color_writetoaddr@value^0,w,c
  8667   00456C  ECF2  F022         	call	_I2C_2_Master_Write
  8668                           
  8669                           ;color.c: 29:     I2C_2_Master_Stop();
  8670   004570  ECF8  F022         	call	_I2C_2_Master_Stop	;wreg free
  8671   004574  0012               	return		;funcret
  8672   004576                     __end_of_color_writetoaddr:
  8673                           	callstack 0
  8674                           
  8675 ;; *************** function _I2C_2_Master_Init *****************
  8676 ;; Defined at:
  8677 ;;		line 4 in file "i2c.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;		None
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      void 
  8684 ;; Registers used:
  8685 ;;		wreg, status,2
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8695 ;;Total ram usage:        0 bytes
  8696 ;; Hardware stack levels used: 1
  8697 ;; Hardware stack levels required when called: 1
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_color_click_init
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text45
  8706   004494                     __ptext45:
  8707                           	callstack 0
  8708   004494                     _I2C_2_Master_Init:
  8709                           	callstack 28
  8710   004494                     
  8711                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8712   004494  010E               	movlb	14	; () banked
  8713   004496  51D9               	movf	217,w,b	;volatile
  8714   004498  0BF0               	andlw	-16
  8715   00449A  0908               	iorlw	8
  8716   00449C  6FD9               	movwf	217,b	;volatile
  8717   00449E                     
  8718                           ; BSR set to: 14
  8719                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8720   00449E  8BD9               	bsf	217,5,b	;volatile
  8721                           
  8722                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8723   0044A0  0E9F               	movlw	159
  8724   0044A2  6FD6               	movwf	214,b	;volatile
  8725   0044A4                     
  8726                           ; BSR set to: 14
  8727                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8728   0044A4  8A84               	bsf	132,5,c	;volatile
  8729   0044A6                     
  8730                           ; BSR set to: 14
  8731                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8732   0044A6  8C84               	bsf	132,6,c	;volatile
  8733   0044A8                     
  8734                           ; BSR set to: 14
  8735                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8736   0044A8  9BA7               	bcf	167,5,b	;volatile
  8737   0044AA                     
  8738                           ; BSR set to: 14
  8739                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8740   0044AA  9DA7               	bcf	167,6,b	;volatile
  8741                           
  8742                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8743   0044AC  0E1D               	movlw	29
  8744   0044AE  6F1D               	movwf	29,b	;volatile
  8745                           
  8746                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8747   0044B0  0E1E               	movlw	30
  8748   0044B2  6F1C               	movwf	28,b	;volatile
  8749                           
  8750                           ;i2c.c: 18:   RD5PPS=0x1C;
  8751   0044B4  0E1C               	movlw	28
  8752   0044B6  6F6F               	movwf	111,b	;volatile
  8753                           
  8754                           ;i2c.c: 19:   RD6PPS=0x1B;
  8755   0044B8  0E1B               	movlw	27
  8756   0044BA  6F70               	movwf	112,b	;volatile
  8757   0044BC                     
  8758                           ; BSR set to: 14
  8759   0044BC  0012               	return		;funcret
  8760   0044BE                     __end_of_I2C_2_Master_Init:
  8761                           	callstack 0
  8762                           
  8763 ;; *************** function _calibration_routine *****************
  8764 ;; Defined at:
  8765 ;;		line 151 in file "color.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;  cCal            1   68[COMRAM] PTR struct colors
  8768 ;;		 -> colorCalibration(8), 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8771 ;; Return value:  Size  Location     Type
  8772 ;;                  1    wreg      void 
  8773 ;; Registers used:
  8774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8780 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8781 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8783 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8784 ;;Total ram usage:       23 bytes
  8785 ;; Hardware stack levels used: 1
  8786 ;; Hardware stack levels required when called: 9
  8787 ;; This function calls:
  8788 ;;		_color_read_Blue
  8789 ;;		_color_read_Clear
  8790 ;;		_color_read_Green
  8791 ;;		_color_read_Red
  8792 ;;		_sendStringSerial4
  8793 ;;		_sprintf
  8794 ;; This function is called by:
  8795 ;;		_main
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text46
  8800   002856                     __ptext46:
  8801                           	callstack 0
  8802   002856                     _calibration_routine:
  8803                           	callstack 21
  8804   002856                     
  8805                           ;color.c: 151: void calibration_routine(struct colors *cCal);color.c: 152: {;color.c: 15
      +                          4:     LATGbits.LATG0 = 0;
  8806   002856  907F               	bcf	127,0,c	;volatile
  8807                           
  8808                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8809   002858  9E7D               	bcf	125,7,c	;volatile
  8810                           
  8811                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8812   00285A  9679               	bcf	121,3,c	;volatile
  8813   00285C                     
  8814                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8815   00285C  0E60               	movlw	low calibration_routine@cal_state
  8816   00285E  6E32               	movwf	sprintf@s^0,c
  8817   002860  0E6D               	movlw	low STR_1
  8818   002862  6E33               	movwf	sprintf@fmt^0,c
  8819   002864  0EA6               	movlw	low STR_2
  8820   002866  6E34               	movwf	(?_sprintf+2)^0,c
  8821   002868  5034               	movf	(?_sprintf+2)^0,w,c
  8822   00286A  A4D8               	btfss	status,2,c
  8823   00286C  0E0E               	movlw	high __smallconst
  8824   00286E  6E35               	movwf	(?_sprintf+3)^0,c
  8825   002870  EC38  F021         	call	_sprintf	;wreg free
  8826   002874                     
  8827                           ;color.c: 163:     sendStringSerial4(cal_state);
  8828   002874  0E60               	movlw	low calibration_routine@cal_state
  8829   002876  6E03               	movwf	sendStringSerial4@string^0,c
  8830   002878  ECE9  F021         	call	_sendStringSerial4	;wreg free
  8831   00287C                     l96:
  8832                           
  8833                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  8834   00287C  B48E               	btfsc	142,2,c	;volatile
  8835   00287E  EF43  F014         	goto	u5111
  8836   002882  EF45  F014         	goto	u5110
  8837   002886                     u5111:
  8838   002886  EF3E  F014         	goto	l96
  8839   00288A                     u5110:
  8840   00288A                     
  8841                           ;color.c: 170:     LATGbits.LATG0 = 1;
  8842   00288A  807F               	bsf	127,0,c	;volatile
  8843   00288C                     
  8844                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8845   00288C  0E29               	movlw	41
  8846   00288E  6E47               	movwf	(??_calibration_routine+1)^0,c
  8847   002890  0E96               	movlw	150
  8848   002892  6E46               	movwf	??_calibration_routine^0,c
  8849   002894  0E7F               	movlw	127
  8850   002896                     u5687:
  8851   002896  2EE8               	decfsz	wreg,f,c
  8852   002898  D7FE               	bra	u5687
  8853   00289A  2E46               	decfsz	??_calibration_routine^0,f,c
  8854   00289C  D7FC               	bra	u5687
  8855   00289E  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8856   0028A0  D7FA               	bra	u5687
  8857   0028A2  0000               	nop	
  8858   0028A4                     
  8859                           ;color.c: 172:     (cCal->red) = color_read_Red();
  8860   0028A4  EC97  F01F         	call	_color_read_Red	;wreg free
  8861   0028A8  5045               	movf	calibration_routine@cCal^0,w,c
  8862   0028AA  6ED9               	movwf	fsr2l,c
  8863   0028AC  6ADA               	clrf	fsr2h,c
  8864   0028AE  C006  FFDE         	movff	?_color_read_Red,postinc2
  8865   0028B2  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8866   0028B6                     
  8867                           ;color.c: 173:     LATGbits.LATG0 = 0;
  8868   0028B6  907F               	bcf	127,0,c	;volatile
  8869   0028B8                     
  8870                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8871   0028B8  0E60               	movlw	low calibration_routine@cal_state
  8872   0028BA  6E32               	movwf	sprintf@s^0,c
  8873   0028BC  0E01               	movlw	low STR_3
  8874   0028BE  6E33               	movwf	sprintf@fmt^0,c
  8875   0028C0  0EA6               	movlw	low STR_2
  8876   0028C2  6E34               	movwf	(?_sprintf+2)^0,c
  8877   0028C4  5034               	movf	(?_sprintf+2)^0,w,c
  8878   0028C6  A4D8               	btfss	status,2,c
  8879   0028C8  0E0E               	movlw	high __smallconst
  8880   0028CA  6E35               	movwf	(?_sprintf+3)^0,c
  8881   0028CC  EC38  F021         	call	_sprintf	;wreg free
  8882   0028D0                     
  8883                           ;color.c: 177:     sendStringSerial4(&cal_state);
  8884   0028D0  0E60               	movlw	low calibration_routine@cal_state
  8885   0028D2  6E03               	movwf	sendStringSerial4@string^0,c
  8886   0028D4  ECE9  F021         	call	_sendStringSerial4	;wreg free
  8887   0028D8                     l99:
  8888                           
  8889                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  8890   0028D8  B48E               	btfsc	142,2,c	;volatile
  8891   0028DA  EF71  F014         	goto	u5121
  8892   0028DE  EF73  F014         	goto	u5120
  8893   0028E2                     u5121:
  8894   0028E2  EF6C  F014         	goto	l99
  8895   0028E6                     u5120:
  8896   0028E6                     
  8897                           ;color.c: 183:     LATEbits.LATE7 = 1;
  8898   0028E6  8E7D               	bsf	125,7,c	;volatile
  8899   0028E8                     
  8900                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8901   0028E8  0E29               	movlw	41
  8902   0028EA  6E47               	movwf	(??_calibration_routine+1)^0,c
  8903   0028EC  0E96               	movlw	150
  8904   0028EE  6E46               	movwf	??_calibration_routine^0,c
  8905   0028F0  0E7F               	movlw	127
  8906   0028F2                     u5697:
  8907   0028F2  2EE8               	decfsz	wreg,f,c
  8908   0028F4  D7FE               	bra	u5697
  8909   0028F6  2E46               	decfsz	??_calibration_routine^0,f,c
  8910   0028F8  D7FC               	bra	u5697
  8911   0028FA  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8912   0028FC  D7FA               	bra	u5697
  8913   0028FE  0000               	nop	
  8914   002900                     
  8915                           ;color.c: 185:     (cCal->green) = color_read_Green();
  8916   002900  ECBF  F01F         	call	_color_read_Green	;wreg free
  8917   002904  5045               	movf	calibration_routine@cCal^0,w,c
  8918   002906  6ED9               	movwf	fsr2l,c
  8919   002908  6ADA               	clrf	fsr2h,c
  8920   00290A  0E02               	movlw	2
  8921   00290C  26D9               	addwf	fsr2l,f,c
  8922   00290E  C006  FFDE         	movff	?_color_read_Green,postinc2
  8923   002912  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8924   002916                     
  8925                           ;color.c: 186:     LATEbits.LATE7 = 0;
  8926   002916  9E7D               	bcf	125,7,c	;volatile
  8927   002918                     
  8928                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8929   002918  0E60               	movlw	low calibration_routine@cal_state
  8930   00291A  6E32               	movwf	sprintf@s^0,c
  8931   00291C  0E1E               	movlw	low STR_5
  8932   00291E  6E33               	movwf	sprintf@fmt^0,c
  8933   002920  0EA6               	movlw	low STR_2
  8934   002922  6E34               	movwf	(?_sprintf+2)^0,c
  8935   002924  5034               	movf	(?_sprintf+2)^0,w,c
  8936   002926  A4D8               	btfss	status,2,c
  8937   002928  0E0E               	movlw	high __smallconst
  8938   00292A  6E35               	movwf	(?_sprintf+3)^0,c
  8939   00292C  EC38  F021         	call	_sprintf	;wreg free
  8940   002930                     
  8941                           ;color.c: 190:     sendStringSerial4(&cal_state);
  8942   002930  0E60               	movlw	low calibration_routine@cal_state
  8943   002932  6E03               	movwf	sendStringSerial4@string^0,c
  8944   002934  ECE9  F021         	call	_sendStringSerial4	;wreg free
  8945   002938                     l102:
  8946                           
  8947                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  8948   002938  B48E               	btfsc	142,2,c	;volatile
  8949   00293A  EFA1  F014         	goto	u5131
  8950   00293E  EFA3  F014         	goto	u5130
  8951   002942                     u5131:
  8952   002942  EF9C  F014         	goto	l102
  8953   002946                     u5130:
  8954   002946                     
  8955                           ;color.c: 196:     LATAbits.LATA3 = 1;
  8956   002946  8679               	bsf	121,3,c	;volatile
  8957   002948                     
  8958                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8959   002948  0E29               	movlw	41
  8960   00294A  6E47               	movwf	(??_calibration_routine+1)^0,c
  8961   00294C  0E96               	movlw	150
  8962   00294E  6E46               	movwf	??_calibration_routine^0,c
  8963   002950  0E7F               	movlw	127
  8964   002952                     u5707:
  8965   002952  2EE8               	decfsz	wreg,f,c
  8966   002954  D7FE               	bra	u5707
  8967   002956  2E46               	decfsz	??_calibration_routine^0,f,c
  8968   002958  D7FC               	bra	u5707
  8969   00295A  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8970   00295C  D7FA               	bra	u5707
  8971   00295E  0000               	nop	
  8972   002960                     
  8973                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  8974   002960  EC0F  F020         	call	_color_read_Blue	;wreg free
  8975   002964  5045               	movf	calibration_routine@cCal^0,w,c
  8976   002966  6ED9               	movwf	fsr2l,c
  8977   002968  6ADA               	clrf	fsr2h,c
  8978   00296A  0E04               	movlw	4
  8979   00296C  26D9               	addwf	fsr2l,f,c
  8980   00296E  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8981   002972  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8982   002976                     
  8983                           ;color.c: 199:     LATAbits.LATA3 = 0;
  8984   002976  9679               	bcf	121,3,c	;volatile
  8985   002978                     
  8986                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  8987   002978  0E60               	movlw	low calibration_routine@cal_state
  8988   00297A  6E32               	movwf	sprintf@s^0,c
  8989   00297C  0E39               	movlw	low STR_7
  8990   00297E  6E33               	movwf	sprintf@fmt^0,c
  8991   002980  0EA6               	movlw	low STR_2
  8992   002982  6E34               	movwf	(?_sprintf+2)^0,c
  8993   002984  5034               	movf	(?_sprintf+2)^0,w,c
  8994   002986  A4D8               	btfss	status,2,c
  8995   002988  0E0E               	movlw	high __smallconst
  8996   00298A  6E35               	movwf	(?_sprintf+3)^0,c
  8997   00298C  EC38  F021         	call	_sprintf	;wreg free
  8998   002990                     
  8999                           ;color.c: 203:     sendStringSerial4(&cal_state);
  9000   002990  0E60               	movlw	low calibration_routine@cal_state
  9001   002992  6E03               	movwf	sendStringSerial4@string^0,c
  9002   002994  ECE9  F021         	call	_sendStringSerial4	;wreg free
  9003   002998                     l105:
  9004                           
  9005                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  9006   002998  B48E               	btfsc	142,2,c	;volatile
  9007   00299A  EFD1  F014         	goto	u5141
  9008   00299E  EFD3  F014         	goto	u5140
  9009   0029A2                     u5141:
  9010   0029A2  EFCC  F014         	goto	l105
  9011   0029A6                     u5140:
  9012   0029A6                     
  9013                           ;color.c: 208:     LATGbits.LATG0 = 1;
  9014   0029A6  807F               	bsf	127,0,c	;volatile
  9015                           
  9016                           ;color.c: 209:     LATEbits.LATE7 = 1;
  9017   0029A8  8E7D               	bsf	125,7,c	;volatile
  9018                           
  9019                           ;color.c: 210:     LATAbits.LATA3 = 1;
  9020   0029AA  8679               	bsf	121,3,c	;volatile
  9021   0029AC                     
  9022                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9023   0029AC  0E29               	movlw	41
  9024   0029AE  6E47               	movwf	(??_calibration_routine+1)^0,c
  9025   0029B0  0E96               	movlw	150
  9026   0029B2  6E46               	movwf	??_calibration_routine^0,c
  9027   0029B4  0E7F               	movlw	127
  9028   0029B6                     u5717:
  9029   0029B6  2EE8               	decfsz	wreg,f,c
  9030   0029B8  D7FE               	bra	u5717
  9031   0029BA  2E46               	decfsz	??_calibration_routine^0,f,c
  9032   0029BC  D7FC               	bra	u5717
  9033   0029BE  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9034   0029C0  D7FA               	bra	u5717
  9035   0029C2  0000               	nop	
  9036   0029C4                     
  9037                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  9038   0029C4  ECE7  F01F         	call	_color_read_Clear	;wreg free
  9039   0029C8  5045               	movf	calibration_routine@cCal^0,w,c
  9040   0029CA  6ED9               	movwf	fsr2l,c
  9041   0029CC  6ADA               	clrf	fsr2h,c
  9042   0029CE  0E06               	movlw	6
  9043   0029D0  26D9               	addwf	fsr2l,f,c
  9044   0029D2  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9045   0029D6  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9046   0029DA                     
  9047                           ;color.c: 213:     LATGbits.LATG0 = 0;
  9048   0029DA  907F               	bcf	127,0,c	;volatile
  9049   0029DC                     
  9050                           ;color.c: 214:     LATEbits.LATE7 = 0;
  9051   0029DC  9E7D               	bcf	125,7,c	;volatile
  9052   0029DE                     
  9053                           ;color.c: 215:     LATAbits.LATA3 = 0;
  9054   0029DE  9679               	bcf	121,3,c	;volatile
  9055   0029E0                     
  9056                           ;color.c: 219:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9057   0029E0  0E60               	movlw	low calibration_routine@cal_state
  9058   0029E2  6E32               	movwf	sprintf@s^0,c
  9059   0029E4  0E54               	movlw	low STR_9
  9060   0029E6  6E33               	movwf	sprintf@fmt^0,c
  9061   0029E8  0EA6               	movlw	low STR_2
  9062   0029EA  6E34               	movwf	(?_sprintf+2)^0,c
  9063   0029EC  5034               	movf	(?_sprintf+2)^0,w,c
  9064   0029EE  A4D8               	btfss	status,2,c
  9065   0029F0  0E0E               	movlw	high __smallconst
  9066   0029F2  6E35               	movwf	(?_sprintf+3)^0,c
  9067   0029F4  EC38  F021         	call	_sprintf	;wreg free
  9068   0029F8                     
  9069                           ;color.c: 220:     sendStringSerial4(&cal_state);
  9070   0029F8  0E60               	movlw	low calibration_routine@cal_state
  9071   0029FA  6E03               	movwf	sendStringSerial4@string^0,c
  9072   0029FC  ECE9  F021         	call	_sendStringSerial4	;wreg free
  9073   002A00                     l108:
  9074                           
  9075                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  9076   002A00  B48E               	btfsc	142,2,c	;volatile
  9077   002A02  EF05  F015         	goto	u5151
  9078   002A06  EF07  F015         	goto	u5150
  9079   002A0A                     u5151:
  9080   002A0A  EF00  F015         	goto	l108
  9081   002A0E                     u5150:
  9082   002A0E                     
  9083                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9084   002A0E  0E29               	movlw	41
  9085   002A10  6E47               	movwf	(??_calibration_routine+1)^0,c
  9086   002A12  0E96               	movlw	150
  9087   002A14  6E46               	movwf	??_calibration_routine^0,c
  9088   002A16  0E7F               	movlw	127
  9089   002A18                     u5727:
  9090   002A18  2EE8               	decfsz	wreg,f,c
  9091   002A1A  D7FE               	bra	u5727
  9092   002A1C  2E46               	decfsz	??_calibration_routine^0,f,c
  9093   002A1E  D7FC               	bra	u5727
  9094   002A20  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9095   002A22  D7FA               	bra	u5727
  9096   002A24  0000               	nop	
  9097   002A26  0012               	return		;funcret
  9098   002A28                     __end_of_calibration_routine:
  9099                           	callstack 0
  9100                           
  9101 ;; *************** function _sprintf *****************
  9102 ;; Defined at:
  9103 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  s               1   49[COMRAM] PTR unsigned char 
  9106 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9107 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9108 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9109 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  f              12   56[COMRAM] struct _IO_FILE
  9112 ;;  ret             2    0        int 
  9113 ;;  ap              1   55[COMRAM] PTR void [1]
  9114 ;;		 -> ?_sprintf(2), 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  2   49[COMRAM] int 
  9117 ;; Registers used:
  9118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9124 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9125 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9127 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9128 ;;Total ram usage:       19 bytes
  9129 ;; Hardware stack levels used: 1
  9130 ;; Hardware stack levels required when called: 8
  9131 ;; This function calls:
  9132 ;;		_vfprintf
  9133 ;; This function is called by:
  9134 ;;		_calibration_routine
  9135 ;;		_send2USART
  9136 ;;		_ADC2String
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text47
  9141   004270                     __ptext47:
  9142                           	callstack 0
  9143   004270                     _sprintf:
  9144                           	callstack 21
  9145   004270  0E34               	movlw	low (?_sprintf+2)
  9146   004272  6E38               	movwf	sprintf@ap^0,c
  9147   004274  C032  F039         	movff	sprintf@s,sprintf@f
  9148   004278  0E00               	movlw	0
  9149   00427A  6E3D               	movwf	(sprintf@f+4)^0,c
  9150   00427C  0E00               	movlw	0
  9151   00427E  6E3C               	movwf	(sprintf@f+3)^0,c
  9152   004280  0E00               	movlw	0
  9153   004282  6E44               	movwf	(sprintf@f+11)^0,c
  9154   004284  0E00               	movlw	0
  9155   004286  6E43               	movwf	(sprintf@f+10)^0,c
  9156   004288  0E39               	movlw	low sprintf@f
  9157   00428A  6E2E               	movwf	vfprintf@fp^0,c
  9158   00428C  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9159   004290  0E38               	movlw	low sprintf@ap
  9160   004292  6E30               	movwf	vfprintf@ap^0,c
  9161   004294  ECA0  F020         	call	_vfprintf	;wreg free
  9162   004298  5032               	movf	sprintf@s^0,w,c
  9163   00429A  243C               	addwf	(sprintf@f+3)^0,w,c
  9164   00429C  6ED9               	movwf	fsr2l,c
  9165   00429E  6ADA               	clrf	fsr2h,c
  9166   0042A0  6ADF               	clrf	indf2,c
  9167   0042A2  0012               	return		;funcret
  9168   0042A4                     __end_of_sprintf:
  9169                           	callstack 0
  9170                           
  9171 ;; *************** function _vfprintf *****************
  9172 ;; Defined at:
  9173 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9176 ;;		 -> sprintf@f(12), 
  9177 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9178 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9179 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9180 ;;  ap              1   47[COMRAM] PTR PTR void 
  9181 ;;		 -> sprintf@ap(1), 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9184 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9185 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  2   45[COMRAM] int 
  9188 ;; Registers used:
  9189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9195 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9198 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9199 ;;Total ram usage:        4 bytes
  9200 ;; Hardware stack levels used: 1
  9201 ;; Hardware stack levels required when called: 7
  9202 ;; This function calls:
  9203 ;;		_vfpfcnvrt
  9204 ;; This function is called by:
  9205 ;;		_sprintf
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           	psect	text48
  9210   004140                     __ptext48:
  9211                           	callstack 0
  9212   004140                     _vfprintf:
  9213                           	callstack 21
  9214   004140                     
  9215                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9216   004140  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9217                           
  9218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9219   004144  EFAC  F020         	goto	l5516
  9220   004148                     l5514:
  9221                           
  9222                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9223   004148  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9224   00414C  0E31               	movlw	low vfprintf@cfmt
  9225   00414E  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9226   004150  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9227   004154  ECEE  F015         	call	_vfpfcnvrt	;wreg free
  9228   004158                     l5516:
  9229                           
  9230                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9231   004158  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9232   00415C                     	if	1	;There is more than 1 active tblptr byte
  9233   00415C  0E0E               	movlw	high __smallconst
  9234   00415E  6EF7               	movwf	tblptrh,c
  9235   004160                     	endif
  9236   004160                     	if	0	;tblptru may be non-zero
  9237   004160                     	endif
  9238   004160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9239   004160  0E00               	movlw	low (__smallconst shr (0+16))
  9240   004162  6EF8               	movwf	tblptru,c
  9241   004164                     	endif
  9242   004164  0008               	tblrd		*
  9243   004166  50F5               	movf	tablat,w,c
  9244   004168  0900               	iorlw	0
  9245   00416A  A4D8               	btfss	status,2,c
  9246   00416C  EFBA  F020         	goto	u4971
  9247   004170  EFBC  F020         	goto	u4970
  9248   004174                     u4971:
  9249   004174  EFA4  F020         	goto	l5514
  9250   004178                     u4970:
  9251   004178                     
  9252                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9253   004178  0E00               	movlw	0
  9254   00417A  6E2F               	movwf	(?_vfprintf+1)^0,c
  9255   00417C  0E00               	movlw	0
  9256   00417E  6E2E               	movwf	?_vfprintf^0,c
  9257   004180  0012               	return		;funcret
  9258   004182                     __end_of_vfprintf:
  9259                           	callstack 0
  9260                           
  9261 ;; *************** function _vfpfcnvrt *****************
  9262 ;; Defined at:
  9263 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9266 ;;		 -> sprintf@f(12), 
  9267 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9268 ;;		 -> vfprintf@cfmt(1), 
  9269 ;;  ap              1   36[COMRAM] PTR PTR void 
  9270 ;;		 -> sprintf@ap(1), 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  convarg         4   39[COMRAM] struct .
  9273 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9274 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9275 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9276 ;;  done            1   43[COMRAM] _Bool 
  9277 ;;  c               1    0        unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9287 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9288 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9289 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9290 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9291 ;;Total ram usage:       11 bytes
  9292 ;; Hardware stack levels used: 1
  9293 ;; Hardware stack levels required when called: 6
  9294 ;; This function calls:
  9295 ;;		_dtoa
  9296 ;;		_fputc
  9297 ;;		_read_prec_or_width
  9298 ;; This function is called by:
  9299 ;;		_vfprintf
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text49
  9304   002BDC                     __ptext49:
  9305                           	callstack 0
  9306   002BDC                     _vfpfcnvrt:
  9307                           	callstack 21
  9308   002BDC                     
  9309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9310   002BDC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9311   002BDE  6ED9               	movwf	fsr2l,c
  9312   002BE0  6ADA               	clrf	fsr2h,c
  9313   002BE2  CFDF FFF6          	movff	indf2,tblptrl
  9314   002BE6                     	if	1	;There is more than 1 active tblptr byte
  9315   002BE6  0E0E               	movlw	high __smallconst
  9316   002BE8  6EF7               	movwf	tblptrh,c
  9317   002BEA                     	endif
  9318   002BEA                     	if	0	;tblptru may be non-zero
  9319   002BEA                     	endif
  9320   002BEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9321   002BEA  0E00               	movlw	low (__smallconst shr (0+16))
  9322   002BEC  6EF8               	movwf	tblptru,c
  9323   002BEE                     	endif
  9324   002BEE  0008               	tblrd		*
  9325   002BF0  50F5               	movf	tablat,w,c
  9326   002BF2  0A25               	xorlw	37
  9327   002BF4  A4D8               	btfss	status,2,c
  9328   002BF6  EFFF  F015         	goto	u4821
  9329   002BFA  EF01  F016         	goto	u4820
  9330   002BFE                     u4821:
  9331   002BFE  EF9E  F016         	goto	l5406
  9332   002C02                     u4820:
  9333   002C02                     
  9334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9335   002C02  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9336   002C04  6ED9               	movwf	fsr2l,c
  9337   002C06  6ADA               	clrf	fsr2h,c
  9338   002C08  2ADF               	incf	indf2,f,c
  9339   002C0A                     
  9340                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9341   002C0A  0E00               	movlw	0
  9342   002C0C  0100               	movlb	0	; () banked
  9343   002C0E  6FC5               	movwf	(_width+1)& (0+255),b
  9344   002C10  0E00               	movlw	0
  9345   002C12  6FC4               	movwf	_width& (0+255),b
  9346   002C14  C0C4  F0C8         	movff	_width,_flags
  9347   002C18                     
  9348                           ; BSR set to: 0
  9349                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9350   002C18  69C6               	setf	_prec& (0+255),b
  9351   002C1A  69C7               	setf	(_prec+1)& (0+255),b
  9352   002C1C                     
  9353                           ; BSR set to: 0
  9354                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9355   002C1C  0E00               	movlw	0
  9356   002C1E  6E2C               	movwf	vfpfcnvrt@done^0,c
  9357                           
  9358                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9359   002C20  EF39  F016         	goto	l5380
  9360   002C24                     l5370:
  9361                           
  9362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9363   002C24  0100               	movlb	0	; () banked
  9364   002C26  83C8               	bsf	_flags& (0+255),1,b
  9365   002C28                     
  9366                           ; BSR set to: 0
  9367                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9368   002C28  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9369   002C2A  6ED9               	movwf	fsr2l,c
  9370   002C2C  6ADA               	clrf	fsr2h,c
  9371   002C2E  2ADF               	incf	indf2,f,c
  9372                           
  9373                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9374   002C30  EF39  F016         	goto	l5380
  9375   002C34                     l5374:
  9376                           
  9377                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9378   002C34  0E01               	movlw	1
  9379   002C36  6E2C               	movwf	vfpfcnvrt@done^0,c
  9380                           
  9381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9382   002C38  EF39  F016         	goto	l5380
  9383   002C3C                     l5378:
  9384   002C3C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9385   002C3E  6ED9               	movwf	fsr2l,c
  9386   002C40  6ADA               	clrf	fsr2h,c
  9387   002C42  CFDF FFF6          	movff	indf2,tblptrl
  9388   002C46                     	if	1	;There is more than 1 active tblptr byte
  9389   002C46  0E0E               	movlw	high __smallconst
  9390   002C48  6EF7               	movwf	tblptrh,c
  9391   002C4A                     	endif
  9392   002C4A                     	if	0	;tblptru may be non-zero
  9393   002C4A                     	endif
  9394   002C4A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9395   002C4A  0E00               	movlw	low (__smallconst shr (0+16))
  9396   002C4C  6EF8               	movwf	tblptru,c
  9397   002C4E                     	endif
  9398   002C4E  0008               	tblrd		*
  9399   002C50  50F5               	movf	tablat,w,c
  9400   002C52  6E26               	movwf	??_vfpfcnvrt^0,c
  9401   002C54  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9402                           
  9403                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9404                           ; Switch size 1, requested type "simple"
  9405                           ; Number of cases is 1, Range of values is 0 to 0
  9406                           ; switch strategies available:
  9407                           ; Name         Instructions Cycles
  9408                           ; simple_byte            4     3 (average)
  9409                           ;	Chosen strategy is simple_byte
  9410   002C56  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9411   002C58  0A00               	xorlw	0	; case 0
  9412   002C5A  B4D8               	btfsc	status,2,c
  9413   002C5C  EF32  F016         	goto	l6148
  9414   002C60  EF1A  F016         	goto	l5374
  9415   002C64                     l6148:
  9416                           
  9417                           ; Switch size 1, requested type "simple"
  9418                           ; Number of cases is 1, Range of values is 48 to 48
  9419                           ; switch strategies available:
  9420                           ; Name         Instructions Cycles
  9421                           ; simple_byte            4     3 (average)
  9422                           ;	Chosen strategy is simple_byte
  9423   002C64  5026               	movf	??_vfpfcnvrt^0,w,c
  9424   002C66  0A30               	xorlw	48	; case 48
  9425   002C68  B4D8               	btfsc	status,2,c
  9426   002C6A  EF12  F016         	goto	l5370
  9427   002C6E  EF1A  F016         	goto	l5374
  9428   002C72                     l5380:
  9429                           
  9430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9431   002C72  502C               	movf	vfpfcnvrt@done^0,w,c
  9432   002C74  B4D8               	btfsc	status,2,c
  9433   002C76  EF3F  F016         	goto	u4831
  9434   002C7A  EF41  F016         	goto	u4830
  9435   002C7E                     u4831:
  9436   002C7E  EF1E  F016         	goto	l5378
  9437   002C82                     u4830:
  9438   002C82                     
  9439                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9440   002C82  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9441   002C86  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9442   002C8A  EC13  F01B         	call	_read_prec_or_width	;wreg free
  9443   002C8E  C008  F0C4         	movff	?_read_prec_or_width,_width
  9444   002C92  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
  9445   002C96                     
  9446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9447   002C96  0100               	movlb	0	; () banked
  9448   002C98  BFC5               	btfsc	(_width+1)& (0+255),7,b
  9449   002C9A  EF53  F016         	goto	u4840
  9450   002C9E  EF51  F016         	goto	u4841
  9451   002CA2                     u4841:
  9452   002CA2  EF58  F016         	goto	l5388
  9453   002CA6                     u4840:
  9454   002CA6                     
  9455                           ; BSR set to: 0
  9456                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9457   002CA6  81C8               	bsf	_flags& (0+255),0,b
  9458                           
  9459                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9460   002CA8  6DC4               	negf	_width& (0+255),b
  9461   002CAA  1FC5               	comf	(_width+1)& (0+255),f,b
  9462   002CAC  B0D8               	btfsc	status,0,c
  9463   002CAE  2BC5               	incf	(_width+1)& (0+255),f,b
  9464   002CB0                     l5388:
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9468   002CB0  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9469   002CB2  6ED9               	movwf	fsr2l,c
  9470   002CB4  6ADA               	clrf	fsr2h,c
  9471   002CB6  50DF               	movf	indf2,w,c
  9472   002CB8  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9473   002CBA                     
  9474                           ; BSR set to: 0
  9475                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9476   002CBA  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9477   002CBE                     	if	1	;There is more than 1 active tblptr byte
  9478   002CBE  0E0E               	movlw	high __smallconst
  9479   002CC0  6EF7               	movwf	tblptrh,c
  9480   002CC2                     	endif
  9481   002CC2                     	if	0	;tblptru may be non-zero
  9482   002CC2                     	endif
  9483   002CC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9484   002CC2  0E00               	movlw	low (__smallconst shr (0+16))
  9485   002CC4  6EF8               	movwf	tblptru,c
  9486   002CC6                     	endif
  9487   002CC6  0008               	tblrd		*
  9488   002CC8  50F5               	movf	tablat,w,c
  9489   002CCA  0A64               	xorlw	100
  9490   002CCC  B4D8               	btfsc	status,2,c
  9491   002CCE  EF6B  F016         	goto	u4851
  9492   002CD2  EF6D  F016         	goto	u4850
  9493   002CD6                     u4851:
  9494   002CD6  EF7D  F016         	goto	l5394
  9495   002CDA                     u4850:
  9496   002CDA                     
  9497                           ; BSR set to: 0
  9498   002CDA  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9499   002CDE                     	if	1	;There is more than 1 active tblptr byte
  9500   002CDE  0E0E               	movlw	high __smallconst
  9501   002CE0  6EF7               	movwf	tblptrh,c
  9502   002CE2                     	endif
  9503   002CE2                     	if	0	;tblptru may be non-zero
  9504   002CE2                     	endif
  9505   002CE2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9506   002CE2  0E00               	movlw	low (__smallconst shr (0+16))
  9507   002CE4  6EF8               	movwf	tblptru,c
  9508   002CE6                     	endif
  9509   002CE6  0008               	tblrd		*
  9510   002CE8  50F5               	movf	tablat,w,c
  9511   002CEA  0A69               	xorlw	105
  9512   002CEC  A4D8               	btfss	status,2,c
  9513   002CEE  EF7B  F016         	goto	u4861
  9514   002CF2  EF7D  F016         	goto	u4860
  9515   002CF6                     u4861:
  9516   002CF6  EF98  F016         	goto	l5402
  9517   002CFA                     u4860:
  9518   002CFA                     l5394:
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9522   002CFA  5025               	movf	vfpfcnvrt@ap^0,w,c
  9523   002CFC  6ED9               	movwf	fsr2l,c
  9524   002CFE  6ADA               	clrf	fsr2h,c
  9525   002D00  0E02               	movlw	2
  9526   002D02  26DF               	addwf	indf2,f,c
  9527   002D04  5CDF               	subwf	indf2,w,c
  9528   002D06  6ED9               	movwf	fsr2l,c
  9529   002D08  6ADA               	clrf	fsr2h,c
  9530   002D0A  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9531   002D0E  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9532   002D12                     
  9533                           ; BSR set to: 0
  9534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9535   002D12  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9536   002D14  6ED9               	movwf	fsr2l,c
  9537   002D16  6ADA               	clrf	fsr2h,c
  9538   002D18  282D               	incf	vfpfcnvrt@cp^0,w,c
  9539   002D1A  6EDF               	movwf	indf2,c
  9540   002D1C                     
  9541                           ; BSR set to: 0
  9542                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9543   002D1C  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9544   002D20  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9545   002D24  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9546   002D28  ECB2  F016         	call	_dtoa	;wreg free
  9547   002D2C  EFB1  F016         	goto	l1416
  9548   002D30                     l5402:
  9549                           
  9550                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9551   002D30  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9552   002D32  6ED9               	movwf	fsr2l,c
  9553   002D34  6ADA               	clrf	fsr2h,c
  9554   002D36  2ADF               	incf	indf2,f,c
  9555   002D38  EFB1  F016         	goto	l1416
  9556   002D3C                     l5406:
  9557                           
  9558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9559   002D3C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9560   002D3E  6ED9               	movwf	fsr2l,c
  9561   002D40  6ADA               	clrf	fsr2h,c
  9562   002D42  CFDF FFF6          	movff	indf2,tblptrl
  9563   002D46                     	if	1	;There is more than 1 active tblptr byte
  9564   002D46  0E0E               	movlw	high __smallconst
  9565   002D48  6EF7               	movwf	tblptrh,c
  9566   002D4A                     	endif
  9567   002D4A                     	if	0	;tblptru may be non-zero
  9568   002D4A                     	endif
  9569   002D4A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9570   002D4A  0E00               	movlw	low (__smallconst shr (0+16))
  9571   002D4C  6EF8               	movwf	tblptru,c
  9572   002D4E                     	endif
  9573   002D4E  0008               	tblrd		*
  9574   002D50  50F5               	movf	tablat,w,c
  9575   002D52  6E02               	movwf	fputc@c^0,c
  9576   002D54  6A03               	clrf	(fputc@c+1)^0,c
  9577   002D56  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9578   002D5A  ECBF  F01B         	call	_fputc	;wreg free
  9579   002D5E  EF98  F016         	goto	l5402
  9580   002D62                     l1416:
  9581   002D62  0012               	return		;funcret
  9582   002D64                     __end_of_vfpfcnvrt:
  9583                           	callstack 0
  9584                           
  9585 ;; *************** function _read_prec_or_width *****************
  9586 ;; Defined at:
  9587 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9590 ;;		 -> vfprintf@cfmt(1), 
  9591 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9592 ;;		 -> sprintf@ap(1), 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  c               1    9[COMRAM] unsigned char 
  9595 ;;  n               2   10[COMRAM] int 
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  2    7[COMRAM] int 
  9598 ;; Registers used:
  9599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9606 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9608 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9609 ;;Total ram usage:        5 bytes
  9610 ;; Hardware stack levels used: 1
  9611 ;; Hardware stack levels required when called: 2
  9612 ;; This function calls:
  9613 ;;		___wmul
  9614 ;; This function is called by:
  9615 ;;		_vfpfcnvrt
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text50
  9620   003626                     __ptext50:
  9621                           	callstack 0
  9622   003626                     _read_prec_or_width:
  9623                           	callstack 24
  9624   003626                     
  9625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9626   003626  0E00               	movlw	0
  9627   003628  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9628   00362A  0E00               	movlw	0
  9629   00362C  6E0B               	movwf	read_prec_or_width@n^0,c
  9630   00362E                     
  9631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9632   00362E  5008               	movf	read_prec_or_width@fmt^0,w,c
  9633   003630  6ED9               	movwf	fsr2l,c
  9634   003632  6ADA               	clrf	fsr2h,c
  9635   003634  CFDF FFF6          	movff	indf2,tblptrl
  9636   003638                     	if	1	;There is more than 1 active tblptr byte
  9637   003638  0E0E               	movlw	high __smallconst
  9638   00363A  6EF7               	movwf	tblptrh,c
  9639   00363C                     	endif
  9640   00363C                     	if	0	;tblptru may be non-zero
  9641   00363C                     	endif
  9642   00363C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9643   00363C  0E00               	movlw	low (__smallconst shr (0+16))
  9644   00363E  6EF8               	movwf	tblptru,c
  9645   003640                     	endif
  9646   003640  0008               	tblrd		*
  9647   003642  50F5               	movf	tablat,w,c
  9648   003644  0A2A               	xorlw	42
  9649   003646  A4D8               	btfss	status,2,c
  9650   003648  EF28  F01B         	goto	u4781
  9651   00364C  EF2A  F01B         	goto	u4780
  9652   003650                     u4781:
  9653   003650  EF50  F01B         	goto	l5342
  9654   003654                     u4780:
  9655   003654                     
  9656                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9657   003654  5008               	movf	read_prec_or_width@fmt^0,w,c
  9658   003656  6ED9               	movwf	fsr2l,c
  9659   003658  6ADA               	clrf	fsr2h,c
  9660   00365A  2ADF               	incf	indf2,f,c
  9661   00365C                     
  9662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9663   00365C  5009               	movf	read_prec_or_width@ap^0,w,c
  9664   00365E  6ED9               	movwf	fsr2l,c
  9665   003660  6ADA               	clrf	fsr2h,c
  9666   003662  0E02               	movlw	2
  9667   003664  26DF               	addwf	indf2,f,c
  9668   003666  5CDF               	subwf	indf2,w,c
  9669   003668  6ED9               	movwf	fsr2l,c
  9670   00366A  6ADA               	clrf	fsr2h,c
  9671   00366C  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9672   003670  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9673                           
  9674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9675   003674  EF65  F01B         	goto	l1397
  9676   003678                     l5338:
  9677                           
  9678                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9679   003678  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9680   00367C  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9681   003680  0E00               	movlw	0
  9682   003682  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9683   003684  0E0A               	movlw	10
  9684   003686  6E04               	movwf	___wmul@multiplicand^0,c
  9685   003688  EC87  F022         	call	___wmul	;wreg free
  9686   00368C  500A               	movf	read_prec_or_width@c^0,w,c
  9687   00368E  2402               	addwf	?___wmul^0,w,c
  9688   003690  6E0B               	movwf	read_prec_or_width@n^0,c
  9689   003692  0E00               	movlw	0
  9690   003694  2003               	addwfc	(?___wmul+1)^0,w,c
  9691   003696  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9692   003698                     
  9693                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9694   003698  5008               	movf	read_prec_or_width@fmt^0,w,c
  9695   00369A  6ED9               	movwf	fsr2l,c
  9696   00369C  6ADA               	clrf	fsr2h,c
  9697   00369E  2ADF               	incf	indf2,f,c
  9698   0036A0                     l5342:
  9699                           
  9700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9701   0036A0  5008               	movf	read_prec_or_width@fmt^0,w,c
  9702   0036A2  6ED9               	movwf	fsr2l,c
  9703   0036A4  6ADA               	clrf	fsr2h,c
  9704   0036A6  CFDF FFF6          	movff	indf2,tblptrl
  9705   0036AA                     	if	1	;There is more than 1 active tblptr byte
  9706   0036AA  0E0E               	movlw	high __smallconst
  9707   0036AC  6EF7               	movwf	tblptrh,c
  9708   0036AE                     	endif
  9709   0036AE                     	if	0	;tblptru may be non-zero
  9710   0036AE                     	endif
  9711   0036AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9712   0036AE  0E00               	movlw	low (__smallconst shr (0+16))
  9713   0036B0  6EF8               	movwf	tblptru,c
  9714   0036B2                     	endif
  9715   0036B2  0008               	tblrd		*
  9716   0036B4  50F5               	movf	tablat,w,c
  9717   0036B6  0FD0               	addlw	208
  9718   0036B8  6E0A               	movwf	read_prec_or_width@c^0,c
  9719   0036BA  0E09               	movlw	9
  9720   0036BC  640A               	cpfsgt	read_prec_or_width@c^0,c
  9721   0036BE  EF63  F01B         	goto	u4791
  9722   0036C2  EF65  F01B         	goto	u4790
  9723   0036C6                     u4791:
  9724   0036C6  EF3C  F01B         	goto	l5338
  9725   0036CA                     u4790:
  9726   0036CA                     l1397:
  9727                           
  9728                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9729   0036CA  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9730   0036CE  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9731   0036D2  0012               	return		;funcret
  9732   0036D4                     __end_of_read_prec_or_width:
  9733                           	callstack 0
  9734                           
  9735 ;; *************** function ___wmul *****************
  9736 ;; Defined at:
  9737 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  multiplier      2    1[COMRAM] unsigned int 
  9740 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  product         2    5[COMRAM] unsigned int 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  2    1[COMRAM] unsigned int 
  9745 ;; Registers used:
  9746 ;;		wreg, status,2, status,0, prodl, prodh
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9752 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9755 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9756 ;;Total ram usage:        6 bytes
  9757 ;; Hardware stack levels used: 1
  9758 ;; Hardware stack levels required when called: 1
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_setMotorPWM
  9763 ;;		_read_prec_or_width
  9764 ;;		_ADC2String
  9765 ;;		_returnHome
  9766 ;;		_logAction
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           	psect	text51
  9771   00450E                     __ptext51:
  9772                           	callstack 0
  9773   00450E                     ___wmul:
  9774                           	callstack 27
  9775   00450E  5002               	movf	___wmul@multiplier^0,w,c
  9776   004510  0204               	mulwf	___wmul@multiplicand^0,c
  9777   004512  CFF3 F006          	movff	prodl,___wmul@product
  9778   004516  CFF4 F007          	movff	prodh,___wmul@product+1
  9779   00451A  5002               	movf	___wmul@multiplier^0,w,c
  9780   00451C  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9781   00451E  50F3               	movf	243,w,c
  9782   004520  2607               	addwf	(___wmul@product+1)^0,f,c
  9783   004522  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9784   004524  0204               	mulwf	___wmul@multiplicand^0,c
  9785   004526  50F3               	movf	243,w,c
  9786   004528  2607               	addwf	(___wmul@product+1)^0,f,c
  9787   00452A  C006  F002         	movff	___wmul@product,?___wmul
  9788   00452E  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9789   004532  0012               	return		;funcret
  9790   004534                     __end_of___wmul:
  9791                           	callstack 0
  9792                           
  9793 ;; *************** function _dtoa *****************
  9794 ;; Defined at:
  9795 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9798 ;;		 -> sprintf@f(12), 
  9799 ;;  d               2   24[COMRAM] int 
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  i               2   32[COMRAM] int 
  9802 ;;  w               2   29[COMRAM] int 
  9803 ;;  s               1   31[COMRAM] unsigned char 
  9804 ;;  p               1   28[COMRAM] _Bool 
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      void 
  9807 ;; Registers used:
  9808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9814 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9815 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9817 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9818 ;;Total ram usage:       11 bytes
  9819 ;; Hardware stack levels used: 1
  9820 ;; Hardware stack levels required when called: 5
  9821 ;; This function calls:
  9822 ;;		___awdiv
  9823 ;;		___awmod
  9824 ;;		_abs
  9825 ;;		_pad
  9826 ;; This function is called by:
  9827 ;;		_vfpfcnvrt
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text52
  9832   002D64                     __ptext52:
  9833                           	callstack 0
  9834   002D64                     _dtoa:
  9835                           	callstack 21
  9836   002D64                     
  9837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9838   002D64  0E01               	movlw	1
  9839   002D66  6E1D               	movwf	dtoa@p^0,c
  9840   002D68                     
  9841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9842   002D68  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9843   002D6A  EFB9  F016         	goto	u4681
  9844   002D6E  EFBC  F016         	goto	u4680
  9845   002D72                     u4681:
  9846   002D72  0E01               	movlw	1
  9847   002D74  EFBD  F016         	goto	u4690
  9848   002D78                     u4680:
  9849   002D78  0E00               	movlw	0
  9850   002D7A                     u4690:
  9851   002D7A  6E20               	movwf	dtoa@s^0,c
  9852   002D7C                     
  9853                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9854   002D7C  C0C4  F01E         	movff	_width,dtoa@w
  9855   002D80  C0C5  F01F         	movff	_width+1,dtoa@w+1
  9856   002D84                     
  9857                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9858   002D84  5020               	movf	dtoa@s^0,w,c
  9859   002D86  B4D8               	btfsc	status,2,c
  9860   002D88  EFC8  F016         	goto	u4701
  9861   002D8C  EFCA  F016         	goto	u4700
  9862   002D90                     u4701:
  9863   002D90  EFE1  F016         	goto	l1380
  9864   002D94                     u4700:
  9865   002D94                     
  9866                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9867   002D94  061E               	decf	dtoa@w^0,f,c
  9868   002D96  A0D8               	btfss	status,0,c
  9869   002D98  061F               	decf	(dtoa@w+1)^0,f,c
  9870   002D9A                     
  9871                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9872   002D9A  5020               	movf	dtoa@s^0,w,c
  9873   002D9C  A4D8               	btfss	status,2,c
  9874   002D9E  EFD3  F016         	goto	u4711
  9875   002DA2  EFD5  F016         	goto	u4710
  9876   002DA6                     u4711:
  9877   002DA6  EFDB  F016         	goto	l5294
  9878   002DAA                     u4710:
  9879   002DAA  0E00               	movlw	0
  9880   002DAC  6E1C               	movwf	(_dtoa$3062+1)^0,c
  9881   002DAE  0E2B               	movlw	43
  9882   002DB0  6E1B               	movwf	_dtoa$3062^0,c
  9883   002DB2  EFDF  F016         	goto	l5296
  9884   002DB6                     l5294:
  9885   002DB6  0E00               	movlw	0
  9886   002DB8  6E1C               	movwf	(_dtoa$3062+1)^0,c
  9887   002DBA  0E2D               	movlw	45
  9888   002DBC  6E1B               	movwf	_dtoa$3062^0,c
  9889   002DBE                     l5296:
  9890   002DBE  C01B  F020         	movff	_dtoa$3062,dtoa@s
  9891   002DC2                     l1380:
  9892                           
  9893                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9894   002DC2  0E00               	movlw	0
  9895   002DC4  6E22               	movwf	(dtoa@i+1)^0,c
  9896   002DC6  0E1F               	movlw	31
  9897   002DC8  6E21               	movwf	dtoa@i^0,c
  9898   002DCA                     
  9899                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9900   002DCA  0E00               	movlw	0
  9901   002DCC  0101               	movlb	1	; () banked
  9902   002DCE  6FDD               	movwf	(_dbuf+31)& (0+255),b
  9903                           
  9904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9905   002DD0  EF19  F017         	goto	l5310
  9906   002DD4                     l5300:
  9907                           
  9908                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9909   002DD4  0621               	decf	dtoa@i^0,f,c
  9910   002DD6  A0D8               	btfss	status,0,c
  9911   002DD8  0622               	decf	(dtoa@i+1)^0,f,c
  9912   002DDA                     
  9913                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9914   002DDA  0EBE               	movlw	low _dbuf
  9915   002DDC  2421               	addwf	dtoa@i^0,w,c
  9916   002DDE  6ED9               	movwf	fsr2l,c
  9917   002DE0  0E01               	movlw	high _dbuf
  9918   002DE2  2022               	addwfc	(dtoa@i+1)^0,w,c
  9919   002DE4  6EDA               	movwf	fsr2h,c
  9920   002DE6  C019  F002         	movff	dtoa@d,___awmod@dividend
  9921   002DEA  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9922   002DEE  0E00               	movlw	0
  9923   002DF0  6E05               	movwf	(___awmod@divisor+1)^0,c
  9924   002DF2  0E0A               	movlw	10
  9925   002DF4  6E04               	movwf	___awmod@divisor^0,c
  9926   002DF6  ECBB  F01A         	call	___awmod	;wreg free
  9927   002DFA  C002  F008         	movff	?___awmod,abs@a
  9928   002DFE  C003  F009         	movff	?___awmod+1,abs@a+1
  9929   002E02  EC52  F021         	call	_abs	;wreg free
  9930   002E06  5008               	movf	?_abs^0,w,c
  9931   002E08  0F30               	addlw	48
  9932   002E0A  6EDF               	movwf	indf2,c
  9933   002E0C                     
  9934                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9935   002E0C  0E00               	movlw	0
  9936   002E0E  6E1D               	movwf	dtoa@p^0,c
  9937   002E10                     
  9938                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9939   002E10  061E               	decf	dtoa@w^0,f,c
  9940   002E12  A0D8               	btfss	status,0,c
  9941   002E14  061F               	decf	(dtoa@w+1)^0,f,c
  9942   002E16                     
  9943                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9944   002E16  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9945   002E1A  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9946   002E1E  0E00               	movlw	0
  9947   002E20  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9948   002E22  0E0A               	movlw	10
  9949   002E24  6E04               	movwf	___awdiv@divisor^0,c
  9950   002E26  ECF8  F019         	call	___awdiv	;wreg free
  9951   002E2A  C002  F019         	movff	?___awdiv,dtoa@d
  9952   002E2E  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9953   002E32                     l5310:
  9954                           
  9955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9956   002E32  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9957   002E34  EF24  F017         	goto	u4721
  9958   002E38  5022               	movf	(dtoa@i+1)^0,w,c
  9959   002E3A  E108               	bnz	u4720
  9960   002E3C  0421               	decf	dtoa@i^0,w,c
  9961   002E3E  A0D8               	btfss	status,0,c
  9962   002E40  EF24  F017         	goto	u4721
  9963   002E44  EF26  F017         	goto	u4720
  9964   002E48                     u4721:
  9965   002E48  EF4C  F017         	goto	l5320
  9966   002E4C                     u4720:
  9967   002E4C  5019               	movf	dtoa@d^0,w,c
  9968   002E4E  101A               	iorwf	(dtoa@d+1)^0,w,c
  9969   002E50  A4D8               	btfss	status,2,c
  9970   002E52  EF2D  F017         	goto	u4731
  9971   002E56  EF2F  F017         	goto	u4730
  9972   002E5A                     u4731:
  9973   002E5A  EFEA  F016         	goto	l5300
  9974   002E5E                     u4730:
  9975   002E5E  501D               	movf	dtoa@p^0,w,c
  9976   002E60  A4D8               	btfss	status,2,c
  9977   002E62  EF35  F017         	goto	u4741
  9978   002E66  EF37  F017         	goto	u4740
  9979   002E6A                     u4741:
  9980   002E6A  EFEA  F016         	goto	l5300
  9981   002E6E                     u4740:
  9982   002E6E  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9983   002E70  EF42  F017         	goto	u4751
  9984   002E74  501F               	movf	(dtoa@w+1)^0,w,c
  9985   002E76  E108               	bnz	u4750
  9986   002E78  041E               	decf	dtoa@w^0,w,c
  9987   002E7A  A0D8               	btfss	status,0,c
  9988   002E7C  EF42  F017         	goto	u4751
  9989   002E80  EF44  F017         	goto	u4750
  9990   002E84                     u4751:
  9991   002E84  EF4C  F017         	goto	l5320
  9992   002E88                     u4750:
  9993   002E88  0100               	movlb	0	; () banked
  9994   002E8A  B3C8               	btfsc	_flags& (0+255),1,b
  9995   002E8C  EF4A  F017         	goto	u4761
  9996   002E90  EF4C  F017         	goto	u4760
  9997   002E94                     u4761:
  9998   002E94  EFEA  F016         	goto	l5300
  9999   002E98                     u4760:
 10000   002E98                     l5320:
 10001                           
 10002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10003   002E98  5020               	movf	dtoa@s^0,w,c
 10004   002E9A  B4D8               	btfsc	status,2,c
 10005   002E9C  EF52  F017         	goto	u4771
 10006   002EA0  EF54  F017         	goto	u4770
 10007   002EA4                     u4771:
 10008   002EA4  EF5F  F017         	goto	l5326
 10009   002EA8                     u4770:
 10010   002EA8                     
 10011                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10012   002EA8  0621               	decf	dtoa@i^0,f,c
 10013   002EAA  A0D8               	btfss	status,0,c
 10014   002EAC  0622               	decf	(dtoa@i+1)^0,f,c
 10015   002EAE                     
 10016                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10017   002EAE  0EBE               	movlw	low _dbuf
 10018   002EB0  2421               	addwf	dtoa@i^0,w,c
 10019   002EB2  6ED9               	movwf	fsr2l,c
 10020   002EB4  0E01               	movlw	high _dbuf
 10021   002EB6  2022               	addwfc	(dtoa@i+1)^0,w,c
 10022   002EB8  6EDA               	movwf	fsr2h,c
 10023   002EBA  C020  FFDF         	movff	dtoa@s,indf2
 10024   002EBE                     l5326:
 10025                           
 10026                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10027   002EBE  C018  F010         	movff	dtoa@fp,pad@fp
 10028   002EC2  0EBE               	movlw	low _dbuf
 10029   002EC4  2421               	addwf	dtoa@i^0,w,c
 10030   002EC6  6E11               	movwf	pad@buf^0,c
 10031   002EC8  0E01               	movlw	high _dbuf
 10032   002ECA  2022               	addwfc	(dtoa@i+1)^0,w,c
 10033   002ECC  6E12               	movwf	(pad@buf+1)^0,c
 10034   002ECE  C01E  F013         	movff	dtoa@w,pad@p
 10035   002ED2  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10036   002ED6  EC14  F01C         	call	_pad	;wreg free
 10037   002EDA  0012               	return		;funcret
 10038   002EDC                     __end_of_dtoa:
 10039                           	callstack 0
 10040                           
 10041 ;; *************** function _pad *****************
 10042 ;; Defined at:
 10043 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10046 ;;		 -> sprintf@f(12), 
 10047 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10048 ;;		 -> dbuf(32), 
 10049 ;;  p               2   18[COMRAM] int 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  i               2   21[COMRAM] int 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10061 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10064 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10065 ;;Total ram usage:        8 bytes
 10066 ;; Hardware stack levels used: 1
 10067 ;; Hardware stack levels required when called: 4
 10068 ;; This function calls:
 10069 ;;		_fputc
 10070 ;;		_fputs
 10071 ;; This function is called by:
 10072 ;;		_dtoa
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           	psect	text53
 10077   003828                     __ptext53:
 10078                           	callstack 0
 10079   003828                     _pad:
 10080                           	callstack 21
 10081   003828                     
 10082                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10083   003828  0100               	movlb	0	; () banked
 10084   00382A  A1C8               	btfss	_flags& (0+255),0,b
 10085   00382C  EF1A  F01C         	goto	u4631
 10086   003830  EF1C  F01C         	goto	u4630
 10087   003834                     u4631:
 10088   003834  EF24  F01C         	goto	l5264
 10089   003838                     u4630:
 10090   003838                     
 10091                           ; BSR set to: 0
 10092                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10093   003838  C011  F00A         	movff	pad@buf,fputs@s
 10094   00383C  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10095   003840  C010  F00C         	movff	pad@fp,fputs@fp
 10096   003844  ECE2  F020         	call	_fputs	;wreg free
 10097   003848                     l5264:
 10098                           
 10099                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10100   003848  BE14               	btfsc	(pad@p+1)^0,7,c
 10101   00384A  EF2B  F01C         	goto	u4640
 10102   00384E  EF29  F01C         	goto	u4641
 10103   003852                     u4641:
 10104   003852  EF2F  F01C         	goto	l1372
 10105   003856                     u4640:
 10106   003856                     
 10107                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10108   003856  0E00               	movlw	0
 10109   003858  6E14               	movwf	(pad@p+1)^0,c
 10110   00385A  0E00               	movlw	0
 10111   00385C  6E13               	movwf	pad@p^0,c
 10112   00385E                     l1372:
 10113                           
 10114                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10115   00385E  0E00               	movlw	0
 10116   003860  6E17               	movwf	(pad@i+1)^0,c
 10117   003862  0E00               	movlw	0
 10118   003864  6E16               	movwf	pad@i^0,c
 10119                           
 10120                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10121   003866  EF3F  F01C         	goto	l5272
 10122   00386A                     l5268:
 10123                           
 10124                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10125   00386A  0E00               	movlw	0
 10126   00386C  6E03               	movwf	(fputc@c+1)^0,c
 10127   00386E  0E20               	movlw	32
 10128   003870  6E02               	movwf	fputc@c^0,c
 10129   003872  C010  F004         	movff	pad@fp,fputc@fp
 10130   003876  ECBF  F01B         	call	_fputc	;wreg free
 10131   00387A                     
 10132                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10133   00387A  4A16               	infsnz	pad@i^0,f,c
 10134   00387C  2A17               	incf	(pad@i+1)^0,f,c
 10135   00387E                     l5272:
 10136                           
 10137                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10138   00387E  5013               	movf	pad@p^0,w,c
 10139   003880  5C16               	subwf	pad@i^0,w,c
 10140   003882  5017               	movf	(pad@i+1)^0,w,c
 10141   003884  0A80               	xorlw	128
 10142   003886  6E15               	movwf	??_pad^0,c
 10143   003888  5014               	movf	(pad@p+1)^0,w,c
 10144   00388A  0A80               	xorlw	128
 10145   00388C  5815               	subwfb	??_pad^0,w,c
 10146   00388E  A0D8               	btfss	status,0,c
 10147   003890  EF4C  F01C         	goto	u4651
 10148   003894  EF4E  F01C         	goto	u4650
 10149   003898                     u4651:
 10150   003898  EF35  F01C         	goto	l5268
 10151   00389C                     u4650:
 10152   00389C                     
 10153                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10154   00389C  0100               	movlb	0	; () banked
 10155   00389E  B1C8               	btfsc	_flags& (0+255),0,b
 10156   0038A0  EF54  F01C         	goto	u4661
 10157   0038A4  EF56  F01C         	goto	u4660
 10158   0038A8                     u4661:
 10159   0038A8  EF5E  F01C         	goto	l1377
 10160   0038AC                     u4660:
 10161   0038AC                     
 10162                           ; BSR set to: 0
 10163                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10164   0038AC  C011  F00A         	movff	pad@buf,fputs@s
 10165   0038B0  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10166   0038B4  C010  F00C         	movff	pad@fp,fputs@fp
 10167   0038B8  ECE2  F020         	call	_fputs	;wreg free
 10168   0038BC                     l1377:
 10169   0038BC  0012               	return		;funcret
 10170   0038BE                     __end_of_pad:
 10171                           	callstack 0
 10172                           
 10173 ;; *************** function _fputs *****************
 10174 ;; Defined at:
 10175 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10178 ;;		 -> dbuf(32), 
 10179 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10180 ;;		 -> sprintf@f(12), 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  i               2   13[COMRAM] int 
 10183 ;;  c               1   12[COMRAM] unsigned char 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  2    9[COMRAM] int 
 10186 ;; Registers used:
 10187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10193 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10194 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10197 ;;Total ram usage:        6 bytes
 10198 ;; Hardware stack levels used: 1
 10199 ;; Hardware stack levels required when called: 3
 10200 ;; This function calls:
 10201 ;;		_fputc
 10202 ;; This function is called by:
 10203 ;;		_pad
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text54
 10208   0041C4                     __ptext54:
 10209                           	callstack 0
 10210   0041C4                     _fputs:
 10211                           	callstack 21
 10212   0041C4  0E00               	movlw	0
 10213   0041C6  6E0F               	movwf	(fputs@i+1)^0,c
 10214   0041C8  0E00               	movlw	0
 10215   0041CA  6E0E               	movwf	fputs@i^0,c
 10216   0041CC  EFF1  F020         	goto	l5172
 10217   0041D0                     l5168:
 10218   0041D0  C00D  F002         	movff	fputs@c,fputc@c
 10219   0041D4  6A03               	clrf	(fputc@c+1)^0,c
 10220   0041D6  C00C  F004         	movff	fputs@fp,fputc@fp
 10221   0041DA  ECBF  F01B         	call	_fputc	;wreg free
 10222   0041DE  4A0E               	infsnz	fputs@i^0,f,c
 10223   0041E0  2A0F               	incf	(fputs@i+1)^0,f,c
 10224   0041E2                     l5172:
 10225   0041E2  500E               	movf	fputs@i^0,w,c
 10226   0041E4  240A               	addwf	fputs@s^0,w,c
 10227   0041E6  6ED9               	movwf	fsr2l,c
 10228   0041E8  500F               	movf	(fputs@i+1)^0,w,c
 10229   0041EA  200B               	addwfc	(fputs@s+1)^0,w,c
 10230   0041EC  6EDA               	movwf	fsr2h,c
 10231   0041EE  50DF               	movf	indf2,w,c
 10232   0041F0  6E0D               	movwf	fputs@c^0,c
 10233   0041F2  500D               	movf	fputs@c^0,w,c
 10234   0041F4  A4D8               	btfss	status,2,c
 10235   0041F6  EFFF  F020         	goto	u4501
 10236   0041FA  EF01  F021         	goto	u4500
 10237   0041FE                     u4501:
 10238   0041FE  EFE8  F020         	goto	l5168
 10239   004202                     u4500:
 10240   004202  0012               	return		;funcret
 10241   004204                     __end_of_fputs:
 10242                           	callstack 0
 10243                           
 10244 ;; *************** function _fputc *****************
 10245 ;; Defined at:
 10246 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  c               2    1[COMRAM] int 
 10249 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10250 ;;		 -> sprintf@f(12), 
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;		None
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  2    1[COMRAM] int 
 10255 ;; Registers used:
 10256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10262 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10264 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10265 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10266 ;;Total ram usage:        8 bytes
 10267 ;; Hardware stack levels used: 1
 10268 ;; Hardware stack levels required when called: 2
 10269 ;; This function calls:
 10270 ;;		_putch
 10271 ;; This function is called by:
 10272 ;;		_pad
 10273 ;;		_vfpfcnvrt
 10274 ;;		_fputs
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text55
 10279   00377E                     __ptext55:
 10280                           	callstack 0
 10281   00377E                     _fputc:
 10282                           	callstack 24
 10283   00377E  5004               	movf	fputc@fp^0,w,c
 10284   003780  B4D8               	btfsc	status,2,c
 10285   003782  EFC5  F01B         	goto	u4461
 10286   003786  EFC7  F01B         	goto	u4460
 10287   00378A                     u4461:
 10288   00378A  EFCF  F01B         	goto	l5156
 10289   00378E                     u4460:
 10290   00378E  5004               	movf	fputc@fp^0,w,c
 10291   003790  A4D8               	btfss	status,2,c
 10292   003792  EFCD  F01B         	goto	u4471
 10293   003796  EFCF  F01B         	goto	u4470
 10294   00379A                     u4471:
 10295   00379A  EFD4  F01B         	goto	l5158
 10296   00379E                     u4470:
 10297   00379E                     l5156:
 10298   00379E  5002               	movf	fputc@c^0,w,c
 10299   0037A0  EC07  F023         	call	_putch
 10300   0037A4  EF13  F01C         	goto	l1441
 10301   0037A8                     l5158:
 10302   0037A8  5004               	movf	fputc@fp^0,w,c
 10303   0037AA  6ED9               	movwf	fsr2l,c
 10304   0037AC  6ADA               	clrf	fsr2h,c
 10305   0037AE  0E0A               	movlw	10
 10306   0037B0  26D9               	addwf	fsr2l,f,c
 10307   0037B2  50DE               	movf	postinc2,w,c
 10308   0037B4  10DE               	iorwf	postinc2,w,c
 10309   0037B6  B4D8               	btfsc	status,2,c
 10310   0037B8  EFE0  F01B         	goto	u4481
 10311   0037BC  EFE2  F01B         	goto	u4480
 10312   0037C0                     u4481:
 10313   0037C0  EFFB  F01B         	goto	l5162
 10314   0037C4                     u4480:
 10315   0037C4  5004               	movf	fputc@fp^0,w,c
 10316   0037C6  6ED9               	movwf	fsr2l,c
 10317   0037C8  6ADA               	clrf	fsr2h,c
 10318   0037CA  0E0A               	movlw	10
 10319   0037CC  26D9               	addwf	fsr2l,f,c
 10320   0037CE  5004               	movf	fputc@fp^0,w,c
 10321   0037D0  6EE1               	movwf	fsr1l,c
 10322   0037D2  6AE2               	clrf	fsr1h,c
 10323   0037D4  0E03               	movlw	3
 10324   0037D6  26E1               	addwf	fsr1l,f,c
 10325   0037D8  50DE               	movf	postinc2,w,c
 10326   0037DA  5CE6               	subwf	postinc1,w,c
 10327   0037DC  50E6               	movf	postinc1,w,c
 10328   0037DE  0A80               	xorlw	128
 10329   0037E0  6E09               	movwf	(??_fputc+4)^0,c
 10330   0037E2  50DE               	movf	postinc2,w,c
 10331   0037E4  0A80               	xorlw	128
 10332   0037E6  5809               	subwfb	(??_fputc+4)^0,w,c
 10333   0037E8  B0D8               	btfsc	status,0,c
 10334   0037EA  EFF9  F01B         	goto	u4491
 10335   0037EE  EFFB  F01B         	goto	u4490
 10336   0037F2                     u4491:
 10337   0037F2  EF13  F01C         	goto	l1441
 10338   0037F6                     u4490:
 10339   0037F6                     l5162:
 10340   0037F6  5004               	movf	fputc@fp^0,w,c
 10341   0037F8  6ED9               	movwf	fsr2l,c
 10342   0037FA  6ADA               	clrf	fsr2h,c
 10343   0037FC  0E03               	movlw	3
 10344   0037FE  26D9               	addwf	fsr2l,f,c
 10345   003800  50DF               	movf	indf2,w,c
 10346   003802  6E05               	movwf	??_fputc^0,c
 10347   003804  5004               	movf	fputc@fp^0,w,c
 10348   003806  6ED9               	movwf	fsr2l,c
 10349   003808  6ADA               	clrf	fsr2h,c
 10350   00380A  50DF               	movf	indf2,w,c
 10351   00380C  2405               	addwf	??_fputc^0,w,c
 10352   00380E  6ED9               	movwf	fsr2l,c
 10353   003810  6ADA               	clrf	fsr2h,c
 10354   003812  C002  FFDF         	movff	fputc@c,indf2
 10355   003816  5004               	movf	fputc@fp^0,w,c
 10356   003818  6ED9               	movwf	fsr2l,c
 10357   00381A  6ADA               	clrf	fsr2h,c
 10358   00381C  0E03               	movlw	3
 10359   00381E  26D9               	addwf	fsr2l,f,c
 10360   003820  2ADE               	incf	postinc2,f,c
 10361   003822  0E00               	movlw	0
 10362   003824  22DD               	addwfc	postdec2,f,c
 10363   003826                     l1441:
 10364   003826  0012               	return		;funcret
 10365   003828                     __end_of_fputc:
 10366                           	callstack 0
 10367                           
 10368 ;; *************** function _putch *****************
 10369 ;; Defined at:
 10370 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  c               1    wreg     unsigned char 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  c               1    0[COMRAM] unsigned char 
 10375 ;; Return value:  Size  Location     Type
 10376 ;;                  1    wreg      void 
 10377 ;; Registers used:
 10378 ;;		wreg
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10388 ;;Total ram usage:        0 bytes
 10389 ;; Hardware stack levels used: 1
 10390 ;; Hardware stack levels required when called: 1
 10391 ;; This function calls:
 10392 ;;		Nothing
 10393 ;; This function is called by:
 10394 ;;		_fputc
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           	psect	text56
 10399   00460E                     __ptext56:
 10400                           	callstack 0
 10401   00460E                     _putch:
 10402                           	callstack 24
 10403   00460E  0012               	return		;funcret
 10404   004610                     __end_of_putch:
 10405                           	callstack 0
 10406                           
 10407 ;; *************** function _abs *****************
 10408 ;; Defined at:
 10409 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;  a               2    7[COMRAM] int 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  2    7[COMRAM] int 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10426 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10427 ;;Total ram usage:        4 bytes
 10428 ;; Hardware stack levels used: 1
 10429 ;; Hardware stack levels required when called: 1
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_dtoa
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text57
 10438   0042A4                     __ptext57:
 10439                           	callstack 0
 10440   0042A4                     _abs:
 10441                           	callstack 24
 10442   0042A4  BE09               	btfsc	(abs@a+1)^0,7,c
 10443   0042A6  EF57  F021         	goto	u4671
 10444   0042AA  EF59  F021         	goto	u4670
 10445   0042AE                     u4671:
 10446   0042AE  EF5F  F021         	goto	l1426
 10447   0042B2                     u4670:
 10448   0042B2  C008  F008         	movff	abs@a,?_abs
 10449   0042B6  C009  F009         	movff	abs@a+1,?_abs+1
 10450   0042BA  EF6B  F021         	goto	l1429
 10451   0042BE                     l1426:
 10452   0042BE  C008  F00A         	movff	abs@a,??_abs
 10453   0042C2  C009  F00B         	movff	abs@a+1,??_abs+1
 10454   0042C6  1E0A               	comf	??_abs^0,f,c
 10455   0042C8  1E0B               	comf	(??_abs+1)^0,f,c
 10456   0042CA  4A0A               	infsnz	??_abs^0,f,c
 10457   0042CC  2A0B               	incf	(??_abs+1)^0,f,c
 10458   0042CE  C00A  F008         	movff	??_abs,?_abs
 10459   0042D2  C00B  F009         	movff	??_abs+1,?_abs+1
 10460   0042D6                     l1429:
 10461   0042D6  0012               	return		;funcret
 10462   0042D8                     __end_of_abs:
 10463                           	callstack 0
 10464                           
 10465 ;; *************** function ___awmod *****************
 10466 ;; Defined at:
 10467 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;  dividend        2    1[COMRAM] int 
 10470 ;;  divisor         2    3[COMRAM] int 
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;  sign            1    6[COMRAM] unsigned char 
 10473 ;;  counter         1    5[COMRAM] unsigned char 
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  2    1[COMRAM] int 
 10476 ;; Registers used:
 10477 ;;		wreg, status,2, status,0
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10487 ;;Total ram usage:        6 bytes
 10488 ;; Hardware stack levels used: 1
 10489 ;; Hardware stack levels required when called: 1
 10490 ;; This function calls:
 10491 ;;		Nothing
 10492 ;; This function is called by:
 10493 ;;		_dtoa
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           	psect	text58
 10498   003576                     __ptext58:
 10499                           	callstack 0
 10500   003576                     ___awmod:
 10501                           	callstack 24
 10502   003576  0E00               	movlw	0
 10503   003578  6E07               	movwf	___awmod@sign^0,c
 10504   00357A  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10505   00357C  EFC4  F01A         	goto	u4570
 10506   003580  EFC2  F01A         	goto	u4571
 10507   003584                     u4571:
 10508   003584  EFCA  F01A         	goto	l5232
 10509   003588                     u4570:
 10510   003588  6C02               	negf	___awmod@dividend^0,c
 10511   00358A  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10512   00358C  B0D8               	btfsc	status,0,c
 10513   00358E  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10514   003590  0E01               	movlw	1
 10515   003592  6E07               	movwf	___awmod@sign^0,c
 10516   003594                     l5232:
 10517   003594  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10518   003596  EFD1  F01A         	goto	u4580
 10519   00359A  EFCF  F01A         	goto	u4581
 10520   00359E                     u4581:
 10521   00359E  EFD5  F01A         	goto	l5236
 10522   0035A2                     u4580:
 10523   0035A2  6C04               	negf	___awmod@divisor^0,c
 10524   0035A4  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10525   0035A6  B0D8               	btfsc	status,0,c
 10526   0035A8  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10527   0035AA                     l5236:
 10528   0035AA  5004               	movf	___awmod@divisor^0,w,c
 10529   0035AC  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10530   0035AE  B4D8               	btfsc	status,2,c
 10531   0035B0  EFDC  F01A         	goto	u4591
 10532   0035B4  EFDE  F01A         	goto	u4590
 10533   0035B8                     u4591:
 10534   0035B8  EF02  F01B         	goto	l5252
 10535   0035BC                     u4590:
 10536   0035BC  0E01               	movlw	1
 10537   0035BE  6E06               	movwf	___awmod@counter^0,c
 10538   0035C0  EFE6  F01A         	goto	l5242
 10539   0035C4                     l5240:
 10540   0035C4  90D8               	bcf	status,0,c
 10541   0035C6  3604               	rlcf	___awmod@divisor^0,f,c
 10542   0035C8  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10543   0035CA  2A06               	incf	___awmod@counter^0,f,c
 10544   0035CC                     l5242:
 10545   0035CC  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10546   0035CE  EFEB  F01A         	goto	u4601
 10547   0035D2  EFED  F01A         	goto	u4600
 10548   0035D6                     u4601:
 10549   0035D6  EFE2  F01A         	goto	l5240
 10550   0035DA                     u4600:
 10551   0035DA                     l5244:
 10552   0035DA  5004               	movf	___awmod@divisor^0,w,c
 10553   0035DC  5C02               	subwf	___awmod@dividend^0,w,c
 10554   0035DE  5005               	movf	(___awmod@divisor+1)^0,w,c
 10555   0035E0  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10556   0035E2  A0D8               	btfss	status,0,c
 10557   0035E4  EFF6  F01A         	goto	u4611
 10558   0035E8  EFF8  F01A         	goto	u4610
 10559   0035EC                     u4611:
 10560   0035EC  EFFC  F01A         	goto	l5248
 10561   0035F0                     u4610:
 10562   0035F0  5004               	movf	___awmod@divisor^0,w,c
 10563   0035F2  5E02               	subwf	___awmod@dividend^0,f,c
 10564   0035F4  5005               	movf	(___awmod@divisor+1)^0,w,c
 10565   0035F6  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10566   0035F8                     l5248:
 10567   0035F8  90D8               	bcf	status,0,c
 10568   0035FA  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10569   0035FC  3204               	rrcf	___awmod@divisor^0,f,c
 10570   0035FE  2E06               	decfsz	___awmod@counter^0,f,c
 10571   003600  EFED  F01A         	goto	l5244
 10572   003604                     l5252:
 10573   003604  5007               	movf	___awmod@sign^0,w,c
 10574   003606  B4D8               	btfsc	status,2,c
 10575   003608  EF08  F01B         	goto	u4621
 10576   00360C  EF0A  F01B         	goto	u4620
 10577   003610                     u4621:
 10578   003610  EF0E  F01B         	goto	l5256
 10579   003614                     u4620:
 10580   003614  6C02               	negf	___awmod@dividend^0,c
 10581   003616  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10582   003618  B0D8               	btfsc	status,0,c
 10583   00361A  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10584   00361C                     l5256:
 10585   00361C  C002  F002         	movff	___awmod@dividend,?___awmod
 10586   003620  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10587   003624  0012               	return		;funcret
 10588   003626                     __end_of___awmod:
 10589                           	callstack 0
 10590                           
 10591 ;; *************** function ___awdiv *****************
 10592 ;; Defined at:
 10593 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  dividend        2    1[COMRAM] int 
 10596 ;;  divisor         2    3[COMRAM] int 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  quotient        2    7[COMRAM] int 
 10599 ;;  sign            1    6[COMRAM] unsigned char 
 10600 ;;  counter         1    5[COMRAM] unsigned char 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  2    1[COMRAM] int 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10610 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10611 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10613 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;Total ram usage:        8 bytes
 10615 ;; Hardware stack levels used: 1
 10616 ;; Hardware stack levels required when called: 1
 10617 ;; This function calls:
 10618 ;;		Nothing
 10619 ;; This function is called by:
 10620 ;;		_dtoa
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           	psect	text59
 10625   0033F0                     __ptext59:
 10626                           	callstack 0
 10627   0033F0                     ___awdiv:
 10628                           	callstack 24
 10629   0033F0  0E00               	movlw	0
 10630   0033F2  6E07               	movwf	___awdiv@sign^0,c
 10631   0033F4  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10632   0033F6  EF01  F01A         	goto	u4510
 10633   0033FA  EFFF  F019         	goto	u4511
 10634   0033FE                     u4511:
 10635   0033FE  EF07  F01A         	goto	l5188
 10636   003402                     u4510:
 10637   003402  6C04               	negf	___awdiv@divisor^0,c
 10638   003404  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10639   003406  B0D8               	btfsc	status,0,c
 10640   003408  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10641   00340A  0E01               	movlw	1
 10642   00340C  6E07               	movwf	___awdiv@sign^0,c
 10643   00340E                     l5188:
 10644   00340E  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10645   003410  EF0E  F01A         	goto	u4520
 10646   003414  EF0C  F01A         	goto	u4521
 10647   003418                     u4521:
 10648   003418  EF14  F01A         	goto	l5194
 10649   00341C                     u4520:
 10650   00341C  6C02               	negf	___awdiv@dividend^0,c
 10651   00341E  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10652   003420  B0D8               	btfsc	status,0,c
 10653   003422  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10654   003424  0E01               	movlw	1
 10655   003426  1A07               	xorwf	___awdiv@sign^0,f,c
 10656   003428                     l5194:
 10657   003428  0E00               	movlw	0
 10658   00342A  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10659   00342C  0E00               	movlw	0
 10660   00342E  6E08               	movwf	___awdiv@quotient^0,c
 10661   003430  5004               	movf	___awdiv@divisor^0,w,c
 10662   003432  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10663   003434  B4D8               	btfsc	status,2,c
 10664   003436  EF1F  F01A         	goto	u4531
 10665   00343A  EF21  F01A         	goto	u4530
 10666   00343E                     u4531:
 10667   00343E  EF49  F01A         	goto	l5216
 10668   003442                     u4530:
 10669   003442  0E01               	movlw	1
 10670   003444  6E06               	movwf	___awdiv@counter^0,c
 10671   003446  EF29  F01A         	goto	l5202
 10672   00344A                     l5200:
 10673   00344A  90D8               	bcf	status,0,c
 10674   00344C  3604               	rlcf	___awdiv@divisor^0,f,c
 10675   00344E  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10676   003450  2A06               	incf	___awdiv@counter^0,f,c
 10677   003452                     l5202:
 10678   003452  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10679   003454  EF2E  F01A         	goto	u4541
 10680   003458  EF30  F01A         	goto	u4540
 10681   00345C                     u4541:
 10682   00345C  EF25  F01A         	goto	l5200
 10683   003460                     u4540:
 10684   003460                     l5204:
 10685   003460  90D8               	bcf	status,0,c
 10686   003462  3608               	rlcf	___awdiv@quotient^0,f,c
 10687   003464  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10688   003466  5004               	movf	___awdiv@divisor^0,w,c
 10689   003468  5C02               	subwf	___awdiv@dividend^0,w,c
 10690   00346A  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10691   00346C  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10692   00346E  A0D8               	btfss	status,0,c
 10693   003470  EF3C  F01A         	goto	u4551
 10694   003474  EF3E  F01A         	goto	u4550
 10695   003478                     u4551:
 10696   003478  EF43  F01A         	goto	l5212
 10697   00347C                     u4550:
 10698   00347C  5004               	movf	___awdiv@divisor^0,w,c
 10699   00347E  5E02               	subwf	___awdiv@dividend^0,f,c
 10700   003480  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10701   003482  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10702   003484  8008               	bsf	___awdiv@quotient^0,0,c
 10703   003486                     l5212:
 10704   003486  90D8               	bcf	status,0,c
 10705   003488  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10706   00348A  3204               	rrcf	___awdiv@divisor^0,f,c
 10707   00348C  2E06               	decfsz	___awdiv@counter^0,f,c
 10708   00348E  EF30  F01A         	goto	l5204
 10709   003492                     l5216:
 10710   003492  5007               	movf	___awdiv@sign^0,w,c
 10711   003494  B4D8               	btfsc	status,2,c
 10712   003496  EF4F  F01A         	goto	u4561
 10713   00349A  EF51  F01A         	goto	u4560
 10714   00349E                     u4561:
 10715   00349E  EF55  F01A         	goto	l5220
 10716   0034A2                     u4560:
 10717   0034A2  6C08               	negf	___awdiv@quotient^0,c
 10718   0034A4  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10719   0034A6  B0D8               	btfsc	status,0,c
 10720   0034A8  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10721   0034AA                     l5220:
 10722   0034AA  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10723   0034AE  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10724   0034B2  0012               	return		;funcret
 10725   0034B4                     __end_of___awdiv:
 10726                           	callstack 0
 10727                           
 10728 ;; *************** function _sendStringSerial4 *****************
 10729 ;; Defined at:
 10730 ;;		line 41 in file "serial.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;  string          1    2[COMRAM] PTR unsigned char 
 10733 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;		None
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  1    wreg      void 
 10738 ;; Registers used:
 10739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10745 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10749 ;;Total ram usage:        1 bytes
 10750 ;; Hardware stack levels used: 1
 10751 ;; Hardware stack levels required when called: 2
 10752 ;; This function calls:
 10753 ;;		_sendCharSerial4
 10754 ;; This function is called by:
 10755 ;;		_calibration_routine
 10756 ;;		_send2USART
 10757 ;;		_sendAllReadings
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           	psect	text60
 10762   0043D2                     __ptext60:
 10763                           	callstack 0
 10764   0043D2                     _sendStringSerial4:
 10765                           	callstack 27
 10766   0043D2                     
 10767                           ;serial.c: 44:     while(*string != 0){
 10768   0043D2  EFF6  F021         	goto	l5572
 10769   0043D6                     l5566:
 10770                           
 10771                           ;serial.c: 46:   sendCharSerial4(*string++);
 10772   0043D6  5003               	movf	sendStringSerial4@string^0,w,c
 10773   0043D8  6ED9               	movwf	fsr2l,c
 10774   0043DA  6ADA               	clrf	fsr2h,c
 10775   0043DC  50DF               	movf	indf2,w,c
 10776   0043DE  ECE6  F022         	call	_sendCharSerial4
 10777   0043E2  2A03               	incf	sendStringSerial4@string^0,f,c
 10778   0043E4                     
 10779                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10780   0043E4  0E6A               	movlw	106
 10781   0043E6                     u5737:
 10782   0043E6  2EE8               	decfsz	wreg,f,c
 10783   0043E8  D7FE               	bra	u5737
 10784   0043EA  D000               	nop2	
 10785   0043EC                     l5572:
 10786                           
 10787                           ;serial.c: 44:     while(*string != 0){
 10788   0043EC  5003               	movf	sendStringSerial4@string^0,w,c
 10789   0043EE  6ED9               	movwf	fsr2l,c
 10790   0043F0  6ADA               	clrf	fsr2h,c
 10791   0043F2  50DF               	movf	indf2,w,c
 10792   0043F4  A4D8               	btfss	status,2,c
 10793   0043F6  EFFF  F021         	goto	u5001
 10794   0043FA  EF01  F022         	goto	u5000
 10795   0043FE                     u5001:
 10796   0043FE  EFEB  F021         	goto	l5566
 10797   004402                     u5000:
 10798   004402  0012               	return		;funcret
 10799   004404                     __end_of_sendStringSerial4:
 10800                           	callstack 0
 10801                           
 10802 ;; *************** function _sendCharSerial4 *****************
 10803 ;; Defined at:
 10804 ;;		line 35 in file "serial.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;  charToSend      1    wreg     unsigned char 
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  charToSend      1    1[COMRAM] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      void 
 10811 ;; Registers used:
 10812 ;;		wreg
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10821 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10822 ;;Total ram usage:        1 bytes
 10823 ;; Hardware stack levels used: 1
 10824 ;; Hardware stack levels required when called: 1
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_sendStringSerial4
 10829 ;; This function uses a non-reentrant model
 10830 ;;
 10831                           
 10832                           	psect	text61
 10833   0045CC                     __ptext61:
 10834                           	callstack 0
 10835   0045CC                     _sendCharSerial4:
 10836                           	callstack 27
 10837                           
 10838                           ;incstack = 0
 10839                           ;sendCharSerial4@charToSend stored from wreg
 10840   0045CC  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10841   0045CE                     l579:
 10842   0045CE  010E               	movlb	14	; () banked
 10843   0045D0  A537               	btfss	55,2,b	;volatile
 10844   0045D2  EFED  F022         	goto	u4961
 10845   0045D6  EFEF  F022         	goto	u4960
 10846   0045DA                     u4961:
 10847   0045DA  EFE7  F022         	goto	l579
 10848   0045DE                     u4960:
 10849   0045DE                     
 10850                           ; BSR set to: 14
 10851                           ;serial.c: 37:     TX4REG = charToSend;
 10852   0045DE  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10853   0045E2                     
 10854                           ; BSR set to: 14
 10855   0045E2  0012               	return		;funcret
 10856   0045E4                     __end_of_sendCharSerial4:
 10857                           	callstack 0
 10858                           
 10859 ;; *************** function _color_read_Red *****************
 10860 ;; Defined at:
 10861 ;;		line 32 in file "color.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;		None
 10864 ;; Auto vars:     Size  Location     Type
 10865 ;;  tmp             2   10[COMRAM] unsigned int 
 10866 ;; Return value:  Size  Location     Type
 10867 ;;                  2    5[COMRAM] unsigned int 
 10868 ;; Registers used:
 10869 ;;		wreg, status,2, status,0, cstack
 10870 ;; Tracked objects:
 10871 ;;		On entry : 0/0
 10872 ;;		On exit  : 0/0
 10873 ;;		Unchanged: 0/0
 10874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10877 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10879 ;;Total ram usage:        7 bytes
 10880 ;; Hardware stack levels used: 1
 10881 ;; Hardware stack levels required when called: 3
 10882 ;; This function calls:
 10883 ;;		_I2C_2_Master_Read
 10884 ;;		_I2C_2_Master_RepStart
 10885 ;;		_I2C_2_Master_Start
 10886 ;;		_I2C_2_Master_Stop
 10887 ;;		_I2C_2_Master_Write
 10888 ;; This function is called by:
 10889 ;;		_reading_hue
 10890 ;;		_calibration_routine
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           	psect	text62
 10895   003F2E                     __ptext62:
 10896                           	callstack 0
 10897   003F2E                     _color_read_Red:
 10898                           	callstack 26
 10899   003F2E                     
 10900                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10901   003F2E  ECFD  F022         	call	_I2C_2_Master_Start	;wreg free
 10902                           
 10903                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10904   003F32  0E52               	movlw	82
 10905   003F34  ECF2  F022         	call	_I2C_2_Master_Write
 10906                           
 10907                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10908   003F38  0EB6               	movlw	182
 10909   003F3A  ECF2  F022         	call	_I2C_2_Master_Write
 10910                           
 10911                           ;color.c: 38:  I2C_2_Master_RepStart();
 10912   003F3E  EC02  F023         	call	_I2C_2_Master_RepStart	;wreg free
 10913                           
 10914                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10915   003F42  0E53               	movlw	83
 10916   003F44  ECF2  F022         	call	_I2C_2_Master_Write
 10917                           
 10918                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10919   003F48  0E01               	movlw	1
 10920   003F4A  ECC1  F020         	call	_I2C_2_Master_Read
 10921   003F4E  6E08               	movwf	??_color_read_Red^0,c
 10922   003F50  5008               	movf	??_color_read_Red^0,w,c
 10923   003F52  6E0B               	movwf	color_read_Red@tmp^0,c
 10924   003F54  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10925                           
 10926                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10927   003F56  0E00               	movlw	0
 10928   003F58  ECC1  F020         	call	_I2C_2_Master_Read
 10929   003F5C  6E08               	movwf	??_color_read_Red^0,c
 10930   003F5E  5008               	movf	??_color_read_Red^0,w,c
 10931   003F60  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10932   003F62  6A09               	clrf	(??_color_read_Red+1)^0,c
 10933   003F64  500B               	movf	color_read_Red@tmp^0,w,c
 10934   003F66  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10935   003F68  6E0B               	movwf	color_read_Red@tmp^0,c
 10936   003F6A  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10937   003F6C  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10938   003F6E  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10939                           
 10940                           ;color.c: 42:  I2C_2_Master_Stop();
 10941   003F70  ECF8  F022         	call	_I2C_2_Master_Stop	;wreg free
 10942   003F74                     
 10943                           ;color.c: 43:  return tmp;
 10944   003F74  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10945   003F78  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10946   003F7C  0012               	return		;funcret
 10947   003F7E                     __end_of_color_read_Red:
 10948                           	callstack 0
 10949                           
 10950 ;; *************** function _color_read_Green *****************
 10951 ;; Defined at:
 10952 ;;		line 46 in file "color.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  tmp             2   10[COMRAM] unsigned int 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  2    5[COMRAM] unsigned int 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, status,0, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10968 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10969 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10970 ;;Total ram usage:        7 bytes
 10971 ;; Hardware stack levels used: 1
 10972 ;; Hardware stack levels required when called: 3
 10973 ;; This function calls:
 10974 ;;		_I2C_2_Master_Read
 10975 ;;		_I2C_2_Master_RepStart
 10976 ;;		_I2C_2_Master_Start
 10977 ;;		_I2C_2_Master_Stop
 10978 ;;		_I2C_2_Master_Write
 10979 ;; This function is called by:
 10980 ;;		_reading_hue
 10981 ;;		_calibration_routine
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           	psect	text63
 10986   003F7E                     __ptext63:
 10987                           	callstack 0
 10988   003F7E                     _color_read_Green:
 10989                           	callstack 26
 10990   003F7E                     
 10991                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10992   003F7E  ECFD  F022         	call	_I2C_2_Master_Start	;wreg free
 10993                           
 10994                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10995   003F82  0E52               	movlw	82
 10996   003F84  ECF2  F022         	call	_I2C_2_Master_Write
 10997                           
 10998                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10999   003F88  0EB8               	movlw	184
 11000   003F8A  ECF2  F022         	call	_I2C_2_Master_Write
 11001                           
 11002                           ;color.c: 52:  I2C_2_Master_RepStart();
 11003   003F8E  EC02  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11004                           
 11005                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 11006   003F92  0E53               	movlw	83
 11007   003F94  ECF2  F022         	call	_I2C_2_Master_Write
 11008                           
 11009                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 11010   003F98  0E01               	movlw	1
 11011   003F9A  ECC1  F020         	call	_I2C_2_Master_Read
 11012   003F9E  6E08               	movwf	??_color_read_Green^0,c
 11013   003FA0  5008               	movf	??_color_read_Green^0,w,c
 11014   003FA2  6E0B               	movwf	color_read_Green@tmp^0,c
 11015   003FA4  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11016                           
 11017                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11018   003FA6  0E00               	movlw	0
 11019   003FA8  ECC1  F020         	call	_I2C_2_Master_Read
 11020   003FAC  6E08               	movwf	??_color_read_Green^0,c
 11021   003FAE  5008               	movf	??_color_read_Green^0,w,c
 11022   003FB0  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11023   003FB2  6A09               	clrf	(??_color_read_Green+1)^0,c
 11024   003FB4  500B               	movf	color_read_Green@tmp^0,w,c
 11025   003FB6  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11026   003FB8  6E0B               	movwf	color_read_Green@tmp^0,c
 11027   003FBA  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11028   003FBC  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11029   003FBE  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11030                           
 11031                           ;color.c: 56:  I2C_2_Master_Stop();
 11032   003FC0  ECF8  F022         	call	_I2C_2_Master_Stop	;wreg free
 11033   003FC4                     
 11034                           ;color.c: 57:  return tmp;
 11035   003FC4  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11036   003FC8  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11037   003FCC  0012               	return		;funcret
 11038   003FCE                     __end_of_color_read_Green:
 11039                           	callstack 0
 11040                           
 11041 ;; *************** function _color_read_Clear *****************
 11042 ;; Defined at:
 11043 ;;		line 75 in file "color.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;  tmp             2   10[COMRAM] unsigned int 
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  2    5[COMRAM] unsigned int 
 11050 ;; Registers used:
 11051 ;;		wreg, status,2, status,0, cstack
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11058 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11059 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11060 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11061 ;;Total ram usage:        7 bytes
 11062 ;; Hardware stack levels used: 1
 11063 ;; Hardware stack levels required when called: 3
 11064 ;; This function calls:
 11065 ;;		_I2C_2_Master_Read
 11066 ;;		_I2C_2_Master_RepStart
 11067 ;;		_I2C_2_Master_Start
 11068 ;;		_I2C_2_Master_Stop
 11069 ;;		_I2C_2_Master_Write
 11070 ;; This function is called by:
 11071 ;;		_reading_hue
 11072 ;;		_calibration_routine
 11073 ;;		_main
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text64
 11078   003FCE                     __ptext64:
 11079                           	callstack 0
 11080   003FCE                     _color_read_Clear:
 11081                           	callstack 26
 11082   003FCE                     
 11083                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 11084   003FCE  ECFD  F022         	call	_I2C_2_Master_Start	;wreg free
 11085                           
 11086                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 11087   003FD2  0E52               	movlw	82
 11088   003FD4  ECF2  F022         	call	_I2C_2_Master_Write
 11089                           
 11090                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 11091   003FD8  0EB4               	movlw	180
 11092   003FDA  ECF2  F022         	call	_I2C_2_Master_Write
 11093                           
 11094                           ;color.c: 81:  I2C_2_Master_RepStart();
 11095   003FDE  EC02  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11096                           
 11097                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 11098   003FE2  0E53               	movlw	83
 11099   003FE4  ECF2  F022         	call	_I2C_2_Master_Write
 11100                           
 11101                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 11102   003FE8  0E01               	movlw	1
 11103   003FEA  ECC1  F020         	call	_I2C_2_Master_Read
 11104   003FEE  6E08               	movwf	??_color_read_Clear^0,c
 11105   003FF0  5008               	movf	??_color_read_Clear^0,w,c
 11106   003FF2  6E0B               	movwf	color_read_Clear@tmp^0,c
 11107   003FF4  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11108                           
 11109                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11110   003FF6  0E00               	movlw	0
 11111   003FF8  ECC1  F020         	call	_I2C_2_Master_Read
 11112   003FFC  6E08               	movwf	??_color_read_Clear^0,c
 11113   003FFE  5008               	movf	??_color_read_Clear^0,w,c
 11114   004000  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11115   004002  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11116   004004  500B               	movf	color_read_Clear@tmp^0,w,c
 11117   004006  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11118   004008  6E0B               	movwf	color_read_Clear@tmp^0,c
 11119   00400A  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11120   00400C  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11121   00400E  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11122                           
 11123                           ;color.c: 85:  I2C_2_Master_Stop();
 11124   004010  ECF8  F022         	call	_I2C_2_Master_Stop	;wreg free
 11125   004014                     
 11126                           ;color.c: 86:  return tmp;
 11127   004014  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11128   004018  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11129   00401C  0012               	return		;funcret
 11130   00401E                     __end_of_color_read_Clear:
 11131                           	callstack 0
 11132                           
 11133 ;; *************** function _color_read_Blue *****************
 11134 ;; Defined at:
 11135 ;;		line 60 in file "color.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;		None
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;  tmp             2   10[COMRAM] unsigned int 
 11140 ;; Return value:  Size  Location     Type
 11141 ;;                  2    5[COMRAM] unsigned int 
 11142 ;; Registers used:
 11143 ;;		wreg, status,2, status,0, cstack
 11144 ;; Tracked objects:
 11145 ;;		On entry : 0/0
 11146 ;;		On exit  : 0/0
 11147 ;;		Unchanged: 0/0
 11148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11149 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11150 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11151 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11152 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11153 ;;Total ram usage:        7 bytes
 11154 ;; Hardware stack levels used: 1
 11155 ;; Hardware stack levels required when called: 3
 11156 ;; This function calls:
 11157 ;;		_I2C_2_Master_Read
 11158 ;;		_I2C_2_Master_RepStart
 11159 ;;		_I2C_2_Master_Start
 11160 ;;		_I2C_2_Master_Stop
 11161 ;;		_I2C_2_Master_Write
 11162 ;; This function is called by:
 11163 ;;		_reading_hue
 11164 ;;		_calibration_routine
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text65
 11169   00401E                     __ptext65:
 11170                           	callstack 0
 11171   00401E                     _color_read_Blue:
 11172                           	callstack 26
 11173   00401E                     
 11174                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11175   00401E  ECFD  F022         	call	_I2C_2_Master_Start	;wreg free
 11176                           
 11177                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11178   004022  0E52               	movlw	82
 11179   004024  ECF2  F022         	call	_I2C_2_Master_Write
 11180                           
 11181                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11182   004028  0EBA               	movlw	186
 11183   00402A  ECF2  F022         	call	_I2C_2_Master_Write
 11184                           
 11185                           ;color.c: 66:  I2C_2_Master_RepStart();
 11186   00402E  EC02  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11187                           
 11188                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11189   004032  0E53               	movlw	83
 11190   004034  ECF2  F022         	call	_I2C_2_Master_Write
 11191                           
 11192                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11193   004038  0E01               	movlw	1
 11194   00403A  ECC1  F020         	call	_I2C_2_Master_Read
 11195   00403E  6E08               	movwf	??_color_read_Blue^0,c
 11196   004040  5008               	movf	??_color_read_Blue^0,w,c
 11197   004042  6E0B               	movwf	color_read_Blue@tmp^0,c
 11198   004044  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11199                           
 11200                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11201   004046  0E00               	movlw	0
 11202   004048  ECC1  F020         	call	_I2C_2_Master_Read
 11203   00404C  6E08               	movwf	??_color_read_Blue^0,c
 11204   00404E  5008               	movf	??_color_read_Blue^0,w,c
 11205   004050  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11206   004052  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11207   004054  500B               	movf	color_read_Blue@tmp^0,w,c
 11208   004056  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11209   004058  6E0B               	movwf	color_read_Blue@tmp^0,c
 11210   00405A  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11211   00405C  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11212   00405E  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11213                           
 11214                           ;color.c: 70:  I2C_2_Master_Stop();
 11215   004060  ECF8  F022         	call	_I2C_2_Master_Stop	;wreg free
 11216   004064                     
 11217                           ;color.c: 71:  return tmp;
 11218   004064  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11219   004068  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11220   00406C  0012               	return		;funcret
 11221   00406E                     __end_of_color_read_Blue:
 11222                           	callstack 0
 11223                           
 11224 ;; *************** function _I2C_2_Master_Write *****************
 11225 ;; Defined at:
 11226 ;;		line 45 in file "i2c.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;  data_byte       1    wreg     unsigned char 
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  data_byte       1    2[COMRAM] unsigned char 
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		wreg, status,2, status,0, cstack
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11244 ;;Total ram usage:        1 bytes
 11245 ;; Hardware stack levels used: 1
 11246 ;; Hardware stack levels required when called: 2
 11247 ;; This function calls:
 11248 ;;		_I2C_2_Master_Idle
 11249 ;; This function is called by:
 11250 ;;		_color_writetoaddr
 11251 ;;		_color_read_Red
 11252 ;;		_color_read_Green
 11253 ;;		_color_read_Blue
 11254 ;;		_color_read_Clear
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text66
 11259   0045E4                     __ptext66:
 11260                           	callstack 0
 11261   0045E4                     _I2C_2_Master_Write:
 11262                           	callstack 26
 11263                           
 11264                           ;incstack = 0
 11265                           ;I2C_2_Master_Write@data_byte stored from wreg
 11266   0045E4  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11267   0045E6                     
 11268                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11269   0045E6  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11270   0045EA                     
 11271                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11272   0045EA  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11273   0045EE  0012               	return		;funcret
 11274   0045F0                     __end_of_I2C_2_Master_Write:
 11275                           	callstack 0
 11276                           
 11277 ;; *************** function _I2C_2_Master_Stop *****************
 11278 ;; Defined at:
 11279 ;;		line 39 in file "i2c.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;		None
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;		None
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11297 ;;Total ram usage:        0 bytes
 11298 ;; Hardware stack levels used: 1
 11299 ;; Hardware stack levels required when called: 2
 11300 ;; This function calls:
 11301 ;;		_I2C_2_Master_Idle
 11302 ;; This function is called by:
 11303 ;;		_color_writetoaddr
 11304 ;;		_color_read_Red
 11305 ;;		_color_read_Green
 11306 ;;		_color_read_Blue
 11307 ;;		_color_read_Clear
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           	psect	text67
 11312   0045F0                     __ptext67:
 11313                           	callstack 0
 11314   0045F0                     _I2C_2_Master_Stop:
 11315                           	callstack 26
 11316   0045F0                     
 11317                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11318   0045F0  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11319   0045F4                     
 11320                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11321   0045F4  010E               	movlb	14	; () banked
 11322   0045F6  85DA               	bsf	218,2,b	;volatile
 11323   0045F8                     
 11324                           ; BSR set to: 14
 11325   0045F8  0012               	return		;funcret
 11326   0045FA                     __end_of_I2C_2_Master_Stop:
 11327                           	callstack 0
 11328                           
 11329 ;; *************** function _I2C_2_Master_Start *****************
 11330 ;; Defined at:
 11331 ;;		line 27 in file "i2c.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      void 
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11349 ;;Total ram usage:        0 bytes
 11350 ;; Hardware stack levels used: 1
 11351 ;; Hardware stack levels required when called: 2
 11352 ;; This function calls:
 11353 ;;		_I2C_2_Master_Idle
 11354 ;; This function is called by:
 11355 ;;		_color_writetoaddr
 11356 ;;		_color_read_Red
 11357 ;;		_color_read_Green
 11358 ;;		_color_read_Blue
 11359 ;;		_color_read_Clear
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text68
 11364   0045FA                     __ptext68:
 11365                           	callstack 0
 11366   0045FA                     _I2C_2_Master_Start:
 11367                           	callstack 26
 11368   0045FA                     
 11369                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11370   0045FA  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11371   0045FE                     
 11372                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11373   0045FE  010E               	movlb	14	; () banked
 11374   004600  81DA               	bsf	218,0,b	;volatile
 11375   004602                     
 11376                           ; BSR set to: 14
 11377   004602  0012               	return		;funcret
 11378   004604                     __end_of_I2C_2_Master_Start:
 11379                           	callstack 0
 11380                           
 11381 ;; *************** function _I2C_2_Master_RepStart *****************
 11382 ;; Defined at:
 11383 ;;		line 33 in file "i2c.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;		None
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;		None
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  1    wreg      void 
 11390 ;; Registers used:
 11391 ;;		wreg, status,2, status,0, cstack
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11401 ;;Total ram usage:        0 bytes
 11402 ;; Hardware stack levels used: 1
 11403 ;; Hardware stack levels required when called: 2
 11404 ;; This function calls:
 11405 ;;		_I2C_2_Master_Idle
 11406 ;; This function is called by:
 11407 ;;		_color_read_Red
 11408 ;;		_color_read_Green
 11409 ;;		_color_read_Blue
 11410 ;;		_color_read_Clear
 11411 ;; This function uses a non-reentrant model
 11412 ;;
 11413                           
 11414                           	psect	text69
 11415   004604                     __ptext69:
 11416                           	callstack 0
 11417   004604                     _I2C_2_Master_RepStart:
 11418                           	callstack 26
 11419   004604                     
 11420                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11421   004604  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11422   004608                     
 11423                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11424   004608  010E               	movlb	14	; () banked
 11425   00460A  83DA               	bsf	218,1,b	;volatile
 11426   00460C                     
 11427                           ; BSR set to: 14
 11428   00460C  0012               	return		;funcret
 11429   00460E                     __end_of_I2C_2_Master_RepStart:
 11430                           	callstack 0
 11431                           
 11432 ;; *************** function _I2C_2_Master_Read *****************
 11433 ;; Defined at:
 11434 ;;		line 51 in file "i2c.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  ack             1    wreg     unsigned char 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  ack             1    3[COMRAM] unsigned char 
 11439 ;;  tmp             1    4[COMRAM] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      unsigned char 
 11442 ;; Registers used:
 11443 ;;		wreg, status,2, status,0, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11453 ;;Total ram usage:        3 bytes
 11454 ;; Hardware stack levels used: 1
 11455 ;; Hardware stack levels required when called: 2
 11456 ;; This function calls:
 11457 ;;		_I2C_2_Master_Idle
 11458 ;; This function is called by:
 11459 ;;		_color_read_Red
 11460 ;;		_color_read_Green
 11461 ;;		_color_read_Blue
 11462 ;;		_color_read_Clear
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           	psect	text70
 11467   004182                     __ptext70:
 11468                           	callstack 0
 11469   004182                     _I2C_2_Master_Read:
 11470                           	callstack 26
 11471                           
 11472                           ; BSR set to: 14
 11473                           ;incstack = 0
 11474                           ;I2C_2_Master_Read@ack stored from wreg
 11475   004182  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11476   004184                     
 11477                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11478   004184  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11479   004188                     
 11480                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11481   004188  010E               	movlb	14	; () banked
 11482   00418A  87DA               	bsf	218,3,b	;volatile
 11483                           
 11484                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11485   00418C  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11486   004190                     
 11487                           ;i2c.c: 57:   tmp = SSP2BUF;
 11488   004190  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11489                           
 11490                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11491   004194  EC5F  F022         	call	_I2C_2_Master_Idle	;wreg free
 11492   004198                     
 11493                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11494   004198  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11495   00419A  B4D8               	btfsc	status,2,c
 11496   00419C  EFD2  F020         	goto	u4981
 11497   0041A0  EFD6  F020         	goto	u4980
 11498   0041A4                     u4981:
 11499   0041A4  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11500   0041A6  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11501   0041A8  EFD7  F020         	goto	u4998
 11502   0041AC                     u4980:
 11503   0041AC  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11504   0041AE                     u4998:
 11505   0041AE  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11506   0041B0  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11507   0041B2  010E               	movlb	14	; () banked
 11508   0041B4  51DA               	movf	218,w,b	;volatile
 11509   0041B6  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11510   0041B8  0BDF               	andlw	-33
 11511   0041BA  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11512   0041BC  6FDA               	movwf	218,b	;volatile
 11513   0041BE                     
 11514                           ; BSR set to: 14
 11515                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11516   0041BE  89DA               	bsf	218,4,b	;volatile
 11517   0041C0                     
 11518                           ; BSR set to: 14
 11519                           ;i2c.c: 61:   return tmp;
 11520   0041C0  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11521   0041C2                     
 11522                           ; BSR set to: 14
 11523   0041C2  0012               	return		;funcret
 11524   0041C4                     __end_of_I2C_2_Master_Read:
 11525                           	callstack 0
 11526                           
 11527 ;; *************** function _I2C_2_Master_Idle *****************
 11528 ;; Defined at:
 11529 ;;		line 22 in file "i2c.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;		None
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;		None
 11534 ;; Return value:  Size  Location     Type
 11535 ;;                  1    wreg      void 
 11536 ;; Registers used:
 11537 ;;		wreg, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11547 ;;Total ram usage:        1 bytes
 11548 ;; Hardware stack levels used: 1
 11549 ;; Hardware stack levels required when called: 1
 11550 ;; This function calls:
 11551 ;;		Nothing
 11552 ;; This function is called by:
 11553 ;;		_I2C_2_Master_Start
 11554 ;;		_I2C_2_Master_RepStart
 11555 ;;		_I2C_2_Master_Stop
 11556 ;;		_I2C_2_Master_Write
 11557 ;;		_I2C_2_Master_Read
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           	psect	text71
 11562   0044BE                     __ptext71:
 11563                           	callstack 0
 11564   0044BE                     _I2C_2_Master_Idle:
 11565                           	callstack 26
 11566   0044BE                     l194:
 11567   0044BE  010E               	movlb	14	; () banked
 11568   0044C0  B5D8               	btfsc	216,2,b	;volatile
 11569   0044C2  EF65  F022         	goto	u4871
 11570   0044C6  EF67  F022         	goto	u4870
 11571   0044CA                     u4871:
 11572   0044CA  EF5F  F022         	goto	l194
 11573   0044CE                     u4870:
 11574   0044CE                     
 11575                           ; BSR set to: 14
 11576   0044CE  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11577   0044D2  0E1F               	movlw	31
 11578   0044D4  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11579   0044D6  A4D8               	btfss	status,2,c
 11580   0044D8  EF70  F022         	goto	u4881
 11581   0044DC  EF72  F022         	goto	u4880
 11582   0044E0                     u4881:
 11583   0044E0  EF5F  F022         	goto	l194
 11584   0044E4                     u4880:
 11585   0044E4                     
 11586                           ; BSR set to: 14
 11587   0044E4  0012               	return		;funcret
 11588   0044E6                     __end_of_I2C_2_Master_Idle:
 11589                           	callstack 0
 11590                           
 11591 ;; *************** function _Timer0_init *****************
 11592 ;; Defined at:
 11593 ;;		line 7 in file "timers.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;		None
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;		None
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      void 
 11600 ;; Registers used:
 11601 ;;		wreg, status,2
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11611 ;;Total ram usage:        0 bytes
 11612 ;; Hardware stack levels used: 1
 11613 ;; Hardware stack levels required when called: 1
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_main
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text72
 11622   0044E6                     __ptext72:
 11623                           	callstack 0
 11624   0044E6                     _Timer0_init:
 11625                           	callstack 29
 11626   0044E6                     
 11627                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 11628   0044E6  50D6               	movf	214,w,c	;volatile
 11629   0044E8  0B1F               	andlw	-225
 11630   0044EA  0940               	iorlw	64
 11631   0044EC  6ED6               	movwf	214,c	;volatile
 11632   0044EE                     
 11633                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 11634   0044EE  88D6               	bsf	214,4,c	;volatile
 11635                           
 11636                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1101;
 11637   0044F0  50D6               	movf	214,w,c	;volatile
 11638   0044F2  0BF0               	andlw	-16
 11639   0044F4  090D               	iorlw	13
 11640   0044F6  6ED6               	movwf	214,c	;volatile
 11641   0044F8                     
 11642                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 11643   0044F8  88D5               	bsf	213,4,c	;volatile
 11644   0044FA                     
 11645                           ;timers.c: 14:     PIE0bits.TMR0IE = 1;
 11646   0044FA  010E               	movlb	14	; () banked
 11647   0044FC  8B29               	bsf	41,5,b	;volatile
 11648   0044FE                     
 11649                           ; BSR set to: 14
 11650                           ;timers.c: 15:     PIR0bits.TMR0IF = 0;
 11651   0044FE  9B33               	bcf	51,5,b	;volatile
 11652   004500                     
 11653                           ; BSR set to: 14
 11654                           ;timers.c: 16:     IPR0bits.TMR0IP = 0;
 11655   004500  9B1F               	bcf	31,5,b	;volatile
 11656   004502                     
 11657                           ; BSR set to: 14
 11658                           ;timers.c: 17:     INTCONbits.IPEN = 1;
 11659   004502  8AF2               	bsf	242,5,c	;volatile
 11660   004504                     
 11661                           ; BSR set to: 14
 11662                           ;timers.c: 18:     INTCONbits.PEIE = 1;
 11663   004504  8CF2               	bsf	242,6,c	;volatile
 11664   004506                     
 11665                           ; BSR set to: 14
 11666                           ;timers.c: 19:     INTCONbits.GIE = 1;
 11667   004506  8EF2               	bsf	242,7,c	;volatile
 11668   004508                     
 11669                           ; BSR set to: 14
 11670                           ;timers.c: 21:     TRISGbits.TRISG1 = 1;
 11671   004508  8287               	bsf	135,1,c	;volatile
 11672   00450A                     
 11673                           ; BSR set to: 14
 11674                           ;timers.c: 22:     LATGbits.LATG1 = 0;
 11675   00450A  927F               	bcf	127,1,c	;volatile
 11676   00450C                     
 11677                           ; BSR set to: 14
 11678   00450C  0012               	return		;funcret
 11679   00450E                     __end_of_Timer0_init:
 11680                           	callstack 0
 11681                           
 11682 ;; *************** function _ADC_init *****************
 11683 ;; Defined at:
 11684 ;;		line 9 in file "ADC.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;		None
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;		None
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      void 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11702 ;;Total ram usage:        0 bytes
 11703 ;; Hardware stack levels used: 1
 11704 ;; Hardware stack levels required when called: 1
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           	psect	text73
 11713   0045B2                     __ptext73:
 11714                           	callstack 0
 11715   0045B2                     _ADC_init:
 11716                           	callstack 29
 11717   0045B2                     
 11718                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11719   0045B2  8C86               	bsf	134,6,c	;volatile
 11720                           
 11721                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11722   0045B4  010E               	movlb	14	; () banked
 11723   0045B6  8DB4               	bsf	180,6,b	;volatile
 11724                           
 11725                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11726   0045B8  010F               	movlb	15	; () banked
 11727   0045BA  9958               	bcf	88,4,b	;volatile
 11728   0045BC                     
 11729                           ; BSR set to: 15
 11730                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11731   0045BC  0EFC               	movlw	-4
 11732   0045BE  1758               	andwf	88,f,b	;volatile
 11733                           
 11734                           ;ADC.c: 17:     ADPCH=0b101110;
 11735   0045C0  0E2E               	movlw	46
 11736   0045C2  6F5F               	movwf	95,b	;volatile
 11737   0045C4                     
 11738                           ; BSR set to: 15
 11739                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11740   0045C4  9460               	bcf	96,2,c	;volatile
 11741   0045C6                     
 11742                           ; BSR set to: 15
 11743                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11744   0045C6  8860               	bsf	96,4,c	;volatile
 11745   0045C8                     
 11746                           ; BSR set to: 15
 11747                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11748   0045C8  8E60               	bsf	96,7,c	;volatile
 11749   0045CA                     
 11750                           ; BSR set to: 15
 11751   0045CA  0012               	return		;funcret
 11752   0045CC                     __end_of_ADC_init:
 11753                           	callstack 0
 11754                           
 11755 ;; *************** function _LowISR *****************
 11756 ;; Defined at:
 11757 ;;		line 38 in file "timers.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  1    wreg      void 
 11764 ;; Registers used:
 11765 ;;		None
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11773 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11774 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11775 ;;Total ram usage:        1 bytes
 11776 ;; Hardware stack levels used: 1
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		Interrupt level 1
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	intcodelo
 11785   000018                     __pintcodelo:
 11786                           	callstack 0
 11787   000018                     _LowISR:
 11788                           	callstack 20
 11789                           
 11790                           ; BSR set to: 15
 11791                           ;incstack = 0
 11792   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11793   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11794   00001E                     
 11795                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11796   00001E  010E               	movlb	14	; () banked
 11797   000020  AB33               	btfss	51,5,b	;volatile
 11798   000022  EF15  F000         	goto	i1u224_21
 11799   000026  EF17  F000         	goto	i1u224_20
 11800   00002A                     i1u224_21:
 11801   00002A  EF19  F000         	goto	i1l671
 11802   00002E                     i1u224_20:
 11803   00002E                     
 11804                           ; BSR set to: 14
 11805                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11806   00002E  827F               	bsf	127,1,c	;volatile
 11807                           
 11808                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11809   000030  9B33               	bcf	51,5,b	;volatile
 11810   000032                     i1l671:
 11811                           
 11812                           ; BSR set to: 14
 11813   000032  C001  FFE0         	movff	??_LowISR,bsr
 11814   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11815   000038  0010               	retfie	
 11816   00003A                     __end_of_LowISR:
 11817                           	callstack 0
 11818                           
 11819                           	psect	rparam
 11820   000000                     
 11821                           	psect	temp
 11822   000052                     btemp:
 11823                           	callstack 0
 11824   000052                     	ds	1
 11825   000000                     int$flags	set	btemp
 11826   000000                     wtemp8	set	btemp+1
 11827   000000                     ttemp5	set	btemp+1
 11828   000000                     ttemp6	set	btemp+4
 11829   000000                     ttemp7	set	btemp+8
 11830                           
 11831                           	psect	config
 11832                           
 11833                           ;Config register CONFIG1L @ 0x300000
 11834                           ;	External Oscillator mode Selection bits
 11835                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11836                           ;	Power-up default value for COSC bits
 11837                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11838   300000                     	org	3145728
 11839   300000  AA                 	db	170
 11840                           
 11841                           ;Config register CONFIG1H @ 0x300001
 11842                           ;	unspecified, using default values
 11843                           ;	Clock Out Enable bit
 11844                           ;	CLKOUTEN = 0x1, unprogrammed default
 11845                           ;	Clock Switch Enable bit
 11846                           ;	CSWEN = 0x1, unprogrammed default
 11847                           ;	Fail-Safe Clock Monitor Enable bit
 11848                           ;	FCMEN = 0x1, unprogrammed default
 11849   300001                     	org	3145729
 11850   300001  FF                 	db	255
 11851                           
 11852                           ;Config register CONFIG3L @ 0x300004
 11853                           ;	WDT Period Select bits
 11854                           ;	WDTCPS = 0x1F, unprogrammed default
 11855                           ;	WDT operating mode
 11856                           ;	WDTE = OFF, WDT Disabled
 11857   300004                     	org	3145732
 11858   300004  9F                 	db	159
 11859                           
 11860                           ;Config register CONFIG3H @ 0x300005
 11861                           ;	unspecified, using default values
 11862                           ;	WDT Window Select bits
 11863                           ;	WDTCWS = 0x7, unprogrammed default
 11864                           ;	WDT input clock selector
 11865                           ;	WDTCCS = 0x7, unprogrammed default
 11866   300005                     	org	3145733
 11867   300005  FF                 	db	255
 11868                           tosu	equ	0xFFF
 11869                           tosh	equ	0xFFE
 11870                           tosl	equ	0xFFD
 11871                           stkptr	equ	0xFFC
 11872                           pclatu	equ	0xFFB
 11873                           pclath	equ	0xFFA
 11874                           pcl	equ	0xFF9
 11875                           tblptru	equ	0xFF8
 11876                           tblptrh	equ	0xFF7
 11877                           tblptrl	equ	0xFF6
 11878                           tablat	equ	0xFF5
 11879                           prodh	equ	0xFF4
 11880                           prodl	equ	0xFF3
 11881                           indf0	equ	0xFEF
 11882                           postinc0	equ	0xFEE
 11883                           postdec0	equ	0xFED
 11884                           preinc0	equ	0xFEC
 11885                           plusw0	equ	0xFEB
 11886                           fsr0h	equ	0xFEA
 11887                           fsr0l	equ	0xFE9
 11888                           wreg	equ	0xFE8
 11889                           indf1	equ	0xFE7
 11890                           postinc1	equ	0xFE6
 11891                           postdec1	equ	0xFE5
 11892                           preinc1	equ	0xFE4
 11893                           plusw1	equ	0xFE3
 11894                           fsr1h	equ	0xFE2
 11895                           fsr1l	equ	0xFE1
 11896                           bsr	equ	0xFE0
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           preinc2	equ	0xFDC
 11901                           plusw2	equ	0xFDB
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        1
    BSS         334
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     92     142
    BANK1           256      0     222
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    logAction@path	PTR struct PathStep size(2) Largest target is 150
		 -> path(BANK1[150]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR struct PathStep size(2) Largest target is 150
		 -> path(BANK1[150]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2983$buffer	PTR unsigned char  size(2) Largest target is 0

    S2983$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_moveWhite
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  330112
                                             76 COMRAM     2     2      0
                                             76 BANK0     16    16      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   77990
                                             32 COMRAM    13     7      6
                             ___wmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   42630
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   10634
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4170
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   22676
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16841
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15937
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     942
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     457
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2048
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2615
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  194722
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11518
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   25403
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   26123
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   10736
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   25583
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10556
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   26123
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   10736
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4530
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   26303
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   10916
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   26303
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10916
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   26483
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11096
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    4710
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            9     3      6    3683
                                              7 COMRAM     9     3      6
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11276
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 2     0      2    5722
                                             19 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4350
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3674
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12335
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10411
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8839
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8351
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1684
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1244
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___wmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
         _setMotorPWM
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      3C       9       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DE       7       86.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F9      66        0.0%
DATA                 0      0     1F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 16:18:12 2024

               _color_read_Red 3F2E                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 401E  
                           l81 3F7C                             l90 401C                             l75 426E  
                           l84 3FCC                             l93 3322                             l78 4574  
                           l87 406C                             l96 287C                             l98 288A  
                           l99 28D8                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3FCE               _color_read_Green 3F7E                            l101 28E6  
                          l102 2938                            l111 2A26                            l200 4602  
                          l104 2946                            l105 2998                            l121 119C  
                          l203 460C                            l107 29A6                            l131 128E  
                          l123 11F6                            l212 41C2                            l108 2A00  
                          l141 15A6                            l133 129E                            l125 1206  
                          l206 45F8                            l135 12F8                            l119 118C  
                          l209 45EE                            l145 161E                            l137 1308  
                          l146 163A                            l411 302E                            l164 2854  
                          l404 394C                            l500 40F8                            l317 25D0  
                          l158 2848                            l335 45CA                            l191 44BC  
                          l503 4224                            l424 3B60                            l512 3574  
                          l194 44BE                            l442 4432                            l506 423A  
                          l434 3BDA                            l419 39DA                            l451 436C  
                          l460 433A                            l516 33EC                            l197 44E4  
                          l445 4462                            l429 3AE2                            l454 439E  
                          l439 3C50                            l463 3D74                            l519 33EE  
                          l448 43D0                            l472 3D1C                            l457 4492  
                          l481 3E7C                            l633 45B0                            l466 3ED4  
                          l570 4592                            l475 3DCC                            l484 4308  
                          l469 3F2C                            l662 450C                            l582 45E2  
                          l478 3E24                            l487 3A5C                            l488 3A64  
                          l905 34B2                            l665 4554                            l674 4532  
                          l579 45CE                            l499 40F8                            l588 4402  
                          l933 377C                            l918 3624                            l944 3238  
                          l939 31F2                            l971 3134                            _abs 42A4  
                          _pad 3828                            _hue 00BC            convert_rgb2hue@cMax 003E  
                 ___awmod@sign 0007            convert_rgb2hue@diff 0094                            wreg 0FE8  
                 ___flmul@aexp 0013                   ___flmul@bexp 0014                   ___flmul@sign 000E  
                 ___flmul@temp 0019                   ___flmul@prod 0015                   ___fltol@exp1 003D  
                         l1202 182A                           l1211 1AFA                           l1203 1818  
                         ?_abs 0008                           l1204 17DE                           l1401 36D2  
                         l1305 1EE6                           l1219 1944                           l1172 3CC4  
                         l1228 1A14                           l1244 413E                           l1332 2BDA  
                         l1165 3CBC                           l1261 20E2                           l1229 1A02  
                         l1422 4180                           l1270 21CA                           l1343 2B72  
                         l1416 2D62                           l1352 42A2                           l1256 22BE  
                         l1336 2B16                           l1441 3826                           l1329 2A7E  
                         l1426 42BE                           l1258 211E                           l1267 2164  
                         l1452 460E                           l1372 385E                           l1380 2DC2  
                         l4100 20A6                           l1292 1F24                           l1429 42D6  
                         l1269 21DC                           l4110 20EC                           l4102 20AE  
                         l4030 4210                           l1375 389C                           l1295 1DB6  
                         l4120 2144                           l4112 210A                           l4104 20BE  
                         l4040 1F42                           l1288 1BC0                           l4200 1B9A  
                         l4032 4220                           l1449 4202                           l1377 38BC  
                         l1393 2EDA                           l1297 1E2E                           l4130 2182  
                         l4122 214A                           l4114 210C                           l4106 20D2  
                         l4042 1F52                           l4050 1F7C                           l4034 1F26  
                         l1298 1E1C                           l4202 1BAA                           l4140 21EC  
                         l4132 2186                           l4124 2154                           l4116 211C  
                         l4108 20E0                           l4060 1FA8                           l4052 1F8C  
                         l4044 1F62                           l4036 1F32                           l4220 1C2C  
                         l4212 1BF4                           l4204 1BB0                           l4028 4204  
                         l1397 36CA                           l4150 224E                           l4142 21F8  
                         l4134 2194                           l4126 2162                           l4118 212E  
                         l4062 1FB8                           l4070 1FE2                           l4054 1F92  
                         l4046 1F72                           l4038 1F40                           l4310 3702  
                         l4230 1C76                           l4222 1C44                           l4214 1C00  
                         l4206 1BD0                           l4302 40FA                           l5200 344A  
                         l3440 3C52                           l4160 22AC                           l4152 2264  
                         l4144 2206                           l4136 21C2                           l4128 2174  
                         l4080 2024                           l4072 1FF2                           l4064 1FC8  
                         l4056 1F98                           l4048 1F74                           l4320 377A  
                         l4312 3712                           l4240 1CCC                           l4232 1C86  
                         l4224 1C50                           l4216 1C0A                           l4208 1BE0  
                         l4304 410A                           l6000 2330                           l5210 3484  
                         l5202 3452                           l3450 3C8A                           l3442 3C5A  
                         l4162 22B2                           l4154 227E                           l4146 2230  
                         l4074 2008                           l4066 1FD8                           l4058 1FA6  
                         l4314 3740                           l4330 31A2                           l4250 1D70  
                         l4242 1CE8                           l4234 1C92                           l4226 1C5C  
                         l4218 1C20                           l4410 2B00                           l4402 2AB8  
                         l6010 233C                           l6002 2332                           l5220 34AA  
                         l5212 3486                           l5204 3460                           l5300 2DD4  
                         l3460 3CB6                           l3452 3C90                           l3444 3C6C  
                         l4164 22B4                           l4156 229A                           l4148 2234  
                         l4092 205C                           l4076 2018                           l4084 2038  
                         l4068 1FDA                           l4316 3750                           l4308 36D4  
                         l4340 3230                           l4332 31B2                           l4324 3136  
                         l4260 1DC6                           l4252 1D7E                           l4244 1CF4  
                         l4236 1CA2                           l4228 1C6A                           l4180 1B28  
                         l4172 1AFC                           l3700 1658                           l4420 2B80  
                         l4412 2B0C                           l4404 2AC0                           l4500 1114  
                         l6100 2606                           l6020 2346                           l6012 233E  
                         l6004 2334                           l5214 348C                           l5206 3466  
                         l5230 3590                           l5302 2DDA                           l5310 2E32  
                         l3454 3CA6                           l3446 3C74                           l4158 229E  
                         l4094 2076                           l4086 2048                           l4078 2020  
                         l4318 3774                           l4342 3236                           l4334 31C0  
                         l4326 3164                           l4262 1DD4                           l4254 1D9C  
                         l4246 1D10                           l4238 1CBC                           l4190 1B64  
                         l4182 1B38                           l4174 1B08                           l3702 1668  
                         l3710 1692                           l4430 2BC8                           l4422 2B82  
                         l4414 2B48                           l4406 2ACC                           l4510 1216  
                         l4502 1146                           l6102 2608                           l6030 236C  
                         l6022 2350                           l6014 2340                           l6006 2336  
                         l5208 347C                           l5216 3492                           l5240 35C4  
                         l5232 3594                           l5224 3576                           l5160 37C4  
                         l5152 377E                           l5312 2E4C                           l5320 2E98  
                         l5304 2E0C                           l4440 44A4                           l3456 3CAE  
                         l3448 3C7C                           l4096 2086                           l4088 2048  
                         l4336 31D2                           l4328 3174                           l4272 1E3E  
                         l4280 1E86                           l4264 1DD8                           l4256 1DA6  
                         l4248 1D3A                           l4192 1B6A                           l4184 1B48  
                         l4176 1B16                           l3800 185C                           l3720 16C2  
                         l3712 16A2                           l3704 1678                           l4360 309A  
                         l4352 305A                           l4432 2BCA                           l4424 2B86  
                         l4416 2B54                           l4408 2AFE                           l4520 1318  
                         l4512 1248                           l4504 1178                           l6104 2618  
                         l6040 237C                           l6032 2374                           l6024 2352  
                         l6016 2342                           l6008 2338                           l5218 34A2  
                         l5250 35FE                           l5242 35CC                           l5234 35A2  
                         l5226 357A                           l5162 37F6                           l5154 378E  
                         l5170 41DE                           l5322 2EA8                           l5314 2E5E  
                         l5306 2E10                           l5330 3626                           l5402 2D30  
                         l4442 44A6                           l3458 3CB0                           l4098 2096  
                         l4338 31E0                           l4290 1EFA                           l4282 1EA0  
                         l4274 1E4A                           l4266 1DE6                           l4258 1DB4  
                         l4194 1B78                           l4186 1B4E                           l4178 1B18  
                         l3810 1898                           l3802 186C                           l3730 1702  
                         l3722 16D0                           l3714 16A8                           l3706 1688  
                         l4370 30CA                           l4362 30A8                           l4354 3084  
                         l4346 3030                           l4426 2BAA                           l4418 2B62  
                         l4530 1454                           l4522 137E                           l4514 127A  
                         l4506 11B0                           l6050 23A6                           l6042 237E  
                         l6034 2376                           l6026 2354                           l6018 2344  
                         l5180 33F0                           l5244 35DA                           l5252 3604  
                         l5236 35AA                           l5228 3588                           l5156 379E  
                         l5172 41E2                           l5260 3828                           l5324 2EAE  
                         l5316 2E6E                           l5308 2E16                           l5340 3698  
                         l5332 362E                           l4444 44A8                           l4436 4494  
                         l5500 3C18                           l5420 394E                           l4292 1F08  
                         l4284 1EB4                           l4276 1E58                           l4268 1E14  
                         l4196 1B7A                           l4188 1B5E                           l3820 18DE  
                         l3812 18A6                           l3804 187A                           l3740 173C  
                         l3732 1704                           l3724 16D2                           l3716 16BA  
                         l3708 168A                           l4380 30F4                           l4372 30D4  
                         l4356 3086                           l4348 3046                           l4428 2BBA  
                         l4540 15EA                           l4532 14E4                           l4524 1394  
                         l4516 12B2                           l4508 11E2                           l6060 23DA  
                         l6052 23A8                           l6044 2380                           l6036 2378  
                         l6028 236A                           l5510 45DE                           l5190 341C  
                         l5182 33F4                           l5254 3614                           l5246 35F0  
                         l5238 35BC                           l5158 37A8                           l5166 41C4  
                         l5270 387A                           l5262 3838                           l5326 2EBE  
                         l5318 2E88                           l5174 450E                           l5334 3654  
                         l5342 36A0                           l5406 2D3C                           l4446 44AA  
                         l4438 449E                           l5350 2F56                           l5502 3C20  
                         l5430 3990                           l5422 3954                           l4294 1F0A  
                         l4286 1ECE                           l4278 1E82                           l4198 1B8A  
                         l3830 195A                           l3822 1912                           l3814 18A8  
                         l3806 1888                           l3750 1750                           l3742 1740  
                         l3726 16E2                           l3734 170C                           l3718 16BC  
                         l4382 3104                           l4358 3096                           l4390 2A2A  
                         l4534 1516                           l4526 13C6                           l4518 12E4  
                         l6070 24F8                           l6062 2442                           l6054 23AA  
                         l6046 23A2                           l6038 237A                           ?_pad 0010  
                         l5416 44BE                           l5192 3424                           l5184 3402  
                         l5256 361C                           l5248 35F8                           l5168 41D0  
                         l5272 387E                           l5264 3848                           l5280 2D64  
                         l5176 452A                           l5336 365C                           l5360 2BDC  
                         l5512 4140                           l5352 2F5A                           l5344 2EDC  
                         l5504 3C30                           l5432 3998                           l5424 396A  
                         l5440 3AE4                           l4288 1EEA                           l4296 1F10  
                         l3840 1996                           l3832 196A                           l3824 1914  
                         l3816 18B2                           l3808 1894                           l3760 1764  
                         l3752 1754                           l3744 1744                           l3736 171C  
                         l3728 16F2                           l4384 3114                           l4368 30C0  
                         l4392 2A3A                           l4528 1422                           l4536 15A6  
                         l4480 0F1C                           l5600 3BBE                           l6080 2550  
                         l6072 2504                           l6064 2470                           l6056 23AC  
                         l6048 23A4                           l4810 45C4                           l5418 44CE  
                         l5522 45FA                           l5530 45F0                           l5194 3428  
                         l5186 340A                           l5274 38AC                           l5266 3856  
                         l5290 2D9A                           l5282 2D68                           l5338 3678  
                         l5370 2C24                           l5362 2C02                           l5514 4148  
                         l5354 2F98                           l5346 2EF6                           l5506 3C34  
                         l5434 39A0                           l5426 3972                           l5442 3AFE  
                         l5610 4440                           l5602 4404                           l4298 1F14  
                         l3850 19C2                           l3842 1998                           l3826 1924  
                         l3818 18B8                           l3770 1778                           l3762 1768  
                         l3754 1758                           l3746 1748                           l3738 172E  
                         l4386 3124                           l4378 30E8                           l4394 2A48  
                         l4538 15DA                           l4490 1020                           l4482 0F50  
                         l4474 0EAA                           l6090 25A4                           l6082 2552  
                         l6074 2510                           l6066 24D4                           l6058 23B8  
                         l4812 45C6                           l5540 4188                           l5524 45FE  
                         l5532 45F4                           l5508 45CE                           l5196 3430  
                         l5188 340E                           l5276 42A4                           l5268 386A  
                         l5292 2DAA                           l5284 2D7C                           l6148 2C64  
                         l5372 2C28                           l5380 2C72                           l5364 2C0A  
                         l5516 4158                           l5356 2FB2                           l5348 2F44  
                         l5428 3988                           l5436 39AE                           l5460 3B46  
                         l5452 3B16                           l5444 3B06                           l5612 4456  
                         l5700 3E56                           l5620 433C                           l5604 4410  
                         l4820 4582                           l3860 19FA                           l3844 19A6  
                         l3836 197E                           l3852 19C4                           l3828 1934  
                         l3780 17D6                           l3764 176C                           l3756 175C  
                         l3748 174C                           l3772 177C                           l4396 2A8E  
                         l4492 1054                           l4484 0F84                           l4476 0EBC  
                         l6092 25BA                           l6084 2568                           l6076 2512  
                         l6068 24EC                           l4814 45C8                           l4806 45B2  
                         l4830 44EE                           l5542 4190                           l5534 4604  
                         l5526 45E6                           l5198 3442                           l5278 42B2  
                         l5294 2DB6                           l5286 2D84                           l5390 2CBA  
                         l5382 2C82                           l5374 2C34                           l5366 2C18  
                         l5518 4178                           l5358 2FF2                           l5438 39C4  
                         l5462 3B4A                           l5454 3B26                           l5446 3B0E  
                         l5614 43A0                           l5630 4392                           l5470 3A90  
                         l5622 4348                           l5710 3DCE                           l5606 4426  
                         l5702 3CC6                           l4822 458C                           l3870 1A78  
                         l3846 19AE                           l3838 1988                           l3854 19D2  
                         l3790 180C                           l3782 17EC                           l3774 1780  
                         l3766 1770                           l3758 1760                           l3694 163C  
                         l4398 2AA4                           l4494 1078                           l4486 0FB8  
                         l4478 0EEC                           l6094 25DE                           l6086 2574  
                         l6078 2538                           l4808 45BC                           l4840 4502  
                         l4832 44F8                           l5544 4198                           l5536 4608  
                         l5528 45EA                           l5296 2DBE                           l5288 2D94  
                         l5392 2CDA                           l5384 2C96                           l5368 2C1C  
                         l5560 4298                           l5552 4270                           l5632 4464  
                         l5456 3B2E                           l5616 43AC                           l5608 4434  
                         l5480 3AB0                           l5464 3A66                           l5624 4360  
                         l5712 3DDA                           l5640 4316                           l5720 3D82  
                         l5704 3CD2                           l4824 458E                           l4816 4576  
                         l3880 1ABE                           l3864 1A24                           l3872 1A7A  
                         l3856 19D6                           l3848 19B2                           l3792 1816  
                         l3784 17F8                           l3776 17AA                           l3768 1774  
                         l3696 1648                           l4496 10AC                           l4488 0FEC  
                         l5800 32A0                           l6096 25DE                           l6088 258C  
                         l4842 4504                           l4834 44FA                           l5546 41BE  
                         l5538 4184                           l5570 43E4                           l5298 2DCA  
                         l5394 2CFA                           l5386 2CA6                           l5378 2C3C  
                         l5554 4278                           l5490 3BF4                           l5634 4470  
                         l5458 3B36                           l5618 43C4                           l5626 436E  
                         l5482 3AB8                           l5466 3A80                           l5714 3DF2  
                         l5642 432E                           l5722 3D9A                           l5706 3CEA  
                         l4850 38BE                           l4826 4590                           l4818 4580  
                         l3890 1AE8                           l3882 1ACC                           l3874 1A8A  
                         l3866 1A30                           l3858 19E4                           l3794 1838  
                         l3786 17FC                           l3778 17C6                           l3698 1656  
                         l4498 10E0                           l5810 32D4                           l5802 32A2  
                         l5730 42D8                           l6098 25EA                           l4844 4506  
                         l4836 44FE                           l4828 44E6                           l5548 41C0  
                         l5660 4064                           l5652 3F7E                           l5572 43EC  
                         l5564 43D2                           l5396 2D12                           l5388 2CB0  
                         l5556 4280                           l5644 4558                           l5636 4486  
                         l5628 437A                           l5484 3AC8                           l5476 3A98  
                         l5468 3A88                           l5716 3DFE                           l5724 3DA6  
                         l5708 3CF6                           l5900 272E                           l4860 3926  
                         l4852 38CE                           l3892 1AEA                           l3884 1AD2  
                         l3876 1A9A                           l3868 1A3E                           l3796 1848  
                         l3788 180A                           l5812 32D6                           l5804 32A4  
                         l5732 42E4                           l5740 40D6                           l4846 4508  
                         l4838 4500                           l5654 3FC4                           l5646 3F2E  
                         l5566 43D6                           l5398 2D1C                           l5558 4288  
                         l5830 28A4                           l5822 2856                           l5574 39DE  
                         l5486 3ACC                           l5478 3AA8                           l5638 430A  
                         l5718 3D76                           l5670 3D1E                           l5726 4594  
                         l5910 2790                           l5902 2744                           l4870 3940  
                         l4862 3928                           l4854 38F4                           l3886 1AD4  
                         l3878 1ABA                           l5814 32F0                           l5806 32BC  
                         l5734 42FC                           l5590 3B86                           l5582 3B62  
                         l5750 34B4                           l5742 40E8                           l4848 450A  
                         l5664 3FCE                           l5648 3F74                           l5568 43E2  
                         l5840 2900                           l5832 28B6                           l5824 285C  
                         l5496 3BFC                           l5488 3BDC                           l5576 39F4  
                         l5680 3E8A                           l5672 3D2A                           l5728 45A8  
                         l5920 27F0                           l5912 27A4                           l5904 2758  
                         l4872 394A                           l4864 3932                           l4856 38F8  
                         l3888 1ADA                           l5816 3306                           l5808 32D2  
                         l5592 3B9A                           l5584 3B7E                           l5760 3514  
                         l5752 34CA                           l5736 40B4                           l5658 401E  
                         l5666 4014                           l5850 2960                           l5842 2916  
                         l5834 28B8                           l5826 2874                           l5498 3C10  
                         l5578 3A4C                           l5690 3EFA                           l5682 3EA2  
                         l5674 3D42                           l5922 27FC                           l5914 27B0  
                         l5906 2764                           l5930 2848                           l4874 4534  
                         l4866 3934                           l4858 391C                           l5818 331A  
                         l5594 3BA2                           l5770 355C                           l5762 351C  
                         l5754 34E0                           l5738 40C6                           l5860 29C4  
                         l5852 2976                           l5844 2918                           l5836 28D0  
                         l5828 288C                           l5780 425A                           l5692 3F06  
                         l5684 3EAE                           l5676 3D4E                           l5924 2812  
                         l5916 27C6                           l5908 277A                           l4876 454C  
                         l4868 393E                           l5596 3BAA                           l5772 3568  
                         l5764 3532                           l5756 34E8                           l5932 3324  
                         l5870 29F8                           l5862 29DA                           l5854 2978  
                         l5846 2930                           l5838 28E8                           l5782 4264  
                         l5774 423C                           l5686 3ED6                           l5678 3E7E  
                         l5694 3E26                           l5926 2828                           l5918 27DC  
                         l5790 326A                           l5598 3BBA                           l5766 3548  
                         l5758 34FE                           l5950 33E2                           l5942 3350  
                         l5934 332A                           l5872 2A0E                           l5864 29DC  
                         l5856 2990                           l5848 2948                           l5776 4240  
                         l5688 3EE2                           l5696 3E32                           l5928 283C  
                         l5880 2674                           l5792 326C                           l5784 323A  
                         l5768 3550                           l5944 33A8                           l5936 3336  
                         l5960 22CC                           l5866 29DE                           l5858 29AC  
                         l5778 424A                           l5698 3E4A                           l5890 26CC  
                         l5882 2680                           l5874 2634                           l5794 326E  
                         l5786 3240                           l5946 33BA                           l5938 333E  
                         l5970 22E6                           l5962 22D0                           l5954 22C0  
                         l5868 29E0                           l5892 26E2                           l5884 2696  
                         l5876 264A                           l5796 3270                           l5788 3258  
                         l5948 33D2                           l5980 2306                           l5972 22EA  
                         l5964 22D0                           l5956 22C4                           l5894 26F8  
                         l5886 26AC                           l5878 2660                           l5798 329E  
                         l5990 2326                           l5982 230A                           l5974 22F2  
                         l5966 22DC                           l5958 22C8                           l5896 270C  
                         l5888 26C0                           l5992 2328                           l5984 230E  
                         l5976 22FA                           l5968 22E2                           l5898 2718  
                         l5994 232A                           l5986 2316                           l5978 2302  
                         l5996 232C                           l5988 231E                           l5998 232E  
                         STR_1 0E6D                           STR_2 0EA6                           STR_3 0E01  
                         STR_4 0EA6                           STR_5 0E1E                           STR_6 0EA6  
                         STR_7 0E39                           STR_8 0EA6                           STR_9 0E54  
                         u3000 1924                           u3001 1920                           u3010 195A  
                         u3011 1956                           u3100 1A24                           u3020 196A  
                         u3101 1A20                           u3021 1966                           u3110 1A3E  
                         u3030 1996                           u3111 1A3A                           u3031 1992  
                         u3120 1A78                           u3040 19A6                           u4000 1454  
                 _BAUD4CONbits 0EE9                           u3121 1A74                           u3041 19A2  
                         u4001 1450                           u3130 1A8A                           u3050 19C2  
                         u4010 1516                           u3131 1A86                           u3051 19BE  
                         u4011 1512                           u3300 1FC8                           u3140 1A9A  
                         u3060 19D2                           u4020 15EA                           u3301 1FC4  
                         u3141 1A96                           u3061 19CE                           u4021 15E6  
                         u3310 2008                           u3150 1ABA                           u3070 19E4  
                         u3311 2004                           u3151 1AB6                           u3071 19E0  
                         u5000 4402                           u3400 2194                           u3320 2048  
                         u3160 1ACC                           u3080 19FA                           u3240 423A  
                         u5001 43FE                           u3401 2190                           u3321 2044  
                         u3161 1AC8                           u3081 19F6                           u3241 4236  
                         u5010 39F4                           u3410 21C2                           u3330 20BE  
                         u3250 1F40                           u3170 1AE8                           u3090 1A10  
                         _T2PR 0FBC                           u5011 39F0                           u3411 21BE  
                         u3331 20BA                           u3251 1F3C                           u3171 1AE4  
                         u3091 1A0C                           u3420 21D8                           u3340 20E0  
                         u3260 1F52                           u3500 1B38                           u5020 3BDA  
                         u5100 3548                           u3421 21D4                           u3341 20DC  
                         u3261 1F4E                           u3501 1B34                           u5021 3BD6  
                         u5101 3544                           u5110 288A                           u2470 3C6C  
                         u3430 21EC                           u3350 210A                           u3270 1F62  
                         u3510 1B78                           u5030 40C6                           u5111 2886  
                         u2471 3C68                           u3431 21E8                           u3351 2106  
                         u3271 1F5E                           u3511 1B74                           u5031 40C2  
                         u5120 28E6                           u2480 3C8A                           u5200 26E2  
                         u3440 2206                           u3360 212E                           u3280 1FA6  
                         u3600 1E14                           u3520 1B8A                           u2800 1668  
                         u5040 40E8                           u5121 28E2                           u2481 3C86  
                         u5201 26DE                           u3441 2202                           u3361 212A  
                         u3281 1FA2                           u3601 1E10                           u3521 1B86  
                         u2801 1664                           u5041 40E4                           u5130 2946  
                         u2490 3CA6                           u5210 26F8                           u3450 224E  
                         u3370 2144                           u3290 1FB8                           u3610 1E2A  
                         u3530 1B9A                           u2810 1678                           u5050 34CA  
                         u5131 2942                           u2491 3CA2                           u5211 26F4  
                         u3451 224A                           u3371 2140                           u3291 1FB4  
                         u3611 1E26                           u3531 1B96                           u2811 1674  
                         u5051 34C6                           u4500 4202                           u5140 29A6  
                         u5220 272E                           u3460 227E                           u3380 2162  
                         u3700 3164                           u3620 1E3E                           u3540 1BD0  
                         u2900 17C4                           u2820 16BA                           u5060 34E0  
                         u5300 334C                           u4501 41FE                           u5141 29A2  
                         u5221 272A                           u3461 227A                           u3381 215E  
                         u3701 3160                           u3621 1E3A                           u3541 1BCC  
                         u2821 16B6                           u5061 34DC                           u5301 3348  
                         u4510 3402                           u5150 2A0E                           u5230 2744  
                         u3470 22AC                           u3390 2182                           u3710 31A2  
                         u3630 1E58                           u3550 1BE0                           u2910 17EC  
                         u2830 16D0                           u5070 34FE                           u5310 33BA  
                         u4511 33FE                           u5151 2A0A                           u5231 2740  
                         u3471 22A8                           u3391 217E                           u3711 319E  
                         u3631 1E54                           u3551 1BDC                           u2911 17E8  
                         u2831 16CC                           u5071 34FA                           u5311 33B6  
                         u4520 341C                           u4600 35DA                           u5240 277A  
                         u5160 264A                           u3720 31C0                           u3640 1EA0  
                         u3560 1D5A                           u3480 1B16                           u2920 180A  
                         u2840 16E2                           u3800 3104                           u5080 3514  
                         u5320 24EC                           u4521 3418                           u4601 35D6  
                         u5241 2776                           u5161 2646                           u3721 31BC  
                         u3641 1E9C                           u3481 1B12                           u2921 1806  
                         u2841 16DE                           u3801 3100                           u5081 3510  
                         u5321 24E8                           u4530 3442                           u4610 35F0  
                         u5250 2790                           u5170 2660                           u3730 31E0  
                         u3650 1ECE                           u3570 1DB4                           u3490 1B28  
                         u2930 182A                           u2850 16F2                           u3810 3114  
                         u5090 3532                           u5330 25A4                           u4531 343E  
                         u4611 35EC                           u5251 278C                           u5171 265C  
                         u3731 31DC                           u3651 1ECA                           u3571 1DB0  
                         u3491 1B24                           u2931 1826                           u2851 16EE  
                         u3811 3110                           u5091 352E                           u5331 25A0  
                         u4540 3460                           u4620 3614                           u4460 378E  
                         u4700 2D94                           u5260 27C6                           u5180 2696  
                         u3740 3230                           u3660 1F08                           u3580 1DD4  
                         u2940 1838                           u2860 172E                           u3900 2BBA  
                         u3820 2A3A                           u5340 25BA                           u4541 345C  
                         u4621 3610                           u4461 378A                           u4701 2D90  
                         u5261 27C2                           u5181 2692                           u3741 322C  
                         u3661 1F04                           u3581 1DD0                           u3565 1D50  
                         u2941 1834                           u2861 172A                           u3901 2BB6  
                         u3821 2A36                           u5341 25B6                           u4550 347C  
                         u4470 379E                           u4630 3838                           u4710 2DAA  
                         u5270 27DC                           u5190 26AC                           u3670 3702  
                         u3590 1DE6                           u2950 1848                           u2870 173C  
                         u2790 1656                           u3750 3046                           u3910 2BC8  
                         u3830 2A48                           u5350 25D0                           u4551 3478  
                         u4471 379A                           u4631 3834                           u4711 2DA6  
                         u5271 27D8                           u5191 26A8                           u3671 36FE  
                         u3591 1DE2                           u2951 1844                           u2871 1738  
                         u2791 1652                           u3751 3042                           u3911 2BC4  
                         u3831 2A44                           u5351 25CC                           u5407 255C  
                         u4560 34A2                           u4480 37C4                           u4640 3856  
                         u4720 2E4C                           u4800 2EF6                           u5280 2812  
                         u3680 3740                           u2960 187A                           u2880 17AA  
                         u3760 307A                           u3840 2AA4                           u3920 1146  
                         u5360 25DE                           u4561 349E                           u4481 37C0  
                         u4641 3852                           u4721 2E48                           u4801 2EF2  
                         u5281 280E                           u3681 373C                           u2961 1876  
                         u2881 17A6                           u3841 2AA0                           u3921 1142  
                         u5361 25DA                           u5417 257E                           u4570 3588  
                         u4490 37F6                           u4650 389C                           u4730 2E5E  
                         u4810 2FB2                           u5290 2828                           u3690 3774  
                         u2970 1888                           u2890 17C2                           u3770 30A8  
                         u3850 2AFA                           u3930 1178                           u4571 3584  
                         u4491 37F2                           u4651 3898                           u4731 2E5A  
                         u4811 2FAE                           u5507 3D34                           u5291 2824  
                         u3691 3770                           u2971 1884                           u2891 17BC  
                         u3771 30A4                           u3851 2AF6                           u3931 1174  
                         u5427 3BB0                           u4580 35A2                           u4660 38AC  
                         u4740 2E6E                           u4820 2C02                           u4900 3988  
                         u2980 18A6                           u3780 30BC                           u3860 2B44  
                         u3940 11E2                           u4581 359E                           u4661 38A8  
                         u4741 2E6A                           u4821 2BFE                           u4901 3984  
                         u5517 441A                           u2981 18A2                           u3781 30B8  
                         u3765 3070                           u3861 2B40                           u3941 11DE  
                         u5437 4216                           u4590 35BC                           u4670 42B2  
                         u4750 2E88                           u4830 2C82                           u4910 39C4  
                         u2990 18DE                           u3790 30E4                           u3870 2B62  
                         u3950 1248                           u4591 35B8                           u4671 42AE  
                         u4751 2E84                           u4831 2C7E                           u4911 39C0  
                         u5607 444A                           u5527 3D8C                           u2991 18DA  
                         u3791 30E0                           u3871 2B5E                           u3951 1244  
                         u5447 42EE                           u4760 2E98                           u4680 2D78  
                         u4840 2CA6                           u4920 39DA                           u3880 2B72  
                         u3960 127A                           u4761 2E94                           u4681 2D72  
                         u4841 2CA2                           u4921 39D6                           u5617 3EEC  
                         u5537 4320                           u3881 2B6E                           u3961 1276  
                         u5457 324A                           u4770 2EA8                           u4690 2D7A  
                         u4850 2CDA                           u4930 3B60                           u3890 2B80  
                         u3970 12E4                           u4771 2EA4                           u4851 2CD6  
                         u5707 2952                           u4931 3B5C                           u5627 43B6  
                         u5547 3DE4                           u3891 2B7C                           u3971 12E0  
                         u5467 327A                           u5387 235E                           u4780 3654  
                         u4860 2CFA                           u4940 3AE2                           u3980 137E  
                         u4781 3650                           u4861 2CF6                           u5717 29B6  
                         u5637 3B3C                           u4941 3ADE                           u5557 4352  
                         u3981 137A                           u5477 32AE                           u5397 2542  
                         u4870 44CE                           u4790 36CA                           u4950 3C50  
                         u3990 13C6                           u4871 44CA                           u4791 36C6  
                         u5727 2A18                           u4951 3C4C                           u5647 447A  
                         u5567 3ABE                           u3991 13C2                           u5487 32E2  
                         u4880 44E4                           u4960 45DE                           u4881 44E0  
                         u4961 45DA                           u5737 43E6                           u5657 39A2  
                         u5577 3E3C                           u5497 3CDC                           u4970 4178  
                         u4890 396A                           u4971 4174                           u5667 3C26  
                         u4891 3966                           u5587 4384                           u4980 41AC  
                         u4981 41A4                           u5677 4250                           u5597 3E94  
                         u5687 2896                           u5697 28F2                           u4998 41AE  
                  main@current 00B2                    main@maximum 00AC                           abs@a 0008  
                         _dbuf 01BE                           _main 22C0                           _dtoa 2D64  
                         _path 0128           convert_rgb2hue@cCurr 003F                           _prec 00C6  
                         pad@i 0016                           pad@p 0013                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 0052                           _stop 394E  
          fullSpeedAhead@power 0017                           prodh 0FF4                           prodl 0FF3  
                         start 003A               __end_of_ADC_init 45CC                ___fldiv@new_exp 002C  
       __end_of_color_read_Red 3F7E                   ___param_bank 0000                 reading_hue@hue 0046  
                        ??_abs 000A                          ??_pad 0015           logAction@path_length 000A  
                ___fltol@sign1 003C                __end_of___fladd 1AFC                          ?_main 0001  
                        ?_dtoa 0018                          _ADPCH 0F5F                __end_of___fldiv 22C0  
              __end_of___awdiv 34B4                          STR_10 0EA6                          STR_11 0E85  
                        STR_12 0E9A                __end_of___awmod 3626                __end_of___flmul 1F26  
              __end_of___flsub 4140                __end_of___fltol 3136                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 3CC6                          i1l671 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3                __end_of_left135 43A0  
      __end_of_sendCharSerial4 45E4     __end_of_I2C_2_Master_Start 4604     __end_of_I2C_2_Master_Write 45F0  
                        _flags 00C8            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 377E                          _fputs 41C4                          pad@fp 0010  
                        _width 00C4                          _putch 460E                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 4434  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 0042  
              __end_of_moveRed 3D76                          tablat 0FF5          moveYellow@path_length 001F  
              __end_of_turn180 43D2                          ttemp5 0053                          ttemp6 0056  
                        ttemp7 005A                          status 0FD8                          wtemp8 0053  
              __end_of_sprintf 42A4          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 406E  
        _I2C_2_Master_RepStart 4604                ?_color_read_Red 0006                __initialization 406E  
                 __end_of_main 2634                   __end_of_dtoa 2EDC                   __end_of_stop 39DC  
        __end_of_moveLightBlue 3E7E                _get16bitTMR0val 4534                         ??_main 004D  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 36D4                _reverseStraight 34B4                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 4494  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3290 002E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i1l3288 001E                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 4270                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2BDC    convert_rgb2hue@greencurrent 0068               __end_of_decision 2856  
                       _LowISR 0018                  ??_Timer0_init 0002                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0031                         ___flge 3136                         ___fleq 36D4  
                    ??___fladd 000A                         ___wmul 450E                      ??___fldiv 0023  
             backOneAndHalf@mL 0019                      ??___awdiv 0006               backOneAndHalf@mR 001A  
                    ??___awmod 0006                      ??___flmul 000A                      ??___flsub 001A  
                    ??___fltol 0038                      ??___lwdiv 000C                         _left90 4434  
         read_prec_or_width@ap 0009                   ?_reverseTurn 001D                         clear_0 4086  
                       clear_1 4092                         clear_2 409E               ___awdiv@quotient 0008  
              ___awmod@divisor 0004                         _motorL 00D4                         _motorR 00CB  
                       isa$std 0001                ___awmod@counter 0006                      ??_left135 001B  
           send2USART@hue_char 0060                         pad@buf 0011               __end_of_right135 436E  
                       dtoa@fp 0018               __end_of_moveBlue 3F2E               __end_of_movePink 3DCE  
                       fputc@c 0002                         fputs@c 000D                         fputs@i 000E  
                       fputs@s 000A                      ??_right90 001B                   __mediumconst 0000  
      calibration_routine@cCal 0045                      ??_moveRed 0021                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074                         putch@c 0001  
             __end_of_vfprintf 4182                      ??_turn180 001B                         stop@mL 0014  
                       stop@mR 0015              ??_initDCmotorsPWM 0004                      ??_sprintf 0038  
             __end_of_turnLeft 3B62                     ___flge@ff1 0002                     ___flge@ff2 0006  
                 ___xxtofl@arg 000C                   ___xxtofl@exp 000B                   ___xxtofl@val 0002  
                   ___fleq@ff1 0002                     ___fleq@ff2 0006                fullSpeedBack@mL 0014  
              fullSpeedBack@mR 0015                     __accesstop 0060        __end_of__initialization 40AA  
     __end_of_color_read_Clear 401E       __end_of_color_read_Green 3FCE         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 430A                  ___rparam_used 0001                     ___fltol@f1 0034  
             ?_color_read_Blue 0006                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4556  
                _fullSpeedBack 3BDC                   __pidataBANK0 4610                  __end_of_fputc 3828  
                __end_of_fputs 4204                  __end_of_putch 4610        __end_of_reverseStraight 3576  
          __end_of_Timer0_init 450E               reading_hue@cCurr 0042            moveBlue@path_length 001F  
                   ??_ADC_init 0002                 main@clear_norm 00B6                     backHalf@mL 0019  
                   backHalf@mR 001A                        ??_fputc 0005                        ??_fputs 000D  
                      ??_putch 0002                     __pbssBANK0 00BC                     __pbssBANK1 0100  
                   __pbssBANK2 0200         __end_of_backOneAndHalf 433C                        ?_LowISR 0001  
            _color_writetoaddr 4556                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014  
              _convert_rgb2hue 0EAA                        ?___flge 0002                        ?___fleq 0002  
           ?_color_writetoaddr 0004                  _customDelayMs 4204                        ?___wmul 0002  
                      ?_left90 0019                      ?_backHalf 0019            ??_color_writetoaddr 0005  
                    ?___xxtofl 0002            _convert_rgb2hue$430 0088            _convert_rgb2hue$431 008C  
          _convert_rgb2hue$428 0080            _convert_rgb2hue$429 0084                      ?_decision 0047  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                  decision@color 004B  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                    moveGreen@mL 001D  
                  moveGreen@mR 001E                ?_backOneAndHalf 0019         color_writetoaddr@value 0004  
             ??_color_read_Red 0008      __end_of_color_writetoaddr 4576                      _ADREFbits 0F58  
                    ?_right135 0019             _I2C_2_Master_Start 45FA                     _initUSART4 4576  
           _I2C_2_Master_Write 45E4                      ?_moveBlue 001D                        __Hparam 0000  
                    ?_movePink 001D                        __Lparam 0000              color_read_Red@tmp 000B  
                  moveWhite@mL 001D                    moveWhite@mR 001E      customDelayMs@milliseconds 0002  
                  _Timer0_init 44E6                 ?_customDelayMs 0002        sendStringSerial4@string 0003  
             ?_get16bitTMR0val 0002                        ___fladd 163C                        ___fldiv 1F26  
                      ___awdiv 33F0                        ___awmod 3576                        ___flmul 1AFC  
                      ___flsub 40FA                        ___fltol 3030            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3C52            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 406E                     ??_backHalf 001B  
            __end_of_logAction 3A66                        __ramtop 0E00               ?_reverseStraight 0019  
                   _send2USART 4594                      ?_turnLeft 0014                        _left135 436E  
                      __ptext0 22C0                        __ptext1 3324                        __ptext2 40B4  
                      __ptext3 34B4                        __ptext4 3B62                        __ptext5 4204  
                      __ptext6 42D8                        __ptext7 323A                        __ptext8 0EAA  
                      __ptext9 2A28                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 004B  
       reverseStraight@delayMs 001D                        _right90 4404                      _T2HLTbits 0FBE  
                      _moveRed 3D1E                  _RxBufWriteCnt 0051                        _turn180 43A0  
                      _sprintf 4270                        main@hue 00B8           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 40AA              __end_of_moveGreen 3ED6  
            __end_of_moveWhite 430A                        fputc@fp 0004        __end_of_convert_rgb2hue 163C  
                      fputs@fp 000C              ?_color_click_init 0001             _read_prec_or_width 3626  
                   _moveOrange 3DCE                     ??_right135 001B                     _moveYellow 3CC6  
              ??_fullSpeedBack 0016                     ??_moveBlue 0021             ??_color_click_init 0006  
      convert_rgb2hue@clearmax 007C                     ??_movePink 0021               _colorCalibration 00E5  
            __end_of_vfpfcnvrt 2D64                        postdec2 0FDD            ?_read_prec_or_width 0008  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0028                     ??_vfprintf 0031        convert_rgb2hue@greenmax 006C  
                 _colorCurrent 00DD                     _returnHome 3324                _initDCmotorsPWM 38BE  
                   ??_turnLeft 0016                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 3AE4                    ___fladd@grs 0011       reverseTurn@turnDirection 001F  
                ___xxtofl@sign 000A                    returnHome@i 002C                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88                  logAction@path 000C                  logAction@time 0008  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002E               convert_rgb2hue@r 00A0                    ___fldiv@rem 0027  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 000F                    _CCP1CONbits 0FAB  
          _calibration_routine 2856              ?_color_read_Clear 0006                   _EUSART4RXbuf 0114  
                 _EUSART4TXbuf 0200                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 323A  
               __end_of___fleq 377E                 _fullSpeedAhead 3B62                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 4534  
               __end_of_left90 4464                    ?_send2USART 0045           ?_calibration_routine 0045  
          reverseStraight@time 001B            color_read_Clear@tmp 000B            start_initialization 406E  
         moveGreen@path_length 001F   calibration_routine@cal_state 0060                    __end_of_abs 42D8  
                  __end_of_pad 38BE                  _TxBufWriteCnt 0050               ?_convert_rgb2hue 003E  
                  ?_moveOrange 001D                    ?_moveYellow 001D            color_read_Green@tmp 000B  
                     ??_LowISR 0001        __end_of_initDCmotorsPWM 394E                    vfprintf@fmt 002F  
       __end_of_fullSpeedAhead 3BDC                       ??___flge 000A                       ??___fleq 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00ED  
                  ?_returnHome 0021          ??_calibration_routine 0046                  _moveLightBlue 3E26  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 001F  
                    ___fldiv@b 001B                      ___flmul@a 0006                      ___flmul@b 0002  
                  __pbssCOMRAM 004F                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0019  
            reverseStraight@mR 001A                  ??_reading_hue 0044            decision@path_length 0049  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3062 001B                   ?_Timer0_init 0001                ?_fullSpeedAhead 0014  
                     ?___fladd 0002                       ?___fldiv 001B                       ?___awdiv 0002  
                     ?___awmod 0002                       ?___flmul 0002                       ?___flsub 0012  
                     ?___fltol 0034                       ?___lwdiv 0008                     moveBlue@mL 001D  
                   moveBlue@mR 001E                 ?_moveLightBlue 001D                    __pintcodelo 0018  
                     ?_left135 0019                   _readingIndex 00C9           I2C_2_Master_Read@ack 0004  
         I2C_2_Master_Read@tmp 0005                    __smallconst 0E00                     movePink@mL 001D  
                   movePink@mR 001E              _I2C_2_Master_Idle 44BE                      _logAction 39DC  
            _I2C_2_Master_Init 4494              _I2C_2_Master_Read 4182                       ?_right90 0019  
            _I2C_2_Master_Stop 45F0                       ?_moveRed 001D                   _RxBufReadCnt 00CA  
                     _ADC_init 45B2             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010                       ?_turn180 0019  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002  
                     ?_sprintf 0032              _sendStringSerial4 43D2            ??_I2C_2_Master_Idle 0002  
          ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003                 ___wmul@product 0006  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0003                      _moveGreen 3E7E  
                     _PIE4bits 0E2D            __end_of_reading_hue 3324                       i1u224_20 002E  
                     i1u224_21 002A                      _moveWhite 42D8                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2BDC  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 44E6      __end_of_I2C_2_Master_Init 44BE  
    __end_of_I2C_2_Master_Read 41C4              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 45FA  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 0100  
                   ?_logAction 0008              ??_color_read_Blue 0008                   _TxBufReadCnt 004F  
                    _turnRight 3A66      __end_of_sendStringSerial4 4404                   moveOrange@mL 001D  
                 moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 460E             color_read_Blue@tmp 000B  
          __end_of_setMotorPWM 3030                main@path_length 00BA                   ??_initUSART4 0002  
                   ?_moveGreen 001D                     ?_moveWhite 001D                       __Hrparam 0000  
                   vfprintf@ap 0030                       __Lrparam 0000                     vfprintf@fp 002E  
        __end_of_fullSpeedBack 3C52                ??_moveLightBlue 0021                   moveYellow@mL 001D  
                 moveYellow@mR 001E                     ?_vfpfcnvrt 0023          moveOrange@path_length 001F  
                     _backHalf 4464                   ??_send2USART 0047                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00ED                     sprintf@fmt 0033  
                     ___xxtofl 2A28                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 2634            __end_of_reverseTurn 40FA                      right90@mL 0019  
                    right90@mR 001A                ___lwdiv@divisor 000A             __end_of_initUSART4 4594  
              ___lwdiv@counter 000E                     ?_turnRight 0014                       __ptext10 3030  
                     __ptext11 40FA                       __ptext20 2634                       __ptext12 163C  
                     __ptext21 4594                       __ptext13 1AFC                       __ptext30 3E26  
                     __ptext22 3CC6                       __ptext14 3136                       __ptext31 436E  
                     __ptext23 3D1E                       __ptext15 36D4                       __ptext40 3BDC  
                     __ptext32 3E7E                       __ptext24 4404                       __ptext16 1F26  
                     __ptext41 2EDC                       __ptext33 4434                       __ptext25 3D76  
                     __ptext17 4576                       __ptext50 3626                       __ptext42 3C52  
                     __ptext34 3ED6                       __ptext26 430A                       __ptext18 38BE  
                     __ptext51 450E                       __ptext43 423C                       __ptext35 43A0  
                     __ptext27 3DCE                       __ptext19 4534                       __ptext60 43D2  
                     __ptext52 2D64                       __ptext44 4556                       __ptext36 3AE4  
                     __ptext28 433C                       __ptext61 45CC                       __ptext53 3828  
                     __ptext45 4494                       __ptext37 39DC                       __ptext29 3A66  
                     __ptext70 4182                       __ptext62 3F2E                       __ptext54 41C4  
                     __ptext46 2856                       __ptext38 4464                       __ptext71 44BE  
                     __ptext63 3F7E                       __ptext55 377E                       __ptext47 4270  
                     __ptext39 394E                       __ptext72 44E6                       __ptext64 3FCE  
                     __ptext56 460E                       __ptext48 4140                       __ptext73 45B2  
                     __ptext65 401E                       __ptext57 42A4                       __ptext49 2BDC  
                     __ptext66 45E4                       __ptext58 3576                       __ptext67 45F0  
                     __ptext59 33F0                       __ptext68 45FA                       __ptext69 4604  
                  decision@hue 0047                      moveRed@mL 001D                      moveRed@mR 001E  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    _reading_hue 323A  
                reverseTurn@mL 001D                  reverseTurn@mR 001E                   ??_moveOrange 0021  
                   turnLeft@mL 0014                     turnLeft@mR 0015                   ??_moveYellow 0021  
           __end_of_send2USART 45B2                       _right135 433C                       _moveBlue 3ED6  
                     _movePink 3D76                     turnRight@i 0017             moveRed@path_length 001F  
        __end_of_customDelayMs 423C                       isa$xinst 0000                       left90@mL 0019  
                     left90@mR 001A                     _RC4STAbits 0EE7                       int$flags 0052  
                     _vfprintf 4140                   ??_returnHome 0027                       main@time 00B0  
                     _turnLeft 3AE4                      turn180@mL 0019                      turn180@mR 001A  
                  ??_logAction 000E                     _INTCONbits 0FF2                 customDelayMs@i 0005  
           __end_of_moveOrange 3E26             __end_of_moveYellow 3D1E                    _setMotorPWM 2EDC  
            ??_get16bitTMR0val 0004                       intlevel1 0000                      sprintf@ap 0038  
         returnHome@pathLength 0025              ??_reverseStraight 001D               ??_fullSpeedAhead 0016  
     moveLightBlue@path_length 001F  get16bitTMR0val@combined_value 0008             __end_of_returnHome 33F0  
                  ??_moveGreen 0021               returnHome@action 002B                      turnLeft@i 0017  
                  ??_moveWhite 001F    __end_of_calibration_routine 2A28    convert_rgb2hue@clearcurrent 0078  
                send2USART@hue 0045                    ??_vfpfcnvrt 0026                    _reverseTurn 40B4  
             _color_click_init 423C                       sprintf@f 0039                       sprintf@s 0032  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                    ??_turnRight 0016  
                ___fladd@signs 000E                     _TX4STAbits 0EE8                _sendCharSerial4 45CC  
               returnHome@path 0023                 returnHome@time 0029                   ___fladd@aexp 000F  
                 ___fladd@bexp 0010                   returnHome@mL 0021                   returnHome@mR 0022  
              logAction@action 0010  
