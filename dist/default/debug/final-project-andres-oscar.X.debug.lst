

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 22:29:09 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=3
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    92   000000                     
    93                           ; Generated 21/07/2023 GMT
    94                           ; 
    95                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution. Publication is not required when
   109                           ;        this file is used in an embedded application.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F67K40 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127   000000                     
   128                           	psect	idataBANK0
   129   004550                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for _dataFlag
   133   004550  01                 	db	1
   134   000000                     _TMR0H	set	4052
   135   000000                     _TX4REG	set	3812
   136   000000                     _RC4STAbits	set	3815
   137   000000                     _SP4BRGH	set	3814
   138   000000                     _LATHbits	set	3968
   139   000000                     _LATFbits	set	3966
   140   000000                     _TRISFbits	set	3974
   141   000000                     _TRISAbits	set	3969
   142   000000                     _TRISEbits	set	3973
   143   000000                     _TRISGbits	set	3975
   144   000000                     _TRISDbits	set	3972
   145   000000                     _PORTFbits	set	3982
   146   000000                     _SSP2CON2bits	set	3802
   147   000000                     _RX4PPS	set	3605
   148   000000                     _SSP2CLKPPS	set	3612
   149   000000                     _SSP2DATPPS	set	3613
   150   000000                     _ANSELDbits	set	3751
   151   000000                     _SSP2ADD	set	3798
   152   000000                     _SSP2CON1bits	set	3801
   153   000000                     _LATAbits	set	3961
   154   000000                     _LATEbits	set	3965
   155   000000                     _LATGbits	set	3967
   156   000000                     _LATCbits	set	3963
   157   000000                     _LATDbits	set	3964
   158   000000                     _CCPR2H	set	4006
   159   000000                     _CCPR1H	set	4010
   160   000000                     _RC4REG	set	3811
   161   000000                     _SP4BRGL	set	3813
   162   000000                     _TX4STAbits	set	3816
   163   000000                     _BAUD4CONbits	set	3817
   164   000000                     _SSP2CON2	set	3802
   165   000000                     _CCPR4H	set	3873
   166   000000                     _CCPR3H	set	3877
   167   000000                     _SSP2STAT	set	3800
   168   000000                     _ANSELFbits	set	3764
   169   000000                     _SSP2BUF	set	3797
   170   000000                     _IPR0bits	set	3615
   171   000000                     _PIE0bits	set	3625
   172   000000                     _PIE4bits	set	3629
   173   000000                     _PIR4bits	set	3639
   174   000000                     _RC0PPS	set	3682
   175   000000                     _RC7PPS	set	3689
   176   000000                     _RD5PPS	set	3695
   177   000000                     _RE2PPS	set	3700
   178   000000                     _RD6PPS	set	3696
   179   000000                     _CCP1CONbits	set	4011
   180   000000                     _CCPTMRS0bits	set	4013
   181   000000                     _T2PR	set	4028
   182   000000                     _T2CONbits	set	4029
   183   000000                     _T0CON0bits	set	4053
   184   000000                     _CCP2CONbits	set	4007
   185   000000                     _CCP3CONbits	set	3878
   186   000000                     _ADREFbits	set	3928
   187   000000                     _CCP4CONbits	set	3874
   188   000000                     _TRISHbits	set	3976
   189   000000                     _TRISCbits	set	3971
   190   000000                     _INTCONbits	set	4082
   191   000000                     _T0CON1bits	set	4054
   192   000000                     _ADPCH	set	3935
   193   000000                     _ADRESH	set	3940
   194   000000                     _ADCON0bits	set	3936
   195   000000                     _RE4PPS	set	3702
   196   000000                     _RG6PPS	set	3720
   197   000000                     _TMR0L	set	4051
   198   000000                     _T2CLKCONbits	set	4031
   199   000000                     _T2HLTbits	set	4030
   200   000000                     _PIR0bits	set	3635
   201                           
   202                           	psect	smallconst
   203   000E00                     __psmallconst:
   204                           	callstack 0
   205   000E00  00                 	db	0
   206   000E01                     STR_9:
   207                           
   208                           ; BSR set to: 14
   209   000E01  43                 	db	67	;'C'
   210   000E02  61                 	db	97	;'a'
   211   000E03  6C                 	db	108	;'l'
   212   000E04  69                 	db	105	;'i'
   213   000E05  62                 	db	98	;'b'
   214   000E06  72                 	db	114	;'r'
   215   000E07  61                 	db	97	;'a'
   216   000E08  74                 	db	116	;'t'
   217   000E09  69                 	db	105	;'i'
   218   000E0A  6F                 	db	111	;'o'
   219   000E0B  6E                 	db	110	;'n'
   220   000E0C  20                 	db	32
   221   000E0D  73                 	db	115	;'s'
   222   000E0E  74                 	db	116	;'t'
   223   000E0F  61                 	db	97	;'a'
   224   000E10  74                 	db	116	;'t'
   225   000E11  65                 	db	101	;'e'
   226   000E12  20                 	db	32
   227   000E13  3D                 	db	61	;'='
   228   000E14  20                 	db	32
   229   000E15  20                 	db	32
   230   000E16  61                 	db	97	;'a'
   231   000E17  6D                 	db	109	;'m'
   232   000E18  62                 	db	98	;'b'
   233   000E19  69                 	db	105	;'i'
   234   000E1A  65                 	db	101	;'e'
   235   000E1B  6E                 	db	110	;'n'
   236   000E1C  74                 	db	116	;'t'
   237   000E1D  20                 	db	32
   238   000E1E  6C                 	db	108	;'l'
   239   000E1F  69                 	db	105	;'i'
   240   000E20  67                 	db	103	;'g'
   241   000E21  68                 	db	104	;'h'
   242   000E22  74                 	db	116	;'t'
   243   000E23  00                 	db	0
   244   000E24                     STR_3:
   245                           
   246                           ; BSR set to: 14
   247   000E24  43                 	db	67	;'C'
   248   000E25  61                 	db	97	;'a'
   249   000E26  6C                 	db	108	;'l'
   250   000E27  69                 	db	105	;'i'
   251   000E28  62                 	db	98	;'b'
   252   000E29  72                 	db	114	;'r'
   253   000E2A  61                 	db	97	;'a'
   254   000E2B  74                 	db	116	;'t'
   255   000E2C  69                 	db	105	;'i'
   256   000E2D  6F                 	db	111	;'o'
   257   000E2E  6E                 	db	110	;'n'
   258   000E2F  20                 	db	32
   259   000E30  73                 	db	115	;'s'
   260   000E31  74                 	db	116	;'t'
   261   000E32  61                 	db	97	;'a'
   262   000E33  74                 	db	116	;'t'
   263   000E34  65                 	db	101	;'e'
   264   000E35  20                 	db	32
   265   000E36  3D                 	db	61	;'='
   266   000E37  20                 	db	32
   267   000E38  67                 	db	103	;'g'
   268   000E39  72                 	db	114	;'r'
   269   000E3A  65                 	db	101	;'e'
   270   000E3B  65                 	db	101	;'e'
   271   000E3C  6E                 	db	110	;'n'
   272   000E3D  20                 	db	32
   273   000E3E  0A                 	db	10
   274   000E3F  0D                 	db	13
   275   000E40  00                 	db	0
   276   000E41                     STR_5:
   277                           
   278                           ; BSR set to: 14
   279   000E41  43                 	db	67	;'C'
   280   000E42  61                 	db	97	;'a'
   281   000E43  6C                 	db	108	;'l'
   282   000E44  69                 	db	105	;'i'
   283   000E45  62                 	db	98	;'b'
   284   000E46  72                 	db	114	;'r'
   285   000E47  61                 	db	97	;'a'
   286   000E48  74                 	db	116	;'t'
   287   000E49  69                 	db	105	;'i'
   288   000E4A  6F                 	db	111	;'o'
   289   000E4B  6E                 	db	110	;'n'
   290   000E4C  20                 	db	32
   291   000E4D  73                 	db	115	;'s'
   292   000E4E  74                 	db	116	;'t'
   293   000E4F  61                 	db	97	;'a'
   294   000E50  74                 	db	116	;'t'
   295   000E51  65                 	db	101	;'e'
   296   000E52  3D                 	db	61	;'='
   297   000E53  20                 	db	32
   298   000E54  62                 	db	98	;'b'
   299   000E55  6C                 	db	108	;'l'
   300   000E56  75                 	db	117	;'u'
   301   000E57  65                 	db	101	;'e'
   302   000E58  20                 	db	32
   303   000E59  0A                 	db	10
   304   000E5A  0D                 	db	13
   305   000E5B  00                 	db	0
   306   000E5C                     STR_7:
   307                           
   308                           ; BSR set to: 14
   309   000E5C  43                 	db	67	;'C'
   310   000E5D  61                 	db	97	;'a'
   311   000E5E  6C                 	db	108	;'l'
   312   000E5F  69                 	db	105	;'i'
   313   000E60  62                 	db	98	;'b'
   314   000E61  72                 	db	114	;'r'
   315   000E62  61                 	db	97	;'a'
   316   000E63  74                 	db	116	;'t'
   317   000E64  69                 	db	105	;'i'
   318   000E65  6F                 	db	111	;'o'
   319   000E66  6E                 	db	110	;'n'
   320   000E67  20                 	db	32
   321   000E68  73                 	db	115	;'s'
   322   000E69  74                 	db	116	;'t'
   323   000E6A  61                 	db	97	;'a'
   324   000E6B  74                 	db	116	;'t'
   325   000E6C  65                 	db	101	;'e'
   326   000E6D  20                 	db	32
   327   000E6E  3D                 	db	61	;'='
   328   000E6F  20                 	db	32
   329   000E70  20                 	db	32
   330   000E71  77                 	db	119	;'w'
   331   000E72  68                 	db	104	;'h'
   332   000E73  69                 	db	105	;'i'
   333   000E74  74                 	db	116	;'t'
   334   000E75  65                 	db	101	;'e'
   335   000E76  00                 	db	0
   336   000E77                     STR_11:
   337                           
   338                           ; BSR set to: 14
   339   000E77  43                 	db	67	;'C'
   340   000E78  41                 	db	65	;'A'
   341   000E79  4C                 	db	76	;'L'
   342   000E7A  49                 	db	73	;'I'
   343   000E7B  42                 	db	66	;'B'
   344   000E7C  52                 	db	82	;'R'
   345   000E7D  41                 	db	65	;'A'
   346   000E7E  54                 	db	84	;'T'
   347   000E7F  49                 	db	73	;'I'
   348   000E80  4F                 	db	79	;'O'
   349   000E81  4E                 	db	78	;'N'
   350   000E82  20                 	db	32
   351   000E83  43                 	db	67	;'C'
   352   000E84  4F                 	db	79	;'O'
   353   000E85  4D                 	db	77	;'M'
   354   000E86  50                 	db	80	;'P'
   355   000E87  4C                 	db	76	;'L'
   356   000E88  45                 	db	69	;'E'
   357   000E89  54                 	db	84	;'T'
   358   000E8A  45                 	db	69	;'E'
   359   000E8B  44                 	db	68	;'D'
   360   000E8C  20                 	db	32
   361   000E8D  0A                 	db	10
   362   000E8E  0D                 	db	13
   363   000E8F  00                 	db	0
   364   000E90                     STR_1:
   365                           
   366                           ; BSR set to: 14
   367   000E90  43                 	db	67	;'C'
   368   000E91  61                 	db	97	;'a'
   369   000E92  6C                 	db	108	;'l'
   370   000E93  69                 	db	105	;'i'
   371   000E94  62                 	db	98	;'b'
   372   000E95  72                 	db	114	;'r'
   373   000E96  61                 	db	97	;'a'
   374   000E97  74                 	db	116	;'t'
   375   000E98  69                 	db	105	;'i'
   376   000E99  6F                 	db	111	;'o'
   377   000E9A  6E                 	db	110	;'n'
   378   000E9B  20                 	db	32
   379   000E9C  73                 	db	115	;'s'
   380   000E9D  74                 	db	116	;'t'
   381   000E9E  61                 	db	97	;'a'
   382   000E9F  74                 	db	116	;'t'
   383   000EA0  65                 	db	101	;'e'
   384   000EA1  20                 	db	32
   385   000EA2  3D                 	db	61	;'='
   386   000EA3  20                 	db	32
   387   000EA4  72                 	db	114	;'r'
   388   000EA5  65                 	db	101	;'e'
   389   000EA6  64                 	db	100	;'d'
   390   000EA7  00                 	db	0
   391   000EA8                     
   392                           ; BSR set to: 14
   393   000EA8  56                 	db	86	;'V'
   394   000EA9  6F                 	db	111	;'o'
   395   000EAA  6C                 	db	108	;'l'
   396   000EAB  74                 	db	116	;'t'
   397   000EAC  61                 	db	97	;'a'
   398   000EAD  67                 	db	103	;'g'
   399   000EAE  65                 	db	101	;'e'
   400   000EAF  20                 	db	32
   401   000EB0  3D                 	db	61	;'='
   402   000EB1  20                 	db	32
   403   000EB2  25                 	db	37
   404   000EB3  64                 	db	100	;'d'
   405   000EB4  2E                 	db	46
   406   000EB5  25                 	db	37
   407   000EB6  30                 	db	48	;'0'
   408   000EB7  32                 	db	50	;'2'
   409   000EB8  64                 	db	100	;'d'
   410   000EB9  2C                 	db	44
   411   000EBA  20                 	db	32
   412   000EBB  20                 	db	32
   413   000EBC  00                 	db	0
   414   000EBD                     STR_14:
   415                           
   416                           ; BSR set to: 14
   417   000EBD  68                 	db	104	;'h'
   418   000EBE  75                 	db	117	;'u'
   419   000EBF  65                 	db	101	;'e'
   420   000EC0  3D                 	db	61	;'='
   421   000EC1  25                 	db	37
   422   000EC2  30                 	db	48	;'0'
   423   000EC3  33                 	db	51	;'3'
   424   000EC4  64                 	db	100	;'d'
   425   000EC5  2C                 	db	44
   426   000EC6  20                 	db	32
   427   000EC7  20                 	db	32
   428   000EC8  00                 	db	0
   429   000EC9                     STR_2:
   430                           
   431                           ; BSR set to: 14
   432   000EC9  2E                 	db	46
   433   000ECA  00                 	db	0
   434   000ECB  00                 	db	0	; dummy byte at the end
   435   000000                     
   436                           ; #config settings
   437                           
   438                           	psect	cinit
   439   004094                     __pcinit:
   440                           	callstack 0
   441   004094                     start_initialization:
   442                           	callstack 0
   443   004094                     __initialization:
   444                           	callstack 0
   445                           
   446                           ; Initialize objects allocated to BANK0 (1 bytes)
   447                           ; load TBLPTR registers with __pidataBANK0
   448   004094  0E50               	movlw	low __pidataBANK0
   449   004096  6EF6               	movwf	tblptrl,c
   450   004098  0E45               	movlw	high __pidataBANK0
   451   00409A  6EF7               	movwf	tblptrh,c
   452   00409C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   453   00409E  6EF8               	movwf	tblptru,c
   454   0040A0  0009               	tblrd		*+	;fetch initializer
   455   0040A2  CFF5 F0FF          	movff	tablat,__pdataBANK0
   456                           
   457                           ; Clear objects allocated to BANK2 (250 bytes)
   458   0040A6  EE02  F000         	lfsr	0,__pbssBANK2
   459   0040AA  0EFA               	movlw	250
   460   0040AC                     clear_0:
   461   0040AC  6AEE               	clrf	postinc0,c
   462   0040AE  06E8               	decf	wreg,f,c
   463   0040B0  E1FD               	bnz	clear_0
   464                           
   465                           ; Clear objects allocated to BANK1 (132 bytes)
   466   0040B2  EE01  F000         	lfsr	0,__pbssBANK1
   467   0040B6  0E84               	movlw	132
   468   0040B8                     clear_1:
   469   0040B8  6AEE               	clrf	postinc0,c
   470   0040BA  06E8               	decf	wreg,f,c
   471   0040BC  E1FD               	bnz	clear_1
   472                           
   473                           ; Clear objects allocated to BANK0 (57 bytes)
   474   0040BE  EE00  F0C6         	lfsr	0,__pbssBANK0
   475   0040C2  0E39               	movlw	57
   476   0040C4                     clear_2:
   477   0040C4  6AEE               	clrf	postinc0,c
   478   0040C6  06E8               	decf	wreg,f,c
   479   0040C8  E1FD               	bnz	clear_2
   480                           
   481                           ; Clear objects allocated to COMRAM (1 bytes)
   482   0040CA  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   483   0040CC                     end_of_initialization:
   484                           	callstack 0
   485   0040CC                     __end_of__initialization:
   486                           	callstack 0
   487   0040CC  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   488   0040CE  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   489   0040D0  0100               	movlb	0
   490   0040D2  EF71  F011         	goto	_main	;jump to C main() function
   491                           
   492                           	psect	bssCOMRAM
   493   00005C                     __pbssCOMRAM:
   494                           	callstack 0
   495   00005C                     _TxBufWriteCnt:
   496                           	callstack 0
   497   00005C                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500   0000C6                     __pbssBANK0:
   501                           	callstack 0
   502   0000C6                     _hue:
   503                           	callstack 0
   504   0000C6                     	ds	10
   505   0000D0                     _width:
   506                           	callstack 0
   507   0000D0                     	ds	2
   508   0000D2                     _prec:
   509                           	callstack 0
   510   0000D2                     	ds	2
   511   0000D4                     _flags:
   512                           	callstack 0
   513   0000D4                     	ds	1
   514   0000D5                     _readingIndex:
   515                           	callstack 0
   516   0000D5                     	ds	1
   517   0000D6                     _TxBufReadCnt:
   518                           	callstack 0
   519   0000D6                     	ds	1
   520   0000D7                     _RxBufReadCnt:
   521                           	callstack 0
   522   0000D7                     	ds	1
   523   0000D8                     _RxBufWriteCnt:
   524                           	callstack 0
   525   0000D8                     	ds	1
   526   0000D9                     _colorCurrent:
   527                           	callstack 0
   528   0000D9                     	ds	10
   529   0000E3                     _colorCalibration:
   530                           	callstack 0
   531   0000E3                     	ds	10
   532   0000ED                     _motorR:
   533                           	callstack 0
   534   0000ED                     	ds	9
   535   0000F6                     _motorL:
   536                           	callstack 0
   537   0000F6                     	ds	9
   538                           
   539                           	psect	dataBANK0
   540   0000FF                     __pdataBANK0:
   541                           	callstack 0
   542   0000FF                     _dataFlag:
   543                           	callstack 0
   544   0000FF                     	ds	1
   545                           
   546                           	psect	bssBANK1
   547   000100                     __pbssBANK1:
   548                           	callstack 0
   549   000100                     _EUSART4TXbuf:
   550                           	callstack 0
   551   000100                     	ds	60
   552   00013C                     _ldrReadings:
   553                           	callstack 0
   554   00013C                     	ds	20
   555   000150                     _EUSART4RXbuf:
   556                           	callstack 0
   557   000150                     	ds	20
   558   000164                     _dbuf:
   559                           	callstack 0
   560   000164                     	ds	32
   561                           
   562                           	psect	bssBANK2
   563   000200                     __pbssBANK2:
   564                           	callstack 0
   565   000200                     _path:
   566                           	callstack 0
   567   000200                     	ds	250
   568                           
   569                           	psect	cstackBANK0
   570   000060                     __pcstackBANK0:
   571                           	callstack 0
   572   000060                     convert_rgb2hue@redcurrent:
   573                           	callstack 0
   574   000060                     send2USART@hue_char:
   575                           	callstack 0
   576                           
   577                           ; 50 bytes @ 0x0
   578   000060                     	ds	4
   579   000064                     convert_rgb2hue@redmax:
   580                           	callstack 0
   581                           
   582                           ; 4 bytes @ 0x4
   583   000064                     	ds	4
   584   000068                     convert_rgb2hue@greencurrent:
   585                           	callstack 0
   586                           
   587                           ; 4 bytes @ 0x8
   588   000068                     	ds	4
   589   00006C                     convert_rgb2hue@greenmax:
   590                           	callstack 0
   591                           
   592                           ; 4 bytes @ 0xC
   593   00006C                     	ds	4
   594   000070                     convert_rgb2hue@bluecurrent:
   595                           	callstack 0
   596                           
   597                           ; 4 bytes @ 0x10
   598   000070                     	ds	4
   599   000074                     convert_rgb2hue@bluemax:
   600                           	callstack 0
   601                           
   602                           ; 4 bytes @ 0x14
   603   000074                     	ds	4
   604   000078                     convert_rgb2hue@clearcurrent:
   605                           	callstack 0
   606                           
   607                           ; 4 bytes @ 0x18
   608   000078                     	ds	4
   609   00007C                     convert_rgb2hue@clearmax:
   610                           	callstack 0
   611                           
   612                           ; 4 bytes @ 0x1C
   613   00007C                     	ds	4
   614   000080                     _convert_rgb2hue$439:
   615                           	callstack 0
   616                           
   617                           ; 4 bytes @ 0x20
   618   000080                     	ds	4
   619   000084                     _convert_rgb2hue$440:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0x24
   623   000084                     	ds	4
   624   000088                     _convert_rgb2hue$441:
   625                           	callstack 0
   626                           
   627                           ; 4 bytes @ 0x28
   628   000088                     	ds	4
   629   00008C                     _convert_rgb2hue$442:
   630                           	callstack 0
   631                           
   632                           ; 4 bytes @ 0x2C
   633   00008C                     	ds	4
   634   000090                     convert_rgb2hue@min:
   635                           	callstack 0
   636                           
   637                           ; 4 bytes @ 0x30
   638   000090                     	ds	4
   639   000094                     convert_rgb2hue@diff:
   640                           	callstack 0
   641                           
   642                           ; 4 bytes @ 0x34
   643   000094                     	ds	4
   644   000098                     convert_rgb2hue@max:
   645                           	callstack 0
   646                           
   647                           ; 4 bytes @ 0x38
   648   000098                     	ds	4
   649   00009C                     convert_rgb2hue@hue:
   650                           	callstack 0
   651                           
   652                           ; 4 bytes @ 0x3C
   653   00009C                     	ds	4
   654   0000A0                     convert_rgb2hue@r:
   655                           	callstack 0
   656                           
   657                           ; 4 bytes @ 0x40
   658   0000A0                     	ds	4
   659   0000A4                     convert_rgb2hue@g:
   660                           	callstack 0
   661                           
   662                           ; 4 bytes @ 0x44
   663   0000A4                     	ds	4
   664   0000A8                     convert_rgb2hue@b:
   665                           	callstack 0
   666                           
   667                           ; 4 bytes @ 0x48
   668   0000A8                     	ds	4
   669   0000AC                     ??_reading_hue:
   670                           
   671                           ; 1 bytes @ 0x4C
   672   0000AC                     	ds	2
   673   0000AE                     reading_hue@hue:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x4E
   677   0000AE                     	ds	2
   678   0000B0                     ??_main:
   679                           
   680                           ; 1 bytes @ 0x50
   681   0000B0                     	ds	2
   682   0000B2                     main@maximum:
   683                           	callstack 0
   684                           
   685                           ; 4 bytes @ 0x52
   686   0000B2                     	ds	4
   687   0000B6                     main@current:
   688                           	callstack 0
   689                           
   690                           ; 4 bytes @ 0x56
   691   0000B6                     	ds	4
   692   0000BA                     main@hue:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x5A
   696   0000BA                     	ds	2
   697   0000BC                     main@time:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x5C
   701   0000BC                     	ds	2
   702   0000BE                     main@ambient:
   703                           	callstack 0
   704                           
   705                           ; 4 bytes @ 0x5E
   706   0000BE                     	ds	4
   707   0000C2                     main@clear_norm:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x62
   711   0000C2                     	ds	2
   712   0000C4                     main@path_length:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x64
   716   0000C4                     	ds	2
   717                           
   718                           	psect	cstackCOMRAM
   719   000001                     __pcstackCOMRAM:
   720                           	callstack 0
   721   000001                     ??_LowISR:
   722   000001                     
   723                           ; 1 bytes @ 0x0
   724   000001                     	ds	1
   725   000002                     ??_I2C_2_Master_Idle:
   726   000002                     ?_get16bitTMR0val:
   727                           	callstack 0
   728   000002                     ?___wmul:
   729                           	callstack 0
   730   000002                     ?___awdiv:
   731                           	callstack 0
   732   000002                     ?___awmod:
   733                           	callstack 0
   734   000002                     ?___fladd:
   735                           	callstack 0
   736   000002                     ?___xxtofl:
   737                           	callstack 0
   738   000002                     sendCharSerial4@charToSend:
   739                           	callstack 0
   740   000002                     initDCmotorsPWM@PWMperiod:
   741                           	callstack 0
   742   000002                     customDelayMs@milliseconds:
   743                           	callstack 0
   744   000002                     ___wmul@multiplier:
   745                           	callstack 0
   746   000002                     ___awdiv@dividend:
   747                           	callstack 0
   748   000002                     ___awmod@dividend:
   749                           	callstack 0
   750   000002                     fputc@c:
   751                           	callstack 0
   752   000002                     ___fleq@ff1:
   753                           	callstack 0
   754   000002                     ___flge@ff1:
   755                           	callstack 0
   756   000002                     ___fladd@b:
   757                           	callstack 0
   758   000002                     ___xxtofl@val:
   759                           	callstack 0
   760                           
   761                           ; 4 bytes @ 0x1
   762   000002                     	ds	1
   763   000003                     ??_I2C_2_Master_Read:
   764   000003                     I2C_2_Master_Write@data_byte:
   765                           	callstack 0
   766   000003                     sendStringSerial4@string:
   767                           	callstack 0
   768                           
   769                           ; 1 bytes @ 0x2
   770   000003                     	ds	1
   771   000004                     ??_get16bitTMR0val:
   772   000004                     ??_customDelayMs:
   773   000004                     color_writetoaddr@value:
   774                           	callstack 0
   775   000004                     I2C_2_Master_Read@ack:
   776                           	callstack 0
   777   000004                     fputc@fp:
   778                           	callstack 0
   779   000004                     ___wmul@multiplicand:
   780                           	callstack 0
   781   000004                     ___awdiv@divisor:
   782                           	callstack 0
   783   000004                     ___awmod@divisor:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x3
   787   000004                     	ds	1
   788   000005                     ??_fputc:
   789   000005                     color_writetoaddr@address:
   790                           	callstack 0
   791   000005                     I2C_2_Master_Read@tmp:
   792                           	callstack 0
   793   000005                     customDelayMs@i:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x4
   797   000005                     	ds	1
   798   000006                     ??_color_click_init:
   799   000006                     ??___xxtofl:
   800   000006                     ?_color_read_Red:
   801                           	callstack 0
   802   000006                     ?_color_read_Green:
   803                           	callstack 0
   804   000006                     ?_color_read_Blue:
   805                           	callstack 0
   806   000006                     ?_color_read_Clear:
   807                           	callstack 0
   808   000006                     ___awdiv@counter:
   809                           	callstack 0
   810   000006                     ___awmod@counter:
   811                           	callstack 0
   812   000006                     ___wmul@product:
   813                           	callstack 0
   814   000006                     ___fleq@ff2:
   815                           	callstack 0
   816   000006                     ___flge@ff2:
   817                           	callstack 0
   818   000006                     ___fladd@a:
   819                           	callstack 0
   820                           
   821                           ; 4 bytes @ 0x5
   822   000006                     	ds	1
   823   000007                     ___awdiv@sign:
   824                           	callstack 0
   825   000007                     ___awmod@sign:
   826                           	callstack 0
   827                           
   828                           ; 1 bytes @ 0x6
   829   000007                     	ds	1
   830   000008                     ??_color_read_Red:
   831   000008                     ??_color_read_Green:
   832   000008                     ??_color_read_Blue:
   833   000008                     ??_color_read_Clear:
   834   000008                     ?_abs:
   835                           	callstack 0
   836   000008                     ?___lwdiv:
   837                           	callstack 0
   838   000008                     ?_read_prec_or_width:
   839                           	callstack 0
   840   000008                     read_prec_or_width@fmt:
   841                           	callstack 0
   842   000008                     logAction@time:
   843                           	callstack 0
   844   000008                     get16bitTMR0val@combined_value:
   845                           	callstack 0
   846   000008                     ___awdiv@quotient:
   847                           	callstack 0
   848   000008                     ___lwdiv@dividend:
   849                           	callstack 0
   850   000008                     abs@a:
   851                           	callstack 0
   852                           
   853                           ; 2 bytes @ 0x7
   854   000008                     	ds	1
   855   000009                     read_prec_or_width@ap:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x8
   859   000009                     	ds	1
   860   00000A                     ??___fladd:
   861   00000A                     ??_abs:
   862   00000A                     ??___fleq:
   863   00000A                     ??___flge:
   864   00000A                     ___xxtofl@sign:
   865                           	callstack 0
   866   00000A                     read_prec_or_width@c:
   867                           	callstack 0
   868   00000A                     logAction@pathLength:
   869                           	callstack 0
   870   00000A                     ___lwdiv@divisor:
   871                           	callstack 0
   872   00000A                     fputs@s:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0x9
   876   00000A                     	ds	1
   877   00000B                     ___xxtofl@exp:
   878                           	callstack 0
   879   00000B                     color_read_Red@tmp:
   880                           	callstack 0
   881   00000B                     color_read_Green@tmp:
   882                           	callstack 0
   883   00000B                     color_read_Blue@tmp:
   884                           	callstack 0
   885   00000B                     color_read_Clear@tmp:
   886                           	callstack 0
   887   00000B                     read_prec_or_width@n:
   888                           	callstack 0
   889                           
   890                           ; 2 bytes @ 0xA
   891   00000B                     	ds	1
   892   00000C                     logAction@action:
   893                           	callstack 0
   894   00000C                     fputs@fp:
   895                           	callstack 0
   896   00000C                     ___lwdiv@quotient:
   897                           	callstack 0
   898   00000C                     ___xxtofl@arg:
   899                           	callstack 0
   900                           
   901                           ; 4 bytes @ 0xB
   902   00000C                     	ds	1
   903   00000D                     fputs@c:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0xC
   907   00000D                     	ds	1
   908   00000E                     ___lwdiv@counter:
   909                           	callstack 0
   910   00000E                     ___fladd@signs:
   911                           	callstack 0
   912   00000E                     fputs@i:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0xD
   916   00000E                     	ds	1
   917   00000F                     setMotorPWM@m:
   918                           	callstack 0
   919   00000F                     ___fladd@aexp:
   920                           	callstack 0
   921                           
   922                           ; 1 bytes @ 0xE
   923   00000F                     	ds	1
   924   000010                     ??_setMotorPWM:
   925   000010                     ___fladd@bexp:
   926                           	callstack 0
   927   000010                     pad@fp:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0xF
   931   000010                     	ds	1
   932   000011                     ___fladd@grs:
   933                           	callstack 0
   934   000011                     pad@buf:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x10
   938   000011                     	ds	1
   939   000012                     ?___flsub:
   940                           	callstack 0
   941   000012                     setMotorPWM@posDuty:
   942                           	callstack 0
   943   000012                     ___flsub@b:
   944                           	callstack 0
   945                           
   946                           ; 4 bytes @ 0x11
   947   000012                     	ds	1
   948   000013                     setMotorPWM@negDuty:
   949                           	callstack 0
   950   000013                     pad@p:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x12
   954   000013                     	ds	1
   955   000014                     stop@mL:
   956                           	callstack 0
   957   000014                     turnLeft@mL:
   958                           	callstack 0
   959   000014                     turnRight@mL:
   960                           	callstack 0
   961   000014                     fullSpeedAhead@mL:
   962                           	callstack 0
   963   000014                     fullSpeedBack@mL:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x13
   967   000014                     	ds	1
   968   000015                     ??_pad:
   969   000015                     stop@mR:
   970                           	callstack 0
   971   000015                     turnLeft@mR:
   972                           	callstack 0
   973   000015                     turnRight@mR:
   974                           	callstack 0
   975   000015                     fullSpeedAhead@mR:
   976                           	callstack 0
   977   000015                     fullSpeedBack@mR:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x14
   981   000015                     	ds	1
   982   000016                     ??_fullSpeedAhead:
   983   000016                     ??_stop:
   984   000016                     ??_turnLeft:
   985   000016                     ??_turnRight:
   986   000016                     ??_fullSpeedBack:
   987   000016                     pad@i:
   988                           	callstack 0
   989   000016                     ___flsub@a:
   990                           	callstack 0
   991                           
   992                           ; 4 bytes @ 0x15
   993   000016                     	ds	1
   994   000017                     turnLeft@i:
   995                           	callstack 0
   996   000017                     turnRight@i:
   997                           	callstack 0
   998   000017                     fullSpeedAhead@power:
   999                           	callstack 0
  1000   000017                     fullSpeedBack@power:
  1001                           	callstack 0
  1002                           
  1003                           ; 2 bytes @ 0x16
  1004   000017                     	ds	1
  1005   000018                     dtoa@fp:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x17
  1009   000018                     	ds	1
  1010   000019                     right90@mL:
  1011                           	callstack 0
  1012   000019                     left90@mL:
  1013                           	callstack 0
  1014   000019                     turn180@mL:
  1015                           	callstack 0
  1016   000019                     right135@mL:
  1017                           	callstack 0
  1018   000019                     left135@mL:
  1019                           	callstack 0
  1020   000019                     backHalf@mL:
  1021                           	callstack 0
  1022   000019                     backOneAndHalf@mL:
  1023                           	callstack 0
  1024   000019                     reverseStraight@mL:
  1025                           	callstack 0
  1026   000019                     dtoa@d:
  1027                           	callstack 0
  1028                           
  1029                           ; 2 bytes @ 0x18
  1030   000019                     	ds	1
  1031   00001A                     ?___flmul:
  1032                           	callstack 0
  1033   00001A                     right90@mR:
  1034                           	callstack 0
  1035   00001A                     left90@mR:
  1036                           	callstack 0
  1037   00001A                     turn180@mR:
  1038                           	callstack 0
  1039   00001A                     right135@mR:
  1040                           	callstack 0
  1041   00001A                     left135@mR:
  1042                           	callstack 0
  1043   00001A                     backHalf@mR:
  1044                           	callstack 0
  1045   00001A                     backOneAndHalf@mR:
  1046                           	callstack 0
  1047   00001A                     reverseStraight@mR:
  1048                           	callstack 0
  1049   00001A                     ___flmul@b:
  1050                           	callstack 0
  1051                           
  1052                           ; 4 bytes @ 0x19
  1053   00001A                     	ds	1
  1054   00001B                     ??_right90:
  1055   00001B                     ??_left90:
  1056   00001B                     ??_turn180:
  1057   00001B                     ??_right135:
  1058   00001B                     ??_left135:
  1059   00001B                     ??_backHalf:
  1060   00001B                     ??_backOneAndHalf:
  1061   00001B                     reverseStraight@time:
  1062                           	callstack 0
  1063   00001B                     _dtoa$3035:
  1064                           	callstack 0
  1065                           
  1066                           ; 2 bytes @ 0x1A
  1067   00001B                     	ds	2
  1068   00001D                     moveRed@mL:
  1069                           	callstack 0
  1070   00001D                     moveGreen@mL:
  1071                           	callstack 0
  1072   00001D                     moveBlue@mL:
  1073                           	callstack 0
  1074   00001D                     moveYellow@mL:
  1075                           	callstack 0
  1076   00001D                     movePink@mL:
  1077                           	callstack 0
  1078   00001D                     moveOrange@mL:
  1079                           	callstack 0
  1080   00001D                     moveLightBlue@mL:
  1081                           	callstack 0
  1082   00001D                     reverseTurn@mL:
  1083                           	callstack 0
  1084   00001D                     dtoa@p:
  1085                           	callstack 0
  1086   00001D                     reverseStraight@delayMs:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x1C
  1090   00001D                     	ds	1
  1091   00001E                     moveRed@mR:
  1092                           	callstack 0
  1093   00001E                     moveGreen@mR:
  1094                           	callstack 0
  1095   00001E                     moveBlue@mR:
  1096                           	callstack 0
  1097   00001E                     moveYellow@mR:
  1098                           	callstack 0
  1099   00001E                     movePink@mR:
  1100                           	callstack 0
  1101   00001E                     moveOrange@mR:
  1102                           	callstack 0
  1103   00001E                     moveLightBlue@mR:
  1104                           	callstack 0
  1105   00001E                     reverseTurn@mR:
  1106                           	callstack 0
  1107   00001E                     dtoa@w:
  1108                           	callstack 0
  1109   00001E                     ___flmul@a:
  1110                           	callstack 0
  1111                           
  1112                           ; 4 bytes @ 0x1D
  1113   00001E                     	ds	1
  1114   00001F                     reverseTurn@turnDirection:
  1115                           	callstack 0
  1116   00001F                     moveRed@path_length:
  1117                           	callstack 0
  1118   00001F                     moveGreen@path_length:
  1119                           	callstack 0
  1120   00001F                     moveBlue@path_length:
  1121                           	callstack 0
  1122   00001F                     moveYellow@path_length:
  1123                           	callstack 0
  1124   00001F                     movePink@path_length:
  1125                           	callstack 0
  1126   00001F                     moveOrange@path_length:
  1127                           	callstack 0
  1128   00001F                     moveLightBlue@path_length:
  1129                           	callstack 0
  1130                           
  1131                           ; 2 bytes @ 0x1E
  1132   00001F                     	ds	1
  1133   000020                     returnHome@mL:
  1134                           	callstack 0
  1135   000020                     dtoa@s:
  1136                           	callstack 0
  1137                           
  1138                           ; 1 bytes @ 0x1F
  1139   000020                     	ds	1
  1140   000021                     ??_moveRed:
  1141   000021                     ??_moveGreen:
  1142   000021                     ??_moveBlue:
  1143   000021                     ??_moveLightBlue:
  1144   000021                     ??_moveYellow:
  1145   000021                     ??_moveOrange:
  1146   000021                     ??_movePink:
  1147   000021                     returnHome@mR:
  1148                           	callstack 0
  1149   000021                     dtoa@i:
  1150                           	callstack 0
  1151                           
  1152                           ; 2 bytes @ 0x20
  1153   000021                     	ds	1
  1154   000022                     ??___flmul:
  1155   000022                     returnHome@path:
  1156                           	callstack 0
  1157                           
  1158                           ; 2 bytes @ 0x21
  1159   000022                     	ds	1
  1160   000023                     vfpfcnvrt@fp:
  1161                           	callstack 0
  1162                           
  1163                           ; 1 bytes @ 0x22
  1164   000023                     	ds	1
  1165   000024                     vfpfcnvrt@fmt:
  1166                           	callstack 0
  1167   000024                     returnHome@pathLength:
  1168                           	callstack 0
  1169                           
  1170                           ; 2 bytes @ 0x23
  1171   000024                     	ds	1
  1172   000025                     vfpfcnvrt@ap:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x24
  1176   000025                     	ds	1
  1177   000026                     ??_returnHome:
  1178   000026                     ??_vfpfcnvrt:
  1179   000026                     ___flmul@sign:
  1180                           	callstack 0
  1181                           
  1182                           ; 1 bytes @ 0x25
  1183   000026                     	ds	1
  1184   000027                     ___flmul@grs:
  1185                           	callstack 0
  1186                           
  1187                           ; 4 bytes @ 0x26
  1188   000027                     	ds	1
  1189   000028                     returnHome@time:
  1190                           	callstack 0
  1191   000028                     vfpfcnvrt@convarg:
  1192                           	callstack 0
  1193                           
  1194                           ; 4 bytes @ 0x27
  1195   000028                     	ds	2
  1196   00002A                     returnHome@action:
  1197                           	callstack 0
  1198                           
  1199                           ; 1 bytes @ 0x29
  1200   00002A                     	ds	1
  1201   00002B                     ___flmul@aexp:
  1202                           	callstack 0
  1203   00002B                     returnHome@i:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0x2A
  1207   00002B                     	ds	1
  1208   00002C                     ___flmul@bexp:
  1209                           	callstack 0
  1210   00002C                     vfpfcnvrt@done:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x2B
  1214   00002C                     	ds	1
  1215   00002D                     vfpfcnvrt@cp:
  1216                           	callstack 0
  1217   00002D                     ___flmul@prod:
  1218                           	callstack 0
  1219                           
  1220                           ; 4 bytes @ 0x2C
  1221   00002D                     	ds	1
  1222   00002E                     ?_vfprintf:
  1223                           	callstack 0
  1224   00002E                     vfprintf@fp:
  1225                           	callstack 0
  1226                           
  1227                           ; 1 bytes @ 0x2D
  1228   00002E                     	ds	1
  1229   00002F                     vfprintf@fmt:
  1230                           	callstack 0
  1231                           
  1232                           ; 1 bytes @ 0x2E
  1233   00002F                     	ds	1
  1234   000030                     vfprintf@ap:
  1235                           	callstack 0
  1236                           
  1237                           ; 1 bytes @ 0x2F
  1238   000030                     	ds	1
  1239   000031                     vfprintf@cfmt:
  1240                           	callstack 0
  1241   000031                     ___flmul@temp:
  1242                           	callstack 0
  1243                           
  1244                           ; 2 bytes @ 0x30
  1245   000031                     	ds	1
  1246   000032                     ?_sprintf:
  1247                           	callstack 0
  1248   000032                     sprintf@s:
  1249                           	callstack 0
  1250                           
  1251                           ; 1 bytes @ 0x31
  1252   000032                     	ds	1
  1253   000033                     ?___fldiv:
  1254                           	callstack 0
  1255   000033                     sprintf@fmt:
  1256                           	callstack 0
  1257   000033                     ___fldiv@b:
  1258                           	callstack 0
  1259                           
  1260                           ; 4 bytes @ 0x32
  1261   000033                     	ds	4
  1262   000037                     ___fldiv@a:
  1263                           	callstack 0
  1264                           
  1265                           ; 4 bytes @ 0x36
  1266   000037                     	ds	1
  1267   000038                     sprintf@ap:
  1268                           	callstack 0
  1269                           
  1270                           ; 1 bytes @ 0x37
  1271   000038                     	ds	1
  1272   000039                     sprintf@f:
  1273                           	callstack 0
  1274                           
  1275                           ; 12 bytes @ 0x38
  1276   000039                     	ds	2
  1277   00003B                     ??___fldiv:
  1278                           
  1279                           ; 1 bytes @ 0x3A
  1280   00003B                     	ds	4
  1281   00003F                     ___fldiv@rem:
  1282                           	callstack 0
  1283                           
  1284                           ; 4 bytes @ 0x3E
  1285   00003F                     	ds	4
  1286   000043                     ___fldiv@sign:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x42
  1290   000043                     	ds	1
  1291   000044                     ___fldiv@new_exp:
  1292                           	callstack 0
  1293                           
  1294                           ; 2 bytes @ 0x43
  1295   000044                     	ds	1
  1296   000045                     calibration_routine@cCal:
  1297                           	callstack 0
  1298   000045                     send2USART@hue:
  1299                           	callstack 0
  1300                           
  1301                           ; 2 bytes @ 0x44
  1302   000045                     	ds	1
  1303   000046                     ??_calibration_routine:
  1304   000046                     ___fldiv@grs:
  1305                           	callstack 0
  1306                           
  1307                           ; 4 bytes @ 0x45
  1308   000046                     	ds	1
  1309   000047                     decision@hue:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x46
  1313   000047                     	ds	1
  1314   000048                     calibration_routine@cal_state:
  1315                           	callstack 0
  1316                           
  1317                           ; 20 bytes @ 0x47
  1318   000048                     	ds	1
  1319   000049                     decision@path_length:
  1320                           	callstack 0
  1321                           
  1322                           ; 2 bytes @ 0x48
  1323   000049                     	ds	1
  1324   00004A                     ___fldiv@bexp:
  1325                           	callstack 0
  1326                           
  1327                           ; 1 bytes @ 0x49
  1328   00004A                     	ds	1
  1329   00004B                     ___fldiv@aexp:
  1330                           	callstack 0
  1331   00004B                     decision@color:
  1332                           	callstack 0
  1333                           
  1334                           ; 2 bytes @ 0x4A
  1335   00004B                     	ds	1
  1336   00004C                     ?___fltol:
  1337                           	callstack 0
  1338   00004C                     ___fltol@f1:
  1339                           	callstack 0
  1340                           
  1341                           ; 4 bytes @ 0x4B
  1342   00004C                     	ds	4
  1343   000050                     ??___fltol:
  1344                           
  1345                           ; 1 bytes @ 0x4F
  1346   000050                     	ds	4
  1347   000054                     ___fltol@sign1:
  1348                           	callstack 0
  1349                           
  1350                           ; 1 bytes @ 0x53
  1351   000054                     	ds	1
  1352   000055                     ___fltol@exp1:
  1353                           	callstack 0
  1354                           
  1355                           ; 1 bytes @ 0x54
  1356   000055                     	ds	1
  1357   000056                     ?_convert_rgb2hue:
  1358                           	callstack 0
  1359   000056                     convert_rgb2hue@cMax:
  1360                           	callstack 0
  1361                           
  1362                           ; 1 bytes @ 0x55
  1363   000056                     	ds	1
  1364   000057                     convert_rgb2hue@cCurr:
  1365                           	callstack 0
  1366                           
  1367                           ; 1 bytes @ 0x56
  1368   000057                     	ds	1
  1369   000058                     ??_convert_rgb2hue:
  1370                           
  1371                           ; 1 bytes @ 0x57
  1372   000058                     	ds	2
  1373   00005A                     ?_reading_hue:
  1374                           	callstack 0
  1375   00005A                     reading_hue@cCurr:
  1376                           	callstack 0
  1377                           
  1378                           ; 1 bytes @ 0x59
  1379   00005A                     	ds	2
  1380                           
  1381 ;;
  1382 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1383 ;;
  1384 ;; *************** function _main *****************
  1385 ;; Defined at:
  1386 ;;		line 29 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  white           2    0        unsigned int 
  1391 ;;  time            2   92[BANK0 ] int 
  1392 ;;  hue_char       20    0        unsigned char [20]
  1393 ;;  ambient         4   94[BANK0 ] float 
  1394 ;;  current         4   86[BANK0 ] float 
  1395 ;;  maximum         4   82[BANK0 ] float 
  1396 ;;  path_length     2  100[BANK0 ] unsigned int 
  1397 ;;  PWMcycle        2    0        unsigned int 
  1398 ;;  clear_norm      2   98[BANK0 ] unsigned int 
  1399 ;;  hue             2   90[BANK0 ] unsigned int 
  1400 ;;  clear           2    0        unsigned int 
  1401 ;;  green           2    0        unsigned int 
  1402 ;;  blue            2    0        unsigned int 
  1403 ;;  red             2    0        unsigned int 
  1404 ;;  battery_leve    2    0        unsigned int 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1415 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;Total ram usage:       22 bytes
  1419 ;; Hardware stack levels required when called: 11
  1420 ;; This function calls:
  1421 ;;		_ADC_init
  1422 ;;		___fldiv
  1423 ;;		___flmul
  1424 ;;		___flsub
  1425 ;;		___fltol
  1426 ;;		___xxtofl
  1427 ;;		_calibration_routine
  1428 ;;		_color_click_init
  1429 ;;		_color_read_Clear
  1430 ;;		_decision
  1431 ;;		_fullSpeedAhead
  1432 ;;		_get16bitTMR0val
  1433 ;;		_initDCmotorsPWM
  1434 ;;		_initUSART4
  1435 ;;		_logAction
  1436 ;;		_reading_hue
  1437 ;;		_returnHome
  1438 ;;		_send2USART
  1439 ;;		_stop
  1440 ;; This function is called by:
  1441 ;;		Startup code after reset
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text0
  1446   0022E2                     __ptext0:
  1447                           	callstack 0
  1448   0022E2                     _main:
  1449                           	callstack 20
  1450   0022E2                     
  1451                           ;main.c: 31:     ADC_init();
  1452   0022E2  EC79  F022         	call	_ADC_init	;wreg free
  1453   0022E6                     
  1454                           ;main.c: 32:     color_click_init();
  1455   0022E6  ECE9  F020         	call	_color_click_init	;wreg free
  1456   0022EA                     
  1457                           ;main.c: 33:     initUSART4();
  1458   0022EA  EC5B  F022         	call	_initUSART4	;wreg free
  1459   0022EE                     
  1460                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1461   0022EE  0E00               	movlw	0
  1462   0022F0  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1463   0022F2  0E63               	movlw	99
  1464   0022F4  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1465   0022F6  EC74  F01C         	call	_initDCmotorsPWM	;wreg free
  1466   0022FA                     
  1467                           ;main.c: 40:     motorL.power = 0;
  1468   0022FA  0E00               	movlw	0
  1469   0022FC  0100               	movlb	0	; () banked
  1470   0022FE  6FF6               	movwf	_motorL& (0+255),b
  1471   002300                     
  1472                           ; BSR set to: 0
  1473                           ;main.c: 41:     motorL.direction = 1;
  1474   002300  0E01               	movlw	1
  1475   002302  6FF7               	movwf	(_motorL+1)& (0+255),b
  1476   002304                     
  1477                           ; BSR set to: 0
  1478                           ;main.c: 42:     motorL.brakemode = 1;
  1479   002304  0E01               	movlw	1
  1480   002306  6FF8               	movwf	(_motorL+2)& (0+255),b
  1481   002308                     
  1482                           ; BSR set to: 0
  1483                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1484   002308  0E00               	movlw	0
  1485   00230A  6FFA               	movwf	(_motorL+4)& (0+255),b
  1486   00230C  0E63               	movlw	99
  1487   00230E  6FF9               	movwf	(_motorL+3)& (0+255),b
  1488   002310                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1491   002310  0EAA               	movlw	170
  1492   002312  6FFB               	movwf	(_motorL+5)& (0+255),b
  1493   002314  0E0F               	movlw	15
  1494   002316  6FFC               	movwf	(_motorL+6)& (0+255),b
  1495   002318                     
  1496                           ; BSR set to: 0
  1497                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1498   002318  0EA6               	movlw	166
  1499   00231A  6FFD               	movwf	(_motorL+7)& (0+255),b
  1500   00231C  0E0F               	movlw	15
  1501   00231E  6FFE               	movwf	(_motorL+8)& (0+255),b
  1502   002320                     
  1503                           ; BSR set to: 0
  1504                           ;main.c: 47:     motorR.power = 0;
  1505   002320  0E00               	movlw	0
  1506   002322  6FED               	movwf	_motorR& (0+255),b
  1507   002324                     
  1508                           ; BSR set to: 0
  1509                           ;main.c: 48:     motorR.direction = 1;
  1510   002324  0E01               	movlw	1
  1511   002326  6FEE               	movwf	(_motorR+1)& (0+255),b
  1512   002328                     
  1513                           ; BSR set to: 0
  1514                           ;main.c: 49:     motorR.brakemode = 1;
  1515   002328  0E01               	movlw	1
  1516   00232A  6FEF               	movwf	(_motorR+2)& (0+255),b
  1517   00232C                     
  1518                           ; BSR set to: 0
  1519                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1520   00232C  0E00               	movlw	0
  1521   00232E  6FF1               	movwf	(_motorR+4)& (0+255),b
  1522   002330  0E63               	movlw	99
  1523   002332  6FF0               	movwf	(_motorR+3)& (0+255),b
  1524                           
  1525                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1526   002334  0E25               	movlw	37
  1527   002336  6FF2               	movwf	(_motorR+5)& (0+255),b
  1528   002338  0E0F               	movlw	15
  1529   00233A  6FF3               	movwf	(_motorR+6)& (0+255),b
  1530                           
  1531                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1532   00233C  0E21               	movlw	33
  1533   00233E  6FF4               	movwf	(_motorR+7)& (0+255),b
  1534   002340  0E0F               	movlw	15
  1535   002342  6FF5               	movwf	(_motorR+8)& (0+255),b
  1536   002344                     
  1537                           ; BSR set to: 0
  1538                           ;main.c: 55:     LATDbits.LATD7=0;
  1539   002344  9E7C               	bcf	124,7,c	;volatile
  1540   002346                     
  1541                           ; BSR set to: 0
  1542                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1543   002346  9E84               	bcf	132,7,c	;volatile
  1544   002348                     
  1545                           ; BSR set to: 0
  1546                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1547   002348  9087               	bcf	135,0,c	;volatile
  1548   00234A                     
  1549                           ; BSR set to: 0
  1550                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1551   00234A  907F               	bcf	127,0,c	;volatile
  1552   00234C                     
  1553                           ; BSR set to: 0
  1554                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1555   00234C  9E85               	bcf	133,7,c	;volatile
  1556   00234E                     
  1557                           ; BSR set to: 0
  1558                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1559   00234E  9E7D               	bcf	125,7,c	;volatile
  1560   002350                     
  1561                           ; BSR set to: 0
  1562                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1563   002350  9681               	bcf	129,3,c	;volatile
  1564   002352                     
  1565                           ; BSR set to: 0
  1566                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1567   002352  9679               	bcf	121,3,c	;volatile
  1568   002354                     
  1569                           ; BSR set to: 0
  1570                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1571   002354  8686               	bsf	134,3,c	;volatile
  1572   002356                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1575   002356  010E               	movlb	14	; () banked
  1576   002358  97B4               	bcf	180,3,b	;volatile
  1577   00235A                     
  1578                           ; BSR set to: 14
  1579                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1580   00235A  8486               	bsf	134,2,c	;volatile
  1581   00235C                     
  1582                           ; BSR set to: 14
  1583                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1584   00235C  947E               	bcf	126,2,c	;volatile
  1585   00235E                     
  1586                           ; BSR set to: 14
  1587                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1588   00235E  95B4               	bcf	180,2,b	;volatile
  1589   002360                     
  1590                           ; BSR set to: 14
  1591                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1592   002360  9287               	bcf	135,1,c	;volatile
  1593   002362                     
  1594                           ; BSR set to: 14
  1595                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1596   002362  927F               	bcf	127,1,c	;volatile
  1597   002364                     
  1598                           ; BSR set to: 14
  1599                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1600   002364  0E00               	movlw	0
  1601   002366  0100               	movlb	0	; () banked
  1602   002368  6FC5               	movwf	(main@path_length+1)& (0+255),b
  1603   00236A  0E00               	movlw	0
  1604   00236C  6FC4               	movwf	main@path_length& (0+255),b
  1605   00236E                     
  1606                           ; BSR set to: 0
  1607                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1608   00236E  9688               	bcf	136,3,c	;volatile
  1609   002370                     
  1610                           ; BSR set to: 0
  1611                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1612   002370  8680               	bsf	128,3,c	;volatile
  1613   002372                     
  1614                           ; BSR set to: 0
  1615                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1616   002372  0E19               	movlw	25
  1617   002374  0100               	movlb	0	; () banked
  1618   002376  6FB1               	movwf	(??_main+1)& (0+255),b
  1619   002378  0E5A               	movlw	90
  1620   00237A  6FB0               	movwf	??_main& (0+255),b
  1621   00237C  0EB1               	movlw	177
  1622   00237E                     u4897:
  1623   00237E  2EE8               	decfsz	wreg,f,c
  1624   002380  D7FE               	bra	u4897
  1625   002382  2FB0               	decfsz	??_main& (0+255),f,b
  1626   002384  D7FC               	bra	u4897
  1627   002386  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1628   002388  D7FA               	bra	u4897
  1629   00238A  D000               	nop2	
  1630   00238C                     
  1631                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1632   00238C  9680               	bcf	128,3,c	;volatile
  1633   00238E                     
  1634                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1635   00238E  0EE3               	movlw	low _colorCalibration
  1636   002390  6E45               	movwf	calibration_routine@cCal^0,c
  1637   002392  ECF8  F012         	call	_calibration_routine	;wreg free
  1638   002396                     
  1639                           ;main.c: 104:     float maximum = colorCalibration.clear;
  1640   002396  C0E9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1641   00239A  C0EA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1642   00239E  6A04               	clrf	(___xxtofl@val+2)^0,c
  1643   0023A0  6A05               	clrf	(___xxtofl@val+3)^0,c
  1644   0023A2  0E00               	movlw	0
  1645   0023A4  EC26  F015         	call	___xxtofl
  1646   0023A8  C002  F0B2         	movff	?___xxtofl,main@maximum
  1647   0023AC  C003  F0B3         	movff	?___xxtofl+1,main@maximum+1
  1648   0023B0  C004  F0B4         	movff	?___xxtofl+2,main@maximum+2
  1649   0023B4  C005  F0B5         	movff	?___xxtofl+3,main@maximum+3
  1650   0023B8                     
  1651                           ;main.c: 105:     float ambient = colorCalibration.clear_ambient;
  1652   0023B8  C0EB  F002         	movff	_colorCalibration+8,___xxtofl@val
  1653   0023BC  C0EC  F003         	movff	_colorCalibration+9,___xxtofl@val+1
  1654   0023C0  6A04               	clrf	(___xxtofl@val+2)^0,c
  1655   0023C2  6A05               	clrf	(___xxtofl@val+3)^0,c
  1656   0023C4  0E00               	movlw	0
  1657   0023C6  EC26  F015         	call	___xxtofl
  1658   0023CA  C002  F0BE         	movff	?___xxtofl,main@ambient
  1659   0023CE  C003  F0BF         	movff	?___xxtofl+1,main@ambient+1
  1660   0023D2  C004  F0C0         	movff	?___xxtofl+2,main@ambient+2
  1661   0023D6  C005  F0C1         	movff	?___xxtofl+3,main@ambient+3
  1662   0023DA                     l5491:
  1663                           
  1664                           ;main.c: 111:         LATGbits.LATG0 = 1;
  1665   0023DA  807F               	bsf	127,0,c	;volatile
  1666   0023DC                     
  1667                           ;main.c: 112:         LATEbits.LATE7 = 1;
  1668   0023DC  8E7D               	bsf	125,7,c	;volatile
  1669   0023DE                     
  1670                           ;main.c: 113:         LATAbits.LATA3 = 1;
  1671   0023DE  8679               	bsf	121,3,c	;volatile
  1672   0023E0                     
  1673                           ;main.c: 116:         fullSpeedAhead(&motorL,&motorR);
  1674   0023E0  0EF6               	movlw	low _motorL
  1675   0023E2  6E14               	movwf	fullSpeedAhead@mL^0,c
  1676   0023E4  0EED               	movlw	low _motorR
  1677   0023E6  6E15               	movwf	fullSpeedAhead@mR^0,c
  1678   0023E8  EC81  F01D         	call	_fullSpeedAhead	;wreg free
  1679   0023EC                     
  1680                           ;main.c: 117:         T0CON0bits.T0EN=1;
  1681   0023EC  8ED5               	bsf	213,7,c	;volatile
  1682   0023EE                     
  1683                           ;main.c: 119:         (colorCurrent.clear) = color_read_Clear();
  1684   0023EE  ECB8  F01E         	call	_color_read_Clear	;wreg free
  1685   0023F2  C006  F0DF         	movff	?_color_read_Clear,_colorCurrent+6
  1686   0023F6  C007  F0E0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1687   0023FA                     
  1688                           ;main.c: 120:         current = colorCurrent.clear;
  1689   0023FA  C0DF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1690   0023FE  C0E0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1691   002402  6A04               	clrf	(___xxtofl@val+2)^0,c
  1692   002404  6A05               	clrf	(___xxtofl@val+3)^0,c
  1693   002406  0E00               	movlw	0
  1694   002408  EC26  F015         	call	___xxtofl
  1695   00240C  C002  F0B6         	movff	?___xxtofl,main@current
  1696   002410  C003  F0B7         	movff	?___xxtofl+1,main@current+1
  1697   002414  C004  F0B8         	movff	?___xxtofl+2,main@current+2
  1698   002418  C005  F0B9         	movff	?___xxtofl+3,main@current+3
  1699   00241C                     
  1700                           ;main.c: 122:         clear_norm = (current-ambient)*100/(maximum-ambient);
  1701   00241C  C0BE  F016         	movff	main@ambient,___flsub@a
  1702   002420  C0BF  F017         	movff	main@ambient+1,___flsub@a+1
  1703   002424  C0C0  F018         	movff	main@ambient+2,___flsub@a+2
  1704   002428  C0C1  F019         	movff	main@ambient+3,___flsub@a+3
  1705   00242C  C0B2  F012         	movff	main@maximum,___flsub@b
  1706   002430  C0B3  F013         	movff	main@maximum+1,___flsub@b+1
  1707   002434  C0B4  F014         	movff	main@maximum+2,___flsub@b+2
  1708   002438  C0B5  F015         	movff	main@maximum+3,___flsub@b+3
  1709   00243C  EC27  F020         	call	___flsub	;wreg free
  1710   002440  C012  F037         	movff	?___flsub,___fldiv@a
  1711   002444  C013  F038         	movff	?___flsub+1,___fldiv@a+1
  1712   002448  C014  F039         	movff	?___flsub+2,___fldiv@a+2
  1713   00244C  C015  F03A         	movff	?___flsub+3,___fldiv@a+3
  1714   002450  0E00               	movlw	0
  1715   002452  6E1E               	movwf	___flmul@a^0,c
  1716   002454  0E00               	movlw	0
  1717   002456  6E1F               	movwf	(___flmul@a+1)^0,c
  1718   002458  0EC8               	movlw	200
  1719   00245A  6E20               	movwf	(___flmul@a+2)^0,c
  1720   00245C  0E42               	movlw	66
  1721   00245E  6E21               	movwf	(___flmul@a+3)^0,c
  1722   002460  C0BE  F016         	movff	main@ambient,___flsub@a
  1723   002464  C0BF  F017         	movff	main@ambient+1,___flsub@a+1
  1724   002468  C0C0  F018         	movff	main@ambient+2,___flsub@a+2
  1725   00246C  C0C1  F019         	movff	main@ambient+3,___flsub@a+3
  1726   002470  C0B6  F012         	movff	main@current,___flsub@b
  1727   002474  C0B7  F013         	movff	main@current+1,___flsub@b+1
  1728   002478  C0B8  F014         	movff	main@current+2,___flsub@b+2
  1729   00247C  C0B9  F015         	movff	main@current+3,___flsub@b+3
  1730   002480  EC27  F020         	call	___flsub	;wreg free
  1731   002484  C012  F01A         	movff	?___flsub,___flmul@b
  1732   002488  C013  F01B         	movff	?___flsub+1,___flmul@b+1
  1733   00248C  C014  F01C         	movff	?___flsub+2,___flmul@b+2
  1734   002490  C015  F01D         	movff	?___flsub+3,___flmul@b+3
  1735   002494  EC8F  F00D         	call	___flmul	;wreg free
  1736   002498  C01A  F033         	movff	?___flmul,___fldiv@b
  1737   00249C  C01B  F034         	movff	?___flmul+1,___fldiv@b+1
  1738   0024A0  C01C  F035         	movff	?___flmul+2,___fldiv@b+2
  1739   0024A4  C01D  F036         	movff	?___flmul+3,___fldiv@b+3
  1740   0024A8  ECA4  F00F         	call	___fldiv	;wreg free
  1741   0024AC  C033  F04C         	movff	?___fldiv,___fltol@f1
  1742   0024B0  C034  F04D         	movff	?___fldiv+1,___fltol@f1+1
  1743   0024B4  C035  F04E         	movff	?___fldiv+2,___fltol@f1+2
  1744   0024B8  C036  F04F         	movff	?___fldiv+3,___fltol@f1+3
  1745   0024BC  EC2A  F018         	call	___fltol	;wreg free
  1746   0024C0  C04C  F0C2         	movff	?___fltol,main@clear_norm
  1747   0024C4  C04D  F0C3         	movff	?___fltol+1,main@clear_norm+1
  1748   0024C8                     
  1749                           ;main.c: 125:         if (clear_norm > 5){
  1750   0024C8  0100               	movlb	0	; () banked
  1751   0024CA  51C3               	movf	(main@clear_norm+1)& (0+255),w,b
  1752   0024CC  E109               	bnz	u4850
  1753   0024CE  0E06               	movlw	6
  1754   0024D0  5DC2               	subwf	main@clear_norm& (0+255),w,b
  1755   0024D2  A0D8               	btfss	status,0,c
  1756   0024D4  EF6E  F012         	goto	u4851
  1757   0024D8  EF70  F012         	goto	u4850
  1758   0024DC                     u4851:
  1759   0024DC  EFED  F011         	goto	l5491
  1760   0024E0                     u4850:
  1761   0024E0                     
  1762                           ; BSR set to: 0
  1763                           ;main.c: 127:             stop(&motorL,&motorR);
  1764   0024E0  0EF6               	movlw	low _motorL
  1765   0024E2  6E14               	movwf	stop@mL^0,c
  1766   0024E4  0EED               	movlw	low _motorR
  1767   0024E6  6E15               	movwf	stop@mR^0,c
  1768   0024E8  ECBC  F01C         	call	_stop	;wreg free
  1769   0024EC                     
  1770                           ;main.c: 129:             int time = get16bitTMR0val();
  1771   0024EC  EC3A  F022         	call	_get16bitTMR0val	;wreg free
  1772   0024F0  C002  F0BC         	movff	?_get16bitTMR0val,main@time
  1773   0024F4  C003  F0BD         	movff	?_get16bitTMR0val+1,main@time+1
  1774   0024F8                     
  1775                           ;main.c: 130:             T0CON0bits.T0EN=0;
  1776   0024F8  9ED5               	bcf	213,7,c	;volatile
  1777   0024FA                     
  1778                           ;main.c: 131:             logAction('F',time, path_length);
  1779   0024FA  C0BC  F008         	movff	main@time,logAction@time
  1780   0024FE  C0BD  F009         	movff	main@time+1,logAction@time+1
  1781   002502  C0C4  F00A         	movff	main@path_length,logAction@pathLength
  1782   002506  C0C5  F00B         	movff	main@path_length+1,logAction@pathLength+1
  1783   00250A  0E46               	movlw	70
  1784   00250C  EC33  F01E         	call	_logAction
  1785   002510                     
  1786                           ;main.c: 132:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1787   002510  0E11               	movlw	17
  1788   002512  0100               	movlb	0	; () banked
  1789   002514  6FB1               	movwf	(??_main+1)& (0+255),b
  1790   002516  0E3C               	movlw	60
  1791   002518  6FB0               	movwf	??_main& (0+255),b
  1792   00251A  0ECB               	movlw	203
  1793   00251C                     u4907:
  1794   00251C  2EE8               	decfsz	wreg,f,c
  1795   00251E  D7FE               	bra	u4907
  1796   002520  2FB0               	decfsz	??_main& (0+255),f,b
  1797   002522  D7FC               	bra	u4907
  1798   002524  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1799   002526  D7FA               	bra	u4907
  1800   002528                     
  1801                           ;main.c: 135:             fullSpeedAhead(&motorL,&motorR);
  1802   002528  0EF6               	movlw	low _motorL
  1803   00252A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1804   00252C  0EED               	movlw	low _motorR
  1805   00252E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1806   002530  EC81  F01D         	call	_fullSpeedAhead	;wreg free
  1807   002534                     
  1808                           ;main.c: 136:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1809   002534  0E09               	movlw	9
  1810   002536  0100               	movlb	0	; () banked
  1811   002538  6FB1               	movwf	(??_main+1)& (0+255),b
  1812   00253A  0E1E               	movlw	30
  1813   00253C  6FB0               	movwf	??_main& (0+255),b
  1814   00253E  0EE4               	movlw	228
  1815   002540                     u4917:
  1816   002540  2EE8               	decfsz	wreg,f,c
  1817   002542  D7FE               	bra	u4917
  1818   002544  2FB0               	decfsz	??_main& (0+255),f,b
  1819   002546  D7FC               	bra	u4917
  1820   002548  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1821   00254A  D7FA               	bra	u4917
  1822   00254C  0000               	nop	
  1823   00254E                     
  1824                           ;main.c: 137:             stop(&motorL,&motorR);
  1825   00254E  0EF6               	movlw	low _motorL
  1826   002550  6E14               	movwf	stop@mL^0,c
  1827   002552  0EED               	movlw	low _motorR
  1828   002554  6E15               	movwf	stop@mR^0,c
  1829   002556  ECBC  F01C         	call	_stop	;wreg free
  1830   00255A                     
  1831                           ;main.c: 138:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1832   00255A  0E19               	movlw	25
  1833   00255C  0100               	movlb	0	; () banked
  1834   00255E  6FB1               	movwf	(??_main+1)& (0+255),b
  1835   002560  0E5A               	movlw	90
  1836   002562  6FB0               	movwf	??_main& (0+255),b
  1837   002564  0EB1               	movlw	177
  1838   002566                     u4927:
  1839   002566  2EE8               	decfsz	wreg,f,c
  1840   002568  D7FE               	bra	u4927
  1841   00256A  2FB0               	decfsz	??_main& (0+255),f,b
  1842   00256C  D7FC               	bra	u4927
  1843   00256E  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1844   002570  D7FA               	bra	u4927
  1845   002572  D000               	nop2	
  1846   002574                     
  1847                           ;main.c: 140:             if (clear_norm > 85 || LATGbits.LATG1 == 1){
  1848   002574  0100               	movlb	0	; () banked
  1849   002576  51C3               	movf	(main@clear_norm+1)& (0+255),w,b
  1850   002578  E107               	bnz	u4861
  1851   00257A  0E56               	movlw	86
  1852   00257C  5DC2               	subwf	main@clear_norm& (0+255),w,b
  1853   00257E  B0D8               	btfsc	status,0,c
  1854   002580  EFC4  F012         	goto	u4861
  1855   002584  EFC6  F012         	goto	u4860
  1856   002588                     u4861:
  1857   002588  EFCD  F012         	goto	l5531
  1858   00258C                     u4860:
  1859   00258C                     
  1860                           ; BSR set to: 0
  1861   00258C  A27F               	btfss	127,1,c	;volatile
  1862   00258E  EFCB  F012         	goto	u4871
  1863   002592  EFCD  F012         	goto	u4870
  1864   002596                     u4871:
  1865   002596  EFE2  F012         	goto	l5539
  1866   00259A                     u4870:
  1867   00259A                     l5531:
  1868   00259A                     
  1869                           ; BSR set to: 0
  1870                           ;main.c: 143:                 send2USART(white);
  1871   00259A  0E00               	movlw	0
  1872   00259C  6E46               	movwf	(send2USART@hue+1)^0,c
  1873   00259E  0E08               	movlw	8
  1874   0025A0  6E45               	movwf	send2USART@hue^0,c
  1875   0025A2  EC6A  F022         	call	_send2USART	;wreg free
  1876   0025A6                     
  1877                           ;main.c: 144:                 returnHome(&motorL, &motorR, &path, path_length);
  1878   0025A6  0EF6               	movlw	low _motorL
  1879   0025A8  6E20               	movwf	returnHome@mL^0,c
  1880   0025AA  0EED               	movlw	low _motorR
  1881   0025AC  6E21               	movwf	returnHome@mR^0,c
  1882   0025AE  0E00               	movlw	low _path
  1883   0025B0  6E22               	movwf	returnHome@path^0,c
  1884   0025B2  0E02               	movlw	high _path
  1885   0025B4  6E23               	movwf	(returnHome@path+1)^0,c
  1886   0025B6  C0C4  F024         	movff	main@path_length,returnHome@pathLength
  1887   0025BA  C0C5  F025         	movff	main@path_length+1,returnHome@pathLength+1
  1888   0025BE  ECD1  F01A         	call	_returnHome	;wreg free
  1889   0025C2                     
  1890                           ;main.c: 145:                 LATGbits.LATG1 = 0;
  1891   0025C2  927F               	bcf	127,1,c	;volatile
  1892   0025C4                     l5539:
  1893                           
  1894                           ;main.c: 148:             hue = reading_hue(&colorCurrent);
  1895   0025C4  0ED9               	movlw	low _colorCurrent
  1896   0025C6  6E5A               	movwf	reading_hue@cCurr^0,c
  1897   0025C8  EC2F  F019         	call	_reading_hue	;wreg free
  1898   0025CC  C05A  F0BA         	movff	?_reading_hue,main@hue
  1899   0025D0  C05B  F0BB         	movff	?_reading_hue+1,main@hue+1
  1900   0025D4                     
  1901                           ;main.c: 149:             decision(hue, path_length);
  1902   0025D4  C0BA  F047         	movff	main@hue,decision@hue
  1903   0025D8  C0BB  F048         	movff	main@hue+1,decision@hue+1
  1904   0025DC  C0C4  F049         	movff	main@path_length,decision@path_length
  1905   0025E0  C0C5  F04A         	movff	main@path_length+1,decision@path_length+1
  1906   0025E4  EC15  F014         	call	_decision	;wreg free
  1907   0025E8  EFED  F011         	goto	l5491
  1908   0025EC  EF1D  F000         	goto	start
  1909   0025F0                     __end_of_main:
  1910                           	callstack 0
  1911                           
  1912 ;; *************** function _returnHome *****************
  1913 ;; Defined at:
  1914 ;;		line 383 in file "dc_motor.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  mL              1   31[COMRAM] PTR struct DC_motor
  1917 ;;		 -> motorL(9), 
  1918 ;;  mR              1   32[COMRAM] PTR struct DC_motor
  1919 ;;		 -> motorR(9), 
  1920 ;;  path            2   33[COMRAM] PTR PTR struct PathStep
  1921 ;;		 -> path(250), 
  1922 ;;  pathLength      2   35[COMRAM] int 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  time            2   39[COMRAM] unsigned int 
  1925 ;;  action          1   41[COMRAM] unsigned char 
  1926 ;;  i               2   42[COMRAM] int 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1936 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1937 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;Total ram usage:       13 bytes
  1941 ;; Hardware stack levels used: 1
  1942 ;; Hardware stack levels required when called: 6
  1943 ;; This function calls:
  1944 ;;		_reverseStraight
  1945 ;;		_reverseTurn
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text1
  1952   0035A2                     __ptext1:
  1953                           	callstack 0
  1954   0035A2                     _returnHome:
  1955                           	callstack 24
  1956   0035A2                     
  1957                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     for (int i = pathLe
      +                          ngth; i >= 0; i--) {
  1958   0035A2  C024  F02B         	movff	returnHome@pathLength,returnHome@i
  1959   0035A6  C025  F02C         	movff	returnHome@pathLength+1,returnHome@i+1
  1960   0035AA                     l4847:
  1961   0035AA  BE2C               	btfsc	(returnHome@i+1)^0,7,c
  1962   0035AC  EFDC  F01A         	goto	u4300
  1963   0035B0  EFDA  F01A         	goto	u4301
  1964   0035B4                     u4301:
  1965   0035B4  EFDE  F01A         	goto	l4851
  1966   0035B8                     u4300:
  1967   0035B8  EF26  F01B         	goto	l511
  1968   0035BC                     l4851:
  1969                           
  1970                           ;dc_motor.c: 387:         char action = path[i]->action;
  1971   0035BC  90D8               	bcf	status,0,c
  1972   0035BE  342B               	rlcf	returnHome@i^0,w,c
  1973   0035C0  6ED9               	movwf	fsr2l,c
  1974   0035C2  342C               	rlcf	(returnHome@i+1)^0,w,c
  1975   0035C4  6EDA               	movwf	fsr2h,c
  1976   0035C6  5022               	movf	returnHome@path^0,w,c
  1977   0035C8  26D9               	addwf	fsr2l,f,c
  1978   0035CA  5023               	movf	(returnHome@path+1)^0,w,c
  1979   0035CC  22DA               	addwfc	fsr2h,f,c
  1980   0035CE  CFDE F026          	movff	postinc2,??_returnHome
  1981   0035D2  CFDD F027          	movff	postdec2,??_returnHome+1
  1982   0035D6  C026  FFD9         	movff	??_returnHome,fsr2l
  1983   0035DA  C027  FFDA         	movff	??_returnHome+1,fsr2h
  1984   0035DE  50DF               	movf	indf2,w,c
  1985   0035E0  6E2A               	movwf	returnHome@action^0,c
  1986   0035E2                     
  1987                           ;dc_motor.c: 388:         unsigned int time = path[i]->time;
  1988   0035E2  90D8               	bcf	status,0,c
  1989   0035E4  342B               	rlcf	returnHome@i^0,w,c
  1990   0035E6  6ED9               	movwf	fsr2l,c
  1991   0035E8  342C               	rlcf	(returnHome@i+1)^0,w,c
  1992   0035EA  6EDA               	movwf	fsr2h,c
  1993   0035EC  5022               	movf	returnHome@path^0,w,c
  1994   0035EE  26D9               	addwf	fsr2l,f,c
  1995   0035F0  5023               	movf	(returnHome@path+1)^0,w,c
  1996   0035F2  22DA               	addwfc	fsr2h,f,c
  1997   0035F4  EE10 F001          	lfsr	1,1
  1998   0035F8  50DE               	movf	postinc2,w,c
  1999   0035FA  26E1               	addwf	fsr1l,f,c
  2000   0035FC  50DD               	movf	postdec2,w,c
  2001   0035FE  22E2               	addwfc	fsr1h,f,c
  2002   003600  CFE6 F028          	movff	postinc1,returnHome@time
  2003   003604  CFE5 F029          	movff	postdec1,returnHome@time+1
  2004   003608                     
  2005                           ;dc_motor.c: 390:         if (action == 'F'){reverseStraight(mL, mR, time);}
  2006   003608  0E46               	movlw	70
  2007   00360A  182A               	xorwf	returnHome@action^0,w,c
  2008   00360C  A4D8               	btfss	status,2,c
  2009   00360E  EF0B  F01B         	goto	u4311
  2010   003612  EF0D  F01B         	goto	u4310
  2011   003616                     u4311:
  2012   003616  EF19  F01B         	goto	l4859
  2013   00361A                     u4310:
  2014   00361A  C020  F019         	movff	returnHome@mL,reverseStraight@mL
  2015   00361E  C021  F01A         	movff	returnHome@mR,reverseStraight@mR
  2016   003622  C028  F01B         	movff	returnHome@time,reverseStraight@time
  2017   003626  C029  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  2018   00362A  ECA4  F019         	call	_reverseStraight	;wreg free
  2019   00362E  EF21  F01B         	goto	l4861
  2020   003632                     l4859:
  2021   003632  C020  F01D         	movff	returnHome@mL,reverseTurn@mL
  2022   003636  C021  F01E         	movff	returnHome@mR,reverseTurn@mR
  2023   00363A  C02A  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  2024   00363E  EC04  F020         	call	_reverseTurn	;wreg free
  2025   003642                     l4861:
  2026                           
  2027                           ;dc_motor.c: 394:     }
  2028   003642  062B               	decf	returnHome@i^0,f,c
  2029   003644  A0D8               	btfss	status,0,c
  2030   003646  062C               	decf	(returnHome@i+1)^0,f,c
  2031   003648  EFD5  F01A         	goto	l4847
  2032   00364C                     l511:
  2033   00364C  0003               	sleep		;# 
  2034   00364E  0012               	return		;funcret
  2035   003650                     __end_of_returnHome:
  2036                           	callstack 0
  2037                           
  2038 ;; *************** function _reverseTurn *****************
  2039 ;; Defined at:
  2040 ;;		line 345 in file "dc_motor.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2043 ;;		 -> motorL(9), 
  2044 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2045 ;;		 -> motorR(9), 
  2046 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2058 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2061 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2062 ;;Total ram usage:        3 bytes
  2063 ;; Hardware stack levels used: 1
  2064 ;; Hardware stack levels required when called: 5
  2065 ;; This function calls:
  2066 ;;		_left135
  2067 ;;		_right135
  2068 ;;		_turn180
  2069 ;;		_turnLeft
  2070 ;;		_turnRight
  2071 ;; This function is called by:
  2072 ;;		_returnHome
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text2
  2077   004008                     __ptext2:
  2078                           	callstack 0
  2079   004008                     _reverseTurn:
  2080                           	callstack 24
  2081   004008                     
  2082                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  2083   004008  0E52               	movlw	82
  2084   00400A  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2085   00400C  A4D8               	btfss	status,2,c
  2086   00400E  EF0B  F020         	goto	u4021
  2087   004012  EF0D  F020         	goto	u4020
  2088   004016                     u4021:
  2089   004016  EF15  F020         	goto	l4587
  2090   00401A                     u4020:
  2091   00401A                     
  2092                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  2093   00401A  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  2094   00401E  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  2095   004022  EC42  F01D         	call	_turnLeft	;wreg free
  2096                           
  2097                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  2098   004026  EF26  F020         	goto	l495
  2099   00402A                     l4587:
  2100   00402A  0E4C               	movlw	76
  2101   00402C  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2102   00402E  A4D8               	btfss	status,2,c
  2103   004030  EF1C  F020         	goto	u4031
  2104   004034  EF1E  F020         	goto	u4030
  2105   004038                     u4031:
  2106   004038  EF26  F020         	goto	l494
  2107   00403C                     u4030:
  2108   00403C                     
  2109                           ;dc_motor.c: 349:         turnRight(mL, mR);
  2110   00403C  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  2111   004040  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  2112   004044  EC03  F01D         	call	_turnRight	;wreg free
  2113                           
  2114                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  2115   004048  EF26  F020         	goto	l495
  2116   00404C                     l494:
  2117   00404C                     l495:
  2118   00404C  0012               	return		;funcret
  2119   00404E                     __end_of_reverseTurn:
  2120                           	callstack 0
  2121                           
  2122 ;; *************** function _reverseStraight *****************
  2123 ;; Defined at:
  2124 ;;		line 368 in file "dc_motor.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2127 ;;		 -> motorL(9), 
  2128 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2129 ;;		 -> motorR(9), 
  2130 ;;  time            2   26[COMRAM] int 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  delayMs         2   28[COMRAM] int 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;Total ram usage:        6 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 4
  2149 ;; This function calls:
  2150 ;;		_customDelayMs
  2151 ;;		_fullSpeedAhead
  2152 ;;		_stop
  2153 ;; This function is called by:
  2154 ;;		_returnHome
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text3
  2159   003348                     __ptext3:
  2160                           	callstack 0
  2161   003348                     _reverseStraight:
  2162                           	callstack 25
  2163   003348                     
  2164                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2165   003348  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2166   00334A  EFB2  F019         	goto	u4040
  2167   00334E  0E7C               	movlw	124
  2168   003350  5C1B               	subwf	reverseStraight@time^0,w,c
  2169   003352  0E15               	movlw	21
  2170   003354  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2171   003356  B0D8               	btfsc	status,0,c
  2172   003358  EFB0  F019         	goto	u4041
  2173   00335C  EFB2  F019         	goto	u4040
  2174   003360                     u4041:
  2175   003360  EFC4  F019         	goto	l4603
  2176   003364                     u4040:
  2177   003364  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2178   003366  EFBE  F019         	goto	u4051
  2179   00336A  0ED5               	movlw	213
  2180   00336C  5C1B               	subwf	reverseStraight@time^0,w,c
  2181   00336E  0E17               	movlw	23
  2182   003370  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2183   003372  A0D8               	btfss	status,0,c
  2184   003374  EFBE  F019         	goto	u4051
  2185   003378  EFC0  F019         	goto	u4050
  2186   00337C                     u4051:
  2187   00337C  EFC4  F019         	goto	l4603
  2188   003380                     u4050:
  2189   003380  0E0B               	movlw	11
  2190   003382  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2191   003384  0EB8               	movlw	184
  2192   003386  6E1D               	movwf	reverseStraight@delayMs^0,c
  2193   003388                     l4603:
  2194                           
  2195                           ;dc_motor.c: 374:     if (time<3700 && time>4100){delayMs = 2000; }
  2196   003388  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2197   00338A  EFD2  F019         	goto	u4060
  2198   00338E  0E74               	movlw	116
  2199   003390  5C1B               	subwf	reverseStraight@time^0,w,c
  2200   003392  0E0E               	movlw	14
  2201   003394  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2202   003396  B0D8               	btfsc	status,0,c
  2203   003398  EFD0  F019         	goto	u4061
  2204   00339C  EFD2  F019         	goto	u4060
  2205   0033A0                     u4061:
  2206   0033A0  EFE4  F019         	goto	l4609
  2207   0033A4                     u4060:
  2208   0033A4  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2209   0033A6  EFDE  F019         	goto	u4071
  2210   0033AA  0E05               	movlw	5
  2211   0033AC  5C1B               	subwf	reverseStraight@time^0,w,c
  2212   0033AE  0E10               	movlw	16
  2213   0033B0  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2214   0033B2  A0D8               	btfss	status,0,c
  2215   0033B4  EFDE  F019         	goto	u4071
  2216   0033B8  EFE0  F019         	goto	u4070
  2217   0033BC                     u4071:
  2218   0033BC  EFE4  F019         	goto	l4609
  2219   0033C0                     u4070:
  2220   0033C0  0E07               	movlw	7
  2221   0033C2  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2222   0033C4  0ED0               	movlw	208
  2223   0033C6  6E1D               	movwf	reverseStraight@delayMs^0,c
  2224   0033C8                     l4609:
  2225                           
  2226                           ;dc_motor.c: 375:     if (time<1700 && time>2100){delayMs = 1000;}
  2227   0033C8  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2228   0033CA  EFF2  F019         	goto	u4080
  2229   0033CE  0EA4               	movlw	164
  2230   0033D0  5C1B               	subwf	reverseStraight@time^0,w,c
  2231   0033D2  0E06               	movlw	6
  2232   0033D4  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2233   0033D6  B0D8               	btfsc	status,0,c
  2234   0033D8  EFF0  F019         	goto	u4081
  2235   0033DC  EFF2  F019         	goto	u4080
  2236   0033E0                     u4081:
  2237   0033E0  EF04  F01A         	goto	l4615
  2238   0033E4                     u4080:
  2239   0033E4  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2240   0033E6  EFFE  F019         	goto	u4091
  2241   0033EA  0E35               	movlw	53
  2242   0033EC  5C1B               	subwf	reverseStraight@time^0,w,c
  2243   0033EE  0E08               	movlw	8
  2244   0033F0  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2245   0033F2  A0D8               	btfss	status,0,c
  2246   0033F4  EFFE  F019         	goto	u4091
  2247   0033F8  EF00  F01A         	goto	u4090
  2248   0033FC                     u4091:
  2249   0033FC  EF04  F01A         	goto	l4615
  2250   003400                     u4090:
  2251   003400  0E03               	movlw	3
  2252   003402  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2253   003404  0EE8               	movlw	232
  2254   003406  6E1D               	movwf	reverseStraight@delayMs^0,c
  2255   003408                     l4615:
  2256                           
  2257                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2258   003408  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2259   00340C  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2260   003410  EC81  F01D         	call	_fullSpeedAhead	;wreg free
  2261   003414                     
  2262                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2263   003414  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2264   003418  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2265   00341C  ECCD  F020         	call	_customDelayMs	;wreg free
  2266   003420                     
  2267                           ;dc_motor.c: 379:     stop(mL, mR);
  2268   003420  C019  F014         	movff	reverseStraight@mL,stop@mL
  2269   003424  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2270   003428  ECBC  F01C         	call	_stop	;wreg free
  2271   00342C  0012               	return		;funcret
  2272   00342E                     __end_of_reverseStraight:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function _fullSpeedAhead *****************
  2276 ;; Defined at:
  2277 ;;		line 144 in file "dc_motor.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2280 ;;		 -> motorL(9), 
  2281 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2282 ;;		 -> motorR(9), 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  power           2   22[COMRAM] int 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2297 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2298 ;;Total ram usage:        5 bytes
  2299 ;; Hardware stack levels used: 1
  2300 ;; Hardware stack levels required when called: 3
  2301 ;; This function calls:
  2302 ;;		_setMotorPWM
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;;		_reverseStraight
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text4
  2310   003B02                     __ptext4:
  2311                           	callstack 0
  2312   003B02                     _fullSpeedAhead:
  2313                           	callstack 25
  2314   003B02                     
  2315                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2316   003B02  5014               	movf	fullSpeedAhead@mL^0,w,c
  2317   003B04  6ED9               	movwf	fsr2l,c
  2318   003B06  6ADA               	clrf	fsr2h,c
  2319   003B08  0E01               	movlw	1
  2320   003B0A  26D9               	addwf	fsr2l,f,c
  2321   003B0C  0E01               	movlw	1
  2322   003B0E  6EDF               	movwf	indf2,c
  2323                           
  2324                           ;dc_motor.c: 148:     mR->direction = 1;
  2325   003B10  5015               	movf	fullSpeedAhead@mR^0,w,c
  2326   003B12  6ED9               	movwf	fsr2l,c
  2327   003B14  6ADA               	clrf	fsr2h,c
  2328   003B16  0E01               	movlw	1
  2329   003B18  26D9               	addwf	fsr2l,f,c
  2330   003B1A  0E01               	movlw	1
  2331   003B1C  6EDF               	movwf	indf2,c
  2332   003B1E                     
  2333                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2334   003B1E  0E00               	movlw	0
  2335   003B20  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2336   003B22  0E00               	movlw	0
  2337   003B24  6E17               	movwf	fullSpeedAhead@power^0,c
  2338   003B26                     l3947:
  2339                           
  2340                           ;dc_motor.c: 151:         mL->power = power;
  2341   003B26  5014               	movf	fullSpeedAhead@mL^0,w,c
  2342   003B28  6ED9               	movwf	fsr2l,c
  2343   003B2A  6ADA               	clrf	fsr2h,c
  2344   003B2C  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2345                           
  2346                           ;dc_motor.c: 152:         mR->power = power;
  2347   003B30  5015               	movf	fullSpeedAhead@mR^0,w,c
  2348   003B32  6ED9               	movwf	fsr2l,c
  2349   003B34  6ADA               	clrf	fsr2h,c
  2350   003B36  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2351   003B3A                     
  2352                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2353   003B3A  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2354   003B3E  EC80  F017         	call	_setMotorPWM	;wreg free
  2355   003B42                     
  2356                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2357   003B42  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2358   003B46  EC80  F017         	call	_setMotorPWM	;wreg free
  2359   003B4A                     
  2360                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2361   003B4A  0E0B               	movlw	11
  2362   003B4C  6E16               	movwf	??_fullSpeedAhead^0,c
  2363   003B4E  0E62               	movlw	98
  2364   003B50                     u4937:
  2365   003B50  2EE8               	decfsz	wreg,f,c
  2366   003B52  D7FE               	bra	u4937
  2367   003B54  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2368   003B56  D7FC               	bra	u4937
  2369   003B58  D000               	nop2	
  2370   003B5A                     
  2371                           ;dc_motor.c: 160:     }
  2372   003B5A  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2373   003B5C  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2374   003B5E  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2375   003B60  EFBB  F01D         	goto	u3211
  2376   003B64  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2377   003B66  E109               	bnz	u3210
  2378   003B68  0E33               	movlw	51
  2379   003B6A  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2380   003B6C  A0D8               	btfss	status,0,c
  2381   003B6E  EFBB  F01D         	goto	u3211
  2382   003B72  EFBD  F01D         	goto	u3210
  2383   003B76                     u3211:
  2384   003B76  EF93  F01D         	goto	l3947
  2385   003B7A                     u3210:
  2386   003B7A  0012               	return		;funcret
  2387   003B7C                     __end_of_fullSpeedAhead:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function _customDelayMs *****************
  2391 ;; Defined at:
  2392 ;;		line 361 in file "dc_motor.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  i               2    4[COMRAM] unsigned int 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2409 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2410 ;;Total ram usage:        5 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 1
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_reverseStraight
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text5
  2421   00419A                     __ptext5:
  2422                           	callstack 0
  2423   00419A                     _customDelayMs:
  2424                           	callstack 27
  2425   00419A                     
  2426                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2427   00419A  0E00               	movlw	0
  2428   00419C  6E06               	movwf	(customDelayMs@i+1)^0,c
  2429   00419E  0E00               	movlw	0
  2430   0041A0  6E05               	movwf	customDelayMs@i^0,c
  2431   0041A2  EFDD  F020         	goto	l498
  2432   0041A6                     l4009:
  2433                           
  2434                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2435   0041A6  0E15               	movlw	21
  2436   0041A8  6E04               	movwf	??_customDelayMs^0,c
  2437   0041AA  0EC6               	movlw	198
  2438   0041AC                     u4947:
  2439   0041AC  2EE8               	decfsz	wreg,f,c
  2440   0041AE  D7FE               	bra	u4947
  2441   0041B0  2E04               	decfsz	??_customDelayMs^0,f,c
  2442   0041B2  D7FC               	bra	u4947
  2443   0041B4  D000               	nop2	
  2444   0041B6                     
  2445                           ;dc_motor.c: 364:     }
  2446   0041B6  4A05               	infsnz	customDelayMs@i^0,f,c
  2447   0041B8  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2448   0041BA                     l498:
  2449   0041BA  5002               	movf	customDelayMs@milliseconds^0,w,c
  2450   0041BC  5C05               	subwf	customDelayMs@i^0,w,c
  2451   0041BE  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2452   0041C0  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2453   0041C2  A0D8               	btfss	status,0,c
  2454   0041C4  EFE6  F020         	goto	u3231
  2455   0041C8  EFE8  F020         	goto	u3230
  2456   0041CC                     u3231:
  2457   0041CC  EFD3  F020         	goto	l4009
  2458   0041D0                     u3230:
  2459   0041D0  0012               	return		;funcret
  2460   0041D2                     __end_of_customDelayMs:
  2461                           	callstack 0
  2462                           
  2463 ;; *************** function _reading_hue *****************
  2464 ;; Defined at:
  2465 ;;		line 90 in file "color.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  cCurr           1   89[COMRAM] PTR struct colors
  2468 ;;		 -> colorCurrent(10), 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  led_state      50    0        unsigned char [50]
  2471 ;;  hue             2   78[BANK0 ] unsigned int 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2   89[COMRAM] unsigned int 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;Total ram usage:        6 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 4
  2488 ;; This function calls:
  2489 ;;		_color_read_Blue
  2490 ;;		_color_read_Clear
  2491 ;;		_color_read_Green
  2492 ;;		_color_read_Red
  2493 ;;		_convert_rgb2hue
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text6
  2500   00325E                     __ptext6:
  2501                           	callstack 0
  2502   00325E                     _reading_hue:
  2503                           	callstack 26
  2504   00325E                     
  2505                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2506   00325E  807F               	bsf	127,0,c	;volatile
  2507                           
  2508                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2509   003260  9E7D               	bcf	125,7,c	;volatile
  2510                           
  2511                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2512   003262  9679               	bcf	121,3,c	;volatile
  2513   003264                     
  2514                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2515   003264  0E29               	movlw	41
  2516   003266  0100               	movlb	0	; () banked
  2517   003268  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  2518   00326A  0E96               	movlw	150
  2519   00326C  6FAC               	movwf	??_reading_hue& (0+255),b
  2520   00326E  0E7F               	movlw	127
  2521   003270                     u4957:
  2522   003270  2EE8               	decfsz	wreg,f,c
  2523   003272  D7FE               	bra	u4957
  2524   003274  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  2525   003276  D7FC               	bra	u4957
  2526   003278  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  2527   00327A  D7FA               	bra	u4957
  2528   00327C                     
  2529                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2530   00327C  EC68  F01E         	call	_color_read_Red	;wreg free
  2531   003280  505A               	movf	reading_hue@cCurr^0,w,c
  2532   003282  6ED9               	movwf	fsr2l,c
  2533   003284  6ADA               	clrf	fsr2h,c
  2534   003286  C006  FFDE         	movff	?_color_read_Red,postinc2
  2535   00328A  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2536   00328E                     
  2537                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2538   00328E  907F               	bcf	127,0,c	;volatile
  2539   003290                     
  2540                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2541   003290  8E7D               	bsf	125,7,c	;volatile
  2542   003292                     
  2543                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2544   003292  9679               	bcf	121,3,c	;volatile
  2545   003294                     
  2546                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2547   003294  0E29               	movlw	41
  2548   003296  0100               	movlb	0	; () banked
  2549   003298  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  2550   00329A  0E96               	movlw	150
  2551   00329C  6FAC               	movwf	??_reading_hue& (0+255),b
  2552   00329E  0E7F               	movlw	127
  2553   0032A0                     u4967:
  2554   0032A0  2EE8               	decfsz	wreg,f,c
  2555   0032A2  D7FE               	bra	u4967
  2556   0032A4  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  2557   0032A6  D7FC               	bra	u4967
  2558   0032A8  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  2559   0032AA  D7FA               	bra	u4967
  2560                           
  2561                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2562   0032AC  EC90  F01E         	call	_color_read_Green	;wreg free
  2563   0032B0  505A               	movf	reading_hue@cCurr^0,w,c
  2564   0032B2  6ED9               	movwf	fsr2l,c
  2565   0032B4  6ADA               	clrf	fsr2h,c
  2566   0032B6  0E02               	movlw	2
  2567   0032B8  26D9               	addwf	fsr2l,f,c
  2568   0032BA  C006  FFDE         	movff	?_color_read_Green,postinc2
  2569   0032BE  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2570   0032C2                     
  2571                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2572   0032C2  907F               	bcf	127,0,c	;volatile
  2573   0032C4                     
  2574                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2575   0032C4  9E7D               	bcf	125,7,c	;volatile
  2576   0032C6                     
  2577                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2578   0032C6  8679               	bsf	121,3,c	;volatile
  2579   0032C8                     
  2580                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2581   0032C8  0E29               	movlw	41
  2582   0032CA  0100               	movlb	0	; () banked
  2583   0032CC  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  2584   0032CE  0E96               	movlw	150
  2585   0032D0  6FAC               	movwf	??_reading_hue& (0+255),b
  2586   0032D2  0E7F               	movlw	127
  2587   0032D4                     u4977:
  2588   0032D4  2EE8               	decfsz	wreg,f,c
  2589   0032D6  D7FE               	bra	u4977
  2590   0032D8  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  2591   0032DA  D7FC               	bra	u4977
  2592   0032DC  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  2593   0032DE  D7FA               	bra	u4977
  2594   0032E0                     
  2595                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2596   0032E0  ECE0  F01E         	call	_color_read_Blue	;wreg free
  2597   0032E4  505A               	movf	reading_hue@cCurr^0,w,c
  2598   0032E6  6ED9               	movwf	fsr2l,c
  2599   0032E8  6ADA               	clrf	fsr2h,c
  2600   0032EA  0E04               	movlw	4
  2601   0032EC  26D9               	addwf	fsr2l,f,c
  2602   0032EE  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2603   0032F2  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2604   0032F6                     
  2605                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2606   0032F6  807F               	bsf	127,0,c	;volatile
  2607   0032F8                     
  2608                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2609   0032F8  8E7D               	bsf	125,7,c	;volatile
  2610   0032FA                     
  2611                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2612   0032FA  8679               	bsf	121,3,c	;volatile
  2613                           
  2614                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2615   0032FC  0E29               	movlw	41
  2616   0032FE  0100               	movlb	0	; () banked
  2617   003300  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  2618   003302  0E96               	movlw	150
  2619   003304  6FAC               	movwf	??_reading_hue& (0+255),b
  2620   003306  0E7F               	movlw	127
  2621   003308                     u4987:
  2622   003308  2EE8               	decfsz	wreg,f,c
  2623   00330A  D7FE               	bra	u4987
  2624   00330C  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  2625   00330E  D7FC               	bra	u4987
  2626   003310  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  2627   003312  D7FA               	bra	u4987
  2628   003314                     
  2629                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2630   003314  ECB8  F01E         	call	_color_read_Clear	;wreg free
  2631   003318  505A               	movf	reading_hue@cCurr^0,w,c
  2632   00331A  6ED9               	movwf	fsr2l,c
  2633   00331C  6ADA               	clrf	fsr2h,c
  2634   00331E  0E06               	movlw	6
  2635   003320  26D9               	addwf	fsr2l,f,c
  2636   003322  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2637   003326  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2638   00332A                     
  2639                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2640   00332A  0EE3               	movlw	low _colorCalibration
  2641   00332C  6E56               	movwf	convert_rgb2hue@cMax^0,c
  2642   00332E  0ED9               	movlw	low _colorCurrent
  2643   003330  6E57               	movwf	convert_rgb2hue@cCurr^0,c
  2644   003332  EC66  F007         	call	_convert_rgb2hue	;wreg free
  2645   003336  C056  F0AE         	movff	?_convert_rgb2hue,reading_hue@hue
  2646   00333A  C057  F0AF         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2647   00333E                     
  2648                           ;color.c: 145:     return hue;
  2649   00333E  C0AE  F05A         	movff	reading_hue@hue,?_reading_hue
  2650   003342  C0AF  F05B         	movff	reading_hue@hue+1,?_reading_hue+1
  2651   003346  0012               	return		;funcret
  2652   003348                     __end_of_reading_hue:
  2653                           	callstack 0
  2654                           
  2655 ;; *************** function _convert_rgb2hue *****************
  2656 ;; Defined at:
  2657 ;;		line 244 in file "color.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  cMax            1   85[COMRAM] PTR struct colors
  2660 ;;		 -> colorCalibration(10), 
  2661 ;;  cCurr           1   86[COMRAM] PTR struct colors
  2662 ;;		 -> colorCurrent(10), 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  c_char         20    0        unsigned char [20]
  2665 ;;  b               4   72[BANK0 ] float 
  2666 ;;  g               4   68[BANK0 ] float 
  2667 ;;  r               4   64[BANK0 ] float 
  2668 ;;  hue             4   60[BANK0 ] float 
  2669 ;;  max             4   56[BANK0 ] float 
  2670 ;;  diff            4   52[BANK0 ] float 
  2671 ;;  min             4   48[BANK0 ] float 
  2672 ;;  clearmax        4   28[BANK0 ] float 
  2673 ;;  clearcurrent    4   24[BANK0 ] float 
  2674 ;;  bluemax         4   20[BANK0 ] float 
  2675 ;;  bluecurrent     4   16[BANK0 ] float 
  2676 ;;  greenmax        4   12[BANK0 ] float 
  2677 ;;  greencurrent    4    8[BANK0 ] float 
  2678 ;;  redmax          4    4[BANK0 ] float 
  2679 ;;  redcurrent      4    0[BANK0 ] float 
  2680 ;;  c               4    0        float 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  2   85[COMRAM] unsigned int 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2691 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2693 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2694 ;;Total ram usage:       80 bytes
  2695 ;; Hardware stack levels used: 1
  2696 ;; Hardware stack levels required when called: 3
  2697 ;; This function calls:
  2698 ;;		___fladd
  2699 ;;		___fldiv
  2700 ;;		___fleq
  2701 ;;		___flge
  2702 ;;		___flmul
  2703 ;;		___flsub
  2704 ;;		___fltol
  2705 ;;		___xxtofl
  2706 ;; This function is called by:
  2707 ;;		_reading_hue
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text7
  2712   000ECC                     __ptext7:
  2713                           	callstack 0
  2714   000ECC                     _convert_rgb2hue:
  2715                           	callstack 26
  2716   000ECC                     
  2717                           ;color.c: 244: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 245: {;color.c: 246:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 247:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2718   000ECC  0E00               	movlw	0
  2719   000ECE  0100               	movlb	0	; () banked
  2720   000ED0  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2721   000ED2  0E00               	movlw	0
  2722   000ED4  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2723   000ED6  0E00               	movlw	0
  2724   000ED8  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2725   000EDA  0E00               	movlw	0
  2726   000EDC  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2727   000EDE                     
  2728                           ; BSR set to: 0
  2729                           ;color.c: 249:     redcurrent = cCurr->red;
  2730   000EDE  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  2731   000EE0  6ED9               	movwf	fsr2l,c
  2732   000EE2  6ADA               	clrf	fsr2h,c
  2733   000EE4  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2734   000EE8  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2735   000EEC  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2736   000EF0  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2737   000EF4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2738   000EF6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2739   000EF8  0E00               	movlw	0
  2740   000EFA  EC26  F015         	call	___xxtofl
  2741   000EFE  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2742   000F02  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2743   000F06  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2744   000F0A  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2745   000F0E                     
  2746                           ;color.c: 250:     redmax = cMax->red;
  2747   000F0E  5056               	movf	convert_rgb2hue@cMax^0,w,c
  2748   000F10  6ED9               	movwf	fsr2l,c
  2749   000F12  6ADA               	clrf	fsr2h,c
  2750   000F14  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2751   000F18  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2752   000F1C  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2753   000F20  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2754   000F24  6A04               	clrf	(___xxtofl@val+2)^0,c
  2755   000F26  6A05               	clrf	(___xxtofl@val+3)^0,c
  2756   000F28  0E00               	movlw	0
  2757   000F2A  EC26  F015         	call	___xxtofl
  2758   000F2E  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2759   000F32  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2760   000F36  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2761   000F3A  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2762   000F3E                     
  2763                           ;color.c: 251:     greencurrent = cCurr->green;
  2764   000F3E  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  2765   000F40  6ED9               	movwf	fsr2l,c
  2766   000F42  6ADA               	clrf	fsr2h,c
  2767   000F44  0E02               	movlw	2
  2768   000F46  26D9               	addwf	fsr2l,f,c
  2769   000F48  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2770   000F4C  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2771   000F50  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2772   000F54  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2773   000F58  6A04               	clrf	(___xxtofl@val+2)^0,c
  2774   000F5A  6A05               	clrf	(___xxtofl@val+3)^0,c
  2775   000F5C  0E00               	movlw	0
  2776   000F5E  EC26  F015         	call	___xxtofl
  2777   000F62  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2778   000F66  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2779   000F6A  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2780   000F6E  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2781   000F72                     
  2782                           ;color.c: 252:     greenmax = cMax->green;
  2783   000F72  5056               	movf	convert_rgb2hue@cMax^0,w,c
  2784   000F74  6ED9               	movwf	fsr2l,c
  2785   000F76  6ADA               	clrf	fsr2h,c
  2786   000F78  0E02               	movlw	2
  2787   000F7A  26D9               	addwf	fsr2l,f,c
  2788   000F7C  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2789   000F80  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2790   000F84  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2791   000F88  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2792   000F8C  6A04               	clrf	(___xxtofl@val+2)^0,c
  2793   000F8E  6A05               	clrf	(___xxtofl@val+3)^0,c
  2794   000F90  0E00               	movlw	0
  2795   000F92  EC26  F015         	call	___xxtofl
  2796   000F96  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2797   000F9A  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2798   000F9E  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2799   000FA2  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2800   000FA6                     
  2801                           ;color.c: 253:     bluecurrent = cCurr->blue;
  2802   000FA6  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  2803   000FA8  6ED9               	movwf	fsr2l,c
  2804   000FAA  6ADA               	clrf	fsr2h,c
  2805   000FAC  0E04               	movlw	4
  2806   000FAE  26D9               	addwf	fsr2l,f,c
  2807   000FB0  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2808   000FB4  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2809   000FB8  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2810   000FBC  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2811   000FC0  6A04               	clrf	(___xxtofl@val+2)^0,c
  2812   000FC2  6A05               	clrf	(___xxtofl@val+3)^0,c
  2813   000FC4  0E00               	movlw	0
  2814   000FC6  EC26  F015         	call	___xxtofl
  2815   000FCA  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2816   000FCE  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2817   000FD2  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2818   000FD6  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2819   000FDA                     
  2820                           ;color.c: 254:     bluemax = cMax->blue;
  2821   000FDA  5056               	movf	convert_rgb2hue@cMax^0,w,c
  2822   000FDC  6ED9               	movwf	fsr2l,c
  2823   000FDE  6ADA               	clrf	fsr2h,c
  2824   000FE0  0E04               	movlw	4
  2825   000FE2  26D9               	addwf	fsr2l,f,c
  2826   000FE4  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2827   000FE8  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2828   000FEC  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2829   000FF0  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2830   000FF4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2831   000FF6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2832   000FF8  0E00               	movlw	0
  2833   000FFA  EC26  F015         	call	___xxtofl
  2834   000FFE  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2835   001002  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2836   001006  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2837   00100A  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2838   00100E                     
  2839                           ;color.c: 255:     clearcurrent = cCurr->clear;
  2840   00100E  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  2841   001010  6ED9               	movwf	fsr2l,c
  2842   001012  6ADA               	clrf	fsr2h,c
  2843   001014  0E06               	movlw	6
  2844   001016  26D9               	addwf	fsr2l,f,c
  2845   001018  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2846   00101C  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2847   001020  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2848   001024  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2849   001028  6A04               	clrf	(___xxtofl@val+2)^0,c
  2850   00102A  6A05               	clrf	(___xxtofl@val+3)^0,c
  2851   00102C  0E00               	movlw	0
  2852   00102E  EC26  F015         	call	___xxtofl
  2853   001032  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2854   001036  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2855   00103A  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2856   00103E  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2857   001042                     
  2858                           ;color.c: 256:     clearmax = cMax->clear;
  2859   001042  5056               	movf	convert_rgb2hue@cMax^0,w,c
  2860   001044  6ED9               	movwf	fsr2l,c
  2861   001046  6ADA               	clrf	fsr2h,c
  2862   001048  0E06               	movlw	6
  2863   00104A  26D9               	addwf	fsr2l,f,c
  2864   00104C  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  2865   001050  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  2866   001054  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2867   001058  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2868   00105C  6A04               	clrf	(___xxtofl@val+2)^0,c
  2869   00105E  6A05               	clrf	(___xxtofl@val+3)^0,c
  2870   001060  0E00               	movlw	0
  2871   001062  EC26  F015         	call	___xxtofl
  2872   001066  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2873   00106A  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2874   00106E  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2875   001072  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2876   001076  C078  F033         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2877   00107A  C079  F034         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2878   00107E  C07A  F035         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2879   001082  C07B  F036         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2880   001086  C07C  F037         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2881   00108A  C07D  F038         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2882   00108E  C07E  F039         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2883   001092  C07F  F03A         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2884   001096  ECA4  F00F         	call	___fldiv	;wreg free
  2885   00109A                     
  2886                           ;color.c: 259:     char c_char[20];;color.c: 265:     r = redcurrent/redmax;
  2887   00109A  C060  F033         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2888   00109E  C061  F034         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2889   0010A2  C062  F035         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2890   0010A6  C063  F036         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2891   0010AA  C064  F037         	movff	convert_rgb2hue@redmax,___fldiv@a
  2892   0010AE  C065  F038         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2893   0010B2  C066  F039         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2894   0010B6  C067  F03A         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2895   0010BA  ECA4  F00F         	call	___fldiv	;wreg free
  2896   0010BE  C033  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2897   0010C2  C034  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2898   0010C6  C035  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2899   0010CA  C036  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2900   0010CE                     
  2901                           ;color.c: 266:     g = greencurrent/greenmax;
  2902   0010CE  C068  F033         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2903   0010D2  C069  F034         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2904   0010D6  C06A  F035         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2905   0010DA  C06B  F036         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2906   0010DE  C06C  F037         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2907   0010E2  C06D  F038         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2908   0010E6  C06E  F039         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2909   0010EA  C06F  F03A         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2910   0010EE  ECA4  F00F         	call	___fldiv	;wreg free
  2911   0010F2  C033  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2912   0010F6  C034  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2913   0010FA  C035  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2914   0010FE  C036  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2915   001102                     
  2916                           ;color.c: 267:     b = bluecurrent/bluemax;
  2917   001102  C070  F033         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2918   001106  C071  F034         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2919   00110A  C072  F035         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2920   00110E  C073  F036         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2921   001112  C074  F037         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2922   001116  C075  F038         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2923   00111A  C076  F039         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2924   00111E  C077  F03A         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2925   001122  ECA4  F00F         	call	___fldiv	;wreg free
  2926   001126  C033  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2927   00112A  C034  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2928   00112E  C035  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2929   001132  C036  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2930   001136                     
  2931                           ;color.c: 269:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2932   001136  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2933   00113A  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2934   00113E  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2935   001142  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2936   001146  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2937   00114A  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2938   00114E  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2939   001152  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2940   001156  ECAD  F018         	call	___flge	;wreg free
  2941   00115A  A0D8               	btfss	status,0,c
  2942   00115C  EFB2  F008         	goto	u3911
  2943   001160  EFB4  F008         	goto	u3910
  2944   001164                     u3911:
  2945   001164  EFE9  F008         	goto	l4485
  2946   001168                     u3910:
  2947   001168  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2948   00116C  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2949   001170  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2950   001174  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2951   001178  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2952   00117C  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2953   001180  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2954   001184  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2955   001188  ECAD  F018         	call	___flge	;wreg free
  2956   00118C  A0D8               	btfss	status,0,c
  2957   00118E  EFCB  F008         	goto	u3921
  2958   001192  EFCD  F008         	goto	u3920
  2959   001196                     u3921:
  2960   001196  EFD7  F008         	goto	l122
  2961   00119A                     u3920:
  2962   00119A  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$439
  2963   00119E  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$439+1
  2964   0011A2  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$439+2
  2965   0011A6  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$439+3
  2966   0011AA  EFDF  F008         	goto	l124
  2967   0011AE                     l122:
  2968   0011AE  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$439
  2969   0011B2  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$439+1
  2970   0011B6  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$439+2
  2971   0011BA  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$439+3
  2972   0011BE                     l124:
  2973   0011BE  C080  F090         	movff	_convert_rgb2hue$439,convert_rgb2hue@min
  2974   0011C2  C081  F091         	movff	_convert_rgb2hue$439+1,convert_rgb2hue@min+1
  2975   0011C6  C082  F092         	movff	_convert_rgb2hue$439+2,convert_rgb2hue@min+2
  2976   0011CA  C083  F093         	movff	_convert_rgb2hue$439+3,convert_rgb2hue@min+3
  2977   0011CE  EF1C  F009         	goto	l4489
  2978   0011D2                     l4485:
  2979   0011D2  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2980   0011D6  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2981   0011DA  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2982   0011DE  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2983   0011E2  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2984   0011E6  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2985   0011EA  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2986   0011EE  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2987   0011F2  ECAD  F018         	call	___flge	;wreg free
  2988   0011F6  A0D8               	btfss	status,0,c
  2989   0011F8  EF00  F009         	goto	u3931
  2990   0011FC  EF02  F009         	goto	u3930
  2991   001200                     u3931:
  2992   001200  EF0C  F009         	goto	l126
  2993   001204                     u3930:
  2994   001204  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$440
  2995   001208  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$440+1
  2996   00120C  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$440+2
  2997   001210  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$440+3
  2998   001214  EF14  F009         	goto	l128
  2999   001218                     l126:
  3000   001218  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$440
  3001   00121C  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$440+1
  3002   001220  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$440+2
  3003   001224  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$440+3
  3004   001228                     l128:
  3005   001228  C084  F090         	movff	_convert_rgb2hue$440,convert_rgb2hue@min
  3006   00122C  C085  F091         	movff	_convert_rgb2hue$440+1,convert_rgb2hue@min+1
  3007   001230  C086  F092         	movff	_convert_rgb2hue$440+2,convert_rgb2hue@min+2
  3008   001234  C087  F093         	movff	_convert_rgb2hue$440+3,convert_rgb2hue@min+3
  3009   001238                     l4489:
  3010                           
  3011                           ;color.c: 270:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3012   001238  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3013   00123C  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3014   001240  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3015   001244  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3016   001248  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3017   00124C  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3018   001250  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3019   001254  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3020   001258  ECAD  F018         	call	___flge	;wreg free
  3021   00125C  A0D8               	btfss	status,0,c
  3022   00125E  EF33  F009         	goto	u3941
  3023   001262  EF35  F009         	goto	u3940
  3024   001266                     u3941:
  3025   001266  EF6A  F009         	goto	l4495
  3026   00126A                     u3940:
  3027   00126A  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3028   00126E  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3029   001272  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3030   001276  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3031   00127A  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3032   00127E  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3033   001282  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3034   001286  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3035   00128A  ECAD  F018         	call	___flge	;wreg free
  3036   00128E  A0D8               	btfss	status,0,c
  3037   001290  EF4C  F009         	goto	u3951
  3038   001294  EF4E  F009         	goto	u3950
  3039   001298                     u3951:
  3040   001298  EF58  F009         	goto	l134
  3041   00129C                     u3950:
  3042   00129C  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$441
  3043   0012A0  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$441+1
  3044   0012A4  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$441+2
  3045   0012A8  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$441+3
  3046   0012AC  EF60  F009         	goto	l136
  3047   0012B0                     l134:
  3048   0012B0  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$441
  3049   0012B4  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$441+1
  3050   0012B8  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$441+2
  3051   0012BC  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$441+3
  3052   0012C0                     l136:
  3053   0012C0  C088  F098         	movff	_convert_rgb2hue$441,convert_rgb2hue@max
  3054   0012C4  C089  F099         	movff	_convert_rgb2hue$441+1,convert_rgb2hue@max+1
  3055   0012C8  C08A  F09A         	movff	_convert_rgb2hue$441+2,convert_rgb2hue@max+2
  3056   0012CC  C08B  F09B         	movff	_convert_rgb2hue$441+3,convert_rgb2hue@max+3
  3057   0012D0  EF9D  F009         	goto	l4499
  3058   0012D4                     l4495:
  3059   0012D4  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3060   0012D8  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3061   0012DC  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3062   0012E0  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3063   0012E4  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3064   0012E8  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3065   0012EC  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3066   0012F0  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3067   0012F4  ECAD  F018         	call	___flge	;wreg free
  3068   0012F8  A0D8               	btfss	status,0,c
  3069   0012FA  EF81  F009         	goto	u3961
  3070   0012FE  EF83  F009         	goto	u3960
  3071   001302                     u3961:
  3072   001302  EF8D  F009         	goto	l138
  3073   001306                     u3960:
  3074   001306  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$442
  3075   00130A  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$442+1
  3076   00130E  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$442+2
  3077   001312  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$442+3
  3078   001316  EF95  F009         	goto	l140
  3079   00131A                     l138:
  3080   00131A  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$442
  3081   00131E  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$442+1
  3082   001322  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$442+2
  3083   001326  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$442+3
  3084   00132A                     l140:
  3085   00132A  C08C  F098         	movff	_convert_rgb2hue$442,convert_rgb2hue@max
  3086   00132E  C08D  F099         	movff	_convert_rgb2hue$442+1,convert_rgb2hue@max+1
  3087   001332  C08E  F09A         	movff	_convert_rgb2hue$442+2,convert_rgb2hue@max+2
  3088   001336  C08F  F09B         	movff	_convert_rgb2hue$442+3,convert_rgb2hue@max+3
  3089   00133A                     l4499:
  3090                           
  3091                           ;color.c: 271:     diff = max - min;
  3092   00133A  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3093   00133E  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3094   001342  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3095   001346  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3096   00134A  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3097   00134E  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3098   001352  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3099   001356  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3100   00135A  EC27  F020         	call	___flsub	;wreg free
  3101   00135E  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3102   001362  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3103   001366  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3104   00136A  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3105                           
  3106                           ;color.c: 272:     if (max == min) {
  3107   00136E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3108   001372  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3109   001376  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3110   00137A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3111   00137E  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3112   001382  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3113   001386  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3114   00138A  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3115   00138E  EC7F  F01B         	call	___fleq	;wreg free
  3116   001392  A0D8               	btfss	status,0,c
  3117   001394  EFCE  F009         	goto	u3971
  3118   001398  EFD0  F009         	goto	u3970
  3119   00139C                     u3971:
  3120   00139C  EFDB  F009         	goto	l4503
  3121   0013A0                     u3970:
  3122   0013A0                     
  3123                           ;color.c: 273:         hue = 0;
  3124   0013A0  0E00               	movlw	0
  3125   0013A2  0100               	movlb	0	; () banked
  3126   0013A4  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3127   0013A6  0E00               	movlw	0
  3128   0013A8  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3129   0013AA  0E00               	movlw	0
  3130   0013AC  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3131   0013AE  0E00               	movlw	0
  3132   0013B0  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3133                           
  3134                           ;color.c: 274:     } else if (max == r){
  3135   0013B2  EFE4  F00A         	goto	l4515
  3136   0013B6                     l4503:
  3137   0013B6  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3138   0013BA  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3139   0013BE  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3140   0013C2  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3141   0013C6  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3142   0013CA  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3143   0013CE  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3144   0013D2  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3145   0013D6  EC7F  F01B         	call	___fleq	;wreg free
  3146   0013DA  A0D8               	btfss	status,0,c
  3147   0013DC  EFF2  F009         	goto	u3981
  3148   0013E0  EFF4  F009         	goto	u3980
  3149   0013E4                     u3981:
  3150   0013E4  EF22  F00A         	goto	l4507
  3151   0013E8                     u3980:
  3152   0013E8                     
  3153                           ;color.c: 275:         hue = (b - g) / diff;
  3154   0013E8  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3155   0013EC  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3156   0013F0  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3157   0013F4  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3158   0013F8  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3159   0013FC  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3160   001400  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3161   001404  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3162   001408  EC27  F020         	call	___flsub	;wreg free
  3163   00140C  C012  F033         	movff	?___flsub,___fldiv@b
  3164   001410  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3165   001414  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3166   001418  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3167   00141C  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3168   001420  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3169   001424  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3170   001428  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3171   00142C  ECA4  F00F         	call	___fldiv	;wreg free
  3172   001430  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3173   001434  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3174   001438  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3175   00143C  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3176                           
  3177                           ;color.c: 276:     } else if (max == g){
  3178   001440  EFE4  F00A         	goto	l4515
  3179   001444                     l4507:
  3180   001444  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3181   001448  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3182   00144C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3183   001450  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3184   001454  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3185   001458  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3186   00145C  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3187   001460  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3188   001464  EC7F  F01B         	call	___fleq	;wreg free
  3189   001468  A0D8               	btfss	status,0,c
  3190   00146A  EF39  F00A         	goto	u3991
  3191   00146E  EF3B  F00A         	goto	u3990
  3192   001472                     u3991:
  3193   001472  EF83  F00A         	goto	l4511
  3194   001476                     u3990:
  3195   001476                     
  3196                           ;color.c: 277:         hue = (b - r) / diff;
  3197   001476  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3198   00147A  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3199   00147E  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3200   001482  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3201   001486  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3202   00148A  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3203   00148E  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3204   001492  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3205   001496  EC27  F020         	call	___flsub	;wreg free
  3206   00149A  C012  F033         	movff	?___flsub,___fldiv@b
  3207   00149E  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3208   0014A2  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3209   0014A6  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3210   0014AA  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3211   0014AE  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3212   0014B2  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3213   0014B6  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3214   0014BA  ECA4  F00F         	call	___fldiv	;wreg free
  3215   0014BE  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3216   0014C2  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3217   0014C6  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3218   0014CA  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3219                           
  3220                           ;color.c: 278:         hue = hue + 2;
  3221   0014CE  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3222   0014D2  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3223   0014D6  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3224   0014DA  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3225   0014DE  0E00               	movlw	0
  3226   0014E0  6E06               	movwf	___fladd@a^0,c
  3227   0014E2  0E00               	movlw	0
  3228   0014E4  6E07               	movwf	(___fladd@a+1)^0,c
  3229   0014E6  0E00               	movlw	0
  3230   0014E8  6E08               	movwf	(___fladd@a+2)^0,c
  3231   0014EA  0E40               	movlw	64
  3232   0014EC  6E09               	movwf	(___fladd@a+3)^0,c
  3233   0014EE  EC2F  F00B         	call	___fladd	;wreg free
  3234   0014F2  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3235   0014F6  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3236   0014FA  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3237   0014FE  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3238                           
  3239                           ;color.c: 279:     } else if (max == b){
  3240   001502  EFE4  F00A         	goto	l4515
  3241   001506                     l4511:
  3242   001506  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3243   00150A  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3244   00150E  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3245   001512  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3246   001516  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3247   00151A  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3248   00151E  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3249   001522  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3250   001526  EC7F  F01B         	call	___fleq	;wreg free
  3251   00152A  A0D8               	btfss	status,0,c
  3252   00152C  EF9A  F00A         	goto	u4001
  3253   001530  EF9C  F00A         	goto	u4000
  3254   001534                     u4001:
  3255   001534  EFE4  F00A         	goto	l144
  3256   001538                     u4000:
  3257   001538                     
  3258                           ;color.c: 280:         hue = (r - g) / diff;
  3259   001538  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3260   00153C  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3261   001540  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3262   001544  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3263   001548  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3264   00154C  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3265   001550  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3266   001554  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3267   001558  EC27  F020         	call	___flsub	;wreg free
  3268   00155C  C012  F033         	movff	?___flsub,___fldiv@b
  3269   001560  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3270   001564  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3271   001568  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3272   00156C  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3273   001570  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3274   001574  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3275   001578  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3276   00157C  ECA4  F00F         	call	___fldiv	;wreg free
  3277   001580  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3278   001584  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3279   001588  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3280   00158C  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3281                           
  3282                           ;color.c: 281:         hue = hue + 4;
  3283   001590  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3284   001594  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3285   001598  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3286   00159C  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3287   0015A0  0E00               	movlw	0
  3288   0015A2  6E06               	movwf	___fladd@a^0,c
  3289   0015A4  0E00               	movlw	0
  3290   0015A6  6E07               	movwf	(___fladd@a+1)^0,c
  3291   0015A8  0E80               	movlw	128
  3292   0015AA  6E08               	movwf	(___fladd@a+2)^0,c
  3293   0015AC  0E40               	movlw	64
  3294   0015AE  6E09               	movwf	(___fladd@a+3)^0,c
  3295   0015B0  EC2F  F00B         	call	___fladd	;wreg free
  3296   0015B4  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3297   0015B8  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3298   0015BC  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3299   0015C0  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3300   0015C4  EFE4  F00A         	goto	l4515
  3301   0015C8                     l144:
  3302   0015C8                     l4515:
  3303                           
  3304                           ;color.c: 284:     hue = hue * 60;
  3305   0015C8  C09C  F01A         	movff	convert_rgb2hue@hue,___flmul@b
  3306   0015CC  C09D  F01B         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3307   0015D0  C09E  F01C         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3308   0015D4  C09F  F01D         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3309   0015D8  0E00               	movlw	0
  3310   0015DA  6E1E               	movwf	___flmul@a^0,c
  3311   0015DC  0E00               	movlw	0
  3312   0015DE  6E1F               	movwf	(___flmul@a+1)^0,c
  3313   0015E0  0E70               	movlw	112
  3314   0015E2  6E20               	movwf	(___flmul@a+2)^0,c
  3315   0015E4  0E42               	movlw	66
  3316   0015E6  6E21               	movwf	(___flmul@a+3)^0,c
  3317   0015E8  EC8F  F00D         	call	___flmul	;wreg free
  3318   0015EC  C01A  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3319   0015F0  C01B  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3320   0015F4  C01C  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3321   0015F8  C01D  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3322   0015FC                     
  3323                           ;color.c: 285:     if (hue < 0) {
  3324   0015FC  0100               	movlb	0	; () banked
  3325   0015FE  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3326   001600  EF06  F00B         	goto	u4010
  3327   001604  EF04  F00B         	goto	u4011
  3328   001608                     u4011:
  3329   001608  EF20  F00B         	goto	l148
  3330   00160C                     u4010:
  3331   00160C                     
  3332                           ; BSR set to: 0
  3333                           ;color.c: 286:         hue = hue + 360;
  3334   00160C  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3335   001610  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3336   001614  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3337   001618  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3338   00161C  0E00               	movlw	0
  3339   00161E  6E06               	movwf	___fladd@a^0,c
  3340   001620  0E00               	movlw	0
  3341   001622  6E07               	movwf	(___fladd@a+1)^0,c
  3342   001624  0EB4               	movlw	180
  3343   001626  6E08               	movwf	(___fladd@a+2)^0,c
  3344   001628  0E43               	movlw	67
  3345   00162A  6E09               	movwf	(___fladd@a+3)^0,c
  3346   00162C  EC2F  F00B         	call	___fladd	;wreg free
  3347   001630  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3348   001634  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3349   001638  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3350   00163C  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3351   001640                     l148:
  3352                           
  3353                           ;color.c: 289:     return (unsigned int)hue;
  3354   001640  C09C  F04C         	movff	convert_rgb2hue@hue,___fltol@f1
  3355   001644  C09D  F04D         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3356   001648  C09E  F04E         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3357   00164C  C09F  F04F         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3358   001650  EC2A  F018         	call	___fltol	;wreg free
  3359   001654  C04C  F056         	movff	?___fltol,?_convert_rgb2hue
  3360   001658  C04D  F057         	movff	?___fltol+1,?_convert_rgb2hue+1
  3361   00165C  0012               	return		;funcret
  3362   00165E                     __end_of_convert_rgb2hue:
  3363                           	callstack 0
  3364                           
  3365 ;; *************** function ___xxtofl *****************
  3366 ;; Defined at:
  3367 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  sign            1    wreg     unsigned char 
  3370 ;;  val             4    1[COMRAM] long 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  sign            1    9[COMRAM] unsigned char 
  3373 ;;  arg             4   11[COMRAM] unsigned long 
  3374 ;;  exp             1   10[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  4    1[COMRAM] unsigned char 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3385 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3386 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3387 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;Total ram usage:       14 bytes
  3389 ;; Hardware stack levels used: 1
  3390 ;; Hardware stack levels required when called: 1
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_convert_rgb2hue
  3395 ;;		_main
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text8
  3400   002A4C                     __ptext8:
  3401                           	callstack 0
  3402   002A4C                     ___xxtofl:
  3403                           	callstack 27
  3404                           
  3405                           ;incstack = 0
  3406                           ;___xxtofl@sign stored from wreg
  3407   002A4C  6E0A               	movwf	___xxtofl@sign^0,c
  3408   002A4E  500A               	movf	___xxtofl@sign^0,w,c
  3409   002A50  B4D8               	btfsc	status,2,c
  3410   002A52  EF2D  F015         	goto	u3811
  3411   002A56  EF2F  F015         	goto	u3810
  3412   002A5A                     u3811:
  3413   002A5A  EF51  F015         	goto	l1324
  3414   002A5E                     u3810:
  3415   002A5E  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3416   002A60  EF36  F015         	goto	u3820
  3417   002A64  EF34  F015         	goto	u3821
  3418   002A68                     u3821:
  3419   002A68  EF51  F015         	goto	l1324
  3420   002A6C                     u3820:
  3421   002A6C  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3422   002A70  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3423   002A74  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3424   002A78  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3425   002A7C  1E06               	comf	??___xxtofl^0,f,c
  3426   002A7E  1E07               	comf	(??___xxtofl+1)^0,f,c
  3427   002A80  1E08               	comf	(??___xxtofl+2)^0,f,c
  3428   002A82  1E09               	comf	(??___xxtofl+3)^0,f,c
  3429   002A84  2A06               	incf	??___xxtofl^0,f,c
  3430   002A86  0E00               	movlw	0
  3431   002A88  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3432   002A8A  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3433   002A8C  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3434   002A8E  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3435   002A92  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3436   002A96  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3437   002A9A  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3438   002A9E  EF59  F015         	goto	l4375
  3439   002AA2                     l1324:
  3440   002AA2  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3441   002AA6  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3442   002AAA  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3443   002AAE  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3444   002AB2                     l4375:
  3445   002AB2  5002               	movf	___xxtofl@val^0,w,c
  3446   002AB4  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3447   002AB6  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3448   002AB8  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3449   002ABA  A4D8               	btfss	status,2,c
  3450   002ABC  EF62  F015         	goto	u3831
  3451   002AC0  EF64  F015         	goto	u3830
  3452   002AC4                     u3831:
  3453   002AC4  EF6E  F015         	goto	l4381
  3454   002AC8                     u3830:
  3455   002AC8  0E00               	movlw	0
  3456   002ACA  6E02               	movwf	?___xxtofl^0,c
  3457   002ACC  0E00               	movlw	0
  3458   002ACE  6E03               	movwf	(?___xxtofl+1)^0,c
  3459   002AD0  0E00               	movlw	0
  3460   002AD2  6E04               	movwf	(?___xxtofl+2)^0,c
  3461   002AD4  0E00               	movlw	0
  3462   002AD6  6E05               	movwf	(?___xxtofl+3)^0,c
  3463   002AD8  EFFF  F015         	goto	l1327
  3464   002ADC                     l4381:
  3465   002ADC  0E96               	movlw	150
  3466   002ADE  6E0B               	movwf	___xxtofl@exp^0,c
  3467   002AE0  EF78  F015         	goto	l4385
  3468   002AE4                     l4383:
  3469   002AE4  2A0B               	incf	___xxtofl@exp^0,f,c
  3470   002AE6  90D8               	bcf	status,0,c
  3471   002AE8  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3472   002AEA  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3473   002AEC  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3474   002AEE  320C               	rrcf	___xxtofl@arg^0,f,c
  3475   002AF0                     l4385:
  3476   002AF0  0E00               	movlw	0
  3477   002AF2  140C               	andwf	___xxtofl@arg^0,w,c
  3478   002AF4  6E06               	movwf	??___xxtofl^0,c
  3479   002AF6  0E00               	movlw	0
  3480   002AF8  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3481   002AFA  6E07               	movwf	(??___xxtofl+1)^0,c
  3482   002AFC  0E00               	movlw	0
  3483   002AFE  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3484   002B00  6E08               	movwf	(??___xxtofl+2)^0,c
  3485   002B02  0EFE               	movlw	254
  3486   002B04  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3487   002B06  6E09               	movwf	(??___xxtofl+3)^0,c
  3488   002B08  5006               	movf	??___xxtofl^0,w,c
  3489   002B0A  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3490   002B0C  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3491   002B0E  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3492   002B10  A4D8               	btfss	status,2,c
  3493   002B12  EF8D  F015         	goto	u3841
  3494   002B16  EF8F  F015         	goto	u3840
  3495   002B1A                     u3841:
  3496   002B1A  EF72  F015         	goto	l4383
  3497   002B1E                     u3840:
  3498   002B1E  EF9D  F015         	goto	l1331
  3499   002B22                     l4387:
  3500   002B22  2A0B               	incf	___xxtofl@exp^0,f,c
  3501   002B24  0E01               	movlw	1
  3502   002B26  260C               	addwf	___xxtofl@arg^0,f,c
  3503   002B28  0E00               	movlw	0
  3504   002B2A  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3505   002B2C  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3506   002B2E  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3507   002B30  90D8               	bcf	status,0,c
  3508   002B32  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3509   002B34  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3510   002B36  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3511   002B38  320C               	rrcf	___xxtofl@arg^0,f,c
  3512   002B3A                     l1331:
  3513   002B3A  0E00               	movlw	0
  3514   002B3C  140C               	andwf	___xxtofl@arg^0,w,c
  3515   002B3E  6E06               	movwf	??___xxtofl^0,c
  3516   002B40  0E00               	movlw	0
  3517   002B42  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3518   002B44  6E07               	movwf	(??___xxtofl+1)^0,c
  3519   002B46  0E00               	movlw	0
  3520   002B48  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3521   002B4A  6E08               	movwf	(??___xxtofl+2)^0,c
  3522   002B4C  0EFF               	movlw	255
  3523   002B4E  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3524   002B50  6E09               	movwf	(??___xxtofl+3)^0,c
  3525   002B52  5006               	movf	??___xxtofl^0,w,c
  3526   002B54  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3527   002B56  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3528   002B58  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3529   002B5A  A4D8               	btfss	status,2,c
  3530   002B5C  EFB2  F015         	goto	u3851
  3531   002B60  EFB4  F015         	goto	u3850
  3532   002B64                     u3851:
  3533   002B64  EF91  F015         	goto	l4387
  3534   002B68                     u3850:
  3535   002B68  EFBC  F015         	goto	l4395
  3536   002B6C                     l4393:
  3537   002B6C  060B               	decf	___xxtofl@exp^0,f,c
  3538   002B6E  90D8               	bcf	status,0,c
  3539   002B70  360C               	rlcf	___xxtofl@arg^0,f,c
  3540   002B72  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3541   002B74  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3542   002B76  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3543   002B78                     l4395:
  3544   002B78  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3545   002B7A  EFC1  F015         	goto	u3861
  3546   002B7E  EFC3  F015         	goto	u3860
  3547   002B82                     u3861:
  3548   002B82  EFCB  F015         	goto	l1338
  3549   002B86                     u3860:
  3550   002B86  0E02               	movlw	2
  3551   002B88  600B               	cpfslt	___xxtofl@exp^0,c
  3552   002B8A  EFC9  F015         	goto	u3871
  3553   002B8E  EFCB  F015         	goto	u3870
  3554   002B92                     u3871:
  3555   002B92  EFB6  F015         	goto	l4393
  3556   002B96                     u3870:
  3557   002B96                     l1338:
  3558   002B96  B00B               	btfsc	___xxtofl@exp^0,0,c
  3559   002B98  EFD0  F015         	goto	u3881
  3560   002B9C  EFD2  F015         	goto	u3880
  3561   002BA0                     u3881:
  3562   002BA0  EFD3  F015         	goto	l4401
  3563   002BA4                     u3880:
  3564   002BA4  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3565   002BA6                     l4401:
  3566   002BA6  90D8               	bcf	status,0,c
  3567   002BA8  320B               	rrcf	___xxtofl@exp^0,f,c
  3568   002BAA  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3569   002BAE  6A07               	clrf	(??___xxtofl+1)^0,c
  3570   002BB0  6A08               	clrf	(??___xxtofl+2)^0,c
  3571   002BB2  6A09               	clrf	(??___xxtofl+3)^0,c
  3572   002BB4  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3573   002BB8  6A08               	clrf	(??___xxtofl+2)^0,c
  3574   002BBA  6A07               	clrf	(??___xxtofl+1)^0,c
  3575   002BBC  6A06               	clrf	??___xxtofl^0,c
  3576   002BBE  5006               	movf	??___xxtofl^0,w,c
  3577   002BC0  120C               	iorwf	___xxtofl@arg^0,f,c
  3578   002BC2  5007               	movf	(??___xxtofl+1)^0,w,c
  3579   002BC4  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3580   002BC6  5008               	movf	(??___xxtofl+2)^0,w,c
  3581   002BC8  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3582   002BCA  5009               	movf	(??___xxtofl+3)^0,w,c
  3583   002BCC  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3584   002BCE  500A               	movf	___xxtofl@sign^0,w,c
  3585   002BD0  B4D8               	btfsc	status,2,c
  3586   002BD2  EFED  F015         	goto	u3891
  3587   002BD6  EFEF  F015         	goto	u3890
  3588   002BDA                     u3891:
  3589   002BDA  EFF7  F015         	goto	l4411
  3590   002BDE                     u3890:
  3591   002BDE  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3592   002BE0  EFF6  F015         	goto	u3900
  3593   002BE4  EFF4  F015         	goto	u3901
  3594   002BE8                     u3901:
  3595   002BE8  EFF7  F015         	goto	l4411
  3596   002BEC                     u3900:
  3597   002BEC  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3598   002BEE                     l4411:
  3599   002BEE  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3600   002BF2  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3601   002BF6  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3602   002BFA  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3603   002BFE                     l1327:
  3604   002BFE  0012               	return		;funcret
  3605   002C00                     __end_of___xxtofl:
  3606                           	callstack 0
  3607                           
  3608 ;; *************** function ___fltol *****************
  3609 ;; Defined at:
  3610 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  f1              4   75[COMRAM] unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  exp1            1   84[COMRAM] unsigned char 
  3615 ;;  sign1           1   83[COMRAM] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  4   75[COMRAM] long 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3625 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3627 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3628 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3629 ;;Total ram usage:       10 bytes
  3630 ;; Hardware stack levels used: 1
  3631 ;; Hardware stack levels required when called: 1
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_convert_rgb2hue
  3636 ;;		_main
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text9
  3641   003054                     __ptext9:
  3642                           	callstack 0
  3643   003054                     ___fltol:
  3644                           	callstack 27
  3645   003054  344E               	rlcf	(___fltol@f1+2)^0,w,c
  3646   003056  344F               	rlcf	(___fltol@f1+3)^0,w,c
  3647   003058  6E55               	movwf	___fltol@exp1^0,c
  3648   00305A  5055               	movf	___fltol@exp1^0,w,c
  3649   00305C  A4D8               	btfss	status,2,c
  3650   00305E  EF33  F018         	goto	u3741
  3651   003062  EF35  F018         	goto	u3740
  3652   003066                     u3741:
  3653   003066  EF3F  F018         	goto	l4331
  3654   00306A                     u3740:
  3655   00306A                     l4327:
  3656   00306A  0E00               	movlw	0
  3657   00306C  6E4C               	movwf	?___fltol^0,c
  3658   00306E  0E00               	movlw	0
  3659   003070  6E4D               	movwf	(?___fltol+1)^0,c
  3660   003072  0E00               	movlw	0
  3661   003074  6E4E               	movwf	(?___fltol+2)^0,c
  3662   003076  0E00               	movlw	0
  3663   003078  6E4F               	movwf	(?___fltol+3)^0,c
  3664   00307A  EFAC  F018         	goto	l966
  3665   00307E                     l4331:
  3666   00307E  C04C  F050         	movff	___fltol@f1,??___fltol
  3667   003082  C04D  F051         	movff	___fltol@f1+1,??___fltol+1
  3668   003086  C04E  F052         	movff	___fltol@f1+2,??___fltol+2
  3669   00308A  C04F  F053         	movff	___fltol@f1+3,??___fltol+3
  3670   00308E  0E20               	movlw	32
  3671   003090  EF4F  F018         	goto	u3750
  3672   003094                     u3755:
  3673   003094  90D8               	bcf	status,0,c
  3674   003096  3253               	rrcf	(??___fltol+3)^0,f,c
  3675   003098  3252               	rrcf	(??___fltol+2)^0,f,c
  3676   00309A  3251               	rrcf	(??___fltol+1)^0,f,c
  3677   00309C  3250               	rrcf	??___fltol^0,f,c
  3678   00309E                     u3750:
  3679   00309E  2EE8               	decfsz	wreg,f,c
  3680   0030A0  EF4A  F018         	goto	u3755
  3681   0030A4  5050               	movf	??___fltol^0,w,c
  3682   0030A6  6E54               	movwf	___fltol@sign1^0,c
  3683   0030A8  8E4E               	bsf	(___fltol@f1+2)^0,7,c
  3684   0030AA  0EFF               	movlw	255
  3685   0030AC  164C               	andwf	___fltol@f1^0,f,c
  3686   0030AE  0EFF               	movlw	255
  3687   0030B0  164D               	andwf	(___fltol@f1+1)^0,f,c
  3688   0030B2  0EFF               	movlw	255
  3689   0030B4  164E               	andwf	(___fltol@f1+2)^0,f,c
  3690   0030B6  0E00               	movlw	0
  3691   0030B8  164F               	andwf	(___fltol@f1+3)^0,f,c
  3692   0030BA  0E96               	movlw	150
  3693   0030BC  5E55               	subwf	___fltol@exp1^0,f,c
  3694   0030BE  BE55               	btfsc	___fltol@exp1^0,7,c
  3695   0030C0  EF66  F018         	goto	u3760
  3696   0030C4  EF64  F018         	goto	u3761
  3697   0030C8                     u3761:
  3698   0030C8  EF7C  F018         	goto	l4351
  3699   0030CC                     u3760:
  3700   0030CC  5055               	movf	___fltol@exp1^0,w,c
  3701   0030CE  0A80               	xorlw	128
  3702   0030D0  0F97               	addlw	151
  3703   0030D2  B0D8               	btfsc	status,0,c
  3704   0030D4  EF6E  F018         	goto	u3771
  3705   0030D8  EF70  F018         	goto	u3770
  3706   0030DC                     u3771:
  3707   0030DC  EF72  F018         	goto	l4347
  3708   0030E0                     u3770:
  3709   0030E0  EF35  F018         	goto	l4327
  3710   0030E4                     l4347:
  3711   0030E4  90D8               	bcf	status,0,c
  3712   0030E6  324F               	rrcf	(___fltol@f1+3)^0,f,c
  3713   0030E8  324E               	rrcf	(___fltol@f1+2)^0,f,c
  3714   0030EA  324D               	rrcf	(___fltol@f1+1)^0,f,c
  3715   0030EC  324C               	rrcf	___fltol@f1^0,f,c
  3716   0030EE  3E55               	incfsz	___fltol@exp1^0,f,c
  3717   0030F0  EF72  F018         	goto	l4347
  3718   0030F4  EF94  F018         	goto	l4361
  3719   0030F8                     l4351:
  3720   0030F8  0E1F               	movlw	31
  3721   0030FA  6455               	cpfsgt	___fltol@exp1^0,c
  3722   0030FC  EF82  F018         	goto	u3781
  3723   003100  EF84  F018         	goto	u3780
  3724   003104                     u3781:
  3725   003104  EF8C  F018         	goto	l4359
  3726   003108                     u3780:
  3727   003108  EF35  F018         	goto	l4327
  3728   00310C                     l4357:
  3729   00310C  90D8               	bcf	status,0,c
  3730   00310E  364C               	rlcf	___fltol@f1^0,f,c
  3731   003110  364D               	rlcf	(___fltol@f1+1)^0,f,c
  3732   003112  364E               	rlcf	(___fltol@f1+2)^0,f,c
  3733   003114  364F               	rlcf	(___fltol@f1+3)^0,f,c
  3734   003116  0655               	decf	___fltol@exp1^0,f,c
  3735   003118                     l4359:
  3736   003118  5055               	movf	___fltol@exp1^0,w,c
  3737   00311A  A4D8               	btfss	status,2,c
  3738   00311C  EF92  F018         	goto	u3791
  3739   003120  EF94  F018         	goto	u3790
  3740   003124                     u3791:
  3741   003124  EF86  F018         	goto	l4357
  3742   003128                     u3790:
  3743   003128                     l4361:
  3744   003128  5054               	movf	___fltol@sign1^0,w,c
  3745   00312A  B4D8               	btfsc	status,2,c
  3746   00312C  EF9A  F018         	goto	u3801
  3747   003130  EF9C  F018         	goto	u3800
  3748   003134                     u3801:
  3749   003134  EFA4  F018         	goto	l4365
  3750   003138                     u3800:
  3751   003138  1E4F               	comf	(___fltol@f1+3)^0,f,c
  3752   00313A  1E4E               	comf	(___fltol@f1+2)^0,f,c
  3753   00313C  1E4D               	comf	(___fltol@f1+1)^0,f,c
  3754   00313E  6C4C               	negf	___fltol@f1^0,c
  3755   003140  0E00               	movlw	0
  3756   003142  224D               	addwfc	(___fltol@f1+1)^0,f,c
  3757   003144  224E               	addwfc	(___fltol@f1+2)^0,f,c
  3758   003146  224F               	addwfc	(___fltol@f1+3)^0,f,c
  3759   003148                     l4365:
  3760   003148  C04C  F04C         	movff	___fltol@f1,?___fltol
  3761   00314C  C04D  F04D         	movff	___fltol@f1+1,?___fltol+1
  3762   003150  C04E  F04E         	movff	___fltol@f1+2,?___fltol+2
  3763   003154  C04F  F04F         	movff	___fltol@f1+3,?___fltol+3
  3764   003158                     l966:
  3765   003158  0012               	return		;funcret
  3766   00315A                     __end_of___fltol:
  3767                           	callstack 0
  3768                           
  3769 ;; *************** function ___flsub *****************
  3770 ;; Defined at:
  3771 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  b               4   17[COMRAM] long 
  3774 ;;  a               4   21[COMRAM] long 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  4   17[COMRAM] long 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3786 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;Total ram usage:        8 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 2
  3793 ;; This function calls:
  3794 ;;		___fladd
  3795 ;; This function is called by:
  3796 ;;		_convert_rgb2hue
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text10
  3802   00404E                     __ptext10:
  3803                           	callstack 0
  3804   00404E                     ___flsub:
  3805                           	callstack 26
  3806   00404E  0E00               	movlw	0
  3807   004050  1A16               	xorwf	___flsub@a^0,f,c
  3808   004052  0E00               	movlw	0
  3809   004054  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3810   004056  0E00               	movlw	0
  3811   004058  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3812   00405A  0E80               	movlw	128
  3813   00405C  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3814   00405E  C012  F002         	movff	___flsub@b,___fladd@b
  3815   004062  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3816   004066  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3817   00406A  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3818   00406E  C016  F006         	movff	___flsub@a,___fladd@a
  3819   004072  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3820   004076  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3821   00407A  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3822   00407E  EC2F  F00B         	call	___fladd	;wreg free
  3823   004082  C002  F012         	movff	?___fladd,?___flsub
  3824   004086  C003  F013         	movff	?___fladd+1,?___flsub+1
  3825   00408A  C004  F014         	movff	?___fladd+2,?___flsub+2
  3826   00408E  C005  F015         	movff	?___fladd+3,?___flsub+3
  3827   004092  0012               	return		;funcret
  3828   004094                     __end_of___flsub:
  3829                           	callstack 0
  3830                           
  3831 ;; *************** function ___fladd *****************
  3832 ;; Defined at:
  3833 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  b               4    1[COMRAM] long 
  3836 ;;  a               4    5[COMRAM] long 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  grs             1   16[COMRAM] unsigned char 
  3839 ;;  bexp            1   15[COMRAM] unsigned char 
  3840 ;;  aexp            1   14[COMRAM] unsigned char 
  3841 ;;  signs           1   13[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  4    1[COMRAM] unsigned char 
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3851 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3852 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3853 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3854 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3855 ;;Total ram usage:       16 bytes
  3856 ;; Hardware stack levels used: 1
  3857 ;; Hardware stack levels required when called: 1
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_convert_rgb2hue
  3862 ;;		___flsub
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text11
  3867   00165E                     __ptext11:
  3868                           	callstack 0
  3869   00165E                     ___fladd:
  3870                           	callstack 26
  3871   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  3872   001660  0B80               	andlw	128
  3873   001662  6E0E               	movwf	___fladd@signs^0,c
  3874   001664  5005               	movf	(___fladd@b+3)^0,w,c
  3875   001666  2405               	addwf	(___fladd@b+3)^0,w,c
  3876   001668  6E10               	movwf	___fladd@bexp^0,c
  3877   00166A  AE04               	btfss	(___fladd@b+2)^0,7,c
  3878   00166C  EF3A  F00B         	goto	u2781
  3879   001670  EF3C  F00B         	goto	u2780
  3880   001674                     u2781:
  3881   001674  EF3D  F00B         	goto	l3681
  3882   001678                     u2780:
  3883   001678  8010               	bsf	___fladd@bexp^0,0,c
  3884   00167A                     l3681:
  3885   00167A  5010               	movf	___fladd@bexp^0,w,c
  3886   00167C  B4D8               	btfsc	status,2,c
  3887   00167E  EF43  F00B         	goto	u2791
  3888   001682  EF45  F00B         	goto	u2790
  3889   001686                     u2791:
  3890   001686  EF5A  F00B         	goto	l3691
  3891   00168A                     u2790:
  3892   00168A  2810               	incf	___fladd@bexp^0,w,c
  3893   00168C  A4D8               	btfss	status,2,c
  3894   00168E  EF4B  F00B         	goto	u2801
  3895   001692  EF4D  F00B         	goto	u2800
  3896   001696                     u2801:
  3897   001696  EF55  F00B         	goto	l3687
  3898   00169A                     u2800:
  3899   00169A  0E00               	movlw	0
  3900   00169C  6E02               	movwf	___fladd@b^0,c
  3901   00169E  0E00               	movlw	0
  3902   0016A0  6E03               	movwf	(___fladd@b+1)^0,c
  3903   0016A2  0E00               	movlw	0
  3904   0016A4  6E04               	movwf	(___fladd@b+2)^0,c
  3905   0016A6  0E00               	movlw	0
  3906   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  3907   0016AA                     l3687:
  3908   0016AA  8E04               	bsf	(___fladd@b+2)^0,7,c
  3909   0016AC  0E00               	movlw	0
  3910   0016AE  6E05               	movwf	(___fladd@b+3)^0,c
  3911   0016B0  EF62  F00B         	goto	l3693
  3912   0016B4                     l3691:
  3913   0016B4  0E00               	movlw	0
  3914   0016B6  6E02               	movwf	___fladd@b^0,c
  3915   0016B8  0E00               	movlw	0
  3916   0016BA  6E03               	movwf	(___fladd@b+1)^0,c
  3917   0016BC  0E00               	movlw	0
  3918   0016BE  6E04               	movwf	(___fladd@b+2)^0,c
  3919   0016C0  0E00               	movlw	0
  3920   0016C2  6E05               	movwf	(___fladd@b+3)^0,c
  3921   0016C4                     l3693:
  3922   0016C4  5009               	movf	(___fladd@a+3)^0,w,c
  3923   0016C6  0B80               	andlw	128
  3924   0016C8  6E0F               	movwf	___fladd@aexp^0,c
  3925   0016CA  500E               	movf	___fladd@signs^0,w,c
  3926   0016CC  180F               	xorwf	___fladd@aexp^0,w,c
  3927   0016CE  B4D8               	btfsc	status,2,c
  3928   0016D0  EF6C  F00B         	goto	u2811
  3929   0016D4  EF6E  F00B         	goto	u2810
  3930   0016D8                     u2811:
  3931   0016D8  EF6F  F00B         	goto	l3699
  3932   0016DC                     u2810:
  3933   0016DC  8C0E               	bsf	___fladd@signs^0,6,c
  3934   0016DE                     l3699:
  3935   0016DE  5009               	movf	(___fladd@a+3)^0,w,c
  3936   0016E0  2409               	addwf	(___fladd@a+3)^0,w,c
  3937   0016E2  6E0F               	movwf	___fladd@aexp^0,c
  3938   0016E4  AE08               	btfss	(___fladd@a+2)^0,7,c
  3939   0016E6  EF77  F00B         	goto	u2821
  3940   0016EA  EF79  F00B         	goto	u2820
  3941   0016EE                     u2821:
  3942   0016EE  EF7A  F00B         	goto	l3705
  3943   0016F2                     u2820:
  3944   0016F2  800F               	bsf	___fladd@aexp^0,0,c
  3945   0016F4                     l3705:
  3946   0016F4  500F               	movf	___fladd@aexp^0,w,c
  3947   0016F6  B4D8               	btfsc	status,2,c
  3948   0016F8  EF80  F00B         	goto	u2831
  3949   0016FC  EF82  F00B         	goto	u2830
  3950   001700                     u2831:
  3951   001700  EF97  F00B         	goto	l3715
  3952   001704                     u2830:
  3953   001704  280F               	incf	___fladd@aexp^0,w,c
  3954   001706  A4D8               	btfss	status,2,c
  3955   001708  EF88  F00B         	goto	u2841
  3956   00170C  EF8A  F00B         	goto	u2840
  3957   001710                     u2841:
  3958   001710  EF92  F00B         	goto	l3711
  3959   001714                     u2840:
  3960   001714  0E00               	movlw	0
  3961   001716  6E06               	movwf	___fladd@a^0,c
  3962   001718  0E00               	movlw	0
  3963   00171A  6E07               	movwf	(___fladd@a+1)^0,c
  3964   00171C  0E00               	movlw	0
  3965   00171E  6E08               	movwf	(___fladd@a+2)^0,c
  3966   001720  0E00               	movlw	0
  3967   001722  6E09               	movwf	(___fladd@a+3)^0,c
  3968   001724                     l3711:
  3969   001724  8E08               	bsf	(___fladd@a+2)^0,7,c
  3970   001726  0E00               	movlw	0
  3971   001728  6E09               	movwf	(___fladd@a+3)^0,c
  3972   00172A  EF9F  F00B         	goto	l3717
  3973   00172E                     l3715:
  3974   00172E  0E00               	movlw	0
  3975   001730  6E06               	movwf	___fladd@a^0,c
  3976   001732  0E00               	movlw	0
  3977   001734  6E07               	movwf	(___fladd@a+1)^0,c
  3978   001736  0E00               	movlw	0
  3979   001738  6E08               	movwf	(___fladd@a+2)^0,c
  3980   00173A  0E00               	movlw	0
  3981   00173C  6E09               	movwf	(___fladd@a+3)^0,c
  3982   00173E                     l3717:
  3983   00173E  5010               	movf	___fladd@bexp^0,w,c
  3984   001740  5C0F               	subwf	___fladd@aexp^0,w,c
  3985   001742  B0D8               	btfsc	status,0,c
  3986   001744  EFA6  F00B         	goto	u2851
  3987   001748  EFA8  F00B         	goto	u2850
  3988   00174C                     u2851:
  3989   00174C  EFCF  F00B         	goto	l3753
  3990   001750                     u2850:
  3991   001750  AC0E               	btfss	___fladd@signs^0,6,c
  3992   001752  EFAD  F00B         	goto	u2861
  3993   001756  EFAF  F00B         	goto	u2860
  3994   00175A                     u2861:
  3995   00175A  EFB1  F00B         	goto	l3723
  3996   00175E                     u2860:
  3997   00175E  0E80               	movlw	128
  3998   001760  1A0E               	xorwf	___fladd@signs^0,f,c
  3999   001762                     l3723:
  4000   001762  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4001   001766  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4002   00176A  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4003   00176E  C002  F011         	movff	___fladd@b,___fladd@grs
  4004   001772  C006  F002         	movff	___fladd@a,___fladd@b
  4005   001776  C011  F006         	movff	___fladd@grs,___fladd@a
  4006   00177A  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4007   00177E  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4008   001782  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4009   001786  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4010   00178A  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4011   00178E  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4012   001792  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4013   001796  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4014   00179A  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4015   00179E                     l3753:
  4016   00179E  0E00               	movlw	0
  4017   0017A0  6E11               	movwf	___fladd@grs^0,c
  4018   0017A2  5010               	movf	___fladd@bexp^0,w,c
  4019   0017A4  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4020   0017A8  6A0B               	clrf	(??___fladd+1)^0,c
  4021   0017AA  5E0A               	subwf	??___fladd^0,f,c
  4022   0017AC  0E00               	movlw	0
  4023   0017AE  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4024   0017B0  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4025   0017B2  EFE4  F00B         	goto	u2871
  4026   0017B6  500B               	movf	(??___fladd+1)^0,w,c
  4027   0017B8  E109               	bnz	u2870
  4028   0017BA  0E1A               	movlw	26
  4029   0017BC  5C0A               	subwf	??___fladd^0,w,c
  4030   0017BE  A0D8               	btfss	status,0,c
  4031   0017C0  EFE4  F00B         	goto	u2871
  4032   0017C4  EFE6  F00B         	goto	u2870
  4033   0017C8                     u2871:
  4034   0017C8  EF1D  F00C         	goto	l1198
  4035   0017CC                     u2870:
  4036   0017CC  5002               	movf	___fladd@b^0,w,c
  4037   0017CE  1003               	iorwf	(___fladd@b+1)^0,w,c
  4038   0017D0  1004               	iorwf	(___fladd@b+2)^0,w,c
  4039   0017D2  1005               	iorwf	(___fladd@b+3)^0,w,c
  4040   0017D4  A4D8               	btfss	status,2,c
  4041   0017D6  EFEF  F00B         	goto	u2881
  4042   0017DA  EFF2  F00B         	goto	u2880
  4043   0017DE                     u2881:
  4044   0017DE  0E01               	movlw	1
  4045   0017E0  EFF3  F00B         	goto	u2890
  4046   0017E4                     u2880:
  4047   0017E4  0E00               	movlw	0
  4048   0017E6                     u2890:
  4049   0017E6  6E11               	movwf	___fladd@grs^0,c
  4050   0017E8  0E00               	movlw	0
  4051   0017EA  6E02               	movwf	___fladd@b^0,c
  4052   0017EC  0E00               	movlw	0
  4053   0017EE  6E03               	movwf	(___fladd@b+1)^0,c
  4054   0017F0  0E00               	movlw	0
  4055   0017F2  6E04               	movwf	(___fladd@b+2)^0,c
  4056   0017F4  0E00               	movlw	0
  4057   0017F6  6E05               	movwf	(___fladd@b+3)^0,c
  4058   0017F8  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4059   0017FC  EF26  F00C         	goto	l1197
  4060   001800                     l1199:
  4061   001800  A011               	btfss	___fladd@grs^0,0,c
  4062   001802  EF05  F00C         	goto	u2901
  4063   001806  EF07  F00C         	goto	u2900
  4064   00180A                     u2901:
  4065   00180A  EF0D  F00C         	goto	l3765
  4066   00180E                     u2900:
  4067   00180E  90D8               	bcf	status,0,c
  4068   001810  3011               	rrcf	___fladd@grs^0,w,c
  4069   001812  0901               	iorlw	1
  4070   001814  6E11               	movwf	___fladd@grs^0,c
  4071   001816  EF0F  F00C         	goto	l3767
  4072   00181A                     l3765:
  4073   00181A  90D8               	bcf	status,0,c
  4074   00181C  3211               	rrcf	___fladd@grs^0,f,c
  4075   00181E                     l3767:
  4076   00181E  A002               	btfss	___fladd@b^0,0,c
  4077   001820  EF14  F00C         	goto	u2911
  4078   001824  EF16  F00C         	goto	u2910
  4079   001828                     u2911:
  4080   001828  EF17  F00C         	goto	l3771
  4081   00182C                     u2910:
  4082   00182C  8E11               	bsf	___fladd@grs^0,7,c
  4083   00182E                     l3771:
  4084   00182E  3405               	rlcf	(___fladd@b+3)^0,w,c
  4085   001830  3205               	rrcf	(___fladd@b+3)^0,f,c
  4086   001832  3204               	rrcf	(___fladd@b+2)^0,f,c
  4087   001834  3203               	rrcf	(___fladd@b+1)^0,f,c
  4088   001836  3202               	rrcf	___fladd@b^0,f,c
  4089   001838  2A10               	incf	___fladd@bexp^0,f,c
  4090   00183A                     l1198:
  4091   00183A  500F               	movf	___fladd@aexp^0,w,c
  4092   00183C  5C10               	subwf	___fladd@bexp^0,w,c
  4093   00183E  A0D8               	btfss	status,0,c
  4094   001840  EF24  F00C         	goto	u2921
  4095   001844  EF26  F00C         	goto	u2920
  4096   001848                     u2921:
  4097   001848  EF00  F00C         	goto	l1199
  4098   00184C                     u2920:
  4099   00184C                     l1197:
  4100   00184C  BC0E               	btfsc	___fladd@signs^0,6,c
  4101   00184E  EF2B  F00C         	goto	u2931
  4102   001852  EF2D  F00C         	goto	u2930
  4103   001856                     u2931:
  4104   001856  EF6D  F00C         	goto	l3799
  4105   00185A                     u2930:
  4106   00185A  5010               	movf	___fladd@bexp^0,w,c
  4107   00185C  A4D8               	btfss	status,2,c
  4108   00185E  EF33  F00C         	goto	u2941
  4109   001862  EF35  F00C         	goto	u2940
  4110   001866                     u2941:
  4111   001866  EF3F  F00C         	goto	l3781
  4112   00186A                     u2940:
  4113   00186A  0E00               	movlw	0
  4114   00186C  6E02               	movwf	?___fladd^0,c
  4115   00186E  0E00               	movlw	0
  4116   001870  6E03               	movwf	(?___fladd+1)^0,c
  4117   001872  0E00               	movlw	0
  4118   001874  6E04               	movwf	(?___fladd+2)^0,c
  4119   001876  0E00               	movlw	0
  4120   001878  6E05               	movwf	(?___fladd+3)^0,c
  4121   00187A  EF8E  F00D         	goto	l1206
  4122   00187E                     l3781:
  4123   00187E  5006               	movf	___fladd@a^0,w,c
  4124   001880  2602               	addwf	___fladd@b^0,f,c
  4125   001882  5007               	movf	(___fladd@a+1)^0,w,c
  4126   001884  2203               	addwfc	(___fladd@b+1)^0,f,c
  4127   001886  5008               	movf	(___fladd@a+2)^0,w,c
  4128   001888  2204               	addwfc	(___fladd@b+2)^0,f,c
  4129   00188A  5009               	movf	(___fladd@a+3)^0,w,c
  4130   00188C  2205               	addwfc	(___fladd@b+3)^0,f,c
  4131   00188E  A005               	btfss	(___fladd@b+3)^0,0,c
  4132   001890  EF4C  F00C         	goto	u2951
  4133   001894  EF4E  F00C         	goto	u2950
  4134   001898                     u2951:
  4135   001898  EFFA  F00C         	goto	l3835
  4136   00189C                     u2950:
  4137   00189C  A011               	btfss	___fladd@grs^0,0,c
  4138   00189E  EF53  F00C         	goto	u2961
  4139   0018A2  EF55  F00C         	goto	u2960
  4140   0018A6                     u2961:
  4141   0018A6  EF5B  F00C         	goto	l3789
  4142   0018AA                     u2960:
  4143   0018AA  90D8               	bcf	status,0,c
  4144   0018AC  3011               	rrcf	___fladd@grs^0,w,c
  4145   0018AE  0901               	iorlw	1
  4146   0018B0  6E11               	movwf	___fladd@grs^0,c
  4147   0018B2  EF5D  F00C         	goto	l3791
  4148   0018B6                     l3789:
  4149   0018B6  90D8               	bcf	status,0,c
  4150   0018B8  3211               	rrcf	___fladd@grs^0,f,c
  4151   0018BA                     l3791:
  4152   0018BA  A002               	btfss	___fladd@b^0,0,c
  4153   0018BC  EF62  F00C         	goto	u2971
  4154   0018C0  EF64  F00C         	goto	u2970
  4155   0018C4                     u2971:
  4156   0018C4  EF65  F00C         	goto	l3795
  4157   0018C8                     u2970:
  4158   0018C8  8E11               	bsf	___fladd@grs^0,7,c
  4159   0018CA                     l3795:
  4160   0018CA  3405               	rlcf	(___fladd@b+3)^0,w,c
  4161   0018CC  3205               	rrcf	(___fladd@b+3)^0,f,c
  4162   0018CE  3204               	rrcf	(___fladd@b+2)^0,f,c
  4163   0018D0  3203               	rrcf	(___fladd@b+1)^0,f,c
  4164   0018D2  3202               	rrcf	___fladd@b^0,f,c
  4165   0018D4  2A10               	incf	___fladd@bexp^0,f,c
  4166   0018D6  EFFA  F00C         	goto	l3835
  4167   0018DA                     l3799:
  4168   0018DA  5006               	movf	___fladd@a^0,w,c
  4169   0018DC  5C02               	subwf	___fladd@b^0,w,c
  4170   0018DE  5007               	movf	(___fladd@a+1)^0,w,c
  4171   0018E0  5803               	subwfb	(___fladd@b+1)^0,w,c
  4172   0018E2  5008               	movf	(___fladd@a+2)^0,w,c
  4173   0018E4  5804               	subwfb	(___fladd@b+2)^0,w,c
  4174   0018E6  5005               	movf	(___fladd@b+3)^0,w,c
  4175   0018E8  0A80               	xorlw	128
  4176   0018EA  6E0A               	movwf	??___fladd^0,c
  4177   0018EC  5009               	movf	(___fladd@a+3)^0,w,c
  4178   0018EE  0A80               	xorlw	128
  4179   0018F0  580A               	subwfb	??___fladd^0,w,c
  4180   0018F2  B0D8               	btfsc	status,0,c
  4181   0018F4  EF7E  F00C         	goto	u2981
  4182   0018F8  EF80  F00C         	goto	u2980
  4183   0018FC                     u2981:
  4184   0018FC  EFAB  F00C         	goto	l3809
  4185   001900                     u2980:
  4186   001900  5002               	movf	___fladd@b^0,w,c
  4187   001902  5C06               	subwf	___fladd@a^0,w,c
  4188   001904  6E0A               	movwf	??___fladd^0,c
  4189   001906  5003               	movf	(___fladd@b+1)^0,w,c
  4190   001908  5807               	subwfb	(___fladd@a+1)^0,w,c
  4191   00190A  6E0B               	movwf	(??___fladd+1)^0,c
  4192   00190C  5004               	movf	(___fladd@b+2)^0,w,c
  4193   00190E  5808               	subwfb	(___fladd@a+2)^0,w,c
  4194   001910  6E0C               	movwf	(??___fladd+2)^0,c
  4195   001912  5005               	movf	(___fladd@b+3)^0,w,c
  4196   001914  5809               	subwfb	(___fladd@a+3)^0,w,c
  4197   001916  6E0D               	movwf	(??___fladd+3)^0,c
  4198   001918  0EFF               	movlw	255
  4199   00191A  240A               	addwf	??___fladd^0,w,c
  4200   00191C  6E02               	movwf	___fladd@b^0,c
  4201   00191E  0EFF               	movlw	255
  4202   001920  200B               	addwfc	(??___fladd+1)^0,w,c
  4203   001922  6E03               	movwf	(___fladd@b+1)^0,c
  4204   001924  0EFF               	movlw	255
  4205   001926  200C               	addwfc	(??___fladd+2)^0,w,c
  4206   001928  6E04               	movwf	(___fladd@b+2)^0,c
  4207   00192A  0EFF               	movlw	255
  4208   00192C  200D               	addwfc	(??___fladd+3)^0,w,c
  4209   00192E  6E05               	movwf	(___fladd@b+3)^0,c
  4210   001930  0E80               	movlw	128
  4211   001932  1A0E               	xorwf	___fladd@signs^0,f,c
  4212   001934  6C11               	negf	___fladd@grs^0,c
  4213   001936  5011               	movf	___fladd@grs^0,w,c
  4214   001938  A4D8               	btfss	status,2,c
  4215   00193A  EFA1  F00C         	goto	u2991
  4216   00193E  EFA3  F00C         	goto	u2990
  4217   001942                     u2991:
  4218   001942  EFB3  F00C         	goto	l1214
  4219   001946                     u2990:
  4220   001946  0E01               	movlw	1
  4221   001948  2602               	addwf	___fladd@b^0,f,c
  4222   00194A  0E00               	movlw	0
  4223   00194C  2203               	addwfc	(___fladd@b+1)^0,f,c
  4224   00194E  2204               	addwfc	(___fladd@b+2)^0,f,c
  4225   001950  2205               	addwfc	(___fladd@b+3)^0,f,c
  4226   001952  EFB3  F00C         	goto	l1214
  4227   001956                     l3809:
  4228   001956  5006               	movf	___fladd@a^0,w,c
  4229   001958  5E02               	subwf	___fladd@b^0,f,c
  4230   00195A  5007               	movf	(___fladd@a+1)^0,w,c
  4231   00195C  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4232   00195E  5008               	movf	(___fladd@a+2)^0,w,c
  4233   001960  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4234   001962  5009               	movf	(___fladd@a+3)^0,w,c
  4235   001964  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4236   001966                     l1214:
  4237   001966  5002               	movf	___fladd@b^0,w,c
  4238   001968  1003               	iorwf	(___fladd@b+1)^0,w,c
  4239   00196A  1004               	iorwf	(___fladd@b+2)^0,w,c
  4240   00196C  1005               	iorwf	(___fladd@b+3)^0,w,c
  4241   00196E  A4D8               	btfss	status,2,c
  4242   001970  EFBC  F00C         	goto	u3001
  4243   001974  EFBE  F00C         	goto	u3000
  4244   001978                     u3001:
  4245   001978  EFF3  F00C         	goto	l3833
  4246   00197C                     u3000:
  4247   00197C  5011               	movf	___fladd@grs^0,w,c
  4248   00197E  A4D8               	btfss	status,2,c
  4249   001980  EFC4  F00C         	goto	u3011
  4250   001984  EFC6  F00C         	goto	u3010
  4251   001988                     u3011:
  4252   001988  EFF3  F00C         	goto	l3833
  4253   00198C                     u3010:
  4254   00198C  0E00               	movlw	0
  4255   00198E  6E02               	movwf	?___fladd^0,c
  4256   001990  0E00               	movlw	0
  4257   001992  6E03               	movwf	(?___fladd+1)^0,c
  4258   001994  0E00               	movlw	0
  4259   001996  6E04               	movwf	(?___fladd+2)^0,c
  4260   001998  0E00               	movlw	0
  4261   00199A  6E05               	movwf	(?___fladd+3)^0,c
  4262   00199C  EF8E  F00D         	goto	l1206
  4263   0019A0                     l3817:
  4264   0019A0  90D8               	bcf	status,0,c
  4265   0019A2  3602               	rlcf	___fladd@b^0,f,c
  4266   0019A4  3603               	rlcf	(___fladd@b+1)^0,f,c
  4267   0019A6  3604               	rlcf	(___fladd@b+2)^0,f,c
  4268   0019A8  3605               	rlcf	(___fladd@b+3)^0,f,c
  4269   0019AA  AE11               	btfss	___fladd@grs^0,7,c
  4270   0019AC  EFDA  F00C         	goto	u3021
  4271   0019B0  EFDC  F00C         	goto	u3020
  4272   0019B4                     u3021:
  4273   0019B4  EFDD  F00C         	goto	l3823
  4274   0019B8                     u3020:
  4275   0019B8  8002               	bsf	___fladd@b^0,0,c
  4276   0019BA                     l3823:
  4277   0019BA  A011               	btfss	___fladd@grs^0,0,c
  4278   0019BC  EFE2  F00C         	goto	u3031
  4279   0019C0  EFE4  F00C         	goto	u3030
  4280   0019C4                     u3031:
  4281   0019C4  EFE8  F00C         	goto	l3827
  4282   0019C8                     u3030:
  4283   0019C8  80D8               	bsf	status,0,c
  4284   0019CA  3611               	rlcf	___fladd@grs^0,f,c
  4285   0019CC  EFEA  F00C         	goto	l3829
  4286   0019D0                     l3827:
  4287   0019D0  90D8               	bcf	status,0,c
  4288   0019D2  3611               	rlcf	___fladd@grs^0,f,c
  4289   0019D4                     l3829:
  4290   0019D4  5010               	movf	___fladd@bexp^0,w,c
  4291   0019D6  B4D8               	btfsc	status,2,c
  4292   0019D8  EFF0  F00C         	goto	u3041
  4293   0019DC  EFF2  F00C         	goto	u3040
  4294   0019E0                     u3041:
  4295   0019E0  EFF3  F00C         	goto	l3833
  4296   0019E4                     u3040:
  4297   0019E4  0610               	decf	___fladd@bexp^0,f,c
  4298   0019E6                     l3833:
  4299   0019E6  AE04               	btfss	(___fladd@b+2)^0,7,c
  4300   0019E8  EFF8  F00C         	goto	u3051
  4301   0019EC  EFFA  F00C         	goto	u3050
  4302   0019F0                     u3051:
  4303   0019F0  EFD0  F00C         	goto	l3817
  4304   0019F4                     u3050:
  4305   0019F4                     l3835:
  4306   0019F4  0E00               	movlw	0
  4307   0019F6  6E0F               	movwf	___fladd@aexp^0,c
  4308   0019F8  AE11               	btfss	___fladd@grs^0,7,c
  4309   0019FA  EF01  F00D         	goto	u3061
  4310   0019FE  EF03  F00D         	goto	u3060
  4311   001A02                     u3061:
  4312   001A02  EF1B  F00D         	goto	l1223
  4313   001A06                     u3060:
  4314   001A06  C011  F00A         	movff	___fladd@grs,??___fladd
  4315   001A0A  0E7F               	movlw	127
  4316   001A0C  160A               	andwf	??___fladd^0,f,c
  4317   001A0E  B4D8               	btfsc	status,2,c
  4318   001A10  EF0C  F00D         	goto	u3071
  4319   001A14  EF0E  F00D         	goto	u3070
  4320   001A18                     u3071:
  4321   001A18  EF12  F00D         	goto	l1224
  4322   001A1C                     u3070:
  4323   001A1C                     l3841:
  4324   001A1C  0E01               	movlw	1
  4325   001A1E  6E0F               	movwf	___fladd@aexp^0,c
  4326   001A20  EF1B  F00D         	goto	l1223
  4327   001A24                     l1224:
  4328   001A24  A002               	btfss	___fladd@b^0,0,c
  4329   001A26  EF17  F00D         	goto	u3081
  4330   001A2A  EF19  F00D         	goto	u3080
  4331   001A2E                     u3081:
  4332   001A2E  EF1B  F00D         	goto	l1223
  4333   001A32                     u3080:
  4334   001A32  EF0E  F00D         	goto	l3841
  4335   001A36                     l1223:
  4336   001A36  500F               	movf	___fladd@aexp^0,w,c
  4337   001A38  B4D8               	btfsc	status,2,c
  4338   001A3A  EF21  F00D         	goto	u3091
  4339   001A3E  EF23  F00D         	goto	u3090
  4340   001A42                     u3091:
  4341   001A42  EF4E  F00D         	goto	l3853
  4342   001A46                     u3090:
  4343   001A46  0E01               	movlw	1
  4344   001A48  2602               	addwf	___fladd@b^0,f,c
  4345   001A4A  0E00               	movlw	0
  4346   001A4C  2203               	addwfc	(___fladd@b+1)^0,f,c
  4347   001A4E  2204               	addwfc	(___fladd@b+2)^0,f,c
  4348   001A50  2205               	addwfc	(___fladd@b+3)^0,f,c
  4349   001A52  A005               	btfss	(___fladd@b+3)^0,0,c
  4350   001A54  EF2E  F00D         	goto	u3101
  4351   001A58  EF30  F00D         	goto	u3100
  4352   001A5C                     u3101:
  4353   001A5C  EF4E  F00D         	goto	l3853
  4354   001A60                     u3100:
  4355   001A60  C002  F00A         	movff	___fladd@b,??___fladd
  4356   001A64  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4357   001A68  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4358   001A6C  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4359   001A70  340D               	rlcf	(??___fladd+3)^0,w,c
  4360   001A72  320D               	rrcf	(??___fladd+3)^0,f,c
  4361   001A74  320C               	rrcf	(??___fladd+2)^0,f,c
  4362   001A76  320B               	rrcf	(??___fladd+1)^0,f,c
  4363   001A78  320A               	rrcf	??___fladd^0,f,c
  4364   001A7A  C00A  F002         	movff	??___fladd,___fladd@b
  4365   001A7E  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4366   001A82  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4367   001A86  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4368   001A8A  2810               	incf	___fladd@bexp^0,w,c
  4369   001A8C  B4D8               	btfsc	status,2,c
  4370   001A8E  EF4B  F00D         	goto	u3111
  4371   001A92  EF4D  F00D         	goto	u3110
  4372   001A96                     u3111:
  4373   001A96  EF4E  F00D         	goto	l3853
  4374   001A9A                     u3110:
  4375   001A9A  2A10               	incf	___fladd@bexp^0,f,c
  4376   001A9C                     l3853:
  4377   001A9C  2810               	incf	___fladd@bexp^0,w,c
  4378   001A9E  B4D8               	btfsc	status,2,c
  4379   001AA0  EF54  F00D         	goto	u3121
  4380   001AA4  EF56  F00D         	goto	u3120
  4381   001AA8                     u3121:
  4382   001AA8  EF5E  F00D         	goto	l3857
  4383   001AAC                     u3120:
  4384   001AAC  5010               	movf	___fladd@bexp^0,w,c
  4385   001AAE  A4D8               	btfss	status,2,c
  4386   001AB0  EF5C  F00D         	goto	u3131
  4387   001AB4  EF5E  F00D         	goto	u3130
  4388   001AB8                     u3131:
  4389   001AB8  EF70  F00D         	goto	l3861
  4390   001ABC                     u3130:
  4391   001ABC                     l3857:
  4392   001ABC  0E00               	movlw	0
  4393   001ABE  6E02               	movwf	___fladd@b^0,c
  4394   001AC0  0E00               	movlw	0
  4395   001AC2  6E03               	movwf	(___fladd@b+1)^0,c
  4396   001AC4  0E00               	movlw	0
  4397   001AC6  6E04               	movwf	(___fladd@b+2)^0,c
  4398   001AC8  0E00               	movlw	0
  4399   001ACA  6E05               	movwf	(___fladd@b+3)^0,c
  4400   001ACC  5010               	movf	___fladd@bexp^0,w,c
  4401   001ACE  A4D8               	btfss	status,2,c
  4402   001AD0  EF6C  F00D         	goto	u3141
  4403   001AD4  EF6E  F00D         	goto	u3140
  4404   001AD8                     u3141:
  4405   001AD8  EF70  F00D         	goto	l3861
  4406   001ADC                     u3140:
  4407   001ADC  0E00               	movlw	0
  4408   001ADE  6E0E               	movwf	___fladd@signs^0,c
  4409   001AE0                     l3861:
  4410   001AE0  A010               	btfss	___fladd@bexp^0,0,c
  4411   001AE2  EF75  F00D         	goto	u3151
  4412   001AE6  EF77  F00D         	goto	u3150
  4413   001AEA                     u3151:
  4414   001AEA  EF7A  F00D         	goto	l3865
  4415   001AEE                     u3150:
  4416   001AEE  8E04               	bsf	(___fladd@b+2)^0,7,c
  4417   001AF0  EF7B  F00D         	goto	l3867
  4418   001AF4                     l3865:
  4419   001AF4  9E04               	bcf	(___fladd@b+2)^0,7,c
  4420   001AF6                     l3867:
  4421   001AF6  90D8               	bcf	status,0,c
  4422   001AF8  3010               	rrcf	___fladd@bexp^0,w,c
  4423   001AFA  6E05               	movwf	(___fladd@b+3)^0,c
  4424   001AFC  AE0E               	btfss	___fladd@signs^0,7,c
  4425   001AFE  EF83  F00D         	goto	u3161
  4426   001B02  EF85  F00D         	goto	u3160
  4427   001B06                     u3161:
  4428   001B06  EF86  F00D         	goto	l3873
  4429   001B0A                     u3160:
  4430   001B0A  8E05               	bsf	(___fladd@b+3)^0,7,c
  4431   001B0C                     l3873:
  4432   001B0C  C002  F002         	movff	___fladd@b,?___fladd
  4433   001B10  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4434   001B14  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4435   001B18  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4436   001B1C                     l1206:
  4437   001B1C  0012               	return		;funcret
  4438   001B1E                     __end_of___fladd:
  4439                           	callstack 0
  4440                           
  4441 ;; *************** function ___flmul *****************
  4442 ;; Defined at:
  4443 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  b               4   25[COMRAM] unsigned char 
  4446 ;;  a               4   29[COMRAM] unsigned char 
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;  prod            4   44[COMRAM] struct .
  4449 ;;  grs             4   38[COMRAM] unsigned long 
  4450 ;;  temp            2   48[COMRAM] struct .
  4451 ;;  bexp            1   43[COMRAM] unsigned char 
  4452 ;;  aexp            1   42[COMRAM] unsigned char 
  4453 ;;  sign            1   37[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  4   25[COMRAM] unsigned char 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, prodl, prodh
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4463 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;Total ram usage:       25 bytes
  4468 ;; Hardware stack levels used: 1
  4469 ;; Hardware stack levels required when called: 1
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_convert_rgb2hue
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text12
  4479   001B1E                     __ptext12:
  4480                           	callstack 0
  4481   001B1E                     ___flmul:
  4482                           	callstack 27
  4483   001B1E  501D               	movf	(___flmul@b+3)^0,w,c
  4484   001B20  0B80               	andlw	128
  4485   001B22  6E26               	movwf	___flmul@sign^0,c
  4486   001B24  501D               	movf	(___flmul@b+3)^0,w,c
  4487   001B26  241D               	addwf	(___flmul@b+3)^0,w,c
  4488   001B28  6E2C               	movwf	___flmul@bexp^0,c
  4489   001B2A  AE1C               	btfss	(___flmul@b+2)^0,7,c
  4490   001B2C  EF9A  F00D         	goto	u3471
  4491   001B30  EF9C  F00D         	goto	u3470
  4492   001B34                     u3471:
  4493   001B34  EF9D  F00D         	goto	l4157
  4494   001B38                     u3470:
  4495   001B38  802C               	bsf	___flmul@bexp^0,0,c
  4496   001B3A                     l4157:
  4497   001B3A  502C               	movf	___flmul@bexp^0,w,c
  4498   001B3C  B4D8               	btfsc	status,2,c
  4499   001B3E  EFA3  F00D         	goto	u3481
  4500   001B42  EFA5  F00D         	goto	u3480
  4501   001B46                     u3481:
  4502   001B46  EFB8  F00D         	goto	l4165
  4503   001B4A                     u3480:
  4504   001B4A  282C               	incf	___flmul@bexp^0,w,c
  4505   001B4C  A4D8               	btfss	status,2,c
  4506   001B4E  EFAB  F00D         	goto	u3491
  4507   001B52  EFAD  F00D         	goto	u3490
  4508   001B56                     u3491:
  4509   001B56  EFB5  F00D         	goto	l4163
  4510   001B5A                     u3490:
  4511   001B5A  0E00               	movlw	0
  4512   001B5C  6E1A               	movwf	___flmul@b^0,c
  4513   001B5E  0E00               	movlw	0
  4514   001B60  6E1B               	movwf	(___flmul@b+1)^0,c
  4515   001B62  0E00               	movlw	0
  4516   001B64  6E1C               	movwf	(___flmul@b+2)^0,c
  4517   001B66  0E00               	movlw	0
  4518   001B68  6E1D               	movwf	(___flmul@b+3)^0,c
  4519   001B6A                     l4163:
  4520   001B6A  8E1C               	bsf	(___flmul@b+2)^0,7,c
  4521   001B6C  EFC0  F00D         	goto	l4167
  4522   001B70                     l4165:
  4523   001B70  0E00               	movlw	0
  4524   001B72  6E1A               	movwf	___flmul@b^0,c
  4525   001B74  0E00               	movlw	0
  4526   001B76  6E1B               	movwf	(___flmul@b+1)^0,c
  4527   001B78  0E00               	movlw	0
  4528   001B7A  6E1C               	movwf	(___flmul@b+2)^0,c
  4529   001B7C  0E00               	movlw	0
  4530   001B7E  6E1D               	movwf	(___flmul@b+3)^0,c
  4531   001B80                     l4167:
  4532   001B80  5021               	movf	(___flmul@a+3)^0,w,c
  4533   001B82  0B80               	andlw	128
  4534   001B84  1A26               	xorwf	___flmul@sign^0,f,c
  4535   001B86  5021               	movf	(___flmul@a+3)^0,w,c
  4536   001B88  2421               	addwf	(___flmul@a+3)^0,w,c
  4537   001B8A  6E2B               	movwf	___flmul@aexp^0,c
  4538   001B8C  AE20               	btfss	(___flmul@a+2)^0,7,c
  4539   001B8E  EFCB  F00D         	goto	u3501
  4540   001B92  EFCD  F00D         	goto	u3500
  4541   001B96                     u3501:
  4542   001B96  EFCE  F00D         	goto	l4175
  4543   001B9A                     u3500:
  4544   001B9A  802B               	bsf	___flmul@aexp^0,0,c
  4545   001B9C                     l4175:
  4546   001B9C  502B               	movf	___flmul@aexp^0,w,c
  4547   001B9E  B4D8               	btfsc	status,2,c
  4548   001BA0  EFD4  F00D         	goto	u3511
  4549   001BA4  EFD6  F00D         	goto	u3510
  4550   001BA8                     u3511:
  4551   001BA8  EFE9  F00D         	goto	l4183
  4552   001BAC                     u3510:
  4553   001BAC  282B               	incf	___flmul@aexp^0,w,c
  4554   001BAE  A4D8               	btfss	status,2,c
  4555   001BB0  EFDC  F00D         	goto	u3521
  4556   001BB4  EFDE  F00D         	goto	u3520
  4557   001BB8                     u3521:
  4558   001BB8  EFE6  F00D         	goto	l4181
  4559   001BBC                     u3520:
  4560   001BBC  0E00               	movlw	0
  4561   001BBE  6E1E               	movwf	___flmul@a^0,c
  4562   001BC0  0E00               	movlw	0
  4563   001BC2  6E1F               	movwf	(___flmul@a+1)^0,c
  4564   001BC4  0E00               	movlw	0
  4565   001BC6  6E20               	movwf	(___flmul@a+2)^0,c
  4566   001BC8  0E00               	movlw	0
  4567   001BCA  6E21               	movwf	(___flmul@a+3)^0,c
  4568   001BCC                     l4181:
  4569   001BCC  8E20               	bsf	(___flmul@a+2)^0,7,c
  4570   001BCE  EFF1  F00D         	goto	l1283
  4571   001BD2                     l4183:
  4572   001BD2  0E00               	movlw	0
  4573   001BD4  6E1E               	movwf	___flmul@a^0,c
  4574   001BD6  0E00               	movlw	0
  4575   001BD8  6E1F               	movwf	(___flmul@a+1)^0,c
  4576   001BDA  0E00               	movlw	0
  4577   001BDC  6E20               	movwf	(___flmul@a+2)^0,c
  4578   001BDE  0E00               	movlw	0
  4579   001BE0  6E21               	movwf	(___flmul@a+3)^0,c
  4580   001BE2                     l1283:
  4581   001BE2  502B               	movf	___flmul@aexp^0,w,c
  4582   001BE4  B4D8               	btfsc	status,2,c
  4583   001BE6  EFF7  F00D         	goto	u3531
  4584   001BEA  EFF9  F00D         	goto	u3530
  4585   001BEE                     u3531:
  4586   001BEE  EF01  F00E         	goto	l4187
  4587   001BF2                     u3530:
  4588   001BF2  502C               	movf	___flmul@bexp^0,w,c
  4589   001BF4  A4D8               	btfss	status,2,c
  4590   001BF6  EFFF  F00D         	goto	u3541
  4591   001BFA  EF01  F00E         	goto	u3540
  4592   001BFE                     u3541:
  4593   001BFE  EF0B  F00E         	goto	l4191
  4594   001C02                     u3540:
  4595   001C02                     l4187:
  4596   001C02  0E00               	movlw	0
  4597   001C04  6E1A               	movwf	?___flmul^0,c
  4598   001C06  0E00               	movlw	0
  4599   001C08  6E1B               	movwf	(?___flmul+1)^0,c
  4600   001C0A  0E00               	movlw	0
  4601   001C0C  6E1C               	movwf	(?___flmul+2)^0,c
  4602   001C0E  0E00               	movlw	0
  4603   001C10  6E1D               	movwf	(?___flmul+3)^0,c
  4604   001C12  EFA3  F00F         	goto	l1287
  4605   001C16                     l4191:
  4606   001C16  5020               	movf	(___flmul@a+2)^0,w,c
  4607   001C18  021A               	mulwf	___flmul@b^0,c
  4608   001C1A  CFF3 F031          	movff	prodl,___flmul@temp
  4609   001C1E  CFF4 F032          	movff	prodh,___flmul@temp+1
  4610   001C22  5031               	movf	___flmul@temp^0,w,c
  4611   001C24  6E27               	movwf	___flmul@grs^0,c
  4612   001C26  6A28               	clrf	(___flmul@grs+1)^0,c
  4613   001C28  6A29               	clrf	(___flmul@grs+2)^0,c
  4614   001C2A  6A2A               	clrf	(___flmul@grs+3)^0,c
  4615   001C2C  5032               	movf	(___flmul@temp+1)^0,w,c
  4616   001C2E  6E2D               	movwf	___flmul@prod^0,c
  4617   001C30  6A2E               	clrf	(___flmul@prod+1)^0,c
  4618   001C32  6A2F               	clrf	(___flmul@prod+2)^0,c
  4619   001C34  6A30               	clrf	(___flmul@prod+3)^0,c
  4620   001C36  501F               	movf	(___flmul@a+1)^0,w,c
  4621   001C38  021B               	mulwf	(___flmul@b+1)^0,c
  4622   001C3A  CFF3 F031          	movff	prodl,___flmul@temp
  4623   001C3E  CFF4 F032          	movff	prodh,___flmul@temp+1
  4624   001C42  5031               	movf	___flmul@temp^0,w,c
  4625   001C44  2627               	addwf	___flmul@grs^0,f,c
  4626   001C46  0E00               	movlw	0
  4627   001C48  2228               	addwfc	(___flmul@grs+1)^0,f,c
  4628   001C4A  2229               	addwfc	(___flmul@grs+2)^0,f,c
  4629   001C4C  222A               	addwfc	(___flmul@grs+3)^0,f,c
  4630   001C4E  5032               	movf	(___flmul@temp+1)^0,w,c
  4631   001C50  262D               	addwf	___flmul@prod^0,f,c
  4632   001C52  0E00               	movlw	0
  4633   001C54  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4634   001C56  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4635   001C58  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4636   001C5A  501E               	movf	___flmul@a^0,w,c
  4637   001C5C  021C               	mulwf	(___flmul@b+2)^0,c
  4638   001C5E  CFF3 F031          	movff	prodl,___flmul@temp
  4639   001C62  CFF4 F032          	movff	prodh,___flmul@temp+1
  4640   001C66  5031               	movf	___flmul@temp^0,w,c
  4641   001C68  2627               	addwf	___flmul@grs^0,f,c
  4642   001C6A  0E00               	movlw	0
  4643   001C6C  2228               	addwfc	(___flmul@grs+1)^0,f,c
  4644   001C6E  2229               	addwfc	(___flmul@grs+2)^0,f,c
  4645   001C70  222A               	addwfc	(___flmul@grs+3)^0,f,c
  4646   001C72  5032               	movf	(___flmul@temp+1)^0,w,c
  4647   001C74  262D               	addwf	___flmul@prod^0,f,c
  4648   001C76  0E00               	movlw	0
  4649   001C78  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4650   001C7A  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4651   001C7C  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4652   001C7E  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  4653   001C82  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  4654   001C86  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  4655   001C8A  6A27               	clrf	___flmul@grs^0,c
  4656   001C8C  501E               	movf	___flmul@a^0,w,c
  4657   001C8E  021B               	mulwf	(___flmul@b+1)^0,c
  4658   001C90  CFF3 F031          	movff	prodl,___flmul@temp
  4659   001C94  CFF4 F032          	movff	prodh,___flmul@temp+1
  4660   001C98  5031               	movf	___flmul@temp^0,w,c
  4661   001C9A  2627               	addwf	___flmul@grs^0,f,c
  4662   001C9C  5032               	movf	(___flmul@temp+1)^0,w,c
  4663   001C9E  2228               	addwfc	(___flmul@grs+1)^0,f,c
  4664   001CA0  0E00               	movlw	0
  4665   001CA2  2229               	addwfc	(___flmul@grs+2)^0,f,c
  4666   001CA4  0E00               	movlw	0
  4667   001CA6  222A               	addwfc	(___flmul@grs+3)^0,f,c
  4668   001CA8  501F               	movf	(___flmul@a+1)^0,w,c
  4669   001CAA  021A               	mulwf	___flmul@b^0,c
  4670   001CAC  CFF3 F031          	movff	prodl,___flmul@temp
  4671   001CB0  CFF4 F032          	movff	prodh,___flmul@temp+1
  4672   001CB4  5031               	movf	___flmul@temp^0,w,c
  4673   001CB6  2627               	addwf	___flmul@grs^0,f,c
  4674   001CB8  5032               	movf	(___flmul@temp+1)^0,w,c
  4675   001CBA  2228               	addwfc	(___flmul@grs+1)^0,f,c
  4676   001CBC  0E00               	movlw	0
  4677   001CBE  2229               	addwfc	(___flmul@grs+2)^0,f,c
  4678   001CC0  0E00               	movlw	0
  4679   001CC2  222A               	addwfc	(___flmul@grs+3)^0,f,c
  4680   001CC4  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  4681   001CC8  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  4682   001CCC  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  4683   001CD0  6A27               	clrf	___flmul@grs^0,c
  4684   001CD2  501E               	movf	___flmul@a^0,w,c
  4685   001CD4  021A               	mulwf	___flmul@b^0,c
  4686   001CD6  CFF3 F031          	movff	prodl,___flmul@temp
  4687   001CDA  CFF4 F032          	movff	prodh,___flmul@temp+1
  4688   001CDE  5031               	movf	___flmul@temp^0,w,c
  4689   001CE0  2627               	addwf	___flmul@grs^0,f,c
  4690   001CE2  5032               	movf	(___flmul@temp+1)^0,w,c
  4691   001CE4  2228               	addwfc	(___flmul@grs+1)^0,f,c
  4692   001CE6  0E00               	movlw	0
  4693   001CE8  2229               	addwfc	(___flmul@grs+2)^0,f,c
  4694   001CEA  0E00               	movlw	0
  4695   001CEC  222A               	addwfc	(___flmul@grs+3)^0,f,c
  4696   001CEE  5020               	movf	(___flmul@a+2)^0,w,c
  4697   001CF0  021B               	mulwf	(___flmul@b+1)^0,c
  4698   001CF2  CFF3 F031          	movff	prodl,___flmul@temp
  4699   001CF6  CFF4 F032          	movff	prodh,___flmul@temp+1
  4700   001CFA  5031               	movf	___flmul@temp^0,w,c
  4701   001CFC  262D               	addwf	___flmul@prod^0,f,c
  4702   001CFE  5032               	movf	(___flmul@temp+1)^0,w,c
  4703   001D00  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4704   001D02  0E00               	movlw	0
  4705   001D04  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4706   001D06  0E00               	movlw	0
  4707   001D08  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4708   001D0A  501F               	movf	(___flmul@a+1)^0,w,c
  4709   001D0C  021C               	mulwf	(___flmul@b+2)^0,c
  4710   001D0E  CFF3 F031          	movff	prodl,___flmul@temp
  4711   001D12  CFF4 F032          	movff	prodh,___flmul@temp+1
  4712   001D16  5031               	movf	___flmul@temp^0,w,c
  4713   001D18  262D               	addwf	___flmul@prod^0,f,c
  4714   001D1A  5032               	movf	(___flmul@temp+1)^0,w,c
  4715   001D1C  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4716   001D1E  0E00               	movlw	0
  4717   001D20  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4718   001D22  0E00               	movlw	0
  4719   001D24  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4720   001D26  5020               	movf	(___flmul@a+2)^0,w,c
  4721   001D28  021C               	mulwf	(___flmul@b+2)^0,c
  4722   001D2A  CFF3 F031          	movff	prodl,___flmul@temp
  4723   001D2E  CFF4 F032          	movff	prodh,___flmul@temp+1
  4724   001D32  5031               	movf	___flmul@temp^0,w,c
  4725   001D34  6E22               	movwf	??___flmul^0,c
  4726   001D36  5032               	movf	(___flmul@temp+1)^0,w,c
  4727   001D38  6E23               	movwf	(??___flmul+1)^0,c
  4728   001D3A  6A24               	clrf	(??___flmul+2)^0,c
  4729   001D3C  6A25               	clrf	(??___flmul+3)^0,c
  4730   001D3E  C024  F025         	movff	??___flmul+2,??___flmul+3
  4731   001D42  C023  F024         	movff	??___flmul+1,??___flmul+2
  4732   001D46  C022  F023         	movff	??___flmul,??___flmul+1
  4733   001D4A  6A22               	clrf	??___flmul^0,c
  4734   001D4C  5022               	movf	??___flmul^0,w,c
  4735   001D4E  262D               	addwf	___flmul@prod^0,f,c
  4736   001D50  5023               	movf	(??___flmul+1)^0,w,c
  4737   001D52  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4738   001D54  5024               	movf	(??___flmul+2)^0,w,c
  4739   001D56  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4740   001D58  5025               	movf	(??___flmul+3)^0,w,c
  4741   001D5A  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4742   001D5C  C027  F022         	movff	___flmul@grs,??___flmul
  4743   001D60  C028  F023         	movff	___flmul@grs+1,??___flmul+1
  4744   001D64  C029  F024         	movff	___flmul@grs+2,??___flmul+2
  4745   001D68  C02A  F025         	movff	___flmul@grs+3,??___flmul+3
  4746   001D6C  0E19               	movlw	25
  4747   001D6E  EFBE  F00E         	goto	u3550
  4748   001D72                     u3555:
  4749   001D72  90D8               	bcf	status,0,c
  4750   001D74  3225               	rrcf	(??___flmul+3)^0,f,c
  4751   001D76  3224               	rrcf	(??___flmul+2)^0,f,c
  4752   001D78  3223               	rrcf	(??___flmul+1)^0,f,c
  4753   001D7A  3222               	rrcf	??___flmul^0,f,c
  4754   001D7C                     u3550:
  4755   001D7C  2EE8               	decfsz	wreg,f,c
  4756   001D7E  EFB9  F00E         	goto	u3555
  4757   001D82  5022               	movf	??___flmul^0,w,c
  4758   001D84  262D               	addwf	___flmul@prod^0,f,c
  4759   001D86  5023               	movf	(??___flmul+1)^0,w,c
  4760   001D88  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4761   001D8A  5024               	movf	(??___flmul+2)^0,w,c
  4762   001D8C  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4763   001D8E  5025               	movf	(??___flmul+3)^0,w,c
  4764   001D90  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4765   001D92  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  4766   001D96  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  4767   001D9A  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  4768   001D9E  6A27               	clrf	___flmul@grs^0,c
  4769   001DA0  502B               	movf	___flmul@aexp^0,w,c
  4770   001DA2  C02C  F022         	movff	___flmul@bexp,??___flmul
  4771   001DA6  6A23               	clrf	(??___flmul+1)^0,c
  4772   001DA8  2622               	addwf	??___flmul^0,f,c
  4773   001DAA  0E00               	movlw	0
  4774   001DAC  2223               	addwfc	(??___flmul+1)^0,f,c
  4775   001DAE  0E82               	movlw	130
  4776   001DB0  2422               	addwf	??___flmul^0,w,c
  4777   001DB2  6E31               	movwf	___flmul@temp^0,c
  4778   001DB4  0EFF               	movlw	255
  4779   001DB6  2023               	addwfc	(??___flmul+1)^0,w,c
  4780   001DB8  6E32               	movwf	(___flmul@temp+1)^0,c
  4781   001DBA  EFF4  F00E         	goto	l4239
  4782   001DBE                     l4233:
  4783   001DBE  90D8               	bcf	status,0,c
  4784   001DC0  362D               	rlcf	___flmul@prod^0,f,c
  4785   001DC2  362E               	rlcf	(___flmul@prod+1)^0,f,c
  4786   001DC4  362F               	rlcf	(___flmul@prod+2)^0,f,c
  4787   001DC6  3630               	rlcf	(___flmul@prod+3)^0,f,c
  4788   001DC8  AE2A               	btfss	(___flmul@grs+3)^0,7,c
  4789   001DCA  EFE9  F00E         	goto	u3561
  4790   001DCE  EFEB  F00E         	goto	u3560
  4791   001DD2                     u3561:
  4792   001DD2  EFEC  F00E         	goto	l1290
  4793   001DD6                     u3560:
  4794   001DD6  802D               	bsf	___flmul@prod^0,0,c
  4795   001DD8                     l1290:
  4796   001DD8  90D8               	bcf	status,0,c
  4797   001DDA  3627               	rlcf	___flmul@grs^0,f,c
  4798   001DDC  3628               	rlcf	(___flmul@grs+1)^0,f,c
  4799   001DDE  3629               	rlcf	(___flmul@grs+2)^0,f,c
  4800   001DE0  362A               	rlcf	(___flmul@grs+3)^0,f,c
  4801   001DE2  0631               	decf	___flmul@temp^0,f,c
  4802   001DE4  A0D8               	btfss	status,0,c
  4803   001DE6  0632               	decf	(___flmul@temp+1)^0,f,c
  4804   001DE8                     l4239:
  4805   001DE8  AE2F               	btfss	(___flmul@prod+2)^0,7,c
  4806   001DEA  EFF9  F00E         	goto	u3571
  4807   001DEE  EFFB  F00E         	goto	u3570
  4808   001DF2                     u3571:
  4809   001DF2  EFDF  F00E         	goto	l4233
  4810   001DF6                     u3570:
  4811   001DF6  0E00               	movlw	0
  4812   001DF8  6E2B               	movwf	___flmul@aexp^0,c
  4813   001DFA  AE2A               	btfss	(___flmul@grs+3)^0,7,c
  4814   001DFC  EF02  F00F         	goto	u3581
  4815   001E00  EF04  F00F         	goto	u3580
  4816   001E04                     u3581:
  4817   001E04  EF28  F00F         	goto	l1292
  4818   001E08                     u3580:
  4819   001E08  0EFF               	movlw	255
  4820   001E0A  1427               	andwf	___flmul@grs^0,w,c
  4821   001E0C  6E22               	movwf	??___flmul^0,c
  4822   001E0E  0EFF               	movlw	255
  4823   001E10  1428               	andwf	(___flmul@grs+1)^0,w,c
  4824   001E12  6E23               	movwf	(??___flmul+1)^0,c
  4825   001E14  0EFF               	movlw	255
  4826   001E16  1429               	andwf	(___flmul@grs+2)^0,w,c
  4827   001E18  6E24               	movwf	(??___flmul+2)^0,c
  4828   001E1A  0E7F               	movlw	127
  4829   001E1C  142A               	andwf	(___flmul@grs+3)^0,w,c
  4830   001E1E  6E25               	movwf	(??___flmul+3)^0,c
  4831   001E20  5022               	movf	??___flmul^0,w,c
  4832   001E22  1023               	iorwf	(??___flmul+1)^0,w,c
  4833   001E24  1024               	iorwf	(??___flmul+2)^0,w,c
  4834   001E26  1025               	iorwf	(??___flmul+3)^0,w,c
  4835   001E28  B4D8               	btfsc	status,2,c
  4836   001E2A  EF19  F00F         	goto	u3591
  4837   001E2E  EF1B  F00F         	goto	u3590
  4838   001E32                     u3591:
  4839   001E32  EF1F  F00F         	goto	l1293
  4840   001E36                     u3590:
  4841   001E36                     l4247:
  4842   001E36  0E01               	movlw	1
  4843   001E38  6E2B               	movwf	___flmul@aexp^0,c
  4844   001E3A  EF28  F00F         	goto	l1292
  4845   001E3E                     l1293:
  4846   001E3E  A02D               	btfss	___flmul@prod^0,0,c
  4847   001E40  EF24  F00F         	goto	u3601
  4848   001E44  EF26  F00F         	goto	u3600
  4849   001E48                     u3601:
  4850   001E48  EF28  F00F         	goto	l1292
  4851   001E4C                     u3600:
  4852   001E4C  EF1B  F00F         	goto	l4247
  4853   001E50                     l1292:
  4854   001E50  502B               	movf	___flmul@aexp^0,w,c
  4855   001E52  B4D8               	btfsc	status,2,c
  4856   001E54  EF2E  F00F         	goto	u3611
  4857   001E58  EF30  F00F         	goto	u3610
  4858   001E5C                     u3611:
  4859   001E5C  EF54  F00F         	goto	l4259
  4860   001E60                     u3610:
  4861   001E60  0E01               	movlw	1
  4862   001E62  262D               	addwf	___flmul@prod^0,f,c
  4863   001E64  0E00               	movlw	0
  4864   001E66  222E               	addwfc	(___flmul@prod+1)^0,f,c
  4865   001E68  222F               	addwfc	(___flmul@prod+2)^0,f,c
  4866   001E6A  2230               	addwfc	(___flmul@prod+3)^0,f,c
  4867   001E6C  A030               	btfss	(___flmul@prod+3)^0,0,c
  4868   001E6E  EF3B  F00F         	goto	u3621
  4869   001E72  EF3D  F00F         	goto	u3620
  4870   001E76                     u3621:
  4871   001E76  EF54  F00F         	goto	l4259
  4872   001E7A                     u3620:
  4873   001E7A  C02D  F022         	movff	___flmul@prod,??___flmul
  4874   001E7E  C02E  F023         	movff	___flmul@prod+1,??___flmul+1
  4875   001E82  C02F  F024         	movff	___flmul@prod+2,??___flmul+2
  4876   001E86  C030  F025         	movff	___flmul@prod+3,??___flmul+3
  4877   001E8A  3425               	rlcf	(??___flmul+3)^0,w,c
  4878   001E8C  3225               	rrcf	(??___flmul+3)^0,f,c
  4879   001E8E  3224               	rrcf	(??___flmul+2)^0,f,c
  4880   001E90  3223               	rrcf	(??___flmul+1)^0,f,c
  4881   001E92  3222               	rrcf	??___flmul^0,f,c
  4882   001E94  C022  F02D         	movff	??___flmul,___flmul@prod
  4883   001E98  C023  F02E         	movff	??___flmul+1,___flmul@prod+1
  4884   001E9C  C024  F02F         	movff	??___flmul+2,___flmul@prod+2
  4885   001EA0  C025  F030         	movff	??___flmul+3,___flmul@prod+3
  4886   001EA4  4A31               	infsnz	___flmul@temp^0,f,c
  4887   001EA6  2A32               	incf	(___flmul@temp+1)^0,f,c
  4888   001EA8                     l4259:
  4889   001EA8  BE32               	btfsc	(___flmul@temp+1)^0,7,c
  4890   001EAA  EF5F  F00F         	goto	u3631
  4891   001EAE  5032               	movf	(___flmul@temp+1)^0,w,c
  4892   001EB0  E108               	bnz	u3630
  4893   001EB2  2831               	incf	___flmul@temp^0,w,c
  4894   001EB4  A0D8               	btfss	status,0,c
  4895   001EB6  EF5F  F00F         	goto	u3631
  4896   001EBA  EF61  F00F         	goto	u3630
  4897   001EBE                     u3631:
  4898   001EBE  EF6B  F00F         	goto	l4263
  4899   001EC2                     u3630:
  4900   001EC2  0E00               	movlw	0
  4901   001EC4  6E2D               	movwf	___flmul@prod^0,c
  4902   001EC6  0E00               	movlw	0
  4903   001EC8  6E2E               	movwf	(___flmul@prod+1)^0,c
  4904   001ECA  0E80               	movlw	128
  4905   001ECC  6E2F               	movwf	(___flmul@prod+2)^0,c
  4906   001ECE  0E7F               	movlw	127
  4907   001ED0  6E30               	movwf	(___flmul@prod+3)^0,c
  4908   001ED2  EF99  F00F         	goto	l4275
  4909   001ED6                     l4263:
  4910   001ED6  BE32               	btfsc	(___flmul@temp+1)^0,7,c
  4911   001ED8  EF78  F00F         	goto	u3640
  4912   001EDC  5032               	movf	(___flmul@temp+1)^0,w,c
  4913   001EDE  E106               	bnz	u3641
  4914   001EE0  0431               	decf	___flmul@temp^0,w,c
  4915   001EE2  B0D8               	btfsc	status,0,c
  4916   001EE4  EF76  F00F         	goto	u3641
  4917   001EE8  EF78  F00F         	goto	u3640
  4918   001EEC                     u3641:
  4919   001EEC  EF84  F00F         	goto	l1300
  4920   001EF0                     u3640:
  4921   001EF0  0E00               	movlw	0
  4922   001EF2  6E2D               	movwf	___flmul@prod^0,c
  4923   001EF4  0E00               	movlw	0
  4924   001EF6  6E2E               	movwf	(___flmul@prod+1)^0,c
  4925   001EF8  0E00               	movlw	0
  4926   001EFA  6E2F               	movwf	(___flmul@prod+2)^0,c
  4927   001EFC  0E00               	movlw	0
  4928   001EFE  6E30               	movwf	(___flmul@prod+3)^0,c
  4929   001F00  0E00               	movlw	0
  4930   001F02  6E26               	movwf	___flmul@sign^0,c
  4931   001F04  EF99  F00F         	goto	l4275
  4932   001F08                     l1300:
  4933   001F08  C031  F02C         	movff	___flmul@temp,___flmul@bexp
  4934   001F0C  0EFF               	movlw	255
  4935   001F0E  162D               	andwf	___flmul@prod^0,f,c
  4936   001F10  0EFF               	movlw	255
  4937   001F12  162E               	andwf	(___flmul@prod+1)^0,f,c
  4938   001F14  0E7F               	movlw	127
  4939   001F16  162F               	andwf	(___flmul@prod+2)^0,f,c
  4940   001F18  0E00               	movlw	0
  4941   001F1A  1630               	andwf	(___flmul@prod+3)^0,f,c
  4942   001F1C  A02C               	btfss	___flmul@bexp^0,0,c
  4943   001F1E  EF93  F00F         	goto	u3651
  4944   001F22  EF95  F00F         	goto	u3650
  4945   001F26                     u3651:
  4946   001F26  EF96  F00F         	goto	l4273
  4947   001F2A                     u3650:
  4948   001F2A  8E2F               	bsf	(___flmul@prod+2)^0,7,c
  4949   001F2C                     l4273:
  4950   001F2C  90D8               	bcf	status,0,c
  4951   001F2E  302C               	rrcf	___flmul@bexp^0,w,c
  4952   001F30  6E30               	movwf	(___flmul@prod+3)^0,c
  4953   001F32                     l4275:
  4954   001F32  5026               	movf	___flmul@sign^0,w,c
  4955   001F34  1230               	iorwf	(___flmul@prod+3)^0,f,c
  4956   001F36  C02D  F01A         	movff	___flmul@prod,?___flmul
  4957   001F3A  C02E  F01B         	movff	___flmul@prod+1,?___flmul+1
  4958   001F3E  C02F  F01C         	movff	___flmul@prod+2,?___flmul+2
  4959   001F42  C030  F01D         	movff	___flmul@prod+3,?___flmul+3
  4960   001F46                     l1287:
  4961   001F46  0012               	return		;funcret
  4962   001F48                     __end_of___flmul:
  4963                           	callstack 0
  4964                           
  4965 ;; *************** function ___flge *****************
  4966 ;; Defined at:
  4967 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  ff1             4    1[COMRAM] unsigned char 
  4970 ;;  ff2             4    5[COMRAM] unsigned char 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;		None               void
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4984 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4985 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4986 ;;Total ram usage:       12 bytes
  4987 ;; Hardware stack levels used: 1
  4988 ;; Hardware stack levels required when called: 1
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_convert_rgb2hue
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text13
  4997   00315A                     __ptext13:
  4998                           	callstack 0
  4999   00315A                     ___flge:
  5000                           	callstack 27
  5001   00315A  0E00               	movlw	0
  5002   00315C  1402               	andwf	___flge@ff1^0,w,c
  5003   00315E  6E0A               	movwf	??___flge^0,c
  5004   003160  0E00               	movlw	0
  5005   003162  1403               	andwf	(___flge@ff1+1)^0,w,c
  5006   003164  6E0B               	movwf	(??___flge+1)^0,c
  5007   003166  0E80               	movlw	128
  5008   003168  1404               	andwf	(___flge@ff1+2)^0,w,c
  5009   00316A  6E0C               	movwf	(??___flge+2)^0,c
  5010   00316C  0E7F               	movlw	127
  5011   00316E  1405               	andwf	(___flge@ff1+3)^0,w,c
  5012   003170  6E0D               	movwf	(??___flge+3)^0,c
  5013   003172  500A               	movf	??___flge^0,w,c
  5014   003174  100B               	iorwf	(??___flge+1)^0,w,c
  5015   003176  100C               	iorwf	(??___flge+2)^0,w,c
  5016   003178  100D               	iorwf	(??___flge+3)^0,w,c
  5017   00317A  A4D8               	btfss	status,2,c
  5018   00317C  EFC2  F018         	goto	u3691
  5019   003180  EFC4  F018         	goto	u3690
  5020   003184                     u3691:
  5021   003184  EFCC  F018         	goto	l4307
  5022   003188                     u3690:
  5023   003188  0E00               	movlw	0
  5024   00318A  6E02               	movwf	___flge@ff1^0,c
  5025   00318C  0E00               	movlw	0
  5026   00318E  6E03               	movwf	(___flge@ff1+1)^0,c
  5027   003190  0E00               	movlw	0
  5028   003192  6E04               	movwf	(___flge@ff1+2)^0,c
  5029   003194  0E00               	movlw	0
  5030   003196  6E05               	movwf	(___flge@ff1+3)^0,c
  5031   003198                     l4307:
  5032   003198  0E00               	movlw	0
  5033   00319A  1406               	andwf	___flge@ff2^0,w,c
  5034   00319C  6E0A               	movwf	??___flge^0,c
  5035   00319E  0E00               	movlw	0
  5036   0031A0  1407               	andwf	(___flge@ff2+1)^0,w,c
  5037   0031A2  6E0B               	movwf	(??___flge+1)^0,c
  5038   0031A4  0E80               	movlw	128
  5039   0031A6  1408               	andwf	(___flge@ff2+2)^0,w,c
  5040   0031A8  6E0C               	movwf	(??___flge+2)^0,c
  5041   0031AA  0E7F               	movlw	127
  5042   0031AC  1409               	andwf	(___flge@ff2+3)^0,w,c
  5043   0031AE  6E0D               	movwf	(??___flge+3)^0,c
  5044   0031B0  500A               	movf	??___flge^0,w,c
  5045   0031B2  100B               	iorwf	(??___flge+1)^0,w,c
  5046   0031B4  100C               	iorwf	(??___flge+2)^0,w,c
  5047   0031B6  100D               	iorwf	(??___flge+3)^0,w,c
  5048   0031B8  A4D8               	btfss	status,2,c
  5049   0031BA  EFE1  F018         	goto	u3701
  5050   0031BE  EFE3  F018         	goto	u3700
  5051   0031C2                     u3701:
  5052   0031C2  EFEB  F018         	goto	l4311
  5053   0031C6                     u3700:
  5054   0031C6  0E00               	movlw	0
  5055   0031C8  6E06               	movwf	___flge@ff2^0,c
  5056   0031CA  0E00               	movlw	0
  5057   0031CC  6E07               	movwf	(___flge@ff2+1)^0,c
  5058   0031CE  0E00               	movlw	0
  5059   0031D0  6E08               	movwf	(___flge@ff2+2)^0,c
  5060   0031D2  0E00               	movlw	0
  5061   0031D4  6E09               	movwf	(___flge@ff2+3)^0,c
  5062   0031D6                     l4311:
  5063   0031D6  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5064   0031D8  EFF0  F018         	goto	u3711
  5065   0031DC  EFF2  F018         	goto	u3710
  5066   0031E0                     u3711:
  5067   0031E0  EFFB  F018         	goto	l4315
  5068   0031E4                     u3710:
  5069   0031E4  6C02               	negf	___flge@ff1^0,c
  5070   0031E6  1E03               	comf	(___flge@ff1+1)^0,f,c
  5071   0031E8  B0D8               	btfsc	status,0,c
  5072   0031EA  2A03               	incf	(___flge@ff1+1)^0,f,c
  5073   0031EC  1E04               	comf	(___flge@ff1+2)^0,f,c
  5074   0031EE  B0D8               	btfsc	status,0,c
  5075   0031F0  2A04               	incf	(___flge@ff1+2)^0,f,c
  5076   0031F2  0E80               	movlw	128
  5077   0031F4  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5078   0031F6                     l4315:
  5079   0031F6  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5080   0031F8  EF00  F019         	goto	u3721
  5081   0031FC  EF02  F019         	goto	u3720
  5082   003200                     u3721:
  5083   003200  EF0B  F019         	goto	l934
  5084   003204                     u3720:
  5085   003204  6C06               	negf	___flge@ff2^0,c
  5086   003206  1E07               	comf	(___flge@ff2+1)^0,f,c
  5087   003208  B0D8               	btfsc	status,0,c
  5088   00320A  2A07               	incf	(___flge@ff2+1)^0,f,c
  5089   00320C  1E08               	comf	(___flge@ff2+2)^0,f,c
  5090   00320E  B0D8               	btfsc	status,0,c
  5091   003210  2A08               	incf	(___flge@ff2+2)^0,f,c
  5092   003212  0E80               	movlw	128
  5093   003214  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5094   003216                     l934:
  5095   003216  0E00               	movlw	0
  5096   003218  1A02               	xorwf	___flge@ff1^0,f,c
  5097   00321A  0E00               	movlw	0
  5098   00321C  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5099   00321E  0E00               	movlw	0
  5100   003220  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5101   003222  0E80               	movlw	128
  5102   003224  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5103   003226  0E00               	movlw	0
  5104   003228  1A06               	xorwf	___flge@ff2^0,f,c
  5105   00322A  0E00               	movlw	0
  5106   00322C  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5107   00322E  0E00               	movlw	0
  5108   003230  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5109   003232  0E80               	movlw	128
  5110   003234  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5111   003236  5006               	movf	___flge@ff2^0,w,c
  5112   003238  5C02               	subwf	___flge@ff1^0,w,c
  5113   00323A  5007               	movf	(___flge@ff2+1)^0,w,c
  5114   00323C  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5115   00323E  5008               	movf	(___flge@ff2+2)^0,w,c
  5116   003240  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5117   003242  5009               	movf	(___flge@ff2+3)^0,w,c
  5118   003244  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5119   003246  B0D8               	btfsc	status,0,c
  5120   003248  EF28  F019         	goto	u3731
  5121   00324C  EF2A  F019         	goto	u3730
  5122   003250                     u3731:
  5123   003250  EF2D  F019         	goto	l4321
  5124   003254                     u3730:
  5125   003254  90D8               	bcf	status,0,c
  5126   003256  EF2E  F019         	goto	l939
  5127   00325A                     l4321:
  5128   00325A  80D8               	bsf	status,0,c
  5129   00325C                     l939:
  5130   00325C  0012               	return		;funcret
  5131   00325E                     __end_of___flge:
  5132                           	callstack 0
  5133                           
  5134 ;; *************** function ___fleq *****************
  5135 ;; Defined at:
  5136 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  ff1             4    1[COMRAM] unsigned char 
  5139 ;;  ff2             4    5[COMRAM] unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;		None               void
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5151 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5153 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5154 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5155 ;;Total ram usage:       12 bytes
  5156 ;; Hardware stack levels used: 1
  5157 ;; Hardware stack levels required when called: 1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_convert_rgb2hue
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text14
  5166   0036FE                     __ptext14:
  5167                           	callstack 0
  5168   0036FE                     ___fleq:
  5169                           	callstack 27
  5170   0036FE  0E00               	movlw	0
  5171   003700  1402               	andwf	___fleq@ff1^0,w,c
  5172   003702  6E0A               	movwf	??___fleq^0,c
  5173   003704  0E00               	movlw	0
  5174   003706  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5175   003708  6E0B               	movwf	(??___fleq+1)^0,c
  5176   00370A  0E80               	movlw	128
  5177   00370C  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5178   00370E  6E0C               	movwf	(??___fleq+2)^0,c
  5179   003710  0E7F               	movlw	127
  5180   003712  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5181   003714  6E0D               	movwf	(??___fleq+3)^0,c
  5182   003716  500A               	movf	??___fleq^0,w,c
  5183   003718  100B               	iorwf	(??___fleq+1)^0,w,c
  5184   00371A  100C               	iorwf	(??___fleq+2)^0,w,c
  5185   00371C  100D               	iorwf	(??___fleq+3)^0,w,c
  5186   00371E  A4D8               	btfss	status,2,c
  5187   003720  EF94  F01B         	goto	u3661
  5188   003724  EF96  F01B         	goto	u3660
  5189   003728                     u3661:
  5190   003728  EF9E  F01B         	goto	l4291
  5191   00372C                     u3660:
  5192   00372C  0E00               	movlw	0
  5193   00372E  6E02               	movwf	___fleq@ff1^0,c
  5194   003730  0E00               	movlw	0
  5195   003732  6E03               	movwf	(___fleq@ff1+1)^0,c
  5196   003734  0E00               	movlw	0
  5197   003736  6E04               	movwf	(___fleq@ff1+2)^0,c
  5198   003738  0E00               	movlw	0
  5199   00373A  6E05               	movwf	(___fleq@ff1+3)^0,c
  5200   00373C                     l4291:
  5201   00373C  0E00               	movlw	0
  5202   00373E  1406               	andwf	___fleq@ff2^0,w,c
  5203   003740  6E0A               	movwf	??___fleq^0,c
  5204   003742  0E00               	movlw	0
  5205   003744  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5206   003746  6E0B               	movwf	(??___fleq+1)^0,c
  5207   003748  0E80               	movlw	128
  5208   00374A  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5209   00374C  6E0C               	movwf	(??___fleq+2)^0,c
  5210   00374E  0E7F               	movlw	127
  5211   003750  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5212   003752  6E0D               	movwf	(??___fleq+3)^0,c
  5213   003754  500A               	movf	??___fleq^0,w,c
  5214   003756  100B               	iorwf	(??___fleq+1)^0,w,c
  5215   003758  100C               	iorwf	(??___fleq+2)^0,w,c
  5216   00375A  100D               	iorwf	(??___fleq+3)^0,w,c
  5217   00375C  A4D8               	btfss	status,2,c
  5218   00375E  EFB3  F01B         	goto	u3671
  5219   003762  EFB5  F01B         	goto	u3670
  5220   003766                     u3671:
  5221   003766  EFBD  F01B         	goto	l4295
  5222   00376A                     u3670:
  5223   00376A  0E00               	movlw	0
  5224   00376C  6E06               	movwf	___fleq@ff2^0,c
  5225   00376E  0E00               	movlw	0
  5226   003770  6E07               	movwf	(___fleq@ff2+1)^0,c
  5227   003772  0E00               	movlw	0
  5228   003774  6E08               	movwf	(___fleq@ff2+2)^0,c
  5229   003776  0E00               	movlw	0
  5230   003778  6E09               	movwf	(___fleq@ff2+3)^0,c
  5231   00377A                     l4295:
  5232   00377A  5006               	movf	___fleq@ff2^0,w,c
  5233   00377C  1802               	xorwf	___fleq@ff1^0,w,c
  5234   00377E  E10F               	bnz	u3680
  5235   003780  5007               	movf	(___fleq@ff2+1)^0,w,c
  5236   003782  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5237   003784  E10C               	bnz	u3680
  5238   003786  5008               	movf	(___fleq@ff2+2)^0,w,c
  5239   003788  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5240   00378A  E109               	bnz	u3680
  5241   00378C  5009               	movf	(___fleq@ff2+3)^0,w,c
  5242   00378E  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5243   003790  B4D8               	btfsc	status,2,c
  5244   003792  EFCD  F01B         	goto	u3681
  5245   003796  EFCF  F01B         	goto	u3680
  5246   00379A                     u3681:
  5247   00379A  EFD2  F01B         	goto	l4299
  5248   00379E                     u3680:
  5249   00379E  90D8               	bcf	status,0,c
  5250   0037A0  EFD3  F01B         	goto	l928
  5251   0037A4                     l4299:
  5252   0037A4  80D8               	bsf	status,0,c
  5253   0037A6                     l928:
  5254   0037A6  0012               	return		;funcret
  5255   0037A8                     __end_of___fleq:
  5256                           	callstack 0
  5257                           
  5258 ;; *************** function ___fldiv *****************
  5259 ;; Defined at:
  5260 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  b               4   50[COMRAM] unsigned char 
  5263 ;;  a               4   54[COMRAM] unsigned char 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  grs             4   69[COMRAM] unsigned long 
  5266 ;;  rem             4   62[COMRAM] unsigned long 
  5267 ;;  new_exp         2   67[COMRAM] short 
  5268 ;;  aexp            1   74[COMRAM] unsigned char 
  5269 ;;  bexp            1   73[COMRAM] unsigned char 
  5270 ;;  sign            1   66[COMRAM] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  4   50[COMRAM] unsigned char 
  5273 ;; Registers used:
  5274 ;;		wreg, status,2, status,0
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5280 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5281 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5282 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5283 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5284 ;;Total ram usage:       25 bytes
  5285 ;; Hardware stack levels used: 1
  5286 ;; Hardware stack levels required when called: 1
  5287 ;; This function calls:
  5288 ;;		Nothing
  5289 ;; This function is called by:
  5290 ;;		_convert_rgb2hue
  5291 ;;		_main
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text15
  5296   001F48                     __ptext15:
  5297                           	callstack 0
  5298   001F48                     ___fldiv:
  5299                           	callstack 27
  5300   001F48  5036               	movf	(___fldiv@b+3)^0,w,c
  5301   001F4A  0B80               	andlw	128
  5302   001F4C  6E43               	movwf	___fldiv@sign^0,c
  5303   001F4E  5036               	movf	(___fldiv@b+3)^0,w,c
  5304   001F50  2436               	addwf	(___fldiv@b+3)^0,w,c
  5305   001F52  6E4A               	movwf	___fldiv@bexp^0,c
  5306   001F54  AE35               	btfss	(___fldiv@b+2)^0,7,c
  5307   001F56  EFAF  F00F         	goto	u3241
  5308   001F5A  EFB1  F00F         	goto	u3240
  5309   001F5E                     u3241:
  5310   001F5E  EFB2  F00F         	goto	l4019
  5311   001F62                     u3240:
  5312   001F62  804A               	bsf	___fldiv@bexp^0,0,c
  5313   001F64                     l4019:
  5314   001F64  504A               	movf	___fldiv@bexp^0,w,c
  5315   001F66  B4D8               	btfsc	status,2,c
  5316   001F68  EFB8  F00F         	goto	u3251
  5317   001F6C  EFBA  F00F         	goto	u3250
  5318   001F70                     u3251:
  5319   001F70  EFCF  F00F         	goto	l4029
  5320   001F74                     u3250:
  5321   001F74  284A               	incf	___fldiv@bexp^0,w,c
  5322   001F76  A4D8               	btfss	status,2,c
  5323   001F78  EFC0  F00F         	goto	u3261
  5324   001F7C  EFC2  F00F         	goto	u3260
  5325   001F80                     u3261:
  5326   001F80  EFCA  F00F         	goto	l4025
  5327   001F84                     u3260:
  5328   001F84  0E00               	movlw	0
  5329   001F86  6E33               	movwf	___fldiv@b^0,c
  5330   001F88  0E00               	movlw	0
  5331   001F8A  6E34               	movwf	(___fldiv@b+1)^0,c
  5332   001F8C  0E00               	movlw	0
  5333   001F8E  6E35               	movwf	(___fldiv@b+2)^0,c
  5334   001F90  0E00               	movlw	0
  5335   001F92  6E36               	movwf	(___fldiv@b+3)^0,c
  5336   001F94                     l4025:
  5337   001F94  8E35               	bsf	(___fldiv@b+2)^0,7,c
  5338   001F96  0E00               	movlw	0
  5339   001F98  6E36               	movwf	(___fldiv@b+3)^0,c
  5340   001F9A  EFD7  F00F         	goto	l4031
  5341   001F9E                     l4029:
  5342   001F9E  0E00               	movlw	0
  5343   001FA0  6E33               	movwf	___fldiv@b^0,c
  5344   001FA2  0E00               	movlw	0
  5345   001FA4  6E34               	movwf	(___fldiv@b+1)^0,c
  5346   001FA6  0E00               	movlw	0
  5347   001FA8  6E35               	movwf	(___fldiv@b+2)^0,c
  5348   001FAA  0E00               	movlw	0
  5349   001FAC  6E36               	movwf	(___fldiv@b+3)^0,c
  5350   001FAE                     l4031:
  5351   001FAE  503A               	movf	(___fldiv@a+3)^0,w,c
  5352   001FB0  0B80               	andlw	128
  5353   001FB2  1A43               	xorwf	___fldiv@sign^0,f,c
  5354   001FB4  503A               	movf	(___fldiv@a+3)^0,w,c
  5355   001FB6  243A               	addwf	(___fldiv@a+3)^0,w,c
  5356   001FB8  6E4B               	movwf	___fldiv@aexp^0,c
  5357   001FBA  AE39               	btfss	(___fldiv@a+2)^0,7,c
  5358   001FBC  EFE2  F00F         	goto	u3271
  5359   001FC0  EFE4  F00F         	goto	u3270
  5360   001FC4                     u3271:
  5361   001FC4  EFE5  F00F         	goto	l4039
  5362   001FC8                     u3270:
  5363   001FC8  804B               	bsf	___fldiv@aexp^0,0,c
  5364   001FCA                     l4039:
  5365   001FCA  504B               	movf	___fldiv@aexp^0,w,c
  5366   001FCC  B4D8               	btfsc	status,2,c
  5367   001FCE  EFEB  F00F         	goto	u3281
  5368   001FD2  EFED  F00F         	goto	u3280
  5369   001FD6                     u3281:
  5370   001FD6  EF02  F010         	goto	l4049
  5371   001FDA                     u3280:
  5372   001FDA  284B               	incf	___fldiv@aexp^0,w,c
  5373   001FDC  A4D8               	btfss	status,2,c
  5374   001FDE  EFF3  F00F         	goto	u3291
  5375   001FE2  EFF5  F00F         	goto	u3290
  5376   001FE6                     u3291:
  5377   001FE6  EFFD  F00F         	goto	l4045
  5378   001FEA                     u3290:
  5379   001FEA  0E00               	movlw	0
  5380   001FEC  6E37               	movwf	___fldiv@a^0,c
  5381   001FEE  0E00               	movlw	0
  5382   001FF0  6E38               	movwf	(___fldiv@a+1)^0,c
  5383   001FF2  0E00               	movlw	0
  5384   001FF4  6E39               	movwf	(___fldiv@a+2)^0,c
  5385   001FF6  0E00               	movlw	0
  5386   001FF8  6E3A               	movwf	(___fldiv@a+3)^0,c
  5387   001FFA                     l4045:
  5388   001FFA  8E39               	bsf	(___fldiv@a+2)^0,7,c
  5389   001FFC  0E00               	movlw	0
  5390   001FFE  6E3A               	movwf	(___fldiv@a+3)^0,c
  5391   002000  EF0A  F010         	goto	l4051
  5392   002004                     l4049:
  5393   002004  0E00               	movlw	0
  5394   002006  6E37               	movwf	___fldiv@a^0,c
  5395   002008  0E00               	movlw	0
  5396   00200A  6E38               	movwf	(___fldiv@a+1)^0,c
  5397   00200C  0E00               	movlw	0
  5398   00200E  6E39               	movwf	(___fldiv@a+2)^0,c
  5399   002010  0E00               	movlw	0
  5400   002012  6E3A               	movwf	(___fldiv@a+3)^0,c
  5401   002014                     l4051:
  5402   002014  5037               	movf	___fldiv@a^0,w,c
  5403   002016  1038               	iorwf	(___fldiv@a+1)^0,w,c
  5404   002018  1039               	iorwf	(___fldiv@a+2)^0,w,c
  5405   00201A  103A               	iorwf	(___fldiv@a+3)^0,w,c
  5406   00201C  A4D8               	btfss	status,2,c
  5407   00201E  EF13  F010         	goto	u3301
  5408   002022  EF15  F010         	goto	u3300
  5409   002026                     u3301:
  5410   002026  EF2D  F010         	goto	l4063
  5411   00202A                     u3300:
  5412   00202A  0E00               	movlw	0
  5413   00202C  6E33               	movwf	___fldiv@b^0,c
  5414   00202E  0E00               	movlw	0
  5415   002030  6E34               	movwf	(___fldiv@b+1)^0,c
  5416   002032  0E00               	movlw	0
  5417   002034  6E35               	movwf	(___fldiv@b+2)^0,c
  5418   002036  0E00               	movlw	0
  5419   002038  6E36               	movwf	(___fldiv@b+3)^0,c
  5420   00203A  0E80               	movlw	128
  5421   00203C  1235               	iorwf	(___fldiv@b+2)^0,f,c
  5422   00203E  0E7F               	movlw	127
  5423   002040  1236               	iorwf	(___fldiv@b+3)^0,f,c
  5424   002042                     l4057:
  5425   002042  5043               	movf	___fldiv@sign^0,w,c
  5426   002044  1236               	iorwf	(___fldiv@b+3)^0,f,c
  5427   002046  C033  F033         	movff	___fldiv@b,?___fldiv
  5428   00204A  C034  F034         	movff	___fldiv@b+1,?___fldiv+1
  5429   00204E  C035  F035         	movff	___fldiv@b+2,?___fldiv+2
  5430   002052  C036  F036         	movff	___fldiv@b+3,?___fldiv+3
  5431   002056  EF70  F011         	goto	l1251
  5432   00205A                     l4063:
  5433   00205A  504A               	movf	___fldiv@bexp^0,w,c
  5434   00205C  A4D8               	btfss	status,2,c
  5435   00205E  EF33  F010         	goto	u3311
  5436   002062  EF35  F010         	goto	u3310
  5437   002066                     u3311:
  5438   002066  EF3F  F010         	goto	l4071
  5439   00206A                     u3310:
  5440   00206A  0E00               	movlw	0
  5441   00206C  6E33               	movwf	?___fldiv^0,c
  5442   00206E  0E00               	movlw	0
  5443   002070  6E34               	movwf	(?___fldiv+1)^0,c
  5444   002072  0E00               	movlw	0
  5445   002074  6E35               	movwf	(?___fldiv+2)^0,c
  5446   002076  0E00               	movlw	0
  5447   002078  6E36               	movwf	(?___fldiv+3)^0,c
  5448   00207A  EF70  F011         	goto	l1251
  5449   00207E                     l4071:
  5450   00207E  504B               	movf	___fldiv@aexp^0,w,c
  5451   002080  C04A  F03B         	movff	___fldiv@bexp,??___fldiv
  5452   002084  6A3C               	clrf	(??___fldiv+1)^0,c
  5453   002086  5E3B               	subwf	??___fldiv^0,f,c
  5454   002088  0E00               	movlw	0
  5455   00208A  5A3C               	subwfb	(??___fldiv+1)^0,f,c
  5456   00208C  0E7F               	movlw	127
  5457   00208E  243B               	addwf	??___fldiv^0,w,c
  5458   002090  6E44               	movwf	___fldiv@new_exp^0,c
  5459   002092  0E00               	movlw	0
  5460   002094  203C               	addwfc	(??___fldiv+1)^0,w,c
  5461   002096  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  5462   002098  C033  F03F         	movff	___fldiv@b,___fldiv@rem
  5463   00209C  C034  F040         	movff	___fldiv@b+1,___fldiv@rem+1
  5464   0020A0  C035  F041         	movff	___fldiv@b+2,___fldiv@rem+2
  5465   0020A4  C036  F042         	movff	___fldiv@b+3,___fldiv@rem+3
  5466   0020A8  0E00               	movlw	0
  5467   0020AA  6E33               	movwf	___fldiv@b^0,c
  5468   0020AC  0E00               	movlw	0
  5469   0020AE  6E34               	movwf	(___fldiv@b+1)^0,c
  5470   0020B0  0E00               	movlw	0
  5471   0020B2  6E35               	movwf	(___fldiv@b+2)^0,c
  5472   0020B4  0E00               	movlw	0
  5473   0020B6  6E36               	movwf	(___fldiv@b+3)^0,c
  5474   0020B8  0E00               	movlw	0
  5475   0020BA  6E46               	movwf	___fldiv@grs^0,c
  5476   0020BC  0E00               	movlw	0
  5477   0020BE  6E47               	movwf	(___fldiv@grs+1)^0,c
  5478   0020C0  0E00               	movlw	0
  5479   0020C2  6E48               	movwf	(___fldiv@grs+2)^0,c
  5480   0020C4  0E00               	movlw	0
  5481   0020C6  6E49               	movwf	(___fldiv@grs+3)^0,c
  5482   0020C8  0E00               	movlw	0
  5483   0020CA  6E4B               	movwf	___fldiv@aexp^0,c
  5484   0020CC  EFA0  F010         	goto	l1253
  5485   0020D0                     l4081:
  5486   0020D0  504B               	movf	___fldiv@aexp^0,w,c
  5487   0020D2  B4D8               	btfsc	status,2,c
  5488   0020D4  EF6E  F010         	goto	u3321
  5489   0020D8  EF70  F010         	goto	u3320
  5490   0020DC                     u3321:
  5491   0020DC  EF87  F010         	goto	l4089
  5492   0020E0                     u3320:
  5493   0020E0  90D8               	bcf	status,0,c
  5494   0020E2  363F               	rlcf	___fldiv@rem^0,f,c
  5495   0020E4  3640               	rlcf	(___fldiv@rem+1)^0,f,c
  5496   0020E6  3641               	rlcf	(___fldiv@rem+2)^0,f,c
  5497   0020E8  3642               	rlcf	(___fldiv@rem+3)^0,f,c
  5498   0020EA  90D8               	bcf	status,0,c
  5499   0020EC  3633               	rlcf	___fldiv@b^0,f,c
  5500   0020EE  3634               	rlcf	(___fldiv@b+1)^0,f,c
  5501   0020F0  3635               	rlcf	(___fldiv@b+2)^0,f,c
  5502   0020F2  3636               	rlcf	(___fldiv@b+3)^0,f,c
  5503   0020F4  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  5504   0020F6  EF7F  F010         	goto	u3331
  5505   0020FA  EF81  F010         	goto	u3330
  5506   0020FE                     u3331:
  5507   0020FE  EF82  F010         	goto	l1256
  5508   002102                     u3330:
  5509   002102  8033               	bsf	___fldiv@b^0,0,c
  5510   002104                     l1256:
  5511   002104  90D8               	bcf	status,0,c
  5512   002106  3646               	rlcf	___fldiv@grs^0,f,c
  5513   002108  3647               	rlcf	(___fldiv@grs+1)^0,f,c
  5514   00210A  3648               	rlcf	(___fldiv@grs+2)^0,f,c
  5515   00210C  3649               	rlcf	(___fldiv@grs+3)^0,f,c
  5516   00210E                     l4089:
  5517   00210E  5037               	movf	___fldiv@a^0,w,c
  5518   002110  5C3F               	subwf	___fldiv@rem^0,w,c
  5519   002112  5038               	movf	(___fldiv@a+1)^0,w,c
  5520   002114  5840               	subwfb	(___fldiv@rem+1)^0,w,c
  5521   002116  5039               	movf	(___fldiv@a+2)^0,w,c
  5522   002118  5841               	subwfb	(___fldiv@rem+2)^0,w,c
  5523   00211A  503A               	movf	(___fldiv@a+3)^0,w,c
  5524   00211C  5842               	subwfb	(___fldiv@rem+3)^0,w,c
  5525   00211E  A0D8               	btfss	status,0,c
  5526   002120  EF94  F010         	goto	u3341
  5527   002124  EF96  F010         	goto	u3340
  5528   002128                     u3341:
  5529   002128  EF9F  F010         	goto	l4095
  5530   00212C                     u3340:
  5531   00212C  8C49               	bsf	(___fldiv@grs+3)^0,6,c
  5532   00212E  5037               	movf	___fldiv@a^0,w,c
  5533   002130  5E3F               	subwf	___fldiv@rem^0,f,c
  5534   002132  5038               	movf	(___fldiv@a+1)^0,w,c
  5535   002134  5A40               	subwfb	(___fldiv@rem+1)^0,f,c
  5536   002136  5039               	movf	(___fldiv@a+2)^0,w,c
  5537   002138  5A41               	subwfb	(___fldiv@rem+2)^0,f,c
  5538   00213A  503A               	movf	(___fldiv@a+3)^0,w,c
  5539   00213C  5A42               	subwfb	(___fldiv@rem+3)^0,f,c
  5540   00213E                     l4095:
  5541   00213E  2A4B               	incf	___fldiv@aexp^0,f,c
  5542   002140                     l1253:
  5543   002140  0E19               	movlw	25
  5544   002142  644B               	cpfsgt	___fldiv@aexp^0,c
  5545   002144  EFA6  F010         	goto	u3351
  5546   002148  EFA8  F010         	goto	u3350
  5547   00214C                     u3351:
  5548   00214C  EF68  F010         	goto	l4081
  5549   002150                     u3350:
  5550   002150  503F               	movf	___fldiv@rem^0,w,c
  5551   002152  1040               	iorwf	(___fldiv@rem+1)^0,w,c
  5552   002154  1041               	iorwf	(___fldiv@rem+2)^0,w,c
  5553   002156  1042               	iorwf	(___fldiv@rem+3)^0,w,c
  5554   002158  B4D8               	btfsc	status,2,c
  5555   00215A  EFB1  F010         	goto	u3361
  5556   00215E  EFB3  F010         	goto	u3360
  5557   002162                     u3361:
  5558   002162  EFCB  F010         	goto	l4107
  5559   002166                     u3360:
  5560   002166  8046               	bsf	___fldiv@grs^0,0,c
  5561   002168  EFCB  F010         	goto	l4107
  5562   00216C                     l4101:
  5563   00216C  90D8               	bcf	status,0,c
  5564   00216E  3633               	rlcf	___fldiv@b^0,f,c
  5565   002170  3634               	rlcf	(___fldiv@b+1)^0,f,c
  5566   002172  3635               	rlcf	(___fldiv@b+2)^0,f,c
  5567   002174  3636               	rlcf	(___fldiv@b+3)^0,f,c
  5568   002176  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  5569   002178  EFC0  F010         	goto	u3371
  5570   00217C  EFC2  F010         	goto	u3370
  5571   002180                     u3371:
  5572   002180  EFC3  F010         	goto	l1262
  5573   002184                     u3370:
  5574   002184  8033               	bsf	___fldiv@b^0,0,c
  5575   002186                     l1262:
  5576   002186  90D8               	bcf	status,0,c
  5577   002188  3646               	rlcf	___fldiv@grs^0,f,c
  5578   00218A  3647               	rlcf	(___fldiv@grs+1)^0,f,c
  5579   00218C  3648               	rlcf	(___fldiv@grs+2)^0,f,c
  5580   00218E  3649               	rlcf	(___fldiv@grs+3)^0,f,c
  5581   002190  0644               	decf	___fldiv@new_exp^0,f,c
  5582   002192  A0D8               	btfss	status,0,c
  5583   002194  0645               	decf	(___fldiv@new_exp+1)^0,f,c
  5584   002196                     l4107:
  5585   002196  AE35               	btfss	(___fldiv@b+2)^0,7,c
  5586   002198  EFD0  F010         	goto	u3381
  5587   00219C  EFD2  F010         	goto	u3380
  5588   0021A0                     u3381:
  5589   0021A0  EFB6  F010         	goto	l4101
  5590   0021A4                     u3380:
  5591   0021A4  0E00               	movlw	0
  5592   0021A6  6E4B               	movwf	___fldiv@aexp^0,c
  5593   0021A8  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  5594   0021AA  EFD9  F010         	goto	u3391
  5595   0021AE  EFDB  F010         	goto	u3390
  5596   0021B2                     u3391:
  5597   0021B2  EFFF  F010         	goto	l1264
  5598   0021B6                     u3390:
  5599   0021B6  0EFF               	movlw	255
  5600   0021B8  1446               	andwf	___fldiv@grs^0,w,c
  5601   0021BA  6E3B               	movwf	??___fldiv^0,c
  5602   0021BC  0EFF               	movlw	255
  5603   0021BE  1447               	andwf	(___fldiv@grs+1)^0,w,c
  5604   0021C0  6E3C               	movwf	(??___fldiv+1)^0,c
  5605   0021C2  0EFF               	movlw	255
  5606   0021C4  1448               	andwf	(___fldiv@grs+2)^0,w,c
  5607   0021C6  6E3D               	movwf	(??___fldiv+2)^0,c
  5608   0021C8  0E7F               	movlw	127
  5609   0021CA  1449               	andwf	(___fldiv@grs+3)^0,w,c
  5610   0021CC  6E3E               	movwf	(??___fldiv+3)^0,c
  5611   0021CE  503B               	movf	??___fldiv^0,w,c
  5612   0021D0  103C               	iorwf	(??___fldiv+1)^0,w,c
  5613   0021D2  103D               	iorwf	(??___fldiv+2)^0,w,c
  5614   0021D4  103E               	iorwf	(??___fldiv+3)^0,w,c
  5615   0021D6  B4D8               	btfsc	status,2,c
  5616   0021D8  EFF0  F010         	goto	u3401
  5617   0021DC  EFF2  F010         	goto	u3400
  5618   0021E0                     u3401:
  5619   0021E0  EFF6  F010         	goto	l1265
  5620   0021E4                     u3400:
  5621   0021E4                     l4115:
  5622   0021E4  0E01               	movlw	1
  5623   0021E6  6E4B               	movwf	___fldiv@aexp^0,c
  5624   0021E8  EFFF  F010         	goto	l1264
  5625   0021EC                     l1265:
  5626   0021EC  A033               	btfss	___fldiv@b^0,0,c
  5627   0021EE  EFFB  F010         	goto	u3411
  5628   0021F2  EFFD  F010         	goto	u3410
  5629   0021F6                     u3411:
  5630   0021F6  EFFF  F010         	goto	l1264
  5631   0021FA                     u3410:
  5632   0021FA  EFF2  F010         	goto	l4115
  5633   0021FE                     l1264:
  5634   0021FE  504B               	movf	___fldiv@aexp^0,w,c
  5635   002200  B4D8               	btfsc	status,2,c
  5636   002202  EF05  F011         	goto	u3421
  5637   002206  EF07  F011         	goto	u3420
  5638   00220A                     u3421:
  5639   00220A  EF2B  F011         	goto	l4127
  5640   00220E                     u3420:
  5641   00220E  0E01               	movlw	1
  5642   002210  2633               	addwf	___fldiv@b^0,f,c
  5643   002212  0E00               	movlw	0
  5644   002214  2234               	addwfc	(___fldiv@b+1)^0,f,c
  5645   002216  2235               	addwfc	(___fldiv@b+2)^0,f,c
  5646   002218  2236               	addwfc	(___fldiv@b+3)^0,f,c
  5647   00221A  A036               	btfss	(___fldiv@b+3)^0,0,c
  5648   00221C  EF12  F011         	goto	u3431
  5649   002220  EF14  F011         	goto	u3430
  5650   002224                     u3431:
  5651   002224  EF2B  F011         	goto	l4127
  5652   002228                     u3430:
  5653   002228  C033  F03B         	movff	___fldiv@b,??___fldiv
  5654   00222C  C034  F03C         	movff	___fldiv@b+1,??___fldiv+1
  5655   002230  C035  F03D         	movff	___fldiv@b+2,??___fldiv+2
  5656   002234  C036  F03E         	movff	___fldiv@b+3,??___fldiv+3
  5657   002238  343E               	rlcf	(??___fldiv+3)^0,w,c
  5658   00223A  323E               	rrcf	(??___fldiv+3)^0,f,c
  5659   00223C  323D               	rrcf	(??___fldiv+2)^0,f,c
  5660   00223E  323C               	rrcf	(??___fldiv+1)^0,f,c
  5661   002240  323B               	rrcf	??___fldiv^0,f,c
  5662   002242  C03B  F033         	movff	??___fldiv,___fldiv@b
  5663   002246  C03C  F034         	movff	??___fldiv+1,___fldiv@b+1
  5664   00224A  C03D  F035         	movff	??___fldiv+2,___fldiv@b+2
  5665   00224E  C03E  F036         	movff	??___fldiv+3,___fldiv@b+3
  5666   002252  4A44               	infsnz	___fldiv@new_exp^0,f,c
  5667   002254  2A45               	incf	(___fldiv@new_exp+1)^0,f,c
  5668   002256                     l4127:
  5669   002256  BE45               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5670   002258  EF36  F011         	goto	u3441
  5671   00225C  5045               	movf	(___fldiv@new_exp+1)^0,w,c
  5672   00225E  E108               	bnz	u3440
  5673   002260  2844               	incf	___fldiv@new_exp^0,w,c
  5674   002262  A0D8               	btfss	status,0,c
  5675   002264  EF36  F011         	goto	u3441
  5676   002268  EF38  F011         	goto	u3440
  5677   00226C                     u3441:
  5678   00226C  EF43  F011         	goto	l4131
  5679   002270                     u3440:
  5680   002270  0E00               	movlw	0
  5681   002272  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  5682   002274  6844               	setf	___fldiv@new_exp^0,c
  5683   002276  0E00               	movlw	0
  5684   002278  6E33               	movwf	___fldiv@b^0,c
  5685   00227A  0E00               	movlw	0
  5686   00227C  6E34               	movwf	(___fldiv@b+1)^0,c
  5687   00227E  0E00               	movlw	0
  5688   002280  6E35               	movwf	(___fldiv@b+2)^0,c
  5689   002282  0E00               	movlw	0
  5690   002284  6E36               	movwf	(___fldiv@b+3)^0,c
  5691   002286                     l4131:
  5692   002286  BE45               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5693   002288  EF50  F011         	goto	u3450
  5694   00228C  5045               	movf	(___fldiv@new_exp+1)^0,w,c
  5695   00228E  E106               	bnz	u3451
  5696   002290  0444               	decf	___fldiv@new_exp^0,w,c
  5697   002292  B0D8               	btfsc	status,0,c
  5698   002294  EF4E  F011         	goto	u3451
  5699   002298  EF50  F011         	goto	u3450
  5700   00229C                     u3451:
  5701   00229C  EF5E  F011         	goto	l4135
  5702   0022A0                     u3450:
  5703   0022A0  0E00               	movlw	0
  5704   0022A2  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  5705   0022A4  0E00               	movlw	0
  5706   0022A6  6E44               	movwf	___fldiv@new_exp^0,c
  5707   0022A8  0E00               	movlw	0
  5708   0022AA  6E33               	movwf	___fldiv@b^0,c
  5709   0022AC  0E00               	movlw	0
  5710   0022AE  6E34               	movwf	(___fldiv@b+1)^0,c
  5711   0022B0  0E00               	movlw	0
  5712   0022B2  6E35               	movwf	(___fldiv@b+2)^0,c
  5713   0022B4  0E00               	movlw	0
  5714   0022B6  6E36               	movwf	(___fldiv@b+3)^0,c
  5715   0022B8  0E00               	movlw	0
  5716   0022BA  6E43               	movwf	___fldiv@sign^0,c
  5717   0022BC                     l4135:
  5718   0022BC  C044  F04A         	movff	___fldiv@new_exp,___fldiv@bexp
  5719   0022C0  A04A               	btfss	___fldiv@bexp^0,0,c
  5720   0022C2  EF65  F011         	goto	u3461
  5721   0022C6  EF67  F011         	goto	u3460
  5722   0022CA                     u3461:
  5723   0022CA  EF6A  F011         	goto	l4141
  5724   0022CE                     u3460:
  5725   0022CE  8E35               	bsf	(___fldiv@b+2)^0,7,c
  5726   0022D0  EF6B  F011         	goto	l4143
  5727   0022D4                     l4141:
  5728   0022D4  9E35               	bcf	(___fldiv@b+2)^0,7,c
  5729   0022D6                     l4143:
  5730   0022D6  90D8               	bcf	status,0,c
  5731   0022D8  304A               	rrcf	___fldiv@bexp^0,w,c
  5732   0022DA  6E36               	movwf	(___fldiv@b+3)^0,c
  5733   0022DC  EF21  F010         	goto	l4057
  5734   0022E0                     l1251:
  5735   0022E0  0012               	return		;funcret
  5736   0022E2                     __end_of___fldiv:
  5737                           	callstack 0
  5738                           
  5739 ;; *************** function _initUSART4 *****************
  5740 ;; Defined at:
  5741 ;;		line 14 in file "serial.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used: 1
  5761 ;; Hardware stack levels required when called: 1
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text16
  5770   0044B6                     __ptext16:
  5771                           	callstack 0
  5772   0044B6                     _initUSART4:
  5773                           	callstack 29
  5774   0044B6                     
  5775                           ;serial.c: 15:     RC0PPS = 0x12;
  5776   0044B6  0E12               	movlw	18
  5777   0044B8  010E               	movlb	14	; () banked
  5778   0044BA  6F62               	movwf	98,b	;volatile
  5779                           
  5780                           ;serial.c: 16:     RX4PPS = 0x11;
  5781   0044BC  0E11               	movlw	17
  5782   0044BE  6F15               	movwf	21,b	;volatile
  5783   0044C0                     
  5784                           ; BSR set to: 14
  5785                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5786   0044C0  97E9               	bcf	233,3,b	;volatile
  5787   0044C2                     
  5788                           ; BSR set to: 14
  5789                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5790   0044C2  95E8               	bcf	232,2,b	;volatile
  5791                           
  5792                           ;serial.c: 19:     SP4BRGL = 51;
  5793   0044C4  0E33               	movlw	51
  5794   0044C6  6FE5               	movwf	229,b	;volatile
  5795                           
  5796                           ;serial.c: 20:     SP4BRGH = 0;
  5797   0044C8  0E00               	movlw	0
  5798   0044CA  6FE6               	movwf	230,b	;volatile
  5799   0044CC                     
  5800                           ; BSR set to: 14
  5801                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5802   0044CC  89E7               	bsf	231,4,b	;volatile
  5803   0044CE                     
  5804                           ; BSR set to: 14
  5805                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5806   0044CE  8BE8               	bsf	232,5,b	;volatile
  5807   0044D0                     
  5808                           ; BSR set to: 14
  5809                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5810   0044D0  8FE7               	bsf	231,7,b	;volatile
  5811   0044D2                     
  5812                           ; BSR set to: 14
  5813   0044D2  0012               	return		;funcret
  5814   0044D4                     __end_of_initUSART4:
  5815                           	callstack 0
  5816                           
  5817 ;; *************** function _initDCmotorsPWM *****************
  5818 ;; Defined at:
  5819 ;;		line 5 in file "dc_motor.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5837 ;;Total ram usage:        2 bytes
  5838 ;; Hardware stack levels used: 1
  5839 ;; Hardware stack levels required when called: 1
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_main
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text17
  5848   0038E8                     __ptext17:
  5849                           	callstack 0
  5850   0038E8                     _initDCmotorsPWM:
  5851                           	callstack 29
  5852   0038E8                     
  5853                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5854   0038E8  9485               	bcf	133,2,c	;volatile
  5855                           
  5856                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5857   0038EA  9E83               	bcf	131,7,c	;volatile
  5858                           
  5859                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5860   0038EC  9885               	bcf	133,4,c	;volatile
  5861                           
  5862                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5863   0038EE  9C87               	bcf	135,6,c	;volatile
  5864                           
  5865                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5866   0038F0  947D               	bcf	125,2,c	;volatile
  5867                           
  5868                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5869   0038F2  9E7B               	bcf	123,7,c	;volatile
  5870                           
  5871                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5872   0038F4  987D               	bcf	125,4,c	;volatile
  5873                           
  5874                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5875   0038F6  9C7F               	bcf	127,6,c	;volatile
  5876   0038F8                     
  5877                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5878   0038F8  0E05               	movlw	5
  5879   0038FA  010E               	movlb	14	; () banked
  5880   0038FC  6F74               	movwf	116,b	;volatile
  5881                           
  5882                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5883   0038FE  0E06               	movlw	6
  5884   003900  6F76               	movwf	118,b	;volatile
  5885                           
  5886                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5887   003902  0E07               	movlw	7
  5888   003904  6F69               	movwf	105,b	;volatile
  5889                           
  5890                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5891   003906  0E08               	movlw	8
  5892   003908  6F88               	movwf	136,b	;volatile
  5893                           
  5894                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5895   00390A  50BD               	movf	189,w,c	;volatile
  5896   00390C  0B8F               	andlw	-113
  5897   00390E  0940               	iorlw	64
  5898   003910  6EBD               	movwf	189,c	;volatile
  5899                           
  5900                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5901   003912  0EE0               	movlw	-32
  5902   003914  16BE               	andwf	190,f,c	;volatile
  5903                           
  5904                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5905   003916  50BF               	movf	191,w,c	;volatile
  5906   003918  0BF0               	andlw	-16
  5907   00391A  0901               	iorlw	1
  5908   00391C  6EBF               	movwf	191,c	;volatile
  5909   00391E                     
  5910                           ; BSR set to: 14
  5911                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5912   00391E  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5913   003922                     
  5914                           ; BSR set to: 14
  5915                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5916   003922  8EBD               	bsf	189,7,c	;volatile
  5917                           
  5918                           ;dc_motor.c: 35:     CCPR1H=0;
  5919   003924  0E00               	movlw	0
  5920   003926  6EAA               	movwf	170,c	;volatile
  5921                           
  5922                           ;dc_motor.c: 36:     CCPR2H=0;
  5923   003928  0E00               	movlw	0
  5924   00392A  6EA6               	movwf	166,c	;volatile
  5925                           
  5926                           ;dc_motor.c: 37:     CCPR3H=0;
  5927   00392C  0E00               	movlw	0
  5928   00392E  010F               	movlb	15	; () banked
  5929   003930  6F25               	movwf	37,b	;volatile
  5930                           
  5931                           ;dc_motor.c: 38:     CCPR4H=0;
  5932   003932  0E00               	movlw	0
  5933   003934  6F21               	movwf	33,b	;volatile
  5934                           
  5935                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5936   003936  0EFC               	movlw	-4
  5937   003938  16AD               	andwf	173,f,c	;volatile
  5938                           
  5939                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5940   00393A  0EF3               	movlw	-13
  5941   00393C  16AD               	andwf	173,f,c	;volatile
  5942                           
  5943                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5944   00393E  0ECF               	movlw	-49
  5945   003940  16AD               	andwf	173,f,c	;volatile
  5946                           
  5947                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5948   003942  0E3F               	movlw	-193
  5949   003944  16AD               	andwf	173,f,c	;volatile
  5950   003946                     
  5951                           ; BSR set to: 15
  5952                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5953   003946  88AB               	bsf	171,4,c	;volatile
  5954                           
  5955                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5956   003948  50AB               	movf	171,w,c	;volatile
  5957   00394A  0BF0               	andlw	-16
  5958   00394C  090C               	iorlw	12
  5959   00394E  6EAB               	movwf	171,c	;volatile
  5960   003950                     
  5961                           ; BSR set to: 15
  5962                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5963   003950  8EAB               	bsf	171,7,c	;volatile
  5964   003952                     
  5965                           ; BSR set to: 15
  5966                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5967   003952  88A7               	bsf	167,4,c	;volatile
  5968                           
  5969                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5970   003954  50A7               	movf	167,w,c	;volatile
  5971   003956  0BF0               	andlw	-16
  5972   003958  090C               	iorlw	12
  5973   00395A  6EA7               	movwf	167,c	;volatile
  5974   00395C                     
  5975                           ; BSR set to: 15
  5976                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5977   00395C  8EA7               	bsf	167,7,c	;volatile
  5978   00395E                     
  5979                           ; BSR set to: 15
  5980                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5981   00395E  8926               	bsf	38,4,b	;volatile
  5982                           
  5983                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5984   003960  5126               	movf	38,w,b	;volatile
  5985   003962  0BF0               	andlw	-16
  5986   003964  090C               	iorlw	12
  5987   003966  6F26               	movwf	38,b	;volatile
  5988   003968                     
  5989                           ; BSR set to: 15
  5990                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5991   003968  8F26               	bsf	38,7,b	;volatile
  5992   00396A                     
  5993                           ; BSR set to: 15
  5994                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5995   00396A  8922               	bsf	34,4,b	;volatile
  5996                           
  5997                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5998   00396C  5122               	movf	34,w,b	;volatile
  5999   00396E  0BF0               	andlw	-16
  6000   003970  090C               	iorlw	12
  6001   003972  6F22               	movwf	34,b	;volatile
  6002   003974                     
  6003                           ; BSR set to: 15
  6004                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6005   003974  8F22               	bsf	34,7,b	;volatile
  6006   003976                     
  6007                           ; BSR set to: 15
  6008   003976  0012               	return		;funcret
  6009   003978                     __end_of_initDCmotorsPWM:
  6010                           	callstack 0
  6011                           
  6012 ;; *************** function _get16bitTMR0val *****************
  6013 ;; Defined at:
  6014 ;;		line 32 in file "timers.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  combined_val    2    7[COMRAM] unsigned int 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2    1[COMRAM] unsigned int 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;Total ram usage:        8 bytes
  6033 ;; Hardware stack levels used: 1
  6034 ;; Hardware stack levels required when called: 1
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_main
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text18
  6043   004474                     __ptext18:
  6044                           	callstack 0
  6045   004474                     _get16bitTMR0val:
  6046                           	callstack 29
  6047   004474                     
  6048                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6049   004474  50D4               	movf	212,w,c	;volatile
  6050   004476  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6051   004478  6A04               	clrf	??_get16bitTMR0val^0,c
  6052   00447A  50D3               	movf	211,w,c	;volatile
  6053   00447C  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6054   00447E  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6055   004480  5004               	movf	??_get16bitTMR0val^0,w,c
  6056   004482  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6057   004484  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6058   004486  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6059   004488  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6060   00448A  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6061   00448C                     
  6062                           ;timers.c: 36:     return combined_value;
  6063   00448C  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6064   004490  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6065   004494  0012               	return		;funcret
  6066   004496                     __end_of_get16bitTMR0val:
  6067                           	callstack 0
  6068                           
  6069 ;; *************** function _decision *****************
  6070 ;; Defined at:
  6071 ;;		line 292 in file "color.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  hue             2   70[COMRAM] unsigned int 
  6074 ;;  path_length     2   72[COMRAM] unsigned int 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  color           2   74[COMRAM] unsigned int 
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  1    wreg      void 
  6079 ;; Registers used:
  6080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6089 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6090 ;;Total ram usage:        6 bytes
  6091 ;; Hardware stack levels used: 1
  6092 ;; Hardware stack levels required when called: 10
  6093 ;; This function calls:
  6094 ;;		_moveBlue
  6095 ;;		_moveGreen
  6096 ;;		_moveLightBlue
  6097 ;;		_moveOrange
  6098 ;;		_movePink
  6099 ;;		_moveRed
  6100 ;;		_moveYellow
  6101 ;;		_send2USART
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text19
  6108   00282A                     __ptext19:
  6109                           	callstack 0
  6110   00282A                     _decision:
  6111                           	callstack 20
  6112   00282A                     
  6113                           ;color.c: 297:     unsigned int color;;color.c: 299:     if (hue<=10 || hue>=355) {
  6114   00282A  5048               	movf	(decision@hue+1)^0,w,c
  6115   00282C  E109               	bnz	u4710
  6116   00282E  0E0B               	movlw	11
  6117   002830  5C47               	subwf	decision@hue^0,w,c
  6118   002832  A0D8               	btfss	status,0,c
  6119   002834  EF1E  F014         	goto	u4711
  6120   002838  EF20  F014         	goto	u4710
  6121   00283C                     u4711:
  6122   00283C  EF2B  F014         	goto	l5361
  6123   002840                     u4710:
  6124   002840  0E63               	movlw	99
  6125   002842  5C47               	subwf	decision@hue^0,w,c
  6126   002844  0E01               	movlw	1
  6127   002846  5848               	subwfb	(decision@hue+1)^0,w,c
  6128   002848  A0D8               	btfss	status,0,c
  6129   00284A  EF29  F014         	goto	u4721
  6130   00284E  EF2B  F014         	goto	u4720
  6131   002852                     u4721:
  6132   002852  EF3B  F014         	goto	l5365
  6133   002856                     u4720:
  6134   002856                     l5361:
  6135                           
  6136                           ;color.c: 300:         moveRed(&motorL, &motorR, path_length);
  6137   002856  0EF6               	movlw	low _motorL
  6138   002858  6E1D               	movwf	moveRed@mL^0,c
  6139   00285A  0EED               	movlw	low _motorR
  6140   00285C  6E1E               	movwf	moveRed@mR^0,c
  6141   00285E  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6142   002862  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6143   002866  EC2C  F01F         	call	_moveRed	;wreg free
  6144   00286A                     
  6145                           ;color.c: 301:         color = 1;
  6146   00286A  0E00               	movlw	0
  6147   00286C  6E4C               	movwf	(decision@color+1)^0,c
  6148   00286E  0E01               	movlw	1
  6149   002870  6E4B               	movwf	decision@color^0,c
  6150                           
  6151                           ;color.c: 302:     } else if (hue>=105 && hue<=130){
  6152   002872  EF1F  F015         	goto	l5413
  6153   002876                     l5365:
  6154   002876  5048               	movf	(decision@hue+1)^0,w,c
  6155   002878  E109               	bnz	u4730
  6156   00287A  0E69               	movlw	105
  6157   00287C  5C47               	subwf	decision@hue^0,w,c
  6158   00287E  A0D8               	btfss	status,0,c
  6159   002880  EF44  F014         	goto	u4731
  6160   002884  EF46  F014         	goto	u4730
  6161   002888                     u4731:
  6162   002888  EF61  F014         	goto	l5373
  6163   00288C                     u4730:
  6164   00288C  5048               	movf	(decision@hue+1)^0,w,c
  6165   00288E  E107               	bnz	u4741
  6166   002890  0E83               	movlw	131
  6167   002892  5C47               	subwf	decision@hue^0,w,c
  6168   002894  B0D8               	btfsc	status,0,c
  6169   002896  EF4F  F014         	goto	u4741
  6170   00289A  EF51  F014         	goto	u4740
  6171   00289E                     u4741:
  6172   00289E  EF61  F014         	goto	l5373
  6173   0028A2                     u4740:
  6174   0028A2                     
  6175                           ;color.c: 303:         moveGreen(&motorL, &motorR, path_length);
  6176   0028A2  0EF6               	movlw	low _motorL
  6177   0028A4  6E1D               	movwf	moveGreen@mL^0,c
  6178   0028A6  0EED               	movlw	low _motorR
  6179   0028A8  6E1E               	movwf	moveGreen@mR^0,c
  6180   0028AA  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6181   0028AE  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6182   0028B2  ECBC  F01F         	call	_moveGreen	;wreg free
  6183   0028B6                     
  6184                           ;color.c: 304:         color = 2;
  6185   0028B6  0E00               	movlw	0
  6186   0028B8  6E4C               	movwf	(decision@color+1)^0,c
  6187   0028BA  0E02               	movlw	2
  6188   0028BC  6E4B               	movwf	decision@color^0,c
  6189                           
  6190                           ;color.c: 305:     } else if (hue>=230 && hue<=240){
  6191   0028BE  EF1F  F015         	goto	l5413
  6192   0028C2                     l5373:
  6193   0028C2  5048               	movf	(decision@hue+1)^0,w,c
  6194   0028C4  E109               	bnz	u4750
  6195   0028C6  0EE6               	movlw	230
  6196   0028C8  5C47               	subwf	decision@hue^0,w,c
  6197   0028CA  A0D8               	btfss	status,0,c
  6198   0028CC  EF6A  F014         	goto	u4751
  6199   0028D0  EF6C  F014         	goto	u4750
  6200   0028D4                     u4751:
  6201   0028D4  EF87  F014         	goto	l5381
  6202   0028D8                     u4750:
  6203   0028D8  5048               	movf	(decision@hue+1)^0,w,c
  6204   0028DA  E107               	bnz	u4761
  6205   0028DC  0EF1               	movlw	241
  6206   0028DE  5C47               	subwf	decision@hue^0,w,c
  6207   0028E0  B0D8               	btfsc	status,0,c
  6208   0028E2  EF75  F014         	goto	u4761
  6209   0028E6  EF77  F014         	goto	u4760
  6210   0028EA                     u4761:
  6211   0028EA  EF87  F014         	goto	l5381
  6212   0028EE                     u4760:
  6213   0028EE                     
  6214                           ;color.c: 306:         moveBlue(&motorL,&motorR, path_length);
  6215   0028EE  0EF6               	movlw	low _motorL
  6216   0028F0  6E1D               	movwf	moveBlue@mL^0,c
  6217   0028F2  0EED               	movlw	low _motorR
  6218   0028F4  6E1E               	movwf	moveBlue@mR^0,c
  6219   0028F6  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6220   0028FA  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6221   0028FE  ECE0  F01F         	call	_moveBlue	;wreg free
  6222   002902                     
  6223                           ;color.c: 307:         color = 3;
  6224   002902  0E00               	movlw	0
  6225   002904  6E4C               	movwf	(decision@color+1)^0,c
  6226   002906  0E03               	movlw	3
  6227   002908  6E4B               	movwf	decision@color^0,c
  6228                           
  6229                           ;color.c: 308:     } else if (hue>=216 && hue<=221){
  6230   00290A  EF1F  F015         	goto	l5413
  6231   00290E                     l5381:
  6232   00290E  5048               	movf	(decision@hue+1)^0,w,c
  6233   002910  E109               	bnz	u4770
  6234   002912  0ED8               	movlw	216
  6235   002914  5C47               	subwf	decision@hue^0,w,c
  6236   002916  A0D8               	btfss	status,0,c
  6237   002918  EF90  F014         	goto	u4771
  6238   00291C  EF92  F014         	goto	u4770
  6239   002920                     u4771:
  6240   002920  EFAD  F014         	goto	l5389
  6241   002924                     u4770:
  6242   002924  5048               	movf	(decision@hue+1)^0,w,c
  6243   002926  E107               	bnz	u4781
  6244   002928  0EDE               	movlw	222
  6245   00292A  5C47               	subwf	decision@hue^0,w,c
  6246   00292C  B0D8               	btfsc	status,0,c
  6247   00292E  EF9B  F014         	goto	u4781
  6248   002932  EF9D  F014         	goto	u4780
  6249   002936                     u4781:
  6250   002936  EFAD  F014         	goto	l5389
  6251   00293A                     u4780:
  6252   00293A                     
  6253                           ;color.c: 309:         moveLightBlue(&motorL,&motorR, path_length);
  6254   00293A  0EF6               	movlw	low _motorL
  6255   00293C  6E1D               	movwf	moveLightBlue@mL^0,c
  6256   00293E  0EED               	movlw	low _motorR
  6257   002940  6E1E               	movwf	moveLightBlue@mR^0,c
  6258   002942  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6259   002946  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6260   00294A  EC98  F01F         	call	_moveLightBlue	;wreg free
  6261   00294E                     
  6262                           ;color.c: 310:         color = 4;
  6263   00294E  0E00               	movlw	0
  6264   002950  6E4C               	movwf	(decision@color+1)^0,c
  6265   002952  0E04               	movlw	4
  6266   002954  6E4B               	movwf	decision@color^0,c
  6267                           
  6268                           ;color.c: 311:     } else if (hue>=302 && hue<=346){
  6269   002956  EF1F  F015         	goto	l5413
  6270   00295A                     l5389:
  6271   00295A  0E2E               	movlw	46
  6272   00295C  5C47               	subwf	decision@hue^0,w,c
  6273   00295E  0E01               	movlw	1
  6274   002960  5848               	subwfb	(decision@hue+1)^0,w,c
  6275   002962  A0D8               	btfss	status,0,c
  6276   002964  EFB6  F014         	goto	u4791
  6277   002968  EFB8  F014         	goto	u4790
  6278   00296C                     u4791:
  6279   00296C  EFD3  F014         	goto	l5397
  6280   002970                     u4790:
  6281   002970  0E5B               	movlw	91
  6282   002972  5C47               	subwf	decision@hue^0,w,c
  6283   002974  0E01               	movlw	1
  6284   002976  5848               	subwfb	(decision@hue+1)^0,w,c
  6285   002978  B0D8               	btfsc	status,0,c
  6286   00297A  EFC1  F014         	goto	u4801
  6287   00297E  EFC3  F014         	goto	u4800
  6288   002982                     u4801:
  6289   002982  EFD3  F014         	goto	l5397
  6290   002986                     u4800:
  6291   002986                     
  6292                           ;color.c: 312:         moveYellow(&motorL,&motorR, path_length);
  6293   002986  0EF6               	movlw	low _motorL
  6294   002988  6E1D               	movwf	moveYellow@mL^0,c
  6295   00298A  0EED               	movlw	low _motorR
  6296   00298C  6E1E               	movwf	moveYellow@mR^0,c
  6297   00298E  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6298   002992  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6299   002996  EC08  F01F         	call	_moveYellow	;wreg free
  6300   00299A                     
  6301                           ;color.c: 313:         color = 5;
  6302   00299A  0E00               	movlw	0
  6303   00299C  6E4C               	movwf	(decision@color+1)^0,c
  6304   00299E  0E05               	movlw	5
  6305   0029A0  6E4B               	movwf	decision@color^0,c
  6306                           
  6307                           ;color.c: 314:     } else if (hue>14 && hue<=35){
  6308   0029A2  EF1F  F015         	goto	l5413
  6309   0029A6                     l5397:
  6310   0029A6  5048               	movf	(decision@hue+1)^0,w,c
  6311   0029A8  E109               	bnz	u4810
  6312   0029AA  0E0F               	movlw	15
  6313   0029AC  5C47               	subwf	decision@hue^0,w,c
  6314   0029AE  A0D8               	btfss	status,0,c
  6315   0029B0  EFDC  F014         	goto	u4811
  6316   0029B4  EFDE  F014         	goto	u4810
  6317   0029B8                     u4811:
  6318   0029B8  EFF9  F014         	goto	l5405
  6319   0029BC                     u4810:
  6320   0029BC  5048               	movf	(decision@hue+1)^0,w,c
  6321   0029BE  E107               	bnz	u4821
  6322   0029C0  0E24               	movlw	36
  6323   0029C2  5C47               	subwf	decision@hue^0,w,c
  6324   0029C4  B0D8               	btfsc	status,0,c
  6325   0029C6  EFE7  F014         	goto	u4821
  6326   0029CA  EFE9  F014         	goto	u4820
  6327   0029CE                     u4821:
  6328   0029CE  EFF9  F014         	goto	l5405
  6329   0029D2                     u4820:
  6330   0029D2                     
  6331                           ;color.c: 315:         moveOrange(&motorL,&motorR, path_length);
  6332   0029D2  0EF6               	movlw	low _motorL
  6333   0029D4  6E1D               	movwf	moveOrange@mL^0,c
  6334   0029D6  0EED               	movlw	low _motorR
  6335   0029D8  6E1E               	movwf	moveOrange@mR^0,c
  6336   0029DA  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6337   0029DE  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6338   0029E2  EC74  F01F         	call	_moveOrange	;wreg free
  6339   0029E6                     
  6340                           ;color.c: 316:         color= 6;
  6341   0029E6  0E00               	movlw	0
  6342   0029E8  6E4C               	movwf	(decision@color+1)^0,c
  6343   0029EA  0E06               	movlw	6
  6344   0029EC  6E4B               	movwf	decision@color^0,c
  6345                           
  6346                           ;color.c: 317:     } else if (hue>=244 && hue<=251){
  6347   0029EE  EF1F  F015         	goto	l5413
  6348   0029F2                     l5405:
  6349   0029F2  5048               	movf	(decision@hue+1)^0,w,c
  6350   0029F4  E109               	bnz	u4830
  6351   0029F6  0EF4               	movlw	244
  6352   0029F8  5C47               	subwf	decision@hue^0,w,c
  6353   0029FA  A0D8               	btfss	status,0,c
  6354   0029FC  EF02  F015         	goto	u4831
  6355   002A00  EF04  F015         	goto	u4830
  6356   002A04                     u4831:
  6357   002A04  EF1F  F015         	goto	l161
  6358   002A08                     u4830:
  6359   002A08  5048               	movf	(decision@hue+1)^0,w,c
  6360   002A0A  E107               	bnz	u4841
  6361   002A0C  0EFC               	movlw	252
  6362   002A0E  5C47               	subwf	decision@hue^0,w,c
  6363   002A10  B0D8               	btfsc	status,0,c
  6364   002A12  EF0D  F015         	goto	u4841
  6365   002A16  EF0F  F015         	goto	u4840
  6366   002A1A                     u4841:
  6367   002A1A  EF1F  F015         	goto	l161
  6368   002A1E                     u4840:
  6369   002A1E                     
  6370                           ;color.c: 318:         movePink(&motorL,&motorR, path_length);
  6371   002A1E  0EF6               	movlw	low _motorL
  6372   002A20  6E1D               	movwf	movePink@mL^0,c
  6373   002A22  0EED               	movlw	low _motorR
  6374   002A24  6E1E               	movwf	movePink@mR^0,c
  6375   002A26  C049  F01F         	movff	decision@path_length,movePink@path_length
  6376   002A2A  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6377   002A2E  EC50  F01F         	call	_movePink	;wreg free
  6378   002A32                     
  6379                           ;color.c: 319:         color = 7;
  6380   002A32  0E00               	movlw	0
  6381   002A34  6E4C               	movwf	(decision@color+1)^0,c
  6382   002A36  0E07               	movlw	7
  6383   002A38  6E4B               	movwf	decision@color^0,c
  6384   002A3A  EF1F  F015         	goto	l5413
  6385   002A3E                     l161:
  6386   002A3E                     l5413:
  6387                           
  6388                           ;color.c: 322:     send2USART(color);
  6389   002A3E  C04B  F045         	movff	decision@color,send2USART@hue
  6390   002A42  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6391   002A46  EC6A  F022         	call	_send2USART	;wreg free
  6392   002A4A  0012               	return		;funcret
  6393   002A4C                     __end_of_decision:
  6394                           	callstack 0
  6395                           
  6396 ;; *************** function _send2USART *****************
  6397 ;; Defined at:
  6398 ;;		line 146 in file "serial.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  hue             2   68[COMRAM] unsigned int 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6413 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;Total ram usage:       52 bytes
  6417 ;; Hardware stack levels used: 1
  6418 ;; Hardware stack levels required when called: 9
  6419 ;; This function calls:
  6420 ;;		_sendStringSerial4
  6421 ;;		_sprintf
  6422 ;; This function is called by:
  6423 ;;		_decision
  6424 ;;		_main
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text20
  6429   0044D4                     __ptext20:
  6430                           	callstack 0
  6431   0044D4                     _send2USART:
  6432                           	callstack 21
  6433   0044D4                     
  6434                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6435   0044D4  0E60               	movlw	low send2USART@hue_char
  6436   0044D6  6E32               	movwf	sprintf@s^0,c
  6437   0044D8  0EBD               	movlw	low STR_14
  6438   0044DA  6E33               	movwf	sprintf@fmt^0,c
  6439   0044DC  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6440   0044E0  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6441   0044E4  EC03  F021         	call	_sprintf	;wreg free
  6442   0044E8                     
  6443                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6444   0044E8  0E60               	movlw	low send2USART@hue_char
  6445   0044EA  6E03               	movwf	sendStringSerial4@string^0,c
  6446   0044EC  ECCD  F021         	call	_sendStringSerial4	;wreg free
  6447   0044F0  0012               	return		;funcret
  6448   0044F2                     __end_of_send2USART:
  6449                           	callstack 0
  6450                           
  6451 ;; *************** function _moveYellow *****************
  6452 ;; Defined at:
  6453 ;;		line 282 in file "dc_motor.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6456 ;;		 -> motorL(9), 
  6457 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6458 ;;		 -> motorR(9), 
  6459 ;;  path_length     2   30[COMRAM] unsigned int 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6471 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6474 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;Total ram usage:        6 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 5
  6478 ;; This function calls:
  6479 ;;		_backOneAndHalf
  6480 ;;		_logAction
  6481 ;;		_right90
  6482 ;; This function is called by:
  6483 ;;		_decision
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text21
  6488   003E10                     __ptext21:
  6489                           	callstack 0
  6490   003E10                     _moveYellow:
  6491                           	callstack 24
  6492   003E10                     
  6493                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6494   003E10  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6495   003E14  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6496   003E18  EC50  F021         	call	_backOneAndHalf	;wreg free
  6497   003E1C                     
  6498                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6499   003E1C  0E29               	movlw	41
  6500   003E1E  6E22               	movwf	(??_moveYellow+1)^0,c
  6501   003E20  0E96               	movlw	150
  6502   003E22  6E21               	movwf	??_moveYellow^0,c
  6503   003E24  0E7F               	movlw	127
  6504   003E26                     u4997:
  6505   003E26  2EE8               	decfsz	wreg,f,c
  6506   003E28  D7FE               	bra	u4997
  6507   003E2A  2E21               	decfsz	??_moveYellow^0,f,c
  6508   003E2C  D7FC               	bra	u4997
  6509   003E2E  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6510   003E30  D7FA               	bra	u4997
  6511   003E32  0000               	nop	
  6512   003E34                     
  6513                           ;dc_motor.c: 287:     right90(mL,mR);
  6514   003E34  C01D  F019         	movff	moveYellow@mL,right90@mL
  6515   003E38  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6516   003E3C  EC37  F021         	call	_right90	;wreg free
  6517   003E40                     
  6518                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6519   003E40  0E00               	movlw	0
  6520   003E42  6E09               	movwf	(logAction@time+1)^0,c
  6521   003E44  0E00               	movlw	0
  6522   003E46  6E08               	movwf	logAction@time^0,c
  6523   003E48  C01F  F00A         	movff	moveYellow@path_length,logAction@pathLength
  6524   003E4C  C020  F00B         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6525   003E50  0E52               	movlw	82
  6526   003E52  EC33  F01E         	call	_logAction
  6527   003E56  0012               	return		;funcret
  6528   003E58                     __end_of_moveYellow:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function _moveRed *****************
  6532 ;; Defined at:
  6533 ;;		line 255 in file "dc_motor.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6536 ;;		 -> motorL(9), 
  6537 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6538 ;;		 -> motorR(9), 
  6539 ;;  path_length     2   30[COMRAM] unsigned int 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;		None
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      void 
  6544 ;; Registers used:
  6545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;Total ram usage:        6 bytes
  6556 ;; Hardware stack levels used: 1
  6557 ;; Hardware stack levels required when called: 5
  6558 ;; This function calls:
  6559 ;;		_backHalf
  6560 ;;		_logAction
  6561 ;;		_right90
  6562 ;; This function is called by:
  6563 ;;		_decision
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text22
  6568   003E58                     __ptext22:
  6569                           	callstack 0
  6570   003E58                     _moveRed:
  6571                           	callstack 24
  6572   003E58                     
  6573                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6574   003E58  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6575   003E5C  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6576   003E60  ECE6  F021         	call	_backHalf	;wreg free
  6577   003E64                     
  6578                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6579   003E64  0E29               	movlw	41
  6580   003E66  6E22               	movwf	(??_moveRed+1)^0,c
  6581   003E68  0E96               	movlw	150
  6582   003E6A  6E21               	movwf	??_moveRed^0,c
  6583   003E6C  0E7F               	movlw	127
  6584   003E6E                     u5007:
  6585   003E6E  2EE8               	decfsz	wreg,f,c
  6586   003E70  D7FE               	bra	u5007
  6587   003E72  2E21               	decfsz	??_moveRed^0,f,c
  6588   003E74  D7FC               	bra	u5007
  6589   003E76  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6590   003E78  D7FA               	bra	u5007
  6591   003E7A  0000               	nop	
  6592   003E7C                     
  6593                           ;dc_motor.c: 260:     right90(mL,mR);
  6594   003E7C  C01D  F019         	movff	moveRed@mL,right90@mL
  6595   003E80  C01E  F01A         	movff	moveRed@mR,right90@mR
  6596   003E84  EC37  F021         	call	_right90	;wreg free
  6597   003E88                     
  6598                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6599   003E88  0E00               	movlw	0
  6600   003E8A  6E09               	movwf	(logAction@time+1)^0,c
  6601   003E8C  0E00               	movlw	0
  6602   003E8E  6E08               	movwf	logAction@time^0,c
  6603   003E90  C01F  F00A         	movff	moveRed@path_length,logAction@pathLength
  6604   003E94  C020  F00B         	movff	moveRed@path_length+1,logAction@pathLength+1
  6605   003E98  0E52               	movlw	82
  6606   003E9A  EC33  F01E         	call	_logAction
  6607   003E9E  0012               	return		;funcret
  6608   003EA0                     __end_of_moveRed:
  6609                           	callstack 0
  6610                           
  6611 ;; *************** function _right90 *****************
  6612 ;; Defined at:
  6613 ;;		line 193 in file "dc_motor.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6616 ;;		 -> motorL(9), 
  6617 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6618 ;;		 -> motorR(9), 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6633 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6634 ;;Total ram usage:        4 bytes
  6635 ;; Hardware stack levels used: 1
  6636 ;; Hardware stack levels required when called: 4
  6637 ;; This function calls:
  6638 ;;		_stop
  6639 ;;		_turnRight
  6640 ;; This function is called by:
  6641 ;;		_moveRed
  6642 ;;		_moveYellow
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text23
  6647   00426E                     __ptext23:
  6648                           	callstack 0
  6649   00426E                     _right90:
  6650                           	callstack 24
  6651   00426E                     
  6652                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6653   00426E  C019  F014         	movff	right90@mL,turnRight@mL
  6654   004272  C01A  F015         	movff	right90@mR,turnRight@mR
  6655   004276  EC03  F01D         	call	_turnRight	;wreg free
  6656   00427A                     
  6657                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6658   00427A  0E16               	movlw	22
  6659   00427C  6E1C               	movwf	(??_right90+1)^0,c
  6660   00427E  0E1B               	movlw	27
  6661   004280  6E1B               	movwf	??_right90^0,c
  6662   004282  0E88               	movlw	136
  6663   004284                     u5017:
  6664   004284  2EE8               	decfsz	wreg,f,c
  6665   004286  D7FE               	bra	u5017
  6666   004288  2E1B               	decfsz	??_right90^0,f,c
  6667   00428A  D7FC               	bra	u5017
  6668   00428C  2E1C               	decfsz	(??_right90+1)^0,f,c
  6669   00428E  D7FA               	bra	u5017
  6670   004290  D000               	nop2	
  6671   004292                     
  6672                           ;dc_motor.c: 197:     stop(mL,mR);
  6673   004292  C019  F014         	movff	right90@mL,stop@mL
  6674   004296  C01A  F015         	movff	right90@mR,stop@mR
  6675   00429A  ECBC  F01C         	call	_stop	;wreg free
  6676   00429E  0012               	return		;funcret
  6677   0042A0                     __end_of_right90:
  6678                           	callstack 0
  6679                           
  6680 ;; *************** function _movePink *****************
  6681 ;; Defined at:
  6682 ;;		line 291 in file "dc_motor.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6685 ;;		 -> motorL(9), 
  6686 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6687 ;;		 -> motorR(9), 
  6688 ;;  path_length     2   30[COMRAM] unsigned int 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6703 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;Total ram usage:        6 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 5
  6707 ;; This function calls:
  6708 ;;		_backOneAndHalf
  6709 ;;		_left90
  6710 ;;		_logAction
  6711 ;; This function is called by:
  6712 ;;		_decision
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text24
  6717   003EA0                     __ptext24:
  6718                           	callstack 0
  6719   003EA0                     _movePink:
  6720                           	callstack 24
  6721   003EA0                     
  6722                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6723   003EA0  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6724   003EA4  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6725   003EA8  EC50  F021         	call	_backOneAndHalf	;wreg free
  6726   003EAC                     
  6727                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6728   003EAC  0E29               	movlw	41
  6729   003EAE  6E22               	movwf	(??_movePink+1)^0,c
  6730   003EB0  0E96               	movlw	150
  6731   003EB2  6E21               	movwf	??_movePink^0,c
  6732   003EB4  0E7F               	movlw	127
  6733   003EB6                     u5027:
  6734   003EB6  2EE8               	decfsz	wreg,f,c
  6735   003EB8  D7FE               	bra	u5027
  6736   003EBA  2E21               	decfsz	??_movePink^0,f,c
  6737   003EBC  D7FC               	bra	u5027
  6738   003EBE  2E22               	decfsz	(??_movePink+1)^0,f,c
  6739   003EC0  D7FA               	bra	u5027
  6740   003EC2  0000               	nop	
  6741   003EC4                     
  6742                           ;dc_motor.c: 296:     left90(mL,mR);
  6743   003EC4  C01D  F019         	movff	movePink@mL,left90@mL
  6744   003EC8  C01E  F01A         	movff	movePink@mR,left90@mR
  6745   003ECC  EC9B  F021         	call	_left90	;wreg free
  6746   003ED0                     
  6747                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6748   003ED0  0E00               	movlw	0
  6749   003ED2  6E09               	movwf	(logAction@time+1)^0,c
  6750   003ED4  0E00               	movlw	0
  6751   003ED6  6E08               	movwf	logAction@time^0,c
  6752   003ED8  C01F  F00A         	movff	movePink@path_length,logAction@pathLength
  6753   003EDC  C020  F00B         	movff	movePink@path_length+1,logAction@pathLength+1
  6754   003EE0  0E4C               	movlw	76
  6755   003EE2  EC33  F01E         	call	_logAction
  6756   003EE6  0012               	return		;funcret
  6757   003EE8                     __end_of_movePink:
  6758                           	callstack 0
  6759                           
  6760 ;; *************** function _backOneAndHalf *****************
  6761 ;; Defined at:
  6762 ;;		line 241 in file "dc_motor.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6765 ;;		 -> motorL(9), 
  6766 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6767 ;;		 -> motorR(9), 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6782 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6783 ;;Total ram usage:        4 bytes
  6784 ;; Hardware stack levels used: 1
  6785 ;; Hardware stack levels required when called: 4
  6786 ;; This function calls:
  6787 ;;		_fullSpeedBack
  6788 ;;		_stop
  6789 ;; This function is called by:
  6790 ;;		_moveYellow
  6791 ;;		_movePink
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text25
  6796   0042A0                     __ptext25:
  6797                           	callstack 0
  6798   0042A0                     _backOneAndHalf:
  6799                           	callstack 24
  6800   0042A0                     
  6801                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6802   0042A0  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6803   0042A4  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6804   0042A8  ECBE  F01D         	call	_fullSpeedBack	;wreg free
  6805   0042AC                     
  6806                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6807   0042AC  0E6A               	movlw	106
  6808   0042AE  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6809   0042B0  0E85               	movlw	133
  6810   0042B2  6E1B               	movwf	??_backOneAndHalf^0,c
  6811   0042B4  0EB4               	movlw	180
  6812   0042B6                     u5037:
  6813   0042B6  2EE8               	decfsz	wreg,f,c
  6814   0042B8  D7FE               	bra	u5037
  6815   0042BA  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6816   0042BC  D7FC               	bra	u5037
  6817   0042BE  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6818   0042C0  D7FA               	bra	u5037
  6819   0042C2  D000               	nop2	
  6820   0042C4                     
  6821                           ;dc_motor.c: 245:     stop(mL,mR);
  6822   0042C4  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6823   0042C8  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6824   0042CC  ECBC  F01C         	call	_stop	;wreg free
  6825   0042D0  0012               	return		;funcret
  6826   0042D2                     __end_of_backOneAndHalf:
  6827                           	callstack 0
  6828                           
  6829 ;; *************** function _moveOrange *****************
  6830 ;; Defined at:
  6831 ;;		line 300 in file "dc_motor.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6834 ;;		 -> motorL(9), 
  6835 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6836 ;;		 -> motorR(9), 
  6837 ;;  path_length     2   30[COMRAM] unsigned int 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6849 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;Total ram usage:        6 bytes
  6854 ;; Hardware stack levels used: 1
  6855 ;; Hardware stack levels required when called: 5
  6856 ;; This function calls:
  6857 ;;		_backHalf
  6858 ;;		_logAction
  6859 ;;		_right135
  6860 ;; This function is called by:
  6861 ;;		_decision
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text26
  6866   003EE8                     __ptext26:
  6867                           	callstack 0
  6868   003EE8                     _moveOrange:
  6869                           	callstack 24
  6870   003EE8                     
  6871                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6872   003EE8  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6873   003EEC  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6874   003EF0  ECE6  F021         	call	_backHalf	;wreg free
  6875   003EF4                     
  6876                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6877   003EF4  0E29               	movlw	41
  6878   003EF6  6E22               	movwf	(??_moveOrange+1)^0,c
  6879   003EF8  0E96               	movlw	150
  6880   003EFA  6E21               	movwf	??_moveOrange^0,c
  6881   003EFC  0E7F               	movlw	127
  6882   003EFE                     u5047:
  6883   003EFE  2EE8               	decfsz	wreg,f,c
  6884   003F00  D7FE               	bra	u5047
  6885   003F02  2E21               	decfsz	??_moveOrange^0,f,c
  6886   003F04  D7FC               	bra	u5047
  6887   003F06  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6888   003F08  D7FA               	bra	u5047
  6889   003F0A  0000               	nop	
  6890   003F0C                     
  6891                           ;dc_motor.c: 305:     right135(mL,mR);
  6892   003F0C  C01D  F019         	movff	moveOrange@mL,right135@mL
  6893   003F10  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6894   003F14  EC69  F021         	call	_right135	;wreg free
  6895   003F18                     
  6896                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6897   003F18  0E00               	movlw	0
  6898   003F1A  6E09               	movwf	(logAction@time+1)^0,c
  6899   003F1C  0E00               	movlw	0
  6900   003F1E  6E08               	movwf	logAction@time^0,c
  6901   003F20  C01F  F00A         	movff	moveOrange@path_length,logAction@pathLength
  6902   003F24  C020  F00B         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6903   003F28  0E52               	movlw	82
  6904   003F2A  EC33  F01E         	call	_logAction
  6905   003F2E  0012               	return		;funcret
  6906   003F30                     __end_of_moveOrange:
  6907                           	callstack 0
  6908                           
  6909 ;; *************** function _right135 *****************
  6910 ;; Defined at:
  6911 ;;		line 217 in file "dc_motor.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6914 ;;		 -> motorL(9), 
  6915 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6916 ;;		 -> motorR(9), 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6931 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6932 ;;Total ram usage:        4 bytes
  6933 ;; Hardware stack levels used: 1
  6934 ;; Hardware stack levels required when called: 4
  6935 ;; This function calls:
  6936 ;;		_stop
  6937 ;;		_turnRight
  6938 ;; This function is called by:
  6939 ;;		_moveOrange
  6940 ;;		_reverseTurn
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text27
  6945   0042D2                     __ptext27:
  6946                           	callstack 0
  6947   0042D2                     _right135:
  6948                           	callstack 24
  6949   0042D2                     
  6950                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6951   0042D2  C019  F014         	movff	right135@mL,turnRight@mL
  6952   0042D6  C01A  F015         	movff	right135@mR,turnRight@mR
  6953   0042DA  EC03  F01D         	call	_turnRight	;wreg free
  6954   0042DE                     
  6955                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6956   0042DE  0E21               	movlw	33
  6957   0042E0  6E1C               	movwf	(??_right135+1)^0,c
  6958   0042E2  0E78               	movlw	120
  6959   0042E4  6E1B               	movwf	??_right135^0,c
  6960   0042E6  0E98               	movlw	152
  6961   0042E8                     u5057:
  6962   0042E8  2EE8               	decfsz	wreg,f,c
  6963   0042EA  D7FE               	bra	u5057
  6964   0042EC  2E1B               	decfsz	??_right135^0,f,c
  6965   0042EE  D7FC               	bra	u5057
  6966   0042F0  2E1C               	decfsz	(??_right135+1)^0,f,c
  6967   0042F2  D7FA               	bra	u5057
  6968   0042F4  D000               	nop2	
  6969   0042F6                     
  6970                           ;dc_motor.c: 221:     stop(mL,mR);
  6971   0042F6  C019  F014         	movff	right135@mL,stop@mL
  6972   0042FA  C01A  F015         	movff	right135@mR,stop@mR
  6973   0042FE  ECBC  F01C         	call	_stop	;wreg free
  6974   004302  0012               	return		;funcret
  6975   004304                     __end_of_right135:
  6976                           	callstack 0
  6977                           
  6978 ;; *************** function _turnRight *****************
  6979 ;; Defined at:
  6980 ;;		line 125 in file "dc_motor.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  6983 ;;		 -> motorL(9), 
  6984 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  6985 ;;		 -> motorR(9), 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  i               2   22[COMRAM] unsigned int 
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      void 
  6990 ;; Registers used:
  6991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7000 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7001 ;;Total ram usage:        5 bytes
  7002 ;; Hardware stack levels used: 1
  7003 ;; Hardware stack levels required when called: 3
  7004 ;; This function calls:
  7005 ;;		_setMotorPWM
  7006 ;; This function is called by:
  7007 ;;		_right90
  7008 ;;		_right135
  7009 ;;		_reverseTurn
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text28
  7014   003A06                     __ptext28:
  7015                           	callstack 0
  7016   003A06                     _turnRight:
  7017                           	callstack 25
  7018   003A06                     
  7019                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7020   003A06  5014               	movf	turnRight@mL^0,w,c
  7021   003A08  6ED9               	movwf	fsr2l,c
  7022   003A0A  6ADA               	clrf	fsr2h,c
  7023   003A0C  0E01               	movlw	1
  7024   003A0E  26D9               	addwf	fsr2l,f,c
  7025   003A10  0E01               	movlw	1
  7026   003A12  6EDF               	movwf	indf2,c
  7027                           
  7028                           ;dc_motor.c: 129:     mR->direction = 0;
  7029   003A14  5015               	movf	turnRight@mR^0,w,c
  7030   003A16  6ED9               	movwf	fsr2l,c
  7031   003A18  6ADA               	clrf	fsr2h,c
  7032   003A1A  0E01               	movlw	1
  7033   003A1C  26D9               	addwf	fsr2l,f,c
  7034   003A1E  6ADF               	clrf	indf2,c
  7035   003A20                     
  7036                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7037   003A20  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7038   003A24  EC80  F017         	call	_setMotorPWM	;wreg free
  7039   003A28                     
  7040                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7041   003A28  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7042   003A2C  EC80  F017         	call	_setMotorPWM	;wreg free
  7043   003A30                     
  7044                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7045   003A30  0E00               	movlw	0
  7046   003A32  6E18               	movwf	(turnRight@i+1)^0,c
  7047   003A34  0E00               	movlw	0
  7048   003A36  6E17               	movwf	turnRight@i^0,c
  7049   003A38                     l3639:
  7050                           
  7051                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7052   003A38  5014               	movf	turnRight@mL^0,w,c
  7053   003A3A  6ED9               	movwf	fsr2l,c
  7054   003A3C  6ADA               	clrf	fsr2h,c
  7055   003A3E  2ADF               	incf	indf2,f,c
  7056                           
  7057                           ;dc_motor.c: 136:         mR->power++;
  7058   003A40  5015               	movf	turnRight@mR^0,w,c
  7059   003A42  6ED9               	movwf	fsr2l,c
  7060   003A44  6ADA               	clrf	fsr2h,c
  7061   003A46  2ADF               	incf	indf2,f,c
  7062   003A48                     
  7063                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7064   003A48  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7065   003A4C  EC80  F017         	call	_setMotorPWM	;wreg free
  7066   003A50                     
  7067                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7068   003A50  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7069   003A54  EC80  F017         	call	_setMotorPWM	;wreg free
  7070   003A58                     
  7071                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7072   003A58  0E0B               	movlw	11
  7073   003A5A  6E16               	movwf	??_turnRight^0,c
  7074   003A5C  0E62               	movlw	98
  7075   003A5E                     u5067:
  7076   003A5E  2EE8               	decfsz	wreg,f,c
  7077   003A60  D7FE               	bra	u5067
  7078   003A62  2E16               	decfsz	??_turnRight^0,f,c
  7079   003A64  D7FC               	bra	u5067
  7080   003A66  D000               	nop2	
  7081   003A68                     
  7082                           ;dc_motor.c: 140:     }
  7083   003A68  4A17               	infsnz	turnRight@i^0,f,c
  7084   003A6A  2A18               	incf	(turnRight@i+1)^0,f,c
  7085   003A6C  5018               	movf	(turnRight@i+1)^0,w,c
  7086   003A6E  E109               	bnz	u2750
  7087   003A70  0E32               	movlw	50
  7088   003A72  5C17               	subwf	turnRight@i^0,w,c
  7089   003A74  A0D8               	btfss	status,0,c
  7090   003A76  EF3F  F01D         	goto	u2751
  7091   003A7A  EF41  F01D         	goto	u2750
  7092   003A7E                     u2751:
  7093   003A7E  EF1C  F01D         	goto	l3639
  7094   003A82                     u2750:
  7095   003A82  0012               	return		;funcret
  7096   003A84                     __end_of_turnRight:
  7097                           	callstack 0
  7098                           
  7099 ;; *************** function _moveLightBlue *****************
  7100 ;; Defined at:
  7101 ;;		line 309 in file "dc_motor.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7104 ;;		 -> motorL(9), 
  7105 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7106 ;;		 -> motorR(9), 
  7107 ;;  path_length     2   30[COMRAM] unsigned int 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;		None
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      void 
  7112 ;; Registers used:
  7113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7122 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7123 ;;Total ram usage:        6 bytes
  7124 ;; Hardware stack levels used: 1
  7125 ;; Hardware stack levels required when called: 5
  7126 ;; This function calls:
  7127 ;;		_backHalf
  7128 ;;		_left135
  7129 ;;		_logAction
  7130 ;; This function is called by:
  7131 ;;		_decision
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text29
  7136   003F30                     __ptext29:
  7137                           	callstack 0
  7138   003F30                     _moveLightBlue:
  7139                           	callstack 24
  7140   003F30                     
  7141                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7142   003F30  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7143   003F34  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7144   003F38  ECE6  F021         	call	_backHalf	;wreg free
  7145   003F3C                     
  7146                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7147   003F3C  0E29               	movlw	41
  7148   003F3E  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7149   003F40  0E96               	movlw	150
  7150   003F42  6E21               	movwf	??_moveLightBlue^0,c
  7151   003F44  0E7F               	movlw	127
  7152   003F46                     u5077:
  7153   003F46  2EE8               	decfsz	wreg,f,c
  7154   003F48  D7FE               	bra	u5077
  7155   003F4A  2E21               	decfsz	??_moveLightBlue^0,f,c
  7156   003F4C  D7FC               	bra	u5077
  7157   003F4E  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7158   003F50  D7FA               	bra	u5077
  7159   003F52  0000               	nop	
  7160   003F54                     
  7161                           ;dc_motor.c: 314:     left135(mL,mR);
  7162   003F54  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7163   003F58  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7164   003F5C  EC82  F021         	call	_left135	;wreg free
  7165   003F60                     
  7166                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7167   003F60  0E00               	movlw	0
  7168   003F62  6E09               	movwf	(logAction@time+1)^0,c
  7169   003F64  0E00               	movlw	0
  7170   003F66  6E08               	movwf	logAction@time^0,c
  7171   003F68  C01F  F00A         	movff	moveLightBlue@path_length,logAction@pathLength
  7172   003F6C  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7173   003F70  0E4C               	movlw	76
  7174   003F72  EC33  F01E         	call	_logAction
  7175   003F76  0012               	return		;funcret
  7176   003F78                     __end_of_moveLightBlue:
  7177                           	callstack 0
  7178                           
  7179 ;; *************** function _left135 *****************
  7180 ;; Defined at:
  7181 ;;		line 225 in file "dc_motor.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7184 ;;		 -> motorL(9), 
  7185 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7186 ;;		 -> motorR(9), 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  1    wreg      void 
  7191 ;; Registers used:
  7192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7200 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7201 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7202 ;;Total ram usage:        4 bytes
  7203 ;; Hardware stack levels used: 1
  7204 ;; Hardware stack levels required when called: 4
  7205 ;; This function calls:
  7206 ;;		_stop
  7207 ;;		_turnLeft
  7208 ;; This function is called by:
  7209 ;;		_moveLightBlue
  7210 ;;		_reverseTurn
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text30
  7215   004304                     __ptext30:
  7216                           	callstack 0
  7217   004304                     _left135:
  7218                           	callstack 24
  7219   004304                     
  7220                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7221   004304  C019  F014         	movff	left135@mL,turnLeft@mL
  7222   004308  C01A  F015         	movff	left135@mR,turnLeft@mR
  7223   00430C  EC42  F01D         	call	_turnLeft	;wreg free
  7224   004310                     
  7225                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7226   004310  0E21               	movlw	33
  7227   004312  6E1C               	movwf	(??_left135+1)^0,c
  7228   004314  0E78               	movlw	120
  7229   004316  6E1B               	movwf	??_left135^0,c
  7230   004318  0E98               	movlw	152
  7231   00431A                     u5087:
  7232   00431A  2EE8               	decfsz	wreg,f,c
  7233   00431C  D7FE               	bra	u5087
  7234   00431E  2E1B               	decfsz	??_left135^0,f,c
  7235   004320  D7FC               	bra	u5087
  7236   004322  2E1C               	decfsz	(??_left135+1)^0,f,c
  7237   004324  D7FA               	bra	u5087
  7238   004326  D000               	nop2	
  7239   004328                     
  7240                           ;dc_motor.c: 229:     stop(mL,mR);
  7241   004328  C019  F014         	movff	left135@mL,stop@mL
  7242   00432C  C01A  F015         	movff	left135@mR,stop@mR
  7243   004330  ECBC  F01C         	call	_stop	;wreg free
  7244   004334  0012               	return		;funcret
  7245   004336                     __end_of_left135:
  7246                           	callstack 0
  7247                           
  7248 ;; *************** function _moveGreen *****************
  7249 ;; Defined at:
  7250 ;;		line 264 in file "dc_motor.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7253 ;;		 -> motorL(9), 
  7254 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7255 ;;		 -> motorR(9), 
  7256 ;;  path_length     2   30[COMRAM] unsigned int 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;		None
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      void 
  7261 ;; Registers used:
  7262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7271 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7272 ;;Total ram usage:        6 bytes
  7273 ;; Hardware stack levels used: 1
  7274 ;; Hardware stack levels required when called: 5
  7275 ;; This function calls:
  7276 ;;		_backHalf
  7277 ;;		_left90
  7278 ;;		_logAction
  7279 ;; This function is called by:
  7280 ;;		_decision
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text31
  7285   003F78                     __ptext31:
  7286                           	callstack 0
  7287   003F78                     _moveGreen:
  7288                           	callstack 24
  7289   003F78                     
  7290                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7291   003F78  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7292   003F7C  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7293   003F80  ECE6  F021         	call	_backHalf	;wreg free
  7294   003F84                     
  7295                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7296   003F84  0E29               	movlw	41
  7297   003F86  6E22               	movwf	(??_moveGreen+1)^0,c
  7298   003F88  0E96               	movlw	150
  7299   003F8A  6E21               	movwf	??_moveGreen^0,c
  7300   003F8C  0E7F               	movlw	127
  7301   003F8E                     u5097:
  7302   003F8E  2EE8               	decfsz	wreg,f,c
  7303   003F90  D7FE               	bra	u5097
  7304   003F92  2E21               	decfsz	??_moveGreen^0,f,c
  7305   003F94  D7FC               	bra	u5097
  7306   003F96  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7307   003F98  D7FA               	bra	u5097
  7308   003F9A  0000               	nop	
  7309   003F9C                     
  7310                           ;dc_motor.c: 269:     left90(mL,mR);
  7311   003F9C  C01D  F019         	movff	moveGreen@mL,left90@mL
  7312   003FA0  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7313   003FA4  EC9B  F021         	call	_left90	;wreg free
  7314   003FA8                     
  7315                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7316   003FA8  0E00               	movlw	0
  7317   003FAA  6E09               	movwf	(logAction@time+1)^0,c
  7318   003FAC  0E00               	movlw	0
  7319   003FAE  6E08               	movwf	logAction@time^0,c
  7320   003FB0  C01F  F00A         	movff	moveGreen@path_length,logAction@pathLength
  7321   003FB4  C020  F00B         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7322   003FB8  0E4C               	movlw	76
  7323   003FBA  EC33  F01E         	call	_logAction
  7324   003FBE  0012               	return		;funcret
  7325   003FC0                     __end_of_moveGreen:
  7326                           	callstack 0
  7327                           
  7328 ;; *************** function _left90 *****************
  7329 ;; Defined at:
  7330 ;;		line 201 in file "dc_motor.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7333 ;;		 -> motorL(9), 
  7334 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7335 ;;		 -> motorR(9), 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      void 
  7340 ;; Registers used:
  7341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7351 ;;Total ram usage:        4 bytes
  7352 ;; Hardware stack levels used: 1
  7353 ;; Hardware stack levels required when called: 4
  7354 ;; This function calls:
  7355 ;;		_stop
  7356 ;;		_turnLeft
  7357 ;; This function is called by:
  7358 ;;		_moveGreen
  7359 ;;		_movePink
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text32
  7364   004336                     __ptext32:
  7365                           	callstack 0
  7366   004336                     _left90:
  7367                           	callstack 24
  7368   004336                     
  7369                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7370   004336  C019  F014         	movff	left90@mL,turnLeft@mL
  7371   00433A  C01A  F015         	movff	left90@mR,turnLeft@mR
  7372   00433E  EC42  F01D         	call	_turnLeft	;wreg free
  7373   004342                     
  7374                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  7375   004342  0E16               	movlw	22
  7376   004344  6E1C               	movwf	(??_left90+1)^0,c
  7377   004346  0E1B               	movlw	27
  7378   004348  6E1B               	movwf	??_left90^0,c
  7379   00434A  0E88               	movlw	136
  7380   00434C                     u5107:
  7381   00434C  2EE8               	decfsz	wreg,f,c
  7382   00434E  D7FE               	bra	u5107
  7383   004350  2E1B               	decfsz	??_left90^0,f,c
  7384   004352  D7FC               	bra	u5107
  7385   004354  2E1C               	decfsz	(??_left90+1)^0,f,c
  7386   004356  D7FA               	bra	u5107
  7387   004358  D000               	nop2	
  7388   00435A                     
  7389                           ;dc_motor.c: 205:     stop(mL,mR);
  7390   00435A  C019  F014         	movff	left90@mL,stop@mL
  7391   00435E  C01A  F015         	movff	left90@mR,stop@mR
  7392   004362  ECBC  F01C         	call	_stop	;wreg free
  7393   004366  0012               	return		;funcret
  7394   004368                     __end_of_left90:
  7395                           	callstack 0
  7396                           
  7397 ;; *************** function _moveBlue *****************
  7398 ;; Defined at:
  7399 ;;		line 273 in file "dc_motor.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7402 ;;		 -> motorL(9), 
  7403 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7404 ;;		 -> motorR(9), 
  7405 ;;  path_length     2   30[COMRAM] unsigned int 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      void 
  7410 ;; Registers used:
  7411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7417 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7420 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;Total ram usage:        6 bytes
  7422 ;; Hardware stack levels used: 1
  7423 ;; Hardware stack levels required when called: 5
  7424 ;; This function calls:
  7425 ;;		_backHalf
  7426 ;;		_logAction
  7427 ;;		_turn180
  7428 ;; This function is called by:
  7429 ;;		_decision
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text33
  7434   003FC0                     __ptext33:
  7435                           	callstack 0
  7436   003FC0                     _moveBlue:
  7437                           	callstack 24
  7438   003FC0                     
  7439                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7440   003FC0  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7441   003FC4  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7442   003FC8  ECE6  F021         	call	_backHalf	;wreg free
  7443   003FCC                     
  7444                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7445   003FCC  0E29               	movlw	41
  7446   003FCE  6E22               	movwf	(??_moveBlue+1)^0,c
  7447   003FD0  0E96               	movlw	150
  7448   003FD2  6E21               	movwf	??_moveBlue^0,c
  7449   003FD4  0E7F               	movlw	127
  7450   003FD6                     u5117:
  7451   003FD6  2EE8               	decfsz	wreg,f,c
  7452   003FD8  D7FE               	bra	u5117
  7453   003FDA  2E21               	decfsz	??_moveBlue^0,f,c
  7454   003FDC  D7FC               	bra	u5117
  7455   003FDE  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7456   003FE0  D7FA               	bra	u5117
  7457   003FE2  0000               	nop	
  7458   003FE4                     
  7459                           ;dc_motor.c: 278:     turn180(mL,mR);
  7460   003FE4  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7461   003FE8  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7462   003FEC  ECB4  F021         	call	_turn180	;wreg free
  7463   003FF0                     
  7464                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7465   003FF0  0E00               	movlw	0
  7466   003FF2  6E09               	movwf	(logAction@time+1)^0,c
  7467   003FF4  0E00               	movlw	0
  7468   003FF6  6E08               	movwf	logAction@time^0,c
  7469   003FF8  C01F  F00A         	movff	moveBlue@path_length,logAction@pathLength
  7470   003FFC  C020  F00B         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7471   004000  0E30               	movlw	48
  7472   004002  EC33  F01E         	call	_logAction
  7473   004006  0012               	return		;funcret
  7474   004008                     __end_of_moveBlue:
  7475                           	callstack 0
  7476                           
  7477 ;; *************** function _turn180 *****************
  7478 ;; Defined at:
  7479 ;;		line 209 in file "dc_motor.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7482 ;;		 -> motorL(9), 
  7483 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7484 ;;		 -> motorR(9), 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;		None
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7496 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7499 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7500 ;;Total ram usage:        4 bytes
  7501 ;; Hardware stack levels used: 1
  7502 ;; Hardware stack levels required when called: 4
  7503 ;; This function calls:
  7504 ;;		_stop
  7505 ;;		_turnLeft
  7506 ;; This function is called by:
  7507 ;;		_moveBlue
  7508 ;;		_reverseTurn
  7509 ;;		_moveWhite
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text34
  7514   004368                     __ptext34:
  7515                           	callstack 0
  7516   004368                     _turn180:
  7517                           	callstack 24
  7518   004368                     
  7519                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7520   004368  C019  F014         	movff	turn180@mL,turnLeft@mL
  7521   00436C  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7522   004370  EC42  F01D         	call	_turnLeft	;wreg free
  7523   004374                     
  7524                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  7525   004374  0E2B               	movlw	43
  7526   004376  6E1C               	movwf	(??_turn180+1)^0,c
  7527   004378  0E36               	movlw	54
  7528   00437A  6E1B               	movwf	??_turn180^0,c
  7529   00437C  0E13               	movlw	19
  7530   00437E                     u5127:
  7531   00437E  2EE8               	decfsz	wreg,f,c
  7532   004380  D7FE               	bra	u5127
  7533   004382  2E1B               	decfsz	??_turn180^0,f,c
  7534   004384  D7FC               	bra	u5127
  7535   004386  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7536   004388  D7FA               	bra	u5127
  7537   00438A  0000               	nop	
  7538   00438C                     
  7539                           ;dc_motor.c: 213:     stop(mL,mR);
  7540   00438C  C019  F014         	movff	turn180@mL,stop@mL
  7541   004390  C01A  F015         	movff	turn180@mR,stop@mR
  7542   004394  ECBC  F01C         	call	_stop	;wreg free
  7543   004398  0012               	return		;funcret
  7544   00439A                     __end_of_turn180:
  7545                           	callstack 0
  7546                           
  7547 ;; *************** function _turnLeft *****************
  7548 ;; Defined at:
  7549 ;;		line 105 in file "dc_motor.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7552 ;;		 -> motorL(9), 
  7553 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7554 ;;		 -> motorR(9), 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  i               2   22[COMRAM] unsigned int 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7569 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7570 ;;Total ram usage:        5 bytes
  7571 ;; Hardware stack levels used: 1
  7572 ;; Hardware stack levels required when called: 3
  7573 ;; This function calls:
  7574 ;;		_setMotorPWM
  7575 ;; This function is called by:
  7576 ;;		_left90
  7577 ;;		_turn180
  7578 ;;		_left135
  7579 ;;		_reverseTurn
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text35
  7584   003A84                     __ptext35:
  7585                           	callstack 0
  7586   003A84                     _turnLeft:
  7587                           	callstack 25
  7588   003A84                     
  7589                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7590   003A84  5014               	movf	turnLeft@mL^0,w,c
  7591   003A86  6ED9               	movwf	fsr2l,c
  7592   003A88  6ADA               	clrf	fsr2h,c
  7593   003A8A  0E01               	movlw	1
  7594   003A8C  26D9               	addwf	fsr2l,f,c
  7595   003A8E  6ADF               	clrf	indf2,c
  7596                           
  7597                           ;dc_motor.c: 109:     mR->direction = 1;
  7598   003A90  5015               	movf	turnLeft@mR^0,w,c
  7599   003A92  6ED9               	movwf	fsr2l,c
  7600   003A94  6ADA               	clrf	fsr2h,c
  7601   003A96  0E01               	movlw	1
  7602   003A98  26D9               	addwf	fsr2l,f,c
  7603   003A9A  0E01               	movlw	1
  7604   003A9C  6EDF               	movwf	indf2,c
  7605   003A9E                     
  7606                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7607   003A9E  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7608   003AA2  EC80  F017         	call	_setMotorPWM	;wreg free
  7609   003AA6                     
  7610                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7611   003AA6  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7612   003AAA  EC80  F017         	call	_setMotorPWM	;wreg free
  7613   003AAE                     
  7614                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7615   003AAE  0E00               	movlw	0
  7616   003AB0  6E18               	movwf	(turnLeft@i+1)^0,c
  7617   003AB2  0E00               	movlw	0
  7618   003AB4  6E17               	movwf	turnLeft@i^0,c
  7619   003AB6                     l3615:
  7620                           
  7621                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7622   003AB6  5014               	movf	turnLeft@mL^0,w,c
  7623   003AB8  6ED9               	movwf	fsr2l,c
  7624   003ABA  6ADA               	clrf	fsr2h,c
  7625   003ABC  2ADF               	incf	indf2,f,c
  7626                           
  7627                           ;dc_motor.c: 116:         mR->power++;
  7628   003ABE  5015               	movf	turnLeft@mR^0,w,c
  7629   003AC0  6ED9               	movwf	fsr2l,c
  7630   003AC2  6ADA               	clrf	fsr2h,c
  7631   003AC4  2ADF               	incf	indf2,f,c
  7632   003AC6                     
  7633                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7634   003AC6  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7635   003ACA  EC80  F017         	call	_setMotorPWM	;wreg free
  7636   003ACE                     
  7637                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7638   003ACE  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7639   003AD2  EC80  F017         	call	_setMotorPWM	;wreg free
  7640   003AD6                     
  7641                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7642   003AD6  0E0B               	movlw	11
  7643   003AD8  6E16               	movwf	??_turnLeft^0,c
  7644   003ADA  0E62               	movlw	98
  7645   003ADC                     u5137:
  7646   003ADC  2EE8               	decfsz	wreg,f,c
  7647   003ADE  D7FE               	bra	u5137
  7648   003AE0  2E16               	decfsz	??_turnLeft^0,f,c
  7649   003AE2  D7FC               	bra	u5137
  7650   003AE4  D000               	nop2	
  7651   003AE6                     
  7652                           ;dc_motor.c: 120:     }
  7653   003AE6  4A17               	infsnz	turnLeft@i^0,f,c
  7654   003AE8  2A18               	incf	(turnLeft@i+1)^0,f,c
  7655   003AEA  5018               	movf	(turnLeft@i+1)^0,w,c
  7656   003AEC  E109               	bnz	u2740
  7657   003AEE  0E32               	movlw	50
  7658   003AF0  5C17               	subwf	turnLeft@i^0,w,c
  7659   003AF2  A0D8               	btfss	status,0,c
  7660   003AF4  EF7E  F01D         	goto	u2741
  7661   003AF8  EF80  F01D         	goto	u2740
  7662   003AFC                     u2741:
  7663   003AFC  EF5B  F01D         	goto	l3615
  7664   003B00                     u2740:
  7665   003B00  0012               	return		;funcret
  7666   003B02                     __end_of_turnLeft:
  7667                           	callstack 0
  7668                           
  7669 ;; *************** function _logAction *****************
  7670 ;; Defined at:
  7671 ;;		line 336 in file "dc_motor.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;  action          1    wreg     unsigned char 
  7674 ;;  time            2    7[COMRAM] int 
  7675 ;;  pathLength      2    9[COMRAM] unsigned int 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  action          1   11[COMRAM] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7690 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7691 ;;Total ram usage:        5 bytes
  7692 ;; Hardware stack levels used: 1
  7693 ;; Hardware stack levels required when called: 2
  7694 ;; This function calls:
  7695 ;;		___wmul
  7696 ;; This function is called by:
  7697 ;;		_main
  7698 ;;		_moveRed
  7699 ;;		_moveGreen
  7700 ;;		_moveBlue
  7701 ;;		_moveYellow
  7702 ;;		_movePink
  7703 ;;		_moveOrange
  7704 ;;		_moveLightBlue
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           	psect	text36
  7709   003C66                     __ptext36:
  7710                           	callstack 0
  7711   003C66                     _logAction:
  7712                           	callstack 28
  7713                           
  7714                           ;incstack = 0
  7715                           ;logAction@action stored from wreg
  7716   003C66  6E0C               	movwf	logAction@action^0,c
  7717   003C68                     
  7718                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7719   003C68  500B               	movf	(logAction@pathLength+1)^0,w,c
  7720   003C6A  E107               	bnz	u3221
  7721   003C6C  0E32               	movlw	50
  7722   003C6E  5C0A               	subwf	logAction@pathLength^0,w,c
  7723   003C70  B0D8               	btfsc	status,0,c
  7724   003C72  EF3D  F01E         	goto	u3221
  7725   003C76  EF3F  F01E         	goto	u3220
  7726   003C7A                     u3221:
  7727   003C7A  EF67  F01E         	goto	l483
  7728   003C7E                     u3220:
  7729   003C7E                     
  7730                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7731   003C7E  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7732   003C82  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7733   003C86  0E00               	movlw	0
  7734   003C88  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7735   003C8A  0E05               	movlw	5
  7736   003C8C  6E04               	movwf	___wmul@multiplicand^0,c
  7737   003C8E  EC27  F022         	call	___wmul	;wreg free
  7738   003C92  0E00               	movlw	low _path
  7739   003C94  2402               	addwf	?___wmul^0,w,c
  7740   003C96  6ED9               	movwf	fsr2l,c
  7741   003C98  0E02               	movlw	high _path
  7742   003C9A  2003               	addwfc	(?___wmul+1)^0,w,c
  7743   003C9C  6EDA               	movwf	fsr2h,c
  7744   003C9E  C00C  FFDF         	movff	logAction@action,indf2
  7745                           
  7746                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7747   003CA2  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7748   003CA6  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7749   003CAA  0E00               	movlw	0
  7750   003CAC  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7751   003CAE  0E05               	movlw	5
  7752   003CB0  6E04               	movwf	___wmul@multiplicand^0,c
  7753   003CB2  EC27  F022         	call	___wmul	;wreg free
  7754   003CB6  0E01               	movlw	low (_path+1)
  7755   003CB8  2402               	addwf	?___wmul^0,w,c
  7756   003CBA  6ED9               	movwf	fsr2l,c
  7757   003CBC  0E02               	movlw	high (_path+1)
  7758   003CBE  2003               	addwfc	(?___wmul+1)^0,w,c
  7759   003CC0  6EDA               	movwf	fsr2h,c
  7760   003CC2  C008  FFDE         	movff	logAction@time,postinc2
  7761   003CC6  C009  FFDD         	movff	logAction@time+1,postdec2
  7762   003CCA                     
  7763                           ;dc_motor.c: 340:         pathLength++;
  7764   003CCA  4A0A               	infsnz	logAction@pathLength^0,f,c
  7765   003CCC  2A0B               	incf	(logAction@pathLength+1)^0,f,c
  7766   003CCE                     l483:
  7767   003CCE  0012               	return		;funcret
  7768   003CD0                     __end_of_logAction:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function _backHalf *****************
  7772 ;; Defined at:
  7773 ;;		line 233 in file "dc_motor.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7776 ;;		 -> motorL(9), 
  7777 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7778 ;;		 -> motorR(9), 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7792 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7793 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;Total ram usage:        4 bytes
  7795 ;; Hardware stack levels used: 1
  7796 ;; Hardware stack levels required when called: 4
  7797 ;; This function calls:
  7798 ;;		_fullSpeedBack
  7799 ;;		_stop
  7800 ;; This function is called by:
  7801 ;;		_moveRed
  7802 ;;		_moveGreen
  7803 ;;		_moveBlue
  7804 ;;		_moveOrange
  7805 ;;		_moveLightBlue
  7806 ;;		_moveWhite
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text37
  7811   0043CC                     __ptext37:
  7812                           	callstack 0
  7813   0043CC                     _backHalf:
  7814                           	callstack 24
  7815   0043CC                     
  7816                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7817   0043CC  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7818   0043D0  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7819   0043D4  ECBE  F01D         	call	_fullSpeedBack	;wreg free
  7820   0043D8                     
  7821                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7822   0043D8  0E19               	movlw	25
  7823   0043DA  6E1C               	movwf	(??_backHalf+1)^0,c
  7824   0043DC  0E5A               	movlw	90
  7825   0043DE  6E1B               	movwf	??_backHalf^0,c
  7826   0043E0  0EB2               	movlw	178
  7827   0043E2                     u5147:
  7828   0043E2  2EE8               	decfsz	wreg,f,c
  7829   0043E4  D7FE               	bra	u5147
  7830   0043E6  2E1B               	decfsz	??_backHalf^0,f,c
  7831   0043E8  D7FC               	bra	u5147
  7832   0043EA  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7833   0043EC  D7FA               	bra	u5147
  7834   0043EE                     
  7835                           ;dc_motor.c: 237:     stop(mL,mR);
  7836   0043EE  C019  F014         	movff	backHalf@mL,stop@mL
  7837   0043F2  C01A  F015         	movff	backHalf@mR,stop@mR
  7838   0043F6  ECBC  F01C         	call	_stop	;wreg free
  7839   0043FA  0012               	return		;funcret
  7840   0043FC                     __end_of_backHalf:
  7841                           	callstack 0
  7842                           
  7843 ;; *************** function _stop *****************
  7844 ;; Defined at:
  7845 ;;		line 88 in file "dc_motor.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7848 ;;		 -> motorL(9), 
  7849 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7850 ;;		 -> motorR(9), 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      void 
  7855 ;; Registers used:
  7856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7865 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7866 ;;Total ram usage:        3 bytes
  7867 ;; Hardware stack levels used: 1
  7868 ;; Hardware stack levels required when called: 3
  7869 ;; This function calls:
  7870 ;;		_setMotorPWM
  7871 ;; This function is called by:
  7872 ;;		_main
  7873 ;;		_right90
  7874 ;;		_left90
  7875 ;;		_turn180
  7876 ;;		_right135
  7877 ;;		_left135
  7878 ;;		_backHalf
  7879 ;;		_backOneAndHalf
  7880 ;;		_reverseStraight
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text38
  7885   003978                     __ptext38:
  7886                           	callstack 0
  7887   003978                     _stop:
  7888                           	callstack 27
  7889   003978                     
  7890                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7891   003978  EFEC  F01C         	goto	l3599
  7892   00397C                     l3585:
  7893                           
  7894                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7895   00397C  5014               	movf	stop@mL^0,w,c
  7896   00397E  6ED9               	movwf	fsr2l,c
  7897   003980  6ADA               	clrf	fsr2h,c
  7898   003982  50DF               	movf	indf2,w,c
  7899   003984  B4D8               	btfsc	status,2,c
  7900   003986  EFC7  F01C         	goto	u2701
  7901   00398A  EFC9  F01C         	goto	u2700
  7902   00398E                     u2701:
  7903   00398E  EFCD  F01C         	goto	l3589
  7904   003992                     u2700:
  7905   003992  5014               	movf	stop@mL^0,w,c
  7906   003994  6ED9               	movwf	fsr2l,c
  7907   003996  6ADA               	clrf	fsr2h,c
  7908   003998  06DF               	decf	indf2,f,c
  7909   00399A                     l3589:
  7910                           
  7911                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7912   00399A  5015               	movf	stop@mR^0,w,c
  7913   00399C  6ED9               	movwf	fsr2l,c
  7914   00399E  6ADA               	clrf	fsr2h,c
  7915   0039A0  50DF               	movf	indf2,w,c
  7916   0039A2  B4D8               	btfsc	status,2,c
  7917   0039A4  EFD6  F01C         	goto	u2711
  7918   0039A8  EFD8  F01C         	goto	u2710
  7919   0039AC                     u2711:
  7920   0039AC  EFDC  F01C         	goto	l3593
  7921   0039B0                     u2710:
  7922   0039B0  5015               	movf	stop@mR^0,w,c
  7923   0039B2  6ED9               	movwf	fsr2l,c
  7924   0039B4  6ADA               	clrf	fsr2h,c
  7925   0039B6  06DF               	decf	indf2,f,c
  7926   0039B8                     l3593:
  7927                           
  7928                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7929   0039B8  C014  F00F         	movff	stop@mL,setMotorPWM@m
  7930   0039BC  EC80  F017         	call	_setMotorPWM	;wreg free
  7931   0039C0                     
  7932                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7933   0039C0  C015  F00F         	movff	stop@mR,setMotorPWM@m
  7934   0039C4  EC80  F017         	call	_setMotorPWM	;wreg free
  7935   0039C8                     
  7936                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7937   0039C8  0E0B               	movlw	11
  7938   0039CA  6E16               	movwf	??_stop^0,c
  7939   0039CC  0E62               	movlw	98
  7940   0039CE                     u5157:
  7941   0039CE  2EE8               	decfsz	wreg,f,c
  7942   0039D0  D7FE               	bra	u5157
  7943   0039D2  2E16               	decfsz	??_stop^0,f,c
  7944   0039D4  D7FC               	bra	u5157
  7945   0039D6  D000               	nop2	
  7946   0039D8                     l3599:
  7947                           
  7948                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7949   0039D8  5014               	movf	stop@mL^0,w,c
  7950   0039DA  6ED9               	movwf	fsr2l,c
  7951   0039DC  6ADA               	clrf	fsr2h,c
  7952   0039DE  50DF               	movf	indf2,w,c
  7953   0039E0  A4D8               	btfss	status,2,c
  7954   0039E2  EFF5  F01C         	goto	u2721
  7955   0039E6  EFF7  F01C         	goto	u2720
  7956   0039EA                     u2721:
  7957   0039EA  EFBE  F01C         	goto	l3585
  7958   0039EE                     u2720:
  7959   0039EE  5015               	movf	stop@mR^0,w,c
  7960   0039F0  6ED9               	movwf	fsr2l,c
  7961   0039F2  6ADA               	clrf	fsr2h,c
  7962   0039F4  50DF               	movf	indf2,w,c
  7963   0039F6  A4D8               	btfss	status,2,c
  7964   0039F8  EF00  F01D         	goto	u2731
  7965   0039FC  EF02  F01D         	goto	u2730
  7966   003A00                     u2731:
  7967   003A00  EFBE  F01C         	goto	l3585
  7968   003A04                     u2730:
  7969   003A04  0012               	return		;funcret
  7970   003A06                     __end_of_stop:
  7971                           	callstack 0
  7972                           
  7973 ;; *************** function _fullSpeedBack *****************
  7974 ;; Defined at:
  7975 ;;		line 165 in file "dc_motor.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7978 ;;		 -> motorL(9), 
  7979 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7980 ;;		 -> motorR(9), 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  power           2   22[COMRAM] int 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7995 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7996 ;;Total ram usage:        5 bytes
  7997 ;; Hardware stack levels used: 1
  7998 ;; Hardware stack levels required when called: 3
  7999 ;; This function calls:
  8000 ;;		_setMotorPWM
  8001 ;; This function is called by:
  8002 ;;		_backHalf
  8003 ;;		_backOneAndHalf
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text39
  8008   003B7C                     __ptext39:
  8009                           	callstack 0
  8010   003B7C                     _fullSpeedBack:
  8011                           	callstack 24
  8012   003B7C                     
  8013                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8014   003B7C  5014               	movf	fullSpeedBack@mL^0,w,c
  8015   003B7E  6ED9               	movwf	fsr2l,c
  8016   003B80  6ADA               	clrf	fsr2h,c
  8017   003B82  0E01               	movlw	1
  8018   003B84  26D9               	addwf	fsr2l,f,c
  8019   003B86  6ADF               	clrf	indf2,c
  8020                           
  8021                           ;dc_motor.c: 169:     mR->direction = 0;
  8022   003B88  5015               	movf	fullSpeedBack@mR^0,w,c
  8023   003B8A  6ED9               	movwf	fsr2l,c
  8024   003B8C  6ADA               	clrf	fsr2h,c
  8025   003B8E  0E01               	movlw	1
  8026   003B90  26D9               	addwf	fsr2l,f,c
  8027   003B92  6ADF               	clrf	indf2,c
  8028   003B94                     
  8029                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8030   003B94  0E00               	movlw	0
  8031   003B96  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8032   003B98  0E00               	movlw	0
  8033   003B9A  6E17               	movwf	fullSpeedBack@power^0,c
  8034   003B9C                     l3659:
  8035                           
  8036                           ;dc_motor.c: 172:         mL->power = power;
  8037   003B9C  5014               	movf	fullSpeedBack@mL^0,w,c
  8038   003B9E  6ED9               	movwf	fsr2l,c
  8039   003BA0  6ADA               	clrf	fsr2h,c
  8040   003BA2  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8041                           
  8042                           ;dc_motor.c: 173:         mR->power = power;
  8043   003BA6  5015               	movf	fullSpeedBack@mR^0,w,c
  8044   003BA8  6ED9               	movwf	fsr2l,c
  8045   003BAA  6ADA               	clrf	fsr2h,c
  8046   003BAC  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8047   003BB0                     
  8048                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8049   003BB0  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8050   003BB4  EC80  F017         	call	_setMotorPWM	;wreg free
  8051   003BB8                     
  8052                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8053   003BB8  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8054   003BBC  EC80  F017         	call	_setMotorPWM	;wreg free
  8055   003BC0                     
  8056                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8057   003BC0  0E0B               	movlw	11
  8058   003BC2  6E16               	movwf	??_fullSpeedBack^0,c
  8059   003BC4  0E62               	movlw	98
  8060   003BC6                     u5167:
  8061   003BC6  2EE8               	decfsz	wreg,f,c
  8062   003BC8  D7FE               	bra	u5167
  8063   003BCA  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8064   003BCC  D7FC               	bra	u5167
  8065   003BCE  D000               	nop2	
  8066   003BD0                     
  8067                           ;dc_motor.c: 181:     }
  8068   003BD0  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8069   003BD2  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8070   003BD4  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8071   003BD6  EFF6  F01D         	goto	u2761
  8072   003BDA  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8073   003BDC  E109               	bnz	u2760
  8074   003BDE  0E33               	movlw	51
  8075   003BE0  5C17               	subwf	fullSpeedBack@power^0,w,c
  8076   003BE2  A0D8               	btfss	status,0,c
  8077   003BE4  EFF6  F01D         	goto	u2761
  8078   003BE8  EFF8  F01D         	goto	u2760
  8079   003BEC                     u2761:
  8080   003BEC  EFCE  F01D         	goto	l3659
  8081   003BF0                     u2760:
  8082   003BF0  0012               	return		;funcret
  8083   003BF2                     __end_of_fullSpeedBack:
  8084                           	callstack 0
  8085                           
  8086 ;; *************** function _setMotorPWM *****************
  8087 ;; Defined at:
  8088 ;;		line 65 in file "dc_motor.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8091 ;;		 -> motorR(9), motorL(9), 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  negDuty         1   18[COMRAM] unsigned char 
  8094 ;;  posDuty         1   17[COMRAM] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  1    wreg      void 
  8097 ;; Registers used:
  8098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8104 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8107 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8108 ;;Total ram usage:        5 bytes
  8109 ;; Hardware stack levels used: 1
  8110 ;; Hardware stack levels required when called: 2
  8111 ;; This function calls:
  8112 ;;		___lwdiv
  8113 ;;		___wmul
  8114 ;; This function is called by:
  8115 ;;		_stop
  8116 ;;		_turnLeft
  8117 ;;		_turnRight
  8118 ;;		_fullSpeedAhead
  8119 ;;		_fullSpeedBack
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text40
  8124   002F00                     __ptext40:
  8125                           	callstack 0
  8126   002F00                     _setMotorPWM:
  8127                           	callstack 27
  8128   002F00                     
  8129                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8130   002F00  500F               	movf	setMotorPWM@m^0,w,c
  8131   002F02  6ED9               	movwf	fsr2l,c
  8132   002F04  6ADA               	clrf	fsr2h,c
  8133   002F06  0E02               	movlw	2
  8134   002F08  26D9               	addwf	fsr2l,f,c
  8135   002F0A  50DF               	movf	indf2,w,c
  8136   002F0C  B4D8               	btfsc	status,2,c
  8137   002F0E  EF8B  F017         	goto	u2611
  8138   002F12  EF8D  F017         	goto	u2610
  8139   002F16                     u2611:
  8140   002F16  EFBD  F017         	goto	l3513
  8141   002F1A                     u2610:
  8142   002F1A                     
  8143                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8144   002F1A  500F               	movf	setMotorPWM@m^0,w,c
  8145   002F1C  6ED9               	movwf	fsr2l,c
  8146   002F1E  6ADA               	clrf	fsr2h,c
  8147   002F20  50DF               	movf	indf2,w,c
  8148   002F22  6E10               	movwf	??_setMotorPWM^0,c
  8149   002F24  5010               	movf	??_setMotorPWM^0,w,c
  8150   002F26  6E02               	movwf	___wmul@multiplier^0,c
  8151   002F28  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8152   002F2A  500F               	movf	setMotorPWM@m^0,w,c
  8153   002F2C  6ED9               	movwf	fsr2l,c
  8154   002F2E  6ADA               	clrf	fsr2h,c
  8155   002F30  0E03               	movlw	3
  8156   002F32  26D9               	addwf	fsr2l,f,c
  8157   002F34  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8158   002F38  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8159   002F3C  EC27  F022         	call	___wmul	;wreg free
  8160   002F40  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8161   002F44  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8162   002F48  0E00               	movlw	0
  8163   002F4A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8164   002F4C  0E64               	movlw	100
  8165   002F4E  6E0A               	movwf	___lwdiv@divisor^0,c
  8166   002F50  ECF9  F01D         	call	___lwdiv	;wreg free
  8167   002F54  500F               	movf	setMotorPWM@m^0,w,c
  8168   002F56  6ED9               	movwf	fsr2l,c
  8169   002F58  6ADA               	clrf	fsr2h,c
  8170   002F5A  0E03               	movlw	3
  8171   002F5C  26D9               	addwf	fsr2l,f,c
  8172   002F5E  50DF               	movf	indf2,w,c
  8173   002F60  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8174   002F62  5008               	movf	?___lwdiv^0,w,c
  8175   002F64  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8176   002F66  6E12               	movwf	setMotorPWM@posDuty^0,c
  8177   002F68                     
  8178                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8179   002F68  500F               	movf	setMotorPWM@m^0,w,c
  8180   002F6A  6ED9               	movwf	fsr2l,c
  8181   002F6C  6ADA               	clrf	fsr2h,c
  8182   002F6E  0E03               	movlw	3
  8183   002F70  26D9               	addwf	fsr2l,f,c
  8184   002F72  50DF               	movf	indf2,w,c
  8185   002F74  6E13               	movwf	setMotorPWM@negDuty^0,c
  8186                           
  8187                           ;dc_motor.c: 72:     }
  8188   002F76  EFDE  F017         	goto	l3517
  8189   002F7A                     l3513:
  8190                           
  8191                           ;dc_motor.c: 74:         posDuty=0;
  8192   002F7A  0E00               	movlw	0
  8193   002F7C  6E12               	movwf	setMotorPWM@posDuty^0,c
  8194   002F7E                     
  8195                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8196   002F7E  500F               	movf	setMotorPWM@m^0,w,c
  8197   002F80  6ED9               	movwf	fsr2l,c
  8198   002F82  6ADA               	clrf	fsr2h,c
  8199   002F84  50DF               	movf	indf2,w,c
  8200   002F86  6E10               	movwf	??_setMotorPWM^0,c
  8201   002F88  5010               	movf	??_setMotorPWM^0,w,c
  8202   002F8A  6E02               	movwf	___wmul@multiplier^0,c
  8203   002F8C  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8204   002F8E  500F               	movf	setMotorPWM@m^0,w,c
  8205   002F90  6ED9               	movwf	fsr2l,c
  8206   002F92  6ADA               	clrf	fsr2h,c
  8207   002F94  0E03               	movlw	3
  8208   002F96  26D9               	addwf	fsr2l,f,c
  8209   002F98  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8210   002F9C  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8211   002FA0  EC27  F022         	call	___wmul	;wreg free
  8212   002FA4  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8213   002FA8  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8214   002FAC  0E00               	movlw	0
  8215   002FAE  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8216   002FB0  0E64               	movlw	100
  8217   002FB2  6E0A               	movwf	___lwdiv@divisor^0,c
  8218   002FB4  ECF9  F01D         	call	___lwdiv	;wreg free
  8219   002FB8  5008               	movf	?___lwdiv^0,w,c
  8220   002FBA  6E13               	movwf	setMotorPWM@negDuty^0,c
  8221   002FBC                     l3517:
  8222                           
  8223                           ;dc_motor.c: 78:     if (m->direction) {
  8224   002FBC  500F               	movf	setMotorPWM@m^0,w,c
  8225   002FBE  6ED9               	movwf	fsr2l,c
  8226   002FC0  6ADA               	clrf	fsr2h,c
  8227   002FC2  0E01               	movlw	1
  8228   002FC4  26D9               	addwf	fsr2l,f,c
  8229   002FC6  50DF               	movf	indf2,w,c
  8230   002FC8  B4D8               	btfsc	status,2,c
  8231   002FCA  EFE9  F017         	goto	u2621
  8232   002FCE  EFEB  F017         	goto	u2620
  8233   002FD2                     u2621:
  8234   002FD2  EF0B  F018         	goto	l3521
  8235   002FD6                     u2620:
  8236   002FD6                     
  8237                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8238   002FD6  500F               	movf	setMotorPWM@m^0,w,c
  8239   002FD8  6ED9               	movwf	fsr2l,c
  8240   002FDA  6ADA               	clrf	fsr2h,c
  8241   002FDC  0E05               	movlw	5
  8242   002FDE  26D9               	addwf	fsr2l,f,c
  8243   002FE0  CFDE F010          	movff	postinc2,??_setMotorPWM
  8244   002FE4  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8245   002FE8  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8246   002FEC  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8247   002FF0  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8248                           
  8249                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8250   002FF4  500F               	movf	setMotorPWM@m^0,w,c
  8251   002FF6  6ED9               	movwf	fsr2l,c
  8252   002FF8  6ADA               	clrf	fsr2h,c
  8253   002FFA  0E07               	movlw	7
  8254   002FFC  26D9               	addwf	fsr2l,f,c
  8255   002FFE  CFDE F010          	movff	postinc2,??_setMotorPWM
  8256   003002  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8257   003006  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8258   00300A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8259   00300E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8260                           
  8261                           ;dc_motor.c: 81:     } else {
  8262   003012  EF29  F018         	goto	l406
  8263   003016                     l3521:
  8264                           
  8265                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8266   003016  500F               	movf	setMotorPWM@m^0,w,c
  8267   003018  6ED9               	movwf	fsr2l,c
  8268   00301A  6ADA               	clrf	fsr2h,c
  8269   00301C  0E05               	movlw	5
  8270   00301E  26D9               	addwf	fsr2l,f,c
  8271   003020  CFDE F010          	movff	postinc2,??_setMotorPWM
  8272   003024  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8273   003028  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8274   00302C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8275   003030  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8276                           
  8277                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8278   003034  500F               	movf	setMotorPWM@m^0,w,c
  8279   003036  6ED9               	movwf	fsr2l,c
  8280   003038  6ADA               	clrf	fsr2h,c
  8281   00303A  0E07               	movlw	7
  8282   00303C  26D9               	addwf	fsr2l,f,c
  8283   00303E  CFDE F010          	movff	postinc2,??_setMotorPWM
  8284   003042  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8285   003046  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8286   00304A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8287   00304E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8288   003052                     l406:
  8289   003052  0012               	return		;funcret
  8290   003054                     __end_of_setMotorPWM:
  8291                           	callstack 0
  8292                           
  8293 ;; *************** function ___lwdiv *****************
  8294 ;; Defined at:
  8295 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  dividend        2    7[COMRAM] unsigned int 
  8298 ;;  divisor         2    9[COMRAM] unsigned int 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  quotient        2   11[COMRAM] unsigned int 
  8301 ;;  counter         1   13[COMRAM] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  2    7[COMRAM] unsigned int 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8312 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8314 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8315 ;;Total ram usage:        7 bytes
  8316 ;; Hardware stack levels used: 1
  8317 ;; Hardware stack levels required when called: 1
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_setMotorPWM
  8322 ;;		_ADC2String
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text41
  8327   003BF2                     __ptext41:
  8328                           	callstack 0
  8329   003BF2                     ___lwdiv:
  8330                           	callstack 27
  8331   003BF2  0E00               	movlw	0
  8332   003BF4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8333   003BF6  0E00               	movlw	0
  8334   003BF8  6E0C               	movwf	___lwdiv@quotient^0,c
  8335   003BFA  500A               	movf	___lwdiv@divisor^0,w,c
  8336   003BFC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8337   003BFE  B4D8               	btfsc	status,2,c
  8338   003C00  EF04  F01E         	goto	u2461
  8339   003C04  EF06  F01E         	goto	u2460
  8340   003C08                     u2461:
  8341   003C08  EF2E  F01E         	goto	l1160
  8342   003C0C                     u2460:
  8343   003C0C  0E01               	movlw	1
  8344   003C0E  6E0E               	movwf	___lwdiv@counter^0,c
  8345   003C10  EF0E  F01E         	goto	l3429
  8346   003C14                     l3427:
  8347   003C14  90D8               	bcf	status,0,c
  8348   003C16  360A               	rlcf	___lwdiv@divisor^0,f,c
  8349   003C18  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8350   003C1A  2A0E               	incf	___lwdiv@counter^0,f,c
  8351   003C1C                     l3429:
  8352   003C1C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8353   003C1E  EF13  F01E         	goto	u2471
  8354   003C22  EF15  F01E         	goto	u2470
  8355   003C26                     u2471:
  8356   003C26  EF0A  F01E         	goto	l3427
  8357   003C2A                     u2470:
  8358   003C2A                     l3431:
  8359   003C2A  90D8               	bcf	status,0,c
  8360   003C2C  360C               	rlcf	___lwdiv@quotient^0,f,c
  8361   003C2E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8362   003C30  500A               	movf	___lwdiv@divisor^0,w,c
  8363   003C32  5C08               	subwf	___lwdiv@dividend^0,w,c
  8364   003C34  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8365   003C36  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8366   003C38  A0D8               	btfss	status,0,c
  8367   003C3A  EF21  F01E         	goto	u2481
  8368   003C3E  EF23  F01E         	goto	u2480
  8369   003C42                     u2481:
  8370   003C42  EF28  F01E         	goto	l3439
  8371   003C46                     u2480:
  8372   003C46  500A               	movf	___lwdiv@divisor^0,w,c
  8373   003C48  5E08               	subwf	___lwdiv@dividend^0,f,c
  8374   003C4A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8375   003C4C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8376   003C4E  800C               	bsf	___lwdiv@quotient^0,0,c
  8377   003C50                     l3439:
  8378   003C50  90D8               	bcf	status,0,c
  8379   003C52  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8380   003C54  320A               	rrcf	___lwdiv@divisor^0,f,c
  8381   003C56  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8382   003C58  EF15  F01E         	goto	l3431
  8383   003C5C                     l1160:
  8384   003C5C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8385   003C60  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8386   003C64  0012               	return		;funcret
  8387   003C66                     __end_of___lwdiv:
  8388                           	callstack 0
  8389                           
  8390 ;; *************** function _color_click_init *****************
  8391 ;; Defined at:
  8392 ;;		line 8 in file "color.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8410 ;;Total ram usage:        1 bytes
  8411 ;; Hardware stack levels used: 1
  8412 ;; Hardware stack levels required when called: 4
  8413 ;; This function calls:
  8414 ;;		_I2C_2_Master_Init
  8415 ;;		_color_writetoaddr
  8416 ;; This function is called by:
  8417 ;;		_main
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text42
  8422   0041D2                     __ptext42:
  8423                           	callstack 0
  8424   0041D2                     _color_click_init:
  8425                           	callstack 26
  8426   0041D2                     
  8427                           ;color.c: 11:     I2C_2_Master_Init();
  8428   0041D2  ECFE  F021         	call	_I2C_2_Master_Init	;wreg free
  8429   0041D6                     
  8430                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8431   0041D6  0E01               	movlw	1
  8432   0041D8  6E04               	movwf	color_writetoaddr@value^0,c
  8433   0041DA  0E00               	movlw	0
  8434   0041DC  EC4B  F022         	call	_color_writetoaddr
  8435   0041E0                     
  8436                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8437   0041E0  0E3F               	movlw	63
  8438   0041E2  6E06               	movwf	??_color_click_init^0,c
  8439   0041E4  0E55               	movlw	85
  8440   0041E6                     u5177:
  8441   0041E6  2EE8               	decfsz	wreg,f,c
  8442   0041E8  D7FE               	bra	u5177
  8443   0041EA  2E06               	decfsz	??_color_click_init^0,f,c
  8444   0041EC  D7FC               	bra	u5177
  8445   0041EE  0000               	nop	
  8446   0041F0                     
  8447                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8448   0041F0  0E03               	movlw	3
  8449   0041F2  6E04               	movwf	color_writetoaddr@value^0,c
  8450   0041F4  0E00               	movlw	0
  8451   0041F6  EC4B  F022         	call	_color_writetoaddr
  8452   0041FA                     
  8453                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8454   0041FA  0ED5               	movlw	213
  8455   0041FC  6E04               	movwf	color_writetoaddr@value^0,c
  8456   0041FE  0E01               	movlw	1
  8457   004200  EC4B  F022         	call	_color_writetoaddr
  8458   004204  0012               	return		;funcret
  8459   004206                     __end_of_color_click_init:
  8460                           	callstack 0
  8461                           
  8462 ;; *************** function _color_writetoaddr *****************
  8463 ;; Defined at:
  8464 ;;		line 24 in file "color.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  address         1    wreg     unsigned char 
  8467 ;;  value           1    3[COMRAM] unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  address         1    4[COMRAM] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8479 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8483 ;;Total ram usage:        2 bytes
  8484 ;; Hardware stack levels used: 1
  8485 ;; Hardware stack levels required when called: 3
  8486 ;; This function calls:
  8487 ;;		_I2C_2_Master_Start
  8488 ;;		_I2C_2_Master_Stop
  8489 ;;		_I2C_2_Master_Write
  8490 ;; This function is called by:
  8491 ;;		_color_click_init
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text43
  8496   004496                     __ptext43:
  8497                           	callstack 0
  8498   004496                     _color_writetoaddr:
  8499                           	callstack 26
  8500                           
  8501                           ;incstack = 0
  8502                           ;color_writetoaddr@address stored from wreg
  8503   004496  6E05               	movwf	color_writetoaddr@address^0,c
  8504   004498                     
  8505                           ;color.c: 25:     I2C_2_Master_Start();
  8506   004498  EC9D  F022         	call	_I2C_2_Master_Start	;wreg free
  8507                           
  8508                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8509   00449C  0E52               	movlw	82
  8510   00449E  EC92  F022         	call	_I2C_2_Master_Write
  8511                           
  8512                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8513   0044A2  5005               	movf	color_writetoaddr@address^0,w,c
  8514   0044A4  0980               	iorlw	128
  8515   0044A6  EC92  F022         	call	_I2C_2_Master_Write
  8516                           
  8517                           ;color.c: 28:     I2C_2_Master_Write(value);
  8518   0044AA  5004               	movf	color_writetoaddr@value^0,w,c
  8519   0044AC  EC92  F022         	call	_I2C_2_Master_Write
  8520                           
  8521                           ;color.c: 29:     I2C_2_Master_Stop();
  8522   0044B0  EC98  F022         	call	_I2C_2_Master_Stop	;wreg free
  8523   0044B4  0012               	return		;funcret
  8524   0044B6                     __end_of_color_writetoaddr:
  8525                           	callstack 0
  8526                           
  8527 ;; *************** function _I2C_2_Master_Init *****************
  8528 ;; Defined at:
  8529 ;;		line 4 in file "i2c.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, status,2
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used: 1
  8549 ;; Hardware stack levels required when called: 1
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_color_click_init
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text44
  8558   0043FC                     __ptext44:
  8559                           	callstack 0
  8560   0043FC                     _I2C_2_Master_Init:
  8561                           	callstack 28
  8562   0043FC                     
  8563                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8564   0043FC  010E               	movlb	14	; () banked
  8565   0043FE  51D9               	movf	217,w,b	;volatile
  8566   004400  0BF0               	andlw	-16
  8567   004402  0908               	iorlw	8
  8568   004404  6FD9               	movwf	217,b	;volatile
  8569   004406                     
  8570                           ; BSR set to: 14
  8571                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8572   004406  8BD9               	bsf	217,5,b	;volatile
  8573                           
  8574                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8575   004408  0E9F               	movlw	159
  8576   00440A  6FD6               	movwf	214,b	;volatile
  8577   00440C                     
  8578                           ; BSR set to: 14
  8579                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8580   00440C  8A84               	bsf	132,5,c	;volatile
  8581   00440E                     
  8582                           ; BSR set to: 14
  8583                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8584   00440E  8C84               	bsf	132,6,c	;volatile
  8585   004410                     
  8586                           ; BSR set to: 14
  8587                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8588   004410  9BA7               	bcf	167,5,b	;volatile
  8589   004412                     
  8590                           ; BSR set to: 14
  8591                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8592   004412  9DA7               	bcf	167,6,b	;volatile
  8593                           
  8594                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8595   004414  0E1D               	movlw	29
  8596   004416  6F1D               	movwf	29,b	;volatile
  8597                           
  8598                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8599   004418  0E1E               	movlw	30
  8600   00441A  6F1C               	movwf	28,b	;volatile
  8601                           
  8602                           ;i2c.c: 18:   RD5PPS=0x1C;
  8603   00441C  0E1C               	movlw	28
  8604   00441E  6F6F               	movwf	111,b	;volatile
  8605                           
  8606                           ;i2c.c: 19:   RD6PPS=0x1B;
  8607   004420  0E1B               	movlw	27
  8608   004422  6F70               	movwf	112,b	;volatile
  8609   004424                     
  8610                           ; BSR set to: 14
  8611   004424  0012               	return		;funcret
  8612   004426                     __end_of_I2C_2_Master_Init:
  8613                           	callstack 0
  8614                           
  8615 ;; *************** function _calibration_routine *****************
  8616 ;; Defined at:
  8617 ;;		line 151 in file "color.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  cCal            1   68[COMRAM] PTR struct colors
  8620 ;;		 -> colorCalibration(10), 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  cal_state      20   71[COMRAM] unsigned char [20]
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      void 
  8625 ;; Registers used:
  8626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8632 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8633 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8634 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8635 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8636 ;;Total ram usage:       23 bytes
  8637 ;; Hardware stack levels used: 1
  8638 ;; Hardware stack levels required when called: 9
  8639 ;; This function calls:
  8640 ;;		_color_read_Blue
  8641 ;;		_color_read_Clear
  8642 ;;		_color_read_Green
  8643 ;;		_color_read_Red
  8644 ;;		_sendStringSerial4
  8645 ;;		_sprintf
  8646 ;; This function is called by:
  8647 ;;		_main
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           	psect	text45
  8652   0025F0                     __ptext45:
  8653                           	callstack 0
  8654   0025F0                     _calibration_routine:
  8655                           	callstack 21
  8656   0025F0                     
  8657                           ;color.c: 151: void calibration_routine(colors *cCal);color.c: 152: {;color.c: 154:     
      +                          LATGbits.LATG0 = 0;
  8658   0025F0  907F               	bcf	127,0,c	;volatile
  8659                           
  8660                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8661   0025F2  9E7D               	bcf	125,7,c	;volatile
  8662                           
  8663                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8664   0025F4  9679               	bcf	121,3,c	;volatile
  8665   0025F6                     
  8666                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8667   0025F6  0E48               	movlw	low calibration_routine@cal_state
  8668   0025F8  6E32               	movwf	sprintf@s^0,c
  8669   0025FA  0E90               	movlw	low STR_1
  8670   0025FC  6E33               	movwf	sprintf@fmt^0,c
  8671   0025FE  0EC9               	movlw	low STR_2
  8672   002600  6E34               	movwf	(?_sprintf+2)^0,c
  8673   002602  5034               	movf	(?_sprintf+2)^0,w,c
  8674   002604  A4D8               	btfss	status,2,c
  8675   002606  0E0E               	movlw	high __smallconst
  8676   002608  6E35               	movwf	(?_sprintf+3)^0,c
  8677   00260A  EC03  F021         	call	_sprintf	;wreg free
  8678   00260E                     
  8679                           ;color.c: 163:     sendStringSerial4(cal_state);
  8680   00260E  0E48               	movlw	low calibration_routine@cal_state
  8681   002610  6E03               	movwf	sendStringSerial4@string^0,c
  8682   002612  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8683   002616                     l96:
  8684                           
  8685                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  8686   002616  B48E               	btfsc	142,2,c	;volatile
  8687   002618  EF10  F013         	goto	u4651
  8688   00261C  EF12  F013         	goto	u4650
  8689   002620                     u4651:
  8690   002620  EF0B  F013         	goto	l96
  8691   002624                     u4650:
  8692   002624                     
  8693                           ;color.c: 170:     LATGbits.LATG0 = 1;
  8694   002624  807F               	bsf	127,0,c	;volatile
  8695   002626                     
  8696                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8697   002626  0E29               	movlw	41
  8698   002628  6E47               	movwf	(??_calibration_routine+1)^0,c
  8699   00262A  0E96               	movlw	150
  8700   00262C  6E46               	movwf	??_calibration_routine^0,c
  8701   00262E  0E7F               	movlw	127
  8702   002630                     u5187:
  8703   002630  2EE8               	decfsz	wreg,f,c
  8704   002632  D7FE               	bra	u5187
  8705   002634  2E46               	decfsz	??_calibration_routine^0,f,c
  8706   002636  D7FC               	bra	u5187
  8707   002638  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8708   00263A  D7FA               	bra	u5187
  8709   00263C  0000               	nop	
  8710   00263E                     
  8711                           ;color.c: 172:     (cCal->red) = color_read_Red();
  8712   00263E  EC68  F01E         	call	_color_read_Red	;wreg free
  8713   002642  5045               	movf	calibration_routine@cCal^0,w,c
  8714   002644  6ED9               	movwf	fsr2l,c
  8715   002646  6ADA               	clrf	fsr2h,c
  8716   002648  C006  FFDE         	movff	?_color_read_Red,postinc2
  8717   00264C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8718   002650                     
  8719                           ;color.c: 173:     LATGbits.LATG0 = 0;
  8720   002650  907F               	bcf	127,0,c	;volatile
  8721   002652                     
  8722                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8723   002652  0E48               	movlw	low calibration_routine@cal_state
  8724   002654  6E32               	movwf	sprintf@s^0,c
  8725   002656  0E24               	movlw	low STR_3
  8726   002658  6E33               	movwf	sprintf@fmt^0,c
  8727   00265A  0EC9               	movlw	low STR_2
  8728   00265C  6E34               	movwf	(?_sprintf+2)^0,c
  8729   00265E  5034               	movf	(?_sprintf+2)^0,w,c
  8730   002660  A4D8               	btfss	status,2,c
  8731   002662  0E0E               	movlw	high __smallconst
  8732   002664  6E35               	movwf	(?_sprintf+3)^0,c
  8733   002666  EC03  F021         	call	_sprintf	;wreg free
  8734   00266A                     
  8735                           ;color.c: 177:     sendStringSerial4(&cal_state);
  8736   00266A  0E48               	movlw	low calibration_routine@cal_state
  8737   00266C  6E03               	movwf	sendStringSerial4@string^0,c
  8738   00266E  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8739   002672                     l99:
  8740                           
  8741                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  8742   002672  B48E               	btfsc	142,2,c	;volatile
  8743   002674  EF3E  F013         	goto	u4661
  8744   002678  EF40  F013         	goto	u4660
  8745   00267C                     u4661:
  8746   00267C  EF39  F013         	goto	l99
  8747   002680                     u4660:
  8748   002680                     
  8749                           ;color.c: 183:     LATEbits.LATE7 = 1;
  8750   002680  8E7D               	bsf	125,7,c	;volatile
  8751   002682                     
  8752                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8753   002682  0E29               	movlw	41
  8754   002684  6E47               	movwf	(??_calibration_routine+1)^0,c
  8755   002686  0E96               	movlw	150
  8756   002688  6E46               	movwf	??_calibration_routine^0,c
  8757   00268A  0E7F               	movlw	127
  8758   00268C                     u5197:
  8759   00268C  2EE8               	decfsz	wreg,f,c
  8760   00268E  D7FE               	bra	u5197
  8761   002690  2E46               	decfsz	??_calibration_routine^0,f,c
  8762   002692  D7FC               	bra	u5197
  8763   002694  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8764   002696  D7FA               	bra	u5197
  8765   002698  0000               	nop	
  8766   00269A                     
  8767                           ;color.c: 185:     (cCal->green) = color_read_Green();
  8768   00269A  EC90  F01E         	call	_color_read_Green	;wreg free
  8769   00269E  5045               	movf	calibration_routine@cCal^0,w,c
  8770   0026A0  6ED9               	movwf	fsr2l,c
  8771   0026A2  6ADA               	clrf	fsr2h,c
  8772   0026A4  0E02               	movlw	2
  8773   0026A6  26D9               	addwf	fsr2l,f,c
  8774   0026A8  C006  FFDE         	movff	?_color_read_Green,postinc2
  8775   0026AC  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8776   0026B0                     
  8777                           ;color.c: 186:     LATEbits.LATE7 = 0;
  8778   0026B0  9E7D               	bcf	125,7,c	;volatile
  8779   0026B2                     
  8780                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8781   0026B2  0E48               	movlw	low calibration_routine@cal_state
  8782   0026B4  6E32               	movwf	sprintf@s^0,c
  8783   0026B6  0E41               	movlw	low STR_5
  8784   0026B8  6E33               	movwf	sprintf@fmt^0,c
  8785   0026BA  0EC9               	movlw	low STR_2
  8786   0026BC  6E34               	movwf	(?_sprintf+2)^0,c
  8787   0026BE  5034               	movf	(?_sprintf+2)^0,w,c
  8788   0026C0  A4D8               	btfss	status,2,c
  8789   0026C2  0E0E               	movlw	high __smallconst
  8790   0026C4  6E35               	movwf	(?_sprintf+3)^0,c
  8791   0026C6  EC03  F021         	call	_sprintf	;wreg free
  8792   0026CA                     
  8793                           ;color.c: 190:     sendStringSerial4(&cal_state);
  8794   0026CA  0E48               	movlw	low calibration_routine@cal_state
  8795   0026CC  6E03               	movwf	sendStringSerial4@string^0,c
  8796   0026CE  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8797   0026D2                     l102:
  8798                           
  8799                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  8800   0026D2  B48E               	btfsc	142,2,c	;volatile
  8801   0026D4  EF6E  F013         	goto	u4671
  8802   0026D8  EF70  F013         	goto	u4670
  8803   0026DC                     u4671:
  8804   0026DC  EF69  F013         	goto	l102
  8805   0026E0                     u4670:
  8806   0026E0                     
  8807                           ;color.c: 196:     LATAbits.LATA3 = 1;
  8808   0026E0  8679               	bsf	121,3,c	;volatile
  8809   0026E2                     
  8810                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8811   0026E2  0E29               	movlw	41
  8812   0026E4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8813   0026E6  0E96               	movlw	150
  8814   0026E8  6E46               	movwf	??_calibration_routine^0,c
  8815   0026EA  0E7F               	movlw	127
  8816   0026EC                     u5207:
  8817   0026EC  2EE8               	decfsz	wreg,f,c
  8818   0026EE  D7FE               	bra	u5207
  8819   0026F0  2E46               	decfsz	??_calibration_routine^0,f,c
  8820   0026F2  D7FC               	bra	u5207
  8821   0026F4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8822   0026F6  D7FA               	bra	u5207
  8823   0026F8  0000               	nop	
  8824   0026FA                     
  8825                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  8826   0026FA  ECE0  F01E         	call	_color_read_Blue	;wreg free
  8827   0026FE  5045               	movf	calibration_routine@cCal^0,w,c
  8828   002700  6ED9               	movwf	fsr2l,c
  8829   002702  6ADA               	clrf	fsr2h,c
  8830   002704  0E04               	movlw	4
  8831   002706  26D9               	addwf	fsr2l,f,c
  8832   002708  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8833   00270C  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8834   002710                     
  8835                           ;color.c: 199:     LATAbits.LATA3 = 0;
  8836   002710  9679               	bcf	121,3,c	;volatile
  8837   002712                     
  8838                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  8839   002712  0E48               	movlw	low calibration_routine@cal_state
  8840   002714  6E32               	movwf	sprintf@s^0,c
  8841   002716  0E5C               	movlw	low STR_7
  8842   002718  6E33               	movwf	sprintf@fmt^0,c
  8843   00271A  0EC9               	movlw	low STR_2
  8844   00271C  6E34               	movwf	(?_sprintf+2)^0,c
  8845   00271E  5034               	movf	(?_sprintf+2)^0,w,c
  8846   002720  A4D8               	btfss	status,2,c
  8847   002722  0E0E               	movlw	high __smallconst
  8848   002724  6E35               	movwf	(?_sprintf+3)^0,c
  8849   002726  EC03  F021         	call	_sprintf	;wreg free
  8850   00272A                     
  8851                           ;color.c: 203:     sendStringSerial4(&cal_state);
  8852   00272A  0E48               	movlw	low calibration_routine@cal_state
  8853   00272C  6E03               	movwf	sendStringSerial4@string^0,c
  8854   00272E  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8855   002732                     l105:
  8856                           
  8857                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  8858   002732  B48E               	btfsc	142,2,c	;volatile
  8859   002734  EF9E  F013         	goto	u4681
  8860   002738  EFA0  F013         	goto	u4680
  8861   00273C                     u4681:
  8862   00273C  EF99  F013         	goto	l105
  8863   002740                     u4680:
  8864   002740                     
  8865                           ;color.c: 208:     LATGbits.LATG0 = 1;
  8866   002740  807F               	bsf	127,0,c	;volatile
  8867                           
  8868                           ;color.c: 209:     LATEbits.LATE7 = 1;
  8869   002742  8E7D               	bsf	125,7,c	;volatile
  8870                           
  8871                           ;color.c: 210:     LATAbits.LATA3 = 1;
  8872   002744  8679               	bsf	121,3,c	;volatile
  8873   002746                     
  8874                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8875   002746  0E29               	movlw	41
  8876   002748  6E47               	movwf	(??_calibration_routine+1)^0,c
  8877   00274A  0E96               	movlw	150
  8878   00274C  6E46               	movwf	??_calibration_routine^0,c
  8879   00274E  0E7F               	movlw	127
  8880   002750                     u5217:
  8881   002750  2EE8               	decfsz	wreg,f,c
  8882   002752  D7FE               	bra	u5217
  8883   002754  2E46               	decfsz	??_calibration_routine^0,f,c
  8884   002756  D7FC               	bra	u5217
  8885   002758  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8886   00275A  D7FA               	bra	u5217
  8887   00275C  0000               	nop	
  8888   00275E                     
  8889                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  8890   00275E  ECB8  F01E         	call	_color_read_Clear	;wreg free
  8891   002762  5045               	movf	calibration_routine@cCal^0,w,c
  8892   002764  6ED9               	movwf	fsr2l,c
  8893   002766  6ADA               	clrf	fsr2h,c
  8894   002768  0E06               	movlw	6
  8895   00276A  26D9               	addwf	fsr2l,f,c
  8896   00276C  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8897   002770  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8898   002774                     
  8899                           ;color.c: 213:     LATGbits.LATG0 = 0;
  8900   002774  907F               	bcf	127,0,c	;volatile
  8901   002776                     
  8902                           ;color.c: 214:     LATEbits.LATE7 = 0;
  8903   002776  9E7D               	bcf	125,7,c	;volatile
  8904   002778                     
  8905                           ;color.c: 215:     LATAbits.LATA3 = 0;
  8906   002778  9679               	bcf	121,3,c	;volatile
  8907   00277A                     
  8908                           ;color.c: 219:     sprintf(cal_state,"Calibration state =  ambient light", ".");
  8909   00277A  0E48               	movlw	low calibration_routine@cal_state
  8910   00277C  6E32               	movwf	sprintf@s^0,c
  8911   00277E  0E01               	movlw	low STR_9
  8912   002780  6E33               	movwf	sprintf@fmt^0,c
  8913   002782  0EC9               	movlw	low STR_2
  8914   002784  6E34               	movwf	(?_sprintf+2)^0,c
  8915   002786  5034               	movf	(?_sprintf+2)^0,w,c
  8916   002788  A4D8               	btfss	status,2,c
  8917   00278A  0E0E               	movlw	high __smallconst
  8918   00278C  6E35               	movwf	(?_sprintf+3)^0,c
  8919   00278E  EC03  F021         	call	_sprintf	;wreg free
  8920   002792                     
  8921                           ;color.c: 220:     sendStringSerial4(&cal_state);
  8922   002792  0E48               	movlw	low calibration_routine@cal_state
  8923   002794  6E03               	movwf	sendStringSerial4@string^0,c
  8924   002796  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8925   00279A                     l108:
  8926                           
  8927                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  8928   00279A  B48E               	btfsc	142,2,c	;volatile
  8929   00279C  EFD2  F013         	goto	u4691
  8930   0027A0  EFD4  F013         	goto	u4690
  8931   0027A4                     u4691:
  8932   0027A4  EFCD  F013         	goto	l108
  8933   0027A8                     u4690:
  8934   0027A8                     
  8935                           ;color.c: 225:     LATGbits.LATG0 = 1;
  8936   0027A8  807F               	bsf	127,0,c	;volatile
  8937                           
  8938                           ;color.c: 226:     LATEbits.LATE7 = 1;
  8939   0027AA  8E7D               	bsf	125,7,c	;volatile
  8940                           
  8941                           ;color.c: 227:     LATAbits.LATA3 = 1;
  8942   0027AC  8679               	bsf	121,3,c	;volatile
  8943   0027AE                     
  8944                           ;color.c: 228:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8945   0027AE  0E29               	movlw	41
  8946   0027B0  6E47               	movwf	(??_calibration_routine+1)^0,c
  8947   0027B2  0E96               	movlw	150
  8948   0027B4  6E46               	movwf	??_calibration_routine^0,c
  8949   0027B6  0E7F               	movlw	127
  8950   0027B8                     u5227:
  8951   0027B8  2EE8               	decfsz	wreg,f,c
  8952   0027BA  D7FE               	bra	u5227
  8953   0027BC  2E46               	decfsz	??_calibration_routine^0,f,c
  8954   0027BE  D7FC               	bra	u5227
  8955   0027C0  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8956   0027C2  D7FA               	bra	u5227
  8957   0027C4  0000               	nop	
  8958   0027C6                     
  8959                           ;color.c: 229:     (cCal->clear_ambient) = color_read_Clear();
  8960   0027C6  ECB8  F01E         	call	_color_read_Clear	;wreg free
  8961   0027CA  5045               	movf	calibration_routine@cCal^0,w,c
  8962   0027CC  6ED9               	movwf	fsr2l,c
  8963   0027CE  6ADA               	clrf	fsr2h,c
  8964   0027D0  0E08               	movlw	8
  8965   0027D2  26D9               	addwf	fsr2l,f,c
  8966   0027D4  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8967   0027D8  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8968   0027DC                     
  8969                           ;color.c: 230:     LATGbits.LATG0 = 0;
  8970   0027DC  907F               	bcf	127,0,c	;volatile
  8971   0027DE                     
  8972                           ;color.c: 231:     LATEbits.LATE7 = 0;
  8973   0027DE  9E7D               	bcf	125,7,c	;volatile
  8974   0027E0                     
  8975                           ;color.c: 232:     LATAbits.LATA3 = 0;
  8976   0027E0  9679               	bcf	121,3,c	;volatile
  8977   0027E2                     
  8978                           ;color.c: 234:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8979   0027E2  0E48               	movlw	low calibration_routine@cal_state
  8980   0027E4  6E32               	movwf	sprintf@s^0,c
  8981   0027E6  0E77               	movlw	low STR_11
  8982   0027E8  6E33               	movwf	sprintf@fmt^0,c
  8983   0027EA  0EC9               	movlw	low STR_2
  8984   0027EC  6E34               	movwf	(?_sprintf+2)^0,c
  8985   0027EE  5034               	movf	(?_sprintf+2)^0,w,c
  8986   0027F0  A4D8               	btfss	status,2,c
  8987   0027F2  0E0E               	movlw	high __smallconst
  8988   0027F4  6E35               	movwf	(?_sprintf+3)^0,c
  8989   0027F6  EC03  F021         	call	_sprintf	;wreg free
  8990   0027FA                     
  8991                           ;color.c: 235:     sendStringSerial4(&cal_state);
  8992   0027FA  0E48               	movlw	low calibration_routine@cal_state
  8993   0027FC  6E03               	movwf	sendStringSerial4@string^0,c
  8994   0027FE  ECCD  F021         	call	_sendStringSerial4	;wreg free
  8995   002802                     l111:
  8996                           
  8997                           ;color.c: 237:     while(PORTFbits.RF2 == 1){
  8998   002802  B48E               	btfsc	142,2,c	;volatile
  8999   002804  EF06  F014         	goto	u4701
  9000   002808  EF08  F014         	goto	u4700
  9001   00280C                     u4701:
  9002   00280C  EF01  F014         	goto	l111
  9003   002810                     u4700:
  9004   002810                     
  9005                           ;color.c: 240:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9006   002810  0E29               	movlw	41
  9007   002812  6E47               	movwf	(??_calibration_routine+1)^0,c
  9008   002814  0E96               	movlw	150
  9009   002816  6E46               	movwf	??_calibration_routine^0,c
  9010   002818  0E7F               	movlw	127
  9011   00281A                     u5237:
  9012   00281A  2EE8               	decfsz	wreg,f,c
  9013   00281C  D7FE               	bra	u5237
  9014   00281E  2E46               	decfsz	??_calibration_routine^0,f,c
  9015   002820  D7FC               	bra	u5237
  9016   002822  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9017   002824  D7FA               	bra	u5237
  9018   002826  0000               	nop	
  9019   002828  0012               	return		;funcret
  9020   00282A                     __end_of_calibration_routine:
  9021                           	callstack 0
  9022                           
  9023 ;; *************** function _sprintf *****************
  9024 ;; Defined at:
  9025 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  s               1   49[COMRAM] PTR unsigned char 
  9028 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9029 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9030 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(35), 
  9031 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;  f              12   56[COMRAM] struct _IO_FILE
  9034 ;;  ret             2    0        int 
  9035 ;;  ap              1   55[COMRAM] PTR void [1]
  9036 ;;		 -> ?_sprintf(2), 
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  2   49[COMRAM] int 
  9039 ;; Registers used:
  9040 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9046 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9047 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9049 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9050 ;;Total ram usage:       19 bytes
  9051 ;; Hardware stack levels used: 1
  9052 ;; Hardware stack levels required when called: 8
  9053 ;; This function calls:
  9054 ;;		_vfprintf
  9055 ;; This function is called by:
  9056 ;;		_calibration_routine
  9057 ;;		_send2USART
  9058 ;;		_ADC2String
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           	psect	text46
  9063   004206                     __ptext46:
  9064                           	callstack 0
  9065   004206                     _sprintf:
  9066                           	callstack 21
  9067   004206  0E34               	movlw	low (?_sprintf+2)
  9068   004208  6E38               	movwf	sprintf@ap^0,c
  9069   00420A  C032  F039         	movff	sprintf@s,sprintf@f
  9070   00420E  0E00               	movlw	0
  9071   004210  6E3D               	movwf	(sprintf@f+4)^0,c
  9072   004212  0E00               	movlw	0
  9073   004214  6E3C               	movwf	(sprintf@f+3)^0,c
  9074   004216  0E00               	movlw	0
  9075   004218  6E44               	movwf	(sprintf@f+11)^0,c
  9076   00421A  0E00               	movlw	0
  9077   00421C  6E43               	movwf	(sprintf@f+10)^0,c
  9078   00421E  0E39               	movlw	low sprintf@f
  9079   004220  6E2E               	movwf	vfprintf@fp^0,c
  9080   004222  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9081   004226  0E38               	movlw	low sprintf@ap
  9082   004228  6E30               	movwf	vfprintf@ap^0,c
  9083   00422A  EC6B  F020         	call	_vfprintf	;wreg free
  9084   00422E  5032               	movf	sprintf@s^0,w,c
  9085   004230  243C               	addwf	(sprintf@f+3)^0,w,c
  9086   004232  6ED9               	movwf	fsr2l,c
  9087   004234  6ADA               	clrf	fsr2h,c
  9088   004236  6ADF               	clrf	indf2,c
  9089   004238  0012               	return		;funcret
  9090   00423A                     __end_of_sprintf:
  9091                           	callstack 0
  9092                           
  9093 ;; *************** function _vfprintf *****************
  9094 ;; Defined at:
  9095 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9098 ;;		 -> sprintf@f(12), 
  9099 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9100 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(35), 
  9101 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9102 ;;  ap              1   47[COMRAM] PTR PTR void 
  9103 ;;		 -> sprintf@ap(1), 
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9106 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(35), 
  9107 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  2   45[COMRAM] int 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9117 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9121 ;;Total ram usage:        4 bytes
  9122 ;; Hardware stack levels used: 1
  9123 ;; Hardware stack levels required when called: 7
  9124 ;; This function calls:
  9125 ;;		_vfpfcnvrt
  9126 ;; This function is called by:
  9127 ;;		_sprintf
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text47
  9132   0040D6                     __ptext47:
  9133                           	callstack 0
  9134   0040D6                     _vfprintf:
  9135                           	callstack 21
  9136   0040D6                     
  9137                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9138   0040D6  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9139                           
  9140                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9141   0040DA  EF77  F020         	goto	l5231
  9142   0040DE                     l5229:
  9143                           
  9144                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9145   0040DE  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9146   0040E2  0E31               	movlw	low vfprintf@cfmt
  9147   0040E4  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9148   0040E6  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9149   0040EA  EC00  F016         	call	_vfpfcnvrt	;wreg free
  9150   0040EE                     l5231:
  9151                           
  9152                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9153   0040EE  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9154   0040F2                     	if	1	;There is more than 1 active tblptr byte
  9155   0040F2  0E0E               	movlw	high __smallconst
  9156   0040F4  6EF7               	movwf	tblptrh,c
  9157   0040F6                     	endif
  9158   0040F6                     	if	0	;tblptru may be non-zero
  9159   0040F6                     	endif
  9160   0040F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9161   0040F6  0E00               	movlw	low (__smallconst shr (0+16))
  9162   0040F8  6EF8               	movwf	tblptru,c
  9163   0040FA                     	endif
  9164   0040FA  0008               	tblrd		*
  9165   0040FC  50F5               	movf	tablat,w,c
  9166   0040FE  0900               	iorlw	0
  9167   004100  A4D8               	btfss	status,2,c
  9168   004102  EF85  F020         	goto	u4641
  9169   004106  EF87  F020         	goto	u4640
  9170   00410A                     u4641:
  9171   00410A  EF6F  F020         	goto	l5229
  9172   00410E                     u4640:
  9173   00410E                     
  9174                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9175   00410E  0E00               	movlw	0
  9176   004110  6E2F               	movwf	(?_vfprintf+1)^0,c
  9177   004112  0E00               	movlw	0
  9178   004114  6E2E               	movwf	?_vfprintf^0,c
  9179   004116  0012               	return		;funcret
  9180   004118                     __end_of_vfprintf:
  9181                           	callstack 0
  9182                           
  9183 ;; *************** function _vfpfcnvrt *****************
  9184 ;; Defined at:
  9185 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9188 ;;		 -> sprintf@f(12), 
  9189 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9190 ;;		 -> vfprintf@cfmt(1), 
  9191 ;;  ap              1   36[COMRAM] PTR PTR void 
  9192 ;;		 -> sprintf@ap(1), 
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;  convarg         4   39[COMRAM] struct .
  9195 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9196 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(35), 
  9197 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9198 ;;  done            1   43[COMRAM] _Bool 
  9199 ;;  c               1    0        unsigned char 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  1    wreg      void 
  9202 ;; Registers used:
  9203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9209 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9210 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9211 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9212 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9213 ;;Total ram usage:       11 bytes
  9214 ;; Hardware stack levels used: 1
  9215 ;; Hardware stack levels required when called: 6
  9216 ;; This function calls:
  9217 ;;		_dtoa
  9218 ;;		_fputc
  9219 ;;		_read_prec_or_width
  9220 ;; This function is called by:
  9221 ;;		_vfprintf
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text48
  9226   002C00                     __ptext48:
  9227                           	callstack 0
  9228   002C00                     _vfpfcnvrt:
  9229                           	callstack 21
  9230   002C00                     
  9231                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9232   002C00  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9233   002C02  6ED9               	movwf	fsr2l,c
  9234   002C04  6ADA               	clrf	fsr2h,c
  9235   002C06  CFDF FFF6          	movff	indf2,tblptrl
  9236   002C0A                     	if	1	;There is more than 1 active tblptr byte
  9237   002C0A  0E0E               	movlw	high __smallconst
  9238   002C0C  6EF7               	movwf	tblptrh,c
  9239   002C0E                     	endif
  9240   002C0E                     	if	0	;tblptru may be non-zero
  9241   002C0E                     	endif
  9242   002C0E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9243   002C0E  0E00               	movlw	low (__smallconst shr (0+16))
  9244   002C10  6EF8               	movwf	tblptru,c
  9245   002C12                     	endif
  9246   002C12  0008               	tblrd		*
  9247   002C14  50F5               	movf	tablat,w,c
  9248   002C16  0A25               	xorlw	37
  9249   002C18  A4D8               	btfss	status,2,c
  9250   002C1A  EF11  F016         	goto	u4591
  9251   002C1E  EF13  F016         	goto	u4590
  9252   002C22                     u4591:
  9253   002C22  EFB0  F016         	goto	l5217
  9254   002C26                     u4590:
  9255   002C26                     
  9256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9257   002C26  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9258   002C28  6ED9               	movwf	fsr2l,c
  9259   002C2A  6ADA               	clrf	fsr2h,c
  9260   002C2C  2ADF               	incf	indf2,f,c
  9261   002C2E                     
  9262                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9263   002C2E  0E00               	movlw	0
  9264   002C30  0100               	movlb	0	; () banked
  9265   002C32  6FD1               	movwf	(_width+1)& (0+255),b
  9266   002C34  0E00               	movlw	0
  9267   002C36  6FD0               	movwf	_width& (0+255),b
  9268   002C38  C0D0  F0D4         	movff	_width,_flags
  9269   002C3C                     
  9270                           ; BSR set to: 0
  9271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9272   002C3C  69D2               	setf	_prec& (0+255),b
  9273   002C3E  69D3               	setf	(_prec+1)& (0+255),b
  9274   002C40                     
  9275                           ; BSR set to: 0
  9276                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9277   002C40  0E00               	movlw	0
  9278   002C42  6E2C               	movwf	vfpfcnvrt@done^0,c
  9279                           
  9280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9281   002C44  EF4B  F016         	goto	l5191
  9282   002C48                     l5181:
  9283                           
  9284                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9285   002C48  0100               	movlb	0	; () banked
  9286   002C4A  83D4               	bsf	_flags& (0+255),1,b
  9287   002C4C                     
  9288                           ; BSR set to: 0
  9289                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9290   002C4C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9291   002C4E  6ED9               	movwf	fsr2l,c
  9292   002C50  6ADA               	clrf	fsr2h,c
  9293   002C52  2ADF               	incf	indf2,f,c
  9294                           
  9295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9296   002C54  EF4B  F016         	goto	l5191
  9297   002C58                     l5185:
  9298                           
  9299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9300   002C58  0E01               	movlw	1
  9301   002C5A  6E2C               	movwf	vfpfcnvrt@done^0,c
  9302                           
  9303                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9304   002C5C  EF4B  F016         	goto	l5191
  9305   002C60                     l5189:
  9306   002C60  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9307   002C62  6ED9               	movwf	fsr2l,c
  9308   002C64  6ADA               	clrf	fsr2h,c
  9309   002C66  CFDF FFF6          	movff	indf2,tblptrl
  9310   002C6A                     	if	1	;There is more than 1 active tblptr byte
  9311   002C6A  0E0E               	movlw	high __smallconst
  9312   002C6C  6EF7               	movwf	tblptrh,c
  9313   002C6E                     	endif
  9314   002C6E                     	if	0	;tblptru may be non-zero
  9315   002C6E                     	endif
  9316   002C6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9317   002C6E  0E00               	movlw	low (__smallconst shr (0+16))
  9318   002C70  6EF8               	movwf	tblptru,c
  9319   002C72                     	endif
  9320   002C72  0008               	tblrd		*
  9321   002C74  50F5               	movf	tablat,w,c
  9322   002C76  6E26               	movwf	??_vfpfcnvrt^0,c
  9323   002C78  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9324                           
  9325                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9326                           ; Switch size 1, requested type "simple"
  9327                           ; Number of cases is 1, Range of values is 0 to 0
  9328                           ; switch strategies available:
  9329                           ; Name         Instructions Cycles
  9330                           ; simple_byte            4     3 (average)
  9331                           ;	Chosen strategy is simple_byte
  9332   002C7A  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9333   002C7C  0A00               	xorlw	0	; case 0
  9334   002C7E  B4D8               	btfsc	status,2,c
  9335   002C80  EF44  F016         	goto	l5585
  9336   002C84  EF2C  F016         	goto	l5185
  9337   002C88                     l5585:
  9338                           
  9339                           ; Switch size 1, requested type "simple"
  9340                           ; Number of cases is 1, Range of values is 48 to 48
  9341                           ; switch strategies available:
  9342                           ; Name         Instructions Cycles
  9343                           ; simple_byte            4     3 (average)
  9344                           ;	Chosen strategy is simple_byte
  9345   002C88  5026               	movf	??_vfpfcnvrt^0,w,c
  9346   002C8A  0A30               	xorlw	48	; case 48
  9347   002C8C  B4D8               	btfsc	status,2,c
  9348   002C8E  EF24  F016         	goto	l5181
  9349   002C92  EF2C  F016         	goto	l5185
  9350   002C96                     l5191:
  9351                           
  9352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9353   002C96  502C               	movf	vfpfcnvrt@done^0,w,c
  9354   002C98  B4D8               	btfsc	status,2,c
  9355   002C9A  EF51  F016         	goto	u4601
  9356   002C9E  EF53  F016         	goto	u4600
  9357   002CA2                     u4601:
  9358   002CA2  EF30  F016         	goto	l5189
  9359   002CA6                     u4600:
  9360   002CA6                     
  9361                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9362   002CA6  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9363   002CAA  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9364   002CAE  EC28  F01B         	call	_read_prec_or_width	;wreg free
  9365   002CB2  C008  F0D0         	movff	?_read_prec_or_width,_width
  9366   002CB6  C009  F0D1         	movff	?_read_prec_or_width+1,_width+1
  9367   002CBA                     
  9368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9369   002CBA  0100               	movlb	0	; () banked
  9370   002CBC  BFD1               	btfsc	(_width+1)& (0+255),7,b
  9371   002CBE  EF65  F016         	goto	u4610
  9372   002CC2  EF63  F016         	goto	u4611
  9373   002CC6                     u4611:
  9374   002CC6  EF6A  F016         	goto	l5199
  9375   002CCA                     u4610:
  9376   002CCA                     
  9377                           ; BSR set to: 0
  9378                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9379   002CCA  81D4               	bsf	_flags& (0+255),0,b
  9380                           
  9381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9382   002CCC  6DD0               	negf	_width& (0+255),b
  9383   002CCE  1FD1               	comf	(_width+1)& (0+255),f,b
  9384   002CD0  B0D8               	btfsc	status,0,c
  9385   002CD2  2BD1               	incf	(_width+1)& (0+255),f,b
  9386   002CD4                     l5199:
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9390   002CD4  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9391   002CD6  6ED9               	movwf	fsr2l,c
  9392   002CD8  6ADA               	clrf	fsr2h,c
  9393   002CDA  50DF               	movf	indf2,w,c
  9394   002CDC  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9395   002CDE                     
  9396                           ; BSR set to: 0
  9397                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9398   002CDE  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9399   002CE2                     	if	1	;There is more than 1 active tblptr byte
  9400   002CE2  0E0E               	movlw	high __smallconst
  9401   002CE4  6EF7               	movwf	tblptrh,c
  9402   002CE6                     	endif
  9403   002CE6                     	if	0	;tblptru may be non-zero
  9404   002CE6                     	endif
  9405   002CE6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9406   002CE6  0E00               	movlw	low (__smallconst shr (0+16))
  9407   002CE8  6EF8               	movwf	tblptru,c
  9408   002CEA                     	endif
  9409   002CEA  0008               	tblrd		*
  9410   002CEC  50F5               	movf	tablat,w,c
  9411   002CEE  0A64               	xorlw	100
  9412   002CF0  B4D8               	btfsc	status,2,c
  9413   002CF2  EF7D  F016         	goto	u4621
  9414   002CF6  EF7F  F016         	goto	u4620
  9415   002CFA                     u4621:
  9416   002CFA  EF8F  F016         	goto	l5205
  9417   002CFE                     u4620:
  9418   002CFE                     
  9419                           ; BSR set to: 0
  9420   002CFE  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9421   002D02                     	if	1	;There is more than 1 active tblptr byte
  9422   002D02  0E0E               	movlw	high __smallconst
  9423   002D04  6EF7               	movwf	tblptrh,c
  9424   002D06                     	endif
  9425   002D06                     	if	0	;tblptru may be non-zero
  9426   002D06                     	endif
  9427   002D06                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9428   002D06  0E00               	movlw	low (__smallconst shr (0+16))
  9429   002D08  6EF8               	movwf	tblptru,c
  9430   002D0A                     	endif
  9431   002D0A  0008               	tblrd		*
  9432   002D0C  50F5               	movf	tablat,w,c
  9433   002D0E  0A69               	xorlw	105
  9434   002D10  A4D8               	btfss	status,2,c
  9435   002D12  EF8D  F016         	goto	u4631
  9436   002D16  EF8F  F016         	goto	u4630
  9437   002D1A                     u4631:
  9438   002D1A  EFAA  F016         	goto	l5213
  9439   002D1E                     u4630:
  9440   002D1E                     l5205:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9444   002D1E  5025               	movf	vfpfcnvrt@ap^0,w,c
  9445   002D20  6ED9               	movwf	fsr2l,c
  9446   002D22  6ADA               	clrf	fsr2h,c
  9447   002D24  0E02               	movlw	2
  9448   002D26  26DF               	addwf	indf2,f,c
  9449   002D28  5CDF               	subwf	indf2,w,c
  9450   002D2A  6ED9               	movwf	fsr2l,c
  9451   002D2C  6ADA               	clrf	fsr2h,c
  9452   002D2E  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9453   002D32  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9454   002D36                     
  9455                           ; BSR set to: 0
  9456                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9457   002D36  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9458   002D38  6ED9               	movwf	fsr2l,c
  9459   002D3A  6ADA               	clrf	fsr2h,c
  9460   002D3C  282D               	incf	vfpfcnvrt@cp^0,w,c
  9461   002D3E  6EDF               	movwf	indf2,c
  9462   002D40                     
  9463                           ; BSR set to: 0
  9464                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9465   002D40  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9466   002D44  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9467   002D48  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9468   002D4C  ECC4  F016         	call	_dtoa	;wreg free
  9469   002D50  EFC3  F016         	goto	l1411
  9470   002D54                     l5213:
  9471                           
  9472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9473   002D54  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9474   002D56  6ED9               	movwf	fsr2l,c
  9475   002D58  6ADA               	clrf	fsr2h,c
  9476   002D5A  2ADF               	incf	indf2,f,c
  9477   002D5C  EFC3  F016         	goto	l1411
  9478   002D60                     l5217:
  9479                           
  9480                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9481   002D60  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9482   002D62  6ED9               	movwf	fsr2l,c
  9483   002D64  6ADA               	clrf	fsr2h,c
  9484   002D66  CFDF FFF6          	movff	indf2,tblptrl
  9485   002D6A                     	if	1	;There is more than 1 active tblptr byte
  9486   002D6A  0E0E               	movlw	high __smallconst
  9487   002D6C  6EF7               	movwf	tblptrh,c
  9488   002D6E                     	endif
  9489   002D6E                     	if	0	;tblptru may be non-zero
  9490   002D6E                     	endif
  9491   002D6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9492   002D6E  0E00               	movlw	low (__smallconst shr (0+16))
  9493   002D70  6EF8               	movwf	tblptru,c
  9494   002D72                     	endif
  9495   002D72  0008               	tblrd		*
  9496   002D74  50F5               	movf	tablat,w,c
  9497   002D76  6E02               	movwf	fputc@c^0,c
  9498   002D78  6A03               	clrf	(fputc@c+1)^0,c
  9499   002D7A  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9500   002D7E  ECD4  F01B         	call	_fputc	;wreg free
  9501   002D82  EFAA  F016         	goto	l5213
  9502   002D86                     l1411:
  9503   002D86  0012               	return		;funcret
  9504   002D88                     __end_of_vfpfcnvrt:
  9505                           	callstack 0
  9506                           
  9507 ;; *************** function _read_prec_or_width *****************
  9508 ;; Defined at:
  9509 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9510 ;; Parameters:    Size  Location     Type
  9511 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9512 ;;		 -> vfprintf@cfmt(1), 
  9513 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9514 ;;		 -> sprintf@ap(1), 
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  c               1    9[COMRAM] unsigned char 
  9517 ;;  n               2   10[COMRAM] int 
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  2    7[COMRAM] int 
  9520 ;; Registers used:
  9521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9528 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9531 ;;Total ram usage:        5 bytes
  9532 ;; Hardware stack levels used: 1
  9533 ;; Hardware stack levels required when called: 2
  9534 ;; This function calls:
  9535 ;;		___wmul
  9536 ;; This function is called by:
  9537 ;;		_vfpfcnvrt
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text49
  9542   003650                     __ptext49:
  9543                           	callstack 0
  9544   003650                     _read_prec_or_width:
  9545                           	callstack 24
  9546   003650                     
  9547                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9548   003650  0E00               	movlw	0
  9549   003652  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9550   003654  0E00               	movlw	0
  9551   003656  6E0B               	movwf	read_prec_or_width@n^0,c
  9552   003658                     
  9553                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9554   003658  5008               	movf	read_prec_or_width@fmt^0,w,c
  9555   00365A  6ED9               	movwf	fsr2l,c
  9556   00365C  6ADA               	clrf	fsr2h,c
  9557   00365E  CFDF FFF6          	movff	indf2,tblptrl
  9558   003662                     	if	1	;There is more than 1 active tblptr byte
  9559   003662  0E0E               	movlw	high __smallconst
  9560   003664  6EF7               	movwf	tblptrh,c
  9561   003666                     	endif
  9562   003666                     	if	0	;tblptru may be non-zero
  9563   003666                     	endif
  9564   003666                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9565   003666  0E00               	movlw	low (__smallconst shr (0+16))
  9566   003668  6EF8               	movwf	tblptru,c
  9567   00366A                     	endif
  9568   00366A  0008               	tblrd		*
  9569   00366C  50F5               	movf	tablat,w,c
  9570   00366E  0A2A               	xorlw	42
  9571   003670  A4D8               	btfss	status,2,c
  9572   003672  EF3D  F01B         	goto	u2591
  9573   003676  EF3F  F01B         	goto	u2590
  9574   00367A                     u2591:
  9575   00367A  EF65  F01B         	goto	l3505
  9576   00367E                     u2590:
  9577   00367E                     
  9578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9579   00367E  5008               	movf	read_prec_or_width@fmt^0,w,c
  9580   003680  6ED9               	movwf	fsr2l,c
  9581   003682  6ADA               	clrf	fsr2h,c
  9582   003684  2ADF               	incf	indf2,f,c
  9583   003686                     
  9584                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9585   003686  5009               	movf	read_prec_or_width@ap^0,w,c
  9586   003688  6ED9               	movwf	fsr2l,c
  9587   00368A  6ADA               	clrf	fsr2h,c
  9588   00368C  0E02               	movlw	2
  9589   00368E  26DF               	addwf	indf2,f,c
  9590   003690  5CDF               	subwf	indf2,w,c
  9591   003692  6ED9               	movwf	fsr2l,c
  9592   003694  6ADA               	clrf	fsr2h,c
  9593   003696  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9594   00369A  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9595                           
  9596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9597   00369E  EF7A  F01B         	goto	l1392
  9598   0036A2                     l3501:
  9599                           
  9600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9601   0036A2  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9602   0036A6  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9603   0036AA  0E00               	movlw	0
  9604   0036AC  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9605   0036AE  0E0A               	movlw	10
  9606   0036B0  6E04               	movwf	___wmul@multiplicand^0,c
  9607   0036B2  EC27  F022         	call	___wmul	;wreg free
  9608   0036B6  500A               	movf	read_prec_or_width@c^0,w,c
  9609   0036B8  2402               	addwf	?___wmul^0,w,c
  9610   0036BA  6E0B               	movwf	read_prec_or_width@n^0,c
  9611   0036BC  0E00               	movlw	0
  9612   0036BE  2003               	addwfc	(?___wmul+1)^0,w,c
  9613   0036C0  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9614   0036C2                     
  9615                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9616   0036C2  5008               	movf	read_prec_or_width@fmt^0,w,c
  9617   0036C4  6ED9               	movwf	fsr2l,c
  9618   0036C6  6ADA               	clrf	fsr2h,c
  9619   0036C8  2ADF               	incf	indf2,f,c
  9620   0036CA                     l3505:
  9621                           
  9622                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9623   0036CA  5008               	movf	read_prec_or_width@fmt^0,w,c
  9624   0036CC  6ED9               	movwf	fsr2l,c
  9625   0036CE  6ADA               	clrf	fsr2h,c
  9626   0036D0  CFDF FFF6          	movff	indf2,tblptrl
  9627   0036D4                     	if	1	;There is more than 1 active tblptr byte
  9628   0036D4  0E0E               	movlw	high __smallconst
  9629   0036D6  6EF7               	movwf	tblptrh,c
  9630   0036D8                     	endif
  9631   0036D8                     	if	0	;tblptru may be non-zero
  9632   0036D8                     	endif
  9633   0036D8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9634   0036D8  0E00               	movlw	low (__smallconst shr (0+16))
  9635   0036DA  6EF8               	movwf	tblptru,c
  9636   0036DC                     	endif
  9637   0036DC  0008               	tblrd		*
  9638   0036DE  50F5               	movf	tablat,w,c
  9639   0036E0  0FD0               	addlw	208
  9640   0036E2  6E0A               	movwf	read_prec_or_width@c^0,c
  9641   0036E4  0E09               	movlw	9
  9642   0036E6  640A               	cpfsgt	read_prec_or_width@c^0,c
  9643   0036E8  EF78  F01B         	goto	u2601
  9644   0036EC  EF7A  F01B         	goto	u2600
  9645   0036F0                     u2601:
  9646   0036F0  EF51  F01B         	goto	l3501
  9647   0036F4                     u2600:
  9648   0036F4                     l1392:
  9649                           
  9650                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9651   0036F4  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9652   0036F8  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9653   0036FC  0012               	return		;funcret
  9654   0036FE                     __end_of_read_prec_or_width:
  9655                           	callstack 0
  9656                           
  9657 ;; *************** function ___wmul *****************
  9658 ;; Defined at:
  9659 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  multiplier      2    1[COMRAM] unsigned int 
  9662 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  product         2    5[COMRAM] unsigned int 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  2    1[COMRAM] unsigned int 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, prodl, prodh
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9678 ;;Total ram usage:        6 bytes
  9679 ;; Hardware stack levels used: 1
  9680 ;; Hardware stack levels required when called: 1
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_setMotorPWM
  9685 ;;		_logAction
  9686 ;;		_read_prec_or_width
  9687 ;;		_ADC2String
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text50
  9692   00444E                     __ptext50:
  9693                           	callstack 0
  9694   00444E                     ___wmul:
  9695                           	callstack 27
  9696   00444E  5002               	movf	___wmul@multiplier^0,w,c
  9697   004450  0204               	mulwf	___wmul@multiplicand^0,c
  9698   004452  CFF3 F006          	movff	prodl,___wmul@product
  9699   004456  CFF4 F007          	movff	prodh,___wmul@product+1
  9700   00445A  5002               	movf	___wmul@multiplier^0,w,c
  9701   00445C  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9702   00445E  50F3               	movf	243,w,c
  9703   004460  2607               	addwf	(___wmul@product+1)^0,f,c
  9704   004462  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9705   004464  0204               	mulwf	___wmul@multiplicand^0,c
  9706   004466  50F3               	movf	243,w,c
  9707   004468  2607               	addwf	(___wmul@product+1)^0,f,c
  9708   00446A  C006  F002         	movff	___wmul@product,?___wmul
  9709   00446E  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9710   004472  0012               	return		;funcret
  9711   004474                     __end_of___wmul:
  9712                           	callstack 0
  9713                           
  9714 ;; *************** function _dtoa *****************
  9715 ;; Defined at:
  9716 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9719 ;;		 -> sprintf@f(12), 
  9720 ;;  d               2   24[COMRAM] int 
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;  i               2   32[COMRAM] int 
  9723 ;;  w               2   29[COMRAM] int 
  9724 ;;  s               1   31[COMRAM] unsigned char 
  9725 ;;  p               1   28[COMRAM] _Bool 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9735 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9736 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9738 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9739 ;;Total ram usage:       11 bytes
  9740 ;; Hardware stack levels used: 1
  9741 ;; Hardware stack levels required when called: 5
  9742 ;; This function calls:
  9743 ;;		___awdiv
  9744 ;;		___awmod
  9745 ;;		_abs
  9746 ;;		_pad
  9747 ;; This function is called by:
  9748 ;;		_vfpfcnvrt
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text51
  9753   002D88                     __ptext51:
  9754                           	callstack 0
  9755   002D88                     _dtoa:
  9756                           	callstack 21
  9757   002D88                     
  9758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9759   002D88  0E01               	movlw	1
  9760   002D8A  6E1D               	movwf	dtoa@p^0,c
  9761   002D8C                     
  9762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9763   002D8C  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9764   002D8E  EFCB  F016         	goto	u4491
  9765   002D92  EFCE  F016         	goto	u4490
  9766   002D96                     u4491:
  9767   002D96  0E01               	movlw	1
  9768   002D98  EFCF  F016         	goto	u4500
  9769   002D9C                     u4490:
  9770   002D9C  0E00               	movlw	0
  9771   002D9E                     u4500:
  9772   002D9E  6E20               	movwf	dtoa@s^0,c
  9773   002DA0                     
  9774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9775   002DA0  C0D0  F01E         	movff	_width,dtoa@w
  9776   002DA4  C0D1  F01F         	movff	_width+1,dtoa@w+1
  9777   002DA8                     
  9778                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9779   002DA8  5020               	movf	dtoa@s^0,w,c
  9780   002DAA  B4D8               	btfsc	status,2,c
  9781   002DAC  EFDA  F016         	goto	u4511
  9782   002DB0  EFDC  F016         	goto	u4510
  9783   002DB4                     u4511:
  9784   002DB4  EFF3  F016         	goto	l1375
  9785   002DB8                     u4510:
  9786   002DB8                     
  9787                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9788   002DB8  061E               	decf	dtoa@w^0,f,c
  9789   002DBA  A0D8               	btfss	status,0,c
  9790   002DBC  061F               	decf	(dtoa@w+1)^0,f,c
  9791   002DBE                     
  9792                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9793   002DBE  5020               	movf	dtoa@s^0,w,c
  9794   002DC0  A4D8               	btfss	status,2,c
  9795   002DC2  EFE5  F016         	goto	u4521
  9796   002DC6  EFE7  F016         	goto	u4520
  9797   002DCA                     u4521:
  9798   002DCA  EFED  F016         	goto	l5135
  9799   002DCE                     u4520:
  9800   002DCE  0E00               	movlw	0
  9801   002DD0  6E1C               	movwf	(_dtoa$3035+1)^0,c
  9802   002DD2  0E2B               	movlw	43
  9803   002DD4  6E1B               	movwf	_dtoa$3035^0,c
  9804   002DD6  EFF1  F016         	goto	l5137
  9805   002DDA                     l5135:
  9806   002DDA  0E00               	movlw	0
  9807   002DDC  6E1C               	movwf	(_dtoa$3035+1)^0,c
  9808   002DDE  0E2D               	movlw	45
  9809   002DE0  6E1B               	movwf	_dtoa$3035^0,c
  9810   002DE2                     l5137:
  9811   002DE2  C01B  F020         	movff	_dtoa$3035,dtoa@s
  9812   002DE6                     l1375:
  9813                           
  9814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9815   002DE6  0E00               	movlw	0
  9816   002DE8  6E22               	movwf	(dtoa@i+1)^0,c
  9817   002DEA  0E1F               	movlw	31
  9818   002DEC  6E21               	movwf	dtoa@i^0,c
  9819   002DEE                     
  9820                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9821   002DEE  0E00               	movlw	0
  9822   002DF0  0101               	movlb	1	; () banked
  9823   002DF2  6F83               	movwf	(_dbuf+31)& (0+255),b
  9824                           
  9825                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9826   002DF4  EF2B  F017         	goto	l5151
  9827   002DF8                     l5141:
  9828                           
  9829                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9830   002DF8  0621               	decf	dtoa@i^0,f,c
  9831   002DFA  A0D8               	btfss	status,0,c
  9832   002DFC  0622               	decf	(dtoa@i+1)^0,f,c
  9833   002DFE                     
  9834                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9835   002DFE  0E64               	movlw	low _dbuf
  9836   002E00  2421               	addwf	dtoa@i^0,w,c
  9837   002E02  6ED9               	movwf	fsr2l,c
  9838   002E04  0E01               	movlw	high _dbuf
  9839   002E06  2022               	addwfc	(dtoa@i+1)^0,w,c
  9840   002E08  6EDA               	movwf	fsr2h,c
  9841   002E0A  C019  F002         	movff	dtoa@d,___awmod@dividend
  9842   002E0E  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9843   002E12  0E00               	movlw	0
  9844   002E14  6E05               	movwf	(___awmod@divisor+1)^0,c
  9845   002E16  0E0A               	movlw	10
  9846   002E18  6E04               	movwf	___awmod@divisor^0,c
  9847   002E1A  EC79  F01A         	call	___awmod	;wreg free
  9848   002E1E  C002  F008         	movff	?___awmod,abs@a
  9849   002E22  C003  F009         	movff	?___awmod+1,abs@a+1
  9850   002E26  EC1D  F021         	call	_abs	;wreg free
  9851   002E2A  5008               	movf	?_abs^0,w,c
  9852   002E2C  0F30               	addlw	48
  9853   002E2E  6EDF               	movwf	indf2,c
  9854   002E30                     
  9855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9856   002E30  0E00               	movlw	0
  9857   002E32  6E1D               	movwf	dtoa@p^0,c
  9858   002E34                     
  9859                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9860   002E34  061E               	decf	dtoa@w^0,f,c
  9861   002E36  A0D8               	btfss	status,0,c
  9862   002E38  061F               	decf	(dtoa@w+1)^0,f,c
  9863   002E3A                     
  9864                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9865   002E3A  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9866   002E3E  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9867   002E42  0E00               	movlw	0
  9868   002E44  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9869   002E46  0E0A               	movlw	10
  9870   002E48  6E04               	movwf	___awdiv@divisor^0,c
  9871   002E4A  EC17  F01A         	call	___awdiv	;wreg free
  9872   002E4E  C002  F019         	movff	?___awdiv,dtoa@d
  9873   002E52  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9874   002E56                     l5151:
  9875                           
  9876                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9877   002E56  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9878   002E58  EF36  F017         	goto	u4531
  9879   002E5C  5022               	movf	(dtoa@i+1)^0,w,c
  9880   002E5E  E108               	bnz	u4530
  9881   002E60  0421               	decf	dtoa@i^0,w,c
  9882   002E62  A0D8               	btfss	status,0,c
  9883   002E64  EF36  F017         	goto	u4531
  9884   002E68  EF38  F017         	goto	u4530
  9885   002E6C                     u4531:
  9886   002E6C  EF5E  F017         	goto	l5161
  9887   002E70                     u4530:
  9888   002E70  5019               	movf	dtoa@d^0,w,c
  9889   002E72  101A               	iorwf	(dtoa@d+1)^0,w,c
  9890   002E74  A4D8               	btfss	status,2,c
  9891   002E76  EF3F  F017         	goto	u4541
  9892   002E7A  EF41  F017         	goto	u4540
  9893   002E7E                     u4541:
  9894   002E7E  EFFC  F016         	goto	l5141
  9895   002E82                     u4540:
  9896   002E82  501D               	movf	dtoa@p^0,w,c
  9897   002E84  A4D8               	btfss	status,2,c
  9898   002E86  EF47  F017         	goto	u4551
  9899   002E8A  EF49  F017         	goto	u4550
  9900   002E8E                     u4551:
  9901   002E8E  EFFC  F016         	goto	l5141
  9902   002E92                     u4550:
  9903   002E92  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9904   002E94  EF54  F017         	goto	u4561
  9905   002E98  501F               	movf	(dtoa@w+1)^0,w,c
  9906   002E9A  E108               	bnz	u4560
  9907   002E9C  041E               	decf	dtoa@w^0,w,c
  9908   002E9E  A0D8               	btfss	status,0,c
  9909   002EA0  EF54  F017         	goto	u4561
  9910   002EA4  EF56  F017         	goto	u4560
  9911   002EA8                     u4561:
  9912   002EA8  EF5E  F017         	goto	l5161
  9913   002EAC                     u4560:
  9914   002EAC  0100               	movlb	0	; () banked
  9915   002EAE  B3D4               	btfsc	_flags& (0+255),1,b
  9916   002EB0  EF5C  F017         	goto	u4571
  9917   002EB4  EF5E  F017         	goto	u4570
  9918   002EB8                     u4571:
  9919   002EB8  EFFC  F016         	goto	l5141
  9920   002EBC                     u4570:
  9921   002EBC                     l5161:
  9922                           
  9923                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9924   002EBC  5020               	movf	dtoa@s^0,w,c
  9925   002EBE  B4D8               	btfsc	status,2,c
  9926   002EC0  EF64  F017         	goto	u4581
  9927   002EC4  EF66  F017         	goto	u4580
  9928   002EC8                     u4581:
  9929   002EC8  EF71  F017         	goto	l5167
  9930   002ECC                     u4580:
  9931   002ECC                     
  9932                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9933   002ECC  0621               	decf	dtoa@i^0,f,c
  9934   002ECE  A0D8               	btfss	status,0,c
  9935   002ED0  0622               	decf	(dtoa@i+1)^0,f,c
  9936   002ED2                     
  9937                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9938   002ED2  0E64               	movlw	low _dbuf
  9939   002ED4  2421               	addwf	dtoa@i^0,w,c
  9940   002ED6  6ED9               	movwf	fsr2l,c
  9941   002ED8  0E01               	movlw	high _dbuf
  9942   002EDA  2022               	addwfc	(dtoa@i+1)^0,w,c
  9943   002EDC  6EDA               	movwf	fsr2h,c
  9944   002EDE  C020  FFDF         	movff	dtoa@s,indf2
  9945   002EE2                     l5167:
  9946                           
  9947                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9948   002EE2  C018  F010         	movff	dtoa@fp,pad@fp
  9949   002EE6  0E64               	movlw	low _dbuf
  9950   002EE8  2421               	addwf	dtoa@i^0,w,c
  9951   002EEA  6E11               	movwf	pad@buf^0,c
  9952   002EEC  0E01               	movlw	high _dbuf
  9953   002EEE  2022               	addwfc	(dtoa@i+1)^0,w,c
  9954   002EF0  6E12               	movwf	(pad@buf+1)^0,c
  9955   002EF2  C01E  F013         	movff	dtoa@w,pad@p
  9956   002EF6  C01F  F014         	movff	dtoa@w+1,pad@p+1
  9957   002EFA  EC29  F01C         	call	_pad	;wreg free
  9958   002EFE  0012               	return		;funcret
  9959   002F00                     __end_of_dtoa:
  9960                           	callstack 0
  9961                           
  9962 ;; *************** function _pad *****************
  9963 ;; Defined at:
  9964 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  9967 ;;		 -> sprintf@f(12), 
  9968 ;;  buf             2   16[COMRAM] PTR unsigned char 
  9969 ;;		 -> dbuf(32), 
  9970 ;;  p               2   18[COMRAM] int 
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;  i               2   21[COMRAM] int 
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  1    wreg      void 
  9975 ;; Registers used:
  9976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9982 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;Total ram usage:        8 bytes
  9987 ;; Hardware stack levels used: 1
  9988 ;; Hardware stack levels required when called: 4
  9989 ;; This function calls:
  9990 ;;		_fputc
  9991 ;;		_fputs
  9992 ;; This function is called by:
  9993 ;;		_dtoa
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           	psect	text52
  9998   003852                     __ptext52:
  9999                           	callstack 0
 10000   003852                     _pad:
 10001                           	callstack 21
 10002   003852                     
 10003                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10004   003852  0100               	movlb	0	; () banked
 10005   003854  A1D4               	btfss	_flags& (0+255),0,b
 10006   003856  EF2F  F01C         	goto	u4451
 10007   00385A  EF31  F01C         	goto	u4450
 10008   00385E                     u4451:
 10009   00385E  EF39  F01C         	goto	l5109
 10010   003862                     u4450:
 10011   003862                     
 10012                           ; BSR set to: 0
 10013                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10014   003862  C011  F00A         	movff	pad@buf,fputs@s
 10015   003866  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10016   00386A  C010  F00C         	movff	pad@fp,fputs@fp
 10017   00386E  ECAD  F020         	call	_fputs	;wreg free
 10018   003872                     l5109:
 10019                           
 10020                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10021   003872  BE14               	btfsc	(pad@p+1)^0,7,c
 10022   003874  EF40  F01C         	goto	u4460
 10023   003878  EF3E  F01C         	goto	u4461
 10024   00387C                     u4461:
 10025   00387C  EF44  F01C         	goto	l1367
 10026   003880                     u4460:
 10027   003880                     
 10028                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10029   003880  0E00               	movlw	0
 10030   003882  6E14               	movwf	(pad@p+1)^0,c
 10031   003884  0E00               	movlw	0
 10032   003886  6E13               	movwf	pad@p^0,c
 10033   003888                     l1367:
 10034                           
 10035                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10036   003888  0E00               	movlw	0
 10037   00388A  6E17               	movwf	(pad@i+1)^0,c
 10038   00388C  0E00               	movlw	0
 10039   00388E  6E16               	movwf	pad@i^0,c
 10040                           
 10041                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10042   003890  EF54  F01C         	goto	l5117
 10043   003894                     l5113:
 10044                           
 10045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10046   003894  0E00               	movlw	0
 10047   003896  6E03               	movwf	(fputc@c+1)^0,c
 10048   003898  0E20               	movlw	32
 10049   00389A  6E02               	movwf	fputc@c^0,c
 10050   00389C  C010  F004         	movff	pad@fp,fputc@fp
 10051   0038A0  ECD4  F01B         	call	_fputc	;wreg free
 10052   0038A4                     
 10053                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10054   0038A4  4A16               	infsnz	pad@i^0,f,c
 10055   0038A6  2A17               	incf	(pad@i+1)^0,f,c
 10056   0038A8                     l5117:
 10057                           
 10058                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10059   0038A8  5013               	movf	pad@p^0,w,c
 10060   0038AA  5C16               	subwf	pad@i^0,w,c
 10061   0038AC  5017               	movf	(pad@i+1)^0,w,c
 10062   0038AE  0A80               	xorlw	128
 10063   0038B0  6E15               	movwf	??_pad^0,c
 10064   0038B2  5014               	movf	(pad@p+1)^0,w,c
 10065   0038B4  0A80               	xorlw	128
 10066   0038B6  5815               	subwfb	??_pad^0,w,c
 10067   0038B8  A0D8               	btfss	status,0,c
 10068   0038BA  EF61  F01C         	goto	u4471
 10069   0038BE  EF63  F01C         	goto	u4470
 10070   0038C2                     u4471:
 10071   0038C2  EF4A  F01C         	goto	l5113
 10072   0038C6                     u4470:
 10073   0038C6                     
 10074                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10075   0038C6  0100               	movlb	0	; () banked
 10076   0038C8  B1D4               	btfsc	_flags& (0+255),0,b
 10077   0038CA  EF69  F01C         	goto	u4481
 10078   0038CE  EF6B  F01C         	goto	u4480
 10079   0038D2                     u4481:
 10080   0038D2  EF73  F01C         	goto	l1372
 10081   0038D6                     u4480:
 10082   0038D6                     
 10083                           ; BSR set to: 0
 10084                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10085   0038D6  C011  F00A         	movff	pad@buf,fputs@s
 10086   0038DA  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10087   0038DE  C010  F00C         	movff	pad@fp,fputs@fp
 10088   0038E2  ECAD  F020         	call	_fputs	;wreg free
 10089   0038E6                     l1372:
 10090   0038E6  0012               	return		;funcret
 10091   0038E8                     __end_of_pad:
 10092                           	callstack 0
 10093                           
 10094 ;; *************** function _fputs *****************
 10095 ;; Defined at:
 10096 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10099 ;;		 -> dbuf(32), 
 10100 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10101 ;;		 -> sprintf@f(12), 
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;  i               2   13[COMRAM] int 
 10104 ;;  c               1   12[COMRAM] unsigned char 
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  2    9[COMRAM] int 
 10107 ;; Registers used:
 10108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10114 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10115 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10117 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10118 ;;Total ram usage:        6 bytes
 10119 ;; Hardware stack levels used: 1
 10120 ;; Hardware stack levels required when called: 3
 10121 ;; This function calls:
 10122 ;;		_fputc
 10123 ;; This function is called by:
 10124 ;;		_pad
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           	psect	text53
 10129   00415A                     __ptext53:
 10130                           	callstack 0
 10131   00415A                     _fputs:
 10132                           	callstack 21
 10133   00415A  0E00               	movlw	0
 10134   00415C  6E0F               	movwf	(fputs@i+1)^0,c
 10135   00415E  0E00               	movlw	0
 10136   004160  6E0E               	movwf	fputs@i^0,c
 10137   004162  EFBC  F020         	goto	l5103
 10138   004166                     l5099:
 10139   004166  C00D  F002         	movff	fputs@c,fputc@c
 10140   00416A  6A03               	clrf	(fputc@c+1)^0,c
 10141   00416C  C00C  F004         	movff	fputs@fp,fputc@fp
 10142   004170  ECD4  F01B         	call	_fputc	;wreg free
 10143   004174  4A0E               	infsnz	fputs@i^0,f,c
 10144   004176  2A0F               	incf	(fputs@i+1)^0,f,c
 10145   004178                     l5103:
 10146   004178  500E               	movf	fputs@i^0,w,c
 10147   00417A  240A               	addwf	fputs@s^0,w,c
 10148   00417C  6ED9               	movwf	fsr2l,c
 10149   00417E  500F               	movf	(fputs@i+1)^0,w,c
 10150   004180  200B               	addwfc	(fputs@s+1)^0,w,c
 10151   004182  6EDA               	movwf	fsr2h,c
 10152   004184  50DF               	movf	indf2,w,c
 10153   004186  6E0D               	movwf	fputs@c^0,c
 10154   004188  500D               	movf	fputs@c^0,w,c
 10155   00418A  A4D8               	btfss	status,2,c
 10156   00418C  EFCA  F020         	goto	u4441
 10157   004190  EFCC  F020         	goto	u4440
 10158   004194                     u4441:
 10159   004194  EFB3  F020         	goto	l5099
 10160   004198                     u4440:
 10161   004198  0012               	return		;funcret
 10162   00419A                     __end_of_fputs:
 10163                           	callstack 0
 10164                           
 10165 ;; *************** function _fputc *****************
 10166 ;; Defined at:
 10167 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  c               2    1[COMRAM] int 
 10170 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10171 ;;		 -> sprintf@f(12), 
 10172 ;; Auto vars:     Size  Location     Type
 10173 ;;		None
 10174 ;; Return value:  Size  Location     Type
 10175 ;;                  2    1[COMRAM] int 
 10176 ;; Registers used:
 10177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10183 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10185 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10186 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10187 ;;Total ram usage:        8 bytes
 10188 ;; Hardware stack levels used: 1
 10189 ;; Hardware stack levels required when called: 2
 10190 ;; This function calls:
 10191 ;;		_putch
 10192 ;; This function is called by:
 10193 ;;		_pad
 10194 ;;		_vfpfcnvrt
 10195 ;;		_fputs
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           	psect	text54
 10200   0037A8                     __ptext54:
 10201                           	callstack 0
 10202   0037A8                     _fputc:
 10203                           	callstack 24
 10204   0037A8  5004               	movf	fputc@fp^0,w,c
 10205   0037AA  B4D8               	btfsc	status,2,c
 10206   0037AC  EFDA  F01B         	goto	u2241
 10207   0037B0  EFDC  F01B         	goto	u2240
 10208   0037B4                     u2241:
 10209   0037B4  EFE4  F01B         	goto	l3297
 10210   0037B8                     u2240:
 10211   0037B8  5004               	movf	fputc@fp^0,w,c
 10212   0037BA  A4D8               	btfss	status,2,c
 10213   0037BC  EFE2  F01B         	goto	u2251
 10214   0037C0  EFE4  F01B         	goto	u2250
 10215   0037C4                     u2251:
 10216   0037C4  EFE9  F01B         	goto	l3299
 10217   0037C8                     u2250:
 10218   0037C8                     l3297:
 10219   0037C8  5002               	movf	fputc@c^0,w,c
 10220   0037CA  ECA7  F022         	call	_putch
 10221   0037CE  EF28  F01C         	goto	l1436
 10222   0037D2                     l3299:
 10223   0037D2  5004               	movf	fputc@fp^0,w,c
 10224   0037D4  6ED9               	movwf	fsr2l,c
 10225   0037D6  6ADA               	clrf	fsr2h,c
 10226   0037D8  0E0A               	movlw	10
 10227   0037DA  26D9               	addwf	fsr2l,f,c
 10228   0037DC  50DE               	movf	postinc2,w,c
 10229   0037DE  10DE               	iorwf	postinc2,w,c
 10230   0037E0  B4D8               	btfsc	status,2,c
 10231   0037E2  EFF5  F01B         	goto	u2261
 10232   0037E6  EFF7  F01B         	goto	u2260
 10233   0037EA                     u2261:
 10234   0037EA  EF10  F01C         	goto	l3303
 10235   0037EE                     u2260:
 10236   0037EE  5004               	movf	fputc@fp^0,w,c
 10237   0037F0  6ED9               	movwf	fsr2l,c
 10238   0037F2  6ADA               	clrf	fsr2h,c
 10239   0037F4  0E0A               	movlw	10
 10240   0037F6  26D9               	addwf	fsr2l,f,c
 10241   0037F8  5004               	movf	fputc@fp^0,w,c
 10242   0037FA  6EE1               	movwf	fsr1l,c
 10243   0037FC  6AE2               	clrf	fsr1h,c
 10244   0037FE  0E03               	movlw	3
 10245   003800  26E1               	addwf	fsr1l,f,c
 10246   003802  50DE               	movf	postinc2,w,c
 10247   003804  5CE6               	subwf	postinc1,w,c
 10248   003806  50E6               	movf	postinc1,w,c
 10249   003808  0A80               	xorlw	128
 10250   00380A  6E09               	movwf	(??_fputc+4)^0,c
 10251   00380C  50DE               	movf	postinc2,w,c
 10252   00380E  0A80               	xorlw	128
 10253   003810  5809               	subwfb	(??_fputc+4)^0,w,c
 10254   003812  B0D8               	btfsc	status,0,c
 10255   003814  EF0E  F01C         	goto	u2271
 10256   003818  EF10  F01C         	goto	u2270
 10257   00381C                     u2271:
 10258   00381C  EF28  F01C         	goto	l1436
 10259   003820                     u2270:
 10260   003820                     l3303:
 10261   003820  5004               	movf	fputc@fp^0,w,c
 10262   003822  6ED9               	movwf	fsr2l,c
 10263   003824  6ADA               	clrf	fsr2h,c
 10264   003826  0E03               	movlw	3
 10265   003828  26D9               	addwf	fsr2l,f,c
 10266   00382A  50DF               	movf	indf2,w,c
 10267   00382C  6E05               	movwf	??_fputc^0,c
 10268   00382E  5004               	movf	fputc@fp^0,w,c
 10269   003830  6ED9               	movwf	fsr2l,c
 10270   003832  6ADA               	clrf	fsr2h,c
 10271   003834  50DF               	movf	indf2,w,c
 10272   003836  2405               	addwf	??_fputc^0,w,c
 10273   003838  6ED9               	movwf	fsr2l,c
 10274   00383A  6ADA               	clrf	fsr2h,c
 10275   00383C  C002  FFDF         	movff	fputc@c,indf2
 10276   003840  5004               	movf	fputc@fp^0,w,c
 10277   003842  6ED9               	movwf	fsr2l,c
 10278   003844  6ADA               	clrf	fsr2h,c
 10279   003846  0E03               	movlw	3
 10280   003848  26D9               	addwf	fsr2l,f,c
 10281   00384A  2ADE               	incf	postinc2,f,c
 10282   00384C  0E00               	movlw	0
 10283   00384E  22DD               	addwfc	postdec2,f,c
 10284   003850                     l1436:
 10285   003850  0012               	return		;funcret
 10286   003852                     __end_of_fputc:
 10287                           	callstack 0
 10288                           
 10289 ;; *************** function _putch *****************
 10290 ;; Defined at:
 10291 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;  c               1    wreg     unsigned char 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  c               1    0[COMRAM] unsigned char 
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used: 1
 10311 ;; Hardware stack levels required when called: 1
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_fputc
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text55
 10320   00454E                     __ptext55:
 10321                           	callstack 0
 10322   00454E                     _putch:
 10323                           	callstack 24
 10324   00454E  0012               	return		;funcret
 10325   004550                     __end_of_putch:
 10326                           	callstack 0
 10327                           
 10328 ;; *************** function _abs *****************
 10329 ;; Defined at:
 10330 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  a               2    7[COMRAM] int 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;		None
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  2    7[COMRAM] int 
 10337 ;; Registers used:
 10338 ;;		wreg, status,2, status,0
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10344 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10346 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10347 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10348 ;;Total ram usage:        4 bytes
 10349 ;; Hardware stack levels used: 1
 10350 ;; Hardware stack levels required when called: 1
 10351 ;; This function calls:
 10352 ;;		Nothing
 10353 ;; This function is called by:
 10354 ;;		_dtoa
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           	psect	text56
 10359   00423A                     __ptext56:
 10360                           	callstack 0
 10361   00423A                     _abs:
 10362                           	callstack 24
 10363   00423A  BE09               	btfsc	(abs@a+1)^0,7,c
 10364   00423C  EF22  F021         	goto	u2451
 10365   004240  EF24  F021         	goto	u2450
 10366   004244                     u2451:
 10367   004244  EF2A  F021         	goto	l1421
 10368   004248                     u2450:
 10369   004248  C008  F008         	movff	abs@a,?_abs
 10370   00424C  C009  F009         	movff	abs@a+1,?_abs+1
 10371   004250  EF36  F021         	goto	l1424
 10372   004254                     l1421:
 10373   004254  C008  F00A         	movff	abs@a,??_abs
 10374   004258  C009  F00B         	movff	abs@a+1,??_abs+1
 10375   00425C  1E0A               	comf	??_abs^0,f,c
 10376   00425E  1E0B               	comf	(??_abs+1)^0,f,c
 10377   004260  4A0A               	infsnz	??_abs^0,f,c
 10378   004262  2A0B               	incf	(??_abs+1)^0,f,c
 10379   004264  C00A  F008         	movff	??_abs,?_abs
 10380   004268  C00B  F009         	movff	??_abs+1,?_abs+1
 10381   00426C                     l1424:
 10382   00426C  0012               	return		;funcret
 10383   00426E                     __end_of_abs:
 10384                           	callstack 0
 10385                           
 10386 ;; *************** function ___awmod *****************
 10387 ;; Defined at:
 10388 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10389 ;; Parameters:    Size  Location     Type
 10390 ;;  dividend        2    1[COMRAM] int 
 10391 ;;  divisor         2    3[COMRAM] int 
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  sign            1    6[COMRAM] unsigned char 
 10394 ;;  counter         1    5[COMRAM] unsigned char 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  2    1[COMRAM] int 
 10397 ;; Registers used:
 10398 ;;		wreg, status,2, status,0
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10405 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10407 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10408 ;;Total ram usage:        6 bytes
 10409 ;; Hardware stack levels used: 1
 10410 ;; Hardware stack levels required when called: 1
 10411 ;; This function calls:
 10412 ;;		Nothing
 10413 ;; This function is called by:
 10414 ;;		_dtoa
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           	psect	text57
 10419   0034F2                     __ptext57:
 10420                           	callstack 0
 10421   0034F2                     ___awmod:
 10422                           	callstack 24
 10423   0034F2  0E00               	movlw	0
 10424   0034F4  6E07               	movwf	___awmod@sign^0,c
 10425   0034F6  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10426   0034F8  EF82  F01A         	goto	u2350
 10427   0034FC  EF80  F01A         	goto	u2351
 10428   003500                     u2351:
 10429   003500  EF88  F01A         	goto	l3373
 10430   003504                     u2350:
 10431   003504  6C02               	negf	___awmod@dividend^0,c
 10432   003506  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10433   003508  B0D8               	btfsc	status,0,c
 10434   00350A  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10435   00350C  0E01               	movlw	1
 10436   00350E  6E07               	movwf	___awmod@sign^0,c
 10437   003510                     l3373:
 10438   003510  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10439   003512  EF8F  F01A         	goto	u2360
 10440   003516  EF8D  F01A         	goto	u2361
 10441   00351A                     u2361:
 10442   00351A  EF93  F01A         	goto	l3377
 10443   00351E                     u2360:
 10444   00351E  6C04               	negf	___awmod@divisor^0,c
 10445   003520  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10446   003522  B0D8               	btfsc	status,0,c
 10447   003524  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10448   003526                     l3377:
 10449   003526  5004               	movf	___awmod@divisor^0,w,c
 10450   003528  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10451   00352A  B4D8               	btfsc	status,2,c
 10452   00352C  EF9A  F01A         	goto	u2371
 10453   003530  EF9C  F01A         	goto	u2370
 10454   003534                     u2371:
 10455   003534  EFC0  F01A         	goto	l3393
 10456   003538                     u2370:
 10457   003538  0E01               	movlw	1
 10458   00353A  6E06               	movwf	___awmod@counter^0,c
 10459   00353C  EFA4  F01A         	goto	l3383
 10460   003540                     l3381:
 10461   003540  90D8               	bcf	status,0,c
 10462   003542  3604               	rlcf	___awmod@divisor^0,f,c
 10463   003544  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10464   003546  2A06               	incf	___awmod@counter^0,f,c
 10465   003548                     l3383:
 10466   003548  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10467   00354A  EFA9  F01A         	goto	u2381
 10468   00354E  EFAB  F01A         	goto	u2380
 10469   003552                     u2381:
 10470   003552  EFA0  F01A         	goto	l3381
 10471   003556                     u2380:
 10472   003556                     l3385:
 10473   003556  5004               	movf	___awmod@divisor^0,w,c
 10474   003558  5C02               	subwf	___awmod@dividend^0,w,c
 10475   00355A  5005               	movf	(___awmod@divisor+1)^0,w,c
 10476   00355C  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10477   00355E  A0D8               	btfss	status,0,c
 10478   003560  EFB4  F01A         	goto	u2391
 10479   003564  EFB6  F01A         	goto	u2390
 10480   003568                     u2391:
 10481   003568  EFBA  F01A         	goto	l3389
 10482   00356C                     u2390:
 10483   00356C  5004               	movf	___awmod@divisor^0,w,c
 10484   00356E  5E02               	subwf	___awmod@dividend^0,f,c
 10485   003570  5005               	movf	(___awmod@divisor+1)^0,w,c
 10486   003572  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10487   003574                     l3389:
 10488   003574  90D8               	bcf	status,0,c
 10489   003576  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10490   003578  3204               	rrcf	___awmod@divisor^0,f,c
 10491   00357A  2E06               	decfsz	___awmod@counter^0,f,c
 10492   00357C  EFAB  F01A         	goto	l3385
 10493   003580                     l3393:
 10494   003580  5007               	movf	___awmod@sign^0,w,c
 10495   003582  B4D8               	btfsc	status,2,c
 10496   003584  EFC6  F01A         	goto	u2401
 10497   003588  EFC8  F01A         	goto	u2400
 10498   00358C                     u2401:
 10499   00358C  EFCC  F01A         	goto	l3397
 10500   003590                     u2400:
 10501   003590  6C02               	negf	___awmod@dividend^0,c
 10502   003592  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10503   003594  B0D8               	btfsc	status,0,c
 10504   003596  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10505   003598                     l3397:
 10506   003598  C002  F002         	movff	___awmod@dividend,?___awmod
 10507   00359C  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10508   0035A0  0012               	return		;funcret
 10509   0035A2                     __end_of___awmod:
 10510                           	callstack 0
 10511                           
 10512 ;; *************** function ___awdiv *****************
 10513 ;; Defined at:
 10514 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  dividend        2    1[COMRAM] int 
 10517 ;;  divisor         2    3[COMRAM] int 
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;  quotient        2    7[COMRAM] int 
 10520 ;;  sign            1    6[COMRAM] unsigned char 
 10521 ;;  counter         1    5[COMRAM] unsigned char 
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  2    1[COMRAM] int 
 10524 ;; Registers used:
 10525 ;;		wreg, status,2, status,0
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10532 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10534 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10535 ;;Total ram usage:        8 bytes
 10536 ;; Hardware stack levels used: 1
 10537 ;; Hardware stack levels required when called: 1
 10538 ;; This function calls:
 10539 ;;		Nothing
 10540 ;; This function is called by:
 10541 ;;		_dtoa
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           	psect	text58
 10546   00342E                     __ptext58:
 10547                           	callstack 0
 10548   00342E                     ___awdiv:
 10549                           	callstack 24
 10550   00342E  0E00               	movlw	0
 10551   003430  6E07               	movwf	___awdiv@sign^0,c
 10552   003432  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10553   003434  EF20  F01A         	goto	u2290
 10554   003438  EF1E  F01A         	goto	u2291
 10555   00343C                     u2291:
 10556   00343C  EF26  F01A         	goto	l3329
 10557   003440                     u2290:
 10558   003440  6C04               	negf	___awdiv@divisor^0,c
 10559   003442  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10560   003444  B0D8               	btfsc	status,0,c
 10561   003446  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10562   003448  0E01               	movlw	1
 10563   00344A  6E07               	movwf	___awdiv@sign^0,c
 10564   00344C                     l3329:
 10565   00344C  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10566   00344E  EF2D  F01A         	goto	u2300
 10567   003452  EF2B  F01A         	goto	u2301
 10568   003456                     u2301:
 10569   003456  EF33  F01A         	goto	l3335
 10570   00345A                     u2300:
 10571   00345A  6C02               	negf	___awdiv@dividend^0,c
 10572   00345C  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10573   00345E  B0D8               	btfsc	status,0,c
 10574   003460  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10575   003462  0E01               	movlw	1
 10576   003464  1A07               	xorwf	___awdiv@sign^0,f,c
 10577   003466                     l3335:
 10578   003466  0E00               	movlw	0
 10579   003468  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10580   00346A  0E00               	movlw	0
 10581   00346C  6E08               	movwf	___awdiv@quotient^0,c
 10582   00346E  5004               	movf	___awdiv@divisor^0,w,c
 10583   003470  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10584   003472  B4D8               	btfsc	status,2,c
 10585   003474  EF3E  F01A         	goto	u2311
 10586   003478  EF40  F01A         	goto	u2310
 10587   00347C                     u2311:
 10588   00347C  EF68  F01A         	goto	l3357
 10589   003480                     u2310:
 10590   003480  0E01               	movlw	1
 10591   003482  6E06               	movwf	___awdiv@counter^0,c
 10592   003484  EF48  F01A         	goto	l3343
 10593   003488                     l3341:
 10594   003488  90D8               	bcf	status,0,c
 10595   00348A  3604               	rlcf	___awdiv@divisor^0,f,c
 10596   00348C  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10597   00348E  2A06               	incf	___awdiv@counter^0,f,c
 10598   003490                     l3343:
 10599   003490  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10600   003492  EF4D  F01A         	goto	u2321
 10601   003496  EF4F  F01A         	goto	u2320
 10602   00349A                     u2321:
 10603   00349A  EF44  F01A         	goto	l3341
 10604   00349E                     u2320:
 10605   00349E                     l3345:
 10606   00349E  90D8               	bcf	status,0,c
 10607   0034A0  3608               	rlcf	___awdiv@quotient^0,f,c
 10608   0034A2  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10609   0034A4  5004               	movf	___awdiv@divisor^0,w,c
 10610   0034A6  5C02               	subwf	___awdiv@dividend^0,w,c
 10611   0034A8  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10612   0034AA  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10613   0034AC  A0D8               	btfss	status,0,c
 10614   0034AE  EF5B  F01A         	goto	u2331
 10615   0034B2  EF5D  F01A         	goto	u2330
 10616   0034B6                     u2331:
 10617   0034B6  EF62  F01A         	goto	l3353
 10618   0034BA                     u2330:
 10619   0034BA  5004               	movf	___awdiv@divisor^0,w,c
 10620   0034BC  5E02               	subwf	___awdiv@dividend^0,f,c
 10621   0034BE  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10622   0034C0  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10623   0034C2  8008               	bsf	___awdiv@quotient^0,0,c
 10624   0034C4                     l3353:
 10625   0034C4  90D8               	bcf	status,0,c
 10626   0034C6  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10627   0034C8  3204               	rrcf	___awdiv@divisor^0,f,c
 10628   0034CA  2E06               	decfsz	___awdiv@counter^0,f,c
 10629   0034CC  EF4F  F01A         	goto	l3345
 10630   0034D0                     l3357:
 10631   0034D0  5007               	movf	___awdiv@sign^0,w,c
 10632   0034D2  B4D8               	btfsc	status,2,c
 10633   0034D4  EF6E  F01A         	goto	u2341
 10634   0034D8  EF70  F01A         	goto	u2340
 10635   0034DC                     u2341:
 10636   0034DC  EF74  F01A         	goto	l3361
 10637   0034E0                     u2340:
 10638   0034E0  6C08               	negf	___awdiv@quotient^0,c
 10639   0034E2  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10640   0034E4  B0D8               	btfsc	status,0,c
 10641   0034E6  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10642   0034E8                     l3361:
 10643   0034E8  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10644   0034EC  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10645   0034F0  0012               	return		;funcret
 10646   0034F2                     __end_of___awdiv:
 10647                           	callstack 0
 10648                           
 10649 ;; *************** function _sendStringSerial4 *****************
 10650 ;; Defined at:
 10651 ;;		line 41 in file "serial.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;  string          1    2[COMRAM] PTR unsigned char 
 10654 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;		None
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      void 
 10659 ;; Registers used:
 10660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10666 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10670 ;;Total ram usage:        1 bytes
 10671 ;; Hardware stack levels used: 1
 10672 ;; Hardware stack levels required when called: 2
 10673 ;; This function calls:
 10674 ;;		_sendCharSerial4
 10675 ;; This function is called by:
 10676 ;;		_calibration_routine
 10677 ;;		_send2USART
 10678 ;;		_sendAllReadings
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           	psect	text59
 10683   00439A                     __ptext59:
 10684                           	callstack 0
 10685   00439A                     _sendStringSerial4:
 10686                           	callstack 27
 10687   00439A                     
 10688                           ;serial.c: 44:     while(*string != 0){
 10689   00439A  EFDA  F021         	goto	l3937
 10690   00439E                     l3931:
 10691                           
 10692                           ;serial.c: 46:   sendCharSerial4(*string++);
 10693   00439E  5003               	movf	sendStringSerial4@string^0,w,c
 10694   0043A0  6ED9               	movwf	fsr2l,c
 10695   0043A2  6ADA               	clrf	fsr2h,c
 10696   0043A4  50DF               	movf	indf2,w,c
 10697   0043A6  EC86  F022         	call	_sendCharSerial4
 10698   0043AA  2A03               	incf	sendStringSerial4@string^0,f,c
 10699   0043AC                     
 10700                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10701   0043AC  0E6A               	movlw	106
 10702   0043AE                     u5247:
 10703   0043AE  2EE8               	decfsz	wreg,f,c
 10704   0043B0  D7FE               	bra	u5247
 10705   0043B2  D000               	nop2	
 10706   0043B4                     l3937:
 10707                           
 10708                           ;serial.c: 44:     while(*string != 0){
 10709   0043B4  5003               	movf	sendStringSerial4@string^0,w,c
 10710   0043B6  6ED9               	movwf	fsr2l,c
 10711   0043B8  6ADA               	clrf	fsr2h,c
 10712   0043BA  50DF               	movf	indf2,w,c
 10713   0043BC  A4D8               	btfss	status,2,c
 10714   0043BE  EFE3  F021         	goto	u3201
 10715   0043C2  EFE5  F021         	goto	u3200
 10716   0043C6                     u3201:
 10717   0043C6  EFCF  F021         	goto	l3931
 10718   0043CA                     u3200:
 10719   0043CA  0012               	return		;funcret
 10720   0043CC                     __end_of_sendStringSerial4:
 10721                           	callstack 0
 10722                           
 10723 ;; *************** function _sendCharSerial4 *****************
 10724 ;; Defined at:
 10725 ;;		line 35 in file "serial.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;  charToSend      1    wreg     unsigned char 
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;  charToSend      1    1[COMRAM] unsigned char 
 10730 ;; Return value:  Size  Location     Type
 10731 ;;                  1    wreg      void 
 10732 ;; Registers used:
 10733 ;;		wreg
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10743 ;;Total ram usage:        1 bytes
 10744 ;; Hardware stack levels used: 1
 10745 ;; Hardware stack levels required when called: 1
 10746 ;; This function calls:
 10747 ;;		Nothing
 10748 ;; This function is called by:
 10749 ;;		_sendStringSerial4
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text60
 10754   00450C                     __ptext60:
 10755                           	callstack 0
 10756   00450C                     _sendCharSerial4:
 10757                           	callstack 27
 10758                           
 10759                           ;incstack = 0
 10760                           ;sendCharSerial4@charToSend stored from wreg
 10761   00450C  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10762   00450E                     l574:
 10763   00450E  010E               	movlb	14	; () banked
 10764   004510  A537               	btfss	55,2,b	;volatile
 10765   004512  EF8D  F022         	goto	u2771
 10766   004516  EF8F  F022         	goto	u2770
 10767   00451A                     u2771:
 10768   00451A  EF87  F022         	goto	l574
 10769   00451E                     u2770:
 10770   00451E                     
 10771                           ; BSR set to: 14
 10772                           ;serial.c: 37:     TX4REG = charToSend;
 10773   00451E  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10774   004522                     
 10775                           ; BSR set to: 14
 10776   004522  0012               	return		;funcret
 10777   004524                     __end_of_sendCharSerial4:
 10778                           	callstack 0
 10779                           
 10780 ;; *************** function _color_read_Red *****************
 10781 ;; Defined at:
 10782 ;;		line 32 in file "color.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;		None
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  tmp             2   10[COMRAM] unsigned int 
 10787 ;; Return value:  Size  Location     Type
 10788 ;;                  2    5[COMRAM] unsigned int 
 10789 ;; Registers used:
 10790 ;;		wreg, status,2, status,0, cstack
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/0
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10798 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10799 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10800 ;;Total ram usage:        7 bytes
 10801 ;; Hardware stack levels used: 1
 10802 ;; Hardware stack levels required when called: 3
 10803 ;; This function calls:
 10804 ;;		_I2C_2_Master_Read
 10805 ;;		_I2C_2_Master_RepStart
 10806 ;;		_I2C_2_Master_Start
 10807 ;;		_I2C_2_Master_Stop
 10808 ;;		_I2C_2_Master_Write
 10809 ;; This function is called by:
 10810 ;;		_reading_hue
 10811 ;;		_calibration_routine
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           	psect	text61
 10816   003CD0                     __ptext61:
 10817                           	callstack 0
 10818   003CD0                     _color_read_Red:
 10819                           	callstack 26
 10820   003CD0                     
 10821                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10822   003CD0  EC9D  F022         	call	_I2C_2_Master_Start	;wreg free
 10823                           
 10824                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10825   003CD4  0E52               	movlw	82
 10826   003CD6  EC92  F022         	call	_I2C_2_Master_Write
 10827                           
 10828                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10829   003CDA  0EB6               	movlw	182
 10830   003CDC  EC92  F022         	call	_I2C_2_Master_Write
 10831                           
 10832                           ;color.c: 38:  I2C_2_Master_RepStart();
 10833   003CE0  ECA2  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10834                           
 10835                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10836   003CE4  0E53               	movlw	83
 10837   003CE6  EC92  F022         	call	_I2C_2_Master_Write
 10838                           
 10839                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10840   003CEA  0E01               	movlw	1
 10841   003CEC  EC8C  F020         	call	_I2C_2_Master_Read
 10842   003CF0  6E08               	movwf	??_color_read_Red^0,c
 10843   003CF2  5008               	movf	??_color_read_Red^0,w,c
 10844   003CF4  6E0B               	movwf	color_read_Red@tmp^0,c
 10845   003CF6  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10846                           
 10847                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10848   003CF8  0E00               	movlw	0
 10849   003CFA  EC8C  F020         	call	_I2C_2_Master_Read
 10850   003CFE  6E08               	movwf	??_color_read_Red^0,c
 10851   003D00  5008               	movf	??_color_read_Red^0,w,c
 10852   003D02  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10853   003D04  6A09               	clrf	(??_color_read_Red+1)^0,c
 10854   003D06  500B               	movf	color_read_Red@tmp^0,w,c
 10855   003D08  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10856   003D0A  6E0B               	movwf	color_read_Red@tmp^0,c
 10857   003D0C  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10858   003D0E  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10859   003D10  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10860                           
 10861                           ;color.c: 42:  I2C_2_Master_Stop();
 10862   003D12  EC98  F022         	call	_I2C_2_Master_Stop	;wreg free
 10863   003D16                     
 10864                           ;color.c: 43:  return tmp;
 10865   003D16  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10866   003D1A  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10867   003D1E  0012               	return		;funcret
 10868   003D20                     __end_of_color_read_Red:
 10869                           	callstack 0
 10870                           
 10871 ;; *************** function _color_read_Green *****************
 10872 ;; Defined at:
 10873 ;;		line 46 in file "color.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;		None
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  tmp             2   10[COMRAM] unsigned int 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;                  2    5[COMRAM] unsigned int 
 10880 ;; Registers used:
 10881 ;;		wreg, status,2, status,0, cstack
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10890 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10891 ;;Total ram usage:        7 bytes
 10892 ;; Hardware stack levels used: 1
 10893 ;; Hardware stack levels required when called: 3
 10894 ;; This function calls:
 10895 ;;		_I2C_2_Master_Read
 10896 ;;		_I2C_2_Master_RepStart
 10897 ;;		_I2C_2_Master_Start
 10898 ;;		_I2C_2_Master_Stop
 10899 ;;		_I2C_2_Master_Write
 10900 ;; This function is called by:
 10901 ;;		_reading_hue
 10902 ;;		_calibration_routine
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           	psect	text62
 10907   003D20                     __ptext62:
 10908                           	callstack 0
 10909   003D20                     _color_read_Green:
 10910                           	callstack 26
 10911   003D20                     
 10912                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10913   003D20  EC9D  F022         	call	_I2C_2_Master_Start	;wreg free
 10914                           
 10915                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10916   003D24  0E52               	movlw	82
 10917   003D26  EC92  F022         	call	_I2C_2_Master_Write
 10918                           
 10919                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10920   003D2A  0EB8               	movlw	184
 10921   003D2C  EC92  F022         	call	_I2C_2_Master_Write
 10922                           
 10923                           ;color.c: 52:  I2C_2_Master_RepStart();
 10924   003D30  ECA2  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10925                           
 10926                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10927   003D34  0E53               	movlw	83
 10928   003D36  EC92  F022         	call	_I2C_2_Master_Write
 10929                           
 10930                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10931   003D3A  0E01               	movlw	1
 10932   003D3C  EC8C  F020         	call	_I2C_2_Master_Read
 10933   003D40  6E08               	movwf	??_color_read_Green^0,c
 10934   003D42  5008               	movf	??_color_read_Green^0,w,c
 10935   003D44  6E0B               	movwf	color_read_Green@tmp^0,c
 10936   003D46  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10937                           
 10938                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10939   003D48  0E00               	movlw	0
 10940   003D4A  EC8C  F020         	call	_I2C_2_Master_Read
 10941   003D4E  6E08               	movwf	??_color_read_Green^0,c
 10942   003D50  5008               	movf	??_color_read_Green^0,w,c
 10943   003D52  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10944   003D54  6A09               	clrf	(??_color_read_Green+1)^0,c
 10945   003D56  500B               	movf	color_read_Green@tmp^0,w,c
 10946   003D58  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10947   003D5A  6E0B               	movwf	color_read_Green@tmp^0,c
 10948   003D5C  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10949   003D5E  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10950   003D60  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10951                           
 10952                           ;color.c: 56:  I2C_2_Master_Stop();
 10953   003D62  EC98  F022         	call	_I2C_2_Master_Stop	;wreg free
 10954   003D66                     
 10955                           ;color.c: 57:  return tmp;
 10956   003D66  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10957   003D6A  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10958   003D6E  0012               	return		;funcret
 10959   003D70                     __end_of_color_read_Green:
 10960                           	callstack 0
 10961                           
 10962 ;; *************** function _color_read_Clear *****************
 10963 ;; Defined at:
 10964 ;;		line 75 in file "color.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;  tmp             2   10[COMRAM] unsigned int 
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  2    5[COMRAM] unsigned int 
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10980 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10981 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10982 ;;Total ram usage:        7 bytes
 10983 ;; Hardware stack levels used: 1
 10984 ;; Hardware stack levels required when called: 3
 10985 ;; This function calls:
 10986 ;;		_I2C_2_Master_Read
 10987 ;;		_I2C_2_Master_RepStart
 10988 ;;		_I2C_2_Master_Start
 10989 ;;		_I2C_2_Master_Stop
 10990 ;;		_I2C_2_Master_Write
 10991 ;; This function is called by:
 10992 ;;		_reading_hue
 10993 ;;		_calibration_routine
 10994 ;;		_main
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text63
 10999   003D70                     __ptext63:
 11000                           	callstack 0
 11001   003D70                     _color_read_Clear:
 11002                           	callstack 26
 11003   003D70                     
 11004                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 11005   003D70  EC9D  F022         	call	_I2C_2_Master_Start	;wreg free
 11006                           
 11007                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 11008   003D74  0E52               	movlw	82
 11009   003D76  EC92  F022         	call	_I2C_2_Master_Write
 11010                           
 11011                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 11012   003D7A  0EB4               	movlw	180
 11013   003D7C  EC92  F022         	call	_I2C_2_Master_Write
 11014                           
 11015                           ;color.c: 81:  I2C_2_Master_RepStart();
 11016   003D80  ECA2  F022         	call	_I2C_2_Master_RepStart	;wreg free
 11017                           
 11018                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 11019   003D84  0E53               	movlw	83
 11020   003D86  EC92  F022         	call	_I2C_2_Master_Write
 11021                           
 11022                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 11023   003D8A  0E01               	movlw	1
 11024   003D8C  EC8C  F020         	call	_I2C_2_Master_Read
 11025   003D90  6E08               	movwf	??_color_read_Clear^0,c
 11026   003D92  5008               	movf	??_color_read_Clear^0,w,c
 11027   003D94  6E0B               	movwf	color_read_Clear@tmp^0,c
 11028   003D96  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11029                           
 11030                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11031   003D98  0E00               	movlw	0
 11032   003D9A  EC8C  F020         	call	_I2C_2_Master_Read
 11033   003D9E  6E08               	movwf	??_color_read_Clear^0,c
 11034   003DA0  5008               	movf	??_color_read_Clear^0,w,c
 11035   003DA2  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11036   003DA4  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11037   003DA6  500B               	movf	color_read_Clear@tmp^0,w,c
 11038   003DA8  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11039   003DAA  6E0B               	movwf	color_read_Clear@tmp^0,c
 11040   003DAC  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11041   003DAE  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11042   003DB0  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11043                           
 11044                           ;color.c: 85:  I2C_2_Master_Stop();
 11045   003DB2  EC98  F022         	call	_I2C_2_Master_Stop	;wreg free
 11046   003DB6                     
 11047                           ;color.c: 86:  return tmp;
 11048   003DB6  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11049   003DBA  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11050   003DBE  0012               	return		;funcret
 11051   003DC0                     __end_of_color_read_Clear:
 11052                           	callstack 0
 11053                           
 11054 ;; *************** function _color_read_Blue *****************
 11055 ;; Defined at:
 11056 ;;		line 60 in file "color.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;		None
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;  tmp             2   10[COMRAM] unsigned int 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  2    5[COMRAM] unsigned int 
 11063 ;; Registers used:
 11064 ;;		wreg, status,2, status,0, cstack
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/0
 11067 ;;		On exit  : 0/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11072 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11073 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11074 ;;Total ram usage:        7 bytes
 11075 ;; Hardware stack levels used: 1
 11076 ;; Hardware stack levels required when called: 3
 11077 ;; This function calls:
 11078 ;;		_I2C_2_Master_Read
 11079 ;;		_I2C_2_Master_RepStart
 11080 ;;		_I2C_2_Master_Start
 11081 ;;		_I2C_2_Master_Stop
 11082 ;;		_I2C_2_Master_Write
 11083 ;; This function is called by:
 11084 ;;		_reading_hue
 11085 ;;		_calibration_routine
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text64
 11090   003DC0                     __ptext64:
 11091                           	callstack 0
 11092   003DC0                     _color_read_Blue:
 11093                           	callstack 26
 11094   003DC0                     
 11095                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11096   003DC0  EC9D  F022         	call	_I2C_2_Master_Start	;wreg free
 11097                           
 11098                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11099   003DC4  0E52               	movlw	82
 11100   003DC6  EC92  F022         	call	_I2C_2_Master_Write
 11101                           
 11102                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11103   003DCA  0EBA               	movlw	186
 11104   003DCC  EC92  F022         	call	_I2C_2_Master_Write
 11105                           
 11106                           ;color.c: 66:  I2C_2_Master_RepStart();
 11107   003DD0  ECA2  F022         	call	_I2C_2_Master_RepStart	;wreg free
 11108                           
 11109                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11110   003DD4  0E53               	movlw	83
 11111   003DD6  EC92  F022         	call	_I2C_2_Master_Write
 11112                           
 11113                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11114   003DDA  0E01               	movlw	1
 11115   003DDC  EC8C  F020         	call	_I2C_2_Master_Read
 11116   003DE0  6E08               	movwf	??_color_read_Blue^0,c
 11117   003DE2  5008               	movf	??_color_read_Blue^0,w,c
 11118   003DE4  6E0B               	movwf	color_read_Blue@tmp^0,c
 11119   003DE6  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11120                           
 11121                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11122   003DE8  0E00               	movlw	0
 11123   003DEA  EC8C  F020         	call	_I2C_2_Master_Read
 11124   003DEE  6E08               	movwf	??_color_read_Blue^0,c
 11125   003DF0  5008               	movf	??_color_read_Blue^0,w,c
 11126   003DF2  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11127   003DF4  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11128   003DF6  500B               	movf	color_read_Blue@tmp^0,w,c
 11129   003DF8  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11130   003DFA  6E0B               	movwf	color_read_Blue@tmp^0,c
 11131   003DFC  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11132   003DFE  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11133   003E00  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11134                           
 11135                           ;color.c: 70:  I2C_2_Master_Stop();
 11136   003E02  EC98  F022         	call	_I2C_2_Master_Stop	;wreg free
 11137   003E06                     
 11138                           ;color.c: 71:  return tmp;
 11139   003E06  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11140   003E0A  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11141   003E0E  0012               	return		;funcret
 11142   003E10                     __end_of_color_read_Blue:
 11143                           	callstack 0
 11144                           
 11145 ;; *************** function _I2C_2_Master_Write *****************
 11146 ;; Defined at:
 11147 ;;		line 45 in file "i2c.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  data_byte       1    wreg     unsigned char 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  data_byte       1    2[COMRAM] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, status,2, status,0, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11164 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11165 ;;Total ram usage:        1 bytes
 11166 ;; Hardware stack levels used: 1
 11167 ;; Hardware stack levels required when called: 2
 11168 ;; This function calls:
 11169 ;;		_I2C_2_Master_Idle
 11170 ;; This function is called by:
 11171 ;;		_color_writetoaddr
 11172 ;;		_color_read_Red
 11173 ;;		_color_read_Green
 11174 ;;		_color_read_Blue
 11175 ;;		_color_read_Clear
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	text65
 11180   004524                     __ptext65:
 11181                           	callstack 0
 11182   004524                     _I2C_2_Master_Write:
 11183                           	callstack 26
 11184                           
 11185                           ;incstack = 0
 11186                           ;I2C_2_Master_Write@data_byte stored from wreg
 11187   004524  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11188   004526                     
 11189                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11190   004526  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11191   00452A                     
 11192                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11193   00452A  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11194   00452E  0012               	return		;funcret
 11195   004530                     __end_of_I2C_2_Master_Write:
 11196                           	callstack 0
 11197                           
 11198 ;; *************** function _I2C_2_Master_Stop *****************
 11199 ;; Defined at:
 11200 ;;		line 39 in file "i2c.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;		None
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;		None
 11205 ;; Return value:  Size  Location     Type
 11206 ;;                  1    wreg      void 
 11207 ;; Registers used:
 11208 ;;		wreg, status,2, status,0, cstack
 11209 ;; Tracked objects:
 11210 ;;		On entry : 0/0
 11211 ;;		On exit  : 0/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11218 ;;Total ram usage:        0 bytes
 11219 ;; Hardware stack levels used: 1
 11220 ;; Hardware stack levels required when called: 2
 11221 ;; This function calls:
 11222 ;;		_I2C_2_Master_Idle
 11223 ;; This function is called by:
 11224 ;;		_color_writetoaddr
 11225 ;;		_color_read_Red
 11226 ;;		_color_read_Green
 11227 ;;		_color_read_Blue
 11228 ;;		_color_read_Clear
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text66
 11233   004530                     __ptext66:
 11234                           	callstack 0
 11235   004530                     _I2C_2_Master_Stop:
 11236                           	callstack 26
 11237   004530                     
 11238                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11239   004530  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11240   004534                     
 11241                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11242   004534  010E               	movlb	14	; () banked
 11243   004536  85DA               	bsf	218,2,b	;volatile
 11244   004538                     
 11245                           ; BSR set to: 14
 11246   004538  0012               	return		;funcret
 11247   00453A                     __end_of_I2C_2_Master_Stop:
 11248                           	callstack 0
 11249                           
 11250 ;; *************** function _I2C_2_Master_Start *****************
 11251 ;; Defined at:
 11252 ;;		line 27 in file "i2c.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;		None
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;		None
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, status,2, status,0, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11270 ;;Total ram usage:        0 bytes
 11271 ;; Hardware stack levels used: 1
 11272 ;; Hardware stack levels required when called: 2
 11273 ;; This function calls:
 11274 ;;		_I2C_2_Master_Idle
 11275 ;; This function is called by:
 11276 ;;		_color_writetoaddr
 11277 ;;		_color_read_Red
 11278 ;;		_color_read_Green
 11279 ;;		_color_read_Blue
 11280 ;;		_color_read_Clear
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text67
 11285   00453A                     __ptext67:
 11286                           	callstack 0
 11287   00453A                     _I2C_2_Master_Start:
 11288                           	callstack 26
 11289   00453A                     
 11290                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11291   00453A  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11292   00453E                     
 11293                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11294   00453E  010E               	movlb	14	; () banked
 11295   004540  81DA               	bsf	218,0,b	;volatile
 11296   004542                     
 11297                           ; BSR set to: 14
 11298   004542  0012               	return		;funcret
 11299   004544                     __end_of_I2C_2_Master_Start:
 11300                           	callstack 0
 11301                           
 11302 ;; *************** function _I2C_2_Master_RepStart *****************
 11303 ;; Defined at:
 11304 ;;		line 33 in file "i2c.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;		None
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;		None
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      void 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0, cstack
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11322 ;;Total ram usage:        0 bytes
 11323 ;; Hardware stack levels used: 1
 11324 ;; Hardware stack levels required when called: 2
 11325 ;; This function calls:
 11326 ;;		_I2C_2_Master_Idle
 11327 ;; This function is called by:
 11328 ;;		_color_read_Red
 11329 ;;		_color_read_Green
 11330 ;;		_color_read_Blue
 11331 ;;		_color_read_Clear
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           	psect	text68
 11336   004544                     __ptext68:
 11337                           	callstack 0
 11338   004544                     _I2C_2_Master_RepStart:
 11339                           	callstack 26
 11340   004544                     
 11341                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11342   004544  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11343   004548                     
 11344                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11345   004548  010E               	movlb	14	; () banked
 11346   00454A  83DA               	bsf	218,1,b	;volatile
 11347   00454C                     
 11348                           ; BSR set to: 14
 11349   00454C  0012               	return		;funcret
 11350   00454E                     __end_of_I2C_2_Master_RepStart:
 11351                           	callstack 0
 11352                           
 11353 ;; *************** function _I2C_2_Master_Read *****************
 11354 ;; Defined at:
 11355 ;;		line 51 in file "i2c.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  ack             1    wreg     unsigned char 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;  ack             1    3[COMRAM] unsigned char 
 11360 ;;  tmp             1    4[COMRAM] unsigned char 
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  1    wreg      unsigned char 
 11363 ;; Registers used:
 11364 ;;		wreg, status,2, status,0, cstack
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11373 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11374 ;;Total ram usage:        3 bytes
 11375 ;; Hardware stack levels used: 1
 11376 ;; Hardware stack levels required when called: 2
 11377 ;; This function calls:
 11378 ;;		_I2C_2_Master_Idle
 11379 ;; This function is called by:
 11380 ;;		_color_read_Red
 11381 ;;		_color_read_Green
 11382 ;;		_color_read_Blue
 11383 ;;		_color_read_Clear
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	text69
 11388   004118                     __ptext69:
 11389                           	callstack 0
 11390   004118                     _I2C_2_Master_Read:
 11391                           	callstack 26
 11392                           
 11393                           ; BSR set to: 14
 11394                           ;incstack = 0
 11395                           ;I2C_2_Master_Read@ack stored from wreg
 11396   004118  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11397   00411A                     
 11398                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11399   00411A  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11400   00411E                     
 11401                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11402   00411E  010E               	movlb	14	; () banked
 11403   004120  87DA               	bsf	218,3,b	;volatile
 11404                           
 11405                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11406   004122  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11407   004126                     
 11408                           ;i2c.c: 57:   tmp = SSP2BUF;
 11409   004126  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11410                           
 11411                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11412   00412A  EC13  F022         	call	_I2C_2_Master_Idle	;wreg free
 11413   00412E                     
 11414                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11415   00412E  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11416   004130  B4D8               	btfsc	status,2,c
 11417   004132  EF9D  F020         	goto	u3181
 11418   004136  EFA1  F020         	goto	u3180
 11419   00413A                     u3181:
 11420   00413A  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11421   00413C  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11422   00413E  EFA2  F020         	goto	u3198
 11423   004142                     u3180:
 11424   004142  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11425   004144                     u3198:
 11426   004144  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11427   004146  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11428   004148  010E               	movlb	14	; () banked
 11429   00414A  51DA               	movf	218,w,b	;volatile
 11430   00414C  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11431   00414E  0BDF               	andlw	-33
 11432   004150  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11433   004152  6FDA               	movwf	218,b	;volatile
 11434   004154                     
 11435                           ; BSR set to: 14
 11436                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11437   004154  89DA               	bsf	218,4,b	;volatile
 11438   004156                     
 11439                           ; BSR set to: 14
 11440                           ;i2c.c: 61:   return tmp;
 11441   004156  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11442   004158                     
 11443                           ; BSR set to: 14
 11444   004158  0012               	return		;funcret
 11445   00415A                     __end_of_I2C_2_Master_Read:
 11446                           	callstack 0
 11447                           
 11448 ;; *************** function _I2C_2_Master_Idle *****************
 11449 ;; Defined at:
 11450 ;;		line 22 in file "i2c.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2, status,0
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11467 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;Total ram usage:        1 bytes
 11469 ;; Hardware stack levels used: 1
 11470 ;; Hardware stack levels required when called: 1
 11471 ;; This function calls:
 11472 ;;		Nothing
 11473 ;; This function is called by:
 11474 ;;		_I2C_2_Master_Start
 11475 ;;		_I2C_2_Master_RepStart
 11476 ;;		_I2C_2_Master_Stop
 11477 ;;		_I2C_2_Master_Write
 11478 ;;		_I2C_2_Master_Read
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           	psect	text70
 11483   004426                     __ptext70:
 11484                           	callstack 0
 11485   004426                     _I2C_2_Master_Idle:
 11486                           	callstack 26
 11487   004426                     l197:
 11488   004426  010E               	movlb	14	; () banked
 11489   004428  B5D8               	btfsc	216,2,b	;volatile
 11490   00442A  EF19  F022         	goto	u2681
 11491   00442E  EF1B  F022         	goto	u2680
 11492   004432                     u2681:
 11493   004432  EF13  F022         	goto	l197
 11494   004436                     u2680:
 11495   004436                     
 11496                           ; BSR set to: 14
 11497   004436  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11498   00443A  0E1F               	movlw	31
 11499   00443C  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11500   00443E  A4D8               	btfss	status,2,c
 11501   004440  EF24  F022         	goto	u2691
 11502   004444  EF26  F022         	goto	u2690
 11503   004448                     u2691:
 11504   004448  EF13  F022         	goto	l197
 11505   00444C                     u2690:
 11506   00444C                     
 11507                           ; BSR set to: 14
 11508   00444C  0012               	return		;funcret
 11509   00444E                     __end_of_I2C_2_Master_Idle:
 11510                           	callstack 0
 11511                           
 11512 ;; *************** function _ADC_init *****************
 11513 ;; Defined at:
 11514 ;;		line 9 in file "ADC.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		wreg, status,2
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used: 1
 11534 ;; Hardware stack levels required when called: 1
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_main
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text71
 11543   0044F2                     __ptext71:
 11544                           	callstack 0
 11545   0044F2                     _ADC_init:
 11546                           	callstack 29
 11547   0044F2                     
 11548                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11549   0044F2  8C86               	bsf	134,6,c	;volatile
 11550                           
 11551                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11552   0044F4  010E               	movlb	14	; () banked
 11553   0044F6  8DB4               	bsf	180,6,b	;volatile
 11554                           
 11555                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11556   0044F8  010F               	movlb	15	; () banked
 11557   0044FA  9958               	bcf	88,4,b	;volatile
 11558   0044FC                     
 11559                           ; BSR set to: 15
 11560                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11561   0044FC  0EFC               	movlw	-4
 11562   0044FE  1758               	andwf	88,f,b	;volatile
 11563                           
 11564                           ;ADC.c: 17:     ADPCH=0b101110;
 11565   004500  0E2E               	movlw	46
 11566   004502  6F5F               	movwf	95,b	;volatile
 11567   004504                     
 11568                           ; BSR set to: 15
 11569                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11570   004504  9460               	bcf	96,2,c	;volatile
 11571   004506                     
 11572                           ; BSR set to: 15
 11573                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11574   004506  8860               	bsf	96,4,c	;volatile
 11575   004508                     
 11576                           ; BSR set to: 15
 11577                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11578   004508  8E60               	bsf	96,7,c	;volatile
 11579   00450A                     
 11580                           ; BSR set to: 15
 11581   00450A  0012               	return		;funcret
 11582   00450C                     __end_of_ADC_init:
 11583                           	callstack 0
 11584                           
 11585 ;; *************** function _LowISR *****************
 11586 ;; Defined at:
 11587 ;;		line 38 in file "timers.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;		None
 11590 ;; Auto vars:     Size  Location     Type
 11591 ;;		None
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		None
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11605 ;;Total ram usage:        1 bytes
 11606 ;; Hardware stack levels used: 1
 11607 ;; This function calls:
 11608 ;;		Nothing
 11609 ;; This function is called by:
 11610 ;;		Interrupt level 1
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           	psect	intcodelo
 11615   000018                     __pintcodelo:
 11616                           	callstack 0
 11617   000018                     _LowISR:
 11618                           	callstack 20
 11619                           
 11620                           ; BSR set to: 15
 11621                           ;incstack = 0
 11622   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11623   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11624   00001E                     
 11625                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11626   00001E  010E               	movlb	14	; () banked
 11627   000020  AB33               	btfss	51,5,b	;volatile
 11628   000022  EF15  F000         	goto	i1u223_21
 11629   000026  EF17  F000         	goto	i1u223_20
 11630   00002A                     i1u223_21:
 11631   00002A  EF19  F000         	goto	i1l666
 11632   00002E                     i1u223_20:
 11633   00002E                     
 11634                           ; BSR set to: 14
 11635                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11636   00002E  827F               	bsf	127,1,c	;volatile
 11637                           
 11638                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11639   000030  9B33               	bcf	51,5,b	;volatile
 11640   000032                     i1l666:
 11641                           
 11642                           ; BSR set to: 14
 11643   000032  C001  FFE0         	movff	??_LowISR,bsr
 11644   000036  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11645   000038  0010               	retfie	
 11646   00003A                     __end_of_LowISR:
 11647                           	callstack 0
 11648                           
 11649                           	psect	rparam
 11650   000000                     
 11651                           	psect	temp
 11652   00005D                     btemp:
 11653                           	callstack 0
 11654   00005D                     	ds	1
 11655   000000                     int$flags	set	btemp
 11656   000000                     wtemp8	set	btemp+1
 11657   000000                     ttemp5	set	btemp+1
 11658   000000                     ttemp6	set	btemp+4
 11659   000000                     ttemp7	set	btemp+8
 11660                           
 11661                           	psect	config
 11662                           
 11663                           ;Config register CONFIG1L @ 0x300000
 11664                           ;	External Oscillator mode Selection bits
 11665                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11666                           ;	Power-up default value for COSC bits
 11667                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11668   300000                     	org	3145728
 11669   300000  AA                 	db	170
 11670                           
 11671                           ;Config register CONFIG1H @ 0x300001
 11672                           ;	unspecified, using default values
 11673                           ;	Clock Out Enable bit
 11674                           ;	CLKOUTEN = 0x1, unprogrammed default
 11675                           ;	Clock Switch Enable bit
 11676                           ;	CSWEN = 0x1, unprogrammed default
 11677                           ;	Fail-Safe Clock Monitor Enable bit
 11678                           ;	FCMEN = 0x1, unprogrammed default
 11679   300001                     	org	3145729
 11680   300001  FF                 	db	255
 11681                           
 11682                           ;Config register CONFIG3L @ 0x300004
 11683                           ;	WDT Period Select bits
 11684                           ;	WDTCPS = 0x1F, unprogrammed default
 11685                           ;	WDT operating mode
 11686                           ;	WDTE = OFF, WDT Disabled
 11687   300004                     	org	3145732
 11688   300004  9F                 	db	159
 11689                           
 11690                           ;Config register CONFIG3H @ 0x300005
 11691                           ;	unspecified, using default values
 11692                           ;	WDT Window Select bits
 11693                           ;	WDTCWS = 0x7, unprogrammed default
 11694                           ;	WDT input clock selector
 11695                           ;	WDTCCS = 0x7, unprogrammed default
 11696   300005                     	org	3145733
 11697   300005  FF                 	db	255
 11698                           tosu	equ	0xFFF
 11699                           tosh	equ	0xFFE
 11700                           tosl	equ	0xFFD
 11701                           stkptr	equ	0xFFC
 11702                           pclatu	equ	0xFFB
 11703                           pclath	equ	0xFFA
 11704                           pcl	equ	0xFF9
 11705                           tblptru	equ	0xFF8
 11706                           tblptrh	equ	0xFF7
 11707                           tblptrl	equ	0xFF6
 11708                           tablat	equ	0xFF5
 11709                           prodh	equ	0xFF4
 11710                           prodl	equ	0xFF3
 11711                           indf0	equ	0xFEF
 11712                           postinc0	equ	0xFEE
 11713                           postdec0	equ	0xFED
 11714                           preinc0	equ	0xFEC
 11715                           plusw0	equ	0xFEB
 11716                           fsr0h	equ	0xFEA
 11717                           fsr0l	equ	0xFE9
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           postinc1	equ	0xFE6
 11721                           postdec1	equ	0xFE5
 11722                           preinc1	equ	0xFE4
 11723                           plusw1	equ	0xFE3
 11724                           fsr1h	equ	0xFE2
 11725                           fsr1l	equ	0xFE1
 11726                           bsr	equ	0xFE0
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           preinc2	equ	0xFDC
 11731                           plusw2	equ	0xFDB
 11732                           fsr2h	equ	0xFDA
 11733                           fsr2l	equ	0xFD9
 11734                           status	equ	0xFD8

Data Sizes:
    Strings     202
    Constant    0
    Data        1
    BSS         440
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      92
    BANK0           160    102     160
    BANK1           256      0     132
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 250
		 -> path(BANK2[250]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2956$buffer	PTR unsigned char  size(2) Largest target is 0

    S2956$source	PTR const unsigned char  size(2) Largest target is 0

    S30DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S30DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 35
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[35]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 35
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[35]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 35
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[35]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 35
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[35]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _main->_reading_hue
    _returnHome->_reverseTurn
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___flmul->___flsub
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_reading_hue
    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                56    56      0  278146
                                             80 BANK0     22    22      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   48309
                                             31 COMRAM    13     7      6
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   37930
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4    9763
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4075
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16561
                                             89 COMRAM     2     0      2
                                             76 BANK0      4     4      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15861
                                             85 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     942
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             75 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3801
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                             25 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             50 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  168935
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   10616
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   21948
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   22556
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2    9560
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   22100
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    9408
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   22556
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2    9560
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4075
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   22708
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2    9712
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   22708
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2    9712
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   22860
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2    9864
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    4227
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    2642
                                              7 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   10016
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5093
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    3923
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3397
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   11412
                                             68 COMRAM    23    22      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    9650
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    7898
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    7410
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1647
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1315
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     675
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
     ___flsub (ARG)
   ___flmul
   ___flsub
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___flsub (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     66      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5C       1       97.9%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27A      66        0.0%
DATA                 0      0     27A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 22:29:09 2024

               _color_read_Red 3CD0                   ___fldiv@aexp 004B                   ___fldiv@bexp 004A  
           fullSpeedBack@power 0017                   ___fldiv@sign 0043                _color_read_Blue 3DC0  
                           l81 3D1E                             l90 3DBE                             l75 4204  
                           l84 3D6E                             l93 3346                             l78 44B4  
                           l87 3E0E                             l96 2616                             l98 2624  
                           l99 2672                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3D70               _color_read_Green 3D20                            l101 2680  
                          l110 27A8                            l102 26D2                            l111 2802  
                          l200 444C                            l104 26E0                            l105 2732  
                          l114 2828                            l122 11AE                            l203 4542  
                          l107 2740                            l212 452E                            l108 279A  
                          l140 132A                            l124 11BE                            l206 454C  
                          l134 12B0                            l126 1218                            l215 4158  
                          l144 15C8                            l136 12C0                            l128 1228  
                          l209 4538                            l161 2A3E                            l138 131A  
                          l148 1640                            l149 165C                            l501 41D0  
                          l334 450A                            l406 3052                            l414 3A04  
                          l167 2A4A                            l511 364C                            l440 4366  
                          l424 3A82                            l194 4424                            l434 3BF0  
                          l514 364E                            l419 3B00                            l443 4398  
                          l507 342C                            l452 43FA                            l197 4426  
                          l461 3FBE                            l437 429E                            l429 3B7A  
                          l446 4302                            l470 3EE6                            l455 42D0  
                          l464 4006                            l449 4334                            l473 3F2E  
                          l458 3E9E                            l483 3CCE                            l467 3E56  
                          l900 34F0                            l476 3F76                            l628 44F0  
                          l660 4494                            l565 44D2                            l574 450E  
                          l494 404C                            l583 43CA                            l399 3976  
                          l495 404C                            l577 4522                            l913 35A0  
                          l498 41BA                            l669 4472                            l934 3216  
                          l928 37A6                            l939 325C                            l966 3158  
                          _abs 423A                            _pad 3852                            _hue 00C6  
          convert_rgb2hue@cMax 0056                   ___awmod@sign 0007            convert_rgb2hue@diff 0094  
          logAction@pathLength 000A                            wreg 0FE8                   ___flmul@aexp 002B  
                 ___flmul@bexp 002C                   ___flmul@sign 0026                   ___flmul@temp 0031  
                 ___flmul@prod 002D                    main@ambient 00BE                   ___fltol@exp1 0055  
                         ?_abs 0008                           l1300 1F08                           l1214 1966  
                         l1206 1B1C                           l1223 1A36                           l1160 3C5C  
                         l1224 1A24                           l1411 2D86                           l1251 22E0  
                         l1331 2B3A                           l1324 2AA2                           l1421 4254  
                         l1253 2140                           l1262 2186                           l1167 3C64  
                         l1239 4092                           l1327 2BFE                           l1424 426C  
                         l1264 21FE                           l1256 2104                           l1417 4116  
                         l4001 42A0                           l1265 21EC                           l1370 38C6  
                         l1290 1DD8                           l1338 2B96                           l1347 4238  
                         l4003 42AC                           l1283 1BE2                           l4011 41B6  
                         l1436 3850                           l1444 4198                           l1372 38E6  
                         l1292 1E50                           l3301 37EE                           l4005 42C4  
                         l4101 216C                           l4021 1F74                           l4013 1F48  
                         l1293 1E3E                           l1197 184C                           l1198 183A  
                         l1447 454E                           l3303 3820                           l1367 3888  
                         l1375 2DE6                           l4111 21A8                           l4103 2176  
                         l4031 1FAE                           l4023 1F84                           l4015 1F54  
                         l1287 1F46                           l1199 1800                           l4007 419A  
                         l1392 36F4                           l3321 342E                           l4121 221A  
                         l4113 21B6                           l4105 2184                           l4041 1FDA  
                         l4033 1FB4                           l4025 1F94                           l4017 1F62  
                         l4201 1C66                           l4009 41A6                           l3331 345A  
                         l3323 3432                           l3315 444E                           l4131 2286  
                         l4123 2228                           l4115 21E4                           l4107 2196  
                         l4051 2014                           l4043 1FEA                           l4035 1FBA  
                         l4027 1F96                           l4019 1F64                           l4211 1CA8  
                         l4203 1C72                           l1388 2EFE                           l1396 36FC  
                         l3341 3488                           l3333 3462                           l3325 3440  
                         l5101 4174                           l3317 446A                           l3501 36A2  
                         l3421 3BF2                           l4141 22D4                           l4133 22A0  
                         l4125 2252                           l4109 21A4                           l4053 202A  
                         l4045 1FFA                           l4037 1FC8                           l4029 1F9E  
                         l4221 1D0A                           l4213 1CB4                           l4205 1C7E  
                         l3351 34C2                           l3343 3490                           l3335 3466  
                         l3327 3448                           l5103 4178                           l5111 3880  
                         l3503 36C2                           l3431 3C2A                           l3423 3BFA  
                         l3511 2F68                           l4143 22D6                           l4135 22BC  
                         l4119 220E                           l4127 2256                           l4071 207E  
                         l4055 203A                           l4063 205A                           l4047 1FFC  
                         l4039 1FCA                           l4311 31D6                           l4303 315A  
                         l4231 1DA0                           l4223 1D16                           l4215 1CC4  
                         l4207 1C8C                           l4151 1B1E                           l3361 34E8  
                         l3353 34C4                           l3345 349E                           l3337 346E  
                         l3329 344C                           l3417 423A                           l5113 3894  
                         l5105 3852                           l5121 2D88                           l3505 36CA  
                         l5201 2CDE                           l3441 3C56                           l3433 3C30  
                         l3425 3C0C                           l3521 3016                           l3513 2F7A  
                         l3601 39EE                           l4137 22C0                           l4129 2270  
                         l4081 20D0                           l4073 2098                           l4065 206A  
                         l4057 2042                           l4049 2004                           l4321 325A  
                         l4313 31E4                           l4305 3188                           l4241 1DF6  
                         l4233 1DBE                           l4225 1D32                           l4217 1CDE  
                         l4209 1C98                           l4161 1B5A                           l4153 1B2A  
                         l4401 2BA6                           l3355 34CA                           l3347 34A4  
                         l3339 3480                           l3371 350C                           l3419 4248  
                         l5115 38A4                           l5107 3862                           l5131 2DBE  
                         l5123 2D8C                           l5203 2CFE                           l3435 3C46  
                         l3427 3C14                           l3515 2F7E                           l3507 2F00  
                         l3603 3A84                           l4139 22CE                           l4091 212C  
                         l4083 20E0                           l4075 20A8                           l4067 206A  
                         l4059 2046                           l4315 31F6                           l4307 3198  
                         l4251 1E60                           l4243 1DFA                           l4235 1DC8  
                         l4227 1D5C                           l4219 1CEE                           l4171 1B8C  
                         l4163 1B6A                           l4155 1B38                           l4331 307E  
                         l4411 2BEE                           l4403 2BAA                           l3349 34BA  
                         l3357 34D0                           l3381 3540                           l3373 3510  
                         l3365 34F2                           l3293 37A8                           l5117 38A8  
                         l5109 3872                           l5141 2DF8                           l5133 2DCE  
                         l5125 2DA0                           l5213 2D54                           l5205 2D1E  
                         l5301 2650                           l4421 440E                           l3437 3C4E  
                         l3429 3C1C                           l3517 2FBC                           l3509 2F1A  
                         l3621 3AD6                           l3605 3A9E                           l4093 212E  
                         l4085 20F4                           l4077 20B8                           l4317 3204  
                         l4309 31C6                           l4261 1EC2                           l4253 1E6C  
                         l4245 1E08                           l4237 1DD6                           l4229 1D92  
                         l4181 1BCC                           l4173 1B9A                           l4165 1B70  
                         l4157 1B3A                           l3701 16E4                           l4341 30CC  
                         l4333 30A8                           l4325 3054                           l4405 2BCE  
                         l4501 13A0                           l4431 3D16                           l3359 34E0  
                         l3391 357A                           l3383 3548                           l3375 351E  
                         l3367 34F6                           l3295 37B8                           l5119 38D6  
                         l5143 2DFE                           l5151 2E56                           l5135 2DDA  
                         l5127 2DA8                           l5207 2D36                           l5231 40EE  
                         l5311 26B0                           l5303 2652                           l4423 4410  
                         l4415 43FC                           l3439 3C50                           l3519 2FD6  
                         l3623 3AE6                           l3615 3AB6                           l3607 3AA6  
                         l3631 3A28                           l4095 213E                           l4087 2102  
                         l4079 20C8                           l4319 3254                           l4271 1F2A  
                         l4263 1ED6                           l4255 1E7A                           l4247 1E36  
                         l4239 1DE8                           l4191 1C16                           l4183 1BD2  
                         l4175 1B9C                           l4167 1B80                           l4159 1B4A  
                         l3711 1724                           l3703 16F2                           l4351 30F8  
                         l4335 30AA                           l4327 306A                           l4407 2BDE  
                         l4511 1506                           l4503 13B6                           l4441 3DC0  
                         l3385 3556                           l3393 3580                           l3377 3526  
                         l3369 3504                           l3297 37C8                           l5153 2E70  
                         l5161 2EBC                           l5145 2E30                           l5137 2DE2  
                         l5129 2DB8                           l5209 2D40                           l5217 2D60  
                         l5233 410E                           l5241 4216                           l5321 2710  
                         l5313 26B2                           l5305 266A                           l4425 4412  
                         l4417 4406                           l3625 3AEA                           l3617 3AC6  
                         l3609 3AAE                           l3641 3A48                           l3633 3A30  
                         l5401 29D2                           l4097 2150                           l4089 210E  
                         l4273 1F2C                           l4265 1EF0                           l4257 1EA4  
                         l4193 1C22                           l4185 1BF2                           l4177 1BAC  
                         l4169 1B86                           l3801 1900                           l3721 175E  
                         l3713 1726                           l3705 16F4                           l4281 404E  
                         l4361 3128                           l4337 30BA                           l4409 2BEC  
                         l4513 1538                           l4505 13E8                           l4601 3380  
                         l4443 3E06                           l4435 3D20                           l3395 3590  
                         l3387 356C                           l3379 3538                           l3299 37D2  
                         l5163 2ECC                           l5155 2E82                           l5147 2E34  
                         l5139 2DEE                           l5171 2C00                           l5227 40D6  
                         l5243 421E                           l5331 2774                           l5323 2712  
                         l5315 26CA                           l5307 2682                           l4419 440C  
                         l4427 4498                           l3651 3B7C                           l3619 3ACE  
                         l4531 3F78                           l3643 3A50                           l3627 3A06  
                         l4523 3E58                           l5251 44E8                           l5411 2A32  
                         l5403 29E6                           l4099 2166                           l4291 373C  
                         l4267 1F0C                           l4275 1F32                           l4259 1EA8  
                         l4195 1C2C                           l4187 1C02                           l4179 1BBC  
                         l3811 197C                           l3803 1934                           l3731 1772  
                         l3723 1762                           l3707 1704                           l3715 172E  
                         l4283 405E                           l4363 3138                           l4347 30E4  
                         l4339 30BE                           l4371 2A5E                           l4507 1444  
                         l4515 15C8                           l4611 33E4                           l4603 3388  
                         l3581 4436                           l3901 4548                           l4437 3D66  
                         l4429 3CD0                           l3397 3598                           l3389 3574  
                         l5165 2ED2                           l5157 2E92                           l5149 2E3A  
                         l3493 3650                           l5181 2C48                           l5173 2C26  
                         l5229 40DE                           l5245 422E                           l5237 4206  
                         l5341 27AE                           l5333 2776                           l5325 272A  
                         l5317 26E2                           l5309 269A                           l4621 41D2  
                         l3661 3BB0                           l3653 3B94                           l4541 3FCC  
                         l4533 3F84                           l3645 3A58                           l3629 3A20  
                         l4525 3E64                           l5405 29F2                           l5413 2A3E  
                         l4293 376A                           l4277 1F36                           l4269 1F1C  
                         l4197 1C42                           l3821 19B8                           l3813 198C  
                         l3805 1936                           l3741 1786                           l3733 1776  
                         l3725 1766                           l3717 173E                           l3709 1714  
                         l4365 3148                           l4357 310C                           l4349 30EE  
                         l4381 2ADC                           l4373 2A6C                           l4517 15FC  
                         l4509 1476                           l4461 0F72                           l4453 0ECC  
                         l5261 3290                           l5253 325E                           l4613 3400  
                         l4605 33A4                           l5501 23EE                           l5421 22EE  
                         ?_pad 0010                           l3911 4154                           l3903 411A  
                         l4447 3D70                           l3671 450E                           l5167 2EE2  
                         l5159 2EAC                           l3495 3658                           l5183 2C4C  
                         l5191 2C96                           l5175 2C2E                           l5239 420E  
                         l5351 27E2                           l5343 27C6                           l5335 2778  
                         l5327 2746                           l5319 26FA                           l4623 41D6  
                         l3663 3BB8                           l3591 39B0                           l3583 3978  
                         l4543 3FE4                           l4535 3F9C                           l4551 3F54  
                         l3647 3A68                           l3639 3A38                           l4527 3E7C  
                         l5407 2A08                           l4295 377A                           l4287 36FE  
                         l4199 1C4E                           l3831 19E4                           l3823 19BA  
                         l3807 1946                           l3751 179A                           l3743 178A  
                         l3735 177A                           l3727 176A                           l3719 1750  
                         l4359 3118                           l4391 2B30                           l4383 2AE4  
                         l4375 2AB2                           l4519 160C                           l4471 1076  
                         l4463 0FA6                           l4455 0EDE                           l5271 32C6  
                         l5263 3292                           l5255 3264                           l4615 3408  
                         l4607 33C0                           l5511 24EC                           l5503 23FA  
                         l5431 2308                           l5423 22EE                           l5415 22E2  
                         l4801 4508                           l3913 4156                           l3905 411E  
                         l4449 3DB6                           l3673 451E                           l5097 415A  
                         l3497 367E                           l5193 2CA6                           l5185 2C58  
                         l5177 2C3C                           l5353 27FA                           l5345 27DC  
                         l5337 277A                           l5329 275E                           l4625 41E0  
                         l3665 3BC0                           l3593 39B8                           l3585 397C  
                         l4545 3FF0                           l4537 3FA8                           l4553 3F60  
                         l3649 3A6C                           l4529 3E88                           l4561 3E40  
                         l5249 44D4                           l5409 2A1E                           l5361 2856  
                         l4297 379E                           l4289 372C                           l3841 1A1C  
                         l3825 19C8                           l3817 19A0                           l3833 19E6  
                         l3809 1956                           l3761 17F8                           l3745 178E  
                         l3737 177E                           l3729 176E                           l3753 179E  
                         l3681 167A                           l4393 2B6C                           l4385 2AF0  
                         l4377 2AC8                           l4369 2A4E                           l4481 1168  
                         l4473 109A                           l4465 0FDA                           l4457 0F0E  
                         l5281 32FA                           l5273 32C8                           l5265 3294  
                         l5257 327C                           l4617 3414                           l4609 33C8  
                         l5521 2534                           l5513 24F8                           l5505 241C  
                         l5441 2328                           l5433 2310                           l5425 22FA  
                         l5417 22E6                           l3579 4426                           l3907 4126  
                         l3931 439E                           l5099 4166                           l3499 3686  
                         l5195 2CBA                           l5179 2C40                           l5355 2810  
                         l5347 27DE                           l5339 2792                           l5291 25F0  
                         l4627 41F0                           l3667 3BD0                           l3659 3B9C  
                         l3595 39C0                           l3587 3992                           l4539 3FC0  
                         l4547 3F30                           l4563 3EE8                           l4571 3EA0  
                         l4555 3E10                           l5371 28B6                           l5363 286A  
                         l4811 44CE                           l4803 44B6                           l4299 37A4  
                         l3851 1A9A                           l3827 19D0                           l3819 19AA  
                         l3835 19F4                           l3771 182E                           l3763 180E  
                         l3755 17A2                           l3747 1792                           l3739 1782  
                         l3683 168A                           l3691 16B4                           l3675 165E  
                         l4395 2B78                           l4387 2B22                           l4491 126A  
                         l4483 119A                           l4475 10CE                           l4467 100E  
                         l4459 0F3E                           l5283 3314                           l5275 32E0  
                         l5267 32C2                           l5259 328E                           l4619 3420  
                         l5531 259A                           l5523 254E                           l5515 24FA  
                         l5507 24C8                           l5451 234A                           l5443 232C  
                         l5435 2318                           l5427 2300                           l5419 22EA  
                         l3909 412E                           l3933 43AA                           l5197 2CCA  
                         l5189 2C60                           l5349 27E0                           l5293 25F6  
                         l4629 41FA                           l3669 3BD4                           l3597 39C8  
                         l3589 399A                           l4549 3F3C                           l4565 3EF4  
                         l4573 3EAC                           l4557 3E1C                           l5381 290E  
                         l5373 28C2                           l5365 2876                           l5357 282A  
                         l4821 3922                           l4813 44D0                           l4805 44C0  
                         l3861 1AE0                           l3845 1A46                           l3853 1A9C  
                         l3837 19F8                           l3829 19D4                           l3781 187E  
                         l3773 1838                           l3765 181A                           l3757 17CC  
                         l3749 1796                           l3693 16C4                           l3685 169A  
                         l3677 166A                           l4397 2B86                           l4389 2B24  
                         l4493 129C                           l4485 11D2                           l4477 1102  
                         l4469 1042                           l5285 332A                           l5277 32F6  
                         l5269 32C4                           l3941 3B1E                           l5541 25D4  
                         l5533 259A                           l5525 255A                           l5517 2510  
                         l5509 24E0                           l5461 2354                           l5453 234C  
                         l5445 2344                           l5437 2320                           l5429 2304  
                         l3935 43AC                           l5199 2CD4                           l5295 260E  
                         l3599 39D8                           l4567 3F0C                           l4575 3EC4  
                         l4559 3E34                           l5391 2970                           l5383 2924  
                         l5375 28D8                           l5367 288C                           l5359 2840  
                         l4831 395E                           l4823 3946                           l4815 38E8  
                         l4807 44C2                           l3871 1B0A                           l3863 1AEE  
                         l3855 1AAC                           l3847 1A52                           l3839 1A06  
                         l3791 18BA                           l3783 188E                           l3775 185A  
                         l3767 181E                           l3759 17E8                           l3695 16CA  
                         l3687 16AA                           l3679 1678                           l4399 2BA4  
                         l4495 12D4                           l4487 1204                           l4479 1136  
                         l5287 333E                           l5279 32F8                           l3951 3B42  
                         l4583 4008                           l5535 25A6                           l5527 2574  
                         l5519 2528                           l5471 2360                           l5463 2356  
                         l5455 234E                           l5447 2346                           l5439 2324  
                         l3937 43B4                           l3929 439A                           l5297 2626  
                         l3961 3C7E                           l4569 3F18                           l4577 3ED0  
                         l5393 2986                           l5385 293A                           l5377 28EE  
                         l5369 28A2                           l4841 448C                           l4833 3968  
                         l4825 3950                           l4817 38F8                           l4809 44CC  
                         l3873 1B0C                           l3865 1AF4                           l3857 1ABC  
                         l3849 1A60                           l3793 18C8                           l3785 189C  
                         l3777 186A                           l3769 182C                           l3697 16DC  
                         l3689 16AC                           l4497 1306                           l4489 1238  
                         l3953 3B4A                           l4585 401A                           l5537 25C2  
                         l5529 258C                           l5481 2372                           l5473 2362  
                         l5465 235A                           l5457 2350                           l5449 2348  
                         l3891 4526                           l5299 263E                           l3963 3CCA  
                         l3971 4336                           l5395 299A                           l5387 294E  
                         l5379 2902                           l4835 396A                           l4827 3952  
                         l4819 391E                           l3867 1AF6                           l3859 1ADC  
                         l3795 18CA                           l3787 18AA                           l3699 16DE  
                         l4499 133A                           l3955 3B5A                           l3947 3B26  
                         l3939 3B02                           l4587 402A                           l4851 35BC  
                         l5539 25C4                           l5491 23DA                           l5483 238C  
                         l5475 2364                           l5467 235C                           l5459 2352  
                         l3893 452A                           l3981 438C                           l3973 4342  
                         l3965 426E                           l5397 29A6                           l5389 295A  
                         l4837 3974                           l4829 395C                           l3869 1AFC  
                         l3797 18D4                           l3789 18B6                           l3957 3B5E  
                         l3949 3B3A                           l4597 3348                           l4589 403C  
                         l4861 3642                           l4853 35E2                           l4845 35A2  
                         l5493 23DC                           l5485 238E                           l5477 236E  
                         l5469 235E                           l3887 453A                           l3895 4530  
                         l3959 3C68                           l3975 435A                           l3991 4310  
                         l3983 42D2                           l3967 427A                           l5399 29BC  
                         l4839 4474                           l3799 18DA                           l4599 3364  
                         l4855 3608                           l4847 35AA                           l5495 23DE  
                         l5487 2396                           l5479 2370                           l4793 44F2  
                         l3889 453E                           l3897 4534                           l5585 2C88  
                         l3977 4368                           l3993 4328                           l3985 42DE  
                         l3969 4292                           l4857 361A                           l5497 23E0  
                         l5489 23B8                           l4795 44FC                           l3899 4544  
                         l3995 43CC                           l3979 4374                           l3987 42F6  
                         l4859 3632                           l5499 23EC                           l4797 4504  
                         l3997 43D8                           l3989 4304                           l4799 4506  
                         l3999 43EE                           STR_1 0E90                           STR_2 0EC9  
                         STR_3 0E24                           STR_4 0EC9                           STR_5 0E41  
                         STR_6 0EC9                           STR_7 0E5C                           STR_8 0EC9  
                         STR_9 0E01                           u3000 197C                           u3001 1978  
                         u3010 198C                           u3011 1988                           u2300 345A  
                         u3100 1A60                           u3020 19B8                           u2301 3456  
                         u3101 1A5C                           u3021 19B4                           u2310 3480  
                         u3110 1A9A                           u3030 19C8                           u2311 347C  
                         u3111 1A96                           u3031 19C4                           u3200 43CA  
                         u2320 349E                           u2400 3590                           u2240 37B8  
                         u3120 1AAC                           u3040 19E4                           u4000 1538  
                 _BAUD4CONbits 0EE9                           u3201 43C6                           u2321 349A  
                         u2401 358C                           u2241 37B4                           u3121 1AA8  
                         u3041 19E0                           u4001 1534                           u2330 34BA  
                         u2250 37C8                           u3130 1ABC                           u3050 19F4  
                         u4010 160C                           u3210 3B7A                           u2331 34B6  
                         u2251 37C4                           u3131 1AB8                           u3051 19F0  
                         u4011 1608                           u3211 3B76                           u2340 34E0  
                         u2260 37EE                           u3220 3C7E                           u3300 202A  
                         u3140 1ADC                           u3060 1A06                           u4020 401A  
                         u2341 34DC                           u2261 37EA                           u3221 3C7A  
                         u3301 2026                           u3141 1AD8                           u3061 1A02  
                         u4021 4016                           u2350 3504                           u2270 3820  
                         u3310 206A                           u3150 1AEE                           u3070 1A1C  
                         u3230 41D0                           u4030 403C                           u2351 3500  
                         u2271 381C                           u3311 2066                           u3151 1AEA  
                         u3071 1A18                           u3231 41CC                           u4031 4038  
                         u2360 351E                           u2600 36F4                           u3400 21E4  
                         u3320 20E0                           u3240 1F62                           u3160 1B0A  
                         u3080 1A32                           u4040 3364                           u2361 351A  
                         u2601 36F0                           u3401 21E0                           u3321 20DC  
                         u3241 1F5E                           u3161 1B06                           u3081 1A2E  
                         u4041 3360                           u2290 3440                           u2370 3538  
                         u2450 4248                           u2610 2F1A                           u3410 21FA  
                         u3330 2102                           u3250 1F74                           u3090 1A46  
                         u4050 3380                           _T2PR 0FBC                           u2291 343C  
                         u2371 3534                           u2451 4244                           u2611 2F16  
                         u3411 21F6                           u3331 20FE                           u3251 1F70  
                         u3091 1A42                           u4051 337C                           u3180 4142  
                         u2380 3556                           u2460 3C0C                           u2620 2FD6  
                         u2700 3992                           u3420 220E                           u3340 212C  
                         u3260 1F84                           u3500 1B9A                           u4060 33A4  
                         u4300 35B8                           u3181 413A                           u2381 3552  
                         u2461 3C08                           u2621 2FD2                           u2701 398E  
                         u3421 220A                           u3341 2128                           u3261 1F80  
                         u3501 1B96                           u4061 33A0                           u4301 35B4  
                         u2390 356C                           u2470 3C2A                           u2710 39B0  
                         u3430 2228                           u3350 2150                           u3270 1FC8  
                         u3510 1BAC                           u4070 33C0                           u4310 361A  
                         u2391 3568                           u2471 3C26                           u2711 39AC  
                         u5007 3E6E                           u3431 2224                           u3351 214C  
                         u3271 1FC4                           u3511 1BA8                           u4071 33BC  
                         u4311 3616                           u2480 3C46                           u2720 39EE  
                         u3440 2270                           u3360 2166                           u3280 1FDA  
                         u3600 1E4C                           u3520 1BBC                           u2800 169A  
                         u4080 33E4                           u2481 3C42                           u2721 39EA  
                         u5017 4284                           u3441 226C                           u3361 2162  
                         u3281 1FD6                           u3601 1E48                           u3521 1BB8  
                         u2801 1696                           u4081 33E0                           u2730 3A04  
                         u3450 22A0                           u3370 2184                           u3290 1FEA  
                         u3610 1E60                           u3530 1BF2                           u2810 16DC  
                         u4090 3400                           u2731 3A00                           u5107 434C  
                         u5027 3EB6                           u3451 229C                           u3371 2180  
                         u3291 1FE6                           u3611 1E5C                           u3531 1BEE  
                         u2811 16D8                           u4091 33FC                           u4500 2D9E  
                         u2740 3B00                           u3460 22CE                           u3380 21A4  
                         u3700 31C6                           u3620 1E7A                           u3540 1C02  
                         u2900 180E                           u2820 16F2                           u2741 3AFC  
                         u5117 3FD6                           u5037 42B6                           u3461 22CA  
                         u3381 21A0                           u3701 31C2                           u3621 1E76  
                         u3541 1BFE                           u2901 180A                           u2821 16EE  
                         u3198 4144                           u4510 2DB8                           u2590 367E  
                         u2750 3A82                           u3390 21B6                           u3710 31E4  
                         u3630 1EC2                           u3550 1D7C                           u3470 1B38  
                         u2910 182C                           u2830 1704                           u4511 2DB4  
                         u2591 367A                           u5207 26EC                           u5127 437E  
                         u2751 3A7E                           u5047 3EFE                           u3391 21B2  
                         u3711 31E0                           u3631 1EBE                           u3471 1B34  
                         u2911 1828                           u2831 1700                           u2680 4436  
                         u4440 4198                           u4520 2DCE                           u4600 2CA6  
                         u2760 3BF0                           u3720 3204                           u3640 1EF0  
                         u3560 1DD6                           u3480 1B4A                           u2920 184C  
                         u2840 1714                           u3800 3138                           u2681 4432  
                         u4441 4194                           u4521 2DCA                           u4601 2CA2  
                         u5217 2750                           u2761 3BEC                           u5137 3ADC  
                         u5057 42E8                           u3721 3200                           u3641 1EEC  
                         u3561 1DD2                           u3481 1B46                           u2921 1848  
                         u2841 1710                           u3801 3134                           u2690 444C  
                         u2770 451E                           u4450 3862                           u4530 2E70  
                         u4610 2CCA                           u3730 3254                           u3650 1F2A  
                         u3570 1DF6                           u3490 1B5A                           u2930 185A  
                         u2850 1750                           u3810 2A5E                           u2691 4448  
                         u2771 451A                           u4451 385E                           u4531 2E6C  
                         u4611 2CC6                           u5227 27B8                           u5147 43E2  
                         u5067 3A5E                           u3731 3250                           u3651 1F26  
                         u3571 1DF2                           u3555 1D72                           u3491 1B56  
                         u2931 1856                           u2851 174C                           u3811 2A5A  
                         u4460 3880                           u4540 2E82                           u4620 2CFE  
                         u4700 2810                           u3660 372C                           u3580 1E08  
                         u2940 186A                           u2860 175E                           u2780 1678  
                         u3740 306A                           u3900 2BEC                           u3820 2A6C  
                         u4461 387C                           u4541 2E7E                           u4621 2CFA  
                         u5237 281A                           u4701 280C                           u5157 39CE  
                         u5077 3F46                           u3661 3728                           u3581 1E04  
                         u2941 1866                           u2861 175A                           u2781 1674  
                         u3741 3066                           u3901 2BE8                           u3821 2A68  
                         u4470 38C6                           u4550 2E92                           u4630 2D1E  
                         u4710 2840                           u3670 376A                           u3590 1E36  
                         u2950 189C                           u2870 17CC                           u2790 168A  
                         u3750 309E                           u3830 2AC8                           u3910 1168  
                         u5247 43AE                           u4471 38C2                           u4551 2E8E  
                         u4631 2D1A                           u5167 3BC6                           u5087 431A  
                         u4711 283C                           u3671 3766                           u3591 1E32  
                         u2951 1898                           u2871 17C8                           u2791 1686  
                         u3831 2AC4                           u3911 1164                           u4480 38D6  
                         u4560 2EAC                           u4640 410E                           u4800 2986  
                         u4720 2856                           u3680 379E                           u2960 18AA  
                         u2880 17E4                           u3760 30CC                           u3840 2B1E  
                         u3920 119A                           u4481 38D2                           u4561 2EA8  
                         u4641 410A                           u5177 41E6                           u5097 3F8E  
                         u4801 2982                           u4721 2852                           u3681 379A  
                         u2961 18A6                           u2881 17DE                           u3761 30C8  
                         u3841 2B1A                           u3921 1196                           u4570 2EBC  
                         u4490 2D9C                           u4650 2624                           u4810 29BC  
                         u4730 288C                           u3690 3188                           u2970 18C8  
                         u2890 17E6                           u3770 30E0                           u3850 2B68  
                         u3930 1204                           u4571 2EB8                           u4491 2D96  
                         u5187 2630                           u4651 2620                           u4811 29B8  
                         u4731 2888                           u3691 3184                           u2971 18C4  
                         u3771 30DC                           u3755 3094                           u3851 2B64  
                         u3931 1200                           u4580 2ECC                           u4660 2680  
                         u4820 29D2                           u4740 28A2                           u2980 1900  
                         u3780 3108                           u3860 2B86                           u3940 126A  
                         u4581 2EC8                           u5197 268C                           u4661 267C  
                         u4821 29CE                           u4741 289E                           u2981 18FC  
                         u3781 3104                           u3861 2B82                           u3941 1266  
                         u4590 2C26                           u4670 26E0                           u4830 2A08  
                         u4750 28D8                           u2990 1946                           u3790 3128  
                         u3870 2B96                           u3950 129C                           u4591 2C22  
                         u4671 26DC                           u4831 2A04                           u4751 28D4  
                         u2991 1942                           u3791 3124                           u3871 2B92  
                         u3951 1298                           u4680 2740                           u4840 2A1E  
                         u4760 28EE                           u3880 2BA4                           u3960 1306  
                         u4681 273C                           u4841 2A1A                           u4761 28EA  
                         u3881 2BA0                           u3961 1302                           u4690 27A8  
                         u4770 2924                           u3890 2BDE                           u3970 13A0  
                         u4850 24E0                           u4691 27A4                           u4771 2920  
                         u3891 2BDA                           u3971 139C                           u4907 251C  
                         u4851 24DC                           u4780 293A                           u3980 13E8  
                         u4860 258C                           u4781 2936                           u3981 13E4  
                         u4861 2588                           u4917 2540                           u4790 2970  
                         u3990 1476                           u4870 259A                           u4791 296C  
                         u3991 1472                           u4871 2596                           u4927 2566  
                         u4937 3B50                           u4947 41AC                           u4957 3270  
                         u4967 32A0                           u4977 32D4                           u4897 237E  
                         u4987 3308                           u4997 3E26                    main@current 00B6  
                  main@maximum 00B2                           abs@a 0008                           _dbuf 0164  
                         _main 22E2                           _dtoa 2D88                           _path 0200  
         convert_rgb2hue@cCurr 0057                           _prec 00D2                           pad@i 0016  
                         pad@p 0013                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 005D                           _stop 3978            fullSpeedAhead@power 0017  
                         prodh 0FF4                           prodl 0FF3                           start 003A  
             __end_of_ADC_init 450C                ___fldiv@new_exp 0044         __end_of_color_read_Red 3D20  
                 ___param_bank 0000                 reading_hue@hue 00AE                          ??_abs 000A  
                        ??_pad 0015                  ___fltol@sign1 0054                __end_of___fladd 1B1E  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 22E2                __end_of___awdiv 34F2                          STR_10 0EC9  
                        STR_11 0E77                          STR_12 0EC9                          STR_13 0EA8  
                        STR_14 0EBD                __end_of___awmod 35A2                __end_of___flmul 1F48  
              __end_of___flsub 4094                __end_of___fltol 315A                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 3C66                          i1l666 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0058                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3                __end_of_left135 4336  
      __end_of_sendCharSerial4 4524     __end_of_I2C_2_Master_Start 4544     __end_of_I2C_2_Master_Write 4530  
                        _flags 00D4            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 37A8                          _fputs 415A                          pad@fp 0010  
                        _width 00D0                          _putch 454E                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 42A0  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 005A  
              __end_of_moveRed 3EA0                          tablat 0FF5          moveYellow@path_length 001F  
              __end_of_turn180 439A                          ttemp5 005E                          ttemp6 0061  
                        ttemp7 0065                          status 0FD8                          wtemp8 005E  
              __end_of_sprintf 423A          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 3E10  
        _I2C_2_Master_RepStart 4544                ?_color_read_Red 0006                __initialization 4094  
                 __end_of_main 25F0                   __end_of_dtoa 2F00                   __end_of_stop 3A06  
        __end_of_moveLightBlue 3F78                _get16bitTMR0val 4474                         ??_main 00B0  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 36FE                _reverseStraight 3348                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 43FC  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3271 002E                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i1l3269 001E                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 4206                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2C00    convert_rgb2hue@greencurrent 0068               __end_of_decision 2A4C  
                       _LowISR 0018                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 315A                         ___fleq 36FE                      ??___fladd 000A  
                       ___wmul 444E                      ??___fldiv 003B               backOneAndHalf@mL 0019  
                    ??___awdiv 0006               backOneAndHalf@mR 001A                      ??___awmod 0006  
                    ??___flmul 0022                      ??___flsub 001A                      ??___fltol 0050  
                    ??___lwdiv 000C                         _left90 4336           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 40AC                         clear_1 40B8  
                       clear_2 40C4               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00F6                         _motorR 00ED                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 4304                         dtoa@fp 0018  
             __end_of_moveBlue 4008               __end_of_movePink 3EE8                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0045  
                    ??_moveRed 0021                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                         putch@c 0001               __end_of_vfprintf 4118  
                    ??_turn180 001B                         stop@mL 0014                         stop@mR 0015  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0038               __end_of_turnLeft 3B02  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 40CC       __end_of_color_read_Clear 3DC0  
     __end_of_color_read_Green 3D70         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 42A0  
                ___rparam_used 0001                     ___fltol@f1 004C               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4496                  _fullSpeedBack 3B7C  
                 __pidataBANK0 4550                  __end_of_fputc 3852                  __end_of_fputs 419A  
                __end_of_putch 4550        __end_of_reverseStraight 342E               reading_hue@cCurr 005A  
          moveBlue@path_length 001F                     ??_ADC_init 0002                 main@clear_norm 00C2  
                   backHalf@mL 0019                     backHalf@mR 001A                        ??_fputc 0005  
                      ??_fputs 000D                        ??_putch 0002                     __pbssBANK0 00C6  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 42D2  
                      ?_LowISR 0001              _color_writetoaddr 4496                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0014                _convert_rgb2hue 0ECC                        ?___flge 0002  
                      ?___fleq 0002             ?_color_writetoaddr 0004                  _customDelayMs 419A  
                      ?___wmul 0002                        ?_left90 0019                      ?_backHalf 0019  
          ??_color_writetoaddr 0005                      ?___xxtofl 0002            _convert_rgb2hue$440 0084  
          _convert_rgb2hue$441 0088            _convert_rgb2hue$442 008C            _convert_rgb2hue$439 0080  
                    ?_decision 0047                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                decision@color 004B                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001D                    moveGreen@mR 001E                ?_backOneAndHalf 0019  
       color_writetoaddr@value 0004               ??_color_read_Red 0008      __end_of_color_writetoaddr 44B6  
                    _ADREFbits 0F58                      ?_right135 0019             _I2C_2_Master_Start 453A  
                   _initUSART4 44B6             _I2C_2_Master_Write 4524                      ?_moveBlue 001D  
                      __Hparam 0000                      ?_movePink 001D                        __Lparam 0000  
            color_read_Red@tmp 000B      customDelayMs@milliseconds 0002                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0002                        ___fladd 165E  
                      ___fldiv 1F48                        ___awdiv 342E                        ___awmod 34F2  
                      ___flmul 1B1E                        ___flsub 404E                        ___fltol 3054  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 3BF2            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002E                   __psmallconst 0E00                        __pcinit 4094  
                   ??_backHalf 001B              __end_of_logAction 3CD0                        __ramtop 0E00  
             ?_reverseStraight 0019                     _send2USART 44D4                      ?_turnLeft 0014  
                      _left135 4304                        __ptext0 22E2                        __ptext1 35A2  
                      __ptext2 4008                        __ptext3 3348                        __ptext4 3B02  
                      __ptext5 419A                        __ptext6 325E                        __ptext7 0ECC  
                      __ptext8 2A4C                        __ptext9 3054                      _T2CONbits 0FBD  
        read_prec_or_width@fmt 0008                     ??___xxtofl 0006               ___awmod@dividend 0002  
                   ??_decision 004B         reverseStraight@delayMs 001D                        _right90 426E  
                    _T2HLTbits 0FBE                        _moveRed 3E58                  _RxBufWriteCnt 00D8  
                      _turn180 4368                        _sprintf 4206                        main@hue 00BA  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 40CC  
            __end_of_moveGreen 3FC0                        fputc@fp 0004        __end_of_convert_rgb2hue 165E  
                      fputs@fp 000C              ?_color_click_init 0001             _read_prec_or_width 3650  
                   _moveOrange 3EE8                     ??_right135 001B                     _moveYellow 3E10  
              ??_fullSpeedBack 0016                     ??_moveBlue 0021             ??_color_click_init 0006  
      convert_rgb2hue@clearmax 007C                     ??_movePink 0021               _colorCalibration 00E3  
            __end_of_vfpfcnvrt 2D88                        postdec1 0FE5                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00D9                     _returnHome 35A2  
              _initDCmotorsPWM 38E8                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 3A84                    ___fladd@grs 0011  
     reverseTurn@turnDirection 001F                  ___xxtofl@sign 000A                    returnHome@i 002B  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0012                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88                  logAction@time 0008  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 0046               convert_rgb2hue@r 00A0                    ___fldiv@rem 003F  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 0027                    _CCP1CONbits 0FAB  
          _calibration_routine 25F0              ?_color_read_Clear 0006                   _EUSART4RXbuf 0150  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 325E  
               __end_of___fleq 37A8                 _fullSpeedAhead 3B02                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 4474  
               __end_of_left90 4368                    ?_send2USART 0045           ?_calibration_routine 0045  
          reverseStraight@time 001B            color_read_Clear@tmp 000B            start_initialization 4094  
         moveGreen@path_length 001F   calibration_routine@cal_state 0048                    __end_of_abs 426E  
                  __end_of_pad 38E8                  _TxBufWriteCnt 005C               ?_convert_rgb2hue 0056  
                  ?_moveOrange 001D                    ?_moveYellow 001D            color_read_Green@tmp 000B  
                     ??_LowISR 0001        __end_of_initDCmotorsPWM 3978                    vfprintf@fmt 002F  
       __end_of_fullSpeedAhead 3B7C                       ??___flge 000A                       ??___fleq 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00FF  
                  ?_returnHome 0020          ??_calibration_routine 0046                  _moveLightBlue 3F30  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 0037  
                    ___fldiv@b 0033                      ___flmul@a 001E                      ___flmul@b 001A  
                  __pbssCOMRAM 005C                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0019  
            reverseStraight@mR 001A                  ??_reading_hue 00AC            decision@path_length 0049  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3035 001B                ?_fullSpeedAhead 0014                       ?___fladd 0002  
                     ?___fldiv 0033                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 001A                       ?___flsub 0012                       ?___fltol 004C  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00D5           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 4426                      _logAction 3C66              _I2C_2_Master_Init 43FC  
            _I2C_2_Master_Read 4118                       ?_right90 0019              _I2C_2_Master_Stop 4530  
                     ?_moveRed 001D                   _RxBufReadCnt 00D7                       _ADC_init 44F2  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
            _sendStringSerial4 439A            ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _IPR0bits 0E1F                       _PIE0bits 0E29  
           ?_sendStringSerial4 0003                      _moveGreen 3F78                       _PIE4bits 0E2D  
          __end_of_reading_hue 3348                       i1u223_20 002E                       i1u223_21 002A  
                  turnRight@mL 0014                    turnRight@mR 0015                       _PIR0bits 0E33  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0002                      left135@mL 0019  
                    left135@mR 001A              ??_sendCharSerial4 0002                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                  ??_reverseTurn 0020  
                    _vfpfcnvrt 2C00                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 444E  
    __end_of_I2C_2_Master_Init 4426      __end_of_I2C_2_Master_Read 415A              ___wmul@multiplier 0002  
    __end_of_I2C_2_Master_Stop 453A                   setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003  
                  _ldrReadings 013C                     ?_logAction 0008              ??_color_read_Blue 0008  
                 _TxBufReadCnt 00D6                      _turnRight 3A06      __end_of_sendStringSerial4 43CC  
                 moveOrange@mL 001D                   moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 454E  
           color_read_Blue@tmp 000B            __end_of_setMotorPWM 3054                main@path_length 00C4  
                 ??_initUSART4 0002                     ?_moveGreen 001D                       __Hrparam 0000  
                   vfprintf@ap 0030                       __Lrparam 0000                     vfprintf@fp 002E  
        __end_of_fullSpeedBack 3BF2                ??_moveLightBlue 0021                   moveYellow@mL 001D  
                 moveYellow@mR 001E                     ?_vfpfcnvrt 0023          moveOrange@path_length 001F  
                     _backHalf 43CC                   ??_send2USART 0047                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00FF                     sprintf@fmt 0033  
                     ___xxtofl 2A4C                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 282A            __end_of_reverseTurn 404E                      right90@mL 0019  
                    right90@mR 001A                ___lwdiv@divisor 000A             __end_of_initUSART4 44D4  
              ___lwdiv@counter 000E                     ?_turnRight 0014                       __ptext10 404E  
                     __ptext11 165E                       __ptext20 44D4                       __ptext12 1B1E  
                     __ptext21 3E10                       __ptext13 315A                       __ptext30 4304  
                     __ptext22 3E58                       __ptext14 36FE                       __ptext31 3F78  
                     __ptext23 426E                       __ptext15 1F48                       __ptext40 2F00  
                     __ptext32 4336                       __ptext24 3EA0                       __ptext16 44B6  
                     __ptext41 3BF2                       __ptext33 3FC0                       __ptext25 42A0  
                     __ptext17 38E8                       __ptext50 444E                       __ptext42 41D2  
                     __ptext34 4368                       __ptext26 3EE8                       __ptext18 4474  
                     __ptext51 2D88                       __ptext43 4496                       __ptext35 3A84  
                     __ptext27 42D2                       __ptext19 282A                       __ptext60 450C  
                     __ptext52 3852                       __ptext44 43FC                       __ptext36 3C66  
                     __ptext28 3A06                       __ptext61 3CD0                       __ptext53 415A  
                     __ptext45 25F0                       __ptext37 43CC                       __ptext29 3F30  
                     __ptext70 4426                       __ptext62 3D20                       __ptext54 37A8  
                     __ptext46 4206                       __ptext38 3978                       __ptext71 44F2  
                     __ptext63 3D70                       __ptext55 454E                       __ptext47 40D6  
                     __ptext39 3B7C                       __ptext64 3DC0                       __ptext56 423A  
                     __ptext48 2C00                       __ptext65 4524                       __ptext57 34F2  
                     __ptext49 3650                       __ptext66 4530                       __ptext58 342E  
                     __ptext67 453A                       __ptext59 439A                       __ptext68 4544  
                     __ptext69 4118                    decision@hue 0047                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 325E                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 0021                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 0021             __end_of_send2USART 44F2                       _right135 42D2  
                     _moveBlue 3FC0                       _movePink 3EA0                     turnRight@i 0017  
           moveRed@path_length 001F          __end_of_customDelayMs 41D2                       isa$xinst 0000  
                     left90@mL 0019                       left90@mR 001A                     _RC4STAbits 0EE7  
                     int$flags 005D                       _vfprintf 40D6                   ??_returnHome 0026  
                     main@time 00BC                       _turnLeft 3A84                      turn180@mL 0019  
                    turn180@mR 001A                    ??_logAction 000C                     _INTCONbits 0FF2  
               customDelayMs@i 0005             __end_of_moveOrange 3F30             __end_of_moveYellow 3E58  
                  _setMotorPWM 2F00              ??_get16bitTMR0val 0004                       intlevel1 0000  
                    sprintf@ap 0038           returnHome@pathLength 0024              ??_reverseStraight 001D  
             ??_fullSpeedAhead 0016       moveLightBlue@path_length 001F  get16bitTMR0val@combined_value 0008  
           __end_of_returnHome 3650                    ??_moveGreen 0021               returnHome@action 002A  
                    turnLeft@i 0017    __end_of_calibration_routine 282A    convert_rgb2hue@clearcurrent 0078  
                send2USART@hue 0045                    ??_vfpfcnvrt 0026                    _reverseTurn 4008  
             _color_click_init 41D2                       sprintf@f 0039                       sprintf@s 0032  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                    ??_turnRight 0016  
                ___fladd@signs 000E                     _TX4STAbits 0EE8                _sendCharSerial4 450C  
               returnHome@path 0022                 returnHome@time 0028                   ___fladd@aexp 000F  
                 ___fladd@bexp 0010                   returnHome@mL 0020                   returnHome@mR 0021  
              logAction@action 000C  
