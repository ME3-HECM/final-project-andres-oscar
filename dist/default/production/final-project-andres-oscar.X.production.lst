

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 23:43:15 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 21/07/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F67K40 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000000                     
   129                           	psect	idataBANK0
   130   0044C2                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for _dataFlag
   134   0044C2  01                 	db	1
   135   000000                     _TMR0H	set	4052
   136   000000                     _TX4REG	set	3812
   137   000000                     _RC4STAbits	set	3815
   138   000000                     _SP4BRGH	set	3814
   139   000000                     _LATHbits	set	3968
   140   000000                     _LATFbits	set	3966
   141   000000                     _TRISFbits	set	3974
   142   000000                     _TRISAbits	set	3969
   143   000000                     _TRISEbits	set	3973
   144   000000                     _TRISGbits	set	3975
   145   000000                     _TRISDbits	set	3972
   146   000000                     _PORTFbits	set	3982
   147   000000                     _SSP2CON2bits	set	3802
   148   000000                     _RX4PPS	set	3605
   149   000000                     _SSP2CLKPPS	set	3612
   150   000000                     _SSP2DATPPS	set	3613
   151   000000                     _ANSELDbits	set	3751
   152   000000                     _SSP2ADD	set	3798
   153   000000                     _SSP2CON1bits	set	3801
   154   000000                     _LATAbits	set	3961
   155   000000                     _LATEbits	set	3965
   156   000000                     _LATGbits	set	3967
   157   000000                     _LATCbits	set	3963
   158   000000                     _LATDbits	set	3964
   159   000000                     _CCPR2H	set	4006
   160   000000                     _CCPR1H	set	4010
   161   000000                     _RC4REG	set	3811
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _SSP2STAT	set	3800
   169   000000                     _ANSELFbits	set	3764
   170   000000                     _SSP2BUF	set	3797
   171   000000                     _IPR0bits	set	3615
   172   000000                     _PIE0bits	set	3625
   173   000000                     _PIE4bits	set	3629
   174   000000                     _PIR4bits	set	3639
   175   000000                     _RC0PPS	set	3682
   176   000000                     _RC7PPS	set	3689
   177   000000                     _RD5PPS	set	3695
   178   000000                     _RE2PPS	set	3700
   179   000000                     _RD6PPS	set	3696
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _T2PR	set	4028
   183   000000                     _T2CONbits	set	4029
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _CCP2CONbits	set	4007
   186   000000                     _CCP3CONbits	set	3878
   187   000000                     _ADREFbits	set	3928
   188   000000                     _CCP4CONbits	set	3874
   189   000000                     _TRISHbits	set	3976
   190   000000                     _TRISCbits	set	3971
   191   000000                     _INTCONbits	set	4082
   192   000000                     _T0CON1bits	set	4054
   193   000000                     _ADPCH	set	3935
   194   000000                     _ADRESH	set	3940
   195   000000                     _ADCON0bits	set	3936
   196   000000                     _RE4PPS	set	3702
   197   000000                     _RG6PPS	set	3720
   198   000000                     _TMR0L	set	4051
   199   000000                     _T2CLKCONbits	set	4031
   200   000000                     _T2HLTbits	set	4030
   201   000000                     _PIR0bits	set	3635
   202                           
   203                           	psect	smallconst
   204   000E00                     __psmallconst:
   205                           	callstack 0
   206   000E00  00                 	db	0
   207   000E01                     STR_3:
   208                           
   209                           ; BSR set to: 14
   210   000E01  43                 	db	67	;'C'
   211   000E02  61                 	db	97	;'a'
   212   000E03  6C                 	db	108	;'l'
   213   000E04  69                 	db	105	;'i'
   214   000E05  62                 	db	98	;'b'
   215   000E06  72                 	db	114	;'r'
   216   000E07  61                 	db	97	;'a'
   217   000E08  74                 	db	116	;'t'
   218   000E09  69                 	db	105	;'i'
   219   000E0A  6F                 	db	111	;'o'
   220   000E0B  6E                 	db	110	;'n'
   221   000E0C  20                 	db	32
   222   000E0D  73                 	db	115	;'s'
   223   000E0E  74                 	db	116	;'t'
   224   000E0F  61                 	db	97	;'a'
   225   000E10  74                 	db	116	;'t'
   226   000E11  65                 	db	101	;'e'
   227   000E12  20                 	db	32
   228   000E13  3D                 	db	61	;'='
   229   000E14  20                 	db	32
   230   000E15  67                 	db	103	;'g'
   231   000E16  72                 	db	114	;'r'
   232   000E17  65                 	db	101	;'e'
   233   000E18  65                 	db	101	;'e'
   234   000E19  6E                 	db	110	;'n'
   235   000E1A  20                 	db	32
   236   000E1B  0A                 	db	10
   237   000E1C  0D                 	db	13
   238   000E1D  00                 	db	0
   239   000E1E                     STR_5:
   240                           
   241                           ; BSR set to: 14
   242   000E1E  43                 	db	67	;'C'
   243   000E1F  61                 	db	97	;'a'
   244   000E20  6C                 	db	108	;'l'
   245   000E21  69                 	db	105	;'i'
   246   000E22  62                 	db	98	;'b'
   247   000E23  72                 	db	114	;'r'
   248   000E24  61                 	db	97	;'a'
   249   000E25  74                 	db	116	;'t'
   250   000E26  69                 	db	105	;'i'
   251   000E27  6F                 	db	111	;'o'
   252   000E28  6E                 	db	110	;'n'
   253   000E29  20                 	db	32
   254   000E2A  73                 	db	115	;'s'
   255   000E2B  74                 	db	116	;'t'
   256   000E2C  61                 	db	97	;'a'
   257   000E2D  74                 	db	116	;'t'
   258   000E2E  65                 	db	101	;'e'
   259   000E2F  3D                 	db	61	;'='
   260   000E30  20                 	db	32
   261   000E31  62                 	db	98	;'b'
   262   000E32  6C                 	db	108	;'l'
   263   000E33  75                 	db	117	;'u'
   264   000E34  65                 	db	101	;'e'
   265   000E35  20                 	db	32
   266   000E36  0A                 	db	10
   267   000E37  0D                 	db	13
   268   000E38  00                 	db	0
   269   000E39                     STR_7:
   270                           
   271                           ; BSR set to: 14
   272   000E39  43                 	db	67	;'C'
   273   000E3A  61                 	db	97	;'a'
   274   000E3B  6C                 	db	108	;'l'
   275   000E3C  69                 	db	105	;'i'
   276   000E3D  62                 	db	98	;'b'
   277   000E3E  72                 	db	114	;'r'
   278   000E3F  61                 	db	97	;'a'
   279   000E40  74                 	db	116	;'t'
   280   000E41  69                 	db	105	;'i'
   281   000E42  6F                 	db	111	;'o'
   282   000E43  6E                 	db	110	;'n'
   283   000E44  20                 	db	32
   284   000E45  73                 	db	115	;'s'
   285   000E46  74                 	db	116	;'t'
   286   000E47  61                 	db	97	;'a'
   287   000E48  74                 	db	116	;'t'
   288   000E49  65                 	db	101	;'e'
   289   000E4A  20                 	db	32
   290   000E4B  3D                 	db	61	;'='
   291   000E4C  20                 	db	32
   292   000E4D  20                 	db	32
   293   000E4E  77                 	db	119	;'w'
   294   000E4F  68                 	db	104	;'h'
   295   000E50  69                 	db	105	;'i'
   296   000E51  74                 	db	116	;'t'
   297   000E52  65                 	db	101	;'e'
   298   000E53  00                 	db	0
   299   000E54                     STR_9:
   300                           
   301                           ; BSR set to: 14
   302   000E54  43                 	db	67	;'C'
   303   000E55  41                 	db	65	;'A'
   304   000E56  4C                 	db	76	;'L'
   305   000E57  49                 	db	73	;'I'
   306   000E58  42                 	db	66	;'B'
   307   000E59  52                 	db	82	;'R'
   308   000E5A  41                 	db	65	;'A'
   309   000E5B  54                 	db	84	;'T'
   310   000E5C  49                 	db	73	;'I'
   311   000E5D  4F                 	db	79	;'O'
   312   000E5E  4E                 	db	78	;'N'
   313   000E5F  20                 	db	32
   314   000E60  43                 	db	67	;'C'
   315   000E61  4F                 	db	79	;'O'
   316   000E62  4D                 	db	77	;'M'
   317   000E63  50                 	db	80	;'P'
   318   000E64  4C                 	db	76	;'L'
   319   000E65  45                 	db	69	;'E'
   320   000E66  54                 	db	84	;'T'
   321   000E67  45                 	db	69	;'E'
   322   000E68  44                 	db	68	;'D'
   323   000E69  20                 	db	32
   324   000E6A  0A                 	db	10
   325   000E6B  0D                 	db	13
   326   000E6C  00                 	db	0
   327   000E6D                     STR_1:
   328                           
   329                           ; BSR set to: 14
   330   000E6D  43                 	db	67	;'C'
   331   000E6E  61                 	db	97	;'a'
   332   000E6F  6C                 	db	108	;'l'
   333   000E70  69                 	db	105	;'i'
   334   000E71  62                 	db	98	;'b'
   335   000E72  72                 	db	114	;'r'
   336   000E73  61                 	db	97	;'a'
   337   000E74  74                 	db	116	;'t'
   338   000E75  69                 	db	105	;'i'
   339   000E76  6F                 	db	111	;'o'
   340   000E77  6E                 	db	110	;'n'
   341   000E78  20                 	db	32
   342   000E79  73                 	db	115	;'s'
   343   000E7A  74                 	db	116	;'t'
   344   000E7B  61                 	db	97	;'a'
   345   000E7C  74                 	db	116	;'t'
   346   000E7D  65                 	db	101	;'e'
   347   000E7E  20                 	db	32
   348   000E7F  3D                 	db	61	;'='
   349   000E80  20                 	db	32
   350   000E81  72                 	db	114	;'r'
   351   000E82  65                 	db	101	;'e'
   352   000E83  64                 	db	100	;'d'
   353   000E84  00                 	db	0
   354   000E85                     
   355                           ; BSR set to: 14
   356   000E85  56                 	db	86	;'V'
   357   000E86  6F                 	db	111	;'o'
   358   000E87  6C                 	db	108	;'l'
   359   000E88  74                 	db	116	;'t'
   360   000E89  61                 	db	97	;'a'
   361   000E8A  67                 	db	103	;'g'
   362   000E8B  65                 	db	101	;'e'
   363   000E8C  20                 	db	32
   364   000E8D  3D                 	db	61	;'='
   365   000E8E  20                 	db	32
   366   000E8F  25                 	db	37
   367   000E90  64                 	db	100	;'d'
   368   000E91  2E                 	db	46
   369   000E92  25                 	db	37
   370   000E93  30                 	db	48	;'0'
   371   000E94  32                 	db	50	;'2'
   372   000E95  64                 	db	100	;'d'
   373   000E96  2C                 	db	44
   374   000E97  20                 	db	32
   375   000E98  20                 	db	32
   376   000E99  00                 	db	0
   377   000E9A                     STR_12:
   378                           
   379                           ; BSR set to: 14
   380   000E9A  68                 	db	104	;'h'
   381   000E9B  75                 	db	117	;'u'
   382   000E9C  65                 	db	101	;'e'
   383   000E9D  3D                 	db	61	;'='
   384   000E9E  25                 	db	37
   385   000E9F  30                 	db	48	;'0'
   386   000EA0  33                 	db	51	;'3'
   387   000EA1  64                 	db	100	;'d'
   388   000EA2  2C                 	db	44
   389   000EA3  20                 	db	32
   390   000EA4  20                 	db	32
   391   000EA5  00                 	db	0
   392   000EA6                     STR_2:
   393                           
   394                           ; BSR set to: 14
   395   000EA6  2E                 	db	46
   396   000EA7  00                 	db	0
   397   000EA8  00                 	db	0	; dummy byte at the end
   398   000000                     
   399                           ; #config settings
   400                           
   401                           	psect	cinit
   402   003F48                     __pcinit:
   403                           	callstack 0
   404   003F48                     start_initialization:
   405                           	callstack 0
   406   003F48                     __initialization:
   407                           	callstack 0
   408                           
   409                           ; Initialize objects allocated to BANK0 (1 bytes)
   410                           ; load TBLPTR registers with __pidataBANK0
   411   003F48  0EC2               	movlw	low __pidataBANK0
   412   003F4A  6EF6               	movwf	tblptrl,c
   413   003F4C  0E44               	movlw	high __pidataBANK0
   414   003F4E  6EF7               	movwf	tblptrh,c
   415   003F50  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   416   003F52  6EF8               	movwf	tblptru,c
   417   003F54  0009               	tblrd		*+	;fetch initializer
   418   003F56  CFF5 F0ED          	movff	tablat,__pdataBANK0
   419                           
   420                           ; Clear objects allocated to BANK2 (250 bytes)
   421   003F5A  EE02  F000         	lfsr	0,__pbssBANK2
   422   003F5E  0EFA               	movlw	250
   423   003F60                     clear_0:
   424   003F60  6AEE               	clrf	postinc0,c
   425   003F62  06E8               	decf	wreg,f,c
   426   003F64  E1FD               	bnz	clear_0
   427                           
   428                           ; Clear objects allocated to BANK1 (132 bytes)
   429   003F66  EE01  F000         	lfsr	0,__pbssBANK1
   430   003F6A  0E84               	movlw	132
   431   003F6C                     clear_1:
   432   003F6C  6AEE               	clrf	postinc0,c
   433   003F6E  06E8               	decf	wreg,f,c
   434   003F70  E1FD               	bnz	clear_1
   435                           
   436                           ; Clear objects allocated to BANK0 (49 bytes)
   437   003F72  EE00  F0BC         	lfsr	0,__pbssBANK0
   438   003F76  0E31               	movlw	49
   439   003F78                     clear_2:
   440   003F78  6AEE               	clrf	postinc0,c
   441   003F7A  06E8               	decf	wreg,f,c
   442   003F7C  E1FD               	bnz	clear_2
   443                           
   444                           ; Clear objects allocated to COMRAM (3 bytes)
   445   003F7E  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   446   003F80  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   447   003F82  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   448   003F84                     end_of_initialization:
   449                           	callstack 0
   450   003F84                     __end_of__initialization:
   451                           	callstack 0
   452   003F84  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   453   003F86  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   454   003F88  0100               	movlb	0
   455   003F8A  EF60  F011         	goto	_main	;jump to C main() function
   456                           
   457                           	psect	bssCOMRAM
   458   00004F                     __pbssCOMRAM:
   459                           	callstack 0
   460   00004F                     _TxBufReadCnt:
   461                           	callstack 0
   462   00004F                     	ds	1
   463   000050                     _TxBufWriteCnt:
   464                           	callstack 0
   465   000050                     	ds	1
   466   000051                     _RxBufWriteCnt:
   467                           	callstack 0
   468   000051                     	ds	1
   469                           
   470                           	psect	bssBANK0
   471   0000BC                     __pbssBANK0:
   472                           	callstack 0
   473   0000BC                     _hue:
   474                           	callstack 0
   475   0000BC                     	ds	8
   476   0000C4                     _width:
   477                           	callstack 0
   478   0000C4                     	ds	2
   479   0000C6                     _prec:
   480                           	callstack 0
   481   0000C6                     	ds	2
   482   0000C8                     _flags:
   483                           	callstack 0
   484   0000C8                     	ds	1
   485   0000C9                     _readingIndex:
   486                           	callstack 0
   487   0000C9                     	ds	1
   488   0000CA                     _RxBufReadCnt:
   489                           	callstack 0
   490   0000CA                     	ds	1
   491   0000CB                     _motorR:
   492                           	callstack 0
   493   0000CB                     	ds	9
   494   0000D4                     _motorL:
   495                           	callstack 0
   496   0000D4                     	ds	9
   497   0000DD                     _colorCurrent:
   498                           	callstack 0
   499   0000DD                     	ds	8
   500   0000E5                     _colorCalibration:
   501                           	callstack 0
   502   0000E5                     	ds	8
   503                           
   504                           	psect	dataBANK0
   505   0000ED                     __pdataBANK0:
   506                           	callstack 0
   507   0000ED                     _dataFlag:
   508                           	callstack 0
   509   0000ED                     	ds	1
   510                           
   511                           	psect	bssBANK1
   512   000100                     __pbssBANK1:
   513                           	callstack 0
   514   000100                     _EUSART4TXbuf:
   515                           	callstack 0
   516   000100                     	ds	60
   517   00013C                     _ldrReadings:
   518                           	callstack 0
   519   00013C                     	ds	20
   520   000150                     _EUSART4RXbuf:
   521                           	callstack 0
   522   000150                     	ds	20
   523   000164                     _dbuf:
   524                           	callstack 0
   525   000164                     	ds	32
   526                           
   527                           	psect	bssBANK2
   528   000200                     __pbssBANK2:
   529                           	callstack 0
   530   000200                     _path:
   531                           	callstack 0
   532   000200                     	ds	250
   533                           
   534                           	psect	cstackBANK0
   535   000060                     __pcstackBANK0:
   536                           	callstack 0
   537   000060                     convert_rgb2hue@redcurrent:
   538                           	callstack 0
   539   000060                     calibration_routine@cal_state:
   540                           	callstack 0
   541   000060                     send2USART@hue_char:
   542                           	callstack 0
   543                           
   544                           ; 50 bytes @ 0x0
   545   000060                     	ds	4
   546   000064                     convert_rgb2hue@redmax:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x4
   550   000064                     	ds	4
   551   000068                     convert_rgb2hue@greencurrent:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x8
   555   000068                     	ds	4
   556   00006C                     convert_rgb2hue@greenmax:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0xC
   560   00006C                     	ds	4
   561   000070                     convert_rgb2hue@bluecurrent:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x10
   565   000070                     	ds	4
   566   000074                     convert_rgb2hue@bluemax:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x14
   570   000074                     	ds	4
   571   000078                     convert_rgb2hue@clearcurrent:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x18
   575   000078                     	ds	4
   576   00007C                     convert_rgb2hue@clearmax:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x1C
   580   00007C                     	ds	4
   581   000080                     _convert_rgb2hue$429:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x20
   585   000080                     	ds	4
   586   000084                     _convert_rgb2hue$430:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x24
   590   000084                     	ds	4
   591   000088                     _convert_rgb2hue$431:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x28
   595   000088                     	ds	4
   596   00008C                     _convert_rgb2hue$432:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x2C
   600   00008C                     	ds	4
   601   000090                     convert_rgb2hue@min:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x30
   605   000090                     	ds	4
   606   000094                     convert_rgb2hue@diff:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x34
   610   000094                     	ds	4
   611   000098                     convert_rgb2hue@max:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x38
   615   000098                     	ds	4
   616   00009C                     convert_rgb2hue@hue:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x3C
   620   00009C                     	ds	4
   621   0000A0                     convert_rgb2hue@r:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x40
   625   0000A0                     	ds	4
   626   0000A4                     convert_rgb2hue@g:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x44
   630   0000A4                     	ds	4
   631   0000A8                     convert_rgb2hue@b:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x48
   635   0000A8                     	ds	4
   636   0000AC                     main@maximum:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x4C
   640   0000AC                     	ds	4
   641   0000B0                     main@current:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x50
   645   0000B0                     	ds	4
   646   0000B4                     main@time:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0x54
   650   0000B4                     	ds	2
   651   0000B6                     main@clear_norm:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x56
   655   0000B6                     	ds	2
   656   0000B8                     main@hue:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x58
   660   0000B8                     	ds	2
   661   0000BA                     main@path_length:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x5A
   665   0000BA                     	ds	2
   666                           
   667                           	psect	cstackCOMRAM
   668   000001                     __pcstackCOMRAM:
   669                           	callstack 0
   670   000001                     ??_LowISR:
   671   000001                     
   672                           ; 1 bytes @ 0x0
   673   000001                     	ds	1
   674   000002                     ??_I2C_2_Master_Idle:
   675   000002                     ?_get16bitTMR0val:
   676                           	callstack 0
   677   000002                     ?___wmul:
   678                           	callstack 0
   679   000002                     ?___awdiv:
   680                           	callstack 0
   681   000002                     ?___awmod:
   682                           	callstack 0
   683   000002                     ?___fladd:
   684                           	callstack 0
   685   000002                     ?___flmul:
   686                           	callstack 0
   687   000002                     ?___xxtofl:
   688                           	callstack 0
   689   000002                     sendCharSerial4@charToSend:
   690                           	callstack 0
   691   000002                     initDCmotorsPWM@PWMperiod:
   692                           	callstack 0
   693   000002                     customDelayMs@milliseconds:
   694                           	callstack 0
   695   000002                     ___wmul@multiplier:
   696                           	callstack 0
   697   000002                     ___awdiv@dividend:
   698                           	callstack 0
   699   000002                     ___awmod@dividend:
   700                           	callstack 0
   701   000002                     fputc@c:
   702                           	callstack 0
   703   000002                     ___fleq@ff1:
   704                           	callstack 0
   705   000002                     ___flge@ff1:
   706                           	callstack 0
   707   000002                     ___fladd@b:
   708                           	callstack 0
   709   000002                     ___flmul@b:
   710                           	callstack 0
   711   000002                     ___xxtofl@val:
   712                           	callstack 0
   713                           
   714                           ; 4 bytes @ 0x1
   715   000002                     	ds	1
   716   000003                     ??_I2C_2_Master_Read:
   717   000003                     I2C_2_Master_Write@data_byte:
   718                           	callstack 0
   719   000003                     sendStringSerial4@string:
   720                           	callstack 0
   721                           
   722                           ; 1 bytes @ 0x2
   723   000003                     	ds	1
   724   000004                     ??_get16bitTMR0val:
   725   000004                     ??_customDelayMs:
   726   000004                     color_writetoaddr@value:
   727                           	callstack 0
   728   000004                     I2C_2_Master_Read@ack:
   729                           	callstack 0
   730   000004                     fputc@fp:
   731                           	callstack 0
   732   000004                     ___wmul@multiplicand:
   733                           	callstack 0
   734   000004                     ___awdiv@divisor:
   735                           	callstack 0
   736   000004                     ___awmod@divisor:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x3
   740   000004                     	ds	1
   741   000005                     ??_fputc:
   742   000005                     color_writetoaddr@address:
   743                           	callstack 0
   744   000005                     I2C_2_Master_Read@tmp:
   745                           	callstack 0
   746   000005                     customDelayMs@i:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750   000005                     	ds	1
   751   000006                     ??_color_click_init:
   752   000006                     ??___xxtofl:
   753   000006                     ?_color_read_Red:
   754                           	callstack 0
   755   000006                     ?_color_read_Green:
   756                           	callstack 0
   757   000006                     ?_color_read_Blue:
   758                           	callstack 0
   759   000006                     ?_color_read_Clear:
   760                           	callstack 0
   761   000006                     ___awdiv@counter:
   762                           	callstack 0
   763   000006                     ___awmod@counter:
   764                           	callstack 0
   765   000006                     ___wmul@product:
   766                           	callstack 0
   767   000006                     ___fleq@ff2:
   768                           	callstack 0
   769   000006                     ___flge@ff2:
   770                           	callstack 0
   771   000006                     ___fladd@a:
   772                           	callstack 0
   773   000006                     ___flmul@a:
   774                           	callstack 0
   775                           
   776                           ; 4 bytes @ 0x5
   777   000006                     	ds	1
   778   000007                     ___awdiv@sign:
   779                           	callstack 0
   780   000007                     ___awmod@sign:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x6
   784   000007                     	ds	1
   785   000008                     ??_color_read_Red:
   786   000008                     ??_color_read_Green:
   787   000008                     ??_color_read_Blue:
   788   000008                     ??_color_read_Clear:
   789   000008                     ?_abs:
   790                           	callstack 0
   791   000008                     ?___lwdiv:
   792                           	callstack 0
   793   000008                     ?_read_prec_or_width:
   794                           	callstack 0
   795   000008                     read_prec_or_width@fmt:
   796                           	callstack 0
   797   000008                     logAction@time:
   798                           	callstack 0
   799   000008                     get16bitTMR0val@combined_value:
   800                           	callstack 0
   801   000008                     ___awdiv@quotient:
   802                           	callstack 0
   803   000008                     ___lwdiv@dividend:
   804                           	callstack 0
   805   000008                     abs@a:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x7
   809   000008                     	ds	1
   810   000009                     read_prec_or_width@ap:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x8
   814   000009                     	ds	1
   815   00000A                     ??___fladd:
   816   00000A                     ??___flmul:
   817   00000A                     ??_abs:
   818   00000A                     ??___fleq:
   819   00000A                     ??___flge:
   820   00000A                     ___xxtofl@sign:
   821                           	callstack 0
   822   00000A                     read_prec_or_width@c:
   823                           	callstack 0
   824   00000A                     logAction@pathLength:
   825                           	callstack 0
   826   00000A                     ___lwdiv@divisor:
   827                           	callstack 0
   828   00000A                     fputs@s:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x9
   832   00000A                     	ds	1
   833   00000B                     ___xxtofl@exp:
   834                           	callstack 0
   835   00000B                     color_read_Red@tmp:
   836                           	callstack 0
   837   00000B                     color_read_Green@tmp:
   838                           	callstack 0
   839   00000B                     color_read_Blue@tmp:
   840                           	callstack 0
   841   00000B                     color_read_Clear@tmp:
   842                           	callstack 0
   843   00000B                     read_prec_or_width@n:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0xA
   847   00000B                     	ds	1
   848   00000C                     logAction@action:
   849                           	callstack 0
   850   00000C                     fputs@fp:
   851                           	callstack 0
   852   00000C                     ___lwdiv@quotient:
   853                           	callstack 0
   854   00000C                     ___xxtofl@arg:
   855                           	callstack 0
   856                           
   857                           ; 4 bytes @ 0xB
   858   00000C                     	ds	1
   859   00000D                     fputs@c:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0xC
   863   00000D                     	ds	1
   864   00000E                     ___lwdiv@counter:
   865                           	callstack 0
   866   00000E                     ___fladd@signs:
   867                           	callstack 0
   868   00000E                     ___flmul@sign:
   869                           	callstack 0
   870   00000E                     fputs@i:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0xD
   874   00000E                     	ds	1
   875   00000F                     setMotorPWM@m:
   876                           	callstack 0
   877   00000F                     ___fladd@aexp:
   878                           	callstack 0
   879   00000F                     ___flmul@grs:
   880                           	callstack 0
   881                           
   882                           ; 4 bytes @ 0xE
   883   00000F                     	ds	1
   884   000010                     ??_setMotorPWM:
   885   000010                     ___fladd@bexp:
   886                           	callstack 0
   887   000010                     pad@fp:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0xF
   891   000010                     	ds	1
   892   000011                     ___fladd@grs:
   893                           	callstack 0
   894   000011                     pad@buf:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x10
   898   000011                     	ds	1
   899   000012                     ?___flsub:
   900                           	callstack 0
   901   000012                     setMotorPWM@posDuty:
   902                           	callstack 0
   903   000012                     ___flsub@b:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0x11
   907   000012                     	ds	1
   908   000013                     setMotorPWM@negDuty:
   909                           	callstack 0
   910   000013                     ___flmul@aexp:
   911                           	callstack 0
   912   000013                     pad@p:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x12
   916   000013                     	ds	1
   917   000014                     stop@mL:
   918                           	callstack 0
   919   000014                     turnLeft@mL:
   920                           	callstack 0
   921   000014                     turnRight@mL:
   922                           	callstack 0
   923   000014                     fullSpeedAhead@mL:
   924                           	callstack 0
   925   000014                     fullSpeedBack@mL:
   926                           	callstack 0
   927   000014                     ___flmul@bexp:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x13
   931   000014                     	ds	1
   932   000015                     ??_pad:
   933   000015                     stop@mR:
   934                           	callstack 0
   935   000015                     turnLeft@mR:
   936                           	callstack 0
   937   000015                     turnRight@mR:
   938                           	callstack 0
   939   000015                     fullSpeedAhead@mR:
   940                           	callstack 0
   941   000015                     fullSpeedBack@mR:
   942                           	callstack 0
   943   000015                     ___flmul@prod:
   944                           	callstack 0
   945                           
   946                           ; 4 bytes @ 0x14
   947   000015                     	ds	1
   948   000016                     ??_fullSpeedAhead:
   949   000016                     ??_stop:
   950   000016                     ??_turnLeft:
   951   000016                     ??_turnRight:
   952   000016                     ??_fullSpeedBack:
   953   000016                     pad@i:
   954                           	callstack 0
   955   000016                     ___flsub@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x15
   959   000016                     	ds	1
   960   000017                     turnLeft@i:
   961                           	callstack 0
   962   000017                     turnRight@i:
   963                           	callstack 0
   964   000017                     fullSpeedAhead@power:
   965                           	callstack 0
   966   000017                     fullSpeedBack@power:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x16
   970   000017                     	ds	1
   971   000018                     dtoa@fp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x17
   975   000018                     	ds	1
   976   000019                     right90@mL:
   977                           	callstack 0
   978   000019                     left90@mL:
   979                           	callstack 0
   980   000019                     turn180@mL:
   981                           	callstack 0
   982   000019                     right135@mL:
   983                           	callstack 0
   984   000019                     left135@mL:
   985                           	callstack 0
   986   000019                     backHalf@mL:
   987                           	callstack 0
   988   000019                     backOneAndHalf@mL:
   989                           	callstack 0
   990   000019                     reverseStraight@mL:
   991                           	callstack 0
   992   000019                     ___flmul@temp:
   993                           	callstack 0
   994   000019                     dtoa@d:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x18
   998   000019                     	ds	1
   999   00001A                     right90@mR:
  1000                           	callstack 0
  1001   00001A                     left90@mR:
  1002                           	callstack 0
  1003   00001A                     turn180@mR:
  1004                           	callstack 0
  1005   00001A                     right135@mR:
  1006                           	callstack 0
  1007   00001A                     left135@mR:
  1008                           	callstack 0
  1009   00001A                     backHalf@mR:
  1010                           	callstack 0
  1011   00001A                     backOneAndHalf@mR:
  1012                           	callstack 0
  1013   00001A                     reverseStraight@mR:
  1014                           	callstack 0
  1015                           
  1016                           ; 1 bytes @ 0x19
  1017   00001A                     	ds	1
  1018   00001B                     ??_right90:
  1019   00001B                     ??_left90:
  1020   00001B                     ??_turn180:
  1021   00001B                     ??_right135:
  1022   00001B                     ??_left135:
  1023   00001B                     ??_backHalf:
  1024   00001B                     ??_backOneAndHalf:
  1025   00001B                     ?___fldiv:
  1026                           	callstack 0
  1027   00001B                     reverseStraight@time:
  1028                           	callstack 0
  1029   00001B                     _dtoa$3045:
  1030                           	callstack 0
  1031   00001B                     ___fldiv@b:
  1032                           	callstack 0
  1033                           
  1034                           ; 4 bytes @ 0x1A
  1035   00001B                     	ds	2
  1036   00001D                     moveRed@mL:
  1037                           	callstack 0
  1038   00001D                     moveGreen@mL:
  1039                           	callstack 0
  1040   00001D                     moveBlue@mL:
  1041                           	callstack 0
  1042   00001D                     moveYellow@mL:
  1043                           	callstack 0
  1044   00001D                     movePink@mL:
  1045                           	callstack 0
  1046   00001D                     moveOrange@mL:
  1047                           	callstack 0
  1048   00001D                     moveLightBlue@mL:
  1049                           	callstack 0
  1050   00001D                     moveWhite@mL:
  1051                           	callstack 0
  1052   00001D                     reverseTurn@mL:
  1053                           	callstack 0
  1054   00001D                     dtoa@p:
  1055                           	callstack 0
  1056   00001D                     reverseStraight@delayMs:
  1057                           	callstack 0
  1058                           
  1059                           ; 2 bytes @ 0x1C
  1060   00001D                     	ds	1
  1061   00001E                     moveRed@mR:
  1062                           	callstack 0
  1063   00001E                     moveGreen@mR:
  1064                           	callstack 0
  1065   00001E                     moveBlue@mR:
  1066                           	callstack 0
  1067   00001E                     moveYellow@mR:
  1068                           	callstack 0
  1069   00001E                     movePink@mR:
  1070                           	callstack 0
  1071   00001E                     moveOrange@mR:
  1072                           	callstack 0
  1073   00001E                     moveLightBlue@mR:
  1074                           	callstack 0
  1075   00001E                     moveWhite@mR:
  1076                           	callstack 0
  1077   00001E                     reverseTurn@mR:
  1078                           	callstack 0
  1079   00001E                     dtoa@w:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x1D
  1083   00001E                     	ds	1
  1084   00001F                     ??_moveWhite:
  1085   00001F                     reverseTurn@turnDirection:
  1086                           	callstack 0
  1087   00001F                     moveRed@path_length:
  1088                           	callstack 0
  1089   00001F                     moveGreen@path_length:
  1090                           	callstack 0
  1091   00001F                     moveBlue@path_length:
  1092                           	callstack 0
  1093   00001F                     moveYellow@path_length:
  1094                           	callstack 0
  1095   00001F                     movePink@path_length:
  1096                           	callstack 0
  1097   00001F                     moveOrange@path_length:
  1098                           	callstack 0
  1099   00001F                     moveLightBlue@path_length:
  1100                           	callstack 0
  1101   00001F                     ___fldiv@a:
  1102                           	callstack 0
  1103                           
  1104                           ; 4 bytes @ 0x1E
  1105   00001F                     	ds	1
  1106   000020                     dtoa@s:
  1107                           	callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x1F
  1110   000020                     	ds	1
  1111   000021                     ??_moveRed:
  1112   000021                     ??_moveGreen:
  1113   000021                     ??_moveBlue:
  1114   000021                     ??_moveLightBlue:
  1115   000021                     ??_moveYellow:
  1116   000021                     ??_moveOrange:
  1117   000021                     ??_movePink:
  1118   000021                     returnHome@mL:
  1119                           	callstack 0
  1120   000021                     dtoa@i:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x20
  1124   000021                     	ds	1
  1125   000022                     returnHome@mR:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x21
  1129   000022                     	ds	1
  1130   000023                     ??___fldiv:
  1131   000023                     vfpfcnvrt@fp:
  1132                           	callstack 0
  1133   000023                     returnHome@path:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x22
  1137   000023                     	ds	1
  1138   000024                     vfpfcnvrt@fmt:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x23
  1142   000024                     	ds	1
  1143   000025                     vfpfcnvrt@ap:
  1144                           	callstack 0
  1145   000025                     returnHome@pathLength:
  1146                           	callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_vfpfcnvrt:
  1151                           
  1152                           ; 1 bytes @ 0x25
  1153   000026                     	ds	1
  1154   000027                     ??_returnHome:
  1155   000027                     ___fldiv@rem:
  1156                           	callstack 0
  1157                           
  1158                           ; 4 bytes @ 0x26
  1159   000027                     	ds	1
  1160   000028                     vfpfcnvrt@convarg:
  1161                           	callstack 0
  1162                           
  1163                           ; 4 bytes @ 0x27
  1164   000028                     	ds	1
  1165   000029                     returnHome@time:
  1166                           	callstack 0
  1167                           
  1168                           ; 2 bytes @ 0x28
  1169   000029                     	ds	2
  1170   00002B                     returnHome@action:
  1171                           	callstack 0
  1172   00002B                     ___fldiv@sign:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x2A
  1176   00002B                     	ds	1
  1177   00002C                     vfpfcnvrt@done:
  1178                           	callstack 0
  1179   00002C                     returnHome@i:
  1180                           	callstack 0
  1181   00002C                     ___fldiv@new_exp:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2B
  1185   00002C                     	ds	1
  1186   00002D                     vfpfcnvrt@cp:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x2C
  1190   00002D                     	ds	1
  1191   00002E                     ?_vfprintf:
  1192                           	callstack 0
  1193   00002E                     vfprintf@fp:
  1194                           	callstack 0
  1195   00002E                     ___fldiv@grs:
  1196                           	callstack 0
  1197                           
  1198                           ; 4 bytes @ 0x2D
  1199   00002E                     	ds	1
  1200   00002F                     vfprintf@fmt:
  1201                           	callstack 0
  1202                           
  1203                           ; 1 bytes @ 0x2E
  1204   00002F                     	ds	1
  1205   000030                     vfprintf@ap:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2F
  1209   000030                     	ds	1
  1210   000031                     vfprintf@cfmt:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x30
  1214   000031                     	ds	1
  1215   000032                     ?_sprintf:
  1216                           	callstack 0
  1217   000032                     ___fldiv@bexp:
  1218                           	callstack 0
  1219   000032                     sprintf@s:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x31
  1223   000032                     	ds	1
  1224   000033                     ___fldiv@aexp:
  1225                           	callstack 0
  1226   000033                     sprintf@fmt:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x32
  1230   000033                     	ds	1
  1231   000034                     ?___fltol:
  1232                           	callstack 0
  1233   000034                     ___fltol@f1:
  1234                           	callstack 0
  1235                           
  1236                           ; 4 bytes @ 0x33
  1237   000034                     	ds	4
  1238   000038                     ??___fltol:
  1239   000038                     sprintf@ap:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x37
  1243   000038                     	ds	1
  1244   000039                     sprintf@f:
  1245                           	callstack 0
  1246                           
  1247                           ; 12 bytes @ 0x38
  1248   000039                     	ds	3
  1249   00003C                     ___fltol@sign1:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x3B
  1253   00003C                     	ds	1
  1254   00003D                     ___fltol@exp1:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x3C
  1258   00003D                     	ds	1
  1259   00003E                     ?_convert_rgb2hue:
  1260                           	callstack 0
  1261   00003E                     convert_rgb2hue@cMax:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x3D
  1265   00003E                     	ds	1
  1266   00003F                     convert_rgb2hue@cCurr:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x3E
  1270   00003F                     	ds	1
  1271   000040                     ??_convert_rgb2hue:
  1272                           
  1273                           ; 1 bytes @ 0x3F
  1274   000040                     	ds	2
  1275   000042                     ?_reading_hue:
  1276                           	callstack 0
  1277   000042                     reading_hue@cCurr:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x41
  1281   000042                     	ds	2
  1282   000044                     ??_reading_hue:
  1283                           
  1284                           ; 1 bytes @ 0x43
  1285   000044                     	ds	1
  1286   000045                     calibration_routine@cCal:
  1287                           	callstack 0
  1288   000045                     send2USART@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x44
  1292   000045                     	ds	1
  1293   000046                     ??_calibration_routine:
  1294   000046                     reading_hue@hue:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x45
  1298   000046                     	ds	1
  1299   000047                     decision@hue:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x46
  1303   000047                     	ds	2
  1304   000049                     decision@path_length:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x48
  1308   000049                     	ds	2
  1309   00004B                     decision@color:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x4A
  1313   00004B                     	ds	2
  1314   00004D                     ??_main:
  1315                           
  1316                           ; 1 bytes @ 0x4C
  1317   00004D                     	ds	2
  1318                           
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 29 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  white           2    0        unsigned int 
  1329 ;;  time            2   84[BANK0 ] int 
  1330 ;;  hue_char       20    0        unsigned char [20]
  1331 ;;  current         4   80[BANK0 ] float 
  1332 ;;  maximum         4   76[BANK0 ] float 
  1333 ;;  path_length     2   90[BANK0 ] unsigned int 
  1334 ;;  hue             2   88[BANK0 ] unsigned int 
  1335 ;;  PWMcycle        2    0        unsigned int 
  1336 ;;  clear_norm      2   86[BANK0 ] unsigned int 
  1337 ;;  clear           2    0        unsigned int 
  1338 ;;  green           2    0        unsigned int 
  1339 ;;  blue            2    0        unsigned int 
  1340 ;;  red             2    0        unsigned int 
  1341 ;;  battery_leve    2    0        unsigned int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;Total ram usage:       18 bytes
  1356 ;; Hardware stack levels required when called: 11
  1357 ;; This function calls:
  1358 ;;		_ADC_init
  1359 ;;		___fldiv
  1360 ;;		___flmul
  1361 ;;		___fltol
  1362 ;;		___xxtofl
  1363 ;;		_calibration_routine
  1364 ;;		_color_click_init
  1365 ;;		_color_read_Clear
  1366 ;;		_decision
  1367 ;;		_fullSpeedAhead
  1368 ;;		_get16bitTMR0val
  1369 ;;		_initDCmotorsPWM
  1370 ;;		_initUSART4
  1371 ;;		_logAction
  1372 ;;		_reading_hue
  1373 ;;		_returnHome
  1374 ;;		_send2USART
  1375 ;;		_stop
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382   0022C0                     __ptext0:
  1383                           	callstack 0
  1384   0022C0                     _main:
  1385                           	callstack 20
  1386   0022C0                     
  1387                           ;main.c: 31:     ADC_init();
  1388   0022C0  EC32  F022         	call	_ADC_init	;wreg free
  1389   0022C4                     
  1390                           ;main.c: 32:     color_click_init();
  1391   0022C4  EC8B  F020         	call	_color_click_init	;wreg free
  1392   0022C8                     
  1393                           ;main.c: 33:     initUSART4();
  1394   0022C8  EC14  F022         	call	_initUSART4	;wreg free
  1395   0022CC                     
  1396                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1397   0022CC  0E00               	movlw	0
  1398   0022CE  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1399   0022D0  0E63               	movlw	99
  1400   0022D2  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1401   0022D4  EC14  F01C         	call	_initDCmotorsPWM	;wreg free
  1402   0022D8                     
  1403                           ;main.c: 40:     motorL.power = 0;
  1404   0022D8  0E00               	movlw	0
  1405   0022DA  0100               	movlb	0	; () banked
  1406   0022DC  6FD4               	movwf	_motorL& (0+255),b
  1407   0022DE                     
  1408                           ; BSR set to: 0
  1409                           ;main.c: 41:     motorL.direction = 1;
  1410   0022DE  0E01               	movlw	1
  1411   0022E0  6FD5               	movwf	(_motorL+1)& (0+255),b
  1412   0022E2                     
  1413                           ; BSR set to: 0
  1414                           ;main.c: 42:     motorL.brakemode = 1;
  1415   0022E2  0E01               	movlw	1
  1416   0022E4  6FD6               	movwf	(_motorL+2)& (0+255),b
  1417   0022E6                     
  1418                           ; BSR set to: 0
  1419                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1420   0022E6  0E00               	movlw	0
  1421   0022E8  6FD8               	movwf	(_motorL+4)& (0+255),b
  1422   0022EA  0E63               	movlw	99
  1423   0022EC  6FD7               	movwf	(_motorL+3)& (0+255),b
  1424   0022EE                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1427   0022EE  0EAA               	movlw	170
  1428   0022F0  6FD9               	movwf	(_motorL+5)& (0+255),b
  1429   0022F2  0E0F               	movlw	15
  1430   0022F4  6FDA               	movwf	(_motorL+6)& (0+255),b
  1431   0022F6                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1434   0022F6  0EA6               	movlw	166
  1435   0022F8  6FDB               	movwf	(_motorL+7)& (0+255),b
  1436   0022FA  0E0F               	movlw	15
  1437   0022FC  6FDC               	movwf	(_motorL+8)& (0+255),b
  1438   0022FE                     
  1439                           ; BSR set to: 0
  1440                           ;main.c: 47:     motorR.power = 0;
  1441   0022FE  0E00               	movlw	0
  1442   002300  6FCB               	movwf	_motorR& (0+255),b
  1443   002302                     
  1444                           ; BSR set to: 0
  1445                           ;main.c: 48:     motorR.direction = 1;
  1446   002302  0E01               	movlw	1
  1447   002304  6FCC               	movwf	(_motorR+1)& (0+255),b
  1448   002306                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 49:     motorR.brakemode = 1;
  1451   002306  0E01               	movlw	1
  1452   002308  6FCD               	movwf	(_motorR+2)& (0+255),b
  1453   00230A                     
  1454                           ; BSR set to: 0
  1455                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1456   00230A  0E00               	movlw	0
  1457   00230C  6FCF               	movwf	(_motorR+4)& (0+255),b
  1458   00230E  0E63               	movlw	99
  1459   002310  6FCE               	movwf	(_motorR+3)& (0+255),b
  1460                           
  1461                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1462   002312  0E25               	movlw	37
  1463   002314  6FD0               	movwf	(_motorR+5)& (0+255),b
  1464   002316  0E0F               	movlw	15
  1465   002318  6FD1               	movwf	(_motorR+6)& (0+255),b
  1466                           
  1467                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1468   00231A  0E21               	movlw	33
  1469   00231C  6FD2               	movwf	(_motorR+7)& (0+255),b
  1470   00231E  0E0F               	movlw	15
  1471   002320  6FD3               	movwf	(_motorR+8)& (0+255),b
  1472   002322                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 55:     LATDbits.LATD7=0;
  1475   002322  9E7C               	bcf	124,7,c	;volatile
  1476   002324                     
  1477                           ; BSR set to: 0
  1478                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1479   002324  9E84               	bcf	132,7,c	;volatile
  1480   002326                     
  1481                           ; BSR set to: 0
  1482                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1483   002326  9087               	bcf	135,0,c	;volatile
  1484   002328                     
  1485                           ; BSR set to: 0
  1486                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1487   002328  907F               	bcf	127,0,c	;volatile
  1488   00232A                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1491   00232A  9E85               	bcf	133,7,c	;volatile
  1492   00232C                     
  1493                           ; BSR set to: 0
  1494                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1495   00232C  9E7D               	bcf	125,7,c	;volatile
  1496   00232E                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1499   00232E  9681               	bcf	129,3,c	;volatile
  1500   002330                     
  1501                           ; BSR set to: 0
  1502                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1503   002330  9679               	bcf	121,3,c	;volatile
  1504   002332                     
  1505                           ; BSR set to: 0
  1506                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1507   002332  8686               	bsf	134,3,c	;volatile
  1508   002334                     
  1509                           ; BSR set to: 0
  1510                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1511   002334  010E               	movlb	14	; () banked
  1512   002336  97B4               	bcf	180,3,b	;volatile
  1513   002338                     
  1514                           ; BSR set to: 14
  1515                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1516   002338  8486               	bsf	134,2,c	;volatile
  1517   00233A                     
  1518                           ; BSR set to: 14
  1519                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1520   00233A  947E               	bcf	126,2,c	;volatile
  1521   00233C                     
  1522                           ; BSR set to: 14
  1523                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1524   00233C  95B4               	bcf	180,2,b	;volatile
  1525   00233E                     
  1526                           ; BSR set to: 14
  1527                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1528   00233E  9287               	bcf	135,1,c	;volatile
  1529   002340                     
  1530                           ; BSR set to: 14
  1531                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1532   002340  927F               	bcf	127,1,c	;volatile
  1533   002342                     
  1534                           ; BSR set to: 14
  1535                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1536   002342  0E00               	movlw	0
  1537   002344  0100               	movlb	0	; () banked
  1538   002346  6FBB               	movwf	(main@path_length+1)& (0+255),b
  1539   002348  0E00               	movlw	0
  1540   00234A  6FBA               	movwf	main@path_length& (0+255),b
  1541   00234C                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1544   00234C  9688               	bcf	136,3,c	;volatile
  1545   00234E                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1548   00234E  8680               	bsf	128,3,c	;volatile
  1549   002350                     
  1550                           ; BSR set to: 0
  1551                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1552   002350  0E19               	movlw	25
  1553   002352  6E4E               	movwf	(??_main+1)^0,c
  1554   002354  0E5A               	movlw	90
  1555   002356  6E4D               	movwf	??_main^0,c
  1556   002358  0EB2               	movlw	178
  1557   00235A                     u5387:
  1558   00235A  2EE8               	decfsz	wreg,f,c
  1559   00235C  D7FE               	bra	u5387
  1560   00235E  2E4D               	decfsz	??_main^0,f,c
  1561   002360  D7FC               	bra	u5387
  1562   002362  2E4E               	decfsz	(??_main+1)^0,f,c
  1563   002364  D7FA               	bra	u5387
  1564   002366                     
  1565                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1566   002366  9680               	bcf	128,3,c	;volatile
  1567   002368                     
  1568                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1569   002368  0EE5               	movlw	low _colorCalibration
  1570   00236A  6E45               	movwf	calibration_routine@cCal^0,c
  1571   00236C  ECD4  F013         	call	_calibration_routine	;wreg free
  1572   002370                     
  1573                           ;main.c: 104:     float maximum = colorCalibration.clear;
  1574   002370  C0EB  F002         	movff	_colorCalibration+6,___xxtofl@val
  1575   002374  C0EC  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1576   002378  6A04               	clrf	(___xxtofl@val+2)^0,c
  1577   00237A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1578   00237C  0E00               	movlw	0
  1579   00237E  ECBD  F014         	call	___xxtofl
  1580   002382  C002  F0AC         	movff	?___xxtofl,main@maximum
  1581   002386  C003  F0AD         	movff	?___xxtofl+1,main@maximum+1
  1582   00238A  C004  F0AE         	movff	?___xxtofl+2,main@maximum+2
  1583   00238E  C005  F0AF         	movff	?___xxtofl+3,main@maximum+3
  1584   002392                     l5960:
  1585                           
  1586                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1587   002392  807F               	bsf	127,0,c	;volatile
  1588   002394                     
  1589                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1590   002394  8E7D               	bsf	125,7,c	;volatile
  1591   002396                     
  1592                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1593   002396  8679               	bsf	121,3,c	;volatile
  1594   002398                     
  1595                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1596   002398  0ED4               	movlw	low _motorL
  1597   00239A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1598   00239C  0ECB               	movlw	low _motorR
  1599   00239E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1600   0023A0  EC21  F01D         	call	_fullSpeedAhead	;wreg free
  1601   0023A4                     
  1602                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1603   0023A4  8ED5               	bsf	213,7,c	;volatile
  1604   0023A6                     
  1605                           ;main.c: 118:         (colorCurrent.clear) = color_read_Clear();
  1606   0023A6  EC58  F01E         	call	_color_read_Clear	;wreg free
  1607   0023AA  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1608   0023AE  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1609   0023B2                     
  1610                           ;main.c: 119:         current = colorCurrent.clear;
  1611   0023B2  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1612   0023B6  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1613   0023BA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1614   0023BC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1615   0023BE  0E00               	movlw	0
  1616   0023C0  ECBD  F014         	call	___xxtofl
  1617   0023C4  C002  F0B0         	movff	?___xxtofl,main@current
  1618   0023C8  C003  F0B1         	movff	?___xxtofl+1,main@current+1
  1619   0023CC  C004  F0B2         	movff	?___xxtofl+2,main@current+2
  1620   0023D0  C005  F0B3         	movff	?___xxtofl+3,main@current+3
  1621   0023D4                     
  1622                           ;main.c: 121:         clear_norm = (current)*100/(maximum);
  1623   0023D4  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1624   0023D8  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1625   0023DC  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1626   0023E0  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1627   0023E4  0E00               	movlw	0
  1628   0023E6  6E06               	movwf	___flmul@a^0,c
  1629   0023E8  0E00               	movlw	0
  1630   0023EA  6E07               	movwf	(___flmul@a+1)^0,c
  1631   0023EC  0EC8               	movlw	200
  1632   0023EE  6E08               	movwf	(___flmul@a+2)^0,c
  1633   0023F0  0E42               	movlw	66
  1634   0023F2  6E09               	movwf	(___flmul@a+3)^0,c
  1635   0023F4  C0B0  F002         	movff	main@current,___flmul@b
  1636   0023F8  C0B1  F003         	movff	main@current+1,___flmul@b+1
  1637   0023FC  C0B2  F004         	movff	main@current+2,___flmul@b+2
  1638   002400  C0B3  F005         	movff	main@current+3,___flmul@b+3
  1639   002404  EC7E  F00D         	call	___flmul	;wreg free
  1640   002408  C002  F01B         	movff	?___flmul,___fldiv@b
  1641   00240C  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1642   002410  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1643   002414  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1644   002418  EC93  F00F         	call	___fldiv	;wreg free
  1645   00241C  C01B  F034         	movff	?___fldiv,___fltol@f1
  1646   002420  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1647   002424  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1648   002428  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1649   00242C  ECC1  F017         	call	___fltol	;wreg free
  1650   002430  C034  F0B6         	movff	?___fltol,main@clear_norm
  1651   002434  C035  F0B7         	movff	?___fltol+1,main@clear_norm+1
  1652   002438                     
  1653                           ;main.c: 124:         if (clear_norm > 8){
  1654   002438  0100               	movlb	0	; () banked
  1655   00243A  51B7               	movf	(main@clear_norm+1)& (0+255),w,b
  1656   00243C  E109               	bnz	u5320
  1657   00243E  0E09               	movlw	9
  1658   002440  5DB6               	subwf	main@clear_norm& (0+255),w,b
  1659   002442  A0D8               	btfss	status,0,c
  1660   002444  EF26  F012         	goto	u5321
  1661   002448  EF28  F012         	goto	u5320
  1662   00244C                     u5321:
  1663   00244C  EFC9  F011         	goto	l5960
  1664   002450                     u5320:
  1665   002450                     
  1666                           ; BSR set to: 0
  1667                           ;main.c: 126:             stop(&motorL,&motorR);
  1668   002450  0ED4               	movlw	low _motorL
  1669   002452  6E14               	movwf	stop@mL^0,c
  1670   002454  0ECB               	movlw	low _motorR
  1671   002456  6E15               	movwf	stop@mR^0,c
  1672   002458  EC5C  F01C         	call	_stop	;wreg free
  1673   00245C                     
  1674                           ;main.c: 128:             int time = get16bitTMR0val();
  1675   00245C  ECF3  F021         	call	_get16bitTMR0val	;wreg free
  1676   002460  C002  F0B4         	movff	?_get16bitTMR0val,main@time
  1677   002464  C003  F0B5         	movff	?_get16bitTMR0val+1,main@time+1
  1678   002468                     
  1679                           ;main.c: 129:             T0CON0bits.T0EN=0;
  1680   002468  9ED5               	bcf	213,7,c	;volatile
  1681   00246A                     
  1682                           ;main.c: 130:             logAction('F',time, path_length);
  1683   00246A  C0B4  F008         	movff	main@time,logAction@time
  1684   00246E  C0B5  F009         	movff	main@time+1,logAction@time+1
  1685   002472  C0BA  F00A         	movff	main@path_length,logAction@pathLength
  1686   002476  C0BB  F00B         	movff	main@path_length+1,logAction@pathLength+1
  1687   00247A  0E46               	movlw	70
  1688   00247C  ECD3  F01D         	call	_logAction
  1689   002480                     
  1690                           ;main.c: 131:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1691   002480  0E11               	movlw	17
  1692   002482  6E4E               	movwf	(??_main+1)^0,c
  1693   002484  0E3C               	movlw	60
  1694   002486  6E4D               	movwf	??_main^0,c
  1695   002488  0ECB               	movlw	203
  1696   00248A                     u5397:
  1697   00248A  2EE8               	decfsz	wreg,f,c
  1698   00248C  D7FE               	bra	u5397
  1699   00248E  2E4D               	decfsz	??_main^0,f,c
  1700   002490  D7FC               	bra	u5397
  1701   002492  2E4E               	decfsz	(??_main+1)^0,f,c
  1702   002494  D7FA               	bra	u5397
  1703   002496  0000               	nop	
  1704   002498                     
  1705                           ;main.c: 134:             fullSpeedAhead(&motorL,&motorR);
  1706   002498  0ED4               	movlw	low _motorL
  1707   00249A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1708   00249C  0ECB               	movlw	low _motorR
  1709   00249E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1710   0024A0  EC21  F01D         	call	_fullSpeedAhead	;wreg free
  1711   0024A4                     
  1712                           ;main.c: 135:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1713   0024A4  0E09               	movlw	9
  1714   0024A6  6E4E               	movwf	(??_main+1)^0,c
  1715   0024A8  0E1E               	movlw	30
  1716   0024AA  6E4D               	movwf	??_main^0,c
  1717   0024AC  0EE4               	movlw	228
  1718   0024AE                     u5407:
  1719   0024AE  2EE8               	decfsz	wreg,f,c
  1720   0024B0  D7FE               	bra	u5407
  1721   0024B2  2E4D               	decfsz	??_main^0,f,c
  1722   0024B4  D7FC               	bra	u5407
  1723   0024B6  2E4E               	decfsz	(??_main+1)^0,f,c
  1724   0024B8  D7FA               	bra	u5407
  1725   0024BA  D000               	nop2	
  1726   0024BC                     
  1727                           ;main.c: 136:             stop(&motorL,&motorR);
  1728   0024BC  0ED4               	movlw	low _motorL
  1729   0024BE  6E14               	movwf	stop@mL^0,c
  1730   0024C0  0ECB               	movlw	low _motorR
  1731   0024C2  6E15               	movwf	stop@mR^0,c
  1732   0024C4  EC5C  F01C         	call	_stop	;wreg free
  1733   0024C8                     
  1734                           ;main.c: 137:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1735   0024C8  0E19               	movlw	25
  1736   0024CA  6E4E               	movwf	(??_main+1)^0,c
  1737   0024CC  0E5A               	movlw	90
  1738   0024CE  6E4D               	movwf	??_main^0,c
  1739   0024D0  0EB2               	movlw	178
  1740   0024D2                     u5417:
  1741   0024D2  2EE8               	decfsz	wreg,f,c
  1742   0024D4  D7FE               	bra	u5417
  1743   0024D6  2E4D               	decfsz	??_main^0,f,c
  1744   0024D8  D7FC               	bra	u5417
  1745   0024DA  2E4E               	decfsz	(??_main+1)^0,f,c
  1746   0024DC  D7FA               	bra	u5417
  1747   0024DE                     
  1748                           ;main.c: 139:             if (clear_norm > 50 && !(hue>=302 && hue<=346) || LATGbits.LAT
      +                          G1 == 1){
  1749   0024DE  0100               	movlb	0	; () banked
  1750   0024E0  51B7               	movf	(main@clear_norm+1)& (0+255),w,b
  1751   0024E2  E109               	bnz	u5330
  1752   0024E4  0E33               	movlw	51
  1753   0024E6  5DB6               	subwf	main@clear_norm& (0+255),w,b
  1754   0024E8  A0D8               	btfss	status,0,c
  1755   0024EA  EF79  F012         	goto	u5331
  1756   0024EE  EF7B  F012         	goto	u5330
  1757   0024F2                     u5331:
  1758   0024F2  EF91  F012         	goto	l315
  1759   0024F6                     u5330:
  1760   0024F6                     
  1761                           ; BSR set to: 0
  1762   0024F6  0E2E               	movlw	46
  1763   0024F8  5DB8               	subwf	main@hue& (0+255),w,b
  1764   0024FA  0E01               	movlw	1
  1765   0024FC  59B9               	subwfb	(main@hue+1)& (0+255),w,b
  1766   0024FE  A0D8               	btfss	status,0,c
  1767   002500  EF84  F012         	goto	u5341
  1768   002504  EF86  F012         	goto	u5340
  1769   002508                     u5341:
  1770   002508  EF98  F012         	goto	l6002
  1771   00250C                     u5340:
  1772   00250C                     
  1773                           ; BSR set to: 0
  1774   00250C  0E5B               	movlw	91
  1775   00250E  5DB8               	subwf	main@hue& (0+255),w,b
  1776   002510  0E01               	movlw	1
  1777   002512  59B9               	subwfb	(main@hue+1)& (0+255),w,b
  1778   002514  B0D8               	btfsc	status,0,c
  1779   002516  EF8F  F012         	goto	u5351
  1780   00251A  EF91  F012         	goto	u5350
  1781   00251E                     u5351:
  1782   00251E  EF98  F012         	goto	l6002
  1783   002522                     u5350:
  1784   002522                     l315:
  1785                           
  1786                           ; BSR set to: 0
  1787   002522  A27F               	btfss	127,1,c	;volatile
  1788   002524  EF96  F012         	goto	u5361
  1789   002528  EF98  F012         	goto	u5360
  1790   00252C                     u5361:
  1791   00252C  EFAD  F012         	goto	l6010
  1792   002530                     u5360:
  1793   002530                     l6002:
  1794   002530                     
  1795                           ; BSR set to: 0
  1796                           ;main.c: 142:                 send2USART(white);
  1797   002530  0E00               	movlw	0
  1798   002532  6E46               	movwf	(send2USART@hue+1)^0,c
  1799   002534  0E08               	movlw	8
  1800   002536  6E45               	movwf	send2USART@hue^0,c
  1801   002538  EC23  F022         	call	_send2USART	;wreg free
  1802   00253C                     
  1803                           ;main.c: 143:                 returnHome(&motorL, &motorR, &path, path_length);
  1804   00253C  0ED4               	movlw	low _motorL
  1805   00253E  6E21               	movwf	returnHome@mL^0,c
  1806   002540  0ECB               	movlw	low _motorR
  1807   002542  6E22               	movwf	returnHome@mR^0,c
  1808   002544  0E00               	movlw	low _path
  1809   002546  6E23               	movwf	returnHome@path^0,c
  1810   002548  0E02               	movlw	high _path
  1811   00254A  6E24               	movwf	(returnHome@path+1)^0,c
  1812   00254C  C0BA  F025         	movff	main@path_length,returnHome@pathLength
  1813   002550  C0BB  F026         	movff	main@path_length+1,returnHome@pathLength+1
  1814   002554  EC10  F01A         	call	_returnHome	;wreg free
  1815   002558                     
  1816                           ;main.c: 144:                 LATGbits.LATG1 = 0;
  1817   002558  927F               	bcf	127,1,c	;volatile
  1818   00255A                     l6010:
  1819                           
  1820                           ;main.c: 147:             hue = reading_hue(&colorCurrent);
  1821   00255A  0EDD               	movlw	low _colorCurrent
  1822   00255C  6E42               	movwf	reading_hue@cCurr^0,c
  1823   00255E  ECC6  F018         	call	_reading_hue	;wreg free
  1824   002562  C042  F0B8         	movff	?_reading_hue,main@hue
  1825   002566  C043  F0B9         	movff	?_reading_hue+1,main@hue+1
  1826   00256A                     
  1827                           ;main.c: 148:             decision(hue, path_length);
  1828   00256A  C0B8  F047         	movff	main@hue,decision@hue
  1829   00256E  C0B9  F048         	movff	main@hue+1,decision@hue+1
  1830   002572  C0BA  F049         	movff	main@path_length,decision@path_length
  1831   002576  C0BB  F04A         	movff	main@path_length+1,decision@path_length+1
  1832   00257A  ECC3  F012         	call	_decision	;wreg free
  1833   00257E  EFC9  F011         	goto	l5960
  1834   002582  EF1D  F000         	goto	start
  1835   002586                     __end_of_main:
  1836                           	callstack 0
  1837                           
  1838 ;; *************** function _returnHome *****************
  1839 ;; Defined at:
  1840 ;;		line 383 in file "dc_motor.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1843 ;;		 -> motorL(9), 
  1844 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1845 ;;		 -> motorR(9), 
  1846 ;;  path            2   34[COMRAM] PTR PTR struct PathStep
  1847 ;;		 -> path(250), 
  1848 ;;  pathLength      2   36[COMRAM] int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  time            2   40[COMRAM] unsigned int 
  1851 ;;  action          1   42[COMRAM] unsigned char 
  1852 ;;  i               2   43[COMRAM] int 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1862 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1863 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1865 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1866 ;;Total ram usage:       13 bytes
  1867 ;; Hardware stack levels used: 1
  1868 ;; Hardware stack levels required when called: 6
  1869 ;; This function calls:
  1870 ;;		_moveWhite
  1871 ;;		_reverseStraight
  1872 ;;		_reverseTurn
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text1
  1879   003420                     __ptext1:
  1880                           	callstack 0
  1881   003420                     _returnHome:
  1882                           	callstack 24
  1883   003420                     
  1884                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     LATGbits.LATG0 = 0;
  1885   003420  907F               	bcf	127,0,c	;volatile
  1886                           
  1887                           ;dc_motor.c: 387:     LATEbits.LATE7 = 0;
  1888   003422  9E7D               	bcf	125,7,c	;volatile
  1889                           
  1890                           ;dc_motor.c: 388:     LATAbits.LATA3 = 0;
  1891   003424  9679               	bcf	121,3,c	;volatile
  1892   003426                     
  1893                           ;dc_motor.c: 390:     moveWhite(&motorL,&motorR);
  1894   003426  0ED4               	movlw	low _motorL
  1895   003428  6E1D               	movwf	moveWhite@mL^0,c
  1896   00342A  0ECB               	movlw	low _motorR
  1897   00342C  6E1E               	movwf	moveWhite@mR^0,c
  1898   00342E  ECD9  F020         	call	_moveWhite	;wreg free
  1899   003432                     
  1900                           ;dc_motor.c: 392:     for (int i = pathLength; i >= 0; i--) {
  1901   003432  C025  F02C         	movff	returnHome@pathLength,returnHome@i
  1902   003436  C026  F02D         	movff	returnHome@pathLength+1,returnHome@i+1
  1903   00343A                     l5868:
  1904   00343A  BE2D               	btfsc	(returnHome@i+1)^0,7,c
  1905   00343C  EF24  F01A         	goto	u5300
  1906   003440  EF22  F01A         	goto	u5301
  1907   003444                     u5301:
  1908   003444  EF26  F01A         	goto	l5872
  1909   003448                     u5300:
  1910   003448  EF6E  F01A         	goto	l512
  1911   00344C                     l5872:
  1912                           
  1913                           ;dc_motor.c: 393:         char action = path[i]->action;
  1914   00344C  90D8               	bcf	status,0,c
  1915   00344E  342C               	rlcf	returnHome@i^0,w,c
  1916   003450  6ED9               	movwf	fsr2l,c
  1917   003452  342D               	rlcf	(returnHome@i+1)^0,w,c
  1918   003454  6EDA               	movwf	fsr2h,c
  1919   003456  5023               	movf	returnHome@path^0,w,c
  1920   003458  26D9               	addwf	fsr2l,f,c
  1921   00345A  5024               	movf	(returnHome@path+1)^0,w,c
  1922   00345C  22DA               	addwfc	fsr2h,f,c
  1923   00345E  CFDE F027          	movff	postinc2,??_returnHome
  1924   003462  CFDD F028          	movff	postdec2,??_returnHome+1
  1925   003466  C027  FFD9         	movff	??_returnHome,fsr2l
  1926   00346A  C028  FFDA         	movff	??_returnHome+1,fsr2h
  1927   00346E  50DF               	movf	indf2,w,c
  1928   003470  6E2B               	movwf	returnHome@action^0,c
  1929   003472                     
  1930                           ;dc_motor.c: 394:         unsigned int time = path[i]->time;
  1931   003472  90D8               	bcf	status,0,c
  1932   003474  342C               	rlcf	returnHome@i^0,w,c
  1933   003476  6ED9               	movwf	fsr2l,c
  1934   003478  342D               	rlcf	(returnHome@i+1)^0,w,c
  1935   00347A  6EDA               	movwf	fsr2h,c
  1936   00347C  5023               	movf	returnHome@path^0,w,c
  1937   00347E  26D9               	addwf	fsr2l,f,c
  1938   003480  5024               	movf	(returnHome@path+1)^0,w,c
  1939   003482  22DA               	addwfc	fsr2h,f,c
  1940   003484  EE10 F001          	lfsr	1,1
  1941   003488  50DE               	movf	postinc2,w,c
  1942   00348A  26E1               	addwf	fsr1l,f,c
  1943   00348C  50DD               	movf	postdec2,w,c
  1944   00348E  22E2               	addwfc	fsr1h,f,c
  1945   003490  CFE6 F029          	movff	postinc1,returnHome@time
  1946   003494  CFE5 F02A          	movff	postdec1,returnHome@time+1
  1947   003498                     
  1948                           ;dc_motor.c: 396:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1949   003498  0E46               	movlw	70
  1950   00349A  182B               	xorwf	returnHome@action^0,w,c
  1951   00349C  A4D8               	btfss	status,2,c
  1952   00349E  EF53  F01A         	goto	u5311
  1953   0034A2  EF55  F01A         	goto	u5310
  1954   0034A6                     u5311:
  1955   0034A6  EF61  F01A         	goto	l5880
  1956   0034AA                     u5310:
  1957   0034AA  C021  F019         	movff	returnHome@mL,reverseStraight@mL
  1958   0034AE  C022  F01A         	movff	returnHome@mR,reverseStraight@mR
  1959   0034B2  C029  F01B         	movff	returnHome@time,reverseStraight@time
  1960   0034B6  C02A  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  1961   0034BA  EC3B  F019         	call	_reverseStraight	;wreg free
  1962   0034BE  EF69  F01A         	goto	l5882
  1963   0034C2                     l5880:
  1964   0034C2  C021  F01D         	movff	returnHome@mL,reverseTurn@mL
  1965   0034C6  C022  F01E         	movff	returnHome@mR,reverseTurn@mR
  1966   0034CA  C02B  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  1967   0034CE  ECC7  F01F         	call	_reverseTurn	;wreg free
  1968   0034D2                     l5882:
  1969                           
  1970                           ;dc_motor.c: 400:     }
  1971   0034D2  062C               	decf	returnHome@i^0,f,c
  1972   0034D4  A0D8               	btfss	status,0,c
  1973   0034D6  062D               	decf	(returnHome@i+1)^0,f,c
  1974   0034D8  EF1D  F01A         	goto	l5868
  1975   0034DC                     l512:
  1976   0034DC  0003               	sleep		;# 
  1977   0034DE  0012               	return		;funcret
  1978   0034E0                     __end_of_returnHome:
  1979                           	callstack 0
  1980                           
  1981 ;; *************** function _reverseTurn *****************
  1982 ;; Defined at:
  1983 ;;		line 345 in file "dc_motor.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  1986 ;;		 -> motorL(9), 
  1987 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  1988 ;;		 -> motorR(9), 
  1989 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2001 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;Total ram usage:        3 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; Hardware stack levels required when called: 5
  2008 ;; This function calls:
  2009 ;;		_left135
  2010 ;;		_right135
  2011 ;;		_turn180
  2012 ;;		_turnLeft
  2013 ;;		_turnRight
  2014 ;; This function is called by:
  2015 ;;		_returnHome
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text2
  2020   003F8E                     __ptext2:
  2021                           	callstack 0
  2022   003F8E                     _reverseTurn:
  2023                           	callstack 24
  2024   003F8E                     
  2025                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  2026   003F8E  0E52               	movlw	82
  2027   003F90  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2028   003F92  A4D8               	btfss	status,2,c
  2029   003F94  EFCE  F01F         	goto	u5031
  2030   003F98  EFD0  F01F         	goto	u5030
  2031   003F9C                     u5031:
  2032   003F9C  EFD8  F01F         	goto	l5670
  2033   003FA0                     u5030:
  2034   003FA0                     
  2035                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  2036   003FA0  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  2037   003FA4  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  2038   003FA8  ECE2  F01C         	call	_turnLeft	;wreg free
  2039                           
  2040                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  2041   003FAC  EFE9  F01F         	goto	l496
  2042   003FB0                     l5670:
  2043   003FB0  0E4C               	movlw	76
  2044   003FB2  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2045   003FB4  A4D8               	btfss	status,2,c
  2046   003FB6  EFDF  F01F         	goto	u5041
  2047   003FBA  EFE1  F01F         	goto	u5040
  2048   003FBE                     u5041:
  2049   003FBE  EFE9  F01F         	goto	l495
  2050   003FC2                     u5040:
  2051   003FC2                     
  2052                           ;dc_motor.c: 349:         turnRight(mL, mR);
  2053   003FC2  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  2054   003FC6  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  2055   003FCA  ECA3  F01C         	call	_turnRight	;wreg free
  2056                           
  2057                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  2058   003FCE  EFE9  F01F         	goto	l496
  2059   003FD2                     l495:
  2060   003FD2                     l496:
  2061   003FD2  0012               	return		;funcret
  2062   003FD4                     __end_of_reverseTurn:
  2063                           	callstack 0
  2064                           
  2065 ;; *************** function _reverseStraight *****************
  2066 ;; Defined at:
  2067 ;;		line 368 in file "dc_motor.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2070 ;;		 -> motorL(9), 
  2071 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2072 ;;		 -> motorR(9), 
  2073 ;;  time            2   26[COMRAM] int 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  delayMs         2   28[COMRAM] int 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  1    wreg      void 
  2078 ;; Registers used:
  2079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2085 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;Total ram usage:        6 bytes
  2090 ;; Hardware stack levels used: 1
  2091 ;; Hardware stack levels required when called: 4
  2092 ;; This function calls:
  2093 ;;		_customDelayMs
  2094 ;;		_fullSpeedAhead
  2095 ;;		_stop
  2096 ;; This function is called by:
  2097 ;;		_returnHome
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text3
  2102   003276                     __ptext3:
  2103                           	callstack 0
  2104   003276                     _reverseStraight:
  2105                           	callstack 25
  2106   003276                     
  2107                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2108   003276  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2109   003278  EF49  F019         	goto	u5050
  2110   00327C  0E7C               	movlw	124
  2111   00327E  5C1B               	subwf	reverseStraight@time^0,w,c
  2112   003280  0E15               	movlw	21
  2113   003282  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2114   003284  B0D8               	btfsc	status,0,c
  2115   003286  EF47  F019         	goto	u5051
  2116   00328A  EF49  F019         	goto	u5050
  2117   00328E                     u5051:
  2118   00328E  EF5B  F019         	goto	l5686
  2119   003292                     u5050:
  2120   003292  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2121   003294  EF55  F019         	goto	u5061
  2122   003298  0ED5               	movlw	213
  2123   00329A  5C1B               	subwf	reverseStraight@time^0,w,c
  2124   00329C  0E17               	movlw	23
  2125   00329E  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2126   0032A0  A0D8               	btfss	status,0,c
  2127   0032A2  EF55  F019         	goto	u5061
  2128   0032A6  EF57  F019         	goto	u5060
  2129   0032AA                     u5061:
  2130   0032AA  EF5B  F019         	goto	l5686
  2131   0032AE                     u5060:
  2132   0032AE  0E0B               	movlw	11
  2133   0032B0  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2134   0032B2  0EB8               	movlw	184
  2135   0032B4  6E1D               	movwf	reverseStraight@delayMs^0,c
  2136   0032B6                     l5686:
  2137                           
  2138                           ;dc_motor.c: 374:     if (time<3700 && time>4100){delayMs = 2000; }
  2139   0032B6  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2140   0032B8  EF69  F019         	goto	u5070
  2141   0032BC  0E74               	movlw	116
  2142   0032BE  5C1B               	subwf	reverseStraight@time^0,w,c
  2143   0032C0  0E0E               	movlw	14
  2144   0032C2  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2145   0032C4  B0D8               	btfsc	status,0,c
  2146   0032C6  EF67  F019         	goto	u5071
  2147   0032CA  EF69  F019         	goto	u5070
  2148   0032CE                     u5071:
  2149   0032CE  EF7B  F019         	goto	l5692
  2150   0032D2                     u5070:
  2151   0032D2  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2152   0032D4  EF75  F019         	goto	u5081
  2153   0032D8  0E05               	movlw	5
  2154   0032DA  5C1B               	subwf	reverseStraight@time^0,w,c
  2155   0032DC  0E10               	movlw	16
  2156   0032DE  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2157   0032E0  A0D8               	btfss	status,0,c
  2158   0032E2  EF75  F019         	goto	u5081
  2159   0032E6  EF77  F019         	goto	u5080
  2160   0032EA                     u5081:
  2161   0032EA  EF7B  F019         	goto	l5692
  2162   0032EE                     u5080:
  2163   0032EE  0E07               	movlw	7
  2164   0032F0  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2165   0032F2  0ED0               	movlw	208
  2166   0032F4  6E1D               	movwf	reverseStraight@delayMs^0,c
  2167   0032F6                     l5692:
  2168                           
  2169                           ;dc_motor.c: 375:     if (time<1700 && time>2100){delayMs = 1000;}
  2170   0032F6  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2171   0032F8  EF89  F019         	goto	u5090
  2172   0032FC  0EA4               	movlw	164
  2173   0032FE  5C1B               	subwf	reverseStraight@time^0,w,c
  2174   003300  0E06               	movlw	6
  2175   003302  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2176   003304  B0D8               	btfsc	status,0,c
  2177   003306  EF87  F019         	goto	u5091
  2178   00330A  EF89  F019         	goto	u5090
  2179   00330E                     u5091:
  2180   00330E  EF9B  F019         	goto	l5698
  2181   003312                     u5090:
  2182   003312  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2183   003314  EF95  F019         	goto	u5101
  2184   003318  0E35               	movlw	53
  2185   00331A  5C1B               	subwf	reverseStraight@time^0,w,c
  2186   00331C  0E08               	movlw	8
  2187   00331E  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2188   003320  A0D8               	btfss	status,0,c
  2189   003322  EF95  F019         	goto	u5101
  2190   003326  EF97  F019         	goto	u5100
  2191   00332A                     u5101:
  2192   00332A  EF9B  F019         	goto	l5698
  2193   00332E                     u5100:
  2194   00332E  0E03               	movlw	3
  2195   003330  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2196   003332  0EE8               	movlw	232
  2197   003334  6E1D               	movwf	reverseStraight@delayMs^0,c
  2198   003336                     l5698:
  2199                           
  2200                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2201   003336  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2202   00333A  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2203   00333E  EC21  F01D         	call	_fullSpeedAhead	;wreg free
  2204   003342                     
  2205                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2206   003342  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2207   003346  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2208   00334A  EC6F  F020         	call	_customDelayMs	;wreg free
  2209   00334E                     
  2210                           ;dc_motor.c: 379:     stop(mL, mR);
  2211   00334E  C019  F014         	movff	reverseStraight@mL,stop@mL
  2212   003352  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2213   003356  EC5C  F01C         	call	_stop	;wreg free
  2214   00335A  0012               	return		;funcret
  2215   00335C                     __end_of_reverseStraight:
  2216                           	callstack 0
  2217                           
  2218 ;; *************** function _fullSpeedAhead *****************
  2219 ;; Defined at:
  2220 ;;		line 144 in file "dc_motor.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2223 ;;		 -> motorL(9), 
  2224 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2225 ;;		 -> motorR(9), 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  power           2   22[COMRAM] int 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;Total ram usage:        5 bytes
  2242 ;; Hardware stack levels used: 1
  2243 ;; Hardware stack levels required when called: 3
  2244 ;; This function calls:
  2245 ;;		_setMotorPWM
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;;		_reverseStraight
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text4
  2253   003A42                     __ptext4:
  2254                           	callstack 0
  2255   003A42                     _fullSpeedAhead:
  2256                           	callstack 25
  2257   003A42                     
  2258                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2259   003A42  5014               	movf	fullSpeedAhead@mL^0,w,c
  2260   003A44  6ED9               	movwf	fsr2l,c
  2261   003A46  6ADA               	clrf	fsr2h,c
  2262   003A48  0E01               	movlw	1
  2263   003A4A  26D9               	addwf	fsr2l,f,c
  2264   003A4C  0E01               	movlw	1
  2265   003A4E  6EDF               	movwf	indf2,c
  2266                           
  2267                           ;dc_motor.c: 148:     mR->direction = 1;
  2268   003A50  5015               	movf	fullSpeedAhead@mR^0,w,c
  2269   003A52  6ED9               	movwf	fsr2l,c
  2270   003A54  6ADA               	clrf	fsr2h,c
  2271   003A56  0E01               	movlw	1
  2272   003A58  26D9               	addwf	fsr2l,f,c
  2273   003A5A  0E01               	movlw	1
  2274   003A5C  6EDF               	movwf	indf2,c
  2275   003A5E                     
  2276                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2277   003A5E  0E00               	movlw	0
  2278   003A60  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2279   003A62  0E00               	movlw	0
  2280   003A64  6E17               	movwf	fullSpeedAhead@power^0,c
  2281   003A66                     l5512:
  2282                           
  2283                           ;dc_motor.c: 151:         mL->power = power;
  2284   003A66  5014               	movf	fullSpeedAhead@mL^0,w,c
  2285   003A68  6ED9               	movwf	fsr2l,c
  2286   003A6A  6ADA               	clrf	fsr2h,c
  2287   003A6C  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2288                           
  2289                           ;dc_motor.c: 152:         mR->power = power;
  2290   003A70  5015               	movf	fullSpeedAhead@mR^0,w,c
  2291   003A72  6ED9               	movwf	fsr2l,c
  2292   003A74  6ADA               	clrf	fsr2h,c
  2293   003A76  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2294   003A7A                     
  2295                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2296   003A7A  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2297   003A7E  EC17  F017         	call	_setMotorPWM	;wreg free
  2298   003A82                     
  2299                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2300   003A82  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2301   003A86  EC17  F017         	call	_setMotorPWM	;wreg free
  2302   003A8A                     
  2303                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2304   003A8A  0E0B               	movlw	11
  2305   003A8C  6E16               	movwf	??_fullSpeedAhead^0,c
  2306   003A8E  0E62               	movlw	98
  2307   003A90                     u5427:
  2308   003A90  2EE8               	decfsz	wreg,f,c
  2309   003A92  D7FE               	bra	u5427
  2310   003A94  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2311   003A96  D7FC               	bra	u5427
  2312   003A98  D000               	nop2	
  2313   003A9A                     
  2314                           ;dc_motor.c: 160:     }
  2315   003A9A  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2316   003A9C  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2317   003A9E  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2318   003AA0  EF5B  F01D         	goto	u5011
  2319   003AA4  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2320   003AA6  E109               	bnz	u5010
  2321   003AA8  0E33               	movlw	51
  2322   003AAA  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2323   003AAC  A0D8               	btfss	status,0,c
  2324   003AAE  EF5B  F01D         	goto	u5011
  2325   003AB2  EF5D  F01D         	goto	u5010
  2326   003AB6                     u5011:
  2327   003AB6  EF33  F01D         	goto	l5512
  2328   003ABA                     u5010:
  2329   003ABA  0012               	return		;funcret
  2330   003ABC                     __end_of_fullSpeedAhead:
  2331                           	callstack 0
  2332                           
  2333 ;; *************** function _customDelayMs *****************
  2334 ;; Defined at:
  2335 ;;		line 361 in file "dc_motor.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  i               2    4[COMRAM] unsigned int 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2, status,0
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2353 ;;Total ram usage:        5 bytes
  2354 ;; Hardware stack levels used: 1
  2355 ;; Hardware stack levels required when called: 1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_reverseStraight
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text5
  2364   0040DE                     __ptext5:
  2365                           	callstack 0
  2366   0040DE                     _customDelayMs:
  2367                           	callstack 27
  2368   0040DE                     
  2369                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2370   0040DE  0E00               	movlw	0
  2371   0040E0  6E06               	movwf	(customDelayMs@i+1)^0,c
  2372   0040E2  0E00               	movlw	0
  2373   0040E4  6E05               	movwf	customDelayMs@i^0,c
  2374   0040E6  EF7F  F020         	goto	l499
  2375   0040EA                     l4004:
  2376                           
  2377                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2378   0040EA  0E15               	movlw	21
  2379   0040EC  6E04               	movwf	??_customDelayMs^0,c
  2380   0040EE  0EC6               	movlw	198
  2381   0040F0                     u5437:
  2382   0040F0  2EE8               	decfsz	wreg,f,c
  2383   0040F2  D7FE               	bra	u5437
  2384   0040F4  2E04               	decfsz	??_customDelayMs^0,f,c
  2385   0040F6  D7FC               	bra	u5437
  2386   0040F8  D000               	nop2	
  2387   0040FA                     
  2388                           ;dc_motor.c: 364:     }
  2389   0040FA  4A05               	infsnz	customDelayMs@i^0,f,c
  2390   0040FC  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2391   0040FE                     l499:
  2392   0040FE  5002               	movf	customDelayMs@milliseconds^0,w,c
  2393   004100  5C05               	subwf	customDelayMs@i^0,w,c
  2394   004102  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2395   004104  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2396   004106  A0D8               	btfss	status,0,c
  2397   004108  EF88  F020         	goto	u3241
  2398   00410C  EF8A  F020         	goto	u3240
  2399   004110                     u3241:
  2400   004110  EF75  F020         	goto	l4004
  2401   004114                     u3240:
  2402   004114  0012               	return		;funcret
  2403   004116                     __end_of_customDelayMs:
  2404                           	callstack 0
  2405                           
  2406 ;; *************** function _moveWhite *****************
  2407 ;; Defined at:
  2408 ;;		line 318 in file "dc_motor.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2411 ;;		 -> motorL(9), 
  2412 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2413 ;;		 -> motorR(9), 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;Total ram usage:        4 bytes
  2430 ;; Hardware stack levels used: 1
  2431 ;; Hardware stack levels required when called: 5
  2432 ;; This function calls:
  2433 ;;		_backHalf
  2434 ;;		_turn180
  2435 ;; This function is called by:
  2436 ;;		_returnHome
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text6
  2441   0041B2                     __ptext6:
  2442                           	callstack 0
  2443   0041B2                     _moveWhite:
  2444                           	callstack 24
  2445   0041B2                     
  2446                           ;dc_motor.c: 318: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          19: {;dc_motor.c: 321:     backHalf(mL,mR);
  2447   0041B2  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2448   0041B6  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2449   0041BA  EC9F  F021         	call	_backHalf	;wreg free
  2450   0041BE                     
  2451                           ;dc_motor.c: 322:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2452   0041BE  0E29               	movlw	41
  2453   0041C0  6E20               	movwf	(??_moveWhite+1)^0,c
  2454   0041C2  0E96               	movlw	150
  2455   0041C4  6E1F               	movwf	??_moveWhite^0,c
  2456   0041C6  0E7F               	movlw	127
  2457   0041C8                     u5447:
  2458   0041C8  2EE8               	decfsz	wreg,f,c
  2459   0041CA  D7FE               	bra	u5447
  2460   0041CC  2E1F               	decfsz	??_moveWhite^0,f,c
  2461   0041CE  D7FC               	bra	u5447
  2462   0041D0  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2463   0041D2  D7FA               	bra	u5447
  2464   0041D4  0000               	nop	
  2465   0041D6                     
  2466                           ;dc_motor.c: 323:     turn180(mL,mR);
  2467   0041D6  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2468   0041DA  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2469   0041DE  EC3D  F021         	call	_turn180	;wreg free
  2470   0041E2  0012               	return		;funcret
  2471   0041E4                     __end_of_moveWhite:
  2472                           	callstack 0
  2473                           
  2474 ;; *************** function _reading_hue *****************
  2475 ;; Defined at:
  2476 ;;		line 90 in file "color.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2479 ;;		 -> colorCurrent(8), 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  led_state      50    0        unsigned char [50]
  2482 ;;  hue             2   69[COMRAM] unsigned int 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  2   65[COMRAM] unsigned int 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2495 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2496 ;;Total ram usage:        6 bytes
  2497 ;; Hardware stack levels used: 1
  2498 ;; Hardware stack levels required when called: 4
  2499 ;; This function calls:
  2500 ;;		_color_read_Blue
  2501 ;;		_color_read_Clear
  2502 ;;		_color_read_Green
  2503 ;;		_color_read_Red
  2504 ;;		_convert_rgb2hue
  2505 ;; This function is called by:
  2506 ;;		_main
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text7
  2511   00318C                     __ptext7:
  2512                           	callstack 0
  2513   00318C                     _reading_hue:
  2514                           	callstack 26
  2515   00318C                     
  2516                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2517   00318C  807F               	bsf	127,0,c	;volatile
  2518                           
  2519                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2520   00318E  9E7D               	bcf	125,7,c	;volatile
  2521                           
  2522                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2523   003190  9679               	bcf	121,3,c	;volatile
  2524   003192                     
  2525                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2526   003192  0E29               	movlw	41
  2527   003194  6E45               	movwf	(??_reading_hue+1)^0,c
  2528   003196  0E96               	movlw	150
  2529   003198  6E44               	movwf	??_reading_hue^0,c
  2530   00319A  0E7F               	movlw	127
  2531   00319C                     u5457:
  2532   00319C  2EE8               	decfsz	wreg,f,c
  2533   00319E  D7FE               	bra	u5457
  2534   0031A0  2E44               	decfsz	??_reading_hue^0,f,c
  2535   0031A2  D7FC               	bra	u5457
  2536   0031A4  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2537   0031A6  D7FA               	bra	u5457
  2538   0031A8  0000               	nop	
  2539   0031AA                     
  2540                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2541   0031AA  EC08  F01E         	call	_color_read_Red	;wreg free
  2542   0031AE  5042               	movf	reading_hue@cCurr^0,w,c
  2543   0031B0  6ED9               	movwf	fsr2l,c
  2544   0031B2  6ADA               	clrf	fsr2h,c
  2545   0031B4  C006  FFDE         	movff	?_color_read_Red,postinc2
  2546   0031B8  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2547   0031BC                     
  2548                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2549   0031BC  907F               	bcf	127,0,c	;volatile
  2550   0031BE                     
  2551                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2552   0031BE  8E7D               	bsf	125,7,c	;volatile
  2553   0031C0                     
  2554                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2555   0031C0  9679               	bcf	121,3,c	;volatile
  2556   0031C2                     
  2557                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2558   0031C2  0E29               	movlw	41
  2559   0031C4  6E45               	movwf	(??_reading_hue+1)^0,c
  2560   0031C6  0E96               	movlw	150
  2561   0031C8  6E44               	movwf	??_reading_hue^0,c
  2562   0031CA  0E7F               	movlw	127
  2563   0031CC                     u5467:
  2564   0031CC  2EE8               	decfsz	wreg,f,c
  2565   0031CE  D7FE               	bra	u5467
  2566   0031D0  2E44               	decfsz	??_reading_hue^0,f,c
  2567   0031D2  D7FC               	bra	u5467
  2568   0031D4  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2569   0031D6  D7FA               	bra	u5467
  2570   0031D8  0000               	nop	
  2571                           
  2572                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2573   0031DA  EC30  F01E         	call	_color_read_Green	;wreg free
  2574   0031DE  5042               	movf	reading_hue@cCurr^0,w,c
  2575   0031E0  6ED9               	movwf	fsr2l,c
  2576   0031E2  6ADA               	clrf	fsr2h,c
  2577   0031E4  0E02               	movlw	2
  2578   0031E6  26D9               	addwf	fsr2l,f,c
  2579   0031E8  C006  FFDE         	movff	?_color_read_Green,postinc2
  2580   0031EC  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2581   0031F0                     
  2582                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2583   0031F0  907F               	bcf	127,0,c	;volatile
  2584   0031F2                     
  2585                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2586   0031F2  9E7D               	bcf	125,7,c	;volatile
  2587   0031F4                     
  2588                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2589   0031F4  8679               	bsf	121,3,c	;volatile
  2590   0031F6                     
  2591                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2592   0031F6  0E29               	movlw	41
  2593   0031F8  6E45               	movwf	(??_reading_hue+1)^0,c
  2594   0031FA  0E96               	movlw	150
  2595   0031FC  6E44               	movwf	??_reading_hue^0,c
  2596   0031FE  0E7F               	movlw	127
  2597   003200                     u5477:
  2598   003200  2EE8               	decfsz	wreg,f,c
  2599   003202  D7FE               	bra	u5477
  2600   003204  2E44               	decfsz	??_reading_hue^0,f,c
  2601   003206  D7FC               	bra	u5477
  2602   003208  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2603   00320A  D7FA               	bra	u5477
  2604   00320C  0000               	nop	
  2605   00320E                     
  2606                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2607   00320E  EC80  F01E         	call	_color_read_Blue	;wreg free
  2608   003212  5042               	movf	reading_hue@cCurr^0,w,c
  2609   003214  6ED9               	movwf	fsr2l,c
  2610   003216  6ADA               	clrf	fsr2h,c
  2611   003218  0E04               	movlw	4
  2612   00321A  26D9               	addwf	fsr2l,f,c
  2613   00321C  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2614   003220  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2615   003224                     
  2616                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2617   003224  807F               	bsf	127,0,c	;volatile
  2618   003226                     
  2619                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2620   003226  8E7D               	bsf	125,7,c	;volatile
  2621   003228                     
  2622                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2623   003228  8679               	bsf	121,3,c	;volatile
  2624                           
  2625                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2626   00322A  0E29               	movlw	41
  2627   00322C  6E45               	movwf	(??_reading_hue+1)^0,c
  2628   00322E  0E96               	movlw	150
  2629   003230  6E44               	movwf	??_reading_hue^0,c
  2630   003232  0E7F               	movlw	127
  2631   003234                     u5487:
  2632   003234  2EE8               	decfsz	wreg,f,c
  2633   003236  D7FE               	bra	u5487
  2634   003238  2E44               	decfsz	??_reading_hue^0,f,c
  2635   00323A  D7FC               	bra	u5487
  2636   00323C  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2637   00323E  D7FA               	bra	u5487
  2638   003240  0000               	nop	
  2639   003242                     
  2640                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2641   003242  EC58  F01E         	call	_color_read_Clear	;wreg free
  2642   003246  5042               	movf	reading_hue@cCurr^0,w,c
  2643   003248  6ED9               	movwf	fsr2l,c
  2644   00324A  6ADA               	clrf	fsr2h,c
  2645   00324C  0E06               	movlw	6
  2646   00324E  26D9               	addwf	fsr2l,f,c
  2647   003250  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2648   003254  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2649   003258                     
  2650                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2651   003258  0EE5               	movlw	low _colorCalibration
  2652   00325A  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2653   00325C  0EDD               	movlw	low _colorCurrent
  2654   00325E  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2655   003260  EC55  F007         	call	_convert_rgb2hue	;wreg free
  2656   003264  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2657   003268  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2658   00326C                     
  2659                           ;color.c: 145:     return hue;
  2660   00326C  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2661   003270  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2662   003274  0012               	return		;funcret
  2663   003276                     __end_of_reading_hue:
  2664                           	callstack 0
  2665                           
  2666 ;; *************** function _convert_rgb2hue *****************
  2667 ;; Defined at:
  2668 ;;		line 229 in file "color.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  cMax            1   61[COMRAM] PTR struct colors
  2671 ;;		 -> colorCalibration(8), 
  2672 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2673 ;;		 -> colorCurrent(8), 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  c_char         20    0        unsigned char [20]
  2676 ;;  b               4   72[BANK0 ] float 
  2677 ;;  g               4   68[BANK0 ] float 
  2678 ;;  r               4   64[BANK0 ] float 
  2679 ;;  hue             4   60[BANK0 ] float 
  2680 ;;  max             4   56[BANK0 ] float 
  2681 ;;  diff            4   52[BANK0 ] float 
  2682 ;;  min             4   48[BANK0 ] float 
  2683 ;;  clearmax        4   28[BANK0 ] float 
  2684 ;;  clearcurrent    4   24[BANK0 ] float 
  2685 ;;  bluemax         4   20[BANK0 ] float 
  2686 ;;  bluecurrent     4   16[BANK0 ] float 
  2687 ;;  greenmax        4   12[BANK0 ] float 
  2688 ;;  greencurrent    4    8[BANK0 ] float 
  2689 ;;  redmax          4    4[BANK0 ] float 
  2690 ;;  redcurrent      4    0[BANK0 ] float 
  2691 ;;  c               4    0        float 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  2   61[COMRAM] unsigned int 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2705 ;;Total ram usage:       80 bytes
  2706 ;; Hardware stack levels used: 1
  2707 ;; Hardware stack levels required when called: 3
  2708 ;; This function calls:
  2709 ;;		___fladd
  2710 ;;		___fldiv
  2711 ;;		___fleq
  2712 ;;		___flge
  2713 ;;		___flmul
  2714 ;;		___flsub
  2715 ;;		___fltol
  2716 ;;		___xxtofl
  2717 ;; This function is called by:
  2718 ;;		_reading_hue
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text8
  2723   000EAA                     __ptext8:
  2724                           	callstack 0
  2725   000EAA                     _convert_rgb2hue:
  2726                           	callstack 26
  2727   000EAA                     
  2728                           ;color.c: 229: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 230: {;color.c: 231:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 232:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2729   000EAA  0E00               	movlw	0
  2730   000EAC  0100               	movlb	0	; () banked
  2731   000EAE  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2732   000EB0  0E00               	movlw	0
  2733   000EB2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2734   000EB4  0E00               	movlw	0
  2735   000EB6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2736   000EB8  0E00               	movlw	0
  2737   000EBA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2738   000EBC                     
  2739                           ; BSR set to: 0
  2740                           ;color.c: 234:     redcurrent = cCurr->red;
  2741   000EBC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2742   000EBE  6ED9               	movwf	fsr2l,c
  2743   000EC0  6ADA               	clrf	fsr2h,c
  2744   000EC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2745   000EC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2746   000ECA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2747   000ECE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2748   000ED2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2749   000ED4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2750   000ED6  0E00               	movlw	0
  2751   000ED8  ECBD  F014         	call	___xxtofl
  2752   000EDC  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2753   000EE0  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2754   000EE4  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2755   000EE8  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2756   000EEC                     
  2757                           ;color.c: 235:     redmax = cMax->red;
  2758   000EEC  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2759   000EEE  6ED9               	movwf	fsr2l,c
  2760   000EF0  6ADA               	clrf	fsr2h,c
  2761   000EF2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2762   000EF6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2763   000EFA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2764   000EFE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2765   000F02  6A04               	clrf	(___xxtofl@val+2)^0,c
  2766   000F04  6A05               	clrf	(___xxtofl@val+3)^0,c
  2767   000F06  0E00               	movlw	0
  2768   000F08  ECBD  F014         	call	___xxtofl
  2769   000F0C  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2770   000F10  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2771   000F14  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2772   000F18  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2773   000F1C                     
  2774                           ;color.c: 236:     greencurrent = cCurr->green;
  2775   000F1C  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2776   000F1E  6ED9               	movwf	fsr2l,c
  2777   000F20  6ADA               	clrf	fsr2h,c
  2778   000F22  0E02               	movlw	2
  2779   000F24  26D9               	addwf	fsr2l,f,c
  2780   000F26  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2781   000F2A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2782   000F2E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2783   000F32  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2784   000F36  6A04               	clrf	(___xxtofl@val+2)^0,c
  2785   000F38  6A05               	clrf	(___xxtofl@val+3)^0,c
  2786   000F3A  0E00               	movlw	0
  2787   000F3C  ECBD  F014         	call	___xxtofl
  2788   000F40  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2789   000F44  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2790   000F48  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2791   000F4C  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2792   000F50                     
  2793                           ;color.c: 237:     greenmax = cMax->green;
  2794   000F50  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2795   000F52  6ED9               	movwf	fsr2l,c
  2796   000F54  6ADA               	clrf	fsr2h,c
  2797   000F56  0E02               	movlw	2
  2798   000F58  26D9               	addwf	fsr2l,f,c
  2799   000F5A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2800   000F5E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2801   000F62  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2802   000F66  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2803   000F6A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2804   000F6C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2805   000F6E  0E00               	movlw	0
  2806   000F70  ECBD  F014         	call	___xxtofl
  2807   000F74  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2808   000F78  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2809   000F7C  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2810   000F80  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2811   000F84                     
  2812                           ;color.c: 238:     bluecurrent = cCurr->blue;
  2813   000F84  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2814   000F86  6ED9               	movwf	fsr2l,c
  2815   000F88  6ADA               	clrf	fsr2h,c
  2816   000F8A  0E04               	movlw	4
  2817   000F8C  26D9               	addwf	fsr2l,f,c
  2818   000F8E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2819   000F92  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2820   000F96  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2821   000F9A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2822   000F9E  6A04               	clrf	(___xxtofl@val+2)^0,c
  2823   000FA0  6A05               	clrf	(___xxtofl@val+3)^0,c
  2824   000FA2  0E00               	movlw	0
  2825   000FA4  ECBD  F014         	call	___xxtofl
  2826   000FA8  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2827   000FAC  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2828   000FB0  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2829   000FB4  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2830   000FB8                     
  2831                           ;color.c: 239:     bluemax = cMax->blue;
  2832   000FB8  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2833   000FBA  6ED9               	movwf	fsr2l,c
  2834   000FBC  6ADA               	clrf	fsr2h,c
  2835   000FBE  0E04               	movlw	4
  2836   000FC0  26D9               	addwf	fsr2l,f,c
  2837   000FC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2838   000FC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2839   000FCA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2840   000FCE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2841   000FD2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2842   000FD4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2843   000FD6  0E00               	movlw	0
  2844   000FD8  ECBD  F014         	call	___xxtofl
  2845   000FDC  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2846   000FE0  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2847   000FE4  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2848   000FE8  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2849   000FEC                     
  2850                           ;color.c: 240:     clearcurrent = cCurr->clear;
  2851   000FEC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2852   000FEE  6ED9               	movwf	fsr2l,c
  2853   000FF0  6ADA               	clrf	fsr2h,c
  2854   000FF2  0E06               	movlw	6
  2855   000FF4  26D9               	addwf	fsr2l,f,c
  2856   000FF6  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2857   000FFA  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2858   000FFE  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2859   001002  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2860   001006  6A04               	clrf	(___xxtofl@val+2)^0,c
  2861   001008  6A05               	clrf	(___xxtofl@val+3)^0,c
  2862   00100A  0E00               	movlw	0
  2863   00100C  ECBD  F014         	call	___xxtofl
  2864   001010  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2865   001014  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2866   001018  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2867   00101C  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2868   001020                     
  2869                           ;color.c: 241:     clearmax = cMax->clear;
  2870   001020  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2871   001022  6ED9               	movwf	fsr2l,c
  2872   001024  6ADA               	clrf	fsr2h,c
  2873   001026  0E06               	movlw	6
  2874   001028  26D9               	addwf	fsr2l,f,c
  2875   00102A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2876   00102E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2877   001032  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2878   001036  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2879   00103A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2880   00103C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2881   00103E  0E00               	movlw	0
  2882   001040  ECBD  F014         	call	___xxtofl
  2883   001044  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2884   001048  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2885   00104C  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2886   001050  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2887   001054  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2888   001058  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2889   00105C  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2890   001060  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2891   001064  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2892   001068  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2893   00106C  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2894   001070  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2895   001074  EC93  F00F         	call	___fldiv	;wreg free
  2896   001078                     
  2897                           ;color.c: 244:     char c_char[20];;color.c: 250:     r = redcurrent/redmax;
  2898   001078  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2899   00107C  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2900   001080  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2901   001084  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2902   001088  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  2903   00108C  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2904   001090  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2905   001094  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2906   001098  EC93  F00F         	call	___fldiv	;wreg free
  2907   00109C  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2908   0010A0  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2909   0010A4  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2910   0010A8  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2911   0010AC                     
  2912                           ;color.c: 251:     g = greencurrent/greenmax;
  2913   0010AC  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2914   0010B0  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2915   0010B4  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2916   0010B8  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2917   0010BC  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2918   0010C0  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2919   0010C4  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2920   0010C8  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2921   0010CC  EC93  F00F         	call	___fldiv	;wreg free
  2922   0010D0  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2923   0010D4  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2924   0010D8  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2925   0010DC  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2926   0010E0                     
  2927                           ;color.c: 252:     b = bluecurrent/bluemax;
  2928   0010E0  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2929   0010E4  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2930   0010E8  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2931   0010EC  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2932   0010F0  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2933   0010F4  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2934   0010F8  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2935   0010FC  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2936   001100  EC93  F00F         	call	___fldiv	;wreg free
  2937   001104  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2938   001108  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2939   00110C  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2940   001110  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2941   001114                     
  2942                           ;color.c: 254:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2943   001114  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2944   001118  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2945   00111C  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2946   001120  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2947   001124  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2948   001128  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2949   00112C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2950   001130  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2951   001134  EC44  F018         	call	___flge	;wreg free
  2952   001138  A0D8               	btfss	status,0,c
  2953   00113A  EFA1  F008         	goto	u3921
  2954   00113E  EFA3  F008         	goto	u3920
  2955   001142                     u3921:
  2956   001142  EFD8  F008         	goto	l4480
  2957   001146                     u3920:
  2958   001146  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2959   00114A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2960   00114E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2961   001152  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2962   001156  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2963   00115A  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2964   00115E  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2965   001162  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2966   001166  EC44  F018         	call	___flge	;wreg free
  2967   00116A  A0D8               	btfss	status,0,c
  2968   00116C  EFBA  F008         	goto	u3931
  2969   001170  EFBC  F008         	goto	u3930
  2970   001174                     u3931:
  2971   001174  EFC6  F008         	goto	l119
  2972   001178                     u3930:
  2973   001178  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  2974   00117C  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  2975   001180  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  2976   001184  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  2977   001188  EFCE  F008         	goto	l121
  2978   00118C                     l119:
  2979   00118C  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$429
  2980   001190  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$429+1
  2981   001194  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$429+2
  2982   001198  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$429+3
  2983   00119C                     l121:
  2984   00119C  C080  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  2985   0011A0  C081  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  2986   0011A4  C082  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  2987   0011A8  C083  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  2988   0011AC  EF0B  F009         	goto	l4484
  2989   0011B0                     l4480:
  2990   0011B0  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2991   0011B4  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2992   0011B8  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2993   0011BC  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2994   0011C0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2995   0011C4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2996   0011C8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2997   0011CC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2998   0011D0  EC44  F018         	call	___flge	;wreg free
  2999   0011D4  A0D8               	btfss	status,0,c
  3000   0011D6  EFEF  F008         	goto	u3941
  3001   0011DA  EFF1  F008         	goto	u3940
  3002   0011DE                     u3941:
  3003   0011DE  EFFB  F008         	goto	l123
  3004   0011E2                     u3940:
  3005   0011E2  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  3006   0011E6  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  3007   0011EA  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  3008   0011EE  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  3009   0011F2  EF03  F009         	goto	l125
  3010   0011F6                     l123:
  3011   0011F6  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$430
  3012   0011FA  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$430+1
  3013   0011FE  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$430+2
  3014   001202  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$430+3
  3015   001206                     l125:
  3016   001206  C084  F090         	movff	_convert_rgb2hue$430,convert_rgb2hue@min
  3017   00120A  C085  F091         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@min+1
  3018   00120E  C086  F092         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@min+2
  3019   001212  C087  F093         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@min+3
  3020   001216                     l4484:
  3021                           
  3022                           ;color.c: 255:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3023   001216  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3024   00121A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3025   00121E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3026   001222  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3027   001226  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3028   00122A  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3029   00122E  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3030   001232  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3031   001236  EC44  F018         	call	___flge	;wreg free
  3032   00123A  A0D8               	btfss	status,0,c
  3033   00123C  EF22  F009         	goto	u3951
  3034   001240  EF24  F009         	goto	u3950
  3035   001244                     u3951:
  3036   001244  EF59  F009         	goto	l4490
  3037   001248                     u3950:
  3038   001248  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3039   00124C  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3040   001250  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3041   001254  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3042   001258  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3043   00125C  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3044   001260  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3045   001264  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3046   001268  EC44  F018         	call	___flge	;wreg free
  3047   00126C  A0D8               	btfss	status,0,c
  3048   00126E  EF3B  F009         	goto	u3961
  3049   001272  EF3D  F009         	goto	u3960
  3050   001276                     u3961:
  3051   001276  EF47  F009         	goto	l131
  3052   00127A                     u3960:
  3053   00127A  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  3054   00127E  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  3055   001282  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  3056   001286  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  3057   00128A  EF4F  F009         	goto	l133
  3058   00128E                     l131:
  3059   00128E  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$431
  3060   001292  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$431+1
  3061   001296  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$431+2
  3062   00129A  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$431+3
  3063   00129E                     l133:
  3064   00129E  C088  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  3065   0012A2  C089  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  3066   0012A6  C08A  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  3067   0012AA  C08B  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  3068   0012AE  EF8C  F009         	goto	l4494
  3069   0012B2                     l4490:
  3070   0012B2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3071   0012B6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3072   0012BA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3073   0012BE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3074   0012C2  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3075   0012C6  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3076   0012CA  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3077   0012CE  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3078   0012D2  EC44  F018         	call	___flge	;wreg free
  3079   0012D6  A0D8               	btfss	status,0,c
  3080   0012D8  EF70  F009         	goto	u3971
  3081   0012DC  EF72  F009         	goto	u3970
  3082   0012E0                     u3971:
  3083   0012E0  EF7C  F009         	goto	l135
  3084   0012E4                     u3970:
  3085   0012E4  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3086   0012E8  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3087   0012EC  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3088   0012F0  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3089   0012F4  EF84  F009         	goto	l137
  3090   0012F8                     l135:
  3091   0012F8  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$432
  3092   0012FC  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$432+1
  3093   001300  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$432+2
  3094   001304  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$432+3
  3095   001308                     l137:
  3096   001308  C08C  F098         	movff	_convert_rgb2hue$432,convert_rgb2hue@max
  3097   00130C  C08D  F099         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@max+1
  3098   001310  C08E  F09A         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@max+2
  3099   001314  C08F  F09B         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@max+3
  3100   001318                     l4494:
  3101                           
  3102                           ;color.c: 256:     diff = max - min;
  3103   001318  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3104   00131C  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3105   001320  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3106   001324  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3107   001328  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3108   00132C  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3109   001330  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3110   001334  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3111   001338  ECEA  F01F         	call	___flsub	;wreg free
  3112   00133C  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3113   001340  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3114   001344  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3115   001348  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3116                           
  3117                           ;color.c: 257:     if (max == min) {
  3118   00134C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3119   001350  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3120   001354  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3121   001358  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3122   00135C  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3123   001360  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3124   001364  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3125   001368  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3126   00136C  EC1F  F01B         	call	___fleq	;wreg free
  3127   001370  A0D8               	btfss	status,0,c
  3128   001372  EFBD  F009         	goto	u3981
  3129   001376  EFBF  F009         	goto	u3980
  3130   00137A                     u3981:
  3131   00137A  EFCA  F009         	goto	l4498
  3132   00137E                     u3980:
  3133   00137E                     
  3134                           ;color.c: 258:         hue = 0;
  3135   00137E  0E00               	movlw	0
  3136   001380  0100               	movlb	0	; () banked
  3137   001382  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3138   001384  0E00               	movlw	0
  3139   001386  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3140   001388  0E00               	movlw	0
  3141   00138A  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3142   00138C  0E00               	movlw	0
  3143   00138E  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3144                           
  3145                           ;color.c: 259:     } else if (max == r){
  3146   001390  EFD3  F00A         	goto	l4510
  3147   001394                     l4498:
  3148   001394  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3149   001398  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3150   00139C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3151   0013A0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3152   0013A4  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3153   0013A8  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3154   0013AC  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3155   0013B0  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3156   0013B4  EC1F  F01B         	call	___fleq	;wreg free
  3157   0013B8  A0D8               	btfss	status,0,c
  3158   0013BA  EFE1  F009         	goto	u3991
  3159   0013BE  EFE3  F009         	goto	u3990
  3160   0013C2                     u3991:
  3161   0013C2  EF11  F00A         	goto	l4502
  3162   0013C6                     u3990:
  3163   0013C6                     
  3164                           ;color.c: 260:         hue = (b - g) / diff;
  3165   0013C6  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3166   0013CA  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3167   0013CE  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3168   0013D2  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3169   0013D6  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3170   0013DA  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3171   0013DE  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3172   0013E2  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3173   0013E6  ECEA  F01F         	call	___flsub	;wreg free
  3174   0013EA  C012  F01B         	movff	?___flsub,___fldiv@b
  3175   0013EE  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3176   0013F2  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3177   0013F6  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3178   0013FA  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3179   0013FE  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3180   001402  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3181   001406  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3182   00140A  EC93  F00F         	call	___fldiv	;wreg free
  3183   00140E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3184   001412  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3185   001416  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3186   00141A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3187                           
  3188                           ;color.c: 261:     } else if (max == g){
  3189   00141E  EFD3  F00A         	goto	l4510
  3190   001422                     l4502:
  3191   001422  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3192   001426  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3193   00142A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3194   00142E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3195   001432  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3196   001436  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3197   00143A  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3198   00143E  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3199   001442  EC1F  F01B         	call	___fleq	;wreg free
  3200   001446  A0D8               	btfss	status,0,c
  3201   001448  EF28  F00A         	goto	u4001
  3202   00144C  EF2A  F00A         	goto	u4000
  3203   001450                     u4001:
  3204   001450  EF72  F00A         	goto	l4506
  3205   001454                     u4000:
  3206   001454                     
  3207                           ;color.c: 262:         hue = (b - r) / diff;
  3208   001454  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3209   001458  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3210   00145C  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3211   001460  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3212   001464  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3213   001468  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3214   00146C  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3215   001470  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3216   001474  ECEA  F01F         	call	___flsub	;wreg free
  3217   001478  C012  F01B         	movff	?___flsub,___fldiv@b
  3218   00147C  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3219   001480  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3220   001484  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3221   001488  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3222   00148C  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3223   001490  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3224   001494  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3225   001498  EC93  F00F         	call	___fldiv	;wreg free
  3226   00149C  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3227   0014A0  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3228   0014A4  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3229   0014A8  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3230                           
  3231                           ;color.c: 263:         hue = hue + 2;
  3232   0014AC  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3233   0014B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3234   0014B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3235   0014B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3236   0014BC  0E00               	movlw	0
  3237   0014BE  6E06               	movwf	___fladd@a^0,c
  3238   0014C0  0E00               	movlw	0
  3239   0014C2  6E07               	movwf	(___fladd@a+1)^0,c
  3240   0014C4  0E00               	movlw	0
  3241   0014C6  6E08               	movwf	(___fladd@a+2)^0,c
  3242   0014C8  0E40               	movlw	64
  3243   0014CA  6E09               	movwf	(___fladd@a+3)^0,c
  3244   0014CC  EC1E  F00B         	call	___fladd	;wreg free
  3245   0014D0  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3246   0014D4  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3247   0014D8  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3248   0014DC  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3249                           
  3250                           ;color.c: 264:     } else if (max == b){
  3251   0014E0  EFD3  F00A         	goto	l4510
  3252   0014E4                     l4506:
  3253   0014E4  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3254   0014E8  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3255   0014EC  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3256   0014F0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3257   0014F4  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3258   0014F8  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3259   0014FC  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3260   001500  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3261   001504  EC1F  F01B         	call	___fleq	;wreg free
  3262   001508  A0D8               	btfss	status,0,c
  3263   00150A  EF89  F00A         	goto	u4011
  3264   00150E  EF8B  F00A         	goto	u4010
  3265   001512                     u4011:
  3266   001512  EFD3  F00A         	goto	l141
  3267   001516                     u4010:
  3268   001516                     
  3269                           ;color.c: 265:         hue = (r - g) / diff;
  3270   001516  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3271   00151A  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3272   00151E  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3273   001522  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3274   001526  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3275   00152A  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3276   00152E  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3277   001532  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3278   001536  ECEA  F01F         	call	___flsub	;wreg free
  3279   00153A  C012  F01B         	movff	?___flsub,___fldiv@b
  3280   00153E  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3281   001542  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3282   001546  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3283   00154A  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3284   00154E  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3285   001552  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3286   001556  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3287   00155A  EC93  F00F         	call	___fldiv	;wreg free
  3288   00155E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3289   001562  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3290   001566  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3291   00156A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3292                           
  3293                           ;color.c: 266:         hue = hue + 4;
  3294   00156E  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3295   001572  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3296   001576  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3297   00157A  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3298   00157E  0E00               	movlw	0
  3299   001580  6E06               	movwf	___fladd@a^0,c
  3300   001582  0E00               	movlw	0
  3301   001584  6E07               	movwf	(___fladd@a+1)^0,c
  3302   001586  0E80               	movlw	128
  3303   001588  6E08               	movwf	(___fladd@a+2)^0,c
  3304   00158A  0E40               	movlw	64
  3305   00158C  6E09               	movwf	(___fladd@a+3)^0,c
  3306   00158E  EC1E  F00B         	call	___fladd	;wreg free
  3307   001592  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3308   001596  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3309   00159A  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3310   00159E  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3311   0015A2  EFD3  F00A         	goto	l4510
  3312   0015A6                     l141:
  3313   0015A6                     l4510:
  3314                           
  3315                           ;color.c: 269:     hue = hue * 60;
  3316   0015A6  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3317   0015AA  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3318   0015AE  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3319   0015B2  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3320   0015B6  0E00               	movlw	0
  3321   0015B8  6E06               	movwf	___flmul@a^0,c
  3322   0015BA  0E00               	movlw	0
  3323   0015BC  6E07               	movwf	(___flmul@a+1)^0,c
  3324   0015BE  0E70               	movlw	112
  3325   0015C0  6E08               	movwf	(___flmul@a+2)^0,c
  3326   0015C2  0E42               	movlw	66
  3327   0015C4  6E09               	movwf	(___flmul@a+3)^0,c
  3328   0015C6  EC7E  F00D         	call	___flmul	;wreg free
  3329   0015CA  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3330   0015CE  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3331   0015D2  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3332   0015D6  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3333   0015DA                     
  3334                           ;color.c: 270:     if (hue < 0) {
  3335   0015DA  0100               	movlb	0	; () banked
  3336   0015DC  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3337   0015DE  EFF5  F00A         	goto	u4020
  3338   0015E2  EFF3  F00A         	goto	u4021
  3339   0015E6                     u4021:
  3340   0015E6  EF0F  F00B         	goto	l145
  3341   0015EA                     u4020:
  3342   0015EA                     
  3343                           ; BSR set to: 0
  3344                           ;color.c: 271:         hue = hue + 360;
  3345   0015EA  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3346   0015EE  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3347   0015F2  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3348   0015F6  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3349   0015FA  0E00               	movlw	0
  3350   0015FC  6E06               	movwf	___fladd@a^0,c
  3351   0015FE  0E00               	movlw	0
  3352   001600  6E07               	movwf	(___fladd@a+1)^0,c
  3353   001602  0EB4               	movlw	180
  3354   001604  6E08               	movwf	(___fladd@a+2)^0,c
  3355   001606  0E43               	movlw	67
  3356   001608  6E09               	movwf	(___fladd@a+3)^0,c
  3357   00160A  EC1E  F00B         	call	___fladd	;wreg free
  3358   00160E  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3359   001612  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3360   001616  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3361   00161A  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3362   00161E                     l145:
  3363                           
  3364                           ;color.c: 274:     return (unsigned int)hue;
  3365   00161E  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3366   001622  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3367   001626  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3368   00162A  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3369   00162E  ECC1  F017         	call	___fltol	;wreg free
  3370   001632  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3371   001636  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3372   00163A  0012               	return		;funcret
  3373   00163C                     __end_of_convert_rgb2hue:
  3374                           	callstack 0
  3375                           
  3376 ;; *************** function ___xxtofl *****************
  3377 ;; Defined at:
  3378 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  sign            1    wreg     unsigned char 
  3381 ;;  val             4    1[COMRAM] long 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  sign            1    9[COMRAM] unsigned char 
  3384 ;;  arg             4   11[COMRAM] unsigned long 
  3385 ;;  exp             1   10[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  4    1[COMRAM] unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3396 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3397 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3398 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3399 ;;Total ram usage:       14 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 1
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_convert_rgb2hue
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text9
  3411   00297A                     __ptext9:
  3412                           	callstack 0
  3413   00297A                     ___xxtofl:
  3414                           	callstack 27
  3415                           
  3416                           ;incstack = 0
  3417                           ;___xxtofl@sign stored from wreg
  3418   00297A  6E0A               	movwf	___xxtofl@sign^0,c
  3419   00297C  500A               	movf	___xxtofl@sign^0,w,c
  3420   00297E  B4D8               	btfsc	status,2,c
  3421   002980  EFC4  F014         	goto	u3821
  3422   002984  EFC6  F014         	goto	u3820
  3423   002988                     u3821:
  3424   002988  EFE8  F014         	goto	l1325
  3425   00298C                     u3820:
  3426   00298C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3427   00298E  EFCD  F014         	goto	u3830
  3428   002992  EFCB  F014         	goto	u3831
  3429   002996                     u3831:
  3430   002996  EFE8  F014         	goto	l1325
  3431   00299A                     u3830:
  3432   00299A  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3433   00299E  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3434   0029A2  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3435   0029A6  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3436   0029AA  1E06               	comf	??___xxtofl^0,f,c
  3437   0029AC  1E07               	comf	(??___xxtofl+1)^0,f,c
  3438   0029AE  1E08               	comf	(??___xxtofl+2)^0,f,c
  3439   0029B0  1E09               	comf	(??___xxtofl+3)^0,f,c
  3440   0029B2  2A06               	incf	??___xxtofl^0,f,c
  3441   0029B4  0E00               	movlw	0
  3442   0029B6  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3443   0029B8  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3444   0029BA  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3445   0029BC  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3446   0029C0  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3447   0029C4  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3448   0029C8  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3449   0029CC  EFF0  F014         	goto	l4370
  3450   0029D0                     l1325:
  3451   0029D0  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3452   0029D4  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3453   0029D8  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3454   0029DC  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3455   0029E0                     l4370:
  3456   0029E0  5002               	movf	___xxtofl@val^0,w,c
  3457   0029E2  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3458   0029E4  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3459   0029E6  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3460   0029E8  A4D8               	btfss	status,2,c
  3461   0029EA  EFF9  F014         	goto	u3841
  3462   0029EE  EFFB  F014         	goto	u3840
  3463   0029F2                     u3841:
  3464   0029F2  EF05  F015         	goto	l4376
  3465   0029F6                     u3840:
  3466   0029F6  0E00               	movlw	0
  3467   0029F8  6E02               	movwf	?___xxtofl^0,c
  3468   0029FA  0E00               	movlw	0
  3469   0029FC  6E03               	movwf	(?___xxtofl+1)^0,c
  3470   0029FE  0E00               	movlw	0
  3471   002A00  6E04               	movwf	(?___xxtofl+2)^0,c
  3472   002A02  0E00               	movlw	0
  3473   002A04  6E05               	movwf	(?___xxtofl+3)^0,c
  3474   002A06  EF96  F015         	goto	l1328
  3475   002A0A                     l4376:
  3476   002A0A  0E96               	movlw	150
  3477   002A0C  6E0B               	movwf	___xxtofl@exp^0,c
  3478   002A0E  EF0F  F015         	goto	l4380
  3479   002A12                     l4378:
  3480   002A12  2A0B               	incf	___xxtofl@exp^0,f,c
  3481   002A14  90D8               	bcf	status,0,c
  3482   002A16  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3483   002A18  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3484   002A1A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3485   002A1C  320C               	rrcf	___xxtofl@arg^0,f,c
  3486   002A1E                     l4380:
  3487   002A1E  0E00               	movlw	0
  3488   002A20  140C               	andwf	___xxtofl@arg^0,w,c
  3489   002A22  6E06               	movwf	??___xxtofl^0,c
  3490   002A24  0E00               	movlw	0
  3491   002A26  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3492   002A28  6E07               	movwf	(??___xxtofl+1)^0,c
  3493   002A2A  0E00               	movlw	0
  3494   002A2C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3495   002A2E  6E08               	movwf	(??___xxtofl+2)^0,c
  3496   002A30  0EFE               	movlw	254
  3497   002A32  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3498   002A34  6E09               	movwf	(??___xxtofl+3)^0,c
  3499   002A36  5006               	movf	??___xxtofl^0,w,c
  3500   002A38  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3501   002A3A  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3502   002A3C  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3503   002A3E  A4D8               	btfss	status,2,c
  3504   002A40  EF24  F015         	goto	u3851
  3505   002A44  EF26  F015         	goto	u3850
  3506   002A48                     u3851:
  3507   002A48  EF09  F015         	goto	l4378
  3508   002A4C                     u3850:
  3509   002A4C  EF34  F015         	goto	l1332
  3510   002A50                     l4382:
  3511   002A50  2A0B               	incf	___xxtofl@exp^0,f,c
  3512   002A52  0E01               	movlw	1
  3513   002A54  260C               	addwf	___xxtofl@arg^0,f,c
  3514   002A56  0E00               	movlw	0
  3515   002A58  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3516   002A5A  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3517   002A5C  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3518   002A5E  90D8               	bcf	status,0,c
  3519   002A60  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3520   002A62  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3521   002A64  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3522   002A66  320C               	rrcf	___xxtofl@arg^0,f,c
  3523   002A68                     l1332:
  3524   002A68  0E00               	movlw	0
  3525   002A6A  140C               	andwf	___xxtofl@arg^0,w,c
  3526   002A6C  6E06               	movwf	??___xxtofl^0,c
  3527   002A6E  0E00               	movlw	0
  3528   002A70  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3529   002A72  6E07               	movwf	(??___xxtofl+1)^0,c
  3530   002A74  0E00               	movlw	0
  3531   002A76  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3532   002A78  6E08               	movwf	(??___xxtofl+2)^0,c
  3533   002A7A  0EFF               	movlw	255
  3534   002A7C  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3535   002A7E  6E09               	movwf	(??___xxtofl+3)^0,c
  3536   002A80  5006               	movf	??___xxtofl^0,w,c
  3537   002A82  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3538   002A84  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3539   002A86  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3540   002A88  A4D8               	btfss	status,2,c
  3541   002A8A  EF49  F015         	goto	u3861
  3542   002A8E  EF4B  F015         	goto	u3860
  3543   002A92                     u3861:
  3544   002A92  EF28  F015         	goto	l4382
  3545   002A96                     u3860:
  3546   002A96  EF53  F015         	goto	l4390
  3547   002A9A                     l4388:
  3548   002A9A  060B               	decf	___xxtofl@exp^0,f,c
  3549   002A9C  90D8               	bcf	status,0,c
  3550   002A9E  360C               	rlcf	___xxtofl@arg^0,f,c
  3551   002AA0  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3552   002AA2  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3553   002AA4  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3554   002AA6                     l4390:
  3555   002AA6  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3556   002AA8  EF58  F015         	goto	u3871
  3557   002AAC  EF5A  F015         	goto	u3870
  3558   002AB0                     u3871:
  3559   002AB0  EF62  F015         	goto	l1339
  3560   002AB4                     u3870:
  3561   002AB4  0E02               	movlw	2
  3562   002AB6  600B               	cpfslt	___xxtofl@exp^0,c
  3563   002AB8  EF60  F015         	goto	u3881
  3564   002ABC  EF62  F015         	goto	u3880
  3565   002AC0                     u3881:
  3566   002AC0  EF4D  F015         	goto	l4388
  3567   002AC4                     u3880:
  3568   002AC4                     l1339:
  3569   002AC4  B00B               	btfsc	___xxtofl@exp^0,0,c
  3570   002AC6  EF67  F015         	goto	u3891
  3571   002ACA  EF69  F015         	goto	u3890
  3572   002ACE                     u3891:
  3573   002ACE  EF6A  F015         	goto	l4396
  3574   002AD2                     u3890:
  3575   002AD2  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3576   002AD4                     l4396:
  3577   002AD4  90D8               	bcf	status,0,c
  3578   002AD6  320B               	rrcf	___xxtofl@exp^0,f,c
  3579   002AD8  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3580   002ADC  6A07               	clrf	(??___xxtofl+1)^0,c
  3581   002ADE  6A08               	clrf	(??___xxtofl+2)^0,c
  3582   002AE0  6A09               	clrf	(??___xxtofl+3)^0,c
  3583   002AE2  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3584   002AE6  6A08               	clrf	(??___xxtofl+2)^0,c
  3585   002AE8  6A07               	clrf	(??___xxtofl+1)^0,c
  3586   002AEA  6A06               	clrf	??___xxtofl^0,c
  3587   002AEC  5006               	movf	??___xxtofl^0,w,c
  3588   002AEE  120C               	iorwf	___xxtofl@arg^0,f,c
  3589   002AF0  5007               	movf	(??___xxtofl+1)^0,w,c
  3590   002AF2  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3591   002AF4  5008               	movf	(??___xxtofl+2)^0,w,c
  3592   002AF6  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3593   002AF8  5009               	movf	(??___xxtofl+3)^0,w,c
  3594   002AFA  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3595   002AFC  500A               	movf	___xxtofl@sign^0,w,c
  3596   002AFE  B4D8               	btfsc	status,2,c
  3597   002B00  EF84  F015         	goto	u3901
  3598   002B04  EF86  F015         	goto	u3900
  3599   002B08                     u3901:
  3600   002B08  EF8E  F015         	goto	l4406
  3601   002B0C                     u3900:
  3602   002B0C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3603   002B0E  EF8D  F015         	goto	u3910
  3604   002B12  EF8B  F015         	goto	u3911
  3605   002B16                     u3911:
  3606   002B16  EF8E  F015         	goto	l4406
  3607   002B1A                     u3910:
  3608   002B1A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3609   002B1C                     l4406:
  3610   002B1C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3611   002B20  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3612   002B24  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3613   002B28  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3614   002B2C                     l1328:
  3615   002B2C  0012               	return		;funcret
  3616   002B2E                     __end_of___xxtofl:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function ___fltol *****************
  3620 ;; Defined at:
  3621 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  f1              4   51[COMRAM] unsigned char 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  exp1            1   60[COMRAM] unsigned char 
  3626 ;;  sign1           1   59[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  4   51[COMRAM] long 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3636 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3639 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3640 ;;Total ram usage:       10 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 1
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_convert_rgb2hue
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text10
  3652   002F82                     __ptext10:
  3653                           	callstack 0
  3654   002F82                     ___fltol:
  3655                           	callstack 27
  3656   002F82  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3657   002F84  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3658   002F86  6E3D               	movwf	___fltol@exp1^0,c
  3659   002F88  503D               	movf	___fltol@exp1^0,w,c
  3660   002F8A  A4D8               	btfss	status,2,c
  3661   002F8C  EFCA  F017         	goto	u3751
  3662   002F90  EFCC  F017         	goto	u3750
  3663   002F94                     u3751:
  3664   002F94  EFD6  F017         	goto	l4326
  3665   002F98                     u3750:
  3666   002F98                     l4322:
  3667   002F98  0E00               	movlw	0
  3668   002F9A  6E34               	movwf	?___fltol^0,c
  3669   002F9C  0E00               	movlw	0
  3670   002F9E  6E35               	movwf	(?___fltol+1)^0,c
  3671   002FA0  0E00               	movlw	0
  3672   002FA2  6E36               	movwf	(?___fltol+2)^0,c
  3673   002FA4  0E00               	movlw	0
  3674   002FA6  6E37               	movwf	(?___fltol+3)^0,c
  3675   002FA8  EF43  F018         	goto	l967
  3676   002FAC                     l4326:
  3677   002FAC  C034  F038         	movff	___fltol@f1,??___fltol
  3678   002FB0  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3679   002FB4  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3680   002FB8  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3681   002FBC  0E20               	movlw	32
  3682   002FBE  EFE6  F017         	goto	u3760
  3683   002FC2                     u3765:
  3684   002FC2  90D8               	bcf	status,0,c
  3685   002FC4  323B               	rrcf	(??___fltol+3)^0,f,c
  3686   002FC6  323A               	rrcf	(??___fltol+2)^0,f,c
  3687   002FC8  3239               	rrcf	(??___fltol+1)^0,f,c
  3688   002FCA  3238               	rrcf	??___fltol^0,f,c
  3689   002FCC                     u3760:
  3690   002FCC  2EE8               	decfsz	wreg,f,c
  3691   002FCE  EFE1  F017         	goto	u3765
  3692   002FD2  5038               	movf	??___fltol^0,w,c
  3693   002FD4  6E3C               	movwf	___fltol@sign1^0,c
  3694   002FD6  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3695   002FD8  0EFF               	movlw	255
  3696   002FDA  1634               	andwf	___fltol@f1^0,f,c
  3697   002FDC  0EFF               	movlw	255
  3698   002FDE  1635               	andwf	(___fltol@f1+1)^0,f,c
  3699   002FE0  0EFF               	movlw	255
  3700   002FE2  1636               	andwf	(___fltol@f1+2)^0,f,c
  3701   002FE4  0E00               	movlw	0
  3702   002FE6  1637               	andwf	(___fltol@f1+3)^0,f,c
  3703   002FE8  0E96               	movlw	150
  3704   002FEA  5E3D               	subwf	___fltol@exp1^0,f,c
  3705   002FEC  BE3D               	btfsc	___fltol@exp1^0,7,c
  3706   002FEE  EFFD  F017         	goto	u3770
  3707   002FF2  EFFB  F017         	goto	u3771
  3708   002FF6                     u3771:
  3709   002FF6  EF13  F018         	goto	l4346
  3710   002FFA                     u3770:
  3711   002FFA  503D               	movf	___fltol@exp1^0,w,c
  3712   002FFC  0A80               	xorlw	128
  3713   002FFE  0F97               	addlw	151
  3714   003000  B0D8               	btfsc	status,0,c
  3715   003002  EF05  F018         	goto	u3781
  3716   003006  EF07  F018         	goto	u3780
  3717   00300A                     u3781:
  3718   00300A  EF09  F018         	goto	l4342
  3719   00300E                     u3780:
  3720   00300E  EFCC  F017         	goto	l4322
  3721   003012                     l4342:
  3722   003012  90D8               	bcf	status,0,c
  3723   003014  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3724   003016  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3725   003018  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3726   00301A  3234               	rrcf	___fltol@f1^0,f,c
  3727   00301C  3E3D               	incfsz	___fltol@exp1^0,f,c
  3728   00301E  EF09  F018         	goto	l4342
  3729   003022  EF2B  F018         	goto	l4356
  3730   003026                     l4346:
  3731   003026  0E1F               	movlw	31
  3732   003028  643D               	cpfsgt	___fltol@exp1^0,c
  3733   00302A  EF19  F018         	goto	u3791
  3734   00302E  EF1B  F018         	goto	u3790
  3735   003032                     u3791:
  3736   003032  EF23  F018         	goto	l4354
  3737   003036                     u3790:
  3738   003036  EFCC  F017         	goto	l4322
  3739   00303A                     l4352:
  3740   00303A  90D8               	bcf	status,0,c
  3741   00303C  3634               	rlcf	___fltol@f1^0,f,c
  3742   00303E  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3743   003040  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3744   003042  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3745   003044  063D               	decf	___fltol@exp1^0,f,c
  3746   003046                     l4354:
  3747   003046  503D               	movf	___fltol@exp1^0,w,c
  3748   003048  A4D8               	btfss	status,2,c
  3749   00304A  EF29  F018         	goto	u3801
  3750   00304E  EF2B  F018         	goto	u3800
  3751   003052                     u3801:
  3752   003052  EF1D  F018         	goto	l4352
  3753   003056                     u3800:
  3754   003056                     l4356:
  3755   003056  503C               	movf	___fltol@sign1^0,w,c
  3756   003058  B4D8               	btfsc	status,2,c
  3757   00305A  EF31  F018         	goto	u3811
  3758   00305E  EF33  F018         	goto	u3810
  3759   003062                     u3811:
  3760   003062  EF3B  F018         	goto	l4360
  3761   003066                     u3810:
  3762   003066  1E37               	comf	(___fltol@f1+3)^0,f,c
  3763   003068  1E36               	comf	(___fltol@f1+2)^0,f,c
  3764   00306A  1E35               	comf	(___fltol@f1+1)^0,f,c
  3765   00306C  6C34               	negf	___fltol@f1^0,c
  3766   00306E  0E00               	movlw	0
  3767   003070  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3768   003072  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3769   003074  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3770   003076                     l4360:
  3771   003076  C034  F034         	movff	___fltol@f1,?___fltol
  3772   00307A  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3773   00307E  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3774   003082  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3775   003086                     l967:
  3776   003086  0012               	return		;funcret
  3777   003088                     __end_of___fltol:
  3778                           	callstack 0
  3779                           
  3780 ;; *************** function ___flsub *****************
  3781 ;; Defined at:
  3782 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  b               4   17[COMRAM] long 
  3785 ;;  a               4   21[COMRAM] long 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  4   17[COMRAM] long 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3797 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3800 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3801 ;;Total ram usage:        8 bytes
  3802 ;; Hardware stack levels used: 1
  3803 ;; Hardware stack levels required when called: 2
  3804 ;; This function calls:
  3805 ;;		___fladd
  3806 ;; This function is called by:
  3807 ;;		_convert_rgb2hue
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text11
  3812   003FD4                     __ptext11:
  3813                           	callstack 0
  3814   003FD4                     ___flsub:
  3815                           	callstack 26
  3816   003FD4  0E00               	movlw	0
  3817   003FD6  1A16               	xorwf	___flsub@a^0,f,c
  3818   003FD8  0E00               	movlw	0
  3819   003FDA  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3820   003FDC  0E00               	movlw	0
  3821   003FDE  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3822   003FE0  0E80               	movlw	128
  3823   003FE2  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3824   003FE4  C012  F002         	movff	___flsub@b,___fladd@b
  3825   003FE8  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3826   003FEC  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3827   003FF0  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3828   003FF4  C016  F006         	movff	___flsub@a,___fladd@a
  3829   003FF8  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3830   003FFC  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3831   004000  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3832   004004  EC1E  F00B         	call	___fladd	;wreg free
  3833   004008  C002  F012         	movff	?___fladd,?___flsub
  3834   00400C  C003  F013         	movff	?___fladd+1,?___flsub+1
  3835   004010  C004  F014         	movff	?___fladd+2,?___flsub+2
  3836   004014  C005  F015         	movff	?___fladd+3,?___flsub+3
  3837   004018  0012               	return		;funcret
  3838   00401A                     __end_of___flsub:
  3839                           	callstack 0
  3840                           
  3841 ;; *************** function ___fladd *****************
  3842 ;; Defined at:
  3843 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  b               4    1[COMRAM] long 
  3846 ;;  a               4    5[COMRAM] long 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  grs             1   16[COMRAM] unsigned char 
  3849 ;;  bexp            1   15[COMRAM] unsigned char 
  3850 ;;  aexp            1   14[COMRAM] unsigned char 
  3851 ;;  signs           1   13[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  4    1[COMRAM] unsigned char 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3861 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3864 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;Total ram usage:       16 bytes
  3866 ;; Hardware stack levels used: 1
  3867 ;; Hardware stack levels required when called: 1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_convert_rgb2hue
  3872 ;;		___flsub
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text12
  3877   00163C                     __ptext12:
  3878                           	callstack 0
  3879   00163C                     ___fladd:
  3880                           	callstack 26
  3881   00163C  5005               	movf	(___fladd@b+3)^0,w,c
  3882   00163E  0B80               	andlw	128
  3883   001640  6E0E               	movwf	___fladd@signs^0,c
  3884   001642  5005               	movf	(___fladd@b+3)^0,w,c
  3885   001644  2405               	addwf	(___fladd@b+3)^0,w,c
  3886   001646  6E10               	movwf	___fladd@bexp^0,c
  3887   001648  AE04               	btfss	(___fladd@b+2)^0,7,c
  3888   00164A  EF29  F00B         	goto	u2791
  3889   00164E  EF2B  F00B         	goto	u2790
  3890   001652                     u2791:
  3891   001652  EF2C  F00B         	goto	l3674
  3892   001656                     u2790:
  3893   001656  8010               	bsf	___fladd@bexp^0,0,c
  3894   001658                     l3674:
  3895   001658  5010               	movf	___fladd@bexp^0,w,c
  3896   00165A  B4D8               	btfsc	status,2,c
  3897   00165C  EF32  F00B         	goto	u2801
  3898   001660  EF34  F00B         	goto	u2800
  3899   001664                     u2801:
  3900   001664  EF49  F00B         	goto	l3684
  3901   001668                     u2800:
  3902   001668  2810               	incf	___fladd@bexp^0,w,c
  3903   00166A  A4D8               	btfss	status,2,c
  3904   00166C  EF3A  F00B         	goto	u2811
  3905   001670  EF3C  F00B         	goto	u2810
  3906   001674                     u2811:
  3907   001674  EF44  F00B         	goto	l3680
  3908   001678                     u2810:
  3909   001678  0E00               	movlw	0
  3910   00167A  6E02               	movwf	___fladd@b^0,c
  3911   00167C  0E00               	movlw	0
  3912   00167E  6E03               	movwf	(___fladd@b+1)^0,c
  3913   001680  0E00               	movlw	0
  3914   001682  6E04               	movwf	(___fladd@b+2)^0,c
  3915   001684  0E00               	movlw	0
  3916   001686  6E05               	movwf	(___fladd@b+3)^0,c
  3917   001688                     l3680:
  3918   001688  8E04               	bsf	(___fladd@b+2)^0,7,c
  3919   00168A  0E00               	movlw	0
  3920   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  3921   00168E  EF51  F00B         	goto	l3686
  3922   001692                     l3684:
  3923   001692  0E00               	movlw	0
  3924   001694  6E02               	movwf	___fladd@b^0,c
  3925   001696  0E00               	movlw	0
  3926   001698  6E03               	movwf	(___fladd@b+1)^0,c
  3927   00169A  0E00               	movlw	0
  3928   00169C  6E04               	movwf	(___fladd@b+2)^0,c
  3929   00169E  0E00               	movlw	0
  3930   0016A0  6E05               	movwf	(___fladd@b+3)^0,c
  3931   0016A2                     l3686:
  3932   0016A2  5009               	movf	(___fladd@a+3)^0,w,c
  3933   0016A4  0B80               	andlw	128
  3934   0016A6  6E0F               	movwf	___fladd@aexp^0,c
  3935   0016A8  500E               	movf	___fladd@signs^0,w,c
  3936   0016AA  180F               	xorwf	___fladd@aexp^0,w,c
  3937   0016AC  B4D8               	btfsc	status,2,c
  3938   0016AE  EF5B  F00B         	goto	u2821
  3939   0016B2  EF5D  F00B         	goto	u2820
  3940   0016B6                     u2821:
  3941   0016B6  EF5E  F00B         	goto	l3692
  3942   0016BA                     u2820:
  3943   0016BA  8C0E               	bsf	___fladd@signs^0,6,c
  3944   0016BC                     l3692:
  3945   0016BC  5009               	movf	(___fladd@a+3)^0,w,c
  3946   0016BE  2409               	addwf	(___fladd@a+3)^0,w,c
  3947   0016C0  6E0F               	movwf	___fladd@aexp^0,c
  3948   0016C2  AE08               	btfss	(___fladd@a+2)^0,7,c
  3949   0016C4  EF66  F00B         	goto	u2831
  3950   0016C8  EF68  F00B         	goto	u2830
  3951   0016CC                     u2831:
  3952   0016CC  EF69  F00B         	goto	l3698
  3953   0016D0                     u2830:
  3954   0016D0  800F               	bsf	___fladd@aexp^0,0,c
  3955   0016D2                     l3698:
  3956   0016D2  500F               	movf	___fladd@aexp^0,w,c
  3957   0016D4  B4D8               	btfsc	status,2,c
  3958   0016D6  EF6F  F00B         	goto	u2841
  3959   0016DA  EF71  F00B         	goto	u2840
  3960   0016DE                     u2841:
  3961   0016DE  EF86  F00B         	goto	l3708
  3962   0016E2                     u2840:
  3963   0016E2  280F               	incf	___fladd@aexp^0,w,c
  3964   0016E4  A4D8               	btfss	status,2,c
  3965   0016E6  EF77  F00B         	goto	u2851
  3966   0016EA  EF79  F00B         	goto	u2850
  3967   0016EE                     u2851:
  3968   0016EE  EF81  F00B         	goto	l3704
  3969   0016F2                     u2850:
  3970   0016F2  0E00               	movlw	0
  3971   0016F4  6E06               	movwf	___fladd@a^0,c
  3972   0016F6  0E00               	movlw	0
  3973   0016F8  6E07               	movwf	(___fladd@a+1)^0,c
  3974   0016FA  0E00               	movlw	0
  3975   0016FC  6E08               	movwf	(___fladd@a+2)^0,c
  3976   0016FE  0E00               	movlw	0
  3977   001700  6E09               	movwf	(___fladd@a+3)^0,c
  3978   001702                     l3704:
  3979   001702  8E08               	bsf	(___fladd@a+2)^0,7,c
  3980   001704  0E00               	movlw	0
  3981   001706  6E09               	movwf	(___fladd@a+3)^0,c
  3982   001708  EF8E  F00B         	goto	l3710
  3983   00170C                     l3708:
  3984   00170C  0E00               	movlw	0
  3985   00170E  6E06               	movwf	___fladd@a^0,c
  3986   001710  0E00               	movlw	0
  3987   001712  6E07               	movwf	(___fladd@a+1)^0,c
  3988   001714  0E00               	movlw	0
  3989   001716  6E08               	movwf	(___fladd@a+2)^0,c
  3990   001718  0E00               	movlw	0
  3991   00171A  6E09               	movwf	(___fladd@a+3)^0,c
  3992   00171C                     l3710:
  3993   00171C  5010               	movf	___fladd@bexp^0,w,c
  3994   00171E  5C0F               	subwf	___fladd@aexp^0,w,c
  3995   001720  B0D8               	btfsc	status,0,c
  3996   001722  EF95  F00B         	goto	u2861
  3997   001726  EF97  F00B         	goto	u2860
  3998   00172A                     u2861:
  3999   00172A  EFBE  F00B         	goto	l3746
  4000   00172E                     u2860:
  4001   00172E  AC0E               	btfss	___fladd@signs^0,6,c
  4002   001730  EF9C  F00B         	goto	u2871
  4003   001734  EF9E  F00B         	goto	u2870
  4004   001738                     u2871:
  4005   001738  EFA0  F00B         	goto	l3716
  4006   00173C                     u2870:
  4007   00173C  0E80               	movlw	128
  4008   00173E  1A0E               	xorwf	___fladd@signs^0,f,c
  4009   001740                     l3716:
  4010   001740  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4011   001744  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4012   001748  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4013   00174C  C002  F011         	movff	___fladd@b,___fladd@grs
  4014   001750  C006  F002         	movff	___fladd@a,___fladd@b
  4015   001754  C011  F006         	movff	___fladd@grs,___fladd@a
  4016   001758  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4017   00175C  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4018   001760  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4019   001764  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4020   001768  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4021   00176C  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4022   001770  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4023   001774  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4024   001778  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4025   00177C                     l3746:
  4026   00177C  0E00               	movlw	0
  4027   00177E  6E11               	movwf	___fladd@grs^0,c
  4028   001780  5010               	movf	___fladd@bexp^0,w,c
  4029   001782  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4030   001786  6A0B               	clrf	(??___fladd+1)^0,c
  4031   001788  5E0A               	subwf	??___fladd^0,f,c
  4032   00178A  0E00               	movlw	0
  4033   00178C  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4034   00178E  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4035   001790  EFD3  F00B         	goto	u2881
  4036   001794  500B               	movf	(??___fladd+1)^0,w,c
  4037   001796  E109               	bnz	u2880
  4038   001798  0E1A               	movlw	26
  4039   00179A  5C0A               	subwf	??___fladd^0,w,c
  4040   00179C  A0D8               	btfss	status,0,c
  4041   00179E  EFD3  F00B         	goto	u2881
  4042   0017A2  EFD5  F00B         	goto	u2880
  4043   0017A6                     u2881:
  4044   0017A6  EF0C  F00C         	goto	l1199
  4045   0017AA                     u2880:
  4046   0017AA  5002               	movf	___fladd@b^0,w,c
  4047   0017AC  1003               	iorwf	(___fladd@b+1)^0,w,c
  4048   0017AE  1004               	iorwf	(___fladd@b+2)^0,w,c
  4049   0017B0  1005               	iorwf	(___fladd@b+3)^0,w,c
  4050   0017B2  A4D8               	btfss	status,2,c
  4051   0017B4  EFDE  F00B         	goto	u2891
  4052   0017B8  EFE1  F00B         	goto	u2890
  4053   0017BC                     u2891:
  4054   0017BC  0E01               	movlw	1
  4055   0017BE  EFE2  F00B         	goto	u2900
  4056   0017C2                     u2890:
  4057   0017C2  0E00               	movlw	0
  4058   0017C4                     u2900:
  4059   0017C4  6E11               	movwf	___fladd@grs^0,c
  4060   0017C6  0E00               	movlw	0
  4061   0017C8  6E02               	movwf	___fladd@b^0,c
  4062   0017CA  0E00               	movlw	0
  4063   0017CC  6E03               	movwf	(___fladd@b+1)^0,c
  4064   0017CE  0E00               	movlw	0
  4065   0017D0  6E04               	movwf	(___fladd@b+2)^0,c
  4066   0017D2  0E00               	movlw	0
  4067   0017D4  6E05               	movwf	(___fladd@b+3)^0,c
  4068   0017D6  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4069   0017DA  EF15  F00C         	goto	l1198
  4070   0017DE                     l1200:
  4071   0017DE  A011               	btfss	___fladd@grs^0,0,c
  4072   0017E0  EFF4  F00B         	goto	u2911
  4073   0017E4  EFF6  F00B         	goto	u2910
  4074   0017E8                     u2911:
  4075   0017E8  EFFC  F00B         	goto	l3758
  4076   0017EC                     u2910:
  4077   0017EC  90D8               	bcf	status,0,c
  4078   0017EE  3011               	rrcf	___fladd@grs^0,w,c
  4079   0017F0  0901               	iorlw	1
  4080   0017F2  6E11               	movwf	___fladd@grs^0,c
  4081   0017F4  EFFE  F00B         	goto	l3760
  4082   0017F8                     l3758:
  4083   0017F8  90D8               	bcf	status,0,c
  4084   0017FA  3211               	rrcf	___fladd@grs^0,f,c
  4085   0017FC                     l3760:
  4086   0017FC  A002               	btfss	___fladd@b^0,0,c
  4087   0017FE  EF03  F00C         	goto	u2921
  4088   001802  EF05  F00C         	goto	u2920
  4089   001806                     u2921:
  4090   001806  EF06  F00C         	goto	l3764
  4091   00180A                     u2920:
  4092   00180A  8E11               	bsf	___fladd@grs^0,7,c
  4093   00180C                     l3764:
  4094   00180C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4095   00180E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4096   001810  3204               	rrcf	(___fladd@b+2)^0,f,c
  4097   001812  3203               	rrcf	(___fladd@b+1)^0,f,c
  4098   001814  3202               	rrcf	___fladd@b^0,f,c
  4099   001816  2A10               	incf	___fladd@bexp^0,f,c
  4100   001818                     l1199:
  4101   001818  500F               	movf	___fladd@aexp^0,w,c
  4102   00181A  5C10               	subwf	___fladd@bexp^0,w,c
  4103   00181C  A0D8               	btfss	status,0,c
  4104   00181E  EF13  F00C         	goto	u2931
  4105   001822  EF15  F00C         	goto	u2930
  4106   001826                     u2931:
  4107   001826  EFEF  F00B         	goto	l1200
  4108   00182A                     u2930:
  4109   00182A                     l1198:
  4110   00182A  BC0E               	btfsc	___fladd@signs^0,6,c
  4111   00182C  EF1A  F00C         	goto	u2941
  4112   001830  EF1C  F00C         	goto	u2940
  4113   001834                     u2941:
  4114   001834  EF5C  F00C         	goto	l3792
  4115   001838                     u2940:
  4116   001838  5010               	movf	___fladd@bexp^0,w,c
  4117   00183A  A4D8               	btfss	status,2,c
  4118   00183C  EF22  F00C         	goto	u2951
  4119   001840  EF24  F00C         	goto	u2950
  4120   001844                     u2951:
  4121   001844  EF2E  F00C         	goto	l3774
  4122   001848                     u2950:
  4123   001848  0E00               	movlw	0
  4124   00184A  6E02               	movwf	?___fladd^0,c
  4125   00184C  0E00               	movlw	0
  4126   00184E  6E03               	movwf	(?___fladd+1)^0,c
  4127   001850  0E00               	movlw	0
  4128   001852  6E04               	movwf	(?___fladd+2)^0,c
  4129   001854  0E00               	movlw	0
  4130   001856  6E05               	movwf	(?___fladd+3)^0,c
  4131   001858  EF7D  F00D         	goto	l1207
  4132   00185C                     l3774:
  4133   00185C  5006               	movf	___fladd@a^0,w,c
  4134   00185E  2602               	addwf	___fladd@b^0,f,c
  4135   001860  5007               	movf	(___fladd@a+1)^0,w,c
  4136   001862  2203               	addwfc	(___fladd@b+1)^0,f,c
  4137   001864  5008               	movf	(___fladd@a+2)^0,w,c
  4138   001866  2204               	addwfc	(___fladd@b+2)^0,f,c
  4139   001868  5009               	movf	(___fladd@a+3)^0,w,c
  4140   00186A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4141   00186C  A005               	btfss	(___fladd@b+3)^0,0,c
  4142   00186E  EF3B  F00C         	goto	u2961
  4143   001872  EF3D  F00C         	goto	u2960
  4144   001876                     u2961:
  4145   001876  EFE9  F00C         	goto	l3828
  4146   00187A                     u2960:
  4147   00187A  A011               	btfss	___fladd@grs^0,0,c
  4148   00187C  EF42  F00C         	goto	u2971
  4149   001880  EF44  F00C         	goto	u2970
  4150   001884                     u2971:
  4151   001884  EF4A  F00C         	goto	l3782
  4152   001888                     u2970:
  4153   001888  90D8               	bcf	status,0,c
  4154   00188A  3011               	rrcf	___fladd@grs^0,w,c
  4155   00188C  0901               	iorlw	1
  4156   00188E  6E11               	movwf	___fladd@grs^0,c
  4157   001890  EF4C  F00C         	goto	l3784
  4158   001894                     l3782:
  4159   001894  90D8               	bcf	status,0,c
  4160   001896  3211               	rrcf	___fladd@grs^0,f,c
  4161   001898                     l3784:
  4162   001898  A002               	btfss	___fladd@b^0,0,c
  4163   00189A  EF51  F00C         	goto	u2981
  4164   00189E  EF53  F00C         	goto	u2980
  4165   0018A2                     u2981:
  4166   0018A2  EF54  F00C         	goto	l3788
  4167   0018A6                     u2980:
  4168   0018A6  8E11               	bsf	___fladd@grs^0,7,c
  4169   0018A8                     l3788:
  4170   0018A8  3405               	rlcf	(___fladd@b+3)^0,w,c
  4171   0018AA  3205               	rrcf	(___fladd@b+3)^0,f,c
  4172   0018AC  3204               	rrcf	(___fladd@b+2)^0,f,c
  4173   0018AE  3203               	rrcf	(___fladd@b+1)^0,f,c
  4174   0018B0  3202               	rrcf	___fladd@b^0,f,c
  4175   0018B2  2A10               	incf	___fladd@bexp^0,f,c
  4176   0018B4  EFE9  F00C         	goto	l3828
  4177   0018B8                     l3792:
  4178   0018B8  5006               	movf	___fladd@a^0,w,c
  4179   0018BA  5C02               	subwf	___fladd@b^0,w,c
  4180   0018BC  5007               	movf	(___fladd@a+1)^0,w,c
  4181   0018BE  5803               	subwfb	(___fladd@b+1)^0,w,c
  4182   0018C0  5008               	movf	(___fladd@a+2)^0,w,c
  4183   0018C2  5804               	subwfb	(___fladd@b+2)^0,w,c
  4184   0018C4  5005               	movf	(___fladd@b+3)^0,w,c
  4185   0018C6  0A80               	xorlw	128
  4186   0018C8  6E0A               	movwf	??___fladd^0,c
  4187   0018CA  5009               	movf	(___fladd@a+3)^0,w,c
  4188   0018CC  0A80               	xorlw	128
  4189   0018CE  580A               	subwfb	??___fladd^0,w,c
  4190   0018D0  B0D8               	btfsc	status,0,c
  4191   0018D2  EF6D  F00C         	goto	u2991
  4192   0018D6  EF6F  F00C         	goto	u2990
  4193   0018DA                     u2991:
  4194   0018DA  EF9A  F00C         	goto	l3802
  4195   0018DE                     u2990:
  4196   0018DE  5002               	movf	___fladd@b^0,w,c
  4197   0018E0  5C06               	subwf	___fladd@a^0,w,c
  4198   0018E2  6E0A               	movwf	??___fladd^0,c
  4199   0018E4  5003               	movf	(___fladd@b+1)^0,w,c
  4200   0018E6  5807               	subwfb	(___fladd@a+1)^0,w,c
  4201   0018E8  6E0B               	movwf	(??___fladd+1)^0,c
  4202   0018EA  5004               	movf	(___fladd@b+2)^0,w,c
  4203   0018EC  5808               	subwfb	(___fladd@a+2)^0,w,c
  4204   0018EE  6E0C               	movwf	(??___fladd+2)^0,c
  4205   0018F0  5005               	movf	(___fladd@b+3)^0,w,c
  4206   0018F2  5809               	subwfb	(___fladd@a+3)^0,w,c
  4207   0018F4  6E0D               	movwf	(??___fladd+3)^0,c
  4208   0018F6  0EFF               	movlw	255
  4209   0018F8  240A               	addwf	??___fladd^0,w,c
  4210   0018FA  6E02               	movwf	___fladd@b^0,c
  4211   0018FC  0EFF               	movlw	255
  4212   0018FE  200B               	addwfc	(??___fladd+1)^0,w,c
  4213   001900  6E03               	movwf	(___fladd@b+1)^0,c
  4214   001902  0EFF               	movlw	255
  4215   001904  200C               	addwfc	(??___fladd+2)^0,w,c
  4216   001906  6E04               	movwf	(___fladd@b+2)^0,c
  4217   001908  0EFF               	movlw	255
  4218   00190A  200D               	addwfc	(??___fladd+3)^0,w,c
  4219   00190C  6E05               	movwf	(___fladd@b+3)^0,c
  4220   00190E  0E80               	movlw	128
  4221   001910  1A0E               	xorwf	___fladd@signs^0,f,c
  4222   001912  6C11               	negf	___fladd@grs^0,c
  4223   001914  5011               	movf	___fladd@grs^0,w,c
  4224   001916  A4D8               	btfss	status,2,c
  4225   001918  EF90  F00C         	goto	u3001
  4226   00191C  EF92  F00C         	goto	u3000
  4227   001920                     u3001:
  4228   001920  EFA2  F00C         	goto	l1215
  4229   001924                     u3000:
  4230   001924  0E01               	movlw	1
  4231   001926  2602               	addwf	___fladd@b^0,f,c
  4232   001928  0E00               	movlw	0
  4233   00192A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4234   00192C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4235   00192E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4236   001930  EFA2  F00C         	goto	l1215
  4237   001934                     l3802:
  4238   001934  5006               	movf	___fladd@a^0,w,c
  4239   001936  5E02               	subwf	___fladd@b^0,f,c
  4240   001938  5007               	movf	(___fladd@a+1)^0,w,c
  4241   00193A  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4242   00193C  5008               	movf	(___fladd@a+2)^0,w,c
  4243   00193E  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4244   001940  5009               	movf	(___fladd@a+3)^0,w,c
  4245   001942  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4246   001944                     l1215:
  4247   001944  5002               	movf	___fladd@b^0,w,c
  4248   001946  1003               	iorwf	(___fladd@b+1)^0,w,c
  4249   001948  1004               	iorwf	(___fladd@b+2)^0,w,c
  4250   00194A  1005               	iorwf	(___fladd@b+3)^0,w,c
  4251   00194C  A4D8               	btfss	status,2,c
  4252   00194E  EFAB  F00C         	goto	u3011
  4253   001952  EFAD  F00C         	goto	u3010
  4254   001956                     u3011:
  4255   001956  EFE2  F00C         	goto	l3826
  4256   00195A                     u3010:
  4257   00195A  5011               	movf	___fladd@grs^0,w,c
  4258   00195C  A4D8               	btfss	status,2,c
  4259   00195E  EFB3  F00C         	goto	u3021
  4260   001962  EFB5  F00C         	goto	u3020
  4261   001966                     u3021:
  4262   001966  EFE2  F00C         	goto	l3826
  4263   00196A                     u3020:
  4264   00196A  0E00               	movlw	0
  4265   00196C  6E02               	movwf	?___fladd^0,c
  4266   00196E  0E00               	movlw	0
  4267   001970  6E03               	movwf	(?___fladd+1)^0,c
  4268   001972  0E00               	movlw	0
  4269   001974  6E04               	movwf	(?___fladd+2)^0,c
  4270   001976  0E00               	movlw	0
  4271   001978  6E05               	movwf	(?___fladd+3)^0,c
  4272   00197A  EF7D  F00D         	goto	l1207
  4273   00197E                     l3810:
  4274   00197E  90D8               	bcf	status,0,c
  4275   001980  3602               	rlcf	___fladd@b^0,f,c
  4276   001982  3603               	rlcf	(___fladd@b+1)^0,f,c
  4277   001984  3604               	rlcf	(___fladd@b+2)^0,f,c
  4278   001986  3605               	rlcf	(___fladd@b+3)^0,f,c
  4279   001988  AE11               	btfss	___fladd@grs^0,7,c
  4280   00198A  EFC9  F00C         	goto	u3031
  4281   00198E  EFCB  F00C         	goto	u3030
  4282   001992                     u3031:
  4283   001992  EFCC  F00C         	goto	l3816
  4284   001996                     u3030:
  4285   001996  8002               	bsf	___fladd@b^0,0,c
  4286   001998                     l3816:
  4287   001998  A011               	btfss	___fladd@grs^0,0,c
  4288   00199A  EFD1  F00C         	goto	u3041
  4289   00199E  EFD3  F00C         	goto	u3040
  4290   0019A2                     u3041:
  4291   0019A2  EFD7  F00C         	goto	l3820
  4292   0019A6                     u3040:
  4293   0019A6  80D8               	bsf	status,0,c
  4294   0019A8  3611               	rlcf	___fladd@grs^0,f,c
  4295   0019AA  EFD9  F00C         	goto	l3822
  4296   0019AE                     l3820:
  4297   0019AE  90D8               	bcf	status,0,c
  4298   0019B0  3611               	rlcf	___fladd@grs^0,f,c
  4299   0019B2                     l3822:
  4300   0019B2  5010               	movf	___fladd@bexp^0,w,c
  4301   0019B4  B4D8               	btfsc	status,2,c
  4302   0019B6  EFDF  F00C         	goto	u3051
  4303   0019BA  EFE1  F00C         	goto	u3050
  4304   0019BE                     u3051:
  4305   0019BE  EFE2  F00C         	goto	l3826
  4306   0019C2                     u3050:
  4307   0019C2  0610               	decf	___fladd@bexp^0,f,c
  4308   0019C4                     l3826:
  4309   0019C4  AE04               	btfss	(___fladd@b+2)^0,7,c
  4310   0019C6  EFE7  F00C         	goto	u3061
  4311   0019CA  EFE9  F00C         	goto	u3060
  4312   0019CE                     u3061:
  4313   0019CE  EFBF  F00C         	goto	l3810
  4314   0019D2                     u3060:
  4315   0019D2                     l3828:
  4316   0019D2  0E00               	movlw	0
  4317   0019D4  6E0F               	movwf	___fladd@aexp^0,c
  4318   0019D6  AE11               	btfss	___fladd@grs^0,7,c
  4319   0019D8  EFF0  F00C         	goto	u3071
  4320   0019DC  EFF2  F00C         	goto	u3070
  4321   0019E0                     u3071:
  4322   0019E0  EF0A  F00D         	goto	l1224
  4323   0019E4                     u3070:
  4324   0019E4  C011  F00A         	movff	___fladd@grs,??___fladd
  4325   0019E8  0E7F               	movlw	127
  4326   0019EA  160A               	andwf	??___fladd^0,f,c
  4327   0019EC  B4D8               	btfsc	status,2,c
  4328   0019EE  EFFB  F00C         	goto	u3081
  4329   0019F2  EFFD  F00C         	goto	u3080
  4330   0019F6                     u3081:
  4331   0019F6  EF01  F00D         	goto	l1225
  4332   0019FA                     u3080:
  4333   0019FA                     l3834:
  4334   0019FA  0E01               	movlw	1
  4335   0019FC  6E0F               	movwf	___fladd@aexp^0,c
  4336   0019FE  EF0A  F00D         	goto	l1224
  4337   001A02                     l1225:
  4338   001A02  A002               	btfss	___fladd@b^0,0,c
  4339   001A04  EF06  F00D         	goto	u3091
  4340   001A08  EF08  F00D         	goto	u3090
  4341   001A0C                     u3091:
  4342   001A0C  EF0A  F00D         	goto	l1224
  4343   001A10                     u3090:
  4344   001A10  EFFD  F00C         	goto	l3834
  4345   001A14                     l1224:
  4346   001A14  500F               	movf	___fladd@aexp^0,w,c
  4347   001A16  B4D8               	btfsc	status,2,c
  4348   001A18  EF10  F00D         	goto	u3101
  4349   001A1C  EF12  F00D         	goto	u3100
  4350   001A20                     u3101:
  4351   001A20  EF3D  F00D         	goto	l3846
  4352   001A24                     u3100:
  4353   001A24  0E01               	movlw	1
  4354   001A26  2602               	addwf	___fladd@b^0,f,c
  4355   001A28  0E00               	movlw	0
  4356   001A2A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4357   001A2C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4358   001A2E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4359   001A30  A005               	btfss	(___fladd@b+3)^0,0,c
  4360   001A32  EF1D  F00D         	goto	u3111
  4361   001A36  EF1F  F00D         	goto	u3110
  4362   001A3A                     u3111:
  4363   001A3A  EF3D  F00D         	goto	l3846
  4364   001A3E                     u3110:
  4365   001A3E  C002  F00A         	movff	___fladd@b,??___fladd
  4366   001A42  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4367   001A46  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4368   001A4A  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4369   001A4E  340D               	rlcf	(??___fladd+3)^0,w,c
  4370   001A50  320D               	rrcf	(??___fladd+3)^0,f,c
  4371   001A52  320C               	rrcf	(??___fladd+2)^0,f,c
  4372   001A54  320B               	rrcf	(??___fladd+1)^0,f,c
  4373   001A56  320A               	rrcf	??___fladd^0,f,c
  4374   001A58  C00A  F002         	movff	??___fladd,___fladd@b
  4375   001A5C  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4376   001A60  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4377   001A64  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4378   001A68  2810               	incf	___fladd@bexp^0,w,c
  4379   001A6A  B4D8               	btfsc	status,2,c
  4380   001A6C  EF3A  F00D         	goto	u3121
  4381   001A70  EF3C  F00D         	goto	u3120
  4382   001A74                     u3121:
  4383   001A74  EF3D  F00D         	goto	l3846
  4384   001A78                     u3120:
  4385   001A78  2A10               	incf	___fladd@bexp^0,f,c
  4386   001A7A                     l3846:
  4387   001A7A  2810               	incf	___fladd@bexp^0,w,c
  4388   001A7C  B4D8               	btfsc	status,2,c
  4389   001A7E  EF43  F00D         	goto	u3131
  4390   001A82  EF45  F00D         	goto	u3130
  4391   001A86                     u3131:
  4392   001A86  EF4D  F00D         	goto	l3850
  4393   001A8A                     u3130:
  4394   001A8A  5010               	movf	___fladd@bexp^0,w,c
  4395   001A8C  A4D8               	btfss	status,2,c
  4396   001A8E  EF4B  F00D         	goto	u3141
  4397   001A92  EF4D  F00D         	goto	u3140
  4398   001A96                     u3141:
  4399   001A96  EF5F  F00D         	goto	l3854
  4400   001A9A                     u3140:
  4401   001A9A                     l3850:
  4402   001A9A  0E00               	movlw	0
  4403   001A9C  6E02               	movwf	___fladd@b^0,c
  4404   001A9E  0E00               	movlw	0
  4405   001AA0  6E03               	movwf	(___fladd@b+1)^0,c
  4406   001AA2  0E00               	movlw	0
  4407   001AA4  6E04               	movwf	(___fladd@b+2)^0,c
  4408   001AA6  0E00               	movlw	0
  4409   001AA8  6E05               	movwf	(___fladd@b+3)^0,c
  4410   001AAA  5010               	movf	___fladd@bexp^0,w,c
  4411   001AAC  A4D8               	btfss	status,2,c
  4412   001AAE  EF5B  F00D         	goto	u3151
  4413   001AB2  EF5D  F00D         	goto	u3150
  4414   001AB6                     u3151:
  4415   001AB6  EF5F  F00D         	goto	l3854
  4416   001ABA                     u3150:
  4417   001ABA  0E00               	movlw	0
  4418   001ABC  6E0E               	movwf	___fladd@signs^0,c
  4419   001ABE                     l3854:
  4420   001ABE  A010               	btfss	___fladd@bexp^0,0,c
  4421   001AC0  EF64  F00D         	goto	u3161
  4422   001AC4  EF66  F00D         	goto	u3160
  4423   001AC8                     u3161:
  4424   001AC8  EF69  F00D         	goto	l3858
  4425   001ACC                     u3160:
  4426   001ACC  8E04               	bsf	(___fladd@b+2)^0,7,c
  4427   001ACE  EF6A  F00D         	goto	l3860
  4428   001AD2                     l3858:
  4429   001AD2  9E04               	bcf	(___fladd@b+2)^0,7,c
  4430   001AD4                     l3860:
  4431   001AD4  90D8               	bcf	status,0,c
  4432   001AD6  3010               	rrcf	___fladd@bexp^0,w,c
  4433   001AD8  6E05               	movwf	(___fladd@b+3)^0,c
  4434   001ADA  AE0E               	btfss	___fladd@signs^0,7,c
  4435   001ADC  EF72  F00D         	goto	u3171
  4436   001AE0  EF74  F00D         	goto	u3170
  4437   001AE4                     u3171:
  4438   001AE4  EF75  F00D         	goto	l3866
  4439   001AE8                     u3170:
  4440   001AE8  8E05               	bsf	(___fladd@b+3)^0,7,c
  4441   001AEA                     l3866:
  4442   001AEA  C002  F002         	movff	___fladd@b,?___fladd
  4443   001AEE  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4444   001AF2  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4445   001AF6  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4446   001AFA                     l1207:
  4447   001AFA  0012               	return		;funcret
  4448   001AFC                     __end_of___fladd:
  4449                           	callstack 0
  4450                           
  4451 ;; *************** function ___flmul *****************
  4452 ;; Defined at:
  4453 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  b               4    1[COMRAM] unsigned char 
  4456 ;;  a               4    5[COMRAM] unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  prod            4   20[COMRAM] struct .
  4459 ;;  grs             4   14[COMRAM] unsigned long 
  4460 ;;  temp            2   24[COMRAM] struct .
  4461 ;;  bexp            1   19[COMRAM] unsigned char 
  4462 ;;  aexp            1   18[COMRAM] unsigned char 
  4463 ;;  sign            1   13[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  4    1[COMRAM] unsigned char 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, prodl, prodh
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4473 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4474 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4475 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4476 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4477 ;;Total ram usage:       25 bytes
  4478 ;; Hardware stack levels used: 1
  4479 ;; Hardware stack levels required when called: 1
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_convert_rgb2hue
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text13
  4489   001AFC                     __ptext13:
  4490                           	callstack 0
  4491   001AFC                     ___flmul:
  4492                           	callstack 27
  4493   001AFC  5005               	movf	(___flmul@b+3)^0,w,c
  4494   001AFE  0B80               	andlw	128
  4495   001B00  6E0E               	movwf	___flmul@sign^0,c
  4496   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4497   001B04  2405               	addwf	(___flmul@b+3)^0,w,c
  4498   001B06  6E14               	movwf	___flmul@bexp^0,c
  4499   001B08  AE04               	btfss	(___flmul@b+2)^0,7,c
  4500   001B0A  EF89  F00D         	goto	u3481
  4501   001B0E  EF8B  F00D         	goto	u3480
  4502   001B12                     u3481:
  4503   001B12  EF8C  F00D         	goto	l4152
  4504   001B16                     u3480:
  4505   001B16  8014               	bsf	___flmul@bexp^0,0,c
  4506   001B18                     l4152:
  4507   001B18  5014               	movf	___flmul@bexp^0,w,c
  4508   001B1A  B4D8               	btfsc	status,2,c
  4509   001B1C  EF92  F00D         	goto	u3491
  4510   001B20  EF94  F00D         	goto	u3490
  4511   001B24                     u3491:
  4512   001B24  EFA7  F00D         	goto	l4160
  4513   001B28                     u3490:
  4514   001B28  2814               	incf	___flmul@bexp^0,w,c
  4515   001B2A  A4D8               	btfss	status,2,c
  4516   001B2C  EF9A  F00D         	goto	u3501
  4517   001B30  EF9C  F00D         	goto	u3500
  4518   001B34                     u3501:
  4519   001B34  EFA4  F00D         	goto	l4158
  4520   001B38                     u3500:
  4521   001B38  0E00               	movlw	0
  4522   001B3A  6E02               	movwf	___flmul@b^0,c
  4523   001B3C  0E00               	movlw	0
  4524   001B3E  6E03               	movwf	(___flmul@b+1)^0,c
  4525   001B40  0E00               	movlw	0
  4526   001B42  6E04               	movwf	(___flmul@b+2)^0,c
  4527   001B44  0E00               	movlw	0
  4528   001B46  6E05               	movwf	(___flmul@b+3)^0,c
  4529   001B48                     l4158:
  4530   001B48  8E04               	bsf	(___flmul@b+2)^0,7,c
  4531   001B4A  EFAF  F00D         	goto	l4162
  4532   001B4E                     l4160:
  4533   001B4E  0E00               	movlw	0
  4534   001B50  6E02               	movwf	___flmul@b^0,c
  4535   001B52  0E00               	movlw	0
  4536   001B54  6E03               	movwf	(___flmul@b+1)^0,c
  4537   001B56  0E00               	movlw	0
  4538   001B58  6E04               	movwf	(___flmul@b+2)^0,c
  4539   001B5A  0E00               	movlw	0
  4540   001B5C  6E05               	movwf	(___flmul@b+3)^0,c
  4541   001B5E                     l4162:
  4542   001B5E  5009               	movf	(___flmul@a+3)^0,w,c
  4543   001B60  0B80               	andlw	128
  4544   001B62  1A0E               	xorwf	___flmul@sign^0,f,c
  4545   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4546   001B66  2409               	addwf	(___flmul@a+3)^0,w,c
  4547   001B68  6E13               	movwf	___flmul@aexp^0,c
  4548   001B6A  AE08               	btfss	(___flmul@a+2)^0,7,c
  4549   001B6C  EFBA  F00D         	goto	u3511
  4550   001B70  EFBC  F00D         	goto	u3510
  4551   001B74                     u3511:
  4552   001B74  EFBD  F00D         	goto	l4170
  4553   001B78                     u3510:
  4554   001B78  8013               	bsf	___flmul@aexp^0,0,c
  4555   001B7A                     l4170:
  4556   001B7A  5013               	movf	___flmul@aexp^0,w,c
  4557   001B7C  B4D8               	btfsc	status,2,c
  4558   001B7E  EFC3  F00D         	goto	u3521
  4559   001B82  EFC5  F00D         	goto	u3520
  4560   001B86                     u3521:
  4561   001B86  EFD8  F00D         	goto	l4178
  4562   001B8A                     u3520:
  4563   001B8A  2813               	incf	___flmul@aexp^0,w,c
  4564   001B8C  A4D8               	btfss	status,2,c
  4565   001B8E  EFCB  F00D         	goto	u3531
  4566   001B92  EFCD  F00D         	goto	u3530
  4567   001B96                     u3531:
  4568   001B96  EFD5  F00D         	goto	l4176
  4569   001B9A                     u3530:
  4570   001B9A  0E00               	movlw	0
  4571   001B9C  6E06               	movwf	___flmul@a^0,c
  4572   001B9E  0E00               	movlw	0
  4573   001BA0  6E07               	movwf	(___flmul@a+1)^0,c
  4574   001BA2  0E00               	movlw	0
  4575   001BA4  6E08               	movwf	(___flmul@a+2)^0,c
  4576   001BA6  0E00               	movlw	0
  4577   001BA8  6E09               	movwf	(___flmul@a+3)^0,c
  4578   001BAA                     l4176:
  4579   001BAA  8E08               	bsf	(___flmul@a+2)^0,7,c
  4580   001BAC  EFE0  F00D         	goto	l1284
  4581   001BB0                     l4178:
  4582   001BB0  0E00               	movlw	0
  4583   001BB2  6E06               	movwf	___flmul@a^0,c
  4584   001BB4  0E00               	movlw	0
  4585   001BB6  6E07               	movwf	(___flmul@a+1)^0,c
  4586   001BB8  0E00               	movlw	0
  4587   001BBA  6E08               	movwf	(___flmul@a+2)^0,c
  4588   001BBC  0E00               	movlw	0
  4589   001BBE  6E09               	movwf	(___flmul@a+3)^0,c
  4590   001BC0                     l1284:
  4591   001BC0  5013               	movf	___flmul@aexp^0,w,c
  4592   001BC2  B4D8               	btfsc	status,2,c
  4593   001BC4  EFE6  F00D         	goto	u3541
  4594   001BC8  EFE8  F00D         	goto	u3540
  4595   001BCC                     u3541:
  4596   001BCC  EFF0  F00D         	goto	l4182
  4597   001BD0                     u3540:
  4598   001BD0  5014               	movf	___flmul@bexp^0,w,c
  4599   001BD2  A4D8               	btfss	status,2,c
  4600   001BD4  EFEE  F00D         	goto	u3551
  4601   001BD8  EFF0  F00D         	goto	u3550
  4602   001BDC                     u3551:
  4603   001BDC  EFFA  F00D         	goto	l4186
  4604   001BE0                     u3550:
  4605   001BE0                     l4182:
  4606   001BE0  0E00               	movlw	0
  4607   001BE2  6E02               	movwf	?___flmul^0,c
  4608   001BE4  0E00               	movlw	0
  4609   001BE6  6E03               	movwf	(?___flmul+1)^0,c
  4610   001BE8  0E00               	movlw	0
  4611   001BEA  6E04               	movwf	(?___flmul+2)^0,c
  4612   001BEC  0E00               	movlw	0
  4613   001BEE  6E05               	movwf	(?___flmul+3)^0,c
  4614   001BF0  EF92  F00F         	goto	l1288
  4615   001BF4                     l4186:
  4616   001BF4  5008               	movf	(___flmul@a+2)^0,w,c
  4617   001BF6  0202               	mulwf	___flmul@b^0,c
  4618   001BF8  CFF3 F019          	movff	prodl,___flmul@temp
  4619   001BFC  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4620   001C00  5019               	movf	___flmul@temp^0,w,c
  4621   001C02  6E0F               	movwf	___flmul@grs^0,c
  4622   001C04  6A10               	clrf	(___flmul@grs+1)^0,c
  4623   001C06  6A11               	clrf	(___flmul@grs+2)^0,c
  4624   001C08  6A12               	clrf	(___flmul@grs+3)^0,c
  4625   001C0A  501A               	movf	(___flmul@temp+1)^0,w,c
  4626   001C0C  6E15               	movwf	___flmul@prod^0,c
  4627   001C0E  6A16               	clrf	(___flmul@prod+1)^0,c
  4628   001C10  6A17               	clrf	(___flmul@prod+2)^0,c
  4629   001C12  6A18               	clrf	(___flmul@prod+3)^0,c
  4630   001C14  5007               	movf	(___flmul@a+1)^0,w,c
  4631   001C16  0203               	mulwf	(___flmul@b+1)^0,c
  4632   001C18  CFF3 F019          	movff	prodl,___flmul@temp
  4633   001C1C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4634   001C20  5019               	movf	___flmul@temp^0,w,c
  4635   001C22  260F               	addwf	___flmul@grs^0,f,c
  4636   001C24  0E00               	movlw	0
  4637   001C26  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4638   001C28  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4639   001C2A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4640   001C2C  501A               	movf	(___flmul@temp+1)^0,w,c
  4641   001C2E  2615               	addwf	___flmul@prod^0,f,c
  4642   001C30  0E00               	movlw	0
  4643   001C32  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4644   001C34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4645   001C36  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4646   001C38  5006               	movf	___flmul@a^0,w,c
  4647   001C3A  0204               	mulwf	(___flmul@b+2)^0,c
  4648   001C3C  CFF3 F019          	movff	prodl,___flmul@temp
  4649   001C40  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4650   001C44  5019               	movf	___flmul@temp^0,w,c
  4651   001C46  260F               	addwf	___flmul@grs^0,f,c
  4652   001C48  0E00               	movlw	0
  4653   001C4A  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4654   001C4C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4655   001C4E  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4656   001C50  501A               	movf	(___flmul@temp+1)^0,w,c
  4657   001C52  2615               	addwf	___flmul@prod^0,f,c
  4658   001C54  0E00               	movlw	0
  4659   001C56  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4660   001C58  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4661   001C5A  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4662   001C5C  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4663   001C60  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4664   001C64  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4665   001C68  6A0F               	clrf	___flmul@grs^0,c
  4666   001C6A  5006               	movf	___flmul@a^0,w,c
  4667   001C6C  0203               	mulwf	(___flmul@b+1)^0,c
  4668   001C6E  CFF3 F019          	movff	prodl,___flmul@temp
  4669   001C72  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4670   001C76  5019               	movf	___flmul@temp^0,w,c
  4671   001C78  260F               	addwf	___flmul@grs^0,f,c
  4672   001C7A  501A               	movf	(___flmul@temp+1)^0,w,c
  4673   001C7C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4674   001C7E  0E00               	movlw	0
  4675   001C80  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4676   001C82  0E00               	movlw	0
  4677   001C84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4678   001C86  5007               	movf	(___flmul@a+1)^0,w,c
  4679   001C88  0202               	mulwf	___flmul@b^0,c
  4680   001C8A  CFF3 F019          	movff	prodl,___flmul@temp
  4681   001C8E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4682   001C92  5019               	movf	___flmul@temp^0,w,c
  4683   001C94  260F               	addwf	___flmul@grs^0,f,c
  4684   001C96  501A               	movf	(___flmul@temp+1)^0,w,c
  4685   001C98  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4686   001C9A  0E00               	movlw	0
  4687   001C9C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4688   001C9E  0E00               	movlw	0
  4689   001CA0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4690   001CA2  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4691   001CA6  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4692   001CAA  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4693   001CAE  6A0F               	clrf	___flmul@grs^0,c
  4694   001CB0  5006               	movf	___flmul@a^0,w,c
  4695   001CB2  0202               	mulwf	___flmul@b^0,c
  4696   001CB4  CFF3 F019          	movff	prodl,___flmul@temp
  4697   001CB8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4698   001CBC  5019               	movf	___flmul@temp^0,w,c
  4699   001CBE  260F               	addwf	___flmul@grs^0,f,c
  4700   001CC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4701   001CC2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4702   001CC4  0E00               	movlw	0
  4703   001CC6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4704   001CC8  0E00               	movlw	0
  4705   001CCA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4706   001CCC  5008               	movf	(___flmul@a+2)^0,w,c
  4707   001CCE  0203               	mulwf	(___flmul@b+1)^0,c
  4708   001CD0  CFF3 F019          	movff	prodl,___flmul@temp
  4709   001CD4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4710   001CD8  5019               	movf	___flmul@temp^0,w,c
  4711   001CDA  2615               	addwf	___flmul@prod^0,f,c
  4712   001CDC  501A               	movf	(___flmul@temp+1)^0,w,c
  4713   001CDE  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4714   001CE0  0E00               	movlw	0
  4715   001CE2  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4716   001CE4  0E00               	movlw	0
  4717   001CE6  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4718   001CE8  5007               	movf	(___flmul@a+1)^0,w,c
  4719   001CEA  0204               	mulwf	(___flmul@b+2)^0,c
  4720   001CEC  CFF3 F019          	movff	prodl,___flmul@temp
  4721   001CF0  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4722   001CF4  5019               	movf	___flmul@temp^0,w,c
  4723   001CF6  2615               	addwf	___flmul@prod^0,f,c
  4724   001CF8  501A               	movf	(___flmul@temp+1)^0,w,c
  4725   001CFA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4726   001CFC  0E00               	movlw	0
  4727   001CFE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4728   001D00  0E00               	movlw	0
  4729   001D02  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4730   001D04  5008               	movf	(___flmul@a+2)^0,w,c
  4731   001D06  0204               	mulwf	(___flmul@b+2)^0,c
  4732   001D08  CFF3 F019          	movff	prodl,___flmul@temp
  4733   001D0C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4734   001D10  5019               	movf	___flmul@temp^0,w,c
  4735   001D12  6E0A               	movwf	??___flmul^0,c
  4736   001D14  501A               	movf	(___flmul@temp+1)^0,w,c
  4737   001D16  6E0B               	movwf	(??___flmul+1)^0,c
  4738   001D18  6A0C               	clrf	(??___flmul+2)^0,c
  4739   001D1A  6A0D               	clrf	(??___flmul+3)^0,c
  4740   001D1C  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4741   001D20  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4742   001D24  C00A  F00B         	movff	??___flmul,??___flmul+1
  4743   001D28  6A0A               	clrf	??___flmul^0,c
  4744   001D2A  500A               	movf	??___flmul^0,w,c
  4745   001D2C  2615               	addwf	___flmul@prod^0,f,c
  4746   001D2E  500B               	movf	(??___flmul+1)^0,w,c
  4747   001D30  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4748   001D32  500C               	movf	(??___flmul+2)^0,w,c
  4749   001D34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4750   001D36  500D               	movf	(??___flmul+3)^0,w,c
  4751   001D38  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4752   001D3A  C00F  F00A         	movff	___flmul@grs,??___flmul
  4753   001D3E  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4754   001D42  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4755   001D46  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4756   001D4A  0E19               	movlw	25
  4757   001D4C  EFAD  F00E         	goto	u3560
  4758   001D50                     u3565:
  4759   001D50  90D8               	bcf	status,0,c
  4760   001D52  320D               	rrcf	(??___flmul+3)^0,f,c
  4761   001D54  320C               	rrcf	(??___flmul+2)^0,f,c
  4762   001D56  320B               	rrcf	(??___flmul+1)^0,f,c
  4763   001D58  320A               	rrcf	??___flmul^0,f,c
  4764   001D5A                     u3560:
  4765   001D5A  2EE8               	decfsz	wreg,f,c
  4766   001D5C  EFA8  F00E         	goto	u3565
  4767   001D60  500A               	movf	??___flmul^0,w,c
  4768   001D62  2615               	addwf	___flmul@prod^0,f,c
  4769   001D64  500B               	movf	(??___flmul+1)^0,w,c
  4770   001D66  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4771   001D68  500C               	movf	(??___flmul+2)^0,w,c
  4772   001D6A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4773   001D6C  500D               	movf	(??___flmul+3)^0,w,c
  4774   001D6E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4775   001D70  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4776   001D74  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4777   001D78  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4778   001D7C  6A0F               	clrf	___flmul@grs^0,c
  4779   001D7E  5013               	movf	___flmul@aexp^0,w,c
  4780   001D80  C014  F00A         	movff	___flmul@bexp,??___flmul
  4781   001D84  6A0B               	clrf	(??___flmul+1)^0,c
  4782   001D86  260A               	addwf	??___flmul^0,f,c
  4783   001D88  0E00               	movlw	0
  4784   001D8A  220B               	addwfc	(??___flmul+1)^0,f,c
  4785   001D8C  0E82               	movlw	130
  4786   001D8E  240A               	addwf	??___flmul^0,w,c
  4787   001D90  6E19               	movwf	___flmul@temp^0,c
  4788   001D92  0EFF               	movlw	255
  4789   001D94  200B               	addwfc	(??___flmul+1)^0,w,c
  4790   001D96  6E1A               	movwf	(___flmul@temp+1)^0,c
  4791   001D98  EFE3  F00E         	goto	l4234
  4792   001D9C                     l4228:
  4793   001D9C  90D8               	bcf	status,0,c
  4794   001D9E  3615               	rlcf	___flmul@prod^0,f,c
  4795   001DA0  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4796   001DA2  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4797   001DA4  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4798   001DA6  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4799   001DA8  EFD8  F00E         	goto	u3571
  4800   001DAC  EFDA  F00E         	goto	u3570
  4801   001DB0                     u3571:
  4802   001DB0  EFDB  F00E         	goto	l1291
  4803   001DB4                     u3570:
  4804   001DB4  8015               	bsf	___flmul@prod^0,0,c
  4805   001DB6                     l1291:
  4806   001DB6  90D8               	bcf	status,0,c
  4807   001DB8  360F               	rlcf	___flmul@grs^0,f,c
  4808   001DBA  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4809   001DBC  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4810   001DBE  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4811   001DC0  0619               	decf	___flmul@temp^0,f,c
  4812   001DC2  A0D8               	btfss	status,0,c
  4813   001DC4  061A               	decf	(___flmul@temp+1)^0,f,c
  4814   001DC6                     l4234:
  4815   001DC6  AE17               	btfss	(___flmul@prod+2)^0,7,c
  4816   001DC8  EFE8  F00E         	goto	u3581
  4817   001DCC  EFEA  F00E         	goto	u3580
  4818   001DD0                     u3581:
  4819   001DD0  EFCE  F00E         	goto	l4228
  4820   001DD4                     u3580:
  4821   001DD4  0E00               	movlw	0
  4822   001DD6  6E13               	movwf	___flmul@aexp^0,c
  4823   001DD8  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4824   001DDA  EFF1  F00E         	goto	u3591
  4825   001DDE  EFF3  F00E         	goto	u3590
  4826   001DE2                     u3591:
  4827   001DE2  EF17  F00F         	goto	l1293
  4828   001DE6                     u3590:
  4829   001DE6  0EFF               	movlw	255
  4830   001DE8  140F               	andwf	___flmul@grs^0,w,c
  4831   001DEA  6E0A               	movwf	??___flmul^0,c
  4832   001DEC  0EFF               	movlw	255
  4833   001DEE  1410               	andwf	(___flmul@grs+1)^0,w,c
  4834   001DF0  6E0B               	movwf	(??___flmul+1)^0,c
  4835   001DF2  0EFF               	movlw	255
  4836   001DF4  1411               	andwf	(___flmul@grs+2)^0,w,c
  4837   001DF6  6E0C               	movwf	(??___flmul+2)^0,c
  4838   001DF8  0E7F               	movlw	127
  4839   001DFA  1412               	andwf	(___flmul@grs+3)^0,w,c
  4840   001DFC  6E0D               	movwf	(??___flmul+3)^0,c
  4841   001DFE  500A               	movf	??___flmul^0,w,c
  4842   001E00  100B               	iorwf	(??___flmul+1)^0,w,c
  4843   001E02  100C               	iorwf	(??___flmul+2)^0,w,c
  4844   001E04  100D               	iorwf	(??___flmul+3)^0,w,c
  4845   001E06  B4D8               	btfsc	status,2,c
  4846   001E08  EF08  F00F         	goto	u3601
  4847   001E0C  EF0A  F00F         	goto	u3600
  4848   001E10                     u3601:
  4849   001E10  EF0E  F00F         	goto	l1294
  4850   001E14                     u3600:
  4851   001E14                     l4242:
  4852   001E14  0E01               	movlw	1
  4853   001E16  6E13               	movwf	___flmul@aexp^0,c
  4854   001E18  EF17  F00F         	goto	l1293
  4855   001E1C                     l1294:
  4856   001E1C  A015               	btfss	___flmul@prod^0,0,c
  4857   001E1E  EF13  F00F         	goto	u3611
  4858   001E22  EF15  F00F         	goto	u3610
  4859   001E26                     u3611:
  4860   001E26  EF17  F00F         	goto	l1293
  4861   001E2A                     u3610:
  4862   001E2A  EF0A  F00F         	goto	l4242
  4863   001E2E                     l1293:
  4864   001E2E  5013               	movf	___flmul@aexp^0,w,c
  4865   001E30  B4D8               	btfsc	status,2,c
  4866   001E32  EF1D  F00F         	goto	u3621
  4867   001E36  EF1F  F00F         	goto	u3620
  4868   001E3A                     u3621:
  4869   001E3A  EF43  F00F         	goto	l4254
  4870   001E3E                     u3620:
  4871   001E3E  0E01               	movlw	1
  4872   001E40  2615               	addwf	___flmul@prod^0,f,c
  4873   001E42  0E00               	movlw	0
  4874   001E44  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4875   001E46  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4876   001E48  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4877   001E4A  A018               	btfss	(___flmul@prod+3)^0,0,c
  4878   001E4C  EF2A  F00F         	goto	u3631
  4879   001E50  EF2C  F00F         	goto	u3630
  4880   001E54                     u3631:
  4881   001E54  EF43  F00F         	goto	l4254
  4882   001E58                     u3630:
  4883   001E58  C015  F00A         	movff	___flmul@prod,??___flmul
  4884   001E5C  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  4885   001E60  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  4886   001E64  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  4887   001E68  340D               	rlcf	(??___flmul+3)^0,w,c
  4888   001E6A  320D               	rrcf	(??___flmul+3)^0,f,c
  4889   001E6C  320C               	rrcf	(??___flmul+2)^0,f,c
  4890   001E6E  320B               	rrcf	(??___flmul+1)^0,f,c
  4891   001E70  320A               	rrcf	??___flmul^0,f,c
  4892   001E72  C00A  F015         	movff	??___flmul,___flmul@prod
  4893   001E76  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  4894   001E7A  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  4895   001E7E  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  4896   001E82  4A19               	infsnz	___flmul@temp^0,f,c
  4897   001E84  2A1A               	incf	(___flmul@temp+1)^0,f,c
  4898   001E86                     l4254:
  4899   001E86  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4900   001E88  EF4E  F00F         	goto	u3641
  4901   001E8C  501A               	movf	(___flmul@temp+1)^0,w,c
  4902   001E8E  E108               	bnz	u3640
  4903   001E90  2819               	incf	___flmul@temp^0,w,c
  4904   001E92  A0D8               	btfss	status,0,c
  4905   001E94  EF4E  F00F         	goto	u3641
  4906   001E98  EF50  F00F         	goto	u3640
  4907   001E9C                     u3641:
  4908   001E9C  EF5A  F00F         	goto	l4258
  4909   001EA0                     u3640:
  4910   001EA0  0E00               	movlw	0
  4911   001EA2  6E15               	movwf	___flmul@prod^0,c
  4912   001EA4  0E00               	movlw	0
  4913   001EA6  6E16               	movwf	(___flmul@prod+1)^0,c
  4914   001EA8  0E80               	movlw	128
  4915   001EAA  6E17               	movwf	(___flmul@prod+2)^0,c
  4916   001EAC  0E7F               	movlw	127
  4917   001EAE  6E18               	movwf	(___flmul@prod+3)^0,c
  4918   001EB0  EF88  F00F         	goto	l4270
  4919   001EB4                     l4258:
  4920   001EB4  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4921   001EB6  EF67  F00F         	goto	u3650
  4922   001EBA  501A               	movf	(___flmul@temp+1)^0,w,c
  4923   001EBC  E106               	bnz	u3651
  4924   001EBE  0419               	decf	___flmul@temp^0,w,c
  4925   001EC0  B0D8               	btfsc	status,0,c
  4926   001EC2  EF65  F00F         	goto	u3651
  4927   001EC6  EF67  F00F         	goto	u3650
  4928   001ECA                     u3651:
  4929   001ECA  EF73  F00F         	goto	l1301
  4930   001ECE                     u3650:
  4931   001ECE  0E00               	movlw	0
  4932   001ED0  6E15               	movwf	___flmul@prod^0,c
  4933   001ED2  0E00               	movlw	0
  4934   001ED4  6E16               	movwf	(___flmul@prod+1)^0,c
  4935   001ED6  0E00               	movlw	0
  4936   001ED8  6E17               	movwf	(___flmul@prod+2)^0,c
  4937   001EDA  0E00               	movlw	0
  4938   001EDC  6E18               	movwf	(___flmul@prod+3)^0,c
  4939   001EDE  0E00               	movlw	0
  4940   001EE0  6E0E               	movwf	___flmul@sign^0,c
  4941   001EE2  EF88  F00F         	goto	l4270
  4942   001EE6                     l1301:
  4943   001EE6  C019  F014         	movff	___flmul@temp,___flmul@bexp
  4944   001EEA  0EFF               	movlw	255
  4945   001EEC  1615               	andwf	___flmul@prod^0,f,c
  4946   001EEE  0EFF               	movlw	255
  4947   001EF0  1616               	andwf	(___flmul@prod+1)^0,f,c
  4948   001EF2  0E7F               	movlw	127
  4949   001EF4  1617               	andwf	(___flmul@prod+2)^0,f,c
  4950   001EF6  0E00               	movlw	0
  4951   001EF8  1618               	andwf	(___flmul@prod+3)^0,f,c
  4952   001EFA  A014               	btfss	___flmul@bexp^0,0,c
  4953   001EFC  EF82  F00F         	goto	u3661
  4954   001F00  EF84  F00F         	goto	u3660
  4955   001F04                     u3661:
  4956   001F04  EF85  F00F         	goto	l4268
  4957   001F08                     u3660:
  4958   001F08  8E17               	bsf	(___flmul@prod+2)^0,7,c
  4959   001F0A                     l4268:
  4960   001F0A  90D8               	bcf	status,0,c
  4961   001F0C  3014               	rrcf	___flmul@bexp^0,w,c
  4962   001F0E  6E18               	movwf	(___flmul@prod+3)^0,c
  4963   001F10                     l4270:
  4964   001F10  500E               	movf	___flmul@sign^0,w,c
  4965   001F12  1218               	iorwf	(___flmul@prod+3)^0,f,c
  4966   001F14  C015  F002         	movff	___flmul@prod,?___flmul
  4967   001F18  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  4968   001F1C  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  4969   001F20  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  4970   001F24                     l1288:
  4971   001F24  0012               	return		;funcret
  4972   001F26                     __end_of___flmul:
  4973                           	callstack 0
  4974                           
  4975 ;; *************** function ___flge *****************
  4976 ;; Defined at:
  4977 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  ff1             4    1[COMRAM] unsigned char 
  4980 ;;  ff2             4    5[COMRAM] unsigned char 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4992 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4994 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4995 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4996 ;;Total ram usage:       12 bytes
  4997 ;; Hardware stack levels used: 1
  4998 ;; Hardware stack levels required when called: 1
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_convert_rgb2hue
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text14
  5007   003088                     __ptext14:
  5008                           	callstack 0
  5009   003088                     ___flge:
  5010                           	callstack 27
  5011   003088  0E00               	movlw	0
  5012   00308A  1402               	andwf	___flge@ff1^0,w,c
  5013   00308C  6E0A               	movwf	??___flge^0,c
  5014   00308E  0E00               	movlw	0
  5015   003090  1403               	andwf	(___flge@ff1+1)^0,w,c
  5016   003092  6E0B               	movwf	(??___flge+1)^0,c
  5017   003094  0E80               	movlw	128
  5018   003096  1404               	andwf	(___flge@ff1+2)^0,w,c
  5019   003098  6E0C               	movwf	(??___flge+2)^0,c
  5020   00309A  0E7F               	movlw	127
  5021   00309C  1405               	andwf	(___flge@ff1+3)^0,w,c
  5022   00309E  6E0D               	movwf	(??___flge+3)^0,c
  5023   0030A0  500A               	movf	??___flge^0,w,c
  5024   0030A2  100B               	iorwf	(??___flge+1)^0,w,c
  5025   0030A4  100C               	iorwf	(??___flge+2)^0,w,c
  5026   0030A6  100D               	iorwf	(??___flge+3)^0,w,c
  5027   0030A8  A4D8               	btfss	status,2,c
  5028   0030AA  EF59  F018         	goto	u3701
  5029   0030AE  EF5B  F018         	goto	u3700
  5030   0030B2                     u3701:
  5031   0030B2  EF63  F018         	goto	l4302
  5032   0030B6                     u3700:
  5033   0030B6  0E00               	movlw	0
  5034   0030B8  6E02               	movwf	___flge@ff1^0,c
  5035   0030BA  0E00               	movlw	0
  5036   0030BC  6E03               	movwf	(___flge@ff1+1)^0,c
  5037   0030BE  0E00               	movlw	0
  5038   0030C0  6E04               	movwf	(___flge@ff1+2)^0,c
  5039   0030C2  0E00               	movlw	0
  5040   0030C4  6E05               	movwf	(___flge@ff1+3)^0,c
  5041   0030C6                     l4302:
  5042   0030C6  0E00               	movlw	0
  5043   0030C8  1406               	andwf	___flge@ff2^0,w,c
  5044   0030CA  6E0A               	movwf	??___flge^0,c
  5045   0030CC  0E00               	movlw	0
  5046   0030CE  1407               	andwf	(___flge@ff2+1)^0,w,c
  5047   0030D0  6E0B               	movwf	(??___flge+1)^0,c
  5048   0030D2  0E80               	movlw	128
  5049   0030D4  1408               	andwf	(___flge@ff2+2)^0,w,c
  5050   0030D6  6E0C               	movwf	(??___flge+2)^0,c
  5051   0030D8  0E7F               	movlw	127
  5052   0030DA  1409               	andwf	(___flge@ff2+3)^0,w,c
  5053   0030DC  6E0D               	movwf	(??___flge+3)^0,c
  5054   0030DE  500A               	movf	??___flge^0,w,c
  5055   0030E0  100B               	iorwf	(??___flge+1)^0,w,c
  5056   0030E2  100C               	iorwf	(??___flge+2)^0,w,c
  5057   0030E4  100D               	iorwf	(??___flge+3)^0,w,c
  5058   0030E6  A4D8               	btfss	status,2,c
  5059   0030E8  EF78  F018         	goto	u3711
  5060   0030EC  EF7A  F018         	goto	u3710
  5061   0030F0                     u3711:
  5062   0030F0  EF82  F018         	goto	l4306
  5063   0030F4                     u3710:
  5064   0030F4  0E00               	movlw	0
  5065   0030F6  6E06               	movwf	___flge@ff2^0,c
  5066   0030F8  0E00               	movlw	0
  5067   0030FA  6E07               	movwf	(___flge@ff2+1)^0,c
  5068   0030FC  0E00               	movlw	0
  5069   0030FE  6E08               	movwf	(___flge@ff2+2)^0,c
  5070   003100  0E00               	movlw	0
  5071   003102  6E09               	movwf	(___flge@ff2+3)^0,c
  5072   003104                     l4306:
  5073   003104  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5074   003106  EF87  F018         	goto	u3721
  5075   00310A  EF89  F018         	goto	u3720
  5076   00310E                     u3721:
  5077   00310E  EF92  F018         	goto	l4310
  5078   003112                     u3720:
  5079   003112  6C02               	negf	___flge@ff1^0,c
  5080   003114  1E03               	comf	(___flge@ff1+1)^0,f,c
  5081   003116  B0D8               	btfsc	status,0,c
  5082   003118  2A03               	incf	(___flge@ff1+1)^0,f,c
  5083   00311A  1E04               	comf	(___flge@ff1+2)^0,f,c
  5084   00311C  B0D8               	btfsc	status,0,c
  5085   00311E  2A04               	incf	(___flge@ff1+2)^0,f,c
  5086   003120  0E80               	movlw	128
  5087   003122  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5088   003124                     l4310:
  5089   003124  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5090   003126  EF97  F018         	goto	u3731
  5091   00312A  EF99  F018         	goto	u3730
  5092   00312E                     u3731:
  5093   00312E  EFA2  F018         	goto	l935
  5094   003132                     u3730:
  5095   003132  6C06               	negf	___flge@ff2^0,c
  5096   003134  1E07               	comf	(___flge@ff2+1)^0,f,c
  5097   003136  B0D8               	btfsc	status,0,c
  5098   003138  2A07               	incf	(___flge@ff2+1)^0,f,c
  5099   00313A  1E08               	comf	(___flge@ff2+2)^0,f,c
  5100   00313C  B0D8               	btfsc	status,0,c
  5101   00313E  2A08               	incf	(___flge@ff2+2)^0,f,c
  5102   003140  0E80               	movlw	128
  5103   003142  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5104   003144                     l935:
  5105   003144  0E00               	movlw	0
  5106   003146  1A02               	xorwf	___flge@ff1^0,f,c
  5107   003148  0E00               	movlw	0
  5108   00314A  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5109   00314C  0E00               	movlw	0
  5110   00314E  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5111   003150  0E80               	movlw	128
  5112   003152  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5113   003154  0E00               	movlw	0
  5114   003156  1A06               	xorwf	___flge@ff2^0,f,c
  5115   003158  0E00               	movlw	0
  5116   00315A  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5117   00315C  0E00               	movlw	0
  5118   00315E  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5119   003160  0E80               	movlw	128
  5120   003162  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5121   003164  5006               	movf	___flge@ff2^0,w,c
  5122   003166  5C02               	subwf	___flge@ff1^0,w,c
  5123   003168  5007               	movf	(___flge@ff2+1)^0,w,c
  5124   00316A  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5125   00316C  5008               	movf	(___flge@ff2+2)^0,w,c
  5126   00316E  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5127   003170  5009               	movf	(___flge@ff2+3)^0,w,c
  5128   003172  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5129   003174  B0D8               	btfsc	status,0,c
  5130   003176  EFBF  F018         	goto	u3741
  5131   00317A  EFC1  F018         	goto	u3740
  5132   00317E                     u3741:
  5133   00317E  EFC4  F018         	goto	l4316
  5134   003182                     u3740:
  5135   003182  90D8               	bcf	status,0,c
  5136   003184  EFC5  F018         	goto	l940
  5137   003188                     l4316:
  5138   003188  80D8               	bsf	status,0,c
  5139   00318A                     l940:
  5140   00318A  0012               	return		;funcret
  5141   00318C                     __end_of___flge:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function ___fleq *****************
  5145 ;; Defined at:
  5146 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  ff1             4    1[COMRAM] unsigned char 
  5149 ;;  ff2             4    5[COMRAM] unsigned char 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5161 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5165 ;;Total ram usage:       12 bytes
  5166 ;; Hardware stack levels used: 1
  5167 ;; Hardware stack levels required when called: 1
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_convert_rgb2hue
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text15
  5176   00363E                     __ptext15:
  5177                           	callstack 0
  5178   00363E                     ___fleq:
  5179                           	callstack 27
  5180   00363E  0E00               	movlw	0
  5181   003640  1402               	andwf	___fleq@ff1^0,w,c
  5182   003642  6E0A               	movwf	??___fleq^0,c
  5183   003644  0E00               	movlw	0
  5184   003646  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5185   003648  6E0B               	movwf	(??___fleq+1)^0,c
  5186   00364A  0E80               	movlw	128
  5187   00364C  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5188   00364E  6E0C               	movwf	(??___fleq+2)^0,c
  5189   003650  0E7F               	movlw	127
  5190   003652  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5191   003654  6E0D               	movwf	(??___fleq+3)^0,c
  5192   003656  500A               	movf	??___fleq^0,w,c
  5193   003658  100B               	iorwf	(??___fleq+1)^0,w,c
  5194   00365A  100C               	iorwf	(??___fleq+2)^0,w,c
  5195   00365C  100D               	iorwf	(??___fleq+3)^0,w,c
  5196   00365E  A4D8               	btfss	status,2,c
  5197   003660  EF34  F01B         	goto	u3671
  5198   003664  EF36  F01B         	goto	u3670
  5199   003668                     u3671:
  5200   003668  EF3E  F01B         	goto	l4286
  5201   00366C                     u3670:
  5202   00366C  0E00               	movlw	0
  5203   00366E  6E02               	movwf	___fleq@ff1^0,c
  5204   003670  0E00               	movlw	0
  5205   003672  6E03               	movwf	(___fleq@ff1+1)^0,c
  5206   003674  0E00               	movlw	0
  5207   003676  6E04               	movwf	(___fleq@ff1+2)^0,c
  5208   003678  0E00               	movlw	0
  5209   00367A  6E05               	movwf	(___fleq@ff1+3)^0,c
  5210   00367C                     l4286:
  5211   00367C  0E00               	movlw	0
  5212   00367E  1406               	andwf	___fleq@ff2^0,w,c
  5213   003680  6E0A               	movwf	??___fleq^0,c
  5214   003682  0E00               	movlw	0
  5215   003684  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5216   003686  6E0B               	movwf	(??___fleq+1)^0,c
  5217   003688  0E80               	movlw	128
  5218   00368A  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5219   00368C  6E0C               	movwf	(??___fleq+2)^0,c
  5220   00368E  0E7F               	movlw	127
  5221   003690  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5222   003692  6E0D               	movwf	(??___fleq+3)^0,c
  5223   003694  500A               	movf	??___fleq^0,w,c
  5224   003696  100B               	iorwf	(??___fleq+1)^0,w,c
  5225   003698  100C               	iorwf	(??___fleq+2)^0,w,c
  5226   00369A  100D               	iorwf	(??___fleq+3)^0,w,c
  5227   00369C  A4D8               	btfss	status,2,c
  5228   00369E  EF53  F01B         	goto	u3681
  5229   0036A2  EF55  F01B         	goto	u3680
  5230   0036A6                     u3681:
  5231   0036A6  EF5D  F01B         	goto	l4290
  5232   0036AA                     u3680:
  5233   0036AA  0E00               	movlw	0
  5234   0036AC  6E06               	movwf	___fleq@ff2^0,c
  5235   0036AE  0E00               	movlw	0
  5236   0036B0  6E07               	movwf	(___fleq@ff2+1)^0,c
  5237   0036B2  0E00               	movlw	0
  5238   0036B4  6E08               	movwf	(___fleq@ff2+2)^0,c
  5239   0036B6  0E00               	movlw	0
  5240   0036B8  6E09               	movwf	(___fleq@ff2+3)^0,c
  5241   0036BA                     l4290:
  5242   0036BA  5006               	movf	___fleq@ff2^0,w,c
  5243   0036BC  1802               	xorwf	___fleq@ff1^0,w,c
  5244   0036BE  E10F               	bnz	u3690
  5245   0036C0  5007               	movf	(___fleq@ff2+1)^0,w,c
  5246   0036C2  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5247   0036C4  E10C               	bnz	u3690
  5248   0036C6  5008               	movf	(___fleq@ff2+2)^0,w,c
  5249   0036C8  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5250   0036CA  E109               	bnz	u3690
  5251   0036CC  5009               	movf	(___fleq@ff2+3)^0,w,c
  5252   0036CE  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5253   0036D0  B4D8               	btfsc	status,2,c
  5254   0036D2  EF6D  F01B         	goto	u3691
  5255   0036D6  EF6F  F01B         	goto	u3690
  5256   0036DA                     u3691:
  5257   0036DA  EF72  F01B         	goto	l4294
  5258   0036DE                     u3690:
  5259   0036DE  90D8               	bcf	status,0,c
  5260   0036E0  EF73  F01B         	goto	l929
  5261   0036E4                     l4294:
  5262   0036E4  80D8               	bsf	status,0,c
  5263   0036E6                     l929:
  5264   0036E6  0012               	return		;funcret
  5265   0036E8                     __end_of___fleq:
  5266                           	callstack 0
  5267                           
  5268 ;; *************** function ___fldiv *****************
  5269 ;; Defined at:
  5270 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  b               4   26[COMRAM] unsigned char 
  5273 ;;  a               4   30[COMRAM] unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  grs             4   45[COMRAM] unsigned long 
  5276 ;;  rem             4   38[COMRAM] unsigned long 
  5277 ;;  new_exp         2   43[COMRAM] short 
  5278 ;;  aexp            1   50[COMRAM] unsigned char 
  5279 ;;  bexp            1   49[COMRAM] unsigned char 
  5280 ;;  sign            1   42[COMRAM] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  4   26[COMRAM] unsigned char 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5290 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;Total ram usage:       25 bytes
  5295 ;; Hardware stack levels used: 1
  5296 ;; Hardware stack levels required when called: 1
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_convert_rgb2hue
  5301 ;;		_main
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text16
  5306   001F26                     __ptext16:
  5307                           	callstack 0
  5308   001F26                     ___fldiv:
  5309                           	callstack 27
  5310   001F26  501E               	movf	(___fldiv@b+3)^0,w,c
  5311   001F28  0B80               	andlw	128
  5312   001F2A  6E2B               	movwf	___fldiv@sign^0,c
  5313   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5314   001F2E  241E               	addwf	(___fldiv@b+3)^0,w,c
  5315   001F30  6E32               	movwf	___fldiv@bexp^0,c
  5316   001F32  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5317   001F34  EF9E  F00F         	goto	u3251
  5318   001F38  EFA0  F00F         	goto	u3250
  5319   001F3C                     u3251:
  5320   001F3C  EFA1  F00F         	goto	l4014
  5321   001F40                     u3250:
  5322   001F40  8032               	bsf	___fldiv@bexp^0,0,c
  5323   001F42                     l4014:
  5324   001F42  5032               	movf	___fldiv@bexp^0,w,c
  5325   001F44  B4D8               	btfsc	status,2,c
  5326   001F46  EFA7  F00F         	goto	u3261
  5327   001F4A  EFA9  F00F         	goto	u3260
  5328   001F4E                     u3261:
  5329   001F4E  EFBE  F00F         	goto	l4024
  5330   001F52                     u3260:
  5331   001F52  2832               	incf	___fldiv@bexp^0,w,c
  5332   001F54  A4D8               	btfss	status,2,c
  5333   001F56  EFAF  F00F         	goto	u3271
  5334   001F5A  EFB1  F00F         	goto	u3270
  5335   001F5E                     u3271:
  5336   001F5E  EFB9  F00F         	goto	l4020
  5337   001F62                     u3270:
  5338   001F62  0E00               	movlw	0
  5339   001F64  6E1B               	movwf	___fldiv@b^0,c
  5340   001F66  0E00               	movlw	0
  5341   001F68  6E1C               	movwf	(___fldiv@b+1)^0,c
  5342   001F6A  0E00               	movlw	0
  5343   001F6C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5344   001F6E  0E00               	movlw	0
  5345   001F70  6E1E               	movwf	(___fldiv@b+3)^0,c
  5346   001F72                     l4020:
  5347   001F72  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5348   001F74  0E00               	movlw	0
  5349   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5350   001F78  EFC6  F00F         	goto	l4026
  5351   001F7C                     l4024:
  5352   001F7C  0E00               	movlw	0
  5353   001F7E  6E1B               	movwf	___fldiv@b^0,c
  5354   001F80  0E00               	movlw	0
  5355   001F82  6E1C               	movwf	(___fldiv@b+1)^0,c
  5356   001F84  0E00               	movlw	0
  5357   001F86  6E1D               	movwf	(___fldiv@b+2)^0,c
  5358   001F88  0E00               	movlw	0
  5359   001F8A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5360   001F8C                     l4026:
  5361   001F8C  5022               	movf	(___fldiv@a+3)^0,w,c
  5362   001F8E  0B80               	andlw	128
  5363   001F90  1A2B               	xorwf	___fldiv@sign^0,f,c
  5364   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5365   001F94  2422               	addwf	(___fldiv@a+3)^0,w,c
  5366   001F96  6E33               	movwf	___fldiv@aexp^0,c
  5367   001F98  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5368   001F9A  EFD1  F00F         	goto	u3281
  5369   001F9E  EFD3  F00F         	goto	u3280
  5370   001FA2                     u3281:
  5371   001FA2  EFD4  F00F         	goto	l4034
  5372   001FA6                     u3280:
  5373   001FA6  8033               	bsf	___fldiv@aexp^0,0,c
  5374   001FA8                     l4034:
  5375   001FA8  5033               	movf	___fldiv@aexp^0,w,c
  5376   001FAA  B4D8               	btfsc	status,2,c
  5377   001FAC  EFDA  F00F         	goto	u3291
  5378   001FB0  EFDC  F00F         	goto	u3290
  5379   001FB4                     u3291:
  5380   001FB4  EFF1  F00F         	goto	l4044
  5381   001FB8                     u3290:
  5382   001FB8  2833               	incf	___fldiv@aexp^0,w,c
  5383   001FBA  A4D8               	btfss	status,2,c
  5384   001FBC  EFE2  F00F         	goto	u3301
  5385   001FC0  EFE4  F00F         	goto	u3300
  5386   001FC4                     u3301:
  5387   001FC4  EFEC  F00F         	goto	l4040
  5388   001FC8                     u3300:
  5389   001FC8  0E00               	movlw	0
  5390   001FCA  6E1F               	movwf	___fldiv@a^0,c
  5391   001FCC  0E00               	movlw	0
  5392   001FCE  6E20               	movwf	(___fldiv@a+1)^0,c
  5393   001FD0  0E00               	movlw	0
  5394   001FD2  6E21               	movwf	(___fldiv@a+2)^0,c
  5395   001FD4  0E00               	movlw	0
  5396   001FD6  6E22               	movwf	(___fldiv@a+3)^0,c
  5397   001FD8                     l4040:
  5398   001FD8  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5399   001FDA  0E00               	movlw	0
  5400   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5401   001FDE  EFF9  F00F         	goto	l4046
  5402   001FE2                     l4044:
  5403   001FE2  0E00               	movlw	0
  5404   001FE4  6E1F               	movwf	___fldiv@a^0,c
  5405   001FE6  0E00               	movlw	0
  5406   001FE8  6E20               	movwf	(___fldiv@a+1)^0,c
  5407   001FEA  0E00               	movlw	0
  5408   001FEC  6E21               	movwf	(___fldiv@a+2)^0,c
  5409   001FEE  0E00               	movlw	0
  5410   001FF0  6E22               	movwf	(___fldiv@a+3)^0,c
  5411   001FF2                     l4046:
  5412   001FF2  501F               	movf	___fldiv@a^0,w,c
  5413   001FF4  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5414   001FF6  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5415   001FF8  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5416   001FFA  A4D8               	btfss	status,2,c
  5417   001FFC  EF02  F010         	goto	u3311
  5418   002000  EF04  F010         	goto	u3310
  5419   002004                     u3311:
  5420   002004  EF1C  F010         	goto	l4058
  5421   002008                     u3310:
  5422   002008  0E00               	movlw	0
  5423   00200A  6E1B               	movwf	___fldiv@b^0,c
  5424   00200C  0E00               	movlw	0
  5425   00200E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5426   002010  0E00               	movlw	0
  5427   002012  6E1D               	movwf	(___fldiv@b+2)^0,c
  5428   002014  0E00               	movlw	0
  5429   002016  6E1E               	movwf	(___fldiv@b+3)^0,c
  5430   002018  0E80               	movlw	128
  5431   00201A  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5432   00201C  0E7F               	movlw	127
  5433   00201E  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5434   002020                     l4052:
  5435   002020  502B               	movf	___fldiv@sign^0,w,c
  5436   002022  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5437   002024  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5438   002028  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5439   00202C  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5440   002030  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5441   002034  EF5F  F011         	goto	l1252
  5442   002038                     l4058:
  5443   002038  5032               	movf	___fldiv@bexp^0,w,c
  5444   00203A  A4D8               	btfss	status,2,c
  5445   00203C  EF22  F010         	goto	u3321
  5446   002040  EF24  F010         	goto	u3320
  5447   002044                     u3321:
  5448   002044  EF2E  F010         	goto	l4066
  5449   002048                     u3320:
  5450   002048  0E00               	movlw	0
  5451   00204A  6E1B               	movwf	?___fldiv^0,c
  5452   00204C  0E00               	movlw	0
  5453   00204E  6E1C               	movwf	(?___fldiv+1)^0,c
  5454   002050  0E00               	movlw	0
  5455   002052  6E1D               	movwf	(?___fldiv+2)^0,c
  5456   002054  0E00               	movlw	0
  5457   002056  6E1E               	movwf	(?___fldiv+3)^0,c
  5458   002058  EF5F  F011         	goto	l1252
  5459   00205C                     l4066:
  5460   00205C  5033               	movf	___fldiv@aexp^0,w,c
  5461   00205E  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5462   002062  6A24               	clrf	(??___fldiv+1)^0,c
  5463   002064  5E23               	subwf	??___fldiv^0,f,c
  5464   002066  0E00               	movlw	0
  5465   002068  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5466   00206A  0E7F               	movlw	127
  5467   00206C  2423               	addwf	??___fldiv^0,w,c
  5468   00206E  6E2C               	movwf	___fldiv@new_exp^0,c
  5469   002070  0E00               	movlw	0
  5470   002072  2024               	addwfc	(??___fldiv+1)^0,w,c
  5471   002074  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5472   002076  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5473   00207A  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5474   00207E  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5475   002082  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5476   002086  0E00               	movlw	0
  5477   002088  6E1B               	movwf	___fldiv@b^0,c
  5478   00208A  0E00               	movlw	0
  5479   00208C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5480   00208E  0E00               	movlw	0
  5481   002090  6E1D               	movwf	(___fldiv@b+2)^0,c
  5482   002092  0E00               	movlw	0
  5483   002094  6E1E               	movwf	(___fldiv@b+3)^0,c
  5484   002096  0E00               	movlw	0
  5485   002098  6E2E               	movwf	___fldiv@grs^0,c
  5486   00209A  0E00               	movlw	0
  5487   00209C  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5488   00209E  0E00               	movlw	0
  5489   0020A0  6E30               	movwf	(___fldiv@grs+2)^0,c
  5490   0020A2  0E00               	movlw	0
  5491   0020A4  6E31               	movwf	(___fldiv@grs+3)^0,c
  5492   0020A6  0E00               	movlw	0
  5493   0020A8  6E33               	movwf	___fldiv@aexp^0,c
  5494   0020AA  EF8F  F010         	goto	l1254
  5495   0020AE                     l4076:
  5496   0020AE  5033               	movf	___fldiv@aexp^0,w,c
  5497   0020B0  B4D8               	btfsc	status,2,c
  5498   0020B2  EF5D  F010         	goto	u3331
  5499   0020B6  EF5F  F010         	goto	u3330
  5500   0020BA                     u3331:
  5501   0020BA  EF76  F010         	goto	l4084
  5502   0020BE                     u3330:
  5503   0020BE  90D8               	bcf	status,0,c
  5504   0020C0  3627               	rlcf	___fldiv@rem^0,f,c
  5505   0020C2  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5506   0020C4  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5507   0020C6  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5508   0020C8  90D8               	bcf	status,0,c
  5509   0020CA  361B               	rlcf	___fldiv@b^0,f,c
  5510   0020CC  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5511   0020CE  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5512   0020D0  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5513   0020D2  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5514   0020D4  EF6E  F010         	goto	u3341
  5515   0020D8  EF70  F010         	goto	u3340
  5516   0020DC                     u3341:
  5517   0020DC  EF71  F010         	goto	l1257
  5518   0020E0                     u3340:
  5519   0020E0  801B               	bsf	___fldiv@b^0,0,c
  5520   0020E2                     l1257:
  5521   0020E2  90D8               	bcf	status,0,c
  5522   0020E4  362E               	rlcf	___fldiv@grs^0,f,c
  5523   0020E6  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5524   0020E8  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5525   0020EA  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5526   0020EC                     l4084:
  5527   0020EC  501F               	movf	___fldiv@a^0,w,c
  5528   0020EE  5C27               	subwf	___fldiv@rem^0,w,c
  5529   0020F0  5020               	movf	(___fldiv@a+1)^0,w,c
  5530   0020F2  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5531   0020F4  5021               	movf	(___fldiv@a+2)^0,w,c
  5532   0020F6  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5533   0020F8  5022               	movf	(___fldiv@a+3)^0,w,c
  5534   0020FA  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5535   0020FC  A0D8               	btfss	status,0,c
  5536   0020FE  EF83  F010         	goto	u3351
  5537   002102  EF85  F010         	goto	u3350
  5538   002106                     u3351:
  5539   002106  EF8E  F010         	goto	l4090
  5540   00210A                     u3350:
  5541   00210A  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5542   00210C  501F               	movf	___fldiv@a^0,w,c
  5543   00210E  5E27               	subwf	___fldiv@rem^0,f,c
  5544   002110  5020               	movf	(___fldiv@a+1)^0,w,c
  5545   002112  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5546   002114  5021               	movf	(___fldiv@a+2)^0,w,c
  5547   002116  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5548   002118  5022               	movf	(___fldiv@a+3)^0,w,c
  5549   00211A  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5550   00211C                     l4090:
  5551   00211C  2A33               	incf	___fldiv@aexp^0,f,c
  5552   00211E                     l1254:
  5553   00211E  0E19               	movlw	25
  5554   002120  6433               	cpfsgt	___fldiv@aexp^0,c
  5555   002122  EF95  F010         	goto	u3361
  5556   002126  EF97  F010         	goto	u3360
  5557   00212A                     u3361:
  5558   00212A  EF57  F010         	goto	l4076
  5559   00212E                     u3360:
  5560   00212E  5027               	movf	___fldiv@rem^0,w,c
  5561   002130  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5562   002132  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5563   002134  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5564   002136  B4D8               	btfsc	status,2,c
  5565   002138  EFA0  F010         	goto	u3371
  5566   00213C  EFA2  F010         	goto	u3370
  5567   002140                     u3371:
  5568   002140  EFBA  F010         	goto	l4102
  5569   002144                     u3370:
  5570   002144  802E               	bsf	___fldiv@grs^0,0,c
  5571   002146  EFBA  F010         	goto	l4102
  5572   00214A                     l4096:
  5573   00214A  90D8               	bcf	status,0,c
  5574   00214C  361B               	rlcf	___fldiv@b^0,f,c
  5575   00214E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5576   002150  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5577   002152  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5578   002154  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5579   002156  EFAF  F010         	goto	u3381
  5580   00215A  EFB1  F010         	goto	u3380
  5581   00215E                     u3381:
  5582   00215E  EFB2  F010         	goto	l1263
  5583   002162                     u3380:
  5584   002162  801B               	bsf	___fldiv@b^0,0,c
  5585   002164                     l1263:
  5586   002164  90D8               	bcf	status,0,c
  5587   002166  362E               	rlcf	___fldiv@grs^0,f,c
  5588   002168  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5589   00216A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5590   00216C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5591   00216E  062C               	decf	___fldiv@new_exp^0,f,c
  5592   002170  A0D8               	btfss	status,0,c
  5593   002172  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5594   002174                     l4102:
  5595   002174  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5596   002176  EFBF  F010         	goto	u3391
  5597   00217A  EFC1  F010         	goto	u3390
  5598   00217E                     u3391:
  5599   00217E  EFA5  F010         	goto	l4096
  5600   002182                     u3390:
  5601   002182  0E00               	movlw	0
  5602   002184  6E33               	movwf	___fldiv@aexp^0,c
  5603   002186  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5604   002188  EFC8  F010         	goto	u3401
  5605   00218C  EFCA  F010         	goto	u3400
  5606   002190                     u3401:
  5607   002190  EFEE  F010         	goto	l1265
  5608   002194                     u3400:
  5609   002194  0EFF               	movlw	255
  5610   002196  142E               	andwf	___fldiv@grs^0,w,c
  5611   002198  6E23               	movwf	??___fldiv^0,c
  5612   00219A  0EFF               	movlw	255
  5613   00219C  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5614   00219E  6E24               	movwf	(??___fldiv+1)^0,c
  5615   0021A0  0EFF               	movlw	255
  5616   0021A2  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5617   0021A4  6E25               	movwf	(??___fldiv+2)^0,c
  5618   0021A6  0E7F               	movlw	127
  5619   0021A8  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5620   0021AA  6E26               	movwf	(??___fldiv+3)^0,c
  5621   0021AC  5023               	movf	??___fldiv^0,w,c
  5622   0021AE  1024               	iorwf	(??___fldiv+1)^0,w,c
  5623   0021B0  1025               	iorwf	(??___fldiv+2)^0,w,c
  5624   0021B2  1026               	iorwf	(??___fldiv+3)^0,w,c
  5625   0021B4  B4D8               	btfsc	status,2,c
  5626   0021B6  EFDF  F010         	goto	u3411
  5627   0021BA  EFE1  F010         	goto	u3410
  5628   0021BE                     u3411:
  5629   0021BE  EFE5  F010         	goto	l1266
  5630   0021C2                     u3410:
  5631   0021C2                     l4110:
  5632   0021C2  0E01               	movlw	1
  5633   0021C4  6E33               	movwf	___fldiv@aexp^0,c
  5634   0021C6  EFEE  F010         	goto	l1265
  5635   0021CA                     l1266:
  5636   0021CA  A01B               	btfss	___fldiv@b^0,0,c
  5637   0021CC  EFEA  F010         	goto	u3421
  5638   0021D0  EFEC  F010         	goto	u3420
  5639   0021D4                     u3421:
  5640   0021D4  EFEE  F010         	goto	l1265
  5641   0021D8                     u3420:
  5642   0021D8  EFE1  F010         	goto	l4110
  5643   0021DC                     l1265:
  5644   0021DC  5033               	movf	___fldiv@aexp^0,w,c
  5645   0021DE  B4D8               	btfsc	status,2,c
  5646   0021E0  EFF4  F010         	goto	u3431
  5647   0021E4  EFF6  F010         	goto	u3430
  5648   0021E8                     u3431:
  5649   0021E8  EF1A  F011         	goto	l4122
  5650   0021EC                     u3430:
  5651   0021EC  0E01               	movlw	1
  5652   0021EE  261B               	addwf	___fldiv@b^0,f,c
  5653   0021F0  0E00               	movlw	0
  5654   0021F2  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5655   0021F4  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5656   0021F6  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5657   0021F8  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5658   0021FA  EF01  F011         	goto	u3441
  5659   0021FE  EF03  F011         	goto	u3440
  5660   002202                     u3441:
  5661   002202  EF1A  F011         	goto	l4122
  5662   002206                     u3440:
  5663   002206  C01B  F023         	movff	___fldiv@b,??___fldiv
  5664   00220A  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5665   00220E  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5666   002212  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5667   002216  3426               	rlcf	(??___fldiv+3)^0,w,c
  5668   002218  3226               	rrcf	(??___fldiv+3)^0,f,c
  5669   00221A  3225               	rrcf	(??___fldiv+2)^0,f,c
  5670   00221C  3224               	rrcf	(??___fldiv+1)^0,f,c
  5671   00221E  3223               	rrcf	??___fldiv^0,f,c
  5672   002220  C023  F01B         	movff	??___fldiv,___fldiv@b
  5673   002224  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5674   002228  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5675   00222C  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5676   002230  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5677   002232  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5678   002234                     l4122:
  5679   002234  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5680   002236  EF25  F011         	goto	u3451
  5681   00223A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5682   00223C  E108               	bnz	u3450
  5683   00223E  282C               	incf	___fldiv@new_exp^0,w,c
  5684   002240  A0D8               	btfss	status,0,c
  5685   002242  EF25  F011         	goto	u3451
  5686   002246  EF27  F011         	goto	u3450
  5687   00224A                     u3451:
  5688   00224A  EF32  F011         	goto	l4126
  5689   00224E                     u3450:
  5690   00224E  0E00               	movlw	0
  5691   002250  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5692   002252  682C               	setf	___fldiv@new_exp^0,c
  5693   002254  0E00               	movlw	0
  5694   002256  6E1B               	movwf	___fldiv@b^0,c
  5695   002258  0E00               	movlw	0
  5696   00225A  6E1C               	movwf	(___fldiv@b+1)^0,c
  5697   00225C  0E00               	movlw	0
  5698   00225E  6E1D               	movwf	(___fldiv@b+2)^0,c
  5699   002260  0E00               	movlw	0
  5700   002262  6E1E               	movwf	(___fldiv@b+3)^0,c
  5701   002264                     l4126:
  5702   002264  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5703   002266  EF3F  F011         	goto	u3460
  5704   00226A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5705   00226C  E106               	bnz	u3461
  5706   00226E  042C               	decf	___fldiv@new_exp^0,w,c
  5707   002270  B0D8               	btfsc	status,0,c
  5708   002272  EF3D  F011         	goto	u3461
  5709   002276  EF3F  F011         	goto	u3460
  5710   00227A                     u3461:
  5711   00227A  EF4D  F011         	goto	l4130
  5712   00227E                     u3460:
  5713   00227E  0E00               	movlw	0
  5714   002280  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5715   002282  0E00               	movlw	0
  5716   002284  6E2C               	movwf	___fldiv@new_exp^0,c
  5717   002286  0E00               	movlw	0
  5718   002288  6E1B               	movwf	___fldiv@b^0,c
  5719   00228A  0E00               	movlw	0
  5720   00228C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5721   00228E  0E00               	movlw	0
  5722   002290  6E1D               	movwf	(___fldiv@b+2)^0,c
  5723   002292  0E00               	movlw	0
  5724   002294  6E1E               	movwf	(___fldiv@b+3)^0,c
  5725   002296  0E00               	movlw	0
  5726   002298  6E2B               	movwf	___fldiv@sign^0,c
  5727   00229A                     l4130:
  5728   00229A  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5729   00229E  A032               	btfss	___fldiv@bexp^0,0,c
  5730   0022A0  EF54  F011         	goto	u3471
  5731   0022A4  EF56  F011         	goto	u3470
  5732   0022A8                     u3471:
  5733   0022A8  EF59  F011         	goto	l4136
  5734   0022AC                     u3470:
  5735   0022AC  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5736   0022AE  EF5A  F011         	goto	l4138
  5737   0022B2                     l4136:
  5738   0022B2  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5739   0022B4                     l4138:
  5740   0022B4  90D8               	bcf	status,0,c
  5741   0022B6  3032               	rrcf	___fldiv@bexp^0,w,c
  5742   0022B8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5743   0022BA  EF10  F010         	goto	l4052
  5744   0022BE                     l1252:
  5745   0022BE  0012               	return		;funcret
  5746   0022C0                     __end_of___fldiv:
  5747                           	callstack 0
  5748                           
  5749 ;; *************** function _initUSART4 *****************
  5750 ;; Defined at:
  5751 ;;		line 14 in file "serial.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5769 ;;Total ram usage:        0 bytes
  5770 ;; Hardware stack levels used: 1
  5771 ;; Hardware stack levels required when called: 1
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_main
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text17
  5780   004428                     __ptext17:
  5781                           	callstack 0
  5782   004428                     _initUSART4:
  5783                           	callstack 29
  5784   004428                     
  5785                           ;serial.c: 15:     RC0PPS = 0x12;
  5786   004428  0E12               	movlw	18
  5787   00442A  010E               	movlb	14	; () banked
  5788   00442C  6F62               	movwf	98,b	;volatile
  5789                           
  5790                           ;serial.c: 16:     RX4PPS = 0x11;
  5791   00442E  0E11               	movlw	17
  5792   004430  6F15               	movwf	21,b	;volatile
  5793   004432                     
  5794                           ; BSR set to: 14
  5795                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5796   004432  97E9               	bcf	233,3,b	;volatile
  5797   004434                     
  5798                           ; BSR set to: 14
  5799                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5800   004434  95E8               	bcf	232,2,b	;volatile
  5801                           
  5802                           ;serial.c: 19:     SP4BRGL = 51;
  5803   004436  0E33               	movlw	51
  5804   004438  6FE5               	movwf	229,b	;volatile
  5805                           
  5806                           ;serial.c: 20:     SP4BRGH = 0;
  5807   00443A  0E00               	movlw	0
  5808   00443C  6FE6               	movwf	230,b	;volatile
  5809   00443E                     
  5810                           ; BSR set to: 14
  5811                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5812   00443E  89E7               	bsf	231,4,b	;volatile
  5813   004440                     
  5814                           ; BSR set to: 14
  5815                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5816   004440  8BE8               	bsf	232,5,b	;volatile
  5817   004442                     
  5818                           ; BSR set to: 14
  5819                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5820   004442  8FE7               	bsf	231,7,b	;volatile
  5821   004444                     
  5822                           ; BSR set to: 14
  5823   004444  0012               	return		;funcret
  5824   004446                     __end_of_initUSART4:
  5825                           	callstack 0
  5826                           
  5827 ;; *************** function _initDCmotorsPWM *****************
  5828 ;; Defined at:
  5829 ;;		line 5 in file "dc_motor.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5846 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5847 ;;Total ram usage:        2 bytes
  5848 ;; Hardware stack levels used: 1
  5849 ;; Hardware stack levels required when called: 1
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text18
  5858   003828                     __ptext18:
  5859                           	callstack 0
  5860   003828                     _initDCmotorsPWM:
  5861                           	callstack 29
  5862   003828                     
  5863                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5864   003828  9485               	bcf	133,2,c	;volatile
  5865                           
  5866                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5867   00382A  9E83               	bcf	131,7,c	;volatile
  5868                           
  5869                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5870   00382C  9885               	bcf	133,4,c	;volatile
  5871                           
  5872                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5873   00382E  9C87               	bcf	135,6,c	;volatile
  5874                           
  5875                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5876   003830  947D               	bcf	125,2,c	;volatile
  5877                           
  5878                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5879   003832  9E7B               	bcf	123,7,c	;volatile
  5880                           
  5881                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5882   003834  987D               	bcf	125,4,c	;volatile
  5883                           
  5884                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5885   003836  9C7F               	bcf	127,6,c	;volatile
  5886   003838                     
  5887                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5888   003838  0E05               	movlw	5
  5889   00383A  010E               	movlb	14	; () banked
  5890   00383C  6F74               	movwf	116,b	;volatile
  5891                           
  5892                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5893   00383E  0E06               	movlw	6
  5894   003840  6F76               	movwf	118,b	;volatile
  5895                           
  5896                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5897   003842  0E07               	movlw	7
  5898   003844  6F69               	movwf	105,b	;volatile
  5899                           
  5900                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5901   003846  0E08               	movlw	8
  5902   003848  6F88               	movwf	136,b	;volatile
  5903                           
  5904                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5905   00384A  50BD               	movf	189,w,c	;volatile
  5906   00384C  0B8F               	andlw	-113
  5907   00384E  0940               	iorlw	64
  5908   003850  6EBD               	movwf	189,c	;volatile
  5909                           
  5910                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5911   003852  0EE0               	movlw	-32
  5912   003854  16BE               	andwf	190,f,c	;volatile
  5913                           
  5914                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5915   003856  50BF               	movf	191,w,c	;volatile
  5916   003858  0BF0               	andlw	-16
  5917   00385A  0901               	iorlw	1
  5918   00385C  6EBF               	movwf	191,c	;volatile
  5919   00385E                     
  5920                           ; BSR set to: 14
  5921                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5922   00385E  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5923   003862                     
  5924                           ; BSR set to: 14
  5925                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5926   003862  8EBD               	bsf	189,7,c	;volatile
  5927                           
  5928                           ;dc_motor.c: 35:     CCPR1H=0;
  5929   003864  0E00               	movlw	0
  5930   003866  6EAA               	movwf	170,c	;volatile
  5931                           
  5932                           ;dc_motor.c: 36:     CCPR2H=0;
  5933   003868  0E00               	movlw	0
  5934   00386A  6EA6               	movwf	166,c	;volatile
  5935                           
  5936                           ;dc_motor.c: 37:     CCPR3H=0;
  5937   00386C  0E00               	movlw	0
  5938   00386E  010F               	movlb	15	; () banked
  5939   003870  6F25               	movwf	37,b	;volatile
  5940                           
  5941                           ;dc_motor.c: 38:     CCPR4H=0;
  5942   003872  0E00               	movlw	0
  5943   003874  6F21               	movwf	33,b	;volatile
  5944                           
  5945                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5946   003876  0EFC               	movlw	-4
  5947   003878  16AD               	andwf	173,f,c	;volatile
  5948                           
  5949                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5950   00387A  0EF3               	movlw	-13
  5951   00387C  16AD               	andwf	173,f,c	;volatile
  5952                           
  5953                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5954   00387E  0ECF               	movlw	-49
  5955   003880  16AD               	andwf	173,f,c	;volatile
  5956                           
  5957                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5958   003882  0E3F               	movlw	-193
  5959   003884  16AD               	andwf	173,f,c	;volatile
  5960   003886                     
  5961                           ; BSR set to: 15
  5962                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5963   003886  88AB               	bsf	171,4,c	;volatile
  5964                           
  5965                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5966   003888  50AB               	movf	171,w,c	;volatile
  5967   00388A  0BF0               	andlw	-16
  5968   00388C  090C               	iorlw	12
  5969   00388E  6EAB               	movwf	171,c	;volatile
  5970   003890                     
  5971                           ; BSR set to: 15
  5972                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5973   003890  8EAB               	bsf	171,7,c	;volatile
  5974   003892                     
  5975                           ; BSR set to: 15
  5976                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5977   003892  88A7               	bsf	167,4,c	;volatile
  5978                           
  5979                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5980   003894  50A7               	movf	167,w,c	;volatile
  5981   003896  0BF0               	andlw	-16
  5982   003898  090C               	iorlw	12
  5983   00389A  6EA7               	movwf	167,c	;volatile
  5984   00389C                     
  5985                           ; BSR set to: 15
  5986                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5987   00389C  8EA7               	bsf	167,7,c	;volatile
  5988   00389E                     
  5989                           ; BSR set to: 15
  5990                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5991   00389E  8926               	bsf	38,4,b	;volatile
  5992                           
  5993                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5994   0038A0  5126               	movf	38,w,b	;volatile
  5995   0038A2  0BF0               	andlw	-16
  5996   0038A4  090C               	iorlw	12
  5997   0038A6  6F26               	movwf	38,b	;volatile
  5998   0038A8                     
  5999                           ; BSR set to: 15
  6000                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6001   0038A8  8F26               	bsf	38,7,b	;volatile
  6002   0038AA                     
  6003                           ; BSR set to: 15
  6004                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6005   0038AA  8922               	bsf	34,4,b	;volatile
  6006                           
  6007                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6008   0038AC  5122               	movf	34,w,b	;volatile
  6009   0038AE  0BF0               	andlw	-16
  6010   0038B0  090C               	iorlw	12
  6011   0038B2  6F22               	movwf	34,b	;volatile
  6012   0038B4                     
  6013                           ; BSR set to: 15
  6014                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6015   0038B4  8F22               	bsf	34,7,b	;volatile
  6016   0038B6                     
  6017                           ; BSR set to: 15
  6018   0038B6  0012               	return		;funcret
  6019   0038B8                     __end_of_initDCmotorsPWM:
  6020                           	callstack 0
  6021                           
  6022 ;; *************** function _get16bitTMR0val *****************
  6023 ;; Defined at:
  6024 ;;		line 32 in file "timers.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  combined_val    2    7[COMRAM] unsigned int 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  2    1[COMRAM] unsigned int 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6038 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6040 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6041 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6042 ;;Total ram usage:        8 bytes
  6043 ;; Hardware stack levels used: 1
  6044 ;; Hardware stack levels required when called: 1
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text19
  6053   0043E6                     __ptext19:
  6054                           	callstack 0
  6055   0043E6                     _get16bitTMR0val:
  6056                           	callstack 29
  6057   0043E6                     
  6058                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6059   0043E6  50D4               	movf	212,w,c	;volatile
  6060   0043E8  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6061   0043EA  6A04               	clrf	??_get16bitTMR0val^0,c
  6062   0043EC  50D3               	movf	211,w,c	;volatile
  6063   0043EE  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6064   0043F0  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6065   0043F2  5004               	movf	??_get16bitTMR0val^0,w,c
  6066   0043F4  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6067   0043F6  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6068   0043F8  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6069   0043FA  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6070   0043FC  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6071   0043FE                     
  6072                           ;timers.c: 36:     return combined_value;
  6073   0043FE  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6074   004402  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6075   004406  0012               	return		;funcret
  6076   004408                     __end_of_get16bitTMR0val:
  6077                           	callstack 0
  6078                           
  6079 ;; *************** function _decision *****************
  6080 ;; Defined at:
  6081 ;;		line 277 in file "color.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;  hue             2   70[COMRAM] unsigned int 
  6084 ;;  path_length     2   72[COMRAM] unsigned int 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  color           2   74[COMRAM] unsigned int 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      void 
  6089 ;; Registers used:
  6090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6100 ;;Total ram usage:        6 bytes
  6101 ;; Hardware stack levels used: 1
  6102 ;; Hardware stack levels required when called: 10
  6103 ;; This function calls:
  6104 ;;		_moveBlue
  6105 ;;		_moveGreen
  6106 ;;		_moveLightBlue
  6107 ;;		_moveOrange
  6108 ;;		_movePink
  6109 ;;		_moveRed
  6110 ;;		_moveYellow
  6111 ;;		_send2USART
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text20
  6118   002586                     __ptext20:
  6119                           	callstack 0
  6120   002586                     _decision:
  6121                           	callstack 20
  6122   002586                     
  6123                           ;color.c: 282:     unsigned int color;;color.c: 284:     if (hue<=10 || hue>=355) {
  6124   002586  5048               	movf	(decision@hue+1)^0,w,c
  6125   002588  E109               	bnz	u5160
  6126   00258A  0E0B               	movlw	11
  6127   00258C  5C47               	subwf	decision@hue^0,w,c
  6128   00258E  A0D8               	btfss	status,0,c
  6129   002590  EFCC  F012         	goto	u5161
  6130   002594  EFCE  F012         	goto	u5160
  6131   002598                     u5161:
  6132   002598  EFD9  F012         	goto	l5808
  6133   00259C                     u5160:
  6134   00259C  0E63               	movlw	99
  6135   00259E  5C47               	subwf	decision@hue^0,w,c
  6136   0025A0  0E01               	movlw	1
  6137   0025A2  5848               	subwfb	(decision@hue+1)^0,w,c
  6138   0025A4  A0D8               	btfss	status,0,c
  6139   0025A6  EFD7  F012         	goto	u5171
  6140   0025AA  EFD9  F012         	goto	u5170
  6141   0025AE                     u5171:
  6142   0025AE  EFE9  F012         	goto	l5812
  6143   0025B2                     u5170:
  6144   0025B2                     l5808:
  6145                           
  6146                           ;color.c: 285:         moveRed(&motorL, &motorR, path_length);
  6147   0025B2  0ED4               	movlw	low _motorL
  6148   0025B4  6E1D               	movwf	moveRed@mL^0,c
  6149   0025B6  0ECB               	movlw	low _motorR
  6150   0025B8  6E1E               	movwf	moveRed@mR^0,c
  6151   0025BA  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6152   0025BE  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6153   0025C2  ECCC  F01E         	call	_moveRed	;wreg free
  6154   0025C6                     
  6155                           ;color.c: 286:         color = 1;
  6156   0025C6  0E00               	movlw	0
  6157   0025C8  6E4C               	movwf	(decision@color+1)^0,c
  6158   0025CA  0E01               	movlw	1
  6159   0025CC  6E4B               	movwf	decision@color^0,c
  6160                           
  6161                           ;color.c: 287:     } else if (hue>=105 && hue<=130){
  6162   0025CE  EFCD  F013         	goto	l5860
  6163   0025D2                     l5812:
  6164   0025D2  5048               	movf	(decision@hue+1)^0,w,c
  6165   0025D4  E109               	bnz	u5180
  6166   0025D6  0E69               	movlw	105
  6167   0025D8  5C47               	subwf	decision@hue^0,w,c
  6168   0025DA  A0D8               	btfss	status,0,c
  6169   0025DC  EFF2  F012         	goto	u5181
  6170   0025E0  EFF4  F012         	goto	u5180
  6171   0025E4                     u5181:
  6172   0025E4  EF0F  F013         	goto	l5820
  6173   0025E8                     u5180:
  6174   0025E8  5048               	movf	(decision@hue+1)^0,w,c
  6175   0025EA  E107               	bnz	u5191
  6176   0025EC  0E83               	movlw	131
  6177   0025EE  5C47               	subwf	decision@hue^0,w,c
  6178   0025F0  B0D8               	btfsc	status,0,c
  6179   0025F2  EFFD  F012         	goto	u5191
  6180   0025F6  EFFF  F012         	goto	u5190
  6181   0025FA                     u5191:
  6182   0025FA  EF0F  F013         	goto	l5820
  6183   0025FE                     u5190:
  6184   0025FE                     
  6185                           ;color.c: 288:         moveGreen(&motorL, &motorR, path_length);
  6186   0025FE  0ED4               	movlw	low _motorL
  6187   002600  6E1D               	movwf	moveGreen@mL^0,c
  6188   002602  0ECB               	movlw	low _motorR
  6189   002604  6E1E               	movwf	moveGreen@mR^0,c
  6190   002606  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6191   00260A  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6192   00260E  EC5C  F01F         	call	_moveGreen	;wreg free
  6193   002612                     
  6194                           ;color.c: 289:         color = 2;
  6195   002612  0E00               	movlw	0
  6196   002614  6E4C               	movwf	(decision@color+1)^0,c
  6197   002616  0E02               	movlw	2
  6198   002618  6E4B               	movwf	decision@color^0,c
  6199                           
  6200                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6201   00261A  EFCD  F013         	goto	l5860
  6202   00261E                     l5820:
  6203   00261E  5048               	movf	(decision@hue+1)^0,w,c
  6204   002620  E109               	bnz	u5200
  6205   002622  0EE6               	movlw	230
  6206   002624  5C47               	subwf	decision@hue^0,w,c
  6207   002626  A0D8               	btfss	status,0,c
  6208   002628  EF18  F013         	goto	u5201
  6209   00262C  EF1A  F013         	goto	u5200
  6210   002630                     u5201:
  6211   002630  EF35  F013         	goto	l5828
  6212   002634                     u5200:
  6213   002634  5048               	movf	(decision@hue+1)^0,w,c
  6214   002636  E107               	bnz	u5211
  6215   002638  0EF1               	movlw	241
  6216   00263A  5C47               	subwf	decision@hue^0,w,c
  6217   00263C  B0D8               	btfsc	status,0,c
  6218   00263E  EF23  F013         	goto	u5211
  6219   002642  EF25  F013         	goto	u5210
  6220   002646                     u5211:
  6221   002646  EF35  F013         	goto	l5828
  6222   00264A                     u5210:
  6223   00264A                     
  6224                           ;color.c: 291:         moveBlue(&motorL,&motorR, path_length);
  6225   00264A  0ED4               	movlw	low _motorL
  6226   00264C  6E1D               	movwf	moveBlue@mL^0,c
  6227   00264E  0ECB               	movlw	low _motorR
  6228   002650  6E1E               	movwf	moveBlue@mR^0,c
  6229   002652  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6230   002656  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6231   00265A  EC80  F01F         	call	_moveBlue	;wreg free
  6232   00265E                     
  6233                           ;color.c: 292:         color = 3;
  6234   00265E  0E00               	movlw	0
  6235   002660  6E4C               	movwf	(decision@color+1)^0,c
  6236   002662  0E03               	movlw	3
  6237   002664  6E4B               	movwf	decision@color^0,c
  6238                           
  6239                           ;color.c: 293:     } else if (hue>=216 && hue<=221){
  6240   002666  EFCD  F013         	goto	l5860
  6241   00266A                     l5828:
  6242   00266A  5048               	movf	(decision@hue+1)^0,w,c
  6243   00266C  E109               	bnz	u5220
  6244   00266E  0ED8               	movlw	216
  6245   002670  5C47               	subwf	decision@hue^0,w,c
  6246   002672  A0D8               	btfss	status,0,c
  6247   002674  EF3E  F013         	goto	u5221
  6248   002678  EF40  F013         	goto	u5220
  6249   00267C                     u5221:
  6250   00267C  EF5B  F013         	goto	l5836
  6251   002680                     u5220:
  6252   002680  5048               	movf	(decision@hue+1)^0,w,c
  6253   002682  E107               	bnz	u5231
  6254   002684  0EDE               	movlw	222
  6255   002686  5C47               	subwf	decision@hue^0,w,c
  6256   002688  B0D8               	btfsc	status,0,c
  6257   00268A  EF49  F013         	goto	u5231
  6258   00268E  EF4B  F013         	goto	u5230
  6259   002692                     u5231:
  6260   002692  EF5B  F013         	goto	l5836
  6261   002696                     u5230:
  6262   002696                     
  6263                           ;color.c: 294:         moveLightBlue(&motorL,&motorR, path_length);
  6264   002696  0ED4               	movlw	low _motorL
  6265   002698  6E1D               	movwf	moveLightBlue@mL^0,c
  6266   00269A  0ECB               	movlw	low _motorR
  6267   00269C  6E1E               	movwf	moveLightBlue@mR^0,c
  6268   00269E  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6269   0026A2  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6270   0026A6  EC38  F01F         	call	_moveLightBlue	;wreg free
  6271   0026AA                     
  6272                           ;color.c: 295:         color = 4;
  6273   0026AA  0E00               	movlw	0
  6274   0026AC  6E4C               	movwf	(decision@color+1)^0,c
  6275   0026AE  0E04               	movlw	4
  6276   0026B0  6E4B               	movwf	decision@color^0,c
  6277                           
  6278                           ;color.c: 296:     } else if (hue>=302 && hue<=346){
  6279   0026B2  EFCD  F013         	goto	l5860
  6280   0026B6                     l5836:
  6281   0026B6  0E2E               	movlw	46
  6282   0026B8  5C47               	subwf	decision@hue^0,w,c
  6283   0026BA  0E01               	movlw	1
  6284   0026BC  5848               	subwfb	(decision@hue+1)^0,w,c
  6285   0026BE  A0D8               	btfss	status,0,c
  6286   0026C0  EF64  F013         	goto	u5241
  6287   0026C4  EF66  F013         	goto	u5240
  6288   0026C8                     u5241:
  6289   0026C8  EF81  F013         	goto	l5844
  6290   0026CC                     u5240:
  6291   0026CC  0E5B               	movlw	91
  6292   0026CE  5C47               	subwf	decision@hue^0,w,c
  6293   0026D0  0E01               	movlw	1
  6294   0026D2  5848               	subwfb	(decision@hue+1)^0,w,c
  6295   0026D4  B0D8               	btfsc	status,0,c
  6296   0026D6  EF6F  F013         	goto	u5251
  6297   0026DA  EF71  F013         	goto	u5250
  6298   0026DE                     u5251:
  6299   0026DE  EF81  F013         	goto	l5844
  6300   0026E2                     u5250:
  6301   0026E2                     
  6302                           ;color.c: 297:         moveYellow(&motorL,&motorR, path_length);
  6303   0026E2  0ED4               	movlw	low _motorL
  6304   0026E4  6E1D               	movwf	moveYellow@mL^0,c
  6305   0026E6  0ECB               	movlw	low _motorR
  6306   0026E8  6E1E               	movwf	moveYellow@mR^0,c
  6307   0026EA  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6308   0026EE  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6309   0026F2  ECA8  F01E         	call	_moveYellow	;wreg free
  6310   0026F6                     
  6311                           ;color.c: 298:         color = 5;
  6312   0026F6  0E00               	movlw	0
  6313   0026F8  6E4C               	movwf	(decision@color+1)^0,c
  6314   0026FA  0E05               	movlw	5
  6315   0026FC  6E4B               	movwf	decision@color^0,c
  6316                           
  6317                           ;color.c: 299:     } else if (hue>14 && hue<=35){
  6318   0026FE  EFCD  F013         	goto	l5860
  6319   002702                     l5844:
  6320   002702  5048               	movf	(decision@hue+1)^0,w,c
  6321   002704  E109               	bnz	u5260
  6322   002706  0E0F               	movlw	15
  6323   002708  5C47               	subwf	decision@hue^0,w,c
  6324   00270A  A0D8               	btfss	status,0,c
  6325   00270C  EF8A  F013         	goto	u5261
  6326   002710  EF8C  F013         	goto	u5260
  6327   002714                     u5261:
  6328   002714  EFA7  F013         	goto	l5852
  6329   002718                     u5260:
  6330   002718  5048               	movf	(decision@hue+1)^0,w,c
  6331   00271A  E107               	bnz	u5271
  6332   00271C  0E24               	movlw	36
  6333   00271E  5C47               	subwf	decision@hue^0,w,c
  6334   002720  B0D8               	btfsc	status,0,c
  6335   002722  EF95  F013         	goto	u5271
  6336   002726  EF97  F013         	goto	u5270
  6337   00272A                     u5271:
  6338   00272A  EFA7  F013         	goto	l5852
  6339   00272E                     u5270:
  6340   00272E                     
  6341                           ;color.c: 300:         moveOrange(&motorL,&motorR, path_length);
  6342   00272E  0ED4               	movlw	low _motorL
  6343   002730  6E1D               	movwf	moveOrange@mL^0,c
  6344   002732  0ECB               	movlw	low _motorR
  6345   002734  6E1E               	movwf	moveOrange@mR^0,c
  6346   002736  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6347   00273A  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6348   00273E  EC14  F01F         	call	_moveOrange	;wreg free
  6349   002742                     
  6350                           ;color.c: 301:         color= 6;
  6351   002742  0E00               	movlw	0
  6352   002744  6E4C               	movwf	(decision@color+1)^0,c
  6353   002746  0E06               	movlw	6
  6354   002748  6E4B               	movwf	decision@color^0,c
  6355                           
  6356                           ;color.c: 302:     } else if (hue>=244 && hue<=251){
  6357   00274A  EFCD  F013         	goto	l5860
  6358   00274E                     l5852:
  6359   00274E  5048               	movf	(decision@hue+1)^0,w,c
  6360   002750  E109               	bnz	u5280
  6361   002752  0EF4               	movlw	244
  6362   002754  5C47               	subwf	decision@hue^0,w,c
  6363   002756  A0D8               	btfss	status,0,c
  6364   002758  EFB0  F013         	goto	u5281
  6365   00275C  EFB2  F013         	goto	u5280
  6366   002760                     u5281:
  6367   002760  EFCD  F013         	goto	l158
  6368   002764                     u5280:
  6369   002764  5048               	movf	(decision@hue+1)^0,w,c
  6370   002766  E107               	bnz	u5291
  6371   002768  0EFC               	movlw	252
  6372   00276A  5C47               	subwf	decision@hue^0,w,c
  6373   00276C  B0D8               	btfsc	status,0,c
  6374   00276E  EFBB  F013         	goto	u5291
  6375   002772  EFBD  F013         	goto	u5290
  6376   002776                     u5291:
  6377   002776  EFCD  F013         	goto	l158
  6378   00277A                     u5290:
  6379   00277A                     
  6380                           ;color.c: 303:         movePink(&motorL,&motorR, path_length);
  6381   00277A  0ED4               	movlw	low _motorL
  6382   00277C  6E1D               	movwf	movePink@mL^0,c
  6383   00277E  0ECB               	movlw	low _motorR
  6384   002780  6E1E               	movwf	movePink@mR^0,c
  6385   002782  C049  F01F         	movff	decision@path_length,movePink@path_length
  6386   002786  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6387   00278A  ECF0  F01E         	call	_movePink	;wreg free
  6388   00278E                     
  6389                           ;color.c: 304:         color = 7;
  6390   00278E  0E00               	movlw	0
  6391   002790  6E4C               	movwf	(decision@color+1)^0,c
  6392   002792  0E07               	movlw	7
  6393   002794  6E4B               	movwf	decision@color^0,c
  6394   002796  EFCD  F013         	goto	l5860
  6395   00279A                     l158:
  6396   00279A                     l5860:
  6397                           
  6398                           ;color.c: 307:     send2USART(color);
  6399   00279A  C04B  F045         	movff	decision@color,send2USART@hue
  6400   00279E  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6401   0027A2  EC23  F022         	call	_send2USART	;wreg free
  6402   0027A6  0012               	return		;funcret
  6403   0027A8                     __end_of_decision:
  6404                           	callstack 0
  6405                           
  6406 ;; *************** function _send2USART *****************
  6407 ;; Defined at:
  6408 ;;		line 146 in file "serial.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  hue             2   68[COMRAM] unsigned int 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      void 
  6415 ;; Registers used:
  6416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6423 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6425 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6426 ;;Total ram usage:       52 bytes
  6427 ;; Hardware stack levels used: 1
  6428 ;; Hardware stack levels required when called: 9
  6429 ;; This function calls:
  6430 ;;		_sendStringSerial4
  6431 ;;		_sprintf
  6432 ;; This function is called by:
  6433 ;;		_decision
  6434 ;;		_main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text21
  6439   004446                     __ptext21:
  6440                           	callstack 0
  6441   004446                     _send2USART:
  6442                           	callstack 21
  6443   004446                     
  6444                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6445   004446  0E60               	movlw	low send2USART@hue_char
  6446   004448  6E32               	movwf	sprintf@s^0,c
  6447   00444A  0E9A               	movlw	low STR_12
  6448   00444C  6E33               	movwf	sprintf@fmt^0,c
  6449   00444E  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6450   004452  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6451   004456  ECA5  F020         	call	_sprintf	;wreg free
  6452   00445A                     
  6453                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6454   00445A  0E60               	movlw	low send2USART@hue_char
  6455   00445C  6E03               	movwf	sendStringSerial4@string^0,c
  6456   00445E  EC56  F021         	call	_sendStringSerial4	;wreg free
  6457   004462  0012               	return		;funcret
  6458   004464                     __end_of_send2USART:
  6459                           	callstack 0
  6460                           
  6461 ;; *************** function _moveYellow *****************
  6462 ;; Defined at:
  6463 ;;		line 282 in file "dc_motor.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6466 ;;		 -> motorL(9), 
  6467 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6468 ;;		 -> motorR(9), 
  6469 ;;  path_length     2   30[COMRAM] unsigned int 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  1    wreg      void 
  6474 ;; Registers used:
  6475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;Total ram usage:        6 bytes
  6486 ;; Hardware stack levels used: 1
  6487 ;; Hardware stack levels required when called: 5
  6488 ;; This function calls:
  6489 ;;		_backOneAndHalf
  6490 ;;		_logAction
  6491 ;;		_right90
  6492 ;; This function is called by:
  6493 ;;		_decision
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           	psect	text22
  6498   003D50                     __ptext22:
  6499                           	callstack 0
  6500   003D50                     _moveYellow:
  6501                           	callstack 24
  6502   003D50                     
  6503                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6504   003D50  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6505   003D54  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6506   003D58  ECF2  F020         	call	_backOneAndHalf	;wreg free
  6507   003D5C                     
  6508                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6509   003D5C  0E29               	movlw	41
  6510   003D5E  6E22               	movwf	(??_moveYellow+1)^0,c
  6511   003D60  0E96               	movlw	150
  6512   003D62  6E21               	movwf	??_moveYellow^0,c
  6513   003D64  0E7F               	movlw	127
  6514   003D66                     u5497:
  6515   003D66  2EE8               	decfsz	wreg,f,c
  6516   003D68  D7FE               	bra	u5497
  6517   003D6A  2E21               	decfsz	??_moveYellow^0,f,c
  6518   003D6C  D7FC               	bra	u5497
  6519   003D6E  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6520   003D70  D7FA               	bra	u5497
  6521   003D72  0000               	nop	
  6522   003D74                     
  6523                           ;dc_motor.c: 287:     right90(mL,mR);
  6524   003D74  C01D  F019         	movff	moveYellow@mL,right90@mL
  6525   003D78  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6526   003D7C  EC6F  F021         	call	_right90	;wreg free
  6527   003D80                     
  6528                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6529   003D80  0E00               	movlw	0
  6530   003D82  6E09               	movwf	(logAction@time+1)^0,c
  6531   003D84  0E00               	movlw	0
  6532   003D86  6E08               	movwf	logAction@time^0,c
  6533   003D88  C01F  F00A         	movff	moveYellow@path_length,logAction@pathLength
  6534   003D8C  C020  F00B         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6535   003D90  0E52               	movlw	82
  6536   003D92  ECD3  F01D         	call	_logAction
  6537   003D96  0012               	return		;funcret
  6538   003D98                     __end_of_moveYellow:
  6539                           	callstack 0
  6540                           
  6541 ;; *************** function _moveRed *****************
  6542 ;; Defined at:
  6543 ;;		line 255 in file "dc_motor.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6546 ;;		 -> motorL(9), 
  6547 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6548 ;;		 -> motorR(9), 
  6549 ;;  path_length     2   30[COMRAM] unsigned int 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6561 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6563 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6564 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6565 ;;Total ram usage:        6 bytes
  6566 ;; Hardware stack levels used: 1
  6567 ;; Hardware stack levels required when called: 5
  6568 ;; This function calls:
  6569 ;;		_backHalf
  6570 ;;		_logAction
  6571 ;;		_right90
  6572 ;; This function is called by:
  6573 ;;		_decision
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text23
  6578   003D98                     __ptext23:
  6579                           	callstack 0
  6580   003D98                     _moveRed:
  6581                           	callstack 24
  6582   003D98                     
  6583                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6584   003D98  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6585   003D9C  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6586   003DA0  EC9F  F021         	call	_backHalf	;wreg free
  6587   003DA4                     
  6588                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6589   003DA4  0E29               	movlw	41
  6590   003DA6  6E22               	movwf	(??_moveRed+1)^0,c
  6591   003DA8  0E96               	movlw	150
  6592   003DAA  6E21               	movwf	??_moveRed^0,c
  6593   003DAC  0E7F               	movlw	127
  6594   003DAE                     u5507:
  6595   003DAE  2EE8               	decfsz	wreg,f,c
  6596   003DB0  D7FE               	bra	u5507
  6597   003DB2  2E21               	decfsz	??_moveRed^0,f,c
  6598   003DB4  D7FC               	bra	u5507
  6599   003DB6  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6600   003DB8  D7FA               	bra	u5507
  6601   003DBA  0000               	nop	
  6602   003DBC                     
  6603                           ;dc_motor.c: 260:     right90(mL,mR);
  6604   003DBC  C01D  F019         	movff	moveRed@mL,right90@mL
  6605   003DC0  C01E  F01A         	movff	moveRed@mR,right90@mR
  6606   003DC4  EC6F  F021         	call	_right90	;wreg free
  6607   003DC8                     
  6608                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6609   003DC8  0E00               	movlw	0
  6610   003DCA  6E09               	movwf	(logAction@time+1)^0,c
  6611   003DCC  0E00               	movlw	0
  6612   003DCE  6E08               	movwf	logAction@time^0,c
  6613   003DD0  C01F  F00A         	movff	moveRed@path_length,logAction@pathLength
  6614   003DD4  C020  F00B         	movff	moveRed@path_length+1,logAction@pathLength+1
  6615   003DD8  0E52               	movlw	82
  6616   003DDA  ECD3  F01D         	call	_logAction
  6617   003DDE  0012               	return		;funcret
  6618   003DE0                     __end_of_moveRed:
  6619                           	callstack 0
  6620                           
  6621 ;; *************** function _right90 *****************
  6622 ;; Defined at:
  6623 ;;		line 193 in file "dc_motor.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6626 ;;		 -> motorL(9), 
  6627 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6628 ;;		 -> motorR(9), 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6644 ;;Total ram usage:        4 bytes
  6645 ;; Hardware stack levels used: 1
  6646 ;; Hardware stack levels required when called: 4
  6647 ;; This function calls:
  6648 ;;		_stop
  6649 ;;		_turnRight
  6650 ;; This function is called by:
  6651 ;;		_moveRed
  6652 ;;		_moveYellow
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text24
  6657   0042DE                     __ptext24:
  6658                           	callstack 0
  6659   0042DE                     _right90:
  6660                           	callstack 24
  6661   0042DE                     
  6662                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6663   0042DE  C019  F014         	movff	right90@mL,turnRight@mL
  6664   0042E2  C01A  F015         	movff	right90@mR,turnRight@mR
  6665   0042E6  ECA3  F01C         	call	_turnRight	;wreg free
  6666   0042EA                     
  6667                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  6668   0042EA  0E18               	movlw	24
  6669   0042EC  6E1C               	movwf	(??_right90+1)^0,c
  6670   0042EE  0E8A               	movlw	138
  6671   0042F0  6E1B               	movwf	??_right90^0,c
  6672   0042F2  0EE8               	movlw	232
  6673   0042F4                     u5517:
  6674   0042F4  2EE8               	decfsz	wreg,f,c
  6675   0042F6  D7FE               	bra	u5517
  6676   0042F8  2E1B               	decfsz	??_right90^0,f,c
  6677   0042FA  D7FC               	bra	u5517
  6678   0042FC  2E1C               	decfsz	(??_right90+1)^0,f,c
  6679   0042FE  D7FA               	bra	u5517
  6680   004300                     
  6681                           ;dc_motor.c: 197:     stop(mL,mR);
  6682   004300  C019  F014         	movff	right90@mL,stop@mL
  6683   004304  C01A  F015         	movff	right90@mR,stop@mR
  6684   004308  EC5C  F01C         	call	_stop	;wreg free
  6685   00430C  0012               	return		;funcret
  6686   00430E                     __end_of_right90:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _movePink *****************
  6690 ;; Defined at:
  6691 ;;		line 291 in file "dc_motor.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6694 ;;		 -> motorL(9), 
  6695 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6696 ;;		 -> motorR(9), 
  6697 ;;  path_length     2   30[COMRAM] unsigned int 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6709 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;Total ram usage:        6 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 5
  6716 ;; This function calls:
  6717 ;;		_backOneAndHalf
  6718 ;;		_left90
  6719 ;;		_logAction
  6720 ;; This function is called by:
  6721 ;;		_decision
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text25
  6726   003DE0                     __ptext25:
  6727                           	callstack 0
  6728   003DE0                     _movePink:
  6729                           	callstack 24
  6730   003DE0                     
  6731                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6732   003DE0  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6733   003DE4  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6734   003DE8  ECF2  F020         	call	_backOneAndHalf	;wreg free
  6735   003DEC                     
  6736                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6737   003DEC  0E29               	movlw	41
  6738   003DEE  6E22               	movwf	(??_movePink+1)^0,c
  6739   003DF0  0E96               	movlw	150
  6740   003DF2  6E21               	movwf	??_movePink^0,c
  6741   003DF4  0E7F               	movlw	127
  6742   003DF6                     u5527:
  6743   003DF6  2EE8               	decfsz	wreg,f,c
  6744   003DF8  D7FE               	bra	u5527
  6745   003DFA  2E21               	decfsz	??_movePink^0,f,c
  6746   003DFC  D7FC               	bra	u5527
  6747   003DFE  2E22               	decfsz	(??_movePink+1)^0,f,c
  6748   003E00  D7FA               	bra	u5527
  6749   003E02  0000               	nop	
  6750   003E04                     
  6751                           ;dc_motor.c: 296:     left90(mL,mR);
  6752   003E04  C01D  F019         	movff	movePink@mL,left90@mL
  6753   003E08  C01E  F01A         	movff	movePink@mR,left90@mR
  6754   003E0C  EC87  F021         	call	_left90	;wreg free
  6755   003E10                     
  6756                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6757   003E10  0E00               	movlw	0
  6758   003E12  6E09               	movwf	(logAction@time+1)^0,c
  6759   003E14  0E00               	movlw	0
  6760   003E16  6E08               	movwf	logAction@time^0,c
  6761   003E18  C01F  F00A         	movff	movePink@path_length,logAction@pathLength
  6762   003E1C  C020  F00B         	movff	movePink@path_length+1,logAction@pathLength+1
  6763   003E20  0E4C               	movlw	76
  6764   003E22  ECD3  F01D         	call	_logAction
  6765   003E26  0012               	return		;funcret
  6766   003E28                     __end_of_movePink:
  6767                           	callstack 0
  6768                           
  6769 ;; *************** function _backOneAndHalf *****************
  6770 ;; Defined at:
  6771 ;;		line 241 in file "dc_motor.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6774 ;;		 -> motorL(9), 
  6775 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6776 ;;		 -> motorR(9), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6791 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6792 ;;Total ram usage:        4 bytes
  6793 ;; Hardware stack levels used: 1
  6794 ;; Hardware stack levels required when called: 4
  6795 ;; This function calls:
  6796 ;;		_fullSpeedBack
  6797 ;;		_stop
  6798 ;; This function is called by:
  6799 ;;		_moveYellow
  6800 ;;		_movePink
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text26
  6805   0041E4                     __ptext26:
  6806                           	callstack 0
  6807   0041E4                     _backOneAndHalf:
  6808                           	callstack 24
  6809   0041E4                     
  6810                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6811   0041E4  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6812   0041E8  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6813   0041EC  EC5E  F01D         	call	_fullSpeedBack	;wreg free
  6814   0041F0                     
  6815                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6816   0041F0  0E6A               	movlw	106
  6817   0041F2  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6818   0041F4  0E85               	movlw	133
  6819   0041F6  6E1B               	movwf	??_backOneAndHalf^0,c
  6820   0041F8  0EB4               	movlw	180
  6821   0041FA                     u5537:
  6822   0041FA  2EE8               	decfsz	wreg,f,c
  6823   0041FC  D7FE               	bra	u5537
  6824   0041FE  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6825   004200  D7FC               	bra	u5537
  6826   004202  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6827   004204  D7FA               	bra	u5537
  6828   004206  D000               	nop2	
  6829   004208                     
  6830                           ;dc_motor.c: 245:     stop(mL,mR);
  6831   004208  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6832   00420C  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6833   004210  EC5C  F01C         	call	_stop	;wreg free
  6834   004214  0012               	return		;funcret
  6835   004216                     __end_of_backOneAndHalf:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _moveOrange *****************
  6839 ;; Defined at:
  6840 ;;		line 300 in file "dc_motor.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6843 ;;		 -> motorL(9), 
  6844 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6845 ;;		 -> motorR(9), 
  6846 ;;  path_length     2   30[COMRAM] unsigned int 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;		None
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6858 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6861 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6862 ;;Total ram usage:        6 bytes
  6863 ;; Hardware stack levels used: 1
  6864 ;; Hardware stack levels required when called: 5
  6865 ;; This function calls:
  6866 ;;		_backHalf
  6867 ;;		_logAction
  6868 ;;		_right135
  6869 ;; This function is called by:
  6870 ;;		_decision
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text27
  6875   003E28                     __ptext27:
  6876                           	callstack 0
  6877   003E28                     _moveOrange:
  6878                           	callstack 24
  6879   003E28                     
  6880                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6881   003E28  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6882   003E2C  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6883   003E30  EC9F  F021         	call	_backHalf	;wreg free
  6884   003E34                     
  6885                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6886   003E34  0E29               	movlw	41
  6887   003E36  6E22               	movwf	(??_moveOrange+1)^0,c
  6888   003E38  0E96               	movlw	150
  6889   003E3A  6E21               	movwf	??_moveOrange^0,c
  6890   003E3C  0E7F               	movlw	127
  6891   003E3E                     u5547:
  6892   003E3E  2EE8               	decfsz	wreg,f,c
  6893   003E40  D7FE               	bra	u5547
  6894   003E42  2E21               	decfsz	??_moveOrange^0,f,c
  6895   003E44  D7FC               	bra	u5547
  6896   003E46  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6897   003E48  D7FA               	bra	u5547
  6898   003E4A  0000               	nop	
  6899   003E4C                     
  6900                           ;dc_motor.c: 305:     right135(mL,mR);
  6901   003E4C  C01D  F019         	movff	moveOrange@mL,right135@mL
  6902   003E50  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6903   003E54  EC0B  F021         	call	_right135	;wreg free
  6904   003E58                     
  6905                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6906   003E58  0E00               	movlw	0
  6907   003E5A  6E09               	movwf	(logAction@time+1)^0,c
  6908   003E5C  0E00               	movlw	0
  6909   003E5E  6E08               	movwf	logAction@time^0,c
  6910   003E60  C01F  F00A         	movff	moveOrange@path_length,logAction@pathLength
  6911   003E64  C020  F00B         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6912   003E68  0E52               	movlw	82
  6913   003E6A  ECD3  F01D         	call	_logAction
  6914   003E6E  0012               	return		;funcret
  6915   003E70                     __end_of_moveOrange:
  6916                           	callstack 0
  6917                           
  6918 ;; *************** function _right135 *****************
  6919 ;; Defined at:
  6920 ;;		line 217 in file "dc_motor.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6923 ;;		 -> motorL(9), 
  6924 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6925 ;;		 -> motorR(9), 
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6940 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6941 ;;Total ram usage:        4 bytes
  6942 ;; Hardware stack levels used: 1
  6943 ;; Hardware stack levels required when called: 4
  6944 ;; This function calls:
  6945 ;;		_stop
  6946 ;;		_turnRight
  6947 ;; This function is called by:
  6948 ;;		_moveOrange
  6949 ;;		_reverseTurn
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text28
  6954   004216                     __ptext28:
  6955                           	callstack 0
  6956   004216                     _right135:
  6957                           	callstack 24
  6958   004216                     
  6959                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6960   004216  C019  F014         	movff	right135@mL,turnRight@mL
  6961   00421A  C01A  F015         	movff	right135@mR,turnRight@mR
  6962   00421E  ECA3  F01C         	call	_turnRight	;wreg free
  6963   004222                     
  6964                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6965   004222  0E21               	movlw	33
  6966   004224  6E1C               	movwf	(??_right135+1)^0,c
  6967   004226  0E78               	movlw	120
  6968   004228  6E1B               	movwf	??_right135^0,c
  6969   00422A  0E98               	movlw	152
  6970   00422C                     u5557:
  6971   00422C  2EE8               	decfsz	wreg,f,c
  6972   00422E  D7FE               	bra	u5557
  6973   004230  2E1B               	decfsz	??_right135^0,f,c
  6974   004232  D7FC               	bra	u5557
  6975   004234  2E1C               	decfsz	(??_right135+1)^0,f,c
  6976   004236  D7FA               	bra	u5557
  6977   004238  D000               	nop2	
  6978   00423A                     
  6979                           ;dc_motor.c: 221:     stop(mL,mR);
  6980   00423A  C019  F014         	movff	right135@mL,stop@mL
  6981   00423E  C01A  F015         	movff	right135@mR,stop@mR
  6982   004242  EC5C  F01C         	call	_stop	;wreg free
  6983   004246  0012               	return		;funcret
  6984   004248                     __end_of_right135:
  6985                           	callstack 0
  6986                           
  6987 ;; *************** function _turnRight *****************
  6988 ;; Defined at:
  6989 ;;		line 125 in file "dc_motor.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  6992 ;;		 -> motorL(9), 
  6993 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  6994 ;;		 -> motorR(9), 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  i               2   22[COMRAM] unsigned int 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  1    wreg      void 
  6999 ;; Registers used:
  7000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;Total ram usage:        5 bytes
  7011 ;; Hardware stack levels used: 1
  7012 ;; Hardware stack levels required when called: 3
  7013 ;; This function calls:
  7014 ;;		_setMotorPWM
  7015 ;; This function is called by:
  7016 ;;		_right90
  7017 ;;		_right135
  7018 ;;		_reverseTurn
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text29
  7023   003946                     __ptext29:
  7024                           	callstack 0
  7025   003946                     _turnRight:
  7026                           	callstack 25
  7027   003946                     
  7028                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7029   003946  5014               	movf	turnRight@mL^0,w,c
  7030   003948  6ED9               	movwf	fsr2l,c
  7031   00394A  6ADA               	clrf	fsr2h,c
  7032   00394C  0E01               	movlw	1
  7033   00394E  26D9               	addwf	fsr2l,f,c
  7034   003950  0E01               	movlw	1
  7035   003952  6EDF               	movwf	indf2,c
  7036                           
  7037                           ;dc_motor.c: 129:     mR->direction = 0;
  7038   003954  5015               	movf	turnRight@mR^0,w,c
  7039   003956  6ED9               	movwf	fsr2l,c
  7040   003958  6ADA               	clrf	fsr2h,c
  7041   00395A  0E01               	movlw	1
  7042   00395C  26D9               	addwf	fsr2l,f,c
  7043   00395E  6ADF               	clrf	indf2,c
  7044   003960                     
  7045                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7046   003960  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7047   003964  EC17  F017         	call	_setMotorPWM	;wreg free
  7048   003968                     
  7049                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7050   003968  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7051   00396C  EC17  F017         	call	_setMotorPWM	;wreg free
  7052   003970                     
  7053                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7054   003970  0E00               	movlw	0
  7055   003972  6E18               	movwf	(turnRight@i+1)^0,c
  7056   003974  0E00               	movlw	0
  7057   003976  6E17               	movwf	turnRight@i^0,c
  7058   003978                     l5406:
  7059                           
  7060                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7061   003978  5014               	movf	turnRight@mL^0,w,c
  7062   00397A  6ED9               	movwf	fsr2l,c
  7063   00397C  6ADA               	clrf	fsr2h,c
  7064   00397E  2ADF               	incf	indf2,f,c
  7065                           
  7066                           ;dc_motor.c: 136:         mR->power++;
  7067   003980  5015               	movf	turnRight@mR^0,w,c
  7068   003982  6ED9               	movwf	fsr2l,c
  7069   003984  6ADA               	clrf	fsr2h,c
  7070   003986  2ADF               	incf	indf2,f,c
  7071   003988                     
  7072                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7073   003988  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7074   00398C  EC17  F017         	call	_setMotorPWM	;wreg free
  7075   003990                     
  7076                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7077   003990  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7078   003994  EC17  F017         	call	_setMotorPWM	;wreg free
  7079   003998                     
  7080                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7081   003998  0E0B               	movlw	11
  7082   00399A  6E16               	movwf	??_turnRight^0,c
  7083   00399C  0E62               	movlw	98
  7084   00399E                     u5567:
  7085   00399E  2EE8               	decfsz	wreg,f,c
  7086   0039A0  D7FE               	bra	u5567
  7087   0039A2  2E16               	decfsz	??_turnRight^0,f,c
  7088   0039A4  D7FC               	bra	u5567
  7089   0039A6  D000               	nop2	
  7090   0039A8                     
  7091                           ;dc_motor.c: 140:     }
  7092   0039A8  4A17               	infsnz	turnRight@i^0,f,c
  7093   0039AA  2A18               	incf	(turnRight@i+1)^0,f,c
  7094   0039AC  5018               	movf	(turnRight@i+1)^0,w,c
  7095   0039AE  E109               	bnz	u4940
  7096   0039B0  0E32               	movlw	50
  7097   0039B2  5C17               	subwf	turnRight@i^0,w,c
  7098   0039B4  A0D8               	btfss	status,0,c
  7099   0039B6  EFDF  F01C         	goto	u4941
  7100   0039BA  EFE1  F01C         	goto	u4940
  7101   0039BE                     u4941:
  7102   0039BE  EFBC  F01C         	goto	l5406
  7103   0039C2                     u4940:
  7104   0039C2  0012               	return		;funcret
  7105   0039C4                     __end_of_turnRight:
  7106                           	callstack 0
  7107                           
  7108 ;; *************** function _moveLightBlue *****************
  7109 ;; Defined at:
  7110 ;;		line 309 in file "dc_motor.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7113 ;;		 -> motorL(9), 
  7114 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7115 ;;		 -> motorR(9), 
  7116 ;;  path_length     2   30[COMRAM] unsigned int 
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;		None
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      void 
  7121 ;; Registers used:
  7122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7131 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7132 ;;Total ram usage:        6 bytes
  7133 ;; Hardware stack levels used: 1
  7134 ;; Hardware stack levels required when called: 5
  7135 ;; This function calls:
  7136 ;;		_backHalf
  7137 ;;		_left135
  7138 ;;		_logAction
  7139 ;; This function is called by:
  7140 ;;		_decision
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           	psect	text30
  7145   003E70                     __ptext30:
  7146                           	callstack 0
  7147   003E70                     _moveLightBlue:
  7148                           	callstack 24
  7149   003E70                     
  7150                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7151   003E70  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7152   003E74  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7153   003E78  EC9F  F021         	call	_backHalf	;wreg free
  7154   003E7C                     
  7155                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7156   003E7C  0E29               	movlw	41
  7157   003E7E  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7158   003E80  0E96               	movlw	150
  7159   003E82  6E21               	movwf	??_moveLightBlue^0,c
  7160   003E84  0E7F               	movlw	127
  7161   003E86                     u5577:
  7162   003E86  2EE8               	decfsz	wreg,f,c
  7163   003E88  D7FE               	bra	u5577
  7164   003E8A  2E21               	decfsz	??_moveLightBlue^0,f,c
  7165   003E8C  D7FC               	bra	u5577
  7166   003E8E  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7167   003E90  D7FA               	bra	u5577
  7168   003E92  0000               	nop	
  7169   003E94                     
  7170                           ;dc_motor.c: 314:     left135(mL,mR);
  7171   003E94  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7172   003E98  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7173   003E9C  EC24  F021         	call	_left135	;wreg free
  7174   003EA0                     
  7175                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7176   003EA0  0E00               	movlw	0
  7177   003EA2  6E09               	movwf	(logAction@time+1)^0,c
  7178   003EA4  0E00               	movlw	0
  7179   003EA6  6E08               	movwf	logAction@time^0,c
  7180   003EA8  C01F  F00A         	movff	moveLightBlue@path_length,logAction@pathLength
  7181   003EAC  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7182   003EB0  0E4C               	movlw	76
  7183   003EB2  ECD3  F01D         	call	_logAction
  7184   003EB6  0012               	return		;funcret
  7185   003EB8                     __end_of_moveLightBlue:
  7186                           	callstack 0
  7187                           
  7188 ;; *************** function _left135 *****************
  7189 ;; Defined at:
  7190 ;;		line 225 in file "dc_motor.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7193 ;;		 -> motorL(9), 
  7194 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7195 ;;		 -> motorR(9), 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7209 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7210 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7211 ;;Total ram usage:        4 bytes
  7212 ;; Hardware stack levels used: 1
  7213 ;; Hardware stack levels required when called: 4
  7214 ;; This function calls:
  7215 ;;		_stop
  7216 ;;		_turnLeft
  7217 ;; This function is called by:
  7218 ;;		_moveLightBlue
  7219 ;;		_reverseTurn
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text31
  7224   004248                     __ptext31:
  7225                           	callstack 0
  7226   004248                     _left135:
  7227                           	callstack 24
  7228   004248                     
  7229                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7230   004248  C019  F014         	movff	left135@mL,turnLeft@mL
  7231   00424C  C01A  F015         	movff	left135@mR,turnLeft@mR
  7232   004250  ECE2  F01C         	call	_turnLeft	;wreg free
  7233   004254                     
  7234                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7235   004254  0E21               	movlw	33
  7236   004256  6E1C               	movwf	(??_left135+1)^0,c
  7237   004258  0E78               	movlw	120
  7238   00425A  6E1B               	movwf	??_left135^0,c
  7239   00425C  0E98               	movlw	152
  7240   00425E                     u5587:
  7241   00425E  2EE8               	decfsz	wreg,f,c
  7242   004260  D7FE               	bra	u5587
  7243   004262  2E1B               	decfsz	??_left135^0,f,c
  7244   004264  D7FC               	bra	u5587
  7245   004266  2E1C               	decfsz	(??_left135+1)^0,f,c
  7246   004268  D7FA               	bra	u5587
  7247   00426A  D000               	nop2	
  7248   00426C                     
  7249                           ;dc_motor.c: 229:     stop(mL,mR);
  7250   00426C  C019  F014         	movff	left135@mL,stop@mL
  7251   004270  C01A  F015         	movff	left135@mR,stop@mR
  7252   004274  EC5C  F01C         	call	_stop	;wreg free
  7253   004278  0012               	return		;funcret
  7254   00427A                     __end_of_left135:
  7255                           	callstack 0
  7256                           
  7257 ;; *************** function _moveGreen *****************
  7258 ;; Defined at:
  7259 ;;		line 264 in file "dc_motor.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7262 ;;		 -> motorL(9), 
  7263 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7264 ;;		 -> motorR(9), 
  7265 ;;  path_length     2   30[COMRAM] unsigned int 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;		None
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      void 
  7270 ;; Registers used:
  7271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7277 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7280 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7281 ;;Total ram usage:        6 bytes
  7282 ;; Hardware stack levels used: 1
  7283 ;; Hardware stack levels required when called: 5
  7284 ;; This function calls:
  7285 ;;		_backHalf
  7286 ;;		_left90
  7287 ;;		_logAction
  7288 ;; This function is called by:
  7289 ;;		_decision
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text32
  7294   003EB8                     __ptext32:
  7295                           	callstack 0
  7296   003EB8                     _moveGreen:
  7297                           	callstack 24
  7298   003EB8                     
  7299                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7300   003EB8  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7301   003EBC  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7302   003EC0  EC9F  F021         	call	_backHalf	;wreg free
  7303   003EC4                     
  7304                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7305   003EC4  0E29               	movlw	41
  7306   003EC6  6E22               	movwf	(??_moveGreen+1)^0,c
  7307   003EC8  0E96               	movlw	150
  7308   003ECA  6E21               	movwf	??_moveGreen^0,c
  7309   003ECC  0E7F               	movlw	127
  7310   003ECE                     u5597:
  7311   003ECE  2EE8               	decfsz	wreg,f,c
  7312   003ED0  D7FE               	bra	u5597
  7313   003ED2  2E21               	decfsz	??_moveGreen^0,f,c
  7314   003ED4  D7FC               	bra	u5597
  7315   003ED6  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7316   003ED8  D7FA               	bra	u5597
  7317   003EDA  0000               	nop	
  7318   003EDC                     
  7319                           ;dc_motor.c: 269:     left90(mL,mR);
  7320   003EDC  C01D  F019         	movff	moveGreen@mL,left90@mL
  7321   003EE0  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7322   003EE4  EC87  F021         	call	_left90	;wreg free
  7323   003EE8                     
  7324                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7325   003EE8  0E00               	movlw	0
  7326   003EEA  6E09               	movwf	(logAction@time+1)^0,c
  7327   003EEC  0E00               	movlw	0
  7328   003EEE  6E08               	movwf	logAction@time^0,c
  7329   003EF0  C01F  F00A         	movff	moveGreen@path_length,logAction@pathLength
  7330   003EF4  C020  F00B         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7331   003EF8  0E4C               	movlw	76
  7332   003EFA  ECD3  F01D         	call	_logAction
  7333   003EFE  0012               	return		;funcret
  7334   003F00                     __end_of_moveGreen:
  7335                           	callstack 0
  7336                           
  7337 ;; *************** function _left90 *****************
  7338 ;; Defined at:
  7339 ;;		line 201 in file "dc_motor.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7342 ;;		 -> motorL(9), 
  7343 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7344 ;;		 -> motorR(9), 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;		None
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7359 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7360 ;;Total ram usage:        4 bytes
  7361 ;; Hardware stack levels used: 1
  7362 ;; Hardware stack levels required when called: 4
  7363 ;; This function calls:
  7364 ;;		_stop
  7365 ;;		_turnLeft
  7366 ;; This function is called by:
  7367 ;;		_moveGreen
  7368 ;;		_movePink
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text33
  7373   00430E                     __ptext33:
  7374                           	callstack 0
  7375   00430E                     _left90:
  7376                           	callstack 24
  7377   00430E                     
  7378                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7379   00430E  C019  F014         	movff	left90@mL,turnLeft@mL
  7380   004312  C01A  F015         	movff	left90@mR,turnLeft@mR
  7381   004316  ECE2  F01C         	call	_turnLeft	;wreg free
  7382   00431A                     
  7383                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7384   00431A  0E18               	movlw	24
  7385   00431C  6E1C               	movwf	(??_left90+1)^0,c
  7386   00431E  0E8A               	movlw	138
  7387   004320  6E1B               	movwf	??_left90^0,c
  7388   004322  0EE8               	movlw	232
  7389   004324                     u5607:
  7390   004324  2EE8               	decfsz	wreg,f,c
  7391   004326  D7FE               	bra	u5607
  7392   004328  2E1B               	decfsz	??_left90^0,f,c
  7393   00432A  D7FC               	bra	u5607
  7394   00432C  2E1C               	decfsz	(??_left90+1)^0,f,c
  7395   00432E  D7FA               	bra	u5607
  7396   004330                     
  7397                           ;dc_motor.c: 205:     stop(mL,mR);
  7398   004330  C019  F014         	movff	left90@mL,stop@mL
  7399   004334  C01A  F015         	movff	left90@mR,stop@mR
  7400   004338  EC5C  F01C         	call	_stop	;wreg free
  7401   00433C  0012               	return		;funcret
  7402   00433E                     __end_of_left90:
  7403                           	callstack 0
  7404                           
  7405 ;; *************** function _moveBlue *****************
  7406 ;; Defined at:
  7407 ;;		line 273 in file "dc_motor.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7410 ;;		 -> motorL(9), 
  7411 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7412 ;;		 -> motorR(9), 
  7413 ;;  path_length     2   30[COMRAM] unsigned int 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7428 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7429 ;;Total ram usage:        6 bytes
  7430 ;; Hardware stack levels used: 1
  7431 ;; Hardware stack levels required when called: 5
  7432 ;; This function calls:
  7433 ;;		_backHalf
  7434 ;;		_logAction
  7435 ;;		_turn180
  7436 ;; This function is called by:
  7437 ;;		_decision
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text34
  7442   003F00                     __ptext34:
  7443                           	callstack 0
  7444   003F00                     _moveBlue:
  7445                           	callstack 24
  7446   003F00                     
  7447                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7448   003F00  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7449   003F04  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7450   003F08  EC9F  F021         	call	_backHalf	;wreg free
  7451   003F0C                     
  7452                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7453   003F0C  0E29               	movlw	41
  7454   003F0E  6E22               	movwf	(??_moveBlue+1)^0,c
  7455   003F10  0E96               	movlw	150
  7456   003F12  6E21               	movwf	??_moveBlue^0,c
  7457   003F14  0E7F               	movlw	127
  7458   003F16                     u5617:
  7459   003F16  2EE8               	decfsz	wreg,f,c
  7460   003F18  D7FE               	bra	u5617
  7461   003F1A  2E21               	decfsz	??_moveBlue^0,f,c
  7462   003F1C  D7FC               	bra	u5617
  7463   003F1E  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7464   003F20  D7FA               	bra	u5617
  7465   003F22  0000               	nop	
  7466   003F24                     
  7467                           ;dc_motor.c: 278:     turn180(mL,mR);
  7468   003F24  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7469   003F28  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7470   003F2C  EC3D  F021         	call	_turn180	;wreg free
  7471   003F30                     
  7472                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7473   003F30  0E00               	movlw	0
  7474   003F32  6E09               	movwf	(logAction@time+1)^0,c
  7475   003F34  0E00               	movlw	0
  7476   003F36  6E08               	movwf	logAction@time^0,c
  7477   003F38  C01F  F00A         	movff	moveBlue@path_length,logAction@pathLength
  7478   003F3C  C020  F00B         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7479   003F40  0E30               	movlw	48
  7480   003F42  ECD3  F01D         	call	_logAction
  7481   003F46  0012               	return		;funcret
  7482   003F48                     __end_of_moveBlue:
  7483                           	callstack 0
  7484                           
  7485 ;; *************** function _turn180 *****************
  7486 ;; Defined at:
  7487 ;;		line 209 in file "dc_motor.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7490 ;;		 -> motorL(9), 
  7491 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7492 ;;		 -> motorR(9), 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7508 ;;Total ram usage:        4 bytes
  7509 ;; Hardware stack levels used: 1
  7510 ;; Hardware stack levels required when called: 4
  7511 ;; This function calls:
  7512 ;;		_stop
  7513 ;;		_turnLeft
  7514 ;; This function is called by:
  7515 ;;		_moveBlue
  7516 ;;		_moveWhite
  7517 ;;		_reverseTurn
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           	psect	text35
  7522   00427A                     __ptext35:
  7523                           	callstack 0
  7524   00427A                     _turn180:
  7525                           	callstack 24
  7526   00427A                     
  7527                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7528   00427A  C019  F014         	movff	turn180@mL,turnLeft@mL
  7529   00427E  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7530   004282  ECE2  F01C         	call	_turnLeft	;wreg free
  7531   004286                     
  7532                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7533   004286  0E30               	movlw	48
  7534   004288  6E1C               	movwf	(??_turn180+1)^0,c
  7535   00428A  0E14               	movlw	20
  7536   00428C  6E1B               	movwf	??_turn180^0,c
  7537   00428E  0ED1               	movlw	209
  7538   004290                     u5627:
  7539   004290  2EE8               	decfsz	wreg,f,c
  7540   004292  D7FE               	bra	u5627
  7541   004294  2E1B               	decfsz	??_turn180^0,f,c
  7542   004296  D7FC               	bra	u5627
  7543   004298  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7544   00429A  D7FA               	bra	u5627
  7545   00429C  0000               	nop	
  7546   00429E                     
  7547                           ;dc_motor.c: 213:     stop(mL,mR);
  7548   00429E  C019  F014         	movff	turn180@mL,stop@mL
  7549   0042A2  C01A  F015         	movff	turn180@mR,stop@mR
  7550   0042A6  EC5C  F01C         	call	_stop	;wreg free
  7551   0042AA  0012               	return		;funcret
  7552   0042AC                     __end_of_turn180:
  7553                           	callstack 0
  7554                           
  7555 ;; *************** function _turnLeft *****************
  7556 ;; Defined at:
  7557 ;;		line 105 in file "dc_motor.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7560 ;;		 -> motorL(9), 
  7561 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7562 ;;		 -> motorR(9), 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;  i               2   22[COMRAM] unsigned int 
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7577 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7578 ;;Total ram usage:        5 bytes
  7579 ;; Hardware stack levels used: 1
  7580 ;; Hardware stack levels required when called: 3
  7581 ;; This function calls:
  7582 ;;		_setMotorPWM
  7583 ;; This function is called by:
  7584 ;;		_left90
  7585 ;;		_turn180
  7586 ;;		_left135
  7587 ;;		_reverseTurn
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text36
  7592   0039C4                     __ptext36:
  7593                           	callstack 0
  7594   0039C4                     _turnLeft:
  7595                           	callstack 25
  7596   0039C4                     
  7597                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7598   0039C4  5014               	movf	turnLeft@mL^0,w,c
  7599   0039C6  6ED9               	movwf	fsr2l,c
  7600   0039C8  6ADA               	clrf	fsr2h,c
  7601   0039CA  0E01               	movlw	1
  7602   0039CC  26D9               	addwf	fsr2l,f,c
  7603   0039CE  6ADF               	clrf	indf2,c
  7604                           
  7605                           ;dc_motor.c: 109:     mR->direction = 1;
  7606   0039D0  5015               	movf	turnLeft@mR^0,w,c
  7607   0039D2  6ED9               	movwf	fsr2l,c
  7608   0039D4  6ADA               	clrf	fsr2h,c
  7609   0039D6  0E01               	movlw	1
  7610   0039D8  26D9               	addwf	fsr2l,f,c
  7611   0039DA  0E01               	movlw	1
  7612   0039DC  6EDF               	movwf	indf2,c
  7613   0039DE                     
  7614                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7615   0039DE  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7616   0039E2  EC17  F017         	call	_setMotorPWM	;wreg free
  7617   0039E6                     
  7618                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7619   0039E6  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7620   0039EA  EC17  F017         	call	_setMotorPWM	;wreg free
  7621   0039EE                     
  7622                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7623   0039EE  0E00               	movlw	0
  7624   0039F0  6E18               	movwf	(turnLeft@i+1)^0,c
  7625   0039F2  0E00               	movlw	0
  7626   0039F4  6E17               	movwf	turnLeft@i^0,c
  7627   0039F6                     l5382:
  7628                           
  7629                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7630   0039F6  5014               	movf	turnLeft@mL^0,w,c
  7631   0039F8  6ED9               	movwf	fsr2l,c
  7632   0039FA  6ADA               	clrf	fsr2h,c
  7633   0039FC  2ADF               	incf	indf2,f,c
  7634                           
  7635                           ;dc_motor.c: 116:         mR->power++;
  7636   0039FE  5015               	movf	turnLeft@mR^0,w,c
  7637   003A00  6ED9               	movwf	fsr2l,c
  7638   003A02  6ADA               	clrf	fsr2h,c
  7639   003A04  2ADF               	incf	indf2,f,c
  7640   003A06                     
  7641                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7642   003A06  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7643   003A0A  EC17  F017         	call	_setMotorPWM	;wreg free
  7644   003A0E                     
  7645                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7646   003A0E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7647   003A12  EC17  F017         	call	_setMotorPWM	;wreg free
  7648   003A16                     
  7649                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7650   003A16  0E0B               	movlw	11
  7651   003A18  6E16               	movwf	??_turnLeft^0,c
  7652   003A1A  0E62               	movlw	98
  7653   003A1C                     u5637:
  7654   003A1C  2EE8               	decfsz	wreg,f,c
  7655   003A1E  D7FE               	bra	u5637
  7656   003A20  2E16               	decfsz	??_turnLeft^0,f,c
  7657   003A22  D7FC               	bra	u5637
  7658   003A24  D000               	nop2	
  7659   003A26                     
  7660                           ;dc_motor.c: 120:     }
  7661   003A26  4A17               	infsnz	turnLeft@i^0,f,c
  7662   003A28  2A18               	incf	(turnLeft@i+1)^0,f,c
  7663   003A2A  5018               	movf	(turnLeft@i+1)^0,w,c
  7664   003A2C  E109               	bnz	u4930
  7665   003A2E  0E32               	movlw	50
  7666   003A30  5C17               	subwf	turnLeft@i^0,w,c
  7667   003A32  A0D8               	btfss	status,0,c
  7668   003A34  EF1E  F01D         	goto	u4931
  7669   003A38  EF20  F01D         	goto	u4930
  7670   003A3C                     u4931:
  7671   003A3C  EFFB  F01C         	goto	l5382
  7672   003A40                     u4930:
  7673   003A40  0012               	return		;funcret
  7674   003A42                     __end_of_turnLeft:
  7675                           	callstack 0
  7676                           
  7677 ;; *************** function _logAction *****************
  7678 ;; Defined at:
  7679 ;;		line 336 in file "dc_motor.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  action          1    wreg     unsigned char 
  7682 ;;  time            2    7[COMRAM] int 
  7683 ;;  pathLength      2    9[COMRAM] unsigned int 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  action          1   11[COMRAM] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  2    7[COMRAM] unsigned int 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7698 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7699 ;;Total ram usage:        5 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 2
  7702 ;; This function calls:
  7703 ;;		___wmul
  7704 ;; This function is called by:
  7705 ;;		_main
  7706 ;;		_moveRed
  7707 ;;		_moveGreen
  7708 ;;		_moveBlue
  7709 ;;		_moveYellow
  7710 ;;		_movePink
  7711 ;;		_moveOrange
  7712 ;;		_moveLightBlue
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text37
  7717   003BA6                     __ptext37:
  7718                           	callstack 0
  7719   003BA6                     _logAction:
  7720                           	callstack 28
  7721                           
  7722                           ;incstack = 0
  7723                           ;logAction@action stored from wreg
  7724   003BA6  6E0C               	movwf	logAction@action^0,c
  7725   003BA8                     
  7726                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7727   003BA8  500B               	movf	(logAction@pathLength+1)^0,w,c
  7728   003BAA  E107               	bnz	u5021
  7729   003BAC  0E32               	movlw	50
  7730   003BAE  5C0A               	subwf	logAction@pathLength^0,w,c
  7731   003BB0  B0D8               	btfsc	status,0,c
  7732   003BB2  EFDD  F01D         	goto	u5021
  7733   003BB6  EFDF  F01D         	goto	u5020
  7734   003BBA                     u5021:
  7735   003BBA  EF07  F01E         	goto	l484
  7736   003BBE                     u5020:
  7737   003BBE                     
  7738                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7739   003BBE  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7740   003BC2  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7741   003BC6  0E00               	movlw	0
  7742   003BC8  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7743   003BCA  0E05               	movlw	5
  7744   003BCC  6E04               	movwf	___wmul@multiplicand^0,c
  7745   003BCE  ECE0  F021         	call	___wmul	;wreg free
  7746   003BD2  0E00               	movlw	low _path
  7747   003BD4  2402               	addwf	?___wmul^0,w,c
  7748   003BD6  6ED9               	movwf	fsr2l,c
  7749   003BD8  0E02               	movlw	high _path
  7750   003BDA  2003               	addwfc	(?___wmul+1)^0,w,c
  7751   003BDC  6EDA               	movwf	fsr2h,c
  7752   003BDE  C00C  FFDF         	movff	logAction@action,indf2
  7753                           
  7754                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7755   003BE2  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7756   003BE6  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7757   003BEA  0E00               	movlw	0
  7758   003BEC  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7759   003BEE  0E05               	movlw	5
  7760   003BF0  6E04               	movwf	___wmul@multiplicand^0,c
  7761   003BF2  ECE0  F021         	call	___wmul	;wreg free
  7762   003BF6  0E01               	movlw	low (_path+1)
  7763   003BF8  2402               	addwf	?___wmul^0,w,c
  7764   003BFA  6ED9               	movwf	fsr2l,c
  7765   003BFC  0E02               	movlw	high (_path+1)
  7766   003BFE  2003               	addwfc	(?___wmul+1)^0,w,c
  7767   003C00  6EDA               	movwf	fsr2h,c
  7768   003C02  C008  FFDE         	movff	logAction@time,postinc2
  7769   003C06  C009  FFDD         	movff	logAction@time+1,postdec2
  7770   003C0A                     
  7771                           ;dc_motor.c: 340:         return pathLength++;;	Return value of _logAction is never used
  7772   003C0A  4A0A               	infsnz	logAction@pathLength^0,f,c
  7773   003C0C  2A0B               	incf	(logAction@pathLength+1)^0,f,c
  7774   003C0E                     l484:
  7775   003C0E  0012               	return		;funcret
  7776   003C10                     __end_of_logAction:
  7777                           	callstack 0
  7778                           
  7779 ;; *************** function _backHalf *****************
  7780 ;; Defined at:
  7781 ;;		line 233 in file "dc_motor.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7784 ;;		 -> motorL(9), 
  7785 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7786 ;;		 -> motorR(9), 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7801 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;Total ram usage:        4 bytes
  7803 ;; Hardware stack levels used: 1
  7804 ;; Hardware stack levels required when called: 4
  7805 ;; This function calls:
  7806 ;;		_fullSpeedBack
  7807 ;;		_stop
  7808 ;; This function is called by:
  7809 ;;		_moveRed
  7810 ;;		_moveGreen
  7811 ;;		_moveBlue
  7812 ;;		_moveOrange
  7813 ;;		_moveLightBlue
  7814 ;;		_moveWhite
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text38
  7819   00433E                     __ptext38:
  7820                           	callstack 0
  7821   00433E                     _backHalf:
  7822                           	callstack 24
  7823   00433E                     
  7824                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7825   00433E  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7826   004342  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7827   004346  EC5E  F01D         	call	_fullSpeedBack	;wreg free
  7828   00434A                     
  7829                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7830   00434A  0E19               	movlw	25
  7831   00434C  6E1C               	movwf	(??_backHalf+1)^0,c
  7832   00434E  0E5A               	movlw	90
  7833   004350  6E1B               	movwf	??_backHalf^0,c
  7834   004352  0EB2               	movlw	178
  7835   004354                     u5647:
  7836   004354  2EE8               	decfsz	wreg,f,c
  7837   004356  D7FE               	bra	u5647
  7838   004358  2E1B               	decfsz	??_backHalf^0,f,c
  7839   00435A  D7FC               	bra	u5647
  7840   00435C  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7841   00435E  D7FA               	bra	u5647
  7842   004360                     
  7843                           ;dc_motor.c: 237:     stop(mL,mR);
  7844   004360  C019  F014         	movff	backHalf@mL,stop@mL
  7845   004364  C01A  F015         	movff	backHalf@mR,stop@mR
  7846   004368  EC5C  F01C         	call	_stop	;wreg free
  7847   00436C  0012               	return		;funcret
  7848   00436E                     __end_of_backHalf:
  7849                           	callstack 0
  7850                           
  7851 ;; *************** function _stop *****************
  7852 ;; Defined at:
  7853 ;;		line 88 in file "dc_motor.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7856 ;;		 -> motorL(9), 
  7857 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7858 ;;		 -> motorR(9), 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7873 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7874 ;;Total ram usage:        3 bytes
  7875 ;; Hardware stack levels used: 1
  7876 ;; Hardware stack levels required when called: 3
  7877 ;; This function calls:
  7878 ;;		_setMotorPWM
  7879 ;; This function is called by:
  7880 ;;		_main
  7881 ;;		_right90
  7882 ;;		_left90
  7883 ;;		_turn180
  7884 ;;		_right135
  7885 ;;		_left135
  7886 ;;		_backHalf
  7887 ;;		_backOneAndHalf
  7888 ;;		_reverseStraight
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text39
  7893   0038B8                     __ptext39:
  7894                           	callstack 0
  7895   0038B8                     _stop:
  7896                           	callstack 27
  7897   0038B8                     
  7898                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7899   0038B8  EF8C  F01C         	goto	l5366
  7900   0038BC                     l5352:
  7901                           
  7902                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7903   0038BC  5014               	movf	stop@mL^0,w,c
  7904   0038BE  6ED9               	movwf	fsr2l,c
  7905   0038C0  6ADA               	clrf	fsr2h,c
  7906   0038C2  50DF               	movf	indf2,w,c
  7907   0038C4  B4D8               	btfsc	status,2,c
  7908   0038C6  EF67  F01C         	goto	u4891
  7909   0038CA  EF69  F01C         	goto	u4890
  7910   0038CE                     u4891:
  7911   0038CE  EF6D  F01C         	goto	l5356
  7912   0038D2                     u4890:
  7913   0038D2  5014               	movf	stop@mL^0,w,c
  7914   0038D4  6ED9               	movwf	fsr2l,c
  7915   0038D6  6ADA               	clrf	fsr2h,c
  7916   0038D8  06DF               	decf	indf2,f,c
  7917   0038DA                     l5356:
  7918                           
  7919                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7920   0038DA  5015               	movf	stop@mR^0,w,c
  7921   0038DC  6ED9               	movwf	fsr2l,c
  7922   0038DE  6ADA               	clrf	fsr2h,c
  7923   0038E0  50DF               	movf	indf2,w,c
  7924   0038E2  B4D8               	btfsc	status,2,c
  7925   0038E4  EF76  F01C         	goto	u4901
  7926   0038E8  EF78  F01C         	goto	u4900
  7927   0038EC                     u4901:
  7928   0038EC  EF7C  F01C         	goto	l5360
  7929   0038F0                     u4900:
  7930   0038F0  5015               	movf	stop@mR^0,w,c
  7931   0038F2  6ED9               	movwf	fsr2l,c
  7932   0038F4  6ADA               	clrf	fsr2h,c
  7933   0038F6  06DF               	decf	indf2,f,c
  7934   0038F8                     l5360:
  7935                           
  7936                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7937   0038F8  C014  F00F         	movff	stop@mL,setMotorPWM@m
  7938   0038FC  EC17  F017         	call	_setMotorPWM	;wreg free
  7939   003900                     
  7940                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7941   003900  C015  F00F         	movff	stop@mR,setMotorPWM@m
  7942   003904  EC17  F017         	call	_setMotorPWM	;wreg free
  7943   003908                     
  7944                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7945   003908  0E0B               	movlw	11
  7946   00390A  6E16               	movwf	??_stop^0,c
  7947   00390C  0E62               	movlw	98
  7948   00390E                     u5657:
  7949   00390E  2EE8               	decfsz	wreg,f,c
  7950   003910  D7FE               	bra	u5657
  7951   003912  2E16               	decfsz	??_stop^0,f,c
  7952   003914  D7FC               	bra	u5657
  7953   003916  D000               	nop2	
  7954   003918                     l5366:
  7955                           
  7956                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7957   003918  5014               	movf	stop@mL^0,w,c
  7958   00391A  6ED9               	movwf	fsr2l,c
  7959   00391C  6ADA               	clrf	fsr2h,c
  7960   00391E  50DF               	movf	indf2,w,c
  7961   003920  A4D8               	btfss	status,2,c
  7962   003922  EF95  F01C         	goto	u4911
  7963   003926  EF97  F01C         	goto	u4910
  7964   00392A                     u4911:
  7965   00392A  EF5E  F01C         	goto	l5352
  7966   00392E                     u4910:
  7967   00392E  5015               	movf	stop@mR^0,w,c
  7968   003930  6ED9               	movwf	fsr2l,c
  7969   003932  6ADA               	clrf	fsr2h,c
  7970   003934  50DF               	movf	indf2,w,c
  7971   003936  A4D8               	btfss	status,2,c
  7972   003938  EFA0  F01C         	goto	u4921
  7973   00393C  EFA2  F01C         	goto	u4920
  7974   003940                     u4921:
  7975   003940  EF5E  F01C         	goto	l5352
  7976   003944                     u4920:
  7977   003944  0012               	return		;funcret
  7978   003946                     __end_of_stop:
  7979                           	callstack 0
  7980                           
  7981 ;; *************** function _fullSpeedBack *****************
  7982 ;; Defined at:
  7983 ;;		line 165 in file "dc_motor.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7986 ;;		 -> motorL(9), 
  7987 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7988 ;;		 -> motorR(9), 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  power           2   22[COMRAM] int 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8000 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8003 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8004 ;;Total ram usage:        5 bytes
  8005 ;; Hardware stack levels used: 1
  8006 ;; Hardware stack levels required when called: 3
  8007 ;; This function calls:
  8008 ;;		_setMotorPWM
  8009 ;; This function is called by:
  8010 ;;		_backHalf
  8011 ;;		_backOneAndHalf
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text40
  8016   003ABC                     __ptext40:
  8017                           	callstack 0
  8018   003ABC                     _fullSpeedBack:
  8019                           	callstack 24
  8020   003ABC                     
  8021                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8022   003ABC  5014               	movf	fullSpeedBack@mL^0,w,c
  8023   003ABE  6ED9               	movwf	fsr2l,c
  8024   003AC0  6ADA               	clrf	fsr2h,c
  8025   003AC2  0E01               	movlw	1
  8026   003AC4  26D9               	addwf	fsr2l,f,c
  8027   003AC6  6ADF               	clrf	indf2,c
  8028                           
  8029                           ;dc_motor.c: 169:     mR->direction = 0;
  8030   003AC8  5015               	movf	fullSpeedBack@mR^0,w,c
  8031   003ACA  6ED9               	movwf	fsr2l,c
  8032   003ACC  6ADA               	clrf	fsr2h,c
  8033   003ACE  0E01               	movlw	1
  8034   003AD0  26D9               	addwf	fsr2l,f,c
  8035   003AD2  6ADF               	clrf	indf2,c
  8036   003AD4                     
  8037                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8038   003AD4  0E00               	movlw	0
  8039   003AD6  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8040   003AD8  0E00               	movlw	0
  8041   003ADA  6E17               	movwf	fullSpeedBack@power^0,c
  8042   003ADC                     l5426:
  8043                           
  8044                           ;dc_motor.c: 172:         mL->power = power;
  8045   003ADC  5014               	movf	fullSpeedBack@mL^0,w,c
  8046   003ADE  6ED9               	movwf	fsr2l,c
  8047   003AE0  6ADA               	clrf	fsr2h,c
  8048   003AE2  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8049                           
  8050                           ;dc_motor.c: 173:         mR->power = power;
  8051   003AE6  5015               	movf	fullSpeedBack@mR^0,w,c
  8052   003AE8  6ED9               	movwf	fsr2l,c
  8053   003AEA  6ADA               	clrf	fsr2h,c
  8054   003AEC  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8055   003AF0                     
  8056                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8057   003AF0  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8058   003AF4  EC17  F017         	call	_setMotorPWM	;wreg free
  8059   003AF8                     
  8060                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8061   003AF8  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8062   003AFC  EC17  F017         	call	_setMotorPWM	;wreg free
  8063   003B00                     
  8064                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8065   003B00  0E0B               	movlw	11
  8066   003B02  6E16               	movwf	??_fullSpeedBack^0,c
  8067   003B04  0E62               	movlw	98
  8068   003B06                     u5667:
  8069   003B06  2EE8               	decfsz	wreg,f,c
  8070   003B08  D7FE               	bra	u5667
  8071   003B0A  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8072   003B0C  D7FC               	bra	u5667
  8073   003B0E  D000               	nop2	
  8074   003B10                     
  8075                           ;dc_motor.c: 181:     }
  8076   003B10  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8077   003B12  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8078   003B14  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8079   003B16  EF96  F01D         	goto	u4951
  8080   003B1A  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8081   003B1C  E109               	bnz	u4950
  8082   003B1E  0E33               	movlw	51
  8083   003B20  5C17               	subwf	fullSpeedBack@power^0,w,c
  8084   003B22  A0D8               	btfss	status,0,c
  8085   003B24  EF96  F01D         	goto	u4951
  8086   003B28  EF98  F01D         	goto	u4950
  8087   003B2C                     u4951:
  8088   003B2C  EF6E  F01D         	goto	l5426
  8089   003B30                     u4950:
  8090   003B30  0012               	return		;funcret
  8091   003B32                     __end_of_fullSpeedBack:
  8092                           	callstack 0
  8093                           
  8094 ;; *************** function _setMotorPWM *****************
  8095 ;; Defined at:
  8096 ;;		line 65 in file "dc_motor.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8099 ;;		 -> motorR(9), motorL(9), 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  negDuty         1   18[COMRAM] unsigned char 
  8102 ;;  posDuty         1   17[COMRAM] unsigned char 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      void 
  8105 ;; Registers used:
  8106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8115 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8116 ;;Total ram usage:        5 bytes
  8117 ;; Hardware stack levels used: 1
  8118 ;; Hardware stack levels required when called: 2
  8119 ;; This function calls:
  8120 ;;		___lwdiv
  8121 ;;		___wmul
  8122 ;; This function is called by:
  8123 ;;		_stop
  8124 ;;		_turnLeft
  8125 ;;		_turnRight
  8126 ;;		_fullSpeedAhead
  8127 ;;		_fullSpeedBack
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text41
  8132   002E2E                     __ptext41:
  8133                           	callstack 0
  8134   002E2E                     _setMotorPWM:
  8135                           	callstack 27
  8136   002E2E                     
  8137                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8138   002E2E  500F               	movf	setMotorPWM@m^0,w,c
  8139   002E30  6ED9               	movwf	fsr2l,c
  8140   002E32  6ADA               	clrf	fsr2h,c
  8141   002E34  0E02               	movlw	2
  8142   002E36  26D9               	addwf	fsr2l,f,c
  8143   002E38  50DF               	movf	indf2,w,c
  8144   002E3A  B4D8               	btfsc	status,2,c
  8145   002E3C  EF22  F017         	goto	u4801
  8146   002E40  EF24  F017         	goto	u4800
  8147   002E44                     u4801:
  8148   002E44  EF54  F017         	goto	l5280
  8149   002E48                     u4800:
  8150   002E48                     
  8151                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8152   002E48  500F               	movf	setMotorPWM@m^0,w,c
  8153   002E4A  6ED9               	movwf	fsr2l,c
  8154   002E4C  6ADA               	clrf	fsr2h,c
  8155   002E4E  50DF               	movf	indf2,w,c
  8156   002E50  6E10               	movwf	??_setMotorPWM^0,c
  8157   002E52  5010               	movf	??_setMotorPWM^0,w,c
  8158   002E54  6E02               	movwf	___wmul@multiplier^0,c
  8159   002E56  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8160   002E58  500F               	movf	setMotorPWM@m^0,w,c
  8161   002E5A  6ED9               	movwf	fsr2l,c
  8162   002E5C  6ADA               	clrf	fsr2h,c
  8163   002E5E  0E03               	movlw	3
  8164   002E60  26D9               	addwf	fsr2l,f,c
  8165   002E62  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8166   002E66  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8167   002E6A  ECE0  F021         	call	___wmul	;wreg free
  8168   002E6E  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8169   002E72  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8170   002E76  0E00               	movlw	0
  8171   002E78  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8172   002E7A  0E64               	movlw	100
  8173   002E7C  6E0A               	movwf	___lwdiv@divisor^0,c
  8174   002E7E  EC99  F01D         	call	___lwdiv	;wreg free
  8175   002E82  500F               	movf	setMotorPWM@m^0,w,c
  8176   002E84  6ED9               	movwf	fsr2l,c
  8177   002E86  6ADA               	clrf	fsr2h,c
  8178   002E88  0E03               	movlw	3
  8179   002E8A  26D9               	addwf	fsr2l,f,c
  8180   002E8C  50DF               	movf	indf2,w,c
  8181   002E8E  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8182   002E90  5008               	movf	?___lwdiv^0,w,c
  8183   002E92  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8184   002E94  6E12               	movwf	setMotorPWM@posDuty^0,c
  8185   002E96                     
  8186                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8187   002E96  500F               	movf	setMotorPWM@m^0,w,c
  8188   002E98  6ED9               	movwf	fsr2l,c
  8189   002E9A  6ADA               	clrf	fsr2h,c
  8190   002E9C  0E03               	movlw	3
  8191   002E9E  26D9               	addwf	fsr2l,f,c
  8192   002EA0  50DF               	movf	indf2,w,c
  8193   002EA2  6E13               	movwf	setMotorPWM@negDuty^0,c
  8194                           
  8195                           ;dc_motor.c: 72:     }
  8196   002EA4  EF75  F017         	goto	l5284
  8197   002EA8                     l5280:
  8198                           
  8199                           ;dc_motor.c: 74:         posDuty=0;
  8200   002EA8  0E00               	movlw	0
  8201   002EAA  6E12               	movwf	setMotorPWM@posDuty^0,c
  8202   002EAC                     
  8203                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8204   002EAC  500F               	movf	setMotorPWM@m^0,w,c
  8205   002EAE  6ED9               	movwf	fsr2l,c
  8206   002EB0  6ADA               	clrf	fsr2h,c
  8207   002EB2  50DF               	movf	indf2,w,c
  8208   002EB4  6E10               	movwf	??_setMotorPWM^0,c
  8209   002EB6  5010               	movf	??_setMotorPWM^0,w,c
  8210   002EB8  6E02               	movwf	___wmul@multiplier^0,c
  8211   002EBA  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8212   002EBC  500F               	movf	setMotorPWM@m^0,w,c
  8213   002EBE  6ED9               	movwf	fsr2l,c
  8214   002EC0  6ADA               	clrf	fsr2h,c
  8215   002EC2  0E03               	movlw	3
  8216   002EC4  26D9               	addwf	fsr2l,f,c
  8217   002EC6  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8218   002ECA  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8219   002ECE  ECE0  F021         	call	___wmul	;wreg free
  8220   002ED2  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8221   002ED6  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8222   002EDA  0E00               	movlw	0
  8223   002EDC  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8224   002EDE  0E64               	movlw	100
  8225   002EE0  6E0A               	movwf	___lwdiv@divisor^0,c
  8226   002EE2  EC99  F01D         	call	___lwdiv	;wreg free
  8227   002EE6  5008               	movf	?___lwdiv^0,w,c
  8228   002EE8  6E13               	movwf	setMotorPWM@negDuty^0,c
  8229   002EEA                     l5284:
  8230                           
  8231                           ;dc_motor.c: 78:     if (m->direction) {
  8232   002EEA  500F               	movf	setMotorPWM@m^0,w,c
  8233   002EEC  6ED9               	movwf	fsr2l,c
  8234   002EEE  6ADA               	clrf	fsr2h,c
  8235   002EF0  0E01               	movlw	1
  8236   002EF2  26D9               	addwf	fsr2l,f,c
  8237   002EF4  50DF               	movf	indf2,w,c
  8238   002EF6  B4D8               	btfsc	status,2,c
  8239   002EF8  EF80  F017         	goto	u4811
  8240   002EFC  EF82  F017         	goto	u4810
  8241   002F00                     u4811:
  8242   002F00  EFA2  F017         	goto	l5288
  8243   002F04                     u4810:
  8244   002F04                     
  8245                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8246   002F04  500F               	movf	setMotorPWM@m^0,w,c
  8247   002F06  6ED9               	movwf	fsr2l,c
  8248   002F08  6ADA               	clrf	fsr2h,c
  8249   002F0A  0E05               	movlw	5
  8250   002F0C  26D9               	addwf	fsr2l,f,c
  8251   002F0E  CFDE F010          	movff	postinc2,??_setMotorPWM
  8252   002F12  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8253   002F16  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8254   002F1A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8255   002F1E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8256                           
  8257                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8258   002F22  500F               	movf	setMotorPWM@m^0,w,c
  8259   002F24  6ED9               	movwf	fsr2l,c
  8260   002F26  6ADA               	clrf	fsr2h,c
  8261   002F28  0E07               	movlw	7
  8262   002F2A  26D9               	addwf	fsr2l,f,c
  8263   002F2C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8264   002F30  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8265   002F34  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8266   002F38  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8267   002F3C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8268                           
  8269                           ;dc_motor.c: 81:     } else {
  8270   002F40  EFC0  F017         	goto	l407
  8271   002F44                     l5288:
  8272                           
  8273                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8274   002F44  500F               	movf	setMotorPWM@m^0,w,c
  8275   002F46  6ED9               	movwf	fsr2l,c
  8276   002F48  6ADA               	clrf	fsr2h,c
  8277   002F4A  0E05               	movlw	5
  8278   002F4C  26D9               	addwf	fsr2l,f,c
  8279   002F4E  CFDE F010          	movff	postinc2,??_setMotorPWM
  8280   002F52  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8281   002F56  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8282   002F5A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8283   002F5E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8284                           
  8285                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8286   002F62  500F               	movf	setMotorPWM@m^0,w,c
  8287   002F64  6ED9               	movwf	fsr2l,c
  8288   002F66  6ADA               	clrf	fsr2h,c
  8289   002F68  0E07               	movlw	7
  8290   002F6A  26D9               	addwf	fsr2l,f,c
  8291   002F6C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8292   002F70  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8293   002F74  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8294   002F78  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8295   002F7C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8296   002F80                     l407:
  8297   002F80  0012               	return		;funcret
  8298   002F82                     __end_of_setMotorPWM:
  8299                           	callstack 0
  8300                           
  8301 ;; *************** function ___lwdiv *****************
  8302 ;; Defined at:
  8303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  dividend        2    7[COMRAM] unsigned int 
  8306 ;;  divisor         2    9[COMRAM] unsigned int 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  quotient        2   11[COMRAM] unsigned int 
  8309 ;;  counter         1   13[COMRAM] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  2    7[COMRAM] unsigned int 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8322 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8323 ;;Total ram usage:        7 bytes
  8324 ;; Hardware stack levels used: 1
  8325 ;; Hardware stack levels required when called: 1
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_setMotorPWM
  8330 ;;		_ADC2String
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text42
  8335   003B32                     __ptext42:
  8336                           	callstack 0
  8337   003B32                     ___lwdiv:
  8338                           	callstack 27
  8339   003B32  0E00               	movlw	0
  8340   003B34  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8341   003B36  0E00               	movlw	0
  8342   003B38  6E0C               	movwf	___lwdiv@quotient^0,c
  8343   003B3A  500A               	movf	___lwdiv@divisor^0,w,c
  8344   003B3C  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8345   003B3E  B4D8               	btfsc	status,2,c
  8346   003B40  EFA4  F01D         	goto	u2471
  8347   003B44  EFA6  F01D         	goto	u2470
  8348   003B48                     u2471:
  8349   003B48  EFCE  F01D         	goto	l1161
  8350   003B4C                     u2470:
  8351   003B4C  0E01               	movlw	1
  8352   003B4E  6E0E               	movwf	___lwdiv@counter^0,c
  8353   003B50  EFAE  F01D         	goto	l3422
  8354   003B54                     l3420:
  8355   003B54  90D8               	bcf	status,0,c
  8356   003B56  360A               	rlcf	___lwdiv@divisor^0,f,c
  8357   003B58  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8358   003B5A  2A0E               	incf	___lwdiv@counter^0,f,c
  8359   003B5C                     l3422:
  8360   003B5C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8361   003B5E  EFB3  F01D         	goto	u2481
  8362   003B62  EFB5  F01D         	goto	u2480
  8363   003B66                     u2481:
  8364   003B66  EFAA  F01D         	goto	l3420
  8365   003B6A                     u2480:
  8366   003B6A                     l3424:
  8367   003B6A  90D8               	bcf	status,0,c
  8368   003B6C  360C               	rlcf	___lwdiv@quotient^0,f,c
  8369   003B6E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8370   003B70  500A               	movf	___lwdiv@divisor^0,w,c
  8371   003B72  5C08               	subwf	___lwdiv@dividend^0,w,c
  8372   003B74  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8373   003B76  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8374   003B78  A0D8               	btfss	status,0,c
  8375   003B7A  EFC1  F01D         	goto	u2491
  8376   003B7E  EFC3  F01D         	goto	u2490
  8377   003B82                     u2491:
  8378   003B82  EFC8  F01D         	goto	l3432
  8379   003B86                     u2490:
  8380   003B86  500A               	movf	___lwdiv@divisor^0,w,c
  8381   003B88  5E08               	subwf	___lwdiv@dividend^0,f,c
  8382   003B8A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8383   003B8C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8384   003B8E  800C               	bsf	___lwdiv@quotient^0,0,c
  8385   003B90                     l3432:
  8386   003B90  90D8               	bcf	status,0,c
  8387   003B92  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8388   003B94  320A               	rrcf	___lwdiv@divisor^0,f,c
  8389   003B96  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8390   003B98  EFB5  F01D         	goto	l3424
  8391   003B9C                     l1161:
  8392   003B9C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8393   003BA0  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8394   003BA4  0012               	return		;funcret
  8395   003BA6                     __end_of___lwdiv:
  8396                           	callstack 0
  8397                           
  8398 ;; *************** function _color_click_init *****************
  8399 ;; Defined at:
  8400 ;;		line 8 in file "color.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  1    wreg      void 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8418 ;;Total ram usage:        1 bytes
  8419 ;; Hardware stack levels used: 1
  8420 ;; Hardware stack levels required when called: 4
  8421 ;; This function calls:
  8422 ;;		_I2C_2_Master_Init
  8423 ;;		_color_writetoaddr
  8424 ;; This function is called by:
  8425 ;;		_main
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text43
  8430   004116                     __ptext43:
  8431                           	callstack 0
  8432   004116                     _color_click_init:
  8433                           	callstack 26
  8434   004116                     
  8435                           ;color.c: 11:     I2C_2_Master_Init();
  8436   004116  ECB7  F021         	call	_I2C_2_Master_Init	;wreg free
  8437   00411A                     
  8438                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8439   00411A  0E01               	movlw	1
  8440   00411C  6E04               	movwf	color_writetoaddr@value^0,c
  8441   00411E  0E00               	movlw	0
  8442   004120  EC04  F022         	call	_color_writetoaddr
  8443   004124                     
  8444                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8445   004124  0E3F               	movlw	63
  8446   004126  6E06               	movwf	??_color_click_init^0,c
  8447   004128  0E55               	movlw	85
  8448   00412A                     u5677:
  8449   00412A  2EE8               	decfsz	wreg,f,c
  8450   00412C  D7FE               	bra	u5677
  8451   00412E  2E06               	decfsz	??_color_click_init^0,f,c
  8452   004130  D7FC               	bra	u5677
  8453   004132  0000               	nop	
  8454   004134                     
  8455                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8456   004134  0E03               	movlw	3
  8457   004136  6E04               	movwf	color_writetoaddr@value^0,c
  8458   004138  0E00               	movlw	0
  8459   00413A  EC04  F022         	call	_color_writetoaddr
  8460   00413E                     
  8461                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8462   00413E  0ED5               	movlw	213
  8463   004140  6E04               	movwf	color_writetoaddr@value^0,c
  8464   004142  0E01               	movlw	1
  8465   004144  EC04  F022         	call	_color_writetoaddr
  8466   004148  0012               	return		;funcret
  8467   00414A                     __end_of_color_click_init:
  8468                           	callstack 0
  8469                           
  8470 ;; *************** function _color_writetoaddr *****************
  8471 ;; Defined at:
  8472 ;;		line 24 in file "color.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  address         1    wreg     unsigned char 
  8475 ;;  value           1    3[COMRAM] unsigned char 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  address         1    4[COMRAM] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      void 
  8480 ;; Registers used:
  8481 ;;		wreg, status,2, status,0, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8487 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8490 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8491 ;;Total ram usage:        2 bytes
  8492 ;; Hardware stack levels used: 1
  8493 ;; Hardware stack levels required when called: 3
  8494 ;; This function calls:
  8495 ;;		_I2C_2_Master_Start
  8496 ;;		_I2C_2_Master_Stop
  8497 ;;		_I2C_2_Master_Write
  8498 ;; This function is called by:
  8499 ;;		_color_click_init
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text44
  8504   004408                     __ptext44:
  8505                           	callstack 0
  8506   004408                     _color_writetoaddr:
  8507                           	callstack 26
  8508                           
  8509                           ;incstack = 0
  8510                           ;color_writetoaddr@address stored from wreg
  8511   004408  6E05               	movwf	color_writetoaddr@address^0,c
  8512   00440A                     
  8513                           ;color.c: 25:     I2C_2_Master_Start();
  8514   00440A  EC56  F022         	call	_I2C_2_Master_Start	;wreg free
  8515                           
  8516                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8517   00440E  0E52               	movlw	82
  8518   004410  EC4B  F022         	call	_I2C_2_Master_Write
  8519                           
  8520                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8521   004414  5005               	movf	color_writetoaddr@address^0,w,c
  8522   004416  0980               	iorlw	128
  8523   004418  EC4B  F022         	call	_I2C_2_Master_Write
  8524                           
  8525                           ;color.c: 28:     I2C_2_Master_Write(value);
  8526   00441C  5004               	movf	color_writetoaddr@value^0,w,c
  8527   00441E  EC4B  F022         	call	_I2C_2_Master_Write
  8528                           
  8529                           ;color.c: 29:     I2C_2_Master_Stop();
  8530   004422  EC51  F022         	call	_I2C_2_Master_Stop	;wreg free
  8531   004426  0012               	return		;funcret
  8532   004428                     __end_of_color_writetoaddr:
  8533                           	callstack 0
  8534                           
  8535 ;; *************** function _I2C_2_Master_Init *****************
  8536 ;; Defined at:
  8537 ;;		line 4 in file "i2c.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;		None
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;		None
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  1    wreg      void 
  8544 ;; Registers used:
  8545 ;;		wreg, status,2
  8546 ;; Tracked objects:
  8547 ;;		On entry : 0/0
  8548 ;;		On exit  : 0/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8555 ;;Total ram usage:        0 bytes
  8556 ;; Hardware stack levels used: 1
  8557 ;; Hardware stack levels required when called: 1
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_color_click_init
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text45
  8566   00436E                     __ptext45:
  8567                           	callstack 0
  8568   00436E                     _I2C_2_Master_Init:
  8569                           	callstack 28
  8570   00436E                     
  8571                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8572   00436E  010E               	movlb	14	; () banked
  8573   004370  51D9               	movf	217,w,b	;volatile
  8574   004372  0BF0               	andlw	-16
  8575   004374  0908               	iorlw	8
  8576   004376  6FD9               	movwf	217,b	;volatile
  8577   004378                     
  8578                           ; BSR set to: 14
  8579                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8580   004378  8BD9               	bsf	217,5,b	;volatile
  8581                           
  8582                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8583   00437A  0E9F               	movlw	159
  8584   00437C  6FD6               	movwf	214,b	;volatile
  8585   00437E                     
  8586                           ; BSR set to: 14
  8587                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8588   00437E  8A84               	bsf	132,5,c	;volatile
  8589   004380                     
  8590                           ; BSR set to: 14
  8591                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8592   004380  8C84               	bsf	132,6,c	;volatile
  8593   004382                     
  8594                           ; BSR set to: 14
  8595                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8596   004382  9BA7               	bcf	167,5,b	;volatile
  8597   004384                     
  8598                           ; BSR set to: 14
  8599                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8600   004384  9DA7               	bcf	167,6,b	;volatile
  8601                           
  8602                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8603   004386  0E1D               	movlw	29
  8604   004388  6F1D               	movwf	29,b	;volatile
  8605                           
  8606                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8607   00438A  0E1E               	movlw	30
  8608   00438C  6F1C               	movwf	28,b	;volatile
  8609                           
  8610                           ;i2c.c: 18:   RD5PPS=0x1C;
  8611   00438E  0E1C               	movlw	28
  8612   004390  6F6F               	movwf	111,b	;volatile
  8613                           
  8614                           ;i2c.c: 19:   RD6PPS=0x1B;
  8615   004392  0E1B               	movlw	27
  8616   004394  6F70               	movwf	112,b	;volatile
  8617   004396                     
  8618                           ; BSR set to: 14
  8619   004396  0012               	return		;funcret
  8620   004398                     __end_of_I2C_2_Master_Init:
  8621                           	callstack 0
  8622                           
  8623 ;; *************** function _calibration_routine *****************
  8624 ;; Defined at:
  8625 ;;		line 151 in file "color.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  cCal            1   68[COMRAM] PTR struct colors
  8628 ;;		 -> colorCalibration(8), 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8640 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8641 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8643 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8644 ;;Total ram usage:       23 bytes
  8645 ;; Hardware stack levels used: 1
  8646 ;; Hardware stack levels required when called: 9
  8647 ;; This function calls:
  8648 ;;		_color_read_Blue
  8649 ;;		_color_read_Clear
  8650 ;;		_color_read_Green
  8651 ;;		_color_read_Red
  8652 ;;		_sendStringSerial4
  8653 ;;		_sprintf
  8654 ;; This function is called by:
  8655 ;;		_main
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	text46
  8660   0027A8                     __ptext46:
  8661                           	callstack 0
  8662   0027A8                     _calibration_routine:
  8663                           	callstack 21
  8664   0027A8                     
  8665                           ;color.c: 151: void calibration_routine(colors *cCal);color.c: 152: {;color.c: 154:     
      +                          LATGbits.LATG0 = 0;
  8666   0027A8  907F               	bcf	127,0,c	;volatile
  8667                           
  8668                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8669   0027AA  9E7D               	bcf	125,7,c	;volatile
  8670                           
  8671                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8672   0027AC  9679               	bcf	121,3,c	;volatile
  8673   0027AE                     
  8674                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8675   0027AE  0E60               	movlw	low calibration_routine@cal_state
  8676   0027B0  6E32               	movwf	sprintf@s^0,c
  8677   0027B2  0E6D               	movlw	low STR_1
  8678   0027B4  6E33               	movwf	sprintf@fmt^0,c
  8679   0027B6  0EA6               	movlw	low STR_2
  8680   0027B8  6E34               	movwf	(?_sprintf+2)^0,c
  8681   0027BA  5034               	movf	(?_sprintf+2)^0,w,c
  8682   0027BC  A4D8               	btfss	status,2,c
  8683   0027BE  0E0E               	movlw	high __smallconst
  8684   0027C0  6E35               	movwf	(?_sprintf+3)^0,c
  8685   0027C2  ECA5  F020         	call	_sprintf	;wreg free
  8686   0027C6                     
  8687                           ;color.c: 163:     sendStringSerial4(cal_state);
  8688   0027C6  0E60               	movlw	low calibration_routine@cal_state
  8689   0027C8  6E03               	movwf	sendStringSerial4@string^0,c
  8690   0027CA  EC56  F021         	call	_sendStringSerial4	;wreg free
  8691   0027CE                     l96:
  8692                           
  8693                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  8694   0027CE  B48E               	btfsc	142,2,c	;volatile
  8695   0027D0  EFEC  F013         	goto	u5111
  8696   0027D4  EFEE  F013         	goto	u5110
  8697   0027D8                     u5111:
  8698   0027D8  EFE7  F013         	goto	l96
  8699   0027DC                     u5110:
  8700   0027DC                     
  8701                           ;color.c: 170:     LATGbits.LATG0 = 1;
  8702   0027DC  807F               	bsf	127,0,c	;volatile
  8703   0027DE                     
  8704                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8705   0027DE  0E29               	movlw	41
  8706   0027E0  6E47               	movwf	(??_calibration_routine+1)^0,c
  8707   0027E2  0E96               	movlw	150
  8708   0027E4  6E46               	movwf	??_calibration_routine^0,c
  8709   0027E6  0E7F               	movlw	127
  8710   0027E8                     u5687:
  8711   0027E8  2EE8               	decfsz	wreg,f,c
  8712   0027EA  D7FE               	bra	u5687
  8713   0027EC  2E46               	decfsz	??_calibration_routine^0,f,c
  8714   0027EE  D7FC               	bra	u5687
  8715   0027F0  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8716   0027F2  D7FA               	bra	u5687
  8717   0027F4  0000               	nop	
  8718   0027F6                     
  8719                           ;color.c: 172:     (cCal->red) = color_read_Red();
  8720   0027F6  EC08  F01E         	call	_color_read_Red	;wreg free
  8721   0027FA  5045               	movf	calibration_routine@cCal^0,w,c
  8722   0027FC  6ED9               	movwf	fsr2l,c
  8723   0027FE  6ADA               	clrf	fsr2h,c
  8724   002800  C006  FFDE         	movff	?_color_read_Red,postinc2
  8725   002804  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8726   002808                     
  8727                           ;color.c: 173:     LATGbits.LATG0 = 0;
  8728   002808  907F               	bcf	127,0,c	;volatile
  8729   00280A                     
  8730                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8731   00280A  0E60               	movlw	low calibration_routine@cal_state
  8732   00280C  6E32               	movwf	sprintf@s^0,c
  8733   00280E  0E01               	movlw	low STR_3
  8734   002810  6E33               	movwf	sprintf@fmt^0,c
  8735   002812  0EA6               	movlw	low STR_2
  8736   002814  6E34               	movwf	(?_sprintf+2)^0,c
  8737   002816  5034               	movf	(?_sprintf+2)^0,w,c
  8738   002818  A4D8               	btfss	status,2,c
  8739   00281A  0E0E               	movlw	high __smallconst
  8740   00281C  6E35               	movwf	(?_sprintf+3)^0,c
  8741   00281E  ECA5  F020         	call	_sprintf	;wreg free
  8742   002822                     
  8743                           ;color.c: 177:     sendStringSerial4(&cal_state);
  8744   002822  0E60               	movlw	low calibration_routine@cal_state
  8745   002824  6E03               	movwf	sendStringSerial4@string^0,c
  8746   002826  EC56  F021         	call	_sendStringSerial4	;wreg free
  8747   00282A                     l99:
  8748                           
  8749                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  8750   00282A  B48E               	btfsc	142,2,c	;volatile
  8751   00282C  EF1A  F014         	goto	u5121
  8752   002830  EF1C  F014         	goto	u5120
  8753   002834                     u5121:
  8754   002834  EF15  F014         	goto	l99
  8755   002838                     u5120:
  8756   002838                     
  8757                           ;color.c: 183:     LATEbits.LATE7 = 1;
  8758   002838  8E7D               	bsf	125,7,c	;volatile
  8759   00283A                     
  8760                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8761   00283A  0E29               	movlw	41
  8762   00283C  6E47               	movwf	(??_calibration_routine+1)^0,c
  8763   00283E  0E96               	movlw	150
  8764   002840  6E46               	movwf	??_calibration_routine^0,c
  8765   002842  0E7F               	movlw	127
  8766   002844                     u5697:
  8767   002844  2EE8               	decfsz	wreg,f,c
  8768   002846  D7FE               	bra	u5697
  8769   002848  2E46               	decfsz	??_calibration_routine^0,f,c
  8770   00284A  D7FC               	bra	u5697
  8771   00284C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8772   00284E  D7FA               	bra	u5697
  8773   002850  0000               	nop	
  8774   002852                     
  8775                           ;color.c: 185:     (cCal->green) = color_read_Green();
  8776   002852  EC30  F01E         	call	_color_read_Green	;wreg free
  8777   002856  5045               	movf	calibration_routine@cCal^0,w,c
  8778   002858  6ED9               	movwf	fsr2l,c
  8779   00285A  6ADA               	clrf	fsr2h,c
  8780   00285C  0E02               	movlw	2
  8781   00285E  26D9               	addwf	fsr2l,f,c
  8782   002860  C006  FFDE         	movff	?_color_read_Green,postinc2
  8783   002864  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8784   002868                     
  8785                           ;color.c: 186:     LATEbits.LATE7 = 0;
  8786   002868  9E7D               	bcf	125,7,c	;volatile
  8787   00286A                     
  8788                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8789   00286A  0E60               	movlw	low calibration_routine@cal_state
  8790   00286C  6E32               	movwf	sprintf@s^0,c
  8791   00286E  0E1E               	movlw	low STR_5
  8792   002870  6E33               	movwf	sprintf@fmt^0,c
  8793   002872  0EA6               	movlw	low STR_2
  8794   002874  6E34               	movwf	(?_sprintf+2)^0,c
  8795   002876  5034               	movf	(?_sprintf+2)^0,w,c
  8796   002878  A4D8               	btfss	status,2,c
  8797   00287A  0E0E               	movlw	high __smallconst
  8798   00287C  6E35               	movwf	(?_sprintf+3)^0,c
  8799   00287E  ECA5  F020         	call	_sprintf	;wreg free
  8800   002882                     
  8801                           ;color.c: 190:     sendStringSerial4(&cal_state);
  8802   002882  0E60               	movlw	low calibration_routine@cal_state
  8803   002884  6E03               	movwf	sendStringSerial4@string^0,c
  8804   002886  EC56  F021         	call	_sendStringSerial4	;wreg free
  8805   00288A                     l102:
  8806                           
  8807                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  8808   00288A  B48E               	btfsc	142,2,c	;volatile
  8809   00288C  EF4A  F014         	goto	u5131
  8810   002890  EF4C  F014         	goto	u5130
  8811   002894                     u5131:
  8812   002894  EF45  F014         	goto	l102
  8813   002898                     u5130:
  8814   002898                     
  8815                           ;color.c: 196:     LATAbits.LATA3 = 1;
  8816   002898  8679               	bsf	121,3,c	;volatile
  8817   00289A                     
  8818                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8819   00289A  0E29               	movlw	41
  8820   00289C  6E47               	movwf	(??_calibration_routine+1)^0,c
  8821   00289E  0E96               	movlw	150
  8822   0028A0  6E46               	movwf	??_calibration_routine^0,c
  8823   0028A2  0E7F               	movlw	127
  8824   0028A4                     u5707:
  8825   0028A4  2EE8               	decfsz	wreg,f,c
  8826   0028A6  D7FE               	bra	u5707
  8827   0028A8  2E46               	decfsz	??_calibration_routine^0,f,c
  8828   0028AA  D7FC               	bra	u5707
  8829   0028AC  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8830   0028AE  D7FA               	bra	u5707
  8831   0028B0  0000               	nop	
  8832   0028B2                     
  8833                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  8834   0028B2  EC80  F01E         	call	_color_read_Blue	;wreg free
  8835   0028B6  5045               	movf	calibration_routine@cCal^0,w,c
  8836   0028B8  6ED9               	movwf	fsr2l,c
  8837   0028BA  6ADA               	clrf	fsr2h,c
  8838   0028BC  0E04               	movlw	4
  8839   0028BE  26D9               	addwf	fsr2l,f,c
  8840   0028C0  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8841   0028C4  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8842   0028C8                     
  8843                           ;color.c: 199:     LATAbits.LATA3 = 0;
  8844   0028C8  9679               	bcf	121,3,c	;volatile
  8845   0028CA                     
  8846                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  8847   0028CA  0E60               	movlw	low calibration_routine@cal_state
  8848   0028CC  6E32               	movwf	sprintf@s^0,c
  8849   0028CE  0E39               	movlw	low STR_7
  8850   0028D0  6E33               	movwf	sprintf@fmt^0,c
  8851   0028D2  0EA6               	movlw	low STR_2
  8852   0028D4  6E34               	movwf	(?_sprintf+2)^0,c
  8853   0028D6  5034               	movf	(?_sprintf+2)^0,w,c
  8854   0028D8  A4D8               	btfss	status,2,c
  8855   0028DA  0E0E               	movlw	high __smallconst
  8856   0028DC  6E35               	movwf	(?_sprintf+3)^0,c
  8857   0028DE  ECA5  F020         	call	_sprintf	;wreg free
  8858   0028E2                     
  8859                           ;color.c: 203:     sendStringSerial4(&cal_state);
  8860   0028E2  0E60               	movlw	low calibration_routine@cal_state
  8861   0028E4  6E03               	movwf	sendStringSerial4@string^0,c
  8862   0028E6  EC56  F021         	call	_sendStringSerial4	;wreg free
  8863   0028EA                     l105:
  8864                           
  8865                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  8866   0028EA  B48E               	btfsc	142,2,c	;volatile
  8867   0028EC  EF7A  F014         	goto	u5141
  8868   0028F0  EF7C  F014         	goto	u5140
  8869   0028F4                     u5141:
  8870   0028F4  EF75  F014         	goto	l105
  8871   0028F8                     u5140:
  8872   0028F8                     
  8873                           ;color.c: 208:     LATGbits.LATG0 = 1;
  8874   0028F8  807F               	bsf	127,0,c	;volatile
  8875                           
  8876                           ;color.c: 209:     LATEbits.LATE7 = 1;
  8877   0028FA  8E7D               	bsf	125,7,c	;volatile
  8878                           
  8879                           ;color.c: 210:     LATAbits.LATA3 = 1;
  8880   0028FC  8679               	bsf	121,3,c	;volatile
  8881   0028FE                     
  8882                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8883   0028FE  0E29               	movlw	41
  8884   002900  6E47               	movwf	(??_calibration_routine+1)^0,c
  8885   002902  0E96               	movlw	150
  8886   002904  6E46               	movwf	??_calibration_routine^0,c
  8887   002906  0E7F               	movlw	127
  8888   002908                     u5717:
  8889   002908  2EE8               	decfsz	wreg,f,c
  8890   00290A  D7FE               	bra	u5717
  8891   00290C  2E46               	decfsz	??_calibration_routine^0,f,c
  8892   00290E  D7FC               	bra	u5717
  8893   002910  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8894   002912  D7FA               	bra	u5717
  8895   002914  0000               	nop	
  8896   002916                     
  8897                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  8898   002916  EC58  F01E         	call	_color_read_Clear	;wreg free
  8899   00291A  5045               	movf	calibration_routine@cCal^0,w,c
  8900   00291C  6ED9               	movwf	fsr2l,c
  8901   00291E  6ADA               	clrf	fsr2h,c
  8902   002920  0E06               	movlw	6
  8903   002922  26D9               	addwf	fsr2l,f,c
  8904   002924  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8905   002928  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8906   00292C                     
  8907                           ;color.c: 213:     LATGbits.LATG0 = 0;
  8908   00292C  907F               	bcf	127,0,c	;volatile
  8909   00292E                     
  8910                           ;color.c: 214:     LATEbits.LATE7 = 0;
  8911   00292E  9E7D               	bcf	125,7,c	;volatile
  8912   002930                     
  8913                           ;color.c: 215:     LATAbits.LATA3 = 0;
  8914   002930  9679               	bcf	121,3,c	;volatile
  8915   002932                     
  8916                           ;color.c: 219:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8917   002932  0E60               	movlw	low calibration_routine@cal_state
  8918   002934  6E32               	movwf	sprintf@s^0,c
  8919   002936  0E54               	movlw	low STR_9
  8920   002938  6E33               	movwf	sprintf@fmt^0,c
  8921   00293A  0EA6               	movlw	low STR_2
  8922   00293C  6E34               	movwf	(?_sprintf+2)^0,c
  8923   00293E  5034               	movf	(?_sprintf+2)^0,w,c
  8924   002940  A4D8               	btfss	status,2,c
  8925   002942  0E0E               	movlw	high __smallconst
  8926   002944  6E35               	movwf	(?_sprintf+3)^0,c
  8927   002946  ECA5  F020         	call	_sprintf	;wreg free
  8928   00294A                     
  8929                           ;color.c: 220:     sendStringSerial4(&cal_state);
  8930   00294A  0E60               	movlw	low calibration_routine@cal_state
  8931   00294C  6E03               	movwf	sendStringSerial4@string^0,c
  8932   00294E  EC56  F021         	call	_sendStringSerial4	;wreg free
  8933   002952                     l108:
  8934                           
  8935                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  8936   002952  B48E               	btfsc	142,2,c	;volatile
  8937   002954  EFAE  F014         	goto	u5151
  8938   002958  EFB0  F014         	goto	u5150
  8939   00295C                     u5151:
  8940   00295C  EFA9  F014         	goto	l108
  8941   002960                     u5150:
  8942   002960                     
  8943                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8944   002960  0E29               	movlw	41
  8945   002962  6E47               	movwf	(??_calibration_routine+1)^0,c
  8946   002964  0E96               	movlw	150
  8947   002966  6E46               	movwf	??_calibration_routine^0,c
  8948   002968  0E7F               	movlw	127
  8949   00296A                     u5727:
  8950   00296A  2EE8               	decfsz	wreg,f,c
  8951   00296C  D7FE               	bra	u5727
  8952   00296E  2E46               	decfsz	??_calibration_routine^0,f,c
  8953   002970  D7FC               	bra	u5727
  8954   002972  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8955   002974  D7FA               	bra	u5727
  8956   002976  0000               	nop	
  8957   002978  0012               	return		;funcret
  8958   00297A                     __end_of_calibration_routine:
  8959                           	callstack 0
  8960                           
  8961 ;; *************** function _sprintf *****************
  8962 ;; Defined at:
  8963 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  s               1   49[COMRAM] PTR unsigned char 
  8966 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  8967 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  8968 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  8969 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  f              12   56[COMRAM] struct _IO_FILE
  8972 ;;  ret             2    0        int 
  8973 ;;  ap              1   55[COMRAM] PTR void [1]
  8974 ;;		 -> ?_sprintf(2), 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  2   49[COMRAM] int 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8984 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8985 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8987 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8988 ;;Total ram usage:       19 bytes
  8989 ;; Hardware stack levels used: 1
  8990 ;; Hardware stack levels required when called: 8
  8991 ;; This function calls:
  8992 ;;		_vfprintf
  8993 ;; This function is called by:
  8994 ;;		_calibration_routine
  8995 ;;		_send2USART
  8996 ;;		_ADC2String
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           	psect	text47
  9001   00414A                     __ptext47:
  9002                           	callstack 0
  9003   00414A                     _sprintf:
  9004                           	callstack 21
  9005   00414A  0E34               	movlw	low (?_sprintf+2)
  9006   00414C  6E38               	movwf	sprintf@ap^0,c
  9007   00414E  C032  F039         	movff	sprintf@s,sprintf@f
  9008   004152  0E00               	movlw	0
  9009   004154  6E3D               	movwf	(sprintf@f+4)^0,c
  9010   004156  0E00               	movlw	0
  9011   004158  6E3C               	movwf	(sprintf@f+3)^0,c
  9012   00415A  0E00               	movlw	0
  9013   00415C  6E44               	movwf	(sprintf@f+11)^0,c
  9014   00415E  0E00               	movlw	0
  9015   004160  6E43               	movwf	(sprintf@f+10)^0,c
  9016   004162  0E39               	movlw	low sprintf@f
  9017   004164  6E2E               	movwf	vfprintf@fp^0,c
  9018   004166  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9019   00416A  0E38               	movlw	low sprintf@ap
  9020   00416C  6E30               	movwf	vfprintf@ap^0,c
  9021   00416E  EC0D  F020         	call	_vfprintf	;wreg free
  9022   004172  5032               	movf	sprintf@s^0,w,c
  9023   004174  243C               	addwf	(sprintf@f+3)^0,w,c
  9024   004176  6ED9               	movwf	fsr2l,c
  9025   004178  6ADA               	clrf	fsr2h,c
  9026   00417A  6ADF               	clrf	indf2,c
  9027   00417C  0012               	return		;funcret
  9028   00417E                     __end_of_sprintf:
  9029                           	callstack 0
  9030                           
  9031 ;; *************** function _vfprintf *****************
  9032 ;; Defined at:
  9033 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9036 ;;		 -> sprintf@f(12), 
  9037 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9038 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9039 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9040 ;;  ap              1   47[COMRAM] PTR PTR void 
  9041 ;;		 -> sprintf@ap(1), 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9044 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9045 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2   45[COMRAM] int 
  9048 ;; Registers used:
  9049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9055 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9059 ;;Total ram usage:        4 bytes
  9060 ;; Hardware stack levels used: 1
  9061 ;; Hardware stack levels required when called: 7
  9062 ;; This function calls:
  9063 ;;		_vfpfcnvrt
  9064 ;; This function is called by:
  9065 ;;		_sprintf
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text48
  9070   00401A                     __ptext48:
  9071                           	callstack 0
  9072   00401A                     _vfprintf:
  9073                           	callstack 21
  9074   00401A                     
  9075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9076   00401A  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9077                           
  9078                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9079   00401E  EF19  F020         	goto	l5446
  9080   004022                     l5444:
  9081                           
  9082                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9083   004022  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9084   004026  0E31               	movlw	low vfprintf@cfmt
  9085   004028  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9086   00402A  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9087   00402E  EC97  F015         	call	_vfpfcnvrt	;wreg free
  9088   004032                     l5446:
  9089                           
  9090                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9091   004032  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9092   004036                     	if	1	;There is more than 1 active tblptr byte
  9093   004036  0E0E               	movlw	high __smallconst
  9094   004038  6EF7               	movwf	tblptrh,c
  9095   00403A                     	endif
  9096   00403A                     	if	0	;tblptru may be non-zero
  9097   00403A                     	endif
  9098   00403A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9099   00403A  0E00               	movlw	low (__smallconst shr (0+16))
  9100   00403C  6EF8               	movwf	tblptru,c
  9101   00403E                     	endif
  9102   00403E  0008               	tblrd		*
  9103   004040  50F5               	movf	tablat,w,c
  9104   004042  0900               	iorlw	0
  9105   004044  A4D8               	btfss	status,2,c
  9106   004046  EF27  F020         	goto	u4971
  9107   00404A  EF29  F020         	goto	u4970
  9108   00404E                     u4971:
  9109   00404E  EF11  F020         	goto	l5444
  9110   004052                     u4970:
  9111   004052                     
  9112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9113   004052  0E00               	movlw	0
  9114   004054  6E2F               	movwf	(?_vfprintf+1)^0,c
  9115   004056  0E00               	movlw	0
  9116   004058  6E2E               	movwf	?_vfprintf^0,c
  9117   00405A  0012               	return		;funcret
  9118   00405C                     __end_of_vfprintf:
  9119                           	callstack 0
  9120                           
  9121 ;; *************** function _vfpfcnvrt *****************
  9122 ;; Defined at:
  9123 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9126 ;;		 -> sprintf@f(12), 
  9127 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9128 ;;		 -> vfprintf@cfmt(1), 
  9129 ;;  ap              1   36[COMRAM] PTR PTR void 
  9130 ;;		 -> sprintf@ap(1), 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  convarg         4   39[COMRAM] struct .
  9133 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9134 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9135 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9136 ;;  done            1   43[COMRAM] _Bool 
  9137 ;;  c               1    0        unsigned char 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  1    wreg      void 
  9140 ;; Registers used:
  9141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9147 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9148 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9150 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9151 ;;Total ram usage:       11 bytes
  9152 ;; Hardware stack levels used: 1
  9153 ;; Hardware stack levels required when called: 6
  9154 ;; This function calls:
  9155 ;;		_dtoa
  9156 ;;		_fputc
  9157 ;;		_read_prec_or_width
  9158 ;; This function is called by:
  9159 ;;		_vfprintf
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text49
  9164   002B2E                     __ptext49:
  9165                           	callstack 0
  9166   002B2E                     _vfpfcnvrt:
  9167                           	callstack 21
  9168   002B2E                     
  9169                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9170   002B2E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9171   002B30  6ED9               	movwf	fsr2l,c
  9172   002B32  6ADA               	clrf	fsr2h,c
  9173   002B34  CFDF FFF6          	movff	indf2,tblptrl
  9174   002B38                     	if	1	;There is more than 1 active tblptr byte
  9175   002B38  0E0E               	movlw	high __smallconst
  9176   002B3A  6EF7               	movwf	tblptrh,c
  9177   002B3C                     	endif
  9178   002B3C                     	if	0	;tblptru may be non-zero
  9179   002B3C                     	endif
  9180   002B3C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9181   002B3C  0E00               	movlw	low (__smallconst shr (0+16))
  9182   002B3E  6EF8               	movwf	tblptru,c
  9183   002B40                     	endif
  9184   002B40  0008               	tblrd		*
  9185   002B42  50F5               	movf	tablat,w,c
  9186   002B44  0A25               	xorlw	37
  9187   002B46  A4D8               	btfss	status,2,c
  9188   002B48  EFA8  F015         	goto	u4821
  9189   002B4C  EFAA  F015         	goto	u4820
  9190   002B50                     u4821:
  9191   002B50  EF47  F016         	goto	l5336
  9192   002B54                     u4820:
  9193   002B54                     
  9194                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9195   002B54  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9196   002B56  6ED9               	movwf	fsr2l,c
  9197   002B58  6ADA               	clrf	fsr2h,c
  9198   002B5A  2ADF               	incf	indf2,f,c
  9199   002B5C                     
  9200                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9201   002B5C  0E00               	movlw	0
  9202   002B5E  0100               	movlb	0	; () banked
  9203   002B60  6FC5               	movwf	(_width+1)& (0+255),b
  9204   002B62  0E00               	movlw	0
  9205   002B64  6FC4               	movwf	_width& (0+255),b
  9206   002B66  C0C4  F0C8         	movff	_width,_flags
  9207   002B6A                     
  9208                           ; BSR set to: 0
  9209                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9210   002B6A  69C6               	setf	_prec& (0+255),b
  9211   002B6C  69C7               	setf	(_prec+1)& (0+255),b
  9212   002B6E                     
  9213                           ; BSR set to: 0
  9214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9215   002B6E  0E00               	movlw	0
  9216   002B70  6E2C               	movwf	vfpfcnvrt@done^0,c
  9217                           
  9218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9219   002B72  EFE2  F015         	goto	l5310
  9220   002B76                     l5300:
  9221                           
  9222                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9223   002B76  0100               	movlb	0	; () banked
  9224   002B78  83C8               	bsf	_flags& (0+255),1,b
  9225   002B7A                     
  9226                           ; BSR set to: 0
  9227                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9228   002B7A  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9229   002B7C  6ED9               	movwf	fsr2l,c
  9230   002B7E  6ADA               	clrf	fsr2h,c
  9231   002B80  2ADF               	incf	indf2,f,c
  9232                           
  9233                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9234   002B82  EFE2  F015         	goto	l5310
  9235   002B86                     l5304:
  9236                           
  9237                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9238   002B86  0E01               	movlw	1
  9239   002B88  6E2C               	movwf	vfpfcnvrt@done^0,c
  9240                           
  9241                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9242   002B8A  EFE2  F015         	goto	l5310
  9243   002B8E                     l5308:
  9244   002B8E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9245   002B90  6ED9               	movwf	fsr2l,c
  9246   002B92  6ADA               	clrf	fsr2h,c
  9247   002B94  CFDF FFF6          	movff	indf2,tblptrl
  9248   002B98                     	if	1	;There is more than 1 active tblptr byte
  9249   002B98  0E0E               	movlw	high __smallconst
  9250   002B9A  6EF7               	movwf	tblptrh,c
  9251   002B9C                     	endif
  9252   002B9C                     	if	0	;tblptru may be non-zero
  9253   002B9C                     	endif
  9254   002B9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9255   002B9C  0E00               	movlw	low (__smallconst shr (0+16))
  9256   002B9E  6EF8               	movwf	tblptru,c
  9257   002BA0                     	endif
  9258   002BA0  0008               	tblrd		*
  9259   002BA2  50F5               	movf	tablat,w,c
  9260   002BA4  6E26               	movwf	??_vfpfcnvrt^0,c
  9261   002BA6  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9262                           
  9263                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9264                           ; Switch size 1, requested type "simple"
  9265                           ; Number of cases is 1, Range of values is 0 to 0
  9266                           ; switch strategies available:
  9267                           ; Name         Instructions Cycles
  9268                           ; simple_byte            4     3 (average)
  9269                           ;	Chosen strategy is simple_byte
  9270   002BA8  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9271   002BAA  0A00               	xorlw	0	; case 0
  9272   002BAC  B4D8               	btfsc	status,2,c
  9273   002BAE  EFDB  F015         	goto	l6056
  9274   002BB2  EFC3  F015         	goto	l5304
  9275   002BB6                     l6056:
  9276                           
  9277                           ; Switch size 1, requested type "simple"
  9278                           ; Number of cases is 1, Range of values is 48 to 48
  9279                           ; switch strategies available:
  9280                           ; Name         Instructions Cycles
  9281                           ; simple_byte            4     3 (average)
  9282                           ;	Chosen strategy is simple_byte
  9283   002BB6  5026               	movf	??_vfpfcnvrt^0,w,c
  9284   002BB8  0A30               	xorlw	48	; case 48
  9285   002BBA  B4D8               	btfsc	status,2,c
  9286   002BBC  EFBB  F015         	goto	l5300
  9287   002BC0  EFC3  F015         	goto	l5304
  9288   002BC4                     l5310:
  9289                           
  9290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9291   002BC4  502C               	movf	vfpfcnvrt@done^0,w,c
  9292   002BC6  B4D8               	btfsc	status,2,c
  9293   002BC8  EFE8  F015         	goto	u4831
  9294   002BCC  EFEA  F015         	goto	u4830
  9295   002BD0                     u4831:
  9296   002BD0  EFC7  F015         	goto	l5308
  9297   002BD4                     u4830:
  9298   002BD4                     
  9299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9300   002BD4  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9301   002BD8  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9302   002BDC  ECC8  F01A         	call	_read_prec_or_width	;wreg free
  9303   002BE0  C008  F0C4         	movff	?_read_prec_or_width,_width
  9304   002BE4  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
  9305   002BE8                     
  9306                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9307   002BE8  0100               	movlb	0	; () banked
  9308   002BEA  BFC5               	btfsc	(_width+1)& (0+255),7,b
  9309   002BEC  EFFC  F015         	goto	u4840
  9310   002BF0  EFFA  F015         	goto	u4841
  9311   002BF4                     u4841:
  9312   002BF4  EF01  F016         	goto	l5318
  9313   002BF8                     u4840:
  9314   002BF8                     
  9315                           ; BSR set to: 0
  9316                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9317   002BF8  81C8               	bsf	_flags& (0+255),0,b
  9318                           
  9319                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9320   002BFA  6DC4               	negf	_width& (0+255),b
  9321   002BFC  1FC5               	comf	(_width+1)& (0+255),f,b
  9322   002BFE  B0D8               	btfsc	status,0,c
  9323   002C00  2BC5               	incf	(_width+1)& (0+255),f,b
  9324   002C02                     l5318:
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9328   002C02  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9329   002C04  6ED9               	movwf	fsr2l,c
  9330   002C06  6ADA               	clrf	fsr2h,c
  9331   002C08  50DF               	movf	indf2,w,c
  9332   002C0A  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9333   002C0C                     
  9334                           ; BSR set to: 0
  9335                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9336   002C0C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9337   002C10                     	if	1	;There is more than 1 active tblptr byte
  9338   002C10  0E0E               	movlw	high __smallconst
  9339   002C12  6EF7               	movwf	tblptrh,c
  9340   002C14                     	endif
  9341   002C14                     	if	0	;tblptru may be non-zero
  9342   002C14                     	endif
  9343   002C14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9344   002C14  0E00               	movlw	low (__smallconst shr (0+16))
  9345   002C16  6EF8               	movwf	tblptru,c
  9346   002C18                     	endif
  9347   002C18  0008               	tblrd		*
  9348   002C1A  50F5               	movf	tablat,w,c
  9349   002C1C  0A64               	xorlw	100
  9350   002C1E  B4D8               	btfsc	status,2,c
  9351   002C20  EF14  F016         	goto	u4851
  9352   002C24  EF16  F016         	goto	u4850
  9353   002C28                     u4851:
  9354   002C28  EF26  F016         	goto	l5324
  9355   002C2C                     u4850:
  9356   002C2C                     
  9357                           ; BSR set to: 0
  9358   002C2C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9359   002C30                     	if	1	;There is more than 1 active tblptr byte
  9360   002C30  0E0E               	movlw	high __smallconst
  9361   002C32  6EF7               	movwf	tblptrh,c
  9362   002C34                     	endif
  9363   002C34                     	if	0	;tblptru may be non-zero
  9364   002C34                     	endif
  9365   002C34                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9366   002C34  0E00               	movlw	low (__smallconst shr (0+16))
  9367   002C36  6EF8               	movwf	tblptru,c
  9368   002C38                     	endif
  9369   002C38  0008               	tblrd		*
  9370   002C3A  50F5               	movf	tablat,w,c
  9371   002C3C  0A69               	xorlw	105
  9372   002C3E  A4D8               	btfss	status,2,c
  9373   002C40  EF24  F016         	goto	u4861
  9374   002C44  EF26  F016         	goto	u4860
  9375   002C48                     u4861:
  9376   002C48  EF41  F016         	goto	l5332
  9377   002C4C                     u4860:
  9378   002C4C                     l5324:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9382   002C4C  5025               	movf	vfpfcnvrt@ap^0,w,c
  9383   002C4E  6ED9               	movwf	fsr2l,c
  9384   002C50  6ADA               	clrf	fsr2h,c
  9385   002C52  0E02               	movlw	2
  9386   002C54  26DF               	addwf	indf2,f,c
  9387   002C56  5CDF               	subwf	indf2,w,c
  9388   002C58  6ED9               	movwf	fsr2l,c
  9389   002C5A  6ADA               	clrf	fsr2h,c
  9390   002C5C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9391   002C60  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9392   002C64                     
  9393                           ; BSR set to: 0
  9394                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9395   002C64  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9396   002C66  6ED9               	movwf	fsr2l,c
  9397   002C68  6ADA               	clrf	fsr2h,c
  9398   002C6A  282D               	incf	vfpfcnvrt@cp^0,w,c
  9399   002C6C  6EDF               	movwf	indf2,c
  9400   002C6E                     
  9401                           ; BSR set to: 0
  9402                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9403   002C6E  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9404   002C72  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9405   002C76  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9406   002C7A  EC5B  F016         	call	_dtoa	;wreg free
  9407   002C7E  EF5A  F016         	goto	l1412
  9408   002C82                     l5332:
  9409                           
  9410                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9411   002C82  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9412   002C84  6ED9               	movwf	fsr2l,c
  9413   002C86  6ADA               	clrf	fsr2h,c
  9414   002C88  2ADF               	incf	indf2,f,c
  9415   002C8A  EF5A  F016         	goto	l1412
  9416   002C8E                     l5336:
  9417                           
  9418                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9419   002C8E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9420   002C90  6ED9               	movwf	fsr2l,c
  9421   002C92  6ADA               	clrf	fsr2h,c
  9422   002C94  CFDF FFF6          	movff	indf2,tblptrl
  9423   002C98                     	if	1	;There is more than 1 active tblptr byte
  9424   002C98  0E0E               	movlw	high __smallconst
  9425   002C9A  6EF7               	movwf	tblptrh,c
  9426   002C9C                     	endif
  9427   002C9C                     	if	0	;tblptru may be non-zero
  9428   002C9C                     	endif
  9429   002C9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9430   002C9C  0E00               	movlw	low (__smallconst shr (0+16))
  9431   002C9E  6EF8               	movwf	tblptru,c
  9432   002CA0                     	endif
  9433   002CA0  0008               	tblrd		*
  9434   002CA2  50F5               	movf	tablat,w,c
  9435   002CA4  6E02               	movwf	fputc@c^0,c
  9436   002CA6  6A03               	clrf	(fputc@c+1)^0,c
  9437   002CA8  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9438   002CAC  EC74  F01B         	call	_fputc	;wreg free
  9439   002CB0  EF41  F016         	goto	l5332
  9440   002CB4                     l1412:
  9441   002CB4  0012               	return		;funcret
  9442   002CB6                     __end_of_vfpfcnvrt:
  9443                           	callstack 0
  9444                           
  9445 ;; *************** function _read_prec_or_width *****************
  9446 ;; Defined at:
  9447 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9450 ;;		 -> vfprintf@cfmt(1), 
  9451 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9452 ;;		 -> sprintf@ap(1), 
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  c               1    9[COMRAM] unsigned char 
  9455 ;;  n               2   10[COMRAM] int 
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  2    7[COMRAM] int 
  9458 ;; Registers used:
  9459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9466 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9468 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9469 ;;Total ram usage:        5 bytes
  9470 ;; Hardware stack levels used: 1
  9471 ;; Hardware stack levels required when called: 2
  9472 ;; This function calls:
  9473 ;;		___wmul
  9474 ;; This function is called by:
  9475 ;;		_vfpfcnvrt
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           	psect	text50
  9480   003590                     __ptext50:
  9481                           	callstack 0
  9482   003590                     _read_prec_or_width:
  9483                           	callstack 24
  9484   003590                     
  9485                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9486   003590  0E00               	movlw	0
  9487   003592  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9488   003594  0E00               	movlw	0
  9489   003596  6E0B               	movwf	read_prec_or_width@n^0,c
  9490   003598                     
  9491                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9492   003598  5008               	movf	read_prec_or_width@fmt^0,w,c
  9493   00359A  6ED9               	movwf	fsr2l,c
  9494   00359C  6ADA               	clrf	fsr2h,c
  9495   00359E  CFDF FFF6          	movff	indf2,tblptrl
  9496   0035A2                     	if	1	;There is more than 1 active tblptr byte
  9497   0035A2  0E0E               	movlw	high __smallconst
  9498   0035A4  6EF7               	movwf	tblptrh,c
  9499   0035A6                     	endif
  9500   0035A6                     	if	0	;tblptru may be non-zero
  9501   0035A6                     	endif
  9502   0035A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9503   0035A6  0E00               	movlw	low (__smallconst shr (0+16))
  9504   0035A8  6EF8               	movwf	tblptru,c
  9505   0035AA                     	endif
  9506   0035AA  0008               	tblrd		*
  9507   0035AC  50F5               	movf	tablat,w,c
  9508   0035AE  0A2A               	xorlw	42
  9509   0035B0  A4D8               	btfss	status,2,c
  9510   0035B2  EFDD  F01A         	goto	u4781
  9511   0035B6  EFDF  F01A         	goto	u4780
  9512   0035BA                     u4781:
  9513   0035BA  EF05  F01B         	goto	l5272
  9514   0035BE                     u4780:
  9515   0035BE                     
  9516                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9517   0035BE  5008               	movf	read_prec_or_width@fmt^0,w,c
  9518   0035C0  6ED9               	movwf	fsr2l,c
  9519   0035C2  6ADA               	clrf	fsr2h,c
  9520   0035C4  2ADF               	incf	indf2,f,c
  9521   0035C6                     
  9522                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9523   0035C6  5009               	movf	read_prec_or_width@ap^0,w,c
  9524   0035C8  6ED9               	movwf	fsr2l,c
  9525   0035CA  6ADA               	clrf	fsr2h,c
  9526   0035CC  0E02               	movlw	2
  9527   0035CE  26DF               	addwf	indf2,f,c
  9528   0035D0  5CDF               	subwf	indf2,w,c
  9529   0035D2  6ED9               	movwf	fsr2l,c
  9530   0035D4  6ADA               	clrf	fsr2h,c
  9531   0035D6  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9532   0035DA  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9533                           
  9534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9535   0035DE  EF1A  F01B         	goto	l1393
  9536   0035E2                     l5268:
  9537                           
  9538                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9539   0035E2  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9540   0035E6  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9541   0035EA  0E00               	movlw	0
  9542   0035EC  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9543   0035EE  0E0A               	movlw	10
  9544   0035F0  6E04               	movwf	___wmul@multiplicand^0,c
  9545   0035F2  ECE0  F021         	call	___wmul	;wreg free
  9546   0035F6  500A               	movf	read_prec_or_width@c^0,w,c
  9547   0035F8  2402               	addwf	?___wmul^0,w,c
  9548   0035FA  6E0B               	movwf	read_prec_or_width@n^0,c
  9549   0035FC  0E00               	movlw	0
  9550   0035FE  2003               	addwfc	(?___wmul+1)^0,w,c
  9551   003600  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9552   003602                     
  9553                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9554   003602  5008               	movf	read_prec_or_width@fmt^0,w,c
  9555   003604  6ED9               	movwf	fsr2l,c
  9556   003606  6ADA               	clrf	fsr2h,c
  9557   003608  2ADF               	incf	indf2,f,c
  9558   00360A                     l5272:
  9559                           
  9560                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9561   00360A  5008               	movf	read_prec_or_width@fmt^0,w,c
  9562   00360C  6ED9               	movwf	fsr2l,c
  9563   00360E  6ADA               	clrf	fsr2h,c
  9564   003610  CFDF FFF6          	movff	indf2,tblptrl
  9565   003614                     	if	1	;There is more than 1 active tblptr byte
  9566   003614  0E0E               	movlw	high __smallconst
  9567   003616  6EF7               	movwf	tblptrh,c
  9568   003618                     	endif
  9569   003618                     	if	0	;tblptru may be non-zero
  9570   003618                     	endif
  9571   003618                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9572   003618  0E00               	movlw	low (__smallconst shr (0+16))
  9573   00361A  6EF8               	movwf	tblptru,c
  9574   00361C                     	endif
  9575   00361C  0008               	tblrd		*
  9576   00361E  50F5               	movf	tablat,w,c
  9577   003620  0FD0               	addlw	208
  9578   003622  6E0A               	movwf	read_prec_or_width@c^0,c
  9579   003624  0E09               	movlw	9
  9580   003626  640A               	cpfsgt	read_prec_or_width@c^0,c
  9581   003628  EF18  F01B         	goto	u4791
  9582   00362C  EF1A  F01B         	goto	u4790
  9583   003630                     u4791:
  9584   003630  EFF1  F01A         	goto	l5268
  9585   003634                     u4790:
  9586   003634                     l1393:
  9587                           
  9588                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9589   003634  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9590   003638  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9591   00363C  0012               	return		;funcret
  9592   00363E                     __end_of_read_prec_or_width:
  9593                           	callstack 0
  9594                           
  9595 ;; *************** function ___wmul *****************
  9596 ;; Defined at:
  9597 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  multiplier      2    1[COMRAM] unsigned int 
  9600 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;  product         2    5[COMRAM] unsigned int 
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  2    1[COMRAM] unsigned int 
  9605 ;; Registers used:
  9606 ;;		wreg, status,2, status,0, prodl, prodh
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9616 ;;Total ram usage:        6 bytes
  9617 ;; Hardware stack levels used: 1
  9618 ;; Hardware stack levels required when called: 1
  9619 ;; This function calls:
  9620 ;;		Nothing
  9621 ;; This function is called by:
  9622 ;;		_setMotorPWM
  9623 ;;		_logAction
  9624 ;;		_read_prec_or_width
  9625 ;;		_ADC2String
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text51
  9630   0043C0                     __ptext51:
  9631                           	callstack 0
  9632   0043C0                     ___wmul:
  9633                           	callstack 27
  9634   0043C0  5002               	movf	___wmul@multiplier^0,w,c
  9635   0043C2  0204               	mulwf	___wmul@multiplicand^0,c
  9636   0043C4  CFF3 F006          	movff	prodl,___wmul@product
  9637   0043C8  CFF4 F007          	movff	prodh,___wmul@product+1
  9638   0043CC  5002               	movf	___wmul@multiplier^0,w,c
  9639   0043CE  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9640   0043D0  50F3               	movf	243,w,c
  9641   0043D2  2607               	addwf	(___wmul@product+1)^0,f,c
  9642   0043D4  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9643   0043D6  0204               	mulwf	___wmul@multiplicand^0,c
  9644   0043D8  50F3               	movf	243,w,c
  9645   0043DA  2607               	addwf	(___wmul@product+1)^0,f,c
  9646   0043DC  C006  F002         	movff	___wmul@product,?___wmul
  9647   0043E0  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9648   0043E4  0012               	return		;funcret
  9649   0043E6                     __end_of___wmul:
  9650                           	callstack 0
  9651                           
  9652 ;; *************** function _dtoa *****************
  9653 ;; Defined at:
  9654 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9657 ;;		 -> sprintf@f(12), 
  9658 ;;  d               2   24[COMRAM] int 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  i               2   32[COMRAM] int 
  9661 ;;  w               2   29[COMRAM] int 
  9662 ;;  s               1   31[COMRAM] unsigned char 
  9663 ;;  p               1   28[COMRAM] _Bool 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9673 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9674 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9676 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9677 ;;Total ram usage:       11 bytes
  9678 ;; Hardware stack levels used: 1
  9679 ;; Hardware stack levels required when called: 5
  9680 ;; This function calls:
  9681 ;;		___awdiv
  9682 ;;		___awmod
  9683 ;;		_abs
  9684 ;;		_pad
  9685 ;; This function is called by:
  9686 ;;		_vfpfcnvrt
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           	psect	text52
  9691   002CB6                     __ptext52:
  9692                           	callstack 0
  9693   002CB6                     _dtoa:
  9694                           	callstack 21
  9695   002CB6                     
  9696                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9697   002CB6  0E01               	movlw	1
  9698   002CB8  6E1D               	movwf	dtoa@p^0,c
  9699   002CBA                     
  9700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9701   002CBA  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9702   002CBC  EF62  F016         	goto	u4681
  9703   002CC0  EF65  F016         	goto	u4680
  9704   002CC4                     u4681:
  9705   002CC4  0E01               	movlw	1
  9706   002CC6  EF66  F016         	goto	u4690
  9707   002CCA                     u4680:
  9708   002CCA  0E00               	movlw	0
  9709   002CCC                     u4690:
  9710   002CCC  6E20               	movwf	dtoa@s^0,c
  9711   002CCE                     
  9712                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9713   002CCE  C0C4  F01E         	movff	_width,dtoa@w
  9714   002CD2  C0C5  F01F         	movff	_width+1,dtoa@w+1
  9715   002CD6                     
  9716                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9717   002CD6  5020               	movf	dtoa@s^0,w,c
  9718   002CD8  B4D8               	btfsc	status,2,c
  9719   002CDA  EF71  F016         	goto	u4701
  9720   002CDE  EF73  F016         	goto	u4700
  9721   002CE2                     u4701:
  9722   002CE2  EF8A  F016         	goto	l1376
  9723   002CE6                     u4700:
  9724   002CE6                     
  9725                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9726   002CE6  061E               	decf	dtoa@w^0,f,c
  9727   002CE8  A0D8               	btfss	status,0,c
  9728   002CEA  061F               	decf	(dtoa@w+1)^0,f,c
  9729   002CEC                     
  9730                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9731   002CEC  5020               	movf	dtoa@s^0,w,c
  9732   002CEE  A4D8               	btfss	status,2,c
  9733   002CF0  EF7C  F016         	goto	u4711
  9734   002CF4  EF7E  F016         	goto	u4710
  9735   002CF8                     u4711:
  9736   002CF8  EF84  F016         	goto	l5224
  9737   002CFC                     u4710:
  9738   002CFC  0E00               	movlw	0
  9739   002CFE  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9740   002D00  0E2B               	movlw	43
  9741   002D02  6E1B               	movwf	_dtoa$3045^0,c
  9742   002D04  EF88  F016         	goto	l5226
  9743   002D08                     l5224:
  9744   002D08  0E00               	movlw	0
  9745   002D0A  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9746   002D0C  0E2D               	movlw	45
  9747   002D0E  6E1B               	movwf	_dtoa$3045^0,c
  9748   002D10                     l5226:
  9749   002D10  C01B  F020         	movff	_dtoa$3045,dtoa@s
  9750   002D14                     l1376:
  9751                           
  9752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9753   002D14  0E00               	movlw	0
  9754   002D16  6E22               	movwf	(dtoa@i+1)^0,c
  9755   002D18  0E1F               	movlw	31
  9756   002D1A  6E21               	movwf	dtoa@i^0,c
  9757   002D1C                     
  9758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9759   002D1C  0E00               	movlw	0
  9760   002D1E  0101               	movlb	1	; () banked
  9761   002D20  6F83               	movwf	(_dbuf+31)& (0+255),b
  9762                           
  9763                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9764   002D22  EFC2  F016         	goto	l5240
  9765   002D26                     l5230:
  9766                           
  9767                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9768   002D26  0621               	decf	dtoa@i^0,f,c
  9769   002D28  A0D8               	btfss	status,0,c
  9770   002D2A  0622               	decf	(dtoa@i+1)^0,f,c
  9771   002D2C                     
  9772                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9773   002D2C  0E64               	movlw	low _dbuf
  9774   002D2E  2421               	addwf	dtoa@i^0,w,c
  9775   002D30  6ED9               	movwf	fsr2l,c
  9776   002D32  0E01               	movlw	high _dbuf
  9777   002D34  2022               	addwfc	(dtoa@i+1)^0,w,c
  9778   002D36  6EDA               	movwf	fsr2h,c
  9779   002D38  C019  F002         	movff	dtoa@d,___awmod@dividend
  9780   002D3C  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9781   002D40  0E00               	movlw	0
  9782   002D42  6E05               	movwf	(___awmod@divisor+1)^0,c
  9783   002D44  0E0A               	movlw	10
  9784   002D46  6E04               	movwf	___awmod@divisor^0,c
  9785   002D48  EC70  F01A         	call	___awmod	;wreg free
  9786   002D4C  C002  F008         	movff	?___awmod,abs@a
  9787   002D50  C003  F009         	movff	?___awmod+1,abs@a+1
  9788   002D54  ECBF  F020         	call	_abs	;wreg free
  9789   002D58  5008               	movf	?_abs^0,w,c
  9790   002D5A  0F30               	addlw	48
  9791   002D5C  6EDF               	movwf	indf2,c
  9792   002D5E                     
  9793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9794   002D5E  0E00               	movlw	0
  9795   002D60  6E1D               	movwf	dtoa@p^0,c
  9796   002D62                     
  9797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9798   002D62  061E               	decf	dtoa@w^0,f,c
  9799   002D64  A0D8               	btfss	status,0,c
  9800   002D66  061F               	decf	(dtoa@w+1)^0,f,c
  9801   002D68                     
  9802                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9803   002D68  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9804   002D6C  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9805   002D70  0E00               	movlw	0
  9806   002D72  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9807   002D74  0E0A               	movlw	10
  9808   002D76  6E04               	movwf	___awdiv@divisor^0,c
  9809   002D78  ECAE  F019         	call	___awdiv	;wreg free
  9810   002D7C  C002  F019         	movff	?___awdiv,dtoa@d
  9811   002D80  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9812   002D84                     l5240:
  9813                           
  9814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9815   002D84  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9816   002D86  EFCD  F016         	goto	u4721
  9817   002D8A  5022               	movf	(dtoa@i+1)^0,w,c
  9818   002D8C  E108               	bnz	u4720
  9819   002D8E  0421               	decf	dtoa@i^0,w,c
  9820   002D90  A0D8               	btfss	status,0,c
  9821   002D92  EFCD  F016         	goto	u4721
  9822   002D96  EFCF  F016         	goto	u4720
  9823   002D9A                     u4721:
  9824   002D9A  EFF5  F016         	goto	l5250
  9825   002D9E                     u4720:
  9826   002D9E  5019               	movf	dtoa@d^0,w,c
  9827   002DA0  101A               	iorwf	(dtoa@d+1)^0,w,c
  9828   002DA2  A4D8               	btfss	status,2,c
  9829   002DA4  EFD6  F016         	goto	u4731
  9830   002DA8  EFD8  F016         	goto	u4730
  9831   002DAC                     u4731:
  9832   002DAC  EF93  F016         	goto	l5230
  9833   002DB0                     u4730:
  9834   002DB0  501D               	movf	dtoa@p^0,w,c
  9835   002DB2  A4D8               	btfss	status,2,c
  9836   002DB4  EFDE  F016         	goto	u4741
  9837   002DB8  EFE0  F016         	goto	u4740
  9838   002DBC                     u4741:
  9839   002DBC  EF93  F016         	goto	l5230
  9840   002DC0                     u4740:
  9841   002DC0  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9842   002DC2  EFEB  F016         	goto	u4751
  9843   002DC6  501F               	movf	(dtoa@w+1)^0,w,c
  9844   002DC8  E108               	bnz	u4750
  9845   002DCA  041E               	decf	dtoa@w^0,w,c
  9846   002DCC  A0D8               	btfss	status,0,c
  9847   002DCE  EFEB  F016         	goto	u4751
  9848   002DD2  EFED  F016         	goto	u4750
  9849   002DD6                     u4751:
  9850   002DD6  EFF5  F016         	goto	l5250
  9851   002DDA                     u4750:
  9852   002DDA  0100               	movlb	0	; () banked
  9853   002DDC  B3C8               	btfsc	_flags& (0+255),1,b
  9854   002DDE  EFF3  F016         	goto	u4761
  9855   002DE2  EFF5  F016         	goto	u4760
  9856   002DE6                     u4761:
  9857   002DE6  EF93  F016         	goto	l5230
  9858   002DEA                     u4760:
  9859   002DEA                     l5250:
  9860                           
  9861                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9862   002DEA  5020               	movf	dtoa@s^0,w,c
  9863   002DEC  B4D8               	btfsc	status,2,c
  9864   002DEE  EFFB  F016         	goto	u4771
  9865   002DF2  EFFD  F016         	goto	u4770
  9866   002DF6                     u4771:
  9867   002DF6  EF08  F017         	goto	l5256
  9868   002DFA                     u4770:
  9869   002DFA                     
  9870                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9871   002DFA  0621               	decf	dtoa@i^0,f,c
  9872   002DFC  A0D8               	btfss	status,0,c
  9873   002DFE  0622               	decf	(dtoa@i+1)^0,f,c
  9874   002E00                     
  9875                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9876   002E00  0E64               	movlw	low _dbuf
  9877   002E02  2421               	addwf	dtoa@i^0,w,c
  9878   002E04  6ED9               	movwf	fsr2l,c
  9879   002E06  0E01               	movlw	high _dbuf
  9880   002E08  2022               	addwfc	(dtoa@i+1)^0,w,c
  9881   002E0A  6EDA               	movwf	fsr2h,c
  9882   002E0C  C020  FFDF         	movff	dtoa@s,indf2
  9883   002E10                     l5256:
  9884                           
  9885                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9886   002E10  C018  F010         	movff	dtoa@fp,pad@fp
  9887   002E14  0E64               	movlw	low _dbuf
  9888   002E16  2421               	addwf	dtoa@i^0,w,c
  9889   002E18  6E11               	movwf	pad@buf^0,c
  9890   002E1A  0E01               	movlw	high _dbuf
  9891   002E1C  2022               	addwfc	(dtoa@i+1)^0,w,c
  9892   002E1E  6E12               	movwf	(pad@buf+1)^0,c
  9893   002E20  C01E  F013         	movff	dtoa@w,pad@p
  9894   002E24  C01F  F014         	movff	dtoa@w+1,pad@p+1
  9895   002E28  ECC9  F01B         	call	_pad	;wreg free
  9896   002E2C  0012               	return		;funcret
  9897   002E2E                     __end_of_dtoa:
  9898                           	callstack 0
  9899                           
  9900 ;; *************** function _pad *****************
  9901 ;; Defined at:
  9902 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  9905 ;;		 -> sprintf@f(12), 
  9906 ;;  buf             2   16[COMRAM] PTR unsigned char 
  9907 ;;		 -> dbuf(32), 
  9908 ;;  p               2   18[COMRAM] int 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  i               2   21[COMRAM] int 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  1    wreg      void 
  9913 ;; Registers used:
  9914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9920 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9921 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9923 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9924 ;;Total ram usage:        8 bytes
  9925 ;; Hardware stack levels used: 1
  9926 ;; Hardware stack levels required when called: 4
  9927 ;; This function calls:
  9928 ;;		_fputc
  9929 ;;		_fputs
  9930 ;; This function is called by:
  9931 ;;		_dtoa
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           	psect	text53
  9936   003792                     __ptext53:
  9937                           	callstack 0
  9938   003792                     _pad:
  9939                           	callstack 21
  9940   003792                     
  9941                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9942   003792  0100               	movlb	0	; () banked
  9943   003794  A1C8               	btfss	_flags& (0+255),0,b
  9944   003796  EFCF  F01B         	goto	u4631
  9945   00379A  EFD1  F01B         	goto	u4630
  9946   00379E                     u4631:
  9947   00379E  EFD9  F01B         	goto	l5194
  9948   0037A2                     u4630:
  9949   0037A2                     
  9950                           ; BSR set to: 0
  9951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9952   0037A2  C011  F00A         	movff	pad@buf,fputs@s
  9953   0037A6  C012  F00B         	movff	pad@buf+1,fputs@s+1
  9954   0037AA  C010  F00C         	movff	pad@fp,fputs@fp
  9955   0037AE  EC4F  F020         	call	_fputs	;wreg free
  9956   0037B2                     l5194:
  9957                           
  9958                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  9959   0037B2  BE14               	btfsc	(pad@p+1)^0,7,c
  9960   0037B4  EFE0  F01B         	goto	u4640
  9961   0037B8  EFDE  F01B         	goto	u4641
  9962   0037BC                     u4641:
  9963   0037BC  EFE4  F01B         	goto	l1368
  9964   0037C0                     u4640:
  9965   0037C0                     
  9966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9967   0037C0  0E00               	movlw	0
  9968   0037C2  6E14               	movwf	(pad@p+1)^0,c
  9969   0037C4  0E00               	movlw	0
  9970   0037C6  6E13               	movwf	pad@p^0,c
  9971   0037C8                     l1368:
  9972                           
  9973                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9974   0037C8  0E00               	movlw	0
  9975   0037CA  6E17               	movwf	(pad@i+1)^0,c
  9976   0037CC  0E00               	movlw	0
  9977   0037CE  6E16               	movwf	pad@i^0,c
  9978                           
  9979                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9980   0037D0  EFF4  F01B         	goto	l5202
  9981   0037D4                     l5198:
  9982                           
  9983                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9984   0037D4  0E00               	movlw	0
  9985   0037D6  6E03               	movwf	(fputc@c+1)^0,c
  9986   0037D8  0E20               	movlw	32
  9987   0037DA  6E02               	movwf	fputc@c^0,c
  9988   0037DC  C010  F004         	movff	pad@fp,fputc@fp
  9989   0037E0  EC74  F01B         	call	_fputc	;wreg free
  9990   0037E4                     
  9991                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9992   0037E4  4A16               	infsnz	pad@i^0,f,c
  9993   0037E6  2A17               	incf	(pad@i+1)^0,f,c
  9994   0037E8                     l5202:
  9995                           
  9996                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9997   0037E8  5013               	movf	pad@p^0,w,c
  9998   0037EA  5C16               	subwf	pad@i^0,w,c
  9999   0037EC  5017               	movf	(pad@i+1)^0,w,c
 10000   0037EE  0A80               	xorlw	128
 10001   0037F0  6E15               	movwf	??_pad^0,c
 10002   0037F2  5014               	movf	(pad@p+1)^0,w,c
 10003   0037F4  0A80               	xorlw	128
 10004   0037F6  5815               	subwfb	??_pad^0,w,c
 10005   0037F8  A0D8               	btfss	status,0,c
 10006   0037FA  EF01  F01C         	goto	u4651
 10007   0037FE  EF03  F01C         	goto	u4650
 10008   003802                     u4651:
 10009   003802  EFEA  F01B         	goto	l5198
 10010   003806                     u4650:
 10011   003806                     
 10012                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10013   003806  0100               	movlb	0	; () banked
 10014   003808  B1C8               	btfsc	_flags& (0+255),0,b
 10015   00380A  EF09  F01C         	goto	u4661
 10016   00380E  EF0B  F01C         	goto	u4660
 10017   003812                     u4661:
 10018   003812  EF13  F01C         	goto	l1373
 10019   003816                     u4660:
 10020   003816                     
 10021                           ; BSR set to: 0
 10022                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10023   003816  C011  F00A         	movff	pad@buf,fputs@s
 10024   00381A  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10025   00381E  C010  F00C         	movff	pad@fp,fputs@fp
 10026   003822  EC4F  F020         	call	_fputs	;wreg free
 10027   003826                     l1373:
 10028   003826  0012               	return		;funcret
 10029   003828                     __end_of_pad:
 10030                           	callstack 0
 10031                           
 10032 ;; *************** function _fputs *****************
 10033 ;; Defined at:
 10034 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10037 ;;		 -> dbuf(32), 
 10038 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10039 ;;		 -> sprintf@f(12), 
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;  i               2   13[COMRAM] int 
 10042 ;;  c               1   12[COMRAM] unsigned char 
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  2    9[COMRAM] int 
 10045 ;; Registers used:
 10046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10052 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10053 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10055 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10056 ;;Total ram usage:        6 bytes
 10057 ;; Hardware stack levels used: 1
 10058 ;; Hardware stack levels required when called: 3
 10059 ;; This function calls:
 10060 ;;		_fputc
 10061 ;; This function is called by:
 10062 ;;		_pad
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text54
 10067   00409E                     __ptext54:
 10068                           	callstack 0
 10069   00409E                     _fputs:
 10070                           	callstack 21
 10071   00409E  0E00               	movlw	0
 10072   0040A0  6E0F               	movwf	(fputs@i+1)^0,c
 10073   0040A2  0E00               	movlw	0
 10074   0040A4  6E0E               	movwf	fputs@i^0,c
 10075   0040A6  EF5E  F020         	goto	l5102
 10076   0040AA                     l5098:
 10077   0040AA  C00D  F002         	movff	fputs@c,fputc@c
 10078   0040AE  6A03               	clrf	(fputc@c+1)^0,c
 10079   0040B0  C00C  F004         	movff	fputs@fp,fputc@fp
 10080   0040B4  EC74  F01B         	call	_fputc	;wreg free
 10081   0040B8  4A0E               	infsnz	fputs@i^0,f,c
 10082   0040BA  2A0F               	incf	(fputs@i+1)^0,f,c
 10083   0040BC                     l5102:
 10084   0040BC  500E               	movf	fputs@i^0,w,c
 10085   0040BE  240A               	addwf	fputs@s^0,w,c
 10086   0040C0  6ED9               	movwf	fsr2l,c
 10087   0040C2  500F               	movf	(fputs@i+1)^0,w,c
 10088   0040C4  200B               	addwfc	(fputs@s+1)^0,w,c
 10089   0040C6  6EDA               	movwf	fsr2h,c
 10090   0040C8  50DF               	movf	indf2,w,c
 10091   0040CA  6E0D               	movwf	fputs@c^0,c
 10092   0040CC  500D               	movf	fputs@c^0,w,c
 10093   0040CE  A4D8               	btfss	status,2,c
 10094   0040D0  EF6C  F020         	goto	u4501
 10095   0040D4  EF6E  F020         	goto	u4500
 10096   0040D8                     u4501:
 10097   0040D8  EF55  F020         	goto	l5098
 10098   0040DC                     u4500:
 10099   0040DC  0012               	return		;funcret
 10100   0040DE                     __end_of_fputs:
 10101                           	callstack 0
 10102                           
 10103 ;; *************** function _fputc *****************
 10104 ;; Defined at:
 10105 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;  c               2    1[COMRAM] int 
 10108 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10109 ;;		 -> sprintf@f(12), 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  2    1[COMRAM] int 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10123 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10124 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10125 ;;Total ram usage:        8 bytes
 10126 ;; Hardware stack levels used: 1
 10127 ;; Hardware stack levels required when called: 2
 10128 ;; This function calls:
 10129 ;;		_putch
 10130 ;; This function is called by:
 10131 ;;		_pad
 10132 ;;		_vfpfcnvrt
 10133 ;;		_fputs
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text55
 10138   0036E8                     __ptext55:
 10139                           	callstack 0
 10140   0036E8                     _fputc:
 10141                           	callstack 24
 10142   0036E8  5004               	movf	fputc@fp^0,w,c
 10143   0036EA  B4D8               	btfsc	status,2,c
 10144   0036EC  EF7A  F01B         	goto	u4461
 10145   0036F0  EF7C  F01B         	goto	u4460
 10146   0036F4                     u4461:
 10147   0036F4  EF84  F01B         	goto	l5086
 10148   0036F8                     u4460:
 10149   0036F8  5004               	movf	fputc@fp^0,w,c
 10150   0036FA  A4D8               	btfss	status,2,c
 10151   0036FC  EF82  F01B         	goto	u4471
 10152   003700  EF84  F01B         	goto	u4470
 10153   003704                     u4471:
 10154   003704  EF89  F01B         	goto	l5088
 10155   003708                     u4470:
 10156   003708                     l5086:
 10157   003708  5002               	movf	fputc@c^0,w,c
 10158   00370A  EC60  F022         	call	_putch
 10159   00370E  EFC8  F01B         	goto	l1437
 10160   003712                     l5088:
 10161   003712  5004               	movf	fputc@fp^0,w,c
 10162   003714  6ED9               	movwf	fsr2l,c
 10163   003716  6ADA               	clrf	fsr2h,c
 10164   003718  0E0A               	movlw	10
 10165   00371A  26D9               	addwf	fsr2l,f,c
 10166   00371C  50DE               	movf	postinc2,w,c
 10167   00371E  10DE               	iorwf	postinc2,w,c
 10168   003720  B4D8               	btfsc	status,2,c
 10169   003722  EF95  F01B         	goto	u4481
 10170   003726  EF97  F01B         	goto	u4480
 10171   00372A                     u4481:
 10172   00372A  EFB0  F01B         	goto	l5092
 10173   00372E                     u4480:
 10174   00372E  5004               	movf	fputc@fp^0,w,c
 10175   003730  6ED9               	movwf	fsr2l,c
 10176   003732  6ADA               	clrf	fsr2h,c
 10177   003734  0E0A               	movlw	10
 10178   003736  26D9               	addwf	fsr2l,f,c
 10179   003738  5004               	movf	fputc@fp^0,w,c
 10180   00373A  6EE1               	movwf	fsr1l,c
 10181   00373C  6AE2               	clrf	fsr1h,c
 10182   00373E  0E03               	movlw	3
 10183   003740  26E1               	addwf	fsr1l,f,c
 10184   003742  50DE               	movf	postinc2,w,c
 10185   003744  5CE6               	subwf	postinc1,w,c
 10186   003746  50E6               	movf	postinc1,w,c
 10187   003748  0A80               	xorlw	128
 10188   00374A  6E09               	movwf	(??_fputc+4)^0,c
 10189   00374C  50DE               	movf	postinc2,w,c
 10190   00374E  0A80               	xorlw	128
 10191   003750  5809               	subwfb	(??_fputc+4)^0,w,c
 10192   003752  B0D8               	btfsc	status,0,c
 10193   003754  EFAE  F01B         	goto	u4491
 10194   003758  EFB0  F01B         	goto	u4490
 10195   00375C                     u4491:
 10196   00375C  EFC8  F01B         	goto	l1437
 10197   003760                     u4490:
 10198   003760                     l5092:
 10199   003760  5004               	movf	fputc@fp^0,w,c
 10200   003762  6ED9               	movwf	fsr2l,c
 10201   003764  6ADA               	clrf	fsr2h,c
 10202   003766  0E03               	movlw	3
 10203   003768  26D9               	addwf	fsr2l,f,c
 10204   00376A  50DF               	movf	indf2,w,c
 10205   00376C  6E05               	movwf	??_fputc^0,c
 10206   00376E  5004               	movf	fputc@fp^0,w,c
 10207   003770  6ED9               	movwf	fsr2l,c
 10208   003772  6ADA               	clrf	fsr2h,c
 10209   003774  50DF               	movf	indf2,w,c
 10210   003776  2405               	addwf	??_fputc^0,w,c
 10211   003778  6ED9               	movwf	fsr2l,c
 10212   00377A  6ADA               	clrf	fsr2h,c
 10213   00377C  C002  FFDF         	movff	fputc@c,indf2
 10214   003780  5004               	movf	fputc@fp^0,w,c
 10215   003782  6ED9               	movwf	fsr2l,c
 10216   003784  6ADA               	clrf	fsr2h,c
 10217   003786  0E03               	movlw	3
 10218   003788  26D9               	addwf	fsr2l,f,c
 10219   00378A  2ADE               	incf	postinc2,f,c
 10220   00378C  0E00               	movlw	0
 10221   00378E  22DD               	addwfc	postdec2,f,c
 10222   003790                     l1437:
 10223   003790  0012               	return		;funcret
 10224   003792                     __end_of_fputc:
 10225                           	callstack 0
 10226                           
 10227 ;; *************** function _putch *****************
 10228 ;; Defined at:
 10229 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  c               1    wreg     unsigned char 
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;  c               1    0[COMRAM] unsigned char 
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  1    wreg      void 
 10236 ;; Registers used:
 10237 ;;		wreg
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10247 ;;Total ram usage:        0 bytes
 10248 ;; Hardware stack levels used: 1
 10249 ;; Hardware stack levels required when called: 1
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_fputc
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text56
 10258   0044C0                     __ptext56:
 10259                           	callstack 0
 10260   0044C0                     _putch:
 10261                           	callstack 24
 10262   0044C0  0012               	return		;funcret
 10263   0044C2                     __end_of_putch:
 10264                           	callstack 0
 10265                           
 10266 ;; *************** function _abs *****************
 10267 ;; Defined at:
 10268 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  a               2    7[COMRAM] int 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;		None
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  2    7[COMRAM] int 
 10275 ;; Registers used:
 10276 ;;		wreg, status,2, status,0
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10282 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10284 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10285 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10286 ;;Total ram usage:        4 bytes
 10287 ;; Hardware stack levels used: 1
 10288 ;; Hardware stack levels required when called: 1
 10289 ;; This function calls:
 10290 ;;		Nothing
 10291 ;; This function is called by:
 10292 ;;		_dtoa
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text57
 10297   00417E                     __ptext57:
 10298                           	callstack 0
 10299   00417E                     _abs:
 10300                           	callstack 24
 10301   00417E  BE09               	btfsc	(abs@a+1)^0,7,c
 10302   004180  EFC4  F020         	goto	u4671
 10303   004184  EFC6  F020         	goto	u4670
 10304   004188                     u4671:
 10305   004188  EFCC  F020         	goto	l1422
 10306   00418C                     u4670:
 10307   00418C  C008  F008         	movff	abs@a,?_abs
 10308   004190  C009  F009         	movff	abs@a+1,?_abs+1
 10309   004194  EFD8  F020         	goto	l1425
 10310   004198                     l1422:
 10311   004198  C008  F00A         	movff	abs@a,??_abs
 10312   00419C  C009  F00B         	movff	abs@a+1,??_abs+1
 10313   0041A0  1E0A               	comf	??_abs^0,f,c
 10314   0041A2  1E0B               	comf	(??_abs+1)^0,f,c
 10315   0041A4  4A0A               	infsnz	??_abs^0,f,c
 10316   0041A6  2A0B               	incf	(??_abs+1)^0,f,c
 10317   0041A8  C00A  F008         	movff	??_abs,?_abs
 10318   0041AC  C00B  F009         	movff	??_abs+1,?_abs+1
 10319   0041B0                     l1425:
 10320   0041B0  0012               	return		;funcret
 10321   0041B2                     __end_of_abs:
 10322                           	callstack 0
 10323                           
 10324 ;; *************** function ___awmod *****************
 10325 ;; Defined at:
 10326 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  dividend        2    1[COMRAM] int 
 10329 ;;  divisor         2    3[COMRAM] int 
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  sign            1    6[COMRAM] unsigned char 
 10332 ;;  counter         1    5[COMRAM] unsigned char 
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  2    1[COMRAM] int 
 10335 ;; Registers used:
 10336 ;;		wreg, status,2, status,0
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10342 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10345 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10346 ;;Total ram usage:        6 bytes
 10347 ;; Hardware stack levels used: 1
 10348 ;; Hardware stack levels required when called: 1
 10349 ;; This function calls:
 10350 ;;		Nothing
 10351 ;; This function is called by:
 10352 ;;		_dtoa
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           	psect	text58
 10357   0034E0                     __ptext58:
 10358                           	callstack 0
 10359   0034E0                     ___awmod:
 10360                           	callstack 24
 10361   0034E0  0E00               	movlw	0
 10362   0034E2  6E07               	movwf	___awmod@sign^0,c
 10363   0034E4  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10364   0034E6  EF79  F01A         	goto	u4570
 10365   0034EA  EF77  F01A         	goto	u4571
 10366   0034EE                     u4571:
 10367   0034EE  EF7F  F01A         	goto	l5162
 10368   0034F2                     u4570:
 10369   0034F2  6C02               	negf	___awmod@dividend^0,c
 10370   0034F4  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10371   0034F6  B0D8               	btfsc	status,0,c
 10372   0034F8  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10373   0034FA  0E01               	movlw	1
 10374   0034FC  6E07               	movwf	___awmod@sign^0,c
 10375   0034FE                     l5162:
 10376   0034FE  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10377   003500  EF86  F01A         	goto	u4580
 10378   003504  EF84  F01A         	goto	u4581
 10379   003508                     u4581:
 10380   003508  EF8A  F01A         	goto	l5166
 10381   00350C                     u4580:
 10382   00350C  6C04               	negf	___awmod@divisor^0,c
 10383   00350E  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10384   003510  B0D8               	btfsc	status,0,c
 10385   003512  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10386   003514                     l5166:
 10387   003514  5004               	movf	___awmod@divisor^0,w,c
 10388   003516  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10389   003518  B4D8               	btfsc	status,2,c
 10390   00351A  EF91  F01A         	goto	u4591
 10391   00351E  EF93  F01A         	goto	u4590
 10392   003522                     u4591:
 10393   003522  EFB7  F01A         	goto	l5182
 10394   003526                     u4590:
 10395   003526  0E01               	movlw	1
 10396   003528  6E06               	movwf	___awmod@counter^0,c
 10397   00352A  EF9B  F01A         	goto	l5172
 10398   00352E                     l5170:
 10399   00352E  90D8               	bcf	status,0,c
 10400   003530  3604               	rlcf	___awmod@divisor^0,f,c
 10401   003532  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10402   003534  2A06               	incf	___awmod@counter^0,f,c
 10403   003536                     l5172:
 10404   003536  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10405   003538  EFA0  F01A         	goto	u4601
 10406   00353C  EFA2  F01A         	goto	u4600
 10407   003540                     u4601:
 10408   003540  EF97  F01A         	goto	l5170
 10409   003544                     u4600:
 10410   003544                     l5174:
 10411   003544  5004               	movf	___awmod@divisor^0,w,c
 10412   003546  5C02               	subwf	___awmod@dividend^0,w,c
 10413   003548  5005               	movf	(___awmod@divisor+1)^0,w,c
 10414   00354A  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10415   00354C  A0D8               	btfss	status,0,c
 10416   00354E  EFAB  F01A         	goto	u4611
 10417   003552  EFAD  F01A         	goto	u4610
 10418   003556                     u4611:
 10419   003556  EFB1  F01A         	goto	l5178
 10420   00355A                     u4610:
 10421   00355A  5004               	movf	___awmod@divisor^0,w,c
 10422   00355C  5E02               	subwf	___awmod@dividend^0,f,c
 10423   00355E  5005               	movf	(___awmod@divisor+1)^0,w,c
 10424   003560  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10425   003562                     l5178:
 10426   003562  90D8               	bcf	status,0,c
 10427   003564  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10428   003566  3204               	rrcf	___awmod@divisor^0,f,c
 10429   003568  2E06               	decfsz	___awmod@counter^0,f,c
 10430   00356A  EFA2  F01A         	goto	l5174
 10431   00356E                     l5182:
 10432   00356E  5007               	movf	___awmod@sign^0,w,c
 10433   003570  B4D8               	btfsc	status,2,c
 10434   003572  EFBD  F01A         	goto	u4621
 10435   003576  EFBF  F01A         	goto	u4620
 10436   00357A                     u4621:
 10437   00357A  EFC3  F01A         	goto	l5186
 10438   00357E                     u4620:
 10439   00357E  6C02               	negf	___awmod@dividend^0,c
 10440   003580  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10441   003582  B0D8               	btfsc	status,0,c
 10442   003584  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10443   003586                     l5186:
 10444   003586  C002  F002         	movff	___awmod@dividend,?___awmod
 10445   00358A  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10446   00358E  0012               	return		;funcret
 10447   003590                     __end_of___awmod:
 10448                           	callstack 0
 10449                           
 10450 ;; *************** function ___awdiv *****************
 10451 ;; Defined at:
 10452 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  dividend        2    1[COMRAM] int 
 10455 ;;  divisor         2    3[COMRAM] int 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  quotient        2    7[COMRAM] int 
 10458 ;;  sign            1    6[COMRAM] unsigned char 
 10459 ;;  counter         1    5[COMRAM] unsigned char 
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  2    1[COMRAM] int 
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, status,0
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10473 ;;Total ram usage:        8 bytes
 10474 ;; Hardware stack levels used: 1
 10475 ;; Hardware stack levels required when called: 1
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_dtoa
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           	psect	text59
 10484   00335C                     __ptext59:
 10485                           	callstack 0
 10486   00335C                     ___awdiv:
 10487                           	callstack 24
 10488   00335C  0E00               	movlw	0
 10489   00335E  6E07               	movwf	___awdiv@sign^0,c
 10490   003360  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10491   003362  EFB7  F019         	goto	u4510
 10492   003366  EFB5  F019         	goto	u4511
 10493   00336A                     u4511:
 10494   00336A  EFBD  F019         	goto	l5118
 10495   00336E                     u4510:
 10496   00336E  6C04               	negf	___awdiv@divisor^0,c
 10497   003370  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10498   003372  B0D8               	btfsc	status,0,c
 10499   003374  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10500   003376  0E01               	movlw	1
 10501   003378  6E07               	movwf	___awdiv@sign^0,c
 10502   00337A                     l5118:
 10503   00337A  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10504   00337C  EFC4  F019         	goto	u4520
 10505   003380  EFC2  F019         	goto	u4521
 10506   003384                     u4521:
 10507   003384  EFCA  F019         	goto	l5124
 10508   003388                     u4520:
 10509   003388  6C02               	negf	___awdiv@dividend^0,c
 10510   00338A  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10511   00338C  B0D8               	btfsc	status,0,c
 10512   00338E  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10513   003390  0E01               	movlw	1
 10514   003392  1A07               	xorwf	___awdiv@sign^0,f,c
 10515   003394                     l5124:
 10516   003394  0E00               	movlw	0
 10517   003396  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10518   003398  0E00               	movlw	0
 10519   00339A  6E08               	movwf	___awdiv@quotient^0,c
 10520   00339C  5004               	movf	___awdiv@divisor^0,w,c
 10521   00339E  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10522   0033A0  B4D8               	btfsc	status,2,c
 10523   0033A2  EFD5  F019         	goto	u4531
 10524   0033A6  EFD7  F019         	goto	u4530
 10525   0033AA                     u4531:
 10526   0033AA  EFFF  F019         	goto	l5146
 10527   0033AE                     u4530:
 10528   0033AE  0E01               	movlw	1
 10529   0033B0  6E06               	movwf	___awdiv@counter^0,c
 10530   0033B2  EFDF  F019         	goto	l5132
 10531   0033B6                     l5130:
 10532   0033B6  90D8               	bcf	status,0,c
 10533   0033B8  3604               	rlcf	___awdiv@divisor^0,f,c
 10534   0033BA  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10535   0033BC  2A06               	incf	___awdiv@counter^0,f,c
 10536   0033BE                     l5132:
 10537   0033BE  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10538   0033C0  EFE4  F019         	goto	u4541
 10539   0033C4  EFE6  F019         	goto	u4540
 10540   0033C8                     u4541:
 10541   0033C8  EFDB  F019         	goto	l5130
 10542   0033CC                     u4540:
 10543   0033CC                     l5134:
 10544   0033CC  90D8               	bcf	status,0,c
 10545   0033CE  3608               	rlcf	___awdiv@quotient^0,f,c
 10546   0033D0  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10547   0033D2  5004               	movf	___awdiv@divisor^0,w,c
 10548   0033D4  5C02               	subwf	___awdiv@dividend^0,w,c
 10549   0033D6  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10550   0033D8  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10551   0033DA  A0D8               	btfss	status,0,c
 10552   0033DC  EFF2  F019         	goto	u4551
 10553   0033E0  EFF4  F019         	goto	u4550
 10554   0033E4                     u4551:
 10555   0033E4  EFF9  F019         	goto	l5142
 10556   0033E8                     u4550:
 10557   0033E8  5004               	movf	___awdiv@divisor^0,w,c
 10558   0033EA  5E02               	subwf	___awdiv@dividend^0,f,c
 10559   0033EC  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10560   0033EE  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10561   0033F0  8008               	bsf	___awdiv@quotient^0,0,c
 10562   0033F2                     l5142:
 10563   0033F2  90D8               	bcf	status,0,c
 10564   0033F4  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10565   0033F6  3204               	rrcf	___awdiv@divisor^0,f,c
 10566   0033F8  2E06               	decfsz	___awdiv@counter^0,f,c
 10567   0033FA  EFE6  F019         	goto	l5134
 10568   0033FE                     l5146:
 10569   0033FE  5007               	movf	___awdiv@sign^0,w,c
 10570   003400  B4D8               	btfsc	status,2,c
 10571   003402  EF05  F01A         	goto	u4561
 10572   003406  EF07  F01A         	goto	u4560
 10573   00340A                     u4561:
 10574   00340A  EF0B  F01A         	goto	l5150
 10575   00340E                     u4560:
 10576   00340E  6C08               	negf	___awdiv@quotient^0,c
 10577   003410  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10578   003412  B0D8               	btfsc	status,0,c
 10579   003414  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10580   003416                     l5150:
 10581   003416  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10582   00341A  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10583   00341E  0012               	return		;funcret
 10584   003420                     __end_of___awdiv:
 10585                           	callstack 0
 10586                           
 10587 ;; *************** function _sendStringSerial4 *****************
 10588 ;; Defined at:
 10589 ;;		line 41 in file "serial.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;  string          1    2[COMRAM] PTR unsigned char 
 10592 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10604 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10608 ;;Total ram usage:        1 bytes
 10609 ;; Hardware stack levels used: 1
 10610 ;; Hardware stack levels required when called: 2
 10611 ;; This function calls:
 10612 ;;		_sendCharSerial4
 10613 ;; This function is called by:
 10614 ;;		_calibration_routine
 10615 ;;		_send2USART
 10616 ;;		_sendAllReadings
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text60
 10621   0042AC                     __ptext60:
 10622                           	callstack 0
 10623   0042AC                     _sendStringSerial4:
 10624                           	callstack 27
 10625   0042AC                     
 10626                           ;serial.c: 44:     while(*string != 0){
 10627   0042AC  EF63  F021         	goto	l5502
 10628   0042B0                     l5496:
 10629                           
 10630                           ;serial.c: 46:   sendCharSerial4(*string++);
 10631   0042B0  5003               	movf	sendStringSerial4@string^0,w,c
 10632   0042B2  6ED9               	movwf	fsr2l,c
 10633   0042B4  6ADA               	clrf	fsr2h,c
 10634   0042B6  50DF               	movf	indf2,w,c
 10635   0042B8  EC3F  F022         	call	_sendCharSerial4
 10636   0042BC  2A03               	incf	sendStringSerial4@string^0,f,c
 10637   0042BE                     
 10638                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10639   0042BE  0E6A               	movlw	106
 10640   0042C0                     u5737:
 10641   0042C0  2EE8               	decfsz	wreg,f,c
 10642   0042C2  D7FE               	bra	u5737
 10643   0042C4  D000               	nop2	
 10644   0042C6                     l5502:
 10645                           
 10646                           ;serial.c: 44:     while(*string != 0){
 10647   0042C6  5003               	movf	sendStringSerial4@string^0,w,c
 10648   0042C8  6ED9               	movwf	fsr2l,c
 10649   0042CA  6ADA               	clrf	fsr2h,c
 10650   0042CC  50DF               	movf	indf2,w,c
 10651   0042CE  A4D8               	btfss	status,2,c
 10652   0042D0  EF6C  F021         	goto	u5001
 10653   0042D4  EF6E  F021         	goto	u5000
 10654   0042D8                     u5001:
 10655   0042D8  EF58  F021         	goto	l5496
 10656   0042DC                     u5000:
 10657   0042DC  0012               	return		;funcret
 10658   0042DE                     __end_of_sendStringSerial4:
 10659                           	callstack 0
 10660                           
 10661 ;; *************** function _sendCharSerial4 *****************
 10662 ;; Defined at:
 10663 ;;		line 35 in file "serial.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;  charToSend      1    wreg     unsigned char 
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  charToSend      1    1[COMRAM] unsigned char 
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      void 
 10670 ;; Registers used:
 10671 ;;		wreg
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10681 ;;Total ram usage:        1 bytes
 10682 ;; Hardware stack levels used: 1
 10683 ;; Hardware stack levels required when called: 1
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		_sendStringSerial4
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text61
 10692   00447E                     __ptext61:
 10693                           	callstack 0
 10694   00447E                     _sendCharSerial4:
 10695                           	callstack 27
 10696                           
 10697                           ;incstack = 0
 10698                           ;sendCharSerial4@charToSend stored from wreg
 10699   00447E  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10700   004480                     l575:
 10701   004480  010E               	movlb	14	; () banked
 10702   004482  A537               	btfss	55,2,b	;volatile
 10703   004484  EF46  F022         	goto	u4961
 10704   004488  EF48  F022         	goto	u4960
 10705   00448C                     u4961:
 10706   00448C  EF40  F022         	goto	l575
 10707   004490                     u4960:
 10708   004490                     
 10709                           ; BSR set to: 14
 10710                           ;serial.c: 37:     TX4REG = charToSend;
 10711   004490  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10712   004494                     
 10713                           ; BSR set to: 14
 10714   004494  0012               	return		;funcret
 10715   004496                     __end_of_sendCharSerial4:
 10716                           	callstack 0
 10717                           
 10718 ;; *************** function _color_read_Red *****************
 10719 ;; Defined at:
 10720 ;;		line 32 in file "color.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  tmp             2   10[COMRAM] unsigned int 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  2    5[COMRAM] unsigned int 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10734 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10736 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10737 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10738 ;;Total ram usage:        7 bytes
 10739 ;; Hardware stack levels used: 1
 10740 ;; Hardware stack levels required when called: 3
 10741 ;; This function calls:
 10742 ;;		_I2C_2_Master_Read
 10743 ;;		_I2C_2_Master_RepStart
 10744 ;;		_I2C_2_Master_Start
 10745 ;;		_I2C_2_Master_Stop
 10746 ;;		_I2C_2_Master_Write
 10747 ;; This function is called by:
 10748 ;;		_reading_hue
 10749 ;;		_calibration_routine
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text62
 10754   003C10                     __ptext62:
 10755                           	callstack 0
 10756   003C10                     _color_read_Red:
 10757                           	callstack 26
 10758   003C10                     
 10759                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10760   003C10  EC56  F022         	call	_I2C_2_Master_Start	;wreg free
 10761                           
 10762                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10763   003C14  0E52               	movlw	82
 10764   003C16  EC4B  F022         	call	_I2C_2_Master_Write
 10765                           
 10766                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10767   003C1A  0EB6               	movlw	182
 10768   003C1C  EC4B  F022         	call	_I2C_2_Master_Write
 10769                           
 10770                           ;color.c: 38:  I2C_2_Master_RepStart();
 10771   003C20  EC5B  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10772                           
 10773                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10774   003C24  0E53               	movlw	83
 10775   003C26  EC4B  F022         	call	_I2C_2_Master_Write
 10776                           
 10777                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10778   003C2A  0E01               	movlw	1
 10779   003C2C  EC2E  F020         	call	_I2C_2_Master_Read
 10780   003C30  6E08               	movwf	??_color_read_Red^0,c
 10781   003C32  5008               	movf	??_color_read_Red^0,w,c
 10782   003C34  6E0B               	movwf	color_read_Red@tmp^0,c
 10783   003C36  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10784                           
 10785                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10786   003C38  0E00               	movlw	0
 10787   003C3A  EC2E  F020         	call	_I2C_2_Master_Read
 10788   003C3E  6E08               	movwf	??_color_read_Red^0,c
 10789   003C40  5008               	movf	??_color_read_Red^0,w,c
 10790   003C42  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10791   003C44  6A09               	clrf	(??_color_read_Red+1)^0,c
 10792   003C46  500B               	movf	color_read_Red@tmp^0,w,c
 10793   003C48  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10794   003C4A  6E0B               	movwf	color_read_Red@tmp^0,c
 10795   003C4C  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10796   003C4E  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10797   003C50  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10798                           
 10799                           ;color.c: 42:  I2C_2_Master_Stop();
 10800   003C52  EC51  F022         	call	_I2C_2_Master_Stop	;wreg free
 10801   003C56                     
 10802                           ;color.c: 43:  return tmp;
 10803   003C56  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10804   003C5A  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10805   003C5E  0012               	return		;funcret
 10806   003C60                     __end_of_color_read_Red:
 10807                           	callstack 0
 10808                           
 10809 ;; *************** function _color_read_Green *****************
 10810 ;; Defined at:
 10811 ;;		line 46 in file "color.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;		None
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  tmp             2   10[COMRAM] unsigned int 
 10816 ;; Return value:  Size  Location     Type
 10817 ;;                  2    5[COMRAM] unsigned int 
 10818 ;; Registers used:
 10819 ;;		wreg, status,2, status,0, cstack
 10820 ;; Tracked objects:
 10821 ;;		On entry : 0/0
 10822 ;;		On exit  : 0/0
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10826 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10827 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10828 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10829 ;;Total ram usage:        7 bytes
 10830 ;; Hardware stack levels used: 1
 10831 ;; Hardware stack levels required when called: 3
 10832 ;; This function calls:
 10833 ;;		_I2C_2_Master_Read
 10834 ;;		_I2C_2_Master_RepStart
 10835 ;;		_I2C_2_Master_Start
 10836 ;;		_I2C_2_Master_Stop
 10837 ;;		_I2C_2_Master_Write
 10838 ;; This function is called by:
 10839 ;;		_reading_hue
 10840 ;;		_calibration_routine
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           	psect	text63
 10845   003C60                     __ptext63:
 10846                           	callstack 0
 10847   003C60                     _color_read_Green:
 10848                           	callstack 26
 10849   003C60                     
 10850                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10851   003C60  EC56  F022         	call	_I2C_2_Master_Start	;wreg free
 10852                           
 10853                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10854   003C64  0E52               	movlw	82
 10855   003C66  EC4B  F022         	call	_I2C_2_Master_Write
 10856                           
 10857                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10858   003C6A  0EB8               	movlw	184
 10859   003C6C  EC4B  F022         	call	_I2C_2_Master_Write
 10860                           
 10861                           ;color.c: 52:  I2C_2_Master_RepStart();
 10862   003C70  EC5B  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10863                           
 10864                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10865   003C74  0E53               	movlw	83
 10866   003C76  EC4B  F022         	call	_I2C_2_Master_Write
 10867                           
 10868                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10869   003C7A  0E01               	movlw	1
 10870   003C7C  EC2E  F020         	call	_I2C_2_Master_Read
 10871   003C80  6E08               	movwf	??_color_read_Green^0,c
 10872   003C82  5008               	movf	??_color_read_Green^0,w,c
 10873   003C84  6E0B               	movwf	color_read_Green@tmp^0,c
 10874   003C86  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10875                           
 10876                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10877   003C88  0E00               	movlw	0
 10878   003C8A  EC2E  F020         	call	_I2C_2_Master_Read
 10879   003C8E  6E08               	movwf	??_color_read_Green^0,c
 10880   003C90  5008               	movf	??_color_read_Green^0,w,c
 10881   003C92  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10882   003C94  6A09               	clrf	(??_color_read_Green+1)^0,c
 10883   003C96  500B               	movf	color_read_Green@tmp^0,w,c
 10884   003C98  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10885   003C9A  6E0B               	movwf	color_read_Green@tmp^0,c
 10886   003C9C  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10887   003C9E  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10888   003CA0  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10889                           
 10890                           ;color.c: 56:  I2C_2_Master_Stop();
 10891   003CA2  EC51  F022         	call	_I2C_2_Master_Stop	;wreg free
 10892   003CA6                     
 10893                           ;color.c: 57:  return tmp;
 10894   003CA6  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10895   003CAA  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10896   003CAE  0012               	return		;funcret
 10897   003CB0                     __end_of_color_read_Green:
 10898                           	callstack 0
 10899                           
 10900 ;; *************** function _color_read_Clear *****************
 10901 ;; Defined at:
 10902 ;;		line 75 in file "color.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;		None
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  tmp             2   10[COMRAM] unsigned int 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;                  2    5[COMRAM] unsigned int 
 10909 ;; Registers used:
 10910 ;;		wreg, status,2, status,0, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10918 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10919 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10920 ;;Total ram usage:        7 bytes
 10921 ;; Hardware stack levels used: 1
 10922 ;; Hardware stack levels required when called: 3
 10923 ;; This function calls:
 10924 ;;		_I2C_2_Master_Read
 10925 ;;		_I2C_2_Master_RepStart
 10926 ;;		_I2C_2_Master_Start
 10927 ;;		_I2C_2_Master_Stop
 10928 ;;		_I2C_2_Master_Write
 10929 ;; This function is called by:
 10930 ;;		_reading_hue
 10931 ;;		_calibration_routine
 10932 ;;		_main
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           	psect	text64
 10937   003CB0                     __ptext64:
 10938                           	callstack 0
 10939   003CB0                     _color_read_Clear:
 10940                           	callstack 26
 10941   003CB0                     
 10942                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10943   003CB0  EC56  F022         	call	_I2C_2_Master_Start	;wreg free
 10944                           
 10945                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10946   003CB4  0E52               	movlw	82
 10947   003CB6  EC4B  F022         	call	_I2C_2_Master_Write
 10948                           
 10949                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10950   003CBA  0EB4               	movlw	180
 10951   003CBC  EC4B  F022         	call	_I2C_2_Master_Write
 10952                           
 10953                           ;color.c: 81:  I2C_2_Master_RepStart();
 10954   003CC0  EC5B  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10955                           
 10956                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10957   003CC4  0E53               	movlw	83
 10958   003CC6  EC4B  F022         	call	_I2C_2_Master_Write
 10959                           
 10960                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10961   003CCA  0E01               	movlw	1
 10962   003CCC  EC2E  F020         	call	_I2C_2_Master_Read
 10963   003CD0  6E08               	movwf	??_color_read_Clear^0,c
 10964   003CD2  5008               	movf	??_color_read_Clear^0,w,c
 10965   003CD4  6E0B               	movwf	color_read_Clear@tmp^0,c
 10966   003CD6  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 10967                           
 10968                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10969   003CD8  0E00               	movlw	0
 10970   003CDA  EC2E  F020         	call	_I2C_2_Master_Read
 10971   003CDE  6E08               	movwf	??_color_read_Clear^0,c
 10972   003CE0  5008               	movf	??_color_read_Clear^0,w,c
 10973   003CE2  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 10974   003CE4  6A09               	clrf	(??_color_read_Clear+1)^0,c
 10975   003CE6  500B               	movf	color_read_Clear@tmp^0,w,c
 10976   003CE8  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 10977   003CEA  6E0B               	movwf	color_read_Clear@tmp^0,c
 10978   003CEC  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 10979   003CEE  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 10980   003CF0  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 10981                           
 10982                           ;color.c: 85:  I2C_2_Master_Stop();
 10983   003CF2  EC51  F022         	call	_I2C_2_Master_Stop	;wreg free
 10984   003CF6                     
 10985                           ;color.c: 86:  return tmp;
 10986   003CF6  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 10987   003CFA  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10988   003CFE  0012               	return		;funcret
 10989   003D00                     __end_of_color_read_Clear:
 10990                           	callstack 0
 10991                           
 10992 ;; *************** function _color_read_Blue *****************
 10993 ;; Defined at:
 10994 ;;		line 60 in file "color.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;		None
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  tmp             2   10[COMRAM] unsigned int 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  2    5[COMRAM] unsigned int 
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11010 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11011 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11012 ;;Total ram usage:        7 bytes
 11013 ;; Hardware stack levels used: 1
 11014 ;; Hardware stack levels required when called: 3
 11015 ;; This function calls:
 11016 ;;		_I2C_2_Master_Read
 11017 ;;		_I2C_2_Master_RepStart
 11018 ;;		_I2C_2_Master_Start
 11019 ;;		_I2C_2_Master_Stop
 11020 ;;		_I2C_2_Master_Write
 11021 ;; This function is called by:
 11022 ;;		_reading_hue
 11023 ;;		_calibration_routine
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text65
 11028   003D00                     __ptext65:
 11029                           	callstack 0
 11030   003D00                     _color_read_Blue:
 11031                           	callstack 26
 11032   003D00                     
 11033                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11034   003D00  EC56  F022         	call	_I2C_2_Master_Start	;wreg free
 11035                           
 11036                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11037   003D04  0E52               	movlw	82
 11038   003D06  EC4B  F022         	call	_I2C_2_Master_Write
 11039                           
 11040                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11041   003D0A  0EBA               	movlw	186
 11042   003D0C  EC4B  F022         	call	_I2C_2_Master_Write
 11043                           
 11044                           ;color.c: 66:  I2C_2_Master_RepStart();
 11045   003D10  EC5B  F022         	call	_I2C_2_Master_RepStart	;wreg free
 11046                           
 11047                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11048   003D14  0E53               	movlw	83
 11049   003D16  EC4B  F022         	call	_I2C_2_Master_Write
 11050                           
 11051                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11052   003D1A  0E01               	movlw	1
 11053   003D1C  EC2E  F020         	call	_I2C_2_Master_Read
 11054   003D20  6E08               	movwf	??_color_read_Blue^0,c
 11055   003D22  5008               	movf	??_color_read_Blue^0,w,c
 11056   003D24  6E0B               	movwf	color_read_Blue@tmp^0,c
 11057   003D26  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11058                           
 11059                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11060   003D28  0E00               	movlw	0
 11061   003D2A  EC2E  F020         	call	_I2C_2_Master_Read
 11062   003D2E  6E08               	movwf	??_color_read_Blue^0,c
 11063   003D30  5008               	movf	??_color_read_Blue^0,w,c
 11064   003D32  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11065   003D34  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11066   003D36  500B               	movf	color_read_Blue@tmp^0,w,c
 11067   003D38  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11068   003D3A  6E0B               	movwf	color_read_Blue@tmp^0,c
 11069   003D3C  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11070   003D3E  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11071   003D40  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11072                           
 11073                           ;color.c: 70:  I2C_2_Master_Stop();
 11074   003D42  EC51  F022         	call	_I2C_2_Master_Stop	;wreg free
 11075   003D46                     
 11076                           ;color.c: 71:  return tmp;
 11077   003D46  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11078   003D4A  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11079   003D4E  0012               	return		;funcret
 11080   003D50                     __end_of_color_read_Blue:
 11081                           	callstack 0
 11082                           
 11083 ;; *************** function _I2C_2_Master_Write *****************
 11084 ;; Defined at:
 11085 ;;		line 45 in file "i2c.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;  data_byte       1    wreg     unsigned char 
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;  data_byte       1    2[COMRAM] unsigned char 
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, status,2, status,0, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11103 ;;Total ram usage:        1 bytes
 11104 ;; Hardware stack levels used: 1
 11105 ;; Hardware stack levels required when called: 2
 11106 ;; This function calls:
 11107 ;;		_I2C_2_Master_Idle
 11108 ;; This function is called by:
 11109 ;;		_color_writetoaddr
 11110 ;;		_color_read_Red
 11111 ;;		_color_read_Green
 11112 ;;		_color_read_Blue
 11113 ;;		_color_read_Clear
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text66
 11118   004496                     __ptext66:
 11119                           	callstack 0
 11120   004496                     _I2C_2_Master_Write:
 11121                           	callstack 26
 11122                           
 11123                           ;incstack = 0
 11124                           ;I2C_2_Master_Write@data_byte stored from wreg
 11125   004496  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11126   004498                     
 11127                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11128   004498  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11129   00449C                     
 11130                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11131   00449C  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11132   0044A0  0012               	return		;funcret
 11133   0044A2                     __end_of_I2C_2_Master_Write:
 11134                           	callstack 0
 11135                           
 11136 ;; *************** function _I2C_2_Master_Stop *****************
 11137 ;; Defined at:
 11138 ;;		line 39 in file "i2c.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;		None
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;		None
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  1    wreg      void 
 11145 ;; Registers used:
 11146 ;;		wreg, status,2, status,0, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11156 ;;Total ram usage:        0 bytes
 11157 ;; Hardware stack levels used: 1
 11158 ;; Hardware stack levels required when called: 2
 11159 ;; This function calls:
 11160 ;;		_I2C_2_Master_Idle
 11161 ;; This function is called by:
 11162 ;;		_color_writetoaddr
 11163 ;;		_color_read_Red
 11164 ;;		_color_read_Green
 11165 ;;		_color_read_Blue
 11166 ;;		_color_read_Clear
 11167 ;; This function uses a non-reentrant model
 11168 ;;
 11169                           
 11170                           	psect	text67
 11171   0044A2                     __ptext67:
 11172                           	callstack 0
 11173   0044A2                     _I2C_2_Master_Stop:
 11174                           	callstack 26
 11175   0044A2                     
 11176                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11177   0044A2  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11178   0044A6                     
 11179                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11180   0044A6  010E               	movlb	14	; () banked
 11181   0044A8  85DA               	bsf	218,2,b	;volatile
 11182   0044AA                     
 11183                           ; BSR set to: 14
 11184   0044AA  0012               	return		;funcret
 11185   0044AC                     __end_of_I2C_2_Master_Stop:
 11186                           	callstack 0
 11187                           
 11188 ;; *************** function _I2C_2_Master_Start *****************
 11189 ;; Defined at:
 11190 ;;		line 27 in file "i2c.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, status,2, status,0, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11208 ;;Total ram usage:        0 bytes
 11209 ;; Hardware stack levels used: 1
 11210 ;; Hardware stack levels required when called: 2
 11211 ;; This function calls:
 11212 ;;		_I2C_2_Master_Idle
 11213 ;; This function is called by:
 11214 ;;		_color_writetoaddr
 11215 ;;		_color_read_Red
 11216 ;;		_color_read_Green
 11217 ;;		_color_read_Blue
 11218 ;;		_color_read_Clear
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text68
 11223   0044AC                     __ptext68:
 11224                           	callstack 0
 11225   0044AC                     _I2C_2_Master_Start:
 11226                           	callstack 26
 11227   0044AC                     
 11228                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11229   0044AC  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11230   0044B0                     
 11231                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11232   0044B0  010E               	movlb	14	; () banked
 11233   0044B2  81DA               	bsf	218,0,b	;volatile
 11234   0044B4                     
 11235                           ; BSR set to: 14
 11236   0044B4  0012               	return		;funcret
 11237   0044B6                     __end_of_I2C_2_Master_Start:
 11238                           	callstack 0
 11239                           
 11240 ;; *************** function _I2C_2_Master_RepStart *****************
 11241 ;; Defined at:
 11242 ;;		line 33 in file "i2c.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;		None
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;		None
 11247 ;; Return value:  Size  Location     Type
 11248 ;;                  1    wreg      void 
 11249 ;; Registers used:
 11250 ;;		wreg, status,2, status,0, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11260 ;;Total ram usage:        0 bytes
 11261 ;; Hardware stack levels used: 1
 11262 ;; Hardware stack levels required when called: 2
 11263 ;; This function calls:
 11264 ;;		_I2C_2_Master_Idle
 11265 ;; This function is called by:
 11266 ;;		_color_read_Red
 11267 ;;		_color_read_Green
 11268 ;;		_color_read_Blue
 11269 ;;		_color_read_Clear
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text69
 11274   0044B6                     __ptext69:
 11275                           	callstack 0
 11276   0044B6                     _I2C_2_Master_RepStart:
 11277                           	callstack 26
 11278   0044B6                     
 11279                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11280   0044B6  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11281   0044BA                     
 11282                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11283   0044BA  010E               	movlb	14	; () banked
 11284   0044BC  83DA               	bsf	218,1,b	;volatile
 11285   0044BE                     
 11286                           ; BSR set to: 14
 11287   0044BE  0012               	return		;funcret
 11288   0044C0                     __end_of_I2C_2_Master_RepStart:
 11289                           	callstack 0
 11290                           
 11291 ;; *************** function _I2C_2_Master_Read *****************
 11292 ;; Defined at:
 11293 ;;		line 51 in file "i2c.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;  ack             1    wreg     unsigned char 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  ack             1    3[COMRAM] unsigned char 
 11298 ;;  tmp             1    4[COMRAM] unsigned char 
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  1    wreg      unsigned char 
 11301 ;; Registers used:
 11302 ;;		wreg, status,2, status,0, cstack
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11311 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11312 ;;Total ram usage:        3 bytes
 11313 ;; Hardware stack levels used: 1
 11314 ;; Hardware stack levels required when called: 2
 11315 ;; This function calls:
 11316 ;;		_I2C_2_Master_Idle
 11317 ;; This function is called by:
 11318 ;;		_color_read_Red
 11319 ;;		_color_read_Green
 11320 ;;		_color_read_Blue
 11321 ;;		_color_read_Clear
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           	psect	text70
 11326   00405C                     __ptext70:
 11327                           	callstack 0
 11328   00405C                     _I2C_2_Master_Read:
 11329                           	callstack 26
 11330                           
 11331                           ; BSR set to: 14
 11332                           ;incstack = 0
 11333                           ;I2C_2_Master_Read@ack stored from wreg
 11334   00405C  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11335   00405E                     
 11336                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11337   00405E  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11338   004062                     
 11339                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11340   004062  010E               	movlb	14	; () banked
 11341   004064  87DA               	bsf	218,3,b	;volatile
 11342                           
 11343                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11344   004066  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11345   00406A                     
 11346                           ;i2c.c: 57:   tmp = SSP2BUF;
 11347   00406A  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11348                           
 11349                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11350   00406E  ECCC  F021         	call	_I2C_2_Master_Idle	;wreg free
 11351   004072                     
 11352                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11353   004072  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11354   004074  B4D8               	btfsc	status,2,c
 11355   004076  EF3F  F020         	goto	u4981
 11356   00407A  EF43  F020         	goto	u4980
 11357   00407E                     u4981:
 11358   00407E  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11359   004080  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11360   004082  EF44  F020         	goto	u4998
 11361   004086                     u4980:
 11362   004086  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11363   004088                     u4998:
 11364   004088  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11365   00408A  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11366   00408C  010E               	movlb	14	; () banked
 11367   00408E  51DA               	movf	218,w,b	;volatile
 11368   004090  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11369   004092  0BDF               	andlw	-33
 11370   004094  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11371   004096  6FDA               	movwf	218,b	;volatile
 11372   004098                     
 11373                           ; BSR set to: 14
 11374                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11375   004098  89DA               	bsf	218,4,b	;volatile
 11376   00409A                     
 11377                           ; BSR set to: 14
 11378                           ;i2c.c: 61:   return tmp;
 11379   00409A  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11380   00409C                     
 11381                           ; BSR set to: 14
 11382   00409C  0012               	return		;funcret
 11383   00409E                     __end_of_I2C_2_Master_Read:
 11384                           	callstack 0
 11385                           
 11386 ;; *************** function _I2C_2_Master_Idle *****************
 11387 ;; Defined at:
 11388 ;;		line 22 in file "i2c.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;		None
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      void 
 11395 ;; Registers used:
 11396 ;;		wreg, status,2, status,0
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11404 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11406 ;;Total ram usage:        1 bytes
 11407 ;; Hardware stack levels used: 1
 11408 ;; Hardware stack levels required when called: 1
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_I2C_2_Master_Start
 11413 ;;		_I2C_2_Master_RepStart
 11414 ;;		_I2C_2_Master_Stop
 11415 ;;		_I2C_2_Master_Write
 11416 ;;		_I2C_2_Master_Read
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text71
 11421   004398                     __ptext71:
 11422                           	callstack 0
 11423   004398                     _I2C_2_Master_Idle:
 11424                           	callstack 26
 11425   004398                     l194:
 11426   004398  010E               	movlb	14	; () banked
 11427   00439A  B5D8               	btfsc	216,2,b	;volatile
 11428   00439C  EFD2  F021         	goto	u4871
 11429   0043A0  EFD4  F021         	goto	u4870
 11430   0043A4                     u4871:
 11431   0043A4  EFCC  F021         	goto	l194
 11432   0043A8                     u4870:
 11433   0043A8                     
 11434                           ; BSR set to: 14
 11435   0043A8  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11436   0043AC  0E1F               	movlw	31
 11437   0043AE  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11438   0043B0  A4D8               	btfss	status,2,c
 11439   0043B2  EFDD  F021         	goto	u4881
 11440   0043B6  EFDF  F021         	goto	u4880
 11441   0043BA                     u4881:
 11442   0043BA  EFCC  F021         	goto	l194
 11443   0043BE                     u4880:
 11444   0043BE                     
 11445                           ; BSR set to: 14
 11446   0043BE  0012               	return		;funcret
 11447   0043C0                     __end_of_I2C_2_Master_Idle:
 11448                           	callstack 0
 11449                           
 11450 ;; *************** function _ADC_init *****************
 11451 ;; Defined at:
 11452 ;;		line 9 in file "ADC.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;		None
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;		None
 11457 ;; Return value:  Size  Location     Type
 11458 ;;                  1    wreg      void 
 11459 ;; Registers used:
 11460 ;;		wreg, status,2
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11470 ;;Total ram usage:        0 bytes
 11471 ;; Hardware stack levels used: 1
 11472 ;; Hardware stack levels required when called: 1
 11473 ;; This function calls:
 11474 ;;		Nothing
 11475 ;; This function is called by:
 11476 ;;		_main
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text72
 11481   004464                     __ptext72:
 11482                           	callstack 0
 11483   004464                     _ADC_init:
 11484                           	callstack 29
 11485   004464                     
 11486                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11487   004464  8C86               	bsf	134,6,c	;volatile
 11488                           
 11489                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11490   004466  010E               	movlb	14	; () banked
 11491   004468  8DB4               	bsf	180,6,b	;volatile
 11492                           
 11493                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11494   00446A  010F               	movlb	15	; () banked
 11495   00446C  9958               	bcf	88,4,b	;volatile
 11496   00446E                     
 11497                           ; BSR set to: 15
 11498                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11499   00446E  0EFC               	movlw	-4
 11500   004470  1758               	andwf	88,f,b	;volatile
 11501                           
 11502                           ;ADC.c: 17:     ADPCH=0b101110;
 11503   004472  0E2E               	movlw	46
 11504   004474  6F5F               	movwf	95,b	;volatile
 11505   004476                     
 11506                           ; BSR set to: 15
 11507                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11508   004476  9460               	bcf	96,2,c	;volatile
 11509   004478                     
 11510                           ; BSR set to: 15
 11511                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11512   004478  8860               	bsf	96,4,c	;volatile
 11513   00447A                     
 11514                           ; BSR set to: 15
 11515                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11516   00447A  8E60               	bsf	96,7,c	;volatile
 11517   00447C                     
 11518                           ; BSR set to: 15
 11519   00447C  0012               	return		;funcret
 11520   00447E                     __end_of_ADC_init:
 11521                           	callstack 0
 11522                           
 11523 ;; *************** function _LowISR *****************
 11524 ;; Defined at:
 11525 ;;		line 38 in file "timers.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      void 
 11532 ;; Registers used:
 11533 ;;		None
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11543 ;;Total ram usage:        1 bytes
 11544 ;; Hardware stack levels used: 1
 11545 ;; This function calls:
 11546 ;;		Nothing
 11547 ;; This function is called by:
 11548 ;;		Interrupt level 1
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552                           	psect	intcodelo
 11553   000018                     __pintcodelo:
 11554                           	callstack 0
 11555   000018                     _LowISR:
 11556                           	callstack 20
 11557                           
 11558                           ; BSR set to: 15
 11559                           ;incstack = 0
 11560   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11561   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11562   00001E                     
 11563                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11564   00001E  010E               	movlb	14	; () banked
 11565   000020  AB33               	btfss	51,5,b	;volatile
 11566   000022  EF15  F000         	goto	i1u224_21
 11567   000026  EF17  F000         	goto	i1u224_20
 11568   00002A                     i1u224_21:
 11569   00002A  EF19  F000         	goto	i1l667
 11570   00002E                     i1u224_20:
 11571   00002E                     
 11572                           ; BSR set to: 14
 11573                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11574   00002E  827F               	bsf	127,1,c	;volatile
 11575                           
 11576                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11577   000030  9B33               	bcf	51,5,b	;volatile
 11578   000032                     i1l667:
 11579                           
 11580                           ; BSR set to: 14
 11581   000032  C001  FFE0         	movff	??_LowISR,bsr
 11582   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11583   000038  0010               	retfie	
 11584   00003A                     __end_of_LowISR:
 11585                           	callstack 0
 11586                           
 11587                           	psect	rparam
 11588   000000                     
 11589                           	psect	temp
 11590   000052                     btemp:
 11591                           	callstack 0
 11592   000052                     	ds	1
 11593   000000                     int$flags	set	btemp
 11594   000000                     wtemp8	set	btemp+1
 11595   000000                     ttemp5	set	btemp+1
 11596   000000                     ttemp6	set	btemp+4
 11597   000000                     ttemp7	set	btemp+8
 11598                           
 11599                           	psect	config
 11600                           
 11601                           ;Config register CONFIG1L @ 0x300000
 11602                           ;	External Oscillator mode Selection bits
 11603                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11604                           ;	Power-up default value for COSC bits
 11605                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11606   300000                     	org	3145728
 11607   300000  AA                 	db	170
 11608                           
 11609                           ;Config register CONFIG1H @ 0x300001
 11610                           ;	unspecified, using default values
 11611                           ;	Clock Out Enable bit
 11612                           ;	CLKOUTEN = 0x1, unprogrammed default
 11613                           ;	Clock Switch Enable bit
 11614                           ;	CSWEN = 0x1, unprogrammed default
 11615                           ;	Fail-Safe Clock Monitor Enable bit
 11616                           ;	FCMEN = 0x1, unprogrammed default
 11617   300001                     	org	3145729
 11618   300001  FF                 	db	255
 11619                           
 11620                           ;Config register CONFIG3L @ 0x300004
 11621                           ;	WDT Period Select bits
 11622                           ;	WDTCPS = 0x1F, unprogrammed default
 11623                           ;	WDT operating mode
 11624                           ;	WDTE = OFF, WDT Disabled
 11625   300004                     	org	3145732
 11626   300004  9F                 	db	159
 11627                           
 11628                           ;Config register CONFIG3H @ 0x300005
 11629                           ;	unspecified, using default values
 11630                           ;	WDT Window Select bits
 11631                           ;	WDTCWS = 0x7, unprogrammed default
 11632                           ;	WDT input clock selector
 11633                           ;	WDTCCS = 0x7, unprogrammed default
 11634   300005                     	org	3145733
 11635   300005  FF                 	db	255
 11636                           tosu	equ	0xFFF
 11637                           tosh	equ	0xFFE
 11638                           tosl	equ	0xFFD
 11639                           stkptr	equ	0xFFC
 11640                           pclatu	equ	0xFFB
 11641                           pclath	equ	0xFFA
 11642                           pcl	equ	0xFF9
 11643                           tblptru	equ	0xFF8
 11644                           tblptrh	equ	0xFF7
 11645                           tblptrl	equ	0xFF6
 11646                           tablat	equ	0xFF5
 11647                           prodh	equ	0xFF4
 11648                           prodl	equ	0xFF3
 11649                           indf0	equ	0xFEF
 11650                           postinc0	equ	0xFEE
 11651                           postdec0	equ	0xFED
 11652                           preinc0	equ	0xFEC
 11653                           plusw0	equ	0xFEB
 11654                           fsr0h	equ	0xFEA
 11655                           fsr0l	equ	0xFE9
 11656                           wreg	equ	0xFE8
 11657                           indf1	equ	0xFE7
 11658                           postinc1	equ	0xFE6
 11659                           postdec1	equ	0xFE5
 11660                           preinc1	equ	0xFE4
 11661                           plusw1	equ	0xFE3
 11662                           fsr1h	equ	0xFE2
 11663                           fsr1l	equ	0xFE1
 11664                           bsr	equ	0xFE0
 11665                           indf2	equ	0xFDF
 11666                           postinc2	equ	0xFDE
 11667                           postdec2	equ	0xFDD
 11668                           preinc2	equ	0xFDC
 11669                           plusw2	equ	0xFDB
 11670                           fsr2h	equ	0xFDA
 11671                           fsr2l	equ	0xFD9
 11672                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        1
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     92     142
    BANK1           256      0     132
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 250
		 -> path(BANK2[250]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2966$buffer	PTR unsigned char  size(2) Largest target is 0

    S2966$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_moveWhite
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  345011
                                             76 COMRAM     2     2      0
                                             76 BANK0     16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   81978
                                             32 COMRAM    13     7      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   45414
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   11690
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   24068
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16385
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15481
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  201301
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11776
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   26306
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   27026
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   26486
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   11252
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   27026
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   27206
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   27206
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   27386
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11792
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    5058
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    3197
                                              7 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11972
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6070
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4698
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4022
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12683
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10759
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9187
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8699
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    2032
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1592
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      66        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 23:43:15 2024

               _color_read_Red 3C10                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 3D00  
                           l81 3C5E                             l90 3CFE                             l75 4148  
                           l84 3CAE                             l93 3274                             l78 4426  
                           l87 3D4E                             l96 27CE                             l98 27DC  
                           l99 282A                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3CB0               _color_read_Green 3C60                            l101 2838  
                          l102 288A                            l111 2978                            l200 44B4  
                          l104 2898                            l105 28EA                            l121 119C  
                          l203 44BE                            l107 28F8                            l131 128E  
                          l123 11F6                            l212 409C                            l108 2952  
                          l141 15A6                            l133 129E                            l125 1206  
                          l206 44AA                            l135 12F8                            l119 118C  
                          l400 38B6                            l209 44A0                            l145 161E  
                          l137 1308                            l146 163A                            l315 2522  
                          l420 3A40                            l164 27A6                            l333 447C  
                          l158 279A                            l502 4114                            l430 3ABA  
                          l191 4396                            l407 2F80                            l415 3944  
                          l512 34DC                            l441 433C                            l425 39C2  
                          l194 4398                            l450 4278                            l435 3B30  
                          l515 34DE                            l444 42AA                            l508 335A  
                          l197 43BE                            l453 436C                            l462 3EFE  
                          l438 430C                            l447 4246                            l471 3E26  
                          l456 4214                            l480 41E2                            l465 3F46  
                          l474 3E6E                            l459 3DDE                            l484 3C0E  
                          l468 3D96                            l901 341E                            l477 3EB6  
                          l629 4462                            l661 4406                            l670 43E4  
                          l566 4444                            l575 4480                            l495 3FD2  
                          l584 42DC                            l496 3FD2                            l578 4494  
                          l914 358E                            l499 40FE                            l940 318A  
                          l935 3144                            l929 36E6                            l967 3086  
                          _abs 417E                            _pad 3792                            _hue 00BC  
          convert_rgb2hue@cMax 003E                   ___awmod@sign 0007            convert_rgb2hue@diff 0094  
          logAction@pathLength 000A                            wreg 0FE8                   ___flmul@aexp 0013  
                 ___flmul@bexp 0014                   ___flmul@sign 000E                   ___flmul@temp 0019  
                 ___flmul@prod 0015                   ___fltol@exp1 003D                           l1200 17DE  
                         ?_abs 0008                           l1301 1EE6                           l1215 1944  
                         l1207 1AFA                           l1224 1A14                           l1240 4018  
                         l1161 3B9C                           l1225 1A02                           l1412 2CB4  
                         l1252 22BE                           l1332 2A68                           l1325 29D0  
                         l1422 4198                           l1254 211E                           l1263 2164  
                         l1168 3BA4                           l1328 2B2C                           l1425 41B0  
                         l1265 21DC                           l1257 20E2                           l1418 405A  
                         l1266 21CA                           l4010 1F32                           l4002 40DE  
                         l1371 3806                           l1291 1DB6                           l1339 2AC4  
                         l1348 417C                           l4100 2162                           l4020 1F72  
                         l4012 1F40                           l1284 1BC0                           l4004 40EA  
                         l1437 3790                           l1445 40DC                           l1373 3826  
                         l1293 1E2E                           l4110 21C2                           l4102 2174  
                         l4030 1F98                           l4022 1F74                           l4014 1F42  
                         l1294 1E1C                           l1198 182A                           l4006 40FA  
                         l1199 1818                           l1448 44C0                           l1368 37C8  
                         l1376 2D14                           l4120 2230                           l4104 2182  
                         l4040 1FD8                           l4032 1FA6                           l4016 1F52  
                         l4024 1F7C                           l4008 1F26                           l4200 1C5C  
                         l1288 1F24                           l1393 3634                           l4130 229A  
                         l4114 21EC                           l4122 2234                           l4106 2186  
                         l4050 2018                           l4042 1FDA                           l4034 1FA8  
                         l4026 1F8C                           l4018 1F62                           l4210 1CA2  
                         l4202 1C6A                           l5100 40B8                           l3420 3B54  
                         l4132 229E                           l4124 224E                           l4116 21F8  
                         l4108 2194                           l4060 2048                           l4052 2020  
                         l4036 1FB8                           l4044 1FE2                           l4028 1F92  
                         l4300 30B6                           l4220 1D10                           l4212 1CBC  
                         l4204 1C76                           l1389 2E2C                           l1397 363C  
                         l5110 335C                           l5102 40BC                           l3430 3B8E  
                         l3422 3B5C                           l3414 3B32                           l4134 22AC  
                         l4126 2264                           l4118 2206                           l4070 2086  
                         l4062 2048                           l4054 2024                           l4046 1FF2  
                         l4038 1FC8                           l4310 3124                           l4302 30C6  
                         l4230 1DA6                           l4222 1D3A                           l4214 1CCC  
                         l4206 1C86                           l4150 1B16                           l5120 3388  
                         l5112 3360                           l5200 37E4                           l5104 43C0  
                         l3432 3B90                           l3424 3B6A                           l3416 3B3A  
                         l4136 22B2                           l4128 227E                           l4080 20D2  
                         l4072 2096                           l4048 2008                           l4312 3132  
                         l4304 30F4                           l4240 1DE6                           l4232 1DB4  
                         l4224 1D70                           l4216 1CE8                           l4208 1C92  
                         l4160 1B4E                           l4152 1B18                           l4320 2F82  
                         l4400 2AFC                           l6000 250C                           l5130 33B6  
                         l5122 3390                           l5114 336E                           l5202 37E8  
                         l5210 2CB6                           l5106 43DC                           l4410 436E  
                         l3434 3B96                           l3426 3B70                           l3418 3B4C  
                         l4138 22B4                           l4090 211C                           l4082 20E0  
                         l4074 20A6                           l4066 205C                           l4058 2038  
                         l4314 3182                           l4306 3104                           l4250 1E58  
                         l4242 1E14                           l4234 1DC6                           l4226 1D7E  
                         l4218 1CF4                           l4170 1B7A                           l4162 1B5E  
                         l4154 1B28                           l4146 1AFC                           l4330 2FD8  
                         l4322 2F98                           l4402 2B0C                           l6010 255A  
                         l6002 2530                           l5140 33F0                           l5132 33BE  
                         l5124 3394                           l5116 3376                           l5204 3816  
                         l5220 2CEC                           l5212 2CBA                           l5300 2B76  
                         l4420 4384                           l4412 4378                           l3428 3B86  
                         l4092 212E                           l4084 20EC                           l4076 20AE  
                         l4068 2076                           l4316 3188                           l4308 3112  
                         l4260 1ECE                           l4252 1E82                           l4236 1DD4  
                         l4228 1D9C                           l4180 1BD0                           l4172 1B8A  
                         l4164 1B64                           l4156 1B38                           l4148 1B08  
                         l3700 16E2                           l4332 2FE8                           l4404 2B1A  
                         l4500 13C6                           l6012 256A                           l6004 2530  
                         l5150 3416                           l5142 33F2                           l5134 33CC  
                         l5126 339C                           l5118 337A                           l5206 417E  
                         l5230 2D26                           l5222 2CFC                           l5214 2CCE  
                         l5302 2B7A                           l5310 2BC4                           l4414 437E  
                         l4094 2144                           l4086 210A                           l4078 20BE  
                         l4262 1EEA                           l4270 1F10                           l4246 1E3E  
                         l4254 1E86                           l4238 1DD8                           l4190 1C0A  
                         l4182 1BE0                           l4174 1B9A                           l4166 1B6A  
                         l4158 1B48                           l3710 171C                           l3702 16F2  
                         l4342 3012                           l4334 2FEC                           l4326 2FAC  
                         l4406 2B1C                           l4502 1422                           l4510 15A6  
                         l6006 253C                           l5144 33F8                           l5136 33D2  
                         l5128 33AE                           l5160 34FA                           l5208 418C  
                         l5232 2D2C                           l5240 2D84                           l5224 2D08  
                         l5216 2CD6                           l5320 2C0C                           l5312 2BD4  
                         l5304 2B86                           l4416 4380                           l5400 3970  
                         l4096 214A                           l4088 210C                           l4272 1F14  
                         l4264 1EFA                           l4256 1EA0                           l4248 1E4A  
                         l4192 1C20                           l4176 1BAA                           l4168 1B78  
                         l3800 1924                           l3720 1748                           l3712 172E  
                         l3704 1702                           l4360 3076                           l4352 303A  
                         l4344 301C                           l4336 2FFA                           l4328 2FD6  
                         l4512 15DA                           l4504 1454                           l6008 2558  
                         l5138 33E8                           l5146 33FE                           l5170 352E  
                         l5162 34FE                           l5154 34E0                           l5090 372E  
                         l5082 36E8                           l5242 2D9E                           l5250 2DEA  
                         l5234 2D5E                           l5226 2D10                           l5218 2CE6  
                         l5322 2C2C                           l5314 2BE8                           l4418 4382  
                         l5410 3990                           l4098 2154                           l4290 36BA  
                         l4282 363E                           l4266 1F08                           l4258 1EB4  
                         l4194 1C2C                           l4186 1BF4                           l4178 1BB0  
                         l3810 197E                           l3802 1934                           l3730 175C  
                         l3722 174C                           l3714 173C                           l3706 1704  
                         l4354 3046                           l4346 3026                           l4370 29E0  
                         l4514 15EA                           l4506 14E4                           l4450 0EBC  
                         l5500 42BE                           l5148 340E                           l5180 3568  
                         l5172 3536                           l5164 350C                           l5156 34E4  
                         l5092 3760                           l5084 36F8                           l5252 2DFA  
                         l5244 2DB0                           l5236 2D62                           l5228 2D1C  
                         l5260 3590                           l5332 2C82                           l5324 2C4C  
                         l5316 2BF8                           l5308 2B8E                           l5420 3AD4  
                         l5412 3998                           l4292 36DE                           l4284 366C  
                         l4268 1F0A                           l4196 1C44                           l4188 1C00  
                         l3820 19AE                           l3812 1988                           l3804 195A  
                         l3740 1770                           l3732 1760                           l3724 1750  
                         l3716 1740                           l3708 170C                           l4276 3FD4  
                         l4356 3056                           l4380 2A1E                           l4372 29F6  
                         l4364 297C                           l4508 1516                           l4460 0FB8  
                         l4452 0EEC                           l5502 42C6                           l5174 3544  
                         l5182 356E                           l5166 3514                           l5158 34F2  
                         l5086 3708                           l5190 3792                           l5254 2E00  
                         l5246 2DC0                           l5238 2D68                           l5270 3602  
                         l5262 3598                           l5326 2C64                           l5318 2C02  
                         l5430 3AF8                           l5350 38B8                           l5414 39A8  
                         l5406 3978                           l4294 36E4                           l4286 367C  
                         l4198 1C50                           l3830 19D6                           l3822 19B2  
                         l3814 1996                           l3806 196A                           l3750 17AA  
                         l3742 1774                           l3734 1764                           l3726 1754  
                         l3718 1744                           l3670 1648                           l4278 3FE4  
                         l4358 3066                           l4390 2AA6                           l4382 2A50  
                         l4366 298C                           l4470 10AC                           l4462 0FEC  
                         l4454 0F1C                           ?_pad 0010                           l5440 4490  
                         l5184 357E                           l5176 355A                           l5168 3526  
                         l5088 3712                           l5096 409E                           l5192 37A2  
                         l5256 2E10                           l5248 2DDA                           l5264 35BE  
                         l5272 360A                           l5328 2C6E                           l6056 2BB6  
                         l5336 2C8E                           l5280 2EA8                           l5432 3B00  
                         l5360 38F8                           l5352 38BC                           l5416 39AC  
                         l5408 3988                           l5600 3D98                           l4800 4442  
                         l4288 36AA                           l3840 1A30                           l3832 19E4  
                         l3824 19C2                           l3816 1998                           l3760 17FC  
                         l3752 17C6                           l3744 1778                           l3736 1768  
                         l3728 1758                           l3680 1688                           l3672 1656  
                         l4392 2AB4                           l4384 2A52                           l4376 2A0A  
                         l4368 299A                           l4480 11B0                           l4472 10E0  
                         l4464 1020                           l4456 0F50                           l4448 0EAA  
                         l5520 3A9A                           l5512 3A66                           l5504 3A42  
                         l5346 4398                           l5186 3586                           l5178 3562  
                         l5098 40AA                           l5194 37B2                           l5266 35C6  
                         l5290 2B2E                           l5442 401A                           l5282 2EAC  
                         l5274 2E2E                           l5434 3B10                           l5426 3ADC  
                         l5418 3ABC                           l5362 3900                           l5354 38D2  
                         l5370 39C4                           l5610 3EC4                           l5602 3DA4  
                         l4810 3886                           l4802 3828                           l4298 3088  
                         l3850 1A9A                           l3842 1A3E                           l3834 19FA  
                         l3818 19A6                           l3826 19C4                           l3770 1848  
                         l3762 180A                           l3754 17D6                           l3738 176C  
                         l3746 177C                           l3690 16BA                           l3682 168A  
                         l3674 1658                           l4394 2AD2                           l4386 2A5E  
                         l4378 2A12                           l4490 12B2                           l4482 11E2  
                         l4474 1114                           l4466 1054                           l4458 0F84  
                         l5522 3A9E                           l5514 3A7A                           l5506 3A5E  
                         l5348 43A8                           l5452 44AC                           l5460 44A2  
                         l5196 37C0                           l5268 35E2                           l5292 2B54  
                         l5444 4022                           l5284 2EEA                           l5276 2E48  
                         l5436 3B14                           l5428 3AF0                           l5364 3908  
                         l5356 38DA                           l5524 3BA8                           l5372 39DE  
                         l5620 3F24                           l5540 431A                           l5612 3EDC  
                         l5532 42DE                           l5604 3DBC                           l4820 38A8  
                         l4812 3890                           l4804 3838                           l3860 1AD4  
                         l3852 1ABA                           l3844 1A78                           l3780 1888  
                         l3828 19D2                           l3764 180C                           l3756 17EC  
                         l3748 1780                           l3692 16BC                           l3676 1668  
                         l3684 1692                           l3668 163C                           l4396 2AD4  
                         l4388 2A9A                           l4492 12E4                           l4484 1216  
                         l4476 1146                           l4468 1078                           l5516 3A82  
                         l5700 3342                           l5470 4062                           l5454 44B0  
                         l5462 44A6                           l5438 4480                           l5198 37D4  
                         l5294 2B5C                           l5446 4032                           l5710 4134  
                         l5286 2F04                           l5278 2E96                           l5358 38F0  
                         l5366 3918                           l5526 3BBE                           l5390 3A26  
                         l5382 39F6                           l5374 39E6                           l5622 3F30  
                         l5542 4330                           l5614 3EE8                           l5630 3EA0  
                         l5550 4216                           l5534 42EA                           l5606 3DC8  
                         l4822 38AA                           l4814 3892                           l4806 385E  
                         l3862 1ADA                           l3854 1ABE                           l3838 1A24  
                         l3846 1A7A                           l3790 18B2                           l3782 1894  
                         l3774 185C                           l3766 1816                           l3758 17F8  
                         l3694 16C2                           l3686 16A2                           l3678 1678  
                         l4398 2AD8                           l4494 1318                           l4486 1248  
                         l4478 1178                           l5518 3A8A                           l5702 334E  
                         l5472 406A                           l5464 44B6                           l5456 4498  
                         l5296 2B6A                           l5448 4052                           l5800 294A  
                         l5712 413E                           l5704 4116                           l5288 2F44  
                         l5368 392E                           l5528 3C0A                           l5392 3A2A  
                         l5384 3A06                           l5376 39EE                           l5544 427A  
                         l5616 3F00                           l5608 3EB8                           l5560 426C  
                         l5624 3E70                           l5552 4222                           l5640 3E28  
                         l5536 4300                           l5632 3D50                           l4824 38B4  
                         l4816 389C                           l4808 3862                           l3864 1AE8  
                         l3856 1ACC                           l3848 1A8A                           l3784 1898  
                         l3776 186C                           l3768 1838                           l3792 18B8  
                         l3696 16D0                           l3688 16A8                           l4496 137E  
                         l4488 127A                           l5720 31BC                           l5474 4072  
                         l5466 44BA                           l5458 449C                           l5298 2B6E  
                         l5490 4172                           l5482 414A                           l5802 2960  
                         l5706 411A                           l5562 433E                           l5386 3A0E  
                         l5546 4286                           l5618 3F0C                           l5538 430E  
                         l5626 3E7C                           l5394 3946                           l5554 423A  
                         l5642 3E34                           l5570 41F0                           l5650 3DEC  
                         l5634 3D5C                           l5810 25C6                           l4826 43E6  
                         l4818 389E                           l3866 1AEA                           l3858 1AD2  
                         l3794 18DE                           l3786 18A6                           l3778 187A  
                         l3698 16D2                           l4498 1394                           l5730 31F2  
                         l5722 31BE                           l5714 318C                           l4780 4464  
                         l5476 4098                           l5468 405E                           l5484 4152  
                         l5708 4124                           l5564 434A                           l5388 3A16  
                         l5548 429E                           l5556 4248                           l5628 3E94  
                         l5396 3960                           l5644 3E4C                           l5572 4208  
                         l5652 3E04                           l5636 3D74                           l5820 261E  
                         l5812 25D2                           l5804 2586                           l4828 43FE  
                         l3796 1912                           l3788 18A8                           l5740 3226  
                         l5732 31F4                           l5724 31C0                           l5716 3192  
                         l5660 41B2                           l5900 22E2                           l4782 446E  
                         l5478 409A                           l5590 3D46                           l5582 3C60  
                         l5494 42AC                           l5486 415A                           l5574 440A  
                         l5566 4360                           l5558 4254                           l5398 3968  
                         l5646 3E58                           l5654 3E10                           l5638 3D80  
                         l5830 2680                           l5822 2634                           l5814 25E8  
                         l5806 259C                           l4790 4428                           l3798 1914  
                         l5742 3228                           l5734 31F6                           l5726 31C2  
                         l5718 31AA                           l5662 41BE                           l5670 3FB0  
                         l5910 2302                           l5902 22E6                           l4784 4476  
                         l5584 3CA6                           l5576 3C10                           l5496 42B0  
                         l5488 4162                           l5760 27F6                           l5752 27A8  
                         l5568 41E4                           l5648 3DE0                           l5656 4446  
                         l5840 26E2                           l5832 2696                           l5824 264A  
                         l5816 25FE                           l5808 25B2                           l4792 4432  
                         l5744 3242                           l5736 320E                           l5728 31F0  
                         l5664 41D6                           l5680 3276                           l5672 3FC2  
                         l5920 2326                           l5912 2306                           l5904 22EE  
                         l4786 4478                           l5594 3CB0                           l5578 3C56  
                         l5498 42BC                           l5770 2852                           l5762 2808  
                         l5754 27AE                           l5658 445A                           l5850 2742  
                         l5842 26F6                           l5834 26AA                           l5826 265E  
                         l5818 2612                           l4794 4434                           l5746 3258  
                         l5738 3224                           l5690 32EE                           l5682 3292  
                         l5666 3F8E                           l5930 2330                           l5922 2328  
                         l5914 230A                           l5906 22F6                           l4788 447A  
                         l5588 3D00                           l5596 3CF6                           l5780 28B2  
                         l5772 2868                           l5764 280A                           l5756 27C6  
                         l5852 274E                           l5844 2702                           l5836 26B6  
                         l5828 266A                           l5860 279A                           l4796 443E  
                         l5748 326C                           l5692 32F6                           l5684 32AE  
                         l5668 3FA0                           l5940 233C                           l5932 2332  
                         l5924 232A                           l5916 2322                           l5908 22FE  
                         l5790 2916                           l5782 28C8                           l5774 286A  
                         l5766 2822                           l5758 27DE                           l5854 2764  
                         l5846 2718                           l5838 26CC                           l4798 4440  
                         l5694 3312                           l5686 32B6                           l5862 3420  
                         l5950 234E                           l5942 233E                           l5934 2334  
                         l5926 232C                           l5918 2324                           l5792 292C  
                         l5784 28CA                           l5776 2882                           l5768 283A  
                         l5856 277A                           l5848 272E                           l5696 332E  
                         l5688 32D2                           l5880 34C2                           l5872 344C  
                         l5864 3426                           l5960 2392                           l5952 2350  
                         l5944 2340                           l5936 2338                           l5928 232E  
                         l5794 292E                           l5786 28E2                           l5778 289A  
                         l5858 278E                           l5698 3336                           l5882 34D2  
                         l5874 3472                           l5866 3432                           l5970 23A6  
                         l5962 2394                           l5954 2366                           l5946 2342  
                         l5938 233A                           l5890 22C8                           l5796 2930  
                         l5788 28FE                           l5876 3498                           l5868 343A  
                         l5980 245C                           l5972 23B2                           l5964 2396  
                         l5956 2368                           l5948 234C                           l5892 22CC  
                         l5798 2932                           l5878 34AA                           l5990 24A4  
                         l5982 2468                           l5974 23D4                           l5966 2398  
                         l5958 2370                           l5894 22CC                           l5886 22C0  
                         l5992 24BC                           l5984 246A                           l5976 2438  
                         l5968 23A4                           l5896 22D8                           l5888 22C4  
                         l5994 24C8                           l5986 2480                           l5978 2450  
                         l5898 22DE                           l5996 24DE                           l5988 2498  
                         l5998 24F6                           STR_1 0E6D                           STR_2 0EA6  
                         STR_3 0E01                           STR_4 0EA6                           STR_5 0E1E  
                         STR_6 0EA6                           STR_7 0E39                           STR_8 0EA6  
                         STR_9 0E54                           u3000 1924                           u3001 1920  
                         u3010 195A                           u3011 1956                           u3100 1A24  
                         u3020 196A                           u3101 1A20                           u3021 1966  
                         u3110 1A3E                           u3030 1996                           u3111 1A3A  
                         u3031 1992                           u3120 1A78                           u3040 19A6  
                         u4000 1454                   _BAUD4CONbits 0EE9                           u3121 1A74  
                         u3041 19A2                           u4001 1450                           u3130 1A8A  
                         u3050 19C2                           u4010 1516                           u3131 1A86  
                         u3051 19BE                           u4011 1512                           u3300 1FC8  
                         u3140 1A9A                           u3060 19D2                           u4020 15EA  
                         u3301 1FC4                           u3141 1A96                           u3061 19CE  
                         u4021 15E6                           u3310 2008                           u3150 1ABA  
                         u3070 19E4                           u3311 2004                           u3151 1AB6  
                         u3071 19E0                           u5000 42DC                           u3400 2194  
                         u3320 2048                           u3160 1ACC                           u3080 19FA  
                         u3240 4114                           u5001 42D8                           u3401 2190  
                         u3321 2044                           u3161 1AC8                           u3081 19F6  
                         u3241 4110                           u3410 21C2                           u3330 20BE  
                         u3250 1F40                           u3170 1AE8                           u3090 1A10  
                         u5010 3ABA                           _T2PR 0FBC                           u3411 21BE  
                         u3331 20BA                           u3251 1F3C                           u3171 1AE4  
                         u3091 1A0C                           u5011 3AB6                           u5020 3BBE  
                         u3420 21D8                           u3340 20E0                           u3260 1F52  
                         u3500 1B38                           u5100 332E                           u5021 3BBA  
                         u3421 21D4                           u3341 20DC                           u3261 1F4E  
                         u3501 1B34                           u5101 332A                           u5110 27DC  
                         u2470 3B4C                           u3430 21EC                           u3350 210A  
                         u3270 1F62                           u3510 1B78                           u5030 3FA0  
                         u5111 27D8                           u2471 3B48                           u3431 21E8  
                         u3351 2106                           u3271 1F5E                           u3511 1B74  
                         u5031 3F9C                           u5120 2838                           u2480 3B6A  
                         u5200 2634                           u3440 2206                           u3360 212E  
                         u3280 1FA6                           u3600 1E14                           u3520 1B8A  
                         u2800 1668                           u5040 3FC2                           u5121 2834  
                         u2481 3B66                           u5201 2630                           u3441 2202  
                         u3361 212A                           u3281 1FA2                           u3601 1E10  
                         u3521 1B86                           u2801 1664                           u5041 3FBE  
                         u5130 2898                           u2490 3B86                           u5210 264A  
                         u3450 224E                           u3370 2144                           u3290 1FB8  
                         u3610 1E2A                           u3530 1B9A                           u2810 1678  
                         u5050 3292                           u5131 2894                           u2491 3B82  
                         u5211 2646                           u3451 224A                           u3371 2140  
                         u3291 1FB4                           u3611 1E26                           u3531 1B96  
                         u2811 1674                           u5051 328E                           u4500 40DC  
                         u5140 28F8                           u5220 2680                           u3460 227E  
                         u3380 2162                           u3700 30B6                           u3620 1E3E  
                         u3540 1BD0                           u2900 17C4                           u2820 16BA  
                         u5060 32AE                           u5300 3448                           u4501 40D8  
                         u5141 28F4                           u5221 267C                           u3461 227A  
                         u3381 215E                           u3701 30B2                           u3621 1E3A  
                         u3541 1BCC                           u2821 16B6                           u5061 32AA  
                         u5301 3444                           u4510 336E                           u5150 2960  
                         u5230 2696                           u3470 22AC                           u3390 2182  
                         u3710 30F4                           u3630 1E58                           u3550 1BE0  
                         u2910 17EC                           u2830 16D0                           u5070 32D2  
                         u5310 34AA                           u4511 336A                           u5151 295C  
                         u5231 2692                           u3471 22A8                           u3391 217E  
                         u3711 30F0                           u3631 1E54                           u3551 1BDC  
                         u2911 17E8                           u2831 16CC                           u5071 32CE  
                         u5311 34A6                           u4520 3388                           u4600 3544  
                         u5240 26CC                           u5160 259C                           u3720 3112  
                         u3640 1EA0                           u3560 1D5A                           u3480 1B16  
                         u2920 180A                           u2840 16E2                           u3800 3056  
                         u5080 32EE                           u5320 2450                           u4521 3384  
                         u4601 3540                           u5241 26C8                           u5161 2598  
                         u3721 310E                           u3641 1E9C                           u3481 1B12  
                         u2921 1806                           u2841 16DE                           u3801 3052  
                         u5081 32EA                           u5321 244C                           u4530 33AE  
                         u4610 355A                           u5250 26E2                           u5170 25B2  
                         u3730 3132                           u3650 1ECE                           u3570 1DB4  
                         u3490 1B28                           u2930 182A                           u2850 16F2  
                         u3810 3066                           u5090 3312                           u5330 24F6  
                         u4531 33AA                           u4611 3556                           u5251 26DE  
                         u5171 25AE                           u3731 312E                           u3651 1ECA  
                         u3571 1DB0                           u3491 1B24                           u2931 1826  
                         u2851 16EE                           u3811 3062                           u5091 330E  
                         u5331 24F2                           u4540 33CC                           u4620 357E  
                         u4460 36F8                           u4700 2CE6                           u5260 2718  
                         u5180 25E8                           u3740 3182                           u3660 1F08  
                         u3580 1DD4                           u2940 1838                           u2860 172E  
                         u3900 2B0C                           u3820 298C                           u5340 250C  
                         u4541 33C8                           u4621 357A                           u4461 36F4  
                         u4701 2CE2                           u5261 2714                           u5181 25E4  
                         u3741 317E                           u3661 1F04                           u3581 1DD0  
                         u3565 1D50                           u2941 1834                           u2861 172A  
                         u3901 2B08                           u3821 2988                           u5341 2508  
                         u4550 33E8                           u4470 3708                           u4630 37A2  
                         u4710 2CFC                           u5270 272E                           u5190 25FE  
                         u3670 366C                           u3590 1DE6                           u2950 1848  
                         u2870 173C                           u2790 1656                           u3750 2F98  
                         u3910 2B1A                           u3830 299A                           u5350 2522  
                         u4551 33E4                           u4471 3704                           u4631 379E  
                         u4711 2CF8                           u5271 272A                           u5191 25FA  
                         u3671 3668                           u3591 1DE2                           u2951 1844  
                         u2871 1738                           u2791 1652                           u3751 2F94  
                         u3911 2B16                           u3831 2996                           u5351 251E  
                         u5407 24AE                           u4560 340E                           u4480 372E  
                         u4640 37C0                           u4720 2D9E                           u4800 2E48  
                         u5280 2764                           u3680 36AA                           u2960 187A  
                         u2880 17AA                           u3760 2FCC                           u3840 29F6  
                         u3920 1146                           u5360 2530                           u4561 340A  
                         u4481 372A                           u4641 37BC                           u4721 2D9A  
                         u4801 2E44                           u5281 2760                           u3681 36A6  
                         u2961 1876                           u2881 17A6                           u3841 29F2  
                         u3921 1142                           u5361 252C                           u5417 24D2  
                         u4570 34F2                           u4490 3760                           u4650 3806  
                         u4730 2DB0                           u4810 2F04                           u5290 277A  
                         u3690 36DE                           u2970 1888                           u2890 17C2  
                         u3770 2FFA                           u3850 2A4C                           u3930 1178  
                         u4571 34EE                           u4491 375C                           u4651 3802  
                         u4731 2DAC                           u4811 2F00                           u5507 3DAE  
                         u5291 2776                           u3691 36DA                           u2971 1884  
                         u2891 17BC                           u3771 2FF6                           u3851 2A48  
                         u3931 1174                           u5427 3A90                           u4580 350C  
                         u4660 3816                           u4740 2DC0                           u4820 2B54  
                         u4900 38F0                           u2980 18A6                           u3780 300E  
                         u3860 2A96                           u3940 11E2                           u4581 3508  
                         u4661 3812                           u4741 2DBC                           u4821 2B50  
                         u4901 38EC                           u5517 42F4                           u2981 18A2  
                         u3781 300A                           u3765 2FC2                           u3861 2A92  
                         u3941 11DE                           u5437 40F0                           u4590 3526  
                         u4670 418C                           u4750 2DDA                           u4830 2BD4  
                         u4910 392E                           u2990 18DE                           u3790 3036  
                         u3870 2AB4                           u3950 1248                           u4591 3522  
                         u4671 4188                           u4751 2DD6                           u4831 2BD0  
                         u4911 392A                           u5607 4324                           u5527 3DF6  
                         u2991 18DA                           u3791 3032                           u3871 2AB0  
                         u3951 1244                           u5447 41C8                           u4760 2DEA  
                         u4680 2CCA                           u4840 2BF8                           u4920 3944  
                         u3880 2AC4                           u3960 127A                           u4761 2DE6  
                         u4681 2CC4                           u4841 2BF4                           u4921 3940  
                         u5617 3F16                           u5537 41FA                           u3881 2AC0  
                         u3961 1276                           u5457 319C                           u4770 2DFA  
                         u4690 2CCC                           u4850 2C2C                           u4930 3A40  
                         u3890 2AD2                           u3970 12E4                           u4771 2DF6  
                         u4851 2C28                           u5707 28A4                           u4931 3A3C  
                         u5627 4290                           u5547 3E3E                           u3891 2ACE  
                         u3971 12E0                           u5467 31CC                           u5387 235A  
                         u4780 35BE                           u4860 2C4C                           u4940 39C2  
                         u3980 137E                           u4781 35BA                           u4861 2C48  
                         u5717 2908                           u5637 3A1C                           u4941 39BE  
                         u5557 422C                           u3981 137A                           u5477 3200  
                         u5397 248A                           u4870 43A8                           u4790 3634  
                         u4950 3B30                           u3990 13C6                           u4871 43A4  
                         u4791 3630                           u5727 296A                           u4951 3B2C  
                         u5647 4354                           u5567 399E                           u3991 13C2  
                         u5487 3234                           u4880 43BE                           u4960 4490  
                         u4881 43BA                           u4961 448C                           u5737 42C0  
                         u5657 390E                           u5577 3E86                           u5497 3D66  
                         u4970 4052                           u4890 38D2                           u4971 404E  
                         u5667 3B06                           u4891 38CE                           u5587 425E  
                         u4980 4086                           u4981 407E                           u5677 412A  
                         u5597 3ECE                           u5687 27E8                           u5697 2844  
                         u4998 4088                    main@current 00B0                    main@maximum 00AC  
                         abs@a 0008                           _dbuf 0164                           _main 22C0  
                         _dtoa 2CB6                           _path 0200           convert_rgb2hue@cCurr 003F  
                         _prec 00C6                           pad@i 0016                           pad@p 0013  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 0052  
                         _stop 38B8            fullSpeedAhead@power 0017                           prodh 0FF4  
                         prodl 0FF3                           start 003A               __end_of_ADC_init 447E  
              ___fldiv@new_exp 002C         __end_of_color_read_Red 3C60                   ___param_bank 0000  
               reading_hue@hue 0046                          ??_abs 000A                          ??_pad 0015  
                ___fltol@sign1 003C                __end_of___fladd 1AFC                          ?_main 0001  
                        ?_dtoa 0018                          _ADPCH 0F5F                __end_of___fldiv 22C0  
              __end_of___awdiv 3420                          STR_10 0EA6                          STR_11 0E85  
                        STR_12 0E9A                __end_of___awmod 3590                __end_of___flmul 1F26  
              __end_of___flsub 401A                __end_of___fltol 3088                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 3BA6                          i1l667 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3                __end_of_left135 427A  
      __end_of_sendCharSerial4 4496     __end_of_I2C_2_Master_Start 44B6     __end_of_I2C_2_Master_Write 44A2  
                        _flags 00C8            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 36E8                          _fputs 409E                          pad@fp 0010  
                        _width 00C4                          _putch 44C0                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 430E  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 0042  
              __end_of_moveRed 3DE0                          tablat 0FF5          moveYellow@path_length 001F  
              __end_of_turn180 42AC                          ttemp5 0053                          ttemp6 0056  
                        ttemp7 005A                          status 0FD8                          wtemp8 0053  
              __end_of_sprintf 417E          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 3D50  
        _I2C_2_Master_RepStart 44B6                ?_color_read_Red 0006                __initialization 3F48  
                 __end_of_main 2586                   __end_of_dtoa 2E2E                   __end_of_stop 3946  
        __end_of_moveLightBlue 3EB8                _get16bitTMR0val 43E6                         ??_main 004D  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 363E                _reverseStraight 3276                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 436E  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3262 001E                         i1l3264 002E                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 414A                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2B2E    convert_rgb2hue@greencurrent 0068               __end_of_decision 27A8  
                       _LowISR 0018                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 3088                         ___fleq 363E                      ??___fladd 000A  
                       ___wmul 43C0                      ??___fldiv 0023               backOneAndHalf@mL 0019  
                    ??___awdiv 0006               backOneAndHalf@mR 001A                      ??___awmod 0006  
                    ??___flmul 000A                      ??___flsub 001A                      ??___fltol 0038  
                    ??___lwdiv 000C                         _left90 430E           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 3F60                         clear_1 3F6C  
                       clear_2 3F78               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00D4                         _motorR 00CB                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 4248                         dtoa@fp 0018  
             __end_of_moveBlue 3F48               __end_of_movePink 3E28                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0045  
                    ??_moveRed 0021                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                         putch@c 0001               __end_of_vfprintf 405C  
                    ??_turn180 001B                         stop@mL 0014                         stop@mR 0015  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0038               __end_of_turnLeft 3A42  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 3F84       __end_of_color_read_Clear 3D00  
     __end_of_color_read_Green 3CB0         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 41E4  
                ___rparam_used 0001                     ___fltol@f1 0034               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4408                  _fullSpeedBack 3ABC  
                 __pidataBANK0 44C2                  __end_of_fputc 3792                  __end_of_fputs 40DE  
                __end_of_putch 44C2        __end_of_reverseStraight 335C               reading_hue@cCurr 0042  
          moveBlue@path_length 001F                     ??_ADC_init 0002                 main@clear_norm 00B6  
                   backHalf@mL 0019                     backHalf@mR 001A                        ??_fputc 0005  
                      ??_fputs 000D                        ??_putch 0002                     __pbssBANK0 00BC  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 4216  
                      ?_LowISR 0001              _color_writetoaddr 4408                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0014                _convert_rgb2hue 0EAA                        ?___flge 0002  
                      ?___fleq 0002             ?_color_writetoaddr 0004                  _customDelayMs 40DE  
                      ?___wmul 0002                        ?_left90 0019                      ?_backHalf 0019  
          ??_color_writetoaddr 0005                      ?___xxtofl 0002            _convert_rgb2hue$430 0084  
          _convert_rgb2hue$431 0088            _convert_rgb2hue$432 008C            _convert_rgb2hue$429 0080  
                    ?_decision 0047                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                decision@color 004B                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001D                    moveGreen@mR 001E                ?_backOneAndHalf 0019  
       color_writetoaddr@value 0004               ??_color_read_Red 0008      __end_of_color_writetoaddr 4428  
                    _ADREFbits 0F58                      ?_right135 0019             _I2C_2_Master_Start 44AC  
                   _initUSART4 4428             _I2C_2_Master_Write 4496                      ?_moveBlue 001D  
                      __Hparam 0000                      ?_movePink 001D                        __Lparam 0000  
            color_read_Red@tmp 000B                    moveWhite@mL 001D                    moveWhite@mR 001E  
    customDelayMs@milliseconds 0002                 ?_customDelayMs 0002        sendStringSerial4@string 0003  
             ?_get16bitTMR0val 0002                        ___fladd 163C                        ___fldiv 1F26  
                      ___awdiv 335C                        ___awmod 34E0                        ___flmul 1AFC  
                      ___flsub 3FD4                        ___fltol 2F82            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3B32            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 3F48                     ??_backHalf 001B  
            __end_of_logAction 3C10                        __ramtop 0E00               ?_reverseStraight 0019  
                   _send2USART 4446                      ?_turnLeft 0014                        _left135 4248  
                      __ptext0 22C0                        __ptext1 3420                        __ptext2 3F8E  
                      __ptext3 3276                        __ptext4 3A42                        __ptext5 40DE  
                      __ptext6 41B2                        __ptext7 318C                        __ptext8 0EAA  
                      __ptext9 297A                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 004B  
       reverseStraight@delayMs 001D                        _right90 42DE                      _T2HLTbits 0FBE  
                      _moveRed 3D98                  _RxBufWriteCnt 0051                        _turn180 427A  
                      _sprintf 414A                        main@hue 00B8           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 3F84              __end_of_moveGreen 3F00  
            __end_of_moveWhite 41E4                        fputc@fp 0004        __end_of_convert_rgb2hue 163C  
                      fputs@fp 000C              ?_color_click_init 0001             _read_prec_or_width 3590  
                   _moveOrange 3E28                     ??_right135 001B                     _moveYellow 3D50  
              ??_fullSpeedBack 0016                     ??_moveBlue 0021             ??_color_click_init 0006  
      convert_rgb2hue@clearmax 007C                     ??_movePink 0021               _colorCalibration 00E5  
            __end_of_vfpfcnvrt 2CB6                        postdec1 0FE5                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00DD                     _returnHome 3420  
              _initDCmotorsPWM 3828                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 39C4                    ___fladd@grs 0011  
     reverseTurn@turnDirection 001F                  ___xxtofl@sign 000A                    returnHome@i 002C  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0012                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88                  logAction@time 0008  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002E               convert_rgb2hue@r 00A0                    ___fldiv@rem 0027  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 000F                    _CCP1CONbits 0FAB  
          _calibration_routine 27A8              ?_color_read_Clear 0006                   _EUSART4RXbuf 0150  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 318C  
               __end_of___fleq 36E8                 _fullSpeedAhead 3A42                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 43E6  
               __end_of_left90 433E                    ?_send2USART 0045           ?_calibration_routine 0045  
          reverseStraight@time 001B            color_read_Clear@tmp 000B            start_initialization 3F48  
         moveGreen@path_length 001F   calibration_routine@cal_state 0060                    __end_of_abs 41B2  
                  __end_of_pad 3828                  _TxBufWriteCnt 0050               ?_convert_rgb2hue 003E  
                  ?_moveOrange 001D                    ?_moveYellow 001D            color_read_Green@tmp 000B  
                     ??_LowISR 0001        __end_of_initDCmotorsPWM 38B8                    vfprintf@fmt 002F  
       __end_of_fullSpeedAhead 3ABC                       ??___flge 000A                       ??___fleq 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00ED  
                  ?_returnHome 0021          ??_calibration_routine 0046                  _moveLightBlue 3E70  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 001F  
                    ___fldiv@b 001B                      ___flmul@a 0006                      ___flmul@b 0002  
                  __pbssCOMRAM 004F                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0019  
            reverseStraight@mR 001A                  ??_reading_hue 0044            decision@path_length 0049  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3045 001B                ?_fullSpeedAhead 0014                       ?___fladd 0002  
                     ?___fldiv 001B                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 0002                       ?___flsub 0012                       ?___fltol 0034  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00C9           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 4398                      _logAction 3BA6              _I2C_2_Master_Init 436E  
            _I2C_2_Master_Read 405C                       ?_right90 0019              _I2C_2_Master_Stop 44A2  
                     ?_moveRed 001D                   _RxBufReadCnt 00CA                       _ADC_init 4464  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
            _sendStringSerial4 42AC            ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _IPR0bits 0E1F                       _PIE0bits 0E29  
           ?_sendStringSerial4 0003                      _moveGreen 3EB8                       _PIE4bits 0E2D  
          __end_of_reading_hue 3276                       i1u224_20 002E                       i1u224_21 002A  
                    _moveWhite 41B2                    turnRight@mL 0014                    turnRight@mR 0015  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0002  
                    left135@mL 0019                      left135@mR 001A              ??_sendCharSerial4 0002  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                ??_reverseTurn 0020                      _vfpfcnvrt 2B2E                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 43C0      __end_of_I2C_2_Master_Init 4398      __end_of_I2C_2_Master_Read 409E  
            ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 44AC                   setMotorPWM@m 000F  
  I2C_2_Master_Write@data_byte 0003                    _ldrReadings 013C                     ?_logAction 0008  
            ??_color_read_Blue 0008                   _TxBufReadCnt 004F                      _turnRight 3946  
    __end_of_sendStringSerial4 42DE                   moveOrange@mL 001D                   moveOrange@mR 001E  
__end_of_I2C_2_Master_RepStart 44C0             color_read_Blue@tmp 000B            __end_of_setMotorPWM 2F82  
              main@path_length 00BA                   ??_initUSART4 0002                     ?_moveGreen 001D  
                   ?_moveWhite 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3B32  
              ??_moveLightBlue 0021                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023          moveOrange@path_length 001F                       _backHalf 433E  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00ED                     sprintf@fmt 0033                       ___xxtofl 297A  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 2586  
          __end_of_reverseTurn 3FD4                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 4446                ___lwdiv@counter 000E  
                   ?_turnRight 0014                       __ptext10 2F82                       __ptext11 3FD4  
                     __ptext20 2586                       __ptext12 163C                       __ptext21 4446  
                     __ptext13 1AFC                       __ptext30 3E70                       __ptext22 3D50  
                     __ptext14 3088                       __ptext31 4248                       __ptext23 3D98  
                     __ptext15 363E                       __ptext40 3ABC                       __ptext32 3EB8  
                     __ptext24 42DE                       __ptext16 1F26                       __ptext41 2E2E  
                     __ptext33 430E                       __ptext25 3DE0                       __ptext17 4428  
                     __ptext50 3590                       __ptext42 3B32                       __ptext34 3F00  
                     __ptext26 41E4                       __ptext18 3828                       __ptext51 43C0  
                     __ptext43 4116                       __ptext35 427A                       __ptext27 3E28  
                     __ptext19 43E6                       __ptext60 42AC                       __ptext52 2CB6  
                     __ptext44 4408                       __ptext36 39C4                       __ptext28 4216  
                     __ptext61 447E                       __ptext53 3792                       __ptext45 436E  
                     __ptext37 3BA6                       __ptext29 3946                       __ptext70 405C  
                     __ptext62 3C10                       __ptext54 409E                       __ptext46 27A8  
                     __ptext38 433E                       __ptext71 4398                       __ptext63 3C60  
                     __ptext55 36E8                       __ptext47 414A                       __ptext39 38B8  
                     __ptext72 4464                       __ptext64 3CB0                       __ptext56 44C0  
                     __ptext48 401A                       __ptext65 3D00                       __ptext57 417E  
                     __ptext49 2B2E                       __ptext66 4496                       __ptext58 34E0  
                     __ptext67 44A2                       __ptext59 335C                       __ptext68 44AC  
                     __ptext69 44B6                    decision@hue 0047                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 318C                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 0021                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 0021             __end_of_send2USART 4464                       _right135 4216  
                     _moveBlue 3F00                       _movePink 3DE0                     turnRight@i 0017  
           moveRed@path_length 001F          __end_of_customDelayMs 4116                       isa$xinst 0000  
                     left90@mL 0019                       left90@mR 001A                     _RC4STAbits 0EE7  
                     int$flags 0052                       _vfprintf 401A                   ??_returnHome 0027  
                     main@time 00B4                       _turnLeft 39C4                      turn180@mL 0019  
                    turn180@mR 001A                    ??_logAction 000C                     _INTCONbits 0FF2  
               customDelayMs@i 0005             __end_of_moveOrange 3E70             __end_of_moveYellow 3D98  
                  _setMotorPWM 2E2E              ??_get16bitTMR0val 0004                       intlevel1 0000  
                    sprintf@ap 0038           returnHome@pathLength 0025              ??_reverseStraight 001D  
             ??_fullSpeedAhead 0016       moveLightBlue@path_length 001F  get16bitTMR0val@combined_value 0008  
           __end_of_returnHome 34E0                    ??_moveGreen 0021               returnHome@action 002B  
                    turnLeft@i 0017                    ??_moveWhite 001F    __end_of_calibration_routine 297A  
  convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045                    ??_vfpfcnvrt 0026  
                  _reverseTurn 3F8E               _color_click_init 4116                       sprintf@f 0039  
                     sprintf@s 0032                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                  ??_turnRight 0016                  ___fladd@signs 000E                     _TX4STAbits 0EE8  
              _sendCharSerial4 447E                 returnHome@path 0023                 returnHome@time 0029  
                 ___fladd@aexp 000F                   ___fladd@bexp 0010                   returnHome@mL 0021  
                 returnHome@mR 0022                logAction@action 000C  
