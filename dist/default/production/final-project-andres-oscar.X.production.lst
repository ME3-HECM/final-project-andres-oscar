

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 12:22:00 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=3
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=3
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=2
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    98   000000                     
    99                           ; Generated 21/07/2023 GMT
   100                           ; 
   101                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution. Publication is not required when
   115                           ;        this file is used in an embedded application.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F67K40 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133   000000                     
   134                           	psect	idataBANK0
   135   0050F6                     __pidataBANK0:
   136                           	callstack 0
   137                           
   138                           ;initializer for _dataFlag
   139   0050F6  01                 	db	1
   140   000000                     _TMR0H	set	4052
   141   000000                     _TX4REG	set	3812
   142   000000                     _RC4STAbits	set	3815
   143   000000                     _SP4BRGH	set	3814
   144   000000                     _LATHbits	set	3968
   145   000000                     _TRISFbits	set	3974
   146   000000                     _TRISAbits	set	3969
   147   000000                     _TRISEbits	set	3973
   148   000000                     _TRISGbits	set	3975
   149   000000                     _TRISDbits	set	3972
   150   000000                     _CCPR2H	set	4006
   151   000000                     _CCPR1H	set	4010
   152   000000                     _SSP2CON2bits	set	3802
   153   000000                     _RX4PPS	set	3605
   154   000000                     _SSP2CLKPPS	set	3612
   155   000000                     _SSP2DATPPS	set	3613
   156   000000                     _ANSELDbits	set	3751
   157   000000                     _SSP2ADD	set	3798
   158   000000                     _SSP2CON1bits	set	3801
   159   000000                     _LATAbits	set	3961
   160   000000                     _LATEbits	set	3965
   161   000000                     _LATGbits	set	3967
   162   000000                     _LATCbits	set	3963
   163   000000                     _RC4REG	set	3811
   164   000000                     _SP4BRGL	set	3813
   165   000000                     _TX4STAbits	set	3816
   166   000000                     _BAUD4CONbits	set	3817
   167   000000                     _SSP2CON2	set	3802
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _PIE0bits	set	3625
   175   000000                     _PIE4bits	set	3629
   176   000000                     _PIR4bits	set	3639
   177   000000                     _RC0PPS	set	3682
   178   000000                     _RC7PPS	set	3689
   179   000000                     _RD5PPS	set	3695
   180   000000                     _RE2PPS	set	3700
   181   000000                     _RD6PPS	set	3696
   182   000000                     _CCP1CONbits	set	4011
   183   000000                     _CCPTMRS0bits	set	4013
   184   000000                     _T2PR	set	4028
   185   000000                     _T2CONbits	set	4029
   186   000000                     _T0CON0bits	set	4053
   187   000000                     _CCP2CONbits	set	4007
   188   000000                     _CCP3CONbits	set	3878
   189   000000                     _ADREFbits	set	3928
   190   000000                     _CCP4CONbits	set	3874
   191   000000                     _PORTFbits	set	3982
   192   000000                     _TRISHbits	set	3976
   193   000000                     _TRISCbits	set	3971
   194   000000                     _INTCONbits	set	4082
   195   000000                     _T0CON1bits	set	4054
   196   000000                     _ADPCH	set	3935
   197   000000                     _ADRESH	set	3940
   198   000000                     _ADCON0bits	set	3936
   199   000000                     _RE4PPS	set	3702
   200   000000                     _RG6PPS	set	3720
   201   000000                     _TMR0L	set	4051
   202   000000                     _T2CLKCONbits	set	4031
   203   000000                     _T2HLTbits	set	4030
   204   000000                     _PIR0bits	set	3635
   205                           
   206                           	psect	smallconst
   207   000E00                     __psmallconst:
   208                           	callstack 0
   209   000E00  00                 	db	0
   210   000E01                     STR_5:
   211                           
   212                           ; BSR set to: 14
   213   000E01  43                 	db	67	;'C'
   214   000E02  61                 	db	97	;'a'
   215   000E03  6C                 	db	108	;'l'
   216   000E04  69                 	db	105	;'i'
   217   000E05  62                 	db	98	;'b'
   218   000E06  72                 	db	114	;'r'
   219   000E07  61                 	db	97	;'a'
   220   000E08  74                 	db	116	;'t'
   221   000E09  69                 	db	105	;'i'
   222   000E0A  6F                 	db	111	;'o'
   223   000E0B  6E                 	db	110	;'n'
   224   000E0C  20                 	db	32
   225   000E0D  73                 	db	115	;'s'
   226   000E0E  74                 	db	116	;'t'
   227   000E0F  61                 	db	97	;'a'
   228   000E10  74                 	db	116	;'t'
   229   000E11  65                 	db	101	;'e'
   230   000E12  20                 	db	32
   231   000E13  3D                 	db	61	;'='
   232   000E14  20                 	db	32
   233   000E15  67                 	db	103	;'g'
   234   000E16  72                 	db	114	;'r'
   235   000E17  65                 	db	101	;'e'
   236   000E18  65                 	db	101	;'e'
   237   000E19  6E                 	db	110	;'n'
   238   000E1A  20                 	db	32
   239   000E1B  0A                 	db	10
   240   000E1C  0D                 	db	13
   241   000E1D  00                 	db	0
   242   000E1E                     STR_11:
   243                           
   244                           ; BSR set to: 14
   245   000E1E  43                 	db	67	;'C'
   246   000E1F  61                 	db	97	;'a'
   247   000E20  6C                 	db	108	;'l'
   248   000E21  69                 	db	105	;'i'
   249   000E22  62                 	db	98	;'b'
   250   000E23  72                 	db	114	;'r'
   251   000E24  61                 	db	97	;'a'
   252   000E25  74                 	db	116	;'t'
   253   000E26  69                 	db	105	;'i'
   254   000E27  6F                 	db	111	;'o'
   255   000E28  6E                 	db	110	;'n'
   256   000E29  20                 	db	32
   257   000E2A  73                 	db	115	;'s'
   258   000E2B  74                 	db	116	;'t'
   259   000E2C  61                 	db	97	;'a'
   260   000E2D  74                 	db	116	;'t'
   261   000E2E  65                 	db	101	;'e'
   262   000E2F  20                 	db	32
   263   000E30  3D                 	db	61	;'='
   264   000E31  20                 	db	32
   265   000E32  20                 	db	32
   266   000E33  61                 	db	97	;'a'
   267   000E34  6D                 	db	109	;'m'
   268   000E35  62                 	db	98	;'b'
   269   000E36  69                 	db	105	;'i'
   270   000E37  65                 	db	101	;'e'
   271   000E38  6E                 	db	110	;'n'
   272   000E39  74                 	db	116	;'t'
   273   000E3A  00                 	db	0
   274   000E3B                     STR_7:
   275                           
   276                           ; BSR set to: 14
   277   000E3B  43                 	db	67	;'C'
   278   000E3C  61                 	db	97	;'a'
   279   000E3D  6C                 	db	108	;'l'
   280   000E3E  69                 	db	105	;'i'
   281   000E3F  62                 	db	98	;'b'
   282   000E40  72                 	db	114	;'r'
   283   000E41  61                 	db	97	;'a'
   284   000E42  74                 	db	116	;'t'
   285   000E43  69                 	db	105	;'i'
   286   000E44  6F                 	db	111	;'o'
   287   000E45  6E                 	db	110	;'n'
   288   000E46  20                 	db	32
   289   000E47  73                 	db	115	;'s'
   290   000E48  74                 	db	116	;'t'
   291   000E49  61                 	db	97	;'a'
   292   000E4A  74                 	db	116	;'t'
   293   000E4B  65                 	db	101	;'e'
   294   000E4C  3D                 	db	61	;'='
   295   000E4D  20                 	db	32
   296   000E4E  62                 	db	98	;'b'
   297   000E4F  6C                 	db	108	;'l'
   298   000E50  75                 	db	117	;'u'
   299   000E51  65                 	db	101	;'e'
   300   000E52  20                 	db	32
   301   000E53  0A                 	db	10
   302   000E54  0D                 	db	13
   303   000E55  00                 	db	0
   304   000E56                     STR_9:
   305                           
   306                           ; BSR set to: 14
   307   000E56  43                 	db	67	;'C'
   308   000E57  61                 	db	97	;'a'
   309   000E58  6C                 	db	108	;'l'
   310   000E59  69                 	db	105	;'i'
   311   000E5A  62                 	db	98	;'b'
   312   000E5B  72                 	db	114	;'r'
   313   000E5C  61                 	db	97	;'a'
   314   000E5D  74                 	db	116	;'t'
   315   000E5E  69                 	db	105	;'i'
   316   000E5F  6F                 	db	111	;'o'
   317   000E60  6E                 	db	110	;'n'
   318   000E61  20                 	db	32
   319   000E62  73                 	db	115	;'s'
   320   000E63  74                 	db	116	;'t'
   321   000E64  61                 	db	97	;'a'
   322   000E65  74                 	db	116	;'t'
   323   000E66  65                 	db	101	;'e'
   324   000E67  20                 	db	32
   325   000E68  3D                 	db	61	;'='
   326   000E69  20                 	db	32
   327   000E6A  20                 	db	32
   328   000E6B  77                 	db	119	;'w'
   329   000E6C  68                 	db	104	;'h'
   330   000E6D  69                 	db	105	;'i'
   331   000E6E  74                 	db	116	;'t'
   332   000E6F  65                 	db	101	;'e'
   333   000E70  00                 	db	0
   334   000E71                     STR_13:
   335                           
   336                           ; BSR set to: 14
   337   000E71  43                 	db	67	;'C'
   338   000E72  41                 	db	65	;'A'
   339   000E73  4C                 	db	76	;'L'
   340   000E74  49                 	db	73	;'I'
   341   000E75  42                 	db	66	;'B'
   342   000E76  52                 	db	82	;'R'
   343   000E77  41                 	db	65	;'A'
   344   000E78  54                 	db	84	;'T'
   345   000E79  49                 	db	73	;'I'
   346   000E7A  4F                 	db	79	;'O'
   347   000E7B  4E                 	db	78	;'N'
   348   000E7C  20                 	db	32
   349   000E7D  43                 	db	67	;'C'
   350   000E7E  4F                 	db	79	;'O'
   351   000E7F  4D                 	db	77	;'M'
   352   000E80  50                 	db	80	;'P'
   353   000E81  4C                 	db	76	;'L'
   354   000E82  45                 	db	69	;'E'
   355   000E83  54                 	db	84	;'T'
   356   000E84  45                 	db	69	;'E'
   357   000E85  44                 	db	68	;'D'
   358   000E86  20                 	db	32
   359   000E87  0A                 	db	10
   360   000E88  0D                 	db	13
   361   000E89  00                 	db	0
   362   000E8A                     STR_3:
   363                           
   364                           ; BSR set to: 14
   365   000E8A  43                 	db	67	;'C'
   366   000E8B  61                 	db	97	;'a'
   367   000E8C  6C                 	db	108	;'l'
   368   000E8D  69                 	db	105	;'i'
   369   000E8E  62                 	db	98	;'b'
   370   000E8F  72                 	db	114	;'r'
   371   000E90  61                 	db	97	;'a'
   372   000E91  74                 	db	116	;'t'
   373   000E92  69                 	db	105	;'i'
   374   000E93  6F                 	db	111	;'o'
   375   000E94  6E                 	db	110	;'n'
   376   000E95  20                 	db	32
   377   000E96  73                 	db	115	;'s'
   378   000E97  74                 	db	116	;'t'
   379   000E98  61                 	db	97	;'a'
   380   000E99  74                 	db	116	;'t'
   381   000E9A  65                 	db	101	;'e'
   382   000E9B  20                 	db	32
   383   000E9C  3D                 	db	61	;'='
   384   000E9D  20                 	db	32
   385   000E9E  72                 	db	114	;'r'
   386   000E9F  65                 	db	101	;'e'
   387   000EA0  64                 	db	100	;'d'
   388   000EA1  00                 	db	0
   389   000EA2                     
   390                           ; BSR set to: 14
   391   000EA2  56                 	db	86	;'V'
   392   000EA3  6F                 	db	111	;'o'
   393   000EA4  6C                 	db	108	;'l'
   394   000EA5  74                 	db	116	;'t'
   395   000EA6  61                 	db	97	;'a'
   396   000EA7  67                 	db	103	;'g'
   397   000EA8  65                 	db	101	;'e'
   398   000EA9  20                 	db	32
   399   000EAA  3D                 	db	61	;'='
   400   000EAB  20                 	db	32
   401   000EAC  25                 	db	37
   402   000EAD  64                 	db	100	;'d'
   403   000EAE  2E                 	db	46
   404   000EAF  25                 	db	37
   405   000EB0  30                 	db	48	;'0'
   406   000EB1  32                 	db	50	;'2'
   407   000EB2  64                 	db	100	;'d'
   408   000EB3  2C                 	db	44
   409   000EB4  20                 	db	32
   410   000EB5  20                 	db	32
   411   000EB6  00                 	db	0
   412   000EB7                     STR_2:
   413                           
   414                           ; BSR set to: 14
   415   000EB7  68                 	db	104	;'h'
   416   000EB8  75                 	db	117	;'u'
   417   000EB9  65                 	db	101	;'e'
   418   000EBA  3D                 	db	61	;'='
   419   000EBB  25                 	db	37
   420   000EBC  30                 	db	48	;'0'
   421   000EBD  33                 	db	51	;'3'
   422   000EBE  64                 	db	100	;'d'
   423   000EBF  2C                 	db	44
   424   000EC0  20                 	db	32
   425   000EC1  20                 	db	32
   426   000EC2  00                 	db	0
   427   000EC3                     STR_4:
   428                           
   429                           ; BSR set to: 14
   430   000EC3  2E                 	db	46
   431   000EC4  00                 	db	0
   432   000EC5  00                 	db	0	; dummy byte at the end
   433   000000                     
   434                           ; #config settings
   435                           
   436                           	psect	cinit
   437   004A70                     __pcinit:
   438                           	callstack 0
   439   004A70                     start_initialization:
   440                           	callstack 0
   441   004A70                     __initialization:
   442                           	callstack 0
   443                           
   444                           ; Initialize objects allocated to BANK0 (1 bytes)
   445                           ; load TBLPTR registers with __pidataBANK0
   446   004A70  0EF6               	movlw	low __pidataBANK0
   447   004A72  6EF6               	movwf	tblptrl,c
   448   004A74  0E50               	movlw	high __pidataBANK0
   449   004A76  6EF7               	movwf	tblptrh,c
   450   004A78  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   451   004A7A  6EF8               	movwf	tblptru,c
   452   004A7C  0009               	tblrd		*+	;fetch initializer
   453   004A7E  CFF5 F0F2          	movff	tablat,__pdataBANK0
   454                           
   455                           ; Clear objects allocated to BANK2 (200 bytes)
   456   004A82  EE02  F000         	lfsr	0,__pbssBANK2
   457   004A86  0EC8               	movlw	200
   458   004A88                     clear_0:
   459   004A88  6AEE               	clrf	postinc0,c
   460   004A8A  06E8               	decf	wreg,f,c
   461   004A8C  E1FD               	bnz	clear_0
   462                           
   463                           ; Clear objects allocated to BANK1 (182 bytes)
   464   004A8E  EE01  F000         	lfsr	0,__pbssBANK1
   465   004A92  0EB6               	movlw	182
   466   004A94                     clear_1:
   467   004A94  6AEE               	clrf	postinc0,c
   468   004A96  06E8               	decf	wreg,f,c
   469   004A98  E1FD               	bnz	clear_1
   470                           
   471                           ; Clear objects allocated to BANK0 (46 bytes)
   472   004A9A  EE00  F0C4         	lfsr	0,__pbssBANK0
   473   004A9E  0E2E               	movlw	46
   474   004AA0                     clear_2:
   475   004AA0  6AEE               	clrf	postinc0,c
   476   004AA2  06E8               	decf	wreg,f,c
   477   004AA4  E1FD               	bnz	clear_2
   478                           
   479                           ; Clear objects allocated to COMRAM (2 bytes)
   480   004AA6  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   481   004AA8  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   482   004AAA                     end_of_initialization:
   483                           	callstack 0
   484   004AAA                     __end_of__initialization:
   485                           	callstack 0
   486   004AAA  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   487   004AAC  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   488   004AAE  0100               	movlb	0
   489   004AB0  EF2C  F00B         	goto	_main	;jump to C main() function
   490                           
   491                           	psect	bssCOMRAM
   492   00005B                     __pbssCOMRAM:
   493                           	callstack 0
   494   00005B                     _TxBufReadCnt:
   495                           	callstack 0
   496   00005B                     	ds	1
   497   00005C                     _TxBufWriteCnt:
   498                           	callstack 0
   499   00005C                     	ds	1
   500                           
   501                           	psect	bssBANK0
   502   0000C4                     __pbssBANK0:
   503                           	callstack 0
   504   0000C4                     _width:
   505                           	callstack 0
   506   0000C4                     	ds	2
   507   0000C6                     _prec:
   508                           	callstack 0
   509   0000C6                     	ds	2
   510   0000C8                     _flags:
   511                           	callstack 0
   512   0000C8                     	ds	1
   513   0000C9                     _readingIndex:
   514                           	callstack 0
   515   0000C9                     	ds	1
   516   0000CA                     _RxBufReadCnt:
   517                           	callstack 0
   518   0000CA                     	ds	1
   519   0000CB                     _RxBufWriteCnt:
   520                           	callstack 0
   521   0000CB                     	ds	1
   522   0000CC                     _colorCurrent:
   523                           	callstack 0
   524   0000CC                     	ds	10
   525   0000D6                     _colorCalibration:
   526                           	callstack 0
   527   0000D6                     	ds	10
   528   0000E0                     _motorR:
   529                           	callstack 0
   530   0000E0                     	ds	9
   531   0000E9                     _motorL:
   532                           	callstack 0
   533   0000E9                     	ds	9
   534                           
   535                           	psect	dataBANK0
   536   0000F2                     __pdataBANK0:
   537                           	callstack 0
   538   0000F2                     _dataFlag:
   539                           	callstack 0
   540   0000F2                     	ds	1
   541                           
   542                           	psect	bssBANK1
   543   000100                     __pbssBANK1:
   544                           	callstack 0
   545   000100                     _EUSART4TXbuf:
   546                           	callstack 0
   547   000100                     	ds	60
   548   00013C                     _action:
   549                           	callstack 0
   550   00013C                     	ds	50
   551   00016E                     _ldrReadings:
   552                           	callstack 0
   553   00016E                     	ds	20
   554   000182                     _EUSART4RXbuf:
   555                           	callstack 0
   556   000182                     	ds	20
   557   000196                     _dbuf:
   558                           	callstack 0
   559   000196                     	ds	32
   560                           
   561                           	psect	bssBANK2
   562   000200                     __pbssBANK2:
   563                           	callstack 0
   564   000200                     _time:
   565                           	callstack 0
   566   000200                     	ds	200
   567                           
   568                           	psect	cstackBANK0
   569   000060                     __pcstackBANK0:
   570                           	callstack 0
   571   000060                     returnHome@mL:
   572                           	callstack 0
   573   000060                     convert_rgb2hue@redcurrent:
   574                           	callstack 0
   575   000060                     calibration_turningR@inactivityLimit:
   576                           	callstack 0
   577   000060                     calibration_turningL@inactivityLimit:
   578                           	callstack 0
   579   000060                     send2USART@hue_char:
   580                           	callstack 0
   581                           
   582                           ; 50 bytes @ 0x0
   583   000060                     	ds	1
   584   000061                     returnHome@mR:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0x1
   588   000061                     	ds	1
   589   000062                     returnHome@path_step:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x2
   593   000062                     	ds	2
   594   000064                     returnHome@factorR:
   595                           	callstack 0
   596   000064                     convert_rgb2hue@redmax:
   597                           	callstack 0
   598   000064                     calibration_turningR@inactivityCounter:
   599                           	callstack 0
   600   000064                     calibration_turningL@inactivityCounter:
   601                           	callstack 0
   602                           
   603                           ; 4 bytes @ 0x4
   604   000064                     	ds	2
   605   000066                     returnHome@factorL:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x6
   609   000066                     	ds	2
   610   000068                     ??_returnHome:
   611   000068                     convert_rgb2hue@greencurrent:
   612                           	callstack 0
   613   000068                     calibration_turningR@adjustment:
   614                           	callstack 0
   615   000068                     calibration_turningL@adjustment:
   616                           	callstack 0
   617                           
   618                           ; 4 bytes @ 0x8
   619   000068                     	ds	2
   620   00006A                     returnHome@time_ms:
   621                           	callstack 0
   622                           
   623                           ; 4 bytes @ 0xA
   624   00006A                     	ds	2
   625   00006C                     calibration_turningR@i:
   626                           	callstack 0
   627   00006C                     calibration_turningL@i:
   628                           	callstack 0
   629   00006C                     convert_rgb2hue@greenmax:
   630                           	callstack 0
   631                           
   632                           ; 4 bytes @ 0xC
   633   00006C                     	ds	2
   634   00006E                     returnHome@action_turn:
   635                           	callstack 0
   636   00006E                     calibration_turningR@factorR:
   637                           	callstack 0
   638   00006E                     calibration_turningL@factorL:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0xE
   642   00006E                     	ds	1
   643   00006F                     returnHome@i:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0xF
   647   00006F                     	ds	1
   648   000070                     convert_rgb2hue@bluecurrent:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x10
   652   000070                     	ds	4
   653   000074                     convert_rgb2hue@bluemax:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x14
   657   000074                     	ds	4
   658   000078                     convert_rgb2hue@clearcurrent:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x18
   662   000078                     	ds	4
   663   00007C                     convert_rgb2hue@clearmax:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x1C
   667   00007C                     	ds	4
   668   000080                     _convert_rgb2hue$364:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x20
   672   000080                     	ds	4
   673   000084                     _convert_rgb2hue$365:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x24
   677   000084                     	ds	4
   678   000088                     _convert_rgb2hue$366:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x28
   682   000088                     	ds	4
   683   00008C                     _convert_rgb2hue$367:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x2C
   687   00008C                     	ds	4
   688   000090                     convert_rgb2hue@min:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x30
   692   000090                     	ds	2
   693   000092                     calibration_colors@cal_state:
   694                           	callstack 0
   695                           
   696                           ; 20 bytes @ 0x32
   697   000092                     	ds	2
   698   000094                     convert_rgb2hue@diff:
   699                           	callstack 0
   700                           
   701                           ; 4 bytes @ 0x34
   702   000094                     	ds	4
   703   000098                     convert_rgb2hue@max:
   704                           	callstack 0
   705                           
   706                           ; 4 bytes @ 0x38
   707   000098                     	ds	4
   708   00009C                     convert_rgb2hue@hue:
   709                           	callstack 0
   710                           
   711                           ; 4 bytes @ 0x3C
   712   00009C                     	ds	4
   713   0000A0                     convert_rgb2hue@r:
   714                           	callstack 0
   715                           
   716                           ; 4 bytes @ 0x40
   717   0000A0                     	ds	4
   718   0000A4                     convert_rgb2hue@g:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0x44
   722   0000A4                     	ds	4
   723   0000A8                     convert_rgb2hue@b:
   724                           	callstack 0
   725                           
   726                           ; 4 bytes @ 0x48
   727   0000A8                     	ds	4
   728   0000AC                     ??_main:
   729                           
   730                           ; 1 bytes @ 0x4C
   731   0000AC                     	ds	2
   732   0000AE                     main@ambient:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x4E
   736   0000AE                     	ds	2
   737   0000B0                     main@white:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x50
   741   0000B0                     	ds	2
   742   0000B2                     main@factorR:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x52
   746   0000B2                     	ds	2
   747   0000B4                     main@factorL:
   748                           	callstack 0
   749                           
   750                           ; 2 bytes @ 0x54
   751   0000B4                     	ds	2
   752   0000B6                     main@clear_max:
   753                           	callstack 0
   754                           
   755                           ; 4 bytes @ 0x56
   756   0000B6                     	ds	4
   757   0000BA                     main@clear_current:
   758                           	callstack 0
   759                           
   760                           ; 4 bytes @ 0x5A
   761   0000BA                     	ds	4
   762   0000BE                     main@clear_norm:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x5E
   766   0000BE                     	ds	2
   767   0000C0                     main@path_step:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x60
   771   0000C0                     	ds	2
   772   0000C2                     main@hue:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x62
   776   0000C2                     	ds	2
   777                           
   778                           	psect	cstackCOMRAM
   779   000001                     __pcstackCOMRAM:
   780                           	callstack 0
   781   000001                     ??_LowISR:
   782   000001                     
   783                           ; 1 bytes @ 0x0
   784   000001                     	ds	1
   785   000002                     ??_I2C_2_Master_Idle:
   786   000002                     ?___wmul:
   787                           	callstack 0
   788   000002                     ?___awdiv:
   789                           	callstack 0
   790   000002                     ?___awmod:
   791                           	callstack 0
   792   000002                     ?___lmul:
   793                           	callstack 0
   794   000002                     ?___xxtofl:
   795                           	callstack 0
   796   000002                     sendCharSerial4@charToSend:
   797                           	callstack 0
   798   000002                     initDCmotorsPWM@PWMperiod:
   799                           	callstack 0
   800   000002                     customDelayMs@milliseconds:
   801                           	callstack 0
   802   000002                     ___wmul@multiplier:
   803                           	callstack 0
   804   000002                     ___awdiv@dividend:
   805                           	callstack 0
   806   000002                     ___awmod@dividend:
   807                           	callstack 0
   808   000002                     fputc@c:
   809                           	callstack 0
   810   000002                     logAction@newTime:
   811                           	callstack 0
   812   000002                     ___lmul@multiplier:
   813                           	callstack 0
   814   000002                     ___fleq@ff1:
   815                           	callstack 0
   816   000002                     ___flge@ff1:
   817                           	callstack 0
   818   000002                     ___xxtofl@val:
   819                           	callstack 0
   820                           
   821                           ; 4 bytes @ 0x1
   822   000002                     	ds	1
   823   000003                     ??_I2C_2_Master_Read:
   824   000003                     I2C_2_Master_Write@data_byte:
   825                           	callstack 0
   826   000003                     sendStringSerial4@string:
   827                           	callstack 0
   828                           
   829                           ; 1 bytes @ 0x2
   830   000003                     	ds	1
   831   000004                     ??_customDelayMs:
   832   000004                     color_writetoaddr@value:
   833                           	callstack 0
   834   000004                     I2C_2_Master_Read@ack:
   835                           	callstack 0
   836   000004                     fputc@fp:
   837                           	callstack 0
   838   000004                     ___wmul@multiplicand:
   839                           	callstack 0
   840   000004                     ___awdiv@divisor:
   841                           	callstack 0
   842   000004                     ___awmod@divisor:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x3
   846   000004                     	ds	1
   847   000005                     ??_fputc:
   848   000005                     color_writetoaddr@address:
   849                           	callstack 0
   850   000005                     I2C_2_Master_Read@tmp:
   851                           	callstack 0
   852   000005                     customDelayMs@i:
   853                           	callstack 0
   854                           
   855                           ; 2 bytes @ 0x4
   856   000005                     	ds	1
   857   000006                     ??_color_click_init:
   858   000006                     ??___xxtofl:
   859   000006                     ?_color_read_Red:
   860                           	callstack 0
   861   000006                     ?_color_read_Green:
   862                           	callstack 0
   863   000006                     ?_color_read_Blue:
   864                           	callstack 0
   865   000006                     ?_color_read_Clear:
   866                           	callstack 0
   867   000006                     ___awdiv@counter:
   868                           	callstack 0
   869   000006                     ___awmod@counter:
   870                           	callstack 0
   871   000006                     logAction@path_step:
   872                           	callstack 0
   873   000006                     ___wmul@product:
   874                           	callstack 0
   875   000006                     ___lmul@multiplicand:
   876                           	callstack 0
   877   000006                     ___fleq@ff2:
   878                           	callstack 0
   879   000006                     ___flge@ff2:
   880                           	callstack 0
   881                           
   882                           ; 4 bytes @ 0x5
   883   000006                     	ds	1
   884   000007                     ___awdiv@sign:
   885                           	callstack 0
   886   000007                     ___awmod@sign:
   887                           	callstack 0
   888                           
   889                           ; 1 bytes @ 0x6
   890   000007                     	ds	1
   891   000008                     ??_logAction:
   892   000008                     ??_color_read_Red:
   893   000008                     ??_color_read_Green:
   894   000008                     ??_color_read_Blue:
   895   000008                     ??_color_read_Clear:
   896   000008                     ?_abs:
   897                           	callstack 0
   898   000008                     ?___lwdiv:
   899                           	callstack 0
   900   000008                     ?_read_prec_or_width:
   901                           	callstack 0
   902   000008                     read_prec_or_width@fmt:
   903                           	callstack 0
   904   000008                     ___awdiv@quotient:
   905                           	callstack 0
   906   000008                     ___lwdiv@dividend:
   907                           	callstack 0
   908   000008                     abs@a:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x7
   912   000008                     	ds	1
   913   000009                     read_prec_or_width@ap:
   914                           	callstack 0
   915                           
   916                           ; 1 bytes @ 0x8
   917   000009                     	ds	1
   918   00000A                     ??_abs:
   919   00000A                     ??___fleq:
   920   00000A                     ??___flge:
   921   00000A                     logAction@newAction:
   922                           	callstack 0
   923   00000A                     ___xxtofl@sign:
   924                           	callstack 0
   925   00000A                     read_prec_or_width@c:
   926                           	callstack 0
   927   00000A                     ___lwdiv@divisor:
   928                           	callstack 0
   929   00000A                     fputs@s:
   930                           	callstack 0
   931   00000A                     ___lmul@product:
   932                           	callstack 0
   933                           
   934                           ; 4 bytes @ 0x9
   935   00000A                     	ds	1
   936   00000B                     ___xxtofl@exp:
   937                           	callstack 0
   938   00000B                     color_read_Red@tmp:
   939                           	callstack 0
   940   00000B                     color_read_Green@tmp:
   941                           	callstack 0
   942   00000B                     color_read_Blue@tmp:
   943                           	callstack 0
   944   00000B                     color_read_Clear@tmp:
   945                           	callstack 0
   946   00000B                     read_prec_or_width@n:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0xA
   950   00000B                     	ds	1
   951   00000C                     fputs@fp:
   952                           	callstack 0
   953   00000C                     ___lwdiv@quotient:
   954                           	callstack 0
   955   00000C                     ___xxtofl@arg:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0xB
   959   00000C                     	ds	1
   960   00000D                     fputs@c:
   961                           	callstack 0
   962                           
   963                           ; 1 bytes @ 0xC
   964   00000D                     	ds	1
   965   00000E                     ?___aldiv:
   966                           	callstack 0
   967   00000E                     ___lwdiv@counter:
   968                           	callstack 0
   969   00000E                     fputs@i:
   970                           	callstack 0
   971   00000E                     ___aldiv@dividend:
   972                           	callstack 0
   973                           
   974                           ; 4 bytes @ 0xD
   975   00000E                     	ds	1
   976   00000F                     setMotorPWM@m:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0xE
   980   00000F                     	ds	1
   981   000010                     ??_setMotorPWM:
   982   000010                     ?___fladd:
   983                           	callstack 0
   984   000010                     ?___flmul:
   985                           	callstack 0
   986   000010                     pad@fp:
   987                           	callstack 0
   988   000010                     ___fladd@b:
   989                           	callstack 0
   990   000010                     ___flmul@b:
   991                           	callstack 0
   992                           
   993                           ; 4 bytes @ 0xF
   994   000010                     	ds	1
   995   000011                     pad@buf:
   996                           	callstack 0
   997                           
   998                           ; 2 bytes @ 0x10
   999   000011                     	ds	1
  1000   000012                     setMotorPWM@posDuty:
  1001                           	callstack 0
  1002   000012                     ___aldiv@divisor:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x11
  1006   000012                     	ds	1
  1007   000013                     setMotorPWM@negDuty:
  1008                           	callstack 0
  1009   000013                     pad@p:
  1010                           	callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x12
  1013   000013                     	ds	1
  1014   000014                     stop@mL:
  1015                           	callstack 0
  1016   000014                     turnLeft@mL:
  1017                           	callstack 0
  1018   000014                     turnRight@mL:
  1019                           	callstack 0
  1020   000014                     fullSpeedBack@mL:
  1021                           	callstack 0
  1022   000014                     ___fladd@a:
  1023                           	callstack 0
  1024   000014                     ___flmul@a:
  1025                           	callstack 0
  1026                           
  1027                           ; 4 bytes @ 0x13
  1028   000014                     	ds	1
  1029   000015                     ??_pad:
  1030   000015                     stop@mR:
  1031                           	callstack 0
  1032   000015                     turnLeft@mR:
  1033                           	callstack 0
  1034   000015                     turnRight@mR:
  1035                           	callstack 0
  1036   000015                     fullSpeedBack@mR:
  1037                           	callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x14
  1040   000015                     	ds	1
  1041   000016                     ??_stop:
  1042   000016                     ??_turnLeft:
  1043   000016                     ??_turnRight:
  1044   000016                     ??_fullSpeedBack:
  1045   000016                     ___aldiv@counter:
  1046                           	callstack 0
  1047   000016                     pad@i:
  1048                           	callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x15
  1051   000016                     	ds	1
  1052   000017                     ___aldiv@sign:
  1053                           	callstack 0
  1054   000017                     turnLeft@i:
  1055                           	callstack 0
  1056   000017                     turnRight@i:
  1057                           	callstack 0
  1058   000017                     fullSpeedBack@power:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x16
  1062   000017                     	ds	1
  1063   000018                     ??___fladd:
  1064   000018                     ??___flmul:
  1065   000018                     dtoa@fp:
  1066                           	callstack 0
  1067   000018                     ___aldiv@quotient:
  1068                           	callstack 0
  1069                           
  1070                           ; 4 bytes @ 0x17
  1071   000018                     	ds	1
  1072   000019                     right90@mL:
  1073                           	callstack 0
  1074   000019                     left90@mL:
  1075                           	callstack 0
  1076   000019                     turn180@mL:
  1077                           	callstack 0
  1078   000019                     right135@mL:
  1079                           	callstack 0
  1080   000019                     left135@mL:
  1081                           	callstack 0
  1082   000019                     backHalf@mL:
  1083                           	callstack 0
  1084   000019                     backOneAndHalf@mL:
  1085                           	callstack 0
  1086   000019                     dtoa@d:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x18
  1090   000019                     	ds	1
  1091   00001A                     right90@mR:
  1092                           	callstack 0
  1093   00001A                     left90@mR:
  1094                           	callstack 0
  1095   00001A                     turn180@mR:
  1096                           	callstack 0
  1097   00001A                     right135@mR:
  1098                           	callstack 0
  1099   00001A                     left135@mR:
  1100                           	callstack 0
  1101   00001A                     backHalf@mR:
  1102                           	callstack 0
  1103   00001A                     backOneAndHalf@mR:
  1104                           	callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x19
  1107   00001A                     	ds	1
  1108   00001B                     ??_turn180:
  1109   00001B                     ??_right135:
  1110   00001B                     ??_left135:
  1111   00001B                     ??_backHalf:
  1112   00001B                     ??_backOneAndHalf:
  1113   00001B                     right90@factorR:
  1114                           	callstack 0
  1115   00001B                     left90@factorL:
  1116                           	callstack 0
  1117   00001B                     _dtoa$3092:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x1A
  1121   00001B                     	ds	1
  1122   00001C                     ?_get16bitTMR0val:
  1123                           	callstack 0
  1124   00001C                     ___fladd@signs:
  1125                           	callstack 0
  1126   00001C                     ___flmul@sign:
  1127                           	callstack 0
  1128   00001C                     get16bitTMR0val@path_step:
  1129                           	callstack 0
  1130                           
  1131                           ; 2 bytes @ 0x1B
  1132   00001C                     	ds	1
  1133   00001D                     moveBlue@mL:
  1134                           	callstack 0
  1135   00001D                     moveOrange@mL:
  1136                           	callstack 0
  1137   00001D                     moveLightBlue@mL:
  1138                           	callstack 0
  1139   00001D                     moveWhite@mL:
  1140                           	callstack 0
  1141   00001D                     ___fladd@aexp:
  1142                           	callstack 0
  1143   00001D                     dtoa@p:
  1144                           	callstack 0
  1145   00001D                     right90@delay_after_calibration:
  1146                           	callstack 0
  1147   00001D                     left90@delay_after_calibration:
  1148                           	callstack 0
  1149   00001D                     ___flmul@grs:
  1150                           	callstack 0
  1151                           
  1152                           ; 4 bytes @ 0x1C
  1153   00001D                     	ds	1
  1154   00001E                     ??_get16bitTMR0val:
  1155   00001E                     moveBlue@mR:
  1156                           	callstack 0
  1157   00001E                     moveOrange@mR:
  1158                           	callstack 0
  1159   00001E                     moveLightBlue@mR:
  1160                           	callstack 0
  1161   00001E                     moveWhite@mR:
  1162                           	callstack 0
  1163   00001E                     ___fladd@bexp:
  1164                           	callstack 0
  1165   00001E                     dtoa@w:
  1166                           	callstack 0
  1167                           
  1168                           ; 2 bytes @ 0x1D
  1169   00001E                     	ds	1
  1170   00001F                     ??_moveBlue:
  1171   00001F                     ??_moveLightBlue:
  1172   00001F                     ??_moveOrange:
  1173   00001F                     ??_moveWhite:
  1174   00001F                     moveRed@mL:
  1175                           	callstack 0
  1176   00001F                     moveGreen@mL:
  1177                           	callstack 0
  1178   00001F                     moveYellow@mL:
  1179                           	callstack 0
  1180   00001F                     movePink@mL:
  1181                           	callstack 0
  1182   00001F                     reverseTurn@mL:
  1183                           	callstack 0
  1184   00001F                     ___fladd@grs:
  1185                           	callstack 0
  1186                           
  1187                           ; 1 bytes @ 0x1E
  1188   00001F                     	ds	1
  1189   000020                     ?___flsub:
  1190                           	callstack 0
  1191   000020                     moveRed@mR:
  1192                           	callstack 0
  1193   000020                     moveGreen@mR:
  1194                           	callstack 0
  1195   000020                     moveYellow@mR:
  1196                           	callstack 0
  1197   000020                     movePink@mR:
  1198                           	callstack 0
  1199   000020                     reverseTurn@mR:
  1200                           	callstack 0
  1201   000020                     dtoa@s:
  1202                           	callstack 0
  1203   000020                     ___flsub@b:
  1204                           	callstack 0
  1205                           
  1206                           ; 4 bytes @ 0x1F
  1207   000020                     	ds	1
  1208   000021                     reverseTurn@actionStep:
  1209                           	callstack 0
  1210   000021                     ___flmul@aexp:
  1211                           	callstack 0
  1212   000021                     moveRed@factorR:
  1213                           	callstack 0
  1214   000021                     moveGreen@factorL:
  1215                           	callstack 0
  1216   000021                     moveYellow@factorR:
  1217                           	callstack 0
  1218   000021                     movePink@factorL:
  1219                           	callstack 0
  1220   000021                     dtoa@i:
  1221                           	callstack 0
  1222                           
  1223                           ; 2 bytes @ 0x20
  1224   000021                     	ds	1
  1225   000022                     ___flmul@bexp:
  1226                           	callstack 0
  1227   000022                     get16bitTMR0val@time_ms:
  1228                           	callstack 0
  1229   000022                     reverseTurn@time_ms:
  1230                           	callstack 0
  1231                           
  1232                           ; 4 bytes @ 0x21
  1233   000022                     	ds	1
  1234   000023                     ??_moveRed:
  1235   000023                     ??_moveGreen:
  1236   000023                     ??_moveYellow:
  1237   000023                     ??_movePink:
  1238   000023                     vfpfcnvrt@fp:
  1239                           	callstack 0
  1240   000023                     ___flmul@prod:
  1241                           	callstack 0
  1242                           
  1243                           ; 4 bytes @ 0x22
  1244   000023                     	ds	1
  1245   000024                     vfpfcnvrt@fmt:
  1246                           	callstack 0
  1247   000024                     ___flsub@a:
  1248                           	callstack 0
  1249                           
  1250                           ; 4 bytes @ 0x23
  1251   000024                     	ds	1
  1252   000025                     ?_decision:
  1253                           	callstack 0
  1254   000025                     vfpfcnvrt@ap:
  1255                           	callstack 0
  1256   000025                     decision@hue:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x24
  1260   000025                     	ds	1
  1261   000026                     ??_vfpfcnvrt:
  1262   000026                     get16bitTMR0val@combined_value:
  1263                           	callstack 0
  1264   000026                     reverseTurn@factorR:
  1265                           	callstack 0
  1266                           
  1267                           ; 2 bytes @ 0x25
  1268   000026                     	ds	1
  1269   000027                     decision@path_step:
  1270                           	callstack 0
  1271   000027                     ___flmul@temp:
  1272                           	callstack 0
  1273                           
  1274                           ; 2 bytes @ 0x26
  1275   000027                     	ds	1
  1276   000028                     reverseTurn@factorL:
  1277                           	callstack 0
  1278   000028                     vfpfcnvrt@convarg:
  1279                           	callstack 0
  1280                           
  1281                           ; 4 bytes @ 0x27
  1282   000028                     	ds	1
  1283   000029                     ?___fldiv:
  1284                           	callstack 0
  1285   000029                     decision@factorR:
  1286                           	callstack 0
  1287   000029                     ___fldiv@b:
  1288                           	callstack 0
  1289                           
  1290                           ; 4 bytes @ 0x28
  1291   000029                     	ds	1
  1292   00002A                     ??_reverseTurn:
  1293                           
  1294                           ; 1 bytes @ 0x29
  1295   00002A                     	ds	1
  1296   00002B                     decision@factorL:
  1297                           	callstack 0
  1298                           
  1299                           ; 2 bytes @ 0x2A
  1300   00002B                     	ds	1
  1301   00002C                     vfpfcnvrt@done:
  1302                           	callstack 0
  1303                           
  1304                           ; 1 bytes @ 0x2B
  1305   00002C                     	ds	1
  1306   00002D                     vfpfcnvrt@cp:
  1307                           	callstack 0
  1308   00002D                     ___fldiv@a:
  1309                           	callstack 0
  1310                           
  1311                           ; 4 bytes @ 0x2C
  1312   00002D                     	ds	1
  1313   00002E                     ?_vfprintf:
  1314                           	callstack 0
  1315   00002E                     vfprintf@fp:
  1316                           	callstack 0
  1317                           
  1318                           ; 1 bytes @ 0x2D
  1319   00002E                     	ds	1
  1320   00002F                     vfprintf@fmt:
  1321                           	callstack 0
  1322                           
  1323                           ; 1 bytes @ 0x2E
  1324   00002F                     	ds	1
  1325   000030                     vfprintf@ap:
  1326                           	callstack 0
  1327                           
  1328                           ; 1 bytes @ 0x2F
  1329   000030                     	ds	1
  1330   000031                     ??___fldiv:
  1331   000031                     vfprintf@cfmt:
  1332                           	callstack 0
  1333                           
  1334                           ; 1 bytes @ 0x30
  1335   000031                     	ds	1
  1336   000032                     ?_sprintf:
  1337                           	callstack 0
  1338   000032                     sprintf@s:
  1339                           	callstack 0
  1340                           
  1341                           ; 1 bytes @ 0x31
  1342   000032                     	ds	1
  1343   000033                     sprintf@fmt:
  1344                           	callstack 0
  1345                           
  1346                           ; 1 bytes @ 0x32
  1347   000033                     	ds	2
  1348   000035                     ___fldiv@rem:
  1349                           	callstack 0
  1350                           
  1351                           ; 4 bytes @ 0x34
  1352   000035                     	ds	3
  1353   000038                     sprintf@ap:
  1354                           	callstack 0
  1355                           
  1356                           ; 1 bytes @ 0x37
  1357   000038                     	ds	1
  1358   000039                     ___fldiv@sign:
  1359                           	callstack 0
  1360   000039                     sprintf@f:
  1361                           	callstack 0
  1362                           
  1363                           ; 12 bytes @ 0x38
  1364   000039                     	ds	1
  1365   00003A                     ___fldiv@new_exp:
  1366                           	callstack 0
  1367                           
  1368                           ; 2 bytes @ 0x39
  1369   00003A                     	ds	2
  1370   00003C                     ___fldiv@grs:
  1371                           	callstack 0
  1372                           
  1373                           ; 4 bytes @ 0x3B
  1374   00003C                     	ds	4
  1375   000040                     ___fldiv@bexp:
  1376                           	callstack 0
  1377                           
  1378                           ; 1 bytes @ 0x3F
  1379   000040                     	ds	1
  1380   000041                     ___fldiv@aexp:
  1381                           	callstack 0
  1382                           
  1383                           ; 1 bytes @ 0x40
  1384   000041                     	ds	1
  1385   000042                     ?___fltol:
  1386                           	callstack 0
  1387   000042                     ___fltol@f1:
  1388                           	callstack 0
  1389                           
  1390                           ; 4 bytes @ 0x41
  1391   000042                     	ds	4
  1392   000046                     ??___fltol:
  1393                           
  1394                           ; 1 bytes @ 0x45
  1395   000046                     	ds	4
  1396   00004A                     ___fltol@sign1:
  1397                           	callstack 0
  1398                           
  1399                           ; 1 bytes @ 0x49
  1400   00004A                     	ds	1
  1401   00004B                     ___fltol@exp1:
  1402                           	callstack 0
  1403                           
  1404                           ; 1 bytes @ 0x4A
  1405   00004B                     	ds	1
  1406   00004C                     ?_convert_rgb2hue:
  1407                           	callstack 0
  1408   00004C                     ?_calibration_turningR:
  1409                           	callstack 0
  1410   00004C                     ?_calibration_turningL:
  1411                           	callstack 0
  1412   00004C                     convert_rgb2hue@cMax:
  1413                           	callstack 0
  1414   00004C                     fullSpeedAhead@mL:
  1415                           	callstack 0
  1416   00004C                     calibration_turningR@mL:
  1417                           	callstack 0
  1418   00004C                     calibration_turningL@mL:
  1419                           	callstack 0
  1420   00004C                     send2USART@hue:
  1421                           	callstack 0
  1422                           
  1423                           ; 2 bytes @ 0x4B
  1424   00004C                     	ds	1
  1425   00004D                     convert_rgb2hue@cCurr:
  1426                           	callstack 0
  1427   00004D                     fullSpeedAhead@mR:
  1428                           	callstack 0
  1429   00004D                     calibration_turningR@mR:
  1430                           	callstack 0
  1431   00004D                     calibration_turningL@mR:
  1432                           	callstack 0
  1433                           
  1434                           ; 1 bytes @ 0x4C
  1435   00004D                     	ds	1
  1436   00004E                     ??_convert_rgb2hue:
  1437   00004E                     ??_calibration_turningR:
  1438   00004E                     ??_calibration_turningL:
  1439   00004E                     ??_fullSpeedAhead:
  1440   00004E                     calibration_colors@cCal:
  1441                           	callstack 0
  1442                           
  1443                           ; 1 bytes @ 0x4D
  1444   00004E                     	ds	1
  1445   00004F                     ??_calibration_colors:
  1446   00004F                     fullSpeedAhead@power:
  1447                           	callstack 0
  1448                           
  1449                           ; 2 bytes @ 0x4E
  1450   00004F                     	ds	1
  1451   000050                     ?_reading_hue:
  1452                           	callstack 0
  1453   000050                     reading_hue@cCurr:
  1454                           	callstack 0
  1455                           
  1456                           ; 1 bytes @ 0x4F
  1457   000050                     	ds	1
  1458   000051                     reverseStraight@mL:
  1459                           	callstack 0
  1460                           
  1461                           ; 1 bytes @ 0x50
  1462   000051                     	ds	1
  1463   000052                     ??_reading_hue:
  1464   000052                     reverseStraight@mR:
  1465                           	callstack 0
  1466                           
  1467                           ; 1 bytes @ 0x51
  1468   000052                     	ds	1
  1469   000053                     reverseStraight@time_ms:
  1470                           	callstack 0
  1471                           
  1472                           ; 4 bytes @ 0x52
  1473   000053                     	ds	1
  1474   000054                     reading_hue@hue:
  1475                           	callstack 0
  1476                           
  1477                           ; 2 bytes @ 0x53
  1478   000054                     	ds	3
  1479   000057                     ??_reverseStraight:
  1480                           
  1481                           ; 1 bytes @ 0x56
  1482   000057                     	ds	2
  1483   000059                     reverseStraight@delayMs:
  1484                           	callstack 0
  1485                           
  1486                           ; 2 bytes @ 0x58
  1487   000059                     	ds	2
  1488                           
  1489 ;;
  1490 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1491 ;;
  1492 ;; *************** function _main *****************
  1493 ;; Defined at:
  1494 ;;		line 30 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  white           2   80[BANK0 ] unsigned int 
  1499 ;;  clear_curren    4   90[BANK0 ] float 
  1500 ;;  clear_max       4   86[BANK0 ] float 
  1501 ;;  hue             2   98[BANK0 ] unsigned int 
  1502 ;;  path_step       2   96[BANK0 ] unsigned int 
  1503 ;;  clear_norm      2   94[BANK0 ] unsigned int 
  1504 ;;  PWMcycle        2    0        unsigned int 
  1505 ;;  factorL         2   84[BANK0 ] unsigned int 
  1506 ;;  factorR         2   82[BANK0 ] unsigned int 
  1507 ;;  ambient         2   78[BANK0 ] unsigned int 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;Total ram usage:       24 bytes
  1522 ;; Hardware stack levels required when called: 11
  1523 ;; This function calls:
  1524 ;;		_ADC_init
  1525 ;;		_Timer0_init
  1526 ;;		___fldiv
  1527 ;;		___flmul
  1528 ;;		___fltol
  1529 ;;		___xxtofl
  1530 ;;		_calibration_colors
  1531 ;;		_calibration_turningL
  1532 ;;		_calibration_turningR
  1533 ;;		_color_click_init
  1534 ;;		_color_read_Clear
  1535 ;;		_decision
  1536 ;;		_fullSpeedAhead
  1537 ;;		_get16bitTMR0val
  1538 ;;		_initDCmotorsPWM
  1539 ;;		_initUSART4
  1540 ;;		_reading_hue
  1541 ;;		_returnHome
  1542 ;;		_send2USART
  1543 ;;		_stop
  1544 ;; This function is called by:
  1545 ;;		Startup code after reset
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text0
  1550   001658                     __ptext0:
  1551                           	callstack 0
  1552   001658                     _main:
  1553                           	callstack 20
  1554   001658                     
  1555                           ;main.c: 32:     ADC_init();
  1556   001658  EC4C  F028         	call	_ADC_init	;wreg free
  1557   00165C                     
  1558                           ;main.c: 33:     color_click_init();
  1559   00165C  EC6B  F026         	call	_color_click_init	;wreg free
  1560   001660                     
  1561                           ;main.c: 34:     initUSART4();
  1562   001660  EC2E  F028         	call	_initUSART4	;wreg free
  1563   001664                     
  1564                           ;main.c: 35:     Timer0_init();
  1565   001664  ECCA  F027         	call	_Timer0_init	;wreg free
  1566   001668                     
  1567                           ;main.c: 39:     initDCmotorsPWM(PWMcycle);
  1568   001668  0E00               	movlw	0
  1569   00166A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1570   00166C  0E63               	movlw	99
  1571   00166E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1572   001670  EC91  F022         	call	_initDCmotorsPWM	;wreg free
  1573   001674                     
  1574                           ;main.c: 42:     motorL.power = 0;
  1575   001674  0E00               	movlw	0
  1576   001676  0100               	movlb	0	; () banked
  1577   001678  6FE9               	movwf	_motorL& (0+255),b
  1578   00167A                     
  1579                           ; BSR set to: 0
  1580                           ;main.c: 43:     motorL.direction = 1;
  1581   00167A  0E01               	movlw	1
  1582   00167C  6FEA               	movwf	(_motorL+1)& (0+255),b
  1583   00167E                     
  1584                           ; BSR set to: 0
  1585                           ;main.c: 44:     motorL.brakemode = 1;
  1586   00167E  0E01               	movlw	1
  1587   001680  6FEB               	movwf	(_motorL+2)& (0+255),b
  1588   001682                     
  1589                           ; BSR set to: 0
  1590                           ;main.c: 45:     motorL.PWMperiod = PWMcycle;
  1591   001682  0E00               	movlw	0
  1592   001684  6FED               	movwf	(_motorL+4)& (0+255),b
  1593   001686  0E63               	movlw	99
  1594   001688  6FEC               	movwf	(_motorL+3)& (0+255),b
  1595   00168A                     
  1596                           ; BSR set to: 0
  1597                           ;main.c: 46:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1598   00168A  0EAA               	movlw	170
  1599   00168C  6FEE               	movwf	(_motorL+5)& (0+255),b
  1600   00168E  0E0F               	movlw	15
  1601   001690  6FEF               	movwf	(_motorL+6)& (0+255),b
  1602   001692                     
  1603                           ; BSR set to: 0
  1604                           ;main.c: 47:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1605   001692  0EA6               	movlw	166
  1606   001694  6FF0               	movwf	(_motorL+7)& (0+255),b
  1607   001696  0E0F               	movlw	15
  1608   001698  6FF1               	movwf	(_motorL+8)& (0+255),b
  1609   00169A                     
  1610                           ; BSR set to: 0
  1611                           ;main.c: 49:     motorR.power = 0;
  1612   00169A  0E00               	movlw	0
  1613   00169C  6FE0               	movwf	_motorR& (0+255),b
  1614   00169E                     
  1615                           ; BSR set to: 0
  1616                           ;main.c: 50:     motorR.direction = 1;
  1617   00169E  0E01               	movlw	1
  1618   0016A0  6FE1               	movwf	(_motorR+1)& (0+255),b
  1619   0016A2                     
  1620                           ; BSR set to: 0
  1621                           ;main.c: 51:     motorR.brakemode = 1;
  1622   0016A2  0E01               	movlw	1
  1623   0016A4  6FE2               	movwf	(_motorR+2)& (0+255),b
  1624   0016A6                     
  1625                           ; BSR set to: 0
  1626                           ;main.c: 52:     motorR.PWMperiod = PWMcycle;
  1627   0016A6  0E00               	movlw	0
  1628   0016A8  6FE4               	movwf	(_motorR+4)& (0+255),b
  1629   0016AA  0E63               	movlw	99
  1630   0016AC  6FE3               	movwf	(_motorR+3)& (0+255),b
  1631   0016AE                     
  1632                           ; BSR set to: 0
  1633                           ;main.c: 53:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1634   0016AE  0E25               	movlw	37
  1635   0016B0  6FE5               	movwf	(_motorR+5)& (0+255),b
  1636   0016B2  0E0F               	movlw	15
  1637   0016B4  6FE6               	movwf	(_motorR+6)& (0+255),b
  1638   0016B6                     
  1639                           ; BSR set to: 0
  1640                           ;main.c: 54:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1641   0016B6  0E21               	movlw	33
  1642   0016B8  6FE7               	movwf	(_motorR+7)& (0+255),b
  1643   0016BA  0E0F               	movlw	15
  1644   0016BC  6FE8               	movwf	(_motorR+8)& (0+255),b
  1645   0016BE                     
  1646                           ; BSR set to: 0
  1647                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1648   0016BE  9087               	bcf	135,0,c	;volatile
  1649   0016C0                     
  1650                           ; BSR set to: 0
  1651                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1652   0016C0  907F               	bcf	127,0,c	;volatile
  1653   0016C2                     
  1654                           ; BSR set to: 0
  1655                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1656   0016C2  9E85               	bcf	133,7,c	;volatile
  1657   0016C4                     
  1658                           ; BSR set to: 0
  1659                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1660   0016C4  9E7D               	bcf	125,7,c	;volatile
  1661   0016C6                     
  1662                           ; BSR set to: 0
  1663                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1664   0016C6  9681               	bcf	129,3,c	;volatile
  1665   0016C8                     
  1666                           ; BSR set to: 0
  1667                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1668   0016C8  9679               	bcf	121,3,c	;volatile
  1669   0016CA                     
  1670                           ; BSR set to: 0
  1671                           ;main.c: 71:     TRISFbits.TRISF2=1;
  1672   0016CA  8486               	bsf	134,2,c	;volatile
  1673   0016CC                     
  1674                           ; BSR set to: 0
  1675                           ;main.c: 72:     ANSELFbits.ANSELF2=0;
  1676   0016CC  010E               	movlb	14	; () banked
  1677   0016CE  95B4               	bcf	180,2,b	;volatile
  1678   0016D0                     
  1679                           ; BSR set to: 14
  1680                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1681   0016D0  8686               	bsf	134,3,c	;volatile
  1682   0016D2                     
  1683                           ; BSR set to: 14
  1684                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1685   0016D2  97B4               	bcf	180,3,b	;volatile
  1686   0016D4                     
  1687                           ; BSR set to: 14
  1688                           ;main.c: 82:     TRISHbits.TRISH3 = 0;
  1689   0016D4  9688               	bcf	136,3,c	;volatile
  1690   0016D6                     
  1691                           ; BSR set to: 14
  1692                           ;main.c: 83:     LATHbits.LATH3 = 1;
  1693   0016D6  8680               	bsf	128,3,c	;volatile
  1694   0016D8                     
  1695                           ; BSR set to: 14
  1696                           ;main.c: 84:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1697   0016D8  0E19               	movlw	25
  1698   0016DA  0100               	movlb	0	; () banked
  1699   0016DC  6FAD               	movwf	(??_main+1)& (0+255),b
  1700   0016DE  0E5A               	movlw	90
  1701   0016E0  6FAC               	movwf	??_main& (0+255),b
  1702   0016E2  0EB1               	movlw	177
  1703   0016E4                     u5627:
  1704   0016E4  2EE8               	decfsz	wreg,f,c
  1705   0016E6  D7FE               	bra	u5627
  1706   0016E8  2FAC               	decfsz	??_main& (0+255),f,b
  1707   0016EA  D7FC               	bra	u5627
  1708   0016EC  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1709   0016EE  D7FA               	bra	u5627
  1710   0016F0  D000               	nop2	
  1711   0016F2                     
  1712                           ;main.c: 85:     LATHbits.LATH3 = 0;
  1713   0016F2  9680               	bcf	128,3,c	;volatile
  1714   0016F4                     
  1715                           ;main.c: 89:     calibration_colors(&colorCalibration);
  1716   0016F4  0ED6               	movlw	low _colorCalibration
  1717   0016F6  6E4E               	movwf	calibration_colors@cCal^0,c
  1718   0016F8  ECB2  F017         	call	_calibration_colors	;wreg free
  1719   0016FC                     
  1720                           ;main.c: 91:     unsigned int clear_norm;;main.c: 92:     unsigned int path_step = 0;
  1721   0016FC  0E00               	movlw	0
  1722   0016FE  0100               	movlb	0	; () banked
  1723   001700  6FC1               	movwf	(main@path_step+1)& (0+255),b
  1724   001702  0E00               	movlw	0
  1725   001704  6FC0               	movwf	main@path_step& (0+255),b
  1726   001706                     
  1727                           ; BSR set to: 0
  1728                           ;main.c: 93:     unsigned int hue;;main.c: 94:     unsigned int ambient;;main.c: 95:    
      +                           float clear_current;;main.c: 96:     float clear_max;;main.c: 97:     unsigned int fact
      +                          orR;;main.c: 98:     unsigned int factorL;;main.c: 101:     factorR = calibration_turnin
      +                          gR(&motorL, &motorR) ;
  1729   001706  0EE9               	movlw	low _motorL
  1730   001708  6E4C               	movwf	calibration_turningR@mL^0,c
  1731   00170A  0EE0               	movlw	low _motorR
  1732   00170C  6E4D               	movwf	calibration_turningR@mR^0,c
  1733   00170E  EC6C  F015         	call	_calibration_turningR	;wreg free
  1734   001712  C04C  F0B2         	movff	?_calibration_turningR,main@factorR
  1735   001716  C04D  F0B3         	movff	?_calibration_turningR+1,main@factorR+1
  1736   00171A                     
  1737                           ;main.c: 102:     factorL = calibration_turningL(&motorL, &motorR) ;
  1738   00171A  0EE9               	movlw	low _motorL
  1739   00171C  6E4C               	movwf	calibration_turningL@mL^0,c
  1740   00171E  0EE0               	movlw	low _motorR
  1741   001720  6E4D               	movwf	calibration_turningL@mR^0,c
  1742   001722  EC8F  F016         	call	_calibration_turningL	;wreg free
  1743   001726  C04C  F0B4         	movff	?_calibration_turningL,main@factorL
  1744   00172A  C04D  F0B5         	movff	?_calibration_turningL+1,main@factorL+1
  1745   00172E                     
  1746                           ;main.c: 104:     ambient = colorCalibration.ambient;
  1747   00172E  C0DE  F0AE         	movff	_colorCalibration+8,main@ambient
  1748   001732  C0DF  F0AF         	movff	_colorCalibration+9,main@ambient+1
  1749   001736                     
  1750                           ;main.c: 106:     send2USART(ambient);
  1751   001736  C0AE  F04C         	movff	main@ambient,send2USART@hue
  1752   00173A  C0AF  F04D         	movff	main@ambient+1,send2USART@hue+1
  1753   00173E  EC3D  F028         	call	_send2USART	;wreg free
  1754   001742                     l6151:
  1755                           
  1756                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1757   001742  807F               	bsf	127,0,c	;volatile
  1758   001744                     
  1759                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1760   001744  8E7D               	bsf	125,7,c	;volatile
  1761   001746                     
  1762                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1763   001746  8679               	bsf	121,3,c	;volatile
  1764   001748                     
  1765                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1766   001748  0EE9               	movlw	low _motorL
  1767   00174A  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1768   00174C  0EE0               	movlw	low _motorR
  1769   00174E  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1770   001750  ECD7  F01F         	call	_fullSpeedAhead	;wreg free
  1771   001754                     
  1772                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1773   001754  8ED5               	bsf	213,7,c	;volatile
  1774   001756                     
  1775                           ;main.c: 118:         colorCurrent.clear = color_read_Clear();
  1776   001756  ECC5  F024         	call	_color_read_Clear	;wreg free
  1777   00175A  C006  F0D2         	movff	?_color_read_Clear,_colorCurrent+6
  1778   00175E  C007  F0D3         	movff	?_color_read_Clear+1,_colorCurrent+7
  1779   001762                     
  1780                           ;main.c: 120:         clear_current = colorCurrent.clear;
  1781   001762  C0D2  F002         	movff	_colorCurrent+6,___xxtofl@val
  1782   001766  C0D3  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1783   00176A  6A04               	clrf	(___xxtofl@val+2)^0,c
  1784   00176C  6A05               	clrf	(___xxtofl@val+3)^0,c
  1785   00176E  0E00               	movlw	0
  1786   001770  ECD5  F018         	call	___xxtofl
  1787   001774  C002  F0BA         	movff	?___xxtofl,main@clear_current
  1788   001778  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  1789   00177C  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  1790   001780  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  1791   001784                     
  1792                           ;main.c: 121:         send2USART(clear_current);
  1793   001784  C0BA  F042         	movff	main@clear_current,___fltol@f1
  1794   001788  C0BB  F043         	movff	main@clear_current+1,___fltol@f1+1
  1795   00178C  C0BC  F044         	movff	main@clear_current+2,___fltol@f1+2
  1796   001790  C0BD  F045         	movff	main@clear_current+3,___fltol@f1+3
  1797   001794  EC5D  F01E         	call	___fltol	;wreg free
  1798   001798  C042  F04C         	movff	?___fltol,send2USART@hue
  1799   00179C  C043  F04D         	movff	?___fltol+1,send2USART@hue+1
  1800   0017A0  EC3D  F028         	call	_send2USART	;wreg free
  1801   0017A4                     
  1802                           ;main.c: 122:         clear_max = colorCalibration.clear;
  1803   0017A4  C0DC  F002         	movff	_colorCalibration+6,___xxtofl@val
  1804   0017A8  C0DD  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1805   0017AC  6A04               	clrf	(___xxtofl@val+2)^0,c
  1806   0017AE  6A05               	clrf	(___xxtofl@val+3)^0,c
  1807   0017B0  0E00               	movlw	0
  1808   0017B2  ECD5  F018         	call	___xxtofl
  1809   0017B6  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1810   0017BA  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1811   0017BE  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1812   0017C2  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1813   0017C6                     
  1814                           ;main.c: 124:         clear_norm = (clear_current)*100/clear_max;
  1815   0017C6  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1816   0017CA  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1817   0017CE  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1818   0017D2  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1819   0017D6  0E00               	movlw	0
  1820   0017D8  6E14               	movwf	___flmul@a^0,c
  1821   0017DA  0E00               	movlw	0
  1822   0017DC  6E15               	movwf	(___flmul@a+1)^0,c
  1823   0017DE  0EC8               	movlw	200
  1824   0017E0  6E16               	movwf	(___flmul@a+2)^0,c
  1825   0017E2  0E42               	movlw	66
  1826   0017E4  6E17               	movwf	(___flmul@a+3)^0,c
  1827   0017E6  C0BA  F010         	movff	main@clear_current,___flmul@b
  1828   0017EA  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  1829   0017EE  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  1830   0017F2  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  1831   0017F6  EC38  F010         	call	___flmul	;wreg free
  1832   0017FA  C010  F029         	movff	?___flmul,___fldiv@b
  1833   0017FE  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1834   001802  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1835   001806  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1836   00180A  EC4D  F012         	call	___fldiv	;wreg free
  1837   00180E  C029  F042         	movff	?___fldiv,___fltol@f1
  1838   001812  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1839   001816  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1840   00181A  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1841   00181E  EC5D  F01E         	call	___fltol	;wreg free
  1842   001822  C042  F0BE         	movff	?___fltol,main@clear_norm
  1843   001826  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  1844                           
  1845                           ;main.c: 128:         while(clear_norm<10){
  1846   00182A  EF71  F00C         	goto	l6175
  1847   00182E                     l6171:
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 129:             (colorCurrent.clear) = color_read_Clear();
  1851   00182E  ECC5  F024         	call	_color_read_Clear	;wreg free
  1852   001832  C006  F0D2         	movff	?_color_read_Clear,_colorCurrent+6
  1853   001836  C007  F0D3         	movff	?_color_read_Clear+1,_colorCurrent+7
  1854                           
  1855                           ;main.c: 130:             clear_current = colorCurrent.clear;
  1856   00183A  C0D2  F002         	movff	_colorCurrent+6,___xxtofl@val
  1857   00183E  C0D3  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1858   001842  6A04               	clrf	(___xxtofl@val+2)^0,c
  1859   001844  6A05               	clrf	(___xxtofl@val+3)^0,c
  1860   001846  0E00               	movlw	0
  1861   001848  ECD5  F018         	call	___xxtofl
  1862   00184C  C002  F0BA         	movff	?___xxtofl,main@clear_current
  1863   001850  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  1864   001854  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  1865   001858  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  1866                           
  1867                           ;main.c: 131:             clear_max = colorCalibration.clear;
  1868   00185C  C0DC  F002         	movff	_colorCalibration+6,___xxtofl@val
  1869   001860  C0DD  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1870   001864  6A04               	clrf	(___xxtofl@val+2)^0,c
  1871   001866  6A05               	clrf	(___xxtofl@val+3)^0,c
  1872   001868  0E00               	movlw	0
  1873   00186A  ECD5  F018         	call	___xxtofl
  1874   00186E  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1875   001872  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1876   001876  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1877   00187A  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1878   00187E                     
  1879                           ;main.c: 132:             clear_norm = clear_current*100/clear_max;
  1880   00187E  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1881   001882  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1882   001886  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1883   00188A  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1884   00188E  0E00               	movlw	0
  1885   001890  6E14               	movwf	___flmul@a^0,c
  1886   001892  0E00               	movlw	0
  1887   001894  6E15               	movwf	(___flmul@a+1)^0,c
  1888   001896  0EC8               	movlw	200
  1889   001898  6E16               	movwf	(___flmul@a+2)^0,c
  1890   00189A  0E42               	movlw	66
  1891   00189C  6E17               	movwf	(___flmul@a+3)^0,c
  1892   00189E  C0BA  F010         	movff	main@clear_current,___flmul@b
  1893   0018A2  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  1894   0018A6  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  1895   0018AA  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  1896   0018AE  EC38  F010         	call	___flmul	;wreg free
  1897   0018B2  C010  F029         	movff	?___flmul,___fldiv@b
  1898   0018B6  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1899   0018BA  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1900   0018BE  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1901   0018C2  EC4D  F012         	call	___fldiv	;wreg free
  1902   0018C6  C029  F042         	movff	?___fldiv,___fltol@f1
  1903   0018CA  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1904   0018CE  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1905   0018D2  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1906   0018D6  EC5D  F01E         	call	___fltol	;wreg free
  1907   0018DA  C042  F0BE         	movff	?___fltol,main@clear_norm
  1908   0018DE  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  1909   0018E2                     l6175:
  1910                           
  1911                           ;main.c: 128:         while(clear_norm<10){
  1912   0018E2  0100               	movlb	0	; () banked
  1913   0018E4  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  1914   0018E6  E109               	bnz	u5520
  1915   0018E8  0E0A               	movlw	10
  1916   0018EA  5DBE               	subwf	main@clear_norm& (0+255),w,b
  1917   0018EC  A0D8               	btfss	status,0,c
  1918   0018EE  EF7B  F00C         	goto	u5521
  1919   0018F2  EF7D  F00C         	goto	u5520
  1920   0018F6                     u5521:
  1921   0018F6  EF17  F00C         	goto	l6171
  1922   0018FA                     u5520:
  1923   0018FA                     
  1924                           ; BSR set to: 0
  1925                           ;main.c: 136:         T0CON0bits.T0EN=0;
  1926   0018FA  9ED5               	bcf	213,7,c	;volatile
  1927   0018FC                     
  1928                           ; BSR set to: 0
  1929                           ;main.c: 138:         stop(&motorL,&motorR);
  1930   0018FC  0EE9               	movlw	low _motorL
  1931   0018FE  6E14               	movwf	stop@mL^0,c
  1932   001900  0EE0               	movlw	low _motorR
  1933   001902  6E15               	movwf	stop@mR^0,c
  1934   001904  ECD9  F022         	call	_stop	;wreg free
  1935   001908                     
  1936                           ;main.c: 141:         path_step = get16bitTMR0val(path_step);
  1937   001908  C0C0  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  1938   00190C  C0C1  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1939   001910  ECF7  F021         	call	_get16bitTMR0val	;wreg free
  1940   001914  C01C  F0C0         	movff	?_get16bitTMR0val,main@path_step
  1941   001918  C01D  F0C1         	movff	?_get16bitTMR0val+1,main@path_step+1
  1942   00191C                     
  1943                           ;main.c: 143:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1944   00191C  0E11               	movlw	17
  1945   00191E  0100               	movlb	0	; () banked
  1946   001920  6FAD               	movwf	(??_main+1)& (0+255),b
  1947   001922  0E3C               	movlw	60
  1948   001924  6FAC               	movwf	??_main& (0+255),b
  1949   001926  0ECB               	movlw	203
  1950   001928                     u5637:
  1951   001928  2EE8               	decfsz	wreg,f,c
  1952   00192A  D7FE               	bra	u5637
  1953   00192C  2FAC               	decfsz	??_main& (0+255),f,b
  1954   00192E  D7FC               	bra	u5637
  1955   001930  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1956   001932  D7FA               	bra	u5637
  1957   001934                     
  1958                           ;main.c: 146:         fullSpeedAhead(&motorL,&motorR);
  1959   001934  0EE9               	movlw	low _motorL
  1960   001936  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1961   001938  0EE0               	movlw	low _motorR
  1962   00193A  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1963   00193C  ECD7  F01F         	call	_fullSpeedAhead	;wreg free
  1964   001940                     
  1965                           ;main.c: 147:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1966   001940  0E19               	movlw	25
  1967   001942  0100               	movlb	0	; () banked
  1968   001944  6FAD               	movwf	(??_main+1)& (0+255),b
  1969   001946  0E5A               	movlw	90
  1970   001948  6FAC               	movwf	??_main& (0+255),b
  1971   00194A  0EB1               	movlw	177
  1972   00194C                     u5647:
  1973   00194C  2EE8               	decfsz	wreg,f,c
  1974   00194E  D7FE               	bra	u5647
  1975   001950  2FAC               	decfsz	??_main& (0+255),f,b
  1976   001952  D7FC               	bra	u5647
  1977   001954  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1978   001956  D7FA               	bra	u5647
  1979   001958  D000               	nop2	
  1980   00195A                     
  1981                           ;main.c: 148:         stop(&motorL,&motorR);
  1982   00195A  0EE9               	movlw	low _motorL
  1983   00195C  6E14               	movwf	stop@mL^0,c
  1984   00195E  0EE0               	movlw	low _motorR
  1985   001960  6E15               	movwf	stop@mR^0,c
  1986   001962  ECD9  F022         	call	_stop	;wreg free
  1987   001966                     
  1988                           ;main.c: 149:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1989   001966  0E19               	movlw	25
  1990   001968  0100               	movlb	0	; () banked
  1991   00196A  6FAD               	movwf	(??_main+1)& (0+255),b
  1992   00196C  0E5A               	movlw	90
  1993   00196E  6FAC               	movwf	??_main& (0+255),b
  1994   001970  0EB1               	movlw	177
  1995   001972                     u5657:
  1996   001972  2EE8               	decfsz	wreg,f,c
  1997   001974  D7FE               	bra	u5657
  1998   001976  2FAC               	decfsz	??_main& (0+255),f,b
  1999   001978  D7FC               	bra	u5657
  2000   00197A  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  2001   00197C  D7FA               	bra	u5657
  2002   00197E  D000               	nop2	
  2003   001980                     
  2004                           ;main.c: 151:         hue = reading_hue(&colorCurrent);
  2005   001980  0ECC               	movlw	low _colorCurrent
  2006   001982  6E50               	movwf	reading_hue@cCurr^0,c
  2007   001984  EC62  F01F         	call	_reading_hue	;wreg free
  2008   001988  C050  F0C2         	movff	?_reading_hue,main@hue
  2009   00198C  C051  F0C3         	movff	?_reading_hue+1,main@hue+1
  2010   001990                     
  2011                           ;main.c: 152:         send2USART(hue);
  2012   001990  C0C2  F04C         	movff	main@hue,send2USART@hue
  2013   001994  C0C3  F04D         	movff	main@hue+1,send2USART@hue+1
  2014   001998  EC3D  F028         	call	_send2USART	;wreg free
  2015   00199C                     
  2016                           ;main.c: 153:         clear_current = colorCurrent.clear;
  2017   00199C  C0D2  F002         	movff	_colorCurrent+6,___xxtofl@val
  2018   0019A0  C0D3  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  2019   0019A4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2020   0019A6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2021   0019A8  0E00               	movlw	0
  2022   0019AA  ECD5  F018         	call	___xxtofl
  2023   0019AE  C002  F0BA         	movff	?___xxtofl,main@clear_current
  2024   0019B2  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  2025   0019B6  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  2026   0019BA  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  2027   0019BE                     
  2028                           ;main.c: 154:         clear_max = colorCalibration.clear;
  2029   0019BE  C0DC  F002         	movff	_colorCalibration+6,___xxtofl@val
  2030   0019C2  C0DD  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  2031   0019C6  6A04               	clrf	(___xxtofl@val+2)^0,c
  2032   0019C8  6A05               	clrf	(___xxtofl@val+3)^0,c
  2033   0019CA  0E00               	movlw	0
  2034   0019CC  ECD5  F018         	call	___xxtofl
  2035   0019D0  C002  F0B6         	movff	?___xxtofl,main@clear_max
  2036   0019D4  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  2037   0019D8  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  2038   0019DC  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  2039   0019E0                     
  2040                           ;main.c: 155:         clear_norm = clear_current*100/clear_max;
  2041   0019E0  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  2042   0019E4  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  2043   0019E8  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  2044   0019EC  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  2045   0019F0  0E00               	movlw	0
  2046   0019F2  6E14               	movwf	___flmul@a^0,c
  2047   0019F4  0E00               	movlw	0
  2048   0019F6  6E15               	movwf	(___flmul@a+1)^0,c
  2049   0019F8  0EC8               	movlw	200
  2050   0019FA  6E16               	movwf	(___flmul@a+2)^0,c
  2051   0019FC  0E42               	movlw	66
  2052   0019FE  6E17               	movwf	(___flmul@a+3)^0,c
  2053   001A00  C0BA  F010         	movff	main@clear_current,___flmul@b
  2054   001A04  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  2055   001A08  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  2056   001A0C  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  2057   001A10  EC38  F010         	call	___flmul	;wreg free
  2058   001A14  C010  F029         	movff	?___flmul,___fldiv@b
  2059   001A18  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  2060   001A1C  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  2061   001A20  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  2062   001A24  EC4D  F012         	call	___fldiv	;wreg free
  2063   001A28  C029  F042         	movff	?___fldiv,___fltol@f1
  2064   001A2C  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  2065   001A30  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  2066   001A34  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  2067   001A38  EC5D  F01E         	call	___fltol	;wreg free
  2068   001A3C  C042  F0BE         	movff	?___fltol,main@clear_norm
  2069   001A40  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  2070   001A44                     
  2071                           ;main.c: 156:         send2USART(clear_norm);
  2072   001A44  C0BE  F04C         	movff	main@clear_norm,send2USART@hue
  2073   001A48  C0BF  F04D         	movff	main@clear_norm+1,send2USART@hue+1
  2074   001A4C  EC3D  F028         	call	_send2USART	;wreg free
  2075   001A50                     
  2076                           ;main.c: 158:         if (clear_norm > 20){
  2077   001A50  0100               	movlb	0	; () banked
  2078   001A52  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  2079   001A54  E109               	bnz	u5530
  2080   001A56  0E15               	movlw	21
  2081   001A58  5DBE               	subwf	main@clear_norm& (0+255),w,b
  2082   001A5A  A0D8               	btfss	status,0,c
  2083   001A5C  EF32  F00D         	goto	u5531
  2084   001A60  EF34  F00D         	goto	u5530
  2085   001A64                     u5531:
  2086   001A64  EF4D  F00D         	goto	l6211
  2087   001A68                     u5530:
  2088   001A68                     
  2089                           ; BSR set to: 0
  2090                           ;main.c: 159:             fullSpeedAhead(&motorL,&motorR);
  2091   001A68  0EE9               	movlw	low _motorL
  2092   001A6A  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2093   001A6C  0EE0               	movlw	low _motorR
  2094   001A6E  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2095   001A70  ECD7  F01F         	call	_fullSpeedAhead	;wreg free
  2096   001A74                     
  2097                           ;main.c: 160:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2098   001A74  0E09               	movlw	9
  2099   001A76  0100               	movlb	0	; () banked
  2100   001A78  6FAD               	movwf	(??_main+1)& (0+255),b
  2101   001A7A  0E1E               	movlw	30
  2102   001A7C  6FAC               	movwf	??_main& (0+255),b
  2103   001A7E  0EE4               	movlw	228
  2104   001A80                     u5667:
  2105   001A80  2EE8               	decfsz	wreg,f,c
  2106   001A82  D7FE               	bra	u5667
  2107   001A84  2FAC               	decfsz	??_main& (0+255),f,b
  2108   001A86  D7FC               	bra	u5667
  2109   001A88  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  2110   001A8A  D7FA               	bra	u5667
  2111   001A8C  0000               	nop	
  2112   001A8E                     
  2113                           ;main.c: 161:             stop(&motorL,&motorR);
  2114   001A8E  0EE9               	movlw	low _motorL
  2115   001A90  6E14               	movwf	stop@mL^0,c
  2116   001A92  0EE0               	movlw	low _motorR
  2117   001A94  6E15               	movwf	stop@mR^0,c
  2118   001A96  ECD9  F022         	call	_stop	;wreg free
  2119   001A9A                     l6211:
  2120                           
  2121                           ;main.c: 163:         if ((clear_norm > 85 && !(hue >= 302 && hue <= 346)) && !(hue>14 &
      +                          & hue<=35) || LATGbits.LATG1 == 1) {
  2122   001A9A  0100               	movlb	0	; () banked
  2123   001A9C  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  2124   001A9E  E109               	bnz	u5540
  2125   001AA0  0E56               	movlw	86
  2126   001AA2  5DBE               	subwf	main@clear_norm& (0+255),w,b
  2127   001AA4  A0D8               	btfss	status,0,c
  2128   001AA6  EF57  F00D         	goto	u5541
  2129   001AAA  EF59  F00D         	goto	u5540
  2130   001AAE                     u5541:
  2131   001AAE  EF85  F00D         	goto	l300
  2132   001AB2                     u5540:
  2133   001AB2                     
  2134                           ; BSR set to: 0
  2135   001AB2  0E2E               	movlw	46
  2136   001AB4  5DC2               	subwf	main@hue& (0+255),w,b
  2137   001AB6  0E01               	movlw	1
  2138   001AB8  59C3               	subwfb	(main@hue+1)& (0+255),w,b
  2139   001ABA  A0D8               	btfss	status,0,c
  2140   001ABC  EF62  F00D         	goto	u5551
  2141   001AC0  EF64  F00D         	goto	u5550
  2142   001AC4                     u5551:
  2143   001AC4  EF6F  F00D         	goto	l6217
  2144   001AC8                     u5550:
  2145   001AC8                     
  2146                           ; BSR set to: 0
  2147   001AC8  0E5B               	movlw	91
  2148   001ACA  5DC2               	subwf	main@hue& (0+255),w,b
  2149   001ACC  0E01               	movlw	1
  2150   001ACE  59C3               	subwfb	(main@hue+1)& (0+255),w,b
  2151   001AD0  A0D8               	btfss	status,0,c
  2152   001AD2  EF6D  F00D         	goto	u5561
  2153   001AD6  EF6F  F00D         	goto	u5560
  2154   001ADA                     u5561:
  2155   001ADA  EF85  F00D         	goto	l300
  2156   001ADE                     u5560:
  2157   001ADE                     l6217:
  2158                           
  2159                           ; BSR set to: 0
  2160   001ADE  51C3               	movf	(main@hue+1)& (0+255),w,b
  2161   001AE0  E109               	bnz	u5570
  2162   001AE2  0E0F               	movlw	15
  2163   001AE4  5DC2               	subwf	main@hue& (0+255),w,b
  2164   001AE6  A0D8               	btfss	status,0,c
  2165   001AE8  EF78  F00D         	goto	u5571
  2166   001AEC  EF7A  F00D         	goto	u5570
  2167   001AF0                     u5571:
  2168   001AF0  EF8C  F00D         	goto	l298
  2169   001AF4                     u5570:
  2170   001AF4                     
  2171                           ; BSR set to: 0
  2172   001AF4  51C3               	movf	(main@hue+1)& (0+255),w,b
  2173   001AF6  E107               	bnz	u5581
  2174   001AF8  0E24               	movlw	36
  2175   001AFA  5DC2               	subwf	main@hue& (0+255),w,b
  2176   001AFC  B0D8               	btfsc	status,0,c
  2177   001AFE  EF83  F00D         	goto	u5581
  2178   001B02  EF85  F00D         	goto	u5580
  2179   001B06                     u5581:
  2180   001B06  EF8C  F00D         	goto	l298
  2181   001B0A                     u5580:
  2182   001B0A                     l300:
  2183                           
  2184                           ; BSR set to: 0
  2185   001B0A  A27F               	btfss	127,1,c	;volatile
  2186   001B0C  EF8A  F00D         	goto	u5591
  2187   001B10  EF8C  F00D         	goto	u5590
  2188   001B14                     u5591:
  2189   001B14  EFBE  F00D         	goto	l6229
  2190   001B18                     u5590:
  2191   001B18                     l298:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;main.c: 165:             LATGbits.LATG0 = 0;
  2195   001B18  907F               	bcf	127,0,c	;volatile
  2196                           
  2197                           ;main.c: 166:             LATEbits.LATE7 = 0;
  2198   001B1A  9E7D               	bcf	125,7,c	;volatile
  2199                           
  2200                           ;main.c: 167:             LATAbits.LATA3 = 0;
  2201   001B1C  9679               	bcf	121,3,c	;volatile
  2202                           
  2203                           ;main.c: 169:             if (LATGbits.LATG1 == 1){
  2204   001B1E  A27F               	btfss	127,1,c	;volatile
  2205   001B20  EF94  F00D         	goto	u5601
  2206   001B24  EF96  F00D         	goto	u5600
  2207   001B28                     u5601:
  2208   001B28  EFA0  F00D         	goto	l6223
  2209   001B2C                     u5600:
  2210   001B2C                     
  2211                           ; BSR set to: 0
  2212                           ;main.c: 170:                 path_step = get16bitTMR0val(path_step);
  2213   001B2C  C0C0  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  2214   001B30  C0C1  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  2215   001B34  ECF7  F021         	call	_get16bitTMR0val	;wreg free
  2216   001B38  C01C  F0C0         	movff	?_get16bitTMR0val,main@path_step
  2217   001B3C  C01D  F0C1         	movff	?_get16bitTMR0val+1,main@path_step+1
  2218   001B40                     l6223:
  2219                           
  2220                           ;main.c: 172:             unsigned int white = 8;
  2221   001B40  0E00               	movlw	0
  2222   001B42  0100               	movlb	0	; () banked
  2223   001B44  6FB1               	movwf	(main@white+1)& (0+255),b
  2224   001B46  0E08               	movlw	8
  2225   001B48  6FB0               	movwf	main@white& (0+255),b
  2226   001B4A                     
  2227                           ; BSR set to: 0
  2228                           ;main.c: 173:             send2USART(white);
  2229   001B4A  C0B0  F04C         	movff	main@white,send2USART@hue
  2230   001B4E  C0B1  F04D         	movff	main@white+1,send2USART@hue+1
  2231   001B52  EC3D  F028         	call	_send2USART	;wreg free
  2232   001B56                     
  2233                           ;main.c: 174:             returnHome(&motorL, &motorR, path_step, factorR, factorL);
  2234   001B56  0EE9               	movlw	low _motorL
  2235   001B58  0100               	movlb	0	; () banked
  2236   001B5A  6F60               	movwf	returnHome@mL& (0+255),b
  2237   001B5C  0EE0               	movlw	low _motorR
  2238   001B5E  6F61               	movwf	returnHome@mR& (0+255),b
  2239   001B60  C0C0  F062         	movff	main@path_step,returnHome@path_step
  2240   001B64  C0C1  F063         	movff	main@path_step+1,returnHome@path_step+1
  2241   001B68  C0B2  F064         	movff	main@factorR,returnHome@factorR
  2242   001B6C  C0B3  F065         	movff	main@factorR+1,returnHome@factorR+1
  2243   001B70  C0B4  F066         	movff	main@factorL,returnHome@factorL
  2244   001B74  C0B5  F067         	movff	main@factorL+1,returnHome@factorL+1
  2245   001B78  EC2F  F01B         	call	_returnHome	;wreg free
  2246   001B7C                     l6229:
  2247                           
  2248                           ;main.c: 178:         path_step = decision(hue, path_step, factorR, factorL);
  2249   001B7C  C0C2  F025         	movff	main@hue,decision@hue
  2250   001B80  C0C3  F026         	movff	main@hue+1,decision@hue+1
  2251   001B84  C0C0  F027         	movff	main@path_step,decision@path_step
  2252   001B88  C0C1  F028         	movff	main@path_step+1,decision@path_step+1
  2253   001B8C  C0B2  F029         	movff	main@factorR,decision@factorR
  2254   001B90  C0B3  F02A         	movff	main@factorR+1,decision@factorR+1
  2255   001B94  C0B4  F02B         	movff	main@factorL,decision@factorL
  2256   001B98  C0B5  F02C         	movff	main@factorL+1,decision@factorL+1
  2257   001B9C  EC1A  F014         	call	_decision	;wreg free
  2258   001BA0  C025  F0C0         	movff	?_decision,main@path_step
  2259   001BA4  C026  F0C1         	movff	?_decision+1,main@path_step+1
  2260   001BA8  EFA1  F00B         	goto	l6151
  2261   001BAC  EF1D  F000         	goto	start
  2262   001BB0                     __end_of_main:
  2263                           	callstack 0
  2264                           
  2265 ;; *************** function _returnHome *****************
  2266 ;; Defined at:
  2267 ;;		line 107 in file "return_func.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2270 ;;		 -> motorL(9), 
  2271 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2272 ;;		 -> motorR(9), 
  2273 ;;  path_step       2    2[BANK0 ] unsigned int 
  2274 ;;  factorR         2    4[BANK0 ] unsigned int 
  2275 ;;  factorL         2    6[BANK0 ] unsigned int 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  action_turn     1   14[BANK0 ] unsigned char 
  2278 ;;  i               2   15[BANK0 ] unsigned int 
  2279 ;;  time_ms         4   10[BANK0 ] long 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2289 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;Total ram usage:       17 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 6
  2296 ;; This function calls:
  2297 ;;		_moveWhite
  2298 ;;		_reverseStraight
  2299 ;;		_reverseTurn
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text1
  2306   00365E                     __ptext1:
  2307                           	callstack 0
  2308   00365E                     _returnHome:
  2309                           	callstack 24
  2310   00365E                     
  2311                           ;return_func.c: 107: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_step, unsigned int factorR, unsigned int factorL);return_func.c: 108: {;return_
      +                          func.c: 110:     long time_ms;;return_func.c: 113:     moveWhite(&motorL,&motorR);
  2312   00365E  0EE9               	movlw	low _motorL
  2313   003660  6E1D               	movwf	moveWhite@mL^0,c
  2314   003662  0EE0               	movlw	low _motorR
  2315   003664  6E1E               	movwf	moveWhite@mR^0,c
  2316   003666  ECBC  F025         	call	_moveWhite	;wreg free
  2317   00366A                     
  2318                           ;return_func.c: 115:     if (path_step > 0) {
  2319   00366A  0100               	movlb	0	; () banked
  2320   00366C  5162               	movf	returnHome@path_step& (0+255),w,b
  2321   00366E  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  2322   003670  B4D8               	btfsc	status,2,c
  2323   003672  EF3D  F01B         	goto	u5471
  2324   003676  EF3F  F01B         	goto	u5470
  2325   00367A                     u5471:
  2326   00367A  EFE2  F01B         	goto	l703
  2327   00367E                     u5470:
  2328   00367E                     
  2329                           ; BSR set to: 0
  2330                           ;return_func.c: 116:         for (unsigned int i = path_step - 1; ; i--) {
  2331   00367E  0EFF               	movlw	255
  2332   003680  2562               	addwf	returnHome@path_step& (0+255),w,b
  2333   003682  6F6F               	movwf	returnHome@i& (0+255),b
  2334   003684  0EFF               	movlw	255
  2335   003686  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  2336   003688  6F70               	movwf	(returnHome@i+1)& (0+255),b
  2337   00368A                     l6053:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;return_func.c: 118:             char action_turn = action[i];
  2341   00368A  0E3C               	movlw	low _action
  2342   00368C  256F               	addwf	returnHome@i& (0+255),w,b
  2343   00368E  6ED9               	movwf	fsr2l,c
  2344   003690  0E01               	movlw	high _action
  2345   003692  2170               	addwfc	(returnHome@i+1)& (0+255),w,b
  2346   003694  6EDA               	movwf	fsr2h,c
  2347   003696  50DF               	movf	indf2,w,c
  2348   003698  6F6E               	movwf	returnHome@action_turn& (0+255),b
  2349   00369A                     
  2350                           ; BSR set to: 0
  2351                           ;return_func.c: 122:             if (action[i+1]== 5 || action[i+1]==7){
  2352   00369A  0E3D               	movlw	low (_action+1)
  2353   00369C  256F               	addwf	returnHome@i& (0+255),w,b
  2354   00369E  6ED9               	movwf	fsr2l,c
  2355   0036A0  0E01               	movlw	high (_action+1)
  2356   0036A2  2170               	addwfc	(returnHome@i+1)& (0+255),w,b
  2357   0036A4  6EDA               	movwf	fsr2h,c
  2358   0036A6  0E05               	movlw	5
  2359   0036A8  18DE               	xorwf	postinc2,w,c
  2360   0036AA  B4D8               	btfsc	status,2,c
  2361   0036AC  EF5A  F01B         	goto	u5481
  2362   0036B0  EF5C  F01B         	goto	u5480
  2363   0036B4                     u5481:
  2364   0036B4  EF6B  F01B         	goto	l6059
  2365   0036B8                     u5480:
  2366   0036B8                     
  2367                           ; BSR set to: 0
  2368   0036B8  0E3D               	movlw	low (_action+1)
  2369   0036BA  256F               	addwf	returnHome@i& (0+255),w,b
  2370   0036BC  6ED9               	movwf	fsr2l,c
  2371   0036BE  0E01               	movlw	high (_action+1)
  2372   0036C0  2170               	addwfc	(returnHome@i+1)& (0+255),w,b
  2373   0036C2  6EDA               	movwf	fsr2h,c
  2374   0036C4  0E07               	movlw	7
  2375   0036C6  18DE               	xorwf	postinc2,w,c
  2376   0036C8  A4D8               	btfss	status,2,c
  2377   0036CA  EF69  F01B         	goto	u5491
  2378   0036CE  EF6B  F01B         	goto	u5490
  2379   0036D2                     u5491:
  2380   0036D2  EF89  F01B         	goto	l6061
  2381   0036D6                     u5490:
  2382   0036D6                     l6059:
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;return_func.c: 123:                 time_ms = time[i]-2250;
  2386   0036D6  0E00               	movlw	low _time
  2387   0036D8  6F68               	movwf	??_returnHome& (0+255),b
  2388   0036DA  0E02               	movlw	high _time
  2389   0036DC  6F69               	movwf	(??_returnHome+1)& (0+255),b
  2390   0036DE  90D8               	bcf	status,0,c
  2391   0036E0  356F               	rlcf	returnHome@i& (0+255),w,b
  2392   0036E2  6ED9               	movwf	fsr2l,c
  2393   0036E4  3570               	rlcf	(returnHome@i+1)& (0+255),w,b
  2394   0036E6  6EDA               	movwf	fsr2h,c
  2395   0036E8  90D8               	bcf	status,0,c
  2396   0036EA  36D9               	rlcf	fsr2l,f,c
  2397   0036EC  36DA               	rlcf	fsr2h,f,c
  2398   0036EE  5168               	movf	??_returnHome& (0+255),w,b
  2399   0036F0  26D9               	addwf	fsr2l,f,c
  2400   0036F2  5169               	movf	(??_returnHome+1)& (0+255),w,b
  2401   0036F4  22DA               	addwfc	fsr2h,f,c
  2402   0036F6  0E36               	movlw	54
  2403   0036F8  24DE               	addwf	postinc2,w,c
  2404   0036FA  6F6A               	movwf	returnHome@time_ms& (0+255),b
  2405   0036FC  0EF7               	movlw	247
  2406   0036FE  20DE               	addwfc	postinc2,w,c
  2407   003700  6F6B               	movwf	(returnHome@time_ms+1)& (0+255),b
  2408   003702  0EFF               	movlw	255
  2409   003704  20DE               	addwfc	postinc2,w,c
  2410   003706  6F6C               	movwf	(returnHome@time_ms+2)& (0+255),b
  2411   003708  0EFF               	movlw	255
  2412   00370A  20DE               	addwfc	postinc2,w,c
  2413   00370C  6F6D               	movwf	(returnHome@time_ms+3)& (0+255),b
  2414                           
  2415                           ;return_func.c: 124:             }else{
  2416   00370E  EFA1  F01B         	goto	l6063
  2417   003712                     l6061:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;return_func.c: 125:                 time_ms = time[i];
  2421   003712  0E00               	movlw	low _time
  2422   003714  6F68               	movwf	??_returnHome& (0+255),b
  2423   003716  0E02               	movlw	high _time
  2424   003718  6F69               	movwf	(??_returnHome+1)& (0+255),b
  2425   00371A  90D8               	bcf	status,0,c
  2426   00371C  356F               	rlcf	returnHome@i& (0+255),w,b
  2427   00371E  6ED9               	movwf	fsr2l,c
  2428   003720  3570               	rlcf	(returnHome@i+1)& (0+255),w,b
  2429   003722  6EDA               	movwf	fsr2h,c
  2430   003724  90D8               	bcf	status,0,c
  2431   003726  36D9               	rlcf	fsr2l,f,c
  2432   003728  36DA               	rlcf	fsr2h,f,c
  2433   00372A  5168               	movf	??_returnHome& (0+255),w,b
  2434   00372C  26D9               	addwf	fsr2l,f,c
  2435   00372E  5169               	movf	(??_returnHome+1)& (0+255),w,b
  2436   003730  22DA               	addwfc	fsr2h,f,c
  2437   003732  CFDE F06A          	movff	postinc2,returnHome@time_ms
  2438   003736  CFDE F06B          	movff	postinc2,returnHome@time_ms+1
  2439   00373A  CFDE F06C          	movff	postinc2,returnHome@time_ms+2
  2440   00373E  CFDE F06D          	movff	postinc2,returnHome@time_ms+3
  2441   003742                     l6063:
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;return_func.c: 128:             if (action_turn == 0) {
  2445   003742  516E               	movf	returnHome@action_turn& (0+255),w,b
  2446   003744  A4D8               	btfss	status,2,c
  2447   003746  EFA7  F01B         	goto	u5501
  2448   00374A  EFA9  F01B         	goto	u5500
  2449   00374E                     u5501:
  2450   00374E  EFB9  F01B         	goto	l6067
  2451   003752                     u5500:
  2452   003752                     
  2453                           ; BSR set to: 0
  2454                           ;return_func.c: 129:                 reverseStraight(mL, mR, time_ms);
  2455   003752  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  2456   003756  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  2457   00375A  C06A  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  2458   00375E  C06B  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2459   003762  C06C  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2460   003766  C06D  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2461   00376A  EC39  F01D         	call	_reverseStraight	;wreg free
  2462                           
  2463                           ;return_func.c: 130:             } else {
  2464   00376E  EFD1  F01B         	goto	l6069
  2465   003772                     l6067:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;return_func.c: 131:                 reverseTurn(mL, mR, action_turn, time_ms, factorR, 
      +                          factorL);
  2469   003772  C060  F01F         	movff	returnHome@mL,reverseTurn@mL
  2470   003776  C061  F020         	movff	returnHome@mR,reverseTurn@mR
  2471   00377A  C06E  F021         	movff	returnHome@action_turn,reverseTurn@actionStep
  2472   00377E  C06A  F022         	movff	returnHome@time_ms,reverseTurn@time_ms
  2473   003782  C06B  F023         	movff	returnHome@time_ms+1,reverseTurn@time_ms+1
  2474   003786  C06C  F024         	movff	returnHome@time_ms+2,reverseTurn@time_ms+2
  2475   00378A  C06D  F025         	movff	returnHome@time_ms+3,reverseTurn@time_ms+3
  2476   00378E  C064  F026         	movff	returnHome@factorR,reverseTurn@factorR
  2477   003792  C065  F027         	movff	returnHome@factorR+1,reverseTurn@factorR+1
  2478   003796  C066  F028         	movff	returnHome@factorL,reverseTurn@factorL
  2479   00379A  C067  F029         	movff	returnHome@factorL+1,reverseTurn@factorL+1
  2480   00379E  ECE4  F01B         	call	_reverseTurn	;wreg free
  2481   0037A2                     l6069:
  2482                           
  2483                           ;return_func.c: 134:             if (i == 0) break;
  2484   0037A2  0100               	movlb	0	; () banked
  2485   0037A4  516F               	movf	returnHome@i& (0+255),w,b
  2486   0037A6  1170               	iorwf	(returnHome@i+1)& (0+255),w,b
  2487   0037A8  A4D8               	btfss	status,2,c
  2488   0037AA  EFD9  F01B         	goto	u5511
  2489   0037AE  EFDB  F01B         	goto	u5510
  2490   0037B2                     u5511:
  2491   0037B2  EFDD  F01B         	goto	l6073
  2492   0037B6                     u5510:
  2493   0037B6  EFE2  F01B         	goto	l703
  2494   0037BA                     l6073:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;return_func.c: 135:         }
  2498   0037BA  076F               	decf	returnHome@i& (0+255),f,b
  2499   0037BC  A0D8               	btfss	status,0,c
  2500   0037BE  0770               	decf	(returnHome@i+1)& (0+255),f,b
  2501   0037C0  EF45  F01B         	goto	l6053
  2502   0037C4                     l703:
  2503                           
  2504                           ; BSR set to: 0
  2505   0037C4  0003               	sleep		;# 
  2506   0037C6  0012               	return		;funcret
  2507   0037C8                     __end_of_returnHome:
  2508                           	callstack 0
  2509                           
  2510 ;; *************** function _reverseTurn *****************
  2511 ;; Defined at:
  2512 ;;		line 24 in file "return_func.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2515 ;;		 -> motorL(9), 
  2516 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2517 ;;		 -> motorR(9), 
  2518 ;;  actionStep      1   32[COMRAM] unsigned char 
  2519 ;;  time_ms         4   33[COMRAM] long 
  2520 ;;  factorR         2   37[COMRAM] unsigned int 
  2521 ;;  factorL         2   39[COMRAM] unsigned int 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2533 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;Total ram usage:       13 bytes
  2538 ;; Hardware stack levels used: 1
  2539 ;; Hardware stack levels required when called: 5
  2540 ;; This function calls:
  2541 ;;		_backHalf
  2542 ;;		_left135
  2543 ;;		_left90
  2544 ;;		_right135
  2545 ;;		_right90
  2546 ;;		_turn180
  2547 ;; This function is called by:
  2548 ;;		_returnHome
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text2
  2553   0037C8                     __ptext2:
  2554                           	callstack 0
  2555   0037C8                     _reverseTurn:
  2556                           	callstack 24
  2557   0037C8                     
  2558                           ;return_func.c: 25:     if (actionStep == 1) {
  2559   0037C8  0421               	decf	reverseTurn@actionStep^0,w,c
  2560   0037CA  A4D8               	btfss	status,2,c
  2561   0037CC  EFEA  F01B         	goto	u4401
  2562   0037D0  EFEC  F01B         	goto	u4400
  2563   0037D4                     u4401:
  2564   0037D4  EF10  F01C         	goto	l5037
  2565   0037D8                     u4400:
  2566   0037D8                     
  2567                           ;return_func.c: 28:         left90(mL,mR, factorL);
  2568   0037D8  C01F  F019         	movff	reverseTurn@mL,left90@mL
  2569   0037DC  C020  F01A         	movff	reverseTurn@mR,left90@mR
  2570   0037E0  C028  F01B         	movff	reverseTurn@factorL,left90@factorL
  2571   0037E4  C029  F01C         	movff	reverseTurn@factorL+1,left90@factorL+1
  2572   0037E8  EC68  F027         	call	_left90	;wreg free
  2573   0037EC                     l5031:
  2574                           
  2575                           ;return_func.c: 29:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2576   0037EC  0E29               	movlw	41
  2577   0037EE  6E2B               	movwf	(??_reverseTurn+1)^0,c
  2578   0037F0  0E96               	movlw	150
  2579   0037F2  6E2A               	movwf	??_reverseTurn^0,c
  2580   0037F4  0E7F               	movlw	127
  2581   0037F6                     u5677:
  2582   0037F6  2EE8               	decfsz	wreg,f,c
  2583   0037F8  D7FE               	bra	u5677
  2584   0037FA  2E2A               	decfsz	??_reverseTurn^0,f,c
  2585   0037FC  D7FC               	bra	u5677
  2586   0037FE  2E2B               	decfsz	(??_reverseTurn+1)^0,f,c
  2587   003800  D7FA               	bra	u5677
  2588   003802  0000               	nop	
  2589   003804                     
  2590                           ;return_func.c: 30:         backHalf(mL,mR);
  2591   003804  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  2592   003808  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  2593   00380C  ECB2  F027         	call	_backHalf	;wreg free
  2594   003810                     
  2595                           ;return_func.c: 31:         backHalf(mL,mR);
  2596   003810  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  2597   003814  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  2598   003818  ECB2  F027         	call	_backHalf	;wreg free
  2599                           
  2600                           ;return_func.c: 34:     } else if (actionStep == 2) {
  2601   00381C  EF8E  F01C         	goto	l690
  2602   003820                     l5037:
  2603   003820  0E02               	movlw	2
  2604   003822  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2605   003824  A4D8               	btfss	status,2,c
  2606   003826  EF17  F01C         	goto	u4411
  2607   00382A  EF19  F01C         	goto	u4410
  2608   00382E                     u4411:
  2609   00382E  EF25  F01C         	goto	l5047
  2610   003832                     u4410:
  2611   003832                     
  2612                           ;return_func.c: 37:         right90(mL,mR, factorR);
  2613   003832  C01F  F019         	movff	reverseTurn@mL,right90@mL
  2614   003836  C020  F01A         	movff	reverseTurn@mR,right90@mR
  2615   00383A  C026  F01B         	movff	reverseTurn@factorR,right90@factorR
  2616   00383E  C027  F01C         	movff	reverseTurn@factorR+1,right90@factorR+1
  2617   003842  EC4F  F027         	call	_right90	;wreg free
  2618   003846  EFF6  F01B         	goto	l5031
  2619   00384A                     l5047:
  2620   00384A  0E03               	movlw	3
  2621   00384C  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2622   00384E  A4D8               	btfss	status,2,c
  2623   003850  EF2C  F01C         	goto	u4421
  2624   003854  EF2E  F01C         	goto	u4420
  2625   003858                     u4421:
  2626   003858  EF36  F01C         	goto	l5057
  2627   00385C                     u4420:
  2628   00385C                     
  2629                           ;return_func.c: 46:         turn180(mL,mR);
  2630   00385C  C01F  F019         	movff	reverseTurn@mL,turn180@mL
  2631   003860  C020  F01A         	movff	reverseTurn@mR,turn180@mR
  2632   003864  EC36  F027         	call	_turn180	;wreg free
  2633   003868  EFF6  F01B         	goto	l5031
  2634   00386C                     l5057:
  2635   00386C  0E04               	movlw	4
  2636   00386E  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2637   003870  A4D8               	btfss	status,2,c
  2638   003872  EF3D  F01C         	goto	u4431
  2639   003876  EF3F  F01C         	goto	u4430
  2640   00387A                     u4431:
  2641   00387A  EF47  F01C         	goto	l5067
  2642   00387E                     u4430:
  2643   00387E                     
  2644                           ;return_func.c: 55:         right135(mL,mR);
  2645   00387E  C01F  F019         	movff	reverseTurn@mL,right135@mL
  2646   003882  C020  F01A         	movff	reverseTurn@mR,right135@mR
  2647   003886  ECEB  F026         	call	_right135	;wreg free
  2648   00388A  EFF6  F01B         	goto	l5031
  2649   00388E                     l5067:
  2650   00388E  0E05               	movlw	5
  2651   003890  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2652   003892  A4D8               	btfss	status,2,c
  2653   003894  EF4E  F01C         	goto	u4441
  2654   003898  EF50  F01C         	goto	u4440
  2655   00389C                     u4441:
  2656   00389C  EF68  F01C         	goto	l5073
  2657   0038A0                     u4440:
  2658   0038A0                     
  2659                           ;return_func.c: 64:         left90(mL,mR, factorL);
  2660   0038A0  C01F  F019         	movff	reverseTurn@mL,left90@mL
  2661   0038A4  C020  F01A         	movff	reverseTurn@mR,left90@mR
  2662   0038A8  C028  F01B         	movff	reverseTurn@factorL,left90@factorL
  2663   0038AC  C029  F01C         	movff	reverseTurn@factorL+1,left90@factorL+1
  2664   0038B0  EC68  F027         	call	_left90	;wreg free
  2665   0038B4                     l5071:
  2666                           
  2667                           ;return_func.c: 65:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2668   0038B4  0E29               	movlw	41
  2669   0038B6  6E2B               	movwf	(??_reverseTurn+1)^0,c
  2670   0038B8  0E96               	movlw	150
  2671   0038BA  6E2A               	movwf	??_reverseTurn^0,c
  2672   0038BC  0E7F               	movlw	127
  2673   0038BE                     u5687:
  2674   0038BE  2EE8               	decfsz	wreg,f,c
  2675   0038C0  D7FE               	bra	u5687
  2676   0038C2  2E2A               	decfsz	??_reverseTurn^0,f,c
  2677   0038C4  D7FC               	bra	u5687
  2678   0038C6  2E2B               	decfsz	(??_reverseTurn+1)^0,f,c
  2679   0038C8  D7FA               	bra	u5687
  2680   0038CA  0000               	nop	
  2681                           
  2682                           ;return_func.c: 67:     } else if (actionStep == 6) {
  2683   0038CC  EF8E  F01C         	goto	l690
  2684   0038D0                     l5073:
  2685   0038D0  0E06               	movlw	6
  2686   0038D2  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2687   0038D4  A4D8               	btfss	status,2,c
  2688   0038D6  EF6F  F01C         	goto	u4451
  2689   0038DA  EF71  F01C         	goto	u4450
  2690   0038DE                     u4451:
  2691   0038DE  EF79  F01C         	goto	l5083
  2692   0038E2                     u4450:
  2693   0038E2                     
  2694                           ;return_func.c: 70:         left135(mL,mR);
  2695   0038E2  C01F  F019         	movff	reverseTurn@mL,left135@mL
  2696   0038E6  C020  F01A         	movff	reverseTurn@mR,left135@mR
  2697   0038EA  EC9A  F027         	call	_left135	;wreg free
  2698   0038EE  EFF6  F01B         	goto	l5031
  2699   0038F2                     l5083:
  2700   0038F2  0E07               	movlw	7
  2701   0038F4  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2702   0038F6  A4D8               	btfss	status,2,c
  2703   0038F8  EF80  F01C         	goto	u4461
  2704   0038FC  EF82  F01C         	goto	u4460
  2705   003900                     u4461:
  2706   003900  EF8E  F01C         	goto	l684
  2707   003904                     u4460:
  2708   003904                     
  2709                           ;return_func.c: 79:         right90(mL,mR, factorR);
  2710   003904  C01F  F019         	movff	reverseTurn@mL,right90@mL
  2711   003908  C020  F01A         	movff	reverseTurn@mR,right90@mR
  2712   00390C  C026  F01B         	movff	reverseTurn@factorR,right90@factorR
  2713   003910  C027  F01C         	movff	reverseTurn@factorR+1,right90@factorR+1
  2714   003914  EC4F  F027         	call	_right90	;wreg free
  2715   003918  EF5A  F01C         	goto	l5071
  2716   00391C                     l684:
  2717   00391C                     l690:
  2718   00391C  0012               	return		;funcret
  2719   00391E                     __end_of_reverseTurn:
  2720                           	callstack 0
  2721                           
  2722 ;; *************** function _reverseStraight *****************
  2723 ;; Defined at:
  2724 ;;		line 88 in file "return_func.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  2727 ;;		 -> motorL(9), 
  2728 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  2729 ;;		 -> motorR(9), 
  2730 ;;  time_ms         4   82[COMRAM] long 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  delayMs         2   88[COMRAM] unsigned int 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2742 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2745 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;Total ram usage:       10 bytes
  2747 ;; Hardware stack levels used: 1
  2748 ;; Hardware stack levels required when called: 4
  2749 ;; This function calls:
  2750 ;;		_customDelayMs
  2751 ;;		_fullSpeedAhead
  2752 ;;		_stop
  2753 ;; This function is called by:
  2754 ;;		_returnHome
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text3
  2759   003A72                     __ptext3:
  2760                           	callstack 0
  2761   003A72                     _reverseStraight:
  2762                           	callstack 25
  2763   003A72                     
  2764                           ;return_func.c: 88: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 89: {;return_func.c: 91:     unsigned int delayMs = 1000;
  2765   003A72  0E03               	movlw	3
  2766   003A74  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2767   003A76  0EE8               	movlw	232
  2768   003A78  6E59               	movwf	reverseStraight@delayMs^0,c
  2769   003A7A                     
  2770                           ;return_func.c: 95:     if (time_ms>3300 && time< 5000){delayMs = 4000; }
  2771   003A7A  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2772   003A7C  EF4C  F01D         	goto	u4471
  2773   003A80  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2774   003A82  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2775   003A84  E10B               	bnz	u4470
  2776   003A86  0EE5               	movlw	229
  2777   003A88  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2778   003A8A  0E0C               	movlw	12
  2779   003A8C  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2780   003A8E  A0D8               	btfss	status,0,c
  2781   003A90  EF4C  F01D         	goto	u4471
  2782   003A94  EF4E  F01D         	goto	u4470
  2783   003A98                     u4471:
  2784   003A98  EF64  F01D         	goto	l5097
  2785   003A9C                     u4470:
  2786   003A9C  0E88               	movlw	136
  2787   003A9E  6E57               	movwf	??_reverseStraight^0,c
  2788   003AA0  0E13               	movlw	19
  2789   003AA2  6E58               	movwf	(??_reverseStraight+1)^0,c
  2790   003AA4  5058               	movf	(??_reverseStraight+1)^0,w,c
  2791   003AA6  0802               	sublw	high _time
  2792   003AA8  E102               	bnz	u4485
  2793   003AAA  5057               	movf	??_reverseStraight^0,w,c
  2794   003AAC  0800               	sublw	low _time
  2795   003AAE                     u4485:
  2796   003AAE  B0D8               	btfsc	status,0,c
  2797   003AB0  EF5C  F01D         	goto	u4481
  2798   003AB4  EF5E  F01D         	goto	u4480
  2799   003AB8                     u4481:
  2800   003AB8  EF64  F01D         	goto	l5097
  2801   003ABC                     u4480:
  2802   003ABC  0E0F               	movlw	15
  2803   003ABE  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2804   003AC0  0EA0               	movlw	160
  2805   003AC2  6E59               	movwf	reverseStraight@delayMs^0,c
  2806   003AC4  EFB9  F01D         	goto	l5111
  2807   003AC8                     l5097:
  2808   003AC8  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2809   003ACA  EF73  F01D         	goto	u4491
  2810   003ACE  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2811   003AD0  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2812   003AD2  E10B               	bnz	u4490
  2813   003AD4  0E41               	movlw	65
  2814   003AD6  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2815   003AD8  0E06               	movlw	6
  2816   003ADA  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2817   003ADC  A0D8               	btfss	status,0,c
  2818   003ADE  EF73  F01D         	goto	u4491
  2819   003AE2  EF75  F01D         	goto	u4490
  2820   003AE6                     u4491:
  2821   003AE6  EF8C  F01D         	goto	l5103
  2822   003AEA                     u4490:
  2823   003AEA  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2824   003AEC  EF86  F01D         	goto	u4500
  2825   003AF0  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2826   003AF2  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2827   003AF4  E109               	bnz	u4501
  2828   003AF6  0E80               	movlw	128
  2829   003AF8  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2830   003AFA  0E0C               	movlw	12
  2831   003AFC  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2832   003AFE  B0D8               	btfsc	status,0,c
  2833   003B00  EF84  F01D         	goto	u4501
  2834   003B04  EF86  F01D         	goto	u4500
  2835   003B08                     u4501:
  2836   003B08  EF8C  F01D         	goto	l5103
  2837   003B0C                     u4500:
  2838   003B0C  0E0A               	movlw	10
  2839   003B0E  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2840   003B10  0EBE               	movlw	190
  2841   003B12  6E59               	movwf	reverseStraight@delayMs^0,c
  2842   003B14  EFB9  F01D         	goto	l5111
  2843   003B18                     l5103:
  2844   003B18  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2845   003B1A  EF9D  F01D         	goto	u4510
  2846   003B1E  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2847   003B20  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2848   003B22  E109               	bnz	u4511
  2849   003B24  0E40               	movlw	64
  2850   003B26  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2851   003B28  0E06               	movlw	6
  2852   003B2A  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2853   003B2C  B0D8               	btfsc	status,0,c
  2854   003B2E  EF9B  F01D         	goto	u4511
  2855   003B32  EF9D  F01D         	goto	u4510
  2856   003B36                     u4511:
  2857   003B36  EFA3  F01D         	goto	l5107
  2858   003B3A                     u4510:
  2859   003B3A  0E06               	movlw	6
  2860   003B3C  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2861   003B3E  0E0E               	movlw	14
  2862   003B40  6E59               	movwf	reverseStraight@delayMs^0,c
  2863   003B42  EFB9  F01D         	goto	l5111
  2864   003B46                     l5107:
  2865   003B46  0E89               	movlw	137
  2866   003B48  6E57               	movwf	??_reverseStraight^0,c
  2867   003B4A  0E13               	movlw	19
  2868   003B4C  6E58               	movwf	(??_reverseStraight+1)^0,c
  2869   003B4E  5058               	movf	(??_reverseStraight+1)^0,w,c
  2870   003B50  0802               	sublw	high _time
  2871   003B52  E102               	bnz	u4525
  2872   003B54  5057               	movf	??_reverseStraight^0,w,c
  2873   003B56  0800               	sublw	low _time
  2874   003B58                     u4525:
  2875   003B58  A0D8               	btfss	status,0,c
  2876   003B5A  EFB1  F01D         	goto	u4521
  2877   003B5E  EFB3  F01D         	goto	u4520
  2878   003B62                     u4521:
  2879   003B62  EFB9  F01D         	goto	l696
  2880   003B66                     u4520:
  2881   003B66  0E16               	movlw	22
  2882   003B68  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2883   003B6A  0E44               	movlw	68
  2884   003B6C  6E59               	movwf	reverseStraight@delayMs^0,c
  2885   003B6E  EFB9  F01D         	goto	l5111
  2886   003B72                     l696:
  2887   003B72                     l5111:
  2888                           
  2889                           ;return_func.c: 100:     fullSpeedAhead(&motorL,&motorR);
  2890   003B72  0EE9               	movlw	low _motorL
  2891   003B74  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2892   003B76  0EE0               	movlw	low _motorR
  2893   003B78  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2894   003B7A  ECD7  F01F         	call	_fullSpeedAhead	;wreg free
  2895   003B7E                     
  2896                           ;return_func.c: 101:     customDelayMs(delayMs);
  2897   003B7E  C059  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2898   003B82  C05A  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2899   003B86  EC4F  F026         	call	_customDelayMs	;wreg free
  2900   003B8A                     
  2901                           ;return_func.c: 102:     stop(&motorL,&motorR);
  2902   003B8A  0EE9               	movlw	low _motorL
  2903   003B8C  6E14               	movwf	stop@mL^0,c
  2904   003B8E  0EE0               	movlw	low _motorR
  2905   003B90  6E15               	movwf	stop@mR^0,c
  2906   003B92  ECD9  F022         	call	_stop	;wreg free
  2907   003B96                     
  2908                           ;return_func.c: 103:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2909   003B96  0E19               	movlw	25
  2910   003B98  6E58               	movwf	(??_reverseStraight+1)^0,c
  2911   003B9A  0E5A               	movlw	90
  2912   003B9C  6E57               	movwf	??_reverseStraight^0,c
  2913   003B9E  0EB2               	movlw	178
  2914   003BA0                     u5697:
  2915   003BA0  2EE8               	decfsz	wreg,f,c
  2916   003BA2  D7FE               	bra	u5697
  2917   003BA4  2E57               	decfsz	??_reverseStraight^0,f,c
  2918   003BA6  D7FC               	bra	u5697
  2919   003BA8  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  2920   003BAA  D7FA               	bra	u5697
  2921   003BAC  0012               	return		;funcret
  2922   003BAE                     __end_of_reverseStraight:
  2923                           	callstack 0
  2924                           
  2925 ;; *************** function _fullSpeedAhead *****************
  2926 ;; Defined at:
  2927 ;;		line 144 in file "dc_motor.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  2930 ;;		 -> motorL(9), 
  2931 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  2932 ;;		 -> motorR(9), 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  power           2   78[COMRAM] int 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      void 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;Total ram usage:        5 bytes
  2949 ;; Hardware stack levels used: 1
  2950 ;; Hardware stack levels required when called: 3
  2951 ;; This function calls:
  2952 ;;		___flmul
  2953 ;;		___fltol
  2954 ;;		___xxtofl
  2955 ;;		_setMotorPWM
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;;		_reverseStraight
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text4
  2963   003FAE                     __ptext4:
  2964                           	callstack 0
  2965   003FAE                     _fullSpeedAhead:
  2966                           	callstack 25
  2967   003FAE                     
  2968                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2969   003FAE  504C               	movf	fullSpeedAhead@mL^0,w,c
  2970   003FB0  6ED9               	movwf	fsr2l,c
  2971   003FB2  6ADA               	clrf	fsr2h,c
  2972   003FB4  0E01               	movlw	1
  2973   003FB6  26D9               	addwf	fsr2l,f,c
  2974   003FB8  0E01               	movlw	1
  2975   003FBA  6EDF               	movwf	indf2,c
  2976                           
  2977                           ;dc_motor.c: 148:     mR->direction = 1;
  2978   003FBC  504D               	movf	fullSpeedAhead@mR^0,w,c
  2979   003FBE  6ED9               	movwf	fsr2l,c
  2980   003FC0  6ADA               	clrf	fsr2h,c
  2981   003FC2  0E01               	movlw	1
  2982   003FC4  26D9               	addwf	fsr2l,f,c
  2983   003FC6  0E01               	movlw	1
  2984   003FC8  6EDF               	movwf	indf2,c
  2985   003FCA                     
  2986                           ;dc_motor.c: 150:     for(int power = 0; power <= 40; power++) {
  2987   003FCA  0E00               	movlw	0
  2988   003FCC  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
  2989   003FCE  0E00               	movlw	0
  2990   003FD0  6E4F               	movwf	fullSpeedAhead@power^0,c
  2991   003FD2                     l4593:
  2992                           
  2993                           ;dc_motor.c: 151:         mL->power = power;
  2994   003FD2  504C               	movf	fullSpeedAhead@mL^0,w,c
  2995   003FD4  6ED9               	movwf	fsr2l,c
  2996   003FD6  6ADA               	clrf	fsr2h,c
  2997   003FD8  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
  2998   003FDC                     
  2999                           ;dc_motor.c: 152:         mR->power = power*1.12;
  3000   003FDC  504D               	movf	fullSpeedAhead@mR^0,w,c
  3001   003FDE  6ED9               	movwf	fsr2l,c
  3002   003FE0  6ADA               	clrf	fsr2h,c
  3003   003FE2  0E29               	movlw	41
  3004   003FE4  6E14               	movwf	___flmul@a^0,c
  3005   003FE6  0E5C               	movlw	92
  3006   003FE8  6E15               	movwf	(___flmul@a+1)^0,c
  3007   003FEA  0E8F               	movlw	143
  3008   003FEC  6E16               	movwf	(___flmul@a+2)^0,c
  3009   003FEE  0E3F               	movlw	63
  3010   003FF0  6E17               	movwf	(___flmul@a+3)^0,c
  3011   003FF2  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  3012   003FF6  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  3013   003FFA  0E00               	movlw	0
  3014   003FFC  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  3015   003FFE  0EFF               	movlw	-1
  3016   004000  6E04               	movwf	(___xxtofl@val+2)^0,c
  3017   004002  6E05               	movwf	(___xxtofl@val+3)^0,c
  3018   004004  0E01               	movlw	1
  3019   004006  ECD5  F018         	call	___xxtofl
  3020   00400A  C002  F010         	movff	?___xxtofl,___flmul@b
  3021   00400E  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  3022   004012  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  3023   004016  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  3024   00401A  EC38  F010         	call	___flmul	;wreg free
  3025   00401E  C010  F042         	movff	?___flmul,___fltol@f1
  3026   004022  C011  F043         	movff	?___flmul+1,___fltol@f1+1
  3027   004026  C012  F044         	movff	?___flmul+2,___fltol@f1+2
  3028   00402A  C013  F045         	movff	?___flmul+3,___fltol@f1+3
  3029   00402E  EC5D  F01E         	call	___fltol	;wreg free
  3030   004032  5042               	movf	?___fltol^0,w,c
  3031   004034  6EDF               	movwf	indf2,c
  3032   004036                     
  3033                           ;dc_motor.c: 155:         setMotorPWM(mL);
  3034   004036  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3035   00403A  EC8F  F01C         	call	_setMotorPWM	;wreg free
  3036   00403E                     
  3037                           ;dc_motor.c: 156:         setMotorPWM(mR);
  3038   00403E  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3039   004042  EC8F  F01C         	call	_setMotorPWM	;wreg free
  3040   004046                     
  3041                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  3042   004046  0E0B               	movlw	11
  3043   004048  6E4E               	movwf	??_fullSpeedAhead^0,c
  3044   00404A  0E62               	movlw	98
  3045   00404C                     u5707:
  3046   00404C  2EE8               	decfsz	wreg,f,c
  3047   00404E  D7FE               	bra	u5707
  3048   004050  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
  3049   004052  D7FC               	bra	u5707
  3050   004054  D000               	nop2	
  3051   004056                     
  3052                           ;dc_motor.c: 160:     }
  3053   004056  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
  3054   004058  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
  3055   00405A  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  3056   00405C  EF39  F020         	goto	u3951
  3057   004060  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
  3058   004062  E109               	bnz	u3950
  3059   004064  0E29               	movlw	41
  3060   004066  5C4F               	subwf	fullSpeedAhead@power^0,w,c
  3061   004068  A0D8               	btfss	status,0,c
  3062   00406A  EF39  F020         	goto	u3951
  3063   00406E  EF3B  F020         	goto	u3950
  3064   004072                     u3951:
  3065   004072  EFE9  F01F         	goto	l4593
  3066   004076                     u3950:
  3067   004076  0012               	return		;funcret
  3068   004078                     __end_of_fullSpeedAhead:
  3069                           	callstack 0
  3070                           
  3071 ;; *************** function _moveWhite *****************
  3072 ;; Defined at:
  3073 ;;		line 327 in file "dc_motor.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  3076 ;;		 -> motorL(9), 
  3077 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  3078 ;;		 -> motorR(9), 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3094 ;;Total ram usage:        4 bytes
  3095 ;; Hardware stack levels used: 1
  3096 ;; Hardware stack levels required when called: 5
  3097 ;; This function calls:
  3098 ;;		_backHalf
  3099 ;;		_turn180
  3100 ;; This function is called by:
  3101 ;;		_returnHome
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text5
  3106   004B78                     __ptext5:
  3107                           	callstack 0
  3108   004B78                     _moveWhite:
  3109                           	callstack 24
  3110   004B78                     
  3111                           ;dc_motor.c: 327: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          28: {;dc_motor.c: 330:     backHalf(mL,mR);
  3112   004B78  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  3113   004B7C  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  3114   004B80  ECB2  F027         	call	_backHalf	;wreg free
  3115   004B84                     
  3116                           ;dc_motor.c: 331:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3117   004B84  0E29               	movlw	41
  3118   004B86  6E20               	movwf	(??_moveWhite+1)^0,c
  3119   004B88  0E96               	movlw	150
  3120   004B8A  6E1F               	movwf	??_moveWhite^0,c
  3121   004B8C  0E7F               	movlw	127
  3122   004B8E                     u5717:
  3123   004B8E  2EE8               	decfsz	wreg,f,c
  3124   004B90  D7FE               	bra	u5717
  3125   004B92  2E1F               	decfsz	??_moveWhite^0,f,c
  3126   004B94  D7FC               	bra	u5717
  3127   004B96  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  3128   004B98  D7FA               	bra	u5717
  3129   004B9A  0000               	nop	
  3130   004B9C                     
  3131                           ;dc_motor.c: 332:     turn180(mL,mR);
  3132   004B9C  C01D  F019         	movff	moveWhite@mL,turn180@mL
  3133   004BA0  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  3134   004BA4  EC36  F027         	call	_turn180	;wreg free
  3135   004BA8                     
  3136                           ;dc_motor.c: 333:     backHalf(mL,mR);
  3137   004BA8  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  3138   004BAC  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  3139   004BB0  ECB2  F027         	call	_backHalf	;wreg free
  3140   004BB4  0012               	return		;funcret
  3141   004BB6                     __end_of_moveWhite:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _reading_hue *****************
  3145 ;; Defined at:
  3146 ;;		line 91 in file "color.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  cCurr           1   79[COMRAM] PTR struct colors
  3149 ;;		 -> colorCurrent(10), 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  led_state      50    0        unsigned char [50]
  3152 ;;  hue             2   83[COMRAM] unsigned int 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  2   79[COMRAM] unsigned int 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3166 ;;Total ram usage:        6 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; Hardware stack levels required when called: 4
  3169 ;; This function calls:
  3170 ;;		_color_read_Blue
  3171 ;;		_color_read_Clear
  3172 ;;		_color_read_Green
  3173 ;;		_color_read_Red
  3174 ;;		_convert_rgb2hue
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text6
  3181   003EC4                     __ptext6:
  3182                           	callstack 0
  3183   003EC4                     _reading_hue:
  3184                           	callstack 26
  3185   003EC4                     
  3186                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3187   003EC4  807F               	bsf	127,0,c	;volatile
  3188                           
  3189                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3190   003EC6  9E7D               	bcf	125,7,c	;volatile
  3191                           
  3192                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3193   003EC8  9679               	bcf	121,3,c	;volatile
  3194   003ECA                     
  3195                           ;color.c: 101:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3196   003ECA  0E11               	movlw	17
  3197   003ECC  6E53               	movwf	(??_reading_hue+1)^0,c
  3198   003ECE  0E3C               	movlw	60
  3199   003ED0  6E52               	movwf	??_reading_hue^0,c
  3200   003ED2  0ECB               	movlw	203
  3201   003ED4                     u5727:
  3202   003ED4  2EE8               	decfsz	wreg,f,c
  3203   003ED6  D7FE               	bra	u5727
  3204   003ED8  2E52               	decfsz	??_reading_hue^0,f,c
  3205   003EDA  D7FC               	bra	u5727
  3206   003EDC  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3207   003EDE  D7FA               	bra	u5727
  3208   003EE0  0000               	nop	
  3209   003EE2                     
  3210                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3211   003EE2  EC75  F024         	call	_color_read_Red	;wreg free
  3212   003EE6  5050               	movf	reading_hue@cCurr^0,w,c
  3213   003EE8  6ED9               	movwf	fsr2l,c
  3214   003EEA  6ADA               	clrf	fsr2h,c
  3215   003EEC  C006  FFDE         	movff	?_color_read_Red,postinc2
  3216   003EF0  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3217   003EF4                     
  3218                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3219   003EF4  907F               	bcf	127,0,c	;volatile
  3220   003EF6                     
  3221                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3222   003EF6  8E7D               	bsf	125,7,c	;volatile
  3223   003EF8                     
  3224                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3225   003EF8  9679               	bcf	121,3,c	;volatile
  3226   003EFA                     
  3227                           ;color.c: 107:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3228   003EFA  0E11               	movlw	17
  3229   003EFC  6E53               	movwf	(??_reading_hue+1)^0,c
  3230   003EFE  0E3C               	movlw	60
  3231   003F00  6E52               	movwf	??_reading_hue^0,c
  3232   003F02  0ECB               	movlw	203
  3233   003F04                     u5737:
  3234   003F04  2EE8               	decfsz	wreg,f,c
  3235   003F06  D7FE               	bra	u5737
  3236   003F08  2E52               	decfsz	??_reading_hue^0,f,c
  3237   003F0A  D7FC               	bra	u5737
  3238   003F0C  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3239   003F0E  D7FA               	bra	u5737
  3240   003F10  0000               	nop	
  3241                           
  3242                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3243   003F12  EC9D  F024         	call	_color_read_Green	;wreg free
  3244   003F16  5050               	movf	reading_hue@cCurr^0,w,c
  3245   003F18  6ED9               	movwf	fsr2l,c
  3246   003F1A  6ADA               	clrf	fsr2h,c
  3247   003F1C  0E02               	movlw	2
  3248   003F1E  26D9               	addwf	fsr2l,f,c
  3249   003F20  C006  FFDE         	movff	?_color_read_Green,postinc2
  3250   003F24  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3251   003F28                     
  3252                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3253   003F28  907F               	bcf	127,0,c	;volatile
  3254   003F2A                     
  3255                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3256   003F2A  9E7D               	bcf	125,7,c	;volatile
  3257   003F2C                     
  3258                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3259   003F2C  8679               	bsf	121,3,c	;volatile
  3260   003F2E                     
  3261                           ;color.c: 113:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3262   003F2E  0E11               	movlw	17
  3263   003F30  6E53               	movwf	(??_reading_hue+1)^0,c
  3264   003F32  0E3C               	movlw	60
  3265   003F34  6E52               	movwf	??_reading_hue^0,c
  3266   003F36  0ECB               	movlw	203
  3267   003F38                     u5747:
  3268   003F38  2EE8               	decfsz	wreg,f,c
  3269   003F3A  D7FE               	bra	u5747
  3270   003F3C  2E52               	decfsz	??_reading_hue^0,f,c
  3271   003F3E  D7FC               	bra	u5747
  3272   003F40  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3273   003F42  D7FA               	bra	u5747
  3274   003F44  0000               	nop	
  3275   003F46                     
  3276                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3277   003F46  ECED  F024         	call	_color_read_Blue	;wreg free
  3278   003F4A  5050               	movf	reading_hue@cCurr^0,w,c
  3279   003F4C  6ED9               	movwf	fsr2l,c
  3280   003F4E  6ADA               	clrf	fsr2h,c
  3281   003F50  0E04               	movlw	4
  3282   003F52  26D9               	addwf	fsr2l,f,c
  3283   003F54  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3284   003F58  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3285   003F5C                     
  3286                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3287   003F5C  807F               	bsf	127,0,c	;volatile
  3288   003F5E                     
  3289                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3290   003F5E  8E7D               	bsf	125,7,c	;volatile
  3291   003F60                     
  3292                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3293   003F60  8679               	bsf	121,3,c	;volatile
  3294                           
  3295                           ;color.c: 119:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3296   003F62  0E11               	movlw	17
  3297   003F64  6E53               	movwf	(??_reading_hue+1)^0,c
  3298   003F66  0E3C               	movlw	60
  3299   003F68  6E52               	movwf	??_reading_hue^0,c
  3300   003F6A  0ECB               	movlw	203
  3301   003F6C                     u5757:
  3302   003F6C  2EE8               	decfsz	wreg,f,c
  3303   003F6E  D7FE               	bra	u5757
  3304   003F70  2E52               	decfsz	??_reading_hue^0,f,c
  3305   003F72  D7FC               	bra	u5757
  3306   003F74  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3307   003F76  D7FA               	bra	u5757
  3308   003F78  0000               	nop	
  3309   003F7A                     
  3310                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3311   003F7A  ECC5  F024         	call	_color_read_Clear	;wreg free
  3312   003F7E  5050               	movf	reading_hue@cCurr^0,w,c
  3313   003F80  6ED9               	movwf	fsr2l,c
  3314   003F82  6ADA               	clrf	fsr2h,c
  3315   003F84  0E06               	movlw	6
  3316   003F86  26D9               	addwf	fsr2l,f,c
  3317   003F88  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3318   003F8C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3319   003F90                     
  3320                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3321   003F90  0ED6               	movlw	low _colorCalibration
  3322   003F92  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  3323   003F94  0ECC               	movlw	low _colorCurrent
  3324   003F96  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  3325   003F98  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3326   003F9C  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  3327   003FA0  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3328   003FA4                     
  3329                           ;color.c: 127:     return hue;
  3330   003FA4  C054  F050         	movff	reading_hue@hue,?_reading_hue
  3331   003FA8  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  3332   003FAC  0012               	return		;funcret
  3333   003FAE                     __end_of_reading_hue:
  3334                           	callstack 0
  3335                           
  3336 ;; *************** function _convert_rgb2hue *****************
  3337 ;; Defined at:
  3338 ;;		line 133 in file "color.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  cMax            1   75[COMRAM] PTR struct colors
  3341 ;;		 -> colorCalibration(10), 
  3342 ;;  cCurr           1   76[COMRAM] PTR struct colors
  3343 ;;		 -> colorCurrent(10), 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  c_char         20    0        unsigned char [20]
  3346 ;;  b               4   72[BANK0 ] float 
  3347 ;;  g               4   68[BANK0 ] float 
  3348 ;;  r               4   64[BANK0 ] float 
  3349 ;;  hue             4   60[BANK0 ] float 
  3350 ;;  max             4   56[BANK0 ] float 
  3351 ;;  diff            4   52[BANK0 ] float 
  3352 ;;  min             4   48[BANK0 ] float 
  3353 ;;  clearmax        4   28[BANK0 ] float 
  3354 ;;  clearcurrent    4   24[BANK0 ] float 
  3355 ;;  bluemax         4   20[BANK0 ] float 
  3356 ;;  bluecurrent     4   16[BANK0 ] float 
  3357 ;;  greenmax        4   12[BANK0 ] float 
  3358 ;;  greencurrent    4    8[BANK0 ] float 
  3359 ;;  redmax          4    4[BANK0 ] float 
  3360 ;;  redcurrent      4    0[BANK0 ] float 
  3361 ;;  c               4    0        float 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  2   75[COMRAM] unsigned int 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;Total ram usage:       80 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; Hardware stack levels required when called: 3
  3378 ;; This function calls:
  3379 ;;		___fladd
  3380 ;;		___fldiv
  3381 ;;		___fleq
  3382 ;;		___flge
  3383 ;;		___flmul
  3384 ;;		___flsub
  3385 ;;		___fltol
  3386 ;;		___xxtofl
  3387 ;; This function is called by:
  3388 ;;		_reading_hue
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text7
  3393   000EC6                     __ptext7:
  3394                           	callstack 0
  3395   000EC6                     _convert_rgb2hue:
  3396                           	callstack 26
  3397   000EC6                     
  3398                           ;color.c: 133: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 134: {;color.c: 135:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 136:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3399   000EC6  0E00               	movlw	0
  3400   000EC8  0100               	movlb	0	; () banked
  3401   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3402   000ECC  0E00               	movlw	0
  3403   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3404   000ED0  0E00               	movlw	0
  3405   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3406   000ED4  0E00               	movlw	0
  3407   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3408   000ED8                     
  3409                           ; BSR set to: 0
  3410                           ;color.c: 138:     redcurrent = cCurr->red;
  3411   000ED8  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3412   000EDA  6ED9               	movwf	fsr2l,c
  3413   000EDC  6ADA               	clrf	fsr2h,c
  3414   000EDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3415   000EE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3416   000EE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3417   000EEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3418   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3419   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3420   000EF2  0E00               	movlw	0
  3421   000EF4  ECD5  F018         	call	___xxtofl
  3422   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3423   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3424   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3425   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3426   000F08                     
  3427                           ;color.c: 139:     redmax = cMax->red;
  3428   000F08  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3429   000F0A  6ED9               	movwf	fsr2l,c
  3430   000F0C  6ADA               	clrf	fsr2h,c
  3431   000F0E  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3432   000F12  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3433   000F16  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3434   000F1A  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3435   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3436   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3437   000F22  0E00               	movlw	0
  3438   000F24  ECD5  F018         	call	___xxtofl
  3439   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3440   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3441   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3442   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3443   000F38                     
  3444                           ;color.c: 140:     greencurrent = cCurr->green;
  3445   000F38  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3446   000F3A  6ED9               	movwf	fsr2l,c
  3447   000F3C  6ADA               	clrf	fsr2h,c
  3448   000F3E  0E02               	movlw	2
  3449   000F40  26D9               	addwf	fsr2l,f,c
  3450   000F42  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3451   000F46  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3452   000F4A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3453   000F4E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3454   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3455   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3456   000F56  0E00               	movlw	0
  3457   000F58  ECD5  F018         	call	___xxtofl
  3458   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3459   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3460   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3461   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3462   000F6C                     
  3463                           ;color.c: 141:     greenmax = cMax->green;
  3464   000F6C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3465   000F6E  6ED9               	movwf	fsr2l,c
  3466   000F70  6ADA               	clrf	fsr2h,c
  3467   000F72  0E02               	movlw	2
  3468   000F74  26D9               	addwf	fsr2l,f,c
  3469   000F76  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3470   000F7A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3471   000F7E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3472   000F82  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3473   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3474   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3475   000F8A  0E00               	movlw	0
  3476   000F8C  ECD5  F018         	call	___xxtofl
  3477   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3478   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3479   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3480   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3481   000FA0                     
  3482                           ;color.c: 142:     bluecurrent = cCurr->blue;
  3483   000FA0  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3484   000FA2  6ED9               	movwf	fsr2l,c
  3485   000FA4  6ADA               	clrf	fsr2h,c
  3486   000FA6  0E04               	movlw	4
  3487   000FA8  26D9               	addwf	fsr2l,f,c
  3488   000FAA  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3489   000FAE  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3490   000FB2  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3491   000FB6  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3492   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3493   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3494   000FBE  0E00               	movlw	0
  3495   000FC0  ECD5  F018         	call	___xxtofl
  3496   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3497   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3498   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3499   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3500   000FD4                     
  3501                           ;color.c: 143:     bluemax = cMax->blue;
  3502   000FD4  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3503   000FD6  6ED9               	movwf	fsr2l,c
  3504   000FD8  6ADA               	clrf	fsr2h,c
  3505   000FDA  0E04               	movlw	4
  3506   000FDC  26D9               	addwf	fsr2l,f,c
  3507   000FDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3508   000FE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3509   000FE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3510   000FEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3511   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3512   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3513   000FF2  0E00               	movlw	0
  3514   000FF4  ECD5  F018         	call	___xxtofl
  3515   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3516   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3517   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3518   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3519   001008                     
  3520                           ;color.c: 144:     clearcurrent = cCurr->clear;
  3521   001008  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3522   00100A  6ED9               	movwf	fsr2l,c
  3523   00100C  6ADA               	clrf	fsr2h,c
  3524   00100E  0E06               	movlw	6
  3525   001010  26D9               	addwf	fsr2l,f,c
  3526   001012  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3527   001016  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3528   00101A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3529   00101E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3530   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3531   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3532   001026  0E00               	movlw	0
  3533   001028  ECD5  F018         	call	___xxtofl
  3534   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3535   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3536   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3537   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3538   00103C                     
  3539                           ;color.c: 145:     clearmax = cMax->clear;
  3540   00103C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3541   00103E  6ED9               	movwf	fsr2l,c
  3542   001040  6ADA               	clrf	fsr2h,c
  3543   001042  0E06               	movlw	6
  3544   001044  26D9               	addwf	fsr2l,f,c
  3545   001046  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3546   00104A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3547   00104E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3548   001052  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3549   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3550   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3551   00105A  0E00               	movlw	0
  3552   00105C  ECD5  F018         	call	___xxtofl
  3553   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3554   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3555   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3556   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3557   001070  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3558   001074  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3559   001078  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3560   00107C  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3561   001080  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3562   001084  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3563   001088  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3564   00108C  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3565   001090  EC4D  F012         	call	___fldiv	;wreg free
  3566   001094                     
  3567                           ;color.c: 148:     char c_char[20];;color.c: 154:     r = redcurrent/redmax;
  3568   001094  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3569   001098  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3570   00109C  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3571   0010A0  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3572   0010A4  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  3573   0010A8  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3574   0010AC  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3575   0010B0  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3576   0010B4  EC4D  F012         	call	___fldiv	;wreg free
  3577   0010B8  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3578   0010BC  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3579   0010C0  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3580   0010C4  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3581   0010C8                     
  3582                           ;color.c: 155:     g = greencurrent/greenmax;
  3583   0010C8  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3584   0010CC  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3585   0010D0  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3586   0010D4  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3587   0010D8  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3588   0010DC  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3589   0010E0  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3590   0010E4  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3591   0010E8  EC4D  F012         	call	___fldiv	;wreg free
  3592   0010EC  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3593   0010F0  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3594   0010F4  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3595   0010F8  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3596   0010FC                     
  3597                           ;color.c: 156:     b = bluecurrent/bluemax;
  3598   0010FC  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3599   001100  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3600   001104  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3601   001108  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3602   00110C  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3603   001110  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3604   001114  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3605   001118  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3606   00111C  EC4D  F012         	call	___fldiv	;wreg free
  3607   001120  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3608   001124  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3609   001128  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3610   00112C  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3611   001130                     
  3612                           ;color.c: 158:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3613   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3614   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3615   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3616   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3617   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3618   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3619   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3620   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3621   001150  ECE0  F01E         	call	___flge	;wreg free
  3622   001154  A0D8               	btfss	status,0,c
  3623   001156  EFAF  F008         	goto	u4281
  3624   00115A  EFB1  F008         	goto	u4280
  3625   00115E                     u4281:
  3626   00115E  EFE6  F008         	goto	l4931
  3627   001162                     u4280:
  3628   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3629   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3630   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3631   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3632   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3633   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3634   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3635   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3636   001182  ECE0  F01E         	call	___flge	;wreg free
  3637   001186  A0D8               	btfss	status,0,c
  3638   001188  EFC8  F008         	goto	u4291
  3639   00118C  EFCA  F008         	goto	u4290
  3640   001190                     u4291:
  3641   001190  EFD4  F008         	goto	l99
  3642   001194                     u4290:
  3643   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$364
  3644   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$364+1
  3645   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$364+2
  3646   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$364+3
  3647   0011A4  EFDC  F008         	goto	l101
  3648   0011A8                     l99:
  3649   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$364
  3650   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$364+1
  3651   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$364+2
  3652   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$364+3
  3653   0011B8                     l101:
  3654   0011B8  C080  F090         	movff	_convert_rgb2hue$364,convert_rgb2hue@min
  3655   0011BC  C081  F091         	movff	_convert_rgb2hue$364+1,convert_rgb2hue@min+1
  3656   0011C0  C082  F092         	movff	_convert_rgb2hue$364+2,convert_rgb2hue@min+2
  3657   0011C4  C083  F093         	movff	_convert_rgb2hue$364+3,convert_rgb2hue@min+3
  3658   0011C8  EF19  F009         	goto	l4935
  3659   0011CC                     l4931:
  3660   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3661   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3662   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3663   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3664   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3665   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3666   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3667   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3668   0011EC  ECE0  F01E         	call	___flge	;wreg free
  3669   0011F0  A0D8               	btfss	status,0,c
  3670   0011F2  EFFD  F008         	goto	u4301
  3671   0011F6  EFFF  F008         	goto	u4300
  3672   0011FA                     u4301:
  3673   0011FA  EF09  F009         	goto	l103
  3674   0011FE                     u4300:
  3675   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$365
  3676   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$365+1
  3677   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$365+2
  3678   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$365+3
  3679   00120E  EF11  F009         	goto	l105
  3680   001212                     l103:
  3681   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$365
  3682   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$365+1
  3683   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$365+2
  3684   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$365+3
  3685   001222                     l105:
  3686   001222  C084  F090         	movff	_convert_rgb2hue$365,convert_rgb2hue@min
  3687   001226  C085  F091         	movff	_convert_rgb2hue$365+1,convert_rgb2hue@min+1
  3688   00122A  C086  F092         	movff	_convert_rgb2hue$365+2,convert_rgb2hue@min+2
  3689   00122E  C087  F093         	movff	_convert_rgb2hue$365+3,convert_rgb2hue@min+3
  3690   001232                     l4935:
  3691                           
  3692                           ;color.c: 159:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3693   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3694   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3695   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3696   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3697   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3698   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3699   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3700   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3701   001252  ECE0  F01E         	call	___flge	;wreg free
  3702   001256  A0D8               	btfss	status,0,c
  3703   001258  EF30  F009         	goto	u4311
  3704   00125C  EF32  F009         	goto	u4310
  3705   001260                     u4311:
  3706   001260  EF67  F009         	goto	l4941
  3707   001264                     u4310:
  3708   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3709   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3710   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3711   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3712   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3713   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3714   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3715   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3716   001284  ECE0  F01E         	call	___flge	;wreg free
  3717   001288  A0D8               	btfss	status,0,c
  3718   00128A  EF49  F009         	goto	u4321
  3719   00128E  EF4B  F009         	goto	u4320
  3720   001292                     u4321:
  3721   001292  EF55  F009         	goto	l111
  3722   001296                     u4320:
  3723   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$366
  3724   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$366+1
  3725   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$366+2
  3726   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$366+3
  3727   0012A6  EF5D  F009         	goto	l113
  3728   0012AA                     l111:
  3729   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$366
  3730   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$366+1
  3731   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$366+2
  3732   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$366+3
  3733   0012BA                     l113:
  3734   0012BA  C088  F098         	movff	_convert_rgb2hue$366,convert_rgb2hue@max
  3735   0012BE  C089  F099         	movff	_convert_rgb2hue$366+1,convert_rgb2hue@max+1
  3736   0012C2  C08A  F09A         	movff	_convert_rgb2hue$366+2,convert_rgb2hue@max+2
  3737   0012C6  C08B  F09B         	movff	_convert_rgb2hue$366+3,convert_rgb2hue@max+3
  3738   0012CA  EF9A  F009         	goto	l4945
  3739   0012CE                     l4941:
  3740   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3741   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3742   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3743   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3744   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3745   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3746   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3747   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3748   0012EE  ECE0  F01E         	call	___flge	;wreg free
  3749   0012F2  A0D8               	btfss	status,0,c
  3750   0012F4  EF7E  F009         	goto	u4331
  3751   0012F8  EF80  F009         	goto	u4330
  3752   0012FC                     u4331:
  3753   0012FC  EF8A  F009         	goto	l115
  3754   001300                     u4330:
  3755   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$367
  3756   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$367+1
  3757   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$367+2
  3758   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$367+3
  3759   001310  EF92  F009         	goto	l117
  3760   001314                     l115:
  3761   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$367
  3762   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$367+1
  3763   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$367+2
  3764   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$367+3
  3765   001324                     l117:
  3766   001324  C08C  F098         	movff	_convert_rgb2hue$367,convert_rgb2hue@max
  3767   001328  C08D  F099         	movff	_convert_rgb2hue$367+1,convert_rgb2hue@max+1
  3768   00132C  C08E  F09A         	movff	_convert_rgb2hue$367+2,convert_rgb2hue@max+2
  3769   001330  C08F  F09B         	movff	_convert_rgb2hue$367+3,convert_rgb2hue@max+3
  3770   001334                     l4945:
  3771                           
  3772                           ;color.c: 160:     diff = max - min;
  3773   001334  C098  F020         	movff	convert_rgb2hue@max,___flsub@b
  3774   001338  C099  F021         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3775   00133C  C09A  F022         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3776   001340  C09B  F023         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3777   001344  C090  F024         	movff	convert_rgb2hue@min,___flsub@a
  3778   001348  C091  F025         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3779   00134C  C092  F026         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3780   001350  C093  F027         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3781   001354  EC15  F025         	call	___flsub	;wreg free
  3782   001358  C020  F094         	movff	?___flsub,convert_rgb2hue@diff
  3783   00135C  C021  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3784   001360  C022  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3785   001364  C023  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3786                           
  3787                           ;color.c: 161:     if (max == min) {
  3788   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3789   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3790   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3791   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3792   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3793   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3794   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3795   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3796   001388  EC4D  F021         	call	___fleq	;wreg free
  3797   00138C  A0D8               	btfss	status,0,c
  3798   00138E  EFCB  F009         	goto	u4341
  3799   001392  EFCD  F009         	goto	u4340
  3800   001396                     u4341:
  3801   001396  EFD8  F009         	goto	l4949
  3802   00139A                     u4340:
  3803   00139A                     
  3804                           ;color.c: 162:         hue = 0;
  3805   00139A  0E00               	movlw	0
  3806   00139C  0100               	movlb	0	; () banked
  3807   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3808   0013A0  0E00               	movlw	0
  3809   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3810   0013A4  0E00               	movlw	0
  3811   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3812   0013A8  0E00               	movlw	0
  3813   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3814                           
  3815                           ;color.c: 163:     } else if (max == r){
  3816   0013AC  EFE1  F00A         	goto	l4961
  3817   0013B0                     l4949:
  3818   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3819   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3820   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3821   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3822   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3823   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3824   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3825   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3826   0013D0  EC4D  F021         	call	___fleq	;wreg free
  3827   0013D4  A0D8               	btfss	status,0,c
  3828   0013D6  EFEF  F009         	goto	u4351
  3829   0013DA  EFF1  F009         	goto	u4350
  3830   0013DE                     u4351:
  3831   0013DE  EF1F  F00A         	goto	l4953
  3832   0013E2                     u4350:
  3833   0013E2                     
  3834                           ;color.c: 164:         hue = (b - g) / diff;
  3835   0013E2  C0A4  F024         	movff	convert_rgb2hue@g,___flsub@a
  3836   0013E6  C0A5  F025         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3837   0013EA  C0A6  F026         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3838   0013EE  C0A7  F027         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3839   0013F2  C0A8  F020         	movff	convert_rgb2hue@b,___flsub@b
  3840   0013F6  C0A9  F021         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3841   0013FA  C0AA  F022         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3842   0013FE  C0AB  F023         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3843   001402  EC15  F025         	call	___flsub	;wreg free
  3844   001406  C020  F029         	movff	?___flsub,___fldiv@b
  3845   00140A  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  3846   00140E  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  3847   001412  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  3848   001416  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3849   00141A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3850   00141E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3851   001422  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3852   001426  EC4D  F012         	call	___fldiv	;wreg free
  3853   00142A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3854   00142E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3855   001432  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3856   001436  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3857                           
  3858                           ;color.c: 165:     } else if (max == g){
  3859   00143A  EFE1  F00A         	goto	l4961
  3860   00143E                     l4953:
  3861   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3862   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3863   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3864   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3865   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3866   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3867   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3868   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3869   00145E  EC4D  F021         	call	___fleq	;wreg free
  3870   001462  A0D8               	btfss	status,0,c
  3871   001464  EF36  F00A         	goto	u4361
  3872   001468  EF38  F00A         	goto	u4360
  3873   00146C                     u4361:
  3874   00146C  EF80  F00A         	goto	l4957
  3875   001470                     u4360:
  3876   001470                     
  3877                           ;color.c: 166:         hue = (b - r) / diff;
  3878   001470  C0A0  F024         	movff	convert_rgb2hue@r,___flsub@a
  3879   001474  C0A1  F025         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3880   001478  C0A2  F026         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3881   00147C  C0A3  F027         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3882   001480  C0A8  F020         	movff	convert_rgb2hue@b,___flsub@b
  3883   001484  C0A9  F021         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3884   001488  C0AA  F022         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3885   00148C  C0AB  F023         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3886   001490  EC15  F025         	call	___flsub	;wreg free
  3887   001494  C020  F029         	movff	?___flsub,___fldiv@b
  3888   001498  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  3889   00149C  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  3890   0014A0  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  3891   0014A4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3892   0014A8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3893   0014AC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3894   0014B0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3895   0014B4  EC4D  F012         	call	___fldiv	;wreg free
  3896   0014B8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3897   0014BC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3898   0014C0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3899   0014C4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3900                           
  3901                           ;color.c: 167:         hue = hue + 2;
  3902   0014C8  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  3903   0014CC  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3904   0014D0  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3905   0014D4  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3906   0014D8  0E00               	movlw	0
  3907   0014DA  6E14               	movwf	___fladd@a^0,c
  3908   0014DC  0E00               	movlw	0
  3909   0014DE  6E15               	movwf	(___fladd@a+1)^0,c
  3910   0014E0  0E00               	movlw	0
  3911   0014E2  6E16               	movwf	(___fladd@a+2)^0,c
  3912   0014E4  0E40               	movlw	64
  3913   0014E6  6E17               	movwf	(___fladd@a+3)^0,c
  3914   0014E8  ECD8  F00D         	call	___fladd	;wreg free
  3915   0014EC  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3916   0014F0  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3917   0014F4  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3918   0014F8  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3919                           
  3920                           ;color.c: 168:     } else if (max == b){
  3921   0014FC  EFE1  F00A         	goto	l4961
  3922   001500                     l4957:
  3923   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3924   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3925   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3926   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3927   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3928   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3929   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3930   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3931   001520  EC4D  F021         	call	___fleq	;wreg free
  3932   001524  A0D8               	btfss	status,0,c
  3933   001526  EF97  F00A         	goto	u4371
  3934   00152A  EF99  F00A         	goto	u4370
  3935   00152E                     u4371:
  3936   00152E  EFE1  F00A         	goto	l121
  3937   001532                     u4370:
  3938   001532                     
  3939                           ;color.c: 169:         hue = (r - g) / diff;
  3940   001532  C0A4  F024         	movff	convert_rgb2hue@g,___flsub@a
  3941   001536  C0A5  F025         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3942   00153A  C0A6  F026         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3943   00153E  C0A7  F027         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3944   001542  C0A0  F020         	movff	convert_rgb2hue@r,___flsub@b
  3945   001546  C0A1  F021         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3946   00154A  C0A2  F022         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3947   00154E  C0A3  F023         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3948   001552  EC15  F025         	call	___flsub	;wreg free
  3949   001556  C020  F029         	movff	?___flsub,___fldiv@b
  3950   00155A  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  3951   00155E  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  3952   001562  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  3953   001566  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3954   00156A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3955   00156E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3956   001572  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3957   001576  EC4D  F012         	call	___fldiv	;wreg free
  3958   00157A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3959   00157E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3960   001582  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3961   001586  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3962                           
  3963                           ;color.c: 170:         hue = hue + 4;
  3964   00158A  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  3965   00158E  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3966   001592  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3967   001596  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3968   00159A  0E00               	movlw	0
  3969   00159C  6E14               	movwf	___fladd@a^0,c
  3970   00159E  0E00               	movlw	0
  3971   0015A0  6E15               	movwf	(___fladd@a+1)^0,c
  3972   0015A2  0E80               	movlw	128
  3973   0015A4  6E16               	movwf	(___fladd@a+2)^0,c
  3974   0015A6  0E40               	movlw	64
  3975   0015A8  6E17               	movwf	(___fladd@a+3)^0,c
  3976   0015AA  ECD8  F00D         	call	___fladd	;wreg free
  3977   0015AE  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3978   0015B2  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3979   0015B6  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3980   0015BA  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3981   0015BE  EFE1  F00A         	goto	l4961
  3982   0015C2                     l121:
  3983   0015C2                     l4961:
  3984                           
  3985                           ;color.c: 173:     hue = hue * 60;
  3986   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3987   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3988   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3989   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3990   0015D2  0E00               	movlw	0
  3991   0015D4  6E14               	movwf	___flmul@a^0,c
  3992   0015D6  0E00               	movlw	0
  3993   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3994   0015DA  0E70               	movlw	112
  3995   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3996   0015DE  0E42               	movlw	66
  3997   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3998   0015E2  EC38  F010         	call	___flmul	;wreg free
  3999   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  4000   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  4001   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  4002   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  4003   0015F6                     
  4004                           ;color.c: 174:     if (hue < 0) {
  4005   0015F6  0100               	movlb	0	; () banked
  4006   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  4007   0015FA  EF03  F00B         	goto	u4380
  4008   0015FE  EF01  F00B         	goto	u4381
  4009   001602                     u4381:
  4010   001602  EF1D  F00B         	goto	l125
  4011   001606                     u4380:
  4012   001606                     
  4013                           ; BSR set to: 0
  4014                           ;color.c: 175:         hue = hue + 360;
  4015   001606  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  4016   00160A  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  4017   00160E  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  4018   001612  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  4019   001616  0E00               	movlw	0
  4020   001618  6E14               	movwf	___fladd@a^0,c
  4021   00161A  0E00               	movlw	0
  4022   00161C  6E15               	movwf	(___fladd@a+1)^0,c
  4023   00161E  0EB4               	movlw	180
  4024   001620  6E16               	movwf	(___fladd@a+2)^0,c
  4025   001622  0E43               	movlw	67
  4026   001624  6E17               	movwf	(___fladd@a+3)^0,c
  4027   001626  ECD8  F00D         	call	___fladd	;wreg free
  4028   00162A  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  4029   00162E  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  4030   001632  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  4031   001636  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  4032   00163A                     l125:
  4033                           
  4034                           ;color.c: 178:     return (unsigned int)hue;
  4035   00163A  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  4036   00163E  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  4037   001642  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  4038   001646  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  4039   00164A  EC5D  F01E         	call	___fltol	;wreg free
  4040   00164E  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  4041   001652  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  4042   001656  0012               	return		;funcret
  4043   001658                     __end_of_convert_rgb2hue:
  4044                           	callstack 0
  4045                           
  4046 ;; *************** function ___flmul *****************
  4047 ;; Defined at:
  4048 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  b               4   15[COMRAM] unsigned int 
  4051 ;;  a               4   19[COMRAM] unsigned int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  prod            4   34[COMRAM] struct .
  4054 ;;  grs             4   28[COMRAM] unsigned long 
  4055 ;;  temp            2   38[COMRAM] struct .
  4056 ;;  bexp            1   33[COMRAM] unsigned char 
  4057 ;;  aexp            1   32[COMRAM] unsigned char 
  4058 ;;  sign            1   27[COMRAM] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  4   15[COMRAM] unsigned char 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, prodl, prodh
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4068 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4071 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;Total ram usage:       25 bytes
  4073 ;; Hardware stack levels used: 1
  4074 ;; Hardware stack levels required when called: 1
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_convert_rgb2hue
  4079 ;;		_main
  4080 ;;		_fullSpeedAhead
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text8
  4085   002070                     __ptext8:
  4086                           	callstack 0
  4087   002070                     ___flmul:
  4088                           	callstack 26
  4089   002070  5013               	movf	(___flmul@b+3)^0,w,c
  4090   002072  0B80               	andlw	128
  4091   002074  6E1C               	movwf	___flmul@sign^0,c
  4092   002076  5013               	movf	(___flmul@b+3)^0,w,c
  4093   002078  2413               	addwf	(___flmul@b+3)^0,w,c
  4094   00207A  6E22               	movwf	___flmul@bexp^0,c
  4095   00207C  AE12               	btfss	(___flmul@b+2)^0,7,c
  4096   00207E  EF43  F010         	goto	u3561
  4097   002082  EF45  F010         	goto	u3560
  4098   002086                     u3561:
  4099   002086  EF46  F010         	goto	l4331
  4100   00208A                     u3560:
  4101   00208A  8022               	bsf	___flmul@bexp^0,0,c
  4102   00208C                     l4331:
  4103   00208C  5022               	movf	___flmul@bexp^0,w,c
  4104   00208E  B4D8               	btfsc	status,2,c
  4105   002090  EF4C  F010         	goto	u3571
  4106   002094  EF4E  F010         	goto	u3570
  4107   002098                     u3571:
  4108   002098  EF61  F010         	goto	l4339
  4109   00209C                     u3570:
  4110   00209C  2822               	incf	___flmul@bexp^0,w,c
  4111   00209E  A4D8               	btfss	status,2,c
  4112   0020A0  EF54  F010         	goto	u3581
  4113   0020A4  EF56  F010         	goto	u3580
  4114   0020A8                     u3581:
  4115   0020A8  EF5E  F010         	goto	l4337
  4116   0020AC                     u3580:
  4117   0020AC  0E00               	movlw	0
  4118   0020AE  6E10               	movwf	___flmul@b^0,c
  4119   0020B0  0E00               	movlw	0
  4120   0020B2  6E11               	movwf	(___flmul@b+1)^0,c
  4121   0020B4  0E00               	movlw	0
  4122   0020B6  6E12               	movwf	(___flmul@b+2)^0,c
  4123   0020B8  0E00               	movlw	0
  4124   0020BA  6E13               	movwf	(___flmul@b+3)^0,c
  4125   0020BC                     l4337:
  4126   0020BC  8E12               	bsf	(___flmul@b+2)^0,7,c
  4127   0020BE  EF69  F010         	goto	l4341
  4128   0020C2                     l4339:
  4129   0020C2  0E00               	movlw	0
  4130   0020C4  6E10               	movwf	___flmul@b^0,c
  4131   0020C6  0E00               	movlw	0
  4132   0020C8  6E11               	movwf	(___flmul@b+1)^0,c
  4133   0020CA  0E00               	movlw	0
  4134   0020CC  6E12               	movwf	(___flmul@b+2)^0,c
  4135   0020CE  0E00               	movlw	0
  4136   0020D0  6E13               	movwf	(___flmul@b+3)^0,c
  4137   0020D2                     l4341:
  4138   0020D2  5017               	movf	(___flmul@a+3)^0,w,c
  4139   0020D4  0B80               	andlw	128
  4140   0020D6  1A1C               	xorwf	___flmul@sign^0,f,c
  4141   0020D8  5017               	movf	(___flmul@a+3)^0,w,c
  4142   0020DA  2417               	addwf	(___flmul@a+3)^0,w,c
  4143   0020DC  6E21               	movwf	___flmul@aexp^0,c
  4144   0020DE  AE16               	btfss	(___flmul@a+2)^0,7,c
  4145   0020E0  EF74  F010         	goto	u3591
  4146   0020E4  EF76  F010         	goto	u3590
  4147   0020E8                     u3591:
  4148   0020E8  EF77  F010         	goto	l4349
  4149   0020EC                     u3590:
  4150   0020EC  8021               	bsf	___flmul@aexp^0,0,c
  4151   0020EE                     l4349:
  4152   0020EE  5021               	movf	___flmul@aexp^0,w,c
  4153   0020F0  B4D8               	btfsc	status,2,c
  4154   0020F2  EF7D  F010         	goto	u3601
  4155   0020F6  EF7F  F010         	goto	u3600
  4156   0020FA                     u3601:
  4157   0020FA  EF92  F010         	goto	l4357
  4158   0020FE                     u3600:
  4159   0020FE  2821               	incf	___flmul@aexp^0,w,c
  4160   002100  A4D8               	btfss	status,2,c
  4161   002102  EF85  F010         	goto	u3611
  4162   002106  EF87  F010         	goto	u3610
  4163   00210A                     u3611:
  4164   00210A  EF8F  F010         	goto	l4355
  4165   00210E                     u3610:
  4166   00210E  0E00               	movlw	0
  4167   002110  6E14               	movwf	___flmul@a^0,c
  4168   002112  0E00               	movlw	0
  4169   002114  6E15               	movwf	(___flmul@a+1)^0,c
  4170   002116  0E00               	movlw	0
  4171   002118  6E16               	movwf	(___flmul@a+2)^0,c
  4172   00211A  0E00               	movlw	0
  4173   00211C  6E17               	movwf	(___flmul@a+3)^0,c
  4174   00211E                     l4355:
  4175   00211E  8E16               	bsf	(___flmul@a+2)^0,7,c
  4176   002120  EF9A  F010         	goto	l1463
  4177   002124                     l4357:
  4178   002124  0E00               	movlw	0
  4179   002126  6E14               	movwf	___flmul@a^0,c
  4180   002128  0E00               	movlw	0
  4181   00212A  6E15               	movwf	(___flmul@a+1)^0,c
  4182   00212C  0E00               	movlw	0
  4183   00212E  6E16               	movwf	(___flmul@a+2)^0,c
  4184   002130  0E00               	movlw	0
  4185   002132  6E17               	movwf	(___flmul@a+3)^0,c
  4186   002134                     l1463:
  4187   002134  5021               	movf	___flmul@aexp^0,w,c
  4188   002136  B4D8               	btfsc	status,2,c
  4189   002138  EFA0  F010         	goto	u3621
  4190   00213C  EFA2  F010         	goto	u3620
  4191   002140                     u3621:
  4192   002140  EFAA  F010         	goto	l4361
  4193   002144                     u3620:
  4194   002144  5022               	movf	___flmul@bexp^0,w,c
  4195   002146  A4D8               	btfss	status,2,c
  4196   002148  EFA8  F010         	goto	u3631
  4197   00214C  EFAA  F010         	goto	u3630
  4198   002150                     u3631:
  4199   002150  EFB4  F010         	goto	l4365
  4200   002154                     u3630:
  4201   002154                     l4361:
  4202   002154  0E00               	movlw	0
  4203   002156  6E10               	movwf	?___flmul^0,c
  4204   002158  0E00               	movlw	0
  4205   00215A  6E11               	movwf	(?___flmul+1)^0,c
  4206   00215C  0E00               	movlw	0
  4207   00215E  6E12               	movwf	(?___flmul+2)^0,c
  4208   002160  0E00               	movlw	0
  4209   002162  6E13               	movwf	(?___flmul+3)^0,c
  4210   002164  EF4C  F012         	goto	l1467
  4211   002168                     l4365:
  4212   002168  5016               	movf	(___flmul@a+2)^0,w,c
  4213   00216A  0210               	mulwf	___flmul@b^0,c
  4214   00216C  CFF3 F027          	movff	prodl,___flmul@temp
  4215   002170  CFF4 F028          	movff	prodh,___flmul@temp+1
  4216   002174  5027               	movf	___flmul@temp^0,w,c
  4217   002176  6E1D               	movwf	___flmul@grs^0,c
  4218   002178  6A1E               	clrf	(___flmul@grs+1)^0,c
  4219   00217A  6A1F               	clrf	(___flmul@grs+2)^0,c
  4220   00217C  6A20               	clrf	(___flmul@grs+3)^0,c
  4221   00217E  5028               	movf	(___flmul@temp+1)^0,w,c
  4222   002180  6E23               	movwf	___flmul@prod^0,c
  4223   002182  6A24               	clrf	(___flmul@prod+1)^0,c
  4224   002184  6A25               	clrf	(___flmul@prod+2)^0,c
  4225   002186  6A26               	clrf	(___flmul@prod+3)^0,c
  4226   002188  5015               	movf	(___flmul@a+1)^0,w,c
  4227   00218A  0211               	mulwf	(___flmul@b+1)^0,c
  4228   00218C  CFF3 F027          	movff	prodl,___flmul@temp
  4229   002190  CFF4 F028          	movff	prodh,___flmul@temp+1
  4230   002194  5027               	movf	___flmul@temp^0,w,c
  4231   002196  261D               	addwf	___flmul@grs^0,f,c
  4232   002198  0E00               	movlw	0
  4233   00219A  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4234   00219C  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4235   00219E  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4236   0021A0  5028               	movf	(___flmul@temp+1)^0,w,c
  4237   0021A2  2623               	addwf	___flmul@prod^0,f,c
  4238   0021A4  0E00               	movlw	0
  4239   0021A6  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4240   0021A8  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4241   0021AA  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4242   0021AC  5014               	movf	___flmul@a^0,w,c
  4243   0021AE  0212               	mulwf	(___flmul@b+2)^0,c
  4244   0021B0  CFF3 F027          	movff	prodl,___flmul@temp
  4245   0021B4  CFF4 F028          	movff	prodh,___flmul@temp+1
  4246   0021B8  5027               	movf	___flmul@temp^0,w,c
  4247   0021BA  261D               	addwf	___flmul@grs^0,f,c
  4248   0021BC  0E00               	movlw	0
  4249   0021BE  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4250   0021C0  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4251   0021C2  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4252   0021C4  5028               	movf	(___flmul@temp+1)^0,w,c
  4253   0021C6  2623               	addwf	___flmul@prod^0,f,c
  4254   0021C8  0E00               	movlw	0
  4255   0021CA  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4256   0021CC  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4257   0021CE  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4258   0021D0  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4259   0021D4  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4260   0021D8  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4261   0021DC  6A1D               	clrf	___flmul@grs^0,c
  4262   0021DE  5014               	movf	___flmul@a^0,w,c
  4263   0021E0  0211               	mulwf	(___flmul@b+1)^0,c
  4264   0021E2  CFF3 F027          	movff	prodl,___flmul@temp
  4265   0021E6  CFF4 F028          	movff	prodh,___flmul@temp+1
  4266   0021EA  5027               	movf	___flmul@temp^0,w,c
  4267   0021EC  261D               	addwf	___flmul@grs^0,f,c
  4268   0021EE  5028               	movf	(___flmul@temp+1)^0,w,c
  4269   0021F0  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4270   0021F2  0E00               	movlw	0
  4271   0021F4  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4272   0021F6  0E00               	movlw	0
  4273   0021F8  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4274   0021FA  5015               	movf	(___flmul@a+1)^0,w,c
  4275   0021FC  0210               	mulwf	___flmul@b^0,c
  4276   0021FE  CFF3 F027          	movff	prodl,___flmul@temp
  4277   002202  CFF4 F028          	movff	prodh,___flmul@temp+1
  4278   002206  5027               	movf	___flmul@temp^0,w,c
  4279   002208  261D               	addwf	___flmul@grs^0,f,c
  4280   00220A  5028               	movf	(___flmul@temp+1)^0,w,c
  4281   00220C  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4282   00220E  0E00               	movlw	0
  4283   002210  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4284   002212  0E00               	movlw	0
  4285   002214  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4286   002216  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4287   00221A  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4288   00221E  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4289   002222  6A1D               	clrf	___flmul@grs^0,c
  4290   002224  5014               	movf	___flmul@a^0,w,c
  4291   002226  0210               	mulwf	___flmul@b^0,c
  4292   002228  CFF3 F027          	movff	prodl,___flmul@temp
  4293   00222C  CFF4 F028          	movff	prodh,___flmul@temp+1
  4294   002230  5027               	movf	___flmul@temp^0,w,c
  4295   002232  261D               	addwf	___flmul@grs^0,f,c
  4296   002234  5028               	movf	(___flmul@temp+1)^0,w,c
  4297   002236  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4298   002238  0E00               	movlw	0
  4299   00223A  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4300   00223C  0E00               	movlw	0
  4301   00223E  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4302   002240  5016               	movf	(___flmul@a+2)^0,w,c
  4303   002242  0211               	mulwf	(___flmul@b+1)^0,c
  4304   002244  CFF3 F027          	movff	prodl,___flmul@temp
  4305   002248  CFF4 F028          	movff	prodh,___flmul@temp+1
  4306   00224C  5027               	movf	___flmul@temp^0,w,c
  4307   00224E  2623               	addwf	___flmul@prod^0,f,c
  4308   002250  5028               	movf	(___flmul@temp+1)^0,w,c
  4309   002252  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4310   002254  0E00               	movlw	0
  4311   002256  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4312   002258  0E00               	movlw	0
  4313   00225A  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4314   00225C  5015               	movf	(___flmul@a+1)^0,w,c
  4315   00225E  0212               	mulwf	(___flmul@b+2)^0,c
  4316   002260  CFF3 F027          	movff	prodl,___flmul@temp
  4317   002264  CFF4 F028          	movff	prodh,___flmul@temp+1
  4318   002268  5027               	movf	___flmul@temp^0,w,c
  4319   00226A  2623               	addwf	___flmul@prod^0,f,c
  4320   00226C  5028               	movf	(___flmul@temp+1)^0,w,c
  4321   00226E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4322   002270  0E00               	movlw	0
  4323   002272  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4324   002274  0E00               	movlw	0
  4325   002276  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4326   002278  5016               	movf	(___flmul@a+2)^0,w,c
  4327   00227A  0212               	mulwf	(___flmul@b+2)^0,c
  4328   00227C  CFF3 F027          	movff	prodl,___flmul@temp
  4329   002280  CFF4 F028          	movff	prodh,___flmul@temp+1
  4330   002284  5027               	movf	___flmul@temp^0,w,c
  4331   002286  6E18               	movwf	??___flmul^0,c
  4332   002288  5028               	movf	(___flmul@temp+1)^0,w,c
  4333   00228A  6E19               	movwf	(??___flmul+1)^0,c
  4334   00228C  6A1A               	clrf	(??___flmul+2)^0,c
  4335   00228E  6A1B               	clrf	(??___flmul+3)^0,c
  4336   002290  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  4337   002294  C019  F01A         	movff	??___flmul+1,??___flmul+2
  4338   002298  C018  F019         	movff	??___flmul,??___flmul+1
  4339   00229C  6A18               	clrf	??___flmul^0,c
  4340   00229E  5018               	movf	??___flmul^0,w,c
  4341   0022A0  2623               	addwf	___flmul@prod^0,f,c
  4342   0022A2  5019               	movf	(??___flmul+1)^0,w,c
  4343   0022A4  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4344   0022A6  501A               	movf	(??___flmul+2)^0,w,c
  4345   0022A8  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4346   0022AA  501B               	movf	(??___flmul+3)^0,w,c
  4347   0022AC  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4348   0022AE  C01D  F018         	movff	___flmul@grs,??___flmul
  4349   0022B2  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
  4350   0022B6  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
  4351   0022BA  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
  4352   0022BE  0E19               	movlw	25
  4353   0022C0  EF67  F011         	goto	u3640
  4354   0022C4                     u3645:
  4355   0022C4  90D8               	bcf	status,0,c
  4356   0022C6  321B               	rrcf	(??___flmul+3)^0,f,c
  4357   0022C8  321A               	rrcf	(??___flmul+2)^0,f,c
  4358   0022CA  3219               	rrcf	(??___flmul+1)^0,f,c
  4359   0022CC  3218               	rrcf	??___flmul^0,f,c
  4360   0022CE                     u3640:
  4361   0022CE  2EE8               	decfsz	wreg,f,c
  4362   0022D0  EF62  F011         	goto	u3645
  4363   0022D4  5018               	movf	??___flmul^0,w,c
  4364   0022D6  2623               	addwf	___flmul@prod^0,f,c
  4365   0022D8  5019               	movf	(??___flmul+1)^0,w,c
  4366   0022DA  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4367   0022DC  501A               	movf	(??___flmul+2)^0,w,c
  4368   0022DE  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4369   0022E0  501B               	movf	(??___flmul+3)^0,w,c
  4370   0022E2  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4371   0022E4  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4372   0022E8  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4373   0022EC  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4374   0022F0  6A1D               	clrf	___flmul@grs^0,c
  4375   0022F2  5021               	movf	___flmul@aexp^0,w,c
  4376   0022F4  C022  F018         	movff	___flmul@bexp,??___flmul
  4377   0022F8  6A19               	clrf	(??___flmul+1)^0,c
  4378   0022FA  2618               	addwf	??___flmul^0,f,c
  4379   0022FC  0E00               	movlw	0
  4380   0022FE  2219               	addwfc	(??___flmul+1)^0,f,c
  4381   002300  0E82               	movlw	130
  4382   002302  2418               	addwf	??___flmul^0,w,c
  4383   002304  6E27               	movwf	___flmul@temp^0,c
  4384   002306  0EFF               	movlw	255
  4385   002308  2019               	addwfc	(??___flmul+1)^0,w,c
  4386   00230A  6E28               	movwf	(___flmul@temp+1)^0,c
  4387   00230C  EF9D  F011         	goto	l4413
  4388   002310                     l4407:
  4389   002310  90D8               	bcf	status,0,c
  4390   002312  3623               	rlcf	___flmul@prod^0,f,c
  4391   002314  3624               	rlcf	(___flmul@prod+1)^0,f,c
  4392   002316  3625               	rlcf	(___flmul@prod+2)^0,f,c
  4393   002318  3626               	rlcf	(___flmul@prod+3)^0,f,c
  4394   00231A  AE20               	btfss	(___flmul@grs+3)^0,7,c
  4395   00231C  EF92  F011         	goto	u3651
  4396   002320  EF94  F011         	goto	u3650
  4397   002324                     u3651:
  4398   002324  EF95  F011         	goto	l1470
  4399   002328                     u3650:
  4400   002328  8023               	bsf	___flmul@prod^0,0,c
  4401   00232A                     l1470:
  4402   00232A  90D8               	bcf	status,0,c
  4403   00232C  361D               	rlcf	___flmul@grs^0,f,c
  4404   00232E  361E               	rlcf	(___flmul@grs+1)^0,f,c
  4405   002330  361F               	rlcf	(___flmul@grs+2)^0,f,c
  4406   002332  3620               	rlcf	(___flmul@grs+3)^0,f,c
  4407   002334  0627               	decf	___flmul@temp^0,f,c
  4408   002336  A0D8               	btfss	status,0,c
  4409   002338  0628               	decf	(___flmul@temp+1)^0,f,c
  4410   00233A                     l4413:
  4411   00233A  AE25               	btfss	(___flmul@prod+2)^0,7,c
  4412   00233C  EFA2  F011         	goto	u3661
  4413   002340  EFA4  F011         	goto	u3660
  4414   002344                     u3661:
  4415   002344  EF88  F011         	goto	l4407
  4416   002348                     u3660:
  4417   002348  0E00               	movlw	0
  4418   00234A  6E21               	movwf	___flmul@aexp^0,c
  4419   00234C  AE20               	btfss	(___flmul@grs+3)^0,7,c
  4420   00234E  EFAB  F011         	goto	u3671
  4421   002352  EFAD  F011         	goto	u3670
  4422   002356                     u3671:
  4423   002356  EFD1  F011         	goto	l1472
  4424   00235A                     u3670:
  4425   00235A  0EFF               	movlw	255
  4426   00235C  141D               	andwf	___flmul@grs^0,w,c
  4427   00235E  6E18               	movwf	??___flmul^0,c
  4428   002360  0EFF               	movlw	255
  4429   002362  141E               	andwf	(___flmul@grs+1)^0,w,c
  4430   002364  6E19               	movwf	(??___flmul+1)^0,c
  4431   002366  0EFF               	movlw	255
  4432   002368  141F               	andwf	(___flmul@grs+2)^0,w,c
  4433   00236A  6E1A               	movwf	(??___flmul+2)^0,c
  4434   00236C  0E7F               	movlw	127
  4435   00236E  1420               	andwf	(___flmul@grs+3)^0,w,c
  4436   002370  6E1B               	movwf	(??___flmul+3)^0,c
  4437   002372  5018               	movf	??___flmul^0,w,c
  4438   002374  1019               	iorwf	(??___flmul+1)^0,w,c
  4439   002376  101A               	iorwf	(??___flmul+2)^0,w,c
  4440   002378  101B               	iorwf	(??___flmul+3)^0,w,c
  4441   00237A  B4D8               	btfsc	status,2,c
  4442   00237C  EFC2  F011         	goto	u3681
  4443   002380  EFC4  F011         	goto	u3680
  4444   002384                     u3681:
  4445   002384  EFC8  F011         	goto	l1473
  4446   002388                     u3680:
  4447   002388                     l4421:
  4448   002388  0E01               	movlw	1
  4449   00238A  6E21               	movwf	___flmul@aexp^0,c
  4450   00238C  EFD1  F011         	goto	l1472
  4451   002390                     l1473:
  4452   002390  A023               	btfss	___flmul@prod^0,0,c
  4453   002392  EFCD  F011         	goto	u3691
  4454   002396  EFCF  F011         	goto	u3690
  4455   00239A                     u3691:
  4456   00239A  EFD1  F011         	goto	l1472
  4457   00239E                     u3690:
  4458   00239E  EFC4  F011         	goto	l4421
  4459   0023A2                     l1472:
  4460   0023A2  5021               	movf	___flmul@aexp^0,w,c
  4461   0023A4  B4D8               	btfsc	status,2,c
  4462   0023A6  EFD7  F011         	goto	u3701
  4463   0023AA  EFD9  F011         	goto	u3700
  4464   0023AE                     u3701:
  4465   0023AE  EFFD  F011         	goto	l4433
  4466   0023B2                     u3700:
  4467   0023B2  0E01               	movlw	1
  4468   0023B4  2623               	addwf	___flmul@prod^0,f,c
  4469   0023B6  0E00               	movlw	0
  4470   0023B8  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4471   0023BA  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4472   0023BC  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4473   0023BE  A026               	btfss	(___flmul@prod+3)^0,0,c
  4474   0023C0  EFE4  F011         	goto	u3711
  4475   0023C4  EFE6  F011         	goto	u3710
  4476   0023C8                     u3711:
  4477   0023C8  EFFD  F011         	goto	l4433
  4478   0023CC                     u3710:
  4479   0023CC  C023  F018         	movff	___flmul@prod,??___flmul
  4480   0023D0  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  4481   0023D4  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  4482   0023D8  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  4483   0023DC  341B               	rlcf	(??___flmul+3)^0,w,c
  4484   0023DE  321B               	rrcf	(??___flmul+3)^0,f,c
  4485   0023E0  321A               	rrcf	(??___flmul+2)^0,f,c
  4486   0023E2  3219               	rrcf	(??___flmul+1)^0,f,c
  4487   0023E4  3218               	rrcf	??___flmul^0,f,c
  4488   0023E6  C018  F023         	movff	??___flmul,___flmul@prod
  4489   0023EA  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  4490   0023EE  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  4491   0023F2  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  4492   0023F6  4A27               	infsnz	___flmul@temp^0,f,c
  4493   0023F8  2A28               	incf	(___flmul@temp+1)^0,f,c
  4494   0023FA                     l4433:
  4495   0023FA  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  4496   0023FC  EF08  F012         	goto	u3721
  4497   002400  5028               	movf	(___flmul@temp+1)^0,w,c
  4498   002402  E108               	bnz	u3720
  4499   002404  2827               	incf	___flmul@temp^0,w,c
  4500   002406  A0D8               	btfss	status,0,c
  4501   002408  EF08  F012         	goto	u3721
  4502   00240C  EF0A  F012         	goto	u3720
  4503   002410                     u3721:
  4504   002410  EF14  F012         	goto	l4437
  4505   002414                     u3720:
  4506   002414  0E00               	movlw	0
  4507   002416  6E23               	movwf	___flmul@prod^0,c
  4508   002418  0E00               	movlw	0
  4509   00241A  6E24               	movwf	(___flmul@prod+1)^0,c
  4510   00241C  0E80               	movlw	128
  4511   00241E  6E25               	movwf	(___flmul@prod+2)^0,c
  4512   002420  0E7F               	movlw	127
  4513   002422  6E26               	movwf	(___flmul@prod+3)^0,c
  4514   002424  EF42  F012         	goto	l4449
  4515   002428                     l4437:
  4516   002428  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  4517   00242A  EF21  F012         	goto	u3730
  4518   00242E  5028               	movf	(___flmul@temp+1)^0,w,c
  4519   002430  E106               	bnz	u3731
  4520   002432  0427               	decf	___flmul@temp^0,w,c
  4521   002434  B0D8               	btfsc	status,0,c
  4522   002436  EF1F  F012         	goto	u3731
  4523   00243A  EF21  F012         	goto	u3730
  4524   00243E                     u3731:
  4525   00243E  EF2D  F012         	goto	l1480
  4526   002442                     u3730:
  4527   002442  0E00               	movlw	0
  4528   002444  6E23               	movwf	___flmul@prod^0,c
  4529   002446  0E00               	movlw	0
  4530   002448  6E24               	movwf	(___flmul@prod+1)^0,c
  4531   00244A  0E00               	movlw	0
  4532   00244C  6E25               	movwf	(___flmul@prod+2)^0,c
  4533   00244E  0E00               	movlw	0
  4534   002450  6E26               	movwf	(___flmul@prod+3)^0,c
  4535   002452  0E00               	movlw	0
  4536   002454  6E1C               	movwf	___flmul@sign^0,c
  4537   002456  EF42  F012         	goto	l4449
  4538   00245A                     l1480:
  4539   00245A  C027  F022         	movff	___flmul@temp,___flmul@bexp
  4540   00245E  0EFF               	movlw	255
  4541   002460  1623               	andwf	___flmul@prod^0,f,c
  4542   002462  0EFF               	movlw	255
  4543   002464  1624               	andwf	(___flmul@prod+1)^0,f,c
  4544   002466  0E7F               	movlw	127
  4545   002468  1625               	andwf	(___flmul@prod+2)^0,f,c
  4546   00246A  0E00               	movlw	0
  4547   00246C  1626               	andwf	(___flmul@prod+3)^0,f,c
  4548   00246E  A022               	btfss	___flmul@bexp^0,0,c
  4549   002470  EF3C  F012         	goto	u3741
  4550   002474  EF3E  F012         	goto	u3740
  4551   002478                     u3741:
  4552   002478  EF3F  F012         	goto	l4447
  4553   00247C                     u3740:
  4554   00247C  8E25               	bsf	(___flmul@prod+2)^0,7,c
  4555   00247E                     l4447:
  4556   00247E  90D8               	bcf	status,0,c
  4557   002480  3022               	rrcf	___flmul@bexp^0,w,c
  4558   002482  6E26               	movwf	(___flmul@prod+3)^0,c
  4559   002484                     l4449:
  4560   002484  501C               	movf	___flmul@sign^0,w,c
  4561   002486  1226               	iorwf	(___flmul@prod+3)^0,f,c
  4562   002488  C023  F010         	movff	___flmul@prod,?___flmul
  4563   00248C  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  4564   002490  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  4565   002494  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  4566   002498                     l1467:
  4567   002498  0012               	return		;funcret
  4568   00249A                     __end_of___flmul:
  4569                           	callstack 0
  4570                           
  4571 ;; *************** function ___flge *****************
  4572 ;; Defined at:
  4573 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  ff1             4    1[COMRAM] unsigned char 
  4576 ;;  ff2             4    5[COMRAM] unsigned char 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;		None               void
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4588 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4592 ;;Total ram usage:       12 bytes
  4593 ;; Hardware stack levels used: 1
  4594 ;; Hardware stack levels required when called: 1
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_convert_rgb2hue
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text9
  4603   003DC0                     __ptext9:
  4604                           	callstack 0
  4605   003DC0                     ___flge:
  4606                           	callstack 27
  4607   003DC0  0E00               	movlw	0
  4608   003DC2  1402               	andwf	___flge@ff1^0,w,c
  4609   003DC4  6E0A               	movwf	??___flge^0,c
  4610   003DC6  0E00               	movlw	0
  4611   003DC8  1403               	andwf	(___flge@ff1+1)^0,w,c
  4612   003DCA  6E0B               	movwf	(??___flge+1)^0,c
  4613   003DCC  0E80               	movlw	128
  4614   003DCE  1404               	andwf	(___flge@ff1+2)^0,w,c
  4615   003DD0  6E0C               	movwf	(??___flge+2)^0,c
  4616   003DD2  0E7F               	movlw	127
  4617   003DD4  1405               	andwf	(___flge@ff1+3)^0,w,c
  4618   003DD6  6E0D               	movwf	(??___flge+3)^0,c
  4619   003DD8  500A               	movf	??___flge^0,w,c
  4620   003DDA  100B               	iorwf	(??___flge+1)^0,w,c
  4621   003DDC  100C               	iorwf	(??___flge+2)^0,w,c
  4622   003DDE  100D               	iorwf	(??___flge+3)^0,w,c
  4623   003DE0  A4D8               	btfss	status,2,c
  4624   003DE2  EFF5  F01E         	goto	u4231
  4625   003DE6  EFF7  F01E         	goto	u4230
  4626   003DEA                     u4231:
  4627   003DEA  EFFF  F01E         	goto	l4843
  4628   003DEE                     u4230:
  4629   003DEE  0E00               	movlw	0
  4630   003DF0  6E02               	movwf	___flge@ff1^0,c
  4631   003DF2  0E00               	movlw	0
  4632   003DF4  6E03               	movwf	(___flge@ff1+1)^0,c
  4633   003DF6  0E00               	movlw	0
  4634   003DF8  6E04               	movwf	(___flge@ff1+2)^0,c
  4635   003DFA  0E00               	movlw	0
  4636   003DFC  6E05               	movwf	(___flge@ff1+3)^0,c
  4637   003DFE                     l4843:
  4638   003DFE  0E00               	movlw	0
  4639   003E00  1406               	andwf	___flge@ff2^0,w,c
  4640   003E02  6E0A               	movwf	??___flge^0,c
  4641   003E04  0E00               	movlw	0
  4642   003E06  1407               	andwf	(___flge@ff2+1)^0,w,c
  4643   003E08  6E0B               	movwf	(??___flge+1)^0,c
  4644   003E0A  0E80               	movlw	128
  4645   003E0C  1408               	andwf	(___flge@ff2+2)^0,w,c
  4646   003E0E  6E0C               	movwf	(??___flge+2)^0,c
  4647   003E10  0E7F               	movlw	127
  4648   003E12  1409               	andwf	(___flge@ff2+3)^0,w,c
  4649   003E14  6E0D               	movwf	(??___flge+3)^0,c
  4650   003E16  500A               	movf	??___flge^0,w,c
  4651   003E18  100B               	iorwf	(??___flge+1)^0,w,c
  4652   003E1A  100C               	iorwf	(??___flge+2)^0,w,c
  4653   003E1C  100D               	iorwf	(??___flge+3)^0,w,c
  4654   003E1E  A4D8               	btfss	status,2,c
  4655   003E20  EF14  F01F         	goto	u4241
  4656   003E24  EF16  F01F         	goto	u4240
  4657   003E28                     u4241:
  4658   003E28  EF1E  F01F         	goto	l4847
  4659   003E2C                     u4240:
  4660   003E2C  0E00               	movlw	0
  4661   003E2E  6E06               	movwf	___flge@ff2^0,c
  4662   003E30  0E00               	movlw	0
  4663   003E32  6E07               	movwf	(___flge@ff2+1)^0,c
  4664   003E34  0E00               	movlw	0
  4665   003E36  6E08               	movwf	(___flge@ff2+2)^0,c
  4666   003E38  0E00               	movlw	0
  4667   003E3A  6E09               	movwf	(___flge@ff2+3)^0,c
  4668   003E3C                     l4847:
  4669   003E3C  AE05               	btfss	(___flge@ff1+3)^0,7,c
  4670   003E3E  EF23  F01F         	goto	u4251
  4671   003E42  EF25  F01F         	goto	u4250
  4672   003E46                     u4251:
  4673   003E46  EF2E  F01F         	goto	l4851
  4674   003E4A                     u4250:
  4675   003E4A  6C02               	negf	___flge@ff1^0,c
  4676   003E4C  1E03               	comf	(___flge@ff1+1)^0,f,c
  4677   003E4E  B0D8               	btfsc	status,0,c
  4678   003E50  2A03               	incf	(___flge@ff1+1)^0,f,c
  4679   003E52  1E04               	comf	(___flge@ff1+2)^0,f,c
  4680   003E54  B0D8               	btfsc	status,0,c
  4681   003E56  2A04               	incf	(___flge@ff1+2)^0,f,c
  4682   003E58  0E80               	movlw	128
  4683   003E5A  5605               	subfwb	(___flge@ff1+3)^0,f,c
  4684   003E5C                     l4851:
  4685   003E5C  AE09               	btfss	(___flge@ff2+3)^0,7,c
  4686   003E5E  EF33  F01F         	goto	u4261
  4687   003E62  EF35  F01F         	goto	u4260
  4688   003E66                     u4261:
  4689   003E66  EF3E  F01F         	goto	l1114
  4690   003E6A                     u4260:
  4691   003E6A  6C06               	negf	___flge@ff2^0,c
  4692   003E6C  1E07               	comf	(___flge@ff2+1)^0,f,c
  4693   003E6E  B0D8               	btfsc	status,0,c
  4694   003E70  2A07               	incf	(___flge@ff2+1)^0,f,c
  4695   003E72  1E08               	comf	(___flge@ff2+2)^0,f,c
  4696   003E74  B0D8               	btfsc	status,0,c
  4697   003E76  2A08               	incf	(___flge@ff2+2)^0,f,c
  4698   003E78  0E80               	movlw	128
  4699   003E7A  5609               	subfwb	(___flge@ff2+3)^0,f,c
  4700   003E7C                     l1114:
  4701   003E7C  0E00               	movlw	0
  4702   003E7E  1A02               	xorwf	___flge@ff1^0,f,c
  4703   003E80  0E00               	movlw	0
  4704   003E82  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  4705   003E84  0E00               	movlw	0
  4706   003E86  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  4707   003E88  0E80               	movlw	128
  4708   003E8A  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  4709   003E8C  0E00               	movlw	0
  4710   003E8E  1A06               	xorwf	___flge@ff2^0,f,c
  4711   003E90  0E00               	movlw	0
  4712   003E92  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  4713   003E94  0E00               	movlw	0
  4714   003E96  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  4715   003E98  0E80               	movlw	128
  4716   003E9A  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  4717   003E9C  5006               	movf	___flge@ff2^0,w,c
  4718   003E9E  5C02               	subwf	___flge@ff1^0,w,c
  4719   003EA0  5007               	movf	(___flge@ff2+1)^0,w,c
  4720   003EA2  5803               	subwfb	(___flge@ff1+1)^0,w,c
  4721   003EA4  5008               	movf	(___flge@ff2+2)^0,w,c
  4722   003EA6  5804               	subwfb	(___flge@ff1+2)^0,w,c
  4723   003EA8  5009               	movf	(___flge@ff2+3)^0,w,c
  4724   003EAA  5805               	subwfb	(___flge@ff1+3)^0,w,c
  4725   003EAC  B0D8               	btfsc	status,0,c
  4726   003EAE  EF5B  F01F         	goto	u4271
  4727   003EB2  EF5D  F01F         	goto	u4270
  4728   003EB6                     u4271:
  4729   003EB6  EF60  F01F         	goto	l4857
  4730   003EBA                     u4270:
  4731   003EBA  90D8               	bcf	status,0,c
  4732   003EBC  EF61  F01F         	goto	l1119
  4733   003EC0                     l4857:
  4734   003EC0  80D8               	bsf	status,0,c
  4735   003EC2                     l1119:
  4736   003EC2  0012               	return		;funcret
  4737   003EC4                     __end_of___flge:
  4738                           	callstack 0
  4739                           
  4740 ;; *************** function ___fleq *****************
  4741 ;; Defined at:
  4742 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  ff1             4    1[COMRAM] unsigned char 
  4745 ;;  ff2             4    5[COMRAM] unsigned char 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;		None               void
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4757 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4761 ;;Total ram usage:       12 bytes
  4762 ;; Hardware stack levels used: 1
  4763 ;; Hardware stack levels required when called: 1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_convert_rgb2hue
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text10
  4772   00429A                     __ptext10:
  4773                           	callstack 0
  4774   00429A                     ___fleq:
  4775                           	callstack 27
  4776   00429A  0E00               	movlw	0
  4777   00429C  1402               	andwf	___fleq@ff1^0,w,c
  4778   00429E  6E0A               	movwf	??___fleq^0,c
  4779   0042A0  0E00               	movlw	0
  4780   0042A2  1403               	andwf	(___fleq@ff1+1)^0,w,c
  4781   0042A4  6E0B               	movwf	(??___fleq+1)^0,c
  4782   0042A6  0E80               	movlw	128
  4783   0042A8  1404               	andwf	(___fleq@ff1+2)^0,w,c
  4784   0042AA  6E0C               	movwf	(??___fleq+2)^0,c
  4785   0042AC  0E7F               	movlw	127
  4786   0042AE  1405               	andwf	(___fleq@ff1+3)^0,w,c
  4787   0042B0  6E0D               	movwf	(??___fleq+3)^0,c
  4788   0042B2  500A               	movf	??___fleq^0,w,c
  4789   0042B4  100B               	iorwf	(??___fleq+1)^0,w,c
  4790   0042B6  100C               	iorwf	(??___fleq+2)^0,w,c
  4791   0042B8  100D               	iorwf	(??___fleq+3)^0,w,c
  4792   0042BA  A4D8               	btfss	status,2,c
  4793   0042BC  EF62  F021         	goto	u4201
  4794   0042C0  EF64  F021         	goto	u4200
  4795   0042C4                     u4201:
  4796   0042C4  EF6C  F021         	goto	l4827
  4797   0042C8                     u4200:
  4798   0042C8  0E00               	movlw	0
  4799   0042CA  6E02               	movwf	___fleq@ff1^0,c
  4800   0042CC  0E00               	movlw	0
  4801   0042CE  6E03               	movwf	(___fleq@ff1+1)^0,c
  4802   0042D0  0E00               	movlw	0
  4803   0042D2  6E04               	movwf	(___fleq@ff1+2)^0,c
  4804   0042D4  0E00               	movlw	0
  4805   0042D6  6E05               	movwf	(___fleq@ff1+3)^0,c
  4806   0042D8                     l4827:
  4807   0042D8  0E00               	movlw	0
  4808   0042DA  1406               	andwf	___fleq@ff2^0,w,c
  4809   0042DC  6E0A               	movwf	??___fleq^0,c
  4810   0042DE  0E00               	movlw	0
  4811   0042E0  1407               	andwf	(___fleq@ff2+1)^0,w,c
  4812   0042E2  6E0B               	movwf	(??___fleq+1)^0,c
  4813   0042E4  0E80               	movlw	128
  4814   0042E6  1408               	andwf	(___fleq@ff2+2)^0,w,c
  4815   0042E8  6E0C               	movwf	(??___fleq+2)^0,c
  4816   0042EA  0E7F               	movlw	127
  4817   0042EC  1409               	andwf	(___fleq@ff2+3)^0,w,c
  4818   0042EE  6E0D               	movwf	(??___fleq+3)^0,c
  4819   0042F0  500A               	movf	??___fleq^0,w,c
  4820   0042F2  100B               	iorwf	(??___fleq+1)^0,w,c
  4821   0042F4  100C               	iorwf	(??___fleq+2)^0,w,c
  4822   0042F6  100D               	iorwf	(??___fleq+3)^0,w,c
  4823   0042F8  A4D8               	btfss	status,2,c
  4824   0042FA  EF81  F021         	goto	u4211
  4825   0042FE  EF83  F021         	goto	u4210
  4826   004302                     u4211:
  4827   004302  EF8B  F021         	goto	l4831
  4828   004306                     u4210:
  4829   004306  0E00               	movlw	0
  4830   004308  6E06               	movwf	___fleq@ff2^0,c
  4831   00430A  0E00               	movlw	0
  4832   00430C  6E07               	movwf	(___fleq@ff2+1)^0,c
  4833   00430E  0E00               	movlw	0
  4834   004310  6E08               	movwf	(___fleq@ff2+2)^0,c
  4835   004312  0E00               	movlw	0
  4836   004314  6E09               	movwf	(___fleq@ff2+3)^0,c
  4837   004316                     l4831:
  4838   004316  5006               	movf	___fleq@ff2^0,w,c
  4839   004318  1802               	xorwf	___fleq@ff1^0,w,c
  4840   00431A  E10F               	bnz	u4220
  4841   00431C  5007               	movf	(___fleq@ff2+1)^0,w,c
  4842   00431E  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  4843   004320  E10C               	bnz	u4220
  4844   004322  5008               	movf	(___fleq@ff2+2)^0,w,c
  4845   004324  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  4846   004326  E109               	bnz	u4220
  4847   004328  5009               	movf	(___fleq@ff2+3)^0,w,c
  4848   00432A  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  4849   00432C  B4D8               	btfsc	status,2,c
  4850   00432E  EF9B  F021         	goto	u4221
  4851   004332  EF9D  F021         	goto	u4220
  4852   004336                     u4221:
  4853   004336  EFA0  F021         	goto	l4835
  4854   00433A                     u4220:
  4855   00433A  90D8               	bcf	status,0,c
  4856   00433C  EFA1  F021         	goto	l1108
  4857   004340                     l4835:
  4858   004340  80D8               	bsf	status,0,c
  4859   004342                     l1108:
  4860   004342  0012               	return		;funcret
  4861   004344                     __end_of___fleq:
  4862                           	callstack 0
  4863                           
  4864 ;; *************** function ___fldiv *****************
  4865 ;; Defined at:
  4866 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  b               4   40[COMRAM] unsigned char 
  4869 ;;  a               4   44[COMRAM] unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  grs             4   59[COMRAM] unsigned long 
  4872 ;;  rem             4   52[COMRAM] unsigned long 
  4873 ;;  new_exp         2   57[COMRAM] short 
  4874 ;;  aexp            1   64[COMRAM] unsigned char 
  4875 ;;  bexp            1   63[COMRAM] unsigned char 
  4876 ;;  sign            1   56[COMRAM] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  4   40[COMRAM] unsigned char 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4886 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;Total ram usage:       25 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 1
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_convert_rgb2hue
  4897 ;;		_main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text11
  4902   00249A                     __ptext11:
  4903                           	callstack 0
  4904   00249A                     ___fldiv:
  4905                           	callstack 27
  4906   00249A  502C               	movf	(___fldiv@b+3)^0,w,c
  4907   00249C  0B80               	andlw	128
  4908   00249E  6E39               	movwf	___fldiv@sign^0,c
  4909   0024A0  502C               	movf	(___fldiv@b+3)^0,w,c
  4910   0024A2  242C               	addwf	(___fldiv@b+3)^0,w,c
  4911   0024A4  6E40               	movwf	___fldiv@bexp^0,c
  4912   0024A6  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  4913   0024A8  EF58  F012         	goto	u3971
  4914   0024AC  EF5A  F012         	goto	u3970
  4915   0024B0                     u3971:
  4916   0024B0  EF5B  F012         	goto	l4685
  4917   0024B4                     u3970:
  4918   0024B4  8040               	bsf	___fldiv@bexp^0,0,c
  4919   0024B6                     l4685:
  4920   0024B6  5040               	movf	___fldiv@bexp^0,w,c
  4921   0024B8  B4D8               	btfsc	status,2,c
  4922   0024BA  EF61  F012         	goto	u3981
  4923   0024BE  EF63  F012         	goto	u3980
  4924   0024C2                     u3981:
  4925   0024C2  EF78  F012         	goto	l4695
  4926   0024C6                     u3980:
  4927   0024C6  2840               	incf	___fldiv@bexp^0,w,c
  4928   0024C8  A4D8               	btfss	status,2,c
  4929   0024CA  EF69  F012         	goto	u3991
  4930   0024CE  EF6B  F012         	goto	u3990
  4931   0024D2                     u3991:
  4932   0024D2  EF73  F012         	goto	l4691
  4933   0024D6                     u3990:
  4934   0024D6  0E00               	movlw	0
  4935   0024D8  6E29               	movwf	___fldiv@b^0,c
  4936   0024DA  0E00               	movlw	0
  4937   0024DC  6E2A               	movwf	(___fldiv@b+1)^0,c
  4938   0024DE  0E00               	movlw	0
  4939   0024E0  6E2B               	movwf	(___fldiv@b+2)^0,c
  4940   0024E2  0E00               	movlw	0
  4941   0024E4  6E2C               	movwf	(___fldiv@b+3)^0,c
  4942   0024E6                     l4691:
  4943   0024E6  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  4944   0024E8  0E00               	movlw	0
  4945   0024EA  6E2C               	movwf	(___fldiv@b+3)^0,c
  4946   0024EC  EF80  F012         	goto	l4697
  4947   0024F0                     l4695:
  4948   0024F0  0E00               	movlw	0
  4949   0024F2  6E29               	movwf	___fldiv@b^0,c
  4950   0024F4  0E00               	movlw	0
  4951   0024F6  6E2A               	movwf	(___fldiv@b+1)^0,c
  4952   0024F8  0E00               	movlw	0
  4953   0024FA  6E2B               	movwf	(___fldiv@b+2)^0,c
  4954   0024FC  0E00               	movlw	0
  4955   0024FE  6E2C               	movwf	(___fldiv@b+3)^0,c
  4956   002500                     l4697:
  4957   002500  5030               	movf	(___fldiv@a+3)^0,w,c
  4958   002502  0B80               	andlw	128
  4959   002504  1A39               	xorwf	___fldiv@sign^0,f,c
  4960   002506  5030               	movf	(___fldiv@a+3)^0,w,c
  4961   002508  2430               	addwf	(___fldiv@a+3)^0,w,c
  4962   00250A  6E41               	movwf	___fldiv@aexp^0,c
  4963   00250C  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  4964   00250E  EF8B  F012         	goto	u4001
  4965   002512  EF8D  F012         	goto	u4000
  4966   002516                     u4001:
  4967   002516  EF8E  F012         	goto	l4705
  4968   00251A                     u4000:
  4969   00251A  8041               	bsf	___fldiv@aexp^0,0,c
  4970   00251C                     l4705:
  4971   00251C  5041               	movf	___fldiv@aexp^0,w,c
  4972   00251E  B4D8               	btfsc	status,2,c
  4973   002520  EF94  F012         	goto	u4011
  4974   002524  EF96  F012         	goto	u4010
  4975   002528                     u4011:
  4976   002528  EFAB  F012         	goto	l4715
  4977   00252C                     u4010:
  4978   00252C  2841               	incf	___fldiv@aexp^0,w,c
  4979   00252E  A4D8               	btfss	status,2,c
  4980   002530  EF9C  F012         	goto	u4021
  4981   002534  EF9E  F012         	goto	u4020
  4982   002538                     u4021:
  4983   002538  EFA6  F012         	goto	l4711
  4984   00253C                     u4020:
  4985   00253C  0E00               	movlw	0
  4986   00253E  6E2D               	movwf	___fldiv@a^0,c
  4987   002540  0E00               	movlw	0
  4988   002542  6E2E               	movwf	(___fldiv@a+1)^0,c
  4989   002544  0E00               	movlw	0
  4990   002546  6E2F               	movwf	(___fldiv@a+2)^0,c
  4991   002548  0E00               	movlw	0
  4992   00254A  6E30               	movwf	(___fldiv@a+3)^0,c
  4993   00254C                     l4711:
  4994   00254C  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  4995   00254E  0E00               	movlw	0
  4996   002550  6E30               	movwf	(___fldiv@a+3)^0,c
  4997   002552  EFB3  F012         	goto	l4717
  4998   002556                     l4715:
  4999   002556  0E00               	movlw	0
  5000   002558  6E2D               	movwf	___fldiv@a^0,c
  5001   00255A  0E00               	movlw	0
  5002   00255C  6E2E               	movwf	(___fldiv@a+1)^0,c
  5003   00255E  0E00               	movlw	0
  5004   002560  6E2F               	movwf	(___fldiv@a+2)^0,c
  5005   002562  0E00               	movlw	0
  5006   002564  6E30               	movwf	(___fldiv@a+3)^0,c
  5007   002566                     l4717:
  5008   002566  502D               	movf	___fldiv@a^0,w,c
  5009   002568  102E               	iorwf	(___fldiv@a+1)^0,w,c
  5010   00256A  102F               	iorwf	(___fldiv@a+2)^0,w,c
  5011   00256C  1030               	iorwf	(___fldiv@a+3)^0,w,c
  5012   00256E  A4D8               	btfss	status,2,c
  5013   002570  EFBC  F012         	goto	u4031
  5014   002574  EFBE  F012         	goto	u4030
  5015   002578                     u4031:
  5016   002578  EFD6  F012         	goto	l4729
  5017   00257C                     u4030:
  5018   00257C  0E00               	movlw	0
  5019   00257E  6E29               	movwf	___fldiv@b^0,c
  5020   002580  0E00               	movlw	0
  5021   002582  6E2A               	movwf	(___fldiv@b+1)^0,c
  5022   002584  0E00               	movlw	0
  5023   002586  6E2B               	movwf	(___fldiv@b+2)^0,c
  5024   002588  0E00               	movlw	0
  5025   00258A  6E2C               	movwf	(___fldiv@b+3)^0,c
  5026   00258C  0E80               	movlw	128
  5027   00258E  122B               	iorwf	(___fldiv@b+2)^0,f,c
  5028   002590  0E7F               	movlw	127
  5029   002592  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5030   002594                     l4723:
  5031   002594  5039               	movf	___fldiv@sign^0,w,c
  5032   002596  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5033   002598  C029  F029         	movff	___fldiv@b,?___fldiv
  5034   00259C  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  5035   0025A0  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  5036   0025A4  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  5037   0025A8  EF19  F014         	goto	l1431
  5038   0025AC                     l4729:
  5039   0025AC  5040               	movf	___fldiv@bexp^0,w,c
  5040   0025AE  A4D8               	btfss	status,2,c
  5041   0025B0  EFDC  F012         	goto	u4041
  5042   0025B4  EFDE  F012         	goto	u4040
  5043   0025B8                     u4041:
  5044   0025B8  EFE8  F012         	goto	l4737
  5045   0025BC                     u4040:
  5046   0025BC  0E00               	movlw	0
  5047   0025BE  6E29               	movwf	?___fldiv^0,c
  5048   0025C0  0E00               	movlw	0
  5049   0025C2  6E2A               	movwf	(?___fldiv+1)^0,c
  5050   0025C4  0E00               	movlw	0
  5051   0025C6  6E2B               	movwf	(?___fldiv+2)^0,c
  5052   0025C8  0E00               	movlw	0
  5053   0025CA  6E2C               	movwf	(?___fldiv+3)^0,c
  5054   0025CC  EF19  F014         	goto	l1431
  5055   0025D0                     l4737:
  5056   0025D0  5041               	movf	___fldiv@aexp^0,w,c
  5057   0025D2  C040  F031         	movff	___fldiv@bexp,??___fldiv
  5058   0025D6  6A32               	clrf	(??___fldiv+1)^0,c
  5059   0025D8  5E31               	subwf	??___fldiv^0,f,c
  5060   0025DA  0E00               	movlw	0
  5061   0025DC  5A32               	subwfb	(??___fldiv+1)^0,f,c
  5062   0025DE  0E7F               	movlw	127
  5063   0025E0  2431               	addwf	??___fldiv^0,w,c
  5064   0025E2  6E3A               	movwf	___fldiv@new_exp^0,c
  5065   0025E4  0E00               	movlw	0
  5066   0025E6  2032               	addwfc	(??___fldiv+1)^0,w,c
  5067   0025E8  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5068   0025EA  C029  F035         	movff	___fldiv@b,___fldiv@rem
  5069   0025EE  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  5070   0025F2  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  5071   0025F6  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  5072   0025FA  0E00               	movlw	0
  5073   0025FC  6E29               	movwf	___fldiv@b^0,c
  5074   0025FE  0E00               	movlw	0
  5075   002600  6E2A               	movwf	(___fldiv@b+1)^0,c
  5076   002602  0E00               	movlw	0
  5077   002604  6E2B               	movwf	(___fldiv@b+2)^0,c
  5078   002606  0E00               	movlw	0
  5079   002608  6E2C               	movwf	(___fldiv@b+3)^0,c
  5080   00260A  0E00               	movlw	0
  5081   00260C  6E3C               	movwf	___fldiv@grs^0,c
  5082   00260E  0E00               	movlw	0
  5083   002610  6E3D               	movwf	(___fldiv@grs+1)^0,c
  5084   002612  0E00               	movlw	0
  5085   002614  6E3E               	movwf	(___fldiv@grs+2)^0,c
  5086   002616  0E00               	movlw	0
  5087   002618  6E3F               	movwf	(___fldiv@grs+3)^0,c
  5088   00261A  0E00               	movlw	0
  5089   00261C  6E41               	movwf	___fldiv@aexp^0,c
  5090   00261E  EF49  F013         	goto	l1433
  5091   002622                     l4747:
  5092   002622  5041               	movf	___fldiv@aexp^0,w,c
  5093   002624  B4D8               	btfsc	status,2,c
  5094   002626  EF17  F013         	goto	u4051
  5095   00262A  EF19  F013         	goto	u4050
  5096   00262E                     u4051:
  5097   00262E  EF30  F013         	goto	l4755
  5098   002632                     u4050:
  5099   002632  90D8               	bcf	status,0,c
  5100   002634  3635               	rlcf	___fldiv@rem^0,f,c
  5101   002636  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  5102   002638  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  5103   00263A  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  5104   00263C  90D8               	bcf	status,0,c
  5105   00263E  3629               	rlcf	___fldiv@b^0,f,c
  5106   002640  362A               	rlcf	(___fldiv@b+1)^0,f,c
  5107   002642  362B               	rlcf	(___fldiv@b+2)^0,f,c
  5108   002644  362C               	rlcf	(___fldiv@b+3)^0,f,c
  5109   002646  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5110   002648  EF28  F013         	goto	u4061
  5111   00264C  EF2A  F013         	goto	u4060
  5112   002650                     u4061:
  5113   002650  EF2B  F013         	goto	l1436
  5114   002654                     u4060:
  5115   002654  8029               	bsf	___fldiv@b^0,0,c
  5116   002656                     l1436:
  5117   002656  90D8               	bcf	status,0,c
  5118   002658  363C               	rlcf	___fldiv@grs^0,f,c
  5119   00265A  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  5120   00265C  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  5121   00265E  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  5122   002660                     l4755:
  5123   002660  502D               	movf	___fldiv@a^0,w,c
  5124   002662  5C35               	subwf	___fldiv@rem^0,w,c
  5125   002664  502E               	movf	(___fldiv@a+1)^0,w,c
  5126   002666  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  5127   002668  502F               	movf	(___fldiv@a+2)^0,w,c
  5128   00266A  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  5129   00266C  5030               	movf	(___fldiv@a+3)^0,w,c
  5130   00266E  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  5131   002670  A0D8               	btfss	status,0,c
  5132   002672  EF3D  F013         	goto	u4071
  5133   002676  EF3F  F013         	goto	u4070
  5134   00267A                     u4071:
  5135   00267A  EF48  F013         	goto	l4761
  5136   00267E                     u4070:
  5137   00267E  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  5138   002680  502D               	movf	___fldiv@a^0,w,c
  5139   002682  5E35               	subwf	___fldiv@rem^0,f,c
  5140   002684  502E               	movf	(___fldiv@a+1)^0,w,c
  5141   002686  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  5142   002688  502F               	movf	(___fldiv@a+2)^0,w,c
  5143   00268A  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  5144   00268C  5030               	movf	(___fldiv@a+3)^0,w,c
  5145   00268E  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  5146   002690                     l4761:
  5147   002690  2A41               	incf	___fldiv@aexp^0,f,c
  5148   002692                     l1433:
  5149   002692  0E19               	movlw	25
  5150   002694  6441               	cpfsgt	___fldiv@aexp^0,c
  5151   002696  EF4F  F013         	goto	u4081
  5152   00269A  EF51  F013         	goto	u4080
  5153   00269E                     u4081:
  5154   00269E  EF11  F013         	goto	l4747
  5155   0026A2                     u4080:
  5156   0026A2  5035               	movf	___fldiv@rem^0,w,c
  5157   0026A4  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  5158   0026A6  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  5159   0026A8  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  5160   0026AA  B4D8               	btfsc	status,2,c
  5161   0026AC  EF5A  F013         	goto	u4091
  5162   0026B0  EF5C  F013         	goto	u4090
  5163   0026B4                     u4091:
  5164   0026B4  EF74  F013         	goto	l4773
  5165   0026B8                     u4090:
  5166   0026B8  803C               	bsf	___fldiv@grs^0,0,c
  5167   0026BA  EF74  F013         	goto	l4773
  5168   0026BE                     l4767:
  5169   0026BE  90D8               	bcf	status,0,c
  5170   0026C0  3629               	rlcf	___fldiv@b^0,f,c
  5171   0026C2  362A               	rlcf	(___fldiv@b+1)^0,f,c
  5172   0026C4  362B               	rlcf	(___fldiv@b+2)^0,f,c
  5173   0026C6  362C               	rlcf	(___fldiv@b+3)^0,f,c
  5174   0026C8  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5175   0026CA  EF69  F013         	goto	u4101
  5176   0026CE  EF6B  F013         	goto	u4100
  5177   0026D2                     u4101:
  5178   0026D2  EF6C  F013         	goto	l1442
  5179   0026D6                     u4100:
  5180   0026D6  8029               	bsf	___fldiv@b^0,0,c
  5181   0026D8                     l1442:
  5182   0026D8  90D8               	bcf	status,0,c
  5183   0026DA  363C               	rlcf	___fldiv@grs^0,f,c
  5184   0026DC  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  5185   0026DE  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  5186   0026E0  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  5187   0026E2  063A               	decf	___fldiv@new_exp^0,f,c
  5188   0026E4  A0D8               	btfss	status,0,c
  5189   0026E6  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  5190   0026E8                     l4773:
  5191   0026E8  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  5192   0026EA  EF79  F013         	goto	u4111
  5193   0026EE  EF7B  F013         	goto	u4110
  5194   0026F2                     u4111:
  5195   0026F2  EF5F  F013         	goto	l4767
  5196   0026F6                     u4110:
  5197   0026F6  0E00               	movlw	0
  5198   0026F8  6E41               	movwf	___fldiv@aexp^0,c
  5199   0026FA  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5200   0026FC  EF82  F013         	goto	u4121
  5201   002700  EF84  F013         	goto	u4120
  5202   002704                     u4121:
  5203   002704  EFA8  F013         	goto	l1444
  5204   002708                     u4120:
  5205   002708  0EFF               	movlw	255
  5206   00270A  143C               	andwf	___fldiv@grs^0,w,c
  5207   00270C  6E31               	movwf	??___fldiv^0,c
  5208   00270E  0EFF               	movlw	255
  5209   002710  143D               	andwf	(___fldiv@grs+1)^0,w,c
  5210   002712  6E32               	movwf	(??___fldiv+1)^0,c
  5211   002714  0EFF               	movlw	255
  5212   002716  143E               	andwf	(___fldiv@grs+2)^0,w,c
  5213   002718  6E33               	movwf	(??___fldiv+2)^0,c
  5214   00271A  0E7F               	movlw	127
  5215   00271C  143F               	andwf	(___fldiv@grs+3)^0,w,c
  5216   00271E  6E34               	movwf	(??___fldiv+3)^0,c
  5217   002720  5031               	movf	??___fldiv^0,w,c
  5218   002722  1032               	iorwf	(??___fldiv+1)^0,w,c
  5219   002724  1033               	iorwf	(??___fldiv+2)^0,w,c
  5220   002726  1034               	iorwf	(??___fldiv+3)^0,w,c
  5221   002728  B4D8               	btfsc	status,2,c
  5222   00272A  EF99  F013         	goto	u4131
  5223   00272E  EF9B  F013         	goto	u4130
  5224   002732                     u4131:
  5225   002732  EF9F  F013         	goto	l1445
  5226   002736                     u4130:
  5227   002736                     l4781:
  5228   002736  0E01               	movlw	1
  5229   002738  6E41               	movwf	___fldiv@aexp^0,c
  5230   00273A  EFA8  F013         	goto	l1444
  5231   00273E                     l1445:
  5232   00273E  A029               	btfss	___fldiv@b^0,0,c
  5233   002740  EFA4  F013         	goto	u4141
  5234   002744  EFA6  F013         	goto	u4140
  5235   002748                     u4141:
  5236   002748  EFA8  F013         	goto	l1444
  5237   00274C                     u4140:
  5238   00274C  EF9B  F013         	goto	l4781
  5239   002750                     l1444:
  5240   002750  5041               	movf	___fldiv@aexp^0,w,c
  5241   002752  B4D8               	btfsc	status,2,c
  5242   002754  EFAE  F013         	goto	u4151
  5243   002758  EFB0  F013         	goto	u4150
  5244   00275C                     u4151:
  5245   00275C  EFD4  F013         	goto	l4793
  5246   002760                     u4150:
  5247   002760  0E01               	movlw	1
  5248   002762  2629               	addwf	___fldiv@b^0,f,c
  5249   002764  0E00               	movlw	0
  5250   002766  222A               	addwfc	(___fldiv@b+1)^0,f,c
  5251   002768  222B               	addwfc	(___fldiv@b+2)^0,f,c
  5252   00276A  222C               	addwfc	(___fldiv@b+3)^0,f,c
  5253   00276C  A02C               	btfss	(___fldiv@b+3)^0,0,c
  5254   00276E  EFBB  F013         	goto	u4161
  5255   002772  EFBD  F013         	goto	u4160
  5256   002776                     u4161:
  5257   002776  EFD4  F013         	goto	l4793
  5258   00277A                     u4160:
  5259   00277A  C029  F031         	movff	___fldiv@b,??___fldiv
  5260   00277E  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  5261   002782  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  5262   002786  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  5263   00278A  3434               	rlcf	(??___fldiv+3)^0,w,c
  5264   00278C  3234               	rrcf	(??___fldiv+3)^0,f,c
  5265   00278E  3233               	rrcf	(??___fldiv+2)^0,f,c
  5266   002790  3232               	rrcf	(??___fldiv+1)^0,f,c
  5267   002792  3231               	rrcf	??___fldiv^0,f,c
  5268   002794  C031  F029         	movff	??___fldiv,___fldiv@b
  5269   002798  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  5270   00279C  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  5271   0027A0  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  5272   0027A4  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  5273   0027A6  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  5274   0027A8                     l4793:
  5275   0027A8  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5276   0027AA  EFDF  F013         	goto	u4171
  5277   0027AE  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  5278   0027B0  E108               	bnz	u4170
  5279   0027B2  283A               	incf	___fldiv@new_exp^0,w,c
  5280   0027B4  A0D8               	btfss	status,0,c
  5281   0027B6  EFDF  F013         	goto	u4171
  5282   0027BA  EFE1  F013         	goto	u4170
  5283   0027BE                     u4171:
  5284   0027BE  EFEC  F013         	goto	l4797
  5285   0027C2                     u4170:
  5286   0027C2  0E00               	movlw	0
  5287   0027C4  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5288   0027C6  683A               	setf	___fldiv@new_exp^0,c
  5289   0027C8  0E00               	movlw	0
  5290   0027CA  6E29               	movwf	___fldiv@b^0,c
  5291   0027CC  0E00               	movlw	0
  5292   0027CE  6E2A               	movwf	(___fldiv@b+1)^0,c
  5293   0027D0  0E00               	movlw	0
  5294   0027D2  6E2B               	movwf	(___fldiv@b+2)^0,c
  5295   0027D4  0E00               	movlw	0
  5296   0027D6  6E2C               	movwf	(___fldiv@b+3)^0,c
  5297   0027D8                     l4797:
  5298   0027D8  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5299   0027DA  EFF9  F013         	goto	u4180
  5300   0027DE  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  5301   0027E0  E106               	bnz	u4181
  5302   0027E2  043A               	decf	___fldiv@new_exp^0,w,c
  5303   0027E4  B0D8               	btfsc	status,0,c
  5304   0027E6  EFF7  F013         	goto	u4181
  5305   0027EA  EFF9  F013         	goto	u4180
  5306   0027EE                     u4181:
  5307   0027EE  EF07  F014         	goto	l4801
  5308   0027F2                     u4180:
  5309   0027F2  0E00               	movlw	0
  5310   0027F4  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5311   0027F6  0E00               	movlw	0
  5312   0027F8  6E3A               	movwf	___fldiv@new_exp^0,c
  5313   0027FA  0E00               	movlw	0
  5314   0027FC  6E29               	movwf	___fldiv@b^0,c
  5315   0027FE  0E00               	movlw	0
  5316   002800  6E2A               	movwf	(___fldiv@b+1)^0,c
  5317   002802  0E00               	movlw	0
  5318   002804  6E2B               	movwf	(___fldiv@b+2)^0,c
  5319   002806  0E00               	movlw	0
  5320   002808  6E2C               	movwf	(___fldiv@b+3)^0,c
  5321   00280A  0E00               	movlw	0
  5322   00280C  6E39               	movwf	___fldiv@sign^0,c
  5323   00280E                     l4801:
  5324   00280E  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  5325   002812  A040               	btfss	___fldiv@bexp^0,0,c
  5326   002814  EF0E  F014         	goto	u4191
  5327   002818  EF10  F014         	goto	u4190
  5328   00281C                     u4191:
  5329   00281C  EF13  F014         	goto	l4807
  5330   002820                     u4190:
  5331   002820  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  5332   002822  EF14  F014         	goto	l4809
  5333   002826                     l4807:
  5334   002826  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  5335   002828                     l4809:
  5336   002828  90D8               	bcf	status,0,c
  5337   00282A  3040               	rrcf	___fldiv@bexp^0,w,c
  5338   00282C  6E2C               	movwf	(___fldiv@b+3)^0,c
  5339   00282E  EFCA  F012         	goto	l4723
  5340   002832                     l1431:
  5341   002832  0012               	return		;funcret
  5342   002834                     __end_of___fldiv:
  5343                           	callstack 0
  5344                           
  5345 ;; *************** function _initUSART4 *****************
  5346 ;; Defined at:
  5347 ;;		line 14 in file "serial.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;		None
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5365 ;;Total ram usage:        0 bytes
  5366 ;; Hardware stack levels used: 1
  5367 ;; Hardware stack levels required when called: 1
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_main
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text12
  5376   00505C                     __ptext12:
  5377                           	callstack 0
  5378   00505C                     _initUSART4:
  5379                           	callstack 29
  5380   00505C                     
  5381                           ;serial.c: 15:     RC0PPS = 0x12;
  5382   00505C  0E12               	movlw	18
  5383   00505E  010E               	movlb	14	; () banked
  5384   005060  6F62               	movwf	98,b	;volatile
  5385                           
  5386                           ;serial.c: 16:     RX4PPS = 0x11;
  5387   005062  0E11               	movlw	17
  5388   005064  6F15               	movwf	21,b	;volatile
  5389   005066                     
  5390                           ; BSR set to: 14
  5391                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5392   005066  97E9               	bcf	233,3,b	;volatile
  5393   005068                     
  5394                           ; BSR set to: 14
  5395                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5396   005068  95E8               	bcf	232,2,b	;volatile
  5397                           
  5398                           ;serial.c: 19:     SP4BRGL = 51;
  5399   00506A  0E33               	movlw	51
  5400   00506C  6FE5               	movwf	229,b	;volatile
  5401                           
  5402                           ;serial.c: 20:     SP4BRGH = 0;
  5403   00506E  0E00               	movlw	0
  5404   005070  6FE6               	movwf	230,b	;volatile
  5405   005072                     
  5406                           ; BSR set to: 14
  5407                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5408   005072  89E7               	bsf	231,4,b	;volatile
  5409   005074                     
  5410                           ; BSR set to: 14
  5411                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5412   005074  8BE8               	bsf	232,5,b	;volatile
  5413   005076                     
  5414                           ; BSR set to: 14
  5415                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5416   005076  8FE7               	bsf	231,7,b	;volatile
  5417   005078                     
  5418                           ; BSR set to: 14
  5419   005078  0012               	return		;funcret
  5420   00507A                     __end_of_initUSART4:
  5421                           	callstack 0
  5422                           
  5423 ;; *************** function _initDCmotorsPWM *****************
  5424 ;; Defined at:
  5425 ;;		line 5 in file "dc_motor.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5443 ;;Total ram usage:        2 bytes
  5444 ;; Hardware stack levels used: 1
  5445 ;; Hardware stack levels required when called: 1
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_main
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text13
  5454   004522                     __ptext13:
  5455                           	callstack 0
  5456   004522                     _initDCmotorsPWM:
  5457                           	callstack 29
  5458   004522                     
  5459                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5460   004522  9485               	bcf	133,2,c	;volatile
  5461                           
  5462                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5463   004524  9E83               	bcf	131,7,c	;volatile
  5464                           
  5465                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5466   004526  9885               	bcf	133,4,c	;volatile
  5467                           
  5468                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5469   004528  9C87               	bcf	135,6,c	;volatile
  5470                           
  5471                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5472   00452A  947D               	bcf	125,2,c	;volatile
  5473                           
  5474                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5475   00452C  9E7B               	bcf	123,7,c	;volatile
  5476                           
  5477                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5478   00452E  987D               	bcf	125,4,c	;volatile
  5479                           
  5480                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5481   004530  9C7F               	bcf	127,6,c	;volatile
  5482   004532                     
  5483                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5484   004532  0E05               	movlw	5
  5485   004534  010E               	movlb	14	; () banked
  5486   004536  6F74               	movwf	116,b	;volatile
  5487                           
  5488                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5489   004538  0E06               	movlw	6
  5490   00453A  6F76               	movwf	118,b	;volatile
  5491                           
  5492                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5493   00453C  0E07               	movlw	7
  5494   00453E  6F69               	movwf	105,b	;volatile
  5495                           
  5496                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5497   004540  0E08               	movlw	8
  5498   004542  6F88               	movwf	136,b	;volatile
  5499                           
  5500                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5501   004544  50BD               	movf	189,w,c	;volatile
  5502   004546  0B8F               	andlw	-113
  5503   004548  0940               	iorlw	64
  5504   00454A  6EBD               	movwf	189,c	;volatile
  5505                           
  5506                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5507   00454C  0EE0               	movlw	-32
  5508   00454E  16BE               	andwf	190,f,c	;volatile
  5509                           
  5510                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5511   004550  50BF               	movf	191,w,c	;volatile
  5512   004552  0BF0               	andlw	-16
  5513   004554  0901               	iorlw	1
  5514   004556  6EBF               	movwf	191,c	;volatile
  5515   004558                     
  5516                           ; BSR set to: 14
  5517                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5518   004558  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5519   00455C                     
  5520                           ; BSR set to: 14
  5521                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5522   00455C  8EBD               	bsf	189,7,c	;volatile
  5523                           
  5524                           ;dc_motor.c: 35:     CCPR1H=0;
  5525   00455E  0E00               	movlw	0
  5526   004560  6EAA               	movwf	170,c	;volatile
  5527                           
  5528                           ;dc_motor.c: 36:     CCPR2H=0;
  5529   004562  0E00               	movlw	0
  5530   004564  6EA6               	movwf	166,c	;volatile
  5531                           
  5532                           ;dc_motor.c: 37:     CCPR3H=0;
  5533   004566  0E00               	movlw	0
  5534   004568  010F               	movlb	15	; () banked
  5535   00456A  6F25               	movwf	37,b	;volatile
  5536                           
  5537                           ;dc_motor.c: 38:     CCPR4H=0;
  5538   00456C  0E00               	movlw	0
  5539   00456E  6F21               	movwf	33,b	;volatile
  5540                           
  5541                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5542   004570  0EFC               	movlw	-4
  5543   004572  16AD               	andwf	173,f,c	;volatile
  5544                           
  5545                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5546   004574  0EF3               	movlw	-13
  5547   004576  16AD               	andwf	173,f,c	;volatile
  5548                           
  5549                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5550   004578  0ECF               	movlw	-49
  5551   00457A  16AD               	andwf	173,f,c	;volatile
  5552                           
  5553                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5554   00457C  0E3F               	movlw	-193
  5555   00457E  16AD               	andwf	173,f,c	;volatile
  5556   004580                     
  5557                           ; BSR set to: 15
  5558                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5559   004580  88AB               	bsf	171,4,c	;volatile
  5560                           
  5561                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5562   004582  50AB               	movf	171,w,c	;volatile
  5563   004584  0BF0               	andlw	-16
  5564   004586  090C               	iorlw	12
  5565   004588  6EAB               	movwf	171,c	;volatile
  5566   00458A                     
  5567                           ; BSR set to: 15
  5568                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5569   00458A  8EAB               	bsf	171,7,c	;volatile
  5570   00458C                     
  5571                           ; BSR set to: 15
  5572                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5573   00458C  88A7               	bsf	167,4,c	;volatile
  5574                           
  5575                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5576   00458E  50A7               	movf	167,w,c	;volatile
  5577   004590  0BF0               	andlw	-16
  5578   004592  090C               	iorlw	12
  5579   004594  6EA7               	movwf	167,c	;volatile
  5580   004596                     
  5581                           ; BSR set to: 15
  5582                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5583   004596  8EA7               	bsf	167,7,c	;volatile
  5584   004598                     
  5585                           ; BSR set to: 15
  5586                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5587   004598  8926               	bsf	38,4,b	;volatile
  5588                           
  5589                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5590   00459A  5126               	movf	38,w,b	;volatile
  5591   00459C  0BF0               	andlw	-16
  5592   00459E  090C               	iorlw	12
  5593   0045A0  6F26               	movwf	38,b	;volatile
  5594   0045A2                     
  5595                           ; BSR set to: 15
  5596                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5597   0045A2  8F26               	bsf	38,7,b	;volatile
  5598   0045A4                     
  5599                           ; BSR set to: 15
  5600                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5601   0045A4  8922               	bsf	34,4,b	;volatile
  5602                           
  5603                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5604   0045A6  5122               	movf	34,w,b	;volatile
  5605   0045A8  0BF0               	andlw	-16
  5606   0045AA  090C               	iorlw	12
  5607   0045AC  6F22               	movwf	34,b	;volatile
  5608   0045AE                     
  5609                           ; BSR set to: 15
  5610                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5611   0045AE  8F22               	bsf	34,7,b	;volatile
  5612   0045B0                     
  5613                           ; BSR set to: 15
  5614   0045B0  0012               	return		;funcret
  5615   0045B2                     __end_of_initDCmotorsPWM:
  5616                           	callstack 0
  5617                           
  5618 ;; *************** function _get16bitTMR0val *****************
  5619 ;; Defined at:
  5620 ;;		line 36 in file "timers.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  path_step       2   27[COMRAM] unsigned int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  time_ms         4   33[COMRAM] long 
  5625 ;;  combined_val    2   37[COMRAM] int 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  2   27[COMRAM] unsigned int 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5638 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5639 ;;Total ram usage:       12 bytes
  5640 ;; Hardware stack levels used: 1
  5641 ;; Hardware stack levels required when called: 2
  5642 ;; This function calls:
  5643 ;;		___aldiv
  5644 ;;		___lmul
  5645 ;;		_logAction
  5646 ;; This function is called by:
  5647 ;;		_main
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text14
  5652   0043EE                     __ptext14:
  5653                           	callstack 0
  5654   0043EE                     _get16bitTMR0val:
  5655                           	callstack 28
  5656   0043EE                     
  5657                           ;timers.c: 36: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 37: {;time
      +                          rs.c: 38:     int combined_value;;timers.c: 39:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  5658   0043EE  50D4               	movf	212,w,c	;volatile
  5659   0043F0  6E1F               	movwf	(??_get16bitTMR0val+1)^0,c
  5660   0043F2  6A1E               	clrf	??_get16bitTMR0val^0,c
  5661   0043F4  50D3               	movf	211,w,c	;volatile
  5662   0043F6  6E20               	movwf	(??_get16bitTMR0val+2)^0,c
  5663   0043F8  6A21               	clrf	(??_get16bitTMR0val+3)^0,c
  5664   0043FA  501E               	movf	??_get16bitTMR0val^0,w,c
  5665   0043FC  1020               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  5666   0043FE  6E26               	movwf	get16bitTMR0val@combined_value^0,c
  5667   004400  501F               	movf	(??_get16bitTMR0val+1)^0,w,c
  5668   004402  1021               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  5669   004404  6E27               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  5670   004406                     
  5671                           ;timers.c: 40:     long time_ms = combined_value*65535*4*8192/64000000;
  5672   004406  C026  F002         	movff	get16bitTMR0val@combined_value,___lmul@multiplier
  5673   00440A  C027  F003         	movff	get16bitTMR0val@combined_value+1,___lmul@multiplier+1
  5674   00440E  0E00               	movlw	0
  5675   004410  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  5676   004412  0EFF               	movlw	-1
  5677   004414  6E04               	movwf	(___lmul@multiplier+2)^0,c
  5678   004416  6E05               	movwf	(___lmul@multiplier+3)^0,c
  5679   004418  0E00               	movlw	0
  5680   00441A  6E06               	movwf	___lmul@multiplicand^0,c
  5681   00441C  0E80               	movlw	128
  5682   00441E  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  5683   004420  0EFF               	movlw	255
  5684   004422  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  5685   004424  0E7F               	movlw	127
  5686   004426  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  5687   004428  EC13  F024         	call	___lmul	;wreg free
  5688   00442C  C002  F00E         	movff	?___lmul,___aldiv@dividend
  5689   004430  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  5690   004434  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  5691   004438  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  5692   00443C  0E00               	movlw	0
  5693   00443E  6E12               	movwf	___aldiv@divisor^0,c
  5694   004440  0E90               	movlw	144
  5695   004442  6E13               	movwf	(___aldiv@divisor+1)^0,c
  5696   004444  0ED0               	movlw	208
  5697   004446  6E14               	movwf	(___aldiv@divisor+2)^0,c
  5698   004448  0E03               	movlw	3
  5699   00444A  6E15               	movwf	(___aldiv@divisor+3)^0,c
  5700   00444C  ECD7  F01D         	call	___aldiv	;wreg free
  5701   004450  C00E  F022         	movff	?___aldiv,get16bitTMR0val@time_ms
  5702   004454  C00F  F023         	movff	?___aldiv+1,get16bitTMR0val@time_ms+1
  5703   004458  C010  F024         	movff	?___aldiv+2,get16bitTMR0val@time_ms+2
  5704   00445C  C011  F025         	movff	?___aldiv+3,get16bitTMR0val@time_ms+3
  5705   004460                     
  5706                           ;timers.c: 42:     logAction(0,time_ms, path_step);
  5707   004460  C022  F002         	movff	get16bitTMR0val@time_ms,logAction@newTime
  5708   004464  C023  F003         	movff	get16bitTMR0val@time_ms+1,logAction@newTime+1
  5709   004468  C024  F004         	movff	get16bitTMR0val@time_ms+2,logAction@newTime+2
  5710   00446C  C025  F005         	movff	get16bitTMR0val@time_ms+3,logAction@newTime+3
  5711   004470  C01C  F006         	movff	get16bitTMR0val@path_step,logAction@path_step
  5712   004474  C01D  F007         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  5713   004478  0E00               	movlw	0
  5714   00447A  EC48  F024         	call	_logAction
  5715   00447E                     
  5716                           ;timers.c: 43:     path_step++;
  5717   00447E  4A1C               	infsnz	get16bitTMR0val@path_step^0,f,c
  5718   004480  2A1D               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  5719   004482                     
  5720                           ;timers.c: 45:     return path_step;
  5721   004482  C01C  F01C         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  5722   004486  C01D  F01D         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  5723   00448A  0012               	return		;funcret
  5724   00448C                     __end_of_get16bitTMR0val:
  5725                           	callstack 0
  5726                           
  5727 ;; *************** function ___lmul *****************
  5728 ;; Defined at:
  5729 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  multiplier      4    1[COMRAM] unsigned long 
  5732 ;;  multiplicand    4    5[COMRAM] unsigned long 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  product         4    9[COMRAM] unsigned long 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  4    1[COMRAM] unsigned long 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5744 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5745 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5747 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5748 ;;Total ram usage:       12 bytes
  5749 ;; Hardware stack levels used: 1
  5750 ;; Hardware stack levels required when called: 1
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_get16bitTMR0val
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text15
  5759   004826                     __ptext15:
  5760                           	callstack 0
  5761   004826                     ___lmul:
  5762                           	callstack 28
  5763   004826  0E00               	movlw	0
  5764   004828  6E0A               	movwf	___lmul@product^0,c
  5765   00482A  0E00               	movlw	0
  5766   00482C  6E0B               	movwf	(___lmul@product+1)^0,c
  5767   00482E  0E00               	movlw	0
  5768   004830  6E0C               	movwf	(___lmul@product+2)^0,c
  5769   004832  0E00               	movlw	0
  5770   004834  6E0D               	movwf	(___lmul@product+3)^0,c
  5771   004836                     l5121:
  5772   004836  A002               	btfss	___lmul@multiplier^0,0,c
  5773   004838  EF20  F024         	goto	u4531
  5774   00483C  EF22  F024         	goto	u4530
  5775   004840                     u4531:
  5776   004840  EF2A  F024         	goto	l5125
  5777   004844                     u4530:
  5778   004844  5006               	movf	___lmul@multiplicand^0,w,c
  5779   004846  260A               	addwf	___lmul@product^0,f,c
  5780   004848  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  5781   00484A  220B               	addwfc	(___lmul@product+1)^0,f,c
  5782   00484C  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  5783   00484E  220C               	addwfc	(___lmul@product+2)^0,f,c
  5784   004850  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  5785   004852  220D               	addwfc	(___lmul@product+3)^0,f,c
  5786   004854                     l5125:
  5787   004854  90D8               	bcf	status,0,c
  5788   004856  3606               	rlcf	___lmul@multiplicand^0,f,c
  5789   004858  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5790   00485A  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5791   00485C  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5792   00485E  90D8               	bcf	status,0,c
  5793   004860  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  5794   004862  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  5795   004864  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  5796   004866  3202               	rrcf	___lmul@multiplier^0,f,c
  5797   004868  5002               	movf	___lmul@multiplier^0,w,c
  5798   00486A  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  5799   00486C  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  5800   00486E  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  5801   004870  A4D8               	btfss	status,2,c
  5802   004872  EF3D  F024         	goto	u4541
  5803   004876  EF3F  F024         	goto	u4540
  5804   00487A                     u4541:
  5805   00487A  EF1B  F024         	goto	l5121
  5806   00487E                     u4540:
  5807   00487E  C00A  F002         	movff	___lmul@product,?___lmul
  5808   004882  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  5809   004886  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  5810   00488A  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  5811   00488E  0012               	return		;funcret
  5812   004890                     __end_of___lmul:
  5813                           	callstack 0
  5814                           
  5815 ;; *************** function ___aldiv *****************
  5816 ;; Defined at:
  5817 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  dividend        4   13[COMRAM] long 
  5820 ;;  divisor         4   17[COMRAM] long 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  quotient        4   23[COMRAM] long 
  5823 ;;  sign            1   22[COMRAM] unsigned char 
  5824 ;;  counter         1   21[COMRAM] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  4   13[COMRAM] long 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5834 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5837 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5838 ;;Total ram usage:       14 bytes
  5839 ;; Hardware stack levels used: 1
  5840 ;; Hardware stack levels required when called: 1
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_get16bitTMR0val
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text16
  5849   003BAE                     __ptext16:
  5850                           	callstack 0
  5851   003BAE                     ___aldiv:
  5852                           	callstack 28
  5853   003BAE  0E00               	movlw	0
  5854   003BB0  6E17               	movwf	___aldiv@sign^0,c
  5855   003BB2  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  5856   003BB4  EFE0  F01D         	goto	u4550
  5857   003BB8  EFDE  F01D         	goto	u4551
  5858   003BBC                     u4551:
  5859   003BBC  EFEA  F01D         	goto	l5137
  5860   003BC0                     u4550:
  5861   003BC0  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  5862   003BC2  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  5863   003BC4  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  5864   003BC6  6C12               	negf	___aldiv@divisor^0,c
  5865   003BC8  0E00               	movlw	0
  5866   003BCA  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  5867   003BCC  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  5868   003BCE  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  5869   003BD0  0E01               	movlw	1
  5870   003BD2  6E17               	movwf	___aldiv@sign^0,c
  5871   003BD4                     l5137:
  5872   003BD4  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  5873   003BD6  EFF1  F01D         	goto	u4560
  5874   003BDA  EFEF  F01D         	goto	u4561
  5875   003BDE                     u4561:
  5876   003BDE  EFFB  F01D         	goto	l5143
  5877   003BE2                     u4560:
  5878   003BE2  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  5879   003BE4  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  5880   003BE6  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  5881   003BE8  6C0E               	negf	___aldiv@dividend^0,c
  5882   003BEA  0E00               	movlw	0
  5883   003BEC  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  5884   003BEE  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  5885   003BF0  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  5886   003BF2  0E01               	movlw	1
  5887   003BF4  1A17               	xorwf	___aldiv@sign^0,f,c
  5888   003BF6                     l5143:
  5889   003BF6  0E00               	movlw	0
  5890   003BF8  6E18               	movwf	___aldiv@quotient^0,c
  5891   003BFA  0E00               	movlw	0
  5892   003BFC  6E19               	movwf	(___aldiv@quotient+1)^0,c
  5893   003BFE  0E00               	movlw	0
  5894   003C00  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  5895   003C02  0E00               	movlw	0
  5896   003C04  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  5897   003C06  5012               	movf	___aldiv@divisor^0,w,c
  5898   003C08  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  5899   003C0A  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  5900   003C0C  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  5901   003C0E  B4D8               	btfsc	status,2,c
  5902   003C10  EF0C  F01E         	goto	u4571
  5903   003C14  EF0E  F01E         	goto	u4570
  5904   003C18                     u4571:
  5905   003C18  EF44  F01E         	goto	l5165
  5906   003C1C                     u4570:
  5907   003C1C  0E01               	movlw	1
  5908   003C1E  6E16               	movwf	___aldiv@counter^0,c
  5909   003C20  EF18  F01E         	goto	l5151
  5910   003C24                     l5149:
  5911   003C24  90D8               	bcf	status,0,c
  5912   003C26  3612               	rlcf	___aldiv@divisor^0,f,c
  5913   003C28  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  5914   003C2A  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  5915   003C2C  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  5916   003C2E  2A16               	incf	___aldiv@counter^0,f,c
  5917   003C30                     l5151:
  5918   003C30  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  5919   003C32  EF1D  F01E         	goto	u4581
  5920   003C36  EF1F  F01E         	goto	u4580
  5921   003C3A                     u4581:
  5922   003C3A  EF12  F01E         	goto	l5149
  5923   003C3E                     u4580:
  5924   003C3E                     l5153:
  5925   003C3E  90D8               	bcf	status,0,c
  5926   003C40  3618               	rlcf	___aldiv@quotient^0,f,c
  5927   003C42  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  5928   003C44  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  5929   003C46  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  5930   003C48  5012               	movf	___aldiv@divisor^0,w,c
  5931   003C4A  5C0E               	subwf	___aldiv@dividend^0,w,c
  5932   003C4C  5013               	movf	(___aldiv@divisor+1)^0,w,c
  5933   003C4E  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  5934   003C50  5014               	movf	(___aldiv@divisor+2)^0,w,c
  5935   003C52  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  5936   003C54  5015               	movf	(___aldiv@divisor+3)^0,w,c
  5937   003C56  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  5938   003C58  A0D8               	btfss	status,0,c
  5939   003C5A  EF31  F01E         	goto	u4591
  5940   003C5E  EF33  F01E         	goto	u4590
  5941   003C62                     u4591:
  5942   003C62  EF3C  F01E         	goto	l5161
  5943   003C66                     u4590:
  5944   003C66  5012               	movf	___aldiv@divisor^0,w,c
  5945   003C68  5E0E               	subwf	___aldiv@dividend^0,f,c
  5946   003C6A  5013               	movf	(___aldiv@divisor+1)^0,w,c
  5947   003C6C  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  5948   003C6E  5014               	movf	(___aldiv@divisor+2)^0,w,c
  5949   003C70  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  5950   003C72  5015               	movf	(___aldiv@divisor+3)^0,w,c
  5951   003C74  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  5952   003C76  8018               	bsf	___aldiv@quotient^0,0,c
  5953   003C78                     l5161:
  5954   003C78  90D8               	bcf	status,0,c
  5955   003C7A  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  5956   003C7C  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  5957   003C7E  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  5958   003C80  3212               	rrcf	___aldiv@divisor^0,f,c
  5959   003C82  2E16               	decfsz	___aldiv@counter^0,f,c
  5960   003C84  EF1F  F01E         	goto	l5153
  5961   003C88                     l5165:
  5962   003C88  5017               	movf	___aldiv@sign^0,w,c
  5963   003C8A  B4D8               	btfsc	status,2,c
  5964   003C8C  EF4A  F01E         	goto	u4601
  5965   003C90  EF4C  F01E         	goto	u4600
  5966   003C94                     u4601:
  5967   003C94  EF54  F01E         	goto	l5169
  5968   003C98                     u4600:
  5969   003C98  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  5970   003C9A  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  5971   003C9C  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  5972   003C9E  6C18               	negf	___aldiv@quotient^0,c
  5973   003CA0  0E00               	movlw	0
  5974   003CA2  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  5975   003CA4  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  5976   003CA6  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  5977   003CA8                     l5169:
  5978   003CA8  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  5979   003CAC  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  5980   003CB0  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  5981   003CB4  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  5982   003CB8  0012               	return		;funcret
  5983   003CBA                     __end_of___aldiv:
  5984                           	callstack 0
  5985                           
  5986 ;; *************** function _decision *****************
  5987 ;; Defined at:
  5988 ;;		line 181 in file "color.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  hue             2   36[COMRAM] unsigned int 
  5991 ;;  path_step       2   38[COMRAM] unsigned int 
  5992 ;;  factorR         2   40[COMRAM] unsigned int 
  5993 ;;  factorL         2   42[COMRAM] unsigned int 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  color           2    0        unsigned int 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2   36[COMRAM] unsigned int 
  5998 ;; Registers used:
  5999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6005 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;Total ram usage:        8 bytes
  6010 ;; Hardware stack levels used: 1
  6011 ;; Hardware stack levels required when called: 6
  6012 ;; This function calls:
  6013 ;;		_logAction
  6014 ;;		_moveBlue
  6015 ;;		_moveGreen
  6016 ;;		_moveLightBlue
  6017 ;;		_moveOrange
  6018 ;;		_movePink
  6019 ;;		_moveRed
  6020 ;;		_moveYellow
  6021 ;; This function is called by:
  6022 ;;		_main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text17
  6027   002834                     __ptext17:
  6028                           	callstack 0
  6029   002834                     _decision:
  6030                           	callstack 24
  6031   002834                     
  6032                           ;color.c: 186:     unsigned int color;;color.c: 188:     if (hue<=10 || hue>=355) {
  6033   002834  5026               	movf	(decision@hue+1)^0,w,c
  6034   002836  E109               	bnz	u4610
  6035   002838  0E0B               	movlw	11
  6036   00283A  5C25               	subwf	decision@hue^0,w,c
  6037   00283C  A0D8               	btfss	status,0,c
  6038   00283E  EF23  F014         	goto	u4611
  6039   002842  EF25  F014         	goto	u4610
  6040   002846                     u4611:
  6041   002846  EF30  F014         	goto	l5225
  6042   00284A                     u4610:
  6043   00284A  0E63               	movlw	99
  6044   00284C  5C25               	subwf	decision@hue^0,w,c
  6045   00284E  0E01               	movlw	1
  6046   002850  5826               	subwfb	(decision@hue+1)^0,w,c
  6047   002852  A0D8               	btfss	status,0,c
  6048   002854  EF2E  F014         	goto	u4621
  6049   002858  EF30  F014         	goto	u4620
  6050   00285C                     u4621:
  6051   00285C  EF4D  F014         	goto	l5233
  6052   002860                     u4620:
  6053   002860                     l5225:
  6054                           
  6055                           ;color.c: 189:         moveRed(&motorL, &motorR, factorR);
  6056   002860  0EE9               	movlw	low _motorL
  6057   002862  6E1F               	movwf	moveRed@mL^0,c
  6058   002864  0EE0               	movlw	low _motorR
  6059   002866  6E20               	movwf	moveRed@mR^0,c
  6060   002868  C029  F021         	movff	decision@factorR,moveRed@factorR
  6061   00286C  C02A  F022         	movff	decision@factorR+1,moveRed@factorR+1
  6062   002870  ECF8  F025         	call	_moveRed	;wreg free
  6063   002874                     
  6064                           ;color.c: 190:         logAction(1,0, path_step);
  6065   002874  0E00               	movlw	0
  6066   002876  6E02               	movwf	logAction@newTime^0,c
  6067   002878  0E00               	movlw	0
  6068   00287A  6E03               	movwf	(logAction@newTime+1)^0,c
  6069   00287C  0E00               	movlw	0
  6070   00287E  6E04               	movwf	(logAction@newTime+2)^0,c
  6071   002880  0E00               	movlw	0
  6072   002882  6E05               	movwf	(logAction@newTime+3)^0,c
  6073   002884  C027  F006         	movff	decision@path_step,logAction@path_step
  6074   002888  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6075   00288C  0E01               	movlw	1
  6076   00288E  EC48  F024         	call	_logAction
  6077   002892                     l5231:
  6078                           
  6079                           ;color.c: 192:         path_step++;
  6080   002892  4A27               	infsnz	decision@path_step^0,f,c
  6081   002894  2A28               	incf	(decision@path_step+1)^0,f,c
  6082                           
  6083                           ;color.c: 193:     }
  6084   002896  EF67  F015         	goto	l5305
  6085   00289A                     l5233:
  6086   00289A  5026               	movf	(decision@hue+1)^0,w,c
  6087   00289C  E109               	bnz	u4630
  6088   00289E  0E69               	movlw	105
  6089   0028A0  5C25               	subwf	decision@hue^0,w,c
  6090   0028A2  A0D8               	btfss	status,0,c
  6091   0028A4  EF56  F014         	goto	u4631
  6092   0028A8  EF58  F014         	goto	u4630
  6093   0028AC                     u4631:
  6094   0028AC  EF7E  F014         	goto	l5245
  6095   0028B0                     u4630:
  6096   0028B0  5026               	movf	(decision@hue+1)^0,w,c
  6097   0028B2  E107               	bnz	u4641
  6098   0028B4  0E83               	movlw	131
  6099   0028B6  5C25               	subwf	decision@hue^0,w,c
  6100   0028B8  B0D8               	btfsc	status,0,c
  6101   0028BA  EF61  F014         	goto	u4641
  6102   0028BE  EF63  F014         	goto	u4640
  6103   0028C2                     u4641:
  6104   0028C2  EF7E  F014         	goto	l5245
  6105   0028C6                     u4640:
  6106   0028C6                     
  6107                           ;color.c: 195:         moveGreen(&motorL, &motorR,factorL);
  6108   0028C6  0EE9               	movlw	low _motorL
  6109   0028C8  6E1F               	movwf	moveGreen@mL^0,c
  6110   0028CA  0EE0               	movlw	low _motorR
  6111   0028CC  6E20               	movwf	moveGreen@mR^0,c
  6112   0028CE  C02B  F021         	movff	decision@factorL,moveGreen@factorL
  6113   0028D2  C02C  F022         	movff	decision@factorL+1,moveGreen@factorL+1
  6114   0028D6  EC32  F026         	call	_moveGreen	;wreg free
  6115   0028DA                     
  6116                           ;color.c: 196:         logAction(2,0, path_step);
  6117   0028DA  0E00               	movlw	0
  6118   0028DC  6E02               	movwf	logAction@newTime^0,c
  6119   0028DE  0E00               	movlw	0
  6120   0028E0  6E03               	movwf	(logAction@newTime+1)^0,c
  6121   0028E2  0E00               	movlw	0
  6122   0028E4  6E04               	movwf	(logAction@newTime+2)^0,c
  6123   0028E6  0E00               	movlw	0
  6124   0028E8  6E05               	movwf	(logAction@newTime+3)^0,c
  6125   0028EA  C027  F006         	movff	decision@path_step,logAction@path_step
  6126   0028EE  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6127   0028F2  0E02               	movlw	2
  6128   0028F4  EC48  F024         	call	_logAction
  6129   0028F8  EF49  F014         	goto	l5231
  6130   0028FC                     l5245:
  6131   0028FC  5026               	movf	(decision@hue+1)^0,w,c
  6132   0028FE  E109               	bnz	u4650
  6133   002900  0EE6               	movlw	230
  6134   002902  5C25               	subwf	decision@hue^0,w,c
  6135   002904  A0D8               	btfss	status,0,c
  6136   002906  EF87  F014         	goto	u4651
  6137   00290A  EF89  F014         	goto	u4650
  6138   00290E                     u4651:
  6139   00290E  EFAB  F014         	goto	l5257
  6140   002912                     u4650:
  6141   002912  5026               	movf	(decision@hue+1)^0,w,c
  6142   002914  E107               	bnz	u4661
  6143   002916  0EF9               	movlw	249
  6144   002918  5C25               	subwf	decision@hue^0,w,c
  6145   00291A  B0D8               	btfsc	status,0,c
  6146   00291C  EF92  F014         	goto	u4661
  6147   002920  EF94  F014         	goto	u4660
  6148   002924                     u4661:
  6149   002924  EFAB  F014         	goto	l5257
  6150   002928                     u4660:
  6151   002928                     
  6152                           ;color.c: 200:         moveBlue(&motorL,&motorR);
  6153   002928  0EE9               	movlw	low _motorL
  6154   00292A  6E1D               	movwf	moveBlue@mL^0,c
  6155   00292C  0EE0               	movlw	low _motorR
  6156   00292E  6E1E               	movwf	moveBlue@mR^0,c
  6157   002930  EC1D  F027         	call	_moveBlue	;wreg free
  6158   002934                     
  6159                           ;color.c: 201:         logAction(3,0, path_step);
  6160   002934  0E00               	movlw	0
  6161   002936  6E02               	movwf	logAction@newTime^0,c
  6162   002938  0E00               	movlw	0
  6163   00293A  6E03               	movwf	(logAction@newTime+1)^0,c
  6164   00293C  0E00               	movlw	0
  6165   00293E  6E04               	movwf	(logAction@newTime+2)^0,c
  6166   002940  0E00               	movlw	0
  6167   002942  6E05               	movwf	(logAction@newTime+3)^0,c
  6168   002944  C027  F006         	movff	decision@path_step,logAction@path_step
  6169   002948  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6170   00294C  0E03               	movlw	3
  6171   00294E  EC48  F024         	call	_logAction
  6172   002952  EF49  F014         	goto	l5231
  6173   002956                     l5257:
  6174   002956  5026               	movf	(decision@hue+1)^0,w,c
  6175   002958  E109               	bnz	u4670
  6176   00295A  0EC8               	movlw	200
  6177   00295C  5C25               	subwf	decision@hue^0,w,c
  6178   00295E  A0D8               	btfss	status,0,c
  6179   002960  EFB4  F014         	goto	u4671
  6180   002964  EFB6  F014         	goto	u4670
  6181   002968                     u4671:
  6182   002968  EFD8  F014         	goto	l5269
  6183   00296C                     u4670:
  6184   00296C  5026               	movf	(decision@hue+1)^0,w,c
  6185   00296E  E107               	bnz	u4681
  6186   002970  0EE7               	movlw	231
  6187   002972  5C25               	subwf	decision@hue^0,w,c
  6188   002974  B0D8               	btfsc	status,0,c
  6189   002976  EFBF  F014         	goto	u4681
  6190   00297A  EFC1  F014         	goto	u4680
  6191   00297E                     u4681:
  6192   00297E  EFD8  F014         	goto	l5269
  6193   002982                     u4680:
  6194   002982                     
  6195                           ;color.c: 205:         moveLightBlue(&motorL,&motorR);
  6196   002982  0EE9               	movlw	low _motorL
  6197   002984  6E1D               	movwf	moveLightBlue@mL^0,c
  6198   002986  0EE0               	movlw	low _motorR
  6199   002988  6E1E               	movwf	moveLightBlue@mR^0,c
  6200   00298A  EC04  F027         	call	_moveLightBlue	;wreg free
  6201   00298E                     
  6202                           ;color.c: 206:         logAction(4,0, path_step);
  6203   00298E  0E00               	movlw	0
  6204   002990  6E02               	movwf	logAction@newTime^0,c
  6205   002992  0E00               	movlw	0
  6206   002994  6E03               	movwf	(logAction@newTime+1)^0,c
  6207   002996  0E00               	movlw	0
  6208   002998  6E04               	movwf	(logAction@newTime+2)^0,c
  6209   00299A  0E00               	movlw	0
  6210   00299C  6E05               	movwf	(logAction@newTime+3)^0,c
  6211   00299E  C027  F006         	movff	decision@path_step,logAction@path_step
  6212   0029A2  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6213   0029A6  0E04               	movlw	4
  6214   0029A8  EC48  F024         	call	_logAction
  6215   0029AC  EF49  F014         	goto	l5231
  6216   0029B0                     l5269:
  6217   0029B0  0E2E               	movlw	46
  6218   0029B2  5C25               	subwf	decision@hue^0,w,c
  6219   0029B4  0E01               	movlw	1
  6220   0029B6  5826               	subwfb	(decision@hue+1)^0,w,c
  6221   0029B8  A0D8               	btfss	status,0,c
  6222   0029BA  EFE1  F014         	goto	u4691
  6223   0029BE  EFE3  F014         	goto	u4690
  6224   0029C2                     u4691:
  6225   0029C2  EF09  F015         	goto	l5281
  6226   0029C6                     u4690:
  6227   0029C6  0E5B               	movlw	91
  6228   0029C8  5C25               	subwf	decision@hue^0,w,c
  6229   0029CA  0E01               	movlw	1
  6230   0029CC  5826               	subwfb	(decision@hue+1)^0,w,c
  6231   0029CE  B0D8               	btfsc	status,0,c
  6232   0029D0  EFEC  F014         	goto	u4701
  6233   0029D4  EFEE  F014         	goto	u4700
  6234   0029D8                     u4701:
  6235   0029D8  EF09  F015         	goto	l5281
  6236   0029DC                     u4700:
  6237   0029DC                     
  6238                           ;color.c: 210:         moveYellow(&motorL,&motorR, factorR);
  6239   0029DC  0EE9               	movlw	low _motorL
  6240   0029DE  6E1F               	movwf	moveYellow@mL^0,c
  6241   0029E0  0EE0               	movlw	low _motorR
  6242   0029E2  6E20               	movwf	moveYellow@mR^0,c
  6243   0029E4  C029  F021         	movff	decision@factorR,moveYellow@factorR
  6244   0029E8  C02A  F022         	movff	decision@factorR+1,moveYellow@factorR+1
  6245   0029EC  ECDB  F025         	call	_moveYellow	;wreg free
  6246   0029F0                     
  6247                           ;color.c: 211:         logAction(5,0, path_step);
  6248   0029F0  0E00               	movlw	0
  6249   0029F2  6E02               	movwf	logAction@newTime^0,c
  6250   0029F4  0E00               	movlw	0
  6251   0029F6  6E03               	movwf	(logAction@newTime+1)^0,c
  6252   0029F8  0E00               	movlw	0
  6253   0029FA  6E04               	movwf	(logAction@newTime+2)^0,c
  6254   0029FC  0E00               	movlw	0
  6255   0029FE  6E05               	movwf	(logAction@newTime+3)^0,c
  6256   002A00  C027  F006         	movff	decision@path_step,logAction@path_step
  6257   002A04  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6258   002A08  0E05               	movlw	5
  6259   002A0A  EC48  F024         	call	_logAction
  6260   002A0E  EF49  F014         	goto	l5231
  6261   002A12                     l5281:
  6262   002A12  5026               	movf	(decision@hue+1)^0,w,c
  6263   002A14  E109               	bnz	u4710
  6264   002A16  0E0F               	movlw	15
  6265   002A18  5C25               	subwf	decision@hue^0,w,c
  6266   002A1A  A0D8               	btfss	status,0,c
  6267   002A1C  EF12  F015         	goto	u4711
  6268   002A20  EF14  F015         	goto	u4710
  6269   002A24                     u4711:
  6270   002A24  EF36  F015         	goto	l5293
  6271   002A28                     u4710:
  6272   002A28  5026               	movf	(decision@hue+1)^0,w,c
  6273   002A2A  E107               	bnz	u4721
  6274   002A2C  0E24               	movlw	36
  6275   002A2E  5C25               	subwf	decision@hue^0,w,c
  6276   002A30  B0D8               	btfsc	status,0,c
  6277   002A32  EF1D  F015         	goto	u4721
  6278   002A36  EF1F  F015         	goto	u4720
  6279   002A3A                     u4721:
  6280   002A3A  EF36  F015         	goto	l5293
  6281   002A3E                     u4720:
  6282   002A3E                     
  6283                           ;color.c: 215:         moveOrange(&motorL,&motorR);
  6284   002A3E  0EE9               	movlw	low _motorL
  6285   002A40  6E1D               	movwf	moveOrange@mL^0,c
  6286   002A42  0EE0               	movlw	low _motorR
  6287   002A44  6E1E               	movwf	moveOrange@mR^0,c
  6288   002A46  ECD2  F026         	call	_moveOrange	;wreg free
  6289   002A4A                     
  6290                           ;color.c: 216:         logAction(6,0, path_step);
  6291   002A4A  0E00               	movlw	0
  6292   002A4C  6E02               	movwf	logAction@newTime^0,c
  6293   002A4E  0E00               	movlw	0
  6294   002A50  6E03               	movwf	(logAction@newTime+1)^0,c
  6295   002A52  0E00               	movlw	0
  6296   002A54  6E04               	movwf	(logAction@newTime+2)^0,c
  6297   002A56  0E00               	movlw	0
  6298   002A58  6E05               	movwf	(logAction@newTime+3)^0,c
  6299   002A5A  C027  F006         	movff	decision@path_step,logAction@path_step
  6300   002A5E  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6301   002A62  0E06               	movlw	6
  6302   002A64  EC48  F024         	call	_logAction
  6303   002A68  EF49  F014         	goto	l5231
  6304   002A6C                     l5293:
  6305   002A6C  5026               	movf	(decision@hue+1)^0,w,c
  6306   002A6E  E109               	bnz	u4730
  6307   002A70  0EF0               	movlw	240
  6308   002A72  5C25               	subwf	decision@hue^0,w,c
  6309   002A74  A0D8               	btfss	status,0,c
  6310   002A76  EF3F  F015         	goto	u4731
  6311   002A7A  EF41  F015         	goto	u4730
  6312   002A7E                     u4731:
  6313   002A7E  EF67  F015         	goto	l138
  6314   002A82                     u4730:
  6315   002A82  0E05               	movlw	5
  6316   002A84  5C25               	subwf	decision@hue^0,w,c
  6317   002A86  0E01               	movlw	1
  6318   002A88  5826               	subwfb	(decision@hue+1)^0,w,c
  6319   002A8A  B0D8               	btfsc	status,0,c
  6320   002A8C  EF4A  F015         	goto	u4741
  6321   002A90  EF4C  F015         	goto	u4740
  6322   002A94                     u4741:
  6323   002A94  EF67  F015         	goto	l138
  6324   002A98                     u4740:
  6325   002A98                     
  6326                           ;color.c: 221:         movePink(&motorL,&motorR, factorL);
  6327   002A98  0EE9               	movlw	low _motorL
  6328   002A9A  6E1F               	movwf	movePink@mL^0,c
  6329   002A9C  0EE0               	movlw	low _motorR
  6330   002A9E  6E20               	movwf	movePink@mR^0,c
  6331   002AA0  C02B  F021         	movff	decision@factorL,movePink@factorL
  6332   002AA4  C02C  F022         	movff	decision@factorL+1,movePink@factorL+1
  6333   002AA8  EC15  F026         	call	_movePink	;wreg free
  6334   002AAC                     
  6335                           ;color.c: 222:         logAction(7,0, path_step);
  6336   002AAC  0E00               	movlw	0
  6337   002AAE  6E02               	movwf	logAction@newTime^0,c
  6338   002AB0  0E00               	movlw	0
  6339   002AB2  6E03               	movwf	(logAction@newTime+1)^0,c
  6340   002AB4  0E00               	movlw	0
  6341   002AB6  6E04               	movwf	(logAction@newTime+2)^0,c
  6342   002AB8  0E00               	movlw	0
  6343   002ABA  6E05               	movwf	(logAction@newTime+3)^0,c
  6344   002ABC  C027  F006         	movff	decision@path_step,logAction@path_step
  6345   002AC0  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6346   002AC4  0E07               	movlw	7
  6347   002AC6  EC48  F024         	call	_logAction
  6348   002ACA  EF49  F014         	goto	l5231
  6349   002ACE                     l138:
  6350   002ACE                     l5305:
  6351                           
  6352                           ;color.c: 228:     return path_step;
  6353   002ACE  C027  F025         	movff	decision@path_step,?_decision
  6354   002AD2  C028  F026         	movff	decision@path_step+1,?_decision+1
  6355   002AD6  0012               	return		;funcret
  6356   002AD8                     __end_of_decision:
  6357                           	callstack 0
  6358                           
  6359 ;; *************** function _moveYellow *****************
  6360 ;; Defined at:
  6361 ;;		line 290 in file "dc_motor.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6364 ;;		 -> motorL(9), 
  6365 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6366 ;;		 -> motorR(9), 
  6367 ;;  factorR         2   32[COMRAM] unsigned int 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;Total ram usage:        6 bytes
  6384 ;; Hardware stack levels used: 1
  6385 ;; Hardware stack levels required when called: 5
  6386 ;; This function calls:
  6387 ;;		_backOneAndHalf
  6388 ;;		_right90
  6389 ;; This function is called by:
  6390 ;;		_decision
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text18
  6395   004BB6                     __ptext18:
  6396                           	callstack 0
  6397   004BB6                     _moveYellow:
  6398                           	callstack 24
  6399   004BB6                     
  6400                           ;dc_motor.c: 290:  void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned in
      +                          t factorR);dc_motor.c: 291: {;dc_motor.c: 293:     backOneAndHalf(mL,mR);
  6401   004BB6  C01F  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6402   004BBA  C020  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6403   004BBE  ECB9  F026         	call	_backOneAndHalf	;wreg free
  6404   004BC2                     
  6405                           ;dc_motor.c: 294:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6406   004BC2  0E29               	movlw	41
  6407   004BC4  6E24               	movwf	(??_moveYellow+1)^0,c
  6408   004BC6  0E96               	movlw	150
  6409   004BC8  6E23               	movwf	??_moveYellow^0,c
  6410   004BCA  0E7F               	movlw	127
  6411   004BCC                     u5767:
  6412   004BCC  2EE8               	decfsz	wreg,f,c
  6413   004BCE  D7FE               	bra	u5767
  6414   004BD0  2E23               	decfsz	??_moveYellow^0,f,c
  6415   004BD2  D7FC               	bra	u5767
  6416   004BD4  2E24               	decfsz	(??_moveYellow+1)^0,f,c
  6417   004BD6  D7FA               	bra	u5767
  6418   004BD8  0000               	nop	
  6419   004BDA                     
  6420                           ;dc_motor.c: 295:     right90(mL,mR, factorR);
  6421   004BDA  C01F  F019         	movff	moveYellow@mL,right90@mL
  6422   004BDE  C020  F01A         	movff	moveYellow@mR,right90@mR
  6423   004BE2  C021  F01B         	movff	moveYellow@factorR,right90@factorR
  6424   004BE6  C022  F01C         	movff	moveYellow@factorR+1,right90@factorR+1
  6425   004BEA  EC4F  F027         	call	_right90	;wreg free
  6426   004BEE  0012               	return		;funcret
  6427   004BF0                     __end_of_moveYellow:
  6428                           	callstack 0
  6429                           
  6430 ;; *************** function _moveRed *****************
  6431 ;; Defined at:
  6432 ;;		line 261 in file "dc_motor.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6435 ;;		 -> motorL(9), 
  6436 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6437 ;;		 -> motorR(9), 
  6438 ;;  factorR         2   32[COMRAM] unsigned int 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6453 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;Total ram usage:        6 bytes
  6455 ;; Hardware stack levels used: 1
  6456 ;; Hardware stack levels required when called: 5
  6457 ;; This function calls:
  6458 ;;		_backHalf
  6459 ;;		_right90
  6460 ;; This function is called by:
  6461 ;;		_decision
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text19
  6466   004BF0                     __ptext19:
  6467                           	callstack 0
  6468   004BF0                     _moveRed:
  6469                           	callstack 24
  6470   004BF0                     
  6471                           ;dc_motor.c: 261: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int fa
      +                          ctorR);dc_motor.c: 262: {;dc_motor.c: 264:     backHalf(mL,mR);
  6472   004BF0  C01F  F019         	movff	moveRed@mL,backHalf@mL
  6473   004BF4  C020  F01A         	movff	moveRed@mR,backHalf@mR
  6474   004BF8  ECB2  F027         	call	_backHalf	;wreg free
  6475   004BFC                     
  6476                           ;dc_motor.c: 265:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6477   004BFC  0E29               	movlw	41
  6478   004BFE  6E24               	movwf	(??_moveRed+1)^0,c
  6479   004C00  0E96               	movlw	150
  6480   004C02  6E23               	movwf	??_moveRed^0,c
  6481   004C04  0E7F               	movlw	127
  6482   004C06                     u5777:
  6483   004C06  2EE8               	decfsz	wreg,f,c
  6484   004C08  D7FE               	bra	u5777
  6485   004C0A  2E23               	decfsz	??_moveRed^0,f,c
  6486   004C0C  D7FC               	bra	u5777
  6487   004C0E  2E24               	decfsz	(??_moveRed+1)^0,f,c
  6488   004C10  D7FA               	bra	u5777
  6489   004C12  0000               	nop	
  6490   004C14                     
  6491                           ;dc_motor.c: 266:     right90(mL,mR,factorR);
  6492   004C14  C01F  F019         	movff	moveRed@mL,right90@mL
  6493   004C18  C020  F01A         	movff	moveRed@mR,right90@mR
  6494   004C1C  C021  F01B         	movff	moveRed@factorR,right90@factorR
  6495   004C20  C022  F01C         	movff	moveRed@factorR+1,right90@factorR+1
  6496   004C24  EC4F  F027         	call	_right90	;wreg free
  6497   004C28  0012               	return		;funcret
  6498   004C2A                     __end_of_moveRed:
  6499                           	callstack 0
  6500                           
  6501 ;; *************** function _movePink *****************
  6502 ;; Defined at:
  6503 ;;		line 299 in file "dc_motor.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6506 ;;		 -> motorL(9), 
  6507 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6508 ;;		 -> motorR(9), 
  6509 ;;  factorL         2   32[COMRAM] unsigned int 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6521 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6523 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6524 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6525 ;;Total ram usage:        6 bytes
  6526 ;; Hardware stack levels used: 1
  6527 ;; Hardware stack levels required when called: 5
  6528 ;; This function calls:
  6529 ;;		_backOneAndHalf
  6530 ;;		_left90
  6531 ;; This function is called by:
  6532 ;;		_decision
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text20
  6537   004C2A                     __ptext20:
  6538                           	callstack 0
  6539   004C2A                     _movePink:
  6540                           	callstack 24
  6541   004C2A                     
  6542                           ;dc_motor.c: 299: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actorL);dc_motor.c: 300: {;dc_motor.c: 302:     backOneAndHalf(mL,mR);
  6543   004C2A  C01F  F019         	movff	movePink@mL,backOneAndHalf@mL
  6544   004C2E  C020  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6545   004C32  ECB9  F026         	call	_backOneAndHalf	;wreg free
  6546   004C36                     
  6547                           ;dc_motor.c: 303:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6548   004C36  0E29               	movlw	41
  6549   004C38  6E24               	movwf	(??_movePink+1)^0,c
  6550   004C3A  0E96               	movlw	150
  6551   004C3C  6E23               	movwf	??_movePink^0,c
  6552   004C3E  0E7F               	movlw	127
  6553   004C40                     u5787:
  6554   004C40  2EE8               	decfsz	wreg,f,c
  6555   004C42  D7FE               	bra	u5787
  6556   004C44  2E23               	decfsz	??_movePink^0,f,c
  6557   004C46  D7FC               	bra	u5787
  6558   004C48  2E24               	decfsz	(??_movePink+1)^0,f,c
  6559   004C4A  D7FA               	bra	u5787
  6560   004C4C  0000               	nop	
  6561   004C4E                     
  6562                           ;dc_motor.c: 304:     left90(mL,mR, factorL);
  6563   004C4E  C01F  F019         	movff	movePink@mL,left90@mL
  6564   004C52  C020  F01A         	movff	movePink@mR,left90@mR
  6565   004C56  C021  F01B         	movff	movePink@factorL,left90@factorL
  6566   004C5A  C022  F01C         	movff	movePink@factorL+1,left90@factorL+1
  6567   004C5E  EC68  F027         	call	_left90	;wreg free
  6568   004C62  0012               	return		;funcret
  6569   004C64                     __end_of_movePink:
  6570                           	callstack 0
  6571                           
  6572 ;; *************** function _backOneAndHalf *****************
  6573 ;; Defined at:
  6574 ;;		line 247 in file "dc_motor.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6577 ;;		 -> motorL(9), 
  6578 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6579 ;;		 -> motorR(9), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6594 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6595 ;;Total ram usage:        4 bytes
  6596 ;; Hardware stack levels used: 1
  6597 ;; Hardware stack levels required when called: 4
  6598 ;; This function calls:
  6599 ;;		_fullSpeedBack
  6600 ;;		_stop
  6601 ;; This function is called by:
  6602 ;;		_moveYellow
  6603 ;;		_movePink
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text21
  6608   004D72                     __ptext21:
  6609                           	callstack 0
  6610   004D72                     _backOneAndHalf:
  6611                           	callstack 24
  6612   004D72                     
  6613                           ;dc_motor.c: 247: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 248: {;dc_motor.c: 249:     fullSpeedBack(mL,mR);
  6614   004D72  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6615   004D76  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6616   004D7A  EC9E  F023         	call	_fullSpeedBack	;wreg free
  6617   004D7E                     
  6618                           ;dc_motor.c: 250:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6619   004D7E  0E6A               	movlw	106
  6620   004D80  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6621   004D82  0E85               	movlw	133
  6622   004D84  6E1B               	movwf	??_backOneAndHalf^0,c
  6623   004D86  0EB4               	movlw	180
  6624   004D88                     u5797:
  6625   004D88  2EE8               	decfsz	wreg,f,c
  6626   004D8A  D7FE               	bra	u5797
  6627   004D8C  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6628   004D8E  D7FC               	bra	u5797
  6629   004D90  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6630   004D92  D7FA               	bra	u5797
  6631   004D94  D000               	nop2	
  6632   004D96                     
  6633                           ;dc_motor.c: 251:     stop(mL,mR);
  6634   004D96  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6635   004D9A  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6636   004D9E  ECD9  F022         	call	_stop	;wreg free
  6637   004DA2  0012               	return		;funcret
  6638   004DA4                     __end_of_backOneAndHalf:
  6639                           	callstack 0
  6640                           
  6641 ;; *************** function _moveOrange *****************
  6642 ;; Defined at:
  6643 ;;		line 308 in file "dc_motor.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6646 ;;		 -> motorL(9), 
  6647 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6648 ;;		 -> motorR(9), 
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6662 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6663 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6664 ;;Total ram usage:        4 bytes
  6665 ;; Hardware stack levels used: 1
  6666 ;; Hardware stack levels required when called: 5
  6667 ;; This function calls:
  6668 ;;		_backHalf
  6669 ;;		_right135
  6670 ;; This function is called by:
  6671 ;;		_decision
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text22
  6676   004DA4                     __ptext22:
  6677                           	callstack 0
  6678   004DA4                     _moveOrange:
  6679                           	callstack 24
  6680   004DA4                     
  6681                           ;dc_motor.c: 308: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          309: {;dc_motor.c: 311:     backHalf(mL,mR);
  6682   004DA4  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6683   004DA8  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6684   004DAC  ECB2  F027         	call	_backHalf	;wreg free
  6685   004DB0                     
  6686                           ;dc_motor.c: 312:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6687   004DB0  0E29               	movlw	41
  6688   004DB2  6E20               	movwf	(??_moveOrange+1)^0,c
  6689   004DB4  0E96               	movlw	150
  6690   004DB6  6E1F               	movwf	??_moveOrange^0,c
  6691   004DB8  0E7F               	movlw	127
  6692   004DBA                     u5807:
  6693   004DBA  2EE8               	decfsz	wreg,f,c
  6694   004DBC  D7FE               	bra	u5807
  6695   004DBE  2E1F               	decfsz	??_moveOrange^0,f,c
  6696   004DC0  D7FC               	bra	u5807
  6697   004DC2  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  6698   004DC4  D7FA               	bra	u5807
  6699   004DC6  0000               	nop	
  6700   004DC8                     
  6701                           ;dc_motor.c: 313:     right135(mL,mR);
  6702   004DC8  C01D  F019         	movff	moveOrange@mL,right135@mL
  6703   004DCC  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6704   004DD0  ECEB  F026         	call	_right135	;wreg free
  6705   004DD4  0012               	return		;funcret
  6706   004DD6                     __end_of_moveOrange:
  6707                           	callstack 0
  6708                           
  6709 ;; *************** function _right135 *****************
  6710 ;; Defined at:
  6711 ;;		line 221 in file "dc_motor.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6714 ;;		 -> motorL(9), 
  6715 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6716 ;;		 -> motorR(9), 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6728 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6731 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6732 ;;Total ram usage:        4 bytes
  6733 ;; Hardware stack levels used: 1
  6734 ;; Hardware stack levels required when called: 4
  6735 ;; This function calls:
  6736 ;;		_stop
  6737 ;;		_turnRight
  6738 ;; This function is called by:
  6739 ;;		_moveOrange
  6740 ;;		_reverseTurn
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text23
  6745   004DD6                     __ptext23:
  6746                           	callstack 0
  6747   004DD6                     _right135:
  6748                           	callstack 24
  6749   004DD6                     
  6750                           ;dc_motor.c: 221: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 22
      +                          2: {;dc_motor.c: 224:     turnRight(mL,mR);
  6751   004DD6  C019  F014         	movff	right135@mL,turnRight@mL
  6752   004DDA  C01A  F015         	movff	right135@mR,turnRight@mR
  6753   004DDE  EC20  F023         	call	_turnRight	;wreg free
  6754   004DE2                     
  6755                           ;dc_motor.c: 225:     _delay((unsigned long)((420)*(64000000/4000.0)));
  6756   004DE2  0E23               	movlw	35
  6757   004DE4  6E1C               	movwf	(??_right135+1)^0,c
  6758   004DE6  0E18               	movlw	24
  6759   004DE8  6E1B               	movwf	??_right135^0,c
  6760   004DEA  0E2C               	movlw	44
  6761   004DEC                     u5817:
  6762   004DEC  2EE8               	decfsz	wreg,f,c
  6763   004DEE  D7FE               	bra	u5817
  6764   004DF0  2E1B               	decfsz	??_right135^0,f,c
  6765   004DF2  D7FC               	bra	u5817
  6766   004DF4  2E1C               	decfsz	(??_right135+1)^0,f,c
  6767   004DF6  D7FA               	bra	u5817
  6768   004DF8  D000               	nop2	
  6769   004DFA                     
  6770                           ;dc_motor.c: 226:     stop(mL,mR);
  6771   004DFA  C019  F014         	movff	right135@mL,stop@mL
  6772   004DFE  C01A  F015         	movff	right135@mR,stop@mR
  6773   004E02  ECD9  F022         	call	_stop	;wreg free
  6774   004E06  0012               	return		;funcret
  6775   004E08                     __end_of_right135:
  6776                           	callstack 0
  6777                           
  6778 ;; *************** function _moveLightBlue *****************
  6779 ;; Defined at:
  6780 ;;		line 317 in file "dc_motor.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6783 ;;		 -> motorL(9), 
  6784 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6785 ;;		 -> motorR(9), 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6799 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;Total ram usage:        4 bytes
  6802 ;; Hardware stack levels used: 1
  6803 ;; Hardware stack levels required when called: 5
  6804 ;; This function calls:
  6805 ;;		_backHalf
  6806 ;;		_left135
  6807 ;; This function is called by:
  6808 ;;		_decision
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text24
  6813   004E08                     __ptext24:
  6814                           	callstack 0
  6815   004E08                     _moveLightBlue:
  6816                           	callstack 24
  6817   004E08                     
  6818                           ;dc_motor.c: 317: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 318: {;dc_motor.c: 320:     backHalf(mL,mR);
  6819   004E08  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  6820   004E0C  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  6821   004E10  ECB2  F027         	call	_backHalf	;wreg free
  6822   004E14                     
  6823                           ;dc_motor.c: 321:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6824   004E14  0E29               	movlw	41
  6825   004E16  6E20               	movwf	(??_moveLightBlue+1)^0,c
  6826   004E18  0E96               	movlw	150
  6827   004E1A  6E1F               	movwf	??_moveLightBlue^0,c
  6828   004E1C  0E7F               	movlw	127
  6829   004E1E                     u5827:
  6830   004E1E  2EE8               	decfsz	wreg,f,c
  6831   004E20  D7FE               	bra	u5827
  6832   004E22  2E1F               	decfsz	??_moveLightBlue^0,f,c
  6833   004E24  D7FC               	bra	u5827
  6834   004E26  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  6835   004E28  D7FA               	bra	u5827
  6836   004E2A  0000               	nop	
  6837   004E2C                     
  6838                           ;dc_motor.c: 322:     left135(mL,mR);
  6839   004E2C  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  6840   004E30  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  6841   004E34  EC9A  F027         	call	_left135	;wreg free
  6842   004E38  0012               	return		;funcret
  6843   004E3A                     __end_of_moveLightBlue:
  6844                           	callstack 0
  6845                           
  6846 ;; *************** function _left135 *****************
  6847 ;; Defined at:
  6848 ;;		line 230 in file "dc_motor.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6851 ;;		 -> motorL(9), 
  6852 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6853 ;;		 -> motorR(9), 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6868 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;Total ram usage:        4 bytes
  6870 ;; Hardware stack levels used: 1
  6871 ;; Hardware stack levels required when called: 4
  6872 ;; This function calls:
  6873 ;;		_stop
  6874 ;;		_turnLeft
  6875 ;; This function is called by:
  6876 ;;		_moveLightBlue
  6877 ;;		_reverseTurn
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text25
  6882   004F34                     __ptext25:
  6883                           	callstack 0
  6884   004F34                     _left135:
  6885                           	callstack 24
  6886   004F34                     
  6887                           ;dc_motor.c: 230: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 231
      +                          : {;dc_motor.c: 233:     turnLeft(mL,mR);
  6888   004F34  C019  F014         	movff	left135@mL,turnLeft@mL
  6889   004F38  C01A  F015         	movff	left135@mR,turnLeft@mR
  6890   004F3C  EC5F  F023         	call	_turnLeft	;wreg free
  6891   004F40                     
  6892                           ;dc_motor.c: 234:     _delay((unsigned long)((425)*(64000000/4000.0)));
  6893   004F40  0E23               	movlw	35
  6894   004F42  6E1C               	movwf	(??_left135+1)^0,c
  6895   004F44  0E80               	movlw	128
  6896   004F46  6E1B               	movwf	??_left135^0,c
  6897   004F48  0E12               	movlw	18
  6898   004F4A                     u5837:
  6899   004F4A  2EE8               	decfsz	wreg,f,c
  6900   004F4C  D7FE               	bra	u5837
  6901   004F4E  2E1B               	decfsz	??_left135^0,f,c
  6902   004F50  D7FC               	bra	u5837
  6903   004F52  2E1C               	decfsz	(??_left135+1)^0,f,c
  6904   004F54  D7FA               	bra	u5837
  6905   004F56                     
  6906                           ;dc_motor.c: 235:     stop(mL,mR);
  6907   004F56  C019  F014         	movff	left135@mL,stop@mL
  6908   004F5A  C01A  F015         	movff	left135@mR,stop@mR
  6909   004F5E  ECD9  F022         	call	_stop	;wreg free
  6910   004F62  0012               	return		;funcret
  6911   004F64                     __end_of_left135:
  6912                           	callstack 0
  6913                           
  6914 ;; *************** function _moveGreen *****************
  6915 ;; Defined at:
  6916 ;;		line 272 in file "dc_motor.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6919 ;;		 -> motorL(9), 
  6920 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6921 ;;		 -> motorR(9), 
  6922 ;;  factorL         2   32[COMRAM] unsigned int 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      void 
  6927 ;; Registers used:
  6928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6937 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6938 ;;Total ram usage:        6 bytes
  6939 ;; Hardware stack levels used: 1
  6940 ;; Hardware stack levels required when called: 5
  6941 ;; This function calls:
  6942 ;;		_backHalf
  6943 ;;		_left90
  6944 ;; This function is called by:
  6945 ;;		_decision
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text26
  6950   004C64                     __ptext26:
  6951                           	callstack 0
  6952   004C64                     _moveGreen:
  6953                           	callstack 24
  6954   004C64                     
  6955                           ;dc_motor.c: 272: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factorL);dc_motor.c: 273: {;dc_motor.c: 275:     backHalf(mL,mR);
  6956   004C64  C01F  F019         	movff	moveGreen@mL,backHalf@mL
  6957   004C68  C020  F01A         	movff	moveGreen@mR,backHalf@mR
  6958   004C6C  ECB2  F027         	call	_backHalf	;wreg free
  6959   004C70                     
  6960                           ;dc_motor.c: 276:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6961   004C70  0E29               	movlw	41
  6962   004C72  6E24               	movwf	(??_moveGreen+1)^0,c
  6963   004C74  0E96               	movlw	150
  6964   004C76  6E23               	movwf	??_moveGreen^0,c
  6965   004C78  0E7F               	movlw	127
  6966   004C7A                     u5847:
  6967   004C7A  2EE8               	decfsz	wreg,f,c
  6968   004C7C  D7FE               	bra	u5847
  6969   004C7E  2E23               	decfsz	??_moveGreen^0,f,c
  6970   004C80  D7FC               	bra	u5847
  6971   004C82  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  6972   004C84  D7FA               	bra	u5847
  6973   004C86  0000               	nop	
  6974   004C88                     
  6975                           ;dc_motor.c: 277:     left90(mL,mR,factorL);
  6976   004C88  C01F  F019         	movff	moveGreen@mL,left90@mL
  6977   004C8C  C020  F01A         	movff	moveGreen@mR,left90@mR
  6978   004C90  C021  F01B         	movff	moveGreen@factorL,left90@factorL
  6979   004C94  C022  F01C         	movff	moveGreen@factorL+1,left90@factorL+1
  6980   004C98  EC68  F027         	call	_left90	;wreg free
  6981   004C9C  0012               	return		;funcret
  6982   004C9E                     __end_of_moveGreen:
  6983                           	callstack 0
  6984                           
  6985 ;; *************** function _moveBlue *****************
  6986 ;; Defined at:
  6987 ;;		line 281 in file "dc_motor.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6990 ;;		 -> motorL(9), 
  6991 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6992 ;;		 -> motorR(9), 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;		None
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;Total ram usage:        4 bytes
  7009 ;; Hardware stack levels used: 1
  7010 ;; Hardware stack levels required when called: 5
  7011 ;; This function calls:
  7012 ;;		_backHalf
  7013 ;;		_turn180
  7014 ;; This function is called by:
  7015 ;;		_decision
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text27
  7020   004E3A                     __ptext27:
  7021                           	callstack 0
  7022   004E3A                     _moveBlue:
  7023                           	callstack 24
  7024   004E3A                     
  7025                           ;dc_motor.c: 281: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 28
      +                          2: {;dc_motor.c: 284:     backHalf(mL,mR);
  7026   004E3A  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7027   004E3E  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7028   004E42  ECB2  F027         	call	_backHalf	;wreg free
  7029   004E46                     
  7030                           ;dc_motor.c: 285:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7031   004E46  0E29               	movlw	41
  7032   004E48  6E20               	movwf	(??_moveBlue+1)^0,c
  7033   004E4A  0E96               	movlw	150
  7034   004E4C  6E1F               	movwf	??_moveBlue^0,c
  7035   004E4E  0E7F               	movlw	127
  7036   004E50                     u5857:
  7037   004E50  2EE8               	decfsz	wreg,f,c
  7038   004E52  D7FE               	bra	u5857
  7039   004E54  2E1F               	decfsz	??_moveBlue^0,f,c
  7040   004E56  D7FC               	bra	u5857
  7041   004E58  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  7042   004E5A  D7FA               	bra	u5857
  7043   004E5C  0000               	nop	
  7044   004E5E                     
  7045                           ;dc_motor.c: 286:     turn180(mL,mR);
  7046   004E5E  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7047   004E62  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7048   004E66  EC36  F027         	call	_turn180	;wreg free
  7049   004E6A  0012               	return		;funcret
  7050   004E6C                     __end_of_moveBlue:
  7051                           	callstack 0
  7052                           
  7053 ;; *************** function _turn180 *****************
  7054 ;; Defined at:
  7055 ;;		line 213 in file "dc_motor.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7058 ;;		 -> motorL(9), 
  7059 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7060 ;;		 -> motorR(9), 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7072 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7075 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7076 ;;Total ram usage:        4 bytes
  7077 ;; Hardware stack levels used: 1
  7078 ;; Hardware stack levels required when called: 4
  7079 ;; This function calls:
  7080 ;;		_stop
  7081 ;;		_turnLeft
  7082 ;; This function is called by:
  7083 ;;		_moveBlue
  7084 ;;		_moveWhite
  7085 ;;		_reverseTurn
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text28
  7090   004E6C                     __ptext28:
  7091                           	callstack 0
  7092   004E6C                     _turn180:
  7093                           	callstack 24
  7094   004E6C                     
  7095                           ;dc_motor.c: 213: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 214
      +                          : {;dc_motor.c: 215:     turnLeft(mL,mR);
  7096   004E6C  C019  F014         	movff	turn180@mL,turnLeft@mL
  7097   004E70  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7098   004E74  EC5F  F023         	call	_turnLeft	;wreg free
  7099   004E78                     
  7100                           ;dc_motor.c: 216:     _delay((unsigned long)((560)*(64000000/4000.0)));
  7101   004E78  0E2E               	movlw	46
  7102   004E7A  6E1C               	movwf	(??_turn180+1)^0,c
  7103   004E7C  0E75               	movlw	117
  7104   004E7E  6E1B               	movwf	??_turn180^0,c
  7105   004E80  0E3C               	movlw	60
  7106   004E82                     u5867:
  7107   004E82  2EE8               	decfsz	wreg,f,c
  7108   004E84  D7FE               	bra	u5867
  7109   004E86  2E1B               	decfsz	??_turn180^0,f,c
  7110   004E88  D7FC               	bra	u5867
  7111   004E8A  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7112   004E8C  D7FA               	bra	u5867
  7113   004E8E  D000               	nop2	
  7114   004E90                     
  7115                           ;dc_motor.c: 217:     stop(mL,mR);
  7116   004E90  C019  F014         	movff	turn180@mL,stop@mL
  7117   004E94  C01A  F015         	movff	turn180@mR,stop@mR
  7118   004E98  ECD9  F022         	call	_stop	;wreg free
  7119   004E9C  0012               	return		;funcret
  7120   004E9E                     __end_of_turn180:
  7121                           	callstack 0
  7122                           
  7123 ;; *************** function _backHalf *****************
  7124 ;; Defined at:
  7125 ;;		line 239 in file "dc_motor.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7128 ;;		 -> motorL(9), 
  7129 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7130 ;;		 -> motorR(9), 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      void 
  7135 ;; Registers used:
  7136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7146 ;;Total ram usage:        4 bytes
  7147 ;; Hardware stack levels used: 1
  7148 ;; Hardware stack levels required when called: 4
  7149 ;; This function calls:
  7150 ;;		_fullSpeedBack
  7151 ;;		_stop
  7152 ;; This function is called by:
  7153 ;;		_moveRed
  7154 ;;		_moveGreen
  7155 ;;		_moveBlue
  7156 ;;		_moveOrange
  7157 ;;		_moveLightBlue
  7158 ;;		_moveWhite
  7159 ;;		_reverseTurn
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text29
  7164   004F64                     __ptext29:
  7165                           	callstack 0
  7166   004F64                     _backHalf:
  7167                           	callstack 24
  7168   004F64                     
  7169                           ;dc_motor.c: 239: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 24
      +                          0: {;dc_motor.c: 241:     fullSpeedBack(mL,mR);
  7170   004F64  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7171   004F68  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7172   004F6C  EC9E  F023         	call	_fullSpeedBack	;wreg free
  7173   004F70                     
  7174                           ;dc_motor.c: 242:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7175   004F70  0E19               	movlw	25
  7176   004F72  6E1C               	movwf	(??_backHalf+1)^0,c
  7177   004F74  0E5A               	movlw	90
  7178   004F76  6E1B               	movwf	??_backHalf^0,c
  7179   004F78  0EB2               	movlw	178
  7180   004F7A                     u5877:
  7181   004F7A  2EE8               	decfsz	wreg,f,c
  7182   004F7C  D7FE               	bra	u5877
  7183   004F7E  2E1B               	decfsz	??_backHalf^0,f,c
  7184   004F80  D7FC               	bra	u5877
  7185   004F82  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7186   004F84  D7FA               	bra	u5877
  7187   004F86                     
  7188                           ;dc_motor.c: 243:     stop(mL,mR);
  7189   004F86  C019  F014         	movff	backHalf@mL,stop@mL
  7190   004F8A  C01A  F015         	movff	backHalf@mR,stop@mR
  7191   004F8E  ECD9  F022         	call	_stop	;wreg free
  7192   004F92  0012               	return		;funcret
  7193   004F94                     __end_of_backHalf:
  7194                           	callstack 0
  7195                           
  7196 ;; *************** function _fullSpeedBack *****************
  7197 ;; Defined at:
  7198 ;;		line 165 in file "dc_motor.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7201 ;;		 -> motorL(9), 
  7202 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7203 ;;		 -> motorR(9), 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  power           2   22[COMRAM] int 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7218 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7219 ;;Total ram usage:        5 bytes
  7220 ;; Hardware stack levels used: 1
  7221 ;; Hardware stack levels required when called: 3
  7222 ;; This function calls:
  7223 ;;		_setMotorPWM
  7224 ;; This function is called by:
  7225 ;;		_backHalf
  7226 ;;		_backOneAndHalf
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text30
  7231   00473C                     __ptext30:
  7232                           	callstack 0
  7233   00473C                     _fullSpeedBack:
  7234                           	callstack 24
  7235   00473C                     
  7236                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7237   00473C  5014               	movf	fullSpeedBack@mL^0,w,c
  7238   00473E  6ED9               	movwf	fsr2l,c
  7239   004740  6ADA               	clrf	fsr2h,c
  7240   004742  0E01               	movlw	1
  7241   004744  26D9               	addwf	fsr2l,f,c
  7242   004746  6ADF               	clrf	indf2,c
  7243                           
  7244                           ;dc_motor.c: 169:     mR->direction = 0;
  7245   004748  5015               	movf	fullSpeedBack@mR^0,w,c
  7246   00474A  6ED9               	movwf	fsr2l,c
  7247   00474C  6ADA               	clrf	fsr2h,c
  7248   00474E  0E01               	movlw	1
  7249   004750  26D9               	addwf	fsr2l,f,c
  7250   004752  6ADF               	clrf	indf2,c
  7251   004754                     
  7252                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  7253   004754  0E00               	movlw	0
  7254   004756  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  7255   004758  0E00               	movlw	0
  7256   00475A  6E17               	movwf	fullSpeedBack@power^0,c
  7257   00475C                     l4101:
  7258                           
  7259                           ;dc_motor.c: 172:         mL->power = power;
  7260   00475C  5014               	movf	fullSpeedBack@mL^0,w,c
  7261   00475E  6ED9               	movwf	fsr2l,c
  7262   004760  6ADA               	clrf	fsr2h,c
  7263   004762  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7264                           
  7265                           ;dc_motor.c: 173:         mR->power = power;
  7266   004766  5015               	movf	fullSpeedBack@mR^0,w,c
  7267   004768  6ED9               	movwf	fsr2l,c
  7268   00476A  6ADA               	clrf	fsr2h,c
  7269   00476C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7270   004770                     
  7271                           ;dc_motor.c: 176:         setMotorPWM(mL);
  7272   004770  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  7273   004774  EC8F  F01C         	call	_setMotorPWM	;wreg free
  7274   004778                     
  7275                           ;dc_motor.c: 177:         setMotorPWM(mR);
  7276   004778  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  7277   00477C  EC8F  F01C         	call	_setMotorPWM	;wreg free
  7278   004780                     
  7279                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7280   004780  0E0B               	movlw	11
  7281   004782  6E16               	movwf	??_fullSpeedBack^0,c
  7282   004784  0E62               	movlw	98
  7283   004786                     u5887:
  7284   004786  2EE8               	decfsz	wreg,f,c
  7285   004788  D7FE               	bra	u5887
  7286   00478A  2E16               	decfsz	??_fullSpeedBack^0,f,c
  7287   00478C  D7FC               	bra	u5887
  7288   00478E  D000               	nop2	
  7289   004790                     
  7290                           ;dc_motor.c: 181:     }
  7291   004790  4A17               	infsnz	fullSpeedBack@power^0,f,c
  7292   004792  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  7293   004794  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  7294   004796  EFD6  F023         	goto	u3141
  7295   00479A  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  7296   00479C  E109               	bnz	u3140
  7297   00479E  0E33               	movlw	51
  7298   0047A0  5C17               	subwf	fullSpeedBack@power^0,w,c
  7299   0047A2  A0D8               	btfss	status,0,c
  7300   0047A4  EFD6  F023         	goto	u3141
  7301   0047A8  EFD8  F023         	goto	u3140
  7302   0047AC                     u3141:
  7303   0047AC  EFAE  F023         	goto	l4101
  7304   0047B0                     u3140:
  7305   0047B0  0012               	return		;funcret
  7306   0047B2                     __end_of_fullSpeedBack:
  7307                           	callstack 0
  7308                           
  7309 ;; *************** function _logAction *****************
  7310 ;; Defined at:
  7311 ;;		line 14 in file "return_func.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  newAction       1    wreg     unsigned char 
  7314 ;;  newTime         4    1[COMRAM] long 
  7315 ;;  path_step       2    5[COMRAM] unsigned int 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  newAction       1    9[COMRAM] unsigned char 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      void 
  7320 ;; Registers used:
  7321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7327 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7330 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7331 ;;Total ram usage:        9 bytes
  7332 ;; Hardware stack levels used: 1
  7333 ;; Hardware stack levels required when called: 1
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_decision
  7338 ;;		_get16bitTMR0val
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text31
  7343   004890                     __ptext31:
  7344                           	callstack 0
  7345   004890                     _logAction:
  7346                           	callstack 28
  7347                           
  7348                           ;incstack = 0
  7349                           ;logAction@newAction stored from wreg
  7350   004890  6E0A               	movwf	logAction@newAction^0,c
  7351   004892                     
  7352                           ;return_func.c: 15:     if (path_step < 50) {
  7353   004892  5007               	movf	(logAction@path_step+1)^0,w,c
  7354   004894  E107               	bnz	u4391
  7355   004896  0E32               	movlw	50
  7356   004898  5C06               	subwf	logAction@path_step^0,w,c
  7357   00489A  B0D8               	btfsc	status,0,c
  7358   00489C  EF52  F024         	goto	u4391
  7359   0048A0  EF54  F024         	goto	u4390
  7360   0048A4                     u4391:
  7361   0048A4  EF74  F024         	goto	l674
  7362   0048A8                     u4390:
  7363   0048A8                     
  7364                           ;return_func.c: 16:         action[path_step] = newAction;
  7365   0048A8  0E3C               	movlw	low _action
  7366   0048AA  2406               	addwf	logAction@path_step^0,w,c
  7367   0048AC  6ED9               	movwf	fsr2l,c
  7368   0048AE  0E01               	movlw	high _action
  7369   0048B0  2007               	addwfc	(logAction@path_step+1)^0,w,c
  7370   0048B2  6EDA               	movwf	fsr2h,c
  7371   0048B4  C00A  FFDF         	movff	logAction@newAction,indf2
  7372                           
  7373                           ;return_func.c: 17:         time[path_step] = newTime;
  7374   0048B8  0E00               	movlw	low _time
  7375   0048BA  6E08               	movwf	??_logAction^0,c
  7376   0048BC  0E02               	movlw	high _time
  7377   0048BE  6E09               	movwf	(??_logAction+1)^0,c
  7378   0048C0  90D8               	bcf	status,0,c
  7379   0048C2  3406               	rlcf	logAction@path_step^0,w,c
  7380   0048C4  6ED9               	movwf	fsr2l,c
  7381   0048C6  3407               	rlcf	(logAction@path_step+1)^0,w,c
  7382   0048C8  6EDA               	movwf	fsr2h,c
  7383   0048CA  90D8               	bcf	status,0,c
  7384   0048CC  36D9               	rlcf	fsr2l,f,c
  7385   0048CE  36DA               	rlcf	fsr2h,f,c
  7386   0048D0  5008               	movf	??_logAction^0,w,c
  7387   0048D2  26D9               	addwf	fsr2l,f,c
  7388   0048D4  5009               	movf	(??_logAction+1)^0,w,c
  7389   0048D6  22DA               	addwfc	fsr2h,f,c
  7390   0048D8  C002  FFDE         	movff	logAction@newTime,postinc2
  7391   0048DC  C003  FFDE         	movff	logAction@newTime+1,postinc2
  7392   0048E0  C004  FFDE         	movff	logAction@newTime+2,postinc2
  7393   0048E4  C005  FFDE         	movff	logAction@newTime+3,postinc2
  7394   0048E8                     l674:
  7395   0048E8  0012               	return		;funcret
  7396   0048EA                     __end_of_logAction:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _color_click_init *****************
  7400 ;; Defined at:
  7401 ;;		line 9 in file "color.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7419 ;;Total ram usage:        1 bytes
  7420 ;; Hardware stack levels used: 1
  7421 ;; Hardware stack levels required when called: 4
  7422 ;; This function calls:
  7423 ;;		_I2C_2_Master_Init
  7424 ;;		_color_writetoaddr
  7425 ;; This function is called by:
  7426 ;;		_main
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text32
  7431   004CD6                     __ptext32:
  7432                           	callstack 0
  7433   004CD6                     _color_click_init:
  7434                           	callstack 26
  7435   004CD6                     
  7436                           ;color.c: 12:     I2C_2_Master_Init();
  7437   004CD6  ECE2  F027         	call	_I2C_2_Master_Init	;wreg free
  7438   004CDA                     
  7439                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  7440   004CDA  0E01               	movlw	1
  7441   004CDC  6E04               	movwf	color_writetoaddr@value^0,c
  7442   004CDE  0E00               	movlw	0
  7443   004CE0  EC1E  F028         	call	_color_writetoaddr
  7444   004CE4                     
  7445                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7446   004CE4  0E3F               	movlw	63
  7447   004CE6  6E06               	movwf	??_color_click_init^0,c
  7448   004CE8  0E55               	movlw	85
  7449   004CEA                     u5897:
  7450   004CEA  2EE8               	decfsz	wreg,f,c
  7451   004CEC  D7FE               	bra	u5897
  7452   004CEE  2E06               	decfsz	??_color_click_init^0,f,c
  7453   004CF0  D7FC               	bra	u5897
  7454   004CF2  0000               	nop	
  7455   004CF4                     
  7456                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  7457   004CF4  0E03               	movlw	3
  7458   004CF6  6E04               	movwf	color_writetoaddr@value^0,c
  7459   004CF8  0E00               	movlw	0
  7460   004CFA  EC1E  F028         	call	_color_writetoaddr
  7461   004CFE                     
  7462                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  7463   004CFE  0ED5               	movlw	213
  7464   004D00  6E04               	movwf	color_writetoaddr@value^0,c
  7465   004D02  0E01               	movlw	1
  7466   004D04  EC1E  F028         	call	_color_writetoaddr
  7467   004D08  0012               	return		;funcret
  7468   004D0A                     __end_of_color_click_init:
  7469                           	callstack 0
  7470                           
  7471 ;; *************** function _color_writetoaddr *****************
  7472 ;; Defined at:
  7473 ;;		line 25 in file "color.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  address         1    wreg     unsigned char 
  7476 ;;  value           1    3[COMRAM] unsigned char 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  address         1    4[COMRAM] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      void 
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, status,0, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7488 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7492 ;;Total ram usage:        2 bytes
  7493 ;; Hardware stack levels used: 1
  7494 ;; Hardware stack levels required when called: 3
  7495 ;; This function calls:
  7496 ;;		_I2C_2_Master_Start
  7497 ;;		_I2C_2_Master_Stop
  7498 ;;		_I2C_2_Master_Write
  7499 ;; This function is called by:
  7500 ;;		_color_click_init
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text33
  7505   00503C                     __ptext33:
  7506                           	callstack 0
  7507   00503C                     _color_writetoaddr:
  7508                           	callstack 26
  7509                           
  7510                           ;incstack = 0
  7511                           ;color_writetoaddr@address stored from wreg
  7512   00503C  6E05               	movwf	color_writetoaddr@address^0,c
  7513   00503E                     
  7514                           ;color.c: 26:     I2C_2_Master_Start();
  7515   00503E  EC70  F028         	call	_I2C_2_Master_Start	;wreg free
  7516                           
  7517                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  7518   005042  0E52               	movlw	82
  7519   005044  EC65  F028         	call	_I2C_2_Master_Write
  7520                           
  7521                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  7522   005048  5005               	movf	color_writetoaddr@address^0,w,c
  7523   00504A  0980               	iorlw	128
  7524   00504C  EC65  F028         	call	_I2C_2_Master_Write
  7525                           
  7526                           ;color.c: 29:     I2C_2_Master_Write(value);
  7527   005050  5004               	movf	color_writetoaddr@value^0,w,c
  7528   005052  EC65  F028         	call	_I2C_2_Master_Write
  7529                           
  7530                           ;color.c: 30:     I2C_2_Master_Stop();
  7531   005056  EC6B  F028         	call	_I2C_2_Master_Stop	;wreg free
  7532   00505A  0012               	return		;funcret
  7533   00505C                     __end_of_color_writetoaddr:
  7534                           	callstack 0
  7535                           
  7536 ;; *************** function _I2C_2_Master_Init *****************
  7537 ;; Defined at:
  7538 ;;		line 4 in file "i2c.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used: 1
  7558 ;; Hardware stack levels required when called: 1
  7559 ;; This function calls:
  7560 ;;		Nothing
  7561 ;; This function is called by:
  7562 ;;		_color_click_init
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text34
  7567   004FC4                     __ptext34:
  7568                           	callstack 0
  7569   004FC4                     _I2C_2_Master_Init:
  7570                           	callstack 28
  7571   004FC4                     
  7572                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7573   004FC4  010E               	movlb	14	; () banked
  7574   004FC6  51D9               	movf	217,w,b	;volatile
  7575   004FC8  0BF0               	andlw	-16
  7576   004FCA  0908               	iorlw	8
  7577   004FCC  6FD9               	movwf	217,b	;volatile
  7578   004FCE                     
  7579                           ; BSR set to: 14
  7580                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7581   004FCE  8BD9               	bsf	217,5,b	;volatile
  7582                           
  7583                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7584   004FD0  0E9F               	movlw	159
  7585   004FD2  6FD6               	movwf	214,b	;volatile
  7586   004FD4                     
  7587                           ; BSR set to: 14
  7588                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7589   004FD4  8A84               	bsf	132,5,c	;volatile
  7590   004FD6                     
  7591                           ; BSR set to: 14
  7592                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7593   004FD6  8C84               	bsf	132,6,c	;volatile
  7594   004FD8                     
  7595                           ; BSR set to: 14
  7596                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7597   004FD8  9BA7               	bcf	167,5,b	;volatile
  7598   004FDA                     
  7599                           ; BSR set to: 14
  7600                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7601   004FDA  9DA7               	bcf	167,6,b	;volatile
  7602                           
  7603                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  7604   004FDC  0E1D               	movlw	29
  7605   004FDE  6F1D               	movwf	29,b	;volatile
  7606                           
  7607                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  7608   004FE0  0E1E               	movlw	30
  7609   004FE2  6F1C               	movwf	28,b	;volatile
  7610                           
  7611                           ;i2c.c: 18:   RD5PPS=0x1C;
  7612   004FE4  0E1C               	movlw	28
  7613   004FE6  6F6F               	movwf	111,b	;volatile
  7614                           
  7615                           ;i2c.c: 19:   RD6PPS=0x1B;
  7616   004FE8  0E1B               	movlw	27
  7617   004FEA  6F70               	movwf	112,b	;volatile
  7618   004FEC                     
  7619                           ; BSR set to: 14
  7620   004FEC  0012               	return		;funcret
  7621   004FEE                     __end_of_I2C_2_Master_Init:
  7622                           	callstack 0
  7623                           
  7624 ;; *************** function _calibration_turningR *****************
  7625 ;; Defined at:
  7626 ;;		line 143 in file "calibration.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  7629 ;;		 -> motorL(9), 
  7630 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  7631 ;;		 -> motorR(9), 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  i               2   12[BANK0 ] int 
  7634 ;;  adjustment      4    8[BANK0 ] float 
  7635 ;;  inactivityCo    4    4[BANK0 ] unsigned long 
  7636 ;;  inactivityLi    4    0[BANK0 ] const unsigned long 
  7637 ;;  factorR         2   14[BANK0 ] int 
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  2   75[COMRAM] unsigned int 
  7640 ;; Registers used:
  7641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7648 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;Total ram usage:       20 bytes
  7652 ;; Hardware stack levels used: 1
  7653 ;; Hardware stack levels required when called: 5
  7654 ;; This function calls:
  7655 ;;		___fladd
  7656 ;;		___flsub
  7657 ;;		___fltol
  7658 ;;		___xxtofl
  7659 ;;		_right90
  7660 ;; This function is called by:
  7661 ;;		_main
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text35
  7666   002AD8                     __ptext35:
  7667                           	callstack 0
  7668   002AD8                     _calibration_turningR:
  7669                           	callstack 25
  7670   002AD8                     
  7671                           ;calibration.c: 144:     int factorR = 0;
  7672   002AD8  0E00               	movlw	0
  7673   002ADA  0100               	movlb	0	; () banked
  7674   002ADC  6F6F               	movwf	(calibration_turningR@factorR+1)& (0+255),b
  7675   002ADE  0E00               	movlw	0
  7676   002AE0  6F6E               	movwf	calibration_turningR@factorR& (0+255),b
  7677                           
  7678                           ;calibration.c: 145:     float adjustment = 10;
  7679   002AE2  0E00               	movlw	0
  7680   002AE4  6F68               	movwf	calibration_turningR@adjustment& (0+255),b
  7681   002AE6  0E00               	movlw	0
  7682   002AE8  6F69               	movwf	(calibration_turningR@adjustment+1)& (0+255),b
  7683   002AEA  0E20               	movlw	32
  7684   002AEC  6F6A               	movwf	(calibration_turningR@adjustment+2)& (0+255),b
  7685   002AEE  0E41               	movlw	65
  7686   002AF0  6F6B               	movwf	(calibration_turningR@adjustment+3)& (0+255),b
  7687                           
  7688                           ;calibration.c: 147:     const unsigned long inactivityLimit = 3000 / 1;
  7689   002AF2  0EB8               	movlw	184
  7690   002AF4  6F60               	movwf	calibration_turningR@inactivityLimit& (0+255),b
  7691   002AF6  0E0B               	movlw	11
  7692   002AF8  6F61               	movwf	(calibration_turningR@inactivityLimit+1)& (0+255),b
  7693   002AFA  0E00               	movlw	0
  7694   002AFC  6F62               	movwf	(calibration_turningR@inactivityLimit+2)& (0+255),b
  7695   002AFE  0E00               	movlw	0
  7696   002B00  6F63               	movwf	(calibration_turningR@inactivityLimit+3)& (0+255),b
  7697   002B02                     l795:
  7698                           
  7699                           ;calibration.c: 151:         for (int i = 0; i < 4; i++) {
  7700   002B02  0E00               	movlw	0
  7701   002B04  0100               	movlb	0	; () banked
  7702   002B06  6F6D               	movwf	(calibration_turningR@i+1)& (0+255),b
  7703   002B08  0E00               	movlw	0
  7704   002B0A  6F6C               	movwf	calibration_turningR@i& (0+255),b
  7705   002B0C                     l5451:
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;calibration.c: 152:             right90(mL, mR, factorR);
  7709   002B0C  C04C  F019         	movff	calibration_turningR@mL,right90@mL
  7710   002B10  C04D  F01A         	movff	calibration_turningR@mR,right90@mR
  7711   002B14  C06E  F01B         	movff	calibration_turningR@factorR,right90@factorR
  7712   002B18  C06F  F01C         	movff	calibration_turningR@factorR+1,right90@factorR+1
  7713   002B1C  EC4F  F027         	call	_right90	;wreg free
  7714   002B20                     
  7715                           ;calibration.c: 153:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  7716   002B20  0E52               	movlw	82
  7717   002B22  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  7718   002B24  0E2B               	movlw	43
  7719   002B26  6E4E               	movwf	??_calibration_turningR^0,c
  7720   002B28  0E00               	movlw	0
  7721   002B2A                     u5907:
  7722   002B2A  2EE8               	decfsz	wreg,f,c
  7723   002B2C  D7FE               	bra	u5907
  7724   002B2E  2E4E               	decfsz	??_calibration_turningR^0,f,c
  7725   002B30  D7FC               	bra	u5907
  7726   002B32  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  7727   002B34  D7FA               	bra	u5907
  7728   002B36  D000               	nop2	
  7729   002B38                     
  7730                           ;calibration.c: 154:         }
  7731   002B38  0100               	movlb	0	; () banked
  7732   002B3A  4B6C               	infsnz	calibration_turningR@i& (0+255),f,b
  7733   002B3C  2B6D               	incf	(calibration_turningR@i+1)& (0+255),f,b
  7734   002B3E                     
  7735                           ; BSR set to: 0
  7736   002B3E  BF6D               	btfsc	(calibration_turningR@i+1)& (0+255),7,b
  7737   002B40  EFAB  F015         	goto	u4811
  7738   002B44  516D               	movf	(calibration_turningR@i+1)& (0+255),w,b
  7739   002B46  E109               	bnz	u4810
  7740   002B48  0E04               	movlw	4
  7741   002B4A  5D6C               	subwf	calibration_turningR@i& (0+255),w,b
  7742   002B4C  A0D8               	btfss	status,0,c
  7743   002B4E  EFAB  F015         	goto	u4811
  7744   002B52  EFAD  F015         	goto	u4810
  7745   002B56                     u4811:
  7746   002B56  EF86  F015         	goto	l5451
  7747   002B5A                     u4810:
  7748   002B5A                     
  7749                           ; BSR set to: 0
  7750                           ;calibration.c: 156:         inactivityCounter = 0;
  7751   002B5A  0E00               	movlw	0
  7752   002B5C  6F64               	movwf	calibration_turningR@inactivityCounter& (0+255),b
  7753   002B5E  0E00               	movlw	0
  7754   002B60  6F65               	movwf	(calibration_turningR@inactivityCounter+1)& (0+255),b
  7755   002B62  0E00               	movlw	0
  7756   002B64  6F66               	movwf	(calibration_turningR@inactivityCounter+2)& (0+255),b
  7757   002B66  0E00               	movlw	0
  7758   002B68  6F67               	movwf	(calibration_turningR@inactivityCounter+3)& (0+255),b
  7759   002B6A                     l5461:
  7760                           
  7761                           ;calibration.c: 160:             if (!PORTFbits.RF2 || !PORTFbits.RF3) {
  7762   002B6A  A48E               	btfss	142,2,c	;volatile
  7763   002B6C  EFBA  F015         	goto	u4821
  7764   002B70  EFBC  F015         	goto	u4820
  7765   002B74                     u4821:
  7766   002B74  EFC3  F015         	goto	l5465
  7767   002B78                     u4820:
  7768   002B78  B68E               	btfsc	142,3,c	;volatile
  7769   002B7A  EFC1  F015         	goto	u4831
  7770   002B7E  EFC3  F015         	goto	u4830
  7771   002B82                     u4831:
  7772   002B82  EFCE  F015         	goto	l5467
  7773   002B86                     u4830:
  7774   002B86                     l5465:
  7775                           
  7776                           ;calibration.c: 161:                 inactivityCounter = 0;
  7777   002B86  0E00               	movlw	0
  7778   002B88  0100               	movlb	0	; () banked
  7779   002B8A  6F64               	movwf	calibration_turningR@inactivityCounter& (0+255),b
  7780   002B8C  0E00               	movlw	0
  7781   002B8E  6F65               	movwf	(calibration_turningR@inactivityCounter+1)& (0+255),b
  7782   002B90  0E00               	movlw	0
  7783   002B92  6F66               	movwf	(calibration_turningR@inactivityCounter+2)& (0+255),b
  7784   002B94  0E00               	movlw	0
  7785   002B96  6F67               	movwf	(calibration_turningR@inactivityCounter+3)& (0+255),b
  7786                           
  7787                           ;calibration.c: 162:             } else {
  7788   002B98  EFEA  F015         	goto	l5471
  7789   002B9C                     l5467:
  7790                           
  7791                           ;calibration.c: 163:                 inactivityCounter++;
  7792   002B9C  0E01               	movlw	1
  7793   002B9E  0100               	movlb	0	; () banked
  7794   002BA0  2764               	addwf	calibration_turningR@inactivityCounter& (0+255),f,b
  7795   002BA2  0E00               	movlw	0
  7796   002BA4  2365               	addwfc	(calibration_turningR@inactivityCounter+1)& (0+255),f,b
  7797   002BA6  2366               	addwfc	(calibration_turningR@inactivityCounter+2)& (0+255),f,b
  7798   002BA8  2367               	addwfc	(calibration_turningR@inactivityCounter+3)& (0+255),f,b
  7799                           
  7800                           ;calibration.c: 164:                 if (inactivityCounter > inactivityLimit) {
  7801   002BAA  5164               	movf	calibration_turningR@inactivityCounter& (0+255),w,b
  7802   002BAC  5D60               	subwf	calibration_turningR@inactivityLimit& (0+255),w,b
  7803   002BAE  5165               	movf	(calibration_turningR@inactivityCounter+1)& (0+255),w,b
  7804   002BB0  5961               	subwfb	(calibration_turningR@inactivityLimit+1)& (0+255),w,b
  7805   002BB2  5166               	movf	(calibration_turningR@inactivityCounter+2)& (0+255),w,b
  7806   002BB4  5962               	subwfb	(calibration_turningR@inactivityLimit+2)& (0+255),w,b
  7807   002BB6  5167               	movf	(calibration_turningR@inactivityCounter+3)& (0+255),w,b
  7808   002BB8  5963               	subwfb	(calibration_turningR@inactivityLimit+3)& (0+255),w,b
  7809   002BBA  B0D8               	btfsc	status,0,c
  7810   002BBC  EFE2  F015         	goto	u4841
  7811   002BC0  EFE4  F015         	goto	u4840
  7812   002BC4                     u4841:
  7813   002BC4  EFEA  F015         	goto	l5471
  7814   002BC8                     u4840:
  7815   002BC8                     
  7816                           ; BSR set to: 0
  7817                           ;calibration.c: 166:                     return (unsigned int)factorR;
  7818   002BC8  C06E  F04C         	movff	calibration_turningR@factorR,?_calibration_turningR
  7819   002BCC  C06F  F04D         	movff	calibration_turningR@factorR+1,?_calibration_turningR+1
  7820   002BD0  EF8E  F016         	goto	l804
  7821   002BD4                     l5471:
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;calibration.c: 169:             _delay((unsigned long)((1)*(64000000/4000.0)));
  7825   002BD4  0E15               	movlw	21
  7826   002BD6  6E4E               	movwf	??_calibration_turningR^0,c
  7827   002BD8  0EC6               	movlw	198
  7828   002BDA                     u5917:
  7829   002BDA  2EE8               	decfsz	wreg,f,c
  7830   002BDC  D7FE               	bra	u5917
  7831   002BDE  2E4E               	decfsz	??_calibration_turningR^0,f,c
  7832   002BE0  D7FC               	bra	u5917
  7833   002BE2  D000               	nop2	
  7834   002BE4                     
  7835                           ;calibration.c: 172:             if (PORTFbits.RF2 == 0) {
  7836   002BE4  B48E               	btfsc	142,2,c	;volatile
  7837   002BE6  EFF7  F015         	goto	u4851
  7838   002BEA  EFF9  F015         	goto	u4850
  7839   002BEE                     u4851:
  7840   002BEE  EF46  F016         	goto	l805
  7841   002BF2                     u4850:
  7842   002BF2                     
  7843                           ;calibration.c: 173:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  7844   002BF2  0E11               	movlw	17
  7845   002BF4  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  7846   002BF6  0E3C               	movlw	60
  7847   002BF8  6E4E               	movwf	??_calibration_turningR^0,c
  7848   002BFA  0ECB               	movlw	203
  7849   002BFC                     u5927:
  7850   002BFC  2EE8               	decfsz	wreg,f,c
  7851   002BFE  D7FE               	bra	u5927
  7852   002C00  2E4E               	decfsz	??_calibration_turningR^0,f,c
  7853   002C02  D7FC               	bra	u5927
  7854   002C04  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  7855   002C06  D7FA               	bra	u5927
  7856   002C08  0000               	nop	
  7857   002C0A                     
  7858                           ;calibration.c: 174:                 factorR += adjustment;
  7859   002C0A  C068  F014         	movff	calibration_turningR@adjustment,___fladd@a
  7860   002C0E  C069  F015         	movff	calibration_turningR@adjustment+1,___fladd@a+1
  7861   002C12  C06A  F016         	movff	calibration_turningR@adjustment+2,___fladd@a+2
  7862   002C16  C06B  F017         	movff	calibration_turningR@adjustment+3,___fladd@a+3
  7863   002C1A  C06E  F002         	movff	calibration_turningR@factorR,___xxtofl@val
  7864   002C1E  C06F  F003         	movff	calibration_turningR@factorR+1,___xxtofl@val+1
  7865   002C22  0E00               	movlw	0
  7866   002C24  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  7867   002C26  0EFF               	movlw	-1
  7868   002C28  6E04               	movwf	(___xxtofl@val+2)^0,c
  7869   002C2A  6E05               	movwf	(___xxtofl@val+3)^0,c
  7870   002C2C  0E01               	movlw	1
  7871   002C2E  ECD5  F018         	call	___xxtofl
  7872   002C32  C002  F010         	movff	?___xxtofl,___fladd@b
  7873   002C36  C003  F011         	movff	?___xxtofl+1,___fladd@b+1
  7874   002C3A  C004  F012         	movff	?___xxtofl+2,___fladd@b+2
  7875   002C3E  C005  F013         	movff	?___xxtofl+3,___fladd@b+3
  7876   002C42  ECD8  F00D         	call	___fladd	;wreg free
  7877   002C46  C010  F042         	movff	?___fladd,___fltol@f1
  7878   002C4A  C011  F043         	movff	?___fladd+1,___fltol@f1+1
  7879   002C4E  C012  F044         	movff	?___fladd+2,___fltol@f1+2
  7880   002C52  C013  F045         	movff	?___fladd+3,___fltol@f1+3
  7881   002C56  EC5D  F01E         	call	___fltol	;wreg free
  7882   002C5A  C042  F06E         	movff	?___fltol,calibration_turningR@factorR
  7883   002C5E  C043  F06F         	movff	?___fltol+1,calibration_turningR@factorR+1
  7884   002C62                     l806:
  7885   002C62  A48E               	btfss	142,2,c	;volatile
  7886   002C64  EF36  F016         	goto	u4861
  7887   002C68  EF38  F016         	goto	u4860
  7888   002C6C                     u4861:
  7889   002C6C  EF31  F016         	goto	l806
  7890   002C70                     u4860:
  7891   002C70                     l5479:
  7892                           
  7893                           ;calibration.c: 176:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  7894   002C70  0E11               	movlw	17
  7895   002C72  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  7896   002C74  0E3C               	movlw	60
  7897   002C76  6E4E               	movwf	??_calibration_turningR^0,c
  7898   002C78  0ECB               	movlw	203
  7899   002C7A                     u5937:
  7900   002C7A  2EE8               	decfsz	wreg,f,c
  7901   002C7C  D7FE               	bra	u5937
  7902   002C7E  2E4E               	decfsz	??_calibration_turningR^0,f,c
  7903   002C80  D7FC               	bra	u5937
  7904   002C82  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  7905   002C84  D7FA               	bra	u5937
  7906   002C86  0000               	nop	
  7907                           
  7908                           ;calibration.c: 177:                 break;
  7909   002C88  EF81  F015         	goto	l795
  7910   002C8C                     l805:
  7911                           
  7912                           ;calibration.c: 181:             if (PORTFbits.RF3 == 0) {
  7913   002C8C  B68E               	btfsc	142,3,c	;volatile
  7914   002C8E  EF4B  F016         	goto	u4871
  7915   002C92  EF4D  F016         	goto	u4870
  7916   002C96                     u4871:
  7917   002C96  EFB5  F015         	goto	l5461
  7918   002C9A                     u4870:
  7919   002C9A                     
  7920                           ;calibration.c: 182:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  7921   002C9A  0E11               	movlw	17
  7922   002C9C  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  7923   002C9E  0E3C               	movlw	60
  7924   002CA0  6E4E               	movwf	??_calibration_turningR^0,c
  7925   002CA2  0ECB               	movlw	203
  7926   002CA4                     u5947:
  7927   002CA4  2EE8               	decfsz	wreg,f,c
  7928   002CA6  D7FE               	bra	u5947
  7929   002CA8  2E4E               	decfsz	??_calibration_turningR^0,f,c
  7930   002CAA  D7FC               	bra	u5947
  7931   002CAC  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  7932   002CAE  D7FA               	bra	u5947
  7933   002CB0  0000               	nop	
  7934   002CB2                     
  7935                           ;calibration.c: 183:                 factorR -= adjustment;
  7936   002CB2  C068  F024         	movff	calibration_turningR@adjustment,___flsub@a
  7937   002CB6  C069  F025         	movff	calibration_turningR@adjustment+1,___flsub@a+1
  7938   002CBA  C06A  F026         	movff	calibration_turningR@adjustment+2,___flsub@a+2
  7939   002CBE  C06B  F027         	movff	calibration_turningR@adjustment+3,___flsub@a+3
  7940   002CC2  C06E  F002         	movff	calibration_turningR@factorR,___xxtofl@val
  7941   002CC6  C06F  F003         	movff	calibration_turningR@factorR+1,___xxtofl@val+1
  7942   002CCA  0E00               	movlw	0
  7943   002CCC  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  7944   002CCE  0EFF               	movlw	-1
  7945   002CD0  6E04               	movwf	(___xxtofl@val+2)^0,c
  7946   002CD2  6E05               	movwf	(___xxtofl@val+3)^0,c
  7947   002CD4  0E01               	movlw	1
  7948   002CD6  ECD5  F018         	call	___xxtofl
  7949   002CDA  C002  F020         	movff	?___xxtofl,___flsub@b
  7950   002CDE  C003  F021         	movff	?___xxtofl+1,___flsub@b+1
  7951   002CE2  C004  F022         	movff	?___xxtofl+2,___flsub@b+2
  7952   002CE6  C005  F023         	movff	?___xxtofl+3,___flsub@b+3
  7953   002CEA  EC15  F025         	call	___flsub	;wreg free
  7954   002CEE  C020  F042         	movff	?___flsub,___fltol@f1
  7955   002CF2  C021  F043         	movff	?___flsub+1,___fltol@f1+1
  7956   002CF6  C022  F044         	movff	?___flsub+2,___fltol@f1+2
  7957   002CFA  C023  F045         	movff	?___flsub+3,___fltol@f1+3
  7958   002CFE  EC5D  F01E         	call	___fltol	;wreg free
  7959   002D02  C042  F06E         	movff	?___fltol,calibration_turningR@factorR
  7960   002D06  C043  F06F         	movff	?___fltol+1,calibration_turningR@factorR+1
  7961   002D0A                     l811:
  7962   002D0A  A68E               	btfss	142,3,c	;volatile
  7963   002D0C  EF8A  F016         	goto	u4881
  7964   002D10  EF8C  F016         	goto	u4880
  7965   002D14                     u4881:
  7966   002D14  EF85  F016         	goto	l811
  7967   002D18                     u4880:
  7968   002D18  EF38  F016         	goto	l5479
  7969   002D1C                     l804:
  7970                           
  7971                           ; BSR set to: 0
  7972   002D1C  0012               	return		;funcret
  7973   002D1E                     __end_of_calibration_turningR:
  7974                           	callstack 0
  7975                           
  7976 ;; *************** function _right90 *****************
  7977 ;; Defined at:
  7978 ;;		line 193 in file "dc_motor.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7981 ;;		 -> motorL(9), 
  7982 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7983 ;;		 -> motorR(9), 
  7984 ;;  factorR         2   26[COMRAM] unsigned int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7987 ;;  delay           2    0        unsigned int 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  1    wreg      void 
  7990 ;; Registers used:
  7991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8000 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8001 ;;Total ram usage:        6 bytes
  8002 ;; Hardware stack levels used: 1
  8003 ;; Hardware stack levels required when called: 4
  8004 ;; This function calls:
  8005 ;;		_customDelayMs
  8006 ;;		_stop
  8007 ;;		_turnRight
  8008 ;; This function is called by:
  8009 ;;		_moveRed
  8010 ;;		_moveYellow
  8011 ;;		_reverseTurn
  8012 ;;		_calibration_turningR
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text36
  8017   004E9E                     __ptext36:
  8018                           	callstack 0
  8019   004E9E                     _right90:
  8020                           	callstack 24
  8021   004E9E                     
  8022                           ;dc_motor.c: 196:     unsigned int delay_after_calibration = delay + factorR;
  8023   004E9E  0E22               	movlw	34
  8024   004EA0  241B               	addwf	right90@factorR^0,w,c
  8025   004EA2  6E1D               	movwf	right90@delay_after_calibration^0,c
  8026   004EA4  0E01               	movlw	1
  8027   004EA6  201C               	addwfc	(right90@factorR+1)^0,w,c
  8028   004EA8  6E1E               	movwf	(right90@delay_after_calibration+1)^0,c
  8029   004EAA                     
  8030                           ;dc_motor.c: 197:     turnRight(mL,mR);
  8031   004EAA  C019  F014         	movff	right90@mL,turnRight@mL
  8032   004EAE  C01A  F015         	movff	right90@mR,turnRight@mR
  8033   004EB2  EC20  F023         	call	_turnRight	;wreg free
  8034   004EB6                     
  8035                           ;dc_motor.c: 198:     customDelayMs(delay_after_calibration);
  8036   004EB6  C01D  F002         	movff	right90@delay_after_calibration,customDelayMs@milliseconds
  8037   004EBA  C01E  F003         	movff	right90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8038   004EBE  EC4F  F026         	call	_customDelayMs	;wreg free
  8039   004EC2                     
  8040                           ;dc_motor.c: 199:     stop(mL,mR);
  8041   004EC2  C019  F014         	movff	right90@mL,stop@mL
  8042   004EC6  C01A  F015         	movff	right90@mR,stop@mR
  8043   004ECA  ECD9  F022         	call	_stop	;wreg free
  8044   004ECE  0012               	return		;funcret
  8045   004ED0                     __end_of_right90:
  8046                           	callstack 0
  8047                           
  8048 ;; *************** function _turnRight *****************
  8049 ;; Defined at:
  8050 ;;		line 125 in file "dc_motor.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8053 ;;		 -> motorL(9), 
  8054 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8055 ;;		 -> motorR(9), 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  i               2   22[COMRAM] unsigned int 
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8070 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8071 ;;Total ram usage:        5 bytes
  8072 ;; Hardware stack levels used: 1
  8073 ;; Hardware stack levels required when called: 3
  8074 ;; This function calls:
  8075 ;;		_setMotorPWM
  8076 ;; This function is called by:
  8077 ;;		_right90
  8078 ;;		_right135
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           	psect	text37
  8083   004640                     __ptext37:
  8084                           	callstack 0
  8085   004640                     _turnRight:
  8086                           	callstack 24
  8087   004640                     
  8088                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  8089   004640  5014               	movf	turnRight@mL^0,w,c
  8090   004642  6ED9               	movwf	fsr2l,c
  8091   004644  6ADA               	clrf	fsr2h,c
  8092   004646  0E01               	movlw	1
  8093   004648  26D9               	addwf	fsr2l,f,c
  8094   00464A  0E01               	movlw	1
  8095   00464C  6EDF               	movwf	indf2,c
  8096                           
  8097                           ;dc_motor.c: 129:     mR->direction = 0;
  8098   00464E  5015               	movf	turnRight@mR^0,w,c
  8099   004650  6ED9               	movwf	fsr2l,c
  8100   004652  6ADA               	clrf	fsr2h,c
  8101   004654  0E01               	movlw	1
  8102   004656  26D9               	addwf	fsr2l,f,c
  8103   004658  6ADF               	clrf	indf2,c
  8104   00465A                     
  8105                           ;dc_motor.c: 131:     setMotorPWM(mL);
  8106   00465A  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  8107   00465E  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8108   004662                     
  8109                           ;dc_motor.c: 132:     setMotorPWM(mR);
  8110   004662  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  8111   004666  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8112   00466A                     
  8113                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  8114   00466A  0E00               	movlw	0
  8115   00466C  6E18               	movwf	(turnRight@i+1)^0,c
  8116   00466E  0E00               	movlw	0
  8117   004670  6E17               	movwf	turnRight@i^0,c
  8118   004672                     l4081:
  8119                           
  8120                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  8121   004672  5014               	movf	turnRight@mL^0,w,c
  8122   004674  6ED9               	movwf	fsr2l,c
  8123   004676  6ADA               	clrf	fsr2h,c
  8124   004678  2ADF               	incf	indf2,f,c
  8125                           
  8126                           ;dc_motor.c: 136:         mR->power++;
  8127   00467A  5015               	movf	turnRight@mR^0,w,c
  8128   00467C  6ED9               	movwf	fsr2l,c
  8129   00467E  6ADA               	clrf	fsr2h,c
  8130   004680  2ADF               	incf	indf2,f,c
  8131   004682                     
  8132                           ;dc_motor.c: 137:         setMotorPWM(mL);
  8133   004682  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  8134   004686  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8135   00468A                     
  8136                           ;dc_motor.c: 138:         setMotorPWM(mR);
  8137   00468A  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  8138   00468E  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8139   004692                     
  8140                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8141   004692  0E0B               	movlw	11
  8142   004694  6E16               	movwf	??_turnRight^0,c
  8143   004696  0E62               	movlw	98
  8144   004698                     u5957:
  8145   004698  2EE8               	decfsz	wreg,f,c
  8146   00469A  D7FE               	bra	u5957
  8147   00469C  2E16               	decfsz	??_turnRight^0,f,c
  8148   00469E  D7FC               	bra	u5957
  8149   0046A0  D000               	nop2	
  8150   0046A2                     
  8151                           ;dc_motor.c: 140:     }
  8152   0046A2  4A17               	infsnz	turnRight@i^0,f,c
  8153   0046A4  2A18               	incf	(turnRight@i+1)^0,f,c
  8154   0046A6  5018               	movf	(turnRight@i+1)^0,w,c
  8155   0046A8  E109               	bnz	u3130
  8156   0046AA  0E32               	movlw	50
  8157   0046AC  5C17               	subwf	turnRight@i^0,w,c
  8158   0046AE  A0D8               	btfss	status,0,c
  8159   0046B0  EF5C  F023         	goto	u3131
  8160   0046B4  EF5E  F023         	goto	u3130
  8161   0046B8                     u3131:
  8162   0046B8  EF39  F023         	goto	l4081
  8163   0046BC                     u3130:
  8164   0046BC  0012               	return		;funcret
  8165   0046BE                     __end_of_turnRight:
  8166                           	callstack 0
  8167                           
  8168 ;; *************** function _calibration_turningL *****************
  8169 ;; Defined at:
  8170 ;;		line 193 in file "calibration.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  8173 ;;		 -> motorL(9), 
  8174 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  8175 ;;		 -> motorR(9), 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  i               2   12[BANK0 ] int 
  8178 ;;  adjustment      4    8[BANK0 ] float 
  8179 ;;  inactivityCo    4    4[BANK0 ] unsigned long 
  8180 ;;  inactivityLi    4    0[BANK0 ] const unsigned long 
  8181 ;;  factorL         2   14[BANK0 ] int 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  2   75[COMRAM] unsigned int 
  8184 ;; Registers used:
  8185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8192 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8194 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8195 ;;Total ram usage:       20 bytes
  8196 ;; Hardware stack levels used: 1
  8197 ;; Hardware stack levels required when called: 5
  8198 ;; This function calls:
  8199 ;;		___fladd
  8200 ;;		___flsub
  8201 ;;		___fltol
  8202 ;;		___xxtofl
  8203 ;;		_left90
  8204 ;; This function is called by:
  8205 ;;		_main
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text38
  8210   002D1E                     __ptext38:
  8211                           	callstack 0
  8212   002D1E                     _calibration_turningL:
  8213                           	callstack 25
  8214   002D1E                     
  8215                           ;calibration.c: 194:     int factorL = 0;
  8216   002D1E  0E00               	movlw	0
  8217   002D20  0100               	movlb	0	; () banked
  8218   002D22  6F6F               	movwf	(calibration_turningL@factorL+1)& (0+255),b
  8219   002D24  0E00               	movlw	0
  8220   002D26  6F6E               	movwf	calibration_turningL@factorL& (0+255),b
  8221                           
  8222                           ;calibration.c: 195:     float adjustment = 10;
  8223   002D28  0E00               	movlw	0
  8224   002D2A  6F68               	movwf	calibration_turningL@adjustment& (0+255),b
  8225   002D2C  0E00               	movlw	0
  8226   002D2E  6F69               	movwf	(calibration_turningL@adjustment+1)& (0+255),b
  8227   002D30  0E20               	movlw	32
  8228   002D32  6F6A               	movwf	(calibration_turningL@adjustment+2)& (0+255),b
  8229   002D34  0E41               	movlw	65
  8230   002D36  6F6B               	movwf	(calibration_turningL@adjustment+3)& (0+255),b
  8231                           
  8232                           ;calibration.c: 197:     const unsigned long inactivityLimit = 5000 / 1;
  8233   002D38  0E88               	movlw	136
  8234   002D3A  6F60               	movwf	calibration_turningL@inactivityLimit& (0+255),b
  8235   002D3C  0E13               	movlw	19
  8236   002D3E  6F61               	movwf	(calibration_turningL@inactivityLimit+1)& (0+255),b
  8237   002D40  0E00               	movlw	0
  8238   002D42  6F62               	movwf	(calibration_turningL@inactivityLimit+2)& (0+255),b
  8239   002D44  0E00               	movlw	0
  8240   002D46  6F63               	movwf	(calibration_turningL@inactivityLimit+3)& (0+255),b
  8241   002D48                     l819:
  8242                           
  8243                           ;calibration.c: 201:         for (int i = 0; i < 4; i++) {
  8244   002D48  0E00               	movlw	0
  8245   002D4A  0100               	movlb	0	; () banked
  8246   002D4C  6F6D               	movwf	(calibration_turningL@i+1)& (0+255),b
  8247   002D4E  0E00               	movlw	0
  8248   002D50  6F6C               	movwf	calibration_turningL@i& (0+255),b
  8249   002D52                     l5493:
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;calibration.c: 202:             left90(mL, mR, factorL);
  8253   002D52  C04C  F019         	movff	calibration_turningL@mL,left90@mL
  8254   002D56  C04D  F01A         	movff	calibration_turningL@mR,left90@mR
  8255   002D5A  C06E  F01B         	movff	calibration_turningL@factorL,left90@factorL
  8256   002D5E  C06F  F01C         	movff	calibration_turningL@factorL+1,left90@factorL+1
  8257   002D62  EC68  F027         	call	_left90	;wreg free
  8258   002D66                     
  8259                           ;calibration.c: 203:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  8260   002D66  0E52               	movlw	82
  8261   002D68  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  8262   002D6A  0E2B               	movlw	43
  8263   002D6C  6E4E               	movwf	??_calibration_turningL^0,c
  8264   002D6E  0E00               	movlw	0
  8265   002D70                     u5967:
  8266   002D70  2EE8               	decfsz	wreg,f,c
  8267   002D72  D7FE               	bra	u5967
  8268   002D74  2E4E               	decfsz	??_calibration_turningL^0,f,c
  8269   002D76  D7FC               	bra	u5967
  8270   002D78  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  8271   002D7A  D7FA               	bra	u5967
  8272   002D7C  D000               	nop2	
  8273   002D7E                     
  8274                           ;calibration.c: 204:         }
  8275   002D7E  0100               	movlb	0	; () banked
  8276   002D80  4B6C               	infsnz	calibration_turningL@i& (0+255),f,b
  8277   002D82  2B6D               	incf	(calibration_turningL@i+1)& (0+255),f,b
  8278   002D84                     
  8279                           ; BSR set to: 0
  8280   002D84  BF6D               	btfsc	(calibration_turningL@i+1)& (0+255),7,b
  8281   002D86  EFCE  F016         	goto	u4891
  8282   002D8A  516D               	movf	(calibration_turningL@i+1)& (0+255),w,b
  8283   002D8C  E109               	bnz	u4890
  8284   002D8E  0E04               	movlw	4
  8285   002D90  5D6C               	subwf	calibration_turningL@i& (0+255),w,b
  8286   002D92  A0D8               	btfss	status,0,c
  8287   002D94  EFCE  F016         	goto	u4891
  8288   002D98  EFD0  F016         	goto	u4890
  8289   002D9C                     u4891:
  8290   002D9C  EFA9  F016         	goto	l5493
  8291   002DA0                     u4890:
  8292   002DA0                     
  8293                           ; BSR set to: 0
  8294                           ;calibration.c: 206:         inactivityCounter = 0;
  8295   002DA0  0E00               	movlw	0
  8296   002DA2  6F64               	movwf	calibration_turningL@inactivityCounter& (0+255),b
  8297   002DA4  0E00               	movlw	0
  8298   002DA6  6F65               	movwf	(calibration_turningL@inactivityCounter+1)& (0+255),b
  8299   002DA8  0E00               	movlw	0
  8300   002DAA  6F66               	movwf	(calibration_turningL@inactivityCounter+2)& (0+255),b
  8301   002DAC  0E00               	movlw	0
  8302   002DAE  6F67               	movwf	(calibration_turningL@inactivityCounter+3)& (0+255),b
  8303   002DB0                     l5503:
  8304                           
  8305                           ;calibration.c: 210:             if (!PORTFbits.RF2 || !PORTFbits.RF3) {
  8306   002DB0  A48E               	btfss	142,2,c	;volatile
  8307   002DB2  EFDD  F016         	goto	u4901
  8308   002DB6  EFDF  F016         	goto	u4900
  8309   002DBA                     u4901:
  8310   002DBA  EFE6  F016         	goto	l5507
  8311   002DBE                     u4900:
  8312   002DBE  B68E               	btfsc	142,3,c	;volatile
  8313   002DC0  EFE4  F016         	goto	u4911
  8314   002DC4  EFE6  F016         	goto	u4910
  8315   002DC8                     u4911:
  8316   002DC8  EFF1  F016         	goto	l5509
  8317   002DCC                     u4910:
  8318   002DCC                     l5507:
  8319                           
  8320                           ;calibration.c: 211:                 inactivityCounter = 0;
  8321   002DCC  0E00               	movlw	0
  8322   002DCE  0100               	movlb	0	; () banked
  8323   002DD0  6F64               	movwf	calibration_turningL@inactivityCounter& (0+255),b
  8324   002DD2  0E00               	movlw	0
  8325   002DD4  6F65               	movwf	(calibration_turningL@inactivityCounter+1)& (0+255),b
  8326   002DD6  0E00               	movlw	0
  8327   002DD8  6F66               	movwf	(calibration_turningL@inactivityCounter+2)& (0+255),b
  8328   002DDA  0E00               	movlw	0
  8329   002DDC  6F67               	movwf	(calibration_turningL@inactivityCounter+3)& (0+255),b
  8330                           
  8331                           ;calibration.c: 212:             } else {
  8332   002DDE  EF0D  F017         	goto	l5513
  8333   002DE2                     l5509:
  8334                           
  8335                           ;calibration.c: 213:                 inactivityCounter++;
  8336   002DE2  0E01               	movlw	1
  8337   002DE4  0100               	movlb	0	; () banked
  8338   002DE6  2764               	addwf	calibration_turningL@inactivityCounter& (0+255),f,b
  8339   002DE8  0E00               	movlw	0
  8340   002DEA  2365               	addwfc	(calibration_turningL@inactivityCounter+1)& (0+255),f,b
  8341   002DEC  2366               	addwfc	(calibration_turningL@inactivityCounter+2)& (0+255),f,b
  8342   002DEE  2367               	addwfc	(calibration_turningL@inactivityCounter+3)& (0+255),f,b
  8343                           
  8344                           ;calibration.c: 214:                 if (inactivityCounter > inactivityLimit) {
  8345   002DF0  5164               	movf	calibration_turningL@inactivityCounter& (0+255),w,b
  8346   002DF2  5D60               	subwf	calibration_turningL@inactivityLimit& (0+255),w,b
  8347   002DF4  5165               	movf	(calibration_turningL@inactivityCounter+1)& (0+255),w,b
  8348   002DF6  5961               	subwfb	(calibration_turningL@inactivityLimit+1)& (0+255),w,b
  8349   002DF8  5166               	movf	(calibration_turningL@inactivityCounter+2)& (0+255),w,b
  8350   002DFA  5962               	subwfb	(calibration_turningL@inactivityLimit+2)& (0+255),w,b
  8351   002DFC  5167               	movf	(calibration_turningL@inactivityCounter+3)& (0+255),w,b
  8352   002DFE  5963               	subwfb	(calibration_turningL@inactivityLimit+3)& (0+255),w,b
  8353   002E00  B0D8               	btfsc	status,0,c
  8354   002E02  EF05  F017         	goto	u4921
  8355   002E06  EF07  F017         	goto	u4920
  8356   002E0A                     u4921:
  8357   002E0A  EF0D  F017         	goto	l5513
  8358   002E0E                     u4920:
  8359   002E0E                     
  8360                           ; BSR set to: 0
  8361                           ;calibration.c: 216:                     return (unsigned int)factorL;
  8362   002E0E  C06E  F04C         	movff	calibration_turningL@factorL,?_calibration_turningL
  8363   002E12  C06F  F04D         	movff	calibration_turningL@factorL+1,?_calibration_turningL+1
  8364   002E16  EFB1  F017         	goto	l828
  8365   002E1A                     l5513:
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;calibration.c: 219:             _delay((unsigned long)((1)*(64000000/4000.0)));
  8369   002E1A  0E15               	movlw	21
  8370   002E1C  6E4E               	movwf	??_calibration_turningL^0,c
  8371   002E1E  0EC6               	movlw	198
  8372   002E20                     u5977:
  8373   002E20  2EE8               	decfsz	wreg,f,c
  8374   002E22  D7FE               	bra	u5977
  8375   002E24  2E4E               	decfsz	??_calibration_turningL^0,f,c
  8376   002E26  D7FC               	bra	u5977
  8377   002E28  D000               	nop2	
  8378   002E2A                     
  8379                           ;calibration.c: 222:             if (PORTFbits.RF2 == 0) {
  8380   002E2A  B48E               	btfsc	142,2,c	;volatile
  8381   002E2C  EF1A  F017         	goto	u4931
  8382   002E30  EF1C  F017         	goto	u4930
  8383   002E34                     u4931:
  8384   002E34  EF69  F017         	goto	l829
  8385   002E38                     u4930:
  8386   002E38                     
  8387                           ;calibration.c: 223:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8388   002E38  0E11               	movlw	17
  8389   002E3A  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  8390   002E3C  0E3C               	movlw	60
  8391   002E3E  6E4E               	movwf	??_calibration_turningL^0,c
  8392   002E40  0ECB               	movlw	203
  8393   002E42                     u5987:
  8394   002E42  2EE8               	decfsz	wreg,f,c
  8395   002E44  D7FE               	bra	u5987
  8396   002E46  2E4E               	decfsz	??_calibration_turningL^0,f,c
  8397   002E48  D7FC               	bra	u5987
  8398   002E4A  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  8399   002E4C  D7FA               	bra	u5987
  8400   002E4E  0000               	nop	
  8401   002E50                     
  8402                           ;calibration.c: 224:                 factorL += adjustment;
  8403   002E50  C068  F014         	movff	calibration_turningL@adjustment,___fladd@a
  8404   002E54  C069  F015         	movff	calibration_turningL@adjustment+1,___fladd@a+1
  8405   002E58  C06A  F016         	movff	calibration_turningL@adjustment+2,___fladd@a+2
  8406   002E5C  C06B  F017         	movff	calibration_turningL@adjustment+3,___fladd@a+3
  8407   002E60  C06E  F002         	movff	calibration_turningL@factorL,___xxtofl@val
  8408   002E64  C06F  F003         	movff	calibration_turningL@factorL+1,___xxtofl@val+1
  8409   002E68  0E00               	movlw	0
  8410   002E6A  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  8411   002E6C  0EFF               	movlw	-1
  8412   002E6E  6E04               	movwf	(___xxtofl@val+2)^0,c
  8413   002E70  6E05               	movwf	(___xxtofl@val+3)^0,c
  8414   002E72  0E01               	movlw	1
  8415   002E74  ECD5  F018         	call	___xxtofl
  8416   002E78  C002  F010         	movff	?___xxtofl,___fladd@b
  8417   002E7C  C003  F011         	movff	?___xxtofl+1,___fladd@b+1
  8418   002E80  C004  F012         	movff	?___xxtofl+2,___fladd@b+2
  8419   002E84  C005  F013         	movff	?___xxtofl+3,___fladd@b+3
  8420   002E88  ECD8  F00D         	call	___fladd	;wreg free
  8421   002E8C  C010  F042         	movff	?___fladd,___fltol@f1
  8422   002E90  C011  F043         	movff	?___fladd+1,___fltol@f1+1
  8423   002E94  C012  F044         	movff	?___fladd+2,___fltol@f1+2
  8424   002E98  C013  F045         	movff	?___fladd+3,___fltol@f1+3
  8425   002E9C  EC5D  F01E         	call	___fltol	;wreg free
  8426   002EA0  C042  F06E         	movff	?___fltol,calibration_turningL@factorL
  8427   002EA4  C043  F06F         	movff	?___fltol+1,calibration_turningL@factorL+1
  8428   002EA8                     l830:
  8429   002EA8  A48E               	btfss	142,2,c	;volatile
  8430   002EAA  EF59  F017         	goto	u4941
  8431   002EAE  EF5B  F017         	goto	u4940
  8432   002EB2                     u4941:
  8433   002EB2  EF54  F017         	goto	l830
  8434   002EB6                     u4940:
  8435   002EB6                     l5521:
  8436                           
  8437                           ;calibration.c: 226:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8438   002EB6  0E11               	movlw	17
  8439   002EB8  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  8440   002EBA  0E3C               	movlw	60
  8441   002EBC  6E4E               	movwf	??_calibration_turningL^0,c
  8442   002EBE  0ECB               	movlw	203
  8443   002EC0                     u5997:
  8444   002EC0  2EE8               	decfsz	wreg,f,c
  8445   002EC2  D7FE               	bra	u5997
  8446   002EC4  2E4E               	decfsz	??_calibration_turningL^0,f,c
  8447   002EC6  D7FC               	bra	u5997
  8448   002EC8  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  8449   002ECA  D7FA               	bra	u5997
  8450   002ECC  0000               	nop	
  8451                           
  8452                           ;calibration.c: 227:                 break;
  8453   002ECE  EFA4  F016         	goto	l819
  8454   002ED2                     l829:
  8455                           
  8456                           ;calibration.c: 231:             if (PORTFbits.RF3 == 0) {
  8457   002ED2  B68E               	btfsc	142,3,c	;volatile
  8458   002ED4  EF6E  F017         	goto	u4951
  8459   002ED8  EF70  F017         	goto	u4950
  8460   002EDC                     u4951:
  8461   002EDC  EFD8  F016         	goto	l5503
  8462   002EE0                     u4950:
  8463   002EE0                     
  8464                           ;calibration.c: 232:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8465   002EE0  0E11               	movlw	17
  8466   002EE2  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  8467   002EE4  0E3C               	movlw	60
  8468   002EE6  6E4E               	movwf	??_calibration_turningL^0,c
  8469   002EE8  0ECB               	movlw	203
  8470   002EEA                     u6007:
  8471   002EEA  2EE8               	decfsz	wreg,f,c
  8472   002EEC  D7FE               	bra	u6007
  8473   002EEE  2E4E               	decfsz	??_calibration_turningL^0,f,c
  8474   002EF0  D7FC               	bra	u6007
  8475   002EF2  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  8476   002EF4  D7FA               	bra	u6007
  8477   002EF6  0000               	nop	
  8478   002EF8                     
  8479                           ;calibration.c: 233:                 factorL -= adjustment;
  8480   002EF8  C068  F024         	movff	calibration_turningL@adjustment,___flsub@a
  8481   002EFC  C069  F025         	movff	calibration_turningL@adjustment+1,___flsub@a+1
  8482   002F00  C06A  F026         	movff	calibration_turningL@adjustment+2,___flsub@a+2
  8483   002F04  C06B  F027         	movff	calibration_turningL@adjustment+3,___flsub@a+3
  8484   002F08  C06E  F002         	movff	calibration_turningL@factorL,___xxtofl@val
  8485   002F0C  C06F  F003         	movff	calibration_turningL@factorL+1,___xxtofl@val+1
  8486   002F10  0E00               	movlw	0
  8487   002F12  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  8488   002F14  0EFF               	movlw	-1
  8489   002F16  6E04               	movwf	(___xxtofl@val+2)^0,c
  8490   002F18  6E05               	movwf	(___xxtofl@val+3)^0,c
  8491   002F1A  0E01               	movlw	1
  8492   002F1C  ECD5  F018         	call	___xxtofl
  8493   002F20  C002  F020         	movff	?___xxtofl,___flsub@b
  8494   002F24  C003  F021         	movff	?___xxtofl+1,___flsub@b+1
  8495   002F28  C004  F022         	movff	?___xxtofl+2,___flsub@b+2
  8496   002F2C  C005  F023         	movff	?___xxtofl+3,___flsub@b+3
  8497   002F30  EC15  F025         	call	___flsub	;wreg free
  8498   002F34  C020  F042         	movff	?___flsub,___fltol@f1
  8499   002F38  C021  F043         	movff	?___flsub+1,___fltol@f1+1
  8500   002F3C  C022  F044         	movff	?___flsub+2,___fltol@f1+2
  8501   002F40  C023  F045         	movff	?___flsub+3,___fltol@f1+3
  8502   002F44  EC5D  F01E         	call	___fltol	;wreg free
  8503   002F48  C042  F06E         	movff	?___fltol,calibration_turningL@factorL
  8504   002F4C  C043  F06F         	movff	?___fltol+1,calibration_turningL@factorL+1
  8505   002F50                     l835:
  8506   002F50  A68E               	btfss	142,3,c	;volatile
  8507   002F52  EFAD  F017         	goto	u4961
  8508   002F56  EFAF  F017         	goto	u4960
  8509   002F5A                     u4961:
  8510   002F5A  EFA8  F017         	goto	l835
  8511   002F5E                     u4960:
  8512   002F5E  EF5B  F017         	goto	l5521
  8513   002F62                     l828:
  8514                           
  8515                           ; BSR set to: 0
  8516   002F62  0012               	return		;funcret
  8517   002F64                     __end_of_calibration_turningL:
  8518                           	callstack 0
  8519                           
  8520 ;; *************** function _left90 *****************
  8521 ;; Defined at:
  8522 ;;		line 203 in file "dc_motor.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8525 ;;		 -> motorL(9), 
  8526 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8527 ;;		 -> motorR(9), 
  8528 ;;  factorL         2   26[COMRAM] unsigned int 
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8531 ;;  delay           2    0        unsigned int 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      void 
  8534 ;; Registers used:
  8535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8544 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8545 ;;Total ram usage:        6 bytes
  8546 ;; Hardware stack levels used: 1
  8547 ;; Hardware stack levels required when called: 4
  8548 ;; This function calls:
  8549 ;;		_customDelayMs
  8550 ;;		_stop
  8551 ;;		_turnLeft
  8552 ;; This function is called by:
  8553 ;;		_moveGreen
  8554 ;;		_movePink
  8555 ;;		_reverseTurn
  8556 ;;		_calibration_turningL
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text39
  8561   004ED0                     __ptext39:
  8562                           	callstack 0
  8563   004ED0                     _left90:
  8564                           	callstack 24
  8565   004ED0                     
  8566                           ;dc_motor.c: 206:     unsigned int delay_after_calibration = delay + factorL;
  8567   004ED0  0E22               	movlw	34
  8568   004ED2  241B               	addwf	left90@factorL^0,w,c
  8569   004ED4  6E1D               	movwf	left90@delay_after_calibration^0,c
  8570   004ED6  0E01               	movlw	1
  8571   004ED8  201C               	addwfc	(left90@factorL+1)^0,w,c
  8572   004EDA  6E1E               	movwf	(left90@delay_after_calibration+1)^0,c
  8573   004EDC                     
  8574                           ;dc_motor.c: 207:     turnLeft(mL,mR);
  8575   004EDC  C019  F014         	movff	left90@mL,turnLeft@mL
  8576   004EE0  C01A  F015         	movff	left90@mR,turnLeft@mR
  8577   004EE4  EC5F  F023         	call	_turnLeft	;wreg free
  8578   004EE8                     
  8579                           ;dc_motor.c: 208:     customDelayMs(delay_after_calibration);
  8580   004EE8  C01D  F002         	movff	left90@delay_after_calibration,customDelayMs@milliseconds
  8581   004EEC  C01E  F003         	movff	left90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8582   004EF0  EC4F  F026         	call	_customDelayMs	;wreg free
  8583   004EF4                     
  8584                           ;dc_motor.c: 209:     stop(mL,mR);
  8585   004EF4  C019  F014         	movff	left90@mL,stop@mL
  8586   004EF8  C01A  F015         	movff	left90@mR,stop@mR
  8587   004EFC  ECD9  F022         	call	_stop	;wreg free
  8588   004F00  0012               	return		;funcret
  8589   004F02                     __end_of_left90:
  8590                           	callstack 0
  8591                           
  8592 ;; *************** function _turnLeft *****************
  8593 ;; Defined at:
  8594 ;;		line 105 in file "dc_motor.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8597 ;;		 -> motorL(9), 
  8598 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8599 ;;		 -> motorR(9), 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  i               2   22[COMRAM] unsigned int 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8614 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8615 ;;Total ram usage:        5 bytes
  8616 ;; Hardware stack levels used: 1
  8617 ;; Hardware stack levels required when called: 3
  8618 ;; This function calls:
  8619 ;;		_setMotorPWM
  8620 ;; This function is called by:
  8621 ;;		_left90
  8622 ;;		_turn180
  8623 ;;		_left135
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text40
  8628   0046BE                     __ptext40:
  8629                           	callstack 0
  8630   0046BE                     _turnLeft:
  8631                           	callstack 24
  8632   0046BE                     
  8633                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8634   0046BE  5014               	movf	turnLeft@mL^0,w,c
  8635   0046C0  6ED9               	movwf	fsr2l,c
  8636   0046C2  6ADA               	clrf	fsr2h,c
  8637   0046C4  0E01               	movlw	1
  8638   0046C6  26D9               	addwf	fsr2l,f,c
  8639   0046C8  6ADF               	clrf	indf2,c
  8640                           
  8641                           ;dc_motor.c: 109:     mR->direction = 1;
  8642   0046CA  5015               	movf	turnLeft@mR^0,w,c
  8643   0046CC  6ED9               	movwf	fsr2l,c
  8644   0046CE  6ADA               	clrf	fsr2h,c
  8645   0046D0  0E01               	movlw	1
  8646   0046D2  26D9               	addwf	fsr2l,f,c
  8647   0046D4  0E01               	movlw	1
  8648   0046D6  6EDF               	movwf	indf2,c
  8649   0046D8                     
  8650                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8651   0046D8  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8652   0046DC  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8653   0046E0                     
  8654                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8655   0046E0  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8656   0046E4  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8657   0046E8                     
  8658                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8659   0046E8  0E00               	movlw	0
  8660   0046EA  6E18               	movwf	(turnLeft@i+1)^0,c
  8661   0046EC  0E00               	movlw	0
  8662   0046EE  6E17               	movwf	turnLeft@i^0,c
  8663   0046F0                     l4057:
  8664                           
  8665                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8666   0046F0  5014               	movf	turnLeft@mL^0,w,c
  8667   0046F2  6ED9               	movwf	fsr2l,c
  8668   0046F4  6ADA               	clrf	fsr2h,c
  8669   0046F6  2ADF               	incf	indf2,f,c
  8670                           
  8671                           ;dc_motor.c: 116:         mR->power++;
  8672   0046F8  5015               	movf	turnLeft@mR^0,w,c
  8673   0046FA  6ED9               	movwf	fsr2l,c
  8674   0046FC  6ADA               	clrf	fsr2h,c
  8675   0046FE  2ADF               	incf	indf2,f,c
  8676   004700                     
  8677                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8678   004700  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8679   004704  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8680   004708                     
  8681                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8682   004708  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8683   00470C  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8684   004710                     
  8685                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8686   004710  0E0B               	movlw	11
  8687   004712  6E16               	movwf	??_turnLeft^0,c
  8688   004714  0E62               	movlw	98
  8689   004716                     u6017:
  8690   004716  2EE8               	decfsz	wreg,f,c
  8691   004718  D7FE               	bra	u6017
  8692   00471A  2E16               	decfsz	??_turnLeft^0,f,c
  8693   00471C  D7FC               	bra	u6017
  8694   00471E  D000               	nop2	
  8695   004720                     
  8696                           ;dc_motor.c: 120:     }
  8697   004720  4A17               	infsnz	turnLeft@i^0,f,c
  8698   004722  2A18               	incf	(turnLeft@i+1)^0,f,c
  8699   004724  5018               	movf	(turnLeft@i+1)^0,w,c
  8700   004726  E109               	bnz	u3120
  8701   004728  0E32               	movlw	50
  8702   00472A  5C17               	subwf	turnLeft@i^0,w,c
  8703   00472C  A0D8               	btfss	status,0,c
  8704   00472E  EF9B  F023         	goto	u3121
  8705   004732  EF9D  F023         	goto	u3120
  8706   004736                     u3121:
  8707   004736  EF78  F023         	goto	l4057
  8708   00473A                     u3120:
  8709   00473A  0012               	return		;funcret
  8710   00473C                     __end_of_turnLeft:
  8711                           	callstack 0
  8712                           
  8713 ;; *************** function _stop *****************
  8714 ;; Defined at:
  8715 ;;		line 88 in file "dc_motor.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8718 ;;		 -> motorL(9), 
  8719 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8720 ;;		 -> motorR(9), 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8734 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8735 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8736 ;;Total ram usage:        3 bytes
  8737 ;; Hardware stack levels used: 1
  8738 ;; Hardware stack levels required when called: 3
  8739 ;; This function calls:
  8740 ;;		_setMotorPWM
  8741 ;; This function is called by:
  8742 ;;		_main
  8743 ;;		_right90
  8744 ;;		_left90
  8745 ;;		_turn180
  8746 ;;		_right135
  8747 ;;		_left135
  8748 ;;		_backHalf
  8749 ;;		_backOneAndHalf
  8750 ;;		_reverseStraight
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           	psect	text41
  8755   0045B2                     __ptext41:
  8756                           	callstack 0
  8757   0045B2                     _stop:
  8758                           	callstack 27
  8759   0045B2                     
  8760                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8761   0045B2  EF09  F023         	goto	l4041
  8762   0045B6                     l4027:
  8763                           
  8764                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8765   0045B6  5014               	movf	stop@mL^0,w,c
  8766   0045B8  6ED9               	movwf	fsr2l,c
  8767   0045BA  6ADA               	clrf	fsr2h,c
  8768   0045BC  50DF               	movf	indf2,w,c
  8769   0045BE  B4D8               	btfsc	status,2,c
  8770   0045C0  EFE4  F022         	goto	u3081
  8771   0045C4  EFE6  F022         	goto	u3080
  8772   0045C8                     u3081:
  8773   0045C8  EFEA  F022         	goto	l4031
  8774   0045CC                     u3080:
  8775   0045CC  5014               	movf	stop@mL^0,w,c
  8776   0045CE  6ED9               	movwf	fsr2l,c
  8777   0045D0  6ADA               	clrf	fsr2h,c
  8778   0045D2  06DF               	decf	indf2,f,c
  8779   0045D4                     l4031:
  8780                           
  8781                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8782   0045D4  5015               	movf	stop@mR^0,w,c
  8783   0045D6  6ED9               	movwf	fsr2l,c
  8784   0045D8  6ADA               	clrf	fsr2h,c
  8785   0045DA  50DF               	movf	indf2,w,c
  8786   0045DC  B4D8               	btfsc	status,2,c
  8787   0045DE  EFF3  F022         	goto	u3091
  8788   0045E2  EFF5  F022         	goto	u3090
  8789   0045E6                     u3091:
  8790   0045E6  EFF9  F022         	goto	l4035
  8791   0045EA                     u3090:
  8792   0045EA  5015               	movf	stop@mR^0,w,c
  8793   0045EC  6ED9               	movwf	fsr2l,c
  8794   0045EE  6ADA               	clrf	fsr2h,c
  8795   0045F0  06DF               	decf	indf2,f,c
  8796   0045F2                     l4035:
  8797                           
  8798                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8799   0045F2  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8800   0045F6  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8801   0045FA                     
  8802                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8803   0045FA  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8804   0045FE  EC8F  F01C         	call	_setMotorPWM	;wreg free
  8805   004602                     
  8806                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8807   004602  0E0B               	movlw	11
  8808   004604  6E16               	movwf	??_stop^0,c
  8809   004606  0E62               	movlw	98
  8810   004608                     u6027:
  8811   004608  2EE8               	decfsz	wreg,f,c
  8812   00460A  D7FE               	bra	u6027
  8813   00460C  2E16               	decfsz	??_stop^0,f,c
  8814   00460E  D7FC               	bra	u6027
  8815   004610  D000               	nop2	
  8816   004612                     l4041:
  8817                           
  8818                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8819   004612  5014               	movf	stop@mL^0,w,c
  8820   004614  6ED9               	movwf	fsr2l,c
  8821   004616  6ADA               	clrf	fsr2h,c
  8822   004618  50DF               	movf	indf2,w,c
  8823   00461A  A4D8               	btfss	status,2,c
  8824   00461C  EF12  F023         	goto	u3101
  8825   004620  EF14  F023         	goto	u3100
  8826   004624                     u3101:
  8827   004624  EFDB  F022         	goto	l4027
  8828   004628                     u3100:
  8829   004628  5015               	movf	stop@mR^0,w,c
  8830   00462A  6ED9               	movwf	fsr2l,c
  8831   00462C  6ADA               	clrf	fsr2h,c
  8832   00462E  50DF               	movf	indf2,w,c
  8833   004630  A4D8               	btfss	status,2,c
  8834   004632  EF1D  F023         	goto	u3111
  8835   004636  EF1F  F023         	goto	u3110
  8836   00463A                     u3111:
  8837   00463A  EFDB  F022         	goto	l4027
  8838   00463E                     u3110:
  8839   00463E  0012               	return		;funcret
  8840   004640                     __end_of_stop:
  8841                           	callstack 0
  8842                           
  8843 ;; *************** function _setMotorPWM *****************
  8844 ;; Defined at:
  8845 ;;		line 65 in file "dc_motor.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8848 ;;		 -> motorR(9), motorL(9), 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  negDuty         1   18[COMRAM] unsigned char 
  8851 ;;  posDuty         1   17[COMRAM] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8861 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8864 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8865 ;;Total ram usage:        5 bytes
  8866 ;; Hardware stack levels used: 1
  8867 ;; Hardware stack levels required when called: 2
  8868 ;; This function calls:
  8869 ;;		___lwdiv
  8870 ;;		___wmul
  8871 ;; This function is called by:
  8872 ;;		_stop
  8873 ;;		_turnLeft
  8874 ;;		_turnRight
  8875 ;;		_fullSpeedAhead
  8876 ;;		_fullSpeedBack
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text42
  8881   00391E                     __ptext42:
  8882                           	callstack 0
  8883   00391E                     _setMotorPWM:
  8884                           	callstack 27
  8885   00391E                     
  8886                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8887   00391E  500F               	movf	setMotorPWM@m^0,w,c
  8888   003920  6ED9               	movwf	fsr2l,c
  8889   003922  6ADA               	clrf	fsr2h,c
  8890   003924  0E02               	movlw	2
  8891   003926  26D9               	addwf	fsr2l,f,c
  8892   003928  50DF               	movf	indf2,w,c
  8893   00392A  B4D8               	btfsc	status,2,c
  8894   00392C  EF9A  F01C         	goto	u2991
  8895   003930  EF9C  F01C         	goto	u2990
  8896   003934                     u2991:
  8897   003934  EFCC  F01C         	goto	l3955
  8898   003938                     u2990:
  8899   003938                     
  8900                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8901   003938  500F               	movf	setMotorPWM@m^0,w,c
  8902   00393A  6ED9               	movwf	fsr2l,c
  8903   00393C  6ADA               	clrf	fsr2h,c
  8904   00393E  50DF               	movf	indf2,w,c
  8905   003940  6E10               	movwf	??_setMotorPWM^0,c
  8906   003942  5010               	movf	??_setMotorPWM^0,w,c
  8907   003944  6E02               	movwf	___wmul@multiplier^0,c
  8908   003946  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8909   003948  500F               	movf	setMotorPWM@m^0,w,c
  8910   00394A  6ED9               	movwf	fsr2l,c
  8911   00394C  6ADA               	clrf	fsr2h,c
  8912   00394E  0E03               	movlw	3
  8913   003950  26D9               	addwf	fsr2l,f,c
  8914   003952  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8915   003956  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8916   00395A  EC0B  F028         	call	___wmul	;wreg free
  8917   00395E  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8918   003962  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8919   003966  0E00               	movlw	0
  8920   003968  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8921   00396A  0E64               	movlw	100
  8922   00396C  6E0A               	movwf	___lwdiv@divisor^0,c
  8923   00396E  ECD9  F023         	call	___lwdiv	;wreg free
  8924   003972  500F               	movf	setMotorPWM@m^0,w,c
  8925   003974  6ED9               	movwf	fsr2l,c
  8926   003976  6ADA               	clrf	fsr2h,c
  8927   003978  0E03               	movlw	3
  8928   00397A  26D9               	addwf	fsr2l,f,c
  8929   00397C  50DF               	movf	indf2,w,c
  8930   00397E  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8931   003980  5008               	movf	?___lwdiv^0,w,c
  8932   003982  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8933   003984  6E12               	movwf	setMotorPWM@posDuty^0,c
  8934   003986                     
  8935                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8936   003986  500F               	movf	setMotorPWM@m^0,w,c
  8937   003988  6ED9               	movwf	fsr2l,c
  8938   00398A  6ADA               	clrf	fsr2h,c
  8939   00398C  0E03               	movlw	3
  8940   00398E  26D9               	addwf	fsr2l,f,c
  8941   003990  50DF               	movf	indf2,w,c
  8942   003992  6E13               	movwf	setMotorPWM@negDuty^0,c
  8943                           
  8944                           ;dc_motor.c: 72:     }
  8945   003994  EFED  F01C         	goto	l3959
  8946   003998                     l3955:
  8947                           
  8948                           ;dc_motor.c: 74:         posDuty=0;
  8949   003998  0E00               	movlw	0
  8950   00399A  6E12               	movwf	setMotorPWM@posDuty^0,c
  8951   00399C                     
  8952                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8953   00399C  500F               	movf	setMotorPWM@m^0,w,c
  8954   00399E  6ED9               	movwf	fsr2l,c
  8955   0039A0  6ADA               	clrf	fsr2h,c
  8956   0039A2  50DF               	movf	indf2,w,c
  8957   0039A4  6E10               	movwf	??_setMotorPWM^0,c
  8958   0039A6  5010               	movf	??_setMotorPWM^0,w,c
  8959   0039A8  6E02               	movwf	___wmul@multiplier^0,c
  8960   0039AA  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8961   0039AC  500F               	movf	setMotorPWM@m^0,w,c
  8962   0039AE  6ED9               	movwf	fsr2l,c
  8963   0039B0  6ADA               	clrf	fsr2h,c
  8964   0039B2  0E03               	movlw	3
  8965   0039B4  26D9               	addwf	fsr2l,f,c
  8966   0039B6  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8967   0039BA  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8968   0039BE  EC0B  F028         	call	___wmul	;wreg free
  8969   0039C2  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8970   0039C6  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8971   0039CA  0E00               	movlw	0
  8972   0039CC  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8973   0039CE  0E64               	movlw	100
  8974   0039D0  6E0A               	movwf	___lwdiv@divisor^0,c
  8975   0039D2  ECD9  F023         	call	___lwdiv	;wreg free
  8976   0039D6  5008               	movf	?___lwdiv^0,w,c
  8977   0039D8  6E13               	movwf	setMotorPWM@negDuty^0,c
  8978   0039DA                     l3959:
  8979                           
  8980                           ;dc_motor.c: 78:     if (m->direction) {
  8981   0039DA  500F               	movf	setMotorPWM@m^0,w,c
  8982   0039DC  6ED9               	movwf	fsr2l,c
  8983   0039DE  6ADA               	clrf	fsr2h,c
  8984   0039E0  0E01               	movlw	1
  8985   0039E2  26D9               	addwf	fsr2l,f,c
  8986   0039E4  50DF               	movf	indf2,w,c
  8987   0039E6  B4D8               	btfsc	status,2,c
  8988   0039E8  EFF8  F01C         	goto	u3001
  8989   0039EC  EFFA  F01C         	goto	u3000
  8990   0039F0                     u3001:
  8991   0039F0  EF1A  F01D         	goto	l3963
  8992   0039F4                     u3000:
  8993   0039F4                     
  8994                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8995   0039F4  500F               	movf	setMotorPWM@m^0,w,c
  8996   0039F6  6ED9               	movwf	fsr2l,c
  8997   0039F8  6ADA               	clrf	fsr2h,c
  8998   0039FA  0E05               	movlw	5
  8999   0039FC  26D9               	addwf	fsr2l,f,c
  9000   0039FE  CFDE F010          	movff	postinc2,??_setMotorPWM
  9001   003A02  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9002   003A06  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9003   003A0A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9004   003A0E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9005                           
  9006                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  9007   003A12  500F               	movf	setMotorPWM@m^0,w,c
  9008   003A14  6ED9               	movwf	fsr2l,c
  9009   003A16  6ADA               	clrf	fsr2h,c
  9010   003A18  0E07               	movlw	7
  9011   003A1A  26D9               	addwf	fsr2l,f,c
  9012   003A1C  CFDE F010          	movff	postinc2,??_setMotorPWM
  9013   003A20  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9014   003A24  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9015   003A28  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9016   003A2C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9017                           
  9018                           ;dc_motor.c: 81:     } else {
  9019   003A30  EF38  F01D         	goto	l399
  9020   003A34                     l3963:
  9021                           
  9022                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  9023   003A34  500F               	movf	setMotorPWM@m^0,w,c
  9024   003A36  6ED9               	movwf	fsr2l,c
  9025   003A38  6ADA               	clrf	fsr2h,c
  9026   003A3A  0E05               	movlw	5
  9027   003A3C  26D9               	addwf	fsr2l,f,c
  9028   003A3E  CFDE F010          	movff	postinc2,??_setMotorPWM
  9029   003A42  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9030   003A46  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9031   003A4A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9032   003A4E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9033                           
  9034                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  9035   003A52  500F               	movf	setMotorPWM@m^0,w,c
  9036   003A54  6ED9               	movwf	fsr2l,c
  9037   003A56  6ADA               	clrf	fsr2h,c
  9038   003A58  0E07               	movlw	7
  9039   003A5A  26D9               	addwf	fsr2l,f,c
  9040   003A5C  CFDE F010          	movff	postinc2,??_setMotorPWM
  9041   003A60  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9042   003A64  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9043   003A68  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9044   003A6C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9045   003A70                     l399:
  9046   003A70  0012               	return		;funcret
  9047   003A72                     __end_of_setMotorPWM:
  9048                           	callstack 0
  9049                           
  9050 ;; *************** function ___lwdiv *****************
  9051 ;; Defined at:
  9052 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  dividend        2    7[COMRAM] unsigned int 
  9055 ;;  divisor         2    9[COMRAM] unsigned int 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  quotient        2   11[COMRAM] unsigned int 
  9058 ;;  counter         1   13[COMRAM] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  2    7[COMRAM] unsigned int 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9069 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;Total ram usage:        7 bytes
  9073 ;; Hardware stack levels used: 1
  9074 ;; Hardware stack levels required when called: 1
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_setMotorPWM
  9079 ;;		_ADC2String
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text43
  9084   0047B2                     __ptext43:
  9085                           	callstack 0
  9086   0047B2                     ___lwdiv:
  9087                           	callstack 27
  9088   0047B2  0E00               	movlw	0
  9089   0047B4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  9090   0047B6  0E00               	movlw	0
  9091   0047B8  6E0C               	movwf	___lwdiv@quotient^0,c
  9092   0047BA  500A               	movf	___lwdiv@divisor^0,w,c
  9093   0047BC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  9094   0047BE  B4D8               	btfsc	status,2,c
  9095   0047C0  EFE4  F023         	goto	u2841
  9096   0047C4  EFE6  F023         	goto	u2840
  9097   0047C8                     u2841:
  9098   0047C8  EF0E  F024         	goto	l1340
  9099   0047CC                     u2840:
  9100   0047CC  0E01               	movlw	1
  9101   0047CE  6E0E               	movwf	___lwdiv@counter^0,c
  9102   0047D0  EFEE  F023         	goto	l3871
  9103   0047D4                     l3869:
  9104   0047D4  90D8               	bcf	status,0,c
  9105   0047D6  360A               	rlcf	___lwdiv@divisor^0,f,c
  9106   0047D8  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  9107   0047DA  2A0E               	incf	___lwdiv@counter^0,f,c
  9108   0047DC                     l3871:
  9109   0047DC  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  9110   0047DE  EFF3  F023         	goto	u2851
  9111   0047E2  EFF5  F023         	goto	u2850
  9112   0047E6                     u2851:
  9113   0047E6  EFEA  F023         	goto	l3869
  9114   0047EA                     u2850:
  9115   0047EA                     l3873:
  9116   0047EA  90D8               	bcf	status,0,c
  9117   0047EC  360C               	rlcf	___lwdiv@quotient^0,f,c
  9118   0047EE  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  9119   0047F0  500A               	movf	___lwdiv@divisor^0,w,c
  9120   0047F2  5C08               	subwf	___lwdiv@dividend^0,w,c
  9121   0047F4  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9122   0047F6  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  9123   0047F8  A0D8               	btfss	status,0,c
  9124   0047FA  EF01  F024         	goto	u2861
  9125   0047FE  EF03  F024         	goto	u2860
  9126   004802                     u2861:
  9127   004802  EF08  F024         	goto	l3881
  9128   004806                     u2860:
  9129   004806  500A               	movf	___lwdiv@divisor^0,w,c
  9130   004808  5E08               	subwf	___lwdiv@dividend^0,f,c
  9131   00480A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9132   00480C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  9133   00480E  800C               	bsf	___lwdiv@quotient^0,0,c
  9134   004810                     l3881:
  9135   004810  90D8               	bcf	status,0,c
  9136   004812  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  9137   004814  320A               	rrcf	___lwdiv@divisor^0,f,c
  9138   004816  2E0E               	decfsz	___lwdiv@counter^0,f,c
  9139   004818  EFF5  F023         	goto	l3873
  9140   00481C                     l1340:
  9141   00481C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  9142   004820  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9143   004824  0012               	return		;funcret
  9144   004826                     __end_of___lwdiv:
  9145                           	callstack 0
  9146                           
  9147 ;; *************** function _customDelayMs *****************
  9148 ;; Defined at:
  9149 ;;		line 247 in file "calibration.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  milliseconds    2    1[COMRAM] unsigned int 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  i               2    4[COMRAM] unsigned int 
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9166 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9167 ;;Total ram usage:        5 bytes
  9168 ;; Hardware stack levels used: 1
  9169 ;; Hardware stack levels required when called: 1
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_right90
  9174 ;;		_left90
  9175 ;;		_reverseStraight
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           	psect	text44
  9180   004C9E                     __ptext44:
  9181                           	callstack 0
  9182   004C9E                     _customDelayMs:
  9183                           	callstack 26
  9184   004C9E                     
  9185                           ;calibration.c: 248:     for (unsigned int i = 0; i < milliseconds; i++) {
  9186   004C9E  0E00               	movlw	0
  9187   004CA0  6E06               	movwf	(customDelayMs@i+1)^0,c
  9188   004CA2  0E00               	movlw	0
  9189   004CA4  6E05               	movwf	customDelayMs@i^0,c
  9190   004CA6  EF5F  F026         	goto	l843
  9191   004CAA                     l4115:
  9192                           
  9193                           ;calibration.c: 249:         _delay((unsigned long)((1)*(64000000/4000.0)));
  9194   004CAA  0E15               	movlw	21
  9195   004CAC  6E04               	movwf	??_customDelayMs^0,c
  9196   004CAE  0EC6               	movlw	198
  9197   004CB0                     u6037:
  9198   004CB0  2EE8               	decfsz	wreg,f,c
  9199   004CB2  D7FE               	bra	u6037
  9200   004CB4  2E04               	decfsz	??_customDelayMs^0,f,c
  9201   004CB6  D7FC               	bra	u6037
  9202   004CB8  D000               	nop2	
  9203   004CBA                     
  9204                           ;calibration.c: 250:     }
  9205   004CBA  4A05               	infsnz	customDelayMs@i^0,f,c
  9206   004CBC  2A06               	incf	(customDelayMs@i+1)^0,f,c
  9207   004CBE                     l843:
  9208   004CBE  5002               	movf	customDelayMs@milliseconds^0,w,c
  9209   004CC0  5C05               	subwf	customDelayMs@i^0,w,c
  9210   004CC2  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  9211   004CC4  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  9212   004CC6  A0D8               	btfss	status,0,c
  9213   004CC8  EF68  F026         	goto	u3151
  9214   004CCC  EF6A  F026         	goto	u3150
  9215   004CD0                     u3151:
  9216   004CD0  EF55  F026         	goto	l4115
  9217   004CD4                     u3150:
  9218   004CD4  0012               	return		;funcret
  9219   004CD6                     __end_of_customDelayMs:
  9220                           	callstack 0
  9221                           
  9222 ;; *************** function ___xxtofl *****************
  9223 ;; Defined at:
  9224 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;  sign            1    wreg     unsigned char 
  9227 ;;  val             4    1[COMRAM] long 
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  sign            1    9[COMRAM] unsigned char 
  9230 ;;  arg             4   11[COMRAM] unsigned long 
  9231 ;;  exp             1   10[COMRAM] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  4    1[COMRAM] unsigned char 
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9241 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9242 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9243 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9244 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9245 ;;Total ram usage:       14 bytes
  9246 ;; Hardware stack levels used: 1
  9247 ;; Hardware stack levels required when called: 1
  9248 ;; This function calls:
  9249 ;;		Nothing
  9250 ;; This function is called by:
  9251 ;;		_convert_rgb2hue
  9252 ;;		_main
  9253 ;;		_fullSpeedAhead
  9254 ;;		_calibration_turningR
  9255 ;;		_calibration_turningL
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text45
  9260   0031AA                     __ptext45:
  9261                           	callstack 0
  9262   0031AA                     ___xxtofl:
  9263                           	callstack 26
  9264                           
  9265                           ;incstack = 0
  9266                           ;___xxtofl@sign stored from wreg
  9267   0031AA  6E0A               	movwf	___xxtofl@sign^0,c
  9268   0031AC  500A               	movf	___xxtofl@sign^0,w,c
  9269   0031AE  B4D8               	btfsc	status,2,c
  9270   0031B0  EFDC  F018         	goto	u3821
  9271   0031B4  EFDE  F018         	goto	u3820
  9272   0031B8                     u3821:
  9273   0031B8  EF00  F019         	goto	l1504
  9274   0031BC                     u3820:
  9275   0031BC  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  9276   0031BE  EFE5  F018         	goto	u3830
  9277   0031C2  EFE3  F018         	goto	u3831
  9278   0031C6                     u3831:
  9279   0031C6  EF00  F019         	goto	l1504
  9280   0031CA                     u3830:
  9281   0031CA  C002  F006         	movff	___xxtofl@val,??___xxtofl
  9282   0031CE  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  9283   0031D2  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  9284   0031D6  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  9285   0031DA  1E06               	comf	??___xxtofl^0,f,c
  9286   0031DC  1E07               	comf	(??___xxtofl+1)^0,f,c
  9287   0031DE  1E08               	comf	(??___xxtofl+2)^0,f,c
  9288   0031E0  1E09               	comf	(??___xxtofl+3)^0,f,c
  9289   0031E2  2A06               	incf	??___xxtofl^0,f,c
  9290   0031E4  0E00               	movlw	0
  9291   0031E6  2207               	addwfc	(??___xxtofl+1)^0,f,c
  9292   0031E8  2208               	addwfc	(??___xxtofl+2)^0,f,c
  9293   0031EA  2209               	addwfc	(??___xxtofl+3)^0,f,c
  9294   0031EC  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  9295   0031F0  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  9296   0031F4  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  9297   0031F8  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  9298   0031FC  EF08  F019         	goto	l4505
  9299   003200                     l1504:
  9300   003200  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  9301   003204  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9302   003208  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9303   00320C  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9304   003210                     l4505:
  9305   003210  5002               	movf	___xxtofl@val^0,w,c
  9306   003212  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  9307   003214  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  9308   003216  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  9309   003218  A4D8               	btfss	status,2,c
  9310   00321A  EF11  F019         	goto	u3841
  9311   00321E  EF13  F019         	goto	u3840
  9312   003222                     u3841:
  9313   003222  EF1D  F019         	goto	l4511
  9314   003226                     u3840:
  9315   003226  0E00               	movlw	0
  9316   003228  6E02               	movwf	?___xxtofl^0,c
  9317   00322A  0E00               	movlw	0
  9318   00322C  6E03               	movwf	(?___xxtofl+1)^0,c
  9319   00322E  0E00               	movlw	0
  9320   003230  6E04               	movwf	(?___xxtofl+2)^0,c
  9321   003232  0E00               	movlw	0
  9322   003234  6E05               	movwf	(?___xxtofl+3)^0,c
  9323   003236  EFAE  F019         	goto	l1507
  9324   00323A                     l4511:
  9325   00323A  0E96               	movlw	150
  9326   00323C  6E0B               	movwf	___xxtofl@exp^0,c
  9327   00323E  EF27  F019         	goto	l4515
  9328   003242                     l4513:
  9329   003242  2A0B               	incf	___xxtofl@exp^0,f,c
  9330   003244  90D8               	bcf	status,0,c
  9331   003246  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  9332   003248  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  9333   00324A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  9334   00324C  320C               	rrcf	___xxtofl@arg^0,f,c
  9335   00324E                     l4515:
  9336   00324E  0E00               	movlw	0
  9337   003250  140C               	andwf	___xxtofl@arg^0,w,c
  9338   003252  6E06               	movwf	??___xxtofl^0,c
  9339   003254  0E00               	movlw	0
  9340   003256  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  9341   003258  6E07               	movwf	(??___xxtofl+1)^0,c
  9342   00325A  0E00               	movlw	0
  9343   00325C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  9344   00325E  6E08               	movwf	(??___xxtofl+2)^0,c
  9345   003260  0EFE               	movlw	254
  9346   003262  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  9347   003264  6E09               	movwf	(??___xxtofl+3)^0,c
  9348   003266  5006               	movf	??___xxtofl^0,w,c
  9349   003268  1007               	iorwf	(??___xxtofl+1)^0,w,c
  9350   00326A  1008               	iorwf	(??___xxtofl+2)^0,w,c
  9351   00326C  1009               	iorwf	(??___xxtofl+3)^0,w,c
  9352   00326E  A4D8               	btfss	status,2,c
  9353   003270  EF3C  F019         	goto	u3851
  9354   003274  EF3E  F019         	goto	u3850
  9355   003278                     u3851:
  9356   003278  EF21  F019         	goto	l4513
  9357   00327C                     u3850:
  9358   00327C  EF4C  F019         	goto	l1511
  9359   003280                     l4517:
  9360   003280  2A0B               	incf	___xxtofl@exp^0,f,c
  9361   003282  0E01               	movlw	1
  9362   003284  260C               	addwf	___xxtofl@arg^0,f,c
  9363   003286  0E00               	movlw	0
  9364   003288  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  9365   00328A  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  9366   00328C  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  9367   00328E  90D8               	bcf	status,0,c
  9368   003290  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  9369   003292  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  9370   003294  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  9371   003296  320C               	rrcf	___xxtofl@arg^0,f,c
  9372   003298                     l1511:
  9373   003298  0E00               	movlw	0
  9374   00329A  140C               	andwf	___xxtofl@arg^0,w,c
  9375   00329C  6E06               	movwf	??___xxtofl^0,c
  9376   00329E  0E00               	movlw	0
  9377   0032A0  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  9378   0032A2  6E07               	movwf	(??___xxtofl+1)^0,c
  9379   0032A4  0E00               	movlw	0
  9380   0032A6  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  9381   0032A8  6E08               	movwf	(??___xxtofl+2)^0,c
  9382   0032AA  0EFF               	movlw	255
  9383   0032AC  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  9384   0032AE  6E09               	movwf	(??___xxtofl+3)^0,c
  9385   0032B0  5006               	movf	??___xxtofl^0,w,c
  9386   0032B2  1007               	iorwf	(??___xxtofl+1)^0,w,c
  9387   0032B4  1008               	iorwf	(??___xxtofl+2)^0,w,c
  9388   0032B6  1009               	iorwf	(??___xxtofl+3)^0,w,c
  9389   0032B8  A4D8               	btfss	status,2,c
  9390   0032BA  EF61  F019         	goto	u3861
  9391   0032BE  EF63  F019         	goto	u3860
  9392   0032C2                     u3861:
  9393   0032C2  EF40  F019         	goto	l4517
  9394   0032C6                     u3860:
  9395   0032C6  EF6B  F019         	goto	l4525
  9396   0032CA                     l4523:
  9397   0032CA  060B               	decf	___xxtofl@exp^0,f,c
  9398   0032CC  90D8               	bcf	status,0,c
  9399   0032CE  360C               	rlcf	___xxtofl@arg^0,f,c
  9400   0032D0  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  9401   0032D2  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  9402   0032D4  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  9403   0032D6                     l4525:
  9404   0032D6  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  9405   0032D8  EF70  F019         	goto	u3871
  9406   0032DC  EF72  F019         	goto	u3870
  9407   0032E0                     u3871:
  9408   0032E0  EF7A  F019         	goto	l1518
  9409   0032E4                     u3870:
  9410   0032E4  0E02               	movlw	2
  9411   0032E6  600B               	cpfslt	___xxtofl@exp^0,c
  9412   0032E8  EF78  F019         	goto	u3881
  9413   0032EC  EF7A  F019         	goto	u3880
  9414   0032F0                     u3881:
  9415   0032F0  EF65  F019         	goto	l4523
  9416   0032F4                     u3880:
  9417   0032F4                     l1518:
  9418   0032F4  B00B               	btfsc	___xxtofl@exp^0,0,c
  9419   0032F6  EF7F  F019         	goto	u3891
  9420   0032FA  EF81  F019         	goto	u3890
  9421   0032FE                     u3891:
  9422   0032FE  EF82  F019         	goto	l4531
  9423   003302                     u3890:
  9424   003302  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  9425   003304                     l4531:
  9426   003304  90D8               	bcf	status,0,c
  9427   003306  320B               	rrcf	___xxtofl@exp^0,f,c
  9428   003308  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  9429   00330C  6A07               	clrf	(??___xxtofl+1)^0,c
  9430   00330E  6A08               	clrf	(??___xxtofl+2)^0,c
  9431   003310  6A09               	clrf	(??___xxtofl+3)^0,c
  9432   003312  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  9433   003316  6A08               	clrf	(??___xxtofl+2)^0,c
  9434   003318  6A07               	clrf	(??___xxtofl+1)^0,c
  9435   00331A  6A06               	clrf	??___xxtofl^0,c
  9436   00331C  5006               	movf	??___xxtofl^0,w,c
  9437   00331E  120C               	iorwf	___xxtofl@arg^0,f,c
  9438   003320  5007               	movf	(??___xxtofl+1)^0,w,c
  9439   003322  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  9440   003324  5008               	movf	(??___xxtofl+2)^0,w,c
  9441   003326  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  9442   003328  5009               	movf	(??___xxtofl+3)^0,w,c
  9443   00332A  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  9444   00332C  500A               	movf	___xxtofl@sign^0,w,c
  9445   00332E  B4D8               	btfsc	status,2,c
  9446   003330  EF9C  F019         	goto	u3901
  9447   003334  EF9E  F019         	goto	u3900
  9448   003338                     u3901:
  9449   003338  EFA6  F019         	goto	l4541
  9450   00333C                     u3900:
  9451   00333C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  9452   00333E  EFA5  F019         	goto	u3910
  9453   003342  EFA3  F019         	goto	u3911
  9454   003346                     u3911:
  9455   003346  EFA6  F019         	goto	l4541
  9456   00334A                     u3910:
  9457   00334A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  9458   00334C                     l4541:
  9459   00334C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  9460   003350  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  9461   003354  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  9462   003358  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  9463   00335C                     l1507:
  9464   00335C  0012               	return		;funcret
  9465   00335E                     __end_of___xxtofl:
  9466                           	callstack 0
  9467                           
  9468 ;; *************** function ___fltol *****************
  9469 ;; Defined at:
  9470 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;  f1              4   65[COMRAM] unsigned char 
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  exp1            1   74[COMRAM] unsigned char 
  9475 ;;  sign1           1   73[COMRAM] unsigned char 
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  4   65[COMRAM] long 
  9478 ;; Registers used:
  9479 ;;		wreg, status,2, status,0
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9487 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9488 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9489 ;;Total ram usage:       10 bytes
  9490 ;; Hardware stack levels used: 1
  9491 ;; Hardware stack levels required when called: 1
  9492 ;; This function calls:
  9493 ;;		Nothing
  9494 ;; This function is called by:
  9495 ;;		_convert_rgb2hue
  9496 ;;		_main
  9497 ;;		_fullSpeedAhead
  9498 ;;		_calibration_turningR
  9499 ;;		_calibration_turningL
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text46
  9504   003CBA                     __ptext46:
  9505                           	callstack 0
  9506   003CBA                     ___fltol:
  9507                           	callstack 26
  9508   003CBA  3444               	rlcf	(___fltol@f1+2)^0,w,c
  9509   003CBC  3445               	rlcf	(___fltol@f1+3)^0,w,c
  9510   003CBE  6E4B               	movwf	___fltol@exp1^0,c
  9511   003CC0  504B               	movf	___fltol@exp1^0,w,c
  9512   003CC2  A4D8               	btfss	status,2,c
  9513   003CC4  EF66  F01E         	goto	u3751
  9514   003CC8  EF68  F01E         	goto	u3750
  9515   003CCC                     u3751:
  9516   003CCC  EF72  F01E         	goto	l4461
  9517   003CD0                     u3750:
  9518   003CD0                     l4457:
  9519   003CD0  0E00               	movlw	0
  9520   003CD2  6E42               	movwf	?___fltol^0,c
  9521   003CD4  0E00               	movlw	0
  9522   003CD6  6E43               	movwf	(?___fltol+1)^0,c
  9523   003CD8  0E00               	movlw	0
  9524   003CDA  6E44               	movwf	(?___fltol+2)^0,c
  9525   003CDC  0E00               	movlw	0
  9526   003CDE  6E45               	movwf	(?___fltol+3)^0,c
  9527   003CE0  EFDF  F01E         	goto	l1146
  9528   003CE4                     l4461:
  9529   003CE4  C042  F046         	movff	___fltol@f1,??___fltol
  9530   003CE8  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  9531   003CEC  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  9532   003CF0  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  9533   003CF4  0E20               	movlw	32
  9534   003CF6  EF82  F01E         	goto	u3760
  9535   003CFA                     u3765:
  9536   003CFA  90D8               	bcf	status,0,c
  9537   003CFC  3249               	rrcf	(??___fltol+3)^0,f,c
  9538   003CFE  3248               	rrcf	(??___fltol+2)^0,f,c
  9539   003D00  3247               	rrcf	(??___fltol+1)^0,f,c
  9540   003D02  3246               	rrcf	??___fltol^0,f,c
  9541   003D04                     u3760:
  9542   003D04  2EE8               	decfsz	wreg,f,c
  9543   003D06  EF7D  F01E         	goto	u3765
  9544   003D0A  5046               	movf	??___fltol^0,w,c
  9545   003D0C  6E4A               	movwf	___fltol@sign1^0,c
  9546   003D0E  8E44               	bsf	(___fltol@f1+2)^0,7,c
  9547   003D10  0EFF               	movlw	255
  9548   003D12  1642               	andwf	___fltol@f1^0,f,c
  9549   003D14  0EFF               	movlw	255
  9550   003D16  1643               	andwf	(___fltol@f1+1)^0,f,c
  9551   003D18  0EFF               	movlw	255
  9552   003D1A  1644               	andwf	(___fltol@f1+2)^0,f,c
  9553   003D1C  0E00               	movlw	0
  9554   003D1E  1645               	andwf	(___fltol@f1+3)^0,f,c
  9555   003D20  0E96               	movlw	150
  9556   003D22  5E4B               	subwf	___fltol@exp1^0,f,c
  9557   003D24  BE4B               	btfsc	___fltol@exp1^0,7,c
  9558   003D26  EF99  F01E         	goto	u3770
  9559   003D2A  EF97  F01E         	goto	u3771
  9560   003D2E                     u3771:
  9561   003D2E  EFAF  F01E         	goto	l4481
  9562   003D32                     u3770:
  9563   003D32  504B               	movf	___fltol@exp1^0,w,c
  9564   003D34  0A80               	xorlw	128
  9565   003D36  0F97               	addlw	151
  9566   003D38  B0D8               	btfsc	status,0,c
  9567   003D3A  EFA1  F01E         	goto	u3781
  9568   003D3E  EFA3  F01E         	goto	u3780
  9569   003D42                     u3781:
  9570   003D42  EFA5  F01E         	goto	l4477
  9571   003D46                     u3780:
  9572   003D46  EF68  F01E         	goto	l4457
  9573   003D4A                     l4477:
  9574   003D4A  90D8               	bcf	status,0,c
  9575   003D4C  3245               	rrcf	(___fltol@f1+3)^0,f,c
  9576   003D4E  3244               	rrcf	(___fltol@f1+2)^0,f,c
  9577   003D50  3243               	rrcf	(___fltol@f1+1)^0,f,c
  9578   003D52  3242               	rrcf	___fltol@f1^0,f,c
  9579   003D54  3E4B               	incfsz	___fltol@exp1^0,f,c
  9580   003D56  EFA5  F01E         	goto	l4477
  9581   003D5A  EFC7  F01E         	goto	l4491
  9582   003D5E                     l4481:
  9583   003D5E  0E1F               	movlw	31
  9584   003D60  644B               	cpfsgt	___fltol@exp1^0,c
  9585   003D62  EFB5  F01E         	goto	u3791
  9586   003D66  EFB7  F01E         	goto	u3790
  9587   003D6A                     u3791:
  9588   003D6A  EFBF  F01E         	goto	l4489
  9589   003D6E                     u3790:
  9590   003D6E  EF68  F01E         	goto	l4457
  9591   003D72                     l4487:
  9592   003D72  90D8               	bcf	status,0,c
  9593   003D74  3642               	rlcf	___fltol@f1^0,f,c
  9594   003D76  3643               	rlcf	(___fltol@f1+1)^0,f,c
  9595   003D78  3644               	rlcf	(___fltol@f1+2)^0,f,c
  9596   003D7A  3645               	rlcf	(___fltol@f1+3)^0,f,c
  9597   003D7C  064B               	decf	___fltol@exp1^0,f,c
  9598   003D7E                     l4489:
  9599   003D7E  504B               	movf	___fltol@exp1^0,w,c
  9600   003D80  A4D8               	btfss	status,2,c
  9601   003D82  EFC5  F01E         	goto	u3801
  9602   003D86  EFC7  F01E         	goto	u3800
  9603   003D8A                     u3801:
  9604   003D8A  EFB9  F01E         	goto	l4487
  9605   003D8E                     u3800:
  9606   003D8E                     l4491:
  9607   003D8E  504A               	movf	___fltol@sign1^0,w,c
  9608   003D90  B4D8               	btfsc	status,2,c
  9609   003D92  EFCD  F01E         	goto	u3811
  9610   003D96  EFCF  F01E         	goto	u3810
  9611   003D9A                     u3811:
  9612   003D9A  EFD7  F01E         	goto	l4495
  9613   003D9E                     u3810:
  9614   003D9E  1E45               	comf	(___fltol@f1+3)^0,f,c
  9615   003DA0  1E44               	comf	(___fltol@f1+2)^0,f,c
  9616   003DA2  1E43               	comf	(___fltol@f1+1)^0,f,c
  9617   003DA4  6C42               	negf	___fltol@f1^0,c
  9618   003DA6  0E00               	movlw	0
  9619   003DA8  2243               	addwfc	(___fltol@f1+1)^0,f,c
  9620   003DAA  2244               	addwfc	(___fltol@f1+2)^0,f,c
  9621   003DAC  2245               	addwfc	(___fltol@f1+3)^0,f,c
  9622   003DAE                     l4495:
  9623   003DAE  C042  F042         	movff	___fltol@f1,?___fltol
  9624   003DB2  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  9625   003DB6  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  9626   003DBA  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  9627   003DBE                     l1146:
  9628   003DBE  0012               	return		;funcret
  9629   003DC0                     __end_of___fltol:
  9630                           	callstack 0
  9631                           
  9632 ;; *************** function ___flsub *****************
  9633 ;; Defined at:
  9634 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;  b               4   31[COMRAM] long 
  9637 ;;  a               4   35[COMRAM] long 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  4   31[COMRAM] long 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9649 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9652 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9653 ;;Total ram usage:        8 bytes
  9654 ;; Hardware stack levels used: 1
  9655 ;; Hardware stack levels required when called: 2
  9656 ;; This function calls:
  9657 ;;		___fladd
  9658 ;; This function is called by:
  9659 ;;		_convert_rgb2hue
  9660 ;;		_calibration_turningR
  9661 ;;		_calibration_turningL
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           	psect	text47
  9666   004A2A                     __ptext47:
  9667                           	callstack 0
  9668   004A2A                     ___flsub:
  9669                           	callstack 26
  9670   004A2A  0E00               	movlw	0
  9671   004A2C  1A24               	xorwf	___flsub@a^0,f,c
  9672   004A2E  0E00               	movlw	0
  9673   004A30  1A25               	xorwf	(___flsub@a+1)^0,f,c
  9674   004A32  0E00               	movlw	0
  9675   004A34  1A26               	xorwf	(___flsub@a+2)^0,f,c
  9676   004A36  0E80               	movlw	128
  9677   004A38  1A27               	xorwf	(___flsub@a+3)^0,f,c
  9678   004A3A  C020  F010         	movff	___flsub@b,___fladd@b
  9679   004A3E  C021  F011         	movff	___flsub@b+1,___fladd@b+1
  9680   004A42  C022  F012         	movff	___flsub@b+2,___fladd@b+2
  9681   004A46  C023  F013         	movff	___flsub@b+3,___fladd@b+3
  9682   004A4A  C024  F014         	movff	___flsub@a,___fladd@a
  9683   004A4E  C025  F015         	movff	___flsub@a+1,___fladd@a+1
  9684   004A52  C026  F016         	movff	___flsub@a+2,___fladd@a+2
  9685   004A56  C027  F017         	movff	___flsub@a+3,___fladd@a+3
  9686   004A5A  ECD8  F00D         	call	___fladd	;wreg free
  9687   004A5E  C010  F020         	movff	?___fladd,?___flsub
  9688   004A62  C011  F021         	movff	?___fladd+1,?___flsub+1
  9689   004A66  C012  F022         	movff	?___fladd+2,?___flsub+2
  9690   004A6A  C013  F023         	movff	?___fladd+3,?___flsub+3
  9691   004A6E  0012               	return		;funcret
  9692   004A70                     __end_of___flsub:
  9693                           	callstack 0
  9694                           
  9695 ;; *************** function ___fladd *****************
  9696 ;; Defined at:
  9697 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;  b               4   15[COMRAM] long 
  9700 ;;  a               4   19[COMRAM] long 
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;  grs             1   30[COMRAM] unsigned char 
  9703 ;;  bexp            1   29[COMRAM] unsigned char 
  9704 ;;  aexp            1   28[COMRAM] unsigned char 
  9705 ;;  signs           1   27[COMRAM] unsigned char 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  4   15[COMRAM] unsigned char 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9715 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9716 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9717 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9718 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9719 ;;Total ram usage:       16 bytes
  9720 ;; Hardware stack levels used: 1
  9721 ;; Hardware stack levels required when called: 1
  9722 ;; This function calls:
  9723 ;;		Nothing
  9724 ;; This function is called by:
  9725 ;;		_convert_rgb2hue
  9726 ;;		_calibration_turningR
  9727 ;;		_calibration_turningL
  9728 ;;		___flsub
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text48
  9733   001BB0                     __ptext48:
  9734                           	callstack 0
  9735   001BB0                     ___fladd:
  9736                           	callstack 26
  9737   001BB0  5013               	movf	(___fladd@b+3)^0,w,c
  9738   001BB2  0B80               	andlw	128
  9739   001BB4  6E1C               	movwf	___fladd@signs^0,c
  9740   001BB6  5013               	movf	(___fladd@b+3)^0,w,c
  9741   001BB8  2413               	addwf	(___fladd@b+3)^0,w,c
  9742   001BBA  6E1E               	movwf	___fladd@bexp^0,c
  9743   001BBC  AE12               	btfss	(___fladd@b+2)^0,7,c
  9744   001BBE  EFE3  F00D         	goto	u3171
  9745   001BC2  EFE5  F00D         	goto	u3170
  9746   001BC6                     u3171:
  9747   001BC6  EFE6  F00D         	goto	l4129
  9748   001BCA                     u3170:
  9749   001BCA  801E               	bsf	___fladd@bexp^0,0,c
  9750   001BCC                     l4129:
  9751   001BCC  501E               	movf	___fladd@bexp^0,w,c
  9752   001BCE  B4D8               	btfsc	status,2,c
  9753   001BD0  EFEC  F00D         	goto	u3181
  9754   001BD4  EFEE  F00D         	goto	u3180
  9755   001BD8                     u3181:
  9756   001BD8  EF03  F00E         	goto	l4139
  9757   001BDC                     u3180:
  9758   001BDC  281E               	incf	___fladd@bexp^0,w,c
  9759   001BDE  A4D8               	btfss	status,2,c
  9760   001BE0  EFF4  F00D         	goto	u3191
  9761   001BE4  EFF6  F00D         	goto	u3190
  9762   001BE8                     u3191:
  9763   001BE8  EFFE  F00D         	goto	l4135
  9764   001BEC                     u3190:
  9765   001BEC  0E00               	movlw	0
  9766   001BEE  6E10               	movwf	___fladd@b^0,c
  9767   001BF0  0E00               	movlw	0
  9768   001BF2  6E11               	movwf	(___fladd@b+1)^0,c
  9769   001BF4  0E00               	movlw	0
  9770   001BF6  6E12               	movwf	(___fladd@b+2)^0,c
  9771   001BF8  0E00               	movlw	0
  9772   001BFA  6E13               	movwf	(___fladd@b+3)^0,c
  9773   001BFC                     l4135:
  9774   001BFC  8E12               	bsf	(___fladd@b+2)^0,7,c
  9775   001BFE  0E00               	movlw	0
  9776   001C00  6E13               	movwf	(___fladd@b+3)^0,c
  9777   001C02  EF0B  F00E         	goto	l4141
  9778   001C06                     l4139:
  9779   001C06  0E00               	movlw	0
  9780   001C08  6E10               	movwf	___fladd@b^0,c
  9781   001C0A  0E00               	movlw	0
  9782   001C0C  6E11               	movwf	(___fladd@b+1)^0,c
  9783   001C0E  0E00               	movlw	0
  9784   001C10  6E12               	movwf	(___fladd@b+2)^0,c
  9785   001C12  0E00               	movlw	0
  9786   001C14  6E13               	movwf	(___fladd@b+3)^0,c
  9787   001C16                     l4141:
  9788   001C16  5017               	movf	(___fladd@a+3)^0,w,c
  9789   001C18  0B80               	andlw	128
  9790   001C1A  6E1D               	movwf	___fladd@aexp^0,c
  9791   001C1C  501C               	movf	___fladd@signs^0,w,c
  9792   001C1E  181D               	xorwf	___fladd@aexp^0,w,c
  9793   001C20  B4D8               	btfsc	status,2,c
  9794   001C22  EF15  F00E         	goto	u3201
  9795   001C26  EF17  F00E         	goto	u3200
  9796   001C2A                     u3201:
  9797   001C2A  EF18  F00E         	goto	l4147
  9798   001C2E                     u3200:
  9799   001C2E  8C1C               	bsf	___fladd@signs^0,6,c
  9800   001C30                     l4147:
  9801   001C30  5017               	movf	(___fladd@a+3)^0,w,c
  9802   001C32  2417               	addwf	(___fladd@a+3)^0,w,c
  9803   001C34  6E1D               	movwf	___fladd@aexp^0,c
  9804   001C36  AE16               	btfss	(___fladd@a+2)^0,7,c
  9805   001C38  EF20  F00E         	goto	u3211
  9806   001C3C  EF22  F00E         	goto	u3210
  9807   001C40                     u3211:
  9808   001C40  EF23  F00E         	goto	l4153
  9809   001C44                     u3210:
  9810   001C44  801D               	bsf	___fladd@aexp^0,0,c
  9811   001C46                     l4153:
  9812   001C46  501D               	movf	___fladd@aexp^0,w,c
  9813   001C48  B4D8               	btfsc	status,2,c
  9814   001C4A  EF29  F00E         	goto	u3221
  9815   001C4E  EF2B  F00E         	goto	u3220
  9816   001C52                     u3221:
  9817   001C52  EF40  F00E         	goto	l4163
  9818   001C56                     u3220:
  9819   001C56  281D               	incf	___fladd@aexp^0,w,c
  9820   001C58  A4D8               	btfss	status,2,c
  9821   001C5A  EF31  F00E         	goto	u3231
  9822   001C5E  EF33  F00E         	goto	u3230
  9823   001C62                     u3231:
  9824   001C62  EF3B  F00E         	goto	l4159
  9825   001C66                     u3230:
  9826   001C66  0E00               	movlw	0
  9827   001C68  6E14               	movwf	___fladd@a^0,c
  9828   001C6A  0E00               	movlw	0
  9829   001C6C  6E15               	movwf	(___fladd@a+1)^0,c
  9830   001C6E  0E00               	movlw	0
  9831   001C70  6E16               	movwf	(___fladd@a+2)^0,c
  9832   001C72  0E00               	movlw	0
  9833   001C74  6E17               	movwf	(___fladd@a+3)^0,c
  9834   001C76                     l4159:
  9835   001C76  8E16               	bsf	(___fladd@a+2)^0,7,c
  9836   001C78  0E00               	movlw	0
  9837   001C7A  6E17               	movwf	(___fladd@a+3)^0,c
  9838   001C7C  EF48  F00E         	goto	l4165
  9839   001C80                     l4163:
  9840   001C80  0E00               	movlw	0
  9841   001C82  6E14               	movwf	___fladd@a^0,c
  9842   001C84  0E00               	movlw	0
  9843   001C86  6E15               	movwf	(___fladd@a+1)^0,c
  9844   001C88  0E00               	movlw	0
  9845   001C8A  6E16               	movwf	(___fladd@a+2)^0,c
  9846   001C8C  0E00               	movlw	0
  9847   001C8E  6E17               	movwf	(___fladd@a+3)^0,c
  9848   001C90                     l4165:
  9849   001C90  501E               	movf	___fladd@bexp^0,w,c
  9850   001C92  5C1D               	subwf	___fladd@aexp^0,w,c
  9851   001C94  B0D8               	btfsc	status,0,c
  9852   001C96  EF4F  F00E         	goto	u3241
  9853   001C9A  EF51  F00E         	goto	u3240
  9854   001C9E                     u3241:
  9855   001C9E  EF78  F00E         	goto	l4201
  9856   001CA2                     u3240:
  9857   001CA2  AC1C               	btfss	___fladd@signs^0,6,c
  9858   001CA4  EF56  F00E         	goto	u3251
  9859   001CA8  EF58  F00E         	goto	u3250
  9860   001CAC                     u3251:
  9861   001CAC  EF5A  F00E         	goto	l4171
  9862   001CB0                     u3250:
  9863   001CB0  0E80               	movlw	128
  9864   001CB2  1A1C               	xorwf	___fladd@signs^0,f,c
  9865   001CB4                     l4171:
  9866   001CB4  C01E  F01F         	movff	___fladd@bexp,___fladd@grs
  9867   001CB8  C01D  F01E         	movff	___fladd@aexp,___fladd@bexp
  9868   001CBC  C01F  F01D         	movff	___fladd@grs,___fladd@aexp
  9869   001CC0  C010  F01F         	movff	___fladd@b,___fladd@grs
  9870   001CC4  C014  F010         	movff	___fladd@a,___fladd@b
  9871   001CC8  C01F  F014         	movff	___fladd@grs,___fladd@a
  9872   001CCC  C011  F01F         	movff	___fladd@b+1,___fladd@grs
  9873   001CD0  C015  F011         	movff	___fladd@a+1,___fladd@b+1
  9874   001CD4  C01F  F015         	movff	___fladd@grs,___fladd@a+1
  9875   001CD8  C012  F01F         	movff	___fladd@b+2,___fladd@grs
  9876   001CDC  C016  F012         	movff	___fladd@a+2,___fladd@b+2
  9877   001CE0  C01F  F016         	movff	___fladd@grs,___fladd@a+2
  9878   001CE4  C013  F01F         	movff	___fladd@b+3,___fladd@grs
  9879   001CE8  C017  F013         	movff	___fladd@a+3,___fladd@b+3
  9880   001CEC  C01F  F017         	movff	___fladd@grs,___fladd@a+3
  9881   001CF0                     l4201:
  9882   001CF0  0E00               	movlw	0
  9883   001CF2  6E1F               	movwf	___fladd@grs^0,c
  9884   001CF4  501E               	movf	___fladd@bexp^0,w,c
  9885   001CF6  C01D  F018         	movff	___fladd@aexp,??___fladd
  9886   001CFA  6A19               	clrf	(??___fladd+1)^0,c
  9887   001CFC  5E18               	subwf	??___fladd^0,f,c
  9888   001CFE  0E00               	movlw	0
  9889   001D00  5A19               	subwfb	(??___fladd+1)^0,f,c
  9890   001D02  BE19               	btfsc	(??___fladd+1)^0,7,c
  9891   001D04  EF8D  F00E         	goto	u3261
  9892   001D08  5019               	movf	(??___fladd+1)^0,w,c
  9893   001D0A  E109               	bnz	u3260
  9894   001D0C  0E1A               	movlw	26
  9895   001D0E  5C18               	subwf	??___fladd^0,w,c
  9896   001D10  A0D8               	btfss	status,0,c
  9897   001D12  EF8D  F00E         	goto	u3261
  9898   001D16  EF8F  F00E         	goto	u3260
  9899   001D1A                     u3261:
  9900   001D1A  EFC6  F00E         	goto	l1378
  9901   001D1E                     u3260:
  9902   001D1E  5010               	movf	___fladd@b^0,w,c
  9903   001D20  1011               	iorwf	(___fladd@b+1)^0,w,c
  9904   001D22  1012               	iorwf	(___fladd@b+2)^0,w,c
  9905   001D24  1013               	iorwf	(___fladd@b+3)^0,w,c
  9906   001D26  A4D8               	btfss	status,2,c
  9907   001D28  EF98  F00E         	goto	u3271
  9908   001D2C  EF9B  F00E         	goto	u3270
  9909   001D30                     u3271:
  9910   001D30  0E01               	movlw	1
  9911   001D32  EF9C  F00E         	goto	u3280
  9912   001D36                     u3270:
  9913   001D36  0E00               	movlw	0
  9914   001D38                     u3280:
  9915   001D38  6E1F               	movwf	___fladd@grs^0,c
  9916   001D3A  0E00               	movlw	0
  9917   001D3C  6E10               	movwf	___fladd@b^0,c
  9918   001D3E  0E00               	movlw	0
  9919   001D40  6E11               	movwf	(___fladd@b+1)^0,c
  9920   001D42  0E00               	movlw	0
  9921   001D44  6E12               	movwf	(___fladd@b+2)^0,c
  9922   001D46  0E00               	movlw	0
  9923   001D48  6E13               	movwf	(___fladd@b+3)^0,c
  9924   001D4A  C01D  F01E         	movff	___fladd@aexp,___fladd@bexp
  9925   001D4E  EFCF  F00E         	goto	l1377
  9926   001D52                     l1379:
  9927   001D52  A01F               	btfss	___fladd@grs^0,0,c
  9928   001D54  EFAE  F00E         	goto	u3291
  9929   001D58  EFB0  F00E         	goto	u3290
  9930   001D5C                     u3291:
  9931   001D5C  EFB6  F00E         	goto	l4213
  9932   001D60                     u3290:
  9933   001D60  90D8               	bcf	status,0,c
  9934   001D62  301F               	rrcf	___fladd@grs^0,w,c
  9935   001D64  0901               	iorlw	1
  9936   001D66  6E1F               	movwf	___fladd@grs^0,c
  9937   001D68  EFB8  F00E         	goto	l4215
  9938   001D6C                     l4213:
  9939   001D6C  90D8               	bcf	status,0,c
  9940   001D6E  321F               	rrcf	___fladd@grs^0,f,c
  9941   001D70                     l4215:
  9942   001D70  A010               	btfss	___fladd@b^0,0,c
  9943   001D72  EFBD  F00E         	goto	u3301
  9944   001D76  EFBF  F00E         	goto	u3300
  9945   001D7A                     u3301:
  9946   001D7A  EFC0  F00E         	goto	l4219
  9947   001D7E                     u3300:
  9948   001D7E  8E1F               	bsf	___fladd@grs^0,7,c
  9949   001D80                     l4219:
  9950   001D80  3413               	rlcf	(___fladd@b+3)^0,w,c
  9951   001D82  3213               	rrcf	(___fladd@b+3)^0,f,c
  9952   001D84  3212               	rrcf	(___fladd@b+2)^0,f,c
  9953   001D86  3211               	rrcf	(___fladd@b+1)^0,f,c
  9954   001D88  3210               	rrcf	___fladd@b^0,f,c
  9955   001D8A  2A1E               	incf	___fladd@bexp^0,f,c
  9956   001D8C                     l1378:
  9957   001D8C  501D               	movf	___fladd@aexp^0,w,c
  9958   001D8E  5C1E               	subwf	___fladd@bexp^0,w,c
  9959   001D90  A0D8               	btfss	status,0,c
  9960   001D92  EFCD  F00E         	goto	u3311
  9961   001D96  EFCF  F00E         	goto	u3310
  9962   001D9A                     u3311:
  9963   001D9A  EFA9  F00E         	goto	l1379
  9964   001D9E                     u3310:
  9965   001D9E                     l1377:
  9966   001D9E  BC1C               	btfsc	___fladd@signs^0,6,c
  9967   001DA0  EFD4  F00E         	goto	u3321
  9968   001DA4  EFD6  F00E         	goto	u3320
  9969   001DA8                     u3321:
  9970   001DA8  EF16  F00F         	goto	l4247
  9971   001DAC                     u3320:
  9972   001DAC  501E               	movf	___fladd@bexp^0,w,c
  9973   001DAE  A4D8               	btfss	status,2,c
  9974   001DB0  EFDC  F00E         	goto	u3331
  9975   001DB4  EFDE  F00E         	goto	u3330
  9976   001DB8                     u3331:
  9977   001DB8  EFE8  F00E         	goto	l4229
  9978   001DBC                     u3330:
  9979   001DBC  0E00               	movlw	0
  9980   001DBE  6E10               	movwf	?___fladd^0,c
  9981   001DC0  0E00               	movlw	0
  9982   001DC2  6E11               	movwf	(?___fladd+1)^0,c
  9983   001DC4  0E00               	movlw	0
  9984   001DC6  6E12               	movwf	(?___fladd+2)^0,c
  9985   001DC8  0E00               	movlw	0
  9986   001DCA  6E13               	movwf	(?___fladd+3)^0,c
  9987   001DCC  EF37  F010         	goto	l1386
  9988   001DD0                     l4229:
  9989   001DD0  5014               	movf	___fladd@a^0,w,c
  9990   001DD2  2610               	addwf	___fladd@b^0,f,c
  9991   001DD4  5015               	movf	(___fladd@a+1)^0,w,c
  9992   001DD6  2211               	addwfc	(___fladd@b+1)^0,f,c
  9993   001DD8  5016               	movf	(___fladd@a+2)^0,w,c
  9994   001DDA  2212               	addwfc	(___fladd@b+2)^0,f,c
  9995   001DDC  5017               	movf	(___fladd@a+3)^0,w,c
  9996   001DDE  2213               	addwfc	(___fladd@b+3)^0,f,c
  9997   001DE0  A013               	btfss	(___fladd@b+3)^0,0,c
  9998   001DE2  EFF5  F00E         	goto	u3341
  9999   001DE6  EFF7  F00E         	goto	u3340
 10000   001DEA                     u3341:
 10001   001DEA  EFA3  F00F         	goto	l4283
 10002   001DEE                     u3340:
 10003   001DEE  A01F               	btfss	___fladd@grs^0,0,c
 10004   001DF0  EFFC  F00E         	goto	u3351
 10005   001DF4  EFFE  F00E         	goto	u3350
 10006   001DF8                     u3351:
 10007   001DF8  EF04  F00F         	goto	l4237
 10008   001DFC                     u3350:
 10009   001DFC  90D8               	bcf	status,0,c
 10010   001DFE  301F               	rrcf	___fladd@grs^0,w,c
 10011   001E00  0901               	iorlw	1
 10012   001E02  6E1F               	movwf	___fladd@grs^0,c
 10013   001E04  EF06  F00F         	goto	l4239
 10014   001E08                     l4237:
 10015   001E08  90D8               	bcf	status,0,c
 10016   001E0A  321F               	rrcf	___fladd@grs^0,f,c
 10017   001E0C                     l4239:
 10018   001E0C  A010               	btfss	___fladd@b^0,0,c
 10019   001E0E  EF0B  F00F         	goto	u3361
 10020   001E12  EF0D  F00F         	goto	u3360
 10021   001E16                     u3361:
 10022   001E16  EF0E  F00F         	goto	l4243
 10023   001E1A                     u3360:
 10024   001E1A  8E1F               	bsf	___fladd@grs^0,7,c
 10025   001E1C                     l4243:
 10026   001E1C  3413               	rlcf	(___fladd@b+3)^0,w,c
 10027   001E1E  3213               	rrcf	(___fladd@b+3)^0,f,c
 10028   001E20  3212               	rrcf	(___fladd@b+2)^0,f,c
 10029   001E22  3211               	rrcf	(___fladd@b+1)^0,f,c
 10030   001E24  3210               	rrcf	___fladd@b^0,f,c
 10031   001E26  2A1E               	incf	___fladd@bexp^0,f,c
 10032   001E28  EFA3  F00F         	goto	l4283
 10033   001E2C                     l4247:
 10034   001E2C  5014               	movf	___fladd@a^0,w,c
 10035   001E2E  5C10               	subwf	___fladd@b^0,w,c
 10036   001E30  5015               	movf	(___fladd@a+1)^0,w,c
 10037   001E32  5811               	subwfb	(___fladd@b+1)^0,w,c
 10038   001E34  5016               	movf	(___fladd@a+2)^0,w,c
 10039   001E36  5812               	subwfb	(___fladd@b+2)^0,w,c
 10040   001E38  5013               	movf	(___fladd@b+3)^0,w,c
 10041   001E3A  0A80               	xorlw	128
 10042   001E3C  6E18               	movwf	??___fladd^0,c
 10043   001E3E  5017               	movf	(___fladd@a+3)^0,w,c
 10044   001E40  0A80               	xorlw	128
 10045   001E42  5818               	subwfb	??___fladd^0,w,c
 10046   001E44  B0D8               	btfsc	status,0,c
 10047   001E46  EF27  F00F         	goto	u3371
 10048   001E4A  EF29  F00F         	goto	u3370
 10049   001E4E                     u3371:
 10050   001E4E  EF54  F00F         	goto	l4257
 10051   001E52                     u3370:
 10052   001E52  5010               	movf	___fladd@b^0,w,c
 10053   001E54  5C14               	subwf	___fladd@a^0,w,c
 10054   001E56  6E18               	movwf	??___fladd^0,c
 10055   001E58  5011               	movf	(___fladd@b+1)^0,w,c
 10056   001E5A  5815               	subwfb	(___fladd@a+1)^0,w,c
 10057   001E5C  6E19               	movwf	(??___fladd+1)^0,c
 10058   001E5E  5012               	movf	(___fladd@b+2)^0,w,c
 10059   001E60  5816               	subwfb	(___fladd@a+2)^0,w,c
 10060   001E62  6E1A               	movwf	(??___fladd+2)^0,c
 10061   001E64  5013               	movf	(___fladd@b+3)^0,w,c
 10062   001E66  5817               	subwfb	(___fladd@a+3)^0,w,c
 10063   001E68  6E1B               	movwf	(??___fladd+3)^0,c
 10064   001E6A  0EFF               	movlw	255
 10065   001E6C  2418               	addwf	??___fladd^0,w,c
 10066   001E6E  6E10               	movwf	___fladd@b^0,c
 10067   001E70  0EFF               	movlw	255
 10068   001E72  2019               	addwfc	(??___fladd+1)^0,w,c
 10069   001E74  6E11               	movwf	(___fladd@b+1)^0,c
 10070   001E76  0EFF               	movlw	255
 10071   001E78  201A               	addwfc	(??___fladd+2)^0,w,c
 10072   001E7A  6E12               	movwf	(___fladd@b+2)^0,c
 10073   001E7C  0EFF               	movlw	255
 10074   001E7E  201B               	addwfc	(??___fladd+3)^0,w,c
 10075   001E80  6E13               	movwf	(___fladd@b+3)^0,c
 10076   001E82  0E80               	movlw	128
 10077   001E84  1A1C               	xorwf	___fladd@signs^0,f,c
 10078   001E86  6C1F               	negf	___fladd@grs^0,c
 10079   001E88  501F               	movf	___fladd@grs^0,w,c
 10080   001E8A  A4D8               	btfss	status,2,c
 10081   001E8C  EF4A  F00F         	goto	u3381
 10082   001E90  EF4C  F00F         	goto	u3380
 10083   001E94                     u3381:
 10084   001E94  EF5C  F00F         	goto	l1394
 10085   001E98                     u3380:
 10086   001E98  0E01               	movlw	1
 10087   001E9A  2610               	addwf	___fladd@b^0,f,c
 10088   001E9C  0E00               	movlw	0
 10089   001E9E  2211               	addwfc	(___fladd@b+1)^0,f,c
 10090   001EA0  2212               	addwfc	(___fladd@b+2)^0,f,c
 10091   001EA2  2213               	addwfc	(___fladd@b+3)^0,f,c
 10092   001EA4  EF5C  F00F         	goto	l1394
 10093   001EA8                     l4257:
 10094   001EA8  5014               	movf	___fladd@a^0,w,c
 10095   001EAA  5E10               	subwf	___fladd@b^0,f,c
 10096   001EAC  5015               	movf	(___fladd@a+1)^0,w,c
 10097   001EAE  5A11               	subwfb	(___fladd@b+1)^0,f,c
 10098   001EB0  5016               	movf	(___fladd@a+2)^0,w,c
 10099   001EB2  5A12               	subwfb	(___fladd@b+2)^0,f,c
 10100   001EB4  5017               	movf	(___fladd@a+3)^0,w,c
 10101   001EB6  5A13               	subwfb	(___fladd@b+3)^0,f,c
 10102   001EB8                     l1394:
 10103   001EB8  5010               	movf	___fladd@b^0,w,c
 10104   001EBA  1011               	iorwf	(___fladd@b+1)^0,w,c
 10105   001EBC  1012               	iorwf	(___fladd@b+2)^0,w,c
 10106   001EBE  1013               	iorwf	(___fladd@b+3)^0,w,c
 10107   001EC0  A4D8               	btfss	status,2,c
 10108   001EC2  EF65  F00F         	goto	u3391
 10109   001EC6  EF67  F00F         	goto	u3390
 10110   001ECA                     u3391:
 10111   001ECA  EF9C  F00F         	goto	l4281
 10112   001ECE                     u3390:
 10113   001ECE  501F               	movf	___fladd@grs^0,w,c
 10114   001ED0  A4D8               	btfss	status,2,c
 10115   001ED2  EF6D  F00F         	goto	u3401
 10116   001ED6  EF6F  F00F         	goto	u3400
 10117   001EDA                     u3401:
 10118   001EDA  EF9C  F00F         	goto	l4281
 10119   001EDE                     u3400:
 10120   001EDE  0E00               	movlw	0
 10121   001EE0  6E10               	movwf	?___fladd^0,c
 10122   001EE2  0E00               	movlw	0
 10123   001EE4  6E11               	movwf	(?___fladd+1)^0,c
 10124   001EE6  0E00               	movlw	0
 10125   001EE8  6E12               	movwf	(?___fladd+2)^0,c
 10126   001EEA  0E00               	movlw	0
 10127   001EEC  6E13               	movwf	(?___fladd+3)^0,c
 10128   001EEE  EF37  F010         	goto	l1386
 10129   001EF2                     l4265:
 10130   001EF2  90D8               	bcf	status,0,c
 10131   001EF4  3610               	rlcf	___fladd@b^0,f,c
 10132   001EF6  3611               	rlcf	(___fladd@b+1)^0,f,c
 10133   001EF8  3612               	rlcf	(___fladd@b+2)^0,f,c
 10134   001EFA  3613               	rlcf	(___fladd@b+3)^0,f,c
 10135   001EFC  AE1F               	btfss	___fladd@grs^0,7,c
 10136   001EFE  EF83  F00F         	goto	u3411
 10137   001F02  EF85  F00F         	goto	u3410
 10138   001F06                     u3411:
 10139   001F06  EF86  F00F         	goto	l4271
 10140   001F0A                     u3410:
 10141   001F0A  8010               	bsf	___fladd@b^0,0,c
 10142   001F0C                     l4271:
 10143   001F0C  A01F               	btfss	___fladd@grs^0,0,c
 10144   001F0E  EF8B  F00F         	goto	u3421
 10145   001F12  EF8D  F00F         	goto	u3420
 10146   001F16                     u3421:
 10147   001F16  EF91  F00F         	goto	l4275
 10148   001F1A                     u3420:
 10149   001F1A  80D8               	bsf	status,0,c
 10150   001F1C  361F               	rlcf	___fladd@grs^0,f,c
 10151   001F1E  EF93  F00F         	goto	l4277
 10152   001F22                     l4275:
 10153   001F22  90D8               	bcf	status,0,c
 10154   001F24  361F               	rlcf	___fladd@grs^0,f,c
 10155   001F26                     l4277:
 10156   001F26  501E               	movf	___fladd@bexp^0,w,c
 10157   001F28  B4D8               	btfsc	status,2,c
 10158   001F2A  EF99  F00F         	goto	u3431
 10159   001F2E  EF9B  F00F         	goto	u3430
 10160   001F32                     u3431:
 10161   001F32  EF9C  F00F         	goto	l4281
 10162   001F36                     u3430:
 10163   001F36  061E               	decf	___fladd@bexp^0,f,c
 10164   001F38                     l4281:
 10165   001F38  AE12               	btfss	(___fladd@b+2)^0,7,c
 10166   001F3A  EFA1  F00F         	goto	u3441
 10167   001F3E  EFA3  F00F         	goto	u3440
 10168   001F42                     u3441:
 10169   001F42  EF79  F00F         	goto	l4265
 10170   001F46                     u3440:
 10171   001F46                     l4283:
 10172   001F46  0E00               	movlw	0
 10173   001F48  6E1D               	movwf	___fladd@aexp^0,c
 10174   001F4A  AE1F               	btfss	___fladd@grs^0,7,c
 10175   001F4C  EFAA  F00F         	goto	u3451
 10176   001F50  EFAC  F00F         	goto	u3450
 10177   001F54                     u3451:
 10178   001F54  EFC4  F00F         	goto	l1403
 10179   001F58                     u3450:
 10180   001F58  C01F  F018         	movff	___fladd@grs,??___fladd
 10181   001F5C  0E7F               	movlw	127
 10182   001F5E  1618               	andwf	??___fladd^0,f,c
 10183   001F60  B4D8               	btfsc	status,2,c
 10184   001F62  EFB5  F00F         	goto	u3461
 10185   001F66  EFB7  F00F         	goto	u3460
 10186   001F6A                     u3461:
 10187   001F6A  EFBB  F00F         	goto	l1404
 10188   001F6E                     u3460:
 10189   001F6E                     l4289:
 10190   001F6E  0E01               	movlw	1
 10191   001F70  6E1D               	movwf	___fladd@aexp^0,c
 10192   001F72  EFC4  F00F         	goto	l1403
 10193   001F76                     l1404:
 10194   001F76  A010               	btfss	___fladd@b^0,0,c
 10195   001F78  EFC0  F00F         	goto	u3471
 10196   001F7C  EFC2  F00F         	goto	u3470
 10197   001F80                     u3471:
 10198   001F80  EFC4  F00F         	goto	l1403
 10199   001F84                     u3470:
 10200   001F84  EFB7  F00F         	goto	l4289
 10201   001F88                     l1403:
 10202   001F88  501D               	movf	___fladd@aexp^0,w,c
 10203   001F8A  B4D8               	btfsc	status,2,c
 10204   001F8C  EFCA  F00F         	goto	u3481
 10205   001F90  EFCC  F00F         	goto	u3480
 10206   001F94                     u3481:
 10207   001F94  EFF7  F00F         	goto	l4301
 10208   001F98                     u3480:
 10209   001F98  0E01               	movlw	1
 10210   001F9A  2610               	addwf	___fladd@b^0,f,c
 10211   001F9C  0E00               	movlw	0
 10212   001F9E  2211               	addwfc	(___fladd@b+1)^0,f,c
 10213   001FA0  2212               	addwfc	(___fladd@b+2)^0,f,c
 10214   001FA2  2213               	addwfc	(___fladd@b+3)^0,f,c
 10215   001FA4  A013               	btfss	(___fladd@b+3)^0,0,c
 10216   001FA6  EFD7  F00F         	goto	u3491
 10217   001FAA  EFD9  F00F         	goto	u3490
 10218   001FAE                     u3491:
 10219   001FAE  EFF7  F00F         	goto	l4301
 10220   001FB2                     u3490:
 10221   001FB2  C010  F018         	movff	___fladd@b,??___fladd
 10222   001FB6  C011  F019         	movff	___fladd@b+1,??___fladd+1
 10223   001FBA  C012  F01A         	movff	___fladd@b+2,??___fladd+2
 10224   001FBE  C013  F01B         	movff	___fladd@b+3,??___fladd+3
 10225   001FC2  341B               	rlcf	(??___fladd+3)^0,w,c
 10226   001FC4  321B               	rrcf	(??___fladd+3)^0,f,c
 10227   001FC6  321A               	rrcf	(??___fladd+2)^0,f,c
 10228   001FC8  3219               	rrcf	(??___fladd+1)^0,f,c
 10229   001FCA  3218               	rrcf	??___fladd^0,f,c
 10230   001FCC  C018  F010         	movff	??___fladd,___fladd@b
 10231   001FD0  C019  F011         	movff	??___fladd+1,___fladd@b+1
 10232   001FD4  C01A  F012         	movff	??___fladd+2,___fladd@b+2
 10233   001FD8  C01B  F013         	movff	??___fladd+3,___fladd@b+3
 10234   001FDC  281E               	incf	___fladd@bexp^0,w,c
 10235   001FDE  B4D8               	btfsc	status,2,c
 10236   001FE0  EFF4  F00F         	goto	u3501
 10237   001FE4  EFF6  F00F         	goto	u3500
 10238   001FE8                     u3501:
 10239   001FE8  EFF7  F00F         	goto	l4301
 10240   001FEC                     u3500:
 10241   001FEC  2A1E               	incf	___fladd@bexp^0,f,c
 10242   001FEE                     l4301:
 10243   001FEE  281E               	incf	___fladd@bexp^0,w,c
 10244   001FF0  B4D8               	btfsc	status,2,c
 10245   001FF2  EFFD  F00F         	goto	u3511
 10246   001FF6  EFFF  F00F         	goto	u3510
 10247   001FFA                     u3511:
 10248   001FFA  EF07  F010         	goto	l4305
 10249   001FFE                     u3510:
 10250   001FFE  501E               	movf	___fladd@bexp^0,w,c
 10251   002000  A4D8               	btfss	status,2,c
 10252   002002  EF05  F010         	goto	u3521
 10253   002006  EF07  F010         	goto	u3520
 10254   00200A                     u3521:
 10255   00200A  EF19  F010         	goto	l4309
 10256   00200E                     u3520:
 10257   00200E                     l4305:
 10258   00200E  0E00               	movlw	0
 10259   002010  6E10               	movwf	___fladd@b^0,c
 10260   002012  0E00               	movlw	0
 10261   002014  6E11               	movwf	(___fladd@b+1)^0,c
 10262   002016  0E00               	movlw	0
 10263   002018  6E12               	movwf	(___fladd@b+2)^0,c
 10264   00201A  0E00               	movlw	0
 10265   00201C  6E13               	movwf	(___fladd@b+3)^0,c
 10266   00201E  501E               	movf	___fladd@bexp^0,w,c
 10267   002020  A4D8               	btfss	status,2,c
 10268   002022  EF15  F010         	goto	u3531
 10269   002026  EF17  F010         	goto	u3530
 10270   00202A                     u3531:
 10271   00202A  EF19  F010         	goto	l4309
 10272   00202E                     u3530:
 10273   00202E  0E00               	movlw	0
 10274   002030  6E1C               	movwf	___fladd@signs^0,c
 10275   002032                     l4309:
 10276   002032  A01E               	btfss	___fladd@bexp^0,0,c
 10277   002034  EF1E  F010         	goto	u3541
 10278   002038  EF20  F010         	goto	u3540
 10279   00203C                     u3541:
 10280   00203C  EF23  F010         	goto	l4313
 10281   002040                     u3540:
 10282   002040  8E12               	bsf	(___fladd@b+2)^0,7,c
 10283   002042  EF24  F010         	goto	l4315
 10284   002046                     l4313:
 10285   002046  9E12               	bcf	(___fladd@b+2)^0,7,c
 10286   002048                     l4315:
 10287   002048  90D8               	bcf	status,0,c
 10288   00204A  301E               	rrcf	___fladd@bexp^0,w,c
 10289   00204C  6E13               	movwf	(___fladd@b+3)^0,c
 10290   00204E  AE1C               	btfss	___fladd@signs^0,7,c
 10291   002050  EF2C  F010         	goto	u3551
 10292   002054  EF2E  F010         	goto	u3550
 10293   002058                     u3551:
 10294   002058  EF2F  F010         	goto	l4321
 10295   00205C                     u3550:
 10296   00205C  8E13               	bsf	(___fladd@b+3)^0,7,c
 10297   00205E                     l4321:
 10298   00205E  C010  F010         	movff	___fladd@b,?___fladd
 10299   002062  C011  F011         	movff	___fladd@b+1,?___fladd+1
 10300   002066  C012  F012         	movff	___fladd@b+2,?___fladd+2
 10301   00206A  C013  F013         	movff	___fladd@b+3,?___fladd+3
 10302   00206E                     l1386:
 10303   00206E  0012               	return		;funcret
 10304   002070                     __end_of___fladd:
 10305                           	callstack 0
 10306                           
 10307 ;; *************** function _calibration_colors *****************
 10308 ;; Defined at:
 10309 ;;		line 9 in file "calibration.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;  cCal            1   77[COMRAM] PTR struct colors
 10312 ;;		 -> colorCalibration(10), 
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10324 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10325 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10327 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10328 ;;Total ram usage:       23 bytes
 10329 ;; Hardware stack levels used: 1
 10330 ;; Hardware stack levels required when called: 10
 10331 ;; This function calls:
 10332 ;;		_color_read_Blue
 10333 ;;		_color_read_Clear
 10334 ;;		_color_read_Green
 10335 ;;		_color_read_Red
 10336 ;;		_send2USART
 10337 ;;		_sendStringSerial4
 10338 ;;		_sprintf
 10339 ;; This function is called by:
 10340 ;;		_main
 10341 ;; This function uses a non-reentrant model
 10342 ;;
 10343                           
 10344                           	psect	text49
 10345   002F64                     __ptext49:
 10346                           	callstack 0
 10347   002F64                     _calibration_colors:
 10348                           	callstack 20
 10349   002F64                     
 10350                           ;calibration.c: 9: void calibration_colors(colors *cCal);calibration.c: 10: {;calibratio
      +                          n.c: 12:     LATGbits.LATG0 = 0;
 10351   002F64  907F               	bcf	127,0,c	;volatile
 10352                           
 10353                           ;calibration.c: 13:     LATEbits.LATE7 = 0;
 10354   002F66  9E7D               	bcf	125,7,c	;volatile
 10355                           
 10356                           ;calibration.c: 14:     LATAbits.LATA3 = 0;
 10357   002F68  9679               	bcf	121,3,c	;volatile
 10358   002F6A                     
 10359                           ;calibration.c: 16:     char cal_state[20];;calibration.c: 20:     sprintf(cal_state,"Ca
      +                          libration state = red", ".");
 10360   002F6A  0E92               	movlw	low calibration_colors@cal_state
 10361   002F6C  6E32               	movwf	sprintf@s^0,c
 10362   002F6E  0E8A               	movlw	low STR_3
 10363   002F70  6E33               	movwf	sprintf@fmt^0,c
 10364   002F72  0EC3               	movlw	low STR_4
 10365   002F74  6E34               	movwf	(?_sprintf+2)^0,c
 10366   002F76  5034               	movf	(?_sprintf+2)^0,w,c
 10367   002F78  A4D8               	btfss	status,2,c
 10368   002F7A  0E0E               	movlw	high __smallconst
 10369   002F7C  6E35               	movwf	(?_sprintf+3)^0,c
 10370   002F7E  EC85  F026         	call	_sprintf	;wreg free
 10371   002F82                     
 10372                           ;calibration.c: 21:     sendStringSerial4(cal_state);
 10373   002F82  0E92               	movlw	low calibration_colors@cal_state
 10374   002F84  6E03               	movwf	sendStringSerial4@string^0,c
 10375   002F86  EC81  F027         	call	_sendStringSerial4	;wreg free
 10376   002F8A                     l774:
 10377                           
 10378                           ;calibration.c: 24:     while(PORTFbits.RF2 == 1){
 10379   002F8A  B48E               	btfsc	142,2,c	;volatile
 10380   002F8C  EFCA  F017         	goto	u5411
 10381   002F90  EFCC  F017         	goto	u5410
 10382   002F94                     u5411:
 10383   002F94  EFC5  F017         	goto	l774
 10384   002F98                     u5410:
 10385   002F98                     
 10386                           ;calibration.c: 28:     LATGbits.LATG0 = 1;
 10387   002F98  807F               	bsf	127,0,c	;volatile
 10388   002F9A                     
 10389                           ;calibration.c: 29:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10390   002F9A  0E29               	movlw	41
 10391   002F9C  6E50               	movwf	(??_calibration_colors+1)^0,c
 10392   002F9E  0E96               	movlw	150
 10393   002FA0  6E4F               	movwf	??_calibration_colors^0,c
 10394   002FA2  0E7F               	movlw	127
 10395   002FA4                     u6047:
 10396   002FA4  2EE8               	decfsz	wreg,f,c
 10397   002FA6  D7FE               	bra	u6047
 10398   002FA8  2E4F               	decfsz	??_calibration_colors^0,f,c
 10399   002FAA  D7FC               	bra	u6047
 10400   002FAC  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10401   002FAE  D7FA               	bra	u6047
 10402   002FB0  0000               	nop	
 10403   002FB2                     
 10404                           ;calibration.c: 30:     (cCal->red) = color_read_Red();
 10405   002FB2  EC75  F024         	call	_color_read_Red	;wreg free
 10406   002FB6  504E               	movf	calibration_colors@cCal^0,w,c
 10407   002FB8  6ED9               	movwf	fsr2l,c
 10408   002FBA  6ADA               	clrf	fsr2h,c
 10409   002FBC  C006  FFDE         	movff	?_color_read_Red,postinc2
 10410   002FC0  C007  FFDD         	movff	?_color_read_Red+1,postdec2
 10411   002FC4                     
 10412                           ;calibration.c: 31:     LATGbits.LATG0 = 0;
 10413   002FC4  907F               	bcf	127,0,c	;volatile
 10414   002FC6                     
 10415                           ;calibration.c: 34:     sprintf(cal_state,"Calibration state = green \n\r", ".");
 10416   002FC6  0E92               	movlw	low calibration_colors@cal_state
 10417   002FC8  6E32               	movwf	sprintf@s^0,c
 10418   002FCA  0E01               	movlw	low STR_5
 10419   002FCC  6E33               	movwf	sprintf@fmt^0,c
 10420   002FCE  0EC3               	movlw	low STR_4
 10421   002FD0  6E34               	movwf	(?_sprintf+2)^0,c
 10422   002FD2  5034               	movf	(?_sprintf+2)^0,w,c
 10423   002FD4  A4D8               	btfss	status,2,c
 10424   002FD6  0E0E               	movlw	high __smallconst
 10425   002FD8  6E35               	movwf	(?_sprintf+3)^0,c
 10426   002FDA  EC85  F026         	call	_sprintf	;wreg free
 10427   002FDE                     
 10428                           ;calibration.c: 35:     sendStringSerial4(&cal_state);
 10429   002FDE  0E92               	movlw	low calibration_colors@cal_state
 10430   002FE0  6E03               	movwf	sendStringSerial4@string^0,c
 10431   002FE2  EC81  F027         	call	_sendStringSerial4	;wreg free
 10432   002FE6                     l777:
 10433                           
 10434                           ;calibration.c: 37:     while(PORTFbits.RF2 == 1){
 10435   002FE6  B48E               	btfsc	142,2,c	;volatile
 10436   002FE8  EFF8  F017         	goto	u5421
 10437   002FEC  EFFA  F017         	goto	u5420
 10438   002FF0                     u5421:
 10439   002FF0  EFF3  F017         	goto	l777
 10440   002FF4                     u5420:
 10441   002FF4                     
 10442                           ;calibration.c: 41:     LATEbits.LATE7 = 1;
 10443   002FF4  8E7D               	bsf	125,7,c	;volatile
 10444   002FF6                     
 10445                           ;calibration.c: 42:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10446   002FF6  0E29               	movlw	41
 10447   002FF8  6E50               	movwf	(??_calibration_colors+1)^0,c
 10448   002FFA  0E96               	movlw	150
 10449   002FFC  6E4F               	movwf	??_calibration_colors^0,c
 10450   002FFE  0E7F               	movlw	127
 10451   003000                     u6057:
 10452   003000  2EE8               	decfsz	wreg,f,c
 10453   003002  D7FE               	bra	u6057
 10454   003004  2E4F               	decfsz	??_calibration_colors^0,f,c
 10455   003006  D7FC               	bra	u6057
 10456   003008  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10457   00300A  D7FA               	bra	u6057
 10458   00300C  0000               	nop	
 10459   00300E                     
 10460                           ;calibration.c: 43:     (cCal->green) = color_read_Green();
 10461   00300E  EC9D  F024         	call	_color_read_Green	;wreg free
 10462   003012  504E               	movf	calibration_colors@cCal^0,w,c
 10463   003014  6ED9               	movwf	fsr2l,c
 10464   003016  6ADA               	clrf	fsr2h,c
 10465   003018  0E02               	movlw	2
 10466   00301A  26D9               	addwf	fsr2l,f,c
 10467   00301C  C006  FFDE         	movff	?_color_read_Green,postinc2
 10468   003020  C007  FFDD         	movff	?_color_read_Green+1,postdec2
 10469   003024                     
 10470                           ;calibration.c: 44:     LATEbits.LATE7 = 0;
 10471   003024  9E7D               	bcf	125,7,c	;volatile
 10472   003026                     
 10473                           ;calibration.c: 47:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
 10474   003026  0E92               	movlw	low calibration_colors@cal_state
 10475   003028  6E32               	movwf	sprintf@s^0,c
 10476   00302A  0E3B               	movlw	low STR_7
 10477   00302C  6E33               	movwf	sprintf@fmt^0,c
 10478   00302E  0EC3               	movlw	low STR_4
 10479   003030  6E34               	movwf	(?_sprintf+2)^0,c
 10480   003032  5034               	movf	(?_sprintf+2)^0,w,c
 10481   003034  A4D8               	btfss	status,2,c
 10482   003036  0E0E               	movlw	high __smallconst
 10483   003038  6E35               	movwf	(?_sprintf+3)^0,c
 10484   00303A  EC85  F026         	call	_sprintf	;wreg free
 10485   00303E                     
 10486                           ;calibration.c: 48:     sendStringSerial4(&cal_state);
 10487   00303E  0E92               	movlw	low calibration_colors@cal_state
 10488   003040  6E03               	movwf	sendStringSerial4@string^0,c
 10489   003042  EC81  F027         	call	_sendStringSerial4	;wreg free
 10490   003046                     l780:
 10491                           
 10492                           ;calibration.c: 50:     while(PORTFbits.RF2 == 1){
 10493   003046  B48E               	btfsc	142,2,c	;volatile
 10494   003048  EF28  F018         	goto	u5431
 10495   00304C  EF2A  F018         	goto	u5430
 10496   003050                     u5431:
 10497   003050  EF23  F018         	goto	l780
 10498   003054                     u5430:
 10499   003054                     
 10500                           ;calibration.c: 54:     LATAbits.LATA3 = 1;
 10501   003054  8679               	bsf	121,3,c	;volatile
 10502   003056                     
 10503                           ;calibration.c: 55:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10504   003056  0E29               	movlw	41
 10505   003058  6E50               	movwf	(??_calibration_colors+1)^0,c
 10506   00305A  0E96               	movlw	150
 10507   00305C  6E4F               	movwf	??_calibration_colors^0,c
 10508   00305E  0E7F               	movlw	127
 10509   003060                     u6067:
 10510   003060  2EE8               	decfsz	wreg,f,c
 10511   003062  D7FE               	bra	u6067
 10512   003064  2E4F               	decfsz	??_calibration_colors^0,f,c
 10513   003066  D7FC               	bra	u6067
 10514   003068  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10515   00306A  D7FA               	bra	u6067
 10516   00306C  0000               	nop	
 10517   00306E                     
 10518                           ;calibration.c: 56:     (cCal->blue) = color_read_Blue();
 10519   00306E  ECED  F024         	call	_color_read_Blue	;wreg free
 10520   003072  504E               	movf	calibration_colors@cCal^0,w,c
 10521   003074  6ED9               	movwf	fsr2l,c
 10522   003076  6ADA               	clrf	fsr2h,c
 10523   003078  0E04               	movlw	4
 10524   00307A  26D9               	addwf	fsr2l,f,c
 10525   00307C  C006  FFDE         	movff	?_color_read_Blue,postinc2
 10526   003080  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
 10527   003084                     
 10528                           ;calibration.c: 57:     LATAbits.LATA3 = 0;
 10529   003084  9679               	bcf	121,3,c	;volatile
 10530   003086                     
 10531                           ;calibration.c: 60:     sprintf(cal_state,"Calibration state =  white", ".");
 10532   003086  0E92               	movlw	low calibration_colors@cal_state
 10533   003088  6E32               	movwf	sprintf@s^0,c
 10534   00308A  0E56               	movlw	low STR_9
 10535   00308C  6E33               	movwf	sprintf@fmt^0,c
 10536   00308E  0EC3               	movlw	low STR_4
 10537   003090  6E34               	movwf	(?_sprintf+2)^0,c
 10538   003092  5034               	movf	(?_sprintf+2)^0,w,c
 10539   003094  A4D8               	btfss	status,2,c
 10540   003096  0E0E               	movlw	high __smallconst
 10541   003098  6E35               	movwf	(?_sprintf+3)^0,c
 10542   00309A  EC85  F026         	call	_sprintf	;wreg free
 10543   00309E                     
 10544                           ;calibration.c: 61:     sendStringSerial4(&cal_state);
 10545   00309E  0E92               	movlw	low calibration_colors@cal_state
 10546   0030A0  6E03               	movwf	sendStringSerial4@string^0,c
 10547   0030A2  EC81  F027         	call	_sendStringSerial4	;wreg free
 10548   0030A6                     l783:
 10549                           
 10550                           ;calibration.c: 63:     while(PORTFbits.RF2 == 1){
 10551   0030A6  B48E               	btfsc	142,2,c	;volatile
 10552   0030A8  EF58  F018         	goto	u5441
 10553   0030AC  EF5A  F018         	goto	u5440
 10554   0030B0                     u5441:
 10555   0030B0  EF53  F018         	goto	l783
 10556   0030B4                     u5440:
 10557   0030B4                     
 10558                           ;calibration.c: 66:     LATGbits.LATG0 = 1;
 10559   0030B4  807F               	bsf	127,0,c	;volatile
 10560                           
 10561                           ;calibration.c: 67:     LATEbits.LATE7 = 1;
 10562   0030B6  8E7D               	bsf	125,7,c	;volatile
 10563                           
 10564                           ;calibration.c: 68:     LATAbits.LATA3 = 1;
 10565   0030B8  8679               	bsf	121,3,c	;volatile
 10566   0030BA                     
 10567                           ;calibration.c: 69:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10568   0030BA  0E29               	movlw	41
 10569   0030BC  6E50               	movwf	(??_calibration_colors+1)^0,c
 10570   0030BE  0E96               	movlw	150
 10571   0030C0  6E4F               	movwf	??_calibration_colors^0,c
 10572   0030C2  0E7F               	movlw	127
 10573   0030C4                     u6077:
 10574   0030C4  2EE8               	decfsz	wreg,f,c
 10575   0030C6  D7FE               	bra	u6077
 10576   0030C8  2E4F               	decfsz	??_calibration_colors^0,f,c
 10577   0030CA  D7FC               	bra	u6077
 10578   0030CC  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10579   0030CE  D7FA               	bra	u6077
 10580   0030D0  0000               	nop	
 10581   0030D2                     
 10582                           ;calibration.c: 70:     (cCal->clear) = color_read_Clear();
 10583   0030D2  ECC5  F024         	call	_color_read_Clear	;wreg free
 10584   0030D6  504E               	movf	calibration_colors@cCal^0,w,c
 10585   0030D8  6ED9               	movwf	fsr2l,c
 10586   0030DA  6ADA               	clrf	fsr2h,c
 10587   0030DC  0E06               	movlw	6
 10588   0030DE  26D9               	addwf	fsr2l,f,c
 10589   0030E0  C006  FFDE         	movff	?_color_read_Clear,postinc2
 10590   0030E4  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
 10591   0030E8                     
 10592                           ;calibration.c: 71:     LATGbits.LATG0 = 0;
 10593   0030E8  907F               	bcf	127,0,c	;volatile
 10594   0030EA                     
 10595                           ;calibration.c: 72:     LATEbits.LATE7 = 0;
 10596   0030EA  9E7D               	bcf	125,7,c	;volatile
 10597   0030EC                     
 10598                           ;calibration.c: 73:     LATAbits.LATA3 = 0;
 10599   0030EC  9679               	bcf	121,3,c	;volatile
 10600   0030EE                     
 10601                           ;calibration.c: 75:     sprintf(cal_state,"Calibration state =  ambient", ".");
 10602   0030EE  0E92               	movlw	low calibration_colors@cal_state
 10603   0030F0  6E32               	movwf	sprintf@s^0,c
 10604   0030F2  0E1E               	movlw	low STR_11
 10605   0030F4  6E33               	movwf	sprintf@fmt^0,c
 10606   0030F6  0EC3               	movlw	low STR_4
 10607   0030F8  6E34               	movwf	(?_sprintf+2)^0,c
 10608   0030FA  5034               	movf	(?_sprintf+2)^0,w,c
 10609   0030FC  A4D8               	btfss	status,2,c
 10610   0030FE  0E0E               	movlw	high __smallconst
 10611   003100  6E35               	movwf	(?_sprintf+3)^0,c
 10612   003102  EC85  F026         	call	_sprintf	;wreg free
 10613   003106                     
 10614                           ;calibration.c: 76:     sendStringSerial4(&cal_state);
 10615   003106  0E92               	movlw	low calibration_colors@cal_state
 10616   003108  6E03               	movwf	sendStringSerial4@string^0,c
 10617   00310A  EC81  F027         	call	_sendStringSerial4	;wreg free
 10618   00310E                     l786:
 10619                           
 10620                           ;calibration.c: 78:     while(PORTFbits.RF2 == 1){
 10621   00310E  B48E               	btfsc	142,2,c	;volatile
 10622   003110  EF8C  F018         	goto	u5451
 10623   003114  EF8E  F018         	goto	u5450
 10624   003118                     u5451:
 10625   003118  EF87  F018         	goto	l786
 10626   00311C                     u5450:
 10627   00311C                     
 10628                           ;calibration.c: 81:     LATGbits.LATG0 = 1;
 10629   00311C  807F               	bsf	127,0,c	;volatile
 10630                           
 10631                           ;calibration.c: 82:     LATEbits.LATE7 = 1;
 10632   00311E  8E7D               	bsf	125,7,c	;volatile
 10633                           
 10634                           ;calibration.c: 83:     LATAbits.LATA3 = 1;
 10635   003120  8679               	bsf	121,3,c	;volatile
 10636   003122                     
 10637                           ;calibration.c: 84:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10638   003122  0E29               	movlw	41
 10639   003124  6E50               	movwf	(??_calibration_colors+1)^0,c
 10640   003126  0E96               	movlw	150
 10641   003128  6E4F               	movwf	??_calibration_colors^0,c
 10642   00312A  0E7F               	movlw	127
 10643   00312C                     u6087:
 10644   00312C  2EE8               	decfsz	wreg,f,c
 10645   00312E  D7FE               	bra	u6087
 10646   003130  2E4F               	decfsz	??_calibration_colors^0,f,c
 10647   003132  D7FC               	bra	u6087
 10648   003134  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10649   003136  D7FA               	bra	u6087
 10650   003138  0000               	nop	
 10651   00313A                     
 10652                           ;calibration.c: 85:     (cCal->ambient) = color_read_Clear();
 10653   00313A  ECC5  F024         	call	_color_read_Clear	;wreg free
 10654   00313E  504E               	movf	calibration_colors@cCal^0,w,c
 10655   003140  6ED9               	movwf	fsr2l,c
 10656   003142  6ADA               	clrf	fsr2h,c
 10657   003144  0E08               	movlw	8
 10658   003146  26D9               	addwf	fsr2l,f,c
 10659   003148  C006  FFDE         	movff	?_color_read_Clear,postinc2
 10660   00314C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
 10661   003150                     
 10662                           ;calibration.c: 86:     LATGbits.LATG0 = 0;
 10663   003150  907F               	bcf	127,0,c	;volatile
 10664   003152                     
 10665                           ;calibration.c: 87:     LATEbits.LATE7 = 0;
 10666   003152  9E7D               	bcf	125,7,c	;volatile
 10667   003154                     
 10668                           ;calibration.c: 88:     LATAbits.LATA3 = 0;
 10669   003154  9679               	bcf	121,3,c	;volatile
 10670   003156                     
 10671                           ;calibration.c: 92:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
 10672   003156  0E92               	movlw	low calibration_colors@cal_state
 10673   003158  6E32               	movwf	sprintf@s^0,c
 10674   00315A  0E71               	movlw	low STR_13
 10675   00315C  6E33               	movwf	sprintf@fmt^0,c
 10676   00315E  0EC3               	movlw	low STR_4
 10677   003160  6E34               	movwf	(?_sprintf+2)^0,c
 10678   003162  5034               	movf	(?_sprintf+2)^0,w,c
 10679   003164  A4D8               	btfss	status,2,c
 10680   003166  0E0E               	movlw	high __smallconst
 10681   003168  6E35               	movwf	(?_sprintf+3)^0,c
 10682   00316A  EC85  F026         	call	_sprintf	;wreg free
 10683   00316E                     
 10684                           ;calibration.c: 93:     sendStringSerial4(&cal_state);
 10685   00316E  0E92               	movlw	low calibration_colors@cal_state
 10686   003170  6E03               	movwf	sendStringSerial4@string^0,c
 10687   003172  EC81  F027         	call	_sendStringSerial4	;wreg free
 10688   003176                     
 10689                           ;calibration.c: 94:     send2USART(colorCalibration.ambient);
 10690   003176  C0DE  F04C         	movff	_colorCalibration+8,send2USART@hue
 10691   00317A  C0DF  F04D         	movff	_colorCalibration+9,send2USART@hue+1
 10692   00317E  EC3D  F028         	call	_send2USART	;wreg free
 10693   003182                     l789:
 10694                           
 10695                           ;calibration.c: 96:     while(PORTFbits.RF2 == 1){
 10696   003182  B48E               	btfsc	142,2,c	;volatile
 10697   003184  EFC6  F018         	goto	u5461
 10698   003188  EFC8  F018         	goto	u5460
 10699   00318C                     u5461:
 10700   00318C  EFC1  F018         	goto	l789
 10701   003190                     u5460:
 10702   003190                     
 10703                           ;calibration.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10704   003190  0E29               	movlw	41
 10705   003192  6E50               	movwf	(??_calibration_colors+1)^0,c
 10706   003194  0E96               	movlw	150
 10707   003196  6E4F               	movwf	??_calibration_colors^0,c
 10708   003198  0E7F               	movlw	127
 10709   00319A                     u6097:
 10710   00319A  2EE8               	decfsz	wreg,f,c
 10711   00319C  D7FE               	bra	u6097
 10712   00319E  2E4F               	decfsz	??_calibration_colors^0,f,c
 10713   0031A0  D7FC               	bra	u6097
 10714   0031A2  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
 10715   0031A4  D7FA               	bra	u6097
 10716   0031A6  0000               	nop	
 10717   0031A8  0012               	return		;funcret
 10718   0031AA                     __end_of_calibration_colors:
 10719                           	callstack 0
 10720                           
 10721 ;; *************** function _send2USART *****************
 10722 ;; Defined at:
 10723 ;;		line 146 in file "serial.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  hue             2   75[COMRAM] unsigned int 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10738 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10740 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10741 ;;Total ram usage:       52 bytes
 10742 ;; Hardware stack levels used: 1
 10743 ;; Hardware stack levels required when called: 9
 10744 ;; This function calls:
 10745 ;;		_sendStringSerial4
 10746 ;;		_sprintf
 10747 ;; This function is called by:
 10748 ;;		_main
 10749 ;;		_calibration_colors
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text50
 10754   00507A                     __ptext50:
 10755                           	callstack 0
 10756   00507A                     _send2USART:
 10757                           	callstack 21
 10758   00507A                     
 10759                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
 10760   00507A  0E60               	movlw	low send2USART@hue_char
 10761   00507C  6E32               	movwf	sprintf@s^0,c
 10762   00507E  0EB7               	movlw	low STR_2
 10763   005080  6E33               	movwf	sprintf@fmt^0,c
 10764   005082  C04C  F034         	movff	send2USART@hue,?_sprintf+2
 10765   005086  C04D  F035         	movff	send2USART@hue+1,?_sprintf+3
 10766   00508A  EC85  F026         	call	_sprintf	;wreg free
 10767   00508E                     
 10768                           ;serial.c: 158:         sendStringSerial4(hue_char);
 10769   00508E  0E60               	movlw	low send2USART@hue_char
 10770   005090  6E03               	movwf	sendStringSerial4@string^0,c
 10771   005092  EC81  F027         	call	_sendStringSerial4	;wreg free
 10772   005096  0012               	return		;funcret
 10773   005098                     __end_of_send2USART:
 10774                           	callstack 0
 10775                           
 10776 ;; *************** function _sprintf *****************
 10777 ;; Defined at:
 10778 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  s               1   49[COMRAM] PTR unsigned char 
 10781 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 10782 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
 10783 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10784 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  f              12   56[COMRAM] struct _IO_FILE
 10787 ;;  ret             2    0        int 
 10788 ;;  ap              1   55[COMRAM] PTR void [1]
 10789 ;;		 -> ?_sprintf(2), 
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  2   49[COMRAM] int 
 10792 ;; Registers used:
 10793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 0/0
 10796 ;;		On exit  : 0/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10799 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10800 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10802 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;Total ram usage:       19 bytes
 10804 ;; Hardware stack levels used: 1
 10805 ;; Hardware stack levels required when called: 8
 10806 ;; This function calls:
 10807 ;;		_vfprintf
 10808 ;; This function is called by:
 10809 ;;		_send2USART
 10810 ;;		_calibration_colors
 10811 ;;		_ADC2String
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           	psect	text51
 10816   004D0A                     __ptext51:
 10817                           	callstack 0
 10818   004D0A                     _sprintf:
 10819                           	callstack 21
 10820   004D0A  0E34               	movlw	low (?_sprintf+2)
 10821   004D0C  6E38               	movwf	sprintf@ap^0,c
 10822   004D0E  C032  F039         	movff	sprintf@s,sprintf@f
 10823   004D12  0E00               	movlw	0
 10824   004D14  6E3D               	movwf	(sprintf@f+4)^0,c
 10825   004D16  0E00               	movlw	0
 10826   004D18  6E3C               	movwf	(sprintf@f+3)^0,c
 10827   004D1A  0E00               	movlw	0
 10828   004D1C  6E44               	movwf	(sprintf@f+11)^0,c
 10829   004D1E  0E00               	movlw	0
 10830   004D20  6E43               	movwf	(sprintf@f+10)^0,c
 10831   004D22  0E39               	movlw	low sprintf@f
 10832   004D24  6E2E               	movwf	vfprintf@fp^0,c
 10833   004D26  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
 10834   004D2A  0E38               	movlw	low sprintf@ap
 10835   004D2C  6E30               	movwf	vfprintf@ap^0,c
 10836   004D2E  EC5A  F025         	call	_vfprintf	;wreg free
 10837   004D32  5032               	movf	sprintf@s^0,w,c
 10838   004D34  243C               	addwf	(sprintf@f+3)^0,w,c
 10839   004D36  6ED9               	movwf	fsr2l,c
 10840   004D38  6ADA               	clrf	fsr2h,c
 10841   004D3A  6ADF               	clrf	indf2,c
 10842   004D3C  0012               	return		;funcret
 10843   004D3E                     __end_of_sprintf:
 10844                           	callstack 0
 10845                           
 10846 ;; *************** function _vfprintf *****************
 10847 ;; Defined at:
 10848 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
 10851 ;;		 -> sprintf@f(12), 
 10852 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
 10853 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10854 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10855 ;;  ap              1   47[COMRAM] PTR PTR void 
 10856 ;;		 -> sprintf@ap(1), 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
 10859 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10860 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  2   45[COMRAM] int 
 10863 ;; Registers used:
 10864 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10870 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10874 ;;Total ram usage:        4 bytes
 10875 ;; Hardware stack levels used: 1
 10876 ;; Hardware stack levels required when called: 7
 10877 ;; This function calls:
 10878 ;;		_vfpfcnvrt
 10879 ;; This function is called by:
 10880 ;;		_sprintf
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           	psect	text52
 10885   004AB4                     __ptext52:
 10886                           	callstack 0
 10887   004AB4                     _vfprintf:
 10888                           	callstack 21
 10889   004AB4                     
 10890                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
 10891   004AB4  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
 10892                           
 10893                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10894   004AB8  EF66  F025         	goto	l5957
 10895   004ABC                     l5955:
 10896                           
 10897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
 10898   004ABC  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
 10899   004AC0  0E31               	movlw	low vfprintf@cfmt
 10900   004AC2  6E24               	movwf	vfpfcnvrt@fmt^0,c
 10901   004AC4  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
 10902   004AC8  ECAF  F019         	call	_vfpfcnvrt	;wreg free
 10903   004ACC                     l5957:
 10904                           
 10905                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10906   004ACC  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
 10907   004AD0                     	if	1	;There is more than 1 active tblptr byte
 10908   004AD0  0E0E               	movlw	high __smallconst
 10909   004AD2  6EF7               	movwf	tblptrh,c
 10910   004AD4                     	endif
 10911   004AD4                     	if	0	;tblptru may be non-zero
 10912   004AD4                     	endif
 10913   004AD4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10914   004AD4  0E00               	movlw	low (__smallconst shr (0+16))
 10915   004AD6  6EF8               	movwf	tblptru,c
 10916   004AD8                     	endif
 10917   004AD8  0008               	tblrd		*
 10918   004ADA  50F5               	movf	tablat,w,c
 10919   004ADC  0900               	iorlw	0
 10920   004ADE  A4D8               	btfss	status,2,c
 10921   004AE0  EF74  F025         	goto	u5401
 10922   004AE4  EF76  F025         	goto	u5400
 10923   004AE8                     u5401:
 10924   004AE8  EF5E  F025         	goto	l5955
 10925   004AEC                     u5400:
 10926   004AEC                     
 10927                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
 10928   004AEC  0E00               	movlw	0
 10929   004AEE  6E2F               	movwf	(?_vfprintf+1)^0,c
 10930   004AF0  0E00               	movlw	0
 10931   004AF2  6E2E               	movwf	?_vfprintf^0,c
 10932   004AF4  0012               	return		;funcret
 10933   004AF6                     __end_of_vfprintf:
 10934                           	callstack 0
 10935                           
 10936 ;; *************** function _vfpfcnvrt *****************
 10937 ;; Defined at:
 10938 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
 10941 ;;		 -> sprintf@f(12), 
 10942 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
 10943 ;;		 -> vfprintf@cfmt(1), 
 10944 ;;  ap              1   36[COMRAM] PTR PTR void 
 10945 ;;		 -> sprintf@ap(1), 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  convarg         4   39[COMRAM] struct .
 10948 ;;  cp              1   44[COMRAM] PTR unsigned char 
 10949 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10950 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10951 ;;  done            1   43[COMRAM] _Bool 
 10952 ;;  c               1    0        unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;                  1    wreg      void 
 10955 ;; Registers used:
 10956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10963 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10965 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10966 ;;Total ram usage:       11 bytes
 10967 ;; Hardware stack levels used: 1
 10968 ;; Hardware stack levels required when called: 6
 10969 ;; This function calls:
 10970 ;;		_dtoa
 10971 ;;		_fputc
 10972 ;;		_read_prec_or_width
 10973 ;; This function is called by:
 10974 ;;		_vfprintf
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text53
 10979   00335E                     __ptext53:
 10980                           	callstack 0
 10981   00335E                     _vfpfcnvrt:
 10982                           	callstack 21
 10983   00335E                     
 10984                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
 10985   00335E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10986   003360  6ED9               	movwf	fsr2l,c
 10987   003362  6ADA               	clrf	fsr2h,c
 10988   003364  CFDF FFF6          	movff	indf2,tblptrl
 10989   003368                     	if	1	;There is more than 1 active tblptr byte
 10990   003368  0E0E               	movlw	high __smallconst
 10991   00336A  6EF7               	movwf	tblptrh,c
 10992   00336C                     	endif
 10993   00336C                     	if	0	;tblptru may be non-zero
 10994   00336C                     	endif
 10995   00336C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10996   00336C  0E00               	movlw	low (__smallconst shr (0+16))
 10997   00336E  6EF8               	movwf	tblptru,c
 10998   003370                     	endif
 10999   003370  0008               	tblrd		*
 11000   003372  50F5               	movf	tablat,w,c
 11001   003374  0A25               	xorlw	37
 11002   003376  A4D8               	btfss	status,2,c
 11003   003378  EFC0  F019         	goto	u5351
 11004   00337C  EFC2  F019         	goto	u5350
 11005   003380                     u5351:
 11006   003380  EF5F  F01A         	goto	l5943
 11007   003384                     u5350:
 11008   003384                     
 11009                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
 11010   003384  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11011   003386  6ED9               	movwf	fsr2l,c
 11012   003388  6ADA               	clrf	fsr2h,c
 11013   00338A  2ADF               	incf	indf2,f,c
 11014   00338C                     
 11015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
 11016   00338C  0E00               	movlw	0
 11017   00338E  0100               	movlb	0	; () banked
 11018   003390  6FC5               	movwf	(_width+1)& (0+255),b
 11019   003392  0E00               	movlw	0
 11020   003394  6FC4               	movwf	_width& (0+255),b
 11021   003396  C0C4  F0C8         	movff	_width,_flags
 11022   00339A                     
 11023                           ; BSR set to: 0
 11024                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
 11025   00339A  69C6               	setf	_prec& (0+255),b
 11026   00339C  69C7               	setf	(_prec+1)& (0+255),b
 11027   00339E                     
 11028                           ; BSR set to: 0
 11029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
 11030   00339E  0E00               	movlw	0
 11031   0033A0  6E2C               	movwf	vfpfcnvrt@done^0,c
 11032                           
 11033                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 11034   0033A2  EFFA  F019         	goto	l5917
 11035   0033A6                     l5907:
 11036                           
 11037                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
 11038   0033A6  0100               	movlb	0	; () banked
 11039   0033A8  83C8               	bsf	_flags& (0+255),1,b
 11040   0033AA                     
 11041                           ; BSR set to: 0
 11042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
 11043   0033AA  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11044   0033AC  6ED9               	movwf	fsr2l,c
 11045   0033AE  6ADA               	clrf	fsr2h,c
 11046   0033B0  2ADF               	incf	indf2,f,c
 11047                           
 11048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
 11049   0033B2  EFFA  F019         	goto	l5917
 11050   0033B6                     l5911:
 11051                           
 11052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
 11053   0033B6  0E01               	movlw	1
 11054   0033B8  6E2C               	movwf	vfpfcnvrt@done^0,c
 11055                           
 11056                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
 11057   0033BA  EFFA  F019         	goto	l5917
 11058   0033BE                     l5915:
 11059   0033BE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11060   0033C0  6ED9               	movwf	fsr2l,c
 11061   0033C2  6ADA               	clrf	fsr2h,c
 11062   0033C4  CFDF FFF6          	movff	indf2,tblptrl
 11063   0033C8                     	if	1	;There is more than 1 active tblptr byte
 11064   0033C8  0E0E               	movlw	high __smallconst
 11065   0033CA  6EF7               	movwf	tblptrh,c
 11066   0033CC                     	endif
 11067   0033CC                     	if	0	;tblptru may be non-zero
 11068   0033CC                     	endif
 11069   0033CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11070   0033CC  0E00               	movlw	low (__smallconst shr (0+16))
 11071   0033CE  6EF8               	movwf	tblptru,c
 11072   0033D0                     	endif
 11073   0033D0  0008               	tblrd		*
 11074   0033D2  50F5               	movf	tablat,w,c
 11075   0033D4  6E26               	movwf	??_vfpfcnvrt^0,c
 11076   0033D6  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
 11077                           
 11078                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11079                           ; Switch size 1, requested type "simple"
 11080                           ; Number of cases is 1, Range of values is 0 to 0
 11081                           ; switch strategies available:
 11082                           ; Name         Instructions Cycles
 11083                           ; simple_byte            4     3 (average)
 11084                           ;	Chosen strategy is simple_byte
 11085   0033D8  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
 11086   0033DA  0A00               	xorlw	0	; case 0
 11087   0033DC  B4D8               	btfsc	status,2,c
 11088   0033DE  EFF3  F019         	goto	l6273
 11089   0033E2  EFDB  F019         	goto	l5911
 11090   0033E6                     l6273:
 11091                           
 11092                           ; Switch size 1, requested type "simple"
 11093                           ; Number of cases is 1, Range of values is 48 to 48
 11094                           ; switch strategies available:
 11095                           ; Name         Instructions Cycles
 11096                           ; simple_byte            4     3 (average)
 11097                           ;	Chosen strategy is simple_byte
 11098   0033E6  5026               	movf	??_vfpfcnvrt^0,w,c
 11099   0033E8  0A30               	xorlw	48	; case 48
 11100   0033EA  B4D8               	btfsc	status,2,c
 11101   0033EC  EFD3  F019         	goto	l5907
 11102   0033F0  EFDB  F019         	goto	l5911
 11103   0033F4                     l5917:
 11104                           
 11105                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 11106   0033F4  502C               	movf	vfpfcnvrt@done^0,w,c
 11107   0033F6  B4D8               	btfsc	status,2,c
 11108   0033F8  EF00  F01A         	goto	u5361
 11109   0033FC  EF02  F01A         	goto	u5360
 11110   003400                     u5361:
 11111   003400  EFDF  F019         	goto	l5915
 11112   003404                     u5360:
 11113   003404                     
 11114                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
 11115   003404  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
 11116   003408  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
 11117   00340C  ECF6  F020         	call	_read_prec_or_width	;wreg free
 11118   003410  C008  F0C4         	movff	?_read_prec_or_width,_width
 11119   003414  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
 11120   003418                     
 11121                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
 11122   003418  0100               	movlb	0	; () banked
 11123   00341A  BFC5               	btfsc	(_width+1)& (0+255),7,b
 11124   00341C  EF14  F01A         	goto	u5370
 11125   003420  EF12  F01A         	goto	u5371
 11126   003424                     u5371:
 11127   003424  EF19  F01A         	goto	l5925
 11128   003428                     u5370:
 11129   003428                     
 11130                           ; BSR set to: 0
 11131                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
 11132   003428  81C8               	bsf	_flags& (0+255),0,b
 11133                           
 11134                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 11135   00342A  6DC4               	negf	_width& (0+255),b
 11136   00342C  1FC5               	comf	(_width+1)& (0+255),f,b
 11137   00342E  B0D8               	btfsc	status,0,c
 11138   003430  2BC5               	incf	(_width+1)& (0+255),f,b
 11139   003432                     l5925:
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 11143   003432  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11144   003434  6ED9               	movwf	fsr2l,c
 11145   003436  6ADA               	clrf	fsr2h,c
 11146   003438  50DF               	movf	indf2,w,c
 11147   00343A  6E2D               	movwf	vfpfcnvrt@cp^0,c
 11148   00343C                     
 11149                           ; BSR set to: 0
 11150                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 11151   00343C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 11152   003440                     	if	1	;There is more than 1 active tblptr byte
 11153   003440  0E0E               	movlw	high __smallconst
 11154   003442  6EF7               	movwf	tblptrh,c
 11155   003444                     	endif
 11156   003444                     	if	0	;tblptru may be non-zero
 11157   003444                     	endif
 11158   003444                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11159   003444  0E00               	movlw	low (__smallconst shr (0+16))
 11160   003446  6EF8               	movwf	tblptru,c
 11161   003448                     	endif
 11162   003448  0008               	tblrd		*
 11163   00344A  50F5               	movf	tablat,w,c
 11164   00344C  0A64               	xorlw	100
 11165   00344E  B4D8               	btfsc	status,2,c
 11166   003450  EF2C  F01A         	goto	u5381
 11167   003454  EF2E  F01A         	goto	u5380
 11168   003458                     u5381:
 11169   003458  EF3E  F01A         	goto	l5931
 11170   00345C                     u5380:
 11171   00345C                     
 11172                           ; BSR set to: 0
 11173   00345C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 11174   003460                     	if	1	;There is more than 1 active tblptr byte
 11175   003460  0E0E               	movlw	high __smallconst
 11176   003462  6EF7               	movwf	tblptrh,c
 11177   003464                     	endif
 11178   003464                     	if	0	;tblptru may be non-zero
 11179   003464                     	endif
 11180   003464                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11181   003464  0E00               	movlw	low (__smallconst shr (0+16))
 11182   003466  6EF8               	movwf	tblptru,c
 11183   003468                     	endif
 11184   003468  0008               	tblrd		*
 11185   00346A  50F5               	movf	tablat,w,c
 11186   00346C  0A69               	xorlw	105
 11187   00346E  A4D8               	btfss	status,2,c
 11188   003470  EF3C  F01A         	goto	u5391
 11189   003474  EF3E  F01A         	goto	u5390
 11190   003478                     u5391:
 11191   003478  EF59  F01A         	goto	l5939
 11192   00347C                     u5390:
 11193   00347C                     l5931:
 11194                           
 11195                           ; BSR set to: 0
 11196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 11197   00347C  5025               	movf	vfpfcnvrt@ap^0,w,c
 11198   00347E  6ED9               	movwf	fsr2l,c
 11199   003480  6ADA               	clrf	fsr2h,c
 11200   003482  0E02               	movlw	2
 11201   003484  26DF               	addwf	indf2,f,c
 11202   003486  5CDF               	subwf	indf2,w,c
 11203   003488  6ED9               	movwf	fsr2l,c
 11204   00348A  6ADA               	clrf	fsr2h,c
 11205   00348C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 11206   003490  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 11207   003494                     
 11208                           ; BSR set to: 0
 11209                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 11210   003494  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11211   003496  6ED9               	movwf	fsr2l,c
 11212   003498  6ADA               	clrf	fsr2h,c
 11213   00349A  282D               	incf	vfpfcnvrt@cp^0,w,c
 11214   00349C  6EDF               	movwf	indf2,c
 11215   00349E                     
 11216                           ; BSR set to: 0
 11217                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 11218   00349E  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 11219   0034A2  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 11220   0034A6  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 11221   0034AA  EC73  F01A         	call	_dtoa	;wreg free
 11222   0034AE  EF72  F01A         	goto	l1591
 11223   0034B2                     l5939:
 11224                           
 11225                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 11226   0034B2  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11227   0034B4  6ED9               	movwf	fsr2l,c
 11228   0034B6  6ADA               	clrf	fsr2h,c
 11229   0034B8  2ADF               	incf	indf2,f,c
 11230   0034BA  EF72  F01A         	goto	l1591
 11231   0034BE                     l5943:
 11232                           
 11233                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 11234   0034BE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 11235   0034C0  6ED9               	movwf	fsr2l,c
 11236   0034C2  6ADA               	clrf	fsr2h,c
 11237   0034C4  CFDF FFF6          	movff	indf2,tblptrl
 11238   0034C8                     	if	1	;There is more than 1 active tblptr byte
 11239   0034C8  0E0E               	movlw	high __smallconst
 11240   0034CA  6EF7               	movwf	tblptrh,c
 11241   0034CC                     	endif
 11242   0034CC                     	if	0	;tblptru may be non-zero
 11243   0034CC                     	endif
 11244   0034CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11245   0034CC  0E00               	movlw	low (__smallconst shr (0+16))
 11246   0034CE  6EF8               	movwf	tblptru,c
 11247   0034D0                     	endif
 11248   0034D0  0008               	tblrd		*
 11249   0034D2  50F5               	movf	tablat,w,c
 11250   0034D4  6E02               	movwf	fputc@c^0,c
 11251   0034D6  6A03               	clrf	(fputc@c+1)^0,c
 11252   0034D8  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 11253   0034DC  ECA2  F021         	call	_fputc	;wreg free
 11254   0034E0  EF59  F01A         	goto	l5939
 11255   0034E4                     l1591:
 11256   0034E4  0012               	return		;funcret
 11257   0034E6                     __end_of_vfpfcnvrt:
 11258                           	callstack 0
 11259                           
 11260 ;; *************** function _read_prec_or_width *****************
 11261 ;; Defined at:
 11262 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 11265 ;;		 -> vfprintf@cfmt(1), 
 11266 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 11267 ;;		 -> sprintf@ap(1), 
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  c               1    9[COMRAM] unsigned char 
 11270 ;;  n               2   10[COMRAM] int 
 11271 ;; Return value:  Size  Location     Type
 11272 ;;                  2    7[COMRAM] int 
 11273 ;; Registers used:
 11274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11275 ;; Tracked objects:
 11276 ;;		On entry : 0/0
 11277 ;;		On exit  : 0/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11283 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11284 ;;Total ram usage:        5 bytes
 11285 ;; Hardware stack levels used: 1
 11286 ;; Hardware stack levels required when called: 2
 11287 ;; This function calls:
 11288 ;;		___wmul
 11289 ;; This function is called by:
 11290 ;;		_vfpfcnvrt
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           	psect	text54
 11295   0041EC                     __ptext54:
 11296                           	callstack 0
 11297   0041EC                     _read_prec_or_width:
 11298                           	callstack 24
 11299   0041EC                     
 11300                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 11301   0041EC  0E00               	movlw	0
 11302   0041EE  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 11303   0041F0  0E00               	movlw	0
 11304   0041F2  6E0B               	movwf	read_prec_or_width@n^0,c
 11305   0041F4                     
 11306                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 11307   0041F4  5008               	movf	read_prec_or_width@fmt^0,w,c
 11308   0041F6  6ED9               	movwf	fsr2l,c
 11309   0041F8  6ADA               	clrf	fsr2h,c
 11310   0041FA  CFDF FFF6          	movff	indf2,tblptrl
 11311   0041FE                     	if	1	;There is more than 1 active tblptr byte
 11312   0041FE  0E0E               	movlw	high __smallconst
 11313   004200  6EF7               	movwf	tblptrh,c
 11314   004202                     	endif
 11315   004202                     	if	0	;tblptru may be non-zero
 11316   004202                     	endif
 11317   004202                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11318   004202  0E00               	movlw	low (__smallconst shr (0+16))
 11319   004204  6EF8               	movwf	tblptru,c
 11320   004206                     	endif
 11321   004206  0008               	tblrd		*
 11322   004208  50F5               	movf	tablat,w,c
 11323   00420A  0A2A               	xorlw	42
 11324   00420C  A4D8               	btfss	status,2,c
 11325   00420E  EF0B  F021         	goto	u2971
 11326   004212  EF0D  F021         	goto	u2970
 11327   004216                     u2971:
 11328   004216  EF33  F021         	goto	l3947
 11329   00421A                     u2970:
 11330   00421A                     
 11331                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 11332   00421A  5008               	movf	read_prec_or_width@fmt^0,w,c
 11333   00421C  6ED9               	movwf	fsr2l,c
 11334   00421E  6ADA               	clrf	fsr2h,c
 11335   004220  2ADF               	incf	indf2,f,c
 11336   004222                     
 11337                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 11338   004222  5009               	movf	read_prec_or_width@ap^0,w,c
 11339   004224  6ED9               	movwf	fsr2l,c
 11340   004226  6ADA               	clrf	fsr2h,c
 11341   004228  0E02               	movlw	2
 11342   00422A  26DF               	addwf	indf2,f,c
 11343   00422C  5CDF               	subwf	indf2,w,c
 11344   00422E  6ED9               	movwf	fsr2l,c
 11345   004230  6ADA               	clrf	fsr2h,c
 11346   004232  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 11347   004236  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 11348                           
 11349                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 11350   00423A  EF48  F021         	goto	l1572
 11351   00423E                     l3943:
 11352                           
 11353                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 11354   00423E  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 11355   004242  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 11356   004246  0E00               	movlw	0
 11357   004248  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 11358   00424A  0E0A               	movlw	10
 11359   00424C  6E04               	movwf	___wmul@multiplicand^0,c
 11360   00424E  EC0B  F028         	call	___wmul	;wreg free
 11361   004252  500A               	movf	read_prec_or_width@c^0,w,c
 11362   004254  2402               	addwf	?___wmul^0,w,c
 11363   004256  6E0B               	movwf	read_prec_or_width@n^0,c
 11364   004258  0E00               	movlw	0
 11365   00425A  2003               	addwfc	(?___wmul+1)^0,w,c
 11366   00425C  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 11367   00425E                     
 11368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 11369   00425E  5008               	movf	read_prec_or_width@fmt^0,w,c
 11370   004260  6ED9               	movwf	fsr2l,c
 11371   004262  6ADA               	clrf	fsr2h,c
 11372   004264  2ADF               	incf	indf2,f,c
 11373   004266                     l3947:
 11374                           
 11375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 11376   004266  5008               	movf	read_prec_or_width@fmt^0,w,c
 11377   004268  6ED9               	movwf	fsr2l,c
 11378   00426A  6ADA               	clrf	fsr2h,c
 11379   00426C  CFDF FFF6          	movff	indf2,tblptrl
 11380   004270                     	if	1	;There is more than 1 active tblptr byte
 11381   004270  0E0E               	movlw	high __smallconst
 11382   004272  6EF7               	movwf	tblptrh,c
 11383   004274                     	endif
 11384   004274                     	if	0	;tblptru may be non-zero
 11385   004274                     	endif
 11386   004274                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11387   004274  0E00               	movlw	low (__smallconst shr (0+16))
 11388   004276  6EF8               	movwf	tblptru,c
 11389   004278                     	endif
 11390   004278  0008               	tblrd		*
 11391   00427A  50F5               	movf	tablat,w,c
 11392   00427C  0FD0               	addlw	208
 11393   00427E  6E0A               	movwf	read_prec_or_width@c^0,c
 11394   004280  0E09               	movlw	9
 11395   004282  640A               	cpfsgt	read_prec_or_width@c^0,c
 11396   004284  EF46  F021         	goto	u2981
 11397   004288  EF48  F021         	goto	u2980
 11398   00428C                     u2981:
 11399   00428C  EF1F  F021         	goto	l3943
 11400   004290                     u2980:
 11401   004290                     l1572:
 11402                           
 11403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 11404   004290  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 11405   004294  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 11406   004298  0012               	return		;funcret
 11407   00429A                     __end_of_read_prec_or_width:
 11408                           	callstack 0
 11409                           
 11410 ;; *************** function ___wmul *****************
 11411 ;; Defined at:
 11412 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 11413 ;; Parameters:    Size  Location     Type
 11414 ;;  multiplier      2    1[COMRAM] unsigned int 
 11415 ;;  multiplicand    2    3[COMRAM] unsigned int 
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;  product         2    5[COMRAM] unsigned int 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  2    1[COMRAM] unsigned int 
 11420 ;; Registers used:
 11421 ;;		wreg, status,2, status,0, prodl, prodh
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11430 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11431 ;;Total ram usage:        6 bytes
 11432 ;; Hardware stack levels used: 1
 11433 ;; Hardware stack levels required when called: 1
 11434 ;; This function calls:
 11435 ;;		Nothing
 11436 ;; This function is called by:
 11437 ;;		_setMotorPWM
 11438 ;;		_read_prec_or_width
 11439 ;;		_ADC2String
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           	psect	text55
 11444   005016                     __ptext55:
 11445                           	callstack 0
 11446   005016                     ___wmul:
 11447                           	callstack 27
 11448   005016  5002               	movf	___wmul@multiplier^0,w,c
 11449   005018  0204               	mulwf	___wmul@multiplicand^0,c
 11450   00501A  CFF3 F006          	movff	prodl,___wmul@product
 11451   00501E  CFF4 F007          	movff	prodh,___wmul@product+1
 11452   005022  5002               	movf	___wmul@multiplier^0,w,c
 11453   005024  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 11454   005026  50F3               	movf	243,w,c
 11455   005028  2607               	addwf	(___wmul@product+1)^0,f,c
 11456   00502A  5003               	movf	(___wmul@multiplier+1)^0,w,c
 11457   00502C  0204               	mulwf	___wmul@multiplicand^0,c
 11458   00502E  50F3               	movf	243,w,c
 11459   005030  2607               	addwf	(___wmul@product+1)^0,f,c
 11460   005032  C006  F002         	movff	___wmul@product,?___wmul
 11461   005036  C007  F003         	movff	___wmul@product+1,?___wmul+1
 11462   00503A  0012               	return		;funcret
 11463   00503C                     __end_of___wmul:
 11464                           	callstack 0
 11465                           
 11466 ;; *************** function _dtoa *****************
 11467 ;; Defined at:
 11468 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 11471 ;;		 -> sprintf@f(12), 
 11472 ;;  d               2   24[COMRAM] int 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  i               2   32[COMRAM] int 
 11475 ;;  w               2   29[COMRAM] int 
 11476 ;;  s               1   31[COMRAM] unsigned char 
 11477 ;;  p               1   28[COMRAM] _Bool 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      void 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11487 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11488 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11490 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11491 ;;Total ram usage:       11 bytes
 11492 ;; Hardware stack levels used: 1
 11493 ;; Hardware stack levels required when called: 5
 11494 ;; This function calls:
 11495 ;;		___awdiv
 11496 ;;		___awmod
 11497 ;;		_abs
 11498 ;;		_pad
 11499 ;; This function is called by:
 11500 ;;		_vfpfcnvrt
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text56
 11505   0034E6                     __ptext56:
 11506                           	callstack 0
 11507   0034E6                     _dtoa:
 11508                           	callstack 21
 11509   0034E6                     
 11510                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 11511   0034E6  0E01               	movlw	1
 11512   0034E8  6E1D               	movwf	dtoa@p^0,c
 11513   0034EA                     
 11514                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 11515   0034EA  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 11516   0034EC  EF7A  F01A         	goto	u5251
 11517   0034F0  EF7D  F01A         	goto	u5250
 11518   0034F4                     u5251:
 11519   0034F4  0E01               	movlw	1
 11520   0034F6  EF7E  F01A         	goto	u5260
 11521   0034FA                     u5250:
 11522   0034FA  0E00               	movlw	0
 11523   0034FC                     u5260:
 11524   0034FC  6E20               	movwf	dtoa@s^0,c
 11525   0034FE                     
 11526                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 11527   0034FE  C0C4  F01E         	movff	_width,dtoa@w
 11528   003502  C0C5  F01F         	movff	_width+1,dtoa@w+1
 11529   003506                     
 11530                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 11531   003506  5020               	movf	dtoa@s^0,w,c
 11532   003508  B4D8               	btfsc	status,2,c
 11533   00350A  EF89  F01A         	goto	u5271
 11534   00350E  EF8B  F01A         	goto	u5270
 11535   003512                     u5271:
 11536   003512  EFA2  F01A         	goto	l1555
 11537   003516                     u5270:
 11538   003516                     
 11539                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 11540   003516  061E               	decf	dtoa@w^0,f,c
 11541   003518  A0D8               	btfss	status,0,c
 11542   00351A  061F               	decf	(dtoa@w+1)^0,f,c
 11543   00351C                     
 11544                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 11545   00351C  5020               	movf	dtoa@s^0,w,c
 11546   00351E  A4D8               	btfss	status,2,c
 11547   003520  EF94  F01A         	goto	u5281
 11548   003524  EF96  F01A         	goto	u5280
 11549   003528                     u5281:
 11550   003528  EF9C  F01A         	goto	l5861
 11551   00352C                     u5280:
 11552   00352C  0E00               	movlw	0
 11553   00352E  6E1C               	movwf	(_dtoa$3092+1)^0,c
 11554   003530  0E2B               	movlw	43
 11555   003532  6E1B               	movwf	_dtoa$3092^0,c
 11556   003534  EFA0  F01A         	goto	l5863
 11557   003538                     l5861:
 11558   003538  0E00               	movlw	0
 11559   00353A  6E1C               	movwf	(_dtoa$3092+1)^0,c
 11560   00353C  0E2D               	movlw	45
 11561   00353E  6E1B               	movwf	_dtoa$3092^0,c
 11562   003540                     l5863:
 11563   003540  C01B  F020         	movff	_dtoa$3092,dtoa@s
 11564   003544                     l1555:
 11565                           
 11566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 11567   003544  0E00               	movlw	0
 11568   003546  6E22               	movwf	(dtoa@i+1)^0,c
 11569   003548  0E1F               	movlw	31
 11570   00354A  6E21               	movwf	dtoa@i^0,c
 11571   00354C                     
 11572                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 11573   00354C  0E00               	movlw	0
 11574   00354E  0101               	movlb	1	; () banked
 11575   003550  6FB5               	movwf	(_dbuf+31)& (0+255),b
 11576                           
 11577                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 11578   003552  EFDA  F01A         	goto	l5877
 11579   003556                     l5867:
 11580                           
 11581                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 11582   003556  0621               	decf	dtoa@i^0,f,c
 11583   003558  A0D8               	btfss	status,0,c
 11584   00355A  0622               	decf	(dtoa@i+1)^0,f,c
 11585   00355C                     
 11586                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 11587   00355C  0E96               	movlw	low _dbuf
 11588   00355E  2421               	addwf	dtoa@i^0,w,c
 11589   003560  6ED9               	movwf	fsr2l,c
 11590   003562  0E01               	movlw	high _dbuf
 11591   003564  2022               	addwfc	(dtoa@i+1)^0,w,c
 11592   003566  6EDA               	movwf	fsr2h,c
 11593   003568  C019  F002         	movff	dtoa@d,___awmod@dividend
 11594   00356C  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 11595   003570  0E00               	movlw	0
 11596   003572  6E05               	movwf	(___awmod@divisor+1)^0,c
 11597   003574  0E0A               	movlw	10
 11598   003576  6E04               	movwf	___awmod@divisor^0,c
 11599   003578  EC9E  F020         	call	___awmod	;wreg free
 11600   00357C  C002  F008         	movff	?___awmod,abs@a
 11601   003580  C003  F009         	movff	?___awmod+1,abs@a+1
 11602   003584  EC9F  F026         	call	_abs	;wreg free
 11603   003588  5008               	movf	?_abs^0,w,c
 11604   00358A  0F30               	addlw	48
 11605   00358C  6EDF               	movwf	indf2,c
 11606   00358E                     
 11607                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 11608   00358E  0E00               	movlw	0
 11609   003590  6E1D               	movwf	dtoa@p^0,c
 11610   003592                     
 11611                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 11612   003592  061E               	decf	dtoa@w^0,f,c
 11613   003594  A0D8               	btfss	status,0,c
 11614   003596  061F               	decf	(dtoa@w+1)^0,f,c
 11615   003598                     
 11616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 11617   003598  C019  F002         	movff	dtoa@d,___awdiv@dividend
 11618   00359C  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 11619   0035A0  0E00               	movlw	0
 11620   0035A2  6E05               	movwf	(___awdiv@divisor+1)^0,c
 11621   0035A4  0E0A               	movlw	10
 11622   0035A6  6E04               	movwf	___awdiv@divisor^0,c
 11623   0035A8  EC3C  F020         	call	___awdiv	;wreg free
 11624   0035AC  C002  F019         	movff	?___awdiv,dtoa@d
 11625   0035B0  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 11626   0035B4                     l5877:
 11627                           
 11628                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 11629   0035B4  BE22               	btfsc	(dtoa@i+1)^0,7,c
 11630   0035B6  EFE5  F01A         	goto	u5291
 11631   0035BA  5022               	movf	(dtoa@i+1)^0,w,c
 11632   0035BC  E108               	bnz	u5290
 11633   0035BE  0421               	decf	dtoa@i^0,w,c
 11634   0035C0  A0D8               	btfss	status,0,c
 11635   0035C2  EFE5  F01A         	goto	u5291
 11636   0035C6  EFE7  F01A         	goto	u5290
 11637   0035CA                     u5291:
 11638   0035CA  EF0D  F01B         	goto	l5887
 11639   0035CE                     u5290:
 11640   0035CE  5019               	movf	dtoa@d^0,w,c
 11641   0035D0  101A               	iorwf	(dtoa@d+1)^0,w,c
 11642   0035D2  A4D8               	btfss	status,2,c
 11643   0035D4  EFEE  F01A         	goto	u5301
 11644   0035D8  EFF0  F01A         	goto	u5300
 11645   0035DC                     u5301:
 11646   0035DC  EFAB  F01A         	goto	l5867
 11647   0035E0                     u5300:
 11648   0035E0  501D               	movf	dtoa@p^0,w,c
 11649   0035E2  A4D8               	btfss	status,2,c
 11650   0035E4  EFF6  F01A         	goto	u5311
 11651   0035E8  EFF8  F01A         	goto	u5310
 11652   0035EC                     u5311:
 11653   0035EC  EFAB  F01A         	goto	l5867
 11654   0035F0                     u5310:
 11655   0035F0  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 11656   0035F2  EF03  F01B         	goto	u5321
 11657   0035F6  501F               	movf	(dtoa@w+1)^0,w,c
 11658   0035F8  E108               	bnz	u5320
 11659   0035FA  041E               	decf	dtoa@w^0,w,c
 11660   0035FC  A0D8               	btfss	status,0,c
 11661   0035FE  EF03  F01B         	goto	u5321
 11662   003602  EF05  F01B         	goto	u5320
 11663   003606                     u5321:
 11664   003606  EF0D  F01B         	goto	l5887
 11665   00360A                     u5320:
 11666   00360A  0100               	movlb	0	; () banked
 11667   00360C  B3C8               	btfsc	_flags& (0+255),1,b
 11668   00360E  EF0B  F01B         	goto	u5331
 11669   003612  EF0D  F01B         	goto	u5330
 11670   003616                     u5331:
 11671   003616  EFAB  F01A         	goto	l5867
 11672   00361A                     u5330:
 11673   00361A                     l5887:
 11674                           
 11675                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 11676   00361A  5020               	movf	dtoa@s^0,w,c
 11677   00361C  B4D8               	btfsc	status,2,c
 11678   00361E  EF13  F01B         	goto	u5341
 11679   003622  EF15  F01B         	goto	u5340
 11680   003626                     u5341:
 11681   003626  EF20  F01B         	goto	l5893
 11682   00362A                     u5340:
 11683   00362A                     
 11684                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 11685   00362A  0621               	decf	dtoa@i^0,f,c
 11686   00362C  A0D8               	btfss	status,0,c
 11687   00362E  0622               	decf	(dtoa@i+1)^0,f,c
 11688   003630                     
 11689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 11690   003630  0E96               	movlw	low _dbuf
 11691   003632  2421               	addwf	dtoa@i^0,w,c
 11692   003634  6ED9               	movwf	fsr2l,c
 11693   003636  0E01               	movlw	high _dbuf
 11694   003638  2022               	addwfc	(dtoa@i+1)^0,w,c
 11695   00363A  6EDA               	movwf	fsr2h,c
 11696   00363C  C020  FFDF         	movff	dtoa@s,indf2
 11697   003640                     l5893:
 11698                           
 11699                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 11700   003640  C018  F010         	movff	dtoa@fp,pad@fp
 11701   003644  0E96               	movlw	low _dbuf
 11702   003646  2421               	addwf	dtoa@i^0,w,c
 11703   003648  6E11               	movwf	pad@buf^0,c
 11704   00364A  0E01               	movlw	high _dbuf
 11705   00364C  2022               	addwfc	(dtoa@i+1)^0,w,c
 11706   00364E  6E12               	movwf	(pad@buf+1)^0,c
 11707   003650  C01E  F013         	movff	dtoa@w,pad@p
 11708   003654  C01F  F014         	movff	dtoa@w+1,pad@p+1
 11709   003658  EC46  F022         	call	_pad	;wreg free
 11710   00365C  0012               	return		;funcret
 11711   00365E                     __end_of_dtoa:
 11712                           	callstack 0
 11713                           
 11714 ;; *************** function _pad *****************
 11715 ;; Defined at:
 11716 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 11719 ;;		 -> sprintf@f(12), 
 11720 ;;  buf             2   16[COMRAM] PTR unsigned char 
 11721 ;;		 -> dbuf(32), 
 11722 ;;  p               2   18[COMRAM] int 
 11723 ;; Auto vars:     Size  Location     Type
 11724 ;;  i               2   21[COMRAM] int 
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  1    wreg      void 
 11727 ;; Registers used:
 11728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11734 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11737 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11738 ;;Total ram usage:        8 bytes
 11739 ;; Hardware stack levels used: 1
 11740 ;; Hardware stack levels required when called: 4
 11741 ;; This function calls:
 11742 ;;		_fputc
 11743 ;;		_fputs
 11744 ;; This function is called by:
 11745 ;;		_dtoa
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           	psect	text57
 11750   00448C                     __ptext57:
 11751                           	callstack 0
 11752   00448C                     _pad:
 11753                           	callstack 21
 11754   00448C                     
 11755                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 11756   00448C  0100               	movlb	0	; () banked
 11757   00448E  A1C8               	btfss	_flags& (0+255),0,b
 11758   004490  EF4C  F022         	goto	u5211
 11759   004494  EF4E  F022         	goto	u5210
 11760   004498                     u5211:
 11761   004498  EF56  F022         	goto	l5835
 11762   00449C                     u5210:
 11763   00449C                     
 11764                           ; BSR set to: 0
 11765                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 11766   00449C  C011  F00A         	movff	pad@buf,fputs@s
 11767   0044A0  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11768   0044A4  C010  F00C         	movff	pad@fp,fputs@fp
 11769   0044A8  EC9C  F025         	call	_fputs	;wreg free
 11770   0044AC                     l5835:
 11771                           
 11772                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 11773   0044AC  BE14               	btfsc	(pad@p+1)^0,7,c
 11774   0044AE  EF5D  F022         	goto	u5220
 11775   0044B2  EF5B  F022         	goto	u5221
 11776   0044B6                     u5221:
 11777   0044B6  EF61  F022         	goto	l1547
 11778   0044BA                     u5220:
 11779   0044BA                     
 11780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 11781   0044BA  0E00               	movlw	0
 11782   0044BC  6E14               	movwf	(pad@p+1)^0,c
 11783   0044BE  0E00               	movlw	0
 11784   0044C0  6E13               	movwf	pad@p^0,c
 11785   0044C2                     l1547:
 11786                           
 11787                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 11788   0044C2  0E00               	movlw	0
 11789   0044C4  6E17               	movwf	(pad@i+1)^0,c
 11790   0044C6  0E00               	movlw	0
 11791   0044C8  6E16               	movwf	pad@i^0,c
 11792                           
 11793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 11794   0044CA  EF71  F022         	goto	l5843
 11795   0044CE                     l5839:
 11796                           
 11797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 11798   0044CE  0E00               	movlw	0
 11799   0044D0  6E03               	movwf	(fputc@c+1)^0,c
 11800   0044D2  0E20               	movlw	32
 11801   0044D4  6E02               	movwf	fputc@c^0,c
 11802   0044D6  C010  F004         	movff	pad@fp,fputc@fp
 11803   0044DA  ECA2  F021         	call	_fputc	;wreg free
 11804   0044DE                     
 11805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 11806   0044DE  4A16               	infsnz	pad@i^0,f,c
 11807   0044E0  2A17               	incf	(pad@i+1)^0,f,c
 11808   0044E2                     l5843:
 11809                           
 11810                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 11811   0044E2  5013               	movf	pad@p^0,w,c
 11812   0044E4  5C16               	subwf	pad@i^0,w,c
 11813   0044E6  5017               	movf	(pad@i+1)^0,w,c
 11814   0044E8  0A80               	xorlw	128
 11815   0044EA  6E15               	movwf	??_pad^0,c
 11816   0044EC  5014               	movf	(pad@p+1)^0,w,c
 11817   0044EE  0A80               	xorlw	128
 11818   0044F0  5815               	subwfb	??_pad^0,w,c
 11819   0044F2  A0D8               	btfss	status,0,c
 11820   0044F4  EF7E  F022         	goto	u5231
 11821   0044F8  EF80  F022         	goto	u5230
 11822   0044FC                     u5231:
 11823   0044FC  EF67  F022         	goto	l5839
 11824   004500                     u5230:
 11825   004500                     
 11826                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 11827   004500  0100               	movlb	0	; () banked
 11828   004502  B1C8               	btfsc	_flags& (0+255),0,b
 11829   004504  EF86  F022         	goto	u5241
 11830   004508  EF88  F022         	goto	u5240
 11831   00450C                     u5241:
 11832   00450C  EF90  F022         	goto	l1552
 11833   004510                     u5240:
 11834   004510                     
 11835                           ; BSR set to: 0
 11836                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 11837   004510  C011  F00A         	movff	pad@buf,fputs@s
 11838   004514  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11839   004518  C010  F00C         	movff	pad@fp,fputs@fp
 11840   00451C  EC9C  F025         	call	_fputs	;wreg free
 11841   004520                     l1552:
 11842   004520  0012               	return		;funcret
 11843   004522                     __end_of_pad:
 11844                           	callstack 0
 11845                           
 11846 ;; *************** function _fputs *****************
 11847 ;; Defined at:
 11848 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;  s               2    9[COMRAM] PTR const unsigned char 
 11851 ;;		 -> dbuf(32), 
 11852 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 11853 ;;		 -> sprintf@f(12), 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  i               2   13[COMRAM] int 
 11856 ;;  c               1   12[COMRAM] unsigned char 
 11857 ;; Return value:  Size  Location     Type
 11858 ;;                  2    9[COMRAM] int 
 11859 ;; Registers used:
 11860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11861 ;; Tracked objects:
 11862 ;;		On entry : 0/0
 11863 ;;		On exit  : 0/0
 11864 ;;		Unchanged: 0/0
 11865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11866 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11867 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11869 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11870 ;;Total ram usage:        6 bytes
 11871 ;; Hardware stack levels used: 1
 11872 ;; Hardware stack levels required when called: 3
 11873 ;; This function calls:
 11874 ;;		_fputc
 11875 ;; This function is called by:
 11876 ;;		_pad
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text58
 11881   004B38                     __ptext58:
 11882                           	callstack 0
 11883   004B38                     _fputs:
 11884                           	callstack 21
 11885   004B38  0E00               	movlw	0
 11886   004B3A  6E0F               	movwf	(fputs@i+1)^0,c
 11887   004B3C  0E00               	movlw	0
 11888   004B3E  6E0E               	movwf	fputs@i^0,c
 11889   004B40  EFAB  F025         	goto	l5829
 11890   004B44                     l5825:
 11891   004B44  C00D  F002         	movff	fputs@c,fputc@c
 11892   004B48  6A03               	clrf	(fputc@c+1)^0,c
 11893   004B4A  C00C  F004         	movff	fputs@fp,fputc@fp
 11894   004B4E  ECA2  F021         	call	_fputc	;wreg free
 11895   004B52  4A0E               	infsnz	fputs@i^0,f,c
 11896   004B54  2A0F               	incf	(fputs@i+1)^0,f,c
 11897   004B56                     l5829:
 11898   004B56  500E               	movf	fputs@i^0,w,c
 11899   004B58  240A               	addwf	fputs@s^0,w,c
 11900   004B5A  6ED9               	movwf	fsr2l,c
 11901   004B5C  500F               	movf	(fputs@i+1)^0,w,c
 11902   004B5E  200B               	addwfc	(fputs@s+1)^0,w,c
 11903   004B60  6EDA               	movwf	fsr2h,c
 11904   004B62  50DF               	movf	indf2,w,c
 11905   004B64  6E0D               	movwf	fputs@c^0,c
 11906   004B66  500D               	movf	fputs@c^0,w,c
 11907   004B68  A4D8               	btfss	status,2,c
 11908   004B6A  EFB9  F025         	goto	u5201
 11909   004B6E  EFBB  F025         	goto	u5200
 11910   004B72                     u5201:
 11911   004B72  EFA2  F025         	goto	l5825
 11912   004B76                     u5200:
 11913   004B76  0012               	return		;funcret
 11914   004B78                     __end_of_fputs:
 11915                           	callstack 0
 11916                           
 11917 ;; *************** function _fputc *****************
 11918 ;; Defined at:
 11919 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  c               2    1[COMRAM] int 
 11922 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 11923 ;;		 -> sprintf@f(12), 
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;		None
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  2    1[COMRAM] int 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11937 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11938 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11939 ;;Total ram usage:        8 bytes
 11940 ;; Hardware stack levels used: 1
 11941 ;; Hardware stack levels required when called: 2
 11942 ;; This function calls:
 11943 ;;		_putch
 11944 ;; This function is called by:
 11945 ;;		_pad
 11946 ;;		_vfpfcnvrt
 11947 ;;		_fputs
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           	psect	text59
 11952   004344                     __ptext59:
 11953                           	callstack 0
 11954   004344                     _fputc:
 11955                           	callstack 24
 11956   004344  5004               	movf	fputc@fp^0,w,c
 11957   004346  B4D8               	btfsc	status,2,c
 11958   004348  EFA8  F021         	goto	u2621
 11959   00434C  EFAA  F021         	goto	u2620
 11960   004350                     u2621:
 11961   004350  EFB2  F021         	goto	l3739
 11962   004354                     u2620:
 11963   004354  5004               	movf	fputc@fp^0,w,c
 11964   004356  A4D8               	btfss	status,2,c
 11965   004358  EFB0  F021         	goto	u2631
 11966   00435C  EFB2  F021         	goto	u2630
 11967   004360                     u2631:
 11968   004360  EFB7  F021         	goto	l3741
 11969   004364                     u2630:
 11970   004364                     l3739:
 11971   004364  5002               	movf	fputc@c^0,w,c
 11972   004366  EC7A  F028         	call	_putch
 11973   00436A  EFF6  F021         	goto	l1616
 11974   00436E                     l3741:
 11975   00436E  5004               	movf	fputc@fp^0,w,c
 11976   004370  6ED9               	movwf	fsr2l,c
 11977   004372  6ADA               	clrf	fsr2h,c
 11978   004374  0E0A               	movlw	10
 11979   004376  26D9               	addwf	fsr2l,f,c
 11980   004378  50DE               	movf	postinc2,w,c
 11981   00437A  10DE               	iorwf	postinc2,w,c
 11982   00437C  B4D8               	btfsc	status,2,c
 11983   00437E  EFC3  F021         	goto	u2641
 11984   004382  EFC5  F021         	goto	u2640
 11985   004386                     u2641:
 11986   004386  EFDE  F021         	goto	l3745
 11987   00438A                     u2640:
 11988   00438A  5004               	movf	fputc@fp^0,w,c
 11989   00438C  6ED9               	movwf	fsr2l,c
 11990   00438E  6ADA               	clrf	fsr2h,c
 11991   004390  0E0A               	movlw	10
 11992   004392  26D9               	addwf	fsr2l,f,c
 11993   004394  5004               	movf	fputc@fp^0,w,c
 11994   004396  6EE1               	movwf	fsr1l,c
 11995   004398  6AE2               	clrf	fsr1h,c
 11996   00439A  0E03               	movlw	3
 11997   00439C  26E1               	addwf	fsr1l,f,c
 11998   00439E  50DE               	movf	postinc2,w,c
 11999   0043A0  5CE6               	subwf	postinc1,w,c
 12000   0043A2  50E6               	movf	postinc1,w,c
 12001   0043A4  0A80               	xorlw	128
 12002   0043A6  6E09               	movwf	(??_fputc+4)^0,c
 12003   0043A8  50DE               	movf	postinc2,w,c
 12004   0043AA  0A80               	xorlw	128
 12005   0043AC  5809               	subwfb	(??_fputc+4)^0,w,c
 12006   0043AE  B0D8               	btfsc	status,0,c
 12007   0043B0  EFDC  F021         	goto	u2651
 12008   0043B4  EFDE  F021         	goto	u2650
 12009   0043B8                     u2651:
 12010   0043B8  EFF6  F021         	goto	l1616
 12011   0043BC                     u2650:
 12012   0043BC                     l3745:
 12013   0043BC  5004               	movf	fputc@fp^0,w,c
 12014   0043BE  6ED9               	movwf	fsr2l,c
 12015   0043C0  6ADA               	clrf	fsr2h,c
 12016   0043C2  0E03               	movlw	3
 12017   0043C4  26D9               	addwf	fsr2l,f,c
 12018   0043C6  50DF               	movf	indf2,w,c
 12019   0043C8  6E05               	movwf	??_fputc^0,c
 12020   0043CA  5004               	movf	fputc@fp^0,w,c
 12021   0043CC  6ED9               	movwf	fsr2l,c
 12022   0043CE  6ADA               	clrf	fsr2h,c
 12023   0043D0  50DF               	movf	indf2,w,c
 12024   0043D2  2405               	addwf	??_fputc^0,w,c
 12025   0043D4  6ED9               	movwf	fsr2l,c
 12026   0043D6  6ADA               	clrf	fsr2h,c
 12027   0043D8  C002  FFDF         	movff	fputc@c,indf2
 12028   0043DC  5004               	movf	fputc@fp^0,w,c
 12029   0043DE  6ED9               	movwf	fsr2l,c
 12030   0043E0  6ADA               	clrf	fsr2h,c
 12031   0043E2  0E03               	movlw	3
 12032   0043E4  26D9               	addwf	fsr2l,f,c
 12033   0043E6  2ADE               	incf	postinc2,f,c
 12034   0043E8  0E00               	movlw	0
 12035   0043EA  22DD               	addwfc	postdec2,f,c
 12036   0043EC                     l1616:
 12037   0043EC  0012               	return		;funcret
 12038   0043EE                     __end_of_fputc:
 12039                           	callstack 0
 12040                           
 12041 ;; *************** function _putch *****************
 12042 ;; Defined at:
 12043 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  c               1    wreg     unsigned char 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  c               1    0[COMRAM] unsigned char 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12061 ;;Total ram usage:        0 bytes
 12062 ;; Hardware stack levels used: 1
 12063 ;; Hardware stack levels required when called: 1
 12064 ;; This function calls:
 12065 ;;		Nothing
 12066 ;; This function is called by:
 12067 ;;		_fputc
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           	psect	text60
 12072   0050F4                     __ptext60:
 12073                           	callstack 0
 12074   0050F4                     _putch:
 12075                           	callstack 24
 12076   0050F4  0012               	return		;funcret
 12077   0050F6                     __end_of_putch:
 12078                           	callstack 0
 12079                           
 12080 ;; *************** function _abs *****************
 12081 ;; Defined at:
 12082 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  a               2    7[COMRAM] int 
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;		None
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  2    7[COMRAM] int 
 12089 ;; Registers used:
 12090 ;;		wreg, status,2, status,0
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12099 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12100 ;;Total ram usage:        4 bytes
 12101 ;; Hardware stack levels used: 1
 12102 ;; Hardware stack levels required when called: 1
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_dtoa
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           	psect	text61
 12111   004D3E                     __ptext61:
 12112                           	callstack 0
 12113   004D3E                     _abs:
 12114                           	callstack 24
 12115   004D3E  BE09               	btfsc	(abs@a+1)^0,7,c
 12116   004D40  EFA4  F026         	goto	u2831
 12117   004D44  EFA6  F026         	goto	u2830
 12118   004D48                     u2831:
 12119   004D48  EFAC  F026         	goto	l1601
 12120   004D4C                     u2830:
 12121   004D4C  C008  F008         	movff	abs@a,?_abs
 12122   004D50  C009  F009         	movff	abs@a+1,?_abs+1
 12123   004D54  EFB8  F026         	goto	l1604
 12124   004D58                     l1601:
 12125   004D58  C008  F00A         	movff	abs@a,??_abs
 12126   004D5C  C009  F00B         	movff	abs@a+1,??_abs+1
 12127   004D60  1E0A               	comf	??_abs^0,f,c
 12128   004D62  1E0B               	comf	(??_abs+1)^0,f,c
 12129   004D64  4A0A               	infsnz	??_abs^0,f,c
 12130   004D66  2A0B               	incf	(??_abs+1)^0,f,c
 12131   004D68  C00A  F008         	movff	??_abs,?_abs
 12132   004D6C  C00B  F009         	movff	??_abs+1,?_abs+1
 12133   004D70                     l1604:
 12134   004D70  0012               	return		;funcret
 12135   004D72                     __end_of_abs:
 12136                           	callstack 0
 12137                           
 12138 ;; *************** function ___awmod *****************
 12139 ;; Defined at:
 12140 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 12141 ;; Parameters:    Size  Location     Type
 12142 ;;  dividend        2    1[COMRAM] int 
 12143 ;;  divisor         2    3[COMRAM] int 
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;  sign            1    6[COMRAM] unsigned char 
 12146 ;;  counter         1    5[COMRAM] unsigned char 
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  2    1[COMRAM] int 
 12149 ;; Registers used:
 12150 ;;		wreg, status,2, status,0
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12159 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12160 ;;Total ram usage:        6 bytes
 12161 ;; Hardware stack levels used: 1
 12162 ;; Hardware stack levels required when called: 1
 12163 ;; This function calls:
 12164 ;;		Nothing
 12165 ;; This function is called by:
 12166 ;;		_dtoa
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170                           	psect	text62
 12171   00413C                     __ptext62:
 12172                           	callstack 0
 12173   00413C                     ___awmod:
 12174                           	callstack 24
 12175   00413C  0E00               	movlw	0
 12176   00413E  6E07               	movwf	___awmod@sign^0,c
 12177   004140  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 12178   004142  EFA7  F020         	goto	u2730
 12179   004146  EFA5  F020         	goto	u2731
 12180   00414A                     u2731:
 12181   00414A  EFAD  F020         	goto	l3815
 12182   00414E                     u2730:
 12183   00414E  6C02               	negf	___awmod@dividend^0,c
 12184   004150  1E03               	comf	(___awmod@dividend+1)^0,f,c
 12185   004152  B0D8               	btfsc	status,0,c
 12186   004154  2A03               	incf	(___awmod@dividend+1)^0,f,c
 12187   004156  0E01               	movlw	1
 12188   004158  6E07               	movwf	___awmod@sign^0,c
 12189   00415A                     l3815:
 12190   00415A  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 12191   00415C  EFB4  F020         	goto	u2740
 12192   004160  EFB2  F020         	goto	u2741
 12193   004164                     u2741:
 12194   004164  EFB8  F020         	goto	l3819
 12195   004168                     u2740:
 12196   004168  6C04               	negf	___awmod@divisor^0,c
 12197   00416A  1E05               	comf	(___awmod@divisor+1)^0,f,c
 12198   00416C  B0D8               	btfsc	status,0,c
 12199   00416E  2A05               	incf	(___awmod@divisor+1)^0,f,c
 12200   004170                     l3819:
 12201   004170  5004               	movf	___awmod@divisor^0,w,c
 12202   004172  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 12203   004174  B4D8               	btfsc	status,2,c
 12204   004176  EFBF  F020         	goto	u2751
 12205   00417A  EFC1  F020         	goto	u2750
 12206   00417E                     u2751:
 12207   00417E  EFE5  F020         	goto	l3835
 12208   004182                     u2750:
 12209   004182  0E01               	movlw	1
 12210   004184  6E06               	movwf	___awmod@counter^0,c
 12211   004186  EFC9  F020         	goto	l3825
 12212   00418A                     l3823:
 12213   00418A  90D8               	bcf	status,0,c
 12214   00418C  3604               	rlcf	___awmod@divisor^0,f,c
 12215   00418E  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 12216   004190  2A06               	incf	___awmod@counter^0,f,c
 12217   004192                     l3825:
 12218   004192  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 12219   004194  EFCE  F020         	goto	u2761
 12220   004198  EFD0  F020         	goto	u2760
 12221   00419C                     u2761:
 12222   00419C  EFC5  F020         	goto	l3823
 12223   0041A0                     u2760:
 12224   0041A0                     l3827:
 12225   0041A0  5004               	movf	___awmod@divisor^0,w,c
 12226   0041A2  5C02               	subwf	___awmod@dividend^0,w,c
 12227   0041A4  5005               	movf	(___awmod@divisor+1)^0,w,c
 12228   0041A6  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 12229   0041A8  A0D8               	btfss	status,0,c
 12230   0041AA  EFD9  F020         	goto	u2771
 12231   0041AE  EFDB  F020         	goto	u2770
 12232   0041B2                     u2771:
 12233   0041B2  EFDF  F020         	goto	l3831
 12234   0041B6                     u2770:
 12235   0041B6  5004               	movf	___awmod@divisor^0,w,c
 12236   0041B8  5E02               	subwf	___awmod@dividend^0,f,c
 12237   0041BA  5005               	movf	(___awmod@divisor+1)^0,w,c
 12238   0041BC  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 12239   0041BE                     l3831:
 12240   0041BE  90D8               	bcf	status,0,c
 12241   0041C0  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 12242   0041C2  3204               	rrcf	___awmod@divisor^0,f,c
 12243   0041C4  2E06               	decfsz	___awmod@counter^0,f,c
 12244   0041C6  EFD0  F020         	goto	l3827
 12245   0041CA                     l3835:
 12246   0041CA  5007               	movf	___awmod@sign^0,w,c
 12247   0041CC  B4D8               	btfsc	status,2,c
 12248   0041CE  EFEB  F020         	goto	u2781
 12249   0041D2  EFED  F020         	goto	u2780
 12250   0041D6                     u2781:
 12251   0041D6  EFF1  F020         	goto	l3839
 12252   0041DA                     u2780:
 12253   0041DA  6C02               	negf	___awmod@dividend^0,c
 12254   0041DC  1E03               	comf	(___awmod@dividend+1)^0,f,c
 12255   0041DE  B0D8               	btfsc	status,0,c
 12256   0041E0  2A03               	incf	(___awmod@dividend+1)^0,f,c
 12257   0041E2                     l3839:
 12258   0041E2  C002  F002         	movff	___awmod@dividend,?___awmod
 12259   0041E6  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 12260   0041EA  0012               	return		;funcret
 12261   0041EC                     __end_of___awmod:
 12262                           	callstack 0
 12263                           
 12264 ;; *************** function ___awdiv *****************
 12265 ;; Defined at:
 12266 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 12267 ;; Parameters:    Size  Location     Type
 12268 ;;  dividend        2    1[COMRAM] int 
 12269 ;;  divisor         2    3[COMRAM] int 
 12270 ;; Auto vars:     Size  Location     Type
 12271 ;;  quotient        2    7[COMRAM] int 
 12272 ;;  sign            1    6[COMRAM] unsigned char 
 12273 ;;  counter         1    5[COMRAM] unsigned char 
 12274 ;; Return value:  Size  Location     Type
 12275 ;;                  2    1[COMRAM] int 
 12276 ;; Registers used:
 12277 ;;		wreg, status,2, status,0
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12284 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12286 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12287 ;;Total ram usage:        8 bytes
 12288 ;; Hardware stack levels used: 1
 12289 ;; Hardware stack levels required when called: 1
 12290 ;; This function calls:
 12291 ;;		Nothing
 12292 ;; This function is called by:
 12293 ;;		_dtoa
 12294 ;; This function uses a non-reentrant model
 12295 ;;
 12296                           
 12297                           	psect	text63
 12298   004078                     __ptext63:
 12299                           	callstack 0
 12300   004078                     ___awdiv:
 12301                           	callstack 24
 12302   004078  0E00               	movlw	0
 12303   00407A  6E07               	movwf	___awdiv@sign^0,c
 12304   00407C  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 12305   00407E  EF45  F020         	goto	u2670
 12306   004082  EF43  F020         	goto	u2671
 12307   004086                     u2671:
 12308   004086  EF4B  F020         	goto	l3771
 12309   00408A                     u2670:
 12310   00408A  6C04               	negf	___awdiv@divisor^0,c
 12311   00408C  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 12312   00408E  B0D8               	btfsc	status,0,c
 12313   004090  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 12314   004092  0E01               	movlw	1
 12315   004094  6E07               	movwf	___awdiv@sign^0,c
 12316   004096                     l3771:
 12317   004096  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 12318   004098  EF52  F020         	goto	u2680
 12319   00409C  EF50  F020         	goto	u2681
 12320   0040A0                     u2681:
 12321   0040A0  EF58  F020         	goto	l3777
 12322   0040A4                     u2680:
 12323   0040A4  6C02               	negf	___awdiv@dividend^0,c
 12324   0040A6  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 12325   0040A8  B0D8               	btfsc	status,0,c
 12326   0040AA  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 12327   0040AC  0E01               	movlw	1
 12328   0040AE  1A07               	xorwf	___awdiv@sign^0,f,c
 12329   0040B0                     l3777:
 12330   0040B0  0E00               	movlw	0
 12331   0040B2  6E09               	movwf	(___awdiv@quotient+1)^0,c
 12332   0040B4  0E00               	movlw	0
 12333   0040B6  6E08               	movwf	___awdiv@quotient^0,c
 12334   0040B8  5004               	movf	___awdiv@divisor^0,w,c
 12335   0040BA  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 12336   0040BC  B4D8               	btfsc	status,2,c
 12337   0040BE  EF63  F020         	goto	u2691
 12338   0040C2  EF65  F020         	goto	u2690
 12339   0040C6                     u2691:
 12340   0040C6  EF8D  F020         	goto	l3799
 12341   0040CA                     u2690:
 12342   0040CA  0E01               	movlw	1
 12343   0040CC  6E06               	movwf	___awdiv@counter^0,c
 12344   0040CE  EF6D  F020         	goto	l3785
 12345   0040D2                     l3783:
 12346   0040D2  90D8               	bcf	status,0,c
 12347   0040D4  3604               	rlcf	___awdiv@divisor^0,f,c
 12348   0040D6  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 12349   0040D8  2A06               	incf	___awdiv@counter^0,f,c
 12350   0040DA                     l3785:
 12351   0040DA  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 12352   0040DC  EF72  F020         	goto	u2701
 12353   0040E0  EF74  F020         	goto	u2700
 12354   0040E4                     u2701:
 12355   0040E4  EF69  F020         	goto	l3783
 12356   0040E8                     u2700:
 12357   0040E8                     l3787:
 12358   0040E8  90D8               	bcf	status,0,c
 12359   0040EA  3608               	rlcf	___awdiv@quotient^0,f,c
 12360   0040EC  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 12361   0040EE  5004               	movf	___awdiv@divisor^0,w,c
 12362   0040F0  5C02               	subwf	___awdiv@dividend^0,w,c
 12363   0040F2  5005               	movf	(___awdiv@divisor+1)^0,w,c
 12364   0040F4  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 12365   0040F6  A0D8               	btfss	status,0,c
 12366   0040F8  EF80  F020         	goto	u2711
 12367   0040FC  EF82  F020         	goto	u2710
 12368   004100                     u2711:
 12369   004100  EF87  F020         	goto	l3795
 12370   004104                     u2710:
 12371   004104  5004               	movf	___awdiv@divisor^0,w,c
 12372   004106  5E02               	subwf	___awdiv@dividend^0,f,c
 12373   004108  5005               	movf	(___awdiv@divisor+1)^0,w,c
 12374   00410A  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 12375   00410C  8008               	bsf	___awdiv@quotient^0,0,c
 12376   00410E                     l3795:
 12377   00410E  90D8               	bcf	status,0,c
 12378   004110  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 12379   004112  3204               	rrcf	___awdiv@divisor^0,f,c
 12380   004114  2E06               	decfsz	___awdiv@counter^0,f,c
 12381   004116  EF74  F020         	goto	l3787
 12382   00411A                     l3799:
 12383   00411A  5007               	movf	___awdiv@sign^0,w,c
 12384   00411C  B4D8               	btfsc	status,2,c
 12385   00411E  EF93  F020         	goto	u2721
 12386   004122  EF95  F020         	goto	u2720
 12387   004126                     u2721:
 12388   004126  EF99  F020         	goto	l3803
 12389   00412A                     u2720:
 12390   00412A  6C08               	negf	___awdiv@quotient^0,c
 12391   00412C  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 12392   00412E  B0D8               	btfsc	status,0,c
 12393   004130  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 12394   004132                     l3803:
 12395   004132  C008  F002         	movff	___awdiv@quotient,?___awdiv
 12396   004136  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 12397   00413A  0012               	return		;funcret
 12398   00413C                     __end_of___awdiv:
 12399                           	callstack 0
 12400                           
 12401 ;; *************** function _sendStringSerial4 *****************
 12402 ;; Defined at:
 12403 ;;		line 41 in file "serial.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;  string          1    2[COMRAM] PTR unsigned char 
 12406 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12418 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12422 ;;Total ram usage:        1 bytes
 12423 ;; Hardware stack levels used: 1
 12424 ;; Hardware stack levels required when called: 2
 12425 ;; This function calls:
 12426 ;;		_sendCharSerial4
 12427 ;; This function is called by:
 12428 ;;		_send2USART
 12429 ;;		_calibration_colors
 12430 ;;		_sendAllReadings
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           	psect	text64
 12435   004F02                     __ptext64:
 12436                           	callstack 0
 12437   004F02                     _sendStringSerial4:
 12438                           	callstack 27
 12439   004F02                     
 12440                           ;serial.c: 44:     while(*string != 0){
 12441   004F02  EF8E  F027         	goto	l4665
 12442   004F06                     l4659:
 12443                           
 12444                           ;serial.c: 46:   sendCharSerial4(*string++);
 12445   004F06  5003               	movf	sendStringSerial4@string^0,w,c
 12446   004F08  6ED9               	movwf	fsr2l,c
 12447   004F0A  6ADA               	clrf	fsr2h,c
 12448   004F0C  50DF               	movf	indf2,w,c
 12449   004F0E  EC59  F028         	call	_sendCharSerial4
 12450   004F12  2A03               	incf	sendStringSerial4@string^0,f,c
 12451   004F14                     
 12452                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 12453   004F14  0E6A               	movlw	106
 12454   004F16                     u6107:
 12455   004F16  2EE8               	decfsz	wreg,f,c
 12456   004F18  D7FE               	bra	u6107
 12457   004F1A  D000               	nop2	
 12458   004F1C                     l4665:
 12459                           
 12460                           ;serial.c: 44:     while(*string != 0){
 12461   004F1C  5003               	movf	sendStringSerial4@string^0,w,c
 12462   004F1E  6ED9               	movwf	fsr2l,c
 12463   004F20  6ADA               	clrf	fsr2h,c
 12464   004F22  50DF               	movf	indf2,w,c
 12465   004F24  A4D8               	btfss	status,2,c
 12466   004F26  EF97  F027         	goto	u3961
 12467   004F2A  EF99  F027         	goto	u3960
 12468   004F2E                     u3961:
 12469   004F2E  EF83  F027         	goto	l4659
 12470   004F32                     u3960:
 12471   004F32  0012               	return		;funcret
 12472   004F34                     __end_of_sendStringSerial4:
 12473                           	callstack 0
 12474                           
 12475 ;; *************** function _sendCharSerial4 *****************
 12476 ;; Defined at:
 12477 ;;		line 35 in file "serial.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  charToSend      1    wreg     unsigned char 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  charToSend      1    1[COMRAM] unsigned char 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12495 ;;Total ram usage:        1 bytes
 12496 ;; Hardware stack levels used: 1
 12497 ;; Hardware stack levels required when called: 1
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		_sendStringSerial4
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           	psect	text65
 12506   0050B2                     __ptext65:
 12507                           	callstack 0
 12508   0050B2                     _sendCharSerial4:
 12509                           	callstack 27
 12510                           
 12511                           ;incstack = 0
 12512                           ;sendCharSerial4@charToSend stored from wreg
 12513   0050B2  6E02               	movwf	sendCharSerial4@charToSend^0,c
 12514   0050B4                     l532:
 12515   0050B4  010E               	movlb	14	; () banked
 12516   0050B6  A537               	btfss	55,2,b	;volatile
 12517   0050B8  EF60  F028         	goto	u3161
 12518   0050BC  EF62  F028         	goto	u3160
 12519   0050C0                     u3161:
 12520   0050C0  EF5A  F028         	goto	l532
 12521   0050C4                     u3160:
 12522   0050C4                     
 12523                           ; BSR set to: 14
 12524                           ;serial.c: 37:     TX4REG = charToSend;
 12525   0050C4  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 12526   0050C8                     
 12527                           ; BSR set to: 14
 12528   0050C8  0012               	return		;funcret
 12529   0050CA                     __end_of_sendCharSerial4:
 12530                           	callstack 0
 12531                           
 12532 ;; *************** function _color_read_Red *****************
 12533 ;; Defined at:
 12534 ;;		line 33 in file "color.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;		None
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  tmp             2   10[COMRAM] unsigned int 
 12539 ;; Return value:  Size  Location     Type
 12540 ;;                  2    5[COMRAM] unsigned int 
 12541 ;; Registers used:
 12542 ;;		wreg, status,2, status,0, cstack
 12543 ;; Tracked objects:
 12544 ;;		On entry : 0/0
 12545 ;;		On exit  : 0/0
 12546 ;;		Unchanged: 0/0
 12547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12549 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12550 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12551 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12552 ;;Total ram usage:        7 bytes
 12553 ;; Hardware stack levels used: 1
 12554 ;; Hardware stack levels required when called: 3
 12555 ;; This function calls:
 12556 ;;		_I2C_2_Master_Read
 12557 ;;		_I2C_2_Master_RepStart
 12558 ;;		_I2C_2_Master_Start
 12559 ;;		_I2C_2_Master_Stop
 12560 ;;		_I2C_2_Master_Write
 12561 ;; This function is called by:
 12562 ;;		_reading_hue
 12563 ;;		_calibration_colors
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           	psect	text66
 12568   0048EA                     __ptext66:
 12569                           	callstack 0
 12570   0048EA                     _color_read_Red:
 12571                           	callstack 26
 12572   0048EA                     
 12573                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 12574   0048EA  EC70  F028         	call	_I2C_2_Master_Start	;wreg free
 12575                           
 12576                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 12577   0048EE  0E52               	movlw	82
 12578   0048F0  EC65  F028         	call	_I2C_2_Master_Write
 12579                           
 12580                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 12581   0048F4  0EB6               	movlw	182
 12582   0048F6  EC65  F028         	call	_I2C_2_Master_Write
 12583                           
 12584                           ;color.c: 39:  I2C_2_Master_RepStart();
 12585   0048FA  EC75  F028         	call	_I2C_2_Master_RepStart	;wreg free
 12586                           
 12587                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 12588   0048FE  0E53               	movlw	83
 12589   004900  EC65  F028         	call	_I2C_2_Master_Write
 12590                           
 12591                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 12592   004904  0E01               	movlw	1
 12593   004906  EC7B  F025         	call	_I2C_2_Master_Read
 12594   00490A  6E08               	movwf	??_color_read_Red^0,c
 12595   00490C  5008               	movf	??_color_read_Red^0,w,c
 12596   00490E  6E0B               	movwf	color_read_Red@tmp^0,c
 12597   004910  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 12598                           
 12599                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12600   004912  0E00               	movlw	0
 12601   004914  EC7B  F025         	call	_I2C_2_Master_Read
 12602   004918  6E08               	movwf	??_color_read_Red^0,c
 12603   00491A  5008               	movf	??_color_read_Red^0,w,c
 12604   00491C  6E0A               	movwf	(??_color_read_Red+2)^0,c
 12605   00491E  6A09               	clrf	(??_color_read_Red+1)^0,c
 12606   004920  500B               	movf	color_read_Red@tmp^0,w,c
 12607   004922  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 12608   004924  6E0B               	movwf	color_read_Red@tmp^0,c
 12609   004926  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 12610   004928  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 12611   00492A  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 12612                           
 12613                           ;color.c: 43:  I2C_2_Master_Stop();
 12614   00492C  EC6B  F028         	call	_I2C_2_Master_Stop	;wreg free
 12615   004930                     
 12616                           ;color.c: 44:  return tmp;
 12617   004930  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 12618   004934  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 12619   004938  0012               	return		;funcret
 12620   00493A                     __end_of_color_read_Red:
 12621                           	callstack 0
 12622                           
 12623 ;; *************** function _color_read_Green *****************
 12624 ;; Defined at:
 12625 ;;		line 47 in file "color.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;		None
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  tmp             2   10[COMRAM] unsigned int 
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  2    5[COMRAM] unsigned int 
 12632 ;; Registers used:
 12633 ;;		wreg, status,2, status,0, cstack
 12634 ;; Tracked objects:
 12635 ;;		On entry : 0/0
 12636 ;;		On exit  : 0/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12641 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12642 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12643 ;;Total ram usage:        7 bytes
 12644 ;; Hardware stack levels used: 1
 12645 ;; Hardware stack levels required when called: 3
 12646 ;; This function calls:
 12647 ;;		_I2C_2_Master_Read
 12648 ;;		_I2C_2_Master_RepStart
 12649 ;;		_I2C_2_Master_Start
 12650 ;;		_I2C_2_Master_Stop
 12651 ;;		_I2C_2_Master_Write
 12652 ;; This function is called by:
 12653 ;;		_reading_hue
 12654 ;;		_calibration_colors
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           	psect	text67
 12659   00493A                     __ptext67:
 12660                           	callstack 0
 12661   00493A                     _color_read_Green:
 12662                           	callstack 26
 12663   00493A                     
 12664                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 12665   00493A  EC70  F028         	call	_I2C_2_Master_Start	;wreg free
 12666                           
 12667                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 12668   00493E  0E52               	movlw	82
 12669   004940  EC65  F028         	call	_I2C_2_Master_Write
 12670                           
 12671                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 12672   004944  0EB8               	movlw	184
 12673   004946  EC65  F028         	call	_I2C_2_Master_Write
 12674                           
 12675                           ;color.c: 53:  I2C_2_Master_RepStart();
 12676   00494A  EC75  F028         	call	_I2C_2_Master_RepStart	;wreg free
 12677                           
 12678                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 12679   00494E  0E53               	movlw	83
 12680   004950  EC65  F028         	call	_I2C_2_Master_Write
 12681                           
 12682                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 12683   004954  0E01               	movlw	1
 12684   004956  EC7B  F025         	call	_I2C_2_Master_Read
 12685   00495A  6E08               	movwf	??_color_read_Green^0,c
 12686   00495C  5008               	movf	??_color_read_Green^0,w,c
 12687   00495E  6E0B               	movwf	color_read_Green@tmp^0,c
 12688   004960  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 12689                           
 12690                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12691   004962  0E00               	movlw	0
 12692   004964  EC7B  F025         	call	_I2C_2_Master_Read
 12693   004968  6E08               	movwf	??_color_read_Green^0,c
 12694   00496A  5008               	movf	??_color_read_Green^0,w,c
 12695   00496C  6E0A               	movwf	(??_color_read_Green+2)^0,c
 12696   00496E  6A09               	clrf	(??_color_read_Green+1)^0,c
 12697   004970  500B               	movf	color_read_Green@tmp^0,w,c
 12698   004972  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 12699   004974  6E0B               	movwf	color_read_Green@tmp^0,c
 12700   004976  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 12701   004978  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 12702   00497A  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 12703                           
 12704                           ;color.c: 57:  I2C_2_Master_Stop();
 12705   00497C  EC6B  F028         	call	_I2C_2_Master_Stop	;wreg free
 12706   004980                     
 12707                           ;color.c: 58:  return tmp;
 12708   004980  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 12709   004984  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 12710   004988  0012               	return		;funcret
 12711   00498A                     __end_of_color_read_Green:
 12712                           	callstack 0
 12713                           
 12714 ;; *************** function _color_read_Clear *****************
 12715 ;; Defined at:
 12716 ;;		line 76 in file "color.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;		None
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  tmp             2   10[COMRAM] unsigned int 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  2    5[COMRAM] unsigned int 
 12723 ;; Registers used:
 12724 ;;		wreg, status,2, status,0, cstack
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12731 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12732 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12733 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12734 ;;Total ram usage:        7 bytes
 12735 ;; Hardware stack levels used: 1
 12736 ;; Hardware stack levels required when called: 3
 12737 ;; This function calls:
 12738 ;;		_I2C_2_Master_Read
 12739 ;;		_I2C_2_Master_RepStart
 12740 ;;		_I2C_2_Master_Start
 12741 ;;		_I2C_2_Master_Stop
 12742 ;;		_I2C_2_Master_Write
 12743 ;; This function is called by:
 12744 ;;		_reading_hue
 12745 ;;		_main
 12746 ;;		_calibration_colors
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text68
 12751   00498A                     __ptext68:
 12752                           	callstack 0
 12753   00498A                     _color_read_Clear:
 12754                           	callstack 26
 12755   00498A                     
 12756                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 12757   00498A  EC70  F028         	call	_I2C_2_Master_Start	;wreg free
 12758                           
 12759                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 12760   00498E  0E52               	movlw	82
 12761   004990  EC65  F028         	call	_I2C_2_Master_Write
 12762                           
 12763                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 12764   004994  0EB4               	movlw	180
 12765   004996  EC65  F028         	call	_I2C_2_Master_Write
 12766                           
 12767                           ;color.c: 82:  I2C_2_Master_RepStart();
 12768   00499A  EC75  F028         	call	_I2C_2_Master_RepStart	;wreg free
 12769                           
 12770                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 12771   00499E  0E53               	movlw	83
 12772   0049A0  EC65  F028         	call	_I2C_2_Master_Write
 12773                           
 12774                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 12775   0049A4  0E01               	movlw	1
 12776   0049A6  EC7B  F025         	call	_I2C_2_Master_Read
 12777   0049AA  6E08               	movwf	??_color_read_Clear^0,c
 12778   0049AC  5008               	movf	??_color_read_Clear^0,w,c
 12779   0049AE  6E0B               	movwf	color_read_Clear@tmp^0,c
 12780   0049B0  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 12781                           
 12782                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12783   0049B2  0E00               	movlw	0
 12784   0049B4  EC7B  F025         	call	_I2C_2_Master_Read
 12785   0049B8  6E08               	movwf	??_color_read_Clear^0,c
 12786   0049BA  5008               	movf	??_color_read_Clear^0,w,c
 12787   0049BC  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 12788   0049BE  6A09               	clrf	(??_color_read_Clear+1)^0,c
 12789   0049C0  500B               	movf	color_read_Clear@tmp^0,w,c
 12790   0049C2  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 12791   0049C4  6E0B               	movwf	color_read_Clear@tmp^0,c
 12792   0049C6  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 12793   0049C8  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 12794   0049CA  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 12795                           
 12796                           ;color.c: 86:  I2C_2_Master_Stop();
 12797   0049CC  EC6B  F028         	call	_I2C_2_Master_Stop	;wreg free
 12798   0049D0                     
 12799                           ;color.c: 87:  return tmp;
 12800   0049D0  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 12801   0049D4  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 12802   0049D8  0012               	return		;funcret
 12803   0049DA                     __end_of_color_read_Clear:
 12804                           	callstack 0
 12805                           
 12806 ;; *************** function _color_read_Blue *****************
 12807 ;; Defined at:
 12808 ;;		line 61 in file "color.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;		None
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  tmp             2   10[COMRAM] unsigned int 
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  2    5[COMRAM] unsigned int 
 12815 ;; Registers used:
 12816 ;;		wreg, status,2, status,0, cstack
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12824 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12825 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12826 ;;Total ram usage:        7 bytes
 12827 ;; Hardware stack levels used: 1
 12828 ;; Hardware stack levels required when called: 3
 12829 ;; This function calls:
 12830 ;;		_I2C_2_Master_Read
 12831 ;;		_I2C_2_Master_RepStart
 12832 ;;		_I2C_2_Master_Start
 12833 ;;		_I2C_2_Master_Stop
 12834 ;;		_I2C_2_Master_Write
 12835 ;; This function is called by:
 12836 ;;		_reading_hue
 12837 ;;		_calibration_colors
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           	psect	text69
 12842   0049DA                     __ptext69:
 12843                           	callstack 0
 12844   0049DA                     _color_read_Blue:
 12845                           	callstack 26
 12846   0049DA                     
 12847                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 12848   0049DA  EC70  F028         	call	_I2C_2_Master_Start	;wreg free
 12849                           
 12850                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 12851   0049DE  0E52               	movlw	82
 12852   0049E0  EC65  F028         	call	_I2C_2_Master_Write
 12853                           
 12854                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 12855   0049E4  0EBA               	movlw	186
 12856   0049E6  EC65  F028         	call	_I2C_2_Master_Write
 12857                           
 12858                           ;color.c: 67:  I2C_2_Master_RepStart();
 12859   0049EA  EC75  F028         	call	_I2C_2_Master_RepStart	;wreg free
 12860                           
 12861                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 12862   0049EE  0E53               	movlw	83
 12863   0049F0  EC65  F028         	call	_I2C_2_Master_Write
 12864                           
 12865                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 12866   0049F4  0E01               	movlw	1
 12867   0049F6  EC7B  F025         	call	_I2C_2_Master_Read
 12868   0049FA  6E08               	movwf	??_color_read_Blue^0,c
 12869   0049FC  5008               	movf	??_color_read_Blue^0,w,c
 12870   0049FE  6E0B               	movwf	color_read_Blue@tmp^0,c
 12871   004A00  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 12872                           
 12873                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12874   004A02  0E00               	movlw	0
 12875   004A04  EC7B  F025         	call	_I2C_2_Master_Read
 12876   004A08  6E08               	movwf	??_color_read_Blue^0,c
 12877   004A0A  5008               	movf	??_color_read_Blue^0,w,c
 12878   004A0C  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 12879   004A0E  6A09               	clrf	(??_color_read_Blue+1)^0,c
 12880   004A10  500B               	movf	color_read_Blue@tmp^0,w,c
 12881   004A12  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 12882   004A14  6E0B               	movwf	color_read_Blue@tmp^0,c
 12883   004A16  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 12884   004A18  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 12885   004A1A  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 12886                           
 12887                           ;color.c: 71:  I2C_2_Master_Stop();
 12888   004A1C  EC6B  F028         	call	_I2C_2_Master_Stop	;wreg free
 12889   004A20                     
 12890                           ;color.c: 72:  return tmp;
 12891   004A20  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 12892   004A24  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12893   004A28  0012               	return		;funcret
 12894   004A2A                     __end_of_color_read_Blue:
 12895                           	callstack 0
 12896                           
 12897 ;; *************** function _I2C_2_Master_Write *****************
 12898 ;; Defined at:
 12899 ;;		line 45 in file "i2c.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;  data_byte       1    wreg     unsigned char 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  data_byte       1    2[COMRAM] unsigned char 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg, status,2, status,0, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12917 ;;Total ram usage:        1 bytes
 12918 ;; Hardware stack levels used: 1
 12919 ;; Hardware stack levels required when called: 2
 12920 ;; This function calls:
 12921 ;;		_I2C_2_Master_Idle
 12922 ;; This function is called by:
 12923 ;;		_color_writetoaddr
 12924 ;;		_color_read_Red
 12925 ;;		_color_read_Green
 12926 ;;		_color_read_Blue
 12927 ;;		_color_read_Clear
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           	psect	text70
 12932   0050CA                     __ptext70:
 12933                           	callstack 0
 12934   0050CA                     _I2C_2_Master_Write:
 12935                           	callstack 26
 12936                           
 12937                           ;incstack = 0
 12938                           ;I2C_2_Master_Write@data_byte stored from wreg
 12939   0050CA  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 12940   0050CC                     
 12941                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 12942   0050CC  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 12943   0050D0                     
 12944                           ;i2c.c: 48:   SSP2BUF = data_byte;
 12945   0050D0  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 12946   0050D4  0012               	return		;funcret
 12947   0050D6                     __end_of_I2C_2_Master_Write:
 12948                           	callstack 0
 12949                           
 12950 ;; *************** function _I2C_2_Master_Stop *****************
 12951 ;; Defined at:
 12952 ;;		line 39 in file "i2c.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;		None
 12955 ;; Auto vars:     Size  Location     Type
 12956 ;;		None
 12957 ;; Return value:  Size  Location     Type
 12958 ;;                  1    wreg      void 
 12959 ;; Registers used:
 12960 ;;		wreg, status,2, status,0, cstack
 12961 ;; Tracked objects:
 12962 ;;		On entry : 0/0
 12963 ;;		On exit  : 0/0
 12964 ;;		Unchanged: 0/0
 12965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12970 ;;Total ram usage:        0 bytes
 12971 ;; Hardware stack levels used: 1
 12972 ;; Hardware stack levels required when called: 2
 12973 ;; This function calls:
 12974 ;;		_I2C_2_Master_Idle
 12975 ;; This function is called by:
 12976 ;;		_color_writetoaddr
 12977 ;;		_color_read_Red
 12978 ;;		_color_read_Green
 12979 ;;		_color_read_Blue
 12980 ;;		_color_read_Clear
 12981 ;; This function uses a non-reentrant model
 12982 ;;
 12983                           
 12984                           	psect	text71
 12985   0050D6                     __ptext71:
 12986                           	callstack 0
 12987   0050D6                     _I2C_2_Master_Stop:
 12988                           	callstack 26
 12989   0050D6                     
 12990                           ;i2c.c: 41:   I2C_2_Master_Idle();
 12991   0050D6  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 12992   0050DA                     
 12993                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 12994   0050DA  010E               	movlb	14	; () banked
 12995   0050DC  85DA               	bsf	218,2,b	;volatile
 12996   0050DE                     
 12997                           ; BSR set to: 14
 12998   0050DE  0012               	return		;funcret
 12999   0050E0                     __end_of_I2C_2_Master_Stop:
 13000                           	callstack 0
 13001                           
 13002 ;; *************** function _I2C_2_Master_Start *****************
 13003 ;; Defined at:
 13004 ;;		line 27 in file "i2c.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;		None
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;		None
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      void 
 13011 ;; Registers used:
 13012 ;;		wreg, status,2, status,0, cstack
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13022 ;;Total ram usage:        0 bytes
 13023 ;; Hardware stack levels used: 1
 13024 ;; Hardware stack levels required when called: 2
 13025 ;; This function calls:
 13026 ;;		_I2C_2_Master_Idle
 13027 ;; This function is called by:
 13028 ;;		_color_writetoaddr
 13029 ;;		_color_read_Red
 13030 ;;		_color_read_Green
 13031 ;;		_color_read_Blue
 13032 ;;		_color_read_Clear
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text72
 13037   0050E0                     __ptext72:
 13038                           	callstack 0
 13039   0050E0                     _I2C_2_Master_Start:
 13040                           	callstack 26
 13041   0050E0                     
 13042                           ;i2c.c: 29:   I2C_2_Master_Idle();
 13043   0050E0  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 13044   0050E4                     
 13045                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 13046   0050E4  010E               	movlb	14	; () banked
 13047   0050E6  81DA               	bsf	218,0,b	;volatile
 13048   0050E8                     
 13049                           ; BSR set to: 14
 13050   0050E8  0012               	return		;funcret
 13051   0050EA                     __end_of_I2C_2_Master_Start:
 13052                           	callstack 0
 13053                           
 13054 ;; *************** function _I2C_2_Master_RepStart *****************
 13055 ;; Defined at:
 13056 ;;		line 33 in file "i2c.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;		None
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;		None
 13061 ;; Return value:  Size  Location     Type
 13062 ;;                  1    wreg      void 
 13063 ;; Registers used:
 13064 ;;		wreg, status,2, status,0, cstack
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13074 ;;Total ram usage:        0 bytes
 13075 ;; Hardware stack levels used: 1
 13076 ;; Hardware stack levels required when called: 2
 13077 ;; This function calls:
 13078 ;;		_I2C_2_Master_Idle
 13079 ;; This function is called by:
 13080 ;;		_color_read_Red
 13081 ;;		_color_read_Green
 13082 ;;		_color_read_Blue
 13083 ;;		_color_read_Clear
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           	psect	text73
 13088   0050EA                     __ptext73:
 13089                           	callstack 0
 13090   0050EA                     _I2C_2_Master_RepStart:
 13091                           	callstack 26
 13092   0050EA                     
 13093                           ;i2c.c: 35:   I2C_2_Master_Idle();
 13094   0050EA  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 13095   0050EE                     
 13096                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 13097   0050EE  010E               	movlb	14	; () banked
 13098   0050F0  83DA               	bsf	218,1,b	;volatile
 13099   0050F2                     
 13100                           ; BSR set to: 14
 13101   0050F2  0012               	return		;funcret
 13102   0050F4                     __end_of_I2C_2_Master_RepStart:
 13103                           	callstack 0
 13104                           
 13105 ;; *************** function _I2C_2_Master_Read *****************
 13106 ;; Defined at:
 13107 ;;		line 51 in file "i2c.c"
 13108 ;; Parameters:    Size  Location     Type
 13109 ;;  ack             1    wreg     unsigned char 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  ack             1    3[COMRAM] unsigned char 
 13112 ;;  tmp             1    4[COMRAM] unsigned char 
 13113 ;; Return value:  Size  Location     Type
 13114 ;;                  1    wreg      unsigned char 
 13115 ;; Registers used:
 13116 ;;		wreg, status,2, status,0, cstack
 13117 ;; Tracked objects:
 13118 ;;		On entry : 0/0
 13119 ;;		On exit  : 0/0
 13120 ;;		Unchanged: 0/0
 13121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13125 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13126 ;;Total ram usage:        3 bytes
 13127 ;; Hardware stack levels used: 1
 13128 ;; Hardware stack levels required when called: 2
 13129 ;; This function calls:
 13130 ;;		_I2C_2_Master_Idle
 13131 ;; This function is called by:
 13132 ;;		_color_read_Red
 13133 ;;		_color_read_Green
 13134 ;;		_color_read_Blue
 13135 ;;		_color_read_Clear
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           	psect	text74
 13140   004AF6                     __ptext74:
 13141                           	callstack 0
 13142   004AF6                     _I2C_2_Master_Read:
 13143                           	callstack 26
 13144                           
 13145                           ; BSR set to: 14
 13146                           ;incstack = 0
 13147                           ;I2C_2_Master_Read@ack stored from wreg
 13148   004AF6  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 13149   004AF8                     
 13150                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 13151   004AF8  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 13152   004AFC                     
 13153                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 13154   004AFC  010E               	movlb	14	; () banked
 13155   004AFE  87DA               	bsf	218,3,b	;volatile
 13156                           
 13157                           ;i2c.c: 56:   I2C_2_Master_Idle();
 13158   004B00  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 13159   004B04                     
 13160                           ;i2c.c: 57:   tmp = SSP2BUF;
 13161   004B04  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 13162                           
 13163                           ;i2c.c: 58:   I2C_2_Master_Idle();
 13164   004B08  ECF7  F027         	call	_I2C_2_Master_Idle	;wreg free
 13165   004B0C                     
 13166                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 13167   004B0C  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 13168   004B0E  B4D8               	btfsc	status,2,c
 13169   004B10  EF8C  F025         	goto	u3931
 13170   004B14  EF90  F025         	goto	u3930
 13171   004B18                     u3931:
 13172   004B18  6A03               	clrf	??_I2C_2_Master_Read^0,c
 13173   004B1A  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 13174   004B1C  EF91  F025         	goto	u3948
 13175   004B20                     u3930:
 13176   004B20  6A03               	clrf	??_I2C_2_Master_Read^0,c
 13177   004B22                     u3948:
 13178   004B22  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 13179   004B24  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 13180   004B26  010E               	movlb	14	; () banked
 13181   004B28  51DA               	movf	218,w,b	;volatile
 13182   004B2A  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 13183   004B2C  0BDF               	andlw	-33
 13184   004B2E  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 13185   004B30  6FDA               	movwf	218,b	;volatile
 13186   004B32                     
 13187                           ; BSR set to: 14
 13188                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 13189   004B32  89DA               	bsf	218,4,b	;volatile
 13190   004B34                     
 13191                           ; BSR set to: 14
 13192                           ;i2c.c: 61:   return tmp;
 13193   004B34  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 13194   004B36                     
 13195                           ; BSR set to: 14
 13196   004B36  0012               	return		;funcret
 13197   004B38                     __end_of_I2C_2_Master_Read:
 13198                           	callstack 0
 13199                           
 13200 ;; *************** function _I2C_2_Master_Idle *****************
 13201 ;; Defined at:
 13202 ;;		line 22 in file "i2c.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;		None
 13205 ;; Auto vars:     Size  Location     Type
 13206 ;;		None
 13207 ;; Return value:  Size  Location     Type
 13208 ;;                  1    wreg      void 
 13209 ;; Registers used:
 13210 ;;		wreg, status,2, status,0
 13211 ;; Tracked objects:
 13212 ;;		On entry : 0/0
 13213 ;;		On exit  : 0/0
 13214 ;;		Unchanged: 0/0
 13215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13218 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13219 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13220 ;;Total ram usage:        1 bytes
 13221 ;; Hardware stack levels used: 1
 13222 ;; Hardware stack levels required when called: 1
 13223 ;; This function calls:
 13224 ;;		Nothing
 13225 ;; This function is called by:
 13226 ;;		_I2C_2_Master_Start
 13227 ;;		_I2C_2_Master_RepStart
 13228 ;;		_I2C_2_Master_Stop
 13229 ;;		_I2C_2_Master_Write
 13230 ;;		_I2C_2_Master_Read
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           	psect	text75
 13235   004FEE                     __ptext75:
 13236                           	callstack 0
 13237   004FEE                     _I2C_2_Master_Idle:
 13238                           	callstack 26
 13239   004FEE                     l174:
 13240   004FEE  010E               	movlb	14	; () banked
 13241   004FF0  B5D8               	btfsc	216,2,b	;volatile
 13242   004FF2  EFFD  F027         	goto	u3061
 13243   004FF6  EFFF  F027         	goto	u3060
 13244   004FFA                     u3061:
 13245   004FFA  EFF7  F027         	goto	l174
 13246   004FFE                     u3060:
 13247   004FFE                     
 13248                           ; BSR set to: 14
 13249   004FFE  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 13250   005002  0E1F               	movlw	31
 13251   005004  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 13252   005006  A4D8               	btfss	status,2,c
 13253   005008  EF08  F028         	goto	u3071
 13254   00500C  EF0A  F028         	goto	u3070
 13255   005010                     u3071:
 13256   005010  EFF7  F027         	goto	l174
 13257   005014                     u3070:
 13258   005014                     
 13259                           ; BSR set to: 14
 13260   005014  0012               	return		;funcret
 13261   005016                     __end_of_I2C_2_Master_Idle:
 13262                           	callstack 0
 13263                           
 13264 ;; *************** function _Timer0_init *****************
 13265 ;; Defined at:
 13266 ;;		line 8 in file "timers.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;		None
 13269 ;; Auto vars:     Size  Location     Type
 13270 ;;		None
 13271 ;; Return value:  Size  Location     Type
 13272 ;;                  1    wreg      void 
 13273 ;; Registers used:
 13274 ;;		wreg, status,2
 13275 ;; Tracked objects:
 13276 ;;		On entry : 0/0
 13277 ;;		On exit  : 0/0
 13278 ;;		Unchanged: 0/0
 13279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13284 ;;Total ram usage:        0 bytes
 13285 ;; Hardware stack levels used: 1
 13286 ;; Hardware stack levels required when called: 1
 13287 ;; This function calls:
 13288 ;;		Nothing
 13289 ;; This function is called by:
 13290 ;;		_main
 13291 ;; This function uses a non-reentrant model
 13292 ;;
 13293                           
 13294                           	psect	text76
 13295   004F94                     __ptext76:
 13296                           	callstack 0
 13297   004F94                     _Timer0_init:
 13298                           	callstack 29
 13299   004F94                     
 13300                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 13301   004F94  50D6               	movf	214,w,c	;volatile
 13302   004F96  0B1F               	andlw	-225
 13303   004F98  0940               	iorlw	64
 13304   004F9A  6ED6               	movwf	214,c	;volatile
 13305   004F9C                     
 13306                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 13307   004F9C  88D6               	bsf	214,4,c	;volatile
 13308                           
 13309                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 13310   004F9E  50D6               	movf	214,w,c	;volatile
 13311   004FA0  0BF0               	andlw	-16
 13312   004FA2  090D               	iorlw	13
 13313   004FA4  6ED6               	movwf	214,c	;volatile
 13314   004FA6                     
 13315                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 13316   004FA6  88D5               	bsf	213,4,c	;volatile
 13317   004FA8                     
 13318                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 13319   004FA8  010E               	movlb	14	; () banked
 13320   004FAA  8B29               	bsf	41,5,b	;volatile
 13321   004FAC                     
 13322                           ; BSR set to: 14
 13323                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 13324   004FAC  9B33               	bcf	51,5,b	;volatile
 13325   004FAE                     
 13326                           ; BSR set to: 14
 13327                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 13328   004FAE  9B1F               	bcf	31,5,b	;volatile
 13329   004FB0                     
 13330                           ; BSR set to: 14
 13331                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 13332   004FB0  8AF2               	bsf	242,5,c	;volatile
 13333   004FB2                     
 13334                           ; BSR set to: 14
 13335                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 13336   004FB2  8CF2               	bsf	242,6,c	;volatile
 13337   004FB4                     
 13338                           ; BSR set to: 14
 13339                           ;timers.c: 20:     INTCONbits.GIE = 1;
 13340   004FB4  8EF2               	bsf	242,7,c	;volatile
 13341   004FB6                     
 13342                           ; BSR set to: 14
 13343                           ;timers.c: 23:     TRISGbits.TRISG1 = 0;
 13344   004FB6  9287               	bcf	135,1,c	;volatile
 13345   004FB8                     
 13346                           ; BSR set to: 14
 13347                           ;timers.c: 24:     LATGbits.LATG1 = 0;
 13348   004FB8  927F               	bcf	127,1,c	;volatile
 13349                           
 13350                           ;timers.c: 27:     TMR0L = 0;
 13351   004FBA  0E00               	movlw	0
 13352   004FBC  6ED3               	movwf	211,c	;volatile
 13353                           
 13354                           ;timers.c: 28:     TMR0H = 0;
 13355   004FBE  0E00               	movlw	0
 13356   004FC0  6ED4               	movwf	212,c	;volatile
 13357   004FC2                     
 13358                           ; BSR set to: 14
 13359   004FC2  0012               	return		;funcret
 13360   004FC4                     __end_of_Timer0_init:
 13361                           	callstack 0
 13362                           
 13363 ;; *************** function _ADC_init *****************
 13364 ;; Defined at:
 13365 ;;		line 9 in file "ADC.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;		None
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  1    wreg      void 
 13372 ;; Registers used:
 13373 ;;		wreg, status,2
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13383 ;;Total ram usage:        0 bytes
 13384 ;; Hardware stack levels used: 1
 13385 ;; Hardware stack levels required when called: 1
 13386 ;; This function calls:
 13387 ;;		Nothing
 13388 ;; This function is called by:
 13389 ;;		_main
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           	psect	text77
 13394   005098                     __ptext77:
 13395                           	callstack 0
 13396   005098                     _ADC_init:
 13397                           	callstack 29
 13398   005098                     
 13399                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 13400   005098  8C86               	bsf	134,6,c	;volatile
 13401                           
 13402                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 13403   00509A  010E               	movlb	14	; () banked
 13404   00509C  8DB4               	bsf	180,6,b	;volatile
 13405                           
 13406                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 13407   00509E  010F               	movlb	15	; () banked
 13408   0050A0  9958               	bcf	88,4,b	;volatile
 13409   0050A2                     
 13410                           ; BSR set to: 15
 13411                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 13412   0050A2  0EFC               	movlw	-4
 13413   0050A4  1758               	andwf	88,f,b	;volatile
 13414                           
 13415                           ;ADC.c: 17:     ADPCH=0b101110;
 13416   0050A6  0E2E               	movlw	46
 13417   0050A8  6F5F               	movwf	95,b	;volatile
 13418   0050AA                     
 13419                           ; BSR set to: 15
 13420                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 13421   0050AA  9460               	bcf	96,2,c	;volatile
 13422   0050AC                     
 13423                           ; BSR set to: 15
 13424                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 13425   0050AC  8860               	bsf	96,4,c	;volatile
 13426   0050AE                     
 13427                           ; BSR set to: 15
 13428                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 13429   0050AE  8E60               	bsf	96,7,c	;volatile
 13430   0050B0                     
 13431                           ; BSR set to: 15
 13432   0050B0  0012               	return		;funcret
 13433   0050B2                     __end_of_ADC_init:
 13434                           	callstack 0
 13435                           
 13436 ;; *************** function _LowISR *****************
 13437 ;; Defined at:
 13438 ;;		line 47 in file "timers.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;		None
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;		None
 13443 ;; Return value:  Size  Location     Type
 13444 ;;                  1    wreg      void 
 13445 ;; Registers used:
 13446 ;;		None
 13447 ;; Tracked objects:
 13448 ;;		On entry : 0/0
 13449 ;;		On exit  : 0/0
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13456 ;;Total ram usage:        1 bytes
 13457 ;; Hardware stack levels used: 1
 13458 ;; This function calls:
 13459 ;;		Nothing
 13460 ;; This function is called by:
 13461 ;;		Interrupt level 1
 13462 ;; This function uses a non-reentrant model
 13463 ;;
 13464                           
 13465                           	psect	intcodelo
 13466   000018                     __pintcodelo:
 13467                           	callstack 0
 13468   000018                     _LowISR:
 13469                           	callstack 20
 13470                           
 13471                           ; BSR set to: 15
 13472                           ;incstack = 0
 13473   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 13474   00001A  CFE0 F001          	movff	bsr,??_LowISR
 13475   00001E                     
 13476                           ;timers.c: 50:     if (PIR0bits.TMR0IF == 1) {
 13477   00001E  010E               	movlb	14	; () banked
 13478   000020  AB33               	btfss	51,5,b	;volatile
 13479   000022  EF15  F000         	goto	i1u261_21
 13480   000026  EF17  F000         	goto	i1u261_20
 13481   00002A                     i1u261_21:
 13482   00002A  EF19  F000         	goto	i1l632
 13483   00002E                     i1u261_20:
 13484   00002E                     
 13485                           ; BSR set to: 14
 13486                           ;timers.c: 51:         LATGbits.LATG1 = 1;
 13487   00002E  827F               	bsf	127,1,c	;volatile
 13488                           
 13489                           ;timers.c: 53:         PIR0bits.TMR0IF = 0;
 13490   000030  9B33               	bcf	51,5,b	;volatile
 13491   000032                     i1l632:
 13492                           
 13493                           ; BSR set to: 14
 13494   000032  C001  FFE0         	movff	??_LowISR,bsr
 13495   000036  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 13496   000038  0010               	retfie	
 13497   00003A                     __end_of_LowISR:
 13498                           	callstack 0
 13499                           
 13500                           	psect	rparam
 13501   000000                     
 13502                           	psect	temp
 13503   00005D                     btemp:
 13504                           	callstack 0
 13505   00005D                     	ds	1
 13506   000000                     int$flags	set	btemp
 13507   000000                     wtemp8	set	btemp+1
 13508   000000                     ttemp5	set	btemp+1
 13509   000000                     ttemp6	set	btemp+4
 13510   000000                     ttemp7	set	btemp+8
 13511                           
 13512                           	psect	config
 13513                           
 13514                           ;Config register CONFIG1L @ 0x300000
 13515                           ;	External Oscillator mode Selection bits
 13516                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 13517                           ;	Power-up default value for COSC bits
 13518                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 13519   300000                     	org	3145728
 13520   300000  AA                 	db	170
 13521                           
 13522                           ;Config register CONFIG1H @ 0x300001
 13523                           ;	unspecified, using default values
 13524                           ;	Clock Out Enable bit
 13525                           ;	CLKOUTEN = 0x1, unprogrammed default
 13526                           ;	Clock Switch Enable bit
 13527                           ;	CSWEN = 0x1, unprogrammed default
 13528                           ;	Fail-Safe Clock Monitor Enable bit
 13529                           ;	FCMEN = 0x1, unprogrammed default
 13530   300001                     	org	3145729
 13531   300001  FF                 	db	255
 13532                           
 13533                           ;Config register CONFIG3L @ 0x300004
 13534                           ;	WDT Period Select bits
 13535                           ;	WDTCPS = 0x1F, unprogrammed default
 13536                           ;	WDT operating mode
 13537                           ;	WDTE = OFF, WDT Disabled
 13538   300004                     	org	3145732
 13539   300004  9F                 	db	159
 13540                           
 13541                           ;Config register CONFIG3H @ 0x300005
 13542                           ;	unspecified, using default values
 13543                           ;	WDT Window Select bits
 13544                           ;	WDTCWS = 0x7, unprogrammed default
 13545                           ;	WDT input clock selector
 13546                           ;	WDTCCS = 0x7, unprogrammed default
 13547   300005                     	org	3145733
 13548   300005  FF                 	db	255
 13549                           tosu	equ	0xFFF
 13550                           tosh	equ	0xFFE
 13551                           tosl	equ	0xFFD
 13552                           stkptr	equ	0xFFC
 13553                           pclatu	equ	0xFFB
 13554                           pclath	equ	0xFFA
 13555                           pcl	equ	0xFF9
 13556                           tblptru	equ	0xFF8
 13557                           tblptrh	equ	0xFF7
 13558                           tblptrl	equ	0xFF6
 13559                           tablat	equ	0xFF5
 13560                           prodh	equ	0xFF4
 13561                           prodl	equ	0xFF3
 13562                           indf0	equ	0xFEF
 13563                           postinc0	equ	0xFEE
 13564                           postdec0	equ	0xFED
 13565                           preinc0	equ	0xFEC
 13566                           plusw0	equ	0xFEB
 13567                           fsr0h	equ	0xFEA
 13568                           fsr0l	equ	0xFE9
 13569                           wreg	equ	0xFE8
 13570                           indf1	equ	0xFE7
 13571                           postinc1	equ	0xFE6
 13572                           postdec1	equ	0xFE5
 13573                           preinc1	equ	0xFE4
 13574                           plusw1	equ	0xFE3
 13575                           fsr1h	equ	0xFE2
 13576                           fsr1l	equ	0xFE1
 13577                           bsr	equ	0xFE0
 13578                           indf2	equ	0xFDF
 13579                           postinc2	equ	0xFDE
 13580                           postdec2	equ	0xFDD
 13581                           preinc2	equ	0xFDC
 13582                           plusw2	equ	0xFDB
 13583                           fsr2h	equ	0xFDA
 13584                           fsr2l	equ	0xFD9
 13585                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         430
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160    100     147
    BANK1           256      0     182
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_colors@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    calibration_turningL@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    calibration_turningL@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_turningR@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    calibration_turningR@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3013$buffer	PTR unsigned char  size(2) Largest target is 0

    S3013$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseStraight
    _reverseTurn->_left90
    _reverseTurn->_right90
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _get16bitTMR0val->___aldiv
    ___aldiv->___lmul
    _decision->_moveGreen
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_right90
    _moveRed->_right90
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_left90
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _backHalf->_fullSpeedBack
    _fullSpeedBack->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_turningR->___fltol
    _right90->_turnRight
    _turnRight->_setMotorPWM
    _calibration_turningL->___fltol
    _left90->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fladd->___xxtofl
    _calibration_colors->_send2USART
    _send2USART->___fltol
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_colors->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  349487
                                             76 BANK0     24    24      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                 _calibration_colors
               _calibration_turningL
               _calibration_turningR
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          17     9      8   92969
                                              0 BANK0     17     9      8
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                         13     2     11   58002
                                             30 COMRAM    13     2     11
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   13972
                                             80 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    8614
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   19972
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   19084
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   18445
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2352
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2767
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                     12    10      2    2391
                                             27 COMRAM    12    10      2
                            ___aldiv
                             ___lmul
                          _logAction
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _decision                                            10     2      8  140888
                                             36 COMRAM     8     0      8
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   18620
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   20900
                                             30 COMRAM     6     2      4
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   18772
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    8552
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   19624
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2    8552
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   19776
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2    8704
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   21052
                                             30 COMRAM     6     2      4
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   19928
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2    8856
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   10832
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _logAction                                            9     3      6    1326
                                              1 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_turningR                                20    18      2   19823
                                             75 COMRAM     4     2      2
                                              0 BANK0     16    16      0
                            ___fladd
                            ___flsub
                            ___fltol
                           ___xxtofl
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              8     4      4    9730
                                             24 COMRAM     6     2      4
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _calibration_turningL                                20    18      2   19975
                                             75 COMRAM     4     2      2
                                              0 BANK0     16    16      0
                            ___fladd
                            ___flsub
                            ___fltol
                           ___xxtofl
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               8     4      4    9882
                                             24 COMRAM     6     2      4
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    3571
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    4741
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2893
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _customDelayMs                                        5     3      2     274
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1550
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     989
                                             65 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4105
                                             31 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3022
                                             15 COMRAM    16     8      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _calibration_colors                                  23    22      1   21380
                                             77 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   10472
                                             75 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                            ___fltol (ARG)
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    9146
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    7394
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    6906
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1143
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     675
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___fldiv (ARG)
     ___flmul (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_colors
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       ___fltol (ARG)
       _sendStringSerial4 (ARG)
         _sendCharSerial4
       _sprintf (ARG)
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _calibration_turningL
     ___fladd
     ___flsub
     ___fltol
     ___xxtofl
     _left90
       _customDelayMs
       _stop
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _turnLeft
         _setMotorPWM
   _calibration_turningR
     ___fladd
     ___flsub
     ___fltol
     ___xxtofl
     _right90
       _customDelayMs
       _stop
       _turnRight
         _setMotorPWM
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
         _stop
       _turn180
         _stop
         _turnLeft
     _moveGreen
       _backHalf
       _left90
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     64      93       5       91.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRlllhll     37      0       0      49        0.0%
BITBIGSFRlllhhl     31      0       0      47        0.0%
BITBIGSFRllllll     2A      0       0      60        0.0%
BITBIGSFRllllll     26      0       0      67        0.0%
BITBIGSFRlllllh     20      0       0      52        0.0%
BITBIGSFRllllll     1E      0       0      54        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      44        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      55        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      53        0.0%
BITBIGSFRllllll      9      0       0      64        0.0%
BITBIGSFRlllhll      8      0       0      50        0.0%
BITBIGSFRllllll      6      0       0      66        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllhhh      6      0       0      46        0.0%
BITBIGSFRllllll      5      0       0      62        0.0%
BITBIGSFRllllll      5      0       0      58        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRllllll      3      0       0      63        0.0%
BITBIGSFRlllhhh      3      0       0      45        0.0%
BITBIGSFRllllll      3      0       0      57        0.0%
BITBIGSFRlllhlh      2      0       0      48        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllhh        1      0       0      42        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      65        0.0%
BITBIGSFRllllh       1      0       0      51        0.0%
BITBIGSFRllhl        1      0       0      43        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26D      68        0.0%
DATA                 0      0     26D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 12:22:00 2024

                     logAction@newTime 0002                     logAction@newAction 000A  
                       _color_read_Red 48EA                           ___fldiv@aexp 0041  
                         ___fldiv@bexp 0040                     fullSpeedBack@power 0017  
                         ___fldiv@sign 0039                        _color_read_Blue 49DA  
                                   l73 4D08                                     l82 4988  
                                   l91 3FAC                                     l76 505A  
                                   l85 4A28                                     l79 4938  
                                   l88 49D8                                     l99 11A8  
                         ___awdiv@sign 0007                                     bsr 0FE0  
                  ___wmul@multiplicand 0004                        moveLightBlue@mL 001D  
                      moveLightBlue@mR 001E                     convert_rgb2hue@max 0098  
                   convert_rgb2hue@hue 009C                     convert_rgb2hue@min 0090  
                     _color_read_Clear 498A                       _color_read_Green 493A  
                                  l101 11B8                                    l111 12AA  
                                  l103 1212                                    l121 15C2  
                                  l113 12BA                                    l105 1222  
                                  l115 1314                                    l300 1B0A  
                                  l125 163A                                    l117 1324  
                                  l126 1656                                    l144 2AD6  
                                  l321 50B0                                    l138 2ACE  
                   logAction@path_step 0006                                    l171 4FEC  
                                  l180 50E8                                    l412 473A  
                                  l174 4FEE                                    l430 4ECE  
                                  l422 4076                                    l183 50F2  
                                  l407 463E                                    l192 4B36  
                                  l177 5014                                    l433 4F00  
                                  l417 46BC                                    l186 50DE  
                                  l442 4F62                                    l427 47B0  
                                  l451 4C28                                    l523 5078  
                                  l532 50B4                                    l436 4E9C  
                                  l460 4BEE                                    l700 3BAC  
                                  l189 50D4                                    l541 4F32  
                                  l445 4F92                                    l454 4C9C  
                                  l294 18FA                                    l623 4FC2  
                                  l535 50C8                                    l439 4E06  
                                  l463 4C62                                    l703 37C4  
                                  l448 4DA2                                    l392 45B0  
                                  l472 4BB4                                    l457 4E6A  
                                  l713 37C6                                    l466 4DD4  
                                  l626 448A                                    l298 1B18  
                                  l811 2D0A                                    l804 2D1C  
                                  l805 2C8C                                    l469 4E38  
                                  l830 2EA8                                    l806 2C62  
                                  l399 3A70                                    l586 5096  
                                  l674 48E8                                    l690 391C  
                                  l843 4CBE                                    l835 2F50  
                                  l819 2D48                                    l780 3046  
                                  l828 2F62                                    l860 487E  
                                  l684 391C                                    l829 2ED2  
                                  l861 488E                                    l782 3054  
                                  l774 2F8A                                    l846 4CD4  
                                  l783 30A6                                    l792 31A8  
                                  l776 2F98                                    l928 3CB8  
                                  l696 3B72                                    l849 503A  
                                  l785 30B4                                    l777 2FE6  
                                  l786 310E                                    l779 2FF4  
                                  l795 2B02                                    l788 311C  
                                  l789 3182                                    _abs 4D3E  
                                  _pad 448C                    convert_rgb2hue@cMax 004C  
                         ___awmod@sign 0007                    convert_rgb2hue@diff 0094  
                                  wreg 0FE8                           ___flmul@aexp 0021  
                         ___flmul@bexp 0022                           ___flmul@sign 001C  
                         ___flmul@temp 0027                           ___flmul@prod 0023  
                          main@ambient 00AE                            main@factorL 00B4  
                          main@factorR 00B2                           ___fltol@exp1 004B  
                                 l1114 3E7C                                   ?_abs 0008  
                                 l1108 4342                                   l1119 3EC2  
                                 l1080 413A                                   l1146 3DBE  
                                 l1403 1F88                                   l1404 1F76  
                                 l1340 481C                                   l1093 41EA  
                                 l1511 3298                                   l1431 2832  
                                 l1504 3200                                   l1601 4D58  
                                 l1433 2692                                   l1442 26D8  
                                 l1419 4A6E                                   l1507 335C  
                                 l1347 4824                                   l1604 4D70  
                                 l1444 2750                                   l1436 2656  
                                 l4021 4FEE                                   l4101 475C  
                                 l1445 273E                                   l1550 4500  
                                 l1518 32F4                                   l1470 232A  
                                 l4023 4FFE                                   l1527 4D3C  
                                 l4031 45D4                                   l4111 4794  
                                 l4103 4770                                   l1463 2134  
                                 l1616 43EC                                   l1624 4B76  
                                 l1552 4520                                   l1480 245A  
                                 l1472 23A2                                   l4121 50C4  
                                 l1377 1D9E                                   l4201 1CF0  
                                 l4113 4C9E                                   l4033 45EA  
                                 l4041 4612                                   l4025 45B2  
                                 l4105 4778                                   l5001 4BDA  
                                 l1473 2390                                   l1394 1EB8  
                                 l1386 206E                                   l1378 1D8C  
                                 l1627 50F4                                   l1547 44C2  
                                 l1555 3544                                   l4211 1D60  
                                 l1379 1D52                                   l4203 1CF4  
                                 l4131 1BDC                                   l4123 1BB0  
                                 l4115 4CAA                                   l4043 4628  
                                 l4035 45F2                                   l4027 45B6  
                                 l4051 46E8                                   l4107 4780  
                                 l5003 4DA4                                   l5011 4C36  
                                 l1467 2498                                   l1572 4290  
                                 l4301 1FEE                                   l4221 1D8A  
                                 l4213 1D6C                                   l4205 1D1E  
                                 l4141 1C16                                   l4133 1BEC  
                                 l4125 1BBC                                   l4117 4CBA  
                                 l4037 45FA                                   l4029 45CC  
                                 l4061 4708                                   l4045 46BE  
                                 l4109 4790                                   l5005 4DB0  
                                 l5013 4C4E                                   l5021 4B84  
                                 l5101 3B0C                                   l4119 50B4  
                                 l1591 34E4                                   l4311 2040  
                                 l4303 1FFE                                   l4231 1DE0  
                                 l4223 1DAC                                   l4215 1D70  
                                 l4207 1D3A                                   l4151 1C44  
                                 l4143 1C1C                                   l4135 1BFC  
                                 l4127 1BCA                                   l4039 4602  
                                 l4063 4710                                   l4047 46D8  
                                 l4071 465A                                   l5007 4DC8  
                                 l5023 4B9C                                   l5103 3B18  
                                 l5111 3B72                                   l5031 37EC  
                                 l1568 365C                                   l1576 4298  
                                 l6001 3026                                   l4321 205E  
                                 l4313 2046                                   l4305 200E  
                                 l4241 1E1A                                   l4233 1DEE  
                                 l4225 1DBC                                   l4217 1D7E  
                                 l4209 1D4A                                   l4161 1C78  
                                 l4153 1C46                                   l4145 1C2E  
                                 l4137 1BFE                                   l4129 1BCC  
                                 l4065 4720                                   l4057 46F0  
                                 l4049 46E0                                   l4081 4672  
                                 l4073 4662                                   l5009 4C2A  
                                 l5121 4836                                   l4401 22AE  
                                 l5201 3F2C                                   l5025 4BA8  
                                 l5113 3B7E                                   l5105 3B3A  
                                 l5033 3804                                   l6011 3086  
                                 l6003 303E                                   l4315 2048  
                                 l4307 202E                                   l4251 1E86  
                                 l4243 1E1C                                   l4235 1DFC  
                                 l4219 1D80                                   l4171 1CB4  
                                 l4155 1C56                                   l4163 1C80  
                                 l4147 1C30                                   l4139 1C06  
                                 l4067 4724                                   l4059 4700  
                                 l4091 46A6                                   l4083 4682  
                                 l4075 466A                                   l5131 3BB2  
                                 l5123 4844                                   l4411 2328  
                                 l4403 22E4                                   l4331 208C  
                                 l5211 3F60                                   l5203 3F2E  
                                 l5019 4B78                                   l5115 3B8A  
                                 l5107 3B46                                   l5035 3810  
                                 l5027 37C8                                   l1597 4AF4  
                                 l6021 30EA                                   l6013 309E  
                                 l6005 3056                                   l4317 204E  
                                 l4309 2032                                   l4261 1EDE  
                                 l4253 1E88                                   l4245 1E26  
                                 l4237 1E08                                   l4229 1DD0  
                                 l4181 1CC8                                   l4173 1CB8  
                                 l4165 1C90                                   l4157 1C66  
                                 l4149 1C36                                   l4501 31BC  
                                 l4085 468A                                   l4069 4640  
                                 l4093 473C                                   l5301 2ACA  
                                 l5221 2834                                   l5141 3BF2  
                                 l5133 3BC0                                   l5125 4854  
                                 l4421 2388                                   l4413 233A  
                                 l4405 22F2                                   l4341 20D2  
                                 l4333 209C                                   l4325 2070  
                                 l5213 3F7A                                   l5205 3F46  
                                 l5117 3B96                                   l5109 3B66  
                                 l5029 37D8                                   l5037 3820  
                                 l6101 169E                                   l5311 50A2  
                                 l6031 313A                                   l6023 30EC  
                                 l6015 30BA                                   l6007 306E  
                                 l4319 205C                                   l4271 1F0C  
                                 l4255 1E98                                   l4239 1E0C  
                                 l4247 1E2C                                   l4191 1CDC  
                                 l4183 1CCC                                   l4175 1CBC  
                                 l4167 1CA2                                   l4159 1C76  
                                 l4511 323A                                   l4503 31CA  
                                 l4087 4692                                   l4095 4754  
                                 l5231 2892                                   l5223 284A  
                                 l5151 3C30                                   l5143 3BF6  
                                 l5135 3BD0                                   l5127 485E  
                                 l5119 4826                                   l4431 23F6  
                                 l4415 2348                                   l4407 2310  
                                 l4351 20FE                                   l4343 20D8  
                                 l4335 20AC                                   l4327 207C  
                                 l5215 3F90                                   l5207 3F5C  
                                 l5071 38B4                                   l5039 3832  
                                 l5047 384A                                   l6111 16BE  
                                 l6103 16A2                                   l5313 50AA  
                                 l3801 412A                                   l6041 316E  
                                 l6033 3150                                   l6025 30EE  
                                 l6017 30D2                                   l6009 3084  
                                 l4273 1F1A                                   l4265 1EF2  
                                 l4281 1F38                                   l4249 1E52  
                                 l4257 1EA8                                   l4193 1CE0  
                                 l4185 1CD0                                   l4177 1CC0  
                                 l4169 1CB0                                   l4521 328E  
                                 l4513 3242                                   l4505 3210  
                                 l4089 46A2                                   l5241 28F8  
                                 l5305 2ACE                                   l5233 289A  
                                 l5225 2860                                   l5161 3C78  
                                 l5153 3C3E                                   l5145 3C06  
                                 l5137 3BD4                                   l5129 3BAE  
                                 l5321 5066                                   l4441 245E  
                                 l4425 23B2                                   l4433 23FA  
                                 l4417 234C                                   l4409 231A  
                                 l4361 2154                                   l4353 210E  
                                 l4345 20DE                                   l4337 20BC  
                                 l4329 208A                                   l5217 3FA4  
                                 l5209 3F5E                                   l4601 4046  
                                 l5073 38D0                                   l5049 385C  
                                 l5057 386C                                   l6201 1A44  
                                 l6121 16C8                                   l6113 16C0  
                                 l6105 16A6                                   l5315 50AC  
                                 l5331 4F94                                   l3803 4132  
                                 l3811 414E                                   l6043 3176  
                                 l6035 3152                                   l6027 3106  
                                 l6019 30E8                                   l4275 1F22  
                                 l4267 1EFC                                   l4259 1ECE  
                                 l4283 1F46                                   l4195 1CE4  
                                 l4187 1CD4                                   l4179 1CC4  
                                 l4531 3304                                   l4523 32CA  
                                 l4515 324E                                   l4507 3226  
                                 l4611 4EAA                                   l5251 2934  
                                 l5235 28B0                                   l5227 2874  
                                 l5163 3C82                                   l5155 3C48  
                                 l5147 3C1C                                   l5139 3BE2  
                                 l5323 5068                                   l4451 2488  
                                 l4443 246E                                   l4435 2414  
                                 l4427 23BE                                   l4419 235A  
                                 l4371 2194                                   l4355 211E  
                                 l4347 20EC                                   l4339 20C2  
                                 l4603 4056                                   l5091 3A7A  
                                 l5075 38E2                                   l5083 38F2  
                                 l5059 387E                                   l5067 388E  
                                 l6051 367E                                   l6211 1A9A  
                                 l6203 1A50                                   l6131 16D4  
                                 l6123 16CA                                   l6115 16C2  
                                 l6107 16AE                                   l5317 50AE  
                                 l5309 5098                                   l5341 4FAE  
                                 l5333 4F9C                                   l3821 4182  
                                 l3813 4156                                   l3741 436E  
                                 l6045 3190                                   l6037 3154  
                                 l6029 3122                                   l4293 1F98  
                                 l4285 1F4A                                   l4277 1F26  
                                 l4269 1F0A                                   l4197 1CE8  
                                 l4189 1CD8                                   l4461 3CE4  
                                 l4541 334C                                   l4533 3308  
                                 l4525 32D6                                   l4517 3280  
                                 l4621 4EDC                                   l5501 2DA0  
                                 l4613 4EB6                                   l5181 4CFE  
                                 l5173 4CD6                                   l5261 2982  
                                 l5253 2952                                   l5237 28C6  
                                 l5245 28FC                                   l5229 2892  
                                 l5157 3C66                                   l5149 3C24  
                                 l5165 3C88                                   l5325 5072  
                                 l4701 250C                                   l4445 247C  
                                 l4437 2428                                   l4429 23CC  
                                 l4381 21DE                                   l4373 21A0  
                                 l4365 2168                                   l4357 2124  
                                 l4349 20EE                                   l4605 405A  
                                 l5093 3A9C                                   l5085 3904  
                                 l5069 38A0                                   l6061 3712  
                                 l6053 368A                                   l6221 1B2C  
                                 l6213 1AB2                                   l6205 1A68  
                                 l6141 16FC                                   l6133 16D6  
                                 l6125 16CC                                   l6117 16C4  
                                 l6109 16B6                                   ?_pad 0010  
                                 l5351 4FB8                                   l5343 4FB0  
                                 l5335 4FA6                                   l3831 41BE  
                                 l3823 418A                                   l3815 415A  
                                 l3807 413C                                   l3743 438A  
                                 l3735 4344                                   l6039 3156  
                                 l4295 1FA4                                   l4287 1F58  
                                 l4279 1F36                                   l4199 1CEC  
                                 l4471 3D32                                   l4463 3D0E  
                                 l4455 3CBA                                   l4535 332C  
                                 l4527 32E4                                   l4519 3282  
                                 l4623 4EE8                                   l5511 2E0E  
                                 l5503 2DB0                                   l4615 4EC2  
                                 l4607 4E9E                                   l5175 4CDA  
                                 l4631 4E90                                   l5271 29C6  
                                 l5263 298E                                   l5247 2912  
                                 l5239 28DA                                   l5167 3C98  
                                 l5159 3C76                                   l5327 5074  
                                 l5319 505C                                   l4711 254C  
                                 l4703 251A                                   l4447 247E  
                                 l4439 2442                                   l4391 2230  
                                 l4383 21EA                                   l4375 21B8  
                                 l4367 2174                                   l4359 2144  
                                 l5191 3EF6                                   l5183 3EC4  
                                 l5095 3ABC                                   l6063 3742  
                                 l6055 369A                                   l6047 365E  
                                 l6223 1B40                                   l6215 1AC8  
                                 l6207 1A74                                   l6151 1742  
                                 l6143 1706                                   l6135 16D8  
                                 l6127 16D0                                   l6119 16C6  
                                 l5345 4FB2                                   l5337 4FA8  
                                 l4561 50D0                                   l3833 41C4  
                                 l3825 4192                                   l3817 4168  
                                 l3809 4140                                   l3745 43BC  
                                 l3737 4354                                   l4297 1FB2  
                                 l4289 1F6E                                   l4481 3D5E  
                                 l4465 3D10                                   l4457 3CD0  
                                 l4537 333C                                   l4529 3302  
                                 l4625 4EF4                                   l4617 4ED0  
                                 l5521 2EB6                                   l5513 2E1A  
                                 l5505 2DBE                                   l4609 4E9E  
                                 l5177 4CE4                                   l4641 4F40  
                                 l4633 4DD6                                   l5273 29DC  
                                 l5281 2A12                                   l5265 29AC  
                                 l5249 2928                                   l5257 2956  
                                 l5169 3CA8                                   l5361 4580  
                                 l5353 4522                                   l5329 5076  
                                 l4801 280E                                   l4721 258C  
                                 l4713 254E                                   l4705 251C  
                                 l4449 2484                                   l4393 2240  
                                 l4385 21FA                                   l4377 21C4  
                                 l4369 217E                                   l5193 3EF8  
                                 l5185 3ECA                                   l5097 3AC8  
                                 l5089 3A72                                   l6073 37BA  
                                 l6065 3752                                   l6057 36B8  
                                 l6049 366A                                   l6225 1B4A  
                                 l6217 1ADE                                   l6209 1A8E  
                                 l6161 1756                                   l6153 1744  
                                 l6145 171A                                   l6137 16F2  
                                 l6129 16D2                                   l6081 1664  
                                 l5347 4FB4                                   l5339 4FAC  
                                 l4571 4AF8                                   l4555 50E0  
                                 l4563 50D6                                   l3771 4096  
                                 l3763 4078                                   l3827 41A0  
                                 l3835 41CA                                   l3819 4170  
                                 l3739 4364                                   l4299 1FEC  
                                 l4491 3D8E                                   l4467 3D20  
                                 l4539 334A                                   l4619 4ED0  
                                 l5523 2EE0                                   l5515 2E2A  
                                 l5507 2DCC                                   l5451 2B0C  
                                 l5179 4CF4                                   l4627 4E6C  
                                 l4643 4F56                                   l4635 4DE2  
                                 l4651 4D72                                   l5283 2A28  
                                 l5275 29F0                                   l5259 296C  
                                 l5531 4406                                   l5371 45A2  
                                 l5363 458A                                   l5355 4532  
                                 l4803 2812                                   l4731 25BC  
                                 l4723 2594                                   l4707 252C  
                                 l4715 2556                                   l4395 225C  
                                 l4387 2206                                   l4379 21D0  
                                 l5195 3EFA                                   l5187 3EE2  
                                 l5099 3AEA                                   l6067 3772  
                                 l6059 36D6                                   l6227 1B56  
                                 l6219 1AF4                                   l6171 182E  
                                 l6163 1762                                   l6155 1746  
                                 l6147 172E                                   l6139 16F4  
                                 l6091 167E                                   l6083 1668  
                                 l6075 1658                                   l5349 4FB6  
                                 l4581 4B34                                   l4573 4AFC  
                                 l4557 50E4                                   l4565 50DA  
                                 l4661 4F12                                   l3781 40CA  
                                 l3773 40A4                                   l3765 407C  
                                 l3837 41DA                                   l3829 41B6  
                                 l3861 4D4C                                   l3757 5016  
                                 l3941 4222                                   l4493 3D9E  
                                 l4477 3D4A                                   l4469 3D24  
                                 l5525 2EF8                                   l5517 2E38  
                                 l5509 2DE2                                   l5461 2B6A  
                                 l5453 2B20                                   l5445 2AD8  
                                 l4645 4F64                                   l4629 4E78  
                                 l4637 4DFA                                   l4653 4D7E  
                                 l5285 2A3E                                   l5293 2A6C  
                                 l5277 2A0E                                   l5269 29B0  
                                 l5533 4460                                   l5373 45A4  
                                 l5365 458C                                   l5357 4558  
                                 l4805 2820                                   l4741 25FA  
                                 l4733 25BC                                   l4725 2598  
                                 l4717 2566                                   l4709 253C  
                                 l4397 2268                                   l4389 2216  
                                 l4901 0ED8                                   l5197 3F28  
                                 l5189 3EF4                                   l6069 37A2  
                                 l6229 1B7C                                   l6181 191C  
                                 l6173 187E                                   l6165 1784  
                                 l6157 1748                                   l6149 1736  
                                 l6093 1682                                   l6085 1668  
                                 l6077 165C                                   l4575 4B04  
                                 l4567 50EA                                   l4559 50CC  
                                 l4663 4F14                                   l3791 4104  
                                 l3783 40D2                                   l3775 40AC  
                                 l3767 408A                                   l3839 41E2  
                                 l3759 5032                                   l3943 423E  
                                 l3935 41EC                                   l4495 3DAE  
                                 l4487 3D72                                   l4479 3D54  
                                 l3871 47DC                                   l3863 47B2  
                                 l3951 3938                                   l5519 2E50  
                                 l5471 2BD4                                   l5463 2B78  
                                 l5455 2B38                                   l4647 4F70  
                                 l4639 4F34                                   l4655 4D96  
                                 l5295 2A82                                   l5287 2A4A  
                                 l5535 447E                                   l5375 45AE  
                                 l5367 4596                                   l5359 455C  
                                 l4807 2826                                   l4751 2646  
                                 l4743 260A                                   l4719 257C  
                                 l4831 4316                                   l4823 429A  
                                 l4399 2284                                   l4911 0FD4  
                                 l4903 0F08                                   l5199 3F2A  
                                 l6191 1980                                   l6183 1934  
                                 l6175 18E2                                   l6167 17A4  
                                 l6159 1754                                   l6095 168A  
                                 l6087 1674                                   l6079 1660  
                                 l4577 4B0C                                   l4569 50EE  
                                 l4665 4F1C                                   l4657 4F02  
                                 l3793 410C                                   l3785 40DA  
                                 l3777 40B0                                   l3769 4092  
                                 l3945 425E                                   l3937 41F4  
                                 l6273 33E6                                   l4817 4A2A  
                                 l4489 3D7E                                   l3881 4810  
                                 l3873 47EA                                   l3865 47BA  
                                 l3961 39F4                                   l3953 3986  
                                 l5481 2C9A                                   l5473 2BE4  
                                 l5465 2B86                                   l5457 2B3E  
                                 l4649 4F86                                   l5297 2A98  
                                 l5289 2A68                                   l5537 4482  
                                 l5529 43EE                                   l5369 4598  
                                 l4809 2828                                   l4761 2690  
                                 l4753 2654                                   l4745 261A  
                                 l4737 25D0                                   l4729 25AC  
                                 l4681 24A6                                   l4833 433A  
                                 l4825 42C8                                   l4841 3DEE  
                                 l4921 10C8                                   l4913 1008  
                                 l4905 0F38                                   l4593 3FD2  
                                 l4585 3FAE                                   l6193 1990  
                                 l6185 1940                                   l6177 18FC  
                                 l6169 17C6                                   l6097 1692  
                                 l6089 167A                                   l4579 4B32  
                                 l4659 4F06                                   l3795 410E  
                                 l3787 40E8                                   l3779 40B8  
                                 l3859 4D3E                                   l3939 421A  
                                 l3947 4266                                   l4819 4A3A  
                                 l4499 31AC                                   l3883 4816  
                                 l3875 47F0                                   l3867 47CC  
                                 l3963 3A34                                   l3955 3998  
                                 l5483 2CB2                                   l5475 2BF2  
                                 l5467 2B9C                                   l5459 2B5A  
                                 l5299 2AAC                                   l4771 26D6  
                                 l4763 26A2                                   l4755 2660  
                                 l4747 2622                                   l4739 25EA  
                                 l4691 24E6                                   l4683 24B4  
                                 l4835 4340                                   l4827 42D8  
                                 l4851 3E5C                                   l4843 3DFE  
                                 l4931 11CC                                   l4923 10FC  
                                 l4915 103C                                   l4907 0F6C  
                                 l4595 3FDC                                   l4587 3FCA  
                                 l6195 199C                                   l6187 195A  
                                 l6179 1908                                   l6099 169A  
                                 l3797 4114                                   l3789 40EE  
                                 l5901 338C                                   l3877 4806  
                                 l3869 47D4                                   l3957 399C  
                                 l3949 391E                                   l5493 2D52  
                                 l5477 2C0A                                   l5469 2BC8  
                                 l4861 4FC4                                   l4781 2736  
                                 l4765 26B8                                   l4773 26E8  
                                 l4757 267E                                   l4749 2632  
                                 l4693 24E8                                   l4685 24B6  
                                 l4829 4306                                   l4853 3E6A  
                                 l4845 3E2C                                   l4941 12CE  
                                 l4933 11FE                                   l4925 1130  
                                 l4917 1070                                   l4909 0FA0  
                                 l4597 4036                                   l6197 19BE  
                                 l6189 1966                                   l3799 411A  
                                 l5823 4B38                                   l5831 448C  
                                 l5911 33B6                                   l5903 339A  
                                 l3879 480E                                   l3959 39DA  
                                 l5495 2D66                                   l5487 2D1E  
                                 l5479 2C70                                   l4871 4FDA  
                                 l4863 4FCE                                   l4791 27A4  
                                 l4775 26F6                                   l4767 26BE  
                                 l4759 2680                                   l4687 24C6  
                                 l4695 24F0                                   l4679 249A  
                                 l4855 3EBA                                   l4847 3E3C  
                                 l4839 3DC0                                   l4951 13E2  
                                 l4943 1300                                   l4935 1232  
                                 l4927 1162                                   l4919 1094  
                                 l4599 403E                                   l6199 19E0  
                                 l4881 493A                                   l5825 4B44  
                                 l5841 44DE                                   l5833 449C  
                                 l5921 3418                                   l5905 339E  
                                 l5497 2D7E                                   l4865 4FD4  
                                 l4873 503E                                   l4785 2760  
                                 l4793 27A8                                   l4777 26FA  
                                 l4769 26C8                                   l4697 2500  
                                 l4689 24D6                                   l4857 3EC0  
                                 l4849 3E4A                                   l4953 143E  
                                 l4961 15C2                                   l4945 1334  
                                 l4937 1264                                   l4929 1194  
                                 l4883 4980                                   l4875 48EA  
                                 l5827 4B52                                   l5843 44E2  
                                 l5835 44AC                                   l5851 34FE  
                                 l5931 347C                                   l5923 3428  
                                 l5915 33BE                                   l5907 33A6  
                                 l5499 2D84                                   l4867 4FD6  
                                 l4971 4BFC                                   l4795 27C2  
                                 l4787 276C                                   l4779 2708  
                                 l4699 2506                                   l4963 15F6  
                                 l4955 1470                                   l4947 139A  
                                 l4939 1296                                   l4893 498A  
                                 l4877 4930                                   l5829 4B56  
                                 l5845 4510                                   l5837 44BA  
                                 l5861 3538                                   l5853 3506  
                                 l5933 3494                                   l5925 3432  
                                 l5909 33AA                                   l5917 33F4  
                                 l4869 4FD8                                   l4981 4C70  
                                 l4973 4C14                                   l4797 27D8  
                                 l4789 277A                                   l4965 1606  
                                 l4957 1500                                   l4949 13B0  
                                 l4887 49DA                                   l4895 49D0  
                                 l5839 44CE                                   l5871 358E  
                                 l5863 3540                                   l5855 3516  
                                 l5847 34E6                                   l5935 349E  
                                 l5927 343C                                   l5919 3404  
                                 l5943 34BE                                   l4975 4892  
                                 l4983 4C88                                   l4991 4E08  
                                 l4799 27F2                                   l4959 1532  
                                 l4889 4A20                                   l5881 35E0  
                                 l5873 3592                                   l5865 354C  
                                 l5857 351C                                   l5849 34EA  
                                 l5929 345C                                   l5953 4AB4  
                                 l4977 48A8                                   l4985 4E3A  
                                 l4993 4E14                                   l4969 4BF0  
                                 l5891 3630                                   l5883 35F0  
                                 l5875 3598                                   l5867 3556  
                                 l5859 352C                                   l5939 34B2  
                                 l5955 4ABC                                   l5971 4D32  
                                 l5963 4D0A                                   l4987 4E46  
                                 l4979 4C64                                   l4995 4E2C  
                                 l4899 0EC6                                   l5893 3640  
                                 l5885 360A                                   l5869 355C  
                                 l5877 35B4                                   l5957 4ACC  
                                 l5965 4D12                                   l5981 2F6A  
                                 l4989 4E5E                                   l4997 4BB6  
                                 l5879 35CE                                   l5887 361A  
                                 l5959 4AEC                                   l5967 4D1A  
                                 l5975 507A                                   l5991 2FC6  
                                 l5983 2F82                                   l4999 4BC2  
                                 l5889 362A                                   l5897 335E  
                                 l5969 4D22                                   l5977 508E  
                                 l5993 2FDE                                   l5985 2F9A  
                                 l5899 3384                                   l5995 2FF6  
                                 l5987 2FB2                                   l5979 2F64  
                                 l5997 300E                                   l5989 2FC4  
                                 l5999 3024                                   STR_1 0EA2  
                                 STR_2 0EB7                                   STR_3 0E8A  
                                 STR_4 0EC3                                   STR_5 0E01  
                                 STR_6 0EC3                                   STR_7 0E3B  
                                 STR_8 0EC3                                   STR_9 0E56  
                                 u3000 39F4                                   u3001 39F0  
                                 u3100 4628                                   u3101 4624  
                                 u3110 463E                                   u3111 463A  
                                 u3200 1C2E                                   u3120 473A  
                                 u4000 251A                           _BAUD4CONbits 0EE9  
                                 u3201 1C2A                                   u3121 4736  
                                 u4001 2516                                   u3210 1C44  
                                 u3130 46BC                                   u4010 252C  
                                 u3211 1C40                                   u3131 46B8  
                                 u4011 2528                                   u3060 4FFE  
                                 u3300 1D7E                                   u3220 1C56  
                                 u3140 47B0                                   u4100 26D6  
                                 u4020 253C                                   u3061 4FFA  
                                 u3301 1D7A                                   u3221 1C52  
                                 u3141 47AC                                   u4101 26D2  
                                 u4021 2538                                   u3070 5014  
                                 u3310 1D9E                                   u3230 1C66  
                                 u3150 4CD4                                   u4110 26F6  
                                 u4030 257C                                   u3071 5010  
                                 u3311 1D9A                                   u3231 1C62  
                                 u3151 4CD0                                   u4111 26F2  
                                 u4031 2578                                   u3160 50C4  
                                 u3400 1EDE                                   u3320 1DAC  
                                 u3240 1CA2                                   u3080 45CC  
                                 u4120 2708                                   u4040 25BC  
                                 u4200 42C8                                   u3161 50C0  
                                 u3401 1EDA                                   u3321 1DA8  
                                 u3241 1C9E                                   u3081 45C8  
                                 u4121 2704                                   u4041 25B8  
                                 u4201 42C4                                   u3410 1F0A  
                                 u3330 1DBC                                   u3250 1CB0  
                                 u3170 1BCA                                   u3090 45EA  
                                 u4130 2736                                   u4050 2632  
                                 u4210 4306                                   _T2PR 0FBC  
                                 u3411 1F06                                   u3331 1DB8  
                                 u3251 1CAC                                   u3171 1BC6  
                                 u3091 45E6                                   u4131 2732  
                                 u4051 262E                                   u4211 4302  
                                 u2700 40E8                                   u2620 4354  
                                 u3500 1FEC                                   u3420 1F1A  
                                 u3340 1DEE                                   u3260 1D1E  
                                 u3180 1BDC                                   u4140 274C  
                                 u4060 2654                                   u4220 433A  
                                 u4300 11FE                                   u2701 40E4  
                                 u2621 4350                                   u3501 1FE8  
                                 u3421 1F16                                   u3341 1DEA  
                                 u3261 1D1A                                   u3181 1BD8  
                                 u4141 2748                                   u4061 2650  
                                 u4221 4336                                   u4301 11FA  
                                 u2710 4104                                   u2630 4364  
                                 u3510 1FFE                                   u3430 1F36  
                                 u3350 1DFC                                   u3270 1D36  
                                 u3190 1BEC                                   u4150 2760  
                                 u4070 267E                                   u4230 3DEE  
                                 u4310 1264                                   u2711 4100  
                                 u2631 4360                                   u3511 1FFA  
                                 u3431 1F32                                   u3351 1DF8  
                                 u3271 1D30                                   u3191 1BE8  
                                 u4151 275C                                   u4071 267A  
                                 u4231 3DEA                                   u4311 1260  
                                 u2720 412A                                   u2640 438A  
                                 u5200 4B76                                   u3520 200E  
                                 u3440 1F46                                   u3360 1E1A  
                                 u3280 1D38                                   u4160 277A  
                                 u4080 26A2                                   u4240 3E2C  
                                 u3600 20FE                                   u4320 1296  
                                 u4400 37D8                                   u2721 4126  
                                 u2641 4386                                   u5201 4B72  
                                 u3521 200A                                   u3441 1F42  
                                 u3361 1E16                                   u4161 2776  
                                 u4081 269E                                   u4241 3E28  
                                 u3601 20FA                                   u4321 1292  
                                 u4401 37D4                                   u2730 414E  
                                 u2650 43BC                                   u5210 449C  
                                 u3530 202E                                   u3450 1F58  
                                 u3370 1E52                                   u3290 1D60  
                                 u4170 27C2                                   u4090 26B8  
                                 u4250 3E4A                                   u3610 210E  
                                 u4330 1300                                   u4410 3832  
                                 u2731 414A                                   u2651 43B8  
                                 u5211 4498                                   u3531 202A  
                                 u3451 1F54                                   u3371 1E4E  
                                 u3291 1D5C                                   u4171 27BE  
                                 u4091 26B4                                   u4251 3E46  
                                 u3611 210A                                   u4331 12FC  
                                 u4411 382E                                   u2740 4168  
                                 u5220 44BA                                   u5300 35E0  
                                 u3540 2040                                   u3460 1F6E  
                                 u3380 1E98                                   u4180 27F2  
                                 u4260 3E6A                                   u3700 23B2  
                                 u3620 2144                                   u4340 139A  
                                 u4500 3B0C                                   u4420 385C  
                                 u2741 4164                                   u5221 44B6  
                                 u5301 35DC                                   u3541 203C  
                                 u3461 1F6A                                   u3381 1E94  
                                 u4181 27EE                                   u4261 3E66  
                                 u3701 23AE                                   u3621 2140  
                                 u4341 1396                                   u4501 3B08  
                                 u4421 3858                                   u2670 408A  
                                 u2750 4182                                   u2830 4D4C  
                                 u5230 4500                                   u5310 35F0  
                                 u3550 205C                                   u3470 1F84  
                                 u3390 1ECE                                   u4190 2820  
                                 u4270 3EBA                                   u3710 23CC  
                                 u3630 2154                                   u4350 13E2  
                                 u4510 3B3A                                   u4430 387E  
                                 u2671 4086                                   u2751 417E  
                                 u2831 4D48                                   u5231 44FC  
                                 u5311 35EC                                   u3551 2058  
                                 u3471 1F80                                   u3391 1ECA  
                                 u6007 2EEA                                   u4191 281C  
                                 u4271 3EB6                                   u3711 23C8  
                                 u3631 2150                                   u4351 13DE  
                                 u4511 3B36                                   u4431 387A  
                                 u2680 40A4                                   u2760 41A0  
                                 u5240 4510                                   u5320 360A  
                                 u5400 4AEC                                   u3480 1F98  
                                 u3800 3D8E                                   u2840 47CC  
                                 u4600 3C98                                   u3720 2414  
                                 u3640 22CE                                   u3560 208A  
                                 u4360 1470                                   u4280 1162  
                                 u4520 3B66                                   u4440 38A0  
                                 u2681 40A0                                   u2761 419C  
                                 u5241 450C                                   u5321 3606  
                                 u5401 4AE8                                   u3481 1F94  
                                 u3801 3D8A                                   u2841 47C8  
                                 u6017 4716                                   u4601 3C94  
                                 u3721 2410                                   u3561 2086  
                                 u4361 146C                                   u4281 115E  
                                 u4521 3B62                                   u4441 389C  
                                 u2690 40CA                                   u2770 41B6  
                                 u5330 361A                                   u5250 34FA  
                                 u5410 2F98                                   u3490 1FB2  
                                 u3810 3D9E                                   u2850 47EA  
                                 u4610 284A                                   u4530 4844  
                                 u3730 2442                                   u3650 2328  
                                 u3570 209C                                   u4370 1532  
                                 u4290 1194                                   u4450 38E2  
                                 u6107 4F16                                   u2691 40C6  
                                 u2771 41B2                                   u5331 3616  
                                 u5251 34F4                                   u5411 2F94  
                                 u3491 1FAE                                   u3811 3D9A  
                                 u2851 47E6                                   u6027 4608  
                                 u4611 2846                                   u4531 4840  
                                 u3731 243E                                   u3651 2324  
                                 u3571 2098                                   u4371 152E  
                                 u4291 1190                                   u4451 38DE  
                                 u2780 41DA                                   u5340 362A  
                                 u5260 34FC                                   u5420 2FF4  
                                 u3900 333C                                   u3820 31BC  
                                 u2860 4806                                   u4700 29DC  
                                 u4620 2860                                   u4540 487E  
                                 u3740 247C                                   u3660 2348  
                                 u3580 20AC                                   u4380 1606  
                                 u4460 3904                                   u5500 3752  
                                 u2781 41D6                                   u5341 3626  
                                 u5421 2FF0                                   u3901 3338  
                                 u3821 31B8                                   u6037 4CB0  
                                 u2861 4802                                   u4701 29D8  
                                 u4621 285C                                   u4541 487A  
                                 u3741 2478                                   u3661 2344  
                                 u3645 22C4                                   u3581 20A8  
                                 u4381 1602                                   u4525 3B58  
                                 u4461 3900                                   u5501 374E  
                                 u5270 3516                                   u5350 3384  
                                 u5430 3054                                   u3750 3CD0  
                                 u3910 334A                                   u3830 31CA  
                                 u4390 48A8                                   u4710 2A28  
                                 u4630 28B0                                   u4550 3BC0  
                                 u3670 235A                                   u3590 20EC  
                                 u4470 3A9C                                   u5510 37B6  
                                 u5271 3512                                   u5351 3380  
                                 u5431 3050                                   u6047 2FA4  
                                 u3751 3CCC                                   u3911 3346  
                                 u3831 31C6                                   u4391 48A4  
                                 u4711 2A24                                   u4631 28AC  
                                 u4551 3BBC                                   u3671 2356  
                                 u3591 20E8                                   u4471 3A98  
                                 u5511 37B2                                   u5280 352C  
                                 u5360 3404                                   u5440 30B4  
                                 u3760 3D04                                   u3840 3226  
                                 u4720 2A3E                                   u4640 28C6  
                                 u4560 3BE2                                   u3680 2388  
                                 u4480 3ABC                                   u5600 1B2C  
                                 u5520 18FA                                   u5281 3528  
                                 u5361 3400                                   u5441 30B0  
                                 u6057 3000                                   u3841 3222  
                                 u4721 2A3A                                   u4641 28C2  
                                 u4561 3BDE                                   u3681 2384  
                                 u4481 3AB8                                   u5601 1B28  
                                 u5521 18F6                                   u3930 4B20  
                                 u5290 35CE                                   u2970 421A  
                                 u5370 3428                                   u5450 311C  
                                 u3770 3D32                                   u3850 327C  
                                 u4810 2B5A                                   u4730 2A82  
                                 u4650 2912                                   u4570 3C1C  
                                 u3690 239E                                   u4490 3AEA  
                                 u5530 1A68                                   u3931 4B18  
                                 u5291 35CA                                   u2971 4216  
                                 u5371 3424                                   u5451 3118  
                                 u6067 3060                                   u3771 3D2E  
                                 u3851 3278                                   u4811 2B56  
                                 u4731 2A7E                                   u4651 290E  
                                 u4571 3C18                                   u3691 239A  
                                 u4491 3AE6                                   u5531 1A64  
                                 u2980 4290                                   u5380 345C  
                                 u5460 3190                                   u3780 3D46  
                                 u3860 32C6                                   u4900 2DBE  
                                 u4820 2B78                                   u4740 2A98  
                                 u4660 2928                                   u4580 3C3E  
                                 u5540 1AB2                                   u2981 428C  
                                 u5381 3458                                   u5461 318C  
                                 u6077 30C4                                   u3781 3D42  
                                 u3765 3CFA                                   u3861 32C2  
                                 u4901 2DBA                                   u4821 2B74  
                                 u4741 2A94                                   u4661 2924  
                                 u4581 3C3A                                   u4485 3AAE  
                                 u5541 1AAE                                   u5390 347C  
                                 u3790 3D6E                                   u3870 32E4  
                                 u2990 3938                                   u4910 2DCC  
                                 u4830 2B86                                   u4670 296C  
                                 u4590 3C66                                   u3950 4076  
                                 u5470 367E                                   u5550 1AC8  
                                 u5391 3478                                   u6087 312C  
                                 u3791 3D6A                                   u3871 32E0  
                                 u2991 3934                                   u4911 2DC8  
                                 u4831 2B82                                   u4671 2968  
                                 u4591 3C62                                   u3951 4072  
                                 u5471 367A                                   u5551 1AC4  
                                 u3960 4F32                                   u3880 32F4  
                                 u4920 2E0E                                   u4840 2BC8  
                                 u4680 2982                                   u5480 36B8  
                                 u5560 1ADE                                   u3961 4F2E  
                                 u6097 319A                                   u3881 32F0  
                                 u4921 2E0A                                   u4841 2BC4  
                                 u4681 297E                                   u5481 36B4  
                                 u5561 1ADA                                   u3890 3302  
                                 u4930 2E38                                   u4850 2BF2  
                                 u4690 29C6                                   u3970 24B4  
                                 u5490 36D6                                   u5570 1AF4  
                                 u3891 32FE                                   u4931 2E34  
                                 u4851 2BEE                                   u4691 29C2  
                                 u3971 24B0                                   u5707 404C  
                                 u5491 36D2                                   u5571 1AF0  
                                 u5627 16E4                                   u3948 4B22  
                                 u4940 2EB6                                   u4860 2C70  
                                 u3980 24C6                                   u5580 1B0A  
                                 u4941 2EB2                                   u4861 2C6C  
                                 u3981 24C2                                   u5717 4B8E  
                                 u5581 1B06                                   u5637 1928  
                                 u4950 2EE0                                   u4870 2C9A  
                                 u3990 24D6                                   u5590 1B18  
                                 u4951 2EDC                                   u4871 2C96  
                                 u5807 4DBA                                   u3991 24D2  
                                 u5727 3ED4                                   u5591 1B14  
                                 u5647 194C                                   u4960 2F5E  
                                 u4880 2D18                                   u4961 2F5A  
                                 u4881 2D14                                   u5817 4DEC  
                                 u5737 3F04                                   u5657 1972  
                                 u4890 2DA0                                   u4891 2D9C  
                                 u5907 2B2A                                   u5827 4E1E  
                                 u5747 3F38                                   u5667 1A80  
                                 u5917 2BDA                                   u5837 4F4A  
                                 u5757 3F6C                                   u5677 37F6  
                                 u5927 2BFC                                   u5847 4C7A  
                                 u5767 4BCC                                   u5687 38BE  
                                 u5937 2C7A                                   u5857 4E50  
                                 u5777 4C06                                   u5697 3BA0  
                                 u5947 2CA4                                   u5867 4E82  
                                 u5787 4C40                                   u5957 4698  
                                 u5877 4F7A                                   u5797 4D88  
                                 u5967 2D70                                   u5887 4786  
                                 u5977 2E20                                   u5897 4CEA  
                                 u5987 2E42                                   u5997 2EC0  
                 _calibration_turningL 2D1E                   _calibration_turningR 2AD8  
                                 abs@a 0008                                   _dbuf 0196  
                                 _main 1658                                   _dtoa 34E6  
                 convert_rgb2hue@cCurr 004D                                   _prec 00C6  
                                 _time 0200                                   pad@i 0016  
                                 pad@p 0013                                   fsr1h 0FE2  
                                 fsr2h 0FDA                                   indf2 0FDF  
                                 fsr1l 0FE1                                   fsr2l 0FD9  
                                 btemp 005D                                   _stop 45B2  
                  fullSpeedAhead@power 004F                                   prodh 0FF4  
                                 prodl 0FF3                                   start 003A  
                     __end_of_ADC_init 50B2                        ___fldiv@new_exp 003A  
               __end_of_color_read_Red 493A                           ___param_bank 0000  
                       reading_hue@hue 0054                                  ??_abs 000A  
                                ??_pad 0015                          ___fltol@sign1 004A  
                      __end_of___aldiv 3CBA                        __end_of___fladd 2070  
                                ?_main 0001                                  ?_dtoa 0018  
                                _ADPCH 0F5F                        __end_of___fldiv 2834  
                      __end_of___awdiv 413C                                  STR_10 0EC3  
                                STR_11 0E1E                                  STR_12 0EC3  
                                STR_13 0E71                                  STR_14 0EC3  
                      __end_of___awmod 41EC                        __end_of___flmul 249A  
                      __end_of___flsub 4A70                        __end_of___fltol 3DC0  
                                ?_stop 0014                        ___awdiv@divisor 0004  
                      __end_of___lwdiv 4826                                  i1l632 0032  
                      ___awdiv@counter 0006                      ??_convert_rgb2hue 004E  
                         vfpfcnvrt@fmt 0024                                  _TMR0H 0FD4  
                                _TMR0L 0FD3                    ___lmul@multiplicand 0006  
                      __end_of_left135 4F64                __end_of_sendCharSerial4 50CA  
           __end_of_I2C_2_Master_Start 50EA             __end_of_I2C_2_Master_Write 50D6  
                                _flags 00C8                    read_prec_or_width@c 000A  
                  read_prec_or_width@n 000B                                  _fputc 4344  
                                _fputs 4B38                                  pad@fp 0010  
                                _width 00C4                                  _putch 50F4  
                                dtoa@d 0019                                  dtoa@i 0021  
                                dtoa@p 001D                        __end_of_right90 4ED0  
                                dtoa@s 0020                                  dtoa@w 001E  
                         ?_reading_hue 0050                        __end_of_moveRed 4C2A  
                ?_calibration_turningL 004C                  ?_calibration_turningR 004C  
                                tablat 0FF5                        __end_of_turn180 4E9E  
                                ttemp5 005E                                  ttemp6 0061  
                                ttemp7 0065                                  status 0FD8  
                                wtemp8 005E                        __end_of_sprintf 4D3E  
                convert_rgb2hue@redmax 0064                __end_of_color_read_Blue 4A2A  
                _I2C_2_Master_RepStart 50EA                        ?_color_read_Red 0006  
                      __initialization 4A70                           __end_of_main 1BB0  
                         __end_of_dtoa 365E                           __end_of_stop 4640  
                      movePink@factorL 0021                  __end_of_moveLightBlue 4E3A  
                        main@clear_max 00B6                        _get16bitTMR0val 43EE  
                               ??_main 00AC                                 ??_dtoa 001B  
                               ??_stop 0016                          __activetblptr 0003  
           __end_of_read_prec_or_width 429A                        _reverseStraight 3A72  
                         ?_setMotorPWM 000F            calibration_turningL@factorL 006E  
                               ?_fputc 0002                                 ?_fputs 000A  
                               _ADRESH 0F64                                 _CCPR1H 0FAA  
                               _CCPR2H 0FA6                                 _CCPR3H 0F25  
                               _CCPR4H 0F21                       ___awdiv@dividend 0002  
                     __end_of_backHalf 4F94                                 ?_putch 0001  
                               _RC0PPS 0E62                                 _RC4REG 0EE3  
                               _RE2PPS 0E74                                 _RD5PPS 0E6F  
                               _RC7PPS 0E69                                 _RE4PPS 0E76  
                               _RD6PPS 0E70                                 i1l3711 001E  
                               i1l3713 002E                                 _RG6PPS 0E88  
                        vfpfcnvrt@done 002C               __end_of_color_click_init 4D0A  
                               _RX4PPS 0E15                                 _TX4REG 0EE4  
                     __end_of___xxtofl 335E            convert_rgb2hue@greencurrent 0068  
                     __end_of_decision 2AD8                                 _LowISR 0018  
          calibration_turningR@factorR 006E                          ??_Timer0_init 0002  
                        main@path_step 00C0                           _CCPTMRS0bits 0FAD  
                         vfprintf@cfmt 0031                                 ___flge 3DC0  
                               ___fleq 429A                                 ___lmul 4826  
                            ??___aldiv 0016                              ??___fladd 0018  
                               ___wmul 5016                              ??___fldiv 0031  
                     backOneAndHalf@mL 0019                              ??___awdiv 0006  
                     backOneAndHalf@mR 001A                              ??___awmod 0006  
                            ??___flmul 0018                                 _action 013C  
                            ??___flsub 0028                              ??___fltol 0046  
                            ??___lwdiv 000C                                 _left90 4ED0  
                 read_prec_or_width@ap 0009                           ?_reverseTurn 001F  
                               clear_0 4A88                                 clear_1 4A94  
                               clear_2 4AA0                       ___awdiv@quotient 0008  
                      ___awmod@divisor 0004                                 _motorL 00E9  
                               _motorR 00E0                                 isa$std 0001  
                      ___awmod@counter 0006                              ??_left135 001B  
                   send2USART@hue_char 0060                                 pad@buf 0011  
                     __end_of_right135 4E08                                 dtoa@fp 0018  
                     __end_of_moveBlue 4E6C                       __end_of_movePink 4C64  
                               fputc@c 0002                                 fputs@c 000D  
                               fputs@i 000E                                 fputs@s 000A  
                            ??_right90 001D                           __mediumconst 0000  
                            ??_moveRed 0023                                 tblptrh 0FF7  
                               tblptrl 0FF6                                 tblptru 0FF8  
                            ?_ADC_init 0001                       ?_sendCharSerial4 0001  
               convert_rgb2hue@bluemax 0074                                 putch@c 0001  
                     __end_of_vfprintf 4AF6                              ??_turn180 001B  
                               stop@mL 0014                                 stop@mR 0015  
                    ??_initDCmotorsPWM 0004                              ??_sprintf 0038  
               ??_calibration_turningL 004E                 ??_calibration_turningR 004E  
                     __end_of_turnLeft 473C               get16bitTMR0val@path_step 001C  
                           ___flge@ff1 0002                             ___flge@ff2 0006  
                         ___xxtofl@arg 000C                           ___xxtofl@exp 000B  
                         ___xxtofl@val 0002                             ___fleq@ff1 0002  
                           ___fleq@ff2 0006                        fullSpeedBack@mL 0014  
                      fullSpeedBack@mR 0015                             __accesstop 0060  
              __end_of__initialization 4AAA                     _calibration_colors 2F64  
             __end_of_color_read_Clear 49DA               __end_of_color_read_Green 498A  
               ?_I2C_2_Master_RepStart 0001                         _backOneAndHalf 4D72  
                        ___rparam_used 0001                             ___fltol@f1 0042  
                     ?_color_read_Blue 0006                    ?_calibration_colors 004E  
                       __pcstackCOMRAM 0001                __end_of_get16bitTMR0val 448C  
                        _fullSpeedBack 473C                           __pidataBANK0 50F6  
                        __end_of_fputc 43EE                          __end_of_fputs 4B78  
                        __end_of_putch 50F6                __end_of_reverseStraight 3BAE  
                  __end_of_Timer0_init 4FC4                       reading_hue@cCurr 0050  
                   reverseTurn@factorL 0028                     reverseTurn@factorR 0026  
                 ??_calibration_colors 004F                             ??_ADC_init 0002  
                       main@clear_norm 00BE                             backHalf@mL 0019  
                           backHalf@mR 001A                                ??_fputc 0005  
                              ??_fputs 000D                                ??_putch 0002  
                           __pbssBANK0 00C4                             __pbssBANK1 0100  
                           __pbssBANK2 0200                     reverseTurn@time_ms 0022  
               __end_of_backOneAndHalf 4DA4                 get16bitTMR0val@time_ms 0022  
               calibration_colors@cCal 004E                                ?_LowISR 0001  
                    _color_writetoaddr 503C                           _T2CLKCONbits 0FBF  
                       ?_fullSpeedBack 0014                        _convert_rgb2hue 0EC6  
                              ?___flge 0002                                ?___fleq 0002  
                   ?_color_writetoaddr 0004                                ?___lmul 0002  
                calibration_turningL@i 006C                  calibration_turningR@i 006C  
                        _customDelayMs 4C9E                                ?___wmul 0002  
                              ?_left90 0019                  reverseTurn@actionStep 0021  
                       ___lmul@product 000A                              ?_backHalf 0019  
                  ??_color_writetoaddr 0005                              ?___xxtofl 0002  
                  _convert_rgb2hue$364 0080                    _convert_rgb2hue$365 0084  
                  _convert_rgb2hue$366 0088                    _convert_rgb2hue$367 008C  
                            ?_decision 0025                                _SP4BRGH 0EE6  
                              _SP4BRGL 0EE5                                _SSP2ADD 0ED6  
                              _SSP2BUF 0ED5                            moveGreen@mL 001F  
                          moveGreen@mR 0020                        ?_backOneAndHalf 0019  
               color_writetoaddr@value 0004                       ??_color_read_Red 0008  
            __end_of_color_writetoaddr 505C                              _ADREFbits 0F58  
                            ?_right135 0019                     _I2C_2_Master_Start 50E0  
                           _initUSART4 505C                     _I2C_2_Master_Write 50CA  
                            ?_moveBlue 001D                      main@clear_current 00BA  
                              __Hparam 0000                              ?_movePink 001F  
                              __Lparam 0000                      color_read_Red@tmp 000B  
                          moveWhite@mL 001D                            moveWhite@mR 001E  
            customDelayMs@milliseconds 0002                            _Timer0_init 4F94  
                       ?_customDelayMs 0002                sendStringSerial4@string 0003  
                     ?_get16bitTMR0val 001C                                ___aldiv 3BAE  
                              ___fladd 1BB0                                ___fldiv 249A  
                              ___awdiv 4078                                ___awmod 413C  
                              ___flmul 2070                                ___flsub 4A2A  
                              ___fltol 3CBA                    ?_I2C_2_Master_Start 0001  
                              ___lwdiv 47B2                    ?_I2C_2_Master_Write 0001  
                            ?_vfprintf 002E    calibration_turningL@inactivityLimit 0060  
                         __psmallconst 0E00                                __pcinit 4A70  
                           ??_backHalf 001B                      __end_of_logAction 48EA  
                              __ramtop 0E00                       ?_reverseStraight 0051  
                           _send2USART 507A                              ?_turnLeft 0014  
                              _left135 4F34                                __ptext0 1658  
                              __ptext1 365E                                __ptext2 37C8  
                              __ptext3 3A72                                __ptext4 3FAE  
                              __ptext5 4B78                                __ptext6 3EC4  
                              __ptext7 0EC6                                __ptext8 2070  
                              __ptext9 3DC0                              _T2CONbits 0FBD  
       right90@delay_after_calibration 001D                  read_prec_or_width@fmt 0008  
                           ??___xxtofl 0006                       ___awmod@dividend 0002  
                           ??_decision 002D                 reverseStraight@delayMs 0059  
                     ___aldiv@dividend 000E                                _right90 4E9E  
                            _T2HLTbits 0FBE                                _moveRed 4BF0  
                        _RxBufWriteCnt 00CB                                _turn180 4E6C  
                              _sprintf 4D0A                                main@hue 00C2  
                 ??_I2C_2_Master_Start 0003                   ??_I2C_2_Master_Write 0003  
                 end_of_initialization 4AAA                      __end_of_moveGreen 4C9E  
               reverseStraight@time_ms 0053                      __end_of_moveWhite 4BB6  
                              fputc@fp 0004                __end_of_convert_rgb2hue 1658  
                              fputs@fp 000C                      ?_color_click_init 0001  
                   _read_prec_or_width 41EC                             _moveOrange 4DA4  
                           ??_right135 001B                             _moveYellow 4BB6  
                      ??_fullSpeedBack 0016                             ??_moveBlue 001F  
                   ??_color_click_init 0006                convert_rgb2hue@clearmax 007C  
                           ??_movePink 0023                       _colorCalibration 00D6  
                      decision@factorL 002B                        decision@factorR 0029  
                  returnHome@path_step 0062                      __end_of_vfpfcnvrt 34E6  
                     ___aldiv@quotient 0018                                postdec2 0FDD  
                  ?_read_prec_or_width 0008                                postinc0 0FEE  
                              postinc1 0FE6                                postinc2 0FDE  
                     vfpfcnvrt@convarg 0028                             ??_vfprintf 0031  
              convert_rgb2hue@greenmax 006C                           _colorCurrent 00CC  
                           _returnHome 365E                        _initDCmotorsPWM 4522  
                           ??_turnLeft 0016                              _PORTFbits 0F8E  
                   setMotorPWM@negDuty 0013                      __end_of_turnRight 46BE  
                          ___fladd@grs 001F                          ___xxtofl@sign 000A  
                          returnHome@i 006F                              _TRISAbits 0F81  
                   setMotorPWM@posDuty 0012                              _TRISCbits 0F83  
                            _TRISDbits 0F84                              _TRISEbits 0F85  
                            _TRISFbits 0F86                              _TRISGbits 0F87  
                            _TRISHbits 0F88                       convert_rgb2hue@b 00A8  
                 ??_read_prec_or_width 000A                       convert_rgb2hue@g 00A4  
                          ___fldiv@grs 003C                       convert_rgb2hue@r 00A0  
                          ___fldiv@rem 0035                       fullSpeedAhead@mL 004C  
                     fullSpeedAhead@mR 004D               color_writetoaddr@address 0005  
              ??_I2C_2_Master_RepStart 0003                            ___flmul@grs 001D  
        left90@delay_after_calibration 001D                            _CCP1CONbits 0FAB  
                    ?_color_read_Clear 0006                           _EUSART4RXbuf 0182  
                         _EUSART4TXbuf 0100                            _CCP2CONbits 0FA7  
                    ?_color_read_Green 0006             convert_rgb2hue@bluecurrent 0070  
                          _CCP3CONbits 0F26                            ?_initUSART4 0001  
                          _CCP4CONbits 0F22              sendCharSerial4@charToSend 0002  
                      ??_customDelayMs 0004                     ??_color_read_Clear 0008  
                   ??_color_read_Green 0008                         __end_of_LowISR 003A  
            convert_rgb2hue@redcurrent 0060                         __end_of___flge 3EC4  
                       __end_of___fleq 4344                         _fullSpeedAhead 3FAE  
                       __end_of___lmul 4890                            vfpfcnvrt@ap 0025  
                          vfpfcnvrt@cp 002D                            vfpfcnvrt@fp 0023  
                       __end_of___wmul 503C                         __end_of_left90 4F02  
                          ?_send2USART 004C         calibration_turningL@adjustment 0068  
                  color_read_Clear@tmp 000B                    start_initialization 4A70  
                          __end_of_abs 4D72                            __end_of_pad 4522  
                        _TxBufWriteCnt 005C                       ?_convert_rgb2hue 004C  
                          ?_moveOrange 001D                         right90@factorR 001B  
                          ?_moveYellow 001F                    color_read_Green@tmp 000B  
                             ??_LowISR 0001                __end_of_initDCmotorsPWM 45B2  
                          vfprintf@fmt 002F                 __end_of_fullSpeedAhead 4078  
                             ??___flge 000A                               ??___fleq 000A  
                             ??___lmul 000A                               ??___wmul 0006  
                             ??_left90 001D                            __pdataBANK0 00F2  
                          ?_returnHome 0060                          _moveLightBlue 4E08  
                            ___fladd@a 0014                              ___fladd@b 0010  
                            ___fldiv@a 002D                              ___fldiv@b 0029  
                            ___flmul@a 0014                              ___flmul@b 0010  
                          __pbssCOMRAM 005B                              ___flsub@a 0024  
                            ___flsub@b 0020                          __pcstackBANK0 0060  
                     ??_backOneAndHalf 001B                      reverseStraight@mL 0051  
                    reverseStraight@mR 0052                  returnHome@action_turn 006E  
                        ??_reading_hue 0052                             right135@mL 0019  
                           right135@mR 001A                       ___lwdiv@dividend 0008  
                            _dtoa$3092 001B                           ?_Timer0_init 0001  
                      ?_fullSpeedAhead 004C                               ?___aldiv 000E  
                             ?___fladd 0010                               ?___fldiv 0029  
                             ?___awdiv 0002                               ?___awmod 0002  
                             ?___flmul 0010                               ?___flsub 0020  
                             ?___fltol 0042                 calibration_turningL@mL 004C  
               calibration_turningL@mR 004D                               ?___lwdiv 0008  
               calibration_turningR@mL 004C                 calibration_turningR@mR 004D  
                           moveBlue@mL 001D                             moveBlue@mR 001E  
                       ?_moveLightBlue 001D                            __pintcodelo 0018  
                             ?_left135 0019                           _readingIndex 00C9  
                 I2C_2_Master_Read@ack 0004                   I2C_2_Master_Read@tmp 0005  
                          __smallconst 0E00                             movePink@mL 001F  
                           movePink@mR 0020                      _I2C_2_Master_Idle 4FEE  
                            _logAction 4890                      _I2C_2_Master_Init 4FC4  
                    _I2C_2_Master_Read 4AF6                               ?_right90 0019  
                    _I2C_2_Master_Stop 50D6                               ?_moveRed 001F  
                         _RxBufReadCnt 00CA                               _ADC_init 5098  
                   ?_I2C_2_Master_Idle 0001                     ?_I2C_2_Master_Init 0001  
                   ?_I2C_2_Master_Read 0001                          ??_setMotorPWM 0010  
                             ?_turn180 0019                     ?_I2C_2_Master_Stop 0001  
                     ___lwdiv@quotient 000C               initDCmotorsPWM@PWMperiod 0002  
                             ?_sprintf 0032                        ___aldiv@divisor 0012  
                    _sendStringSerial4 4F02                    ??_I2C_2_Master_Idle 0002  
                      ___aldiv@counter 0016                    ??_I2C_2_Master_Init 0002  
                  ??_I2C_2_Master_Read 0003                         ___wmul@product 0006  
                             _LATAbits 0F79                    ??_I2C_2_Master_Stop 0003  
                             _LATCbits 0F7B                               _LATEbits 0F7D  
                             _LATGbits 0F7F                               _LATHbits 0F80  
                             _IPR0bits 0E1F                               _PIE0bits 0E29  
                   ?_sendStringSerial4 0003                              _moveGreen 4C64  
                             _PIE4bits 0E2D                    __end_of_reading_hue 3FAE  
                            _moveWhite 4B78                               i1u261_20 002E  
                             i1u261_21 002A                            turnRight@mL 0014  
                          turnRight@mR 0015                               _PIR0bits 0E33  
                             _PIR4bits 0E37                       ?_initDCmotorsPWM 0002  
                            left135@mL 0019                              left135@mR 001A  
                    ??_sendCharSerial4 0002                               _SSP2CON2 0EDA  
                  ??_sendStringSerial4 0004                               _SSP2STAT 0ED8  
                        ??_reverseTurn 002A                              _vfpfcnvrt 335E  
                           _ADCON0bits 0F60              __end_of_I2C_2_Master_Idle 5016  
            __end_of_I2C_2_Master_Init 4FEE              __end_of_I2C_2_Master_Read 4B38  
                    ___wmul@multiplier 0002              __end_of_I2C_2_Master_Stop 50E0  
                         setMotorPWM@m 000F         calibration_turningR@adjustment 0068  
          I2C_2_Master_Write@data_byte 0003                            _ldrReadings 016E  
                           ?_logAction 0002                              main@white 00B0  
                    ??_color_read_Blue 0008                           _TxBufReadCnt 005B  
                            _turnRight 4640                      ___lmul@multiplier 0002  
            __end_of_sendStringSerial4 4F34                           moveOrange@mL 001D  
                         moveOrange@mR 001E          __end_of_I2C_2_Master_RepStart 50F4  
                   color_read_Blue@tmp 000B                    __end_of_setMotorPWM 3A72  
                         ??_initUSART4 0002                             ?_moveGreen 001F  
                           ?_moveWhite 001D                               __Hrparam 0000  
                           vfprintf@ap 0030                               __Lrparam 0000  
                           vfprintf@fp 002E                  __end_of_fullSpeedBack 47B2  
                      ??_moveLightBlue 001F                           moveYellow@mL 001F  
                         moveYellow@mR 0020                             ?_vfpfcnvrt 0023  
                             _backHalf 4F64                           ??_send2USART 004E  
calibration_turningL@inactivityCounter 0064  calibration_turningR@inactivityCounter 0064  
                           _ANSELDbits 0EA7                             _ANSELFbits 0EB4  
                             _dataFlag 00F2                             sprintf@fmt 0033  
                             ___xxtofl 31AA                             _T0CON0bits 0FD5  
                           _T0CON1bits 0FD6            calibration_colors@cal_state 0092  
                             _decision 2834                    __end_of_reverseTurn 391E  
                            right90@mL 0019                              right90@mR 001A  
                      ___lwdiv@divisor 000A                     __end_of_initUSART4 507A  
                      ___lwdiv@counter 000E                             ?_turnRight 0014  
                             __ptext10 429A                               __ptext11 249A  
                             __ptext20 4C2A                               __ptext12 505C  
                             __ptext21 4D72                               __ptext13 4522  
                             __ptext30 473C                               __ptext22 4DA4  
                             __ptext14 43EE                               __ptext31 4890  
                             __ptext23 4DD6                               __ptext15 4826  
                             __ptext40 46BE                               __ptext32 4CD6  
                             __ptext24 4E08                               __ptext16 3BAE  
                             __ptext41 45B2                               __ptext33 503C  
                             __ptext25 4F34                               __ptext17 2834  
                             __ptext50 507A                               __ptext42 391E  
                             __ptext34 4FC4                               __ptext26 4C64  
                             __ptext18 4BB6                               __ptext51 4D0A  
                             __ptext43 47B2                               __ptext35 2AD8  
                             __ptext27 4E3A                               __ptext19 4BF0  
                             __ptext60 50F4                               __ptext52 4AB4  
                             __ptext44 4C9E                               __ptext36 4E9E  
                             __ptext28 4E6C                               __ptext61 4D3E  
                             __ptext53 335E                               __ptext45 31AA  
                             __ptext37 4640                               __ptext29 4F64  
                             __ptext70 50CA                               __ptext62 413C  
                             __ptext54 41EC                               __ptext46 3CBA  
                             __ptext38 2D1E                               __ptext71 50D6  
                             __ptext63 4078                               __ptext55 5016  
                             __ptext47 4A2A                               __ptext39 4ED0  
                             __ptext72 50E0                               __ptext64 4F02  
                             __ptext56 34E6                               __ptext48 1BB0  
                             __ptext73 50EA                               __ptext65 50B2  
                             __ptext57 448C                               __ptext49 2F64  
                             __ptext74 4AF6                               __ptext66 48EA  
                             __ptext58 4B38                               __ptext75 4FEE  
                             __ptext67 493A                               __ptext59 4344  
                             __ptext76 4F94                               __ptext68 498A  
                             __ptext77 5098                               __ptext69 49DA  
                          decision@hue 0025                              moveRed@mL 001F  
                            moveRed@mR 0020                           _SSP2CON1bits 0ED9  
                         _SSP2CON2bits 0EDA                            _reading_hue 3EC4  
                        reverseTurn@mL 001F                          reverseTurn@mR 0020  
                    returnHome@factorL 0066                      returnHome@factorR 0064  
                         ??_moveOrange 001F                             turnLeft@mL 0014  
                           turnLeft@mR 0015                           ??_moveYellow 0023  
                   __end_of_send2USART 5098                               _right135 4DD6  
                             _moveBlue 4E3A                               _movePink 4C2A  
                           turnRight@i 0017                  __end_of_customDelayMs 4CD6  
                             isa$xinst 0000                      moveYellow@factorR 0021  
                             left90@mL 0019                               left90@mR 001A  
                           _RC4STAbits 0EE7                      returnHome@time_ms 006A  
                             int$flags 005D                               _vfprintf 4AB4  
         __end_of_calibration_turningL 2F64           __end_of_calibration_turningR 2D1E  
                         ??_returnHome 0068                               _turnLeft 46BE  
                            turn180@mL 0019                              turn180@mR 001A  
                          ??_logAction 0008                             _INTCONbits 0FF2  
                       customDelayMs@i 0005                     __end_of_moveOrange 4DD6  
                     moveGreen@factorL 0021                     __end_of_moveYellow 4BF0  
                          _setMotorPWM 391E                      ??_get16bitTMR0val 001E  
  calibration_turningR@inactivityLimit 0060                               intlevel1 0000  
                            sprintf@ap 0038                      decision@path_step 0027  
                        left90@factorL 001B                      ??_reverseStraight 0057  
                     ??_fullSpeedAhead 004E          get16bitTMR0val@combined_value 0026  
                   __end_of_returnHome 37C8                            ??_moveGreen 0023  
                            turnLeft@i 0017                            ??_moveWhite 001F  
          convert_rgb2hue@clearcurrent 0078                          send2USART@hue 004C  
                          ??_vfpfcnvrt 0026                            _reverseTurn 37C8  
                     _color_click_init 4CD6                               sprintf@f 0039  
                             sprintf@s 0032             __end_of_calibration_colors 31AA  
                           _SSP2DATPPS 0E1D                             _SSP2CLKPPS 0E1C  
                         ___aldiv@sign 0017                            ??_turnRight 0016  
                        ___fladd@signs 001C                             _TX4STAbits 0EE8  
                       moveRed@factorR 0021                        _sendCharSerial4 50B2  
                         ___fladd@aexp 001D                           ___fladd@bexp 001E  
                         returnHome@mL 0060                           returnHome@mR 0061  
