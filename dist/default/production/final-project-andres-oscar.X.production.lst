

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 06:13:57 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96   000000                     
    97                           ; Generated 21/07/2023 GMT
    98                           ; 
    99                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F67K40 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131   000000                     
   132                           	psect	idataBANK0
   133   004BF8                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for _dataFlag
   137   004BF8  01                 	db	1
   138   000000                     _TMR0H	set	4052
   139   000000                     _TX4REG	set	3812
   140   000000                     _RC4STAbits	set	3815
   141   000000                     _SP4BRGH	set	3814
   142   000000                     _LATHbits	set	3968
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _CCPR2H	set	4006
   149   000000                     _CCPR1H	set	4010
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _ANSELDbits	set	3751
   155   000000                     _SSP2ADD	set	3798
   156   000000                     _SSP2CON1bits	set	3801
   157   000000                     _LATAbits	set	3961
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATGbits	set	3967
   160   000000                     _LATCbits	set	3963
   161   000000                     _RC4REG	set	3811
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _SSP2STAT	set	3800
   169   000000                     _ANSELFbits	set	3764
   170   000000                     _SSP2BUF	set	3797
   171   000000                     _IPR0bits	set	3615
   172   000000                     _PIE0bits	set	3625
   173   000000                     _PIE4bits	set	3629
   174   000000                     _PIR4bits	set	3639
   175   000000                     _RC0PPS	set	3682
   176   000000                     _RC7PPS	set	3689
   177   000000                     _RD5PPS	set	3695
   178   000000                     _RE2PPS	set	3700
   179   000000                     _RD6PPS	set	3696
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _T2PR	set	4028
   183   000000                     _T2CONbits	set	4029
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _CCP2CONbits	set	4007
   186   000000                     _CCP3CONbits	set	3878
   187   000000                     _ADREFbits	set	3928
   188   000000                     _CCP4CONbits	set	3874
   189   000000                     _PORTFbits	set	3982
   190   000000                     _TRISHbits	set	3976
   191   000000                     _TRISCbits	set	3971
   192   000000                     _INTCONbits	set	4082
   193   000000                     _T0CON1bits	set	4054
   194   000000                     _ADPCH	set	3935
   195   000000                     _ADRESH	set	3940
   196   000000                     _ADCON0bits	set	3936
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _TMR0L	set	4051
   200   000000                     _T2CLKCONbits	set	4031
   201   000000                     _T2HLTbits	set	4030
   202   000000                     _PIR0bits	set	3635
   203                           
   204                           	psect	smallconst
   205   000E00                     __psmallconst:
   206                           	callstack 0
   207   000E00  00                 	db	0
   208   000E01                     STR_5:
   209                           
   210                           ; BSR set to: 14
   211   000E01  43                 	db	67	;'C'
   212   000E02  61                 	db	97	;'a'
   213   000E03  6C                 	db	108	;'l'
   214   000E04  69                 	db	105	;'i'
   215   000E05  62                 	db	98	;'b'
   216   000E06  72                 	db	114	;'r'
   217   000E07  61                 	db	97	;'a'
   218   000E08  74                 	db	116	;'t'
   219   000E09  69                 	db	105	;'i'
   220   000E0A  6F                 	db	111	;'o'
   221   000E0B  6E                 	db	110	;'n'
   222   000E0C  20                 	db	32
   223   000E0D  73                 	db	115	;'s'
   224   000E0E  74                 	db	116	;'t'
   225   000E0F  61                 	db	97	;'a'
   226   000E10  74                 	db	116	;'t'
   227   000E11  65                 	db	101	;'e'
   228   000E12  20                 	db	32
   229   000E13  3D                 	db	61	;'='
   230   000E14  20                 	db	32
   231   000E15  67                 	db	103	;'g'
   232   000E16  72                 	db	114	;'r'
   233   000E17  65                 	db	101	;'e'
   234   000E18  65                 	db	101	;'e'
   235   000E19  6E                 	db	110	;'n'
   236   000E1A  20                 	db	32
   237   000E1B  0A                 	db	10
   238   000E1C  0D                 	db	13
   239   000E1D  00                 	db	0
   240   000E1E                     STR_11:
   241                           
   242                           ; BSR set to: 14
   243   000E1E  43                 	db	67	;'C'
   244   000E1F  61                 	db	97	;'a'
   245   000E20  6C                 	db	108	;'l'
   246   000E21  69                 	db	105	;'i'
   247   000E22  62                 	db	98	;'b'
   248   000E23  72                 	db	114	;'r'
   249   000E24  61                 	db	97	;'a'
   250   000E25  74                 	db	116	;'t'
   251   000E26  69                 	db	105	;'i'
   252   000E27  6F                 	db	111	;'o'
   253   000E28  6E                 	db	110	;'n'
   254   000E29  20                 	db	32
   255   000E2A  73                 	db	115	;'s'
   256   000E2B  74                 	db	116	;'t'
   257   000E2C  61                 	db	97	;'a'
   258   000E2D  74                 	db	116	;'t'
   259   000E2E  65                 	db	101	;'e'
   260   000E2F  20                 	db	32
   261   000E30  3D                 	db	61	;'='
   262   000E31  20                 	db	32
   263   000E32  20                 	db	32
   264   000E33  61                 	db	97	;'a'
   265   000E34  6D                 	db	109	;'m'
   266   000E35  62                 	db	98	;'b'
   267   000E36  69                 	db	105	;'i'
   268   000E37  65                 	db	101	;'e'
   269   000E38  6E                 	db	110	;'n'
   270   000E39  74                 	db	116	;'t'
   271   000E3A  00                 	db	0
   272   000E3B                     STR_7:
   273                           
   274                           ; BSR set to: 14
   275   000E3B  43                 	db	67	;'C'
   276   000E3C  61                 	db	97	;'a'
   277   000E3D  6C                 	db	108	;'l'
   278   000E3E  69                 	db	105	;'i'
   279   000E3F  62                 	db	98	;'b'
   280   000E40  72                 	db	114	;'r'
   281   000E41  61                 	db	97	;'a'
   282   000E42  74                 	db	116	;'t'
   283   000E43  69                 	db	105	;'i'
   284   000E44  6F                 	db	111	;'o'
   285   000E45  6E                 	db	110	;'n'
   286   000E46  20                 	db	32
   287   000E47  73                 	db	115	;'s'
   288   000E48  74                 	db	116	;'t'
   289   000E49  61                 	db	97	;'a'
   290   000E4A  74                 	db	116	;'t'
   291   000E4B  65                 	db	101	;'e'
   292   000E4C  3D                 	db	61	;'='
   293   000E4D  20                 	db	32
   294   000E4E  62                 	db	98	;'b'
   295   000E4F  6C                 	db	108	;'l'
   296   000E50  75                 	db	117	;'u'
   297   000E51  65                 	db	101	;'e'
   298   000E52  20                 	db	32
   299   000E53  0A                 	db	10
   300   000E54  0D                 	db	13
   301   000E55  00                 	db	0
   302   000E56                     STR_9:
   303                           
   304                           ; BSR set to: 14
   305   000E56  43                 	db	67	;'C'
   306   000E57  61                 	db	97	;'a'
   307   000E58  6C                 	db	108	;'l'
   308   000E59  69                 	db	105	;'i'
   309   000E5A  62                 	db	98	;'b'
   310   000E5B  72                 	db	114	;'r'
   311   000E5C  61                 	db	97	;'a'
   312   000E5D  74                 	db	116	;'t'
   313   000E5E  69                 	db	105	;'i'
   314   000E5F  6F                 	db	111	;'o'
   315   000E60  6E                 	db	110	;'n'
   316   000E61  20                 	db	32
   317   000E62  73                 	db	115	;'s'
   318   000E63  74                 	db	116	;'t'
   319   000E64  61                 	db	97	;'a'
   320   000E65  74                 	db	116	;'t'
   321   000E66  65                 	db	101	;'e'
   322   000E67  20                 	db	32
   323   000E68  3D                 	db	61	;'='
   324   000E69  20                 	db	32
   325   000E6A  20                 	db	32
   326   000E6B  77                 	db	119	;'w'
   327   000E6C  68                 	db	104	;'h'
   328   000E6D  69                 	db	105	;'i'
   329   000E6E  74                 	db	116	;'t'
   330   000E6F  65                 	db	101	;'e'
   331   000E70  00                 	db	0
   332   000E71                     STR_13:
   333                           
   334                           ; BSR set to: 14
   335   000E71  43                 	db	67	;'C'
   336   000E72  41                 	db	65	;'A'
   337   000E73  4C                 	db	76	;'L'
   338   000E74  49                 	db	73	;'I'
   339   000E75  42                 	db	66	;'B'
   340   000E76  52                 	db	82	;'R'
   341   000E77  41                 	db	65	;'A'
   342   000E78  54                 	db	84	;'T'
   343   000E79  49                 	db	73	;'I'
   344   000E7A  4F                 	db	79	;'O'
   345   000E7B  4E                 	db	78	;'N'
   346   000E7C  20                 	db	32
   347   000E7D  43                 	db	67	;'C'
   348   000E7E  4F                 	db	79	;'O'
   349   000E7F  4D                 	db	77	;'M'
   350   000E80  50                 	db	80	;'P'
   351   000E81  4C                 	db	76	;'L'
   352   000E82  45                 	db	69	;'E'
   353   000E83  54                 	db	84	;'T'
   354   000E84  45                 	db	69	;'E'
   355   000E85  44                 	db	68	;'D'
   356   000E86  20                 	db	32
   357   000E87  0A                 	db	10
   358   000E88  0D                 	db	13
   359   000E89  00                 	db	0
   360   000E8A                     STR_3:
   361                           
   362                           ; BSR set to: 14
   363   000E8A  43                 	db	67	;'C'
   364   000E8B  61                 	db	97	;'a'
   365   000E8C  6C                 	db	108	;'l'
   366   000E8D  69                 	db	105	;'i'
   367   000E8E  62                 	db	98	;'b'
   368   000E8F  72                 	db	114	;'r'
   369   000E90  61                 	db	97	;'a'
   370   000E91  74                 	db	116	;'t'
   371   000E92  69                 	db	105	;'i'
   372   000E93  6F                 	db	111	;'o'
   373   000E94  6E                 	db	110	;'n'
   374   000E95  20                 	db	32
   375   000E96  73                 	db	115	;'s'
   376   000E97  74                 	db	116	;'t'
   377   000E98  61                 	db	97	;'a'
   378   000E99  74                 	db	116	;'t'
   379   000E9A  65                 	db	101	;'e'
   380   000E9B  20                 	db	32
   381   000E9C  3D                 	db	61	;'='
   382   000E9D  20                 	db	32
   383   000E9E  72                 	db	114	;'r'
   384   000E9F  65                 	db	101	;'e'
   385   000EA0  64                 	db	100	;'d'
   386   000EA1  00                 	db	0
   387   000EA2                     
   388                           ; BSR set to: 14
   389   000EA2  56                 	db	86	;'V'
   390   000EA3  6F                 	db	111	;'o'
   391   000EA4  6C                 	db	108	;'l'
   392   000EA5  74                 	db	116	;'t'
   393   000EA6  61                 	db	97	;'a'
   394   000EA7  67                 	db	103	;'g'
   395   000EA8  65                 	db	101	;'e'
   396   000EA9  20                 	db	32
   397   000EAA  3D                 	db	61	;'='
   398   000EAB  20                 	db	32
   399   000EAC  25                 	db	37
   400   000EAD  64                 	db	100	;'d'
   401   000EAE  2E                 	db	46
   402   000EAF  25                 	db	37
   403   000EB0  30                 	db	48	;'0'
   404   000EB1  32                 	db	50	;'2'
   405   000EB2  64                 	db	100	;'d'
   406   000EB3  2C                 	db	44
   407   000EB4  20                 	db	32
   408   000EB5  20                 	db	32
   409   000EB6  00                 	db	0
   410   000EB7                     STR_2:
   411                           
   412                           ; BSR set to: 14
   413   000EB7  68                 	db	104	;'h'
   414   000EB8  75                 	db	117	;'u'
   415   000EB9  65                 	db	101	;'e'
   416   000EBA  3D                 	db	61	;'='
   417   000EBB  25                 	db	37
   418   000EBC  30                 	db	48	;'0'
   419   000EBD  33                 	db	51	;'3'
   420   000EBE  64                 	db	100	;'d'
   421   000EBF  2C                 	db	44
   422   000EC0  20                 	db	32
   423   000EC1  20                 	db	32
   424   000EC2  00                 	db	0
   425   000EC3                     STR_4:
   426                           
   427                           ; BSR set to: 14
   428   000EC3  2E                 	db	46
   429   000EC4  00                 	db	0
   430   000EC5  00                 	db	0	; dummy byte at the end
   431   000000                     
   432                           ; #config settings
   433                           
   434                           	psect	cinit
   435   00450C                     __pcinit:
   436                           	callstack 0
   437   00450C                     start_initialization:
   438                           	callstack 0
   439   00450C                     __initialization:
   440                           	callstack 0
   441                           
   442                           ; Initialize objects allocated to BANK0 (1 bytes)
   443                           ; load TBLPTR registers with __pidataBANK0
   444   00450C  0EF8               	movlw	low __pidataBANK0
   445   00450E  6EF6               	movwf	tblptrl,c
   446   004510  0E4B               	movlw	high __pidataBANK0
   447   004512  6EF7               	movwf	tblptrh,c
   448   004514  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   449   004516  6EF8               	movwf	tblptru,c
   450   004518  0009               	tblrd		*+	;fetch initializer
   451   00451A  CFF5 F0F0          	movff	tablat,__pdataBANK0
   452                           
   453                           ; Clear objects allocated to BANK2 (200 bytes)
   454   00451E  EE02  F000         	lfsr	0,__pbssBANK2
   455   004522  0EC8               	movlw	200
   456   004524                     clear_0:
   457   004524  6AEE               	clrf	postinc0,c
   458   004526  06E8               	decf	wreg,f,c
   459   004528  E1FD               	bnz	clear_0
   460                           
   461                           ; Clear objects allocated to BANK1 (182 bytes)
   462   00452A  EE01  F000         	lfsr	0,__pbssBANK1
   463   00452E  0EB6               	movlw	182
   464   004530                     clear_1:
   465   004530  6AEE               	clrf	postinc0,c
   466   004532  06E8               	decf	wreg,f,c
   467   004534  E1FD               	bnz	clear_1
   468                           
   469                           ; Clear objects allocated to BANK0 (46 bytes)
   470   004536  EE00  F0C2         	lfsr	0,__pbssBANK0
   471   00453A  0E2E               	movlw	46
   472   00453C                     clear_2:
   473   00453C  6AEE               	clrf	postinc0,c
   474   00453E  06E8               	decf	wreg,f,c
   475   004540  E1FD               	bnz	clear_2
   476                           
   477                           ; Clear objects allocated to COMRAM (2 bytes)
   478   004542  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   479   004544  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   480   004546                     end_of_initialization:
   481                           	callstack 0
   482   004546                     __end_of__initialization:
   483                           	callstack 0
   484   004546  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   004548  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   00454A  0100               	movlb	0
   487   00454C  EF2C  F00B         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   00005B                     __pbssCOMRAM:
   491                           	callstack 0
   492   00005B                     _TxBufReadCnt:
   493                           	callstack 0
   494   00005B                     	ds	1
   495   00005C                     _TxBufWriteCnt:
   496                           	callstack 0
   497   00005C                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500   0000C2                     __pbssBANK0:
   501                           	callstack 0
   502   0000C2                     _width:
   503                           	callstack 0
   504   0000C2                     	ds	2
   505   0000C4                     _prec:
   506                           	callstack 0
   507   0000C4                     	ds	2
   508   0000C6                     _flags:
   509                           	callstack 0
   510   0000C6                     	ds	1
   511   0000C7                     _readingIndex:
   512                           	callstack 0
   513   0000C7                     	ds	1
   514   0000C8                     _RxBufReadCnt:
   515                           	callstack 0
   516   0000C8                     	ds	1
   517   0000C9                     _RxBufWriteCnt:
   518                           	callstack 0
   519   0000C9                     	ds	1
   520   0000CA                     _colorCurrent:
   521                           	callstack 0
   522   0000CA                     	ds	10
   523   0000D4                     _colorCalibration:
   524                           	callstack 0
   525   0000D4                     	ds	10
   526   0000DE                     _motorR:
   527                           	callstack 0
   528   0000DE                     	ds	9
   529   0000E7                     _motorL:
   530                           	callstack 0
   531   0000E7                     	ds	9
   532                           
   533                           	psect	dataBANK0
   534   0000F0                     __pdataBANK0:
   535                           	callstack 0
   536   0000F0                     _dataFlag:
   537                           	callstack 0
   538   0000F0                     	ds	1
   539                           
   540                           	psect	bssBANK1
   541   000100                     __pbssBANK1:
   542                           	callstack 0
   543   000100                     _EUSART4TXbuf:
   544                           	callstack 0
   545   000100                     	ds	60
   546   00013C                     _action:
   547                           	callstack 0
   548   00013C                     	ds	50
   549   00016E                     _ldrReadings:
   550                           	callstack 0
   551   00016E                     	ds	20
   552   000182                     _EUSART4RXbuf:
   553                           	callstack 0
   554   000182                     	ds	20
   555   000196                     _dbuf:
   556                           	callstack 0
   557   000196                     	ds	32
   558                           
   559                           	psect	bssBANK2
   560   000200                     __pbssBANK2:
   561                           	callstack 0
   562   000200                     _time:
   563                           	callstack 0
   564   000200                     	ds	200
   565                           
   566                           	psect	cstackBANK0
   567   000060                     __pcstackBANK0:
   568                           	callstack 0
   569   000060                     returnHome@mL:
   570                           	callstack 0
   571   000060                     convert_rgb2hue@redcurrent:
   572                           	callstack 0
   573   000060                     send2USART@hue_char:
   574                           	callstack 0
   575                           
   576                           ; 50 bytes @ 0x0
   577   000060                     	ds	1
   578   000061                     returnHome@mR:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x1
   582   000061                     	ds	1
   583   000062                     returnHome@path_step:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x2
   587   000062                     	ds	2
   588   000064                     returnHome@factor:
   589                           	callstack 0
   590   000064                     convert_rgb2hue@redmax:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0x4
   594   000064                     	ds	2
   595   000066                     ??_returnHome:
   596                           
   597                           ; 1 bytes @ 0x6
   598   000066                     	ds	2
   599   000068                     convert_rgb2hue@greencurrent:
   600                           	callstack 0
   601   000068                     returnHome@time_ms:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x8
   605   000068                     	ds	4
   606   00006C                     returnHome@action_turn:
   607                           	callstack 0
   608   00006C                     convert_rgb2hue@greenmax:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0xC
   612   00006C                     	ds	1
   613   00006D                     returnHome@i:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0xD
   617   00006D                     	ds	3
   618   000070                     convert_rgb2hue@bluecurrent:
   619                           	callstack 0
   620                           
   621                           ; 4 bytes @ 0x10
   622   000070                     	ds	4
   623   000074                     convert_rgb2hue@bluemax:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x14
   627   000074                     	ds	4
   628   000078                     convert_rgb2hue@clearcurrent:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x18
   632   000078                     	ds	4
   633   00007C                     convert_rgb2hue@clearmax:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x1C
   637   00007C                     	ds	4
   638   000080                     _convert_rgb2hue$367:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x20
   642   000080                     	ds	4
   643   000084                     _convert_rgb2hue$368:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x24
   647   000084                     	ds	4
   648   000088                     _convert_rgb2hue$369:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x28
   652   000088                     	ds	4
   653   00008C                     _convert_rgb2hue$370:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x2C
   657   00008C                     	ds	4
   658   000090                     convert_rgb2hue@min:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x30
   662   000090                     	ds	2
   663   000092                     calibration_colors@cal_state:
   664                           	callstack 0
   665                           
   666                           ; 20 bytes @ 0x32
   667   000092                     	ds	2
   668   000094                     convert_rgb2hue@diff:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x34
   672   000094                     	ds	4
   673   000098                     convert_rgb2hue@max:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x38
   677   000098                     	ds	4
   678   00009C                     convert_rgb2hue@hue:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x3C
   682   00009C                     	ds	4
   683   0000A0                     convert_rgb2hue@r:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x40
   687   0000A0                     	ds	4
   688   0000A4                     convert_rgb2hue@g:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x44
   692   0000A4                     	ds	4
   693   0000A8                     convert_rgb2hue@b:
   694                           	callstack 0
   695                           
   696                           ; 4 bytes @ 0x48
   697   0000A8                     	ds	4
   698   0000AC                     ??_main:
   699                           
   700                           ; 1 bytes @ 0x4C
   701   0000AC                     	ds	2
   702   0000AE                     main@ambient:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x4E
   706   0000AE                     	ds	2
   707   0000B0                     main@white:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x50
   711   0000B0                     	ds	2
   712   0000B2                     main@factor:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x52
   716   0000B2                     	ds	2
   717   0000B4                     main@hue:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x54
   721   0000B4                     	ds	2
   722   0000B6                     main@clear_max:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x56
   726   0000B6                     	ds	4
   727   0000BA                     main@clear_current:
   728                           	callstack 0
   729                           
   730                           ; 4 bytes @ 0x5A
   731   0000BA                     	ds	4
   732   0000BE                     main@path_step:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x5E
   736   0000BE                     	ds	2
   737   0000C0                     main@clear_norm:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x60
   741   0000C0                     	ds	2
   742                           
   743                           	psect	cstackCOMRAM
   744   000001                     __pcstackCOMRAM:
   745                           	callstack 0
   746   000001                     ??_LowISR:
   747   000001                     
   748                           ; 1 bytes @ 0x0
   749   000001                     	ds	1
   750   000002                     ??_I2C_2_Master_Idle:
   751   000002                     ?___wmul:
   752                           	callstack 0
   753   000002                     ?___awdiv:
   754                           	callstack 0
   755   000002                     ?___awmod:
   756                           	callstack 0
   757   000002                     ?___fladd:
   758                           	callstack 0
   759   000002                     ?___lmul:
   760                           	callstack 0
   761   000002                     ?___xxtofl:
   762                           	callstack 0
   763   000002                     sendCharSerial4@charToSend:
   764                           	callstack 0
   765   000002                     initDCmotorsPWM@PWMperiod:
   766                           	callstack 0
   767   000002                     customDelayMs@milliseconds:
   768                           	callstack 0
   769   000002                     ___wmul@multiplier:
   770                           	callstack 0
   771   000002                     ___awdiv@dividend:
   772                           	callstack 0
   773   000002                     ___awmod@dividend:
   774                           	callstack 0
   775   000002                     fputc@c:
   776                           	callstack 0
   777   000002                     logAction@newTime:
   778                           	callstack 0
   779   000002                     ___lmul@multiplier:
   780                           	callstack 0
   781   000002                     ___fleq@ff1:
   782                           	callstack 0
   783   000002                     ___flge@ff1:
   784                           	callstack 0
   785   000002                     ___fladd@b:
   786                           	callstack 0
   787   000002                     ___xxtofl@val:
   788                           	callstack 0
   789                           
   790                           ; 4 bytes @ 0x1
   791   000002                     	ds	1
   792   000003                     ??_I2C_2_Master_Read:
   793   000003                     I2C_2_Master_Write@data_byte:
   794                           	callstack 0
   795   000003                     sendStringSerial4@string:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x2
   799   000003                     	ds	1
   800   000004                     ??_customDelayMs:
   801   000004                     color_writetoaddr@value:
   802                           	callstack 0
   803   000004                     I2C_2_Master_Read@ack:
   804                           	callstack 0
   805   000004                     fputc@fp:
   806                           	callstack 0
   807   000004                     ___wmul@multiplicand:
   808                           	callstack 0
   809   000004                     ___awdiv@divisor:
   810                           	callstack 0
   811   000004                     ___awmod@divisor:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0x3
   815   000004                     	ds	1
   816   000005                     ??_fputc:
   817   000005                     color_writetoaddr@address:
   818                           	callstack 0
   819   000005                     I2C_2_Master_Read@tmp:
   820                           	callstack 0
   821   000005                     customDelayMs@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x4
   825   000005                     	ds	1
   826   000006                     ??_color_click_init:
   827   000006                     ??___xxtofl:
   828   000006                     ?_color_read_Red:
   829                           	callstack 0
   830   000006                     ?_color_read_Green:
   831                           	callstack 0
   832   000006                     ?_color_read_Blue:
   833                           	callstack 0
   834   000006                     ?_color_read_Clear:
   835                           	callstack 0
   836   000006                     ___awdiv@counter:
   837                           	callstack 0
   838   000006                     ___awmod@counter:
   839                           	callstack 0
   840   000006                     logAction@path_step:
   841                           	callstack 0
   842   000006                     ___wmul@product:
   843                           	callstack 0
   844   000006                     ___lmul@multiplicand:
   845                           	callstack 0
   846   000006                     ___fleq@ff2:
   847                           	callstack 0
   848   000006                     ___flge@ff2:
   849                           	callstack 0
   850   000006                     ___fladd@a:
   851                           	callstack 0
   852                           
   853                           ; 4 bytes @ 0x5
   854   000006                     	ds	1
   855   000007                     ___awdiv@sign:
   856                           	callstack 0
   857   000007                     ___awmod@sign:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x6
   861   000007                     	ds	1
   862   000008                     ??_logAction:
   863   000008                     ??_color_read_Red:
   864   000008                     ??_color_read_Green:
   865   000008                     ??_color_read_Blue:
   866   000008                     ??_color_read_Clear:
   867   000008                     ?_abs:
   868                           	callstack 0
   869   000008                     ?___lwdiv:
   870                           	callstack 0
   871   000008                     ?_read_prec_or_width:
   872                           	callstack 0
   873   000008                     read_prec_or_width@fmt:
   874                           	callstack 0
   875   000008                     ___awdiv@quotient:
   876                           	callstack 0
   877   000008                     ___lwdiv@dividend:
   878                           	callstack 0
   879   000008                     abs@a:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x7
   883   000008                     	ds	1
   884   000009                     read_prec_or_width@ap:
   885                           	callstack 0
   886                           
   887                           ; 1 bytes @ 0x8
   888   000009                     	ds	1
   889   00000A                     ??___fladd:
   890   00000A                     ??_abs:
   891   00000A                     ??___fleq:
   892   00000A                     ??___flge:
   893   00000A                     logAction@newAction:
   894                           	callstack 0
   895   00000A                     ___xxtofl@sign:
   896                           	callstack 0
   897   00000A                     read_prec_or_width@c:
   898                           	callstack 0
   899   00000A                     ___lwdiv@divisor:
   900                           	callstack 0
   901   00000A                     fputs@s:
   902                           	callstack 0
   903   00000A                     ___lmul@product:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0x9
   907   00000A                     	ds	1
   908   00000B                     ___xxtofl@exp:
   909                           	callstack 0
   910   00000B                     color_read_Red@tmp:
   911                           	callstack 0
   912   00000B                     color_read_Green@tmp:
   913                           	callstack 0
   914   00000B                     color_read_Blue@tmp:
   915                           	callstack 0
   916   00000B                     color_read_Clear@tmp:
   917                           	callstack 0
   918   00000B                     read_prec_or_width@n:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0xA
   922   00000B                     	ds	1
   923   00000C                     fputs@fp:
   924                           	callstack 0
   925   00000C                     ___lwdiv@quotient:
   926                           	callstack 0
   927   00000C                     ___xxtofl@arg:
   928                           	callstack 0
   929                           
   930                           ; 4 bytes @ 0xB
   931   00000C                     	ds	1
   932   00000D                     fputs@c:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0xC
   936   00000D                     	ds	1
   937   00000E                     ?___aldiv:
   938                           	callstack 0
   939   00000E                     ___lwdiv@counter:
   940                           	callstack 0
   941   00000E                     ___fladd@signs:
   942                           	callstack 0
   943   00000E                     fputs@i:
   944                           	callstack 0
   945   00000E                     ___aldiv@dividend:
   946                           	callstack 0
   947                           
   948                           ; 4 bytes @ 0xD
   949   00000E                     	ds	1
   950   00000F                     setMotorPWM@m:
   951                           	callstack 0
   952   00000F                     ___fladd@aexp:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0xE
   956   00000F                     	ds	1
   957   000010                     ??_setMotorPWM:
   958   000010                     ?___flmul:
   959                           	callstack 0
   960   000010                     ___fladd@bexp:
   961                           	callstack 0
   962   000010                     pad@fp:
   963                           	callstack 0
   964   000010                     ___flmul@b:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0xF
   968   000010                     	ds	1
   969   000011                     ___fladd@grs:
   970                           	callstack 0
   971   000011                     pad@buf:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x10
   975   000011                     	ds	1
   976   000012                     ?___flsub:
   977                           	callstack 0
   978   000012                     setMotorPWM@posDuty:
   979                           	callstack 0
   980   000012                     ___aldiv@divisor:
   981                           	callstack 0
   982   000012                     ___flsub@b:
   983                           	callstack 0
   984                           
   985                           ; 4 bytes @ 0x11
   986   000012                     	ds	1
   987   000013                     setMotorPWM@negDuty:
   988                           	callstack 0
   989   000013                     pad@p:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0x12
   993   000013                     	ds	1
   994   000014                     stop@mL:
   995                           	callstack 0
   996   000014                     turnLeft@mL:
   997                           	callstack 0
   998   000014                     turnRight@mL:
   999                           	callstack 0
  1000   000014                     fullSpeedBack@mL:
  1001                           	callstack 0
  1002   000014                     ___flmul@a:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x13
  1006   000014                     	ds	1
  1007   000015                     ??_pad:
  1008   000015                     stop@mR:
  1009                           	callstack 0
  1010   000015                     turnLeft@mR:
  1011                           	callstack 0
  1012   000015                     turnRight@mR:
  1013                           	callstack 0
  1014   000015                     fullSpeedBack@mR:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x14
  1018   000015                     	ds	1
  1019   000016                     ??_stop:
  1020   000016                     ??_turnLeft:
  1021   000016                     ??_turnRight:
  1022   000016                     ??_fullSpeedBack:
  1023   000016                     ___aldiv@counter:
  1024                           	callstack 0
  1025   000016                     pad@i:
  1026                           	callstack 0
  1027   000016                     ___flsub@a:
  1028                           	callstack 0
  1029                           
  1030                           ; 4 bytes @ 0x15
  1031   000016                     	ds	1
  1032   000017                     ___aldiv@sign:
  1033                           	callstack 0
  1034   000017                     turnLeft@i:
  1035                           	callstack 0
  1036   000017                     turnRight@i:
  1037                           	callstack 0
  1038   000017                     fullSpeedBack@power:
  1039                           	callstack 0
  1040                           
  1041                           ; 2 bytes @ 0x16
  1042   000017                     	ds	1
  1043   000018                     ??___flmul:
  1044   000018                     dtoa@fp:
  1045                           	callstack 0
  1046   000018                     ___aldiv@quotient:
  1047                           	callstack 0
  1048                           
  1049                           ; 4 bytes @ 0x17
  1050   000018                     	ds	1
  1051   000019                     right90@mL:
  1052                           	callstack 0
  1053   000019                     left90@mL:
  1054                           	callstack 0
  1055   000019                     turn180@mL:
  1056                           	callstack 0
  1057   000019                     right135@mL:
  1058                           	callstack 0
  1059   000019                     left135@mL:
  1060                           	callstack 0
  1061   000019                     backHalf@mL:
  1062                           	callstack 0
  1063   000019                     backOneAndHalf@mL:
  1064                           	callstack 0
  1065   000019                     dtoa@d:
  1066                           	callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x18
  1069   000019                     	ds	1
  1070   00001A                     right90@mR:
  1071                           	callstack 0
  1072   00001A                     left90@mR:
  1073                           	callstack 0
  1074   00001A                     turn180@mR:
  1075                           	callstack 0
  1076   00001A                     right135@mR:
  1077                           	callstack 0
  1078   00001A                     left135@mR:
  1079                           	callstack 0
  1080   00001A                     backHalf@mR:
  1081                           	callstack 0
  1082   00001A                     backOneAndHalf@mR:
  1083                           	callstack 0
  1084                           
  1085                           ; 1 bytes @ 0x19
  1086   00001A                     	ds	1
  1087   00001B                     ??_backHalf:
  1088   00001B                     ??_backOneAndHalf:
  1089   00001B                     right90@factor:
  1090                           	callstack 0
  1091   00001B                     left90@factor:
  1092                           	callstack 0
  1093   00001B                     turn180@factor:
  1094                           	callstack 0
  1095   00001B                     right135@factor:
  1096                           	callstack 0
  1097   00001B                     left135@factor:
  1098                           	callstack 0
  1099   00001B                     _dtoa$3080:
  1100                           	callstack 0
  1101                           
  1102                           ; 2 bytes @ 0x1A
  1103   00001B                     	ds	1
  1104   00001C                     ?_get16bitTMR0val:
  1105                           	callstack 0
  1106   00001C                     ___flmul@sign:
  1107                           	callstack 0
  1108   00001C                     get16bitTMR0val@path_step:
  1109                           	callstack 0
  1110                           
  1111                           ; 2 bytes @ 0x1B
  1112   00001C                     	ds	1
  1113   00001D                     dtoa@p:
  1114                           	callstack 0
  1115   00001D                     right90@delay_after_calibration:
  1116                           	callstack 0
  1117   00001D                     left90@delay_after_calibration:
  1118                           	callstack 0
  1119   00001D                     turn180@delay_after_calibration:
  1120                           	callstack 0
  1121   00001D                     right135@delay_after_calibration:
  1122                           	callstack 0
  1123   00001D                     left135@delay_after_calibration:
  1124                           	callstack 0
  1125   00001D                     ___flmul@grs:
  1126                           	callstack 0
  1127                           
  1128                           ; 4 bytes @ 0x1C
  1129   00001D                     	ds	1
  1130   00001E                     ??_get16bitTMR0val:
  1131   00001E                     dtoa@w:
  1132                           	callstack 0
  1133                           
  1134                           ; 2 bytes @ 0x1D
  1135   00001E                     	ds	1
  1136   00001F                     moveRed@mL:
  1137                           	callstack 0
  1138   00001F                     moveGreen@mL:
  1139                           	callstack 0
  1140   00001F                     moveBlue@mL:
  1141                           	callstack 0
  1142   00001F                     moveYellow@mL:
  1143                           	callstack 0
  1144   00001F                     movePink@mL:
  1145                           	callstack 0
  1146   00001F                     moveOrange@mL:
  1147                           	callstack 0
  1148   00001F                     moveLightBlue@mL:
  1149                           	callstack 0
  1150   00001F                     moveWhite@mL:
  1151                           	callstack 0
  1152   00001F                     reverseTurn@mL:
  1153                           	callstack 0
  1154                           
  1155                           ; 1 bytes @ 0x1E
  1156   00001F                     	ds	1
  1157   000020                     moveRed@mR:
  1158                           	callstack 0
  1159   000020                     moveGreen@mR:
  1160                           	callstack 0
  1161   000020                     moveBlue@mR:
  1162                           	callstack 0
  1163   000020                     moveYellow@mR:
  1164                           	callstack 0
  1165   000020                     movePink@mR:
  1166                           	callstack 0
  1167   000020                     moveOrange@mR:
  1168                           	callstack 0
  1169   000020                     moveLightBlue@mR:
  1170                           	callstack 0
  1171   000020                     moveWhite@mR:
  1172                           	callstack 0
  1173   000020                     reverseTurn@mR:
  1174                           	callstack 0
  1175   000020                     dtoa@s:
  1176                           	callstack 0
  1177                           
  1178                           ; 1 bytes @ 0x1F
  1179   000020                     	ds	1
  1180   000021                     reverseTurn@actionStep:
  1181                           	callstack 0
  1182   000021                     ___flmul@aexp:
  1183                           	callstack 0
  1184   000021                     moveRed@factor:
  1185                           	callstack 0
  1186   000021                     moveGreen@factor:
  1187                           	callstack 0
  1188   000021                     moveBlue@factor:
  1189                           	callstack 0
  1190   000021                     moveYellow@factor:
  1191                           	callstack 0
  1192   000021                     movePink@factor:
  1193                           	callstack 0
  1194   000021                     moveOrange@factor:
  1195                           	callstack 0
  1196   000021                     moveLightBlue@factor:
  1197                           	callstack 0
  1198   000021                     moveWhite@factor:
  1199                           	callstack 0
  1200   000021                     dtoa@i:
  1201                           	callstack 0
  1202                           
  1203                           ; 2 bytes @ 0x20
  1204   000021                     	ds	1
  1205   000022                     ___flmul@bexp:
  1206                           	callstack 0
  1207   000022                     get16bitTMR0val@time_ms:
  1208                           	callstack 0
  1209   000022                     reverseTurn@time_ms:
  1210                           	callstack 0
  1211                           
  1212                           ; 4 bytes @ 0x21
  1213   000022                     	ds	1
  1214   000023                     ??_moveRed:
  1215   000023                     ??_moveGreen:
  1216   000023                     ??_moveBlue:
  1217   000023                     ??_moveLightBlue:
  1218   000023                     ??_moveYellow:
  1219   000023                     ??_moveOrange:
  1220   000023                     ??_movePink:
  1221   000023                     ??_moveWhite:
  1222   000023                     vfpfcnvrt@fp:
  1223                           	callstack 0
  1224   000023                     ___flmul@prod:
  1225                           	callstack 0
  1226                           
  1227                           ; 4 bytes @ 0x22
  1228   000023                     	ds	1
  1229   000024                     vfpfcnvrt@fmt:
  1230                           	callstack 0
  1231                           
  1232                           ; 1 bytes @ 0x23
  1233   000024                     	ds	1
  1234   000025                     ?_decision:
  1235                           	callstack 0
  1236   000025                     vfpfcnvrt@ap:
  1237                           	callstack 0
  1238   000025                     decision@hue:
  1239                           	callstack 0
  1240                           
  1241                           ; 2 bytes @ 0x24
  1242   000025                     	ds	1
  1243   000026                     ??_vfpfcnvrt:
  1244   000026                     get16bitTMR0val@combined_value:
  1245                           	callstack 0
  1246   000026                     reverseTurn@factor:
  1247                           	callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x25
  1250   000026                     	ds	1
  1251   000027                     decision@path_step:
  1252                           	callstack 0
  1253   000027                     ___flmul@temp:
  1254                           	callstack 0
  1255                           
  1256                           ; 2 bytes @ 0x26
  1257   000027                     	ds	1
  1258   000028                     ??_reverseTurn:
  1259   000028                     vfpfcnvrt@convarg:
  1260                           	callstack 0
  1261                           
  1262                           ; 4 bytes @ 0x27
  1263   000028                     	ds	1
  1264   000029                     ?___fldiv:
  1265                           	callstack 0
  1266   000029                     decision@factor:
  1267                           	callstack 0
  1268   000029                     ___fldiv@b:
  1269                           	callstack 0
  1270                           
  1271                           ; 4 bytes @ 0x28
  1272   000029                     	ds	2
  1273   00002B                     
  1274                           ; 1 bytes @ 0x2A
  1275   00002B                     	ds	1
  1276   00002C                     vfpfcnvrt@done:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x2B
  1280   00002C                     	ds	1
  1281   00002D                     vfpfcnvrt@cp:
  1282                           	callstack 0
  1283   00002D                     ___fldiv@a:
  1284                           	callstack 0
  1285                           
  1286                           ; 4 bytes @ 0x2C
  1287   00002D                     	ds	1
  1288   00002E                     ?_vfprintf:
  1289                           	callstack 0
  1290   00002E                     vfprintf@fp:
  1291                           	callstack 0
  1292                           
  1293                           ; 1 bytes @ 0x2D
  1294   00002E                     	ds	1
  1295   00002F                     vfprintf@fmt:
  1296                           	callstack 0
  1297                           
  1298                           ; 1 bytes @ 0x2E
  1299   00002F                     	ds	1
  1300   000030                     vfprintf@ap:
  1301                           	callstack 0
  1302                           
  1303                           ; 1 bytes @ 0x2F
  1304   000030                     	ds	1
  1305   000031                     ??___fldiv:
  1306   000031                     vfprintf@cfmt:
  1307                           	callstack 0
  1308                           
  1309                           ; 1 bytes @ 0x30
  1310   000031                     	ds	1
  1311   000032                     ?_sprintf:
  1312                           	callstack 0
  1313   000032                     sprintf@s:
  1314                           	callstack 0
  1315                           
  1316                           ; 1 bytes @ 0x31
  1317   000032                     	ds	1
  1318   000033                     sprintf@fmt:
  1319                           	callstack 0
  1320                           
  1321                           ; 1 bytes @ 0x32
  1322   000033                     	ds	2
  1323   000035                     ___fldiv@rem:
  1324                           	callstack 0
  1325                           
  1326                           ; 4 bytes @ 0x34
  1327   000035                     	ds	3
  1328   000038                     sprintf@ap:
  1329                           	callstack 0
  1330                           
  1331                           ; 1 bytes @ 0x37
  1332   000038                     	ds	1
  1333   000039                     ___fldiv@sign:
  1334                           	callstack 0
  1335   000039                     sprintf@f:
  1336                           	callstack 0
  1337                           
  1338                           ; 12 bytes @ 0x38
  1339   000039                     	ds	1
  1340   00003A                     ___fldiv@new_exp:
  1341                           	callstack 0
  1342                           
  1343                           ; 2 bytes @ 0x39
  1344   00003A                     	ds	2
  1345   00003C                     ___fldiv@grs:
  1346                           	callstack 0
  1347                           
  1348                           ; 4 bytes @ 0x3B
  1349   00003C                     	ds	4
  1350   000040                     ___fldiv@bexp:
  1351                           	callstack 0
  1352                           
  1353                           ; 1 bytes @ 0x3F
  1354   000040                     	ds	1
  1355   000041                     ___fldiv@aexp:
  1356                           	callstack 0
  1357                           
  1358                           ; 1 bytes @ 0x40
  1359   000041                     	ds	1
  1360   000042                     ?___fltol:
  1361                           	callstack 0
  1362   000042                     ___fltol@f1:
  1363                           	callstack 0
  1364                           
  1365                           ; 4 bytes @ 0x41
  1366   000042                     	ds	4
  1367   000046                     ??___fltol:
  1368                           
  1369                           ; 1 bytes @ 0x45
  1370   000046                     	ds	4
  1371   00004A                     ___fltol@sign1:
  1372                           	callstack 0
  1373                           
  1374                           ; 1 bytes @ 0x49
  1375   00004A                     	ds	1
  1376   00004B                     ___fltol@exp1:
  1377                           	callstack 0
  1378                           
  1379                           ; 1 bytes @ 0x4A
  1380   00004B                     	ds	1
  1381   00004C                     ?_convert_rgb2hue:
  1382                           	callstack 0
  1383   00004C                     convert_rgb2hue@cMax:
  1384                           	callstack 0
  1385   00004C                     fullSpeedAhead@mL:
  1386                           	callstack 0
  1387   00004C                     send2USART@hue:
  1388                           	callstack 0
  1389                           
  1390                           ; 2 bytes @ 0x4B
  1391   00004C                     	ds	1
  1392   00004D                     convert_rgb2hue@cCurr:
  1393                           	callstack 0
  1394   00004D                     fullSpeedAhead@mR:
  1395                           	callstack 0
  1396                           
  1397                           ; 1 bytes @ 0x4C
  1398   00004D                     	ds	1
  1399   00004E                     ??_convert_rgb2hue:
  1400   00004E                     ??_fullSpeedAhead:
  1401   00004E                     calibration_colors@cCal:
  1402                           	callstack 0
  1403                           
  1404                           ; 1 bytes @ 0x4D
  1405   00004E                     	ds	1
  1406   00004F                     ??_calibration_colors:
  1407   00004F                     fullSpeedAhead@power:
  1408                           	callstack 0
  1409                           
  1410                           ; 2 bytes @ 0x4E
  1411   00004F                     	ds	1
  1412   000050                     ?_reading_hue:
  1413                           	callstack 0
  1414   000050                     reading_hue@cCurr:
  1415                           	callstack 0
  1416                           
  1417                           ; 1 bytes @ 0x4F
  1418   000050                     	ds	1
  1419   000051                     reverseStraight@mL:
  1420                           	callstack 0
  1421                           
  1422                           ; 1 bytes @ 0x50
  1423   000051                     	ds	1
  1424   000052                     ??_reading_hue:
  1425   000052                     reverseStraight@mR:
  1426                           	callstack 0
  1427                           
  1428                           ; 1 bytes @ 0x51
  1429   000052                     	ds	1
  1430   000053                     reverseStraight@time_ms:
  1431                           	callstack 0
  1432                           
  1433                           ; 4 bytes @ 0x52
  1434   000053                     	ds	1
  1435   000054                     reading_hue@hue:
  1436                           	callstack 0
  1437                           
  1438                           ; 2 bytes @ 0x53
  1439   000054                     	ds	3
  1440   000057                     ??_reverseStraight:
  1441                           
  1442                           ; 1 bytes @ 0x56
  1443   000057                     	ds	2
  1444   000059                     reverseStraight@delayMs:
  1445                           	callstack 0
  1446                           
  1447                           ; 2 bytes @ 0x58
  1448   000059                     	ds	2
  1449                           
  1450 ;;
  1451 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1452 ;;
  1453 ;; *************** function _main *****************
  1454 ;; Defined at:
  1455 ;;		line 30 in file "main.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  white           2   80[BANK0 ] unsigned int 
  1460 ;;  clear_curren    4   90[BANK0 ] float 
  1461 ;;  clear_max       4   86[BANK0 ] float 
  1462 ;;  clear_norm      2   96[BANK0 ] unsigned int 
  1463 ;;  path_step       2   94[BANK0 ] unsigned int 
  1464 ;;  hue             2   84[BANK0 ] unsigned int 
  1465 ;;  PWMcycle        2    0        unsigned int 
  1466 ;;  factor          2   82[BANK0 ] unsigned int 
  1467 ;;  ambient         2   78[BANK0 ] unsigned int 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1480 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;Total ram usage:       22 bytes
  1482 ;; Hardware stack levels required when called: 11
  1483 ;; This function calls:
  1484 ;;		_ADC_init
  1485 ;;		_Timer0_init
  1486 ;;		___fldiv
  1487 ;;		___flmul
  1488 ;;		___fltol
  1489 ;;		___xxtofl
  1490 ;;		_calibration_colors
  1491 ;;		_color_click_init
  1492 ;;		_color_read_Clear
  1493 ;;		_decision
  1494 ;;		_fullSpeedAhead
  1495 ;;		_get16bitTMR0val
  1496 ;;		_initDCmotorsPWM
  1497 ;;		_initUSART4
  1498 ;;		_reading_hue
  1499 ;;		_returnHome
  1500 ;;		_send2USART
  1501 ;;		_stop
  1502 ;; This function is called by:
  1503 ;;		Startup code after reset
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text0
  1508   001658                     __ptext0:
  1509                           	callstack 0
  1510   001658                     _main:
  1511                           	callstack 20
  1512   001658                     
  1513                           ;main.c: 32:     ADC_init();
  1514   001658  ECCD  F025         	call	_ADC_init	;wreg free
  1515   00165C                     
  1516                           ;main.c: 33:     color_click_init();
  1517   00165C  ECB3  F024         	call	_color_click_init	;wreg free
  1518   001660                     
  1519                           ;main.c: 34:     initUSART4();
  1520   001660  ECAF  F025         	call	_initUSART4	;wreg free
  1521   001664                     
  1522                           ;main.c: 35:     Timer0_init();
  1523   001664  EC4B  F025         	call	_Timer0_init	;wreg free
  1524   001668                     
  1525                           ;main.c: 39:     initDCmotorsPWM(PWMcycle);
  1526   001668  0E00               	movlw	0
  1527   00166A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1528   00166C  0E63               	movlw	99
  1529   00166E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1530   001670  ECDF  F01F         	call	_initDCmotorsPWM	;wreg free
  1531   001674                     
  1532                           ;main.c: 42:     motorL.power = 0;
  1533   001674  0E00               	movlw	0
  1534   001676  0100               	movlb	0	; () banked
  1535   001678  6FE7               	movwf	_motorL& (0+255),b
  1536   00167A                     
  1537                           ; BSR set to: 0
  1538                           ;main.c: 43:     motorL.direction = 1;
  1539   00167A  0E01               	movlw	1
  1540   00167C  6FE8               	movwf	(_motorL+1)& (0+255),b
  1541   00167E                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 44:     motorL.brakemode = 1;
  1544   00167E  0E01               	movlw	1
  1545   001680  6FE9               	movwf	(_motorL+2)& (0+255),b
  1546   001682                     
  1547                           ; BSR set to: 0
  1548                           ;main.c: 45:     motorL.PWMperiod = PWMcycle;
  1549   001682  0E00               	movlw	0
  1550   001684  6FEB               	movwf	(_motorL+4)& (0+255),b
  1551   001686  0E63               	movlw	99
  1552   001688  6FEA               	movwf	(_motorL+3)& (0+255),b
  1553   00168A                     
  1554                           ; BSR set to: 0
  1555                           ;main.c: 46:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1556   00168A  0EAA               	movlw	170
  1557   00168C  6FEC               	movwf	(_motorL+5)& (0+255),b
  1558   00168E  0E0F               	movlw	15
  1559   001690  6FED               	movwf	(_motorL+6)& (0+255),b
  1560   001692                     
  1561                           ; BSR set to: 0
  1562                           ;main.c: 47:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1563   001692  0EA6               	movlw	166
  1564   001694  6FEE               	movwf	(_motorL+7)& (0+255),b
  1565   001696  0E0F               	movlw	15
  1566   001698  6FEF               	movwf	(_motorL+8)& (0+255),b
  1567   00169A                     
  1568                           ; BSR set to: 0
  1569                           ;main.c: 49:     motorR.power = 0;
  1570   00169A  0E00               	movlw	0
  1571   00169C  6FDE               	movwf	_motorR& (0+255),b
  1572   00169E                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 50:     motorR.direction = 1;
  1575   00169E  0E01               	movlw	1
  1576   0016A0  6FDF               	movwf	(_motorR+1)& (0+255),b
  1577   0016A2                     
  1578                           ; BSR set to: 0
  1579                           ;main.c: 51:     motorR.brakemode = 1;
  1580   0016A2  0E01               	movlw	1
  1581   0016A4  6FE0               	movwf	(_motorR+2)& (0+255),b
  1582   0016A6                     
  1583                           ; BSR set to: 0
  1584                           ;main.c: 52:     motorR.PWMperiod = PWMcycle;
  1585   0016A6  0E00               	movlw	0
  1586   0016A8  6FE2               	movwf	(_motorR+4)& (0+255),b
  1587   0016AA  0E63               	movlw	99
  1588   0016AC  6FE1               	movwf	(_motorR+3)& (0+255),b
  1589   0016AE                     
  1590                           ; BSR set to: 0
  1591                           ;main.c: 53:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1592   0016AE  0E25               	movlw	37
  1593   0016B0  6FE3               	movwf	(_motorR+5)& (0+255),b
  1594   0016B2  0E0F               	movlw	15
  1595   0016B4  6FE4               	movwf	(_motorR+6)& (0+255),b
  1596   0016B6                     
  1597                           ; BSR set to: 0
  1598                           ;main.c: 54:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1599   0016B6  0E21               	movlw	33
  1600   0016B8  6FE5               	movwf	(_motorR+7)& (0+255),b
  1601   0016BA  0E0F               	movlw	15
  1602   0016BC  6FE6               	movwf	(_motorR+8)& (0+255),b
  1603   0016BE                     
  1604                           ; BSR set to: 0
  1605                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1606   0016BE  9087               	bcf	135,0,c	;volatile
  1607   0016C0                     
  1608                           ; BSR set to: 0
  1609                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1610   0016C0  907F               	bcf	127,0,c	;volatile
  1611   0016C2                     
  1612                           ; BSR set to: 0
  1613                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1614   0016C2  9E85               	bcf	133,7,c	;volatile
  1615   0016C4                     
  1616                           ; BSR set to: 0
  1617                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1618   0016C4  9E7D               	bcf	125,7,c	;volatile
  1619   0016C6                     
  1620                           ; BSR set to: 0
  1621                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1622   0016C6  9681               	bcf	129,3,c	;volatile
  1623   0016C8                     
  1624                           ; BSR set to: 0
  1625                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1626   0016C8  9679               	bcf	121,3,c	;volatile
  1627   0016CA                     
  1628                           ; BSR set to: 0
  1629                           ;main.c: 71:     TRISFbits.TRISF2=1;
  1630   0016CA  8486               	bsf	134,2,c	;volatile
  1631   0016CC                     
  1632                           ; BSR set to: 0
  1633                           ;main.c: 72:     ANSELFbits.ANSELF2=0;
  1634   0016CC  010E               	movlb	14	; () banked
  1635   0016CE  95B4               	bcf	180,2,b	;volatile
  1636   0016D0                     
  1637                           ; BSR set to: 14
  1638                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1639   0016D0  8686               	bsf	134,3,c	;volatile
  1640   0016D2                     
  1641                           ; BSR set to: 14
  1642                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1643   0016D2  97B4               	bcf	180,3,b	;volatile
  1644   0016D4                     
  1645                           ; BSR set to: 14
  1646                           ;main.c: 82:     TRISHbits.TRISH3 = 0;
  1647   0016D4  9688               	bcf	136,3,c	;volatile
  1648   0016D6                     
  1649                           ; BSR set to: 14
  1650                           ;main.c: 83:     LATHbits.LATH3 = 1;
  1651   0016D6  8680               	bsf	128,3,c	;volatile
  1652   0016D8                     
  1653                           ; BSR set to: 14
  1654                           ;main.c: 84:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1655   0016D8  0E19               	movlw	25
  1656   0016DA  0100               	movlb	0	; () banked
  1657   0016DC  6FAD               	movwf	(??_main+1)& (0+255),b
  1658   0016DE  0E5A               	movlw	90
  1659   0016E0  6FAC               	movwf	??_main& (0+255),b
  1660   0016E2  0EB1               	movlw	177
  1661   0016E4                     u5347:
  1662   0016E4  2EE8               	decfsz	wreg,f,c
  1663   0016E6  D7FE               	bra	u5347
  1664   0016E8  2FAC               	decfsz	??_main& (0+255),f,b
  1665   0016EA  D7FC               	bra	u5347
  1666   0016EC  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1667   0016EE  D7FA               	bra	u5347
  1668   0016F0  D000               	nop2	
  1669   0016F2                     
  1670                           ;main.c: 85:     LATHbits.LATH3 = 0;
  1671   0016F2  9680               	bcf	128,3,c	;volatile
  1672   0016F4                     
  1673                           ;main.c: 89:     calibration_colors(&colorCalibration);
  1674   0016F4  0ED4               	movlw	low _colorCalibration
  1675   0016F6  6E4E               	movwf	calibration_colors@cCal^0,c
  1676   0016F8  EC42  F015         	call	_calibration_colors	;wreg free
  1677   0016FC                     
  1678                           ;main.c: 91:     unsigned int clear_norm;;main.c: 92:     unsigned int path_step = 0;
  1679   0016FC  0E00               	movlw	0
  1680   0016FE  0100               	movlb	0	; () banked
  1681   001700  6FBF               	movwf	(main@path_step+1)& (0+255),b
  1682   001702  0E00               	movlw	0
  1683   001704  6FBE               	movwf	main@path_step& (0+255),b
  1684   001706                     
  1685                           ; BSR set to: 0
  1686                           ;main.c: 93:     unsigned int hue;;main.c: 94:     unsigned int ambient;;main.c: 95:    
      +                           float clear_current;;main.c: 96:     float clear_max;;main.c: 97:     unsigned int fact
      +                          or;;main.c: 101:     ambient = colorCalibration.ambient;
  1687   001706  C0DC  F0AE         	movff	_colorCalibration+8,main@ambient
  1688   00170A  C0DD  F0AF         	movff	_colorCalibration+9,main@ambient+1
  1689   00170E                     
  1690                           ; BSR set to: 0
  1691                           ;main.c: 103:     send2USART(ambient);
  1692   00170E  C0AE  F04C         	movff	main@ambient,send2USART@hue
  1693   001712  C0AF  F04D         	movff	main@ambient+1,send2USART@hue+1
  1694   001716  ECBE  F025         	call	_send2USART	;wreg free
  1695   00171A                     l5988:
  1696                           
  1697                           ;main.c: 107:         LATGbits.LATG0 = 1;
  1698   00171A  807F               	bsf	127,0,c	;volatile
  1699   00171C                     
  1700                           ;main.c: 108:         LATEbits.LATE7 = 1;
  1701   00171C  8E7D               	bsf	125,7,c	;volatile
  1702   00171E                     
  1703                           ;main.c: 109:         LATAbits.LATA3 = 1;
  1704   00171E  8679               	bsf	121,3,c	;volatile
  1705   001720                     
  1706                           ;main.c: 112:         fullSpeedAhead(&motorL,&motorR);
  1707   001720  0EE7               	movlw	low _motorL
  1708   001722  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1709   001724  0EDE               	movlw	low _motorR
  1710   001726  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1711   001728  EC25  F01D         	call	_fullSpeedAhead	;wreg free
  1712   00172C                     
  1713                           ;main.c: 113:         T0CON0bits.T0EN=1;
  1714   00172C  8ED5               	bsf	213,7,c	;volatile
  1715   00172E                     
  1716                           ;main.c: 115:         colorCurrent.clear = color_read_Clear();
  1717   00172E  EC13  F022         	call	_color_read_Clear	;wreg free
  1718   001732  C006  F0D0         	movff	?_color_read_Clear,_colorCurrent+6
  1719   001736  C007  F0D1         	movff	?_color_read_Clear+1,_colorCurrent+7
  1720   00173A                     
  1721                           ;main.c: 117:         clear_current = colorCurrent.clear;
  1722   00173A  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1723   00173E  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1724   001742  6A04               	clrf	(___xxtofl@val+2)^0,c
  1725   001744  6A05               	clrf	(___xxtofl@val+3)^0,c
  1726   001746  0E00               	movlw	0
  1727   001748  EC65  F016         	call	___xxtofl
  1728   00174C  C002  F0BA         	movff	?___xxtofl,main@clear_current
  1729   001750  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  1730   001754  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  1731   001758  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  1732   00175C                     
  1733                           ;main.c: 118:         send2USART(clear_current);
  1734   00175C  C0BA  F042         	movff	main@clear_current,___fltol@f1
  1735   001760  C0BB  F043         	movff	main@clear_current+1,___fltol@f1+1
  1736   001764  C0BC  F044         	movff	main@clear_current+2,___fltol@f1+2
  1737   001768  C0BD  F045         	movff	main@clear_current+3,___fltol@f1+3
  1738   00176C  EC35  F01B         	call	___fltol	;wreg free
  1739   001770  C042  F04C         	movff	?___fltol,send2USART@hue
  1740   001774  C043  F04D         	movff	?___fltol+1,send2USART@hue+1
  1741   001778  ECBE  F025         	call	_send2USART	;wreg free
  1742   00177C                     
  1743                           ;main.c: 119:         clear_max = colorCalibration.clear;
  1744   00177C  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1745   001780  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1746   001784  6A04               	clrf	(___xxtofl@val+2)^0,c
  1747   001786  6A05               	clrf	(___xxtofl@val+3)^0,c
  1748   001788  0E00               	movlw	0
  1749   00178A  EC65  F016         	call	___xxtofl
  1750   00178E  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1751   001792  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1752   001796  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1753   00179A  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1754   00179E                     
  1755                           ;main.c: 121:         clear_norm = (clear_current)*100/clear_max;
  1756   00179E  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1757   0017A2  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1758   0017A6  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1759   0017AA  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1760   0017AE  0E00               	movlw	0
  1761   0017B0  6E14               	movwf	___flmul@a^0,c
  1762   0017B2  0E00               	movlw	0
  1763   0017B4  6E15               	movwf	(___flmul@a+1)^0,c
  1764   0017B6  0EC8               	movlw	200
  1765   0017B8  6E16               	movwf	(___flmul@a+2)^0,c
  1766   0017BA  0E42               	movlw	66
  1767   0017BC  6E17               	movwf	(___flmul@a+3)^0,c
  1768   0017BE  C0BA  F010         	movff	main@clear_current,___flmul@b
  1769   0017C2  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  1770   0017C6  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  1771   0017CA  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  1772   0017CE  EC02  F010         	call	___flmul	;wreg free
  1773   0017D2  C010  F029         	movff	?___flmul,___fldiv@b
  1774   0017D6  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1775   0017DA  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1776   0017DE  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1777   0017E2  EC17  F012         	call	___fldiv	;wreg free
  1778   0017E6  C029  F042         	movff	?___fldiv,___fltol@f1
  1779   0017EA  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1780   0017EE  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1781   0017F2  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1782   0017F6  EC35  F01B         	call	___fltol	;wreg free
  1783   0017FA  C042  F0C0         	movff	?___fltol,main@clear_norm
  1784   0017FE  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  1785   001802                     l6008:
  1786                           
  1787                           ;main.c: 124:         send2USART(clear_norm);
  1788   001802  C0C0  F04C         	movff	main@clear_norm,send2USART@hue
  1789   001806  C0C1  F04D         	movff	main@clear_norm+1,send2USART@hue+1
  1790   00180A  ECBE  F025         	call	_send2USART	;wreg free
  1791                           
  1792                           ;main.c: 126:         while(clear_norm<7){
  1793   00180E  EF65  F00C         	goto	l6016
  1794   001812                     l6010:
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 127:             (colorCurrent.clear) = color_read_Clear();
  1798   001812  EC13  F022         	call	_color_read_Clear	;wreg free
  1799   001816  C006  F0D0         	movff	?_color_read_Clear,_colorCurrent+6
  1800   00181A  C007  F0D1         	movff	?_color_read_Clear+1,_colorCurrent+7
  1801                           
  1802                           ;main.c: 128:             clear_current = colorCurrent.clear;
  1803   00181E  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1804   001822  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1805   001826  6A04               	clrf	(___xxtofl@val+2)^0,c
  1806   001828  6A05               	clrf	(___xxtofl@val+3)^0,c
  1807   00182A  0E00               	movlw	0
  1808   00182C  EC65  F016         	call	___xxtofl
  1809   001830  C002  F0BA         	movff	?___xxtofl,main@clear_current
  1810   001834  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  1811   001838  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  1812   00183C  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  1813                           
  1814                           ;main.c: 129:             clear_max = colorCalibration.clear;
  1815   001840  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1816   001844  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1817   001848  6A04               	clrf	(___xxtofl@val+2)^0,c
  1818   00184A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1819   00184C  0E00               	movlw	0
  1820   00184E  EC65  F016         	call	___xxtofl
  1821   001852  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1822   001856  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1823   00185A  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1824   00185E  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1825   001862                     
  1826                           ;main.c: 130:             clear_norm = clear_current*100/clear_max;
  1827   001862  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1828   001866  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1829   00186A  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1830   00186E  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1831   001872  0E00               	movlw	0
  1832   001874  6E14               	movwf	___flmul@a^0,c
  1833   001876  0E00               	movlw	0
  1834   001878  6E15               	movwf	(___flmul@a+1)^0,c
  1835   00187A  0EC8               	movlw	200
  1836   00187C  6E16               	movwf	(___flmul@a+2)^0,c
  1837   00187E  0E42               	movlw	66
  1838   001880  6E17               	movwf	(___flmul@a+3)^0,c
  1839   001882  C0BA  F010         	movff	main@clear_current,___flmul@b
  1840   001886  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  1841   00188A  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  1842   00188E  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  1843   001892  EC02  F010         	call	___flmul	;wreg free
  1844   001896  C010  F029         	movff	?___flmul,___fldiv@b
  1845   00189A  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1846   00189E  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1847   0018A2  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1848   0018A6  EC17  F012         	call	___fldiv	;wreg free
  1849   0018AA  C029  F042         	movff	?___fldiv,___fltol@f1
  1850   0018AE  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1851   0018B2  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1852   0018B6  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1853   0018BA  EC35  F01B         	call	___fltol	;wreg free
  1854   0018BE  C042  F0C0         	movff	?___fltol,main@clear_norm
  1855   0018C2  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  1856   0018C6  EF01  F00C         	goto	l6008
  1857   0018CA                     l6016:
  1858                           
  1859                           ;main.c: 126:         while(clear_norm<7){
  1860   0018CA  0100               	movlb	0	; () banked
  1861   0018CC  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  1862   0018CE  E109               	bnz	u5260
  1863   0018D0  0E07               	movlw	7
  1864   0018D2  5DC0               	subwf	main@clear_norm& (0+255),w,b
  1865   0018D4  A0D8               	btfss	status,0,c
  1866   0018D6  EF6F  F00C         	goto	u5261
  1867   0018DA  EF71  F00C         	goto	u5260
  1868   0018DE                     u5261:
  1869   0018DE  EF09  F00C         	goto	l6010
  1870   0018E2                     u5260:
  1871   0018E2                     
  1872                           ; BSR set to: 0
  1873                           ;main.c: 135:         T0CON0bits.T0EN=0;
  1874   0018E2  9ED5               	bcf	213,7,c	;volatile
  1875   0018E4                     
  1876                           ; BSR set to: 0
  1877                           ;main.c: 137:         stop(&motorL,&motorR);
  1878   0018E4  0EE7               	movlw	low _motorL
  1879   0018E6  6E14               	movwf	stop@mL^0,c
  1880   0018E8  0EDE               	movlw	low _motorR
  1881   0018EA  6E15               	movwf	stop@mR^0,c
  1882   0018EC  EC27  F020         	call	_stop	;wreg free
  1883   0018F0                     
  1884                           ;main.c: 140:         path_step = get16bitTMR0val(path_step);
  1885   0018F0  C0BE  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  1886   0018F4  C0BF  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1887   0018F8  EC45  F01F         	call	_get16bitTMR0val	;wreg free
  1888   0018FC  C01C  F0BE         	movff	?_get16bitTMR0val,main@path_step
  1889   001900  C01D  F0BF         	movff	?_get16bitTMR0val+1,main@path_step+1
  1890   001904                     
  1891                           ;main.c: 142:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1892   001904  0E11               	movlw	17
  1893   001906  0100               	movlb	0	; () banked
  1894   001908  6FAD               	movwf	(??_main+1)& (0+255),b
  1895   00190A  0E3C               	movlw	60
  1896   00190C  6FAC               	movwf	??_main& (0+255),b
  1897   00190E  0ECB               	movlw	203
  1898   001910                     u5357:
  1899   001910  2EE8               	decfsz	wreg,f,c
  1900   001912  D7FE               	bra	u5357
  1901   001914  2FAC               	decfsz	??_main& (0+255),f,b
  1902   001916  D7FC               	bra	u5357
  1903   001918  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1904   00191A  D7FA               	bra	u5357
  1905   00191C                     
  1906                           ;main.c: 145:         fullSpeedAhead(&motorL,&motorR);
  1907   00191C  0EE7               	movlw	low _motorL
  1908   00191E  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1909   001920  0EDE               	movlw	low _motorR
  1910   001922  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1911   001924  EC25  F01D         	call	_fullSpeedAhead	;wreg free
  1912   001928                     
  1913                           ;main.c: 146:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1914   001928  0E19               	movlw	25
  1915   00192A  0100               	movlb	0	; () banked
  1916   00192C  6FAD               	movwf	(??_main+1)& (0+255),b
  1917   00192E  0E5A               	movlw	90
  1918   001930  6FAC               	movwf	??_main& (0+255),b
  1919   001932  0EB1               	movlw	177
  1920   001934                     u5367:
  1921   001934  2EE8               	decfsz	wreg,f,c
  1922   001936  D7FE               	bra	u5367
  1923   001938  2FAC               	decfsz	??_main& (0+255),f,b
  1924   00193A  D7FC               	bra	u5367
  1925   00193C  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1926   00193E  D7FA               	bra	u5367
  1927   001940  D000               	nop2	
  1928   001942                     
  1929                           ;main.c: 147:         stop(&motorL,&motorR);
  1930   001942  0EE7               	movlw	low _motorL
  1931   001944  6E14               	movwf	stop@mL^0,c
  1932   001946  0EDE               	movlw	low _motorR
  1933   001948  6E15               	movwf	stop@mR^0,c
  1934   00194A  EC27  F020         	call	_stop	;wreg free
  1935   00194E                     
  1936                           ;main.c: 148:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1937   00194E  0E19               	movlw	25
  1938   001950  0100               	movlb	0	; () banked
  1939   001952  6FAD               	movwf	(??_main+1)& (0+255),b
  1940   001954  0E5A               	movlw	90
  1941   001956  6FAC               	movwf	??_main& (0+255),b
  1942   001958  0EB1               	movlw	177
  1943   00195A                     u5377:
  1944   00195A  2EE8               	decfsz	wreg,f,c
  1945   00195C  D7FE               	bra	u5377
  1946   00195E  2FAC               	decfsz	??_main& (0+255),f,b
  1947   001960  D7FC               	bra	u5377
  1948   001962  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1949   001964  D7FA               	bra	u5377
  1950   001966  D000               	nop2	
  1951   001968                     
  1952                           ;main.c: 150:         hue = reading_hue(&colorCurrent);
  1953   001968  0ECA               	movlw	low _colorCurrent
  1954   00196A  6E50               	movwf	reading_hue@cCurr^0,c
  1955   00196C  ECB0  F01C         	call	_reading_hue	;wreg free
  1956   001970  C050  F0B4         	movff	?_reading_hue,main@hue
  1957   001974  C051  F0B5         	movff	?_reading_hue+1,main@hue+1
  1958   001978                     
  1959                           ;main.c: 152:         clear_current = colorCurrent.clear;
  1960   001978  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1961   00197C  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1962   001980  6A04               	clrf	(___xxtofl@val+2)^0,c
  1963   001982  6A05               	clrf	(___xxtofl@val+3)^0,c
  1964   001984  0E00               	movlw	0
  1965   001986  EC65  F016         	call	___xxtofl
  1966   00198A  C002  F0BA         	movff	?___xxtofl,main@clear_current
  1967   00198E  C003  F0BB         	movff	?___xxtofl+1,main@clear_current+1
  1968   001992  C004  F0BC         	movff	?___xxtofl+2,main@clear_current+2
  1969   001996  C005  F0BD         	movff	?___xxtofl+3,main@clear_current+3
  1970   00199A                     
  1971                           ;main.c: 153:         clear_max = colorCalibration.clear;
  1972   00199A  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1973   00199E  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1974   0019A2  6A04               	clrf	(___xxtofl@val+2)^0,c
  1975   0019A4  6A05               	clrf	(___xxtofl@val+3)^0,c
  1976   0019A6  0E00               	movlw	0
  1977   0019A8  EC65  F016         	call	___xxtofl
  1978   0019AC  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1979   0019B0  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1980   0019B4  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1981   0019B8  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1982   0019BC                     
  1983                           ;main.c: 154:         clear_norm = clear_current*100/clear_max;
  1984   0019BC  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1985   0019C0  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1986   0019C4  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1987   0019C8  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1988   0019CC  0E00               	movlw	0
  1989   0019CE  6E14               	movwf	___flmul@a^0,c
  1990   0019D0  0E00               	movlw	0
  1991   0019D2  6E15               	movwf	(___flmul@a+1)^0,c
  1992   0019D4  0EC8               	movlw	200
  1993   0019D6  6E16               	movwf	(___flmul@a+2)^0,c
  1994   0019D8  0E42               	movlw	66
  1995   0019DA  6E17               	movwf	(___flmul@a+3)^0,c
  1996   0019DC  C0BA  F010         	movff	main@clear_current,___flmul@b
  1997   0019E0  C0BB  F011         	movff	main@clear_current+1,___flmul@b+1
  1998   0019E4  C0BC  F012         	movff	main@clear_current+2,___flmul@b+2
  1999   0019E8  C0BD  F013         	movff	main@clear_current+3,___flmul@b+3
  2000   0019EC  EC02  F010         	call	___flmul	;wreg free
  2001   0019F0  C010  F029         	movff	?___flmul,___fldiv@b
  2002   0019F4  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  2003   0019F8  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  2004   0019FC  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  2005   001A00  EC17  F012         	call	___fldiv	;wreg free
  2006   001A04  C029  F042         	movff	?___fldiv,___fltol@f1
  2007   001A08  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  2008   001A0C  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  2009   001A10  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  2010   001A14  EC35  F01B         	call	___fltol	;wreg free
  2011   001A18  C042  F0C0         	movff	?___fltol,main@clear_norm
  2012   001A1C  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  2013   001A20                     
  2014                           ;main.c: 156:         if (clear_norm > 20){
  2015   001A20  0100               	movlb	0	; () banked
  2016   001A22  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  2017   001A24  E109               	bnz	u5270
  2018   001A26  0E15               	movlw	21
  2019   001A28  5DC0               	subwf	main@clear_norm& (0+255),w,b
  2020   001A2A  A0D8               	btfss	status,0,c
  2021   001A2C  EF1A  F00D         	goto	u5271
  2022   001A30  EF1C  F00D         	goto	u5270
  2023   001A34                     u5271:
  2024   001A34  EF35  F00D         	goto	l6048
  2025   001A38                     u5270:
  2026   001A38                     
  2027                           ; BSR set to: 0
  2028                           ;main.c: 157:             fullSpeedAhead(&motorL,&motorR);
  2029   001A38  0EE7               	movlw	low _motorL
  2030   001A3A  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2031   001A3C  0EDE               	movlw	low _motorR
  2032   001A3E  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2033   001A40  EC25  F01D         	call	_fullSpeedAhead	;wreg free
  2034   001A44                     
  2035                           ;main.c: 158:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2036   001A44  0E09               	movlw	9
  2037   001A46  0100               	movlb	0	; () banked
  2038   001A48  6FAD               	movwf	(??_main+1)& (0+255),b
  2039   001A4A  0E1E               	movlw	30
  2040   001A4C  6FAC               	movwf	??_main& (0+255),b
  2041   001A4E  0EE4               	movlw	228
  2042   001A50                     u5387:
  2043   001A50  2EE8               	decfsz	wreg,f,c
  2044   001A52  D7FE               	bra	u5387
  2045   001A54  2FAC               	decfsz	??_main& (0+255),f,b
  2046   001A56  D7FC               	bra	u5387
  2047   001A58  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  2048   001A5A  D7FA               	bra	u5387
  2049   001A5C  0000               	nop	
  2050   001A5E                     
  2051                           ;main.c: 159:             stop(&motorL,&motorR);
  2052   001A5E  0EE7               	movlw	low _motorL
  2053   001A60  6E14               	movwf	stop@mL^0,c
  2054   001A62  0EDE               	movlw	low _motorR
  2055   001A64  6E15               	movwf	stop@mR^0,c
  2056   001A66  EC27  F020         	call	_stop	;wreg free
  2057   001A6A                     l6048:
  2058                           
  2059                           ;main.c: 161:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  2060   001A6A  0100               	movlb	0	; () banked
  2061   001A6C  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  2062   001A6E  E109               	bnz	u5280
  2063   001A70  0E3D               	movlw	61
  2064   001A72  5DC0               	subwf	main@clear_norm& (0+255),w,b
  2065   001A74  A0D8               	btfss	status,0,c
  2066   001A76  EF3F  F00D         	goto	u5281
  2067   001A7A  EF41  F00D         	goto	u5280
  2068   001A7E                     u5281:
  2069   001A7E  EF57  F00D         	goto	l296
  2070   001A82                     u5280:
  2071   001A82                     
  2072                           ; BSR set to: 0
  2073   001A82  0E2E               	movlw	46
  2074   001A84  5DB4               	subwf	main@hue& (0+255),w,b
  2075   001A86  0E01               	movlw	1
  2076   001A88  59B5               	subwfb	(main@hue+1)& (0+255),w,b
  2077   001A8A  A0D8               	btfss	status,0,c
  2078   001A8C  EF4A  F00D         	goto	u5291
  2079   001A90  EF4C  F00D         	goto	u5290
  2080   001A94                     u5291:
  2081   001A94  EF5E  F00D         	goto	l294
  2082   001A98                     u5290:
  2083   001A98                     
  2084                           ; BSR set to: 0
  2085   001A98  0E5B               	movlw	91
  2086   001A9A  5DB4               	subwf	main@hue& (0+255),w,b
  2087   001A9C  0E01               	movlw	1
  2088   001A9E  59B5               	subwfb	(main@hue+1)& (0+255),w,b
  2089   001AA0  B0D8               	btfsc	status,0,c
  2090   001AA2  EF55  F00D         	goto	u5301
  2091   001AA6  EF57  F00D         	goto	u5300
  2092   001AAA                     u5301:
  2093   001AAA  EF5E  F00D         	goto	l294
  2094   001AAE                     u5300:
  2095   001AAE                     l296:
  2096                           
  2097                           ; BSR set to: 0
  2098   001AAE  A27F               	btfss	127,1,c	;volatile
  2099   001AB0  EF5C  F00D         	goto	u5311
  2100   001AB4  EF5E  F00D         	goto	u5310
  2101   001AB8                     u5311:
  2102   001AB8  EF8C  F00D         	goto	l6062
  2103   001ABC                     u5310:
  2104   001ABC                     l294:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 163:             LATGbits.LATG0 = 0;
  2108   001ABC  907F               	bcf	127,0,c	;volatile
  2109                           
  2110                           ;main.c: 164:             LATEbits.LATE7 = 0;
  2111   001ABE  9E7D               	bcf	125,7,c	;volatile
  2112                           
  2113                           ;main.c: 165:             LATAbits.LATA3 = 0;
  2114   001AC0  9679               	bcf	121,3,c	;volatile
  2115                           
  2116                           ;main.c: 167:             if (LATGbits.LATG1 == 1){
  2117   001AC2  A27F               	btfss	127,1,c	;volatile
  2118   001AC4  EF66  F00D         	goto	u5321
  2119   001AC8  EF68  F00D         	goto	u5320
  2120   001ACC                     u5321:
  2121   001ACC  EF72  F00D         	goto	l6056
  2122   001AD0                     u5320:
  2123   001AD0                     
  2124                           ; BSR set to: 0
  2125                           ;main.c: 168:                 path_step = get16bitTMR0val(path_step);
  2126   001AD0  C0BE  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  2127   001AD4  C0BF  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  2128   001AD8  EC45  F01F         	call	_get16bitTMR0val	;wreg free
  2129   001ADC  C01C  F0BE         	movff	?_get16bitTMR0val,main@path_step
  2130   001AE0  C01D  F0BF         	movff	?_get16bitTMR0val+1,main@path_step+1
  2131   001AE4                     l6056:
  2132                           
  2133                           ;main.c: 170:             unsigned int white = 8;
  2134   001AE4  0E00               	movlw	0
  2135   001AE6  0100               	movlb	0	; () banked
  2136   001AE8  6FB1               	movwf	(main@white+1)& (0+255),b
  2137   001AEA  0E08               	movlw	8
  2138   001AEC  6FB0               	movwf	main@white& (0+255),b
  2139   001AEE                     
  2140                           ; BSR set to: 0
  2141                           ;main.c: 171:             send2USART(white);
  2142   001AEE  C0B0  F04C         	movff	main@white,send2USART@hue
  2143   001AF2  C0B1  F04D         	movff	main@white+1,send2USART@hue+1
  2144   001AF6  ECBE  F025         	call	_send2USART	;wreg free
  2145   001AFA                     
  2146                           ;main.c: 172:             returnHome(&motorL, &motorR, path_step, factor);
  2147   001AFA  0EE7               	movlw	low _motorL
  2148   001AFC  0100               	movlb	0	; () banked
  2149   001AFE  6F60               	movwf	returnHome@mL& (0+255),b
  2150   001B00  0EDE               	movlw	low _motorR
  2151   001B02  6F61               	movwf	returnHome@mR& (0+255),b
  2152   001B04  C0BE  F062         	movff	main@path_step,returnHome@path_step
  2153   001B08  C0BF  F063         	movff	main@path_step+1,returnHome@path_step+1
  2154   001B0C  C0B2  F064         	movff	main@factor,returnHome@factor
  2155   001B10  C0B3  F065         	movff	main@factor+1,returnHome@factor+1
  2156   001B14  ECBF  F018         	call	_returnHome	;wreg free
  2157   001B18                     l6062:
  2158                           
  2159                           ;main.c: 176:         path_step = decision(hue, path_step, factor);
  2160   001B18  C0B4  F025         	movff	main@hue,decision@hue
  2161   001B1C  C0B5  F026         	movff	main@hue+1,decision@hue+1
  2162   001B20  C0BE  F027         	movff	main@path_step,decision@path_step
  2163   001B24  C0BF  F028         	movff	main@path_step+1,decision@path_step+1
  2164   001B28  C0B2  F029         	movff	main@factor,decision@factor
  2165   001B2C  C0B3  F02A         	movff	main@factor+1,decision@factor+1
  2166   001B30  ECE4  F013         	call	_decision	;wreg free
  2167   001B34  C025  F0BE         	movff	?_decision,main@path_step
  2168   001B38  C026  F0BF         	movff	?_decision+1,main@path_step+1
  2169   001B3C  EF8D  F00B         	goto	l5988
  2170   001B40  EF1D  F000         	goto	start
  2171   001B44                     __end_of_main:
  2172                           	callstack 0
  2173                           
  2174 ;; *************** function _returnHome *****************
  2175 ;; Defined at:
  2176 ;;		line 97 in file "return_func.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2179 ;;		 -> motorL(9), 
  2180 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2181 ;;		 -> motorR(9), 
  2182 ;;  path_step       2    2[BANK0 ] unsigned int 
  2183 ;;  factor          2    4[BANK0 ] unsigned int 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  action_turn     1   12[BANK0 ] unsigned char 
  2186 ;;  i               2   13[BANK0 ] unsigned int 
  2187 ;;  time_ms         4    8[BANK0 ] long 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2197 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2198 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2200 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2201 ;;Total ram usage:       15 bytes
  2202 ;; Hardware stack levels used: 1
  2203 ;; Hardware stack levels required when called: 6
  2204 ;; This function calls:
  2205 ;;		_moveWhite
  2206 ;;		_reverseStraight
  2207 ;;		_reverseTurn
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text1
  2214   00317E                     __ptext1:
  2215                           	callstack 0
  2216   00317E                     _returnHome:
  2217                           	callstack 24
  2218   00317E                     
  2219                           ;return_func.c: 97: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step, unsigned int factor);return_func.c: 98: {;return_func.c: 100:     long tim
      +                          e_ms;;return_func.c: 103:     moveWhite(&motorL,&motorR,factor);
  2220   00317E  0EE7               	movlw	low _motorL
  2221   003180  6E1F               	movwf	moveWhite@mL^0,c
  2222   003182  0EDE               	movlw	low _motorR
  2223   003184  6E20               	movwf	moveWhite@mR^0,c
  2224   003186  C064  F021         	movff	returnHome@factor,moveWhite@factor
  2225   00318A  C065  F022         	movff	returnHome@factor+1,moveWhite@factor+1
  2226   00318E  ECAF  F023         	call	_moveWhite	;wreg free
  2227   003192                     
  2228                           ;return_func.c: 105:     if (path_step > 0) {
  2229   003192  0100               	movlb	0	; () banked
  2230   003194  5162               	movf	returnHome@path_step& (0+255),w,b
  2231   003196  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  2232   003198  B4D8               	btfsc	status,2,c
  2233   00319A  EFD1  F018         	goto	u5211
  2234   00319E  EFD3  F018         	goto	u5210
  2235   0031A2                     u5211:
  2236   0031A2  EF72  F019         	goto	l695
  2237   0031A6                     u5210:
  2238   0031A6                     
  2239                           ; BSR set to: 0
  2240                           ;return_func.c: 106:         for (unsigned int i = path_step - 1; ; i--) {
  2241   0031A6  0EFF               	movlw	255
  2242   0031A8  2562               	addwf	returnHome@path_step& (0+255),w,b
  2243   0031AA  6F6D               	movwf	returnHome@i& (0+255),b
  2244   0031AC  0EFF               	movlw	255
  2245   0031AE  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  2246   0031B0  6F6E               	movwf	(returnHome@i+1)& (0+255),b
  2247   0031B2                     l5894:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;return_func.c: 108:             char action_turn = action[i];
  2251   0031B2  0E3C               	movlw	low _action
  2252   0031B4  256D               	addwf	returnHome@i& (0+255),w,b
  2253   0031B6  6ED9               	movwf	fsr2l,c
  2254   0031B8  0E01               	movlw	high _action
  2255   0031BA  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2256   0031BC  6EDA               	movwf	fsr2h,c
  2257   0031BE  50DF               	movf	indf2,w,c
  2258   0031C0  6F6C               	movwf	returnHome@action_turn& (0+255),b
  2259   0031C2                     
  2260                           ; BSR set to: 0
  2261                           ;return_func.c: 109:             if (action[i+1]== 5 || action[i+1]==7){
  2262   0031C2  0E3D               	movlw	low (_action+1)
  2263   0031C4  256D               	addwf	returnHome@i& (0+255),w,b
  2264   0031C6  6ED9               	movwf	fsr2l,c
  2265   0031C8  0E01               	movlw	high (_action+1)
  2266   0031CA  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2267   0031CC  6EDA               	movwf	fsr2h,c
  2268   0031CE  0E05               	movlw	5
  2269   0031D0  18DE               	xorwf	postinc2,w,c
  2270   0031D2  B4D8               	btfsc	status,2,c
  2271   0031D4  EFEE  F018         	goto	u5221
  2272   0031D8  EFF0  F018         	goto	u5220
  2273   0031DC                     u5221:
  2274   0031DC  EFFF  F018         	goto	l5900
  2275   0031E0                     u5220:
  2276   0031E0                     
  2277                           ; BSR set to: 0
  2278   0031E0  0E3D               	movlw	low (_action+1)
  2279   0031E2  256D               	addwf	returnHome@i& (0+255),w,b
  2280   0031E4  6ED9               	movwf	fsr2l,c
  2281   0031E6  0E01               	movlw	high (_action+1)
  2282   0031E8  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2283   0031EA  6EDA               	movwf	fsr2h,c
  2284   0031EC  0E07               	movlw	7
  2285   0031EE  18DE               	xorwf	postinc2,w,c
  2286   0031F0  A4D8               	btfss	status,2,c
  2287   0031F2  EFFD  F018         	goto	u5231
  2288   0031F6  EFFF  F018         	goto	u5230
  2289   0031FA                     u5231:
  2290   0031FA  EF1D  F019         	goto	l5902
  2291   0031FE                     u5230:
  2292   0031FE                     l5900:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;return_func.c: 110:                 time_ms = time[i]-2250;
  2296   0031FE  0E00               	movlw	low _time
  2297   003200  6F66               	movwf	??_returnHome& (0+255),b
  2298   003202  0E02               	movlw	high _time
  2299   003204  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2300   003206  90D8               	bcf	status,0,c
  2301   003208  356D               	rlcf	returnHome@i& (0+255),w,b
  2302   00320A  6ED9               	movwf	fsr2l,c
  2303   00320C  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2304   00320E  6EDA               	movwf	fsr2h,c
  2305   003210  90D8               	bcf	status,0,c
  2306   003212  36D9               	rlcf	fsr2l,f,c
  2307   003214  36DA               	rlcf	fsr2h,f,c
  2308   003216  5166               	movf	??_returnHome& (0+255),w,b
  2309   003218  26D9               	addwf	fsr2l,f,c
  2310   00321A  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2311   00321C  22DA               	addwfc	fsr2h,f,c
  2312   00321E  0E36               	movlw	54
  2313   003220  24DE               	addwf	postinc2,w,c
  2314   003222  6F68               	movwf	returnHome@time_ms& (0+255),b
  2315   003224  0EF7               	movlw	247
  2316   003226  20DE               	addwfc	postinc2,w,c
  2317   003228  6F69               	movwf	(returnHome@time_ms+1)& (0+255),b
  2318   00322A  0EFF               	movlw	255
  2319   00322C  20DE               	addwfc	postinc2,w,c
  2320   00322E  6F6A               	movwf	(returnHome@time_ms+2)& (0+255),b
  2321   003230  0EFF               	movlw	255
  2322   003232  20DE               	addwfc	postinc2,w,c
  2323   003234  6F6B               	movwf	(returnHome@time_ms+3)& (0+255),b
  2324                           
  2325                           ;return_func.c: 111:             }else{
  2326   003236  EF35  F019         	goto	l5904
  2327   00323A                     l5902:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;return_func.c: 112:                 time_ms = time[i];
  2331   00323A  0E00               	movlw	low _time
  2332   00323C  6F66               	movwf	??_returnHome& (0+255),b
  2333   00323E  0E02               	movlw	high _time
  2334   003240  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2335   003242  90D8               	bcf	status,0,c
  2336   003244  356D               	rlcf	returnHome@i& (0+255),w,b
  2337   003246  6ED9               	movwf	fsr2l,c
  2338   003248  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2339   00324A  6EDA               	movwf	fsr2h,c
  2340   00324C  90D8               	bcf	status,0,c
  2341   00324E  36D9               	rlcf	fsr2l,f,c
  2342   003250  36DA               	rlcf	fsr2h,f,c
  2343   003252  5166               	movf	??_returnHome& (0+255),w,b
  2344   003254  26D9               	addwf	fsr2l,f,c
  2345   003256  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2346   003258  22DA               	addwfc	fsr2h,f,c
  2347   00325A  CFDE F068          	movff	postinc2,returnHome@time_ms
  2348   00325E  CFDE F069          	movff	postinc2,returnHome@time_ms+1
  2349   003262  CFDE F06A          	movff	postinc2,returnHome@time_ms+2
  2350   003266  CFDE F06B          	movff	postinc2,returnHome@time_ms+3
  2351   00326A                     l5904:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;return_func.c: 114:             if (action_turn == 0) {
  2355   00326A  516C               	movf	returnHome@action_turn& (0+255),w,b
  2356   00326C  A4D8               	btfss	status,2,c
  2357   00326E  EF3B  F019         	goto	u5241
  2358   003272  EF3D  F019         	goto	u5240
  2359   003276                     u5241:
  2360   003276  EF4D  F019         	goto	l5908
  2361   00327A                     u5240:
  2362   00327A                     
  2363                           ; BSR set to: 0
  2364                           ;return_func.c: 115:                 reverseStraight(mL, mR, time_ms);
  2365   00327A  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  2366   00327E  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  2367   003282  C068  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  2368   003286  C069  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2369   00328A  C06A  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2370   00328E  C06B  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2371   003292  EC3A  F01C         	call	_reverseStraight	;wreg free
  2372                           
  2373                           ;return_func.c: 116:             } else {
  2374   003296  EF61  F019         	goto	l5910
  2375   00329A                     l5908:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;return_func.c: 117:                 reverseTurn(mL, mR, action_turn, time_ms, factor);
  2379   00329A  C060  F01F         	movff	returnHome@mL,reverseTurn@mL
  2380   00329E  C061  F020         	movff	returnHome@mR,reverseTurn@mR
  2381   0032A2  C06C  F021         	movff	returnHome@action_turn,reverseTurn@actionStep
  2382   0032A6  C068  F022         	movff	returnHome@time_ms,reverseTurn@time_ms
  2383   0032AA  C069  F023         	movff	returnHome@time_ms+1,reverseTurn@time_ms+1
  2384   0032AE  C06A  F024         	movff	returnHome@time_ms+2,reverseTurn@time_ms+2
  2385   0032B2  C06B  F025         	movff	returnHome@time_ms+3,reverseTurn@time_ms+3
  2386   0032B6  C064  F026         	movff	returnHome@factor,reverseTurn@factor
  2387   0032BA  C065  F027         	movff	returnHome@factor+1,reverseTurn@factor+1
  2388   0032BE  EC1E  F01A         	call	_reverseTurn	;wreg free
  2389   0032C2                     l5910:
  2390                           
  2391                           ;return_func.c: 120:             if (i == 0) break;
  2392   0032C2  0100               	movlb	0	; () banked
  2393   0032C4  516D               	movf	returnHome@i& (0+255),w,b
  2394   0032C6  116E               	iorwf	(returnHome@i+1)& (0+255),w,b
  2395   0032C8  A4D8               	btfss	status,2,c
  2396   0032CA  EF69  F019         	goto	u5251
  2397   0032CE  EF6B  F019         	goto	u5250
  2398   0032D2                     u5251:
  2399   0032D2  EF6D  F019         	goto	l5914
  2400   0032D6                     u5250:
  2401   0032D6  EF72  F019         	goto	l695
  2402   0032DA                     l5914:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;return_func.c: 121:         }
  2406   0032DA  076D               	decf	returnHome@i& (0+255),f,b
  2407   0032DC  A0D8               	btfss	status,0,c
  2408   0032DE  076E               	decf	(returnHome@i+1)& (0+255),f,b
  2409   0032E0  EFD9  F018         	goto	l5894
  2410   0032E4                     l695:
  2411                           
  2412                           ; BSR set to: 0
  2413   0032E4  0003               	sleep		;# 
  2414   0032E6  0012               	return		;funcret
  2415   0032E8                     __end_of_returnHome:
  2416                           	callstack 0
  2417                           
  2418 ;; *************** function _reverseTurn *****************
  2419 ;; Defined at:
  2420 ;;		line 24 in file "return_func.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2423 ;;		 -> motorL(9), 
  2424 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2425 ;;		 -> motorR(9), 
  2426 ;;  actionStep      1   32[COMRAM] unsigned char 
  2427 ;;  time_ms         4   33[COMRAM] long 
  2428 ;;  factor          2   37[COMRAM] unsigned int 
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;		None
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2440 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2443 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2444 ;;Total ram usage:       11 bytes
  2445 ;; Hardware stack levels used: 1
  2446 ;; Hardware stack levels required when called: 5
  2447 ;; This function calls:
  2448 ;;		_backHalf
  2449 ;;		_left135
  2450 ;;		_left90
  2451 ;;		_right135
  2452 ;;		_right90
  2453 ;;		_turn180
  2454 ;; This function is called by:
  2455 ;;		_returnHome
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text2
  2460   00343C                     __ptext2:
  2461                           	callstack 0
  2462   00343C                     _reverseTurn:
  2463                           	callstack 24
  2464   00343C                     
  2465                           ;return_func.c: 25:     if (actionStep == 1) {
  2466   00343C  0421               	decf	reverseTurn@actionStep^0,w,c
  2467   00343E  A4D8               	btfss	status,2,c
  2468   003440  EF24  F01A         	goto	u4271
  2469   003444  EF26  F01A         	goto	u4270
  2470   003448                     u4271:
  2471   003448  EF44  F01A         	goto	l4946
  2472   00344C                     u4270:
  2473   00344C                     l4940:
  2474                           
  2475                           ;return_func.c: 28:         left90(mL,mR, factor);
  2476   00344C  C01F  F019         	movff	reverseTurn@mL,left90@mL
  2477   003450  C020  F01A         	movff	reverseTurn@mR,left90@mR
  2478   003454  C026  F01B         	movff	reverseTurn@factor,left90@factor
  2479   003458  C027  F01C         	movff	reverseTurn@factor+1,left90@factor+1
  2480   00345C  EC0B  F023         	call	_left90	;wreg free
  2481   003460                     l4942:
  2482                           
  2483                           ;return_func.c: 29:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2484   003460  0E29               	movlw	41
  2485   003462  6E29               	movwf	(??_reverseTurn+1)^0,c
  2486   003464  0E96               	movlw	150
  2487   003466  6E28               	movwf	??_reverseTurn^0,c
  2488   003468  0E7F               	movlw	127
  2489   00346A                     u5397:
  2490   00346A  2EE8               	decfsz	wreg,f,c
  2491   00346C  D7FE               	bra	u5397
  2492   00346E  2E28               	decfsz	??_reverseTurn^0,f,c
  2493   003470  D7FC               	bra	u5397
  2494   003472  2E29               	decfsz	(??_reverseTurn+1)^0,f,c
  2495   003474  D7FA               	bra	u5397
  2496   003476  0000               	nop	
  2497   003478                     
  2498                           ;return_func.c: 30:         backHalf(mL,mR);
  2499   003478  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  2500   00347C  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  2501   003480  EC33  F025         	call	_backHalf	;wreg free
  2502                           
  2503                           ;return_func.c: 32:     } else if (actionStep == 2) {
  2504   003484  EFAE  F01A         	goto	l684
  2505   003488                     l4946:
  2506   003488  0E02               	movlw	2
  2507   00348A  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2508   00348C  A4D8               	btfss	status,2,c
  2509   00348E  EF4B  F01A         	goto	u4281
  2510   003492  EF4D  F01A         	goto	u4280
  2511   003496                     u4281:
  2512   003496  EF59  F01A         	goto	l4954
  2513   00349A                     u4280:
  2514   00349A                     l4948:
  2515                           
  2516                           ;return_func.c: 35:         right90(mL,mR, factor);
  2517   00349A  C01F  F019         	movff	reverseTurn@mL,right90@mL
  2518   00349E  C020  F01A         	movff	reverseTurn@mR,right90@mR
  2519   0034A2  C026  F01B         	movff	reverseTurn@factor,right90@factor
  2520   0034A6  C027  F01C         	movff	reverseTurn@factor+1,right90@factor+1
  2521   0034AA  ECA8  F022         	call	_right90	;wreg free
  2522   0034AE  EF30  F01A         	goto	l4942
  2523   0034B2                     l4954:
  2524   0034B2  0E03               	movlw	3
  2525   0034B4  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2526   0034B6  A4D8               	btfss	status,2,c
  2527   0034B8  EF60  F01A         	goto	u4291
  2528   0034BC  EF62  F01A         	goto	u4290
  2529   0034C0                     u4291:
  2530   0034C0  EF6E  F01A         	goto	l4962
  2531   0034C4                     u4290:
  2532   0034C4                     
  2533                           ;return_func.c: 42:         turn180(mL,mR, factor);
  2534   0034C4  C01F  F019         	movff	reverseTurn@mL,turn180@mL
  2535   0034C8  C020  F01A         	movff	reverseTurn@mR,turn180@mR
  2536   0034CC  C026  F01B         	movff	reverseTurn@factor,turn180@factor
  2537   0034D0  C027  F01C         	movff	reverseTurn@factor+1,turn180@factor+1
  2538   0034D4  EC2C  F023         	call	_turn180	;wreg free
  2539   0034D8  EF30  F01A         	goto	l4942
  2540   0034DC                     l4962:
  2541   0034DC  0E04               	movlw	4
  2542   0034DE  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2543   0034E0  A4D8               	btfss	status,2,c
  2544   0034E2  EF75  F01A         	goto	u4301
  2545   0034E6  EF77  F01A         	goto	u4300
  2546   0034EA                     u4301:
  2547   0034EA  EF83  F01A         	goto	l4970
  2548   0034EE                     u4300:
  2549   0034EE                     
  2550                           ;return_func.c: 49:         right135(mL,mR, factor);
  2551   0034EE  C01F  F019         	movff	reverseTurn@mL,right135@mL
  2552   0034F2  C020  F01A         	movff	reverseTurn@mR,right135@mR
  2553   0034F6  C026  F01B         	movff	reverseTurn@factor,right135@factor
  2554   0034FA  C027  F01C         	movff	reverseTurn@factor+1,right135@factor+1
  2555   0034FE  ECC9  F022         	call	_right135	;wreg free
  2556   003502  EF30  F01A         	goto	l4942
  2557   003506                     l4970:
  2558   003506  0E05               	movlw	5
  2559   003508  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2560   00350A  A4D8               	btfss	status,2,c
  2561   00350C  EF8A  F01A         	goto	u4311
  2562   003510  EF8C  F01A         	goto	u4310
  2563   003514                     u4311:
  2564   003514  EF8E  F01A         	goto	l4978
  2565   003518                     u4310:
  2566   003518  EF26  F01A         	goto	l4940
  2567   00351C                     l4978:
  2568   00351C  0E06               	movlw	6
  2569   00351E  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2570   003520  A4D8               	btfss	status,2,c
  2571   003522  EF95  F01A         	goto	u4321
  2572   003526  EF97  F01A         	goto	u4320
  2573   00352A                     u4321:
  2574   00352A  EFA3  F01A         	goto	l4986
  2575   00352E                     u4320:
  2576   00352E                     
  2577                           ;return_func.c: 63:         left135(mL,mR, factor);
  2578   00352E  C01F  F019         	movff	reverseTurn@mL,left135@mL
  2579   003532  C020  F01A         	movff	reverseTurn@mR,left135@mR
  2580   003536  C026  F01B         	movff	reverseTurn@factor,left135@factor
  2581   00353A  C027  F01C         	movff	reverseTurn@factor+1,left135@factor+1
  2582   00353E  ECEA  F022         	call	_left135	;wreg free
  2583   003542  EF30  F01A         	goto	l4942
  2584   003546                     l4986:
  2585   003546  0E07               	movlw	7
  2586   003548  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2587   00354A  A4D8               	btfss	status,2,c
  2588   00354C  EFAA  F01A         	goto	u4331
  2589   003550  EFAC  F01A         	goto	u4330
  2590   003554                     u4331:
  2591   003554  EFAE  F01A         	goto	l678
  2592   003558                     u4330:
  2593   003558  EF4D  F01A         	goto	l4948
  2594   00355C                     l678:
  2595   00355C                     l684:
  2596   00355C  0012               	return		;funcret
  2597   00355E                     __end_of_reverseTurn:
  2598                           	callstack 0
  2599                           
  2600 ;; *************** function _reverseStraight *****************
  2601 ;; Defined at:
  2602 ;;		line 80 in file "return_func.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  2605 ;;		 -> motorL(9), 
  2606 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  2607 ;;		 -> motorR(9), 
  2608 ;;  time_ms         4   82[COMRAM] long 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  delayMs         2   88[COMRAM] unsigned int 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2620 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;Total ram usage:       10 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 4
  2627 ;; This function calls:
  2628 ;;		_customDelayMs
  2629 ;;		_fullSpeedAhead
  2630 ;;		_stop
  2631 ;; This function is called by:
  2632 ;;		_returnHome
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text3
  2637   003874                     __ptext3:
  2638                           	callstack 0
  2639   003874                     _reverseStraight:
  2640                           	callstack 25
  2641   003874                     
  2642                           ;return_func.c: 80: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 81: {;return_func.c: 83:     unsigned int delayMs = 1000;
  2643   003874  0E03               	movlw	3
  2644   003876  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2645   003878  0EE8               	movlw	232
  2646   00387A  6E59               	movwf	reverseStraight@delayMs^0,c
  2647   00387C                     
  2648                           ;return_func.c: 86:     if (time_ms>6500){delayMs = 7750; }
  2649   00387C  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2650   00387E  EF4D  F01C         	goto	u4341
  2651   003882  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2652   003884  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2653   003886  E10B               	bnz	u4340
  2654   003888  0E65               	movlw	101
  2655   00388A  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2656   00388C  0E19               	movlw	25
  2657   00388E  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2658   003890  A0D8               	btfss	status,0,c
  2659   003892  EF4D  F01C         	goto	u4341
  2660   003896  EF4F  F01C         	goto	u4340
  2661   00389A                     u4341:
  2662   00389A  EF55  F01C         	goto	l5000
  2663   00389E                     u4340:
  2664   00389E  0E1E               	movlw	30
  2665   0038A0  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2666   0038A2  0E46               	movlw	70
  2667   0038A4  6E59               	movwf	reverseStraight@delayMs^0,c
  2668   0038A6  EF92  F01C         	goto	l5010
  2669   0038AA                     l5000:
  2670   0038AA  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2671   0038AC  EF64  F01C         	goto	u4351
  2672   0038B0  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2673   0038B2  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2674   0038B4  E10B               	bnz	u4350
  2675   0038B6  0EA1               	movlw	161
  2676   0038B8  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2677   0038BA  0E0F               	movlw	15
  2678   0038BC  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2679   0038BE  A0D8               	btfss	status,0,c
  2680   0038C0  EF64  F01C         	goto	u4351
  2681   0038C4  EF66  F01C         	goto	u4350
  2682   0038C8                     u4351:
  2683   0038C8  EF7D  F01C         	goto	l5006
  2684   0038CC                     u4350:
  2685   0038CC  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2686   0038CE  EF77  F01C         	goto	u4360
  2687   0038D2  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2688   0038D4  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2689   0038D6  E109               	bnz	u4361
  2690   0038D8  0E64               	movlw	100
  2691   0038DA  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2692   0038DC  0E19               	movlw	25
  2693   0038DE  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2694   0038E0  B0D8               	btfsc	status,0,c
  2695   0038E2  EF75  F01C         	goto	u4361
  2696   0038E6  EF77  F01C         	goto	u4360
  2697   0038EA                     u4361:
  2698   0038EA  EF7D  F01C         	goto	l5006
  2699   0038EE                     u4360:
  2700   0038EE  0E15               	movlw	21
  2701   0038F0  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2702   0038F2  0E7C               	movlw	124
  2703   0038F4  6E59               	movwf	reverseStraight@delayMs^0,c
  2704   0038F6  EF92  F01C         	goto	l5010
  2705   0038FA                     l5006:
  2706   0038FA  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2707   0038FC  EF8E  F01C         	goto	u4370
  2708   003900  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2709   003902  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2710   003904  E109               	bnz	u4371
  2711   003906  0EA0               	movlw	160
  2712   003908  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2713   00390A  0E0F               	movlw	15
  2714   00390C  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2715   00390E  B0D8               	btfsc	status,0,c
  2716   003910  EF8C  F01C         	goto	u4371
  2717   003914  EF8E  F01C         	goto	u4370
  2718   003918                     u4371:
  2719   003918  EF92  F01C         	goto	l5010
  2720   00391C                     u4370:
  2721   00391C  0E0A               	movlw	10
  2722   00391E  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2723   003920  0EBE               	movlw	190
  2724   003922  6E59               	movwf	reverseStraight@delayMs^0,c
  2725   003924                     l5010:
  2726                           
  2727                           ;return_func.c: 90:     fullSpeedAhead(&motorL,&motorR);
  2728   003924  0EE7               	movlw	low _motorL
  2729   003926  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2730   003928  0EDE               	movlw	low _motorR
  2731   00392A  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2732   00392C  EC25  F01D         	call	_fullSpeedAhead	;wreg free
  2733   003930                     
  2734                           ;return_func.c: 91:     customDelayMs(delayMs);
  2735   003930  C059  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2736   003934  C05A  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2737   003938  EC97  F024         	call	_customDelayMs	;wreg free
  2738   00393C                     
  2739                           ;return_func.c: 92:     stop(&motorL,&motorR);
  2740   00393C  0EE7               	movlw	low _motorL
  2741   00393E  6E14               	movwf	stop@mL^0,c
  2742   003940  0EDE               	movlw	low _motorR
  2743   003942  6E15               	movwf	stop@mR^0,c
  2744   003944  EC27  F020         	call	_stop	;wreg free
  2745   003948                     
  2746                           ;return_func.c: 93:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2747   003948  0E19               	movlw	25
  2748   00394A  6E58               	movwf	(??_reverseStraight+1)^0,c
  2749   00394C  0E5A               	movlw	90
  2750   00394E  6E57               	movwf	??_reverseStraight^0,c
  2751   003950  0EB2               	movlw	178
  2752   003952                     u5407:
  2753   003952  2EE8               	decfsz	wreg,f,c
  2754   003954  D7FE               	bra	u5407
  2755   003956  2E57               	decfsz	??_reverseStraight^0,f,c
  2756   003958  D7FC               	bra	u5407
  2757   00395A  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  2758   00395C  D7FA               	bra	u5407
  2759   00395E  0012               	return		;funcret
  2760   003960                     __end_of_reverseStraight:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _fullSpeedAhead *****************
  2764 ;; Defined at:
  2765 ;;		line 144 in file "dc_motor.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  2768 ;;		 -> motorL(9), 
  2769 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  2770 ;;		 -> motorR(9), 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  power           2   78[COMRAM] int 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2785 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2786 ;;Total ram usage:        5 bytes
  2787 ;; Hardware stack levels used: 1
  2788 ;; Hardware stack levels required when called: 3
  2789 ;; This function calls:
  2790 ;;		___flmul
  2791 ;;		___fltol
  2792 ;;		___xxtofl
  2793 ;;		_setMotorPWM
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;;		_reverseStraight
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text4
  2801   003A4A                     __ptext4:
  2802                           	callstack 0
  2803   003A4A                     _fullSpeedAhead:
  2804                           	callstack 25
  2805   003A4A                     
  2806                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2807   003A4A  504C               	movf	fullSpeedAhead@mL^0,w,c
  2808   003A4C  6ED9               	movwf	fsr2l,c
  2809   003A4E  6ADA               	clrf	fsr2h,c
  2810   003A50  0E01               	movlw	1
  2811   003A52  26D9               	addwf	fsr2l,f,c
  2812   003A54  0E01               	movlw	1
  2813   003A56  6EDF               	movwf	indf2,c
  2814                           
  2815                           ;dc_motor.c: 148:     mR->direction = 1;
  2816   003A58  504D               	movf	fullSpeedAhead@mR^0,w,c
  2817   003A5A  6ED9               	movwf	fsr2l,c
  2818   003A5C  6ADA               	clrf	fsr2h,c
  2819   003A5E  0E01               	movlw	1
  2820   003A60  26D9               	addwf	fsr2l,f,c
  2821   003A62  0E01               	movlw	1
  2822   003A64  6EDF               	movwf	indf2,c
  2823   003A66                     
  2824                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2825   003A66  0E00               	movlw	0
  2826   003A68  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
  2827   003A6A  0E00               	movlw	0
  2828   003A6C  6E4F               	movwf	fullSpeedAhead@power^0,c
  2829   003A6E                     l4494:
  2830                           
  2831                           ;dc_motor.c: 151:         mL->power = power;
  2832   003A6E  504C               	movf	fullSpeedAhead@mL^0,w,c
  2833   003A70  6ED9               	movwf	fsr2l,c
  2834   003A72  6ADA               	clrf	fsr2h,c
  2835   003A74  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
  2836   003A78                     
  2837                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2838   003A78  504D               	movf	fullSpeedAhead@mR^0,w,c
  2839   003A7A  6ED9               	movwf	fsr2l,c
  2840   003A7C  6ADA               	clrf	fsr2h,c
  2841   003A7E  0E66               	movlw	102
  2842   003A80  6E14               	movwf	___flmul@a^0,c
  2843   003A82  0E66               	movlw	102
  2844   003A84  6E15               	movwf	(___flmul@a+1)^0,c
  2845   003A86  0E86               	movlw	134
  2846   003A88  6E16               	movwf	(___flmul@a+2)^0,c
  2847   003A8A  0E3F               	movlw	63
  2848   003A8C  6E17               	movwf	(___flmul@a+3)^0,c
  2849   003A8E  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2850   003A92  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2851   003A96  0E00               	movlw	0
  2852   003A98  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2853   003A9A  0EFF               	movlw	-1
  2854   003A9C  6E04               	movwf	(___xxtofl@val+2)^0,c
  2855   003A9E  6E05               	movwf	(___xxtofl@val+3)^0,c
  2856   003AA0  0E01               	movlw	1
  2857   003AA2  EC65  F016         	call	___xxtofl
  2858   003AA6  C002  F010         	movff	?___xxtofl,___flmul@b
  2859   003AAA  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2860   003AAE  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2861   003AB2  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2862   003AB6  EC02  F010         	call	___flmul	;wreg free
  2863   003ABA  C010  F042         	movff	?___flmul,___fltol@f1
  2864   003ABE  C011  F043         	movff	?___flmul+1,___fltol@f1+1
  2865   003AC2  C012  F044         	movff	?___flmul+2,___fltol@f1+2
  2866   003AC6  C013  F045         	movff	?___flmul+3,___fltol@f1+3
  2867   003ACA  EC35  F01B         	call	___fltol	;wreg free
  2868   003ACE  5042               	movf	?___fltol^0,w,c
  2869   003AD0  6EDF               	movwf	indf2,c
  2870   003AD2                     
  2871                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2872   003AD2  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2873   003AD6  EC74  F019         	call	_setMotorPWM	;wreg free
  2874   003ADA                     
  2875                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2876   003ADA  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2877   003ADE  EC74  F019         	call	_setMotorPWM	;wreg free
  2878   003AE2                     
  2879                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2880   003AE2  0E0B               	movlw	11
  2881   003AE4  6E4E               	movwf	??_fullSpeedAhead^0,c
  2882   003AE6  0E62               	movlw	98
  2883   003AE8                     u5417:
  2884   003AE8  2EE8               	decfsz	wreg,f,c
  2885   003AEA  D7FE               	bra	u5417
  2886   003AEC  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
  2887   003AEE  D7FC               	bra	u5417
  2888   003AF0  D000               	nop2	
  2889   003AF2                     
  2890                           ;dc_motor.c: 160:     }
  2891   003AF2  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
  2892   003AF4  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
  2893   003AF6  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2894   003AF8  EF87  F01D         	goto	u3821
  2895   003AFC  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
  2896   003AFE  E109               	bnz	u3820
  2897   003B00  0E33               	movlw	51
  2898   003B02  5C4F               	subwf	fullSpeedAhead@power^0,w,c
  2899   003B04  A0D8               	btfss	status,0,c
  2900   003B06  EF87  F01D         	goto	u3821
  2901   003B0A  EF89  F01D         	goto	u3820
  2902   003B0E                     u3821:
  2903   003B0E  EF37  F01D         	goto	l4494
  2904   003B12                     u3820:
  2905   003B12  0012               	return		;funcret
  2906   003B14                     __end_of_fullSpeedAhead:
  2907                           	callstack 0
  2908                           
  2909 ;; *************** function _moveWhite *****************
  2910 ;; Defined at:
  2911 ;;		line 331 in file "dc_motor.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2914 ;;		 -> motorL(9), 
  2915 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2916 ;;		 -> motorR(9), 
  2917 ;;  factor          2   32[COMRAM] unsigned int 
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2933 ;;Total ram usage:        6 bytes
  2934 ;; Hardware stack levels used: 1
  2935 ;; Hardware stack levels required when called: 5
  2936 ;; This function calls:
  2937 ;;		_backHalf
  2938 ;;		_turn180
  2939 ;; This function is called by:
  2940 ;;		_returnHome
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text5
  2945   00475E                     __ptext5:
  2946                           	callstack 0
  2947   00475E                     _moveWhite:
  2948                           	callstack 24
  2949   00475E                     
  2950                           ;dc_motor.c: 331: void moveWhite(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 332: {;dc_motor.c: 334:     backHalf(mL,mR);
  2951   00475E  C01F  F019         	movff	moveWhite@mL,backHalf@mL
  2952   004762  C020  F01A         	movff	moveWhite@mR,backHalf@mR
  2953   004766  EC33  F025         	call	_backHalf	;wreg free
  2954   00476A                     
  2955                           ;dc_motor.c: 335:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2956   00476A  0E29               	movlw	41
  2957   00476C  6E24               	movwf	(??_moveWhite+1)^0,c
  2958   00476E  0E96               	movlw	150
  2959   004770  6E23               	movwf	??_moveWhite^0,c
  2960   004772  0E7F               	movlw	127
  2961   004774                     u5427:
  2962   004774  2EE8               	decfsz	wreg,f,c
  2963   004776  D7FE               	bra	u5427
  2964   004778  2E23               	decfsz	??_moveWhite^0,f,c
  2965   00477A  D7FC               	bra	u5427
  2966   00477C  2E24               	decfsz	(??_moveWhite+1)^0,f,c
  2967   00477E  D7FA               	bra	u5427
  2968   004780  0000               	nop	
  2969   004782                     
  2970                           ;dc_motor.c: 336:     turn180(mL,mR,factor);
  2971   004782  C01F  F019         	movff	moveWhite@mL,turn180@mL
  2972   004786  C020  F01A         	movff	moveWhite@mR,turn180@mR
  2973   00478A  C021  F01B         	movff	moveWhite@factor,turn180@factor
  2974   00478E  C022  F01C         	movff	moveWhite@factor+1,turn180@factor+1
  2975   004792  EC2C  F023         	call	_turn180	;wreg free
  2976   004796  0012               	return		;funcret
  2977   004798                     __end_of_moveWhite:
  2978                           	callstack 0
  2979                           
  2980 ;; *************** function _reading_hue *****************
  2981 ;; Defined at:
  2982 ;;		line 91 in file "color.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  cCurr           1   79[COMRAM] PTR struct colors
  2985 ;;		 -> colorCurrent(10), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  led_state      50    0        unsigned char [50]
  2988 ;;  hue             2   83[COMRAM] unsigned int 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  2   79[COMRAM] unsigned int 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3001 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3002 ;;Total ram usage:        6 bytes
  3003 ;; Hardware stack levels used: 1
  3004 ;; Hardware stack levels required when called: 4
  3005 ;; This function calls:
  3006 ;;		_color_read_Blue
  3007 ;;		_color_read_Clear
  3008 ;;		_color_read_Green
  3009 ;;		_color_read_Red
  3010 ;;		_convert_rgb2hue
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text6
  3017   003960                     __ptext6:
  3018                           	callstack 0
  3019   003960                     _reading_hue:
  3020                           	callstack 26
  3021   003960                     
  3022                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3023   003960  807F               	bsf	127,0,c	;volatile
  3024                           
  3025                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3026   003962  9E7D               	bcf	125,7,c	;volatile
  3027                           
  3028                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3029   003964  9679               	bcf	121,3,c	;volatile
  3030   003966                     
  3031                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3032   003966  0E29               	movlw	41
  3033   003968  6E53               	movwf	(??_reading_hue+1)^0,c
  3034   00396A  0E96               	movlw	150
  3035   00396C  6E52               	movwf	??_reading_hue^0,c
  3036   00396E  0E7F               	movlw	127
  3037   003970                     u5437:
  3038   003970  2EE8               	decfsz	wreg,f,c
  3039   003972  D7FE               	bra	u5437
  3040   003974  2E52               	decfsz	??_reading_hue^0,f,c
  3041   003976  D7FC               	bra	u5437
  3042   003978  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3043   00397A  D7FA               	bra	u5437
  3044   00397C  0000               	nop	
  3045   00397E                     
  3046                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3047   00397E  ECC3  F021         	call	_color_read_Red	;wreg free
  3048   003982  5050               	movf	reading_hue@cCurr^0,w,c
  3049   003984  6ED9               	movwf	fsr2l,c
  3050   003986  6ADA               	clrf	fsr2h,c
  3051   003988  C006  FFDE         	movff	?_color_read_Red,postinc2
  3052   00398C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3053   003990                     
  3054                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3055   003990  907F               	bcf	127,0,c	;volatile
  3056   003992                     
  3057                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3058   003992  8E7D               	bsf	125,7,c	;volatile
  3059   003994                     
  3060                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3061   003994  9679               	bcf	121,3,c	;volatile
  3062   003996                     
  3063                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3064   003996  0E29               	movlw	41
  3065   003998  6E53               	movwf	(??_reading_hue+1)^0,c
  3066   00399A  0E96               	movlw	150
  3067   00399C  6E52               	movwf	??_reading_hue^0,c
  3068   00399E  0E7F               	movlw	127
  3069   0039A0                     u5447:
  3070   0039A0  2EE8               	decfsz	wreg,f,c
  3071   0039A2  D7FE               	bra	u5447
  3072   0039A4  2E52               	decfsz	??_reading_hue^0,f,c
  3073   0039A6  D7FC               	bra	u5447
  3074   0039A8  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3075   0039AA  D7FA               	bra	u5447
  3076   0039AC  0000               	nop	
  3077                           
  3078                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3079   0039AE  ECEB  F021         	call	_color_read_Green	;wreg free
  3080   0039B2  5050               	movf	reading_hue@cCurr^0,w,c
  3081   0039B4  6ED9               	movwf	fsr2l,c
  3082   0039B6  6ADA               	clrf	fsr2h,c
  3083   0039B8  0E02               	movlw	2
  3084   0039BA  26D9               	addwf	fsr2l,f,c
  3085   0039BC  C006  FFDE         	movff	?_color_read_Green,postinc2
  3086   0039C0  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3087   0039C4                     
  3088                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3089   0039C4  907F               	bcf	127,0,c	;volatile
  3090   0039C6                     
  3091                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3092   0039C6  9E7D               	bcf	125,7,c	;volatile
  3093   0039C8                     
  3094                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3095   0039C8  8679               	bsf	121,3,c	;volatile
  3096   0039CA                     
  3097                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3098   0039CA  0E29               	movlw	41
  3099   0039CC  6E53               	movwf	(??_reading_hue+1)^0,c
  3100   0039CE  0E96               	movlw	150
  3101   0039D0  6E52               	movwf	??_reading_hue^0,c
  3102   0039D2  0E7F               	movlw	127
  3103   0039D4                     u5457:
  3104   0039D4  2EE8               	decfsz	wreg,f,c
  3105   0039D6  D7FE               	bra	u5457
  3106   0039D8  2E52               	decfsz	??_reading_hue^0,f,c
  3107   0039DA  D7FC               	bra	u5457
  3108   0039DC  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3109   0039DE  D7FA               	bra	u5457
  3110   0039E0  0000               	nop	
  3111   0039E2                     
  3112                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3113   0039E2  EC3B  F022         	call	_color_read_Blue	;wreg free
  3114   0039E6  5050               	movf	reading_hue@cCurr^0,w,c
  3115   0039E8  6ED9               	movwf	fsr2l,c
  3116   0039EA  6ADA               	clrf	fsr2h,c
  3117   0039EC  0E04               	movlw	4
  3118   0039EE  26D9               	addwf	fsr2l,f,c
  3119   0039F0  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3120   0039F4  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3121   0039F8                     
  3122                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3123   0039F8  807F               	bsf	127,0,c	;volatile
  3124   0039FA                     
  3125                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3126   0039FA  8E7D               	bsf	125,7,c	;volatile
  3127   0039FC                     
  3128                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3129   0039FC  8679               	bsf	121,3,c	;volatile
  3130                           
  3131                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3132   0039FE  0E29               	movlw	41
  3133   003A00  6E53               	movwf	(??_reading_hue+1)^0,c
  3134   003A02  0E96               	movlw	150
  3135   003A04  6E52               	movwf	??_reading_hue^0,c
  3136   003A06  0E7F               	movlw	127
  3137   003A08                     u5467:
  3138   003A08  2EE8               	decfsz	wreg,f,c
  3139   003A0A  D7FE               	bra	u5467
  3140   003A0C  2E52               	decfsz	??_reading_hue^0,f,c
  3141   003A0E  D7FC               	bra	u5467
  3142   003A10  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3143   003A12  D7FA               	bra	u5467
  3144   003A14  0000               	nop	
  3145   003A16                     
  3146                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3147   003A16  EC13  F022         	call	_color_read_Clear	;wreg free
  3148   003A1A  5050               	movf	reading_hue@cCurr^0,w,c
  3149   003A1C  6ED9               	movwf	fsr2l,c
  3150   003A1E  6ADA               	clrf	fsr2h,c
  3151   003A20  0E06               	movlw	6
  3152   003A22  26D9               	addwf	fsr2l,f,c
  3153   003A24  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3154   003A28  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3155   003A2C                     
  3156                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3157   003A2C  0ED4               	movlw	low _colorCalibration
  3158   003A2E  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  3159   003A30  0ECA               	movlw	low _colorCurrent
  3160   003A32  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  3161   003A34  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3162   003A38  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  3163   003A3C  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3164   003A40                     
  3165                           ;color.c: 127:     return hue;
  3166   003A40  C054  F050         	movff	reading_hue@hue,?_reading_hue
  3167   003A44  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  3168   003A48  0012               	return		;funcret
  3169   003A4A                     __end_of_reading_hue:
  3170                           	callstack 0
  3171                           
  3172 ;; *************** function _convert_rgb2hue *****************
  3173 ;; Defined at:
  3174 ;;		line 133 in file "color.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  cMax            1   75[COMRAM] PTR struct colors
  3177 ;;		 -> colorCalibration(10), 
  3178 ;;  cCurr           1   76[COMRAM] PTR struct colors
  3179 ;;		 -> colorCurrent(10), 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  c_char         20    0        unsigned char [20]
  3182 ;;  b               4   72[BANK0 ] float 
  3183 ;;  g               4   68[BANK0 ] float 
  3184 ;;  r               4   64[BANK0 ] float 
  3185 ;;  hue             4   60[BANK0 ] float 
  3186 ;;  max             4   56[BANK0 ] float 
  3187 ;;  diff            4   52[BANK0 ] float 
  3188 ;;  min             4   48[BANK0 ] float 
  3189 ;;  clearmax        4   28[BANK0 ] float 
  3190 ;;  clearcurrent    4   24[BANK0 ] float 
  3191 ;;  bluemax         4   20[BANK0 ] float 
  3192 ;;  bluecurrent     4   16[BANK0 ] float 
  3193 ;;  greenmax        4   12[BANK0 ] float 
  3194 ;;  greencurrent    4    8[BANK0 ] float 
  3195 ;;  redmax          4    4[BANK0 ] float 
  3196 ;;  redcurrent      4    0[BANK0 ] float 
  3197 ;;  c               4    0        float 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  2   75[COMRAM] unsigned int 
  3200 ;; Registers used:
  3201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3208 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3209 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3210 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3211 ;;Total ram usage:       80 bytes
  3212 ;; Hardware stack levels used: 1
  3213 ;; Hardware stack levels required when called: 3
  3214 ;; This function calls:
  3215 ;;		___fladd
  3216 ;;		___fldiv
  3217 ;;		___fleq
  3218 ;;		___flge
  3219 ;;		___flmul
  3220 ;;		___flsub
  3221 ;;		___fltol
  3222 ;;		___xxtofl
  3223 ;; This function is called by:
  3224 ;;		_reading_hue
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text7
  3229   000EC6                     __ptext7:
  3230                           	callstack 0
  3231   000EC6                     _convert_rgb2hue:
  3232                           	callstack 26
  3233   000EC6                     
  3234                           ;color.c: 133: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 134: {;color.c: 135:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 136:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3235   000EC6  0E00               	movlw	0
  3236   000EC8  0100               	movlb	0	; () banked
  3237   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3238   000ECC  0E00               	movlw	0
  3239   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3240   000ED0  0E00               	movlw	0
  3241   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3242   000ED4  0E00               	movlw	0
  3243   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3244   000ED8                     
  3245                           ; BSR set to: 0
  3246                           ;color.c: 138:     redcurrent = cCurr->red;
  3247   000ED8  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3248   000EDA  6ED9               	movwf	fsr2l,c
  3249   000EDC  6ADA               	clrf	fsr2h,c
  3250   000EDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3251   000EE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3252   000EE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3253   000EEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3254   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3255   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3256   000EF2  0E00               	movlw	0
  3257   000EF4  EC65  F016         	call	___xxtofl
  3258   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3259   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3260   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3261   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3262   000F08                     
  3263                           ;color.c: 139:     redmax = cMax->red;
  3264   000F08  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3265   000F0A  6ED9               	movwf	fsr2l,c
  3266   000F0C  6ADA               	clrf	fsr2h,c
  3267   000F0E  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3268   000F12  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3269   000F16  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3270   000F1A  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3271   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3272   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3273   000F22  0E00               	movlw	0
  3274   000F24  EC65  F016         	call	___xxtofl
  3275   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3276   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3277   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3278   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3279   000F38                     
  3280                           ;color.c: 140:     greencurrent = cCurr->green;
  3281   000F38  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3282   000F3A  6ED9               	movwf	fsr2l,c
  3283   000F3C  6ADA               	clrf	fsr2h,c
  3284   000F3E  0E02               	movlw	2
  3285   000F40  26D9               	addwf	fsr2l,f,c
  3286   000F42  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3287   000F46  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3288   000F4A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3289   000F4E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3290   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3291   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3292   000F56  0E00               	movlw	0
  3293   000F58  EC65  F016         	call	___xxtofl
  3294   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3295   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3296   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3297   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3298   000F6C                     
  3299                           ;color.c: 141:     greenmax = cMax->green;
  3300   000F6C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3301   000F6E  6ED9               	movwf	fsr2l,c
  3302   000F70  6ADA               	clrf	fsr2h,c
  3303   000F72  0E02               	movlw	2
  3304   000F74  26D9               	addwf	fsr2l,f,c
  3305   000F76  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3306   000F7A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3307   000F7E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3308   000F82  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3309   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3310   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3311   000F8A  0E00               	movlw	0
  3312   000F8C  EC65  F016         	call	___xxtofl
  3313   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3314   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3315   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3316   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3317   000FA0                     
  3318                           ;color.c: 142:     bluecurrent = cCurr->blue;
  3319   000FA0  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3320   000FA2  6ED9               	movwf	fsr2l,c
  3321   000FA4  6ADA               	clrf	fsr2h,c
  3322   000FA6  0E04               	movlw	4
  3323   000FA8  26D9               	addwf	fsr2l,f,c
  3324   000FAA  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3325   000FAE  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3326   000FB2  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3327   000FB6  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3328   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3329   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3330   000FBE  0E00               	movlw	0
  3331   000FC0  EC65  F016         	call	___xxtofl
  3332   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3333   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3334   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3335   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3336   000FD4                     
  3337                           ;color.c: 143:     bluemax = cMax->blue;
  3338   000FD4  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3339   000FD6  6ED9               	movwf	fsr2l,c
  3340   000FD8  6ADA               	clrf	fsr2h,c
  3341   000FDA  0E04               	movlw	4
  3342   000FDC  26D9               	addwf	fsr2l,f,c
  3343   000FDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3344   000FE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3345   000FE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3346   000FEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3347   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3348   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3349   000FF2  0E00               	movlw	0
  3350   000FF4  EC65  F016         	call	___xxtofl
  3351   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3352   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3353   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3354   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3355   001008                     
  3356                           ;color.c: 144:     clearcurrent = cCurr->clear;
  3357   001008  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3358   00100A  6ED9               	movwf	fsr2l,c
  3359   00100C  6ADA               	clrf	fsr2h,c
  3360   00100E  0E06               	movlw	6
  3361   001010  26D9               	addwf	fsr2l,f,c
  3362   001012  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3363   001016  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3364   00101A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3365   00101E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3366   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3367   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3368   001026  0E00               	movlw	0
  3369   001028  EC65  F016         	call	___xxtofl
  3370   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3371   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3372   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3373   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3374   00103C                     
  3375                           ;color.c: 145:     clearmax = cMax->clear;
  3376   00103C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3377   00103E  6ED9               	movwf	fsr2l,c
  3378   001040  6ADA               	clrf	fsr2h,c
  3379   001042  0E06               	movlw	6
  3380   001044  26D9               	addwf	fsr2l,f,c
  3381   001046  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3382   00104A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3383   00104E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3384   001052  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3385   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3386   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3387   00105A  0E00               	movlw	0
  3388   00105C  EC65  F016         	call	___xxtofl
  3389   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3390   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3391   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3392   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3393   001070  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3394   001074  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3395   001078  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3396   00107C  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3397   001080  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3398   001084  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3399   001088  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3400   00108C  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3401   001090  EC17  F012         	call	___fldiv	;wreg free
  3402   001094                     
  3403                           ;color.c: 148:     char c_char[20];;color.c: 154:     r = redcurrent/redmax;
  3404   001094  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3405   001098  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3406   00109C  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3407   0010A0  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3408   0010A4  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  3409   0010A8  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3410   0010AC  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3411   0010B0  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3412   0010B4  EC17  F012         	call	___fldiv	;wreg free
  3413   0010B8  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3414   0010BC  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3415   0010C0  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3416   0010C4  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3417   0010C8                     
  3418                           ;color.c: 155:     g = greencurrent/greenmax;
  3419   0010C8  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3420   0010CC  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3421   0010D0  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3422   0010D4  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3423   0010D8  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3424   0010DC  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3425   0010E0  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3426   0010E4  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3427   0010E8  EC17  F012         	call	___fldiv	;wreg free
  3428   0010EC  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3429   0010F0  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3430   0010F4  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3431   0010F8  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3432   0010FC                     
  3433                           ;color.c: 156:     b = bluecurrent/bluemax;
  3434   0010FC  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3435   001100  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3436   001104  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3437   001108  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3438   00110C  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3439   001110  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3440   001114  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3441   001118  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3442   00111C  EC17  F012         	call	___fldiv	;wreg free
  3443   001120  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3444   001124  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3445   001128  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3446   00112C  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3447   001130                     
  3448                           ;color.c: 158:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3449   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3450   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3451   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3452   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3453   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3454   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3455   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3456   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3457   001150  ECB8  F01B         	call	___flge	;wreg free
  3458   001154  A0D8               	btfss	status,0,c
  3459   001156  EFAF  F008         	goto	u4151
  3460   00115A  EFB1  F008         	goto	u4150
  3461   00115E                     u4151:
  3462   00115E  EFE6  F008         	goto	l4844
  3463   001162                     u4150:
  3464   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3465   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3466   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3467   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3468   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3469   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3470   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3471   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3472   001182  ECB8  F01B         	call	___flge	;wreg free
  3473   001186  A0D8               	btfss	status,0,c
  3474   001188  EFC8  F008         	goto	u4161
  3475   00118C  EFCA  F008         	goto	u4160
  3476   001190                     u4161:
  3477   001190  EFD4  F008         	goto	l99
  3478   001194                     u4160:
  3479   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$367
  3480   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$367+1
  3481   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$367+2
  3482   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$367+3
  3483   0011A4  EFDC  F008         	goto	l101
  3484   0011A8                     l99:
  3485   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$367
  3486   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$367+1
  3487   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$367+2
  3488   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$367+3
  3489   0011B8                     l101:
  3490   0011B8  C080  F090         	movff	_convert_rgb2hue$367,convert_rgb2hue@min
  3491   0011BC  C081  F091         	movff	_convert_rgb2hue$367+1,convert_rgb2hue@min+1
  3492   0011C0  C082  F092         	movff	_convert_rgb2hue$367+2,convert_rgb2hue@min+2
  3493   0011C4  C083  F093         	movff	_convert_rgb2hue$367+3,convert_rgb2hue@min+3
  3494   0011C8  EF19  F009         	goto	l4848
  3495   0011CC                     l4844:
  3496   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3497   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3498   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3499   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3500   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3501   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3502   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3503   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3504   0011EC  ECB8  F01B         	call	___flge	;wreg free
  3505   0011F0  A0D8               	btfss	status,0,c
  3506   0011F2  EFFD  F008         	goto	u4171
  3507   0011F6  EFFF  F008         	goto	u4170
  3508   0011FA                     u4171:
  3509   0011FA  EF09  F009         	goto	l103
  3510   0011FE                     u4170:
  3511   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$368
  3512   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$368+1
  3513   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$368+2
  3514   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$368+3
  3515   00120E  EF11  F009         	goto	l105
  3516   001212                     l103:
  3517   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$368
  3518   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$368+1
  3519   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$368+2
  3520   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$368+3
  3521   001222                     l105:
  3522   001222  C084  F090         	movff	_convert_rgb2hue$368,convert_rgb2hue@min
  3523   001226  C085  F091         	movff	_convert_rgb2hue$368+1,convert_rgb2hue@min+1
  3524   00122A  C086  F092         	movff	_convert_rgb2hue$368+2,convert_rgb2hue@min+2
  3525   00122E  C087  F093         	movff	_convert_rgb2hue$368+3,convert_rgb2hue@min+3
  3526   001232                     l4848:
  3527                           
  3528                           ;color.c: 159:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3529   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3530   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3531   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3532   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3533   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3534   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3535   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3536   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3537   001252  ECB8  F01B         	call	___flge	;wreg free
  3538   001256  A0D8               	btfss	status,0,c
  3539   001258  EF30  F009         	goto	u4181
  3540   00125C  EF32  F009         	goto	u4180
  3541   001260                     u4181:
  3542   001260  EF67  F009         	goto	l4854
  3543   001264                     u4180:
  3544   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3545   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3546   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3547   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3548   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3549   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3550   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3551   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3552   001284  ECB8  F01B         	call	___flge	;wreg free
  3553   001288  A0D8               	btfss	status,0,c
  3554   00128A  EF49  F009         	goto	u4191
  3555   00128E  EF4B  F009         	goto	u4190
  3556   001292                     u4191:
  3557   001292  EF55  F009         	goto	l111
  3558   001296                     u4190:
  3559   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$369
  3560   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$369+1
  3561   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$369+2
  3562   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$369+3
  3563   0012A6  EF5D  F009         	goto	l113
  3564   0012AA                     l111:
  3565   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$369
  3566   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$369+1
  3567   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$369+2
  3568   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$369+3
  3569   0012BA                     l113:
  3570   0012BA  C088  F098         	movff	_convert_rgb2hue$369,convert_rgb2hue@max
  3571   0012BE  C089  F099         	movff	_convert_rgb2hue$369+1,convert_rgb2hue@max+1
  3572   0012C2  C08A  F09A         	movff	_convert_rgb2hue$369+2,convert_rgb2hue@max+2
  3573   0012C6  C08B  F09B         	movff	_convert_rgb2hue$369+3,convert_rgb2hue@max+3
  3574   0012CA  EF9A  F009         	goto	l4858
  3575   0012CE                     l4854:
  3576   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3577   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3578   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3579   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3580   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3581   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3582   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3583   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3584   0012EE  ECB8  F01B         	call	___flge	;wreg free
  3585   0012F2  A0D8               	btfss	status,0,c
  3586   0012F4  EF7E  F009         	goto	u4201
  3587   0012F8  EF80  F009         	goto	u4200
  3588   0012FC                     u4201:
  3589   0012FC  EF8A  F009         	goto	l115
  3590   001300                     u4200:
  3591   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$370
  3592   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$370+1
  3593   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$370+2
  3594   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$370+3
  3595   001310  EF92  F009         	goto	l117
  3596   001314                     l115:
  3597   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$370
  3598   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$370+1
  3599   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$370+2
  3600   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$370+3
  3601   001324                     l117:
  3602   001324  C08C  F098         	movff	_convert_rgb2hue$370,convert_rgb2hue@max
  3603   001328  C08D  F099         	movff	_convert_rgb2hue$370+1,convert_rgb2hue@max+1
  3604   00132C  C08E  F09A         	movff	_convert_rgb2hue$370+2,convert_rgb2hue@max+2
  3605   001330  C08F  F09B         	movff	_convert_rgb2hue$370+3,convert_rgb2hue@max+3
  3606   001334                     l4858:
  3607                           
  3608                           ;color.c: 160:     diff = max - min;
  3609   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3610   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3611   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3612   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3613   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3614   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3615   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3616   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3617   001354  EC63  F022         	call	___flsub	;wreg free
  3618   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3619   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3620   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3621   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3622                           
  3623                           ;color.c: 161:     if (max == min) {
  3624   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3625   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3626   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3627   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3628   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3629   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3630   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3631   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3632   001388  EC9B  F01E         	call	___fleq	;wreg free
  3633   00138C  A0D8               	btfss	status,0,c
  3634   00138E  EFCB  F009         	goto	u4211
  3635   001392  EFCD  F009         	goto	u4210
  3636   001396                     u4211:
  3637   001396  EFD8  F009         	goto	l4862
  3638   00139A                     u4210:
  3639   00139A                     
  3640                           ;color.c: 162:         hue = 0;
  3641   00139A  0E00               	movlw	0
  3642   00139C  0100               	movlb	0	; () banked
  3643   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3644   0013A0  0E00               	movlw	0
  3645   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3646   0013A4  0E00               	movlw	0
  3647   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3648   0013A8  0E00               	movlw	0
  3649   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3650                           
  3651                           ;color.c: 163:     } else if (max == r){
  3652   0013AC  EFE1  F00A         	goto	l4874
  3653   0013B0                     l4862:
  3654   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3655   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3656   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3657   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3658   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3659   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3660   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3661   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3662   0013D0  EC9B  F01E         	call	___fleq	;wreg free
  3663   0013D4  A0D8               	btfss	status,0,c
  3664   0013D6  EFEF  F009         	goto	u4221
  3665   0013DA  EFF1  F009         	goto	u4220
  3666   0013DE                     u4221:
  3667   0013DE  EF1F  F00A         	goto	l4866
  3668   0013E2                     u4220:
  3669   0013E2                     
  3670                           ;color.c: 164:         hue = (b - g) / diff;
  3671   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3672   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3673   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3674   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3675   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3676   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3677   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3678   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3679   001402  EC63  F022         	call	___flsub	;wreg free
  3680   001406  C012  F029         	movff	?___flsub,___fldiv@b
  3681   00140A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3682   00140E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3683   001412  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3684   001416  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3685   00141A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3686   00141E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3687   001422  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3688   001426  EC17  F012         	call	___fldiv	;wreg free
  3689   00142A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3690   00142E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3691   001432  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3692   001436  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3693                           
  3694                           ;color.c: 165:     } else if (max == g){
  3695   00143A  EFE1  F00A         	goto	l4874
  3696   00143E                     l4866:
  3697   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3698   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3699   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3700   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3701   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3702   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3703   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3704   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3705   00145E  EC9B  F01E         	call	___fleq	;wreg free
  3706   001462  A0D8               	btfss	status,0,c
  3707   001464  EF36  F00A         	goto	u4231
  3708   001468  EF38  F00A         	goto	u4230
  3709   00146C                     u4231:
  3710   00146C  EF80  F00A         	goto	l4870
  3711   001470                     u4230:
  3712   001470                     
  3713                           ;color.c: 166:         hue = (b - r) / diff;
  3714   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3715   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3716   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3717   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3718   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3719   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3720   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3721   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3722   001490  EC63  F022         	call	___flsub	;wreg free
  3723   001494  C012  F029         	movff	?___flsub,___fldiv@b
  3724   001498  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3725   00149C  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3726   0014A0  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3727   0014A4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3728   0014A8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3729   0014AC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3730   0014B0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3731   0014B4  EC17  F012         	call	___fldiv	;wreg free
  3732   0014B8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3733   0014BC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3734   0014C0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3735   0014C4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3736                           
  3737                           ;color.c: 167:         hue = hue + 2;
  3738   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3739   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3740   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3741   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3742   0014D8  0E00               	movlw	0
  3743   0014DA  6E06               	movwf	___fladd@a^0,c
  3744   0014DC  0E00               	movlw	0
  3745   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3746   0014E0  0E00               	movlw	0
  3747   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3748   0014E4  0E40               	movlw	64
  3749   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3750   0014E8  ECA2  F00D         	call	___fladd	;wreg free
  3751   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3752   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3753   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3754   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3755                           
  3756                           ;color.c: 168:     } else if (max == b){
  3757   0014FC  EFE1  F00A         	goto	l4874
  3758   001500                     l4870:
  3759   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3760   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3761   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3762   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3763   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3764   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3765   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3766   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3767   001520  EC9B  F01E         	call	___fleq	;wreg free
  3768   001524  A0D8               	btfss	status,0,c
  3769   001526  EF97  F00A         	goto	u4241
  3770   00152A  EF99  F00A         	goto	u4240
  3771   00152E                     u4241:
  3772   00152E  EFE1  F00A         	goto	l121
  3773   001532                     u4240:
  3774   001532                     
  3775                           ;color.c: 169:         hue = (r - g) / diff;
  3776   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3777   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3778   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3779   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3780   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3781   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3782   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3783   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3784   001552  EC63  F022         	call	___flsub	;wreg free
  3785   001556  C012  F029         	movff	?___flsub,___fldiv@b
  3786   00155A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3787   00155E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3788   001562  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3789   001566  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3790   00156A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3791   00156E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3792   001572  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3793   001576  EC17  F012         	call	___fldiv	;wreg free
  3794   00157A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3795   00157E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3796   001582  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3797   001586  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3798                           
  3799                           ;color.c: 170:         hue = hue + 4;
  3800   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3801   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3802   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3803   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3804   00159A  0E00               	movlw	0
  3805   00159C  6E06               	movwf	___fladd@a^0,c
  3806   00159E  0E00               	movlw	0
  3807   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3808   0015A2  0E80               	movlw	128
  3809   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3810   0015A6  0E40               	movlw	64
  3811   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3812   0015AA  ECA2  F00D         	call	___fladd	;wreg free
  3813   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3814   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3815   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3816   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3817   0015BE  EFE1  F00A         	goto	l4874
  3818   0015C2                     l121:
  3819   0015C2                     l4874:
  3820                           
  3821                           ;color.c: 173:     hue = hue * 60;
  3822   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3823   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3824   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3825   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3826   0015D2  0E00               	movlw	0
  3827   0015D4  6E14               	movwf	___flmul@a^0,c
  3828   0015D6  0E00               	movlw	0
  3829   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3830   0015DA  0E70               	movlw	112
  3831   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3832   0015DE  0E42               	movlw	66
  3833   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3834   0015E2  EC02  F010         	call	___flmul	;wreg free
  3835   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3836   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3837   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3838   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3839   0015F6                     
  3840                           ;color.c: 174:     if (hue < 0) {
  3841   0015F6  0100               	movlb	0	; () banked
  3842   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3843   0015FA  EF03  F00B         	goto	u4250
  3844   0015FE  EF01  F00B         	goto	u4251
  3845   001602                     u4251:
  3846   001602  EF1D  F00B         	goto	l125
  3847   001606                     u4250:
  3848   001606                     
  3849                           ; BSR set to: 0
  3850                           ;color.c: 175:         hue = hue + 360;
  3851   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3852   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3853   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3854   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3855   001616  0E00               	movlw	0
  3856   001618  6E06               	movwf	___fladd@a^0,c
  3857   00161A  0E00               	movlw	0
  3858   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3859   00161E  0EB4               	movlw	180
  3860   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3861   001622  0E43               	movlw	67
  3862   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3863   001626  ECA2  F00D         	call	___fladd	;wreg free
  3864   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3865   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3866   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3867   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3868   00163A                     l125:
  3869                           
  3870                           ;color.c: 178:     return (unsigned int)hue;
  3871   00163A  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  3872   00163E  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3873   001642  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3874   001646  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3875   00164A  EC35  F01B         	call	___fltol	;wreg free
  3876   00164E  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  3877   001652  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  3878   001656  0012               	return		;funcret
  3879   001658                     __end_of_convert_rgb2hue:
  3880                           	callstack 0
  3881                           
  3882 ;; *************** function ___xxtofl *****************
  3883 ;; Defined at:
  3884 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;  sign            1    wreg     unsigned char 
  3887 ;;  val             4    1[COMRAM] long 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  sign            1    9[COMRAM] unsigned char 
  3890 ;;  arg             4   11[COMRAM] unsigned long 
  3891 ;;  exp             1   10[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  4    1[COMRAM] unsigned char 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3902 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3903 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3904 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3905 ;;Total ram usage:       14 bytes
  3906 ;; Hardware stack levels used: 1
  3907 ;; Hardware stack levels required when called: 1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_convert_rgb2hue
  3912 ;;		_main
  3913 ;;		_fullSpeedAhead
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text8
  3918   002CCA                     __ptext8:
  3919                           	callstack 0
  3920   002CCA                     ___xxtofl:
  3921                           	callstack 26
  3922                           
  3923                           ;incstack = 0
  3924                           ;___xxtofl@sign stored from wreg
  3925   002CCA  6E0A               	movwf	___xxtofl@sign^0,c
  3926   002CCC  500A               	movf	___xxtofl@sign^0,w,c
  3927   002CCE  B4D8               	btfsc	status,2,c
  3928   002CD0  EF6C  F016         	goto	u3691
  3929   002CD4  EF6E  F016         	goto	u3690
  3930   002CD8                     u3691:
  3931   002CD8  EF90  F016         	goto	l1465
  3932   002CDC                     u3690:
  3933   002CDC  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3934   002CDE  EF75  F016         	goto	u3700
  3935   002CE2  EF73  F016         	goto	u3701
  3936   002CE6                     u3701:
  3937   002CE6  EF90  F016         	goto	l1465
  3938   002CEA                     u3700:
  3939   002CEA  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3940   002CEE  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3941   002CF2  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3942   002CF6  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3943   002CFA  1E06               	comf	??___xxtofl^0,f,c
  3944   002CFC  1E07               	comf	(??___xxtofl+1)^0,f,c
  3945   002CFE  1E08               	comf	(??___xxtofl+2)^0,f,c
  3946   002D00  1E09               	comf	(??___xxtofl+3)^0,f,c
  3947   002D02  2A06               	incf	??___xxtofl^0,f,c
  3948   002D04  0E00               	movlw	0
  3949   002D06  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3950   002D08  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3951   002D0A  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3952   002D0C  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3953   002D10  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3954   002D14  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3955   002D18  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3956   002D1C  EF98  F016         	goto	l4406
  3957   002D20                     l1465:
  3958   002D20  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3959   002D24  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3960   002D28  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3961   002D2C  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3962   002D30                     l4406:
  3963   002D30  5002               	movf	___xxtofl@val^0,w,c
  3964   002D32  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3965   002D34  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3966   002D36  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3967   002D38  A4D8               	btfss	status,2,c
  3968   002D3A  EFA1  F016         	goto	u3711
  3969   002D3E  EFA3  F016         	goto	u3710
  3970   002D42                     u3711:
  3971   002D42  EFAD  F016         	goto	l4412
  3972   002D46                     u3710:
  3973   002D46  0E00               	movlw	0
  3974   002D48  6E02               	movwf	?___xxtofl^0,c
  3975   002D4A  0E00               	movlw	0
  3976   002D4C  6E03               	movwf	(?___xxtofl+1)^0,c
  3977   002D4E  0E00               	movlw	0
  3978   002D50  6E04               	movwf	(?___xxtofl+2)^0,c
  3979   002D52  0E00               	movlw	0
  3980   002D54  6E05               	movwf	(?___xxtofl+3)^0,c
  3981   002D56  EF3E  F017         	goto	l1468
  3982   002D5A                     l4412:
  3983   002D5A  0E96               	movlw	150
  3984   002D5C  6E0B               	movwf	___xxtofl@exp^0,c
  3985   002D5E  EFB7  F016         	goto	l4416
  3986   002D62                     l4414:
  3987   002D62  2A0B               	incf	___xxtofl@exp^0,f,c
  3988   002D64  90D8               	bcf	status,0,c
  3989   002D66  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3990   002D68  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3991   002D6A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3992   002D6C  320C               	rrcf	___xxtofl@arg^0,f,c
  3993   002D6E                     l4416:
  3994   002D6E  0E00               	movlw	0
  3995   002D70  140C               	andwf	___xxtofl@arg^0,w,c
  3996   002D72  6E06               	movwf	??___xxtofl^0,c
  3997   002D74  0E00               	movlw	0
  3998   002D76  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3999   002D78  6E07               	movwf	(??___xxtofl+1)^0,c
  4000   002D7A  0E00               	movlw	0
  4001   002D7C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4002   002D7E  6E08               	movwf	(??___xxtofl+2)^0,c
  4003   002D80  0EFE               	movlw	254
  4004   002D82  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4005   002D84  6E09               	movwf	(??___xxtofl+3)^0,c
  4006   002D86  5006               	movf	??___xxtofl^0,w,c
  4007   002D88  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4008   002D8A  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4009   002D8C  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4010   002D8E  A4D8               	btfss	status,2,c
  4011   002D90  EFCC  F016         	goto	u3721
  4012   002D94  EFCE  F016         	goto	u3720
  4013   002D98                     u3721:
  4014   002D98  EFB1  F016         	goto	l4414
  4015   002D9C                     u3720:
  4016   002D9C  EFDC  F016         	goto	l1472
  4017   002DA0                     l4418:
  4018   002DA0  2A0B               	incf	___xxtofl@exp^0,f,c
  4019   002DA2  0E01               	movlw	1
  4020   002DA4  260C               	addwf	___xxtofl@arg^0,f,c
  4021   002DA6  0E00               	movlw	0
  4022   002DA8  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4023   002DAA  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4024   002DAC  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4025   002DAE  90D8               	bcf	status,0,c
  4026   002DB0  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4027   002DB2  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4028   002DB4  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4029   002DB6  320C               	rrcf	___xxtofl@arg^0,f,c
  4030   002DB8                     l1472:
  4031   002DB8  0E00               	movlw	0
  4032   002DBA  140C               	andwf	___xxtofl@arg^0,w,c
  4033   002DBC  6E06               	movwf	??___xxtofl^0,c
  4034   002DBE  0E00               	movlw	0
  4035   002DC0  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4036   002DC2  6E07               	movwf	(??___xxtofl+1)^0,c
  4037   002DC4  0E00               	movlw	0
  4038   002DC6  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4039   002DC8  6E08               	movwf	(??___xxtofl+2)^0,c
  4040   002DCA  0EFF               	movlw	255
  4041   002DCC  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4042   002DCE  6E09               	movwf	(??___xxtofl+3)^0,c
  4043   002DD0  5006               	movf	??___xxtofl^0,w,c
  4044   002DD2  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4045   002DD4  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4046   002DD6  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4047   002DD8  A4D8               	btfss	status,2,c
  4048   002DDA  EFF1  F016         	goto	u3731
  4049   002DDE  EFF3  F016         	goto	u3730
  4050   002DE2                     u3731:
  4051   002DE2  EFD0  F016         	goto	l4418
  4052   002DE6                     u3730:
  4053   002DE6  EFFB  F016         	goto	l4426
  4054   002DEA                     l4424:
  4055   002DEA  060B               	decf	___xxtofl@exp^0,f,c
  4056   002DEC  90D8               	bcf	status,0,c
  4057   002DEE  360C               	rlcf	___xxtofl@arg^0,f,c
  4058   002DF0  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4059   002DF2  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4060   002DF4  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4061   002DF6                     l4426:
  4062   002DF6  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4063   002DF8  EF00  F017         	goto	u3741
  4064   002DFC  EF02  F017         	goto	u3740
  4065   002E00                     u3741:
  4066   002E00  EF0A  F017         	goto	l1479
  4067   002E04                     u3740:
  4068   002E04  0E02               	movlw	2
  4069   002E06  600B               	cpfslt	___xxtofl@exp^0,c
  4070   002E08  EF08  F017         	goto	u3751
  4071   002E0C  EF0A  F017         	goto	u3750
  4072   002E10                     u3751:
  4073   002E10  EFF5  F016         	goto	l4424
  4074   002E14                     u3750:
  4075   002E14                     l1479:
  4076   002E14  B00B               	btfsc	___xxtofl@exp^0,0,c
  4077   002E16  EF0F  F017         	goto	u3761
  4078   002E1A  EF11  F017         	goto	u3760
  4079   002E1E                     u3761:
  4080   002E1E  EF12  F017         	goto	l4432
  4081   002E22                     u3760:
  4082   002E22  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4083   002E24                     l4432:
  4084   002E24  90D8               	bcf	status,0,c
  4085   002E26  320B               	rrcf	___xxtofl@exp^0,f,c
  4086   002E28  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4087   002E2C  6A07               	clrf	(??___xxtofl+1)^0,c
  4088   002E2E  6A08               	clrf	(??___xxtofl+2)^0,c
  4089   002E30  6A09               	clrf	(??___xxtofl+3)^0,c
  4090   002E32  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4091   002E36  6A08               	clrf	(??___xxtofl+2)^0,c
  4092   002E38  6A07               	clrf	(??___xxtofl+1)^0,c
  4093   002E3A  6A06               	clrf	??___xxtofl^0,c
  4094   002E3C  5006               	movf	??___xxtofl^0,w,c
  4095   002E3E  120C               	iorwf	___xxtofl@arg^0,f,c
  4096   002E40  5007               	movf	(??___xxtofl+1)^0,w,c
  4097   002E42  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4098   002E44  5008               	movf	(??___xxtofl+2)^0,w,c
  4099   002E46  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4100   002E48  5009               	movf	(??___xxtofl+3)^0,w,c
  4101   002E4A  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4102   002E4C  500A               	movf	___xxtofl@sign^0,w,c
  4103   002E4E  B4D8               	btfsc	status,2,c
  4104   002E50  EF2C  F017         	goto	u3771
  4105   002E54  EF2E  F017         	goto	u3770
  4106   002E58                     u3771:
  4107   002E58  EF36  F017         	goto	l4442
  4108   002E5C                     u3770:
  4109   002E5C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4110   002E5E  EF35  F017         	goto	u3780
  4111   002E62  EF33  F017         	goto	u3781
  4112   002E66                     u3781:
  4113   002E66  EF36  F017         	goto	l4442
  4114   002E6A                     u3780:
  4115   002E6A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4116   002E6C                     l4442:
  4117   002E6C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4118   002E70  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4119   002E74  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4120   002E78  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4121   002E7C                     l1468:
  4122   002E7C  0012               	return		;funcret
  4123   002E7E                     __end_of___xxtofl:
  4124                           	callstack 0
  4125                           
  4126 ;; *************** function ___fltol *****************
  4127 ;; Defined at:
  4128 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  f1              4   65[COMRAM] unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  exp1            1   74[COMRAM] unsigned char 
  4133 ;;  sign1           1   73[COMRAM] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  4   65[COMRAM] long 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4143 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;Total ram usage:       10 bytes
  4148 ;; Hardware stack levels used: 1
  4149 ;; Hardware stack levels required when called: 1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_convert_rgb2hue
  4154 ;;		_main
  4155 ;;		_fullSpeedAhead
  4156 ;;		_calibration_turning
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text9
  4161   00366A                     __ptext9:
  4162                           	callstack 0
  4163   00366A                     ___fltol:
  4164                           	callstack 26
  4165   00366A  3444               	rlcf	(___fltol@f1+2)^0,w,c
  4166   00366C  3445               	rlcf	(___fltol@f1+3)^0,w,c
  4167   00366E  6E4B               	movwf	___fltol@exp1^0,c
  4168   003670  504B               	movf	___fltol@exp1^0,w,c
  4169   003672  A4D8               	btfss	status,2,c
  4170   003674  EF3E  F01B         	goto	u3621
  4171   003678  EF40  F01B         	goto	u3620
  4172   00367C                     u3621:
  4173   00367C  EF4A  F01B         	goto	l4362
  4174   003680                     u3620:
  4175   003680                     l4358:
  4176   003680  0E00               	movlw	0
  4177   003682  6E42               	movwf	?___fltol^0,c
  4178   003684  0E00               	movlw	0
  4179   003686  6E43               	movwf	(?___fltol+1)^0,c
  4180   003688  0E00               	movlw	0
  4181   00368A  6E44               	movwf	(?___fltol+2)^0,c
  4182   00368C  0E00               	movlw	0
  4183   00368E  6E45               	movwf	(?___fltol+3)^0,c
  4184   003690  EFB7  F01B         	goto	l1107
  4185   003694                     l4362:
  4186   003694  C042  F046         	movff	___fltol@f1,??___fltol
  4187   003698  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  4188   00369C  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  4189   0036A0  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  4190   0036A4  0E20               	movlw	32
  4191   0036A6  EF5A  F01B         	goto	u3630
  4192   0036AA                     u3635:
  4193   0036AA  90D8               	bcf	status,0,c
  4194   0036AC  3249               	rrcf	(??___fltol+3)^0,f,c
  4195   0036AE  3248               	rrcf	(??___fltol+2)^0,f,c
  4196   0036B0  3247               	rrcf	(??___fltol+1)^0,f,c
  4197   0036B2  3246               	rrcf	??___fltol^0,f,c
  4198   0036B4                     u3630:
  4199   0036B4  2EE8               	decfsz	wreg,f,c
  4200   0036B6  EF55  F01B         	goto	u3635
  4201   0036BA  5046               	movf	??___fltol^0,w,c
  4202   0036BC  6E4A               	movwf	___fltol@sign1^0,c
  4203   0036BE  8E44               	bsf	(___fltol@f1+2)^0,7,c
  4204   0036C0  0EFF               	movlw	255
  4205   0036C2  1642               	andwf	___fltol@f1^0,f,c
  4206   0036C4  0EFF               	movlw	255
  4207   0036C6  1643               	andwf	(___fltol@f1+1)^0,f,c
  4208   0036C8  0EFF               	movlw	255
  4209   0036CA  1644               	andwf	(___fltol@f1+2)^0,f,c
  4210   0036CC  0E00               	movlw	0
  4211   0036CE  1645               	andwf	(___fltol@f1+3)^0,f,c
  4212   0036D0  0E96               	movlw	150
  4213   0036D2  5E4B               	subwf	___fltol@exp1^0,f,c
  4214   0036D4  BE4B               	btfsc	___fltol@exp1^0,7,c
  4215   0036D6  EF71  F01B         	goto	u3640
  4216   0036DA  EF6F  F01B         	goto	u3641
  4217   0036DE                     u3641:
  4218   0036DE  EF87  F01B         	goto	l4382
  4219   0036E2                     u3640:
  4220   0036E2  504B               	movf	___fltol@exp1^0,w,c
  4221   0036E4  0A80               	xorlw	128
  4222   0036E6  0F97               	addlw	151
  4223   0036E8  B0D8               	btfsc	status,0,c
  4224   0036EA  EF79  F01B         	goto	u3651
  4225   0036EE  EF7B  F01B         	goto	u3650
  4226   0036F2                     u3651:
  4227   0036F2  EF7D  F01B         	goto	l4378
  4228   0036F6                     u3650:
  4229   0036F6  EF40  F01B         	goto	l4358
  4230   0036FA                     l4378:
  4231   0036FA  90D8               	bcf	status,0,c
  4232   0036FC  3245               	rrcf	(___fltol@f1+3)^0,f,c
  4233   0036FE  3244               	rrcf	(___fltol@f1+2)^0,f,c
  4234   003700  3243               	rrcf	(___fltol@f1+1)^0,f,c
  4235   003702  3242               	rrcf	___fltol@f1^0,f,c
  4236   003704  3E4B               	incfsz	___fltol@exp1^0,f,c
  4237   003706  EF7D  F01B         	goto	l4378
  4238   00370A  EF9F  F01B         	goto	l4392
  4239   00370E                     l4382:
  4240   00370E  0E1F               	movlw	31
  4241   003710  644B               	cpfsgt	___fltol@exp1^0,c
  4242   003712  EF8D  F01B         	goto	u3661
  4243   003716  EF8F  F01B         	goto	u3660
  4244   00371A                     u3661:
  4245   00371A  EF97  F01B         	goto	l4390
  4246   00371E                     u3660:
  4247   00371E  EF40  F01B         	goto	l4358
  4248   003722                     l4388:
  4249   003722  90D8               	bcf	status,0,c
  4250   003724  3642               	rlcf	___fltol@f1^0,f,c
  4251   003726  3643               	rlcf	(___fltol@f1+1)^0,f,c
  4252   003728  3644               	rlcf	(___fltol@f1+2)^0,f,c
  4253   00372A  3645               	rlcf	(___fltol@f1+3)^0,f,c
  4254   00372C  064B               	decf	___fltol@exp1^0,f,c
  4255   00372E                     l4390:
  4256   00372E  504B               	movf	___fltol@exp1^0,w,c
  4257   003730  A4D8               	btfss	status,2,c
  4258   003732  EF9D  F01B         	goto	u3671
  4259   003736  EF9F  F01B         	goto	u3670
  4260   00373A                     u3671:
  4261   00373A  EF91  F01B         	goto	l4388
  4262   00373E                     u3670:
  4263   00373E                     l4392:
  4264   00373E  504A               	movf	___fltol@sign1^0,w,c
  4265   003740  B4D8               	btfsc	status,2,c
  4266   003742  EFA5  F01B         	goto	u3681
  4267   003746  EFA7  F01B         	goto	u3680
  4268   00374A                     u3681:
  4269   00374A  EFAF  F01B         	goto	l4396
  4270   00374E                     u3680:
  4271   00374E  1E45               	comf	(___fltol@f1+3)^0,f,c
  4272   003750  1E44               	comf	(___fltol@f1+2)^0,f,c
  4273   003752  1E43               	comf	(___fltol@f1+1)^0,f,c
  4274   003754  6C42               	negf	___fltol@f1^0,c
  4275   003756  0E00               	movlw	0
  4276   003758  2243               	addwfc	(___fltol@f1+1)^0,f,c
  4277   00375A  2244               	addwfc	(___fltol@f1+2)^0,f,c
  4278   00375C  2245               	addwfc	(___fltol@f1+3)^0,f,c
  4279   00375E                     l4396:
  4280   00375E  C042  F042         	movff	___fltol@f1,?___fltol
  4281   003762  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  4282   003766  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  4283   00376A  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  4284   00376E                     l1107:
  4285   00376E  0012               	return		;funcret
  4286   003770                     __end_of___fltol:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function ___flsub *****************
  4290 ;; Defined at:
  4291 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  b               4   17[COMRAM] long 
  4294 ;;  a               4   21[COMRAM] long 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  4   17[COMRAM] long 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4306 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;Total ram usage:        8 bytes
  4311 ;; Hardware stack levels used: 1
  4312 ;; Hardware stack levels required when called: 2
  4313 ;; This function calls:
  4314 ;;		___fladd
  4315 ;; This function is called by:
  4316 ;;		_convert_rgb2hue
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text10
  4321   0044C6                     __ptext10:
  4322                           	callstack 0
  4323   0044C6                     ___flsub:
  4324                           	callstack 26
  4325   0044C6  0E00               	movlw	0
  4326   0044C8  1A16               	xorwf	___flsub@a^0,f,c
  4327   0044CA  0E00               	movlw	0
  4328   0044CC  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4329   0044CE  0E00               	movlw	0
  4330   0044D0  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4331   0044D2  0E80               	movlw	128
  4332   0044D4  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4333   0044D6  C012  F002         	movff	___flsub@b,___fladd@b
  4334   0044DA  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4335   0044DE  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4336   0044E2  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4337   0044E6  C016  F006         	movff	___flsub@a,___fladd@a
  4338   0044EA  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4339   0044EE  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4340   0044F2  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4341   0044F6  ECA2  F00D         	call	___fladd	;wreg free
  4342   0044FA  C002  F012         	movff	?___fladd,?___flsub
  4343   0044FE  C003  F013         	movff	?___fladd+1,?___flsub+1
  4344   004502  C004  F014         	movff	?___fladd+2,?___flsub+2
  4345   004506  C005  F015         	movff	?___fladd+3,?___flsub+3
  4346   00450A  0012               	return		;funcret
  4347   00450C                     __end_of___flsub:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function ___fladd *****************
  4351 ;; Defined at:
  4352 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  b               4    1[COMRAM] long 
  4355 ;;  a               4    5[COMRAM] long 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  grs             1   16[COMRAM] unsigned char 
  4358 ;;  bexp            1   15[COMRAM] unsigned char 
  4359 ;;  aexp            1   14[COMRAM] unsigned char 
  4360 ;;  signs           1   13[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  4    1[COMRAM] unsigned char 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4370 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4371 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4372 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4373 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4374 ;;Total ram usage:       16 bytes
  4375 ;; Hardware stack levels used: 1
  4376 ;; Hardware stack levels required when called: 1
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_convert_rgb2hue
  4381 ;;		___flsub
  4382 ;;		_calibration_turning
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text11
  4387   001B44                     __ptext11:
  4388                           	callstack 0
  4389   001B44                     ___fladd:
  4390                           	callstack 26
  4391   001B44  5005               	movf	(___fladd@b+3)^0,w,c
  4392   001B46  0B80               	andlw	128
  4393   001B48  6E0E               	movwf	___fladd@signs^0,c
  4394   001B4A  5005               	movf	(___fladd@b+3)^0,w,c
  4395   001B4C  2405               	addwf	(___fladd@b+3)^0,w,c
  4396   001B4E  6E10               	movwf	___fladd@bexp^0,c
  4397   001B50  AE04               	btfss	(___fladd@b+2)^0,7,c
  4398   001B52  EFAD  F00D         	goto	u3041
  4399   001B56  EFAF  F00D         	goto	u3040
  4400   001B5A                     u3041:
  4401   001B5A  EFB0  F00D         	goto	l4030
  4402   001B5E                     u3040:
  4403   001B5E  8010               	bsf	___fladd@bexp^0,0,c
  4404   001B60                     l4030:
  4405   001B60  5010               	movf	___fladd@bexp^0,w,c
  4406   001B62  B4D8               	btfsc	status,2,c
  4407   001B64  EFB6  F00D         	goto	u3051
  4408   001B68  EFB8  F00D         	goto	u3050
  4409   001B6C                     u3051:
  4410   001B6C  EFCD  F00D         	goto	l4040
  4411   001B70                     u3050:
  4412   001B70  2810               	incf	___fladd@bexp^0,w,c
  4413   001B72  A4D8               	btfss	status,2,c
  4414   001B74  EFBE  F00D         	goto	u3061
  4415   001B78  EFC0  F00D         	goto	u3060
  4416   001B7C                     u3061:
  4417   001B7C  EFC8  F00D         	goto	l4036
  4418   001B80                     u3060:
  4419   001B80  0E00               	movlw	0
  4420   001B82  6E02               	movwf	___fladd@b^0,c
  4421   001B84  0E00               	movlw	0
  4422   001B86  6E03               	movwf	(___fladd@b+1)^0,c
  4423   001B88  0E00               	movlw	0
  4424   001B8A  6E04               	movwf	(___fladd@b+2)^0,c
  4425   001B8C  0E00               	movlw	0
  4426   001B8E  6E05               	movwf	(___fladd@b+3)^0,c
  4427   001B90                     l4036:
  4428   001B90  8E04               	bsf	(___fladd@b+2)^0,7,c
  4429   001B92  0E00               	movlw	0
  4430   001B94  6E05               	movwf	(___fladd@b+3)^0,c
  4431   001B96  EFD5  F00D         	goto	l4042
  4432   001B9A                     l4040:
  4433   001B9A  0E00               	movlw	0
  4434   001B9C  6E02               	movwf	___fladd@b^0,c
  4435   001B9E  0E00               	movlw	0
  4436   001BA0  6E03               	movwf	(___fladd@b+1)^0,c
  4437   001BA2  0E00               	movlw	0
  4438   001BA4  6E04               	movwf	(___fladd@b+2)^0,c
  4439   001BA6  0E00               	movlw	0
  4440   001BA8  6E05               	movwf	(___fladd@b+3)^0,c
  4441   001BAA                     l4042:
  4442   001BAA  5009               	movf	(___fladd@a+3)^0,w,c
  4443   001BAC  0B80               	andlw	128
  4444   001BAE  6E0F               	movwf	___fladd@aexp^0,c
  4445   001BB0  500E               	movf	___fladd@signs^0,w,c
  4446   001BB2  180F               	xorwf	___fladd@aexp^0,w,c
  4447   001BB4  B4D8               	btfsc	status,2,c
  4448   001BB6  EFDF  F00D         	goto	u3071
  4449   001BBA  EFE1  F00D         	goto	u3070
  4450   001BBE                     u3071:
  4451   001BBE  EFE2  F00D         	goto	l4048
  4452   001BC2                     u3070:
  4453   001BC2  8C0E               	bsf	___fladd@signs^0,6,c
  4454   001BC4                     l4048:
  4455   001BC4  5009               	movf	(___fladd@a+3)^0,w,c
  4456   001BC6  2409               	addwf	(___fladd@a+3)^0,w,c
  4457   001BC8  6E0F               	movwf	___fladd@aexp^0,c
  4458   001BCA  AE08               	btfss	(___fladd@a+2)^0,7,c
  4459   001BCC  EFEA  F00D         	goto	u3081
  4460   001BD0  EFEC  F00D         	goto	u3080
  4461   001BD4                     u3081:
  4462   001BD4  EFED  F00D         	goto	l4054
  4463   001BD8                     u3080:
  4464   001BD8  800F               	bsf	___fladd@aexp^0,0,c
  4465   001BDA                     l4054:
  4466   001BDA  500F               	movf	___fladd@aexp^0,w,c
  4467   001BDC  B4D8               	btfsc	status,2,c
  4468   001BDE  EFF3  F00D         	goto	u3091
  4469   001BE2  EFF5  F00D         	goto	u3090
  4470   001BE6                     u3091:
  4471   001BE6  EF0A  F00E         	goto	l4064
  4472   001BEA                     u3090:
  4473   001BEA  280F               	incf	___fladd@aexp^0,w,c
  4474   001BEC  A4D8               	btfss	status,2,c
  4475   001BEE  EFFB  F00D         	goto	u3101
  4476   001BF2  EFFD  F00D         	goto	u3100
  4477   001BF6                     u3101:
  4478   001BF6  EF05  F00E         	goto	l4060
  4479   001BFA                     u3100:
  4480   001BFA  0E00               	movlw	0
  4481   001BFC  6E06               	movwf	___fladd@a^0,c
  4482   001BFE  0E00               	movlw	0
  4483   001C00  6E07               	movwf	(___fladd@a+1)^0,c
  4484   001C02  0E00               	movlw	0
  4485   001C04  6E08               	movwf	(___fladd@a+2)^0,c
  4486   001C06  0E00               	movlw	0
  4487   001C08  6E09               	movwf	(___fladd@a+3)^0,c
  4488   001C0A                     l4060:
  4489   001C0A  8E08               	bsf	(___fladd@a+2)^0,7,c
  4490   001C0C  0E00               	movlw	0
  4491   001C0E  6E09               	movwf	(___fladd@a+3)^0,c
  4492   001C10  EF12  F00E         	goto	l4066
  4493   001C14                     l4064:
  4494   001C14  0E00               	movlw	0
  4495   001C16  6E06               	movwf	___fladd@a^0,c
  4496   001C18  0E00               	movlw	0
  4497   001C1A  6E07               	movwf	(___fladd@a+1)^0,c
  4498   001C1C  0E00               	movlw	0
  4499   001C1E  6E08               	movwf	(___fladd@a+2)^0,c
  4500   001C20  0E00               	movlw	0
  4501   001C22  6E09               	movwf	(___fladd@a+3)^0,c
  4502   001C24                     l4066:
  4503   001C24  5010               	movf	___fladd@bexp^0,w,c
  4504   001C26  5C0F               	subwf	___fladd@aexp^0,w,c
  4505   001C28  B0D8               	btfsc	status,0,c
  4506   001C2A  EF19  F00E         	goto	u3111
  4507   001C2E  EF1B  F00E         	goto	u3110
  4508   001C32                     u3111:
  4509   001C32  EF42  F00E         	goto	l4102
  4510   001C36                     u3110:
  4511   001C36  AC0E               	btfss	___fladd@signs^0,6,c
  4512   001C38  EF20  F00E         	goto	u3121
  4513   001C3C  EF22  F00E         	goto	u3120
  4514   001C40                     u3121:
  4515   001C40  EF24  F00E         	goto	l4072
  4516   001C44                     u3120:
  4517   001C44  0E80               	movlw	128
  4518   001C46  1A0E               	xorwf	___fladd@signs^0,f,c
  4519   001C48                     l4072:
  4520   001C48  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4521   001C4C  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4522   001C50  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4523   001C54  C002  F011         	movff	___fladd@b,___fladd@grs
  4524   001C58  C006  F002         	movff	___fladd@a,___fladd@b
  4525   001C5C  C011  F006         	movff	___fladd@grs,___fladd@a
  4526   001C60  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4527   001C64  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4528   001C68  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4529   001C6C  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4530   001C70  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4531   001C74  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4532   001C78  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4533   001C7C  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4534   001C80  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4535   001C84                     l4102:
  4536   001C84  0E00               	movlw	0
  4537   001C86  6E11               	movwf	___fladd@grs^0,c
  4538   001C88  5010               	movf	___fladd@bexp^0,w,c
  4539   001C8A  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4540   001C8E  6A0B               	clrf	(??___fladd+1)^0,c
  4541   001C90  5E0A               	subwf	??___fladd^0,f,c
  4542   001C92  0E00               	movlw	0
  4543   001C94  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4544   001C96  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4545   001C98  EF57  F00E         	goto	u3131
  4546   001C9C  500B               	movf	(??___fladd+1)^0,w,c
  4547   001C9E  E109               	bnz	u3130
  4548   001CA0  0E1A               	movlw	26
  4549   001CA2  5C0A               	subwf	??___fladd^0,w,c
  4550   001CA4  A0D8               	btfss	status,0,c
  4551   001CA6  EF57  F00E         	goto	u3131
  4552   001CAA  EF59  F00E         	goto	u3130
  4553   001CAE                     u3131:
  4554   001CAE  EF90  F00E         	goto	l1339
  4555   001CB2                     u3130:
  4556   001CB2  5002               	movf	___fladd@b^0,w,c
  4557   001CB4  1003               	iorwf	(___fladd@b+1)^0,w,c
  4558   001CB6  1004               	iorwf	(___fladd@b+2)^0,w,c
  4559   001CB8  1005               	iorwf	(___fladd@b+3)^0,w,c
  4560   001CBA  A4D8               	btfss	status,2,c
  4561   001CBC  EF62  F00E         	goto	u3141
  4562   001CC0  EF65  F00E         	goto	u3140
  4563   001CC4                     u3141:
  4564   001CC4  0E01               	movlw	1
  4565   001CC6  EF66  F00E         	goto	u3150
  4566   001CCA                     u3140:
  4567   001CCA  0E00               	movlw	0
  4568   001CCC                     u3150:
  4569   001CCC  6E11               	movwf	___fladd@grs^0,c
  4570   001CCE  0E00               	movlw	0
  4571   001CD0  6E02               	movwf	___fladd@b^0,c
  4572   001CD2  0E00               	movlw	0
  4573   001CD4  6E03               	movwf	(___fladd@b+1)^0,c
  4574   001CD6  0E00               	movlw	0
  4575   001CD8  6E04               	movwf	(___fladd@b+2)^0,c
  4576   001CDA  0E00               	movlw	0
  4577   001CDC  6E05               	movwf	(___fladd@b+3)^0,c
  4578   001CDE  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4579   001CE2  EF99  F00E         	goto	l1338
  4580   001CE6                     l1340:
  4581   001CE6  A011               	btfss	___fladd@grs^0,0,c
  4582   001CE8  EF78  F00E         	goto	u3161
  4583   001CEC  EF7A  F00E         	goto	u3160
  4584   001CF0                     u3161:
  4585   001CF0  EF80  F00E         	goto	l4114
  4586   001CF4                     u3160:
  4587   001CF4  90D8               	bcf	status,0,c
  4588   001CF6  3011               	rrcf	___fladd@grs^0,w,c
  4589   001CF8  0901               	iorlw	1
  4590   001CFA  6E11               	movwf	___fladd@grs^0,c
  4591   001CFC  EF82  F00E         	goto	l4116
  4592   001D00                     l4114:
  4593   001D00  90D8               	bcf	status,0,c
  4594   001D02  3211               	rrcf	___fladd@grs^0,f,c
  4595   001D04                     l4116:
  4596   001D04  A002               	btfss	___fladd@b^0,0,c
  4597   001D06  EF87  F00E         	goto	u3171
  4598   001D0A  EF89  F00E         	goto	u3170
  4599   001D0E                     u3171:
  4600   001D0E  EF8A  F00E         	goto	l4120
  4601   001D12                     u3170:
  4602   001D12  8E11               	bsf	___fladd@grs^0,7,c
  4603   001D14                     l4120:
  4604   001D14  3405               	rlcf	(___fladd@b+3)^0,w,c
  4605   001D16  3205               	rrcf	(___fladd@b+3)^0,f,c
  4606   001D18  3204               	rrcf	(___fladd@b+2)^0,f,c
  4607   001D1A  3203               	rrcf	(___fladd@b+1)^0,f,c
  4608   001D1C  3202               	rrcf	___fladd@b^0,f,c
  4609   001D1E  2A10               	incf	___fladd@bexp^0,f,c
  4610   001D20                     l1339:
  4611   001D20  500F               	movf	___fladd@aexp^0,w,c
  4612   001D22  5C10               	subwf	___fladd@bexp^0,w,c
  4613   001D24  A0D8               	btfss	status,0,c
  4614   001D26  EF97  F00E         	goto	u3181
  4615   001D2A  EF99  F00E         	goto	u3180
  4616   001D2E                     u3181:
  4617   001D2E  EF73  F00E         	goto	l1340
  4618   001D32                     u3180:
  4619   001D32                     l1338:
  4620   001D32  BC0E               	btfsc	___fladd@signs^0,6,c
  4621   001D34  EF9E  F00E         	goto	u3191
  4622   001D38  EFA0  F00E         	goto	u3190
  4623   001D3C                     u3191:
  4624   001D3C  EFE0  F00E         	goto	l4148
  4625   001D40                     u3190:
  4626   001D40  5010               	movf	___fladd@bexp^0,w,c
  4627   001D42  A4D8               	btfss	status,2,c
  4628   001D44  EFA6  F00E         	goto	u3201
  4629   001D48  EFA8  F00E         	goto	u3200
  4630   001D4C                     u3201:
  4631   001D4C  EFB2  F00E         	goto	l4130
  4632   001D50                     u3200:
  4633   001D50  0E00               	movlw	0
  4634   001D52  6E02               	movwf	?___fladd^0,c
  4635   001D54  0E00               	movlw	0
  4636   001D56  6E03               	movwf	(?___fladd+1)^0,c
  4637   001D58  0E00               	movlw	0
  4638   001D5A  6E04               	movwf	(?___fladd+2)^0,c
  4639   001D5C  0E00               	movlw	0
  4640   001D5E  6E05               	movwf	(?___fladd+3)^0,c
  4641   001D60  EF01  F010         	goto	l1347
  4642   001D64                     l4130:
  4643   001D64  5006               	movf	___fladd@a^0,w,c
  4644   001D66  2602               	addwf	___fladd@b^0,f,c
  4645   001D68  5007               	movf	(___fladd@a+1)^0,w,c
  4646   001D6A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4647   001D6C  5008               	movf	(___fladd@a+2)^0,w,c
  4648   001D6E  2204               	addwfc	(___fladd@b+2)^0,f,c
  4649   001D70  5009               	movf	(___fladd@a+3)^0,w,c
  4650   001D72  2205               	addwfc	(___fladd@b+3)^0,f,c
  4651   001D74  A005               	btfss	(___fladd@b+3)^0,0,c
  4652   001D76  EFBF  F00E         	goto	u3211
  4653   001D7A  EFC1  F00E         	goto	u3210
  4654   001D7E                     u3211:
  4655   001D7E  EF6D  F00F         	goto	l4184
  4656   001D82                     u3210:
  4657   001D82  A011               	btfss	___fladd@grs^0,0,c
  4658   001D84  EFC6  F00E         	goto	u3221
  4659   001D88  EFC8  F00E         	goto	u3220
  4660   001D8C                     u3221:
  4661   001D8C  EFCE  F00E         	goto	l4138
  4662   001D90                     u3220:
  4663   001D90  90D8               	bcf	status,0,c
  4664   001D92  3011               	rrcf	___fladd@grs^0,w,c
  4665   001D94  0901               	iorlw	1
  4666   001D96  6E11               	movwf	___fladd@grs^0,c
  4667   001D98  EFD0  F00E         	goto	l4140
  4668   001D9C                     l4138:
  4669   001D9C  90D8               	bcf	status,0,c
  4670   001D9E  3211               	rrcf	___fladd@grs^0,f,c
  4671   001DA0                     l4140:
  4672   001DA0  A002               	btfss	___fladd@b^0,0,c
  4673   001DA2  EFD5  F00E         	goto	u3231
  4674   001DA6  EFD7  F00E         	goto	u3230
  4675   001DAA                     u3231:
  4676   001DAA  EFD8  F00E         	goto	l4144
  4677   001DAE                     u3230:
  4678   001DAE  8E11               	bsf	___fladd@grs^0,7,c
  4679   001DB0                     l4144:
  4680   001DB0  3405               	rlcf	(___fladd@b+3)^0,w,c
  4681   001DB2  3205               	rrcf	(___fladd@b+3)^0,f,c
  4682   001DB4  3204               	rrcf	(___fladd@b+2)^0,f,c
  4683   001DB6  3203               	rrcf	(___fladd@b+1)^0,f,c
  4684   001DB8  3202               	rrcf	___fladd@b^0,f,c
  4685   001DBA  2A10               	incf	___fladd@bexp^0,f,c
  4686   001DBC  EF6D  F00F         	goto	l4184
  4687   001DC0                     l4148:
  4688   001DC0  5006               	movf	___fladd@a^0,w,c
  4689   001DC2  5C02               	subwf	___fladd@b^0,w,c
  4690   001DC4  5007               	movf	(___fladd@a+1)^0,w,c
  4691   001DC6  5803               	subwfb	(___fladd@b+1)^0,w,c
  4692   001DC8  5008               	movf	(___fladd@a+2)^0,w,c
  4693   001DCA  5804               	subwfb	(___fladd@b+2)^0,w,c
  4694   001DCC  5005               	movf	(___fladd@b+3)^0,w,c
  4695   001DCE  0A80               	xorlw	128
  4696   001DD0  6E0A               	movwf	??___fladd^0,c
  4697   001DD2  5009               	movf	(___fladd@a+3)^0,w,c
  4698   001DD4  0A80               	xorlw	128
  4699   001DD6  580A               	subwfb	??___fladd^0,w,c
  4700   001DD8  B0D8               	btfsc	status,0,c
  4701   001DDA  EFF1  F00E         	goto	u3241
  4702   001DDE  EFF3  F00E         	goto	u3240
  4703   001DE2                     u3241:
  4704   001DE2  EF1E  F00F         	goto	l4158
  4705   001DE6                     u3240:
  4706   001DE6  5002               	movf	___fladd@b^0,w,c
  4707   001DE8  5C06               	subwf	___fladd@a^0,w,c
  4708   001DEA  6E0A               	movwf	??___fladd^0,c
  4709   001DEC  5003               	movf	(___fladd@b+1)^0,w,c
  4710   001DEE  5807               	subwfb	(___fladd@a+1)^0,w,c
  4711   001DF0  6E0B               	movwf	(??___fladd+1)^0,c
  4712   001DF2  5004               	movf	(___fladd@b+2)^0,w,c
  4713   001DF4  5808               	subwfb	(___fladd@a+2)^0,w,c
  4714   001DF6  6E0C               	movwf	(??___fladd+2)^0,c
  4715   001DF8  5005               	movf	(___fladd@b+3)^0,w,c
  4716   001DFA  5809               	subwfb	(___fladd@a+3)^0,w,c
  4717   001DFC  6E0D               	movwf	(??___fladd+3)^0,c
  4718   001DFE  0EFF               	movlw	255
  4719   001E00  240A               	addwf	??___fladd^0,w,c
  4720   001E02  6E02               	movwf	___fladd@b^0,c
  4721   001E04  0EFF               	movlw	255
  4722   001E06  200B               	addwfc	(??___fladd+1)^0,w,c
  4723   001E08  6E03               	movwf	(___fladd@b+1)^0,c
  4724   001E0A  0EFF               	movlw	255
  4725   001E0C  200C               	addwfc	(??___fladd+2)^0,w,c
  4726   001E0E  6E04               	movwf	(___fladd@b+2)^0,c
  4727   001E10  0EFF               	movlw	255
  4728   001E12  200D               	addwfc	(??___fladd+3)^0,w,c
  4729   001E14  6E05               	movwf	(___fladd@b+3)^0,c
  4730   001E16  0E80               	movlw	128
  4731   001E18  1A0E               	xorwf	___fladd@signs^0,f,c
  4732   001E1A  6C11               	negf	___fladd@grs^0,c
  4733   001E1C  5011               	movf	___fladd@grs^0,w,c
  4734   001E1E  A4D8               	btfss	status,2,c
  4735   001E20  EF14  F00F         	goto	u3251
  4736   001E24  EF16  F00F         	goto	u3250
  4737   001E28                     u3251:
  4738   001E28  EF26  F00F         	goto	l1355
  4739   001E2C                     u3250:
  4740   001E2C  0E01               	movlw	1
  4741   001E2E  2602               	addwf	___fladd@b^0,f,c
  4742   001E30  0E00               	movlw	0
  4743   001E32  2203               	addwfc	(___fladd@b+1)^0,f,c
  4744   001E34  2204               	addwfc	(___fladd@b+2)^0,f,c
  4745   001E36  2205               	addwfc	(___fladd@b+3)^0,f,c
  4746   001E38  EF26  F00F         	goto	l1355
  4747   001E3C                     l4158:
  4748   001E3C  5006               	movf	___fladd@a^0,w,c
  4749   001E3E  5E02               	subwf	___fladd@b^0,f,c
  4750   001E40  5007               	movf	(___fladd@a+1)^0,w,c
  4751   001E42  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4752   001E44  5008               	movf	(___fladd@a+2)^0,w,c
  4753   001E46  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4754   001E48  5009               	movf	(___fladd@a+3)^0,w,c
  4755   001E4A  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4756   001E4C                     l1355:
  4757   001E4C  5002               	movf	___fladd@b^0,w,c
  4758   001E4E  1003               	iorwf	(___fladd@b+1)^0,w,c
  4759   001E50  1004               	iorwf	(___fladd@b+2)^0,w,c
  4760   001E52  1005               	iorwf	(___fladd@b+3)^0,w,c
  4761   001E54  A4D8               	btfss	status,2,c
  4762   001E56  EF2F  F00F         	goto	u3261
  4763   001E5A  EF31  F00F         	goto	u3260
  4764   001E5E                     u3261:
  4765   001E5E  EF66  F00F         	goto	l4182
  4766   001E62                     u3260:
  4767   001E62  5011               	movf	___fladd@grs^0,w,c
  4768   001E64  A4D8               	btfss	status,2,c
  4769   001E66  EF37  F00F         	goto	u3271
  4770   001E6A  EF39  F00F         	goto	u3270
  4771   001E6E                     u3271:
  4772   001E6E  EF66  F00F         	goto	l4182
  4773   001E72                     u3270:
  4774   001E72  0E00               	movlw	0
  4775   001E74  6E02               	movwf	?___fladd^0,c
  4776   001E76  0E00               	movlw	0
  4777   001E78  6E03               	movwf	(?___fladd+1)^0,c
  4778   001E7A  0E00               	movlw	0
  4779   001E7C  6E04               	movwf	(?___fladd+2)^0,c
  4780   001E7E  0E00               	movlw	0
  4781   001E80  6E05               	movwf	(?___fladd+3)^0,c
  4782   001E82  EF01  F010         	goto	l1347
  4783   001E86                     l4166:
  4784   001E86  90D8               	bcf	status,0,c
  4785   001E88  3602               	rlcf	___fladd@b^0,f,c
  4786   001E8A  3603               	rlcf	(___fladd@b+1)^0,f,c
  4787   001E8C  3604               	rlcf	(___fladd@b+2)^0,f,c
  4788   001E8E  3605               	rlcf	(___fladd@b+3)^0,f,c
  4789   001E90  AE11               	btfss	___fladd@grs^0,7,c
  4790   001E92  EF4D  F00F         	goto	u3281
  4791   001E96  EF4F  F00F         	goto	u3280
  4792   001E9A                     u3281:
  4793   001E9A  EF50  F00F         	goto	l4172
  4794   001E9E                     u3280:
  4795   001E9E  8002               	bsf	___fladd@b^0,0,c
  4796   001EA0                     l4172:
  4797   001EA0  A011               	btfss	___fladd@grs^0,0,c
  4798   001EA2  EF55  F00F         	goto	u3291
  4799   001EA6  EF57  F00F         	goto	u3290
  4800   001EAA                     u3291:
  4801   001EAA  EF5B  F00F         	goto	l4176
  4802   001EAE                     u3290:
  4803   001EAE  80D8               	bsf	status,0,c
  4804   001EB0  3611               	rlcf	___fladd@grs^0,f,c
  4805   001EB2  EF5D  F00F         	goto	l4178
  4806   001EB6                     l4176:
  4807   001EB6  90D8               	bcf	status,0,c
  4808   001EB8  3611               	rlcf	___fladd@grs^0,f,c
  4809   001EBA                     l4178:
  4810   001EBA  5010               	movf	___fladd@bexp^0,w,c
  4811   001EBC  B4D8               	btfsc	status,2,c
  4812   001EBE  EF63  F00F         	goto	u3301
  4813   001EC2  EF65  F00F         	goto	u3300
  4814   001EC6                     u3301:
  4815   001EC6  EF66  F00F         	goto	l4182
  4816   001ECA                     u3300:
  4817   001ECA  0610               	decf	___fladd@bexp^0,f,c
  4818   001ECC                     l4182:
  4819   001ECC  AE04               	btfss	(___fladd@b+2)^0,7,c
  4820   001ECE  EF6B  F00F         	goto	u3311
  4821   001ED2  EF6D  F00F         	goto	u3310
  4822   001ED6                     u3311:
  4823   001ED6  EF43  F00F         	goto	l4166
  4824   001EDA                     u3310:
  4825   001EDA                     l4184:
  4826   001EDA  0E00               	movlw	0
  4827   001EDC  6E0F               	movwf	___fladd@aexp^0,c
  4828   001EDE  AE11               	btfss	___fladd@grs^0,7,c
  4829   001EE0  EF74  F00F         	goto	u3321
  4830   001EE4  EF76  F00F         	goto	u3320
  4831   001EE8                     u3321:
  4832   001EE8  EF8E  F00F         	goto	l1364
  4833   001EEC                     u3320:
  4834   001EEC  C011  F00A         	movff	___fladd@grs,??___fladd
  4835   001EF0  0E7F               	movlw	127
  4836   001EF2  160A               	andwf	??___fladd^0,f,c
  4837   001EF4  B4D8               	btfsc	status,2,c
  4838   001EF6  EF7F  F00F         	goto	u3331
  4839   001EFA  EF81  F00F         	goto	u3330
  4840   001EFE                     u3331:
  4841   001EFE  EF85  F00F         	goto	l1365
  4842   001F02                     u3330:
  4843   001F02                     l4190:
  4844   001F02  0E01               	movlw	1
  4845   001F04  6E0F               	movwf	___fladd@aexp^0,c
  4846   001F06  EF8E  F00F         	goto	l1364
  4847   001F0A                     l1365:
  4848   001F0A  A002               	btfss	___fladd@b^0,0,c
  4849   001F0C  EF8A  F00F         	goto	u3341
  4850   001F10  EF8C  F00F         	goto	u3340
  4851   001F14                     u3341:
  4852   001F14  EF8E  F00F         	goto	l1364
  4853   001F18                     u3340:
  4854   001F18  EF81  F00F         	goto	l4190
  4855   001F1C                     l1364:
  4856   001F1C  500F               	movf	___fladd@aexp^0,w,c
  4857   001F1E  B4D8               	btfsc	status,2,c
  4858   001F20  EF94  F00F         	goto	u3351
  4859   001F24  EF96  F00F         	goto	u3350
  4860   001F28                     u3351:
  4861   001F28  EFC1  F00F         	goto	l4202
  4862   001F2C                     u3350:
  4863   001F2C  0E01               	movlw	1
  4864   001F2E  2602               	addwf	___fladd@b^0,f,c
  4865   001F30  0E00               	movlw	0
  4866   001F32  2203               	addwfc	(___fladd@b+1)^0,f,c
  4867   001F34  2204               	addwfc	(___fladd@b+2)^0,f,c
  4868   001F36  2205               	addwfc	(___fladd@b+3)^0,f,c
  4869   001F38  A005               	btfss	(___fladd@b+3)^0,0,c
  4870   001F3A  EFA1  F00F         	goto	u3361
  4871   001F3E  EFA3  F00F         	goto	u3360
  4872   001F42                     u3361:
  4873   001F42  EFC1  F00F         	goto	l4202
  4874   001F46                     u3360:
  4875   001F46  C002  F00A         	movff	___fladd@b,??___fladd
  4876   001F4A  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4877   001F4E  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4878   001F52  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4879   001F56  340D               	rlcf	(??___fladd+3)^0,w,c
  4880   001F58  320D               	rrcf	(??___fladd+3)^0,f,c
  4881   001F5A  320C               	rrcf	(??___fladd+2)^0,f,c
  4882   001F5C  320B               	rrcf	(??___fladd+1)^0,f,c
  4883   001F5E  320A               	rrcf	??___fladd^0,f,c
  4884   001F60  C00A  F002         	movff	??___fladd,___fladd@b
  4885   001F64  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4886   001F68  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4887   001F6C  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4888   001F70  2810               	incf	___fladd@bexp^0,w,c
  4889   001F72  B4D8               	btfsc	status,2,c
  4890   001F74  EFBE  F00F         	goto	u3371
  4891   001F78  EFC0  F00F         	goto	u3370
  4892   001F7C                     u3371:
  4893   001F7C  EFC1  F00F         	goto	l4202
  4894   001F80                     u3370:
  4895   001F80  2A10               	incf	___fladd@bexp^0,f,c
  4896   001F82                     l4202:
  4897   001F82  2810               	incf	___fladd@bexp^0,w,c
  4898   001F84  B4D8               	btfsc	status,2,c
  4899   001F86  EFC7  F00F         	goto	u3381
  4900   001F8A  EFC9  F00F         	goto	u3380
  4901   001F8E                     u3381:
  4902   001F8E  EFD1  F00F         	goto	l4206
  4903   001F92                     u3380:
  4904   001F92  5010               	movf	___fladd@bexp^0,w,c
  4905   001F94  A4D8               	btfss	status,2,c
  4906   001F96  EFCF  F00F         	goto	u3391
  4907   001F9A  EFD1  F00F         	goto	u3390
  4908   001F9E                     u3391:
  4909   001F9E  EFE3  F00F         	goto	l4210
  4910   001FA2                     u3390:
  4911   001FA2                     l4206:
  4912   001FA2  0E00               	movlw	0
  4913   001FA4  6E02               	movwf	___fladd@b^0,c
  4914   001FA6  0E00               	movlw	0
  4915   001FA8  6E03               	movwf	(___fladd@b+1)^0,c
  4916   001FAA  0E00               	movlw	0
  4917   001FAC  6E04               	movwf	(___fladd@b+2)^0,c
  4918   001FAE  0E00               	movlw	0
  4919   001FB0  6E05               	movwf	(___fladd@b+3)^0,c
  4920   001FB2  5010               	movf	___fladd@bexp^0,w,c
  4921   001FB4  A4D8               	btfss	status,2,c
  4922   001FB6  EFDF  F00F         	goto	u3401
  4923   001FBA  EFE1  F00F         	goto	u3400
  4924   001FBE                     u3401:
  4925   001FBE  EFE3  F00F         	goto	l4210
  4926   001FC2                     u3400:
  4927   001FC2  0E00               	movlw	0
  4928   001FC4  6E0E               	movwf	___fladd@signs^0,c
  4929   001FC6                     l4210:
  4930   001FC6  A010               	btfss	___fladd@bexp^0,0,c
  4931   001FC8  EFE8  F00F         	goto	u3411
  4932   001FCC  EFEA  F00F         	goto	u3410
  4933   001FD0                     u3411:
  4934   001FD0  EFED  F00F         	goto	l4214
  4935   001FD4                     u3410:
  4936   001FD4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4937   001FD6  EFEE  F00F         	goto	l4216
  4938   001FDA                     l4214:
  4939   001FDA  9E04               	bcf	(___fladd@b+2)^0,7,c
  4940   001FDC                     l4216:
  4941   001FDC  90D8               	bcf	status,0,c
  4942   001FDE  3010               	rrcf	___fladd@bexp^0,w,c
  4943   001FE0  6E05               	movwf	(___fladd@b+3)^0,c
  4944   001FE2  AE0E               	btfss	___fladd@signs^0,7,c
  4945   001FE4  EFF6  F00F         	goto	u3421
  4946   001FE8  EFF8  F00F         	goto	u3420
  4947   001FEC                     u3421:
  4948   001FEC  EFF9  F00F         	goto	l4222
  4949   001FF0                     u3420:
  4950   001FF0  8E05               	bsf	(___fladd@b+3)^0,7,c
  4951   001FF2                     l4222:
  4952   001FF2  C002  F002         	movff	___fladd@b,?___fladd
  4953   001FF6  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4954   001FFA  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4955   001FFE  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4956   002002                     l1347:
  4957   002002  0012               	return		;funcret
  4958   002004                     __end_of___fladd:
  4959                           	callstack 0
  4960                           
  4961 ;; *************** function ___flmul *****************
  4962 ;; Defined at:
  4963 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  b               4   15[COMRAM] unsigned char 
  4966 ;;  a               4   19[COMRAM] unsigned char 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  prod            4   34[COMRAM] struct .
  4969 ;;  grs             4   28[COMRAM] unsigned long 
  4970 ;;  temp            2   38[COMRAM] struct .
  4971 ;;  bexp            1   33[COMRAM] unsigned char 
  4972 ;;  aexp            1   32[COMRAM] unsigned char 
  4973 ;;  sign            1   27[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  4   15[COMRAM] unsigned char 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, prodl, prodh
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4984 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4985 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4986 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4987 ;;Total ram usage:       25 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 1
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_convert_rgb2hue
  4994 ;;		_main
  4995 ;;		_fullSpeedAhead
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text12
  5000   002004                     __ptext12:
  5001                           	callstack 0
  5002   002004                     ___flmul:
  5003                           	callstack 26
  5004   002004  5013               	movf	(___flmul@b+3)^0,w,c
  5005   002006  0B80               	andlw	128
  5006   002008  6E1C               	movwf	___flmul@sign^0,c
  5007   00200A  5013               	movf	(___flmul@b+3)^0,w,c
  5008   00200C  2413               	addwf	(___flmul@b+3)^0,w,c
  5009   00200E  6E22               	movwf	___flmul@bexp^0,c
  5010   002010  AE12               	btfss	(___flmul@b+2)^0,7,c
  5011   002012  EF0D  F010         	goto	u3431
  5012   002016  EF0F  F010         	goto	u3430
  5013   00201A                     u3431:
  5014   00201A  EF10  F010         	goto	l4232
  5015   00201E                     u3430:
  5016   00201E  8022               	bsf	___flmul@bexp^0,0,c
  5017   002020                     l4232:
  5018   002020  5022               	movf	___flmul@bexp^0,w,c
  5019   002022  B4D8               	btfsc	status,2,c
  5020   002024  EF16  F010         	goto	u3441
  5021   002028  EF18  F010         	goto	u3440
  5022   00202C                     u3441:
  5023   00202C  EF2B  F010         	goto	l4240
  5024   002030                     u3440:
  5025   002030  2822               	incf	___flmul@bexp^0,w,c
  5026   002032  A4D8               	btfss	status,2,c
  5027   002034  EF1E  F010         	goto	u3451
  5028   002038  EF20  F010         	goto	u3450
  5029   00203C                     u3451:
  5030   00203C  EF28  F010         	goto	l4238
  5031   002040                     u3450:
  5032   002040  0E00               	movlw	0
  5033   002042  6E10               	movwf	___flmul@b^0,c
  5034   002044  0E00               	movlw	0
  5035   002046  6E11               	movwf	(___flmul@b+1)^0,c
  5036   002048  0E00               	movlw	0
  5037   00204A  6E12               	movwf	(___flmul@b+2)^0,c
  5038   00204C  0E00               	movlw	0
  5039   00204E  6E13               	movwf	(___flmul@b+3)^0,c
  5040   002050                     l4238:
  5041   002050  8E12               	bsf	(___flmul@b+2)^0,7,c
  5042   002052  EF33  F010         	goto	l4242
  5043   002056                     l4240:
  5044   002056  0E00               	movlw	0
  5045   002058  6E10               	movwf	___flmul@b^0,c
  5046   00205A  0E00               	movlw	0
  5047   00205C  6E11               	movwf	(___flmul@b+1)^0,c
  5048   00205E  0E00               	movlw	0
  5049   002060  6E12               	movwf	(___flmul@b+2)^0,c
  5050   002062  0E00               	movlw	0
  5051   002064  6E13               	movwf	(___flmul@b+3)^0,c
  5052   002066                     l4242:
  5053   002066  5017               	movf	(___flmul@a+3)^0,w,c
  5054   002068  0B80               	andlw	128
  5055   00206A  1A1C               	xorwf	___flmul@sign^0,f,c
  5056   00206C  5017               	movf	(___flmul@a+3)^0,w,c
  5057   00206E  2417               	addwf	(___flmul@a+3)^0,w,c
  5058   002070  6E21               	movwf	___flmul@aexp^0,c
  5059   002072  AE16               	btfss	(___flmul@a+2)^0,7,c
  5060   002074  EF3E  F010         	goto	u3461
  5061   002078  EF40  F010         	goto	u3460
  5062   00207C                     u3461:
  5063   00207C  EF41  F010         	goto	l4250
  5064   002080                     u3460:
  5065   002080  8021               	bsf	___flmul@aexp^0,0,c
  5066   002082                     l4250:
  5067   002082  5021               	movf	___flmul@aexp^0,w,c
  5068   002084  B4D8               	btfsc	status,2,c
  5069   002086  EF47  F010         	goto	u3471
  5070   00208A  EF49  F010         	goto	u3470
  5071   00208E                     u3471:
  5072   00208E  EF5C  F010         	goto	l4258
  5073   002092                     u3470:
  5074   002092  2821               	incf	___flmul@aexp^0,w,c
  5075   002094  A4D8               	btfss	status,2,c
  5076   002096  EF4F  F010         	goto	u3481
  5077   00209A  EF51  F010         	goto	u3480
  5078   00209E                     u3481:
  5079   00209E  EF59  F010         	goto	l4256
  5080   0020A2                     u3480:
  5081   0020A2  0E00               	movlw	0
  5082   0020A4  6E14               	movwf	___flmul@a^0,c
  5083   0020A6  0E00               	movlw	0
  5084   0020A8  6E15               	movwf	(___flmul@a+1)^0,c
  5085   0020AA  0E00               	movlw	0
  5086   0020AC  6E16               	movwf	(___flmul@a+2)^0,c
  5087   0020AE  0E00               	movlw	0
  5088   0020B0  6E17               	movwf	(___flmul@a+3)^0,c
  5089   0020B2                     l4256:
  5090   0020B2  8E16               	bsf	(___flmul@a+2)^0,7,c
  5091   0020B4  EF64  F010         	goto	l1424
  5092   0020B8                     l4258:
  5093   0020B8  0E00               	movlw	0
  5094   0020BA  6E14               	movwf	___flmul@a^0,c
  5095   0020BC  0E00               	movlw	0
  5096   0020BE  6E15               	movwf	(___flmul@a+1)^0,c
  5097   0020C0  0E00               	movlw	0
  5098   0020C2  6E16               	movwf	(___flmul@a+2)^0,c
  5099   0020C4  0E00               	movlw	0
  5100   0020C6  6E17               	movwf	(___flmul@a+3)^0,c
  5101   0020C8                     l1424:
  5102   0020C8  5021               	movf	___flmul@aexp^0,w,c
  5103   0020CA  B4D8               	btfsc	status,2,c
  5104   0020CC  EF6A  F010         	goto	u3491
  5105   0020D0  EF6C  F010         	goto	u3490
  5106   0020D4                     u3491:
  5107   0020D4  EF74  F010         	goto	l4262
  5108   0020D8                     u3490:
  5109   0020D8  5022               	movf	___flmul@bexp^0,w,c
  5110   0020DA  A4D8               	btfss	status,2,c
  5111   0020DC  EF72  F010         	goto	u3501
  5112   0020E0  EF74  F010         	goto	u3500
  5113   0020E4                     u3501:
  5114   0020E4  EF7E  F010         	goto	l4266
  5115   0020E8                     u3500:
  5116   0020E8                     l4262:
  5117   0020E8  0E00               	movlw	0
  5118   0020EA  6E10               	movwf	?___flmul^0,c
  5119   0020EC  0E00               	movlw	0
  5120   0020EE  6E11               	movwf	(?___flmul+1)^0,c
  5121   0020F0  0E00               	movlw	0
  5122   0020F2  6E12               	movwf	(?___flmul+2)^0,c
  5123   0020F4  0E00               	movlw	0
  5124   0020F6  6E13               	movwf	(?___flmul+3)^0,c
  5125   0020F8  EF16  F012         	goto	l1428
  5126   0020FC                     l4266:
  5127   0020FC  5016               	movf	(___flmul@a+2)^0,w,c
  5128   0020FE  0210               	mulwf	___flmul@b^0,c
  5129   002100  CFF3 F027          	movff	prodl,___flmul@temp
  5130   002104  CFF4 F028          	movff	prodh,___flmul@temp+1
  5131   002108  5027               	movf	___flmul@temp^0,w,c
  5132   00210A  6E1D               	movwf	___flmul@grs^0,c
  5133   00210C  6A1E               	clrf	(___flmul@grs+1)^0,c
  5134   00210E  6A1F               	clrf	(___flmul@grs+2)^0,c
  5135   002110  6A20               	clrf	(___flmul@grs+3)^0,c
  5136   002112  5028               	movf	(___flmul@temp+1)^0,w,c
  5137   002114  6E23               	movwf	___flmul@prod^0,c
  5138   002116  6A24               	clrf	(___flmul@prod+1)^0,c
  5139   002118  6A25               	clrf	(___flmul@prod+2)^0,c
  5140   00211A  6A26               	clrf	(___flmul@prod+3)^0,c
  5141   00211C  5015               	movf	(___flmul@a+1)^0,w,c
  5142   00211E  0211               	mulwf	(___flmul@b+1)^0,c
  5143   002120  CFF3 F027          	movff	prodl,___flmul@temp
  5144   002124  CFF4 F028          	movff	prodh,___flmul@temp+1
  5145   002128  5027               	movf	___flmul@temp^0,w,c
  5146   00212A  261D               	addwf	___flmul@grs^0,f,c
  5147   00212C  0E00               	movlw	0
  5148   00212E  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5149   002130  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5150   002132  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5151   002134  5028               	movf	(___flmul@temp+1)^0,w,c
  5152   002136  2623               	addwf	___flmul@prod^0,f,c
  5153   002138  0E00               	movlw	0
  5154   00213A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5155   00213C  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5156   00213E  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5157   002140  5014               	movf	___flmul@a^0,w,c
  5158   002142  0212               	mulwf	(___flmul@b+2)^0,c
  5159   002144  CFF3 F027          	movff	prodl,___flmul@temp
  5160   002148  CFF4 F028          	movff	prodh,___flmul@temp+1
  5161   00214C  5027               	movf	___flmul@temp^0,w,c
  5162   00214E  261D               	addwf	___flmul@grs^0,f,c
  5163   002150  0E00               	movlw	0
  5164   002152  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5165   002154  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5166   002156  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5167   002158  5028               	movf	(___flmul@temp+1)^0,w,c
  5168   00215A  2623               	addwf	___flmul@prod^0,f,c
  5169   00215C  0E00               	movlw	0
  5170   00215E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5171   002160  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5172   002162  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5173   002164  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5174   002168  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5175   00216C  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5176   002170  6A1D               	clrf	___flmul@grs^0,c
  5177   002172  5014               	movf	___flmul@a^0,w,c
  5178   002174  0211               	mulwf	(___flmul@b+1)^0,c
  5179   002176  CFF3 F027          	movff	prodl,___flmul@temp
  5180   00217A  CFF4 F028          	movff	prodh,___flmul@temp+1
  5181   00217E  5027               	movf	___flmul@temp^0,w,c
  5182   002180  261D               	addwf	___flmul@grs^0,f,c
  5183   002182  5028               	movf	(___flmul@temp+1)^0,w,c
  5184   002184  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5185   002186  0E00               	movlw	0
  5186   002188  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5187   00218A  0E00               	movlw	0
  5188   00218C  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5189   00218E  5015               	movf	(___flmul@a+1)^0,w,c
  5190   002190  0210               	mulwf	___flmul@b^0,c
  5191   002192  CFF3 F027          	movff	prodl,___flmul@temp
  5192   002196  CFF4 F028          	movff	prodh,___flmul@temp+1
  5193   00219A  5027               	movf	___flmul@temp^0,w,c
  5194   00219C  261D               	addwf	___flmul@grs^0,f,c
  5195   00219E  5028               	movf	(___flmul@temp+1)^0,w,c
  5196   0021A0  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5197   0021A2  0E00               	movlw	0
  5198   0021A4  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5199   0021A6  0E00               	movlw	0
  5200   0021A8  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5201   0021AA  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5202   0021AE  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5203   0021B2  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5204   0021B6  6A1D               	clrf	___flmul@grs^0,c
  5205   0021B8  5014               	movf	___flmul@a^0,w,c
  5206   0021BA  0210               	mulwf	___flmul@b^0,c
  5207   0021BC  CFF3 F027          	movff	prodl,___flmul@temp
  5208   0021C0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5209   0021C4  5027               	movf	___flmul@temp^0,w,c
  5210   0021C6  261D               	addwf	___flmul@grs^0,f,c
  5211   0021C8  5028               	movf	(___flmul@temp+1)^0,w,c
  5212   0021CA  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5213   0021CC  0E00               	movlw	0
  5214   0021CE  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5215   0021D0  0E00               	movlw	0
  5216   0021D2  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5217   0021D4  5016               	movf	(___flmul@a+2)^0,w,c
  5218   0021D6  0211               	mulwf	(___flmul@b+1)^0,c
  5219   0021D8  CFF3 F027          	movff	prodl,___flmul@temp
  5220   0021DC  CFF4 F028          	movff	prodh,___flmul@temp+1
  5221   0021E0  5027               	movf	___flmul@temp^0,w,c
  5222   0021E2  2623               	addwf	___flmul@prod^0,f,c
  5223   0021E4  5028               	movf	(___flmul@temp+1)^0,w,c
  5224   0021E6  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5225   0021E8  0E00               	movlw	0
  5226   0021EA  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5227   0021EC  0E00               	movlw	0
  5228   0021EE  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5229   0021F0  5015               	movf	(___flmul@a+1)^0,w,c
  5230   0021F2  0212               	mulwf	(___flmul@b+2)^0,c
  5231   0021F4  CFF3 F027          	movff	prodl,___flmul@temp
  5232   0021F8  CFF4 F028          	movff	prodh,___flmul@temp+1
  5233   0021FC  5027               	movf	___flmul@temp^0,w,c
  5234   0021FE  2623               	addwf	___flmul@prod^0,f,c
  5235   002200  5028               	movf	(___flmul@temp+1)^0,w,c
  5236   002202  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5237   002204  0E00               	movlw	0
  5238   002206  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5239   002208  0E00               	movlw	0
  5240   00220A  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5241   00220C  5016               	movf	(___flmul@a+2)^0,w,c
  5242   00220E  0212               	mulwf	(___flmul@b+2)^0,c
  5243   002210  CFF3 F027          	movff	prodl,___flmul@temp
  5244   002214  CFF4 F028          	movff	prodh,___flmul@temp+1
  5245   002218  5027               	movf	___flmul@temp^0,w,c
  5246   00221A  6E18               	movwf	??___flmul^0,c
  5247   00221C  5028               	movf	(___flmul@temp+1)^0,w,c
  5248   00221E  6E19               	movwf	(??___flmul+1)^0,c
  5249   002220  6A1A               	clrf	(??___flmul+2)^0,c
  5250   002222  6A1B               	clrf	(??___flmul+3)^0,c
  5251   002224  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  5252   002228  C019  F01A         	movff	??___flmul+1,??___flmul+2
  5253   00222C  C018  F019         	movff	??___flmul,??___flmul+1
  5254   002230  6A18               	clrf	??___flmul^0,c
  5255   002232  5018               	movf	??___flmul^0,w,c
  5256   002234  2623               	addwf	___flmul@prod^0,f,c
  5257   002236  5019               	movf	(??___flmul+1)^0,w,c
  5258   002238  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5259   00223A  501A               	movf	(??___flmul+2)^0,w,c
  5260   00223C  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5261   00223E  501B               	movf	(??___flmul+3)^0,w,c
  5262   002240  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5263   002242  C01D  F018         	movff	___flmul@grs,??___flmul
  5264   002246  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
  5265   00224A  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
  5266   00224E  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
  5267   002252  0E19               	movlw	25
  5268   002254  EF31  F011         	goto	u3510
  5269   002258                     u3515:
  5270   002258  90D8               	bcf	status,0,c
  5271   00225A  321B               	rrcf	(??___flmul+3)^0,f,c
  5272   00225C  321A               	rrcf	(??___flmul+2)^0,f,c
  5273   00225E  3219               	rrcf	(??___flmul+1)^0,f,c
  5274   002260  3218               	rrcf	??___flmul^0,f,c
  5275   002262                     u3510:
  5276   002262  2EE8               	decfsz	wreg,f,c
  5277   002264  EF2C  F011         	goto	u3515
  5278   002268  5018               	movf	??___flmul^0,w,c
  5279   00226A  2623               	addwf	___flmul@prod^0,f,c
  5280   00226C  5019               	movf	(??___flmul+1)^0,w,c
  5281   00226E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5282   002270  501A               	movf	(??___flmul+2)^0,w,c
  5283   002272  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5284   002274  501B               	movf	(??___flmul+3)^0,w,c
  5285   002276  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5286   002278  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5287   00227C  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5288   002280  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5289   002284  6A1D               	clrf	___flmul@grs^0,c
  5290   002286  5021               	movf	___flmul@aexp^0,w,c
  5291   002288  C022  F018         	movff	___flmul@bexp,??___flmul
  5292   00228C  6A19               	clrf	(??___flmul+1)^0,c
  5293   00228E  2618               	addwf	??___flmul^0,f,c
  5294   002290  0E00               	movlw	0
  5295   002292  2219               	addwfc	(??___flmul+1)^0,f,c
  5296   002294  0E82               	movlw	130
  5297   002296  2418               	addwf	??___flmul^0,w,c
  5298   002298  6E27               	movwf	___flmul@temp^0,c
  5299   00229A  0EFF               	movlw	255
  5300   00229C  2019               	addwfc	(??___flmul+1)^0,w,c
  5301   00229E  6E28               	movwf	(___flmul@temp+1)^0,c
  5302   0022A0  EF67  F011         	goto	l4314
  5303   0022A4                     l4308:
  5304   0022A4  90D8               	bcf	status,0,c
  5305   0022A6  3623               	rlcf	___flmul@prod^0,f,c
  5306   0022A8  3624               	rlcf	(___flmul@prod+1)^0,f,c
  5307   0022AA  3625               	rlcf	(___flmul@prod+2)^0,f,c
  5308   0022AC  3626               	rlcf	(___flmul@prod+3)^0,f,c
  5309   0022AE  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5310   0022B0  EF5C  F011         	goto	u3521
  5311   0022B4  EF5E  F011         	goto	u3520
  5312   0022B8                     u3521:
  5313   0022B8  EF5F  F011         	goto	l1431
  5314   0022BC                     u3520:
  5315   0022BC  8023               	bsf	___flmul@prod^0,0,c
  5316   0022BE                     l1431:
  5317   0022BE  90D8               	bcf	status,0,c
  5318   0022C0  361D               	rlcf	___flmul@grs^0,f,c
  5319   0022C2  361E               	rlcf	(___flmul@grs+1)^0,f,c
  5320   0022C4  361F               	rlcf	(___flmul@grs+2)^0,f,c
  5321   0022C6  3620               	rlcf	(___flmul@grs+3)^0,f,c
  5322   0022C8  0627               	decf	___flmul@temp^0,f,c
  5323   0022CA  A0D8               	btfss	status,0,c
  5324   0022CC  0628               	decf	(___flmul@temp+1)^0,f,c
  5325   0022CE                     l4314:
  5326   0022CE  AE25               	btfss	(___flmul@prod+2)^0,7,c
  5327   0022D0  EF6C  F011         	goto	u3531
  5328   0022D4  EF6E  F011         	goto	u3530
  5329   0022D8                     u3531:
  5330   0022D8  EF52  F011         	goto	l4308
  5331   0022DC                     u3530:
  5332   0022DC  0E00               	movlw	0
  5333   0022DE  6E21               	movwf	___flmul@aexp^0,c
  5334   0022E0  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5335   0022E2  EF75  F011         	goto	u3541
  5336   0022E6  EF77  F011         	goto	u3540
  5337   0022EA                     u3541:
  5338   0022EA  EF9B  F011         	goto	l1433
  5339   0022EE                     u3540:
  5340   0022EE  0EFF               	movlw	255
  5341   0022F0  141D               	andwf	___flmul@grs^0,w,c
  5342   0022F2  6E18               	movwf	??___flmul^0,c
  5343   0022F4  0EFF               	movlw	255
  5344   0022F6  141E               	andwf	(___flmul@grs+1)^0,w,c
  5345   0022F8  6E19               	movwf	(??___flmul+1)^0,c
  5346   0022FA  0EFF               	movlw	255
  5347   0022FC  141F               	andwf	(___flmul@grs+2)^0,w,c
  5348   0022FE  6E1A               	movwf	(??___flmul+2)^0,c
  5349   002300  0E7F               	movlw	127
  5350   002302  1420               	andwf	(___flmul@grs+3)^0,w,c
  5351   002304  6E1B               	movwf	(??___flmul+3)^0,c
  5352   002306  5018               	movf	??___flmul^0,w,c
  5353   002308  1019               	iorwf	(??___flmul+1)^0,w,c
  5354   00230A  101A               	iorwf	(??___flmul+2)^0,w,c
  5355   00230C  101B               	iorwf	(??___flmul+3)^0,w,c
  5356   00230E  B4D8               	btfsc	status,2,c
  5357   002310  EF8C  F011         	goto	u3551
  5358   002314  EF8E  F011         	goto	u3550
  5359   002318                     u3551:
  5360   002318  EF92  F011         	goto	l1434
  5361   00231C                     u3550:
  5362   00231C                     l4322:
  5363   00231C  0E01               	movlw	1
  5364   00231E  6E21               	movwf	___flmul@aexp^0,c
  5365   002320  EF9B  F011         	goto	l1433
  5366   002324                     l1434:
  5367   002324  A023               	btfss	___flmul@prod^0,0,c
  5368   002326  EF97  F011         	goto	u3561
  5369   00232A  EF99  F011         	goto	u3560
  5370   00232E                     u3561:
  5371   00232E  EF9B  F011         	goto	l1433
  5372   002332                     u3560:
  5373   002332  EF8E  F011         	goto	l4322
  5374   002336                     l1433:
  5375   002336  5021               	movf	___flmul@aexp^0,w,c
  5376   002338  B4D8               	btfsc	status,2,c
  5377   00233A  EFA1  F011         	goto	u3571
  5378   00233E  EFA3  F011         	goto	u3570
  5379   002342                     u3571:
  5380   002342  EFC7  F011         	goto	l4334
  5381   002346                     u3570:
  5382   002346  0E01               	movlw	1
  5383   002348  2623               	addwf	___flmul@prod^0,f,c
  5384   00234A  0E00               	movlw	0
  5385   00234C  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5386   00234E  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5387   002350  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5388   002352  A026               	btfss	(___flmul@prod+3)^0,0,c
  5389   002354  EFAE  F011         	goto	u3581
  5390   002358  EFB0  F011         	goto	u3580
  5391   00235C                     u3581:
  5392   00235C  EFC7  F011         	goto	l4334
  5393   002360                     u3580:
  5394   002360  C023  F018         	movff	___flmul@prod,??___flmul
  5395   002364  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  5396   002368  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  5397   00236C  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  5398   002370  341B               	rlcf	(??___flmul+3)^0,w,c
  5399   002372  321B               	rrcf	(??___flmul+3)^0,f,c
  5400   002374  321A               	rrcf	(??___flmul+2)^0,f,c
  5401   002376  3219               	rrcf	(??___flmul+1)^0,f,c
  5402   002378  3218               	rrcf	??___flmul^0,f,c
  5403   00237A  C018  F023         	movff	??___flmul,___flmul@prod
  5404   00237E  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  5405   002382  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  5406   002386  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  5407   00238A  4A27               	infsnz	___flmul@temp^0,f,c
  5408   00238C  2A28               	incf	(___flmul@temp+1)^0,f,c
  5409   00238E                     l4334:
  5410   00238E  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5411   002390  EFD2  F011         	goto	u3591
  5412   002394  5028               	movf	(___flmul@temp+1)^0,w,c
  5413   002396  E108               	bnz	u3590
  5414   002398  2827               	incf	___flmul@temp^0,w,c
  5415   00239A  A0D8               	btfss	status,0,c
  5416   00239C  EFD2  F011         	goto	u3591
  5417   0023A0  EFD4  F011         	goto	u3590
  5418   0023A4                     u3591:
  5419   0023A4  EFDE  F011         	goto	l4338
  5420   0023A8                     u3590:
  5421   0023A8  0E00               	movlw	0
  5422   0023AA  6E23               	movwf	___flmul@prod^0,c
  5423   0023AC  0E00               	movlw	0
  5424   0023AE  6E24               	movwf	(___flmul@prod+1)^0,c
  5425   0023B0  0E80               	movlw	128
  5426   0023B2  6E25               	movwf	(___flmul@prod+2)^0,c
  5427   0023B4  0E7F               	movlw	127
  5428   0023B6  6E26               	movwf	(___flmul@prod+3)^0,c
  5429   0023B8  EF0C  F012         	goto	l4350
  5430   0023BC                     l4338:
  5431   0023BC  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5432   0023BE  EFEB  F011         	goto	u3600
  5433   0023C2  5028               	movf	(___flmul@temp+1)^0,w,c
  5434   0023C4  E106               	bnz	u3601
  5435   0023C6  0427               	decf	___flmul@temp^0,w,c
  5436   0023C8  B0D8               	btfsc	status,0,c
  5437   0023CA  EFE9  F011         	goto	u3601
  5438   0023CE  EFEB  F011         	goto	u3600
  5439   0023D2                     u3601:
  5440   0023D2  EFF7  F011         	goto	l1441
  5441   0023D6                     u3600:
  5442   0023D6  0E00               	movlw	0
  5443   0023D8  6E23               	movwf	___flmul@prod^0,c
  5444   0023DA  0E00               	movlw	0
  5445   0023DC  6E24               	movwf	(___flmul@prod+1)^0,c
  5446   0023DE  0E00               	movlw	0
  5447   0023E0  6E25               	movwf	(___flmul@prod+2)^0,c
  5448   0023E2  0E00               	movlw	0
  5449   0023E4  6E26               	movwf	(___flmul@prod+3)^0,c
  5450   0023E6  0E00               	movlw	0
  5451   0023E8  6E1C               	movwf	___flmul@sign^0,c
  5452   0023EA  EF0C  F012         	goto	l4350
  5453   0023EE                     l1441:
  5454   0023EE  C027  F022         	movff	___flmul@temp,___flmul@bexp
  5455   0023F2  0EFF               	movlw	255
  5456   0023F4  1623               	andwf	___flmul@prod^0,f,c
  5457   0023F6  0EFF               	movlw	255
  5458   0023F8  1624               	andwf	(___flmul@prod+1)^0,f,c
  5459   0023FA  0E7F               	movlw	127
  5460   0023FC  1625               	andwf	(___flmul@prod+2)^0,f,c
  5461   0023FE  0E00               	movlw	0
  5462   002400  1626               	andwf	(___flmul@prod+3)^0,f,c
  5463   002402  A022               	btfss	___flmul@bexp^0,0,c
  5464   002404  EF06  F012         	goto	u3611
  5465   002408  EF08  F012         	goto	u3610
  5466   00240C                     u3611:
  5467   00240C  EF09  F012         	goto	l4348
  5468   002410                     u3610:
  5469   002410  8E25               	bsf	(___flmul@prod+2)^0,7,c
  5470   002412                     l4348:
  5471   002412  90D8               	bcf	status,0,c
  5472   002414  3022               	rrcf	___flmul@bexp^0,w,c
  5473   002416  6E26               	movwf	(___flmul@prod+3)^0,c
  5474   002418                     l4350:
  5475   002418  501C               	movf	___flmul@sign^0,w,c
  5476   00241A  1226               	iorwf	(___flmul@prod+3)^0,f,c
  5477   00241C  C023  F010         	movff	___flmul@prod,?___flmul
  5478   002420  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  5479   002424  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  5480   002428  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  5481   00242C                     l1428:
  5482   00242C  0012               	return		;funcret
  5483   00242E                     __end_of___flmul:
  5484                           	callstack 0
  5485                           
  5486 ;; *************** function ___flge *****************
  5487 ;; Defined at:
  5488 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  ff1             4    1[COMRAM] unsigned char 
  5491 ;;  ff2             4    5[COMRAM] unsigned char 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;		None               void
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5503 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5505 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5506 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5507 ;;Total ram usage:       12 bytes
  5508 ;; Hardware stack levels used: 1
  5509 ;; Hardware stack levels required when called: 1
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_convert_rgb2hue
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text13
  5518   003770                     __ptext13:
  5519                           	callstack 0
  5520   003770                     ___flge:
  5521                           	callstack 27
  5522   003770  0E00               	movlw	0
  5523   003772  1402               	andwf	___flge@ff1^0,w,c
  5524   003774  6E0A               	movwf	??___flge^0,c
  5525   003776  0E00               	movlw	0
  5526   003778  1403               	andwf	(___flge@ff1+1)^0,w,c
  5527   00377A  6E0B               	movwf	(??___flge+1)^0,c
  5528   00377C  0E80               	movlw	128
  5529   00377E  1404               	andwf	(___flge@ff1+2)^0,w,c
  5530   003780  6E0C               	movwf	(??___flge+2)^0,c
  5531   003782  0E7F               	movlw	127
  5532   003784  1405               	andwf	(___flge@ff1+3)^0,w,c
  5533   003786  6E0D               	movwf	(??___flge+3)^0,c
  5534   003788  500A               	movf	??___flge^0,w,c
  5535   00378A  100B               	iorwf	(??___flge+1)^0,w,c
  5536   00378C  100C               	iorwf	(??___flge+2)^0,w,c
  5537   00378E  100D               	iorwf	(??___flge+3)^0,w,c
  5538   003790  A4D8               	btfss	status,2,c
  5539   003792  EFCD  F01B         	goto	u4101
  5540   003796  EFCF  F01B         	goto	u4100
  5541   00379A                     u4101:
  5542   00379A  EFD7  F01B         	goto	l4756
  5543   00379E                     u4100:
  5544   00379E  0E00               	movlw	0
  5545   0037A0  6E02               	movwf	___flge@ff1^0,c
  5546   0037A2  0E00               	movlw	0
  5547   0037A4  6E03               	movwf	(___flge@ff1+1)^0,c
  5548   0037A6  0E00               	movlw	0
  5549   0037A8  6E04               	movwf	(___flge@ff1+2)^0,c
  5550   0037AA  0E00               	movlw	0
  5551   0037AC  6E05               	movwf	(___flge@ff1+3)^0,c
  5552   0037AE                     l4756:
  5553   0037AE  0E00               	movlw	0
  5554   0037B0  1406               	andwf	___flge@ff2^0,w,c
  5555   0037B2  6E0A               	movwf	??___flge^0,c
  5556   0037B4  0E00               	movlw	0
  5557   0037B6  1407               	andwf	(___flge@ff2+1)^0,w,c
  5558   0037B8  6E0B               	movwf	(??___flge+1)^0,c
  5559   0037BA  0E80               	movlw	128
  5560   0037BC  1408               	andwf	(___flge@ff2+2)^0,w,c
  5561   0037BE  6E0C               	movwf	(??___flge+2)^0,c
  5562   0037C0  0E7F               	movlw	127
  5563   0037C2  1409               	andwf	(___flge@ff2+3)^0,w,c
  5564   0037C4  6E0D               	movwf	(??___flge+3)^0,c
  5565   0037C6  500A               	movf	??___flge^0,w,c
  5566   0037C8  100B               	iorwf	(??___flge+1)^0,w,c
  5567   0037CA  100C               	iorwf	(??___flge+2)^0,w,c
  5568   0037CC  100D               	iorwf	(??___flge+3)^0,w,c
  5569   0037CE  A4D8               	btfss	status,2,c
  5570   0037D0  EFEC  F01B         	goto	u4111
  5571   0037D4  EFEE  F01B         	goto	u4110
  5572   0037D8                     u4111:
  5573   0037D8  EFF6  F01B         	goto	l4760
  5574   0037DC                     u4110:
  5575   0037DC  0E00               	movlw	0
  5576   0037DE  6E06               	movwf	___flge@ff2^0,c
  5577   0037E0  0E00               	movlw	0
  5578   0037E2  6E07               	movwf	(___flge@ff2+1)^0,c
  5579   0037E4  0E00               	movlw	0
  5580   0037E6  6E08               	movwf	(___flge@ff2+2)^0,c
  5581   0037E8  0E00               	movlw	0
  5582   0037EA  6E09               	movwf	(___flge@ff2+3)^0,c
  5583   0037EC                     l4760:
  5584   0037EC  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5585   0037EE  EFFB  F01B         	goto	u4121
  5586   0037F2  EFFD  F01B         	goto	u4120
  5587   0037F6                     u4121:
  5588   0037F6  EF06  F01C         	goto	l4764
  5589   0037FA                     u4120:
  5590   0037FA  6C02               	negf	___flge@ff1^0,c
  5591   0037FC  1E03               	comf	(___flge@ff1+1)^0,f,c
  5592   0037FE  B0D8               	btfsc	status,0,c
  5593   003800  2A03               	incf	(___flge@ff1+1)^0,f,c
  5594   003802  1E04               	comf	(___flge@ff1+2)^0,f,c
  5595   003804  B0D8               	btfsc	status,0,c
  5596   003806  2A04               	incf	(___flge@ff1+2)^0,f,c
  5597   003808  0E80               	movlw	128
  5598   00380A  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5599   00380C                     l4764:
  5600   00380C  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5601   00380E  EF0B  F01C         	goto	u4131
  5602   003812  EF0D  F01C         	goto	u4130
  5603   003816                     u4131:
  5604   003816  EF16  F01C         	goto	l1075
  5605   00381A                     u4130:
  5606   00381A  6C06               	negf	___flge@ff2^0,c
  5607   00381C  1E07               	comf	(___flge@ff2+1)^0,f,c
  5608   00381E  B0D8               	btfsc	status,0,c
  5609   003820  2A07               	incf	(___flge@ff2+1)^0,f,c
  5610   003822  1E08               	comf	(___flge@ff2+2)^0,f,c
  5611   003824  B0D8               	btfsc	status,0,c
  5612   003826  2A08               	incf	(___flge@ff2+2)^0,f,c
  5613   003828  0E80               	movlw	128
  5614   00382A  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5615   00382C                     l1075:
  5616   00382C  0E00               	movlw	0
  5617   00382E  1A02               	xorwf	___flge@ff1^0,f,c
  5618   003830  0E00               	movlw	0
  5619   003832  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5620   003834  0E00               	movlw	0
  5621   003836  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5622   003838  0E80               	movlw	128
  5623   00383A  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5624   00383C  0E00               	movlw	0
  5625   00383E  1A06               	xorwf	___flge@ff2^0,f,c
  5626   003840  0E00               	movlw	0
  5627   003842  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5628   003844  0E00               	movlw	0
  5629   003846  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5630   003848  0E80               	movlw	128
  5631   00384A  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5632   00384C  5006               	movf	___flge@ff2^0,w,c
  5633   00384E  5C02               	subwf	___flge@ff1^0,w,c
  5634   003850  5007               	movf	(___flge@ff2+1)^0,w,c
  5635   003852  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5636   003854  5008               	movf	(___flge@ff2+2)^0,w,c
  5637   003856  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5638   003858  5009               	movf	(___flge@ff2+3)^0,w,c
  5639   00385A  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5640   00385C  B0D8               	btfsc	status,0,c
  5641   00385E  EF33  F01C         	goto	u4141
  5642   003862  EF35  F01C         	goto	u4140
  5643   003866                     u4141:
  5644   003866  EF38  F01C         	goto	l4770
  5645   00386A                     u4140:
  5646   00386A  90D8               	bcf	status,0,c
  5647   00386C  EF39  F01C         	goto	l1080
  5648   003870                     l4770:
  5649   003870  80D8               	bsf	status,0,c
  5650   003872                     l1080:
  5651   003872  0012               	return		;funcret
  5652   003874                     __end_of___flge:
  5653                           	callstack 0
  5654                           
  5655 ;; *************** function ___fleq *****************
  5656 ;; Defined at:
  5657 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  ff1             4    1[COMRAM] unsigned char 
  5660 ;;  ff2             4    5[COMRAM] unsigned char 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;		None
  5663 ;; Return value:  Size  Location     Type
  5664 ;;		None               void
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5672 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5674 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5675 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5676 ;;Total ram usage:       12 bytes
  5677 ;; Hardware stack levels used: 1
  5678 ;; Hardware stack levels required when called: 1
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_convert_rgb2hue
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text14
  5687   003D36                     __ptext14:
  5688                           	callstack 0
  5689   003D36                     ___fleq:
  5690                           	callstack 27
  5691   003D36  0E00               	movlw	0
  5692   003D38  1402               	andwf	___fleq@ff1^0,w,c
  5693   003D3A  6E0A               	movwf	??___fleq^0,c
  5694   003D3C  0E00               	movlw	0
  5695   003D3E  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5696   003D40  6E0B               	movwf	(??___fleq+1)^0,c
  5697   003D42  0E80               	movlw	128
  5698   003D44  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5699   003D46  6E0C               	movwf	(??___fleq+2)^0,c
  5700   003D48  0E7F               	movlw	127
  5701   003D4A  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5702   003D4C  6E0D               	movwf	(??___fleq+3)^0,c
  5703   003D4E  500A               	movf	??___fleq^0,w,c
  5704   003D50  100B               	iorwf	(??___fleq+1)^0,w,c
  5705   003D52  100C               	iorwf	(??___fleq+2)^0,w,c
  5706   003D54  100D               	iorwf	(??___fleq+3)^0,w,c
  5707   003D56  A4D8               	btfss	status,2,c
  5708   003D58  EFB0  F01E         	goto	u4071
  5709   003D5C  EFB2  F01E         	goto	u4070
  5710   003D60                     u4071:
  5711   003D60  EFBA  F01E         	goto	l4740
  5712   003D64                     u4070:
  5713   003D64  0E00               	movlw	0
  5714   003D66  6E02               	movwf	___fleq@ff1^0,c
  5715   003D68  0E00               	movlw	0
  5716   003D6A  6E03               	movwf	(___fleq@ff1+1)^0,c
  5717   003D6C  0E00               	movlw	0
  5718   003D6E  6E04               	movwf	(___fleq@ff1+2)^0,c
  5719   003D70  0E00               	movlw	0
  5720   003D72  6E05               	movwf	(___fleq@ff1+3)^0,c
  5721   003D74                     l4740:
  5722   003D74  0E00               	movlw	0
  5723   003D76  1406               	andwf	___fleq@ff2^0,w,c
  5724   003D78  6E0A               	movwf	??___fleq^0,c
  5725   003D7A  0E00               	movlw	0
  5726   003D7C  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5727   003D7E  6E0B               	movwf	(??___fleq+1)^0,c
  5728   003D80  0E80               	movlw	128
  5729   003D82  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5730   003D84  6E0C               	movwf	(??___fleq+2)^0,c
  5731   003D86  0E7F               	movlw	127
  5732   003D88  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5733   003D8A  6E0D               	movwf	(??___fleq+3)^0,c
  5734   003D8C  500A               	movf	??___fleq^0,w,c
  5735   003D8E  100B               	iorwf	(??___fleq+1)^0,w,c
  5736   003D90  100C               	iorwf	(??___fleq+2)^0,w,c
  5737   003D92  100D               	iorwf	(??___fleq+3)^0,w,c
  5738   003D94  A4D8               	btfss	status,2,c
  5739   003D96  EFCF  F01E         	goto	u4081
  5740   003D9A  EFD1  F01E         	goto	u4080
  5741   003D9E                     u4081:
  5742   003D9E  EFD9  F01E         	goto	l4744
  5743   003DA2                     u4080:
  5744   003DA2  0E00               	movlw	0
  5745   003DA4  6E06               	movwf	___fleq@ff2^0,c
  5746   003DA6  0E00               	movlw	0
  5747   003DA8  6E07               	movwf	(___fleq@ff2+1)^0,c
  5748   003DAA  0E00               	movlw	0
  5749   003DAC  6E08               	movwf	(___fleq@ff2+2)^0,c
  5750   003DAE  0E00               	movlw	0
  5751   003DB0  6E09               	movwf	(___fleq@ff2+3)^0,c
  5752   003DB2                     l4744:
  5753   003DB2  5006               	movf	___fleq@ff2^0,w,c
  5754   003DB4  1802               	xorwf	___fleq@ff1^0,w,c
  5755   003DB6  E10F               	bnz	u4090
  5756   003DB8  5007               	movf	(___fleq@ff2+1)^0,w,c
  5757   003DBA  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5758   003DBC  E10C               	bnz	u4090
  5759   003DBE  5008               	movf	(___fleq@ff2+2)^0,w,c
  5760   003DC0  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5761   003DC2  E109               	bnz	u4090
  5762   003DC4  5009               	movf	(___fleq@ff2+3)^0,w,c
  5763   003DC6  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5764   003DC8  B4D8               	btfsc	status,2,c
  5765   003DCA  EFE9  F01E         	goto	u4091
  5766   003DCE  EFEB  F01E         	goto	u4090
  5767   003DD2                     u4091:
  5768   003DD2  EFEE  F01E         	goto	l4748
  5769   003DD6                     u4090:
  5770   003DD6  90D8               	bcf	status,0,c
  5771   003DD8  EFEF  F01E         	goto	l1069
  5772   003DDC                     l4748:
  5773   003DDC  80D8               	bsf	status,0,c
  5774   003DDE                     l1069:
  5775   003DDE  0012               	return		;funcret
  5776   003DE0                     __end_of___fleq:
  5777                           	callstack 0
  5778                           
  5779 ;; *************** function ___fldiv *****************
  5780 ;; Defined at:
  5781 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  b               4   40[COMRAM] unsigned char 
  5784 ;;  a               4   44[COMRAM] unsigned char 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  grs             4   59[COMRAM] unsigned long 
  5787 ;;  rem             4   52[COMRAM] unsigned long 
  5788 ;;  new_exp         2   57[COMRAM] short 
  5789 ;;  aexp            1   64[COMRAM] unsigned char 
  5790 ;;  bexp            1   63[COMRAM] unsigned char 
  5791 ;;  sign            1   56[COMRAM] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  4   40[COMRAM] unsigned char 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5801 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;Total ram usage:       25 bytes
  5806 ;; Hardware stack levels used: 1
  5807 ;; Hardware stack levels required when called: 1
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_convert_rgb2hue
  5812 ;;		_main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text15
  5817   00242E                     __ptext15:
  5818                           	callstack 0
  5819   00242E                     ___fldiv:
  5820                           	callstack 27
  5821   00242E  502C               	movf	(___fldiv@b+3)^0,w,c
  5822   002430  0B80               	andlw	128
  5823   002432  6E39               	movwf	___fldiv@sign^0,c
  5824   002434  502C               	movf	(___fldiv@b+3)^0,w,c
  5825   002436  242C               	addwf	(___fldiv@b+3)^0,w,c
  5826   002438  6E40               	movwf	___fldiv@bexp^0,c
  5827   00243A  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  5828   00243C  EF22  F012         	goto	u3841
  5829   002440  EF24  F012         	goto	u3840
  5830   002444                     u3841:
  5831   002444  EF25  F012         	goto	l4598
  5832   002448                     u3840:
  5833   002448  8040               	bsf	___fldiv@bexp^0,0,c
  5834   00244A                     l4598:
  5835   00244A  5040               	movf	___fldiv@bexp^0,w,c
  5836   00244C  B4D8               	btfsc	status,2,c
  5837   00244E  EF2B  F012         	goto	u3851
  5838   002452  EF2D  F012         	goto	u3850
  5839   002456                     u3851:
  5840   002456  EF42  F012         	goto	l4608
  5841   00245A                     u3850:
  5842   00245A  2840               	incf	___fldiv@bexp^0,w,c
  5843   00245C  A4D8               	btfss	status,2,c
  5844   00245E  EF33  F012         	goto	u3861
  5845   002462  EF35  F012         	goto	u3860
  5846   002466                     u3861:
  5847   002466  EF3D  F012         	goto	l4604
  5848   00246A                     u3860:
  5849   00246A  0E00               	movlw	0
  5850   00246C  6E29               	movwf	___fldiv@b^0,c
  5851   00246E  0E00               	movlw	0
  5852   002470  6E2A               	movwf	(___fldiv@b+1)^0,c
  5853   002472  0E00               	movlw	0
  5854   002474  6E2B               	movwf	(___fldiv@b+2)^0,c
  5855   002476  0E00               	movlw	0
  5856   002478  6E2C               	movwf	(___fldiv@b+3)^0,c
  5857   00247A                     l4604:
  5858   00247A  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  5859   00247C  0E00               	movlw	0
  5860   00247E  6E2C               	movwf	(___fldiv@b+3)^0,c
  5861   002480  EF4A  F012         	goto	l4610
  5862   002484                     l4608:
  5863   002484  0E00               	movlw	0
  5864   002486  6E29               	movwf	___fldiv@b^0,c
  5865   002488  0E00               	movlw	0
  5866   00248A  6E2A               	movwf	(___fldiv@b+1)^0,c
  5867   00248C  0E00               	movlw	0
  5868   00248E  6E2B               	movwf	(___fldiv@b+2)^0,c
  5869   002490  0E00               	movlw	0
  5870   002492  6E2C               	movwf	(___fldiv@b+3)^0,c
  5871   002494                     l4610:
  5872   002494  5030               	movf	(___fldiv@a+3)^0,w,c
  5873   002496  0B80               	andlw	128
  5874   002498  1A39               	xorwf	___fldiv@sign^0,f,c
  5875   00249A  5030               	movf	(___fldiv@a+3)^0,w,c
  5876   00249C  2430               	addwf	(___fldiv@a+3)^0,w,c
  5877   00249E  6E41               	movwf	___fldiv@aexp^0,c
  5878   0024A0  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  5879   0024A2  EF55  F012         	goto	u3871
  5880   0024A6  EF57  F012         	goto	u3870
  5881   0024AA                     u3871:
  5882   0024AA  EF58  F012         	goto	l4618
  5883   0024AE                     u3870:
  5884   0024AE  8041               	bsf	___fldiv@aexp^0,0,c
  5885   0024B0                     l4618:
  5886   0024B0  5041               	movf	___fldiv@aexp^0,w,c
  5887   0024B2  B4D8               	btfsc	status,2,c
  5888   0024B4  EF5E  F012         	goto	u3881
  5889   0024B8  EF60  F012         	goto	u3880
  5890   0024BC                     u3881:
  5891   0024BC  EF75  F012         	goto	l4628
  5892   0024C0                     u3880:
  5893   0024C0  2841               	incf	___fldiv@aexp^0,w,c
  5894   0024C2  A4D8               	btfss	status,2,c
  5895   0024C4  EF66  F012         	goto	u3891
  5896   0024C8  EF68  F012         	goto	u3890
  5897   0024CC                     u3891:
  5898   0024CC  EF70  F012         	goto	l4624
  5899   0024D0                     u3890:
  5900   0024D0  0E00               	movlw	0
  5901   0024D2  6E2D               	movwf	___fldiv@a^0,c
  5902   0024D4  0E00               	movlw	0
  5903   0024D6  6E2E               	movwf	(___fldiv@a+1)^0,c
  5904   0024D8  0E00               	movlw	0
  5905   0024DA  6E2F               	movwf	(___fldiv@a+2)^0,c
  5906   0024DC  0E00               	movlw	0
  5907   0024DE  6E30               	movwf	(___fldiv@a+3)^0,c
  5908   0024E0                     l4624:
  5909   0024E0  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  5910   0024E2  0E00               	movlw	0
  5911   0024E4  6E30               	movwf	(___fldiv@a+3)^0,c
  5912   0024E6  EF7D  F012         	goto	l4630
  5913   0024EA                     l4628:
  5914   0024EA  0E00               	movlw	0
  5915   0024EC  6E2D               	movwf	___fldiv@a^0,c
  5916   0024EE  0E00               	movlw	0
  5917   0024F0  6E2E               	movwf	(___fldiv@a+1)^0,c
  5918   0024F2  0E00               	movlw	0
  5919   0024F4  6E2F               	movwf	(___fldiv@a+2)^0,c
  5920   0024F6  0E00               	movlw	0
  5921   0024F8  6E30               	movwf	(___fldiv@a+3)^0,c
  5922   0024FA                     l4630:
  5923   0024FA  502D               	movf	___fldiv@a^0,w,c
  5924   0024FC  102E               	iorwf	(___fldiv@a+1)^0,w,c
  5925   0024FE  102F               	iorwf	(___fldiv@a+2)^0,w,c
  5926   002500  1030               	iorwf	(___fldiv@a+3)^0,w,c
  5927   002502  A4D8               	btfss	status,2,c
  5928   002504  EF86  F012         	goto	u3901
  5929   002508  EF88  F012         	goto	u3900
  5930   00250C                     u3901:
  5931   00250C  EFA0  F012         	goto	l4642
  5932   002510                     u3900:
  5933   002510  0E00               	movlw	0
  5934   002512  6E29               	movwf	___fldiv@b^0,c
  5935   002514  0E00               	movlw	0
  5936   002516  6E2A               	movwf	(___fldiv@b+1)^0,c
  5937   002518  0E00               	movlw	0
  5938   00251A  6E2B               	movwf	(___fldiv@b+2)^0,c
  5939   00251C  0E00               	movlw	0
  5940   00251E  6E2C               	movwf	(___fldiv@b+3)^0,c
  5941   002520  0E80               	movlw	128
  5942   002522  122B               	iorwf	(___fldiv@b+2)^0,f,c
  5943   002524  0E7F               	movlw	127
  5944   002526  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5945   002528                     l4636:
  5946   002528  5039               	movf	___fldiv@sign^0,w,c
  5947   00252A  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5948   00252C  C029  F029         	movff	___fldiv@b,?___fldiv
  5949   002530  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  5950   002534  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  5951   002538  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  5952   00253C  EFE3  F013         	goto	l1392
  5953   002540                     l4642:
  5954   002540  5040               	movf	___fldiv@bexp^0,w,c
  5955   002542  A4D8               	btfss	status,2,c
  5956   002544  EFA6  F012         	goto	u3911
  5957   002548  EFA8  F012         	goto	u3910
  5958   00254C                     u3911:
  5959   00254C  EFB2  F012         	goto	l4650
  5960   002550                     u3910:
  5961   002550  0E00               	movlw	0
  5962   002552  6E29               	movwf	?___fldiv^0,c
  5963   002554  0E00               	movlw	0
  5964   002556  6E2A               	movwf	(?___fldiv+1)^0,c
  5965   002558  0E00               	movlw	0
  5966   00255A  6E2B               	movwf	(?___fldiv+2)^0,c
  5967   00255C  0E00               	movlw	0
  5968   00255E  6E2C               	movwf	(?___fldiv+3)^0,c
  5969   002560  EFE3  F013         	goto	l1392
  5970   002564                     l4650:
  5971   002564  5041               	movf	___fldiv@aexp^0,w,c
  5972   002566  C040  F031         	movff	___fldiv@bexp,??___fldiv
  5973   00256A  6A32               	clrf	(??___fldiv+1)^0,c
  5974   00256C  5E31               	subwf	??___fldiv^0,f,c
  5975   00256E  0E00               	movlw	0
  5976   002570  5A32               	subwfb	(??___fldiv+1)^0,f,c
  5977   002572  0E7F               	movlw	127
  5978   002574  2431               	addwf	??___fldiv^0,w,c
  5979   002576  6E3A               	movwf	___fldiv@new_exp^0,c
  5980   002578  0E00               	movlw	0
  5981   00257A  2032               	addwfc	(??___fldiv+1)^0,w,c
  5982   00257C  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5983   00257E  C029  F035         	movff	___fldiv@b,___fldiv@rem
  5984   002582  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  5985   002586  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  5986   00258A  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  5987   00258E  0E00               	movlw	0
  5988   002590  6E29               	movwf	___fldiv@b^0,c
  5989   002592  0E00               	movlw	0
  5990   002594  6E2A               	movwf	(___fldiv@b+1)^0,c
  5991   002596  0E00               	movlw	0
  5992   002598  6E2B               	movwf	(___fldiv@b+2)^0,c
  5993   00259A  0E00               	movlw	0
  5994   00259C  6E2C               	movwf	(___fldiv@b+3)^0,c
  5995   00259E  0E00               	movlw	0
  5996   0025A0  6E3C               	movwf	___fldiv@grs^0,c
  5997   0025A2  0E00               	movlw	0
  5998   0025A4  6E3D               	movwf	(___fldiv@grs+1)^0,c
  5999   0025A6  0E00               	movlw	0
  6000   0025A8  6E3E               	movwf	(___fldiv@grs+2)^0,c
  6001   0025AA  0E00               	movlw	0
  6002   0025AC  6E3F               	movwf	(___fldiv@grs+3)^0,c
  6003   0025AE  0E00               	movlw	0
  6004   0025B0  6E41               	movwf	___fldiv@aexp^0,c
  6005   0025B2  EF13  F013         	goto	l1394
  6006   0025B6                     l4660:
  6007   0025B6  5041               	movf	___fldiv@aexp^0,w,c
  6008   0025B8  B4D8               	btfsc	status,2,c
  6009   0025BA  EFE1  F012         	goto	u3921
  6010   0025BE  EFE3  F012         	goto	u3920
  6011   0025C2                     u3921:
  6012   0025C2  EFFA  F012         	goto	l4668
  6013   0025C6                     u3920:
  6014   0025C6  90D8               	bcf	status,0,c
  6015   0025C8  3635               	rlcf	___fldiv@rem^0,f,c
  6016   0025CA  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  6017   0025CC  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  6018   0025CE  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  6019   0025D0  90D8               	bcf	status,0,c
  6020   0025D2  3629               	rlcf	___fldiv@b^0,f,c
  6021   0025D4  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6022   0025D6  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6023   0025D8  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6024   0025DA  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6025   0025DC  EFF2  F012         	goto	u3931
  6026   0025E0  EFF4  F012         	goto	u3930
  6027   0025E4                     u3931:
  6028   0025E4  EFF5  F012         	goto	l1397
  6029   0025E8                     u3930:
  6030   0025E8  8029               	bsf	___fldiv@b^0,0,c
  6031   0025EA                     l1397:
  6032   0025EA  90D8               	bcf	status,0,c
  6033   0025EC  363C               	rlcf	___fldiv@grs^0,f,c
  6034   0025EE  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6035   0025F0  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6036   0025F2  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6037   0025F4                     l4668:
  6038   0025F4  502D               	movf	___fldiv@a^0,w,c
  6039   0025F6  5C35               	subwf	___fldiv@rem^0,w,c
  6040   0025F8  502E               	movf	(___fldiv@a+1)^0,w,c
  6041   0025FA  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  6042   0025FC  502F               	movf	(___fldiv@a+2)^0,w,c
  6043   0025FE  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  6044   002600  5030               	movf	(___fldiv@a+3)^0,w,c
  6045   002602  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  6046   002604  A0D8               	btfss	status,0,c
  6047   002606  EF07  F013         	goto	u3941
  6048   00260A  EF09  F013         	goto	u3940
  6049   00260E                     u3941:
  6050   00260E  EF12  F013         	goto	l4674
  6051   002612                     u3940:
  6052   002612  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  6053   002614  502D               	movf	___fldiv@a^0,w,c
  6054   002616  5E35               	subwf	___fldiv@rem^0,f,c
  6055   002618  502E               	movf	(___fldiv@a+1)^0,w,c
  6056   00261A  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  6057   00261C  502F               	movf	(___fldiv@a+2)^0,w,c
  6058   00261E  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  6059   002620  5030               	movf	(___fldiv@a+3)^0,w,c
  6060   002622  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  6061   002624                     l4674:
  6062   002624  2A41               	incf	___fldiv@aexp^0,f,c
  6063   002626                     l1394:
  6064   002626  0E19               	movlw	25
  6065   002628  6441               	cpfsgt	___fldiv@aexp^0,c
  6066   00262A  EF19  F013         	goto	u3951
  6067   00262E  EF1B  F013         	goto	u3950
  6068   002632                     u3951:
  6069   002632  EFDB  F012         	goto	l4660
  6070   002636                     u3950:
  6071   002636  5035               	movf	___fldiv@rem^0,w,c
  6072   002638  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  6073   00263A  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  6074   00263C  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  6075   00263E  B4D8               	btfsc	status,2,c
  6076   002640  EF24  F013         	goto	u3961
  6077   002644  EF26  F013         	goto	u3960
  6078   002648                     u3961:
  6079   002648  EF3E  F013         	goto	l4686
  6080   00264C                     u3960:
  6081   00264C  803C               	bsf	___fldiv@grs^0,0,c
  6082   00264E  EF3E  F013         	goto	l4686
  6083   002652                     l4680:
  6084   002652  90D8               	bcf	status,0,c
  6085   002654  3629               	rlcf	___fldiv@b^0,f,c
  6086   002656  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6087   002658  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6088   00265A  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6089   00265C  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6090   00265E  EF33  F013         	goto	u3971
  6091   002662  EF35  F013         	goto	u3970
  6092   002666                     u3971:
  6093   002666  EF36  F013         	goto	l1403
  6094   00266A                     u3970:
  6095   00266A  8029               	bsf	___fldiv@b^0,0,c
  6096   00266C                     l1403:
  6097   00266C  90D8               	bcf	status,0,c
  6098   00266E  363C               	rlcf	___fldiv@grs^0,f,c
  6099   002670  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6100   002672  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6101   002674  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6102   002676  063A               	decf	___fldiv@new_exp^0,f,c
  6103   002678  A0D8               	btfss	status,0,c
  6104   00267A  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  6105   00267C                     l4686:
  6106   00267C  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  6107   00267E  EF43  F013         	goto	u3981
  6108   002682  EF45  F013         	goto	u3980
  6109   002686                     u3981:
  6110   002686  EF29  F013         	goto	l4680
  6111   00268A                     u3980:
  6112   00268A  0E00               	movlw	0
  6113   00268C  6E41               	movwf	___fldiv@aexp^0,c
  6114   00268E  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6115   002690  EF4C  F013         	goto	u3991
  6116   002694  EF4E  F013         	goto	u3990
  6117   002698                     u3991:
  6118   002698  EF72  F013         	goto	l1405
  6119   00269C                     u3990:
  6120   00269C  0EFF               	movlw	255
  6121   00269E  143C               	andwf	___fldiv@grs^0,w,c
  6122   0026A0  6E31               	movwf	??___fldiv^0,c
  6123   0026A2  0EFF               	movlw	255
  6124   0026A4  143D               	andwf	(___fldiv@grs+1)^0,w,c
  6125   0026A6  6E32               	movwf	(??___fldiv+1)^0,c
  6126   0026A8  0EFF               	movlw	255
  6127   0026AA  143E               	andwf	(___fldiv@grs+2)^0,w,c
  6128   0026AC  6E33               	movwf	(??___fldiv+2)^0,c
  6129   0026AE  0E7F               	movlw	127
  6130   0026B0  143F               	andwf	(___fldiv@grs+3)^0,w,c
  6131   0026B2  6E34               	movwf	(??___fldiv+3)^0,c
  6132   0026B4  5031               	movf	??___fldiv^0,w,c
  6133   0026B6  1032               	iorwf	(??___fldiv+1)^0,w,c
  6134   0026B8  1033               	iorwf	(??___fldiv+2)^0,w,c
  6135   0026BA  1034               	iorwf	(??___fldiv+3)^0,w,c
  6136   0026BC  B4D8               	btfsc	status,2,c
  6137   0026BE  EF63  F013         	goto	u4001
  6138   0026C2  EF65  F013         	goto	u4000
  6139   0026C6                     u4001:
  6140   0026C6  EF69  F013         	goto	l1406
  6141   0026CA                     u4000:
  6142   0026CA                     l4694:
  6143   0026CA  0E01               	movlw	1
  6144   0026CC  6E41               	movwf	___fldiv@aexp^0,c
  6145   0026CE  EF72  F013         	goto	l1405
  6146   0026D2                     l1406:
  6147   0026D2  A029               	btfss	___fldiv@b^0,0,c
  6148   0026D4  EF6E  F013         	goto	u4011
  6149   0026D8  EF70  F013         	goto	u4010
  6150   0026DC                     u4011:
  6151   0026DC  EF72  F013         	goto	l1405
  6152   0026E0                     u4010:
  6153   0026E0  EF65  F013         	goto	l4694
  6154   0026E4                     l1405:
  6155   0026E4  5041               	movf	___fldiv@aexp^0,w,c
  6156   0026E6  B4D8               	btfsc	status,2,c
  6157   0026E8  EF78  F013         	goto	u4021
  6158   0026EC  EF7A  F013         	goto	u4020
  6159   0026F0                     u4021:
  6160   0026F0  EF9E  F013         	goto	l4706
  6161   0026F4                     u4020:
  6162   0026F4  0E01               	movlw	1
  6163   0026F6  2629               	addwf	___fldiv@b^0,f,c
  6164   0026F8  0E00               	movlw	0
  6165   0026FA  222A               	addwfc	(___fldiv@b+1)^0,f,c
  6166   0026FC  222B               	addwfc	(___fldiv@b+2)^0,f,c
  6167   0026FE  222C               	addwfc	(___fldiv@b+3)^0,f,c
  6168   002700  A02C               	btfss	(___fldiv@b+3)^0,0,c
  6169   002702  EF85  F013         	goto	u4031
  6170   002706  EF87  F013         	goto	u4030
  6171   00270A                     u4031:
  6172   00270A  EF9E  F013         	goto	l4706
  6173   00270E                     u4030:
  6174   00270E  C029  F031         	movff	___fldiv@b,??___fldiv
  6175   002712  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  6176   002716  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  6177   00271A  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  6178   00271E  3434               	rlcf	(??___fldiv+3)^0,w,c
  6179   002720  3234               	rrcf	(??___fldiv+3)^0,f,c
  6180   002722  3233               	rrcf	(??___fldiv+2)^0,f,c
  6181   002724  3232               	rrcf	(??___fldiv+1)^0,f,c
  6182   002726  3231               	rrcf	??___fldiv^0,f,c
  6183   002728  C031  F029         	movff	??___fldiv,___fldiv@b
  6184   00272C  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  6185   002730  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  6186   002734  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  6187   002738  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  6188   00273A  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  6189   00273C                     l4706:
  6190   00273C  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6191   00273E  EFA9  F013         	goto	u4041
  6192   002742  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6193   002744  E108               	bnz	u4040
  6194   002746  283A               	incf	___fldiv@new_exp^0,w,c
  6195   002748  A0D8               	btfss	status,0,c
  6196   00274A  EFA9  F013         	goto	u4041
  6197   00274E  EFAB  F013         	goto	u4040
  6198   002752                     u4041:
  6199   002752  EFB6  F013         	goto	l4710
  6200   002756                     u4040:
  6201   002756  0E00               	movlw	0
  6202   002758  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6203   00275A  683A               	setf	___fldiv@new_exp^0,c
  6204   00275C  0E00               	movlw	0
  6205   00275E  6E29               	movwf	___fldiv@b^0,c
  6206   002760  0E00               	movlw	0
  6207   002762  6E2A               	movwf	(___fldiv@b+1)^0,c
  6208   002764  0E00               	movlw	0
  6209   002766  6E2B               	movwf	(___fldiv@b+2)^0,c
  6210   002768  0E00               	movlw	0
  6211   00276A  6E2C               	movwf	(___fldiv@b+3)^0,c
  6212   00276C                     l4710:
  6213   00276C  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6214   00276E  EFC3  F013         	goto	u4050
  6215   002772  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6216   002774  E106               	bnz	u4051
  6217   002776  043A               	decf	___fldiv@new_exp^0,w,c
  6218   002778  B0D8               	btfsc	status,0,c
  6219   00277A  EFC1  F013         	goto	u4051
  6220   00277E  EFC3  F013         	goto	u4050
  6221   002782                     u4051:
  6222   002782  EFD1  F013         	goto	l4714
  6223   002786                     u4050:
  6224   002786  0E00               	movlw	0
  6225   002788  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6226   00278A  0E00               	movlw	0
  6227   00278C  6E3A               	movwf	___fldiv@new_exp^0,c
  6228   00278E  0E00               	movlw	0
  6229   002790  6E29               	movwf	___fldiv@b^0,c
  6230   002792  0E00               	movlw	0
  6231   002794  6E2A               	movwf	(___fldiv@b+1)^0,c
  6232   002796  0E00               	movlw	0
  6233   002798  6E2B               	movwf	(___fldiv@b+2)^0,c
  6234   00279A  0E00               	movlw	0
  6235   00279C  6E2C               	movwf	(___fldiv@b+3)^0,c
  6236   00279E  0E00               	movlw	0
  6237   0027A0  6E39               	movwf	___fldiv@sign^0,c
  6238   0027A2                     l4714:
  6239   0027A2  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  6240   0027A6  A040               	btfss	___fldiv@bexp^0,0,c
  6241   0027A8  EFD8  F013         	goto	u4061
  6242   0027AC  EFDA  F013         	goto	u4060
  6243   0027B0                     u4061:
  6244   0027B0  EFDD  F013         	goto	l4720
  6245   0027B4                     u4060:
  6246   0027B4  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  6247   0027B6  EFDE  F013         	goto	l4722
  6248   0027BA                     l4720:
  6249   0027BA  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  6250   0027BC                     l4722:
  6251   0027BC  90D8               	bcf	status,0,c
  6252   0027BE  3040               	rrcf	___fldiv@bexp^0,w,c
  6253   0027C0  6E2C               	movwf	(___fldiv@b+3)^0,c
  6254   0027C2  EF94  F012         	goto	l4636
  6255   0027C6                     l1392:
  6256   0027C6  0012               	return		;funcret
  6257   0027C8                     __end_of___fldiv:
  6258                           	callstack 0
  6259                           
  6260 ;; *************** function _initUSART4 *****************
  6261 ;; Defined at:
  6262 ;;		line 14 in file "serial.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;		None
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;		None
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, status,2
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;Total ram usage:        0 bytes
  6281 ;; Hardware stack levels used: 1
  6282 ;; Hardware stack levels required when called: 1
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_main
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text16
  6291   004B5E                     __ptext16:
  6292                           	callstack 0
  6293   004B5E                     _initUSART4:
  6294                           	callstack 29
  6295   004B5E                     
  6296                           ;serial.c: 15:     RC0PPS = 0x12;
  6297   004B5E  0E12               	movlw	18
  6298   004B60  010E               	movlb	14	; () banked
  6299   004B62  6F62               	movwf	98,b	;volatile
  6300                           
  6301                           ;serial.c: 16:     RX4PPS = 0x11;
  6302   004B64  0E11               	movlw	17
  6303   004B66  6F15               	movwf	21,b	;volatile
  6304   004B68                     
  6305                           ; BSR set to: 14
  6306                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6307   004B68  97E9               	bcf	233,3,b	;volatile
  6308   004B6A                     
  6309                           ; BSR set to: 14
  6310                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6311   004B6A  95E8               	bcf	232,2,b	;volatile
  6312                           
  6313                           ;serial.c: 19:     SP4BRGL = 51;
  6314   004B6C  0E33               	movlw	51
  6315   004B6E  6FE5               	movwf	229,b	;volatile
  6316                           
  6317                           ;serial.c: 20:     SP4BRGH = 0;
  6318   004B70  0E00               	movlw	0
  6319   004B72  6FE6               	movwf	230,b	;volatile
  6320   004B74                     
  6321                           ; BSR set to: 14
  6322                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6323   004B74  89E7               	bsf	231,4,b	;volatile
  6324   004B76                     
  6325                           ; BSR set to: 14
  6326                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6327   004B76  8BE8               	bsf	232,5,b	;volatile
  6328   004B78                     
  6329                           ; BSR set to: 14
  6330                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6331   004B78  8FE7               	bsf	231,7,b	;volatile
  6332   004B7A                     
  6333                           ; BSR set to: 14
  6334   004B7A  0012               	return		;funcret
  6335   004B7C                     __end_of_initUSART4:
  6336                           	callstack 0
  6337                           
  6338 ;; *************** function _initDCmotorsPWM *****************
  6339 ;; Defined at:
  6340 ;;		line 5 in file "dc_motor.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6358 ;;Total ram usage:        2 bytes
  6359 ;; Hardware stack levels used: 1
  6360 ;; Hardware stack levels required when called: 1
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_main
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text17
  6369   003FBE                     __ptext17:
  6370                           	callstack 0
  6371   003FBE                     _initDCmotorsPWM:
  6372                           	callstack 29
  6373   003FBE                     
  6374                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6375   003FBE  9485               	bcf	133,2,c	;volatile
  6376                           
  6377                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6378   003FC0  9E83               	bcf	131,7,c	;volatile
  6379                           
  6380                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6381   003FC2  9885               	bcf	133,4,c	;volatile
  6382                           
  6383                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6384   003FC4  9C87               	bcf	135,6,c	;volatile
  6385                           
  6386                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6387   003FC6  947D               	bcf	125,2,c	;volatile
  6388                           
  6389                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6390   003FC8  9E7B               	bcf	123,7,c	;volatile
  6391                           
  6392                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6393   003FCA  987D               	bcf	125,4,c	;volatile
  6394                           
  6395                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6396   003FCC  9C7F               	bcf	127,6,c	;volatile
  6397   003FCE                     
  6398                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6399   003FCE  0E05               	movlw	5
  6400   003FD0  010E               	movlb	14	; () banked
  6401   003FD2  6F74               	movwf	116,b	;volatile
  6402                           
  6403                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6404   003FD4  0E06               	movlw	6
  6405   003FD6  6F76               	movwf	118,b	;volatile
  6406                           
  6407                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6408   003FD8  0E07               	movlw	7
  6409   003FDA  6F69               	movwf	105,b	;volatile
  6410                           
  6411                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6412   003FDC  0E08               	movlw	8
  6413   003FDE  6F88               	movwf	136,b	;volatile
  6414                           
  6415                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6416   003FE0  50BD               	movf	189,w,c	;volatile
  6417   003FE2  0B8F               	andlw	-113
  6418   003FE4  0940               	iorlw	64
  6419   003FE6  6EBD               	movwf	189,c	;volatile
  6420                           
  6421                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6422   003FE8  0EE0               	movlw	-32
  6423   003FEA  16BE               	andwf	190,f,c	;volatile
  6424                           
  6425                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6426   003FEC  50BF               	movf	191,w,c	;volatile
  6427   003FEE  0BF0               	andlw	-16
  6428   003FF0  0901               	iorlw	1
  6429   003FF2  6EBF               	movwf	191,c	;volatile
  6430   003FF4                     
  6431                           ; BSR set to: 14
  6432                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6433   003FF4  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6434   003FF8                     
  6435                           ; BSR set to: 14
  6436                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6437   003FF8  8EBD               	bsf	189,7,c	;volatile
  6438                           
  6439                           ;dc_motor.c: 35:     CCPR1H=0;
  6440   003FFA  0E00               	movlw	0
  6441   003FFC  6EAA               	movwf	170,c	;volatile
  6442                           
  6443                           ;dc_motor.c: 36:     CCPR2H=0;
  6444   003FFE  0E00               	movlw	0
  6445   004000  6EA6               	movwf	166,c	;volatile
  6446                           
  6447                           ;dc_motor.c: 37:     CCPR3H=0;
  6448   004002  0E00               	movlw	0
  6449   004004  010F               	movlb	15	; () banked
  6450   004006  6F25               	movwf	37,b	;volatile
  6451                           
  6452                           ;dc_motor.c: 38:     CCPR4H=0;
  6453   004008  0E00               	movlw	0
  6454   00400A  6F21               	movwf	33,b	;volatile
  6455                           
  6456                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6457   00400C  0EFC               	movlw	-4
  6458   00400E  16AD               	andwf	173,f,c	;volatile
  6459                           
  6460                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6461   004010  0EF3               	movlw	-13
  6462   004012  16AD               	andwf	173,f,c	;volatile
  6463                           
  6464                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6465   004014  0ECF               	movlw	-49
  6466   004016  16AD               	andwf	173,f,c	;volatile
  6467                           
  6468                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6469   004018  0E3F               	movlw	-193
  6470   00401A  16AD               	andwf	173,f,c	;volatile
  6471   00401C                     
  6472                           ; BSR set to: 15
  6473                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6474   00401C  88AB               	bsf	171,4,c	;volatile
  6475                           
  6476                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6477   00401E  50AB               	movf	171,w,c	;volatile
  6478   004020  0BF0               	andlw	-16
  6479   004022  090C               	iorlw	12
  6480   004024  6EAB               	movwf	171,c	;volatile
  6481   004026                     
  6482                           ; BSR set to: 15
  6483                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6484   004026  8EAB               	bsf	171,7,c	;volatile
  6485   004028                     
  6486                           ; BSR set to: 15
  6487                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6488   004028  88A7               	bsf	167,4,c	;volatile
  6489                           
  6490                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6491   00402A  50A7               	movf	167,w,c	;volatile
  6492   00402C  0BF0               	andlw	-16
  6493   00402E  090C               	iorlw	12
  6494   004030  6EA7               	movwf	167,c	;volatile
  6495   004032                     
  6496                           ; BSR set to: 15
  6497                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6498   004032  8EA7               	bsf	167,7,c	;volatile
  6499   004034                     
  6500                           ; BSR set to: 15
  6501                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6502   004034  8926               	bsf	38,4,b	;volatile
  6503                           
  6504                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6505   004036  5126               	movf	38,w,b	;volatile
  6506   004038  0BF0               	andlw	-16
  6507   00403A  090C               	iorlw	12
  6508   00403C  6F26               	movwf	38,b	;volatile
  6509   00403E                     
  6510                           ; BSR set to: 15
  6511                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6512   00403E  8F26               	bsf	38,7,b	;volatile
  6513   004040                     
  6514                           ; BSR set to: 15
  6515                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6516   004040  8922               	bsf	34,4,b	;volatile
  6517                           
  6518                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6519   004042  5122               	movf	34,w,b	;volatile
  6520   004044  0BF0               	andlw	-16
  6521   004046  090C               	iorlw	12
  6522   004048  6F22               	movwf	34,b	;volatile
  6523   00404A                     
  6524                           ; BSR set to: 15
  6525                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6526   00404A  8F22               	bsf	34,7,b	;volatile
  6527   00404C                     
  6528                           ; BSR set to: 15
  6529   00404C  0012               	return		;funcret
  6530   00404E                     __end_of_initDCmotorsPWM:
  6531                           	callstack 0
  6532                           
  6533 ;; *************** function _get16bitTMR0val *****************
  6534 ;; Defined at:
  6535 ;;		line 36 in file "timers.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  path_step       2   27[COMRAM] unsigned int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  time_ms         4   33[COMRAM] long 
  6540 ;;  combined_val    2   37[COMRAM] int 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  2   27[COMRAM] unsigned int 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6551 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6552 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;Total ram usage:       12 bytes
  6555 ;; Hardware stack levels used: 1
  6556 ;; Hardware stack levels required when called: 2
  6557 ;; This function calls:
  6558 ;;		___aldiv
  6559 ;;		___lmul
  6560 ;;		_logAction
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text18
  6567   003E8A                     __ptext18:
  6568                           	callstack 0
  6569   003E8A                     _get16bitTMR0val:
  6570                           	callstack 28
  6571   003E8A                     
  6572                           ;timers.c: 36: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 37: {;time
      +                          rs.c: 38:     int combined_value;;timers.c: 39:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6573   003E8A  50D4               	movf	212,w,c	;volatile
  6574   003E8C  6E1F               	movwf	(??_get16bitTMR0val+1)^0,c
  6575   003E8E  6A1E               	clrf	??_get16bitTMR0val^0,c
  6576   003E90  50D3               	movf	211,w,c	;volatile
  6577   003E92  6E20               	movwf	(??_get16bitTMR0val+2)^0,c
  6578   003E94  6A21               	clrf	(??_get16bitTMR0val+3)^0,c
  6579   003E96  501E               	movf	??_get16bitTMR0val^0,w,c
  6580   003E98  1020               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6581   003E9A  6E26               	movwf	get16bitTMR0val@combined_value^0,c
  6582   003E9C  501F               	movf	(??_get16bitTMR0val+1)^0,w,c
  6583   003E9E  1021               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6584   003EA0  6E27               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6585   003EA2                     
  6586                           ;timers.c: 40:     long time_ms = combined_value*65535*4*8192/64000000;
  6587   003EA2  C026  F002         	movff	get16bitTMR0val@combined_value,___lmul@multiplier
  6588   003EA6  C027  F003         	movff	get16bitTMR0val@combined_value+1,___lmul@multiplier+1
  6589   003EAA  0E00               	movlw	0
  6590   003EAC  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  6591   003EAE  0EFF               	movlw	-1
  6592   003EB0  6E04               	movwf	(___lmul@multiplier+2)^0,c
  6593   003EB2  6E05               	movwf	(___lmul@multiplier+3)^0,c
  6594   003EB4  0E00               	movlw	0
  6595   003EB6  6E06               	movwf	___lmul@multiplicand^0,c
  6596   003EB8  0E80               	movlw	128
  6597   003EBA  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  6598   003EBC  0EFF               	movlw	255
  6599   003EBE  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  6600   003EC0  0E7F               	movlw	127
  6601   003EC2  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  6602   003EC4  EC61  F021         	call	___lmul	;wreg free
  6603   003EC8  C002  F00E         	movff	?___lmul,___aldiv@dividend
  6604   003ECC  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  6605   003ED0  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  6606   003ED4  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  6607   003ED8  0E00               	movlw	0
  6608   003EDA  6E12               	movwf	___aldiv@divisor^0,c
  6609   003EDC  0E90               	movlw	144
  6610   003EDE  6E13               	movwf	(___aldiv@divisor+1)^0,c
  6611   003EE0  0ED0               	movlw	208
  6612   003EE2  6E14               	movwf	(___aldiv@divisor+2)^0,c
  6613   003EE4  0E03               	movlw	3
  6614   003EE6  6E15               	movwf	(___aldiv@divisor+3)^0,c
  6615   003EE8  ECAF  F01A         	call	___aldiv	;wreg free
  6616   003EEC  C00E  F022         	movff	?___aldiv,get16bitTMR0val@time_ms
  6617   003EF0  C00F  F023         	movff	?___aldiv+1,get16bitTMR0val@time_ms+1
  6618   003EF4  C010  F024         	movff	?___aldiv+2,get16bitTMR0val@time_ms+2
  6619   003EF8  C011  F025         	movff	?___aldiv+3,get16bitTMR0val@time_ms+3
  6620   003EFC                     
  6621                           ;timers.c: 42:     logAction(0,time_ms, path_step);
  6622   003EFC  C022  F002         	movff	get16bitTMR0val@time_ms,logAction@newTime
  6623   003F00  C023  F003         	movff	get16bitTMR0val@time_ms+1,logAction@newTime+1
  6624   003F04  C024  F004         	movff	get16bitTMR0val@time_ms+2,logAction@newTime+2
  6625   003F08  C025  F005         	movff	get16bitTMR0val@time_ms+3,logAction@newTime+3
  6626   003F0C  C01C  F006         	movff	get16bitTMR0val@path_step,logAction@path_step
  6627   003F10  C01D  F007         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6628   003F14  0E00               	movlw	0
  6629   003F16  EC96  F021         	call	_logAction
  6630   003F1A                     
  6631                           ;timers.c: 43:     path_step++;
  6632   003F1A  4A1C               	infsnz	get16bitTMR0val@path_step^0,f,c
  6633   003F1C  2A1D               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  6634   003F1E                     
  6635                           ;timers.c: 45:     return path_step;
  6636   003F1E  C01C  F01C         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6637   003F22  C01D  F01D         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6638   003F26  0012               	return		;funcret
  6639   003F28                     __end_of_get16bitTMR0val:
  6640                           	callstack 0
  6641                           
  6642 ;; *************** function ___lmul *****************
  6643 ;; Defined at:
  6644 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  multiplier      4    1[COMRAM] unsigned long 
  6647 ;;  multiplicand    4    5[COMRAM] unsigned long 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  product         4    9[COMRAM] unsigned long 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  4    1[COMRAM] unsigned long 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6659 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6660 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6662 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6663 ;;Total ram usage:       12 bytes
  6664 ;; Hardware stack levels used: 1
  6665 ;; Hardware stack levels required when called: 1
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_get16bitTMR0val
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text19
  6674   0042C2                     __ptext19:
  6675                           	callstack 0
  6676   0042C2                     ___lmul:
  6677                           	callstack 28
  6678   0042C2  0E00               	movlw	0
  6679   0042C4  6E0A               	movwf	___lmul@product^0,c
  6680   0042C6  0E00               	movlw	0
  6681   0042C8  6E0B               	movwf	(___lmul@product+1)^0,c
  6682   0042CA  0E00               	movlw	0
  6683   0042CC  6E0C               	movwf	(___lmul@product+2)^0,c
  6684   0042CE  0E00               	movlw	0
  6685   0042D0  6E0D               	movwf	(___lmul@product+3)^0,c
  6686   0042D2                     l5020:
  6687   0042D2  A002               	btfss	___lmul@multiplier^0,0,c
  6688   0042D4  EF6E  F021         	goto	u4381
  6689   0042D8  EF70  F021         	goto	u4380
  6690   0042DC                     u4381:
  6691   0042DC  EF78  F021         	goto	l5024
  6692   0042E0                     u4380:
  6693   0042E0  5006               	movf	___lmul@multiplicand^0,w,c
  6694   0042E2  260A               	addwf	___lmul@product^0,f,c
  6695   0042E4  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  6696   0042E6  220B               	addwfc	(___lmul@product+1)^0,f,c
  6697   0042E8  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  6698   0042EA  220C               	addwfc	(___lmul@product+2)^0,f,c
  6699   0042EC  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  6700   0042EE  220D               	addwfc	(___lmul@product+3)^0,f,c
  6701   0042F0                     l5024:
  6702   0042F0  90D8               	bcf	status,0,c
  6703   0042F2  3606               	rlcf	___lmul@multiplicand^0,f,c
  6704   0042F4  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6705   0042F6  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6706   0042F8  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6707   0042FA  90D8               	bcf	status,0,c
  6708   0042FC  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  6709   0042FE  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  6710   004300  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  6711   004302  3202               	rrcf	___lmul@multiplier^0,f,c
  6712   004304  5002               	movf	___lmul@multiplier^0,w,c
  6713   004306  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  6714   004308  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  6715   00430A  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  6716   00430C  A4D8               	btfss	status,2,c
  6717   00430E  EF8B  F021         	goto	u4391
  6718   004312  EF8D  F021         	goto	u4390
  6719   004316                     u4391:
  6720   004316  EF69  F021         	goto	l5020
  6721   00431A                     u4390:
  6722   00431A  C00A  F002         	movff	___lmul@product,?___lmul
  6723   00431E  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  6724   004322  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  6725   004326  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  6726   00432A  0012               	return		;funcret
  6727   00432C                     __end_of___lmul:
  6728                           	callstack 0
  6729                           
  6730 ;; *************** function ___aldiv *****************
  6731 ;; Defined at:
  6732 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  dividend        4   13[COMRAM] long 
  6735 ;;  divisor         4   17[COMRAM] long 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  quotient        4   23[COMRAM] long 
  6738 ;;  sign            1   22[COMRAM] unsigned char 
  6739 ;;  counter         1   21[COMRAM] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  4   13[COMRAM] long 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6749 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6750 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;Total ram usage:       14 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; Hardware stack levels required when called: 1
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_get16bitTMR0val
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text20
  6764   00355E                     __ptext20:
  6765                           	callstack 0
  6766   00355E                     ___aldiv:
  6767                           	callstack 28
  6768   00355E  0E00               	movlw	0
  6769   003560  6E17               	movwf	___aldiv@sign^0,c
  6770   003562  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  6771   003564  EFB8  F01A         	goto	u4400
  6772   003568  EFB6  F01A         	goto	u4401
  6773   00356C                     u4401:
  6774   00356C  EFC2  F01A         	goto	l5036
  6775   003570                     u4400:
  6776   003570  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  6777   003572  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  6778   003574  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  6779   003576  6C12               	negf	___aldiv@divisor^0,c
  6780   003578  0E00               	movlw	0
  6781   00357A  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  6782   00357C  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  6783   00357E  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  6784   003580  0E01               	movlw	1
  6785   003582  6E17               	movwf	___aldiv@sign^0,c
  6786   003584                     l5036:
  6787   003584  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  6788   003586  EFC9  F01A         	goto	u4410
  6789   00358A  EFC7  F01A         	goto	u4411
  6790   00358E                     u4411:
  6791   00358E  EFD3  F01A         	goto	l5042
  6792   003592                     u4410:
  6793   003592  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  6794   003594  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  6795   003596  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  6796   003598  6C0E               	negf	___aldiv@dividend^0,c
  6797   00359A  0E00               	movlw	0
  6798   00359C  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6799   00359E  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  6800   0035A0  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  6801   0035A2  0E01               	movlw	1
  6802   0035A4  1A17               	xorwf	___aldiv@sign^0,f,c
  6803   0035A6                     l5042:
  6804   0035A6  0E00               	movlw	0
  6805   0035A8  6E18               	movwf	___aldiv@quotient^0,c
  6806   0035AA  0E00               	movlw	0
  6807   0035AC  6E19               	movwf	(___aldiv@quotient+1)^0,c
  6808   0035AE  0E00               	movlw	0
  6809   0035B0  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  6810   0035B2  0E00               	movlw	0
  6811   0035B4  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  6812   0035B6  5012               	movf	___aldiv@divisor^0,w,c
  6813   0035B8  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  6814   0035BA  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  6815   0035BC  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  6816   0035BE  B4D8               	btfsc	status,2,c
  6817   0035C0  EFE4  F01A         	goto	u4421
  6818   0035C4  EFE6  F01A         	goto	u4420
  6819   0035C8                     u4421:
  6820   0035C8  EF1C  F01B         	goto	l5064
  6821   0035CC                     u4420:
  6822   0035CC  0E01               	movlw	1
  6823   0035CE  6E16               	movwf	___aldiv@counter^0,c
  6824   0035D0  EFF0  F01A         	goto	l5050
  6825   0035D4                     l5048:
  6826   0035D4  90D8               	bcf	status,0,c
  6827   0035D6  3612               	rlcf	___aldiv@divisor^0,f,c
  6828   0035D8  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  6829   0035DA  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  6830   0035DC  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  6831   0035DE  2A16               	incf	___aldiv@counter^0,f,c
  6832   0035E0                     l5050:
  6833   0035E0  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  6834   0035E2  EFF5  F01A         	goto	u4431
  6835   0035E6  EFF7  F01A         	goto	u4430
  6836   0035EA                     u4431:
  6837   0035EA  EFEA  F01A         	goto	l5048
  6838   0035EE                     u4430:
  6839   0035EE                     l5052:
  6840   0035EE  90D8               	bcf	status,0,c
  6841   0035F0  3618               	rlcf	___aldiv@quotient^0,f,c
  6842   0035F2  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  6843   0035F4  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6844   0035F6  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6845   0035F8  5012               	movf	___aldiv@divisor^0,w,c
  6846   0035FA  5C0E               	subwf	___aldiv@dividend^0,w,c
  6847   0035FC  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6848   0035FE  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6849   003600  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6850   003602  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  6851   003604  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6852   003606  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  6853   003608  A0D8               	btfss	status,0,c
  6854   00360A  EF09  F01B         	goto	u4441
  6855   00360E  EF0B  F01B         	goto	u4440
  6856   003612                     u4441:
  6857   003612  EF14  F01B         	goto	l5060
  6858   003616                     u4440:
  6859   003616  5012               	movf	___aldiv@divisor^0,w,c
  6860   003618  5E0E               	subwf	___aldiv@dividend^0,f,c
  6861   00361A  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6862   00361C  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6863   00361E  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6864   003620  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  6865   003622  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6866   003624  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  6867   003626  8018               	bsf	___aldiv@quotient^0,0,c
  6868   003628                     l5060:
  6869   003628  90D8               	bcf	status,0,c
  6870   00362A  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  6871   00362C  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  6872   00362E  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  6873   003630  3212               	rrcf	___aldiv@divisor^0,f,c
  6874   003632  2E16               	decfsz	___aldiv@counter^0,f,c
  6875   003634  EFF7  F01A         	goto	l5052
  6876   003638                     l5064:
  6877   003638  5017               	movf	___aldiv@sign^0,w,c
  6878   00363A  B4D8               	btfsc	status,2,c
  6879   00363C  EF22  F01B         	goto	u4451
  6880   003640  EF24  F01B         	goto	u4450
  6881   003644                     u4451:
  6882   003644  EF2C  F01B         	goto	l5068
  6883   003648                     u4450:
  6884   003648  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  6885   00364A  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  6886   00364C  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  6887   00364E  6C18               	negf	___aldiv@quotient^0,c
  6888   003650  0E00               	movlw	0
  6889   003652  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  6890   003654  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6891   003656  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6892   003658                     l5068:
  6893   003658  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  6894   00365C  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  6895   003660  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  6896   003664  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  6897   003668  0012               	return		;funcret
  6898   00366A                     __end_of___aldiv:
  6899                           	callstack 0
  6900                           
  6901 ;; *************** function _decision *****************
  6902 ;; Defined at:
  6903 ;;		line 181 in file "color.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  hue             2   36[COMRAM] unsigned int 
  6906 ;;  path_step       2   38[COMRAM] unsigned int 
  6907 ;;  factor          2   40[COMRAM] unsigned int 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  color           2    0        unsigned int 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  2   36[COMRAM] unsigned int 
  6912 ;; Registers used:
  6913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6919 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6922 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6923 ;;Total ram usage:        6 bytes
  6924 ;; Hardware stack levels used: 1
  6925 ;; Hardware stack levels required when called: 6
  6926 ;; This function calls:
  6927 ;;		_logAction
  6928 ;;		_moveBlue
  6929 ;;		_moveGreen
  6930 ;;		_moveLightBlue
  6931 ;;		_moveOrange
  6932 ;;		_movePink
  6933 ;;		_moveRed
  6934 ;;		_moveYellow
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text21
  6941   0027C8                     __ptext21:
  6942                           	callstack 0
  6943   0027C8                     _decision:
  6944                           	callstack 24
  6945   0027C8                     
  6946                           ;color.c: 186:     unsigned int color;;color.c: 188:     if (hue<=10 || hue>=355) {
  6947   0027C8  5026               	movf	(decision@hue+1)^0,w,c
  6948   0027CA  E109               	bnz	u4460
  6949   0027CC  0E0B               	movlw	11
  6950   0027CE  5C25               	subwf	decision@hue^0,w,c
  6951   0027D0  A0D8               	btfss	status,0,c
  6952   0027D2  EFED  F013         	goto	u4461
  6953   0027D6  EFEF  F013         	goto	u4460
  6954   0027DA                     u4461:
  6955   0027DA  EFFA  F013         	goto	l5124
  6956   0027DE                     u4460:
  6957   0027DE  0E63               	movlw	99
  6958   0027E0  5C25               	subwf	decision@hue^0,w,c
  6959   0027E2  0E01               	movlw	1
  6960   0027E4  5826               	subwfb	(decision@hue+1)^0,w,c
  6961   0027E6  A0D8               	btfss	status,0,c
  6962   0027E8  EFF8  F013         	goto	u4471
  6963   0027EC  EFFA  F013         	goto	u4470
  6964   0027F0                     u4471:
  6965   0027F0  EF17  F014         	goto	l5132
  6966   0027F4                     u4470:
  6967   0027F4                     l5124:
  6968                           
  6969                           ;color.c: 189:         moveRed(&motorL, &motorR, factor);
  6970   0027F4  0EE7               	movlw	low _motorL
  6971   0027F6  6E1F               	movwf	moveRed@mL^0,c
  6972   0027F8  0EDE               	movlw	low _motorR
  6973   0027FA  6E20               	movwf	moveRed@mR^0,c
  6974   0027FC  C029  F021         	movff	decision@factor,moveRed@factor
  6975   002800  C02A  F022         	movff	decision@factor+1,moveRed@factor+1
  6976   002804  ECE9  F023         	call	_moveRed	;wreg free
  6977   002808                     
  6978                           ;color.c: 190:         logAction(1,0, path_step);
  6979   002808  0E00               	movlw	0
  6980   00280A  6E02               	movwf	logAction@newTime^0,c
  6981   00280C  0E00               	movlw	0
  6982   00280E  6E03               	movwf	(logAction@newTime+1)^0,c
  6983   002810  0E00               	movlw	0
  6984   002812  6E04               	movwf	(logAction@newTime+2)^0,c
  6985   002814  0E00               	movlw	0
  6986   002816  6E05               	movwf	(logAction@newTime+3)^0,c
  6987   002818  C027  F006         	movff	decision@path_step,logAction@path_step
  6988   00281C  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6989   002820  0E01               	movlw	1
  6990   002822  EC96  F021         	call	_logAction
  6991   002826                     l5130:
  6992                           
  6993                           ;color.c: 192:         path_step++;
  6994   002826  4A27               	infsnz	decision@path_step^0,f,c
  6995   002828  2A28               	incf	(decision@path_step+1)^0,f,c
  6996                           
  6997                           ;color.c: 193:     }
  6998   00282A  EF3D  F015         	goto	l5204
  6999   00282E                     l5132:
  7000   00282E  5026               	movf	(decision@hue+1)^0,w,c
  7001   002830  E109               	bnz	u4480
  7002   002832  0E69               	movlw	105
  7003   002834  5C25               	subwf	decision@hue^0,w,c
  7004   002836  A0D8               	btfss	status,0,c
  7005   002838  EF20  F014         	goto	u4481
  7006   00283C  EF22  F014         	goto	u4480
  7007   002840                     u4481:
  7008   002840  EF48  F014         	goto	l5144
  7009   002844                     u4480:
  7010   002844  5026               	movf	(decision@hue+1)^0,w,c
  7011   002846  E107               	bnz	u4491
  7012   002848  0E83               	movlw	131
  7013   00284A  5C25               	subwf	decision@hue^0,w,c
  7014   00284C  B0D8               	btfsc	status,0,c
  7015   00284E  EF2B  F014         	goto	u4491
  7016   002852  EF2D  F014         	goto	u4490
  7017   002856                     u4491:
  7018   002856  EF48  F014         	goto	l5144
  7019   00285A                     u4490:
  7020   00285A                     
  7021                           ;color.c: 195:         moveGreen(&motorL, &motorR,factor);
  7022   00285A  0EE7               	movlw	low _motorL
  7023   00285C  6E1F               	movwf	moveGreen@mL^0,c
  7024   00285E  0EDE               	movlw	low _motorR
  7025   002860  6E20               	movwf	moveGreen@mR^0,c
  7026   002862  C029  F021         	movff	decision@factor,moveGreen@factor
  7027   002866  C02A  F022         	movff	decision@factor+1,moveGreen@factor+1
  7028   00286A  EC5D  F024         	call	_moveGreen	;wreg free
  7029   00286E                     
  7030                           ;color.c: 196:         logAction(2,0, path_step);
  7031   00286E  0E00               	movlw	0
  7032   002870  6E02               	movwf	logAction@newTime^0,c
  7033   002872  0E00               	movlw	0
  7034   002874  6E03               	movwf	(logAction@newTime+1)^0,c
  7035   002876  0E00               	movlw	0
  7036   002878  6E04               	movwf	(logAction@newTime+2)^0,c
  7037   00287A  0E00               	movlw	0
  7038   00287C  6E05               	movwf	(logAction@newTime+3)^0,c
  7039   00287E  C027  F006         	movff	decision@path_step,logAction@path_step
  7040   002882  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7041   002886  0E02               	movlw	2
  7042   002888  EC96  F021         	call	_logAction
  7043   00288C  EF13  F014         	goto	l5130
  7044   002890                     l5144:
  7045   002890  5026               	movf	(decision@hue+1)^0,w,c
  7046   002892  E109               	bnz	u4500
  7047   002894  0EE6               	movlw	230
  7048   002896  5C25               	subwf	decision@hue^0,w,c
  7049   002898  A0D8               	btfss	status,0,c
  7050   00289A  EF51  F014         	goto	u4501
  7051   00289E  EF53  F014         	goto	u4500
  7052   0028A2                     u4501:
  7053   0028A2  EF79  F014         	goto	l5156
  7054   0028A6                     u4500:
  7055   0028A6  5026               	movf	(decision@hue+1)^0,w,c
  7056   0028A8  E107               	bnz	u4511
  7057   0028AA  0EF1               	movlw	241
  7058   0028AC  5C25               	subwf	decision@hue^0,w,c
  7059   0028AE  B0D8               	btfsc	status,0,c
  7060   0028B0  EF5C  F014         	goto	u4511
  7061   0028B4  EF5E  F014         	goto	u4510
  7062   0028B8                     u4511:
  7063   0028B8  EF79  F014         	goto	l5156
  7064   0028BC                     u4510:
  7065   0028BC                     
  7066                           ;color.c: 200:         moveBlue(&motorL,&motorR, factor);
  7067   0028BC  0EE7               	movlw	low _motorL
  7068   0028BE  6E1F               	movwf	moveBlue@mL^0,c
  7069   0028C0  0EDE               	movlw	low _motorR
  7070   0028C2  6E20               	movwf	moveBlue@mR^0,c
  7071   0028C4  C029  F021         	movff	decision@factor,moveBlue@factor
  7072   0028C8  C02A  F022         	movff	decision@factor+1,moveBlue@factor+1
  7073   0028CC  EC7A  F024         	call	_moveBlue	;wreg free
  7074   0028D0                     
  7075                           ;color.c: 201:         logAction(3,0, path_step);
  7076   0028D0  0E00               	movlw	0
  7077   0028D2  6E02               	movwf	logAction@newTime^0,c
  7078   0028D4  0E00               	movlw	0
  7079   0028D6  6E03               	movwf	(logAction@newTime+1)^0,c
  7080   0028D8  0E00               	movlw	0
  7081   0028DA  6E04               	movwf	(logAction@newTime+2)^0,c
  7082   0028DC  0E00               	movlw	0
  7083   0028DE  6E05               	movwf	(logAction@newTime+3)^0,c
  7084   0028E0  C027  F006         	movff	decision@path_step,logAction@path_step
  7085   0028E4  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7086   0028E8  0E03               	movlw	3
  7087   0028EA  EC96  F021         	call	_logAction
  7088   0028EE  EF13  F014         	goto	l5130
  7089   0028F2                     l5156:
  7090   0028F2  5026               	movf	(decision@hue+1)^0,w,c
  7091   0028F4  E109               	bnz	u4520
  7092   0028F6  0ED8               	movlw	216
  7093   0028F8  5C25               	subwf	decision@hue^0,w,c
  7094   0028FA  A0D8               	btfss	status,0,c
  7095   0028FC  EF82  F014         	goto	u4521
  7096   002900  EF84  F014         	goto	u4520
  7097   002904                     u4521:
  7098   002904  EFAA  F014         	goto	l5168
  7099   002908                     u4520:
  7100   002908  5026               	movf	(decision@hue+1)^0,w,c
  7101   00290A  E107               	bnz	u4531
  7102   00290C  0EDE               	movlw	222
  7103   00290E  5C25               	subwf	decision@hue^0,w,c
  7104   002910  B0D8               	btfsc	status,0,c
  7105   002912  EF8D  F014         	goto	u4531
  7106   002916  EF8F  F014         	goto	u4530
  7107   00291A                     u4531:
  7108   00291A  EFAA  F014         	goto	l5168
  7109   00291E                     u4530:
  7110   00291E                     
  7111                           ;color.c: 205:         moveLightBlue(&motorL,&motorR, factor);
  7112   00291E  0EE7               	movlw	low _motorL
  7113   002920  6E1F               	movwf	moveLightBlue@mL^0,c
  7114   002922  0EDE               	movlw	low _motorR
  7115   002924  6E20               	movwf	moveLightBlue@mR^0,c
  7116   002926  C029  F021         	movff	decision@factor,moveLightBlue@factor
  7117   00292A  C02A  F022         	movff	decision@factor+1,moveLightBlue@factor+1
  7118   00292E  EC40  F024         	call	_moveLightBlue	;wreg free
  7119   002932                     
  7120                           ;color.c: 206:         logAction(4,0, path_step);
  7121   002932  0E00               	movlw	0
  7122   002934  6E02               	movwf	logAction@newTime^0,c
  7123   002936  0E00               	movlw	0
  7124   002938  6E03               	movwf	(logAction@newTime+1)^0,c
  7125   00293A  0E00               	movlw	0
  7126   00293C  6E04               	movwf	(logAction@newTime+2)^0,c
  7127   00293E  0E00               	movlw	0
  7128   002940  6E05               	movwf	(logAction@newTime+3)^0,c
  7129   002942  C027  F006         	movff	decision@path_step,logAction@path_step
  7130   002946  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7131   00294A  0E04               	movlw	4
  7132   00294C  EC96  F021         	call	_logAction
  7133   002950  EF13  F014         	goto	l5130
  7134   002954                     l5168:
  7135   002954  0E2E               	movlw	46
  7136   002956  5C25               	subwf	decision@hue^0,w,c
  7137   002958  0E01               	movlw	1
  7138   00295A  5826               	subwfb	(decision@hue+1)^0,w,c
  7139   00295C  A0D8               	btfss	status,0,c
  7140   00295E  EFB3  F014         	goto	u4541
  7141   002962  EFB5  F014         	goto	u4540
  7142   002966                     u4541:
  7143   002966  EFDB  F014         	goto	l5180
  7144   00296A                     u4540:
  7145   00296A  0E5B               	movlw	91
  7146   00296C  5C25               	subwf	decision@hue^0,w,c
  7147   00296E  0E01               	movlw	1
  7148   002970  5826               	subwfb	(decision@hue+1)^0,w,c
  7149   002972  B0D8               	btfsc	status,0,c
  7150   002974  EFBE  F014         	goto	u4551
  7151   002978  EFC0  F014         	goto	u4550
  7152   00297C                     u4551:
  7153   00297C  EFDB  F014         	goto	l5180
  7154   002980                     u4550:
  7155   002980                     
  7156                           ;color.c: 210:         moveYellow(&motorL,&motorR, factor);
  7157   002980  0EE7               	movlw	low _motorL
  7158   002982  6E1F               	movwf	moveYellow@mL^0,c
  7159   002984  0EDE               	movlw	low _motorR
  7160   002986  6E20               	movwf	moveYellow@mR^0,c
  7161   002988  C029  F021         	movff	decision@factor,moveYellow@factor
  7162   00298C  C02A  F022         	movff	decision@factor+1,moveYellow@factor+1
  7163   002990  ECCC  F023         	call	_moveYellow	;wreg free
  7164   002994                     
  7165                           ;color.c: 211:         logAction(5,0, path_step);
  7166   002994  0E00               	movlw	0
  7167   002996  6E02               	movwf	logAction@newTime^0,c
  7168   002998  0E00               	movlw	0
  7169   00299A  6E03               	movwf	(logAction@newTime+1)^0,c
  7170   00299C  0E00               	movlw	0
  7171   00299E  6E04               	movwf	(logAction@newTime+2)^0,c
  7172   0029A0  0E00               	movlw	0
  7173   0029A2  6E05               	movwf	(logAction@newTime+3)^0,c
  7174   0029A4  C027  F006         	movff	decision@path_step,logAction@path_step
  7175   0029A8  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7176   0029AC  0E05               	movlw	5
  7177   0029AE  EC96  F021         	call	_logAction
  7178   0029B2  EF13  F014         	goto	l5130
  7179   0029B6                     l5180:
  7180   0029B6  5026               	movf	(decision@hue+1)^0,w,c
  7181   0029B8  E109               	bnz	u4560
  7182   0029BA  0E0F               	movlw	15
  7183   0029BC  5C25               	subwf	decision@hue^0,w,c
  7184   0029BE  A0D8               	btfss	status,0,c
  7185   0029C0  EFE4  F014         	goto	u4561
  7186   0029C4  EFE6  F014         	goto	u4560
  7187   0029C8                     u4561:
  7188   0029C8  EF0C  F015         	goto	l5192
  7189   0029CC                     u4560:
  7190   0029CC  5026               	movf	(decision@hue+1)^0,w,c
  7191   0029CE  E107               	bnz	u4571
  7192   0029D0  0E24               	movlw	36
  7193   0029D2  5C25               	subwf	decision@hue^0,w,c
  7194   0029D4  B0D8               	btfsc	status,0,c
  7195   0029D6  EFEF  F014         	goto	u4571
  7196   0029DA  EFF1  F014         	goto	u4570
  7197   0029DE                     u4571:
  7198   0029DE  EF0C  F015         	goto	l5192
  7199   0029E2                     u4570:
  7200   0029E2                     
  7201                           ;color.c: 215:         moveOrange(&motorL,&motorR, factor);
  7202   0029E2  0EE7               	movlw	low _motorL
  7203   0029E4  6E1F               	movwf	moveOrange@mL^0,c
  7204   0029E6  0EDE               	movlw	low _motorR
  7205   0029E8  6E20               	movwf	moveOrange@mR^0,c
  7206   0029EA  C029  F021         	movff	decision@factor,moveOrange@factor
  7207   0029EE  C02A  F022         	movff	decision@factor+1,moveOrange@factor+1
  7208   0029F2  EC23  F024         	call	_moveOrange	;wreg free
  7209   0029F6                     
  7210                           ;color.c: 216:         logAction(6,0, path_step);
  7211   0029F6  0E00               	movlw	0
  7212   0029F8  6E02               	movwf	logAction@newTime^0,c
  7213   0029FA  0E00               	movlw	0
  7214   0029FC  6E03               	movwf	(logAction@newTime+1)^0,c
  7215   0029FE  0E00               	movlw	0
  7216   002A00  6E04               	movwf	(logAction@newTime+2)^0,c
  7217   002A02  0E00               	movlw	0
  7218   002A04  6E05               	movwf	(logAction@newTime+3)^0,c
  7219   002A06  C027  F006         	movff	decision@path_step,logAction@path_step
  7220   002A0A  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7221   002A0E  0E06               	movlw	6
  7222   002A10  EC96  F021         	call	_logAction
  7223   002A14  EF13  F014         	goto	l5130
  7224   002A18                     l5192:
  7225   002A18  5026               	movf	(decision@hue+1)^0,w,c
  7226   002A1A  E109               	bnz	u4580
  7227   002A1C  0EF4               	movlw	244
  7228   002A1E  5C25               	subwf	decision@hue^0,w,c
  7229   002A20  A0D8               	btfss	status,0,c
  7230   002A22  EF15  F015         	goto	u4581
  7231   002A26  EF17  F015         	goto	u4580
  7232   002A2A                     u4581:
  7233   002A2A  EF3D  F015         	goto	l138
  7234   002A2E                     u4580:
  7235   002A2E  5026               	movf	(decision@hue+1)^0,w,c
  7236   002A30  E107               	bnz	u4591
  7237   002A32  0EFC               	movlw	252
  7238   002A34  5C25               	subwf	decision@hue^0,w,c
  7239   002A36  B0D8               	btfsc	status,0,c
  7240   002A38  EF20  F015         	goto	u4591
  7241   002A3C  EF22  F015         	goto	u4590
  7242   002A40                     u4591:
  7243   002A40  EF3D  F015         	goto	l138
  7244   002A44                     u4590:
  7245   002A44                     
  7246                           ;color.c: 220:         movePink(&motorL,&motorR, factor);
  7247   002A44  0EE7               	movlw	low _motorL
  7248   002A46  6E1F               	movwf	movePink@mL^0,c
  7249   002A48  0EDE               	movlw	low _motorR
  7250   002A4A  6E20               	movwf	movePink@mR^0,c
  7251   002A4C  C029  F021         	movff	decision@factor,movePink@factor
  7252   002A50  C02A  F022         	movff	decision@factor+1,movePink@factor+1
  7253   002A54  EC06  F024         	call	_movePink	;wreg free
  7254   002A58                     
  7255                           ;color.c: 221:         logAction(7,0, path_step);
  7256   002A58  0E00               	movlw	0
  7257   002A5A  6E02               	movwf	logAction@newTime^0,c
  7258   002A5C  0E00               	movlw	0
  7259   002A5E  6E03               	movwf	(logAction@newTime+1)^0,c
  7260   002A60  0E00               	movlw	0
  7261   002A62  6E04               	movwf	(logAction@newTime+2)^0,c
  7262   002A64  0E00               	movlw	0
  7263   002A66  6E05               	movwf	(logAction@newTime+3)^0,c
  7264   002A68  C027  F006         	movff	decision@path_step,logAction@path_step
  7265   002A6C  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7266   002A70  0E07               	movlw	7
  7267   002A72  EC96  F021         	call	_logAction
  7268   002A76  EF13  F014         	goto	l5130
  7269   002A7A                     l138:
  7270   002A7A                     l5204:
  7271                           
  7272                           ;color.c: 227:     return path_step;
  7273   002A7A  C027  F025         	movff	decision@path_step,?_decision
  7274   002A7E  C028  F026         	movff	decision@path_step+1,?_decision+1
  7275   002A82  0012               	return		;funcret
  7276   002A84                     __end_of_decision:
  7277                           	callstack 0
  7278                           
  7279 ;; *************** function _moveYellow *****************
  7280 ;; Defined at:
  7281 ;;		line 294 in file "dc_motor.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7284 ;;		 -> motorL(9), 
  7285 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7286 ;;		 -> motorR(9), 
  7287 ;;  factor          2   32[COMRAM] unsigned int 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7301 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7303 ;;Total ram usage:        6 bytes
  7304 ;; Hardware stack levels used: 1
  7305 ;; Hardware stack levels required when called: 5
  7306 ;; This function calls:
  7307 ;;		_backOneAndHalf
  7308 ;;		_right90
  7309 ;; This function is called by:
  7310 ;;		_decision
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text22
  7315   004798                     __ptext22:
  7316                           	callstack 0
  7317   004798                     _moveYellow:
  7318                           	callstack 24
  7319   004798                     
  7320                           ;dc_motor.c: 294:  void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned in
      +                          t factor);dc_motor.c: 295: {;dc_motor.c: 297:     backOneAndHalf(mL,mR);
  7321   004798  C01F  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7322   00479C  C020  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7323   0047A0  EC01  F025         	call	_backOneAndHalf	;wreg free
  7324   0047A4                     
  7325                           ;dc_motor.c: 298:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7326   0047A4  0E29               	movlw	41
  7327   0047A6  6E24               	movwf	(??_moveYellow+1)^0,c
  7328   0047A8  0E96               	movlw	150
  7329   0047AA  6E23               	movwf	??_moveYellow^0,c
  7330   0047AC  0E7F               	movlw	127
  7331   0047AE                     u5477:
  7332   0047AE  2EE8               	decfsz	wreg,f,c
  7333   0047B0  D7FE               	bra	u5477
  7334   0047B2  2E23               	decfsz	??_moveYellow^0,f,c
  7335   0047B4  D7FC               	bra	u5477
  7336   0047B6  2E24               	decfsz	(??_moveYellow+1)^0,f,c
  7337   0047B8  D7FA               	bra	u5477
  7338   0047BA  0000               	nop	
  7339   0047BC                     
  7340                           ;dc_motor.c: 299:     right90(mL,mR, factor);
  7341   0047BC  C01F  F019         	movff	moveYellow@mL,right90@mL
  7342   0047C0  C020  F01A         	movff	moveYellow@mR,right90@mR
  7343   0047C4  C021  F01B         	movff	moveYellow@factor,right90@factor
  7344   0047C8  C022  F01C         	movff	moveYellow@factor+1,right90@factor+1
  7345   0047CC  ECA8  F022         	call	_right90	;wreg free
  7346   0047D0  0012               	return		;funcret
  7347   0047D2                     __end_of_moveYellow:
  7348                           	callstack 0
  7349                           
  7350 ;; *************** function _moveRed *****************
  7351 ;; Defined at:
  7352 ;;		line 265 in file "dc_motor.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7355 ;;		 -> motorL(9), 
  7356 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7357 ;;		 -> motorR(9), 
  7358 ;;  factor          2   32[COMRAM] unsigned int 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7373 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7374 ;;Total ram usage:        6 bytes
  7375 ;; Hardware stack levels used: 1
  7376 ;; Hardware stack levels required when called: 5
  7377 ;; This function calls:
  7378 ;;		_backHalf
  7379 ;;		_right90
  7380 ;; This function is called by:
  7381 ;;		_decision
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           	psect	text23
  7386   0047D2                     __ptext23:
  7387                           	callstack 0
  7388   0047D2                     _moveRed:
  7389                           	callstack 24
  7390   0047D2                     
  7391                           ;dc_motor.c: 265: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int fa
      +                          ctor);dc_motor.c: 266: {;dc_motor.c: 268:     backHalf(mL,mR);
  7392   0047D2  C01F  F019         	movff	moveRed@mL,backHalf@mL
  7393   0047D6  C020  F01A         	movff	moveRed@mR,backHalf@mR
  7394   0047DA  EC33  F025         	call	_backHalf	;wreg free
  7395   0047DE                     
  7396                           ;dc_motor.c: 269:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7397   0047DE  0E29               	movlw	41
  7398   0047E0  6E24               	movwf	(??_moveRed+1)^0,c
  7399   0047E2  0E96               	movlw	150
  7400   0047E4  6E23               	movwf	??_moveRed^0,c
  7401   0047E6  0E7F               	movlw	127
  7402   0047E8                     u5487:
  7403   0047E8  2EE8               	decfsz	wreg,f,c
  7404   0047EA  D7FE               	bra	u5487
  7405   0047EC  2E23               	decfsz	??_moveRed^0,f,c
  7406   0047EE  D7FC               	bra	u5487
  7407   0047F0  2E24               	decfsz	(??_moveRed+1)^0,f,c
  7408   0047F2  D7FA               	bra	u5487
  7409   0047F4  0000               	nop	
  7410   0047F6                     
  7411                           ;dc_motor.c: 270:     right90(mL,mR,factor);
  7412   0047F6  C01F  F019         	movff	moveRed@mL,right90@mL
  7413   0047FA  C020  F01A         	movff	moveRed@mR,right90@mR
  7414   0047FE  C021  F01B         	movff	moveRed@factor,right90@factor
  7415   004802  C022  F01C         	movff	moveRed@factor+1,right90@factor+1
  7416   004806  ECA8  F022         	call	_right90	;wreg free
  7417   00480A  0012               	return		;funcret
  7418   00480C                     __end_of_moveRed:
  7419                           	callstack 0
  7420                           
  7421 ;; *************** function _right90 *****************
  7422 ;; Defined at:
  7423 ;;		line 193 in file "dc_motor.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7426 ;;		 -> motorL(9), 
  7427 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7428 ;;		 -> motorR(9), 
  7429 ;;  factor          2   26[COMRAM] unsigned int 
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7432 ;;  delay           2    0        unsigned int 
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      void 
  7435 ;; Registers used:
  7436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7445 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7446 ;;Total ram usage:        6 bytes
  7447 ;; Hardware stack levels used: 1
  7448 ;; Hardware stack levels required when called: 4
  7449 ;; This function calls:
  7450 ;;		___wmul
  7451 ;;		_customDelayMs
  7452 ;;		_stop
  7453 ;;		_turnRight
  7454 ;; This function is called by:
  7455 ;;		_moveRed
  7456 ;;		_moveYellow
  7457 ;;		_reverseTurn
  7458 ;;		_calibration_turning
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text24
  7463   004550                     __ptext24:
  7464                           	callstack 0
  7465   004550                     _right90:
  7466                           	callstack 24
  7467   004550                     
  7468                           ;dc_motor.c: 196:     unsigned int delay_after_calibration = delay * factor;
  7469   004550  0E01               	movlw	1
  7470   004552  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7471   004554  0E22               	movlw	34
  7472   004556  6E02               	movwf	___wmul@multiplier^0,c
  7473   004558  C01B  F004         	movff	right90@factor,___wmul@multiplicand
  7474   00455C  C01C  F005         	movff	right90@factor+1,___wmul@multiplicand+1
  7475   004560  EC8C  F025         	call	___wmul	;wreg free
  7476   004564  C002  F01D         	movff	?___wmul,right90@delay_after_calibration
  7477   004568  C003  F01E         	movff	?___wmul+1,right90@delay_after_calibration+1
  7478   00456C                     
  7479                           ;dc_motor.c: 197:     turnRight(mL,mR);
  7480   00456C  C019  F014         	movff	right90@mL,turnRight@mL
  7481   004570  C01A  F015         	movff	right90@mR,turnRight@mR
  7482   004574  EC6E  F020         	call	_turnRight	;wreg free
  7483   004578                     
  7484                           ;dc_motor.c: 198:     customDelayMs(delay_after_calibration);
  7485   004578  C01D  F002         	movff	right90@delay_after_calibration,customDelayMs@milliseconds
  7486   00457C  C01E  F003         	movff	right90@delay_after_calibration+1,customDelayMs@milliseconds+1
  7487   004580  EC97  F024         	call	_customDelayMs	;wreg free
  7488   004584                     
  7489                           ;dc_motor.c: 199:     stop(mL,mR);
  7490   004584  C019  F014         	movff	right90@mL,stop@mL
  7491   004588  C01A  F015         	movff	right90@mR,stop@mR
  7492   00458C  EC27  F020         	call	_stop	;wreg free
  7493   004590  0012               	return		;funcret
  7494   004592                     __end_of_right90:
  7495                           	callstack 0
  7496                           
  7497 ;; *************** function _movePink *****************
  7498 ;; Defined at:
  7499 ;;		line 303 in file "dc_motor.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7502 ;;		 -> motorL(9), 
  7503 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7504 ;;		 -> motorR(9), 
  7505 ;;  factor          2   32[COMRAM] unsigned int 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7520 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7521 ;;Total ram usage:        6 bytes
  7522 ;; Hardware stack levels used: 1
  7523 ;; Hardware stack levels required when called: 5
  7524 ;; This function calls:
  7525 ;;		_backOneAndHalf
  7526 ;;		_left90
  7527 ;; This function is called by:
  7528 ;;		_decision
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text25
  7533   00480C                     __ptext25:
  7534                           	callstack 0
  7535   00480C                     _movePink:
  7536                           	callstack 24
  7537   00480C                     
  7538                           ;dc_motor.c: 303: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 304: {;dc_motor.c: 306:     backOneAndHalf(mL,mR);
  7539   00480C  C01F  F019         	movff	movePink@mL,backOneAndHalf@mL
  7540   004810  C020  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7541   004814  EC01  F025         	call	_backOneAndHalf	;wreg free
  7542   004818                     
  7543                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7544   004818  0E29               	movlw	41
  7545   00481A  6E24               	movwf	(??_movePink+1)^0,c
  7546   00481C  0E96               	movlw	150
  7547   00481E  6E23               	movwf	??_movePink^0,c
  7548   004820  0E7F               	movlw	127
  7549   004822                     u5497:
  7550   004822  2EE8               	decfsz	wreg,f,c
  7551   004824  D7FE               	bra	u5497
  7552   004826  2E23               	decfsz	??_movePink^0,f,c
  7553   004828  D7FC               	bra	u5497
  7554   00482A  2E24               	decfsz	(??_movePink+1)^0,f,c
  7555   00482C  D7FA               	bra	u5497
  7556   00482E  0000               	nop	
  7557   004830                     
  7558                           ;dc_motor.c: 308:     left90(mL,mR, factor);
  7559   004830  C01F  F019         	movff	movePink@mL,left90@mL
  7560   004834  C020  F01A         	movff	movePink@mR,left90@mR
  7561   004838  C021  F01B         	movff	movePink@factor,left90@factor
  7562   00483C  C022  F01C         	movff	movePink@factor+1,left90@factor+1
  7563   004840  EC0B  F023         	call	_left90	;wreg free
  7564   004844  0012               	return		;funcret
  7565   004846                     __end_of_movePink:
  7566                           	callstack 0
  7567                           
  7568 ;; *************** function _backOneAndHalf *****************
  7569 ;; Defined at:
  7570 ;;		line 251 in file "dc_motor.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7573 ;;		 -> motorL(9), 
  7574 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7575 ;;		 -> motorR(9), 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7591 ;;Total ram usage:        4 bytes
  7592 ;; Hardware stack levels used: 1
  7593 ;; Hardware stack levels required when called: 4
  7594 ;; This function calls:
  7595 ;;		_fullSpeedBack
  7596 ;;		_stop
  7597 ;; This function is called by:
  7598 ;;		_moveYellow
  7599 ;;		_movePink
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text26
  7604   004A02                     __ptext26:
  7605                           	callstack 0
  7606   004A02                     _backOneAndHalf:
  7607                           	callstack 24
  7608   004A02                     
  7609                           ;dc_motor.c: 251: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 252: {;dc_motor.c: 253:     fullSpeedBack(mL,mR);
  7610   004A02  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7611   004A06  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7612   004A0A  ECEC  F020         	call	_fullSpeedBack	;wreg free
  7613   004A0E                     
  7614                           ;dc_motor.c: 254:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7615   004A0E  0E6A               	movlw	106
  7616   004A10  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7617   004A12  0E85               	movlw	133
  7618   004A14  6E1B               	movwf	??_backOneAndHalf^0,c
  7619   004A16  0EB4               	movlw	180
  7620   004A18                     u5507:
  7621   004A18  2EE8               	decfsz	wreg,f,c
  7622   004A1A  D7FE               	bra	u5507
  7623   004A1C  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7624   004A1E  D7FC               	bra	u5507
  7625   004A20  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7626   004A22  D7FA               	bra	u5507
  7627   004A24  D000               	nop2	
  7628   004A26                     
  7629                           ;dc_motor.c: 255:     stop(mL,mR);
  7630   004A26  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7631   004A2A  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7632   004A2E  EC27  F020         	call	_stop	;wreg free
  7633   004A32  0012               	return		;funcret
  7634   004A34                     __end_of_backOneAndHalf:
  7635                           	callstack 0
  7636                           
  7637 ;; *************** function _moveOrange *****************
  7638 ;; Defined at:
  7639 ;;		line 312 in file "dc_motor.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7642 ;;		 -> motorL(9), 
  7643 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7644 ;;		 -> motorR(9), 
  7645 ;;  factor          2   32[COMRAM] unsigned int 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7657 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7659 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7660 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7661 ;;Total ram usage:        6 bytes
  7662 ;; Hardware stack levels used: 1
  7663 ;; Hardware stack levels required when called: 5
  7664 ;; This function calls:
  7665 ;;		_backHalf
  7666 ;;		_right135
  7667 ;; This function is called by:
  7668 ;;		_decision
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text27
  7673   004846                     __ptext27:
  7674                           	callstack 0
  7675   004846                     _moveOrange:
  7676                           	callstack 24
  7677   004846                     
  7678                           ;dc_motor.c: 312: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           factor);dc_motor.c: 313: {;dc_motor.c: 315:     backHalf(mL,mR);
  7679   004846  C01F  F019         	movff	moveOrange@mL,backHalf@mL
  7680   00484A  C020  F01A         	movff	moveOrange@mR,backHalf@mR
  7681   00484E  EC33  F025         	call	_backHalf	;wreg free
  7682   004852                     
  7683                           ;dc_motor.c: 316:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7684   004852  0E29               	movlw	41
  7685   004854  6E24               	movwf	(??_moveOrange+1)^0,c
  7686   004856  0E96               	movlw	150
  7687   004858  6E23               	movwf	??_moveOrange^0,c
  7688   00485A  0E7F               	movlw	127
  7689   00485C                     u5517:
  7690   00485C  2EE8               	decfsz	wreg,f,c
  7691   00485E  D7FE               	bra	u5517
  7692   004860  2E23               	decfsz	??_moveOrange^0,f,c
  7693   004862  D7FC               	bra	u5517
  7694   004864  2E24               	decfsz	(??_moveOrange+1)^0,f,c
  7695   004866  D7FA               	bra	u5517
  7696   004868  0000               	nop	
  7697   00486A                     
  7698                           ;dc_motor.c: 317:     right135(mL,mR, factor);
  7699   00486A  C01F  F019         	movff	moveOrange@mL,right135@mL
  7700   00486E  C020  F01A         	movff	moveOrange@mR,right135@mR
  7701   004872  C021  F01B         	movff	moveOrange@factor,right135@factor
  7702   004876  C022  F01C         	movff	moveOrange@factor+1,right135@factor+1
  7703   00487A  ECC9  F022         	call	_right135	;wreg free
  7704   00487E  0012               	return		;funcret
  7705   004880                     __end_of_moveOrange:
  7706                           	callstack 0
  7707                           
  7708 ;; *************** function _right135 *****************
  7709 ;; Defined at:
  7710 ;;		line 223 in file "dc_motor.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7713 ;;		 -> motorL(9), 
  7714 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7715 ;;		 -> motorR(9), 
  7716 ;;  factor          2   26[COMRAM] unsigned int 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7719 ;;  delay           2    0        unsigned int 
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  1    wreg      void 
  7722 ;; Registers used:
  7723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7733 ;;Total ram usage:        6 bytes
  7734 ;; Hardware stack levels used: 1
  7735 ;; Hardware stack levels required when called: 4
  7736 ;; This function calls:
  7737 ;;		___wmul
  7738 ;;		_customDelayMs
  7739 ;;		_stop
  7740 ;;		_turnRight
  7741 ;; This function is called by:
  7742 ;;		_moveOrange
  7743 ;;		_reverseTurn
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text28
  7748   004592                     __ptext28:
  7749                           	callstack 0
  7750   004592                     _right135:
  7751                           	callstack 24
  7752   004592                     
  7753                           ;dc_motor.c: 226:     unsigned int delay_after_calibration = delay * factor;
  7754   004592  0E01               	movlw	1
  7755   004594  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7756   004596  0E90               	movlw	144
  7757   004598  6E02               	movwf	___wmul@multiplier^0,c
  7758   00459A  C01B  F004         	movff	right135@factor,___wmul@multiplicand
  7759   00459E  C01C  F005         	movff	right135@factor+1,___wmul@multiplicand+1
  7760   0045A2  EC8C  F025         	call	___wmul	;wreg free
  7761   0045A6  C002  F01D         	movff	?___wmul,right135@delay_after_calibration
  7762   0045AA  C003  F01E         	movff	?___wmul+1,right135@delay_after_calibration+1
  7763   0045AE                     
  7764                           ;dc_motor.c: 227:     turnRight(mL,mR);
  7765   0045AE  C019  F014         	movff	right135@mL,turnRight@mL
  7766   0045B2  C01A  F015         	movff	right135@mR,turnRight@mR
  7767   0045B6  EC6E  F020         	call	_turnRight	;wreg free
  7768   0045BA                     
  7769                           ;dc_motor.c: 228:     customDelayMs(delay_after_calibration);
  7770   0045BA  C01D  F002         	movff	right135@delay_after_calibration,customDelayMs@milliseconds
  7771   0045BE  C01E  F003         	movff	right135@delay_after_calibration+1,customDelayMs@milliseconds+1
  7772   0045C2  EC97  F024         	call	_customDelayMs	;wreg free
  7773   0045C6                     
  7774                           ;dc_motor.c: 229:     stop(mL,mR);
  7775   0045C6  C019  F014         	movff	right135@mL,stop@mL
  7776   0045CA  C01A  F015         	movff	right135@mR,stop@mR
  7777   0045CE  EC27  F020         	call	_stop	;wreg free
  7778   0045D2  0012               	return		;funcret
  7779   0045D4                     __end_of_right135:
  7780                           	callstack 0
  7781                           
  7782 ;; *************** function _turnRight *****************
  7783 ;; Defined at:
  7784 ;;		line 125 in file "dc_motor.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7787 ;;		 -> motorL(9), 
  7788 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7789 ;;		 -> motorR(9), 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  i               2   22[COMRAM] unsigned int 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7801 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;Total ram usage:        5 bytes
  7806 ;; Hardware stack levels used: 1
  7807 ;; Hardware stack levels required when called: 3
  7808 ;; This function calls:
  7809 ;;		_setMotorPWM
  7810 ;; This function is called by:
  7811 ;;		_right90
  7812 ;;		_right135
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text29
  7817   0040DC                     __ptext29:
  7818                           	callstack 0
  7819   0040DC                     _turnRight:
  7820                           	callstack 24
  7821   0040DC                     
  7822                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7823   0040DC  5014               	movf	turnRight@mL^0,w,c
  7824   0040DE  6ED9               	movwf	fsr2l,c
  7825   0040E0  6ADA               	clrf	fsr2h,c
  7826   0040E2  0E01               	movlw	1
  7827   0040E4  26D9               	addwf	fsr2l,f,c
  7828   0040E6  0E01               	movlw	1
  7829   0040E8  6EDF               	movwf	indf2,c
  7830                           
  7831                           ;dc_motor.c: 129:     mR->direction = 0;
  7832   0040EA  5015               	movf	turnRight@mR^0,w,c
  7833   0040EC  6ED9               	movwf	fsr2l,c
  7834   0040EE  6ADA               	clrf	fsr2h,c
  7835   0040F0  0E01               	movlw	1
  7836   0040F2  26D9               	addwf	fsr2l,f,c
  7837   0040F4  6ADF               	clrf	indf2,c
  7838   0040F6                     
  7839                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7840   0040F6  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7841   0040FA  EC74  F019         	call	_setMotorPWM	;wreg free
  7842   0040FE                     
  7843                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7844   0040FE  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7845   004102  EC74  F019         	call	_setMotorPWM	;wreg free
  7846   004106                     
  7847                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7848   004106  0E00               	movlw	0
  7849   004108  6E18               	movwf	(turnRight@i+1)^0,c
  7850   00410A  0E00               	movlw	0
  7851   00410C  6E17               	movwf	turnRight@i^0,c
  7852   00410E                     l3982:
  7853                           
  7854                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7855   00410E  5014               	movf	turnRight@mL^0,w,c
  7856   004110  6ED9               	movwf	fsr2l,c
  7857   004112  6ADA               	clrf	fsr2h,c
  7858   004114  2ADF               	incf	indf2,f,c
  7859                           
  7860                           ;dc_motor.c: 136:         mR->power++;
  7861   004116  5015               	movf	turnRight@mR^0,w,c
  7862   004118  6ED9               	movwf	fsr2l,c
  7863   00411A  6ADA               	clrf	fsr2h,c
  7864   00411C  2ADF               	incf	indf2,f,c
  7865   00411E                     
  7866                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7867   00411E  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7868   004122  EC74  F019         	call	_setMotorPWM	;wreg free
  7869   004126                     
  7870                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7871   004126  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7872   00412A  EC74  F019         	call	_setMotorPWM	;wreg free
  7873   00412E                     
  7874                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7875   00412E  0E0B               	movlw	11
  7876   004130  6E16               	movwf	??_turnRight^0,c
  7877   004132  0E62               	movlw	98
  7878   004134                     u5527:
  7879   004134  2EE8               	decfsz	wreg,f,c
  7880   004136  D7FE               	bra	u5527
  7881   004138  2E16               	decfsz	??_turnRight^0,f,c
  7882   00413A  D7FC               	bra	u5527
  7883   00413C  D000               	nop2	
  7884   00413E                     
  7885                           ;dc_motor.c: 140:     }
  7886   00413E  4A17               	infsnz	turnRight@i^0,f,c
  7887   004140  2A18               	incf	(turnRight@i+1)^0,f,c
  7888   004142  5018               	movf	(turnRight@i+1)^0,w,c
  7889   004144  E109               	bnz	u3000
  7890   004146  0E32               	movlw	50
  7891   004148  5C17               	subwf	turnRight@i^0,w,c
  7892   00414A  A0D8               	btfss	status,0,c
  7893   00414C  EFAA  F020         	goto	u3001
  7894   004150  EFAC  F020         	goto	u3000
  7895   004154                     u3001:
  7896   004154  EF87  F020         	goto	l3982
  7897   004158                     u3000:
  7898   004158  0012               	return		;funcret
  7899   00415A                     __end_of_turnRight:
  7900                           	callstack 0
  7901                           
  7902 ;; *************** function _moveLightBlue *****************
  7903 ;; Defined at:
  7904 ;;		line 321 in file "dc_motor.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7907 ;;		 -> motorL(9), 
  7908 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7909 ;;		 -> motorR(9), 
  7910 ;;  factor          2   32[COMRAM] unsigned int 
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7926 ;;Total ram usage:        6 bytes
  7927 ;; Hardware stack levels used: 1
  7928 ;; Hardware stack levels required when called: 5
  7929 ;; This function calls:
  7930 ;;		_backHalf
  7931 ;;		_left135
  7932 ;; This function is called by:
  7933 ;;		_decision
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text30
  7938   004880                     __ptext30:
  7939                           	callstack 0
  7940   004880                     _moveLightBlue:
  7941                           	callstack 24
  7942   004880                     
  7943                           ;dc_motor.c: 321: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int factor);dc_motor.c: 322: {;dc_motor.c: 324:     backHalf(mL,mR);
  7944   004880  C01F  F019         	movff	moveLightBlue@mL,backHalf@mL
  7945   004884  C020  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7946   004888  EC33  F025         	call	_backHalf	;wreg free
  7947   00488C                     
  7948                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7949   00488C  0E29               	movlw	41
  7950   00488E  6E24               	movwf	(??_moveLightBlue+1)^0,c
  7951   004890  0E96               	movlw	150
  7952   004892  6E23               	movwf	??_moveLightBlue^0,c
  7953   004894  0E7F               	movlw	127
  7954   004896                     u5537:
  7955   004896  2EE8               	decfsz	wreg,f,c
  7956   004898  D7FE               	bra	u5537
  7957   00489A  2E23               	decfsz	??_moveLightBlue^0,f,c
  7958   00489C  D7FC               	bra	u5537
  7959   00489E  2E24               	decfsz	(??_moveLightBlue+1)^0,f,c
  7960   0048A0  D7FA               	bra	u5537
  7961   0048A2  0000               	nop	
  7962   0048A4                     
  7963                           ;dc_motor.c: 326:     left135(mL,mR,factor);
  7964   0048A4  C01F  F019         	movff	moveLightBlue@mL,left135@mL
  7965   0048A8  C020  F01A         	movff	moveLightBlue@mR,left135@mR
  7966   0048AC  C021  F01B         	movff	moveLightBlue@factor,left135@factor
  7967   0048B0  C022  F01C         	movff	moveLightBlue@factor+1,left135@factor+1
  7968   0048B4  ECEA  F022         	call	_left135	;wreg free
  7969   0048B8  0012               	return		;funcret
  7970   0048BA                     __end_of_moveLightBlue:
  7971                           	callstack 0
  7972                           
  7973 ;; *************** function _left135 *****************
  7974 ;; Defined at:
  7975 ;;		line 233 in file "dc_motor.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7978 ;;		 -> motorL(9), 
  7979 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7980 ;;		 -> motorR(9), 
  7981 ;;  factor          2   26[COMRAM] unsigned int 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7984 ;;  delay           2    0        unsigned int 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;Total ram usage:        6 bytes
  7999 ;; Hardware stack levels used: 1
  8000 ;; Hardware stack levels required when called: 4
  8001 ;; This function calls:
  8002 ;;		___wmul
  8003 ;;		_customDelayMs
  8004 ;;		_stop
  8005 ;;		_turnLeft
  8006 ;; This function is called by:
  8007 ;;		_moveLightBlue
  8008 ;;		_reverseTurn
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text31
  8013   0045D4                     __ptext31:
  8014                           	callstack 0
  8015   0045D4                     _left135:
  8016                           	callstack 24
  8017   0045D4                     
  8018                           ;dc_motor.c: 236:     unsigned int delay_after_calibration = delay * factor;
  8019   0045D4  0E01               	movlw	1
  8020   0045D6  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8021   0045D8  0E90               	movlw	144
  8022   0045DA  6E02               	movwf	___wmul@multiplier^0,c
  8023   0045DC  C01B  F004         	movff	left135@factor,___wmul@multiplicand
  8024   0045E0  C01C  F005         	movff	left135@factor+1,___wmul@multiplicand+1
  8025   0045E4  EC8C  F025         	call	___wmul	;wreg free
  8026   0045E8  C002  F01D         	movff	?___wmul,left135@delay_after_calibration
  8027   0045EC  C003  F01E         	movff	?___wmul+1,left135@delay_after_calibration+1
  8028   0045F0                     
  8029                           ;dc_motor.c: 237:     turnLeft(mL,mR);
  8030   0045F0  C019  F014         	movff	left135@mL,turnLeft@mL
  8031   0045F4  C01A  F015         	movff	left135@mR,turnLeft@mR
  8032   0045F8  ECAD  F020         	call	_turnLeft	;wreg free
  8033   0045FC                     
  8034                           ;dc_motor.c: 238:     customDelayMs(delay_after_calibration);
  8035   0045FC  C01D  F002         	movff	left135@delay_after_calibration,customDelayMs@milliseconds
  8036   004600  C01E  F003         	movff	left135@delay_after_calibration+1,customDelayMs@milliseconds+1
  8037   004604  EC97  F024         	call	_customDelayMs	;wreg free
  8038   004608                     
  8039                           ;dc_motor.c: 239:     stop(mL,mR);
  8040   004608  C019  F014         	movff	left135@mL,stop@mL
  8041   00460C  C01A  F015         	movff	left135@mR,stop@mR
  8042   004610  EC27  F020         	call	_stop	;wreg free
  8043   004614  0012               	return		;funcret
  8044   004616                     __end_of_left135:
  8045                           	callstack 0
  8046                           
  8047 ;; *************** function _moveGreen *****************
  8048 ;; Defined at:
  8049 ;;		line 276 in file "dc_motor.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  8052 ;;		 -> motorL(9), 
  8053 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  8054 ;;		 -> motorR(9), 
  8055 ;;  factor          2   32[COMRAM] unsigned int 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8067 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8070 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8071 ;;Total ram usage:        6 bytes
  8072 ;; Hardware stack levels used: 1
  8073 ;; Hardware stack levels required when called: 5
  8074 ;; This function calls:
  8075 ;;		_backHalf
  8076 ;;		_left90
  8077 ;; This function is called by:
  8078 ;;		_decision
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           	psect	text32
  8083   0048BA                     __ptext32:
  8084                           	callstack 0
  8085   0048BA                     _moveGreen:
  8086                           	callstack 24
  8087   0048BA                     
  8088                           ;dc_motor.c: 276: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 277: {;dc_motor.c: 279:     backHalf(mL,mR);
  8089   0048BA  C01F  F019         	movff	moveGreen@mL,backHalf@mL
  8090   0048BE  C020  F01A         	movff	moveGreen@mR,backHalf@mR
  8091   0048C2  EC33  F025         	call	_backHalf	;wreg free
  8092   0048C6                     
  8093                           ;dc_motor.c: 280:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8094   0048C6  0E29               	movlw	41
  8095   0048C8  6E24               	movwf	(??_moveGreen+1)^0,c
  8096   0048CA  0E96               	movlw	150
  8097   0048CC  6E23               	movwf	??_moveGreen^0,c
  8098   0048CE  0E7F               	movlw	127
  8099   0048D0                     u5547:
  8100   0048D0  2EE8               	decfsz	wreg,f,c
  8101   0048D2  D7FE               	bra	u5547
  8102   0048D4  2E23               	decfsz	??_moveGreen^0,f,c
  8103   0048D6  D7FC               	bra	u5547
  8104   0048D8  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  8105   0048DA  D7FA               	bra	u5547
  8106   0048DC  0000               	nop	
  8107   0048DE                     
  8108                           ;dc_motor.c: 281:     left90(mL,mR,factor);
  8109   0048DE  C01F  F019         	movff	moveGreen@mL,left90@mL
  8110   0048E2  C020  F01A         	movff	moveGreen@mR,left90@mR
  8111   0048E6  C021  F01B         	movff	moveGreen@factor,left90@factor
  8112   0048EA  C022  F01C         	movff	moveGreen@factor+1,left90@factor+1
  8113   0048EE  EC0B  F023         	call	_left90	;wreg free
  8114   0048F2  0012               	return		;funcret
  8115   0048F4                     __end_of_moveGreen:
  8116                           	callstack 0
  8117                           
  8118 ;; *************** function _left90 *****************
  8119 ;; Defined at:
  8120 ;;		line 203 in file "dc_motor.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8123 ;;		 -> motorL(9), 
  8124 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8125 ;;		 -> motorR(9), 
  8126 ;;  factor          2   26[COMRAM] unsigned int 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8129 ;;  delay           2    0        unsigned int 
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8142 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8143 ;;Total ram usage:        6 bytes
  8144 ;; Hardware stack levels used: 1
  8145 ;; Hardware stack levels required when called: 4
  8146 ;; This function calls:
  8147 ;;		___wmul
  8148 ;;		_customDelayMs
  8149 ;;		_stop
  8150 ;;		_turnLeft
  8151 ;; This function is called by:
  8152 ;;		_moveGreen
  8153 ;;		_movePink
  8154 ;;		_reverseTurn
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           	psect	text33
  8159   004616                     __ptext33:
  8160                           	callstack 0
  8161   004616                     _left90:
  8162                           	callstack 24
  8163   004616                     
  8164                           ;dc_motor.c: 206:     unsigned int delay_after_calibration = delay * factor;
  8165   004616  0E01               	movlw	1
  8166   004618  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8167   00461A  0E22               	movlw	34
  8168   00461C  6E02               	movwf	___wmul@multiplier^0,c
  8169   00461E  C01B  F004         	movff	left90@factor,___wmul@multiplicand
  8170   004622  C01C  F005         	movff	left90@factor+1,___wmul@multiplicand+1
  8171   004626  EC8C  F025         	call	___wmul	;wreg free
  8172   00462A  C002  F01D         	movff	?___wmul,left90@delay_after_calibration
  8173   00462E  C003  F01E         	movff	?___wmul+1,left90@delay_after_calibration+1
  8174   004632                     
  8175                           ;dc_motor.c: 207:     turnLeft(mL,mR);
  8176   004632  C019  F014         	movff	left90@mL,turnLeft@mL
  8177   004636  C01A  F015         	movff	left90@mR,turnLeft@mR
  8178   00463A  ECAD  F020         	call	_turnLeft	;wreg free
  8179   00463E                     
  8180                           ;dc_motor.c: 208:     customDelayMs(delay_after_calibration);
  8181   00463E  C01D  F002         	movff	left90@delay_after_calibration,customDelayMs@milliseconds
  8182   004642  C01E  F003         	movff	left90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8183   004646  EC97  F024         	call	_customDelayMs	;wreg free
  8184   00464A                     
  8185                           ;dc_motor.c: 209:     stop(mL,mR);
  8186   00464A  C019  F014         	movff	left90@mL,stop@mL
  8187   00464E  C01A  F015         	movff	left90@mR,stop@mR
  8188   004652  EC27  F020         	call	_stop	;wreg free
  8189   004656  0012               	return		;funcret
  8190   004658                     __end_of_left90:
  8191                           	callstack 0
  8192                           
  8193 ;; *************** function _moveBlue *****************
  8194 ;; Defined at:
  8195 ;;		line 285 in file "dc_motor.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  8198 ;;		 -> motorL(9), 
  8199 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  8200 ;;		 -> motorR(9), 
  8201 ;;  factor          2   32[COMRAM] unsigned int 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;		None
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  1    wreg      void 
  8206 ;; Registers used:
  8207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8217 ;;Total ram usage:        6 bytes
  8218 ;; Hardware stack levels used: 1
  8219 ;; Hardware stack levels required when called: 5
  8220 ;; This function calls:
  8221 ;;		_backHalf
  8222 ;;		_turn180
  8223 ;; This function is called by:
  8224 ;;		_decision
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text34
  8229   0048F4                     __ptext34:
  8230                           	callstack 0
  8231   0048F4                     _moveBlue:
  8232                           	callstack 24
  8233   0048F4                     
  8234                           ;dc_motor.c: 285: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 286: {;dc_motor.c: 288:     backHalf(mL,mR);
  8235   0048F4  C01F  F019         	movff	moveBlue@mL,backHalf@mL
  8236   0048F8  C020  F01A         	movff	moveBlue@mR,backHalf@mR
  8237   0048FC  EC33  F025         	call	_backHalf	;wreg free
  8238   004900                     
  8239                           ;dc_motor.c: 289:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8240   004900  0E29               	movlw	41
  8241   004902  6E24               	movwf	(??_moveBlue+1)^0,c
  8242   004904  0E96               	movlw	150
  8243   004906  6E23               	movwf	??_moveBlue^0,c
  8244   004908  0E7F               	movlw	127
  8245   00490A                     u5557:
  8246   00490A  2EE8               	decfsz	wreg,f,c
  8247   00490C  D7FE               	bra	u5557
  8248   00490E  2E23               	decfsz	??_moveBlue^0,f,c
  8249   004910  D7FC               	bra	u5557
  8250   004912  2E24               	decfsz	(??_moveBlue+1)^0,f,c
  8251   004914  D7FA               	bra	u5557
  8252   004916  0000               	nop	
  8253   004918                     
  8254                           ;dc_motor.c: 290:     turn180(mL,mR, factor);
  8255   004918  C01F  F019         	movff	moveBlue@mL,turn180@mL
  8256   00491C  C020  F01A         	movff	moveBlue@mR,turn180@mR
  8257   004920  C021  F01B         	movff	moveBlue@factor,turn180@factor
  8258   004924  C022  F01C         	movff	moveBlue@factor+1,turn180@factor+1
  8259   004928  EC2C  F023         	call	_turn180	;wreg free
  8260   00492C  0012               	return		;funcret
  8261   00492E                     __end_of_moveBlue:
  8262                           	callstack 0
  8263                           
  8264 ;; *************** function _turn180 *****************
  8265 ;; Defined at:
  8266 ;;		line 213 in file "dc_motor.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8269 ;;		 -> motorL(9), 
  8270 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8271 ;;		 -> motorR(9), 
  8272 ;;  factor          2   26[COMRAM] unsigned int 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8275 ;;  delay           2    0        unsigned int 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8288 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8289 ;;Total ram usage:        6 bytes
  8290 ;; Hardware stack levels used: 1
  8291 ;; Hardware stack levels required when called: 4
  8292 ;; This function calls:
  8293 ;;		___wmul
  8294 ;;		_customDelayMs
  8295 ;;		_stop
  8296 ;;		_turnLeft
  8297 ;; This function is called by:
  8298 ;;		_moveBlue
  8299 ;;		_moveWhite
  8300 ;;		_reverseTurn
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text35
  8305   004658                     __ptext35:
  8306                           	callstack 0
  8307   004658                     _turn180:
  8308                           	callstack 24
  8309   004658                     
  8310                           ;dc_motor.c: 216:     unsigned int delay_after_calibration = delay * factor;
  8311   004658  0E02               	movlw	2
  8312   00465A  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8313   00465C  0E44               	movlw	68
  8314   00465E  6E02               	movwf	___wmul@multiplier^0,c
  8315   004660  C01B  F004         	movff	turn180@factor,___wmul@multiplicand
  8316   004664  C01C  F005         	movff	turn180@factor+1,___wmul@multiplicand+1
  8317   004668  EC8C  F025         	call	___wmul	;wreg free
  8318   00466C  C002  F01D         	movff	?___wmul,turn180@delay_after_calibration
  8319   004670  C003  F01E         	movff	?___wmul+1,turn180@delay_after_calibration+1
  8320   004674                     
  8321                           ;dc_motor.c: 217:     turnLeft(mL,mR);
  8322   004674  C019  F014         	movff	turn180@mL,turnLeft@mL
  8323   004678  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8324   00467C  ECAD  F020         	call	_turnLeft	;wreg free
  8325   004680                     
  8326                           ;dc_motor.c: 218:     customDelayMs(delay_after_calibration);
  8327   004680  C01D  F002         	movff	turn180@delay_after_calibration,customDelayMs@milliseconds
  8328   004684  C01E  F003         	movff	turn180@delay_after_calibration+1,customDelayMs@milliseconds+1
  8329   004688  EC97  F024         	call	_customDelayMs	;wreg free
  8330   00468C                     
  8331                           ;dc_motor.c: 219:     stop(mL,mR);
  8332   00468C  C019  F014         	movff	turn180@mL,stop@mL
  8333   004690  C01A  F015         	movff	turn180@mR,stop@mR
  8334   004694  EC27  F020         	call	_stop	;wreg free
  8335   004698  0012               	return		;funcret
  8336   00469A                     __end_of_turn180:
  8337                           	callstack 0
  8338                           
  8339 ;; *************** function _turnLeft *****************
  8340 ;; Defined at:
  8341 ;;		line 105 in file "dc_motor.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8344 ;;		 -> motorL(9), 
  8345 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8346 ;;		 -> motorR(9), 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  i               2   22[COMRAM] unsigned int 
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      void 
  8351 ;; Registers used:
  8352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8353 ;; Tracked objects:
  8354 ;;		On entry : 0/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8358 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8361 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8362 ;;Total ram usage:        5 bytes
  8363 ;; Hardware stack levels used: 1
  8364 ;; Hardware stack levels required when called: 3
  8365 ;; This function calls:
  8366 ;;		_setMotorPWM
  8367 ;; This function is called by:
  8368 ;;		_left90
  8369 ;;		_turn180
  8370 ;;		_left135
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text36
  8375   00415A                     __ptext36:
  8376                           	callstack 0
  8377   00415A                     _turnLeft:
  8378                           	callstack 24
  8379   00415A                     
  8380                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8381   00415A  5014               	movf	turnLeft@mL^0,w,c
  8382   00415C  6ED9               	movwf	fsr2l,c
  8383   00415E  6ADA               	clrf	fsr2h,c
  8384   004160  0E01               	movlw	1
  8385   004162  26D9               	addwf	fsr2l,f,c
  8386   004164  6ADF               	clrf	indf2,c
  8387                           
  8388                           ;dc_motor.c: 109:     mR->direction = 1;
  8389   004166  5015               	movf	turnLeft@mR^0,w,c
  8390   004168  6ED9               	movwf	fsr2l,c
  8391   00416A  6ADA               	clrf	fsr2h,c
  8392   00416C  0E01               	movlw	1
  8393   00416E  26D9               	addwf	fsr2l,f,c
  8394   004170  0E01               	movlw	1
  8395   004172  6EDF               	movwf	indf2,c
  8396   004174                     
  8397                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8398   004174  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8399   004178  EC74  F019         	call	_setMotorPWM	;wreg free
  8400   00417C                     
  8401                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8402   00417C  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8403   004180  EC74  F019         	call	_setMotorPWM	;wreg free
  8404   004184                     
  8405                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8406   004184  0E00               	movlw	0
  8407   004186  6E18               	movwf	(turnLeft@i+1)^0,c
  8408   004188  0E00               	movlw	0
  8409   00418A  6E17               	movwf	turnLeft@i^0,c
  8410   00418C                     l3958:
  8411                           
  8412                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8413   00418C  5014               	movf	turnLeft@mL^0,w,c
  8414   00418E  6ED9               	movwf	fsr2l,c
  8415   004190  6ADA               	clrf	fsr2h,c
  8416   004192  2ADF               	incf	indf2,f,c
  8417                           
  8418                           ;dc_motor.c: 116:         mR->power++;
  8419   004194  5015               	movf	turnLeft@mR^0,w,c
  8420   004196  6ED9               	movwf	fsr2l,c
  8421   004198  6ADA               	clrf	fsr2h,c
  8422   00419A  2ADF               	incf	indf2,f,c
  8423   00419C                     
  8424                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8425   00419C  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8426   0041A0  EC74  F019         	call	_setMotorPWM	;wreg free
  8427   0041A4                     
  8428                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8429   0041A4  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8430   0041A8  EC74  F019         	call	_setMotorPWM	;wreg free
  8431   0041AC                     
  8432                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8433   0041AC  0E0B               	movlw	11
  8434   0041AE  6E16               	movwf	??_turnLeft^0,c
  8435   0041B0  0E62               	movlw	98
  8436   0041B2                     u5567:
  8437   0041B2  2EE8               	decfsz	wreg,f,c
  8438   0041B4  D7FE               	bra	u5567
  8439   0041B6  2E16               	decfsz	??_turnLeft^0,f,c
  8440   0041B8  D7FC               	bra	u5567
  8441   0041BA  D000               	nop2	
  8442   0041BC                     
  8443                           ;dc_motor.c: 120:     }
  8444   0041BC  4A17               	infsnz	turnLeft@i^0,f,c
  8445   0041BE  2A18               	incf	(turnLeft@i+1)^0,f,c
  8446   0041C0  5018               	movf	(turnLeft@i+1)^0,w,c
  8447   0041C2  E109               	bnz	u2990
  8448   0041C4  0E32               	movlw	50
  8449   0041C6  5C17               	subwf	turnLeft@i^0,w,c
  8450   0041C8  A0D8               	btfss	status,0,c
  8451   0041CA  EFE9  F020         	goto	u2991
  8452   0041CE  EFEB  F020         	goto	u2990
  8453   0041D2                     u2991:
  8454   0041D2  EFC6  F020         	goto	l3958
  8455   0041D6                     u2990:
  8456   0041D6  0012               	return		;funcret
  8457   0041D8                     __end_of_turnLeft:
  8458                           	callstack 0
  8459                           
  8460 ;; *************** function _customDelayMs *****************
  8461 ;; Defined at:
  8462 ;;		line 149 in file "calibration.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  milliseconds    2    1[COMRAM] unsigned int 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  i               2    4[COMRAM] unsigned int 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8479 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8480 ;;Total ram usage:        5 bytes
  8481 ;; Hardware stack levels used: 1
  8482 ;; Hardware stack levels required when called: 1
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_right90
  8487 ;;		_left90
  8488 ;;		_turn180
  8489 ;;		_right135
  8490 ;;		_left135
  8491 ;;		_reverseStraight
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text37
  8496   00492E                     __ptext37:
  8497                           	callstack 0
  8498   00492E                     _customDelayMs:
  8499                           	callstack 26
  8500   00492E                     
  8501                           ;calibration.c: 150:     for (unsigned int i = 0; i < milliseconds; i++) {
  8502   00492E  0E00               	movlw	0
  8503   004930  6E06               	movwf	(customDelayMs@i+1)^0,c
  8504   004932  0E00               	movlw	0
  8505   004934  6E05               	movwf	customDelayMs@i^0,c
  8506   004936  EFA7  F024         	goto	l804
  8507   00493A                     l4016:
  8508                           
  8509                           ;calibration.c: 151:         _delay((unsigned long)((1)*(64000000/4000.0)));
  8510   00493A  0E15               	movlw	21
  8511   00493C  6E04               	movwf	??_customDelayMs^0,c
  8512   00493E  0EC6               	movlw	198
  8513   004940                     u5577:
  8514   004940  2EE8               	decfsz	wreg,f,c
  8515   004942  D7FE               	bra	u5577
  8516   004944  2E04               	decfsz	??_customDelayMs^0,f,c
  8517   004946  D7FC               	bra	u5577
  8518   004948  D000               	nop2	
  8519   00494A                     
  8520                           ;calibration.c: 152:     }
  8521   00494A  4A05               	infsnz	customDelayMs@i^0,f,c
  8522   00494C  2A06               	incf	(customDelayMs@i+1)^0,f,c
  8523   00494E                     l804:
  8524   00494E  5002               	movf	customDelayMs@milliseconds^0,w,c
  8525   004950  5C05               	subwf	customDelayMs@i^0,w,c
  8526   004952  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  8527   004954  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  8528   004956  A0D8               	btfss	status,0,c
  8529   004958  EFB0  F024         	goto	u3021
  8530   00495C  EFB2  F024         	goto	u3020
  8531   004960                     u3021:
  8532   004960  EF9D  F024         	goto	l4016
  8533   004964                     u3020:
  8534   004964  0012               	return		;funcret
  8535   004966                     __end_of_customDelayMs:
  8536                           	callstack 0
  8537                           
  8538 ;; *************** function _backHalf *****************
  8539 ;; Defined at:
  8540 ;;		line 243 in file "dc_motor.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8543 ;;		 -> motorL(9), 
  8544 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8545 ;;		 -> motorR(9), 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8560 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8561 ;;Total ram usage:        4 bytes
  8562 ;; Hardware stack levels used: 1
  8563 ;; Hardware stack levels required when called: 4
  8564 ;; This function calls:
  8565 ;;		_fullSpeedBack
  8566 ;;		_stop
  8567 ;; This function is called by:
  8568 ;;		_moveRed
  8569 ;;		_moveGreen
  8570 ;;		_moveBlue
  8571 ;;		_moveOrange
  8572 ;;		_moveLightBlue
  8573 ;;		_moveWhite
  8574 ;;		_reverseTurn
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text38
  8579   004A66                     __ptext38:
  8580                           	callstack 0
  8581   004A66                     _backHalf:
  8582                           	callstack 24
  8583   004A66                     
  8584                           ;dc_motor.c: 243: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 24
      +                          4: {;dc_motor.c: 245:     fullSpeedBack(mL,mR);
  8585   004A66  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8586   004A6A  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8587   004A6E  ECEC  F020         	call	_fullSpeedBack	;wreg free
  8588   004A72                     
  8589                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8590   004A72  0E19               	movlw	25
  8591   004A74  6E1C               	movwf	(??_backHalf+1)^0,c
  8592   004A76  0E5A               	movlw	90
  8593   004A78  6E1B               	movwf	??_backHalf^0,c
  8594   004A7A  0EB2               	movlw	178
  8595   004A7C                     u5587:
  8596   004A7C  2EE8               	decfsz	wreg,f,c
  8597   004A7E  D7FE               	bra	u5587
  8598   004A80  2E1B               	decfsz	??_backHalf^0,f,c
  8599   004A82  D7FC               	bra	u5587
  8600   004A84  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8601   004A86  D7FA               	bra	u5587
  8602   004A88                     
  8603                           ;dc_motor.c: 247:     stop(mL,mR);
  8604   004A88  C019  F014         	movff	backHalf@mL,stop@mL
  8605   004A8C  C01A  F015         	movff	backHalf@mR,stop@mR
  8606   004A90  EC27  F020         	call	_stop	;wreg free
  8607   004A94  0012               	return		;funcret
  8608   004A96                     __end_of_backHalf:
  8609                           	callstack 0
  8610                           
  8611 ;; *************** function _stop *****************
  8612 ;; Defined at:
  8613 ;;		line 88 in file "dc_motor.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8616 ;;		 -> motorL(9), 
  8617 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8618 ;;		 -> motorR(9), 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;		None
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      void 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8633 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8634 ;;Total ram usage:        3 bytes
  8635 ;; Hardware stack levels used: 1
  8636 ;; Hardware stack levels required when called: 3
  8637 ;; This function calls:
  8638 ;;		_setMotorPWM
  8639 ;; This function is called by:
  8640 ;;		_main
  8641 ;;		_right90
  8642 ;;		_left90
  8643 ;;		_turn180
  8644 ;;		_right135
  8645 ;;		_left135
  8646 ;;		_backHalf
  8647 ;;		_backOneAndHalf
  8648 ;;		_reverseStraight
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text39
  8653   00404E                     __ptext39:
  8654                           	callstack 0
  8655   00404E                     _stop:
  8656                           	callstack 27
  8657   00404E                     
  8658                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8659   00404E  EF57  F020         	goto	l3942
  8660   004052                     l3928:
  8661                           
  8662                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8663   004052  5014               	movf	stop@mL^0,w,c
  8664   004054  6ED9               	movwf	fsr2l,c
  8665   004056  6ADA               	clrf	fsr2h,c
  8666   004058  50DF               	movf	indf2,w,c
  8667   00405A  B4D8               	btfsc	status,2,c
  8668   00405C  EF32  F020         	goto	u2951
  8669   004060  EF34  F020         	goto	u2950
  8670   004064                     u2951:
  8671   004064  EF38  F020         	goto	l3932
  8672   004068                     u2950:
  8673   004068  5014               	movf	stop@mL^0,w,c
  8674   00406A  6ED9               	movwf	fsr2l,c
  8675   00406C  6ADA               	clrf	fsr2h,c
  8676   00406E  06DF               	decf	indf2,f,c
  8677   004070                     l3932:
  8678                           
  8679                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8680   004070  5015               	movf	stop@mR^0,w,c
  8681   004072  6ED9               	movwf	fsr2l,c
  8682   004074  6ADA               	clrf	fsr2h,c
  8683   004076  50DF               	movf	indf2,w,c
  8684   004078  B4D8               	btfsc	status,2,c
  8685   00407A  EF41  F020         	goto	u2961
  8686   00407E  EF43  F020         	goto	u2960
  8687   004082                     u2961:
  8688   004082  EF47  F020         	goto	l3936
  8689   004086                     u2960:
  8690   004086  5015               	movf	stop@mR^0,w,c
  8691   004088  6ED9               	movwf	fsr2l,c
  8692   00408A  6ADA               	clrf	fsr2h,c
  8693   00408C  06DF               	decf	indf2,f,c
  8694   00408E                     l3936:
  8695                           
  8696                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8697   00408E  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8698   004092  EC74  F019         	call	_setMotorPWM	;wreg free
  8699   004096                     
  8700                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8701   004096  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8702   00409A  EC74  F019         	call	_setMotorPWM	;wreg free
  8703   00409E                     
  8704                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8705   00409E  0E0B               	movlw	11
  8706   0040A0  6E16               	movwf	??_stop^0,c
  8707   0040A2  0E62               	movlw	98
  8708   0040A4                     u5597:
  8709   0040A4  2EE8               	decfsz	wreg,f,c
  8710   0040A6  D7FE               	bra	u5597
  8711   0040A8  2E16               	decfsz	??_stop^0,f,c
  8712   0040AA  D7FC               	bra	u5597
  8713   0040AC  D000               	nop2	
  8714   0040AE                     l3942:
  8715                           
  8716                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8717   0040AE  5014               	movf	stop@mL^0,w,c
  8718   0040B0  6ED9               	movwf	fsr2l,c
  8719   0040B2  6ADA               	clrf	fsr2h,c
  8720   0040B4  50DF               	movf	indf2,w,c
  8721   0040B6  A4D8               	btfss	status,2,c
  8722   0040B8  EF60  F020         	goto	u2971
  8723   0040BC  EF62  F020         	goto	u2970
  8724   0040C0                     u2971:
  8725   0040C0  EF29  F020         	goto	l3928
  8726   0040C4                     u2970:
  8727   0040C4  5015               	movf	stop@mR^0,w,c
  8728   0040C6  6ED9               	movwf	fsr2l,c
  8729   0040C8  6ADA               	clrf	fsr2h,c
  8730   0040CA  50DF               	movf	indf2,w,c
  8731   0040CC  A4D8               	btfss	status,2,c
  8732   0040CE  EF6B  F020         	goto	u2981
  8733   0040D2  EF6D  F020         	goto	u2980
  8734   0040D6                     u2981:
  8735   0040D6  EF29  F020         	goto	l3928
  8736   0040DA                     u2980:
  8737   0040DA  0012               	return		;funcret
  8738   0040DC                     __end_of_stop:
  8739                           	callstack 0
  8740                           
  8741 ;; *************** function _fullSpeedBack *****************
  8742 ;; Defined at:
  8743 ;;		line 165 in file "dc_motor.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8746 ;;		 -> motorL(9), 
  8747 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8748 ;;		 -> motorR(9), 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  power           2   22[COMRAM] int 
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8760 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8763 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8764 ;;Total ram usage:        5 bytes
  8765 ;; Hardware stack levels used: 1
  8766 ;; Hardware stack levels required when called: 3
  8767 ;; This function calls:
  8768 ;;		_setMotorPWM
  8769 ;; This function is called by:
  8770 ;;		_backHalf
  8771 ;;		_backOneAndHalf
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text40
  8776   0041D8                     __ptext40:
  8777                           	callstack 0
  8778   0041D8                     _fullSpeedBack:
  8779                           	callstack 24
  8780   0041D8                     
  8781                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8782   0041D8  5014               	movf	fullSpeedBack@mL^0,w,c
  8783   0041DA  6ED9               	movwf	fsr2l,c
  8784   0041DC  6ADA               	clrf	fsr2h,c
  8785   0041DE  0E01               	movlw	1
  8786   0041E0  26D9               	addwf	fsr2l,f,c
  8787   0041E2  6ADF               	clrf	indf2,c
  8788                           
  8789                           ;dc_motor.c: 169:     mR->direction = 0;
  8790   0041E4  5015               	movf	fullSpeedBack@mR^0,w,c
  8791   0041E6  6ED9               	movwf	fsr2l,c
  8792   0041E8  6ADA               	clrf	fsr2h,c
  8793   0041EA  0E01               	movlw	1
  8794   0041EC  26D9               	addwf	fsr2l,f,c
  8795   0041EE  6ADF               	clrf	indf2,c
  8796   0041F0                     
  8797                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8798   0041F0  0E00               	movlw	0
  8799   0041F2  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8800   0041F4  0E00               	movlw	0
  8801   0041F6  6E17               	movwf	fullSpeedBack@power^0,c
  8802   0041F8                     l4002:
  8803                           
  8804                           ;dc_motor.c: 172:         mL->power = power;
  8805   0041F8  5014               	movf	fullSpeedBack@mL^0,w,c
  8806   0041FA  6ED9               	movwf	fsr2l,c
  8807   0041FC  6ADA               	clrf	fsr2h,c
  8808   0041FE  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8809                           
  8810                           ;dc_motor.c: 173:         mR->power = power;
  8811   004202  5015               	movf	fullSpeedBack@mR^0,w,c
  8812   004204  6ED9               	movwf	fsr2l,c
  8813   004206  6ADA               	clrf	fsr2h,c
  8814   004208  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8815   00420C                     
  8816                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8817   00420C  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8818   004210  EC74  F019         	call	_setMotorPWM	;wreg free
  8819   004214                     
  8820                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8821   004214  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8822   004218  EC74  F019         	call	_setMotorPWM	;wreg free
  8823   00421C                     
  8824                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8825   00421C  0E0B               	movlw	11
  8826   00421E  6E16               	movwf	??_fullSpeedBack^0,c
  8827   004220  0E62               	movlw	98
  8828   004222                     u5607:
  8829   004222  2EE8               	decfsz	wreg,f,c
  8830   004224  D7FE               	bra	u5607
  8831   004226  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8832   004228  D7FC               	bra	u5607
  8833   00422A  D000               	nop2	
  8834   00422C                     
  8835                           ;dc_motor.c: 181:     }
  8836   00422C  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8837   00422E  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8838   004230  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8839   004232  EF24  F021         	goto	u3011
  8840   004236  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8841   004238  E109               	bnz	u3010
  8842   00423A  0E33               	movlw	51
  8843   00423C  5C17               	subwf	fullSpeedBack@power^0,w,c
  8844   00423E  A0D8               	btfss	status,0,c
  8845   004240  EF24  F021         	goto	u3011
  8846   004244  EF26  F021         	goto	u3010
  8847   004248                     u3011:
  8848   004248  EFFC  F020         	goto	l4002
  8849   00424C                     u3010:
  8850   00424C  0012               	return		;funcret
  8851   00424E                     __end_of_fullSpeedBack:
  8852                           	callstack 0
  8853                           
  8854 ;; *************** function _setMotorPWM *****************
  8855 ;; Defined at:
  8856 ;;		line 65 in file "dc_motor.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8859 ;;		 -> motorR(9), motorL(9), 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  negDuty         1   18[COMRAM] unsigned char 
  8862 ;;  posDuty         1   17[COMRAM] unsigned char 
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  1    wreg      void 
  8865 ;; Registers used:
  8866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8867 ;; Tracked objects:
  8868 ;;		On entry : 0/0
  8869 ;;		On exit  : 0/0
  8870 ;;		Unchanged: 0/0
  8871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8872 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8874 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8875 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8876 ;;Total ram usage:        5 bytes
  8877 ;; Hardware stack levels used: 1
  8878 ;; Hardware stack levels required when called: 2
  8879 ;; This function calls:
  8880 ;;		___lwdiv
  8881 ;;		___wmul
  8882 ;; This function is called by:
  8883 ;;		_stop
  8884 ;;		_turnLeft
  8885 ;;		_turnRight
  8886 ;;		_fullSpeedAhead
  8887 ;;		_fullSpeedBack
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text41
  8892   0032E8                     __ptext41:
  8893                           	callstack 0
  8894   0032E8                     _setMotorPWM:
  8895                           	callstack 27
  8896   0032E8                     
  8897                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8898   0032E8  500F               	movf	setMotorPWM@m^0,w,c
  8899   0032EA  6ED9               	movwf	fsr2l,c
  8900   0032EC  6ADA               	clrf	fsr2h,c
  8901   0032EE  0E02               	movlw	2
  8902   0032F0  26D9               	addwf	fsr2l,f,c
  8903   0032F2  50DF               	movf	indf2,w,c
  8904   0032F4  B4D8               	btfsc	status,2,c
  8905   0032F6  EF7F  F019         	goto	u2861
  8906   0032FA  EF81  F019         	goto	u2860
  8907   0032FE                     u2861:
  8908   0032FE  EFB1  F019         	goto	l3856
  8909   003302                     u2860:
  8910   003302                     
  8911                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8912   003302  500F               	movf	setMotorPWM@m^0,w,c
  8913   003304  6ED9               	movwf	fsr2l,c
  8914   003306  6ADA               	clrf	fsr2h,c
  8915   003308  50DF               	movf	indf2,w,c
  8916   00330A  6E10               	movwf	??_setMotorPWM^0,c
  8917   00330C  5010               	movf	??_setMotorPWM^0,w,c
  8918   00330E  6E02               	movwf	___wmul@multiplier^0,c
  8919   003310  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8920   003312  500F               	movf	setMotorPWM@m^0,w,c
  8921   003314  6ED9               	movwf	fsr2l,c
  8922   003316  6ADA               	clrf	fsr2h,c
  8923   003318  0E03               	movlw	3
  8924   00331A  26D9               	addwf	fsr2l,f,c
  8925   00331C  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8926   003320  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8927   003324  EC8C  F025         	call	___wmul	;wreg free
  8928   003328  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8929   00332C  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8930   003330  0E00               	movlw	0
  8931   003332  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8932   003334  0E64               	movlw	100
  8933   003336  6E0A               	movwf	___lwdiv@divisor^0,c
  8934   003338  EC27  F021         	call	___lwdiv	;wreg free
  8935   00333C  500F               	movf	setMotorPWM@m^0,w,c
  8936   00333E  6ED9               	movwf	fsr2l,c
  8937   003340  6ADA               	clrf	fsr2h,c
  8938   003342  0E03               	movlw	3
  8939   003344  26D9               	addwf	fsr2l,f,c
  8940   003346  50DF               	movf	indf2,w,c
  8941   003348  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8942   00334A  5008               	movf	?___lwdiv^0,w,c
  8943   00334C  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8944   00334E  6E12               	movwf	setMotorPWM@posDuty^0,c
  8945   003350                     
  8946                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8947   003350  500F               	movf	setMotorPWM@m^0,w,c
  8948   003352  6ED9               	movwf	fsr2l,c
  8949   003354  6ADA               	clrf	fsr2h,c
  8950   003356  0E03               	movlw	3
  8951   003358  26D9               	addwf	fsr2l,f,c
  8952   00335A  50DF               	movf	indf2,w,c
  8953   00335C  6E13               	movwf	setMotorPWM@negDuty^0,c
  8954                           
  8955                           ;dc_motor.c: 72:     }
  8956   00335E  EFD2  F019         	goto	l3860
  8957   003362                     l3856:
  8958                           
  8959                           ;dc_motor.c: 74:         posDuty=0;
  8960   003362  0E00               	movlw	0
  8961   003364  6E12               	movwf	setMotorPWM@posDuty^0,c
  8962   003366                     
  8963                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8964   003366  500F               	movf	setMotorPWM@m^0,w,c
  8965   003368  6ED9               	movwf	fsr2l,c
  8966   00336A  6ADA               	clrf	fsr2h,c
  8967   00336C  50DF               	movf	indf2,w,c
  8968   00336E  6E10               	movwf	??_setMotorPWM^0,c
  8969   003370  5010               	movf	??_setMotorPWM^0,w,c
  8970   003372  6E02               	movwf	___wmul@multiplier^0,c
  8971   003374  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8972   003376  500F               	movf	setMotorPWM@m^0,w,c
  8973   003378  6ED9               	movwf	fsr2l,c
  8974   00337A  6ADA               	clrf	fsr2h,c
  8975   00337C  0E03               	movlw	3
  8976   00337E  26D9               	addwf	fsr2l,f,c
  8977   003380  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8978   003384  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8979   003388  EC8C  F025         	call	___wmul	;wreg free
  8980   00338C  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8981   003390  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8982   003394  0E00               	movlw	0
  8983   003396  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8984   003398  0E64               	movlw	100
  8985   00339A  6E0A               	movwf	___lwdiv@divisor^0,c
  8986   00339C  EC27  F021         	call	___lwdiv	;wreg free
  8987   0033A0  5008               	movf	?___lwdiv^0,w,c
  8988   0033A2  6E13               	movwf	setMotorPWM@negDuty^0,c
  8989   0033A4                     l3860:
  8990                           
  8991                           ;dc_motor.c: 78:     if (m->direction) {
  8992   0033A4  500F               	movf	setMotorPWM@m^0,w,c
  8993   0033A6  6ED9               	movwf	fsr2l,c
  8994   0033A8  6ADA               	clrf	fsr2h,c
  8995   0033AA  0E01               	movlw	1
  8996   0033AC  26D9               	addwf	fsr2l,f,c
  8997   0033AE  50DF               	movf	indf2,w,c
  8998   0033B0  B4D8               	btfsc	status,2,c
  8999   0033B2  EFDD  F019         	goto	u2871
  9000   0033B6  EFDF  F019         	goto	u2870
  9001   0033BA                     u2871:
  9002   0033BA  EFFF  F019         	goto	l3864
  9003   0033BE                     u2870:
  9004   0033BE                     
  9005                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  9006   0033BE  500F               	movf	setMotorPWM@m^0,w,c
  9007   0033C0  6ED9               	movwf	fsr2l,c
  9008   0033C2  6ADA               	clrf	fsr2h,c
  9009   0033C4  0E05               	movlw	5
  9010   0033C6  26D9               	addwf	fsr2l,f,c
  9011   0033C8  CFDE F010          	movff	postinc2,??_setMotorPWM
  9012   0033CC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9013   0033D0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9014   0033D4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9015   0033D8  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9016                           
  9017                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  9018   0033DC  500F               	movf	setMotorPWM@m^0,w,c
  9019   0033DE  6ED9               	movwf	fsr2l,c
  9020   0033E0  6ADA               	clrf	fsr2h,c
  9021   0033E2  0E07               	movlw	7
  9022   0033E4  26D9               	addwf	fsr2l,f,c
  9023   0033E6  CFDE F010          	movff	postinc2,??_setMotorPWM
  9024   0033EA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9025   0033EE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9026   0033F2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9027   0033F6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9028                           
  9029                           ;dc_motor.c: 81:     } else {
  9030   0033FA  EF1D  F01A         	goto	l393
  9031   0033FE                     l3864:
  9032                           
  9033                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  9034   0033FE  500F               	movf	setMotorPWM@m^0,w,c
  9035   003400  6ED9               	movwf	fsr2l,c
  9036   003402  6ADA               	clrf	fsr2h,c
  9037   003404  0E05               	movlw	5
  9038   003406  26D9               	addwf	fsr2l,f,c
  9039   003408  CFDE F010          	movff	postinc2,??_setMotorPWM
  9040   00340C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9041   003410  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9042   003414  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9043   003418  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9044                           
  9045                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  9046   00341C  500F               	movf	setMotorPWM@m^0,w,c
  9047   00341E  6ED9               	movwf	fsr2l,c
  9048   003420  6ADA               	clrf	fsr2h,c
  9049   003422  0E07               	movlw	7
  9050   003424  26D9               	addwf	fsr2l,f,c
  9051   003426  CFDE F010          	movff	postinc2,??_setMotorPWM
  9052   00342A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9053   00342E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9054   003432  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9055   003436  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9056   00343A                     l393:
  9057   00343A  0012               	return		;funcret
  9058   00343C                     __end_of_setMotorPWM:
  9059                           	callstack 0
  9060                           
  9061 ;; *************** function ___lwdiv *****************
  9062 ;; Defined at:
  9063 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  dividend        2    7[COMRAM] unsigned int 
  9066 ;;  divisor         2    9[COMRAM] unsigned int 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  quotient        2   11[COMRAM] unsigned int 
  9069 ;;  counter         1   13[COMRAM] unsigned char 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  2    7[COMRAM] unsigned int 
  9072 ;; Registers used:
  9073 ;;		wreg, status,2, status,0
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9080 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9082 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9083 ;;Total ram usage:        7 bytes
  9084 ;; Hardware stack levels used: 1
  9085 ;; Hardware stack levels required when called: 1
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_setMotorPWM
  9090 ;;		_ADC2String
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text42
  9095   00424E                     __ptext42:
  9096                           	callstack 0
  9097   00424E                     ___lwdiv:
  9098                           	callstack 27
  9099   00424E  0E00               	movlw	0
  9100   004250  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  9101   004252  0E00               	movlw	0
  9102   004254  6E0C               	movwf	___lwdiv@quotient^0,c
  9103   004256  500A               	movf	___lwdiv@divisor^0,w,c
  9104   004258  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  9105   00425A  B4D8               	btfsc	status,2,c
  9106   00425C  EF32  F021         	goto	u2711
  9107   004260  EF34  F021         	goto	u2710
  9108   004264                     u2711:
  9109   004264  EF5C  F021         	goto	l1301
  9110   004268                     u2710:
  9111   004268  0E01               	movlw	1
  9112   00426A  6E0E               	movwf	___lwdiv@counter^0,c
  9113   00426C  EF3C  F021         	goto	l3772
  9114   004270                     l3770:
  9115   004270  90D8               	bcf	status,0,c
  9116   004272  360A               	rlcf	___lwdiv@divisor^0,f,c
  9117   004274  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  9118   004276  2A0E               	incf	___lwdiv@counter^0,f,c
  9119   004278                     l3772:
  9120   004278  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  9121   00427A  EF41  F021         	goto	u2721
  9122   00427E  EF43  F021         	goto	u2720
  9123   004282                     u2721:
  9124   004282  EF38  F021         	goto	l3770
  9125   004286                     u2720:
  9126   004286                     l3774:
  9127   004286  90D8               	bcf	status,0,c
  9128   004288  360C               	rlcf	___lwdiv@quotient^0,f,c
  9129   00428A  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  9130   00428C  500A               	movf	___lwdiv@divisor^0,w,c
  9131   00428E  5C08               	subwf	___lwdiv@dividend^0,w,c
  9132   004290  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9133   004292  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  9134   004294  A0D8               	btfss	status,0,c
  9135   004296  EF4F  F021         	goto	u2731
  9136   00429A  EF51  F021         	goto	u2730
  9137   00429E                     u2731:
  9138   00429E  EF56  F021         	goto	l3782
  9139   0042A2                     u2730:
  9140   0042A2  500A               	movf	___lwdiv@divisor^0,w,c
  9141   0042A4  5E08               	subwf	___lwdiv@dividend^0,f,c
  9142   0042A6  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9143   0042A8  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  9144   0042AA  800C               	bsf	___lwdiv@quotient^0,0,c
  9145   0042AC                     l3782:
  9146   0042AC  90D8               	bcf	status,0,c
  9147   0042AE  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  9148   0042B0  320A               	rrcf	___lwdiv@divisor^0,f,c
  9149   0042B2  2E0E               	decfsz	___lwdiv@counter^0,f,c
  9150   0042B4  EF43  F021         	goto	l3774
  9151   0042B8                     l1301:
  9152   0042B8  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  9153   0042BC  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9154   0042C0  0012               	return		;funcret
  9155   0042C2                     __end_of___lwdiv:
  9156                           	callstack 0
  9157                           
  9158 ;; *************** function _logAction *****************
  9159 ;; Defined at:
  9160 ;;		line 14 in file "return_func.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  newAction       1    wreg     unsigned char 
  9163 ;;  newTime         4    1[COMRAM] long 
  9164 ;;  path_step       2    5[COMRAM] unsigned int 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  newAction       1    9[COMRAM] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      void 
  9169 ;; Registers used:
  9170 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9176 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9178 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9179 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9180 ;;Total ram usage:        9 bytes
  9181 ;; Hardware stack levels used: 1
  9182 ;; Hardware stack levels required when called: 1
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_decision
  9187 ;;		_get16bitTMR0val
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text43
  9192   00432C                     __ptext43:
  9193                           	callstack 0
  9194   00432C                     _logAction:
  9195                           	callstack 28
  9196                           
  9197                           ;incstack = 0
  9198                           ;logAction@newAction stored from wreg
  9199   00432C  6E0A               	movwf	logAction@newAction^0,c
  9200   00432E                     
  9201                           ;return_func.c: 15:     if (path_step < 50) {
  9202   00432E  5007               	movf	(logAction@path_step+1)^0,w,c
  9203   004330  E107               	bnz	u4261
  9204   004332  0E32               	movlw	50
  9205   004334  5C06               	subwf	logAction@path_step^0,w,c
  9206   004336  B0D8               	btfsc	status,0,c
  9207   004338  EFA0  F021         	goto	u4261
  9208   00433C  EFA2  F021         	goto	u4260
  9209   004340                     u4261:
  9210   004340  EFC2  F021         	goto	l668
  9211   004344                     u4260:
  9212   004344                     
  9213                           ;return_func.c: 16:         action[path_step] = newAction;
  9214   004344  0E3C               	movlw	low _action
  9215   004346  2406               	addwf	logAction@path_step^0,w,c
  9216   004348  6ED9               	movwf	fsr2l,c
  9217   00434A  0E01               	movlw	high _action
  9218   00434C  2007               	addwfc	(logAction@path_step+1)^0,w,c
  9219   00434E  6EDA               	movwf	fsr2h,c
  9220   004350  C00A  FFDF         	movff	logAction@newAction,indf2
  9221                           
  9222                           ;return_func.c: 17:         time[path_step] = newTime;
  9223   004354  0E00               	movlw	low _time
  9224   004356  6E08               	movwf	??_logAction^0,c
  9225   004358  0E02               	movlw	high _time
  9226   00435A  6E09               	movwf	(??_logAction+1)^0,c
  9227   00435C  90D8               	bcf	status,0,c
  9228   00435E  3406               	rlcf	logAction@path_step^0,w,c
  9229   004360  6ED9               	movwf	fsr2l,c
  9230   004362  3407               	rlcf	(logAction@path_step+1)^0,w,c
  9231   004364  6EDA               	movwf	fsr2h,c
  9232   004366  90D8               	bcf	status,0,c
  9233   004368  36D9               	rlcf	fsr2l,f,c
  9234   00436A  36DA               	rlcf	fsr2h,f,c
  9235   00436C  5008               	movf	??_logAction^0,w,c
  9236   00436E  26D9               	addwf	fsr2l,f,c
  9237   004370  5009               	movf	(??_logAction+1)^0,w,c
  9238   004372  22DA               	addwfc	fsr2h,f,c
  9239   004374  C002  FFDE         	movff	logAction@newTime,postinc2
  9240   004378  C003  FFDE         	movff	logAction@newTime+1,postinc2
  9241   00437C  C004  FFDE         	movff	logAction@newTime+2,postinc2
  9242   004380  C005  FFDE         	movff	logAction@newTime+3,postinc2
  9243   004384                     l668:
  9244   004384  0012               	return		;funcret
  9245   004386                     __end_of_logAction:
  9246                           	callstack 0
  9247                           
  9248 ;; *************** function _color_click_init *****************
  9249 ;; Defined at:
  9250 ;;		line 9 in file "color.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9268 ;;Total ram usage:        1 bytes
  9269 ;; Hardware stack levels used: 1
  9270 ;; Hardware stack levels required when called: 4
  9271 ;; This function calls:
  9272 ;;		_I2C_2_Master_Init
  9273 ;;		_color_writetoaddr
  9274 ;; This function is called by:
  9275 ;;		_main
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text44
  9280   004966                     __ptext44:
  9281                           	callstack 0
  9282   004966                     _color_click_init:
  9283                           	callstack 26
  9284   004966                     
  9285                           ;color.c: 12:     I2C_2_Master_Init();
  9286   004966  EC63  F025         	call	_I2C_2_Master_Init	;wreg free
  9287   00496A                     
  9288                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  9289   00496A  0E01               	movlw	1
  9290   00496C  6E04               	movwf	color_writetoaddr@value^0,c
  9291   00496E  0E00               	movlw	0
  9292   004970  EC9F  F025         	call	_color_writetoaddr
  9293   004974                     
  9294                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9295   004974  0E3F               	movlw	63
  9296   004976  6E06               	movwf	??_color_click_init^0,c
  9297   004978  0E55               	movlw	85
  9298   00497A                     u5617:
  9299   00497A  2EE8               	decfsz	wreg,f,c
  9300   00497C  D7FE               	bra	u5617
  9301   00497E  2E06               	decfsz	??_color_click_init^0,f,c
  9302   004980  D7FC               	bra	u5617
  9303   004982  0000               	nop	
  9304   004984                     
  9305                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  9306   004984  0E03               	movlw	3
  9307   004986  6E04               	movwf	color_writetoaddr@value^0,c
  9308   004988  0E00               	movlw	0
  9309   00498A  EC9F  F025         	call	_color_writetoaddr
  9310   00498E                     
  9311                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  9312   00498E  0ED5               	movlw	213
  9313   004990  6E04               	movwf	color_writetoaddr@value^0,c
  9314   004992  0E01               	movlw	1
  9315   004994  EC9F  F025         	call	_color_writetoaddr
  9316   004998  0012               	return		;funcret
  9317   00499A                     __end_of_color_click_init:
  9318                           	callstack 0
  9319                           
  9320 ;; *************** function _color_writetoaddr *****************
  9321 ;; Defined at:
  9322 ;;		line 25 in file "color.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  address         1    wreg     unsigned char 
  9325 ;;  value           1    3[COMRAM] unsigned char 
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  address         1    4[COMRAM] unsigned char 
  9328 ;; Return value:  Size  Location     Type
  9329 ;;                  1    wreg      void 
  9330 ;; Registers used:
  9331 ;;		wreg, status,2, status,0, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9337 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9341 ;;Total ram usage:        2 bytes
  9342 ;; Hardware stack levels used: 1
  9343 ;; Hardware stack levels required when called: 3
  9344 ;; This function calls:
  9345 ;;		_I2C_2_Master_Start
  9346 ;;		_I2C_2_Master_Stop
  9347 ;;		_I2C_2_Master_Write
  9348 ;; This function is called by:
  9349 ;;		_color_click_init
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text45
  9354   004B3E                     __ptext45:
  9355                           	callstack 0
  9356   004B3E                     _color_writetoaddr:
  9357                           	callstack 26
  9358                           
  9359                           ;incstack = 0
  9360                           ;color_writetoaddr@address stored from wreg
  9361   004B3E  6E05               	movwf	color_writetoaddr@address^0,c
  9362   004B40                     
  9363                           ;color.c: 26:     I2C_2_Master_Start();
  9364   004B40  ECF1  F025         	call	_I2C_2_Master_Start	;wreg free
  9365                           
  9366                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  9367   004B44  0E52               	movlw	82
  9368   004B46  ECE6  F025         	call	_I2C_2_Master_Write
  9369                           
  9370                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  9371   004B4A  5005               	movf	color_writetoaddr@address^0,w,c
  9372   004B4C  0980               	iorlw	128
  9373   004B4E  ECE6  F025         	call	_I2C_2_Master_Write
  9374                           
  9375                           ;color.c: 29:     I2C_2_Master_Write(value);
  9376   004B52  5004               	movf	color_writetoaddr@value^0,w,c
  9377   004B54  ECE6  F025         	call	_I2C_2_Master_Write
  9378                           
  9379                           ;color.c: 30:     I2C_2_Master_Stop();
  9380   004B58  ECEC  F025         	call	_I2C_2_Master_Stop	;wreg free
  9381   004B5C  0012               	return		;funcret
  9382   004B5E                     __end_of_color_writetoaddr:
  9383                           	callstack 0
  9384                           
  9385 ;; *************** function _I2C_2_Master_Init *****************
  9386 ;; Defined at:
  9387 ;;		line 4 in file "i2c.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;		None
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;		None
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  1    wreg      void 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9405 ;;Total ram usage:        0 bytes
  9406 ;; Hardware stack levels used: 1
  9407 ;; Hardware stack levels required when called: 1
  9408 ;; This function calls:
  9409 ;;		Nothing
  9410 ;; This function is called by:
  9411 ;;		_color_click_init
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text46
  9416   004AC6                     __ptext46:
  9417                           	callstack 0
  9418   004AC6                     _I2C_2_Master_Init:
  9419                           	callstack 28
  9420   004AC6                     
  9421                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9422   004AC6  010E               	movlb	14	; () banked
  9423   004AC8  51D9               	movf	217,w,b	;volatile
  9424   004ACA  0BF0               	andlw	-16
  9425   004ACC  0908               	iorlw	8
  9426   004ACE  6FD9               	movwf	217,b	;volatile
  9427   004AD0                     
  9428                           ; BSR set to: 14
  9429                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9430   004AD0  8BD9               	bsf	217,5,b	;volatile
  9431                           
  9432                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9433   004AD2  0E9F               	movlw	159
  9434   004AD4  6FD6               	movwf	214,b	;volatile
  9435   004AD6                     
  9436                           ; BSR set to: 14
  9437                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9438   004AD6  8A84               	bsf	132,5,c	;volatile
  9439   004AD8                     
  9440                           ; BSR set to: 14
  9441                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9442   004AD8  8C84               	bsf	132,6,c	;volatile
  9443   004ADA                     
  9444                           ; BSR set to: 14
  9445                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9446   004ADA  9BA7               	bcf	167,5,b	;volatile
  9447   004ADC                     
  9448                           ; BSR set to: 14
  9449                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9450   004ADC  9DA7               	bcf	167,6,b	;volatile
  9451                           
  9452                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9453   004ADE  0E1D               	movlw	29
  9454   004AE0  6F1D               	movwf	29,b	;volatile
  9455                           
  9456                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9457   004AE2  0E1E               	movlw	30
  9458   004AE4  6F1C               	movwf	28,b	;volatile
  9459                           
  9460                           ;i2c.c: 18:   RD5PPS=0x1C;
  9461   004AE6  0E1C               	movlw	28
  9462   004AE8  6F6F               	movwf	111,b	;volatile
  9463                           
  9464                           ;i2c.c: 19:   RD6PPS=0x1B;
  9465   004AEA  0E1B               	movlw	27
  9466   004AEC  6F70               	movwf	112,b	;volatile
  9467   004AEE                     
  9468                           ; BSR set to: 14
  9469   004AEE  0012               	return		;funcret
  9470   004AF0                     __end_of_I2C_2_Master_Init:
  9471                           	callstack 0
  9472                           
  9473 ;; *************** function _calibration_colors *****************
  9474 ;; Defined at:
  9475 ;;		line 9 in file "calibration.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;  cCal            1   77[COMRAM] PTR struct colors
  9478 ;;		 -> colorCalibration(10), 
  9479 ;; Auto vars:     Size  Location     Type
  9480 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      void 
  9483 ;; Registers used:
  9484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9490 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9491 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9493 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9494 ;;Total ram usage:       23 bytes
  9495 ;; Hardware stack levels used: 1
  9496 ;; Hardware stack levels required when called: 10
  9497 ;; This function calls:
  9498 ;;		_color_read_Blue
  9499 ;;		_color_read_Clear
  9500 ;;		_color_read_Green
  9501 ;;		_color_read_Red
  9502 ;;		_send2USART
  9503 ;;		_sendStringSerial4
  9504 ;;		_sprintf
  9505 ;; This function is called by:
  9506 ;;		_main
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           	psect	text47
  9511   002A84                     __ptext47:
  9512                           	callstack 0
  9513   002A84                     _calibration_colors:
  9514                           	callstack 20
  9515   002A84                     
  9516                           ;calibration.c: 9: void calibration_colors(colors *cCal);calibration.c: 10: {;calibratio
      +                          n.c: 12:     LATGbits.LATG0 = 0;
  9517   002A84  907F               	bcf	127,0,c	;volatile
  9518                           
  9519                           ;calibration.c: 13:     LATEbits.LATE7 = 0;
  9520   002A86  9E7D               	bcf	125,7,c	;volatile
  9521                           
  9522                           ;calibration.c: 14:     LATAbits.LATA3 = 0;
  9523   002A88  9679               	bcf	121,3,c	;volatile
  9524   002A8A                     
  9525                           ;calibration.c: 16:     char cal_state[20];;calibration.c: 20:     sprintf(cal_state,"Ca
      +                          libration state = red", ".");
  9526   002A8A  0E92               	movlw	low calibration_colors@cal_state
  9527   002A8C  6E32               	movwf	sprintf@s^0,c
  9528   002A8E  0E8A               	movlw	low STR_3
  9529   002A90  6E33               	movwf	sprintf@fmt^0,c
  9530   002A92  0EC3               	movlw	low STR_4
  9531   002A94  6E34               	movwf	(?_sprintf+2)^0,c
  9532   002A96  5034               	movf	(?_sprintf+2)^0,w,c
  9533   002A98  A4D8               	btfss	status,2,c
  9534   002A9A  0E0E               	movlw	high __smallconst
  9535   002A9C  6E35               	movwf	(?_sprintf+3)^0,c
  9536   002A9E  ECCD  F024         	call	_sprintf	;wreg free
  9537   002AA2                     
  9538                           ;calibration.c: 21:     sendStringSerial4(cal_state);
  9539   002AA2  0E92               	movlw	low calibration_colors@cal_state
  9540   002AA4  6E03               	movwf	sendStringSerial4@string^0,c
  9541   002AA6  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9542   002AAA                     l764:
  9543                           
  9544                           ;calibration.c: 24:     while(PORTFbits.RF2 == 1){
  9545   002AAA  B48E               	btfsc	142,2,c	;volatile
  9546   002AAC  EF5A  F015         	goto	u5151
  9547   002AB0  EF5C  F015         	goto	u5150
  9548   002AB4                     u5151:
  9549   002AB4  EF55  F015         	goto	l764
  9550   002AB8                     u5150:
  9551   002AB8                     
  9552                           ;calibration.c: 28:     LATGbits.LATG0 = 1;
  9553   002AB8  807F               	bsf	127,0,c	;volatile
  9554   002ABA                     
  9555                           ;calibration.c: 29:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9556   002ABA  0E29               	movlw	41
  9557   002ABC  6E50               	movwf	(??_calibration_colors+1)^0,c
  9558   002ABE  0E96               	movlw	150
  9559   002AC0  6E4F               	movwf	??_calibration_colors^0,c
  9560   002AC2  0E7F               	movlw	127
  9561   002AC4                     u5627:
  9562   002AC4  2EE8               	decfsz	wreg,f,c
  9563   002AC6  D7FE               	bra	u5627
  9564   002AC8  2E4F               	decfsz	??_calibration_colors^0,f,c
  9565   002ACA  D7FC               	bra	u5627
  9566   002ACC  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9567   002ACE  D7FA               	bra	u5627
  9568   002AD0  0000               	nop	
  9569   002AD2                     
  9570                           ;calibration.c: 30:     (cCal->red) = color_read_Red();
  9571   002AD2  ECC3  F021         	call	_color_read_Red	;wreg free
  9572   002AD6  504E               	movf	calibration_colors@cCal^0,w,c
  9573   002AD8  6ED9               	movwf	fsr2l,c
  9574   002ADA  6ADA               	clrf	fsr2h,c
  9575   002ADC  C006  FFDE         	movff	?_color_read_Red,postinc2
  9576   002AE0  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9577   002AE4                     
  9578                           ;calibration.c: 31:     LATGbits.LATG0 = 0;
  9579   002AE4  907F               	bcf	127,0,c	;volatile
  9580   002AE6                     
  9581                           ;calibration.c: 34:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9582   002AE6  0E92               	movlw	low calibration_colors@cal_state
  9583   002AE8  6E32               	movwf	sprintf@s^0,c
  9584   002AEA  0E01               	movlw	low STR_5
  9585   002AEC  6E33               	movwf	sprintf@fmt^0,c
  9586   002AEE  0EC3               	movlw	low STR_4
  9587   002AF0  6E34               	movwf	(?_sprintf+2)^0,c
  9588   002AF2  5034               	movf	(?_sprintf+2)^0,w,c
  9589   002AF4  A4D8               	btfss	status,2,c
  9590   002AF6  0E0E               	movlw	high __smallconst
  9591   002AF8  6E35               	movwf	(?_sprintf+3)^0,c
  9592   002AFA  ECCD  F024         	call	_sprintf	;wreg free
  9593   002AFE                     
  9594                           ;calibration.c: 35:     sendStringSerial4(&cal_state);
  9595   002AFE  0E92               	movlw	low calibration_colors@cal_state
  9596   002B00  6E03               	movwf	sendStringSerial4@string^0,c
  9597   002B02  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9598   002B06                     l767:
  9599                           
  9600                           ;calibration.c: 37:     while(PORTFbits.RF2 == 1){
  9601   002B06  B48E               	btfsc	142,2,c	;volatile
  9602   002B08  EF88  F015         	goto	u5161
  9603   002B0C  EF8A  F015         	goto	u5160
  9604   002B10                     u5161:
  9605   002B10  EF83  F015         	goto	l767
  9606   002B14                     u5160:
  9607   002B14                     
  9608                           ;calibration.c: 41:     LATEbits.LATE7 = 1;
  9609   002B14  8E7D               	bsf	125,7,c	;volatile
  9610   002B16                     
  9611                           ;calibration.c: 42:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9612   002B16  0E29               	movlw	41
  9613   002B18  6E50               	movwf	(??_calibration_colors+1)^0,c
  9614   002B1A  0E96               	movlw	150
  9615   002B1C  6E4F               	movwf	??_calibration_colors^0,c
  9616   002B1E  0E7F               	movlw	127
  9617   002B20                     u5637:
  9618   002B20  2EE8               	decfsz	wreg,f,c
  9619   002B22  D7FE               	bra	u5637
  9620   002B24  2E4F               	decfsz	??_calibration_colors^0,f,c
  9621   002B26  D7FC               	bra	u5637
  9622   002B28  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9623   002B2A  D7FA               	bra	u5637
  9624   002B2C  0000               	nop	
  9625   002B2E                     
  9626                           ;calibration.c: 43:     (cCal->green) = color_read_Green();
  9627   002B2E  ECEB  F021         	call	_color_read_Green	;wreg free
  9628   002B32  504E               	movf	calibration_colors@cCal^0,w,c
  9629   002B34  6ED9               	movwf	fsr2l,c
  9630   002B36  6ADA               	clrf	fsr2h,c
  9631   002B38  0E02               	movlw	2
  9632   002B3A  26D9               	addwf	fsr2l,f,c
  9633   002B3C  C006  FFDE         	movff	?_color_read_Green,postinc2
  9634   002B40  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9635   002B44                     
  9636                           ;calibration.c: 44:     LATEbits.LATE7 = 0;
  9637   002B44  9E7D               	bcf	125,7,c	;volatile
  9638   002B46                     
  9639                           ;calibration.c: 47:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9640   002B46  0E92               	movlw	low calibration_colors@cal_state
  9641   002B48  6E32               	movwf	sprintf@s^0,c
  9642   002B4A  0E3B               	movlw	low STR_7
  9643   002B4C  6E33               	movwf	sprintf@fmt^0,c
  9644   002B4E  0EC3               	movlw	low STR_4
  9645   002B50  6E34               	movwf	(?_sprintf+2)^0,c
  9646   002B52  5034               	movf	(?_sprintf+2)^0,w,c
  9647   002B54  A4D8               	btfss	status,2,c
  9648   002B56  0E0E               	movlw	high __smallconst
  9649   002B58  6E35               	movwf	(?_sprintf+3)^0,c
  9650   002B5A  ECCD  F024         	call	_sprintf	;wreg free
  9651   002B5E                     
  9652                           ;calibration.c: 48:     sendStringSerial4(&cal_state);
  9653   002B5E  0E92               	movlw	low calibration_colors@cal_state
  9654   002B60  6E03               	movwf	sendStringSerial4@string^0,c
  9655   002B62  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9656   002B66                     l770:
  9657                           
  9658                           ;calibration.c: 50:     while(PORTFbits.RF2 == 1){
  9659   002B66  B48E               	btfsc	142,2,c	;volatile
  9660   002B68  EFB8  F015         	goto	u5171
  9661   002B6C  EFBA  F015         	goto	u5170
  9662   002B70                     u5171:
  9663   002B70  EFB3  F015         	goto	l770
  9664   002B74                     u5170:
  9665   002B74                     
  9666                           ;calibration.c: 54:     LATAbits.LATA3 = 1;
  9667   002B74  8679               	bsf	121,3,c	;volatile
  9668   002B76                     
  9669                           ;calibration.c: 55:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9670   002B76  0E29               	movlw	41
  9671   002B78  6E50               	movwf	(??_calibration_colors+1)^0,c
  9672   002B7A  0E96               	movlw	150
  9673   002B7C  6E4F               	movwf	??_calibration_colors^0,c
  9674   002B7E  0E7F               	movlw	127
  9675   002B80                     u5647:
  9676   002B80  2EE8               	decfsz	wreg,f,c
  9677   002B82  D7FE               	bra	u5647
  9678   002B84  2E4F               	decfsz	??_calibration_colors^0,f,c
  9679   002B86  D7FC               	bra	u5647
  9680   002B88  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9681   002B8A  D7FA               	bra	u5647
  9682   002B8C  0000               	nop	
  9683   002B8E                     
  9684                           ;calibration.c: 56:     (cCal->blue) = color_read_Blue();
  9685   002B8E  EC3B  F022         	call	_color_read_Blue	;wreg free
  9686   002B92  504E               	movf	calibration_colors@cCal^0,w,c
  9687   002B94  6ED9               	movwf	fsr2l,c
  9688   002B96  6ADA               	clrf	fsr2h,c
  9689   002B98  0E04               	movlw	4
  9690   002B9A  26D9               	addwf	fsr2l,f,c
  9691   002B9C  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9692   002BA0  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9693   002BA4                     
  9694                           ;calibration.c: 57:     LATAbits.LATA3 = 0;
  9695   002BA4  9679               	bcf	121,3,c	;volatile
  9696   002BA6                     
  9697                           ;calibration.c: 60:     sprintf(cal_state,"Calibration state =  white", ".");
  9698   002BA6  0E92               	movlw	low calibration_colors@cal_state
  9699   002BA8  6E32               	movwf	sprintf@s^0,c
  9700   002BAA  0E56               	movlw	low STR_9
  9701   002BAC  6E33               	movwf	sprintf@fmt^0,c
  9702   002BAE  0EC3               	movlw	low STR_4
  9703   002BB0  6E34               	movwf	(?_sprintf+2)^0,c
  9704   002BB2  5034               	movf	(?_sprintf+2)^0,w,c
  9705   002BB4  A4D8               	btfss	status,2,c
  9706   002BB6  0E0E               	movlw	high __smallconst
  9707   002BB8  6E35               	movwf	(?_sprintf+3)^0,c
  9708   002BBA  ECCD  F024         	call	_sprintf	;wreg free
  9709   002BBE                     
  9710                           ;calibration.c: 61:     sendStringSerial4(&cal_state);
  9711   002BBE  0E92               	movlw	low calibration_colors@cal_state
  9712   002BC0  6E03               	movwf	sendStringSerial4@string^0,c
  9713   002BC2  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9714   002BC6                     l773:
  9715                           
  9716                           ;calibration.c: 63:     while(PORTFbits.RF2 == 1){
  9717   002BC6  B48E               	btfsc	142,2,c	;volatile
  9718   002BC8  EFE8  F015         	goto	u5181
  9719   002BCC  EFEA  F015         	goto	u5180
  9720   002BD0                     u5181:
  9721   002BD0  EFE3  F015         	goto	l773
  9722   002BD4                     u5180:
  9723   002BD4                     
  9724                           ;calibration.c: 66:     LATGbits.LATG0 = 1;
  9725   002BD4  807F               	bsf	127,0,c	;volatile
  9726                           
  9727                           ;calibration.c: 67:     LATEbits.LATE7 = 1;
  9728   002BD6  8E7D               	bsf	125,7,c	;volatile
  9729                           
  9730                           ;calibration.c: 68:     LATAbits.LATA3 = 1;
  9731   002BD8  8679               	bsf	121,3,c	;volatile
  9732   002BDA                     
  9733                           ;calibration.c: 69:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9734   002BDA  0E29               	movlw	41
  9735   002BDC  6E50               	movwf	(??_calibration_colors+1)^0,c
  9736   002BDE  0E96               	movlw	150
  9737   002BE0  6E4F               	movwf	??_calibration_colors^0,c
  9738   002BE2  0E7F               	movlw	127
  9739   002BE4                     u5657:
  9740   002BE4  2EE8               	decfsz	wreg,f,c
  9741   002BE6  D7FE               	bra	u5657
  9742   002BE8  2E4F               	decfsz	??_calibration_colors^0,f,c
  9743   002BEA  D7FC               	bra	u5657
  9744   002BEC  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9745   002BEE  D7FA               	bra	u5657
  9746   002BF0  0000               	nop	
  9747   002BF2                     
  9748                           ;calibration.c: 70:     (cCal->clear) = color_read_Clear();
  9749   002BF2  EC13  F022         	call	_color_read_Clear	;wreg free
  9750   002BF6  504E               	movf	calibration_colors@cCal^0,w,c
  9751   002BF8  6ED9               	movwf	fsr2l,c
  9752   002BFA  6ADA               	clrf	fsr2h,c
  9753   002BFC  0E06               	movlw	6
  9754   002BFE  26D9               	addwf	fsr2l,f,c
  9755   002C00  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9756   002C04  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9757   002C08                     
  9758                           ;calibration.c: 71:     LATGbits.LATG0 = 0;
  9759   002C08  907F               	bcf	127,0,c	;volatile
  9760   002C0A                     
  9761                           ;calibration.c: 72:     LATEbits.LATE7 = 0;
  9762   002C0A  9E7D               	bcf	125,7,c	;volatile
  9763   002C0C                     
  9764                           ;calibration.c: 73:     LATAbits.LATA3 = 0;
  9765   002C0C  9679               	bcf	121,3,c	;volatile
  9766   002C0E                     
  9767                           ;calibration.c: 75:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9768   002C0E  0E92               	movlw	low calibration_colors@cal_state
  9769   002C10  6E32               	movwf	sprintf@s^0,c
  9770   002C12  0E1E               	movlw	low STR_11
  9771   002C14  6E33               	movwf	sprintf@fmt^0,c
  9772   002C16  0EC3               	movlw	low STR_4
  9773   002C18  6E34               	movwf	(?_sprintf+2)^0,c
  9774   002C1A  5034               	movf	(?_sprintf+2)^0,w,c
  9775   002C1C  A4D8               	btfss	status,2,c
  9776   002C1E  0E0E               	movlw	high __smallconst
  9777   002C20  6E35               	movwf	(?_sprintf+3)^0,c
  9778   002C22  ECCD  F024         	call	_sprintf	;wreg free
  9779   002C26                     
  9780                           ;calibration.c: 76:     sendStringSerial4(&cal_state);
  9781   002C26  0E92               	movlw	low calibration_colors@cal_state
  9782   002C28  6E03               	movwf	sendStringSerial4@string^0,c
  9783   002C2A  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9784   002C2E                     l776:
  9785                           
  9786                           ;calibration.c: 78:     while(PORTFbits.RF2 == 1){
  9787   002C2E  B48E               	btfsc	142,2,c	;volatile
  9788   002C30  EF1C  F016         	goto	u5191
  9789   002C34  EF1E  F016         	goto	u5190
  9790   002C38                     u5191:
  9791   002C38  EF17  F016         	goto	l776
  9792   002C3C                     u5190:
  9793   002C3C                     
  9794                           ;calibration.c: 81:     LATGbits.LATG0 = 1;
  9795   002C3C  807F               	bsf	127,0,c	;volatile
  9796                           
  9797                           ;calibration.c: 82:     LATEbits.LATE7 = 1;
  9798   002C3E  8E7D               	bsf	125,7,c	;volatile
  9799                           
  9800                           ;calibration.c: 83:     LATAbits.LATA3 = 1;
  9801   002C40  8679               	bsf	121,3,c	;volatile
  9802   002C42                     
  9803                           ;calibration.c: 84:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9804   002C42  0E29               	movlw	41
  9805   002C44  6E50               	movwf	(??_calibration_colors+1)^0,c
  9806   002C46  0E96               	movlw	150
  9807   002C48  6E4F               	movwf	??_calibration_colors^0,c
  9808   002C4A  0E7F               	movlw	127
  9809   002C4C                     u5667:
  9810   002C4C  2EE8               	decfsz	wreg,f,c
  9811   002C4E  D7FE               	bra	u5667
  9812   002C50  2E4F               	decfsz	??_calibration_colors^0,f,c
  9813   002C52  D7FC               	bra	u5667
  9814   002C54  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9815   002C56  D7FA               	bra	u5667
  9816   002C58  0000               	nop	
  9817   002C5A                     
  9818                           ;calibration.c: 85:     (cCal->ambient) = color_read_Clear();
  9819   002C5A  EC13  F022         	call	_color_read_Clear	;wreg free
  9820   002C5E  504E               	movf	calibration_colors@cCal^0,w,c
  9821   002C60  6ED9               	movwf	fsr2l,c
  9822   002C62  6ADA               	clrf	fsr2h,c
  9823   002C64  0E08               	movlw	8
  9824   002C66  26D9               	addwf	fsr2l,f,c
  9825   002C68  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9826   002C6C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9827   002C70                     
  9828                           ;calibration.c: 86:     LATGbits.LATG0 = 0;
  9829   002C70  907F               	bcf	127,0,c	;volatile
  9830   002C72                     
  9831                           ;calibration.c: 87:     LATEbits.LATE7 = 0;
  9832   002C72  9E7D               	bcf	125,7,c	;volatile
  9833   002C74                     
  9834                           ;calibration.c: 88:     LATAbits.LATA3 = 0;
  9835   002C74  9679               	bcf	121,3,c	;volatile
  9836   002C76                     
  9837                           ;calibration.c: 92:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9838   002C76  0E92               	movlw	low calibration_colors@cal_state
  9839   002C78  6E32               	movwf	sprintf@s^0,c
  9840   002C7A  0E71               	movlw	low STR_13
  9841   002C7C  6E33               	movwf	sprintf@fmt^0,c
  9842   002C7E  0EC3               	movlw	low STR_4
  9843   002C80  6E34               	movwf	(?_sprintf+2)^0,c
  9844   002C82  5034               	movf	(?_sprintf+2)^0,w,c
  9845   002C84  A4D8               	btfss	status,2,c
  9846   002C86  0E0E               	movlw	high __smallconst
  9847   002C88  6E35               	movwf	(?_sprintf+3)^0,c
  9848   002C8A  ECCD  F024         	call	_sprintf	;wreg free
  9849   002C8E                     
  9850                           ;calibration.c: 93:     sendStringSerial4(&cal_state);
  9851   002C8E  0E92               	movlw	low calibration_colors@cal_state
  9852   002C90  6E03               	movwf	sendStringSerial4@string^0,c
  9853   002C92  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9854   002C96                     
  9855                           ;calibration.c: 94:     send2USART(colorCalibration.ambient);
  9856   002C96  C0DC  F04C         	movff	_colorCalibration+8,send2USART@hue
  9857   002C9A  C0DD  F04D         	movff	_colorCalibration+9,send2USART@hue+1
  9858   002C9E  ECBE  F025         	call	_send2USART	;wreg free
  9859   002CA2                     l779:
  9860                           
  9861                           ;calibration.c: 96:     while(PORTFbits.RF2 == 1){
  9862   002CA2  B48E               	btfsc	142,2,c	;volatile
  9863   002CA4  EF56  F016         	goto	u5201
  9864   002CA8  EF58  F016         	goto	u5200
  9865   002CAC                     u5201:
  9866   002CAC  EF51  F016         	goto	l779
  9867   002CB0                     u5200:
  9868   002CB0                     
  9869                           ;calibration.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9870   002CB0  0E29               	movlw	41
  9871   002CB2  6E50               	movwf	(??_calibration_colors+1)^0,c
  9872   002CB4  0E96               	movlw	150
  9873   002CB6  6E4F               	movwf	??_calibration_colors^0,c
  9874   002CB8  0E7F               	movlw	127
  9875   002CBA                     u5677:
  9876   002CBA  2EE8               	decfsz	wreg,f,c
  9877   002CBC  D7FE               	bra	u5677
  9878   002CBE  2E4F               	decfsz	??_calibration_colors^0,f,c
  9879   002CC0  D7FC               	bra	u5677
  9880   002CC2  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9881   002CC4  D7FA               	bra	u5677
  9882   002CC6  0000               	nop	
  9883   002CC8  0012               	return		;funcret
  9884   002CCA                     __end_of_calibration_colors:
  9885                           	callstack 0
  9886                           
  9887 ;; *************** function _send2USART *****************
  9888 ;; Defined at:
  9889 ;;		line 146 in file "serial.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;  hue             2   75[COMRAM] unsigned int 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  1    wreg      void 
  9896 ;; Registers used:
  9897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9904 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9906 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9907 ;;Total ram usage:       52 bytes
  9908 ;; Hardware stack levels used: 1
  9909 ;; Hardware stack levels required when called: 9
  9910 ;; This function calls:
  9911 ;;		_sendStringSerial4
  9912 ;;		_sprintf
  9913 ;; This function is called by:
  9914 ;;		_main
  9915 ;;		_calibration_colors
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           	psect	text48
  9920   004B7C                     __ptext48:
  9921                           	callstack 0
  9922   004B7C                     _send2USART:
  9923                           	callstack 21
  9924   004B7C                     
  9925                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  9926   004B7C  0E60               	movlw	low send2USART@hue_char
  9927   004B7E  6E32               	movwf	sprintf@s^0,c
  9928   004B80  0EB7               	movlw	low STR_2
  9929   004B82  6E33               	movwf	sprintf@fmt^0,c
  9930   004B84  C04C  F034         	movff	send2USART@hue,?_sprintf+2
  9931   004B88  C04D  F035         	movff	send2USART@hue+1,?_sprintf+3
  9932   004B8C  ECCD  F024         	call	_sprintf	;wreg free
  9933   004B90                     
  9934                           ;serial.c: 158:         sendStringSerial4(hue_char);
  9935   004B90  0E60               	movlw	low send2USART@hue_char
  9936   004B92  6E03               	movwf	sendStringSerial4@string^0,c
  9937   004B94  EC1A  F025         	call	_sendStringSerial4	;wreg free
  9938   004B98  0012               	return		;funcret
  9939   004B9A                     __end_of_send2USART:
  9940                           	callstack 0
  9941                           
  9942 ;; *************** function _sprintf *****************
  9943 ;; Defined at:
  9944 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  s               1   49[COMRAM] PTR unsigned char 
  9947 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
  9948 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9949 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
  9950 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  f              12   56[COMRAM] struct _IO_FILE
  9953 ;;  ret             2    0        int 
  9954 ;;  ap              1   55[COMRAM] PTR void [1]
  9955 ;;		 -> ?_sprintf(2), 
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  2   49[COMRAM] int 
  9958 ;; Registers used:
  9959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9966 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9968 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9969 ;;Total ram usage:       19 bytes
  9970 ;; Hardware stack levels used: 1
  9971 ;; Hardware stack levels required when called: 8
  9972 ;; This function calls:
  9973 ;;		_vfprintf
  9974 ;; This function is called by:
  9975 ;;		_send2USART
  9976 ;;		_calibration_colors
  9977 ;;		_ADC2String
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text49
  9982   00499A                     __ptext49:
  9983                           	callstack 0
  9984   00499A                     _sprintf:
  9985                           	callstack 21
  9986   00499A  0E34               	movlw	low (?_sprintf+2)
  9987   00499C  6E38               	movwf	sprintf@ap^0,c
  9988   00499E  C032  F039         	movff	sprintf@s,sprintf@f
  9989   0049A2  0E00               	movlw	0
  9990   0049A4  6E3D               	movwf	(sprintf@f+4)^0,c
  9991   0049A6  0E00               	movlw	0
  9992   0049A8  6E3C               	movwf	(sprintf@f+3)^0,c
  9993   0049AA  0E00               	movlw	0
  9994   0049AC  6E44               	movwf	(sprintf@f+11)^0,c
  9995   0049AE  0E00               	movlw	0
  9996   0049B0  6E43               	movwf	(sprintf@f+10)^0,c
  9997   0049B2  0E39               	movlw	low sprintf@f
  9998   0049B4  6E2E               	movwf	vfprintf@fp^0,c
  9999   0049B6  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
 10000   0049BA  0E38               	movlw	low sprintf@ap
 10001   0049BC  6E30               	movwf	vfprintf@ap^0,c
 10002   0049BE  EC4D  F023         	call	_vfprintf	;wreg free
 10003   0049C2  5032               	movf	sprintf@s^0,w,c
 10004   0049C4  243C               	addwf	(sprintf@f+3)^0,w,c
 10005   0049C6  6ED9               	movwf	fsr2l,c
 10006   0049C8  6ADA               	clrf	fsr2h,c
 10007   0049CA  6ADF               	clrf	indf2,c
 10008   0049CC  0012               	return		;funcret
 10009   0049CE                     __end_of_sprintf:
 10010                           	callstack 0
 10011                           
 10012 ;; *************** function _vfprintf *****************
 10013 ;; Defined at:
 10014 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
 10017 ;;		 -> sprintf@f(12), 
 10018 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
 10019 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10020 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10021 ;;  ap              1   47[COMRAM] PTR PTR void 
 10022 ;;		 -> sprintf@ap(1), 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
 10025 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10026 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  2   45[COMRAM] int 
 10029 ;; Registers used:
 10030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10036 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10039 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10040 ;;Total ram usage:        4 bytes
 10041 ;; Hardware stack levels used: 1
 10042 ;; Hardware stack levels required when called: 7
 10043 ;; This function calls:
 10044 ;;		_vfpfcnvrt
 10045 ;; This function is called by:
 10046 ;;		_sprintf
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text50
 10051   00469A                     __ptext50:
 10052                           	callstack 0
 10053   00469A                     _vfprintf:
 10054                           	callstack 21
 10055   00469A                     
 10056                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
 10057   00469A  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
 10058                           
 10059                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10060   00469E  EF59  F023         	goto	l5798
 10061   0046A2                     l5796:
 10062                           
 10063                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
 10064   0046A2  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
 10065   0046A6  0E31               	movlw	low vfprintf@cfmt
 10066   0046A8  6E24               	movwf	vfpfcnvrt@fmt^0,c
 10067   0046AA  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
 10068   0046AE  EC3F  F017         	call	_vfpfcnvrt	;wreg free
 10069   0046B2                     l5798:
 10070                           
 10071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10072   0046B2  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
 10073   0046B6                     	if	1	;There is more than 1 active tblptr byte
 10074   0046B6  0E0E               	movlw	high __smallconst
 10075   0046B8  6EF7               	movwf	tblptrh,c
 10076   0046BA                     	endif
 10077   0046BA                     	if	0	;tblptru may be non-zero
 10078   0046BA                     	endif
 10079   0046BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10080   0046BA  0E00               	movlw	low (__smallconst shr (0+16))
 10081   0046BC  6EF8               	movwf	tblptru,c
 10082   0046BE                     	endif
 10083   0046BE  0008               	tblrd		*
 10084   0046C0  50F5               	movf	tablat,w,c
 10085   0046C2  0900               	iorlw	0
 10086   0046C4  A4D8               	btfss	status,2,c
 10087   0046C6  EF67  F023         	goto	u5141
 10088   0046CA  EF69  F023         	goto	u5140
 10089   0046CE                     u5141:
 10090   0046CE  EF51  F023         	goto	l5796
 10091   0046D2                     u5140:
 10092   0046D2                     
 10093                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
 10094   0046D2  0E00               	movlw	0
 10095   0046D4  6E2F               	movwf	(?_vfprintf+1)^0,c
 10096   0046D6  0E00               	movlw	0
 10097   0046D8  6E2E               	movwf	?_vfprintf^0,c
 10098   0046DA  0012               	return		;funcret
 10099   0046DC                     __end_of_vfprintf:
 10100                           	callstack 0
 10101                           
 10102 ;; *************** function _vfpfcnvrt *****************
 10103 ;; Defined at:
 10104 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
 10107 ;;		 -> sprintf@f(12), 
 10108 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
 10109 ;;		 -> vfprintf@cfmt(1), 
 10110 ;;  ap              1   36[COMRAM] PTR PTR void 
 10111 ;;		 -> sprintf@ap(1), 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  convarg         4   39[COMRAM] struct .
 10114 ;;  cp              1   44[COMRAM] PTR unsigned char 
 10115 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10116 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10117 ;;  done            1   43[COMRAM] _Bool 
 10118 ;;  c               1    0        unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10128 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10129 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10131 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10132 ;;Total ram usage:       11 bytes
 10133 ;; Hardware stack levels used: 1
 10134 ;; Hardware stack levels required when called: 6
 10135 ;; This function calls:
 10136 ;;		_dtoa
 10137 ;;		_fputc
 10138 ;;		_read_prec_or_width
 10139 ;; This function is called by:
 10140 ;;		_vfprintf
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text51
 10145   002E7E                     __ptext51:
 10146                           	callstack 0
 10147   002E7E                     _vfpfcnvrt:
 10148                           	callstack 21
 10149   002E7E                     
 10150                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
 10151   002E7E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10152   002E80  6ED9               	movwf	fsr2l,c
 10153   002E82  6ADA               	clrf	fsr2h,c
 10154   002E84  CFDF FFF6          	movff	indf2,tblptrl
 10155   002E88                     	if	1	;There is more than 1 active tblptr byte
 10156   002E88  0E0E               	movlw	high __smallconst
 10157   002E8A  6EF7               	movwf	tblptrh,c
 10158   002E8C                     	endif
 10159   002E8C                     	if	0	;tblptru may be non-zero
 10160   002E8C                     	endif
 10161   002E8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10162   002E8C  0E00               	movlw	low (__smallconst shr (0+16))
 10163   002E8E  6EF8               	movwf	tblptru,c
 10164   002E90                     	endif
 10165   002E90  0008               	tblrd		*
 10166   002E92  50F5               	movf	tablat,w,c
 10167   002E94  0A25               	xorlw	37
 10168   002E96  A4D8               	btfss	status,2,c
 10169   002E98  EF50  F017         	goto	u5091
 10170   002E9C  EF52  F017         	goto	u5090
 10171   002EA0                     u5091:
 10172   002EA0  EFEF  F017         	goto	l5784
 10173   002EA4                     u5090:
 10174   002EA4                     
 10175                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
 10176   002EA4  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10177   002EA6  6ED9               	movwf	fsr2l,c
 10178   002EA8  6ADA               	clrf	fsr2h,c
 10179   002EAA  2ADF               	incf	indf2,f,c
 10180   002EAC                     
 10181                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
 10182   002EAC  0E00               	movlw	0
 10183   002EAE  0100               	movlb	0	; () banked
 10184   002EB0  6FC3               	movwf	(_width+1)& (0+255),b
 10185   002EB2  0E00               	movlw	0
 10186   002EB4  6FC2               	movwf	_width& (0+255),b
 10187   002EB6  C0C2  F0C6         	movff	_width,_flags
 10188   002EBA                     
 10189                           ; BSR set to: 0
 10190                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
 10191   002EBA  69C4               	setf	_prec& (0+255),b
 10192   002EBC  69C5               	setf	(_prec+1)& (0+255),b
 10193   002EBE                     
 10194                           ; BSR set to: 0
 10195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
 10196   002EBE  0E00               	movlw	0
 10197   002EC0  6E2C               	movwf	vfpfcnvrt@done^0,c
 10198                           
 10199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10200   002EC2  EF8A  F017         	goto	l5758
 10201   002EC6                     l5748:
 10202                           
 10203                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
 10204   002EC6  0100               	movlb	0	; () banked
 10205   002EC8  83C6               	bsf	_flags& (0+255),1,b
 10206   002ECA                     
 10207                           ; BSR set to: 0
 10208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
 10209   002ECA  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10210   002ECC  6ED9               	movwf	fsr2l,c
 10211   002ECE  6ADA               	clrf	fsr2h,c
 10212   002ED0  2ADF               	incf	indf2,f,c
 10213                           
 10214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
 10215   002ED2  EF8A  F017         	goto	l5758
 10216   002ED6                     l5752:
 10217                           
 10218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
 10219   002ED6  0E01               	movlw	1
 10220   002ED8  6E2C               	movwf	vfpfcnvrt@done^0,c
 10221                           
 10222                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
 10223   002EDA  EF8A  F017         	goto	l5758
 10224   002EDE                     l5756:
 10225   002EDE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10226   002EE0  6ED9               	movwf	fsr2l,c
 10227   002EE2  6ADA               	clrf	fsr2h,c
 10228   002EE4  CFDF FFF6          	movff	indf2,tblptrl
 10229   002EE8                     	if	1	;There is more than 1 active tblptr byte
 10230   002EE8  0E0E               	movlw	high __smallconst
 10231   002EEA  6EF7               	movwf	tblptrh,c
 10232   002EEC                     	endif
 10233   002EEC                     	if	0	;tblptru may be non-zero
 10234   002EEC                     	endif
 10235   002EEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10236   002EEC  0E00               	movlw	low (__smallconst shr (0+16))
 10237   002EEE  6EF8               	movwf	tblptru,c
 10238   002EF0                     	endif
 10239   002EF0  0008               	tblrd		*
 10240   002EF2  50F5               	movf	tablat,w,c
 10241   002EF4  6E26               	movwf	??_vfpfcnvrt^0,c
 10242   002EF6  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
 10243                           
 10244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10245                           ; Switch size 1, requested type "simple"
 10246                           ; Number of cases is 1, Range of values is 0 to 0
 10247                           ; switch strategies available:
 10248                           ; Name         Instructions Cycles
 10249                           ; simple_byte            4     3 (average)
 10250                           ;	Chosen strategy is simple_byte
 10251   002EF8  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
 10252   002EFA  0A00               	xorlw	0	; case 0
 10253   002EFC  B4D8               	btfsc	status,2,c
 10254   002EFE  EF83  F017         	goto	l6106
 10255   002F02  EF6B  F017         	goto	l5752
 10256   002F06                     l6106:
 10257                           
 10258                           ; Switch size 1, requested type "simple"
 10259                           ; Number of cases is 1, Range of values is 48 to 48
 10260                           ; switch strategies available:
 10261                           ; Name         Instructions Cycles
 10262                           ; simple_byte            4     3 (average)
 10263                           ;	Chosen strategy is simple_byte
 10264   002F06  5026               	movf	??_vfpfcnvrt^0,w,c
 10265   002F08  0A30               	xorlw	48	; case 48
 10266   002F0A  B4D8               	btfsc	status,2,c
 10267   002F0C  EF63  F017         	goto	l5748
 10268   002F10  EF6B  F017         	goto	l5752
 10269   002F14                     l5758:
 10270                           
 10271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10272   002F14  502C               	movf	vfpfcnvrt@done^0,w,c
 10273   002F16  B4D8               	btfsc	status,2,c
 10274   002F18  EF90  F017         	goto	u5101
 10275   002F1C  EF92  F017         	goto	u5100
 10276   002F20                     u5101:
 10277   002F20  EF6F  F017         	goto	l5756
 10278   002F24                     u5100:
 10279   002F24                     
 10280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
 10281   002F24  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
 10282   002F28  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
 10283   002F2C  EC44  F01E         	call	_read_prec_or_width	;wreg free
 10284   002F30  C008  F0C2         	movff	?_read_prec_or_width,_width
 10285   002F34  C009  F0C3         	movff	?_read_prec_or_width+1,_width+1
 10286   002F38                     
 10287                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
 10288   002F38  0100               	movlb	0	; () banked
 10289   002F3A  BFC3               	btfsc	(_width+1)& (0+255),7,b
 10290   002F3C  EFA4  F017         	goto	u5110
 10291   002F40  EFA2  F017         	goto	u5111
 10292   002F44                     u5111:
 10293   002F44  EFA9  F017         	goto	l5766
 10294   002F48                     u5110:
 10295   002F48                     
 10296                           ; BSR set to: 0
 10297                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
 10298   002F48  81C6               	bsf	_flags& (0+255),0,b
 10299                           
 10300                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 10301   002F4A  6DC2               	negf	_width& (0+255),b
 10302   002F4C  1FC3               	comf	(_width+1)& (0+255),f,b
 10303   002F4E  B0D8               	btfsc	status,0,c
 10304   002F50  2BC3               	incf	(_width+1)& (0+255),f,b
 10305   002F52                     l5766:
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 10309   002F52  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10310   002F54  6ED9               	movwf	fsr2l,c
 10311   002F56  6ADA               	clrf	fsr2h,c
 10312   002F58  50DF               	movf	indf2,w,c
 10313   002F5A  6E2D               	movwf	vfpfcnvrt@cp^0,c
 10314   002F5C                     
 10315                           ; BSR set to: 0
 10316                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 10317   002F5C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10318   002F60                     	if	1	;There is more than 1 active tblptr byte
 10319   002F60  0E0E               	movlw	high __smallconst
 10320   002F62  6EF7               	movwf	tblptrh,c
 10321   002F64                     	endif
 10322   002F64                     	if	0	;tblptru may be non-zero
 10323   002F64                     	endif
 10324   002F64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10325   002F64  0E00               	movlw	low (__smallconst shr (0+16))
 10326   002F66  6EF8               	movwf	tblptru,c
 10327   002F68                     	endif
 10328   002F68  0008               	tblrd		*
 10329   002F6A  50F5               	movf	tablat,w,c
 10330   002F6C  0A64               	xorlw	100
 10331   002F6E  B4D8               	btfsc	status,2,c
 10332   002F70  EFBC  F017         	goto	u5121
 10333   002F74  EFBE  F017         	goto	u5120
 10334   002F78                     u5121:
 10335   002F78  EFCE  F017         	goto	l5772
 10336   002F7C                     u5120:
 10337   002F7C                     
 10338                           ; BSR set to: 0
 10339   002F7C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10340   002F80                     	if	1	;There is more than 1 active tblptr byte
 10341   002F80  0E0E               	movlw	high __smallconst
 10342   002F82  6EF7               	movwf	tblptrh,c
 10343   002F84                     	endif
 10344   002F84                     	if	0	;tblptru may be non-zero
 10345   002F84                     	endif
 10346   002F84                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10347   002F84  0E00               	movlw	low (__smallconst shr (0+16))
 10348   002F86  6EF8               	movwf	tblptru,c
 10349   002F88                     	endif
 10350   002F88  0008               	tblrd		*
 10351   002F8A  50F5               	movf	tablat,w,c
 10352   002F8C  0A69               	xorlw	105
 10353   002F8E  A4D8               	btfss	status,2,c
 10354   002F90  EFCC  F017         	goto	u5131
 10355   002F94  EFCE  F017         	goto	u5130
 10356   002F98                     u5131:
 10357   002F98  EFE9  F017         	goto	l5780
 10358   002F9C                     u5130:
 10359   002F9C                     l5772:
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 10363   002F9C  5025               	movf	vfpfcnvrt@ap^0,w,c
 10364   002F9E  6ED9               	movwf	fsr2l,c
 10365   002FA0  6ADA               	clrf	fsr2h,c
 10366   002FA2  0E02               	movlw	2
 10367   002FA4  26DF               	addwf	indf2,f,c
 10368   002FA6  5CDF               	subwf	indf2,w,c
 10369   002FA8  6ED9               	movwf	fsr2l,c
 10370   002FAA  6ADA               	clrf	fsr2h,c
 10371   002FAC  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 10372   002FB0  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 10373   002FB4                     
 10374                           ; BSR set to: 0
 10375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 10376   002FB4  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10377   002FB6  6ED9               	movwf	fsr2l,c
 10378   002FB8  6ADA               	clrf	fsr2h,c
 10379   002FBA  282D               	incf	vfpfcnvrt@cp^0,w,c
 10380   002FBC  6EDF               	movwf	indf2,c
 10381   002FBE                     
 10382                           ; BSR set to: 0
 10383                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10384   002FBE  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10385   002FC2  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10386   002FC6  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10387   002FCA  EC03  F018         	call	_dtoa	;wreg free
 10388   002FCE  EF02  F018         	goto	l1552
 10389   002FD2                     l5780:
 10390                           
 10391                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10392   002FD2  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10393   002FD4  6ED9               	movwf	fsr2l,c
 10394   002FD6  6ADA               	clrf	fsr2h,c
 10395   002FD8  2ADF               	incf	indf2,f,c
 10396   002FDA  EF02  F018         	goto	l1552
 10397   002FDE                     l5784:
 10398                           
 10399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10400   002FDE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10401   002FE0  6ED9               	movwf	fsr2l,c
 10402   002FE2  6ADA               	clrf	fsr2h,c
 10403   002FE4  CFDF FFF6          	movff	indf2,tblptrl
 10404   002FE8                     	if	1	;There is more than 1 active tblptr byte
 10405   002FE8  0E0E               	movlw	high __smallconst
 10406   002FEA  6EF7               	movwf	tblptrh,c
 10407   002FEC                     	endif
 10408   002FEC                     	if	0	;tblptru may be non-zero
 10409   002FEC                     	endif
 10410   002FEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10411   002FEC  0E00               	movlw	low (__smallconst shr (0+16))
 10412   002FEE  6EF8               	movwf	tblptru,c
 10413   002FF0                     	endif
 10414   002FF0  0008               	tblrd		*
 10415   002FF2  50F5               	movf	tablat,w,c
 10416   002FF4  6E02               	movwf	fputc@c^0,c
 10417   002FF6  6A03               	clrf	(fputc@c+1)^0,c
 10418   002FF8  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10419   002FFC  ECF0  F01E         	call	_fputc	;wreg free
 10420   003000  EFE9  F017         	goto	l5780
 10421   003004                     l1552:
 10422   003004  0012               	return		;funcret
 10423   003006                     __end_of_vfpfcnvrt:
 10424                           	callstack 0
 10425                           
 10426 ;; *************** function _read_prec_or_width *****************
 10427 ;; Defined at:
 10428 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10431 ;;		 -> vfprintf@cfmt(1), 
 10432 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10433 ;;		 -> sprintf@ap(1), 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  c               1    9[COMRAM] unsigned char 
 10436 ;;  n               2   10[COMRAM] int 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2    7[COMRAM] int 
 10439 ;; Registers used:
 10440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10447 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10449 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10450 ;;Total ram usage:        5 bytes
 10451 ;; Hardware stack levels used: 1
 10452 ;; Hardware stack levels required when called: 2
 10453 ;; This function calls:
 10454 ;;		___wmul
 10455 ;; This function is called by:
 10456 ;;		_vfpfcnvrt
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           	psect	text52
 10461   003C88                     __ptext52:
 10462                           	callstack 0
 10463   003C88                     _read_prec_or_width:
 10464                           	callstack 24
 10465   003C88                     
 10466                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10467   003C88  0E00               	movlw	0
 10468   003C8A  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10469   003C8C  0E00               	movlw	0
 10470   003C8E  6E0B               	movwf	read_prec_or_width@n^0,c
 10471   003C90                     
 10472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10473   003C90  5008               	movf	read_prec_or_width@fmt^0,w,c
 10474   003C92  6ED9               	movwf	fsr2l,c
 10475   003C94  6ADA               	clrf	fsr2h,c
 10476   003C96  CFDF FFF6          	movff	indf2,tblptrl
 10477   003C9A                     	if	1	;There is more than 1 active tblptr byte
 10478   003C9A  0E0E               	movlw	high __smallconst
 10479   003C9C  6EF7               	movwf	tblptrh,c
 10480   003C9E                     	endif
 10481   003C9E                     	if	0	;tblptru may be non-zero
 10482   003C9E                     	endif
 10483   003C9E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10484   003C9E  0E00               	movlw	low (__smallconst shr (0+16))
 10485   003CA0  6EF8               	movwf	tblptru,c
 10486   003CA2                     	endif
 10487   003CA2  0008               	tblrd		*
 10488   003CA4  50F5               	movf	tablat,w,c
 10489   003CA6  0A2A               	xorlw	42
 10490   003CA8  A4D8               	btfss	status,2,c
 10491   003CAA  EF59  F01E         	goto	u2841
 10492   003CAE  EF5B  F01E         	goto	u2840
 10493   003CB2                     u2841:
 10494   003CB2  EF81  F01E         	goto	l3848
 10495   003CB6                     u2840:
 10496   003CB6                     
 10497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10498   003CB6  5008               	movf	read_prec_or_width@fmt^0,w,c
 10499   003CB8  6ED9               	movwf	fsr2l,c
 10500   003CBA  6ADA               	clrf	fsr2h,c
 10501   003CBC  2ADF               	incf	indf2,f,c
 10502   003CBE                     
 10503                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10504   003CBE  5009               	movf	read_prec_or_width@ap^0,w,c
 10505   003CC0  6ED9               	movwf	fsr2l,c
 10506   003CC2  6ADA               	clrf	fsr2h,c
 10507   003CC4  0E02               	movlw	2
 10508   003CC6  26DF               	addwf	indf2,f,c
 10509   003CC8  5CDF               	subwf	indf2,w,c
 10510   003CCA  6ED9               	movwf	fsr2l,c
 10511   003CCC  6ADA               	clrf	fsr2h,c
 10512   003CCE  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10513   003CD2  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10514                           
 10515                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10516   003CD6  EF96  F01E         	goto	l1533
 10517   003CDA                     l3844:
 10518                           
 10519                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10520   003CDA  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10521   003CDE  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10522   003CE2  0E00               	movlw	0
 10523   003CE4  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10524   003CE6  0E0A               	movlw	10
 10525   003CE8  6E04               	movwf	___wmul@multiplicand^0,c
 10526   003CEA  EC8C  F025         	call	___wmul	;wreg free
 10527   003CEE  500A               	movf	read_prec_or_width@c^0,w,c
 10528   003CF0  2402               	addwf	?___wmul^0,w,c
 10529   003CF2  6E0B               	movwf	read_prec_or_width@n^0,c
 10530   003CF4  0E00               	movlw	0
 10531   003CF6  2003               	addwfc	(?___wmul+1)^0,w,c
 10532   003CF8  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10533   003CFA                     
 10534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10535   003CFA  5008               	movf	read_prec_or_width@fmt^0,w,c
 10536   003CFC  6ED9               	movwf	fsr2l,c
 10537   003CFE  6ADA               	clrf	fsr2h,c
 10538   003D00  2ADF               	incf	indf2,f,c
 10539   003D02                     l3848:
 10540                           
 10541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10542   003D02  5008               	movf	read_prec_or_width@fmt^0,w,c
 10543   003D04  6ED9               	movwf	fsr2l,c
 10544   003D06  6ADA               	clrf	fsr2h,c
 10545   003D08  CFDF FFF6          	movff	indf2,tblptrl
 10546   003D0C                     	if	1	;There is more than 1 active tblptr byte
 10547   003D0C  0E0E               	movlw	high __smallconst
 10548   003D0E  6EF7               	movwf	tblptrh,c
 10549   003D10                     	endif
 10550   003D10                     	if	0	;tblptru may be non-zero
 10551   003D10                     	endif
 10552   003D10                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10553   003D10  0E00               	movlw	low (__smallconst shr (0+16))
 10554   003D12  6EF8               	movwf	tblptru,c
 10555   003D14                     	endif
 10556   003D14  0008               	tblrd		*
 10557   003D16  50F5               	movf	tablat,w,c
 10558   003D18  0FD0               	addlw	208
 10559   003D1A  6E0A               	movwf	read_prec_or_width@c^0,c
 10560   003D1C  0E09               	movlw	9
 10561   003D1E  640A               	cpfsgt	read_prec_or_width@c^0,c
 10562   003D20  EF94  F01E         	goto	u2851
 10563   003D24  EF96  F01E         	goto	u2850
 10564   003D28                     u2851:
 10565   003D28  EF6D  F01E         	goto	l3844
 10566   003D2C                     u2850:
 10567   003D2C                     l1533:
 10568                           
 10569                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10570   003D2C  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10571   003D30  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10572   003D34  0012               	return		;funcret
 10573   003D36                     __end_of_read_prec_or_width:
 10574                           	callstack 0
 10575                           
 10576 ;; *************** function ___wmul *****************
 10577 ;; Defined at:
 10578 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;  multiplier      2    1[COMRAM] unsigned int 
 10581 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  product         2    5[COMRAM] unsigned int 
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  2    1[COMRAM] unsigned int 
 10586 ;; Registers used:
 10587 ;;		wreg, status,2, status,0, prodl, prodh
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10593 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10596 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10597 ;;Total ram usage:        6 bytes
 10598 ;; Hardware stack levels used: 1
 10599 ;; Hardware stack levels required when called: 1
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_setMotorPWM
 10604 ;;		_right90
 10605 ;;		_left90
 10606 ;;		_turn180
 10607 ;;		_right135
 10608 ;;		_left135
 10609 ;;		_read_prec_or_width
 10610 ;;		_ADC2String
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text53
 10615   004B18                     __ptext53:
 10616                           	callstack 0
 10617   004B18                     ___wmul:
 10618                           	callstack 27
 10619   004B18  5002               	movf	___wmul@multiplier^0,w,c
 10620   004B1A  0204               	mulwf	___wmul@multiplicand^0,c
 10621   004B1C  CFF3 F006          	movff	prodl,___wmul@product
 10622   004B20  CFF4 F007          	movff	prodh,___wmul@product+1
 10623   004B24  5002               	movf	___wmul@multiplier^0,w,c
 10624   004B26  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10625   004B28  50F3               	movf	243,w,c
 10626   004B2A  2607               	addwf	(___wmul@product+1)^0,f,c
 10627   004B2C  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10628   004B2E  0204               	mulwf	___wmul@multiplicand^0,c
 10629   004B30  50F3               	movf	243,w,c
 10630   004B32  2607               	addwf	(___wmul@product+1)^0,f,c
 10631   004B34  C006  F002         	movff	___wmul@product,?___wmul
 10632   004B38  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10633   004B3C  0012               	return		;funcret
 10634   004B3E                     __end_of___wmul:
 10635                           	callstack 0
 10636                           
 10637 ;; *************** function _dtoa *****************
 10638 ;; Defined at:
 10639 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10642 ;;		 -> sprintf@f(12), 
 10643 ;;  d               2   24[COMRAM] int 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  i               2   32[COMRAM] int 
 10646 ;;  w               2   29[COMRAM] int 
 10647 ;;  s               1   31[COMRAM] unsigned char 
 10648 ;;  p               1   28[COMRAM] _Bool 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10658 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10661 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10662 ;;Total ram usage:       11 bytes
 10663 ;; Hardware stack levels used: 1
 10664 ;; Hardware stack levels required when called: 5
 10665 ;; This function calls:
 10666 ;;		___awdiv
 10667 ;;		___awmod
 10668 ;;		_abs
 10669 ;;		_pad
 10670 ;; This function is called by:
 10671 ;;		_vfpfcnvrt
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text54
 10676   003006                     __ptext54:
 10677                           	callstack 0
 10678   003006                     _dtoa:
 10679                           	callstack 21
 10680   003006                     
 10681                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10682   003006  0E01               	movlw	1
 10683   003008  6E1D               	movwf	dtoa@p^0,c
 10684   00300A                     
 10685                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10686   00300A  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10687   00300C  EF0A  F018         	goto	u4991
 10688   003010  EF0D  F018         	goto	u4990
 10689   003014                     u4991:
 10690   003014  0E01               	movlw	1
 10691   003016  EF0E  F018         	goto	u5000
 10692   00301A                     u4990:
 10693   00301A  0E00               	movlw	0
 10694   00301C                     u5000:
 10695   00301C  6E20               	movwf	dtoa@s^0,c
 10696   00301E                     
 10697                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10698   00301E  C0C2  F01E         	movff	_width,dtoa@w
 10699   003022  C0C3  F01F         	movff	_width+1,dtoa@w+1
 10700   003026                     
 10701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10702   003026  5020               	movf	dtoa@s^0,w,c
 10703   003028  B4D8               	btfsc	status,2,c
 10704   00302A  EF19  F018         	goto	u5011
 10705   00302E  EF1B  F018         	goto	u5010
 10706   003032                     u5011:
 10707   003032  EF32  F018         	goto	l1516
 10708   003036                     u5010:
 10709   003036                     
 10710                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10711   003036  061E               	decf	dtoa@w^0,f,c
 10712   003038  A0D8               	btfss	status,0,c
 10713   00303A  061F               	decf	(dtoa@w+1)^0,f,c
 10714   00303C                     
 10715                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10716   00303C  5020               	movf	dtoa@s^0,w,c
 10717   00303E  A4D8               	btfss	status,2,c
 10718   003040  EF24  F018         	goto	u5021
 10719   003044  EF26  F018         	goto	u5020
 10720   003048                     u5021:
 10721   003048  EF2C  F018         	goto	l5702
 10722   00304C                     u5020:
 10723   00304C  0E00               	movlw	0
 10724   00304E  6E1C               	movwf	(_dtoa$3080+1)^0,c
 10725   003050  0E2B               	movlw	43
 10726   003052  6E1B               	movwf	_dtoa$3080^0,c
 10727   003054  EF30  F018         	goto	l5704
 10728   003058                     l5702:
 10729   003058  0E00               	movlw	0
 10730   00305A  6E1C               	movwf	(_dtoa$3080+1)^0,c
 10731   00305C  0E2D               	movlw	45
 10732   00305E  6E1B               	movwf	_dtoa$3080^0,c
 10733   003060                     l5704:
 10734   003060  C01B  F020         	movff	_dtoa$3080,dtoa@s
 10735   003064                     l1516:
 10736                           
 10737                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10738   003064  0E00               	movlw	0
 10739   003066  6E22               	movwf	(dtoa@i+1)^0,c
 10740   003068  0E1F               	movlw	31
 10741   00306A  6E21               	movwf	dtoa@i^0,c
 10742   00306C                     
 10743                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10744   00306C  0E00               	movlw	0
 10745   00306E  0101               	movlb	1	; () banked
 10746   003070  6FB5               	movwf	(_dbuf+31)& (0+255),b
 10747                           
 10748                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10749   003072  EF6A  F018         	goto	l5718
 10750   003076                     l5708:
 10751                           
 10752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10753   003076  0621               	decf	dtoa@i^0,f,c
 10754   003078  A0D8               	btfss	status,0,c
 10755   00307A  0622               	decf	(dtoa@i+1)^0,f,c
 10756   00307C                     
 10757                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10758   00307C  0E96               	movlw	low _dbuf
 10759   00307E  2421               	addwf	dtoa@i^0,w,c
 10760   003080  6ED9               	movwf	fsr2l,c
 10761   003082  0E01               	movlw	high _dbuf
 10762   003084  2022               	addwfc	(dtoa@i+1)^0,w,c
 10763   003086  6EDA               	movwf	fsr2h,c
 10764   003088  C019  F002         	movff	dtoa@d,___awmod@dividend
 10765   00308C  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10766   003090  0E00               	movlw	0
 10767   003092  6E05               	movwf	(___awmod@divisor+1)^0,c
 10768   003094  0E0A               	movlw	10
 10769   003096  6E04               	movwf	___awmod@divisor^0,c
 10770   003098  ECEC  F01D         	call	___awmod	;wreg free
 10771   00309C  C002  F008         	movff	?___awmod,abs@a
 10772   0030A0  C003  F009         	movff	?___awmod+1,abs@a+1
 10773   0030A4  ECE7  F024         	call	_abs	;wreg free
 10774   0030A8  5008               	movf	?_abs^0,w,c
 10775   0030AA  0F30               	addlw	48
 10776   0030AC  6EDF               	movwf	indf2,c
 10777   0030AE                     
 10778                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10779   0030AE  0E00               	movlw	0
 10780   0030B0  6E1D               	movwf	dtoa@p^0,c
 10781   0030B2                     
 10782                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10783   0030B2  061E               	decf	dtoa@w^0,f,c
 10784   0030B4  A0D8               	btfss	status,0,c
 10785   0030B6  061F               	decf	(dtoa@w+1)^0,f,c
 10786   0030B8                     
 10787                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10788   0030B8  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10789   0030BC  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10790   0030C0  0E00               	movlw	0
 10791   0030C2  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10792   0030C4  0E0A               	movlw	10
 10793   0030C6  6E04               	movwf	___awdiv@divisor^0,c
 10794   0030C8  EC8A  F01D         	call	___awdiv	;wreg free
 10795   0030CC  C002  F019         	movff	?___awdiv,dtoa@d
 10796   0030D0  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10797   0030D4                     l5718:
 10798                           
 10799                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10800   0030D4  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10801   0030D6  EF75  F018         	goto	u5031
 10802   0030DA  5022               	movf	(dtoa@i+1)^0,w,c
 10803   0030DC  E108               	bnz	u5030
 10804   0030DE  0421               	decf	dtoa@i^0,w,c
 10805   0030E0  A0D8               	btfss	status,0,c
 10806   0030E2  EF75  F018         	goto	u5031
 10807   0030E6  EF77  F018         	goto	u5030
 10808   0030EA                     u5031:
 10809   0030EA  EF9D  F018         	goto	l5728
 10810   0030EE                     u5030:
 10811   0030EE  5019               	movf	dtoa@d^0,w,c
 10812   0030F0  101A               	iorwf	(dtoa@d+1)^0,w,c
 10813   0030F2  A4D8               	btfss	status,2,c
 10814   0030F4  EF7E  F018         	goto	u5041
 10815   0030F8  EF80  F018         	goto	u5040
 10816   0030FC                     u5041:
 10817   0030FC  EF3B  F018         	goto	l5708
 10818   003100                     u5040:
 10819   003100  501D               	movf	dtoa@p^0,w,c
 10820   003102  A4D8               	btfss	status,2,c
 10821   003104  EF86  F018         	goto	u5051
 10822   003108  EF88  F018         	goto	u5050
 10823   00310C                     u5051:
 10824   00310C  EF3B  F018         	goto	l5708
 10825   003110                     u5050:
 10826   003110  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10827   003112  EF93  F018         	goto	u5061
 10828   003116  501F               	movf	(dtoa@w+1)^0,w,c
 10829   003118  E108               	bnz	u5060
 10830   00311A  041E               	decf	dtoa@w^0,w,c
 10831   00311C  A0D8               	btfss	status,0,c
 10832   00311E  EF93  F018         	goto	u5061
 10833   003122  EF95  F018         	goto	u5060
 10834   003126                     u5061:
 10835   003126  EF9D  F018         	goto	l5728
 10836   00312A                     u5060:
 10837   00312A  0100               	movlb	0	; () banked
 10838   00312C  B3C6               	btfsc	_flags& (0+255),1,b
 10839   00312E  EF9B  F018         	goto	u5071
 10840   003132  EF9D  F018         	goto	u5070
 10841   003136                     u5071:
 10842   003136  EF3B  F018         	goto	l5708
 10843   00313A                     u5070:
 10844   00313A                     l5728:
 10845                           
 10846                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10847   00313A  5020               	movf	dtoa@s^0,w,c
 10848   00313C  B4D8               	btfsc	status,2,c
 10849   00313E  EFA3  F018         	goto	u5081
 10850   003142  EFA5  F018         	goto	u5080
 10851   003146                     u5081:
 10852   003146  EFB0  F018         	goto	l5734
 10853   00314A                     u5080:
 10854   00314A                     
 10855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10856   00314A  0621               	decf	dtoa@i^0,f,c
 10857   00314C  A0D8               	btfss	status,0,c
 10858   00314E  0622               	decf	(dtoa@i+1)^0,f,c
 10859   003150                     
 10860                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10861   003150  0E96               	movlw	low _dbuf
 10862   003152  2421               	addwf	dtoa@i^0,w,c
 10863   003154  6ED9               	movwf	fsr2l,c
 10864   003156  0E01               	movlw	high _dbuf
 10865   003158  2022               	addwfc	(dtoa@i+1)^0,w,c
 10866   00315A  6EDA               	movwf	fsr2h,c
 10867   00315C  C020  FFDF         	movff	dtoa@s,indf2
 10868   003160                     l5734:
 10869                           
 10870                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10871   003160  C018  F010         	movff	dtoa@fp,pad@fp
 10872   003164  0E96               	movlw	low _dbuf
 10873   003166  2421               	addwf	dtoa@i^0,w,c
 10874   003168  6E11               	movwf	pad@buf^0,c
 10875   00316A  0E01               	movlw	high _dbuf
 10876   00316C  2022               	addwfc	(dtoa@i+1)^0,w,c
 10877   00316E  6E12               	movwf	(pad@buf+1)^0,c
 10878   003170  C01E  F013         	movff	dtoa@w,pad@p
 10879   003174  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10880   003178  EC94  F01F         	call	_pad	;wreg free
 10881   00317C  0012               	return		;funcret
 10882   00317E                     __end_of_dtoa:
 10883                           	callstack 0
 10884                           
 10885 ;; *************** function _pad *****************
 10886 ;; Defined at:
 10887 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10890 ;;		 -> sprintf@f(12), 
 10891 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10892 ;;		 -> dbuf(32), 
 10893 ;;  p               2   18[COMRAM] int 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  i               2   21[COMRAM] int 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      void 
 10898 ;; Registers used:
 10899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10905 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10908 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10909 ;;Total ram usage:        8 bytes
 10910 ;; Hardware stack levels used: 1
 10911 ;; Hardware stack levels required when called: 4
 10912 ;; This function calls:
 10913 ;;		_fputc
 10914 ;;		_fputs
 10915 ;; This function is called by:
 10916 ;;		_dtoa
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text55
 10921   003F28                     __ptext55:
 10922                           	callstack 0
 10923   003F28                     _pad:
 10924                           	callstack 21
 10925   003F28                     
 10926                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10927   003F28  0100               	movlb	0	; () banked
 10928   003F2A  A1C6               	btfss	_flags& (0+255),0,b
 10929   003F2C  EF9A  F01F         	goto	u4951
 10930   003F30  EF9C  F01F         	goto	u4950
 10931   003F34                     u4951:
 10932   003F34  EFA4  F01F         	goto	l5676
 10933   003F38                     u4950:
 10934   003F38                     
 10935                           ; BSR set to: 0
 10936                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10937   003F38  C011  F00A         	movff	pad@buf,fputs@s
 10938   003F3C  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10939   003F40  C010  F00C         	movff	pad@fp,fputs@fp
 10940   003F44  EC8F  F023         	call	_fputs	;wreg free
 10941   003F48                     l5676:
 10942                           
 10943                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10944   003F48  BE14               	btfsc	(pad@p+1)^0,7,c
 10945   003F4A  EFAB  F01F         	goto	u4960
 10946   003F4E  EFA9  F01F         	goto	u4961
 10947   003F52                     u4961:
 10948   003F52  EFAF  F01F         	goto	l1508
 10949   003F56                     u4960:
 10950   003F56                     
 10951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10952   003F56  0E00               	movlw	0
 10953   003F58  6E14               	movwf	(pad@p+1)^0,c
 10954   003F5A  0E00               	movlw	0
 10955   003F5C  6E13               	movwf	pad@p^0,c
 10956   003F5E                     l1508:
 10957                           
 10958                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10959   003F5E  0E00               	movlw	0
 10960   003F60  6E17               	movwf	(pad@i+1)^0,c
 10961   003F62  0E00               	movlw	0
 10962   003F64  6E16               	movwf	pad@i^0,c
 10963                           
 10964                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10965   003F66  EFBF  F01F         	goto	l5684
 10966   003F6A                     l5680:
 10967                           
 10968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10969   003F6A  0E00               	movlw	0
 10970   003F6C  6E03               	movwf	(fputc@c+1)^0,c
 10971   003F6E  0E20               	movlw	32
 10972   003F70  6E02               	movwf	fputc@c^0,c
 10973   003F72  C010  F004         	movff	pad@fp,fputc@fp
 10974   003F76  ECF0  F01E         	call	_fputc	;wreg free
 10975   003F7A                     
 10976                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10977   003F7A  4A16               	infsnz	pad@i^0,f,c
 10978   003F7C  2A17               	incf	(pad@i+1)^0,f,c
 10979   003F7E                     l5684:
 10980                           
 10981                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10982   003F7E  5013               	movf	pad@p^0,w,c
 10983   003F80  5C16               	subwf	pad@i^0,w,c
 10984   003F82  5017               	movf	(pad@i+1)^0,w,c
 10985   003F84  0A80               	xorlw	128
 10986   003F86  6E15               	movwf	??_pad^0,c
 10987   003F88  5014               	movf	(pad@p+1)^0,w,c
 10988   003F8A  0A80               	xorlw	128
 10989   003F8C  5815               	subwfb	??_pad^0,w,c
 10990   003F8E  A0D8               	btfss	status,0,c
 10991   003F90  EFCC  F01F         	goto	u4971
 10992   003F94  EFCE  F01F         	goto	u4970
 10993   003F98                     u4971:
 10994   003F98  EFB5  F01F         	goto	l5680
 10995   003F9C                     u4970:
 10996   003F9C                     
 10997                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10998   003F9C  0100               	movlb	0	; () banked
 10999   003F9E  B1C6               	btfsc	_flags& (0+255),0,b
 11000   003FA0  EFD4  F01F         	goto	u4981
 11001   003FA4  EFD6  F01F         	goto	u4980
 11002   003FA8                     u4981:
 11003   003FA8  EFDE  F01F         	goto	l1513
 11004   003FAC                     u4980:
 11005   003FAC                     
 11006                           ; BSR set to: 0
 11007                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 11008   003FAC  C011  F00A         	movff	pad@buf,fputs@s
 11009   003FB0  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11010   003FB4  C010  F00C         	movff	pad@fp,fputs@fp
 11011   003FB8  EC8F  F023         	call	_fputs	;wreg free
 11012   003FBC                     l1513:
 11013   003FBC  0012               	return		;funcret
 11014   003FBE                     __end_of_pad:
 11015                           	callstack 0
 11016                           
 11017 ;; *************** function _fputs *****************
 11018 ;; Defined at:
 11019 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 11020 ;; Parameters:    Size  Location     Type
 11021 ;;  s               2    9[COMRAM] PTR const unsigned char 
 11022 ;;		 -> dbuf(32), 
 11023 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 11024 ;;		 -> sprintf@f(12), 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  i               2   13[COMRAM] int 
 11027 ;;  c               1   12[COMRAM] unsigned char 
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  2    9[COMRAM] int 
 11030 ;; Registers used:
 11031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11032 ;; Tracked objects:
 11033 ;;		On entry : 0/0
 11034 ;;		On exit  : 0/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11038 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11040 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11041 ;;Total ram usage:        6 bytes
 11042 ;; Hardware stack levels used: 1
 11043 ;; Hardware stack levels required when called: 3
 11044 ;; This function calls:
 11045 ;;		_fputc
 11046 ;; This function is called by:
 11047 ;;		_pad
 11048 ;; This function uses a non-reentrant model
 11049 ;;
 11050                           
 11051                           	psect	text56
 11052   00471E                     __ptext56:
 11053                           	callstack 0
 11054   00471E                     _fputs:
 11055                           	callstack 21
 11056   00471E  0E00               	movlw	0
 11057   004720  6E0F               	movwf	(fputs@i+1)^0,c
 11058   004722  0E00               	movlw	0
 11059   004724  6E0E               	movwf	fputs@i^0,c
 11060   004726  EF9E  F023         	goto	l5670
 11061   00472A                     l5666:
 11062   00472A  C00D  F002         	movff	fputs@c,fputc@c
 11063   00472E  6A03               	clrf	(fputc@c+1)^0,c
 11064   004730  C00C  F004         	movff	fputs@fp,fputc@fp
 11065   004734  ECF0  F01E         	call	_fputc	;wreg free
 11066   004738  4A0E               	infsnz	fputs@i^0,f,c
 11067   00473A  2A0F               	incf	(fputs@i+1)^0,f,c
 11068   00473C                     l5670:
 11069   00473C  500E               	movf	fputs@i^0,w,c
 11070   00473E  240A               	addwf	fputs@s^0,w,c
 11071   004740  6ED9               	movwf	fsr2l,c
 11072   004742  500F               	movf	(fputs@i+1)^0,w,c
 11073   004744  200B               	addwfc	(fputs@s+1)^0,w,c
 11074   004746  6EDA               	movwf	fsr2h,c
 11075   004748  50DF               	movf	indf2,w,c
 11076   00474A  6E0D               	movwf	fputs@c^0,c
 11077   00474C  500D               	movf	fputs@c^0,w,c
 11078   00474E  A4D8               	btfss	status,2,c
 11079   004750  EFAC  F023         	goto	u4941
 11080   004754  EFAE  F023         	goto	u4940
 11081   004758                     u4941:
 11082   004758  EF95  F023         	goto	l5666
 11083   00475C                     u4940:
 11084   00475C  0012               	return		;funcret
 11085   00475E                     __end_of_fputs:
 11086                           	callstack 0
 11087                           
 11088 ;; *************** function _fputc *****************
 11089 ;; Defined at:
 11090 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;  c               2    1[COMRAM] int 
 11093 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 11094 ;;		 -> sprintf@f(12), 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;		None
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  2    1[COMRAM] int 
 11099 ;; Registers used:
 11100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11106 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11108 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11109 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11110 ;;Total ram usage:        8 bytes
 11111 ;; Hardware stack levels used: 1
 11112 ;; Hardware stack levels required when called: 2
 11113 ;; This function calls:
 11114 ;;		_putch
 11115 ;; This function is called by:
 11116 ;;		_pad
 11117 ;;		_vfpfcnvrt
 11118 ;;		_fputs
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           	psect	text57
 11123   003DE0                     __ptext57:
 11124                           	callstack 0
 11125   003DE0                     _fputc:
 11126                           	callstack 24
 11127   003DE0  5004               	movf	fputc@fp^0,w,c
 11128   003DE2  B4D8               	btfsc	status,2,c
 11129   003DE4  EFF6  F01E         	goto	u2491
 11130   003DE8  EFF8  F01E         	goto	u2490
 11131   003DEC                     u2491:
 11132   003DEC  EF00  F01F         	goto	l3640
 11133   003DF0                     u2490:
 11134   003DF0  5004               	movf	fputc@fp^0,w,c
 11135   003DF2  A4D8               	btfss	status,2,c
 11136   003DF4  EFFE  F01E         	goto	u2501
 11137   003DF8  EF00  F01F         	goto	u2500
 11138   003DFC                     u2501:
 11139   003DFC  EF05  F01F         	goto	l3642
 11140   003E00                     u2500:
 11141   003E00                     l3640:
 11142   003E00  5002               	movf	fputc@c^0,w,c
 11143   003E02  ECFB  F025         	call	_putch
 11144   003E06  EF44  F01F         	goto	l1577
 11145   003E0A                     l3642:
 11146   003E0A  5004               	movf	fputc@fp^0,w,c
 11147   003E0C  6ED9               	movwf	fsr2l,c
 11148   003E0E  6ADA               	clrf	fsr2h,c
 11149   003E10  0E0A               	movlw	10
 11150   003E12  26D9               	addwf	fsr2l,f,c
 11151   003E14  50DE               	movf	postinc2,w,c
 11152   003E16  10DE               	iorwf	postinc2,w,c
 11153   003E18  B4D8               	btfsc	status,2,c
 11154   003E1A  EF11  F01F         	goto	u2511
 11155   003E1E  EF13  F01F         	goto	u2510
 11156   003E22                     u2511:
 11157   003E22  EF2C  F01F         	goto	l3646
 11158   003E26                     u2510:
 11159   003E26  5004               	movf	fputc@fp^0,w,c
 11160   003E28  6ED9               	movwf	fsr2l,c
 11161   003E2A  6ADA               	clrf	fsr2h,c
 11162   003E2C  0E0A               	movlw	10
 11163   003E2E  26D9               	addwf	fsr2l,f,c
 11164   003E30  5004               	movf	fputc@fp^0,w,c
 11165   003E32  6EE1               	movwf	fsr1l,c
 11166   003E34  6AE2               	clrf	fsr1h,c
 11167   003E36  0E03               	movlw	3
 11168   003E38  26E1               	addwf	fsr1l,f,c
 11169   003E3A  50DE               	movf	postinc2,w,c
 11170   003E3C  5CE6               	subwf	postinc1,w,c
 11171   003E3E  50E6               	movf	postinc1,w,c
 11172   003E40  0A80               	xorlw	128
 11173   003E42  6E09               	movwf	(??_fputc+4)^0,c
 11174   003E44  50DE               	movf	postinc2,w,c
 11175   003E46  0A80               	xorlw	128
 11176   003E48  5809               	subwfb	(??_fputc+4)^0,w,c
 11177   003E4A  B0D8               	btfsc	status,0,c
 11178   003E4C  EF2A  F01F         	goto	u2521
 11179   003E50  EF2C  F01F         	goto	u2520
 11180   003E54                     u2521:
 11181   003E54  EF44  F01F         	goto	l1577
 11182   003E58                     u2520:
 11183   003E58                     l3646:
 11184   003E58  5004               	movf	fputc@fp^0,w,c
 11185   003E5A  6ED9               	movwf	fsr2l,c
 11186   003E5C  6ADA               	clrf	fsr2h,c
 11187   003E5E  0E03               	movlw	3
 11188   003E60  26D9               	addwf	fsr2l,f,c
 11189   003E62  50DF               	movf	indf2,w,c
 11190   003E64  6E05               	movwf	??_fputc^0,c
 11191   003E66  5004               	movf	fputc@fp^0,w,c
 11192   003E68  6ED9               	movwf	fsr2l,c
 11193   003E6A  6ADA               	clrf	fsr2h,c
 11194   003E6C  50DF               	movf	indf2,w,c
 11195   003E6E  2405               	addwf	??_fputc^0,w,c
 11196   003E70  6ED9               	movwf	fsr2l,c
 11197   003E72  6ADA               	clrf	fsr2h,c
 11198   003E74  C002  FFDF         	movff	fputc@c,indf2
 11199   003E78  5004               	movf	fputc@fp^0,w,c
 11200   003E7A  6ED9               	movwf	fsr2l,c
 11201   003E7C  6ADA               	clrf	fsr2h,c
 11202   003E7E  0E03               	movlw	3
 11203   003E80  26D9               	addwf	fsr2l,f,c
 11204   003E82  2ADE               	incf	postinc2,f,c
 11205   003E84  0E00               	movlw	0
 11206   003E86  22DD               	addwfc	postdec2,f,c
 11207   003E88                     l1577:
 11208   003E88  0012               	return		;funcret
 11209   003E8A                     __end_of_fputc:
 11210                           	callstack 0
 11211                           
 11212 ;; *************** function _putch *****************
 11213 ;; Defined at:
 11214 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  c               1    wreg     unsigned char 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  c               1    0[COMRAM] unsigned char 
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  1    wreg      void 
 11221 ;; Registers used:
 11222 ;;		wreg
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11232 ;;Total ram usage:        0 bytes
 11233 ;; Hardware stack levels used: 1
 11234 ;; Hardware stack levels required when called: 1
 11235 ;; This function calls:
 11236 ;;		Nothing
 11237 ;; This function is called by:
 11238 ;;		_fputc
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text58
 11243   004BF6                     __ptext58:
 11244                           	callstack 0
 11245   004BF6                     _putch:
 11246                           	callstack 24
 11247   004BF6  0012               	return		;funcret
 11248   004BF8                     __end_of_putch:
 11249                           	callstack 0
 11250                           
 11251 ;; *************** function _abs *****************
 11252 ;; Defined at:
 11253 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;  a               2    7[COMRAM] int 
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;		None
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  2    7[COMRAM] int 
 11260 ;; Registers used:
 11261 ;;		wreg, status,2, status,0
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11270 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11271 ;;Total ram usage:        4 bytes
 11272 ;; Hardware stack levels used: 1
 11273 ;; Hardware stack levels required when called: 1
 11274 ;; This function calls:
 11275 ;;		Nothing
 11276 ;; This function is called by:
 11277 ;;		_dtoa
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text59
 11282   0049CE                     __ptext59:
 11283                           	callstack 0
 11284   0049CE                     _abs:
 11285                           	callstack 24
 11286   0049CE  BE09               	btfsc	(abs@a+1)^0,7,c
 11287   0049D0  EFEC  F024         	goto	u2701
 11288   0049D4  EFEE  F024         	goto	u2700
 11289   0049D8                     u2701:
 11290   0049D8  EFF4  F024         	goto	l1562
 11291   0049DC                     u2700:
 11292   0049DC  C008  F008         	movff	abs@a,?_abs
 11293   0049E0  C009  F009         	movff	abs@a+1,?_abs+1
 11294   0049E4  EF00  F025         	goto	l1565
 11295   0049E8                     l1562:
 11296   0049E8  C008  F00A         	movff	abs@a,??_abs
 11297   0049EC  C009  F00B         	movff	abs@a+1,??_abs+1
 11298   0049F0  1E0A               	comf	??_abs^0,f,c
 11299   0049F2  1E0B               	comf	(??_abs+1)^0,f,c
 11300   0049F4  4A0A               	infsnz	??_abs^0,f,c
 11301   0049F6  2A0B               	incf	(??_abs+1)^0,f,c
 11302   0049F8  C00A  F008         	movff	??_abs,?_abs
 11303   0049FC  C00B  F009         	movff	??_abs+1,?_abs+1
 11304   004A00                     l1565:
 11305   004A00  0012               	return		;funcret
 11306   004A02                     __end_of_abs:
 11307                           	callstack 0
 11308                           
 11309 ;; *************** function ___awmod *****************
 11310 ;; Defined at:
 11311 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;  dividend        2    1[COMRAM] int 
 11314 ;;  divisor         2    3[COMRAM] int 
 11315 ;; Auto vars:     Size  Location     Type
 11316 ;;  sign            1    6[COMRAM] unsigned char 
 11317 ;;  counter         1    5[COMRAM] unsigned char 
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  2    1[COMRAM] int 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11331 ;;Total ram usage:        6 bytes
 11332 ;; Hardware stack levels used: 1
 11333 ;; Hardware stack levels required when called: 1
 11334 ;; This function calls:
 11335 ;;		Nothing
 11336 ;; This function is called by:
 11337 ;;		_dtoa
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           	psect	text60
 11342   003BD8                     __ptext60:
 11343                           	callstack 0
 11344   003BD8                     ___awmod:
 11345                           	callstack 24
 11346   003BD8  0E00               	movlw	0
 11347   003BDA  6E07               	movwf	___awmod@sign^0,c
 11348   003BDC  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 11349   003BDE  EFF5  F01D         	goto	u2600
 11350   003BE2  EFF3  F01D         	goto	u2601
 11351   003BE6                     u2601:
 11352   003BE6  EFFB  F01D         	goto	l3716
 11353   003BEA                     u2600:
 11354   003BEA  6C02               	negf	___awmod@dividend^0,c
 11355   003BEC  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11356   003BEE  B0D8               	btfsc	status,0,c
 11357   003BF0  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11358   003BF2  0E01               	movlw	1
 11359   003BF4  6E07               	movwf	___awmod@sign^0,c
 11360   003BF6                     l3716:
 11361   003BF6  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 11362   003BF8  EF02  F01E         	goto	u2610
 11363   003BFC  EF00  F01E         	goto	u2611
 11364   003C00                     u2611:
 11365   003C00  EF06  F01E         	goto	l3720
 11366   003C04                     u2610:
 11367   003C04  6C04               	negf	___awmod@divisor^0,c
 11368   003C06  1E05               	comf	(___awmod@divisor+1)^0,f,c
 11369   003C08  B0D8               	btfsc	status,0,c
 11370   003C0A  2A05               	incf	(___awmod@divisor+1)^0,f,c
 11371   003C0C                     l3720:
 11372   003C0C  5004               	movf	___awmod@divisor^0,w,c
 11373   003C0E  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 11374   003C10  B4D8               	btfsc	status,2,c
 11375   003C12  EF0D  F01E         	goto	u2621
 11376   003C16  EF0F  F01E         	goto	u2620
 11377   003C1A                     u2621:
 11378   003C1A  EF33  F01E         	goto	l3736
 11379   003C1E                     u2620:
 11380   003C1E  0E01               	movlw	1
 11381   003C20  6E06               	movwf	___awmod@counter^0,c
 11382   003C22  EF17  F01E         	goto	l3726
 11383   003C26                     l3724:
 11384   003C26  90D8               	bcf	status,0,c
 11385   003C28  3604               	rlcf	___awmod@divisor^0,f,c
 11386   003C2A  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11387   003C2C  2A06               	incf	___awmod@counter^0,f,c
 11388   003C2E                     l3726:
 11389   003C2E  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11390   003C30  EF1C  F01E         	goto	u2631
 11391   003C34  EF1E  F01E         	goto	u2630
 11392   003C38                     u2631:
 11393   003C38  EF13  F01E         	goto	l3724
 11394   003C3C                     u2630:
 11395   003C3C                     l3728:
 11396   003C3C  5004               	movf	___awmod@divisor^0,w,c
 11397   003C3E  5C02               	subwf	___awmod@dividend^0,w,c
 11398   003C40  5005               	movf	(___awmod@divisor+1)^0,w,c
 11399   003C42  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11400   003C44  A0D8               	btfss	status,0,c
 11401   003C46  EF27  F01E         	goto	u2641
 11402   003C4A  EF29  F01E         	goto	u2640
 11403   003C4E                     u2641:
 11404   003C4E  EF2D  F01E         	goto	l3732
 11405   003C52                     u2640:
 11406   003C52  5004               	movf	___awmod@divisor^0,w,c
 11407   003C54  5E02               	subwf	___awmod@dividend^0,f,c
 11408   003C56  5005               	movf	(___awmod@divisor+1)^0,w,c
 11409   003C58  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11410   003C5A                     l3732:
 11411   003C5A  90D8               	bcf	status,0,c
 11412   003C5C  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11413   003C5E  3204               	rrcf	___awmod@divisor^0,f,c
 11414   003C60  2E06               	decfsz	___awmod@counter^0,f,c
 11415   003C62  EF1E  F01E         	goto	l3728
 11416   003C66                     l3736:
 11417   003C66  5007               	movf	___awmod@sign^0,w,c
 11418   003C68  B4D8               	btfsc	status,2,c
 11419   003C6A  EF39  F01E         	goto	u2651
 11420   003C6E  EF3B  F01E         	goto	u2650
 11421   003C72                     u2651:
 11422   003C72  EF3F  F01E         	goto	l3740
 11423   003C76                     u2650:
 11424   003C76  6C02               	negf	___awmod@dividend^0,c
 11425   003C78  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11426   003C7A  B0D8               	btfsc	status,0,c
 11427   003C7C  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11428   003C7E                     l3740:
 11429   003C7E  C002  F002         	movff	___awmod@dividend,?___awmod
 11430   003C82  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11431   003C86  0012               	return		;funcret
 11432   003C88                     __end_of___awmod:
 11433                           	callstack 0
 11434                           
 11435 ;; *************** function ___awdiv *****************
 11436 ;; Defined at:
 11437 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11438 ;; Parameters:    Size  Location     Type
 11439 ;;  dividend        2    1[COMRAM] int 
 11440 ;;  divisor         2    3[COMRAM] int 
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;  quotient        2    7[COMRAM] int 
 11443 ;;  sign            1    6[COMRAM] unsigned char 
 11444 ;;  counter         1    5[COMRAM] unsigned char 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  2    1[COMRAM] int 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2, status,0
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11454 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11455 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11457 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11458 ;;Total ram usage:        8 bytes
 11459 ;; Hardware stack levels used: 1
 11460 ;; Hardware stack levels required when called: 1
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_dtoa
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text61
 11469   003B14                     __ptext61:
 11470                           	callstack 0
 11471   003B14                     ___awdiv:
 11472                           	callstack 24
 11473   003B14  0E00               	movlw	0
 11474   003B16  6E07               	movwf	___awdiv@sign^0,c
 11475   003B18  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11476   003B1A  EF93  F01D         	goto	u2540
 11477   003B1E  EF91  F01D         	goto	u2541
 11478   003B22                     u2541:
 11479   003B22  EF99  F01D         	goto	l3672
 11480   003B26                     u2540:
 11481   003B26  6C04               	negf	___awdiv@divisor^0,c
 11482   003B28  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11483   003B2A  B0D8               	btfsc	status,0,c
 11484   003B2C  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11485   003B2E  0E01               	movlw	1
 11486   003B30  6E07               	movwf	___awdiv@sign^0,c
 11487   003B32                     l3672:
 11488   003B32  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11489   003B34  EFA0  F01D         	goto	u2550
 11490   003B38  EF9E  F01D         	goto	u2551
 11491   003B3C                     u2551:
 11492   003B3C  EFA6  F01D         	goto	l3678
 11493   003B40                     u2550:
 11494   003B40  6C02               	negf	___awdiv@dividend^0,c
 11495   003B42  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11496   003B44  B0D8               	btfsc	status,0,c
 11497   003B46  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11498   003B48  0E01               	movlw	1
 11499   003B4A  1A07               	xorwf	___awdiv@sign^0,f,c
 11500   003B4C                     l3678:
 11501   003B4C  0E00               	movlw	0
 11502   003B4E  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11503   003B50  0E00               	movlw	0
 11504   003B52  6E08               	movwf	___awdiv@quotient^0,c
 11505   003B54  5004               	movf	___awdiv@divisor^0,w,c
 11506   003B56  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11507   003B58  B4D8               	btfsc	status,2,c
 11508   003B5A  EFB1  F01D         	goto	u2561
 11509   003B5E  EFB3  F01D         	goto	u2560
 11510   003B62                     u2561:
 11511   003B62  EFDB  F01D         	goto	l3700
 11512   003B66                     u2560:
 11513   003B66  0E01               	movlw	1
 11514   003B68  6E06               	movwf	___awdiv@counter^0,c
 11515   003B6A  EFBB  F01D         	goto	l3686
 11516   003B6E                     l3684:
 11517   003B6E  90D8               	bcf	status,0,c
 11518   003B70  3604               	rlcf	___awdiv@divisor^0,f,c
 11519   003B72  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11520   003B74  2A06               	incf	___awdiv@counter^0,f,c
 11521   003B76                     l3686:
 11522   003B76  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11523   003B78  EFC0  F01D         	goto	u2571
 11524   003B7C  EFC2  F01D         	goto	u2570
 11525   003B80                     u2571:
 11526   003B80  EFB7  F01D         	goto	l3684
 11527   003B84                     u2570:
 11528   003B84                     l3688:
 11529   003B84  90D8               	bcf	status,0,c
 11530   003B86  3608               	rlcf	___awdiv@quotient^0,f,c
 11531   003B88  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11532   003B8A  5004               	movf	___awdiv@divisor^0,w,c
 11533   003B8C  5C02               	subwf	___awdiv@dividend^0,w,c
 11534   003B8E  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11535   003B90  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11536   003B92  A0D8               	btfss	status,0,c
 11537   003B94  EFCE  F01D         	goto	u2581
 11538   003B98  EFD0  F01D         	goto	u2580
 11539   003B9C                     u2581:
 11540   003B9C  EFD5  F01D         	goto	l3696
 11541   003BA0                     u2580:
 11542   003BA0  5004               	movf	___awdiv@divisor^0,w,c
 11543   003BA2  5E02               	subwf	___awdiv@dividend^0,f,c
 11544   003BA4  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11545   003BA6  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11546   003BA8  8008               	bsf	___awdiv@quotient^0,0,c
 11547   003BAA                     l3696:
 11548   003BAA  90D8               	bcf	status,0,c
 11549   003BAC  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11550   003BAE  3204               	rrcf	___awdiv@divisor^0,f,c
 11551   003BB0  2E06               	decfsz	___awdiv@counter^0,f,c
 11552   003BB2  EFC2  F01D         	goto	l3688
 11553   003BB6                     l3700:
 11554   003BB6  5007               	movf	___awdiv@sign^0,w,c
 11555   003BB8  B4D8               	btfsc	status,2,c
 11556   003BBA  EFE1  F01D         	goto	u2591
 11557   003BBE  EFE3  F01D         	goto	u2590
 11558   003BC2                     u2591:
 11559   003BC2  EFE7  F01D         	goto	l3704
 11560   003BC6                     u2590:
 11561   003BC6  6C08               	negf	___awdiv@quotient^0,c
 11562   003BC8  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11563   003BCA  B0D8               	btfsc	status,0,c
 11564   003BCC  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11565   003BCE                     l3704:
 11566   003BCE  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11567   003BD2  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11568   003BD6  0012               	return		;funcret
 11569   003BD8                     __end_of___awdiv:
 11570                           	callstack 0
 11571                           
 11572 ;; *************** function _sendStringSerial4 *****************
 11573 ;; Defined at:
 11574 ;;		line 41 in file "serial.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  string          1    2[COMRAM] PTR unsigned char 
 11577 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;		None
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      void 
 11582 ;; Registers used:
 11583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11589 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11593 ;;Total ram usage:        1 bytes
 11594 ;; Hardware stack levels used: 1
 11595 ;; Hardware stack levels required when called: 2
 11596 ;; This function calls:
 11597 ;;		_sendCharSerial4
 11598 ;; This function is called by:
 11599 ;;		_send2USART
 11600 ;;		_calibration_colors
 11601 ;;		_sendAllReadings
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           	psect	text62
 11606   004A34                     __ptext62:
 11607                           	callstack 0
 11608   004A34                     _sendStringSerial4:
 11609                           	callstack 27
 11610   004A34                     
 11611                           ;serial.c: 44:     while(*string != 0){
 11612   004A34  EF27  F025         	goto	l4578
 11613   004A38                     l4572:
 11614                           
 11615                           ;serial.c: 46:   sendCharSerial4(*string++);
 11616   004A38  5003               	movf	sendStringSerial4@string^0,w,c
 11617   004A3A  6ED9               	movwf	fsr2l,c
 11618   004A3C  6ADA               	clrf	fsr2h,c
 11619   004A3E  50DF               	movf	indf2,w,c
 11620   004A40  ECDA  F025         	call	_sendCharSerial4
 11621   004A44  2A03               	incf	sendStringSerial4@string^0,f,c
 11622   004A46                     
 11623                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11624   004A46  0E6A               	movlw	106
 11625   004A48                     u5687:
 11626   004A48  2EE8               	decfsz	wreg,f,c
 11627   004A4A  D7FE               	bra	u5687
 11628   004A4C  D000               	nop2	
 11629   004A4E                     l4578:
 11630                           
 11631                           ;serial.c: 44:     while(*string != 0){
 11632   004A4E  5003               	movf	sendStringSerial4@string^0,w,c
 11633   004A50  6ED9               	movwf	fsr2l,c
 11634   004A52  6ADA               	clrf	fsr2h,c
 11635   004A54  50DF               	movf	indf2,w,c
 11636   004A56  A4D8               	btfss	status,2,c
 11637   004A58  EF30  F025         	goto	u3831
 11638   004A5C  EF32  F025         	goto	u3830
 11639   004A60                     u3831:
 11640   004A60  EF1C  F025         	goto	l4572
 11641   004A64                     u3830:
 11642   004A64  0012               	return		;funcret
 11643   004A66                     __end_of_sendStringSerial4:
 11644                           	callstack 0
 11645                           
 11646 ;; *************** function _sendCharSerial4 *****************
 11647 ;; Defined at:
 11648 ;;		line 35 in file "serial.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;  charToSend      1    wreg     unsigned char 
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  charToSend      1    1[COMRAM] unsigned char 
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      void 
 11655 ;; Registers used:
 11656 ;;		wreg
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11666 ;;Total ram usage:        1 bytes
 11667 ;; Hardware stack levels used: 1
 11668 ;; Hardware stack levels required when called: 1
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_sendStringSerial4
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text63
 11677   004BB4                     __ptext63:
 11678                           	callstack 0
 11679   004BB4                     _sendCharSerial4:
 11680                           	callstack 27
 11681                           
 11682                           ;incstack = 0
 11683                           ;sendCharSerial4@charToSend stored from wreg
 11684   004BB4  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11685   004BB6                     l526:
 11686   004BB6  010E               	movlb	14	; () banked
 11687   004BB8  A537               	btfss	55,2,b	;volatile
 11688   004BBA  EFE1  F025         	goto	u3031
 11689   004BBE  EFE3  F025         	goto	u3030
 11690   004BC2                     u3031:
 11691   004BC2  EFDB  F025         	goto	l526
 11692   004BC6                     u3030:
 11693   004BC6                     
 11694                           ; BSR set to: 14
 11695                           ;serial.c: 37:     TX4REG = charToSend;
 11696   004BC6  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11697   004BCA                     
 11698                           ; BSR set to: 14
 11699   004BCA  0012               	return		;funcret
 11700   004BCC                     __end_of_sendCharSerial4:
 11701                           	callstack 0
 11702                           
 11703 ;; *************** function _color_read_Red *****************
 11704 ;; Defined at:
 11705 ;;		line 33 in file "color.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;  tmp             2   10[COMRAM] unsigned int 
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  2    5[COMRAM] unsigned int 
 11712 ;; Registers used:
 11713 ;;		wreg, status,2, status,0, cstack
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11721 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11723 ;;Total ram usage:        7 bytes
 11724 ;; Hardware stack levels used: 1
 11725 ;; Hardware stack levels required when called: 3
 11726 ;; This function calls:
 11727 ;;		_I2C_2_Master_Read
 11728 ;;		_I2C_2_Master_RepStart
 11729 ;;		_I2C_2_Master_Start
 11730 ;;		_I2C_2_Master_Stop
 11731 ;;		_I2C_2_Master_Write
 11732 ;; This function is called by:
 11733 ;;		_reading_hue
 11734 ;;		_calibration_colors
 11735 ;; This function uses a non-reentrant model
 11736 ;;
 11737                           
 11738                           	psect	text64
 11739   004386                     __ptext64:
 11740                           	callstack 0
 11741   004386                     _color_read_Red:
 11742                           	callstack 26
 11743   004386                     
 11744                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11745   004386  ECF1  F025         	call	_I2C_2_Master_Start	;wreg free
 11746                           
 11747                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11748   00438A  0E52               	movlw	82
 11749   00438C  ECE6  F025         	call	_I2C_2_Master_Write
 11750                           
 11751                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11752   004390  0EB6               	movlw	182
 11753   004392  ECE6  F025         	call	_I2C_2_Master_Write
 11754                           
 11755                           ;color.c: 39:  I2C_2_Master_RepStart();
 11756   004396  ECF6  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11757                           
 11758                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11759   00439A  0E53               	movlw	83
 11760   00439C  ECE6  F025         	call	_I2C_2_Master_Write
 11761                           
 11762                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11763   0043A0  0E01               	movlw	1
 11764   0043A2  EC6E  F023         	call	_I2C_2_Master_Read
 11765   0043A6  6E08               	movwf	??_color_read_Red^0,c
 11766   0043A8  5008               	movf	??_color_read_Red^0,w,c
 11767   0043AA  6E0B               	movwf	color_read_Red@tmp^0,c
 11768   0043AC  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11769                           
 11770                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11771   0043AE  0E00               	movlw	0
 11772   0043B0  EC6E  F023         	call	_I2C_2_Master_Read
 11773   0043B4  6E08               	movwf	??_color_read_Red^0,c
 11774   0043B6  5008               	movf	??_color_read_Red^0,w,c
 11775   0043B8  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11776   0043BA  6A09               	clrf	(??_color_read_Red+1)^0,c
 11777   0043BC  500B               	movf	color_read_Red@tmp^0,w,c
 11778   0043BE  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11779   0043C0  6E0B               	movwf	color_read_Red@tmp^0,c
 11780   0043C2  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11781   0043C4  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11782   0043C6  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11783                           
 11784                           ;color.c: 43:  I2C_2_Master_Stop();
 11785   0043C8  ECEC  F025         	call	_I2C_2_Master_Stop	;wreg free
 11786   0043CC                     
 11787                           ;color.c: 44:  return tmp;
 11788   0043CC  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11789   0043D0  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11790   0043D4  0012               	return		;funcret
 11791   0043D6                     __end_of_color_read_Red:
 11792                           	callstack 0
 11793                           
 11794 ;; *************** function _color_read_Green *****************
 11795 ;; Defined at:
 11796 ;;		line 47 in file "color.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;		None
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;  tmp             2   10[COMRAM] unsigned int 
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  2    5[COMRAM] unsigned int 
 11803 ;; Registers used:
 11804 ;;		wreg, status,2, status,0, cstack
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : 0/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11813 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11814 ;;Total ram usage:        7 bytes
 11815 ;; Hardware stack levels used: 1
 11816 ;; Hardware stack levels required when called: 3
 11817 ;; This function calls:
 11818 ;;		_I2C_2_Master_Read
 11819 ;;		_I2C_2_Master_RepStart
 11820 ;;		_I2C_2_Master_Start
 11821 ;;		_I2C_2_Master_Stop
 11822 ;;		_I2C_2_Master_Write
 11823 ;; This function is called by:
 11824 ;;		_reading_hue
 11825 ;;		_calibration_colors
 11826 ;; This function uses a non-reentrant model
 11827 ;;
 11828                           
 11829                           	psect	text65
 11830   0043D6                     __ptext65:
 11831                           	callstack 0
 11832   0043D6                     _color_read_Green:
 11833                           	callstack 26
 11834   0043D6                     
 11835                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11836   0043D6  ECF1  F025         	call	_I2C_2_Master_Start	;wreg free
 11837                           
 11838                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11839   0043DA  0E52               	movlw	82
 11840   0043DC  ECE6  F025         	call	_I2C_2_Master_Write
 11841                           
 11842                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11843   0043E0  0EB8               	movlw	184
 11844   0043E2  ECE6  F025         	call	_I2C_2_Master_Write
 11845                           
 11846                           ;color.c: 53:  I2C_2_Master_RepStart();
 11847   0043E6  ECF6  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11848                           
 11849                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11850   0043EA  0E53               	movlw	83
 11851   0043EC  ECE6  F025         	call	_I2C_2_Master_Write
 11852                           
 11853                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11854   0043F0  0E01               	movlw	1
 11855   0043F2  EC6E  F023         	call	_I2C_2_Master_Read
 11856   0043F6  6E08               	movwf	??_color_read_Green^0,c
 11857   0043F8  5008               	movf	??_color_read_Green^0,w,c
 11858   0043FA  6E0B               	movwf	color_read_Green@tmp^0,c
 11859   0043FC  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11860                           
 11861                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11862   0043FE  0E00               	movlw	0
 11863   004400  EC6E  F023         	call	_I2C_2_Master_Read
 11864   004404  6E08               	movwf	??_color_read_Green^0,c
 11865   004406  5008               	movf	??_color_read_Green^0,w,c
 11866   004408  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11867   00440A  6A09               	clrf	(??_color_read_Green+1)^0,c
 11868   00440C  500B               	movf	color_read_Green@tmp^0,w,c
 11869   00440E  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11870   004410  6E0B               	movwf	color_read_Green@tmp^0,c
 11871   004412  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11872   004414  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11873   004416  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11874                           
 11875                           ;color.c: 57:  I2C_2_Master_Stop();
 11876   004418  ECEC  F025         	call	_I2C_2_Master_Stop	;wreg free
 11877   00441C                     
 11878                           ;color.c: 58:  return tmp;
 11879   00441C  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11880   004420  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11881   004424  0012               	return		;funcret
 11882   004426                     __end_of_color_read_Green:
 11883                           	callstack 0
 11884                           
 11885 ;; *************** function _color_read_Clear *****************
 11886 ;; Defined at:
 11887 ;;		line 76 in file "color.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;		None
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;  tmp             2   10[COMRAM] unsigned int 
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  2    5[COMRAM] unsigned int 
 11894 ;; Registers used:
 11895 ;;		wreg, status,2, status,0, cstack
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11903 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11904 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11905 ;;Total ram usage:        7 bytes
 11906 ;; Hardware stack levels used: 1
 11907 ;; Hardware stack levels required when called: 3
 11908 ;; This function calls:
 11909 ;;		_I2C_2_Master_Read
 11910 ;;		_I2C_2_Master_RepStart
 11911 ;;		_I2C_2_Master_Start
 11912 ;;		_I2C_2_Master_Stop
 11913 ;;		_I2C_2_Master_Write
 11914 ;; This function is called by:
 11915 ;;		_reading_hue
 11916 ;;		_main
 11917 ;;		_calibration_colors
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           	psect	text66
 11922   004426                     __ptext66:
 11923                           	callstack 0
 11924   004426                     _color_read_Clear:
 11925                           	callstack 26
 11926   004426                     
 11927                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11928   004426  ECF1  F025         	call	_I2C_2_Master_Start	;wreg free
 11929                           
 11930                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11931   00442A  0E52               	movlw	82
 11932   00442C  ECE6  F025         	call	_I2C_2_Master_Write
 11933                           
 11934                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11935   004430  0EB4               	movlw	180
 11936   004432  ECE6  F025         	call	_I2C_2_Master_Write
 11937                           
 11938                           ;color.c: 82:  I2C_2_Master_RepStart();
 11939   004436  ECF6  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11940                           
 11941                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11942   00443A  0E53               	movlw	83
 11943   00443C  ECE6  F025         	call	_I2C_2_Master_Write
 11944                           
 11945                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11946   004440  0E01               	movlw	1
 11947   004442  EC6E  F023         	call	_I2C_2_Master_Read
 11948   004446  6E08               	movwf	??_color_read_Clear^0,c
 11949   004448  5008               	movf	??_color_read_Clear^0,w,c
 11950   00444A  6E0B               	movwf	color_read_Clear@tmp^0,c
 11951   00444C  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11952                           
 11953                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11954   00444E  0E00               	movlw	0
 11955   004450  EC6E  F023         	call	_I2C_2_Master_Read
 11956   004454  6E08               	movwf	??_color_read_Clear^0,c
 11957   004456  5008               	movf	??_color_read_Clear^0,w,c
 11958   004458  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11959   00445A  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11960   00445C  500B               	movf	color_read_Clear@tmp^0,w,c
 11961   00445E  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11962   004460  6E0B               	movwf	color_read_Clear@tmp^0,c
 11963   004462  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11964   004464  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11965   004466  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11966                           
 11967                           ;color.c: 86:  I2C_2_Master_Stop();
 11968   004468  ECEC  F025         	call	_I2C_2_Master_Stop	;wreg free
 11969   00446C                     
 11970                           ;color.c: 87:  return tmp;
 11971   00446C  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11972   004470  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11973   004474  0012               	return		;funcret
 11974   004476                     __end_of_color_read_Clear:
 11975                           	callstack 0
 11976                           
 11977 ;; *************** function _color_read_Blue *****************
 11978 ;; Defined at:
 11979 ;;		line 61 in file "color.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;  tmp             2   10[COMRAM] unsigned int 
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  2    5[COMRAM] unsigned int 
 11986 ;; Registers used:
 11987 ;;		wreg, status,2, status,0, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11993 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11995 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11996 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11997 ;;Total ram usage:        7 bytes
 11998 ;; Hardware stack levels used: 1
 11999 ;; Hardware stack levels required when called: 3
 12000 ;; This function calls:
 12001 ;;		_I2C_2_Master_Read
 12002 ;;		_I2C_2_Master_RepStart
 12003 ;;		_I2C_2_Master_Start
 12004 ;;		_I2C_2_Master_Stop
 12005 ;;		_I2C_2_Master_Write
 12006 ;; This function is called by:
 12007 ;;		_reading_hue
 12008 ;;		_calibration_colors
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           	psect	text67
 12013   004476                     __ptext67:
 12014                           	callstack 0
 12015   004476                     _color_read_Blue:
 12016                           	callstack 26
 12017   004476                     
 12018                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 12019   004476  ECF1  F025         	call	_I2C_2_Master_Start	;wreg free
 12020                           
 12021                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 12022   00447A  0E52               	movlw	82
 12023   00447C  ECE6  F025         	call	_I2C_2_Master_Write
 12024                           
 12025                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 12026   004480  0EBA               	movlw	186
 12027   004482  ECE6  F025         	call	_I2C_2_Master_Write
 12028                           
 12029                           ;color.c: 67:  I2C_2_Master_RepStart();
 12030   004486  ECF6  F025         	call	_I2C_2_Master_RepStart	;wreg free
 12031                           
 12032                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 12033   00448A  0E53               	movlw	83
 12034   00448C  ECE6  F025         	call	_I2C_2_Master_Write
 12035                           
 12036                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 12037   004490  0E01               	movlw	1
 12038   004492  EC6E  F023         	call	_I2C_2_Master_Read
 12039   004496  6E08               	movwf	??_color_read_Blue^0,c
 12040   004498  5008               	movf	??_color_read_Blue^0,w,c
 12041   00449A  6E0B               	movwf	color_read_Blue@tmp^0,c
 12042   00449C  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 12043                           
 12044                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12045   00449E  0E00               	movlw	0
 12046   0044A0  EC6E  F023         	call	_I2C_2_Master_Read
 12047   0044A4  6E08               	movwf	??_color_read_Blue^0,c
 12048   0044A6  5008               	movf	??_color_read_Blue^0,w,c
 12049   0044A8  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 12050   0044AA  6A09               	clrf	(??_color_read_Blue+1)^0,c
 12051   0044AC  500B               	movf	color_read_Blue@tmp^0,w,c
 12052   0044AE  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 12053   0044B0  6E0B               	movwf	color_read_Blue@tmp^0,c
 12054   0044B2  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 12055   0044B4  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 12056   0044B6  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 12057                           
 12058                           ;color.c: 71:  I2C_2_Master_Stop();
 12059   0044B8  ECEC  F025         	call	_I2C_2_Master_Stop	;wreg free
 12060   0044BC                     
 12061                           ;color.c: 72:  return tmp;
 12062   0044BC  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 12063   0044C0  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12064   0044C4  0012               	return		;funcret
 12065   0044C6                     __end_of_color_read_Blue:
 12066                           	callstack 0
 12067                           
 12068 ;; *************** function _I2C_2_Master_Write *****************
 12069 ;; Defined at:
 12070 ;;		line 45 in file "i2c.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;  data_byte       1    wreg     unsigned char 
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  data_byte       1    2[COMRAM] unsigned char 
 12075 ;; Return value:  Size  Location     Type
 12076 ;;                  1    wreg      void 
 12077 ;; Registers used:
 12078 ;;		wreg, status,2, status,0, cstack
 12079 ;; Tracked objects:
 12080 ;;		On entry : 0/0
 12081 ;;		On exit  : 0/0
 12082 ;;		Unchanged: 0/0
 12083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12088 ;;Total ram usage:        1 bytes
 12089 ;; Hardware stack levels used: 1
 12090 ;; Hardware stack levels required when called: 2
 12091 ;; This function calls:
 12092 ;;		_I2C_2_Master_Idle
 12093 ;; This function is called by:
 12094 ;;		_color_writetoaddr
 12095 ;;		_color_read_Red
 12096 ;;		_color_read_Green
 12097 ;;		_color_read_Blue
 12098 ;;		_color_read_Clear
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           	psect	text68
 12103   004BCC                     __ptext68:
 12104                           	callstack 0
 12105   004BCC                     _I2C_2_Master_Write:
 12106                           	callstack 26
 12107                           
 12108                           ;incstack = 0
 12109                           ;I2C_2_Master_Write@data_byte stored from wreg
 12110   004BCC  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 12111   004BCE                     
 12112                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 12113   004BCE  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12114   004BD2                     
 12115                           ;i2c.c: 48:   SSP2BUF = data_byte;
 12116   004BD2  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 12117   004BD6  0012               	return		;funcret
 12118   004BD8                     __end_of_I2C_2_Master_Write:
 12119                           	callstack 0
 12120                           
 12121 ;; *************** function _I2C_2_Master_Stop *****************
 12122 ;; Defined at:
 12123 ;;		line 39 in file "i2c.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;		None
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  1    wreg      void 
 12130 ;; Registers used:
 12131 ;;		wreg, status,2, status,0, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12141 ;;Total ram usage:        0 bytes
 12142 ;; Hardware stack levels used: 1
 12143 ;; Hardware stack levels required when called: 2
 12144 ;; This function calls:
 12145 ;;		_I2C_2_Master_Idle
 12146 ;; This function is called by:
 12147 ;;		_color_writetoaddr
 12148 ;;		_color_read_Red
 12149 ;;		_color_read_Green
 12150 ;;		_color_read_Blue
 12151 ;;		_color_read_Clear
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           	psect	text69
 12156   004BD8                     __ptext69:
 12157                           	callstack 0
 12158   004BD8                     _I2C_2_Master_Stop:
 12159                           	callstack 26
 12160   004BD8                     
 12161                           ;i2c.c: 41:   I2C_2_Master_Idle();
 12162   004BD8  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12163   004BDC                     
 12164                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 12165   004BDC  010E               	movlb	14	; () banked
 12166   004BDE  85DA               	bsf	218,2,b	;volatile
 12167   004BE0                     
 12168                           ; BSR set to: 14
 12169   004BE0  0012               	return		;funcret
 12170   004BE2                     __end_of_I2C_2_Master_Stop:
 12171                           	callstack 0
 12172                           
 12173 ;; *************** function _I2C_2_Master_Start *****************
 12174 ;; Defined at:
 12175 ;;		line 27 in file "i2c.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;		None
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;		None
 12180 ;; Return value:  Size  Location     Type
 12181 ;;                  1    wreg      void 
 12182 ;; Registers used:
 12183 ;;		wreg, status,2, status,0, cstack
 12184 ;; Tracked objects:
 12185 ;;		On entry : 0/0
 12186 ;;		On exit  : 0/0
 12187 ;;		Unchanged: 0/0
 12188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12193 ;;Total ram usage:        0 bytes
 12194 ;; Hardware stack levels used: 1
 12195 ;; Hardware stack levels required when called: 2
 12196 ;; This function calls:
 12197 ;;		_I2C_2_Master_Idle
 12198 ;; This function is called by:
 12199 ;;		_color_writetoaddr
 12200 ;;		_color_read_Red
 12201 ;;		_color_read_Green
 12202 ;;		_color_read_Blue
 12203 ;;		_color_read_Clear
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           	psect	text70
 12208   004BE2                     __ptext70:
 12209                           	callstack 0
 12210   004BE2                     _I2C_2_Master_Start:
 12211                           	callstack 26
 12212   004BE2                     
 12213                           ;i2c.c: 29:   I2C_2_Master_Idle();
 12214   004BE2  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12215   004BE6                     
 12216                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 12217   004BE6  010E               	movlb	14	; () banked
 12218   004BE8  81DA               	bsf	218,0,b	;volatile
 12219   004BEA                     
 12220                           ; BSR set to: 14
 12221   004BEA  0012               	return		;funcret
 12222   004BEC                     __end_of_I2C_2_Master_Start:
 12223                           	callstack 0
 12224                           
 12225 ;; *************** function _I2C_2_Master_RepStart *****************
 12226 ;; Defined at:
 12227 ;;		line 33 in file "i2c.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;		None
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;		None
 12232 ;; Return value:  Size  Location     Type
 12233 ;;                  1    wreg      void 
 12234 ;; Registers used:
 12235 ;;		wreg, status,2, status,0, cstack
 12236 ;; Tracked objects:
 12237 ;;		On entry : 0/0
 12238 ;;		On exit  : 0/0
 12239 ;;		Unchanged: 0/0
 12240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12245 ;;Total ram usage:        0 bytes
 12246 ;; Hardware stack levels used: 1
 12247 ;; Hardware stack levels required when called: 2
 12248 ;; This function calls:
 12249 ;;		_I2C_2_Master_Idle
 12250 ;; This function is called by:
 12251 ;;		_color_read_Red
 12252 ;;		_color_read_Green
 12253 ;;		_color_read_Blue
 12254 ;;		_color_read_Clear
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           	psect	text71
 12259   004BEC                     __ptext71:
 12260                           	callstack 0
 12261   004BEC                     _I2C_2_Master_RepStart:
 12262                           	callstack 26
 12263   004BEC                     
 12264                           ;i2c.c: 35:   I2C_2_Master_Idle();
 12265   004BEC  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12266   004BF0                     
 12267                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 12268   004BF0  010E               	movlb	14	; () banked
 12269   004BF2  83DA               	bsf	218,1,b	;volatile
 12270   004BF4                     
 12271                           ; BSR set to: 14
 12272   004BF4  0012               	return		;funcret
 12273   004BF6                     __end_of_I2C_2_Master_RepStart:
 12274                           	callstack 0
 12275                           
 12276 ;; *************** function _I2C_2_Master_Read *****************
 12277 ;; Defined at:
 12278 ;;		line 51 in file "i2c.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  ack             1    wreg     unsigned char 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  ack             1    3[COMRAM] unsigned char 
 12283 ;;  tmp             1    4[COMRAM] unsigned char 
 12284 ;; Return value:  Size  Location     Type
 12285 ;;                  1    wreg      unsigned char 
 12286 ;; Registers used:
 12287 ;;		wreg, status,2, status,0, cstack
 12288 ;; Tracked objects:
 12289 ;;		On entry : 0/0
 12290 ;;		On exit  : 0/0
 12291 ;;		Unchanged: 0/0
 12292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12294 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12296 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12297 ;;Total ram usage:        3 bytes
 12298 ;; Hardware stack levels used: 1
 12299 ;; Hardware stack levels required when called: 2
 12300 ;; This function calls:
 12301 ;;		_I2C_2_Master_Idle
 12302 ;; This function is called by:
 12303 ;;		_color_read_Red
 12304 ;;		_color_read_Green
 12305 ;;		_color_read_Blue
 12306 ;;		_color_read_Clear
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           	psect	text72
 12311   0046DC                     __ptext72:
 12312                           	callstack 0
 12313   0046DC                     _I2C_2_Master_Read:
 12314                           	callstack 26
 12315                           
 12316                           ; BSR set to: 14
 12317                           ;incstack = 0
 12318                           ;I2C_2_Master_Read@ack stored from wreg
 12319   0046DC  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 12320   0046DE                     
 12321                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 12322   0046DE  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12323   0046E2                     
 12324                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12325   0046E2  010E               	movlb	14	; () banked
 12326   0046E4  87DA               	bsf	218,3,b	;volatile
 12327                           
 12328                           ;i2c.c: 56:   I2C_2_Master_Idle();
 12329   0046E6  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12330   0046EA                     
 12331                           ;i2c.c: 57:   tmp = SSP2BUF;
 12332   0046EA  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12333                           
 12334                           ;i2c.c: 58:   I2C_2_Master_Idle();
 12335   0046EE  EC78  F025         	call	_I2C_2_Master_Idle	;wreg free
 12336   0046F2                     
 12337                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12338   0046F2  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 12339   0046F4  B4D8               	btfsc	status,2,c
 12340   0046F6  EF7F  F023         	goto	u3801
 12341   0046FA  EF83  F023         	goto	u3800
 12342   0046FE                     u3801:
 12343   0046FE  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12344   004700  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 12345   004702  EF84  F023         	goto	u3818
 12346   004706                     u3800:
 12347   004706  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12348   004708                     u3818:
 12349   004708  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 12350   00470A  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 12351   00470C  010E               	movlb	14	; () banked
 12352   00470E  51DA               	movf	218,w,b	;volatile
 12353   004710  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12354   004712  0BDF               	andlw	-33
 12355   004714  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12356   004716  6FDA               	movwf	218,b	;volatile
 12357   004718                     
 12358                           ; BSR set to: 14
 12359                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12360   004718  89DA               	bsf	218,4,b	;volatile
 12361   00471A                     
 12362                           ; BSR set to: 14
 12363                           ;i2c.c: 61:   return tmp;
 12364   00471A  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 12365   00471C                     
 12366                           ; BSR set to: 14
 12367   00471C  0012               	return		;funcret
 12368   00471E                     __end_of_I2C_2_Master_Read:
 12369                           	callstack 0
 12370                           
 12371 ;; *************** function _I2C_2_Master_Idle *****************
 12372 ;; Defined at:
 12373 ;;		line 22 in file "i2c.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;		None
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;		None
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  1    wreg      void 
 12380 ;; Registers used:
 12381 ;;		wreg, status,2, status,0
 12382 ;; Tracked objects:
 12383 ;;		On entry : 0/0
 12384 ;;		On exit  : 0/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12389 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12390 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12391 ;;Total ram usage:        1 bytes
 12392 ;; Hardware stack levels used: 1
 12393 ;; Hardware stack levels required when called: 1
 12394 ;; This function calls:
 12395 ;;		Nothing
 12396 ;; This function is called by:
 12397 ;;		_I2C_2_Master_Start
 12398 ;;		_I2C_2_Master_RepStart
 12399 ;;		_I2C_2_Master_Stop
 12400 ;;		_I2C_2_Master_Write
 12401 ;;		_I2C_2_Master_Read
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           	psect	text73
 12406   004AF0                     __ptext73:
 12407                           	callstack 0
 12408   004AF0                     _I2C_2_Master_Idle:
 12409                           	callstack 26
 12410   004AF0                     l174:
 12411   004AF0  010E               	movlb	14	; () banked
 12412   004AF2  B5D8               	btfsc	216,2,b	;volatile
 12413   004AF4  EF7E  F025         	goto	u2931
 12414   004AF8  EF80  F025         	goto	u2930
 12415   004AFC                     u2931:
 12416   004AFC  EF78  F025         	goto	l174
 12417   004B00                     u2930:
 12418   004B00                     
 12419                           ; BSR set to: 14
 12420   004B00  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12421   004B04  0E1F               	movlw	31
 12422   004B06  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12423   004B08  A4D8               	btfss	status,2,c
 12424   004B0A  EF89  F025         	goto	u2941
 12425   004B0E  EF8B  F025         	goto	u2940
 12426   004B12                     u2941:
 12427   004B12  EF78  F025         	goto	l174
 12428   004B16                     u2940:
 12429   004B16                     
 12430                           ; BSR set to: 14
 12431   004B16  0012               	return		;funcret
 12432   004B18                     __end_of_I2C_2_Master_Idle:
 12433                           	callstack 0
 12434                           
 12435 ;; *************** function _Timer0_init *****************
 12436 ;; Defined at:
 12437 ;;		line 8 in file "timers.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;		None
 12440 ;; Auto vars:     Size  Location     Type
 12441 ;;		None
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  1    wreg      void 
 12444 ;; Registers used:
 12445 ;;		wreg, status,2
 12446 ;; Tracked objects:
 12447 ;;		On entry : 0/0
 12448 ;;		On exit  : 0/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12455 ;;Total ram usage:        0 bytes
 12456 ;; Hardware stack levels used: 1
 12457 ;; Hardware stack levels required when called: 1
 12458 ;; This function calls:
 12459 ;;		Nothing
 12460 ;; This function is called by:
 12461 ;;		_main
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           	psect	text74
 12466   004A96                     __ptext74:
 12467                           	callstack 0
 12468   004A96                     _Timer0_init:
 12469                           	callstack 29
 12470   004A96                     
 12471                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 12472   004A96  50D6               	movf	214,w,c	;volatile
 12473   004A98  0B1F               	andlw	-225
 12474   004A9A  0940               	iorlw	64
 12475   004A9C  6ED6               	movwf	214,c	;volatile
 12476   004A9E                     
 12477                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 12478   004A9E  88D6               	bsf	214,4,c	;volatile
 12479                           
 12480                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 12481   004AA0  50D6               	movf	214,w,c	;volatile
 12482   004AA2  0BF0               	andlw	-16
 12483   004AA4  090D               	iorlw	13
 12484   004AA6  6ED6               	movwf	214,c	;volatile
 12485   004AA8                     
 12486                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 12487   004AA8  88D5               	bsf	213,4,c	;volatile
 12488   004AAA                     
 12489                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 12490   004AAA  010E               	movlb	14	; () banked
 12491   004AAC  8B29               	bsf	41,5,b	;volatile
 12492   004AAE                     
 12493                           ; BSR set to: 14
 12494                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 12495   004AAE  9B33               	bcf	51,5,b	;volatile
 12496   004AB0                     
 12497                           ; BSR set to: 14
 12498                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 12499   004AB0  9B1F               	bcf	31,5,b	;volatile
 12500   004AB2                     
 12501                           ; BSR set to: 14
 12502                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 12503   004AB2  8AF2               	bsf	242,5,c	;volatile
 12504   004AB4                     
 12505                           ; BSR set to: 14
 12506                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 12507   004AB4  8CF2               	bsf	242,6,c	;volatile
 12508   004AB6                     
 12509                           ; BSR set to: 14
 12510                           ;timers.c: 20:     INTCONbits.GIE = 1;
 12511   004AB6  8EF2               	bsf	242,7,c	;volatile
 12512   004AB8                     
 12513                           ; BSR set to: 14
 12514                           ;timers.c: 23:     TRISGbits.TRISG1 = 0;
 12515   004AB8  9287               	bcf	135,1,c	;volatile
 12516   004ABA                     
 12517                           ; BSR set to: 14
 12518                           ;timers.c: 24:     LATGbits.LATG1 = 0;
 12519   004ABA  927F               	bcf	127,1,c	;volatile
 12520                           
 12521                           ;timers.c: 27:     TMR0L = 0;
 12522   004ABC  0E00               	movlw	0
 12523   004ABE  6ED3               	movwf	211,c	;volatile
 12524                           
 12525                           ;timers.c: 28:     TMR0H = 0;
 12526   004AC0  0E00               	movlw	0
 12527   004AC2  6ED4               	movwf	212,c	;volatile
 12528   004AC4                     
 12529                           ; BSR set to: 14
 12530   004AC4  0012               	return		;funcret
 12531   004AC6                     __end_of_Timer0_init:
 12532                           	callstack 0
 12533                           
 12534 ;; *************** function _ADC_init *****************
 12535 ;; Defined at:
 12536 ;;		line 9 in file "ADC.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;		None
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;		None
 12541 ;; Return value:  Size  Location     Type
 12542 ;;                  1    wreg      void 
 12543 ;; Registers used:
 12544 ;;		wreg, status,2
 12545 ;; Tracked objects:
 12546 ;;		On entry : 0/0
 12547 ;;		On exit  : 0/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12554 ;;Total ram usage:        0 bytes
 12555 ;; Hardware stack levels used: 1
 12556 ;; Hardware stack levels required when called: 1
 12557 ;; This function calls:
 12558 ;;		Nothing
 12559 ;; This function is called by:
 12560 ;;		_main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text75
 12565   004B9A                     __ptext75:
 12566                           	callstack 0
 12567   004B9A                     _ADC_init:
 12568                           	callstack 29
 12569   004B9A                     
 12570                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12571   004B9A  8C86               	bsf	134,6,c	;volatile
 12572                           
 12573                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12574   004B9C  010E               	movlb	14	; () banked
 12575   004B9E  8DB4               	bsf	180,6,b	;volatile
 12576                           
 12577                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12578   004BA0  010F               	movlb	15	; () banked
 12579   004BA2  9958               	bcf	88,4,b	;volatile
 12580   004BA4                     
 12581                           ; BSR set to: 15
 12582                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12583   004BA4  0EFC               	movlw	-4
 12584   004BA6  1758               	andwf	88,f,b	;volatile
 12585                           
 12586                           ;ADC.c: 17:     ADPCH=0b101110;
 12587   004BA8  0E2E               	movlw	46
 12588   004BAA  6F5F               	movwf	95,b	;volatile
 12589   004BAC                     
 12590                           ; BSR set to: 15
 12591                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12592   004BAC  9460               	bcf	96,2,c	;volatile
 12593   004BAE                     
 12594                           ; BSR set to: 15
 12595                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12596   004BAE  8860               	bsf	96,4,c	;volatile
 12597   004BB0                     
 12598                           ; BSR set to: 15
 12599                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12600   004BB0  8E60               	bsf	96,7,c	;volatile
 12601   004BB2                     
 12602                           ; BSR set to: 15
 12603   004BB2  0012               	return		;funcret
 12604   004BB4                     __end_of_ADC_init:
 12605                           	callstack 0
 12606                           
 12607 ;; *************** function _LowISR *****************
 12608 ;; Defined at:
 12609 ;;		line 47 in file "timers.c"
 12610 ;; Parameters:    Size  Location     Type
 12611 ;;		None
 12612 ;; Auto vars:     Size  Location     Type
 12613 ;;		None
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  1    wreg      void 
 12616 ;; Registers used:
 12617 ;;		None
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12626 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12627 ;;Total ram usage:        1 bytes
 12628 ;; Hardware stack levels used: 1
 12629 ;; This function calls:
 12630 ;;		Nothing
 12631 ;; This function is called by:
 12632 ;;		Interrupt level 1
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	intcodelo
 12637   000018                     __pintcodelo:
 12638                           	callstack 0
 12639   000018                     _LowISR:
 12640                           	callstack 20
 12641                           
 12642                           ; BSR set to: 15
 12643                           ;incstack = 0
 12644   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12645   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12646   00001E                     
 12647                           ;timers.c: 50:     if (PIR0bits.TMR0IF == 1) {
 12648   00001E  010E               	movlb	14	; () banked
 12649   000020  AB33               	btfss	51,5,b	;volatile
 12650   000022  EF15  F000         	goto	i1u241_21
 12651   000026  EF17  F000         	goto	i1u241_20
 12652   00002A                     i1u241_21:
 12653   00002A  EF19  F000         	goto	i1l626
 12654   00002E                     i1u241_20:
 12655   00002E                     
 12656                           ; BSR set to: 14
 12657                           ;timers.c: 51:         LATGbits.LATG1 = 1;
 12658   00002E  827F               	bsf	127,1,c	;volatile
 12659                           
 12660                           ;timers.c: 53:         PIR0bits.TMR0IF = 0;
 12661   000030  9B33               	bcf	51,5,b	;volatile
 12662   000032                     i1l626:
 12663                           
 12664                           ; BSR set to: 14
 12665   000032  C001  FFE0         	movff	??_LowISR,bsr
 12666   000036  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12667   000038  0010               	retfie	
 12668   00003A                     __end_of_LowISR:
 12669                           	callstack 0
 12670                           
 12671                           	psect	rparam
 12672   000000                     
 12673                           	psect	temp
 12674   00005D                     btemp:
 12675                           	callstack 0
 12676   00005D                     	ds	1
 12677   000000                     int$flags	set	btemp
 12678   000000                     wtemp8	set	btemp+1
 12679   000000                     ttemp5	set	btemp+1
 12680   000000                     ttemp6	set	btemp+4
 12681   000000                     ttemp7	set	btemp+8
 12682                           
 12683                           	psect	config
 12684                           
 12685                           ;Config register CONFIG1L @ 0x300000
 12686                           ;	External Oscillator mode Selection bits
 12687                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12688                           ;	Power-up default value for COSC bits
 12689                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12690   300000                     	org	3145728
 12691   300000  AA                 	db	170
 12692                           
 12693                           ;Config register CONFIG1H @ 0x300001
 12694                           ;	unspecified, using default values
 12695                           ;	Clock Out Enable bit
 12696                           ;	CLKOUTEN = 0x1, unprogrammed default
 12697                           ;	Clock Switch Enable bit
 12698                           ;	CSWEN = 0x1, unprogrammed default
 12699                           ;	Fail-Safe Clock Monitor Enable bit
 12700                           ;	FCMEN = 0x1, unprogrammed default
 12701   300001                     	org	3145729
 12702   300001  FF                 	db	255
 12703                           
 12704                           ;Config register CONFIG3L @ 0x300004
 12705                           ;	WDT Period Select bits
 12706                           ;	WDTCPS = 0x1F, unprogrammed default
 12707                           ;	WDT operating mode
 12708                           ;	WDTE = OFF, WDT Disabled
 12709   300004                     	org	3145732
 12710   300004  9F                 	db	159
 12711                           
 12712                           ;Config register CONFIG3H @ 0x300005
 12713                           ;	unspecified, using default values
 12714                           ;	WDT Window Select bits
 12715                           ;	WDTCWS = 0x7, unprogrammed default
 12716                           ;	WDT input clock selector
 12717                           ;	WDTCCS = 0x7, unprogrammed default
 12718   300005                     	org	3145733
 12719   300005  FF                 	db	255
 12720                           tosu	equ	0xFFF
 12721                           tosh	equ	0xFFE
 12722                           tosl	equ	0xFFD
 12723                           stkptr	equ	0xFFC
 12724                           pclatu	equ	0xFFB
 12725                           pclath	equ	0xFFA
 12726                           pcl	equ	0xFF9
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           indf0	equ	0xFEF
 12734                           postinc0	equ	0xFEE
 12735                           postdec0	equ	0xFED
 12736                           preinc0	equ	0xFEC
 12737                           plusw0	equ	0xFEB
 12738                           fsr0h	equ	0xFEA
 12739                           fsr0l	equ	0xFE9
 12740                           wreg	equ	0xFE8
 12741                           indf1	equ	0xFE7
 12742                           postinc1	equ	0xFE6
 12743                           postdec1	equ	0xFE5
 12744                           preinc1	equ	0xFE4
 12745                           plusw1	equ	0xFE3
 12746                           fsr1h	equ	0xFE2
 12747                           fsr1l	equ	0xFE1
 12748                           bsr	equ	0xFE0
 12749                           indf2	equ	0xFDF
 12750                           postinc2	equ	0xFDE
 12751                           postdec2	equ	0xFDD
 12752                           preinc2	equ	0xFDC
 12753                           plusw2	equ	0xFDB
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         430
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     98     145
    BANK1           256      0     182
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_colors@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3001$buffer	PTR unsigned char  size(2) Largest target is 0

    S3001$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseStraight
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _get16bitTMR0val->___aldiv
    ___aldiv->___lmul
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_right90
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_colors->_send2USART
    _send2USART->___fltol
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_colors->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0  368353
                                             76 BANK0     22    22      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                 _calibration_colors
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          15     9      6  117720
                                              0 BANK0     15     9      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                         11     2      9   76697
                                             30 COMRAM    11     2      9
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   15263
                                             80 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    8918
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            6     2      4   24827
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   18020
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   17381
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1246
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     837
                                             65 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3649
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2870
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2352
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2767
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                     12    10      2    2391
                                             27 COMRAM    12    10      2
                            ___aldiv
                             ___lmul
                          _logAction
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _decision                                             8     2      6  173107
                                             36 COMRAM     6     0      6
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   23459
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   25131
                                             30 COMRAM     6     2      4
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              8     4      4   13049
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   23383
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10072
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   24447
                                             30 COMRAM     6     2      4
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             8     4      4   12365
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4179
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   24599
                                             30 COMRAM     6     2      4
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              8     4      4   12517
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   25055
                                             30 COMRAM     6     2      4
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               8     4      4   12973
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   24827
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              8     4      4   12745
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4331
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _customDelayMs                                        5     3      2     502
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11744
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5501
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4179
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3653
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            9     3      6    1326
                                              1 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_colors                                  23    22      1   22900
                                             77 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11232
                                             75 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                            ___fltol (ARG)
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    9906
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8154
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    7666
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1903
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1571
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     675
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_colors
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       ___fltol (ARG)
       _sendStringSerial4 (ARG)
         _sendCharSerial4
       _sprintf (ARG)
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         ___wmul
         _customDelayMs
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         ___wmul
         _customDelayMs
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     62      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRlllhll     37      0       0      49        0.0%
BITBIGSFRlllhhl     31      0       0      47        0.0%
BITBIGSFRllllll     2A      0       0      60        0.0%
BITBIGSFRllllll     26      0       0      67        0.0%
BITBIGSFRlllllh     20      0       0      52        0.0%
BITBIGSFRllllll     1E      0       0      54        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      44        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      55        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      53        0.0%
BITBIGSFRllllll      9      0       0      64        0.0%
BITBIGSFRlllhll      8      0       0      50        0.0%
BITBIGSFRllllll      6      0       0      66        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllhhh      6      0       0      46        0.0%
BITBIGSFRllllll      5      0       0      62        0.0%
BITBIGSFRllllll      5      0       0      58        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRllllll      3      0       0      63        0.0%
BITBIGSFRlllhhh      3      0       0      45        0.0%
BITBIGSFRllllll      3      0       0      57        0.0%
BITBIGSFRlllhlh      2      0       0      48        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllhh        1      0       0      42        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      65        0.0%
BITBIGSFRllllh       1      0       0      51        0.0%
BITBIGSFRllhl        1      0       0      43        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26B      68        0.0%
DATA                 0      0     26B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 06:13:57 2024

               logAction@newTime 0002               logAction@newAction 000A                   _color_read_Red 4386  
                   ___fldiv@aexp 0041                     ___fldiv@bexp 0040               fullSpeedBack@power 0017  
                   ___fldiv@sign 0039                  _color_read_Blue 4476                               l73 4998  
                             l82 4424                               l91 3A48                               l76 4B5C  
                             l85 44C4                               l79 43D4                               l88 4474  
                             l99 11A8                     ___awdiv@sign 0007                               bsr 0FE0  
            ___wmul@multiplicand 0004                  moveLightBlue@mL 001F                  moveLightBlue@mR 0020  
             convert_rgb2hue@max 0098               convert_rgb2hue@hue 009C               convert_rgb2hue@min 0090  
               _color_read_Clear 4426                 _color_read_Green 43D6                              l101 11B8  
                            l111 12AA                              l103 1212                              l121 15C2  
                            l113 12BA                              l105 1222                              l115 1314  
                            l125 163A                              l117 1324                              l126 1656  
                            l144 2A82                              l401 40DA                              l138 2A7A  
             logAction@path_step 0006                              l315 4BB2                              l171 4AEE  
                            l411 4158                              l180 4BEA                              l421 424C  
                            l174 4AF0                              l406 41D6                              l430 4698  
                            l183 4BF4                              l192 471C                              l424 4590  
                            l416 3B12                              l177 4B16                              l433 45D2  
                            l186 4BE0                              l442 4A32                              l290 18E2  
                            l451 492C                              l427 4656                              l436 4614  
                            l460 487E                              l620 3F26                              l189 4BD6  
                            l445 480A                              l517 4B7A                              l526 4BB6  
                            l454 47D0                              l294 1ABC                              l535 4A64  
                            l439 4A94                              l463 48B8                              l448 48F2  
                            l296 1AAE                              l617 4AC4                              l529 4BCA  
                            l393 343A                              l457 4844                              l705 32E6  
                            l810 4B3C                              l386 404C                              l466 4796  
                            l580 4B98                              l804 494E                              l821 431A  
                            l822 432A                              l807 4964                              l770 2B66  
                            l772 2B74                              l764 2AAA                              l668 4384  
                            l692 395E                              l684 355C                              l773 2BC6  
                            l782 2CC8                              l766 2AB8                              l678 355C  
                            l775 2BD4                              l767 2B06                              l695 32E4  
                            l776 2C2E                              l769 2B14                              l778 2C3C  
                            l779 2CA2                              l889 3668                              _abs 49CE  
                            _pad 3F28              convert_rgb2hue@cMax 004C                     ___awmod@sign 0007  
            convert_rgb2hue@diff 0094                              wreg 0FE8                     ___flmul@aexp 0021  
                   ___flmul@bexp 0022                     ___flmul@sign 001C                     ___flmul@temp 0027  
                   ___flmul@prod 0023                      main@ambient 00AE                     ___fltol@exp1 004B  
                           l1041 3BD6                             l1107 376E                             ?_abs 0008  
                           l1301 42B8                             l1054 3C86                             l1080 3872  
                           l1403 266C                             l1075 382C                             l1308 42C0  
                           l1340 1CE6                             l1405 26E4                             l1069 3DDE  
                           l1406 26D2                             l1511 3F9C                             l1431 22BE  
                           l1424 20C8                             l1513 3FBC                             l1441 23EE  
                           l1433 2336                             l4010 422C                             l4002 41F8  
                           l1434 2324                             l1338 1D32                             l1355 1E4C  
                           l1347 2002                             l1339 1D20                             l4020 4BB6  
                           l1508 3F5E                             l1516 3064                             l4012 4230  
                           l4004 420C                             l1428 242C                             l1364 1F1C  
                           l4100 1C80                             l1380 450A                             l1533 3D2C  
                           l1365 1F0A                             l4022 4BC6                             l4006 4214  
                           l4014 492E                             l4110 1CDE                             l4102 1C84  
                           l4030 1B60                             l1552 3004                             l4008 421C  
                           l4016 493A                             l1392 27C6                             l4200 1F80  
                           l4120 1D14                             l4112 1CF4                             l4104 1C88  
                           l4032 1B70                             l4040 1B9A                             l4024 1B44  
                           l1472 2DB8                             l5000 38AA                             l1529 317C  
                           l1537 3D34                             l1465 2D20                             l1562 49E8  
                           l4018 494A                             l1394 2626                             l4210 1FC6  
                           l4202 1F82                             l4130 1D64                             l4122 1D1E  
                           l4114 1D00                             l4106 1CB2                             l4050 1BCA  
                           l4042 1BAA                             l4034 1B80                             l4026 1B50  
                           l5002 38CC                             l5010 3924                             l5020 42D2  
                           l4300 2218                             l4220 1FF0                             l4212 1FD4  
                           l4204 1F92                             l4140 1DA0                             l4132 1D74  
                           l4124 1D40                             l4116 1D04                             l4108 1CCE  
                           l4060 1C0A                             l4052 1BD8                             l4044 1BB0  
                           l4036 1B90                             l4028 1B5E                             l1468 2E7C  
                           l5100 39C8                             l5012 3930                             l5004 38EE  
                           l1565 4A00                             l1397 25EA                             l1558 46DA  
                           l5030 3562                             l5022 42E0                             l4310 22AE  
                           l4302 2242                             l4230 201E                             l4222 1FF2  
                           l4214 1FDA                             l4206 1FA2                             l4150 1DE6  
                           l4142 1DAE                             l4134 1D82                             l4126 1D50  
                           l4118 1D12                             l4070 1C44                             l4062 1C0C  
                           l4054 1BDA                             l4046 1BC2                             l4038 1B92  
                           l5110 39FC                             l5102 39CA                             l5014 393C  
                           l5006 38FA                             l1479 2E14                             l1488 49CC  
                           l5200 2A76                             l5120 27C8                             l5040 35A2  
                           l5032 3570                             l5024 42F0                             l4320 22EE  
                           l4312 22BC                             l4304 2278                             l4240 2056  
                           l4232 2020                             l4216 1FDC                             l4208 1FC2  
                           l4160 1E62                             l4152 1E1A                             l4144 1DB0  
                           l4136 1D90                             l4080 1C58                             l4072 1C48  
                           l4056 1BEA                             l4064 1C14                             l4048 1BC4  
                           l4400 2CCC                             l5112 3A16                             l5104 39E2  
                           l5016 3948                             l5008 391C                             l6000 173A  
                           l1577 3E88                             l1585 475C                             l5210 4BA4  
                           l5130 2826                             l5122 27DE                             l5050 35E0  
                           l5042 35A6                             l5034 3580                             l5026 42FA  
                           l5018 42C2                             l4330 2360                             l4322 231C  
                           l4314 22CE                             l4306 2286                             l4250 2082  
                           l4242 2066                             l4234 2030                             l4226 2004  
                           l4218 1FE2                             l4170 1E9E                             l4162 1E72  
                           l4154 1E1C                             l4146 1DBA                             l4138 1D9C  
                           l4090 1C6C                             l4082 1C5C                             l4074 1C4C  
                           l4066 1C24                             l4058 1BFA                             l4402 2CDC  
                           l5114 3A2C                             l5106 39F8                             l6010 1812  
                           l6002 175C                             l5212 4BAC                             l3700 3BB6  
                           l1588 4BF6                             l5140 288C                             l5204 2A7A  
                           l5132 282E                             l5124 27F4                             l5060 3628  
                           l5052 35EE                             l5044 35B6                             l5036 3584  
                           l5028 355E                             l5220 4B68                             l4340 23D6  
                           l4332 238A                             l4316 22DC                             l4308 22A4  
                           l4260 20D8                             l4252 2092                             l4244 206C  
                           l4236 2040                             l4228 2010                             l4180 1ECA  
                           l4172 1EA0                             l4156 1E2C                             l4148 1DC0  
                           l4092 1C70                             l4084 1C60                             l4076 1C50  
                           l4068 1C36                             l4420 2DA2                             l4412 2D5A  
                           l4404 2CEA                             l5116 3A40                             l5108 39FA  
                           l4500 3ADA                             l6020 18F0                             l6012 1862  
                           l6004 177C                             l5214 4BAE                             l5230 4A96  
                           l3702 3BC6                             l3710 3BDC                             l4510 4550  
                           l5150 28D0                             l5134 2844                             l5126 2808  
                           l5062 3632                             l5054 35F8                             l5046 35CC  
                           l5038 3592                             l5222 4B6A                             l4342 23F2  
                           l4350 2418                             l4326 2346                             l4334 238E  
                           l4318 22E0                             l4270 2112                             l4262 20E8  
                           l4254 20A2                             l4246 2072                             l4238 2050  
                           l4190 1F02                             l4174 1EAE                             l4166 1E86  
                           l4182 1ECC                             l4158 1E3C                             l4094 1C74  
                           l4086 1C64                             l4078 1C54                             l4430 2E22  
                           l4422 2DAE                             l4414 2D62                             l4406 2D30  
                           l4502 3AE2                             l6030 194E                             l6022 1904  
                           l6006 179E                             l5216 4BB0                             l5208 4B9A  
                           l5240 4AB0                             l5232 4A9E                             l3704 3BCE  
                           l3720 3C0C                             l3712 3BEA                             l3640 3E00  
                           l5080 498E                             l5072 4966                             l4520 4616  
                           l4512 456C                             l5160 291E                             l5152 28EE  
                           l5136 285A                             l5144 2890                             l5128 2826  
                           l5056 3616                             l5048 35D4                             l5064 3638  
                           l5224 4B74                             l4600 245A                             l4352 241C  
                           l4344 2402                             l4336 23A8                             l4328 2352  
                           l4280 2164                             l4272 2128                             l4256 20B2  
                           l4248 2080                             l4176 1EB6                             l4168 1E90  
                           l4184 1EDA                             l4096 1C78                             l4088 1C68  
                           l4440 2E6A                             l4432 2E24                             l4424 2DEA  
                           l4416 2D6E                             l4408 2D46                             l4504 3AF2  
                           l6040 1A20                             l6032 1968                             l6024 191C  
                           l6016 18CA                             l6008 1802                             l5250 4ABA  
                           l5242 4AB2                             l5234 4AA8                             l3730 3C52  
                           l3722 3C1E                             l3714 3BF2                             l3642 3E0A  
                           l6106 2F06                             l5074 496A                             l4530 4658  
                           l4522 4632                             l4514 4578                             l5170 296A  
                           l5162 2932                             l5146 28A6                             l5138 286E  
                           l5066 3648                             l5058 3626                             l5226 4B76  
                           l5218 4B5E                             l4610 2494                             l4602 246A  
                           l4346 2410                             l4338 23BC                             l4290 21AA  
                           l4282 2172                             l4274 2134                             l4266 20FC  
                           l4258 20B8                             l4194 1F2C                             l4186 1EDE  
                           l4178 1EBA                             l4098 1C7C                             l4370 36D4  
                           l4362 3694                             l4442 2E6C                             l4434 2E28  
                           l4426 2DF6                             l4418 2DA0                             l5090 3992  
                           l5082 3960                             l4506 3AF6                             l6050 1A82  
                           l6042 1A38                             l6034 1978                             l6026 1928  
                           l6018 18E4                             l5244 4AB4                             l5236 4AAA  
                           l4460 4BCE                             l3740 3C7E                             l3732 3C5A  
                           l3724 3C26                             l3716 3BF6                             l3708 3BD8  
                           l3644 3E26                             l3636 3DE0                             l3660 4B34  
                           l5076 4974                             l4532 4674                             l4524 463E  
                           l4540 4592                             l4516 4584                             l4508 4550  
                           l5172 2980                             l5180 29B6                             l5164 2950  
                           l5148 28BC                             l5156 28F2                             l5068 3658  
                           l5260 401C                             l5252 3FBE                             l5228 4B78  
                           l4700 2700                             l4620 24C0                             l4612 249A  
                           l4604 247A                             l4348 2412                             l4292 21C4  
                           l4284 217E                             l4276 214C                             l4268 2108  
                           l4196 1F38                             l4188 1EEC                             l4380 3704  
                           l4372 36E2                             l4364 36BE                             l4356 366A  
                           l4436 2E4C                             l4428 2E04                             l5092 3994  
                           l5084 3966                             l6060 1AFA                             l6052 1A98  
                           l6044 1A44                             l6036 199A                             l6028 1942  
                           l5246 4AB6                             l5238 4AAE                             l4470 4BF0  
                           l4462 4BD2                             l3670 3B2E                             l3734 3C60  
                           l3726 3C2E                             l3718 3C04                             l3646 3E58  
                           l3638 3DF0                             l5078 4984                             l4534 4680  
                           l4526 464A                             l4518 4616                             l4550 45D4  
                           l4542 45AE                             l5182 29CC                             l5174 2994  
                           l5158 2908                             l5350 3F1A                             l5270 403E  
                           l5262 4026                             l5254 3FCE                             l4710 276C  
                           l4702 270E                             l4630 24FA                             l4622 24D0  
                           l4614 24A0                             l4606 247C                             l4294 21D4  
                           l4286 218E                             l4278 2158                             l4198 1F46  
                           l4390 372E                             l4382 370E                             l4366 36C0  
                           l4358 3680                             l4438 2E5C                             l5094 3996  
                           l5086 397E                             l6054 1AD0                             l6062 1B18  
                           l6046 1A5E                             l6038 19BC                             ?_pad 0010  
                           l5248 4AB8                             l4480 4718                             l4472 46DE  
                           l4456 4BE2                             l4464 4BD8                             l4800 4476  
                           l3680 3B54                             l3672 3B32                             l3664 3B14  
                           l3728 3C3C                             l3736 3C66                             l3760 49CE  
                           l3840 3CB6                             l4560 4A72                             l4536 468C  
                           l4528 4658                             l4552 45F0                             l4544 45BA  
                           l5184 29E2                             l5192 2A18                             l5176 29B2  
                           l5168 2954                             l5352 3F1E                             l5344 3E8A  
                           l5272 4040                             l5264 4028                             l5256 3FF4  
                           l4720 27BA                             l4712 2786                             l4704 2738  
                           l4632 2510                             l4624 24E0                             l4616 24AE  
                           l4608 2484                             l4296 21F0                             l4288 219A  
                           l4392 373E                             l4368 36D0                             l5096 39C4  
                           l5088 3990                             l6056 1AE4                             l6048 1A6A  
                           l3922 4AF0                             l4482 471A                             l4474 46E2  
                           l4458 4BE6                             l4466 4BDC                             l4802 44BC  
                           l4570 4A34                             l3690 3B8A                             l3682 3B66  
                           l3674 3B40                             l3666 3B18                             l3738 3C76  
                           l3762 49DC                             l3658 4B18                             l3842 3CBE  
                           l3770 4270                             l3850 32E8                             l3930 4068  
                           l4562 4A88                             l4554 45FC                             l4546 45C6  
                           l4538 4592                             l5194 2A2E                             l5186 29F6  
                           l5346 3EA2                             l5274 404A                             l5266 4032  
                           l5258 3FF8                             l4722 27BC                             l4714 27A2  
                           l4706 273C                             l4650 2564                             l4634 2520  
                           l4642 2540                             l4626 24E2                             l4618 24B0  
                           l4298 21FC                             l4730 44C6                             l4394 374E  
                           l4378 36FA                             l5098 39C6                             l6058 1AEE  
                           l3924 4B00                             l4476 46EA                             l4468 4BEC  
                           l4572 4A38                             l3692 3BA0                             l3684 3B6E  
                           l3676 3B48                             l3668 3B26                             l5700 304C  
                           l3844 3CDA                             l3836 3C88                             l3780 42AA  
                           l3772 4278                             l3764 424E                             l3860 33A4  
                           l3852 3302                             l3940 409E                             l3932 4070  
                           l4900 4900                             l4556 4608                             l4548 45D4  
                           l4564 4A02                             l5196 2A44                             l5188 2A14  
                           l5348 3EFC                             l5268 4034                             l4716 27A6  
                           l4708 2756                             l4660 25B6                             l4652 257E  
                           l4644 2550                             l4636 2528                             l4628 24EA  
                           l4740 3D74                             l4732 44D6                             l4396 375E  
                           l4388 3722                             l4820 0F6C                             l4812 0EC6  
                           l4478 46F2                             l4806 4426                             l4574 4A44  
                           l3694 3BA8                             l3686 3B76                             l3678 3B4C  
                           l5710 307C                             l5702 3058                             l3846 3CFA  
                           l3838 3C90                             l3782 42AC                             l3774 4286  
                           l3766 4256                             l3862 33BE                             l3854 3350  
                           l3934 4086                             l3942 40AE                             l3926 404E  
                           l4558 4A66                             l3950 417C                             l4902 4918  
                           l4566 4A0E                             l4910 4798                             l5198 2A58  
                           l4718 27B4                             l4670 2612                             l4662 25C6  
                           l4654 258E                             l4646 2550                             l4638 252C  
                           l4742 3DA2                             l4830 1070                             l4822 0FA0  
                           l4814 0ED8                             l4494 3A6E                             l4486 3A4A  
                           l4808 446C                             l4576 4A46                             l3696 3BAA  
                           l3688 3B84                             l5720 30EE                             l5712 30AE  
                           l5704 3060                             l3848 3D02                             l5800 46D2  
                           l3784 42B2                             l3776 428C                             l3768 4268  
                           l3864 33FE                             l3856 3362                             l3944 40C4  
                           l3936 408E                             l3928 4052                             l3960 419C  
                           l3952 4184                             l4904 4880                             l4920 486A  
                           l4568 4A26                             l4912 47A4                             l4680 2652  
                           l4672 2614                             l4664 25DA                             l4656 259E  
                           l4592 242E                             l4744 3DB2                             l4736 3D36  
                           l4760 37EC                             l4752 3770                             l4840 1162  
                           l4832 1094                             l4824 0FD4                             l4816 0F08  
                           l4496 3A78                             l4488 3A66                             l4578 4A4E  
                           l3698 3BB0                             l5730 314A                             l5722 3100  
                           l5714 30B2                             l5706 306C                             l5810 49B2  
                           l3778 42A2                             l3858 3366                             l3938 4096  
                           l3962 41A4                             l3946 415A                             l4906 488C  
                           l3970 40DC                             l4922 480C                             l4914 47BC  
                           l4690 268E                             l4682 265C                             l4674 2624  
                           l4666 25E8                             l4658 25AE                             l4594 243A  
                           l4746 3DD6                             l4738 3D64                             l4770 3870  
                           l4762 37FA                             l4754 379E                             l4850 1264  
                           l4842 1194                             l4834 10C8                             l4826 1008  
                           l4818 0F38                             l4498 3AD2                             l5732 3150  
                           l5724 3110                             l5716 30B8                             l5708 3076  
                           l5740 2EA4                             l5812 49C2                             l5804 499A  
                           l5820 2A84                             l4780 4AD8                             l3964 41AC  
                           l3948 4174                             l4908 48A4                             l3972 40F6  
                           l4916 4846                             l4924 4818                             l4692 269C  
                           l4684 266A                             l4676 2636                             l4668 25F4  
                           l4596 2448                             l4748 3DDC                             l4764 380C  
                           l4756 37AE                             l4860 139A                             l4852 1296  
                           l4844 11CC                             l4836 10FC                             l4828 103C  
                           l4932 475E                             l4940 344C                             l5900 31FE  
                           l4790 43CC                             l5670 473C                             l5734 3160  
                           l5726 312A                             l5718 30D4                             l5750 2ECA  
                           l5742 2EAC                             l5806 49A2                             l5830 2AE4  
                           l5822 2A8A                             l4782 4ADA                             l4774 4AC6  
                           l3966 41BC                             l3958 418C                             l3990 413E  
                           l3982 410E                             l3974 40FE                             l4918 4852  
                           l4926 4830                             l4694 26CA                             l4678 264C  
                           l4686 267C                             l4598 244A                             l4766 381A  
                           l4758 37DC                             l4870 1500                             l4862 13B0  
                           l4854 12CE                             l4846 11FE                             l4838 1130  
                           l4934 476A                             l4942 3460                             l5910 32C2  
                           l5902 323A                             l5664 471E                             l5680 3F6A  
                           l5672 3F28                             l5728 313A                             l5760 2F24  
                           l5752 2ED6                             l5744 2EBA                             l5808 49AA  
                           l5816 4B7C                             l5840 2B44                             l5832 2AE6  
                           l5824 2AA2                             l4784 4ADC                             l4776 4AD0  
                           l3968 41C0                             l3992 4142                             l3984 411E  
                           l3976 4106                             l4688 268A                             l4768 386A  
                           l4872 1532                             l4864 13E2                             l4856 1300  
                           l4848 1232                             l4936 4782                             l4944 3478  
                           l5904 326A                             l5920 1660                             l4794 43D6  
                           l5666 472A                             l5682 3F7A                             l5674 3F38  
                           l5690 300A                             l5770 2F7C                             l5762 2F38  
                           l5746 2EBE                             l5738 2E7E                             l5818 4B90  
                           l5850 2BA4                             l5842 2B46                             l5834 2AFE  
                           l5826 2ABA                             l4778 4AD6                             l4786 4B40  
                           l4890 4344                             l3994 41D8                             l3986 4126  
                           l4882 47D2                             l4698 26F4                             l4866 143E  
                           l4874 15C2                             l4858 1334                             l4970 3506  
                           l4962 34DC                             l4954 34B2                             l4946 3488  
                           l4938 343C                             l5914 32DA                             l5906 327A  
                           l5930 167A                             l5922 1664                             l4796 441C  
                           l4788 4386                             l5668 4738                             l5684 3F7E  
                           l5676 3F48                             l5692 301E                             l5780 2FD2  
                           l5772 2F9C                             l5764 2F48                             l5756 2EDE  
                           l5748 2EC6                             l5860 2C08                             l5852 2BA6  
                           l5844 2B5E                             l5836 2B16                             l5828 2AD2  
                           l3996 41F0                             l4892 48BA                             l3988 412E  
                           l4884 47DE                             l4876 15F6                             l4868 1470  
                           l4980 352E                             l4964 34EE                             l4956 34C4  
                           l4948 349A                             l5908 329A                             l5940 169A  
                           l5932 167E                             l5924 1668                             l5916 1658  
                           l5686 3FAC                             l5678 3F56                             l5694 3026  
                           l5774 2FB4                             l5766 2F52                             l5758 2F14  
                           l5870 2C42                             l5862 2C0A                             l5854 2BBE  
                           l5846 2B76                             l5838 2B2E                             l4894 48C6  
                           l4886 47F6                             l4878 1606                             l5950 16B6  
                           l5942 169E                             l5934 1682                             l5926 1668  
                           l5918 165C                             l5696 3036                             l5688 3006  
                           l5776 2FBE                             l5768 2F5C                             l5784 2FDE  
                           l5880 2C76                             l5872 2C5A                             l5864 2C0C  
                           l5856 2BDA                             l5848 2B8E                             l4888 432E  
                           l4896 48DE                             l5960 16C6                             l5952 16BE  
                           l5944 16A2                             l5936 168A                             l5928 1674  
                           l5698 303C                             l5794 469A                             l5882 2C8E  
                           l5874 2C70                             l5866 2C0E                             l5858 2BF2  
                           l4898 48F4                             l4994 3874                             l4986 3546  
                           l4978 351C                             l5890 3192                             l5970 16D2  
                           l5962 16C8                             l5954 16C0                             l5946 16A6  
                           l5938 1692                             l5796 46A2                             l5884 2C96  
                           l5876 2C72                             l5868 2C26                             l4996 387C  
                           l5892 31A6                             l5980 16F4                             l5972 16D4  
                           l5964 16CA                             l5956 16C2                             l5948 16AE  
                           l5798 46B2                             l5886 2CB0                             l5878 2C74  
                           l4998 389E                             l5894 31B2                             l5990 171C  
                           l5982 16FC                             l5974 16D6                             l5966 16CC  
                           l5958 16C4                             l5896 31C2                             l5888 317E  
                           l5992 171E                             l5984 1706                             l5976 16D8  
                           l5968 16D0                             l5898 31E0                             l5994 1720  
                           l5986 170E                             l5978 16F2                             l5996 172C  
                           l5988 171A                             l5998 172E                             STR_1 0EA2  
                           STR_2 0EB7                             STR_3 0E8A                             STR_4 0EC3  
                           STR_5 0E01                             STR_6 0EC3                             STR_7 0E3B  
                           STR_8 0EC3                             STR_9 0E56                             u3000 4158  
                           u3001 4154                             u3010 424C                             u3011 4248  
                           u3020 4964                             u3100 1BFA                             u3021 4960  
                           u3101 1BF6                             u3030 4BC6                             u3110 1C36  
                           u3031 4BC2                             u3111 1C32                             u4000 26CA  
                           u3200 1D50                             u3120 1C44                             u3040 1B5E  
                   _BAUD4CONbits 0EE9                             u4001 26C6                             u3201 1D4C  
                           u3121 1C40                             u3041 1B5A                             u4010 26E0  
                           u3210 1D82                             u3130 1CB2                             u3050 1B70  
                           u4011 26DC                             u3211 1D7E                             u3131 1CAE  
                           u3051 1B6C                             u2500 3E00                             u4020 26F4  
                           u4100 379E                             u3300 1ECA                             u3220 1D90  
                           u3140 1CCA                             u3060 1B80                             u2501 3DFC  
                           u4021 26F0                             u4101 379A                             u3301 1EC6  
                           u3221 1D8C                             u3141 1CC4                             u3061 1B7C  
                           u2510 3E26                             u4030 270E                             u4110 37DC  
                           u3310 1EDA                             u3230 1DAE                             u3150 1CCC  
                           u3070 1BC2                             u2511 3E22                             u4031 270A  
                           u4111 37D8                             u3311 1ED6                             u3231 1DAA  
                           u3071 1BBE                             u2600 3BEA                             u2520 3E58  
                           u5000 301C                             u4040 2756                             u4120 37FA  
                           u3400 1FC2                             u3320 1EEC                             u3240 1DE6  
                           u3160 1CF4                             u3080 1BD8                             u4200 1300  
                           u2601 3BE6                             u2521 3E54                             u4041 2752  
                           u4121 37F6                             u3401 1FBE                             u3321 1EE8  
                           u3241 1DE2                             u3161 1CF0                             u3081 1BD4  
                           u4201 12FC                             u2610 3C04                             u5010 3036  
                           u4050 2786                             u4130 381A                             u3410 1FD4  
                           u3330 1F02                             u3250 1E2C                             u3170 1D12  
                           u3090 1BEA                             u4210 139A                             _T2PR 0FBC  
                           u2611 3C00                             u5011 3032                             u4051 2782  
                           u4131 3816                             u3411 1FD0                             u3331 1EFE  
                           u3251 1E28                             u3171 1D0E                             u3091 1BE6  
                           u4211 1396                             u2540 3B26                             u2620 3C1E  
                           u2700 49DC                             u5020 304C                             u5100 2F24  
                           u4060 27B4                             u4140 386A                             u3500 20E8  
                           u3420 1FF0                             u3340 1F18                             u3260 1E62  
                           u3180 1D32                             u4220 13E2                             u4300 34EE  
                           u2541 3B22                             u2621 3C1A                             u2701 49D8  
                           u5021 3048                             u5101 2F20                             u4061 27B0  
                           u4141 3866                             u3501 20E4                             u3421 1FEC  
                           u3341 1F14                             u3261 1E5E                             u3181 1D2E  
                           u4221 13DE                             u4301 34EA                             u2550 3B40  
                           u2630 3C3C                             u5030 30EE                             u5110 2F48  
                           u2710 4268                             u4070 3D64                             u3510 2262  
                           u3430 201E                             u3350 1F2C                             u3270 1E72  
                           u3190 1D40                             u4230 1470                             u4150 1162  
                           u4310 3518                             u2551 3B3C                             u2631 3C38  
                           u5031 30EA                             u5111 2F44                             u2711 4264  
                           u4071 3D60                             u3431 201A                             u3351 1F28  
                           u3271 1E6E                             u3191 1D3C                             u4231 146C  
                           u4151 115E                             u4311 3514                             u2560 3B66  
                           u2640 3C52                             u5040 3100                             u5120 2F7C  
                           u5200 2CB0                             u2720 4286                             u4400 3570  
                           u4080 3DA2                             u3600 23D6                             u3520 22BC  
                           u3440 2030                             u3360 1F46                             u3280 1E9E  
                           u4240 1532                             u4160 1194                             u4320 352E  
                           u2561 3B62                             u2641 3C4E                             u5041 30FC  
                           u5121 2F78                             u5201 2CAC                             u2721 4282  
                           u4401 356C                             u4081 3D9E                             u3601 23D2  
                           u3521 22B8                             u3441 202C                             u3361 1F42  
                           u3281 1E9A                             u4241 152E                             u4161 1190  
                           u4321 352A                             u2570 3B84                             u2650 3C76  
                           u2490 3DF0                             u5050 3110                             u5130 2F9C  
                           u2730 42A2                             u4410 3592                             u4090 3DD6  
                           u3610 2410                             u3530 22DC                             u3450 2040  
                           u3370 1F80                             u3290 1EAE                             u4250 1606  
                           u4170 11FE                             u4330 3558                             u5210 31A6  
                           u2571 3B80                             u2651 3C72                             u2491 3DEC  
                           u5051 310C                             u5131 2F98                             u2731 429E  
                           u4411 358E                             u4091 3DD2                             u3611 240C  
                           u3531 22D8                             u3515 2258                             u3451 203C  
                           u3371 1F7C                             u3291 1EAA                             u4251 1602  
                           u4171 11FA                             u4331 3554                             u5211 31A2  
                           u2580 3BA0                             u5060 312A                             u5140 46D2  
                           u4260 4344                             u4500 28A6                             u4420 35CC  
                           u3540 22EE                             u3460 2080                             u3380 1F92  
                           u3620 3680                             u3700 2CEA                             u4180 1264  
                           u4340 389E                             u5220 31E0                             u5300 1AAE  
                           u2581 3B9C                             u5061 3126                             u5141 46CE  
                           u4261 4340                             u4501 28A2                             u4421 35C8  
                           u3541 22EA                             u3461 207C                             u3381 1F8E  
                           u3621 367C                             u3701 2CE6                             u4181 1260  
                           u4341 389A                             u5221 31DC                             u5301 1AAA  
                           u2590 3BC6                             u5070 313A                             u5150 2AB8  
                           u4510 28BC                             u4430 35EE                             u3550 231C  
                           u3470 2092                             u3390 1FA2                             u3630 36B4  
                           u3710 2D46                             u4190 1296                             u4350 38CC  
                           u4270 344C                             u5230 31FE                             u5310 1ABC  
                           u2591 3BC2                             u5071 3136                             u5151 2AB4  
                           u4511 28B8                             u4431 35EA                             u3551 2318  
                           u3471 208E                             u3391 1F9E                             u3711 2D42  
                           u4191 1292                             u4351 38C8                             u4271 3448  
                           u5231 31FA                             u5311 1AB8                             u3800 4706  
                           u5080 314A                             u2840 3CB6                             u5160 2B14  
                           u4520 2908                             u4440 3616                             u3560 2332  
                           u3480 20A2                             u3640 36E2                             u3720 2D9C  
                           u4360 38EE                             u4280 349A                             u5240 327A  
                           u5320 1AD0                             u3801 46FE                             u5081 3146  
                           u2841 3CB2                             u5161 2B10                             u4521 2904  
                           u4441 3612                             u3561 232E                             u3481 209E  
                           u3641 36DE                             u3721 2D98                             u4361 38EA  
                           u4281 3496                             u5241 3276                             u5321 1ACC  
                           u2930 4B00                             u2850 3D2C                             u5090 2EA4  
                           u5170 2B74                             u4530 291E                             u4450 3648  
                           u3570 2346                             u3490 20D8                             u3650 36F6  
                           u3730 2DE6                             u4370 391C                             u4290 34C4  
                           u5250 32D6                             u2931 4AFC                             u2851 3D28  
                           u5091 2EA0                             u5171 2B70                             u4531 291A  
                           u4451 3644                             u3571 2342                             u3491 20D4  
                           u3651 36F2                             u3635 36AA                             u3731 2DE2  
                           u4371 3918                             u4291 34C0                             u5251 32D2  
                           u2940 4B16                             u5180 2BD4                             u2860 3302  
                           u4540 296A                             u4460 27DE                             u4380 42E0  
                           u3900 2510                             u3580 2360                             u3660 371E  
                           u3740 2E04                             u3820 3B12                             u5260 18E2  
                           u2941 4B12                             u5181 2BD0                             u2861 32FE  
                           u4541 2966                             u4461 27DA                             u4381 42DC  
                           u3901 250C                             u3581 235C                             u3661 371A  
                           u3741 2E00                             u3821 3B0E                             u5261 18DE  
                           u3830 4A64                             u5190 2C3C                             u2870 33BE  
                           u2950 4068                             u4550 2980                             u4470 27F4  
                           u4390 431A                             u3910 2550                             u3590 23A8  
                           u3670 373E                             u3750 2E14                             u5270 1A38  
                           u3831 4A60                             u5191 2C38                             u2871 33BA  
                           u2951 4064                             u4551 297C                             u4471 27F0  
                           u4391 4316                             u3911 254C                             u3591 23A4  
                           u3671 373A                             u3751 2E10                             u5407 3952  
                           u5271 1A34                             u2960 4086                             u4560 29CC  
                           u4480 2844                             u3920 25C6                             u3840 2448  
                           u3680 374E                             u3760 2E22                             u5280 1A82  
                           u2961 4082                             u4561 29C8                             u4481 2840  
                           u3921 25C2                             u3841 2444                             u3681 374A  
                           u3761 2E1E                             u5417 3AE8                             u5281 1A7E  
                           u3818 4708                             u2970 40C4                             u4570 29E2  
                           u4490 285A                             u3930 25E8                             u3850 245A  
                           u3770 2E5C                             u3690 2CDC                             u5290 1A98  
                           u2971 40C0                             u5507 4A18                             u4571 29DE  
                           u4491 2856                             u3931 25E4                             u3851 2456  
                           u3771 2E58                             u3691 2CD8                             u5427 4774  
                           u5291 1A94                             u5347 16E4                             u2980 40DA  
                           u4580 2A2E                             u3940 2612                             u3860 246A  
                           u3780 2E6A                             u2981 40D6                             u5517 485C  
                           u4581 2A2A                             u3941 260E                             u3861 2466  
                           u3781 2E66                             u5437 3970                             u5357 1910  
                           u2990 41D6                             u4590 2A44                             u3950 2636  
                           u3870 24AE                             u5607 4222                             u2991 41D2  
                           u5527 4134                             u4591 2A40                             u3951 2632  
                           u3871 24AA                             u5447 39A0                             u5367 1934  
                           u3960 264C                             u3880 24C0                             u5617 497A  
                           u5537 4896                             u3961 2648                             u3881 24BC  
                           u5457 39D4                             u5377 195A                             u3970 266A  
                           u3890 24D0                             u5627 2AC4                             u5547 48D0  
                           u3971 2666                             u3891 24CC                             u5467 3A08  
                           u5387 1A50                             u4940 475C                             u3980 268A  
                           u4941 4758                             u5637 2B20                             u5557 490A  
                           u5477 47AE                             u3981 2686                             u5397 346A  
                           u4950 3F38                             u3990 269C                             u4951 3F34  
                           u5647 2B80                             u5567 41B2                             u5487 47E8  
                           u3991 2698                             u4960 3F56                             u4961 3F52  
                           u5657 2BE4                             u5577 4940                             u5497 4822  
                           u4970 3F9C                             u4971 3F98                             u5667 2C4C  
                           u5587 4A7C                             u4980 3FAC                             u4981 3FA8  
                           u5677 2CBA                             u5597 40A4                             u4990 301A  
                           u5687 4A48                             u4991 3014                             abs@a 0008  
                           _dbuf 0196                             _main 1658                             _dtoa 3006  
           convert_rgb2hue@cCurr 004D                             _prec 00C4                             _time 0200  
                           pad@i 0016                             pad@p 0013                             fsr1h 0FE2  
                           fsr2h 0FDA                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005D                             _stop 404E  
            fullSpeedAhead@power 004F                             prodh 0FF4                             prodl 0FF3  
                           start 003A                 __end_of_ADC_init 4BB4                  ___fldiv@new_exp 003A  
         __end_of_color_read_Red 43D6                     ___param_bank 0000                   movePink@factor 0021  
                 reading_hue@hue 0054                            ??_abs 000A                            ??_pad 0015  
                  ___fltol@sign1 004A                  __end_of___aldiv 366A                  __end_of___fladd 2004  
                          ?_main 0001                            ?_dtoa 0018                            _ADPCH 0F5F  
                __end_of___fldiv 27C8                  __end_of___awdiv 3BD8                            STR_10 0EC3  
                          STR_11 0E1E                            STR_12 0EC3                            STR_13 0E71  
                          STR_14 0EC3                  __end_of___awmod 3C88                  __end_of___flmul 242E  
                __end_of___flsub 450C                  __end_of___fltol 3770                            ?_stop 0014  
                ___awdiv@divisor 0004                  __end_of___lwdiv 42C2                            i1l626 0032  
                ___awdiv@counter 0006                ??_convert_rgb2hue 004E                     vfpfcnvrt@fmt 0024  
                          _TMR0H 0FD4                            _TMR0L 0FD3              ___lmul@multiplicand 0006  
                __end_of_left135 4616          __end_of_sendCharSerial4 4BCC       __end_of_I2C_2_Master_Start 4BEC  
     __end_of_I2C_2_Master_Write 4BD8                            _flags 00C6              read_prec_or_width@c 000A  
            read_prec_or_width@n 000B                            _fputc 3DE0                            _fputs 471E  
                          pad@fp 0010                            _width 00C2                            _putch 4BF6  
                          dtoa@d 0019                            dtoa@i 0021                            dtoa@p 001D  
                __end_of_right90 4592                            dtoa@s 0020                            dtoa@w 001E  
                   ?_reading_hue 0050                  __end_of_moveRed 480C                            tablat 0FF5  
                __end_of_turn180 469A                            ttemp5 005E                            ttemp6 0061  
                          ttemp7 0065                            status 0FD8                            wtemp8 005E  
                __end_of_sprintf 49CE            convert_rgb2hue@redmax 0064          __end_of_color_read_Blue 44C6  
          _I2C_2_Master_RepStart 4BEC   turn180@delay_after_calibration 001D                  ?_color_read_Red 0006  
                __initialization 450C                     __end_of_main 1B44                     __end_of_dtoa 317E  
                   __end_of_stop 40DC            __end_of_moveLightBlue 48BA                    main@clear_max 00B6  
                _get16bitTMR0val 3E8A                           ??_main 00AC                           ??_dtoa 001B  
                         ??_stop 0016                    __activetblptr 0003       __end_of_read_prec_or_width 3D36  
                _reverseStraight 3874                     ?_setMotorPWM 000F                           ?_fputc 0002  
                         ?_fputs 000A                           _ADRESH 0F64                           _CCPR1H 0FAA  
                         _CCPR2H 0FA6                           _CCPR3H 0F25                           _CCPR4H 0F21  
               ___awdiv@dividend 0002                 __end_of_backHalf 4A96                           ?_putch 0001  
                         _RC0PPS 0E62                           _RC4REG 0EE3                           _RE2PPS 0E74  
                         _RD5PPS 0E6F                           _RC7PPS 0E69                           _RE4PPS 0E76  
                         _RD6PPS 0E70                           i1l3580 002E                           i1l3578 001E  
                         _RG6PPS 0E88                    vfpfcnvrt@done 002C         __end_of_color_click_init 499A  
                         _RX4PPS 0E15                           _TX4REG 0EE4                 __end_of___xxtofl 2E7E  
    convert_rgb2hue@greencurrent 0068                 __end_of_decision 2A84                           _LowISR 0018  
                  ??_Timer0_init 0002                    main@path_step 00BE                     _CCPTMRS0bits 0FAD  
                   vfprintf@cfmt 0031                           ___flge 3770                           ___fleq 3D36  
                         ___lmul 42C2                        ??___aldiv 0016                        ??___fladd 000A  
                         ___wmul 4B18                        ??___fldiv 0031                 backOneAndHalf@mL 0019  
                      ??___awdiv 0006                 backOneAndHalf@mR 001A                        ??___awmod 0006  
                      ??___flmul 0018                           _action 013C                        ??___flsub 001A  
                      ??___fltol 0046                        ??___lwdiv 000C                           _left90 4616  
           read_prec_or_width@ap 0009                     ?_reverseTurn 001F                           clear_0 4524  
                         clear_1 4530                           clear_2 453C                 ___awdiv@quotient 0008  
                ___awmod@divisor 0004                           _motorL 00E7                           _motorR 00DE  
                         isa$std 0001                  ___awmod@counter 0006                        ??_left135 001D  
             send2USART@hue_char 0060                           pad@buf 0011                 __end_of_right135 45D4  
                         dtoa@fp 0018                 __end_of_moveBlue 492E                 __end_of_movePink 4846  
                         fputc@c 0002                           fputs@c 000D                           fputs@i 000E  
                         fputs@s 000A                        ??_right90 001D                     __mediumconst 0000  
                      ??_moveRed 0023                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                        ?_ADC_init 0001                 ?_sendCharSerial4 0001  
         convert_rgb2hue@bluemax 0074                           putch@c 0001                 __end_of_vfprintf 46DC  
                      ??_turn180 001D                           stop@mL 0014                           stop@mR 0015  
              ??_initDCmotorsPWM 0004                        ??_sprintf 0038              moveLightBlue@factor 0021  
               __end_of_turnLeft 41D8         get16bitTMR0val@path_step 001C                       ___flge@ff1 0002  
                     ___flge@ff2 0006                     ___xxtofl@arg 000C                     ___xxtofl@exp 000B  
                   ___xxtofl@val 0002                       ___fleq@ff1 0002                       ___fleq@ff2 0006  
                fullSpeedBack@mL 0014                  fullSpeedBack@mR 0015                       __accesstop 0060  
        __end_of__initialization 4546               _calibration_colors 2A84         __end_of_color_read_Clear 4476  
       __end_of_color_read_Green 4426   left135@delay_after_calibration 001D           ?_I2C_2_Master_RepStart 0001  
                 _backOneAndHalf 4A02                    ___rparam_used 0001                       ___fltol@f1 0042  
               ?_color_read_Blue 0006              ?_calibration_colors 004E                   __pcstackCOMRAM 0001  
        __end_of_get16bitTMR0val 3F28                    _fullSpeedBack 41D8                     __pidataBANK0 4BF8  
                  __end_of_fputc 3E8A                    __end_of_fputs 475E                    __end_of_putch 4BF8  
                  turn180@factor 001B          __end_of_reverseStraight 3960              __end_of_Timer0_init 4AC6  
               reading_hue@cCurr 0050                    right90@factor 001B             ??_calibration_colors 004F  
                     ??_ADC_init 0002                   main@clear_norm 00C0                       backHalf@mL 0019  
                     backHalf@mR 001A                          ??_fputc 0005                          ??_fputs 000D  
                        ??_putch 0002                       __pbssBANK0 00C2                       __pbssBANK1 0100  
                     __pbssBANK2 0200               reverseTurn@time_ms 0022           __end_of_backOneAndHalf 4A34  
         get16bitTMR0val@time_ms 0022           calibration_colors@cCal 004E                          ?_LowISR 0001  
              _color_writetoaddr 4B3E                     _T2CLKCONbits 0FBF                   ?_fullSpeedBack 0014  
                _convert_rgb2hue 0EC6                          ?___flge 0002                          ?___fleq 0002  
             ?_color_writetoaddr 0004                          ?___lmul 0002                    _customDelayMs 492E  
                        ?___wmul 0002                          ?_left90 0019            reverseTurn@actionStep 0021  
                 ___lmul@product 000A                        ?_backHalf 0019              ??_color_writetoaddr 0005  
                      ?___xxtofl 0002              _convert_rgb2hue$370 008C              _convert_rgb2hue$367 0080  
            _convert_rgb2hue$368 0084              _convert_rgb2hue$369 0088                        ?_decision 0025  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5                          _SSP2ADD 0ED6  
                        _SSP2BUF 0ED5                      moveGreen@mL 001F                      moveGreen@mR 0020  
                ?_backOneAndHalf 0019           color_writetoaddr@value 0004                 ??_color_read_Red 0008  
      __end_of_color_writetoaddr 4B5E                        _ADREFbits 0F58                        ?_right135 0019  
             _I2C_2_Master_Start 4BE2                       _initUSART4 4B5E               _I2C_2_Master_Write 4BCC  
                      ?_moveBlue 001F                main@clear_current 00BA                          __Hparam 0000  
                      ?_movePink 001F                          __Lparam 0000                color_read_Red@tmp 000B  
                moveWhite@factor 0021                      moveWhite@mL 001F                      moveWhite@mR 0020  
      customDelayMs@milliseconds 0002                      _Timer0_init 4A96                   ?_customDelayMs 0002  
        sendStringSerial4@string 0003                 ?_get16bitTMR0val 001C                          ___aldiv 355E  
                        ___fladd 1B44                          ___fldiv 242E                          ___awdiv 3B14  
                        ___awmod 3BD8                          ___flmul 2004                          ___flsub 44C6  
                        ___fltol 366A              ?_I2C_2_Master_Start 0001                          ___lwdiv 424E  
            ?_I2C_2_Master_Write 0001                        ?_vfprintf 002E                     __psmallconst 0E00  
                        __pcinit 450C                       ??_backHalf 001B                __end_of_logAction 4386  
                        __ramtop 0E00                 ?_reverseStraight 0051                       _send2USART 4B7C  
                      ?_turnLeft 0014                          _left135 45D4                          __ptext0 1658  
                        __ptext1 317E                          __ptext2 343C                          __ptext3 3874  
                        __ptext4 3A4A                          __ptext5 475E                          __ptext6 3960  
                        __ptext7 0EC6                          __ptext8 2CCA                          __ptext9 366A  
                      _T2CONbits 0FBD   right90@delay_after_calibration 001D            read_prec_or_width@fmt 0008  
                     ??___xxtofl 0006                 ___awmod@dividend 0002                       ??_decision 002B  
         reverseStraight@delayMs 0059                 ___aldiv@dividend 000E                          _right90 4550  
                      _T2HLTbits 0FBE                          _moveRed 47D2                    _RxBufWriteCnt 00C9  
                        _turn180 4658                          _sprintf 499A                          main@hue 00B4  
           ??_I2C_2_Master_Start 0003             ??_I2C_2_Master_Write 0003             end_of_initialization 4546  
              __end_of_moveGreen 48F4           reverseStraight@time_ms 0053                __end_of_moveWhite 4798  
                        fputc@fp 0004          __end_of_convert_rgb2hue 1658                          fputs@fp 000C  
              ?_color_click_init 0001               _read_prec_or_width 3C88                       _moveOrange 4846  
               moveOrange@factor 0021                       ??_right135 001D                       _moveYellow 4798  
                ??_fullSpeedBack 0016                       ??_moveBlue 0023               ??_color_click_init 0006  
        convert_rgb2hue@clearmax 007C                       ??_movePink 0023                 _colorCalibration 00D4  
            returnHome@path_step 0062                __end_of_vfpfcnvrt 3006                 ___aldiv@quotient 0018  
                        postdec2 0FDD              ?_read_prec_or_width 0008                   right135@factor 001B  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
               vfpfcnvrt@convarg 0028                       ??_vfprintf 0031          convert_rgb2hue@greenmax 006C  
                   _colorCurrent 00CA                       _returnHome 317E                  _initDCmotorsPWM 3FBE  
                     ??_turnLeft 0016                        _PORTFbits 0F8E               setMotorPWM@negDuty 0013  
                  moveRed@factor 0021                __end_of_turnRight 415A                      ___fladd@grs 0011  
                  ___xxtofl@sign 000A                      returnHome@i 006D                        _TRISAbits 0F81  
             setMotorPWM@posDuty 0012                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 convert_rgb2hue@b 00A8             ??_read_prec_or_width 000A  
               convert_rgb2hue@g 00A4                      ___fldiv@grs 003C                 convert_rgb2hue@r 00A0  
                    ___fldiv@rem 0035                 fullSpeedAhead@mL 004C                 fullSpeedAhead@mR 004D  
       color_writetoaddr@address 0005          ??_I2C_2_Master_RepStart 0003                      ___flmul@grs 001D  
                     main@factor 00B2    left90@delay_after_calibration 001D                      _CCP1CONbits 0FAB  
              ?_color_read_Clear 0006                     _EUSART4RXbuf 0182                     _EUSART4TXbuf 0100  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0006       convert_rgb2hue@bluecurrent 0070  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
      sendCharSerial4@charToSend 0002                  ??_customDelayMs 0004               ??_color_read_Clear 0008  
             ??_color_read_Green 0008                   __end_of_LowISR 003A        convert_rgb2hue@redcurrent 0060  
                 __end_of___flge 3874                   __end_of___fleq 3DE0                   _fullSpeedAhead 3A4A  
                 __end_of___lmul 432C                      vfpfcnvrt@ap 0025                      vfpfcnvrt@cp 002D  
                    vfpfcnvrt@fp 0023                   __end_of___wmul 4B3E                   __end_of_left90 4658  
                    ?_send2USART 004C              color_read_Clear@tmp 000B              start_initialization 450C  
                    __end_of_abs 4A02                      __end_of_pad 3FBE                    _TxBufWriteCnt 005C  
               ?_convert_rgb2hue 004C                      ?_moveOrange 001F                      ?_moveYellow 001F  
            color_read_Green@tmp 000B                         ??_LowISR 0001          __end_of_initDCmotorsPWM 404E  
                    vfprintf@fmt 002F           __end_of_fullSpeedAhead 3B14                         ??___flge 000A  
                       ??___fleq 000A                         ??___lmul 000A                         ??___wmul 0006  
                       ??_left90 001D                      __pdataBANK0 00F0                      ?_returnHome 0060  
                  _moveLightBlue 4880                        ___fladd@a 0006                        ___fladd@b 0002  
                      ___fldiv@a 002D                        ___fldiv@b 0029                        ___flmul@a 0014  
                      ___flmul@b 0010                      __pbssCOMRAM 005B                        ___flsub@a 0016  
                      ___flsub@b 0012                    __pcstackBANK0 0060                 ??_backOneAndHalf 001B  
              reverseStraight@mL 0051                reverseStraight@mR 0052            returnHome@action_turn 006C  
                  ??_reading_hue 0052                reverseTurn@factor 0026                       right135@mL 0019  
                     right135@mR 001A                 ___lwdiv@dividend 0008                        _dtoa$3080 001B  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 004C                         ?___aldiv 000E  
                       ?___fladd 0002                         ?___fldiv 0029                         ?___awdiv 0002  
                       ?___awmod 0002                         ?___flmul 0010                         ?___flsub 0012  
                       ?___fltol 0042                         ?___lwdiv 0008                       moveBlue@mL 001F  
                     moveBlue@mR 0020                   ?_moveLightBlue 001F                      __pintcodelo 0018  
                       ?_left135 0019                     _readingIndex 00C7             I2C_2_Master_Read@ack 0004  
           I2C_2_Master_Read@tmp 0005                      __smallconst 0E00                       movePink@mL 001F  
                     movePink@mR 0020                _I2C_2_Master_Idle 4AF0                        _logAction 432C  
              _I2C_2_Master_Init 4AC6                _I2C_2_Master_Read 46DC                         ?_right90 0019  
              _I2C_2_Master_Stop 4BD8                         ?_moveRed 001F                     _RxBufReadCnt 00C8  
                       _ADC_init 4B9A               ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0010                         ?_turn180 0019  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000C         initDCmotorsPWM@PWMperiod 0002  
                       ?_sprintf 0032                  ___aldiv@divisor 0012                _sendStringSerial4 4A34  
            ??_I2C_2_Master_Idle 0002                  ___aldiv@counter 0016              ??_I2C_2_Master_Init 0002  
            ??_I2C_2_Master_Read 0003                   ___wmul@product 0006                         _LATAbits 0F79  
            ??_I2C_2_Master_Stop 0003                         _LATCbits 0F7B                         _LATEbits 0F7D  
                       _LATGbits 0F7F                         _LATHbits 0F80                         _IPR0bits 0E1F  
                       _PIE0bits 0E29               ?_sendStringSerial4 0003                        _moveGreen 48BA  
                       _PIE4bits 0E2D              __end_of_reading_hue 3A4A                         i1u241_20 002E  
                       i1u241_21 002A                        _moveWhite 475E                      turnRight@mL 0014  
                    turnRight@mR 0015                         _PIR0bits 0E33                   decision@factor 0029  
                       _PIR4bits 0E37                 ?_initDCmotorsPWM 0002                        left135@mL 0019  
                      left135@mR 001A                ??_sendCharSerial4 0002                         _SSP2CON2 0EDA  
            ??_sendStringSerial4 0004                         _SSP2STAT 0ED8                    ??_reverseTurn 0028  
                      _vfpfcnvrt 2E7E                       _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 4B18  
      __end_of_I2C_2_Master_Init 4AF0        __end_of_I2C_2_Master_Read 471E                ___wmul@multiplier 0002  
      __end_of_I2C_2_Master_Stop 4BE2                     setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0003  
                    _ldrReadings 016E                       ?_logAction 0002                        main@white 00B0  
              ??_color_read_Blue 0008                     _TxBufReadCnt 005B                        _turnRight 40DC  
              ___lmul@multiplier 0002        __end_of_sendStringSerial4 4A66                     moveOrange@mL 001F  
                   moveOrange@mR 0020    __end_of_I2C_2_Master_RepStart 4BF6               color_read_Blue@tmp 000B  
            __end_of_setMotorPWM 343C                     ??_initUSART4 0002                       ?_moveGreen 001F  
                     ?_moveWhite 001F                         __Hrparam 0000                    left135@factor 001B  
                     vfprintf@ap 0030                         __Lrparam 0000                       vfprintf@fp 002E  
          __end_of_fullSpeedBack 424E                  ??_moveLightBlue 0023                     moveYellow@mL 001F  
                   moveYellow@mR 0020                       ?_vfpfcnvrt 0023                         _backHalf 4A66  
                   ??_send2USART 004E                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                       _dataFlag 00F0                       sprintf@fmt 0033                         ___xxtofl 2CCA  
                     _T0CON0bits 0FD5                       _T0CON1bits 0FD6      calibration_colors@cal_state 0092  
                       _decision 27C8              __end_of_reverseTurn 355E                        right90@mL 0019  
                      right90@mR 001A                  ___lwdiv@divisor 000A               __end_of_initUSART4 4B7C  
                ___lwdiv@counter 000E                       ?_turnRight 0014                         __ptext10 44C6  
                       __ptext11 1B44                         __ptext20 355E                         __ptext12 2004  
                       __ptext21 27C8                         __ptext13 3770                         __ptext30 4880  
                       __ptext22 4798                         __ptext14 3D36                         __ptext31 45D4  
                       __ptext23 47D2                         __ptext15 242E                         __ptext40 41D8  
                       __ptext32 48BA                         __ptext24 4550                         __ptext16 4B5E  
                       __ptext41 32E8                         __ptext33 4616                         __ptext25 480C  
                       __ptext17 3FBE                         __ptext50 469A                         __ptext42 424E  
                       __ptext34 48F4                         __ptext26 4A02                         __ptext18 3E8A  
                       __ptext51 2E7E                         __ptext43 432C                         __ptext35 4658  
                       __ptext27 4846                         __ptext19 42C2                         __ptext60 3BD8  
                       __ptext52 3C88                         __ptext44 4966                         __ptext36 415A  
                       __ptext28 4592                         __ptext61 3B14                         __ptext53 4B18  
                       __ptext45 4B3E                         __ptext37 492E                         __ptext29 40DC  
                       __ptext70 4BE2                         __ptext62 4A34                         __ptext54 3006  
                       __ptext46 4AC6                         __ptext38 4A66                         __ptext71 4BEC  
                       __ptext63 4BB4                         __ptext55 3F28                         __ptext47 2A84  
                       __ptext39 404E                         __ptext72 46DC                         __ptext64 4386  
                       __ptext56 471E                         __ptext48 4B7C                         __ptext73 4AF0  
                       __ptext65 43D6                         __ptext57 3DE0                         __ptext49 499A  
                       __ptext74 4A96                         __ptext66 4426                         __ptext58 4BF6  
                       __ptext75 4B9A                         __ptext67 4476                         __ptext59 49CE  
                       __ptext68 4BCC                         __ptext69 4BD8                      decision@hue 0025  
                      moveRed@mL 001F                        moveRed@mR 0020                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                      _reading_hue 3960                    reverseTurn@mL 001F  
                  reverseTurn@mR 0020                     ??_moveOrange 0023                       turnLeft@mL 0014  
                     turnLeft@mR 0015                     ??_moveYellow 0023               __end_of_send2USART 4B9A  
                       _right135 4592                         _moveBlue 48F4                         _movePink 480C  
                     turnRight@i 0017            __end_of_customDelayMs 4966                         isa$xinst 0000  
                       left90@mL 0019                         left90@mR 001A                       _RC4STAbits 0EE7  
              returnHome@time_ms 0068                         int$flags 005D                         _vfprintf 469A  
                 moveBlue@factor 0021                     ??_returnHome 0066                         _turnLeft 415A  
right135@delay_after_calibration 001D                        turn180@mL 0019                        turn180@mR 001A  
                    ??_logAction 0008                       _INTCONbits 0FF2                   customDelayMs@i 0005  
             __end_of_moveOrange 4880               __end_of_moveYellow 47D2                      _setMotorPWM 32E8  
              ??_get16bitTMR0val 001E                         intlevel1 0000                        sprintf@ap 0038  
              decision@path_step 0027                ??_reverseStraight 0057                 ??_fullSpeedAhead 004E  
  get16bitTMR0val@combined_value 0026               __end_of_returnHome 32E8                      ??_moveGreen 0023  
               returnHome@factor 0064                        turnLeft@i 0017                      ??_moveWhite 0023  
               moveYellow@factor 0021      convert_rgb2hue@clearcurrent 0078                    send2USART@hue 004C  
                    ??_vfpfcnvrt 0026                      _reverseTurn 343C                  moveGreen@factor 0021  
               _color_click_init 4966                         sprintf@f 0039                         sprintf@s 0032  
                   left90@factor 001B       __end_of_calibration_colors 2CCA                       _SSP2DATPPS 0E1D  
                     _SSP2CLKPPS 0E1C                     ___aldiv@sign 0017                      ??_turnRight 0016  
                  ___fladd@signs 000E                       _TX4STAbits 0EE8                  _sendCharSerial4 4BB4  
                   ___fladd@aexp 000F                     ___fladd@bexp 0010                     returnHome@mL 0060  
                   returnHome@mR 0061  
