

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 01:35:15 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 21/07/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F67K40 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000000                     
   131                           	psect	idataBANK0
   132   0047FC                     __pidataBANK0:
   133                           	callstack 0
   134                           
   135                           ;initializer for _dataFlag
   136   0047FC  01                 	db	1
   137   000000                     _TMR0H	set	4052
   138   000000                     _TX4REG	set	3812
   139   000000                     _RC4STAbits	set	3815
   140   000000                     _SP4BRGH	set	3814
   141   000000                     _LATHbits	set	3968
   142   000000                     _LATFbits	set	3966
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _PORTFbits	set	3982
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _ANSELDbits	set	3751
   154   000000                     _SSP2ADD	set	3798
   155   000000                     _SSP2CON1bits	set	3801
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATEbits	set	3965
   158   000000                     _LATGbits	set	3967
   159   000000                     _LATCbits	set	3963
   160   000000                     _LATDbits	set	3964
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RC4REG	set	3811
   164   000000                     _SP4BRGL	set	3813
   165   000000                     _TX4STAbits	set	3816
   166   000000                     _BAUD4CONbits	set	3817
   167   000000                     _SSP2CON2	set	3802
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _PIE0bits	set	3625
   175   000000                     _PIE4bits	set	3629
   176   000000                     _PIR4bits	set	3639
   177   000000                     _RC0PPS	set	3682
   178   000000                     _RC7PPS	set	3689
   179   000000                     _RD5PPS	set	3695
   180   000000                     _RE2PPS	set	3700
   181   000000                     _RD6PPS	set	3696
   182   000000                     _CCP1CONbits	set	4011
   183   000000                     _CCPTMRS0bits	set	4013
   184   000000                     _T2PR	set	4028
   185   000000                     _T2CONbits	set	4029
   186   000000                     _T0CON0bits	set	4053
   187   000000                     _CCP2CONbits	set	4007
   188   000000                     _CCP3CONbits	set	3878
   189   000000                     _ADREFbits	set	3928
   190   000000                     _CCP4CONbits	set	3874
   191   000000                     _TRISHbits	set	3976
   192   000000                     _TRISCbits	set	3971
   193   000000                     _INTCONbits	set	4082
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _ADPCH	set	3935
   196   000000                     _ADRESH	set	3940
   197   000000                     _ADCON0bits	set	3936
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _TMR0L	set	4051
   201   000000                     _T2CLKCONbits	set	4031
   202   000000                     _T2HLTbits	set	4030
   203   000000                     _PIR0bits	set	3635
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_3:
   210                           
   211                           ; BSR set to: 14
   212   000E01  43                 	db	67	;'C'
   213   000E02  61                 	db	97	;'a'
   214   000E03  6C                 	db	108	;'l'
   215   000E04  69                 	db	105	;'i'
   216   000E05  62                 	db	98	;'b'
   217   000E06  72                 	db	114	;'r'
   218   000E07  61                 	db	97	;'a'
   219   000E08  74                 	db	116	;'t'
   220   000E09  69                 	db	105	;'i'
   221   000E0A  6F                 	db	111	;'o'
   222   000E0B  6E                 	db	110	;'n'
   223   000E0C  20                 	db	32
   224   000E0D  73                 	db	115	;'s'
   225   000E0E  74                 	db	116	;'t'
   226   000E0F  61                 	db	97	;'a'
   227   000E10  74                 	db	116	;'t'
   228   000E11  65                 	db	101	;'e'
   229   000E12  20                 	db	32
   230   000E13  3D                 	db	61	;'='
   231   000E14  20                 	db	32
   232   000E15  67                 	db	103	;'g'
   233   000E16  72                 	db	114	;'r'
   234   000E17  65                 	db	101	;'e'
   235   000E18  65                 	db	101	;'e'
   236   000E19  6E                 	db	110	;'n'
   237   000E1A  20                 	db	32
   238   000E1B  0A                 	db	10
   239   000E1C  0D                 	db	13
   240   000E1D  00                 	db	0
   241   000E1E                     STR_9:
   242                           
   243                           ; BSR set to: 14
   244   000E1E  43                 	db	67	;'C'
   245   000E1F  61                 	db	97	;'a'
   246   000E20  6C                 	db	108	;'l'
   247   000E21  69                 	db	105	;'i'
   248   000E22  62                 	db	98	;'b'
   249   000E23  72                 	db	114	;'r'
   250   000E24  61                 	db	97	;'a'
   251   000E25  74                 	db	116	;'t'
   252   000E26  69                 	db	105	;'i'
   253   000E27  6F                 	db	111	;'o'
   254   000E28  6E                 	db	110	;'n'
   255   000E29  20                 	db	32
   256   000E2A  73                 	db	115	;'s'
   257   000E2B  74                 	db	116	;'t'
   258   000E2C  61                 	db	97	;'a'
   259   000E2D  74                 	db	116	;'t'
   260   000E2E  65                 	db	101	;'e'
   261   000E2F  20                 	db	32
   262   000E30  3D                 	db	61	;'='
   263   000E31  20                 	db	32
   264   000E32  20                 	db	32
   265   000E33  61                 	db	97	;'a'
   266   000E34  6D                 	db	109	;'m'
   267   000E35  62                 	db	98	;'b'
   268   000E36  69                 	db	105	;'i'
   269   000E37  65                 	db	101	;'e'
   270   000E38  6E                 	db	110	;'n'
   271   000E39  74                 	db	116	;'t'
   272   000E3A  00                 	db	0
   273   000E3B                     STR_5:
   274                           
   275                           ; BSR set to: 14
   276   000E3B  43                 	db	67	;'C'
   277   000E3C  61                 	db	97	;'a'
   278   000E3D  6C                 	db	108	;'l'
   279   000E3E  69                 	db	105	;'i'
   280   000E3F  62                 	db	98	;'b'
   281   000E40  72                 	db	114	;'r'
   282   000E41  61                 	db	97	;'a'
   283   000E42  74                 	db	116	;'t'
   284   000E43  69                 	db	105	;'i'
   285   000E44  6F                 	db	111	;'o'
   286   000E45  6E                 	db	110	;'n'
   287   000E46  20                 	db	32
   288   000E47  73                 	db	115	;'s'
   289   000E48  74                 	db	116	;'t'
   290   000E49  61                 	db	97	;'a'
   291   000E4A  74                 	db	116	;'t'
   292   000E4B  65                 	db	101	;'e'
   293   000E4C  3D                 	db	61	;'='
   294   000E4D  20                 	db	32
   295   000E4E  62                 	db	98	;'b'
   296   000E4F  6C                 	db	108	;'l'
   297   000E50  75                 	db	117	;'u'
   298   000E51  65                 	db	101	;'e'
   299   000E52  20                 	db	32
   300   000E53  0A                 	db	10
   301   000E54  0D                 	db	13
   302   000E55  00                 	db	0
   303   000E56                     STR_7:
   304                           
   305                           ; BSR set to: 14
   306   000E56  43                 	db	67	;'C'
   307   000E57  61                 	db	97	;'a'
   308   000E58  6C                 	db	108	;'l'
   309   000E59  69                 	db	105	;'i'
   310   000E5A  62                 	db	98	;'b'
   311   000E5B  72                 	db	114	;'r'
   312   000E5C  61                 	db	97	;'a'
   313   000E5D  74                 	db	116	;'t'
   314   000E5E  69                 	db	105	;'i'
   315   000E5F  6F                 	db	111	;'o'
   316   000E60  6E                 	db	110	;'n'
   317   000E61  20                 	db	32
   318   000E62  73                 	db	115	;'s'
   319   000E63  74                 	db	116	;'t'
   320   000E64  61                 	db	97	;'a'
   321   000E65  74                 	db	116	;'t'
   322   000E66  65                 	db	101	;'e'
   323   000E67  20                 	db	32
   324   000E68  3D                 	db	61	;'='
   325   000E69  20                 	db	32
   326   000E6A  20                 	db	32
   327   000E6B  77                 	db	119	;'w'
   328   000E6C  68                 	db	104	;'h'
   329   000E6D  69                 	db	105	;'i'
   330   000E6E  74                 	db	116	;'t'
   331   000E6F  65                 	db	101	;'e'
   332   000E70  00                 	db	0
   333   000E71                     STR_11:
   334                           
   335                           ; BSR set to: 14
   336   000E71  43                 	db	67	;'C'
   337   000E72  41                 	db	65	;'A'
   338   000E73  4C                 	db	76	;'L'
   339   000E74  49                 	db	73	;'I'
   340   000E75  42                 	db	66	;'B'
   341   000E76  52                 	db	82	;'R'
   342   000E77  41                 	db	65	;'A'
   343   000E78  54                 	db	84	;'T'
   344   000E79  49                 	db	73	;'I'
   345   000E7A  4F                 	db	79	;'O'
   346   000E7B  4E                 	db	78	;'N'
   347   000E7C  20                 	db	32
   348   000E7D  43                 	db	67	;'C'
   349   000E7E  4F                 	db	79	;'O'
   350   000E7F  4D                 	db	77	;'M'
   351   000E80  50                 	db	80	;'P'
   352   000E81  4C                 	db	76	;'L'
   353   000E82  45                 	db	69	;'E'
   354   000E83  54                 	db	84	;'T'
   355   000E84  45                 	db	69	;'E'
   356   000E85  44                 	db	68	;'D'
   357   000E86  20                 	db	32
   358   000E87  0A                 	db	10
   359   000E88  0D                 	db	13
   360   000E89  00                 	db	0
   361   000E8A                     STR_1:
   362                           
   363                           ; BSR set to: 14
   364   000E8A  43                 	db	67	;'C'
   365   000E8B  61                 	db	97	;'a'
   366   000E8C  6C                 	db	108	;'l'
   367   000E8D  69                 	db	105	;'i'
   368   000E8E  62                 	db	98	;'b'
   369   000E8F  72                 	db	114	;'r'
   370   000E90  61                 	db	97	;'a'
   371   000E91  74                 	db	116	;'t'
   372   000E92  69                 	db	105	;'i'
   373   000E93  6F                 	db	111	;'o'
   374   000E94  6E                 	db	110	;'n'
   375   000E95  20                 	db	32
   376   000E96  73                 	db	115	;'s'
   377   000E97  74                 	db	116	;'t'
   378   000E98  61                 	db	97	;'a'
   379   000E99  74                 	db	116	;'t'
   380   000E9A  65                 	db	101	;'e'
   381   000E9B  20                 	db	32
   382   000E9C  3D                 	db	61	;'='
   383   000E9D  20                 	db	32
   384   000E9E  72                 	db	114	;'r'
   385   000E9F  65                 	db	101	;'e'
   386   000EA0  64                 	db	100	;'d'
   387   000EA1  00                 	db	0
   388   000EA2                     
   389                           ; BSR set to: 14
   390   000EA2  56                 	db	86	;'V'
   391   000EA3  6F                 	db	111	;'o'
   392   000EA4  6C                 	db	108	;'l'
   393   000EA5  74                 	db	116	;'t'
   394   000EA6  61                 	db	97	;'a'
   395   000EA7  67                 	db	103	;'g'
   396   000EA8  65                 	db	101	;'e'
   397   000EA9  20                 	db	32
   398   000EAA  3D                 	db	61	;'='
   399   000EAB  20                 	db	32
   400   000EAC  25                 	db	37
   401   000EAD  64                 	db	100	;'d'
   402   000EAE  2E                 	db	46
   403   000EAF  25                 	db	37
   404   000EB0  30                 	db	48	;'0'
   405   000EB1  32                 	db	50	;'2'
   406   000EB2  64                 	db	100	;'d'
   407   000EB3  2C                 	db	44
   408   000EB4  20                 	db	32
   409   000EB5  20                 	db	32
   410   000EB6  00                 	db	0
   411   000EB7                     STR_14:
   412                           
   413                           ; BSR set to: 14
   414   000EB7  68                 	db	104	;'h'
   415   000EB8  75                 	db	117	;'u'
   416   000EB9  65                 	db	101	;'e'
   417   000EBA  3D                 	db	61	;'='
   418   000EBB  25                 	db	37
   419   000EBC  30                 	db	48	;'0'
   420   000EBD  33                 	db	51	;'3'
   421   000EBE  64                 	db	100	;'d'
   422   000EBF  2C                 	db	44
   423   000EC0  20                 	db	32
   424   000EC1  20                 	db	32
   425   000EC2  00                 	db	0
   426   000EC3                     STR_2:
   427                           
   428                           ; BSR set to: 14
   429   000EC3  2E                 	db	46
   430   000EC4  00                 	db	0
   431   000EC5  00                 	db	0	; dummy byte at the end
   432   000000                     
   433                           ; #config settings
   434                           
   435                           	psect	cinit
   436   00410E                     __pcinit:
   437                           	callstack 0
   438   00410E                     start_initialization:
   439                           	callstack 0
   440   00410E                     __initialization:
   441                           	callstack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (1 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445   00410E  0EFC               	movlw	low __pidataBANK0
   446   004110  6EF6               	movwf	tblptrl,c
   447   004112  0E47               	movlw	high __pidataBANK0
   448   004114  6EF7               	movwf	tblptrh,c
   449   004116  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450   004118  6EF8               	movwf	tblptru,c
   451   00411A  0009               	tblrd		*+	;fetch initializer
   452   00411C  CFF5 F0F7          	movff	tablat,__pdataBANK0
   453                           
   454                           ; Clear objects allocated to BANK2 (100 bytes)
   455   004120  EE02  F000         	lfsr	0,__pbssBANK2
   456   004124  0E64               	movlw	100
   457   004126                     clear_0:
   458   004126  6AEE               	clrf	postinc0,c
   459   004128  06E8               	decf	wreg,f,c
   460   00412A  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK1 (162 bytes)
   463   00412C  EE01  F000         	lfsr	0,__pbssBANK1
   464   004130  0EA2               	movlw	162
   465   004132                     clear_1:
   466   004132  6AEE               	clrf	postinc0,c
   467   004134  06E8               	decf	wreg,f,c
   468   004136  E1FD               	bnz	clear_1
   469                           
   470                           ; Clear objects allocated to BANK0 (75 bytes)
   471   004138  EE00  F0AC         	lfsr	0,__pbssBANK0
   472   00413C  0E4B               	movlw	75
   473   00413E                     clear_2:
   474   00413E  6AEE               	clrf	postinc0,c
   475   004140  06E8               	decf	wreg,f,c
   476   004142  E1FD               	bnz	clear_2
   477                           
   478                           ; Clear objects allocated to COMRAM (3 bytes)
   479   004144  6A57               	clrf	(__pbssCOMRAM+2)& (0+255),c
   480   004146  6A56               	clrf	(__pbssCOMRAM+1)& (0+255),c
   481   004148  6A55               	clrf	__pbssCOMRAM& (0+255),c
   482   00414A                     end_of_initialization:
   483                           	callstack 0
   484   00414A                     __end_of__initialization:
   485                           	callstack 0
   486   00414A  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   487   00414C  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   488   00414E  0100               	movlb	0
   489   004150  EF6E  F011         	goto	_main	;jump to C main() function
   490                           
   491                           	psect	bssCOMRAM
   492   000055                     __pbssCOMRAM:
   493                           	callstack 0
   494   000055                     _TxBufReadCnt:
   495                           	callstack 0
   496   000055                     	ds	1
   497   000056                     _TxBufWriteCnt:
   498                           	callstack 0
   499   000056                     	ds	1
   500   000057                     _RxBufWriteCnt:
   501                           	callstack 0
   502   000057                     	ds	1
   503                           
   504                           	psect	bssBANK0
   505   0000AC                     __pbssBANK0:
   506                           	callstack 0
   507   0000AC                     _EUSART4RXbuf:
   508                           	callstack 0
   509   0000AC                     	ds	20
   510   0000C0                     _hue:
   511                           	callstack 0
   512   0000C0                     	ds	10
   513   0000CA                     _width:
   514                           	callstack 0
   515   0000CA                     	ds	2
   516   0000CC                     _prec:
   517                           	callstack 0
   518   0000CC                     	ds	2
   519   0000CE                     _flags:
   520                           	callstack 0
   521   0000CE                     	ds	1
   522   0000CF                     _readingIndex:
   523                           	callstack 0
   524   0000CF                     	ds	1
   525   0000D0                     _RxBufReadCnt:
   526                           	callstack 0
   527   0000D0                     	ds	1
   528   0000D1                     _colorCurrent:
   529                           	callstack 0
   530   0000D1                     	ds	10
   531   0000DB                     _colorCalibration:
   532                           	callstack 0
   533   0000DB                     	ds	10
   534   0000E5                     _motorR:
   535                           	callstack 0
   536   0000E5                     	ds	9
   537   0000EE                     _motorL:
   538                           	callstack 0
   539   0000EE                     	ds	9
   540                           
   541                           	psect	dataBANK0
   542   0000F7                     __pdataBANK0:
   543                           	callstack 0
   544   0000F7                     _dataFlag:
   545                           	callstack 0
   546   0000F7                     	ds	1
   547                           
   548                           	psect	bssBANK1
   549   000100                     __pbssBANK1:
   550                           	callstack 0
   551   000100                     _EUSART4TXbuf:
   552                           	callstack 0
   553   000100                     	ds	60
   554   00013C                     _action:
   555                           	callstack 0
   556   00013C                     	ds	50
   557   00016E                     _ldrReadings:
   558                           	callstack 0
   559   00016E                     	ds	20
   560   000182                     _dbuf:
   561                           	callstack 0
   562   000182                     	ds	32
   563                           
   564                           	psect	bssBANK2
   565   000200                     __pbssBANK2:
   566                           	callstack 0
   567   000200                     _time:
   568                           	callstack 0
   569   000200                     	ds	100
   570                           
   571                           	psect	cstackBANK0
   572   000060                     __pcstackBANK0:
   573                           	callstack 0
   574   000060                     convert_rgb2hue@redcurrent:
   575                           	callstack 0
   576   000060                     calibration_routine@cal_state:
   577                           	callstack 0
   578   000060                     send2USART@hue_char:
   579                           	callstack 0
   580                           
   581                           ; 50 bytes @ 0x0
   582   000060                     	ds	4
   583   000064                     convert_rgb2hue@redmax:
   584                           	callstack 0
   585                           
   586                           ; 4 bytes @ 0x4
   587   000064                     	ds	4
   588   000068                     convert_rgb2hue@greencurrent:
   589                           	callstack 0
   590                           
   591                           ; 4 bytes @ 0x8
   592   000068                     	ds	4
   593   00006C                     convert_rgb2hue@greenmax:
   594                           	callstack 0
   595                           
   596                           ; 4 bytes @ 0xC
   597   00006C                     	ds	4
   598   000070                     convert_rgb2hue@bluecurrent:
   599                           	callstack 0
   600                           
   601                           ; 4 bytes @ 0x10
   602   000070                     	ds	4
   603   000074                     convert_rgb2hue@bluemax:
   604                           	callstack 0
   605                           
   606                           ; 4 bytes @ 0x14
   607   000074                     	ds	4
   608   000078                     convert_rgb2hue@clearcurrent:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0x18
   612   000078                     	ds	4
   613   00007C                     convert_rgb2hue@clearmax:
   614                           	callstack 0
   615                           
   616                           ; 4 bytes @ 0x1C
   617   00007C                     	ds	4
   618   000080                     _convert_rgb2hue$433:
   619                           	callstack 0
   620                           
   621                           ; 4 bytes @ 0x20
   622   000080                     	ds	4
   623   000084                     _convert_rgb2hue$434:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x24
   627   000084                     	ds	4
   628   000088                     _convert_rgb2hue$435:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x28
   632   000088                     	ds	4
   633   00008C                     _convert_rgb2hue$436:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x2C
   637   00008C                     	ds	4
   638   000090                     convert_rgb2hue@min:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x30
   642   000090                     	ds	4
   643   000094                     convert_rgb2hue@diff:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x34
   647   000094                     	ds	4
   648   000098                     convert_rgb2hue@max:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x38
   652   000098                     	ds	4
   653   00009C                     convert_rgb2hue@hue:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x3C
   657   00009C                     	ds	4
   658   0000A0                     convert_rgb2hue@r:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x40
   662   0000A0                     	ds	4
   663   0000A4                     convert_rgb2hue@g:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x44
   667   0000A4                     	ds	4
   668   0000A8                     convert_rgb2hue@b:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x48
   672   0000A8                     	ds	4
   673                           
   674                           	psect	cstackCOMRAM
   675   000001                     __pcstackCOMRAM:
   676                           	callstack 0
   677   000001                     ??_LowISR:
   678   000001                     
   679                           ; 1 bytes @ 0x0
   680   000001                     	ds	1
   681   000002                     ??_I2C_2_Master_Idle:
   682   000002                     ?___wmul:
   683                           	callstack 0
   684   000002                     ?___awdiv:
   685                           	callstack 0
   686   000002                     ?___awmod:
   687                           	callstack 0
   688   000002                     ?___fladd:
   689                           	callstack 0
   690   000002                     ?___lmul:
   691                           	callstack 0
   692   000002                     ?___xxtofl:
   693                           	callstack 0
   694   000002                     sendCharSerial4@charToSend:
   695                           	callstack 0
   696   000002                     initDCmotorsPWM@PWMperiod:
   697                           	callstack 0
   698   000002                     logAction@newTime:
   699                           	callstack 0
   700   000002                     customDelayMs@milliseconds:
   701                           	callstack 0
   702   000002                     ___wmul@multiplier:
   703                           	callstack 0
   704   000002                     ___awdiv@dividend:
   705                           	callstack 0
   706   000002                     ___awmod@dividend:
   707                           	callstack 0
   708   000002                     fputc@c:
   709                           	callstack 0
   710   000002                     ___lmul@multiplier:
   711                           	callstack 0
   712   000002                     ___fleq@ff1:
   713                           	callstack 0
   714   000002                     ___flge@ff1:
   715                           	callstack 0
   716   000002                     ___fladd@b:
   717                           	callstack 0
   718   000002                     ___xxtofl@val:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0x1
   722   000002                     	ds	1
   723   000003                     ??_I2C_2_Master_Read:
   724   000003                     I2C_2_Master_Write@data_byte:
   725                           	callstack 0
   726   000003                     sendStringSerial4@string:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x2
   730   000003                     	ds	1
   731   000004                     ??_customDelayMs:
   732   000004                     color_writetoaddr@value:
   733                           	callstack 0
   734   000004                     I2C_2_Master_Read@ack:
   735                           	callstack 0
   736   000004                     fputc@fp:
   737                           	callstack 0
   738   000004                     logAction@path_step:
   739                           	callstack 0
   740   000004                     ___wmul@multiplicand:
   741                           	callstack 0
   742   000004                     ___awdiv@divisor:
   743                           	callstack 0
   744   000004                     ___awmod@divisor:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x3
   748   000004                     	ds	1
   749   000005                     ??_fputc:
   750   000005                     color_writetoaddr@address:
   751                           	callstack 0
   752   000005                     I2C_2_Master_Read@tmp:
   753                           	callstack 0
   754   000005                     customDelayMs@i:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x4
   758   000005                     	ds	1
   759   000006                     ??_color_click_init:
   760   000006                     ??___xxtofl:
   761   000006                     ?_color_read_Red:
   762                           	callstack 0
   763   000006                     ?_color_read_Green:
   764                           	callstack 0
   765   000006                     ?_color_read_Blue:
   766                           	callstack 0
   767   000006                     ?_color_read_Clear:
   768                           	callstack 0
   769   000006                     logAction@newAction:
   770                           	callstack 0
   771   000006                     ___awdiv@counter:
   772                           	callstack 0
   773   000006                     ___awmod@counter:
   774                           	callstack 0
   775   000006                     ___wmul@product:
   776                           	callstack 0
   777   000006                     ___lmul@multiplicand:
   778                           	callstack 0
   779   000006                     ___fleq@ff2:
   780                           	callstack 0
   781   000006                     ___flge@ff2:
   782                           	callstack 0
   783   000006                     ___fladd@a:
   784                           	callstack 0
   785                           
   786                           ; 4 bytes @ 0x5
   787   000006                     	ds	1
   788   000007                     ?_get16bitTMR0val:
   789                           	callstack 0
   790   000007                     ___awdiv@sign:
   791                           	callstack 0
   792   000007                     ___awmod@sign:
   793                           	callstack 0
   794   000007                     get16bitTMR0val@path_step:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x6
   798   000007                     	ds	1
   799   000008                     ??_color_read_Red:
   800   000008                     ??_color_read_Green:
   801   000008                     ??_color_read_Blue:
   802   000008                     ??_color_read_Clear:
   803   000008                     ?_abs:
   804                           	callstack 0
   805   000008                     ?___lwdiv:
   806                           	callstack 0
   807   000008                     ?_read_prec_or_width:
   808                           	callstack 0
   809   000008                     read_prec_or_width@fmt:
   810                           	callstack 0
   811   000008                     ___awdiv@quotient:
   812                           	callstack 0
   813   000008                     ___lwdiv@dividend:
   814                           	callstack 0
   815   000008                     abs@a:
   816                           	callstack 0
   817                           
   818                           ; 2 bytes @ 0x7
   819   000008                     	ds	1
   820   000009                     ??_get16bitTMR0val:
   821   000009                     read_prec_or_width@ap:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x8
   825   000009                     	ds	1
   826   00000A                     ??___fladd:
   827   00000A                     ??_abs:
   828   00000A                     ??___fleq:
   829   00000A                     ??___flge:
   830   00000A                     ___xxtofl@sign:
   831                           	callstack 0
   832   00000A                     read_prec_or_width@c:
   833                           	callstack 0
   834   00000A                     ___lwdiv@divisor:
   835                           	callstack 0
   836   00000A                     fputs@s:
   837                           	callstack 0
   838   00000A                     ___lmul@product:
   839                           	callstack 0
   840                           
   841                           ; 4 bytes @ 0x9
   842   00000A                     	ds	1
   843   00000B                     ___xxtofl@exp:
   844                           	callstack 0
   845   00000B                     color_read_Red@tmp:
   846                           	callstack 0
   847   00000B                     color_read_Green@tmp:
   848                           	callstack 0
   849   00000B                     color_read_Blue@tmp:
   850                           	callstack 0
   851   00000B                     color_read_Clear@tmp:
   852                           	callstack 0
   853   00000B                     read_prec_or_width@n:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0xA
   857   00000B                     	ds	1
   858   00000C                     ___lwdiv@counter:
   859                           	callstack 0
   860   00000C                     fputs@fp:
   861                           	callstack 0
   862   00000C                     ___xxtofl@arg:
   863                           	callstack 0
   864                           
   865                           ; 4 bytes @ 0xB
   866   00000C                     	ds	1
   867   00000D                     fputs@c:
   868                           	callstack 0
   869   00000D                     get16bitTMR0val@combined_value:
   870                           	callstack 0
   871   00000D                     ___lwdiv@quotient:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0xC
   875   00000D                     	ds	1
   876   00000E                     ?___aldiv:
   877                           	callstack 0
   878   00000E                     ___fladd@signs:
   879                           	callstack 0
   880   00000E                     fputs@i:
   881                           	callstack 0
   882   00000E                     ___aldiv@dividend:
   883                           	callstack 0
   884                           
   885                           ; 4 bytes @ 0xD
   886   00000E                     	ds	1
   887   00000F                     setMotorPWM@m:
   888                           	callstack 0
   889   00000F                     ___fladd@aexp:
   890                           	callstack 0
   891                           
   892                           ; 1 bytes @ 0xE
   893   00000F                     	ds	1
   894   000010                     ??_setMotorPWM:
   895   000010                     ?___flmul:
   896                           	callstack 0
   897   000010                     ___fladd@bexp:
   898                           	callstack 0
   899   000010                     pad@fp:
   900                           	callstack 0
   901   000010                     ___flmul@b:
   902                           	callstack 0
   903                           
   904                           ; 4 bytes @ 0xF
   905   000010                     	ds	1
   906   000011                     ___fladd@grs:
   907                           	callstack 0
   908   000011                     pad@buf:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x10
   912   000011                     	ds	1
   913   000012                     ?___flsub:
   914                           	callstack 0
   915   000012                     setMotorPWM@posDuty:
   916                           	callstack 0
   917   000012                     ___aldiv@divisor:
   918                           	callstack 0
   919   000012                     ___flsub@b:
   920                           	callstack 0
   921                           
   922                           ; 4 bytes @ 0x11
   923   000012                     	ds	1
   924   000013                     setMotorPWM@negDuty:
   925                           	callstack 0
   926   000013                     pad@p:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x12
   930   000013                     	ds	1
   931   000014                     stop@mL:
   932                           	callstack 0
   933   000014                     turnLeft@mL:
   934                           	callstack 0
   935   000014                     turnRight@mL:
   936                           	callstack 0
   937   000014                     fullSpeedBack@mL:
   938                           	callstack 0
   939   000014                     ___flmul@a:
   940                           	callstack 0
   941                           
   942                           ; 4 bytes @ 0x13
   943   000014                     	ds	1
   944   000015                     ??_pad:
   945   000015                     stop@mR:
   946                           	callstack 0
   947   000015                     turnLeft@mR:
   948                           	callstack 0
   949   000015                     turnRight@mR:
   950                           	callstack 0
   951   000015                     fullSpeedBack@mR:
   952                           	callstack 0
   953                           
   954                           ; 1 bytes @ 0x14
   955   000015                     	ds	1
   956   000016                     ??_stop:
   957   000016                     ??_turnLeft:
   958   000016                     ??_turnRight:
   959   000016                     ??_fullSpeedBack:
   960   000016                     ___aldiv@counter:
   961                           	callstack 0
   962   000016                     pad@i:
   963                           	callstack 0
   964   000016                     ___flsub@a:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x15
   968   000016                     	ds	1
   969   000017                     ___aldiv@sign:
   970                           	callstack 0
   971   000017                     turnLeft@i:
   972                           	callstack 0
   973   000017                     turnRight@i:
   974                           	callstack 0
   975   000017                     fullSpeedBack@power:
   976                           	callstack 0
   977                           
   978                           ; 2 bytes @ 0x16
   979   000017                     	ds	1
   980   000018                     ??___flmul:
   981   000018                     dtoa@fp:
   982                           	callstack 0
   983   000018                     ___aldiv@quotient:
   984                           	callstack 0
   985                           
   986                           ; 4 bytes @ 0x17
   987   000018                     	ds	1
   988   000019                     right90@mL:
   989                           	callstack 0
   990   000019                     left90@mL:
   991                           	callstack 0
   992   000019                     turn180@mL:
   993                           	callstack 0
   994   000019                     right135@mL:
   995                           	callstack 0
   996   000019                     left135@mL:
   997                           	callstack 0
   998   000019                     backHalf@mL:
   999                           	callstack 0
  1000   000019                     backOneAndHalf@mL:
  1001                           	callstack 0
  1002   000019                     dtoa@d:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x18
  1006   000019                     	ds	1
  1007   00001A                     ?___fldiv:
  1008                           	callstack 0
  1009   00001A                     right90@mR:
  1010                           	callstack 0
  1011   00001A                     left90@mR:
  1012                           	callstack 0
  1013   00001A                     turn180@mR:
  1014                           	callstack 0
  1015   00001A                     right135@mR:
  1016                           	callstack 0
  1017   00001A                     left135@mR:
  1018                           	callstack 0
  1019   00001A                     backHalf@mR:
  1020                           	callstack 0
  1021   00001A                     backOneAndHalf@mR:
  1022                           	callstack 0
  1023   00001A                     ___fldiv@b:
  1024                           	callstack 0
  1025                           
  1026                           ; 4 bytes @ 0x19
  1027   00001A                     	ds	1
  1028   00001B                     ??_right90:
  1029   00001B                     ??_left90:
  1030   00001B                     ??_turn180:
  1031   00001B                     ??_right135:
  1032   00001B                     ??_left135:
  1033   00001B                     ??_backHalf:
  1034   00001B                     ??_backOneAndHalf:
  1035   00001B                     _dtoa$3087:
  1036                           	callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x1A
  1039   00001B                     	ds	1
  1040   00001C                     ___flmul@sign:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x1B
  1044   00001C                     	ds	1
  1045   00001D                     moveRed@mL:
  1046                           	callstack 0
  1047   00001D                     moveGreen@mL:
  1048                           	callstack 0
  1049   00001D                     moveBlue@mL:
  1050                           	callstack 0
  1051   00001D                     moveYellow@mL:
  1052                           	callstack 0
  1053   00001D                     movePink@mL:
  1054                           	callstack 0
  1055   00001D                     moveOrange@mL:
  1056                           	callstack 0
  1057   00001D                     moveLightBlue@mL:
  1058                           	callstack 0
  1059   00001D                     moveWhite@mL:
  1060                           	callstack 0
  1061   00001D                     reverseTurn@mL:
  1062                           	callstack 0
  1063   00001D                     ___flmul@aexp:
  1064                           	callstack 0
  1065   00001D                     dtoa@p:
  1066                           	callstack 0
  1067                           
  1068                           ; 1 bytes @ 0x1C
  1069   00001D                     	ds	1
  1070   00001E                     moveRed@mR:
  1071                           	callstack 0
  1072   00001E                     moveGreen@mR:
  1073                           	callstack 0
  1074   00001E                     moveBlue@mR:
  1075                           	callstack 0
  1076   00001E                     moveYellow@mR:
  1077                           	callstack 0
  1078   00001E                     movePink@mR:
  1079                           	callstack 0
  1080   00001E                     moveOrange@mR:
  1081                           	callstack 0
  1082   00001E                     moveLightBlue@mR:
  1083                           	callstack 0
  1084   00001E                     moveWhite@mR:
  1085                           	callstack 0
  1086   00001E                     reverseTurn@mR:
  1087                           	callstack 0
  1088   00001E                     dtoa@w:
  1089                           	callstack 0
  1090   00001E                     ___fldiv@a:
  1091                           	callstack 0
  1092   00001E                     ___flmul@grs:
  1093                           	callstack 0
  1094                           
  1095                           ; 4 bytes @ 0x1D
  1096   00001E                     	ds	1
  1097   00001F                     ??_moveRed:
  1098   00001F                     ??_moveGreen:
  1099   00001F                     ??_moveBlue:
  1100   00001F                     ??_moveLightBlue:
  1101   00001F                     ??_moveYellow:
  1102   00001F                     ??_moveOrange:
  1103   00001F                     ??_movePink:
  1104   00001F                     ??_moveWhite:
  1105   00001F                     reverseTurn@actionStep:
  1106                           	callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x1E
  1109   00001F                     	ds	1
  1110   000020                     ??_reverseTurn:
  1111   000020                     dtoa@s:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x1F
  1115   000020                     	ds	1
  1116   000021                     ?_decision:
  1117                           	callstack 0
  1118   000021                     decision@hue:
  1119                           	callstack 0
  1120   000021                     dtoa@i:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x20
  1124   000021                     	ds	1
  1125   000022                     ??___fldiv:
  1126   000022                     ___flmul@bexp:
  1127                           	callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x21
  1130   000022                     	ds	1
  1131   000023                     vfpfcnvrt@fp:
  1132                           	callstack 0
  1133   000023                     decision@path_step:
  1134                           	callstack 0
  1135   000023                     ___flmul@prod:
  1136                           	callstack 0
  1137                           
  1138                           ; 4 bytes @ 0x22
  1139   000023                     	ds	1
  1140   000024                     vfpfcnvrt@fmt:
  1141                           	callstack 0
  1142                           
  1143                           ; 1 bytes @ 0x23
  1144   000024                     	ds	1
  1145   000025                     vfpfcnvrt@ap:
  1146                           	callstack 0
  1147                           
  1148                           ; 1 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_vfpfcnvrt:
  1151   000026                     ___fldiv@rem:
  1152                           	callstack 0
  1153                           
  1154                           ; 4 bytes @ 0x25
  1155   000026                     	ds	1
  1156   000027                     ___flmul@temp:
  1157                           	callstack 0
  1158                           
  1159                           ; 2 bytes @ 0x26
  1160   000027                     	ds	1
  1161   000028                     vfpfcnvrt@convarg:
  1162                           	callstack 0
  1163                           
  1164                           ; 4 bytes @ 0x27
  1165   000028                     	ds	1
  1166   000029                     ?___fltol:
  1167                           	callstack 0
  1168   000029                     ___fltol@f1:
  1169                           	callstack 0
  1170                           
  1171                           ; 4 bytes @ 0x28
  1172   000029                     	ds	1
  1173   00002A                     ___fldiv@sign:
  1174                           	callstack 0
  1175                           
  1176                           ; 1 bytes @ 0x29
  1177   00002A                     	ds	1
  1178   00002B                     ___fldiv@new_exp:
  1179                           	callstack 0
  1180                           
  1181                           ; 2 bytes @ 0x2A
  1182   00002B                     	ds	1
  1183   00002C                     vfpfcnvrt@done:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x2B
  1187   00002C                     	ds	1
  1188   00002D                     ??___fltol:
  1189   00002D                     vfpfcnvrt@cp:
  1190                           	callstack 0
  1191   00002D                     ___fldiv@grs:
  1192                           	callstack 0
  1193                           
  1194                           ; 4 bytes @ 0x2C
  1195   00002D                     	ds	1
  1196   00002E                     ?_vfprintf:
  1197                           	callstack 0
  1198   00002E                     vfprintf@fp:
  1199                           	callstack 0
  1200                           
  1201                           ; 1 bytes @ 0x2D
  1202   00002E                     	ds	1
  1203   00002F                     vfprintf@fmt:
  1204                           	callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x2E
  1207   00002F                     	ds	1
  1208   000030                     vfprintf@ap:
  1209                           	callstack 0
  1210                           
  1211                           ; 1 bytes @ 0x2F
  1212   000030                     	ds	1
  1213   000031                     ___fltol@sign1:
  1214                           	callstack 0
  1215   000031                     ___fldiv@bexp:
  1216                           	callstack 0
  1217   000031                     vfprintf@cfmt:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x30
  1221   000031                     	ds	1
  1222   000032                     ?_sprintf:
  1223                           	callstack 0
  1224   000032                     ___fltol@exp1:
  1225                           	callstack 0
  1226   000032                     ___fldiv@aexp:
  1227                           	callstack 0
  1228   000032                     sprintf@s:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x31
  1232   000032                     	ds	1
  1233   000033                     ?_convert_rgb2hue:
  1234                           	callstack 0
  1235   000033                     convert_rgb2hue@cMax:
  1236                           	callstack 0
  1237   000033                     fullSpeedAhead@mL:
  1238                           	callstack 0
  1239   000033                     sprintf@fmt:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x32
  1243   000033                     	ds	1
  1244   000034                     convert_rgb2hue@cCurr:
  1245                           	callstack 0
  1246   000034                     fullSpeedAhead@mR:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x33
  1250   000034                     	ds	1
  1251   000035                     ??_convert_rgb2hue:
  1252   000035                     ??_fullSpeedAhead:
  1253                           
  1254                           ; 1 bytes @ 0x34
  1255   000035                     	ds	1
  1256   000036                     fullSpeedAhead@power:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x35
  1260   000036                     	ds	1
  1261   000037                     ?_reading_hue:
  1262                           	callstack 0
  1263   000037                     reading_hue@cCurr:
  1264                           	callstack 0
  1265                           
  1266                           ; 1 bytes @ 0x36
  1267   000037                     	ds	1
  1268   000038                     reverseStraight@mL:
  1269                           	callstack 0
  1270   000038                     sprintf@ap:
  1271                           	callstack 0
  1272                           
  1273                           ; 1 bytes @ 0x37
  1274   000038                     	ds	1
  1275   000039                     ??_reading_hue:
  1276   000039                     reverseStraight@mR:
  1277                           	callstack 0
  1278   000039                     sprintf@f:
  1279                           	callstack 0
  1280                           
  1281                           ; 12 bytes @ 0x38
  1282   000039                     	ds	1
  1283   00003A                     reverseStraight@time_ms:
  1284                           	callstack 0
  1285                           
  1286                           ; 4 bytes @ 0x39
  1287   00003A                     	ds	1
  1288   00003B                     reading_hue@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x3A
  1292   00003B                     	ds	3
  1293   00003E                     ??_reverseStraight:
  1294                           
  1295                           ; 1 bytes @ 0x3D
  1296   00003E                     	ds	2
  1297   000040                     reverseStraight@delayMs:
  1298                           	callstack 0
  1299                           
  1300                           ; 2 bytes @ 0x3F
  1301   000040                     	ds	2
  1302   000042                     returnHome@mL:
  1303                           	callstack 0
  1304                           
  1305                           ; 1 bytes @ 0x41
  1306   000042                     	ds	1
  1307   000043                     returnHome@mR:
  1308                           	callstack 0
  1309                           
  1310                           ; 1 bytes @ 0x42
  1311   000043                     	ds	1
  1312   000044                     returnHome@path_step:
  1313                           	callstack 0
  1314                           
  1315                           ; 2 bytes @ 0x43
  1316   000044                     	ds	1
  1317   000045                     calibration_routine@cCal:
  1318                           	callstack 0
  1319   000045                     send2USART@hue:
  1320                           	callstack 0
  1321                           
  1322                           ; 2 bytes @ 0x44
  1323   000045                     	ds	1
  1324   000046                     ??_calibration_routine:
  1325   000046                     returnHome@time_ms:
  1326                           	callstack 0
  1327                           
  1328                           ; 4 bytes @ 0x45
  1329   000046                     	ds	1
  1330   000047                     
  1331                           ; 1 bytes @ 0x46
  1332   000047                     	ds	3
  1333   00004A                     returnHome@action_turn:
  1334                           	callstack 0
  1335                           
  1336                           ; 1 bytes @ 0x49
  1337   00004A                     	ds	1
  1338   00004B                     returnHome@i:
  1339                           	callstack 0
  1340                           
  1341                           ; 2 bytes @ 0x4A
  1342   00004B                     	ds	2
  1343   00004D                     ??_main:
  1344                           
  1345                           ; 1 bytes @ 0x4C
  1346   00004D                     	ds	2
  1347   00004F                     main@hue:
  1348                           	callstack 0
  1349                           
  1350                           ; 2 bytes @ 0x4E
  1351   00004F                     	ds	2
  1352   000051                     main@path_step:
  1353                           	callstack 0
  1354                           
  1355                           ; 2 bytes @ 0x50
  1356   000051                     	ds	2
  1357   000053                     main@clear_norm:
  1358                           	callstack 0
  1359                           
  1360                           ; 2 bytes @ 0x52
  1361   000053                     	ds	2
  1362                           
  1363 ;;
  1364 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1365 ;;
  1366 ;; *************** function _main *****************
  1367 ;; Defined at:
  1368 ;;		line 29 in file "main.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  white           2    0        unsigned int 
  1373 ;;  current         4    0        float 
  1374 ;;  clear_norm      2   82[COMRAM] unsigned int 
  1375 ;;  path_step       2   80[COMRAM] unsigned int 
  1376 ;;  hue             2   78[COMRAM] unsigned int 
  1377 ;;  PWMcycle        2    0        unsigned int 
  1378 ;;  ambient         2    0        unsigned int 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1391 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1392 ;;Total ram usage:        8 bytes
  1393 ;; Hardware stack levels required when called: 10
  1394 ;; This function calls:
  1395 ;;		_ADC_init
  1396 ;;		___lwdiv
  1397 ;;		___wmul
  1398 ;;		_calibration_routine
  1399 ;;		_color_click_init
  1400 ;;		_color_read_Clear
  1401 ;;		_decision
  1402 ;;		_fullSpeedAhead
  1403 ;;		_get16bitTMR0val
  1404 ;;		_initDCmotorsPWM
  1405 ;;		_initUSART4
  1406 ;;		_reading_hue
  1407 ;;		_returnHome
  1408 ;;		_send2USART
  1409 ;;		_stop
  1410 ;; This function is called by:
  1411 ;;		Startup code after reset
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text0
  1416   0022DC                     __ptext0:
  1417                           	callstack 0
  1418   0022DC                     _main:
  1419                           	callstack 21
  1420   0022DC                     
  1421                           ;main.c: 31:     ADC_init();
  1422   0022DC  ECCF  F023         	call	_ADC_init	;wreg free
  1423   0022E0                     
  1424                           ;main.c: 32:     color_click_init();
  1425   0022E0  EC8A  F021         	call	_color_click_init	;wreg free
  1426   0022E4                     
  1427                           ;main.c: 33:     initUSART4();
  1428   0022E4  ECC0  F023         	call	_initUSART4	;wreg free
  1429   0022E8                     
  1430                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1431   0022E8  0E00               	movlw	0
  1432   0022EA  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1433   0022EC  0E63               	movlw	99
  1434   0022EE  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1435   0022F0  EC30  F01E         	call	_initDCmotorsPWM	;wreg free
  1436   0022F4                     
  1437                           ;main.c: 40:     motorL.power = 0;
  1438   0022F4  0E00               	movlw	0
  1439   0022F6  0100               	movlb	0	; () banked
  1440   0022F8  6FEE               	movwf	_motorL& (0+255),b
  1441   0022FA                     
  1442                           ; BSR set to: 0
  1443                           ;main.c: 41:     motorL.direction = 1;
  1444   0022FA  0E01               	movlw	1
  1445   0022FC  6FEF               	movwf	(_motorL+1)& (0+255),b
  1446   0022FE                     
  1447                           ; BSR set to: 0
  1448                           ;main.c: 42:     motorL.brakemode = 1;
  1449   0022FE  0E01               	movlw	1
  1450   002300  6FF0               	movwf	(_motorL+2)& (0+255),b
  1451   002302                     
  1452                           ; BSR set to: 0
  1453                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1454   002302  0E00               	movlw	0
  1455   002304  6FF2               	movwf	(_motorL+4)& (0+255),b
  1456   002306  0E63               	movlw	99
  1457   002308  6FF1               	movwf	(_motorL+3)& (0+255),b
  1458   00230A                     
  1459                           ; BSR set to: 0
  1460                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1461   00230A  0EAA               	movlw	170
  1462   00230C  6FF3               	movwf	(_motorL+5)& (0+255),b
  1463   00230E  0E0F               	movlw	15
  1464   002310  6FF4               	movwf	(_motorL+6)& (0+255),b
  1465   002312                     
  1466                           ; BSR set to: 0
  1467                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1468   002312  0EA6               	movlw	166
  1469   002314  6FF5               	movwf	(_motorL+7)& (0+255),b
  1470   002316  0E0F               	movlw	15
  1471   002318  6FF6               	movwf	(_motorL+8)& (0+255),b
  1472   00231A                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 47:     motorR.power = 0;
  1475   00231A  0E00               	movlw	0
  1476   00231C  6FE5               	movwf	_motorR& (0+255),b
  1477   00231E                     
  1478                           ; BSR set to: 0
  1479                           ;main.c: 48:     motorR.direction = 1;
  1480   00231E  0E01               	movlw	1
  1481   002320  6FE6               	movwf	(_motorR+1)& (0+255),b
  1482   002322                     
  1483                           ; BSR set to: 0
  1484                           ;main.c: 49:     motorR.brakemode = 1;
  1485   002322  0E01               	movlw	1
  1486   002324  6FE7               	movwf	(_motorR+2)& (0+255),b
  1487   002326                     
  1488                           ; BSR set to: 0
  1489                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1490   002326  0E00               	movlw	0
  1491   002328  6FE9               	movwf	(_motorR+4)& (0+255),b
  1492   00232A  0E63               	movlw	99
  1493   00232C  6FE8               	movwf	(_motorR+3)& (0+255),b
  1494                           
  1495                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1496   00232E  0E25               	movlw	37
  1497   002330  6FEA               	movwf	(_motorR+5)& (0+255),b
  1498   002332  0E0F               	movlw	15
  1499   002334  6FEB               	movwf	(_motorR+6)& (0+255),b
  1500                           
  1501                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1502   002336  0E21               	movlw	33
  1503   002338  6FEC               	movwf	(_motorR+7)& (0+255),b
  1504   00233A  0E0F               	movlw	15
  1505   00233C  6FED               	movwf	(_motorR+8)& (0+255),b
  1506   00233E                     
  1507                           ; BSR set to: 0
  1508                           ;main.c: 55:     LATDbits.LATD7=0;
  1509   00233E  9E7C               	bcf	124,7,c	;volatile
  1510   002340                     
  1511                           ; BSR set to: 0
  1512                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1513   002340  9E84               	bcf	132,7,c	;volatile
  1514   002342                     
  1515                           ; BSR set to: 0
  1516                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1517   002342  9087               	bcf	135,0,c	;volatile
  1518   002344                     
  1519                           ; BSR set to: 0
  1520                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1521   002344  907F               	bcf	127,0,c	;volatile
  1522   002346                     
  1523                           ; BSR set to: 0
  1524                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1525   002346  9E85               	bcf	133,7,c	;volatile
  1526   002348                     
  1527                           ; BSR set to: 0
  1528                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1529   002348  9E7D               	bcf	125,7,c	;volatile
  1530   00234A                     
  1531                           ; BSR set to: 0
  1532                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1533   00234A  9681               	bcf	129,3,c	;volatile
  1534   00234C                     
  1535                           ; BSR set to: 0
  1536                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1537   00234C  9679               	bcf	121,3,c	;volatile
  1538   00234E                     
  1539                           ; BSR set to: 0
  1540                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1541   00234E  8686               	bsf	134,3,c	;volatile
  1542   002350                     
  1543                           ; BSR set to: 0
  1544                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1545   002350  010E               	movlb	14	; () banked
  1546   002352  97B4               	bcf	180,3,b	;volatile
  1547   002354                     
  1548                           ; BSR set to: 14
  1549                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1550   002354  8486               	bsf	134,2,c	;volatile
  1551   002356                     
  1552                           ; BSR set to: 14
  1553                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1554   002356  947E               	bcf	126,2,c	;volatile
  1555   002358                     
  1556                           ; BSR set to: 14
  1557                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1558   002358  95B4               	bcf	180,2,b	;volatile
  1559   00235A                     
  1560                           ; BSR set to: 14
  1561                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1562   00235A  9287               	bcf	135,1,c	;volatile
  1563   00235C                     
  1564                           ; BSR set to: 14
  1565                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1566   00235C  927F               	bcf	127,1,c	;volatile
  1567   00235E                     
  1568                           ; BSR set to: 14
  1569                           ;main.c: 87:     TRISHbits.TRISH3 = 0;
  1570   00235E  9688               	bcf	136,3,c	;volatile
  1571   002360                     
  1572                           ; BSR set to: 14
  1573                           ;main.c: 88:     LATHbits.LATH3 = 1;
  1574   002360  8680               	bsf	128,3,c	;volatile
  1575   002362                     
  1576                           ; BSR set to: 14
  1577                           ;main.c: 89:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1578   002362  0E19               	movlw	25
  1579   002364  6E4E               	movwf	(??_main+1)^0,c
  1580   002366  0E5A               	movlw	90
  1581   002368  6E4D               	movwf	??_main^0,c
  1582   00236A  0EB2               	movlw	178
  1583   00236C                     u6957:
  1584   00236C  2EE8               	decfsz	wreg,f,c
  1585   00236E  D7FE               	bra	u6957
  1586   002370  2E4D               	decfsz	??_main^0,f,c
  1587   002372  D7FC               	bra	u6957
  1588   002374  2E4E               	decfsz	(??_main+1)^0,f,c
  1589   002376  D7FA               	bra	u6957
  1590   002378                     
  1591                           ;main.c: 90:     LATHbits.LATH3 = 0;
  1592   002378  9680               	bcf	128,3,c	;volatile
  1593   00237A                     
  1594                           ;main.c: 94:     calibration_routine(&colorCalibration);
  1595   00237A  0EDB               	movlw	low _colorCalibration
  1596   00237C  6E45               	movwf	calibration_routine@cCal^0,c
  1597   00237E  ECF7  F013         	call	_calibration_routine	;wreg free
  1598   002382                     
  1599                           ;main.c: 95:     send2USART(colorCalibration.ambient);
  1600   002382  C0E3  F045         	movff	_colorCalibration+8,send2USART@hue
  1601   002386  C0E4  F046         	movff	_colorCalibration+9,send2USART@hue+1
  1602   00238A  ECB1  F023         	call	_send2USART	;wreg free
  1603   00238E                     
  1604                           ;main.c: 96:     unsigned int clear_norm;;main.c: 97:     float current;;main.c: 98:    
      +                           unsigned int path_step = 0;
  1605   00238E  0E00               	movlw	0
  1606   002390  6E52               	movwf	(main@path_step+1)^0,c
  1607   002392  0E00               	movlw	0
  1608   002394  6E51               	movwf	main@path_step^0,c
  1609   002396                     l7132:
  1610                           
  1611                           ;main.c: 109:         LATGbits.LATG0 = 1;
  1612   002396  807F               	bsf	127,0,c	;volatile
  1613   002398                     
  1614                           ;main.c: 110:         LATEbits.LATE7 = 1;
  1615   002398  8E7D               	bsf	125,7,c	;volatile
  1616   00239A                     
  1617                           ;main.c: 111:         LATAbits.LATA3 = 1;
  1618   00239A  8679               	bsf	121,3,c	;volatile
  1619   00239C                     
  1620                           ;main.c: 114:         fullSpeedAhead(&motorL,&motorR);
  1621   00239C  0EEE               	movlw	low _motorL
  1622   00239E  6E33               	movwf	fullSpeedAhead@mL^0,c
  1623   0023A0  0EE5               	movlw	low _motorR
  1624   0023A2  6E34               	movwf	fullSpeedAhead@mR^0,c
  1625   0023A4  ECC5  F01B         	call	_fullSpeedAhead	;wreg free
  1626   0023A8                     
  1627                           ;main.c: 115:         T0CON0bits.T0EN=1;
  1628   0023A8  8ED5               	bsf	213,7,c	;volatile
  1629   0023AA                     l7142:
  1630                           
  1631                           ;main.c: 117:         (colorCurrent.clear) = color_read_Clear();
  1632   0023AA  EC37  F020         	call	_color_read_Clear	;wreg free
  1633   0023AE  C006  F0D7         	movff	?_color_read_Clear,_colorCurrent+6
  1634   0023B2  C007  F0D8         	movff	?_color_read_Clear+1,_colorCurrent+7
  1635   0023B6                     
  1636                           ;main.c: 120:         clear_norm = (colorCurrent.clear)*100/colorCalibration.clear;
  1637   0023B6  C0D7  F002         	movff	_colorCurrent+6,___wmul@multiplier
  1638   0023BA  C0D8  F003         	movff	_colorCurrent+7,___wmul@multiplier+1
  1639   0023BE  0E00               	movlw	0
  1640   0023C0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  1641   0023C2  0E64               	movlw	100
  1642   0023C4  6E04               	movwf	___wmul@multiplicand^0,c
  1643   0023C6  EC8E  F023         	call	___wmul	;wreg free
  1644   0023CA  C002  F008         	movff	?___wmul,___lwdiv@dividend
  1645   0023CE  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  1646   0023D2  C0E1  F00A         	movff	_colorCalibration+6,___lwdiv@divisor
  1647   0023D6  C0E2  F00B         	movff	_colorCalibration+7,___lwdiv@divisor+1
  1648   0023DA  EC78  F01F         	call	___lwdiv	;wreg free
  1649   0023DE  C008  F053         	movff	?___lwdiv,main@clear_norm
  1650   0023E2  C009  F054         	movff	?___lwdiv+1,main@clear_norm+1
  1651   0023E6                     
  1652                           ;main.c: 123:         send2USART(clear_norm);
  1653   0023E6  C053  F045         	movff	main@clear_norm,send2USART@hue
  1654   0023EA  C054  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1655   0023EE  ECB1  F023         	call	_send2USART	;wreg free
  1656   0023F2                     
  1657                           ;main.c: 125:         while(clear_norm<8){
  1658   0023F2  5054               	movf	(main@clear_norm+1)^0,w,c
  1659   0023F4  E109               	bnz	u6880
  1660   0023F6  0E08               	movlw	8
  1661   0023F8  5C53               	subwf	main@clear_norm^0,w,c
  1662   0023FA  A0D8               	btfss	status,0,c
  1663   0023FC  EF02  F012         	goto	u6881
  1664   002400  EF04  F012         	goto	u6880
  1665   002404                     u6881:
  1666   002404  EFD5  F011         	goto	l7142
  1667   002408                     u6880:
  1668   002408                     
  1669                           ;main.c: 133:         T0CON0bits.T0EN=0;
  1670   002408  9ED5               	bcf	213,7,c	;volatile
  1671   00240A                     
  1672                           ;main.c: 134:         stop(&motorL,&motorR);
  1673   00240A  0EEE               	movlw	low _motorL
  1674   00240C  6E14               	movwf	stop@mL^0,c
  1675   00240E  0EE5               	movlw	low _motorR
  1676   002410  6E15               	movwf	stop@mR^0,c
  1677   002412  EC78  F01E         	call	_stop	;wreg free
  1678   002416                     
  1679                           ;main.c: 137:         path_step = get16bitTMR0val(path_step);
  1680   002416  C051  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1681   00241A  C052  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1682   00241E  EC51  F021         	call	_get16bitTMR0val	;wreg free
  1683   002422  C007  F051         	movff	?_get16bitTMR0val,main@path_step
  1684   002426  C008  F052         	movff	?_get16bitTMR0val+1,main@path_step+1
  1685   00242A                     
  1686                           ;main.c: 139:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1687   00242A  0E11               	movlw	17
  1688   00242C  6E4E               	movwf	(??_main+1)^0,c
  1689   00242E  0E3C               	movlw	60
  1690   002430  6E4D               	movwf	??_main^0,c
  1691   002432  0ECB               	movlw	203
  1692   002434                     u6967:
  1693   002434  2EE8               	decfsz	wreg,f,c
  1694   002436  D7FE               	bra	u6967
  1695   002438  2E4D               	decfsz	??_main^0,f,c
  1696   00243A  D7FC               	bra	u6967
  1697   00243C  2E4E               	decfsz	(??_main+1)^0,f,c
  1698   00243E  D7FA               	bra	u6967
  1699   002440  0000               	nop	
  1700   002442                     
  1701                           ;main.c: 142:         fullSpeedAhead(&motorL,&motorR);
  1702   002442  0EEE               	movlw	low _motorL
  1703   002444  6E33               	movwf	fullSpeedAhead@mL^0,c
  1704   002446  0EE5               	movlw	low _motorR
  1705   002448  6E34               	movwf	fullSpeedAhead@mR^0,c
  1706   00244A  ECC5  F01B         	call	_fullSpeedAhead	;wreg free
  1707   00244E                     
  1708                           ;main.c: 143:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1709   00244E  0E19               	movlw	25
  1710   002450  6E4E               	movwf	(??_main+1)^0,c
  1711   002452  0E5A               	movlw	90
  1712   002454  6E4D               	movwf	??_main^0,c
  1713   002456  0EB2               	movlw	178
  1714   002458                     u6977:
  1715   002458  2EE8               	decfsz	wreg,f,c
  1716   00245A  D7FE               	bra	u6977
  1717   00245C  2E4D               	decfsz	??_main^0,f,c
  1718   00245E  D7FC               	bra	u6977
  1719   002460  2E4E               	decfsz	(??_main+1)^0,f,c
  1720   002462  D7FA               	bra	u6977
  1721   002464                     
  1722                           ;main.c: 144:         stop(&motorL,&motorR);
  1723   002464  0EEE               	movlw	low _motorL
  1724   002466  6E14               	movwf	stop@mL^0,c
  1725   002468  0EE5               	movlw	low _motorR
  1726   00246A  6E15               	movwf	stop@mR^0,c
  1727   00246C  EC78  F01E         	call	_stop	;wreg free
  1728   002470                     
  1729                           ;main.c: 145:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1730   002470  0E19               	movlw	25
  1731   002472  6E4E               	movwf	(??_main+1)^0,c
  1732   002474  0E5A               	movlw	90
  1733   002476  6E4D               	movwf	??_main^0,c
  1734   002478  0EB2               	movlw	178
  1735   00247A                     u6987:
  1736   00247A  2EE8               	decfsz	wreg,f,c
  1737   00247C  D7FE               	bra	u6987
  1738   00247E  2E4D               	decfsz	??_main^0,f,c
  1739   002480  D7FC               	bra	u6987
  1740   002482  2E4E               	decfsz	(??_main+1)^0,f,c
  1741   002484  D7FA               	bra	u6987
  1742   002486                     
  1743                           ;main.c: 147:         hue = reading_hue(&colorCurrent);
  1744   002486  0ED1               	movlw	low _colorCurrent
  1745   002488  6E37               	movwf	reading_hue@cCurr^0,c
  1746   00248A  EC50  F01B         	call	_reading_hue	;wreg free
  1747   00248E  C037  F04F         	movff	?_reading_hue,main@hue
  1748   002492  C038  F050         	movff	?_reading_hue+1,main@hue+1
  1749   002496                     
  1750                           ;main.c: 149:         clear_norm = (colorCurrent.clear)*100/colorCalibration.clear;
  1751   002496  C0D7  F002         	movff	_colorCurrent+6,___wmul@multiplier
  1752   00249A  C0D8  F003         	movff	_colorCurrent+7,___wmul@multiplier+1
  1753   00249E  0E00               	movlw	0
  1754   0024A0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  1755   0024A2  0E64               	movlw	100
  1756   0024A4  6E04               	movwf	___wmul@multiplicand^0,c
  1757   0024A6  EC8E  F023         	call	___wmul	;wreg free
  1758   0024AA  C002  F008         	movff	?___wmul,___lwdiv@dividend
  1759   0024AE  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  1760   0024B2  C0E1  F00A         	movff	_colorCalibration+6,___lwdiv@divisor
  1761   0024B6  C0E2  F00B         	movff	_colorCalibration+7,___lwdiv@divisor+1
  1762   0024BA  EC78  F01F         	call	___lwdiv	;wreg free
  1763   0024BE  C008  F053         	movff	?___lwdiv,main@clear_norm
  1764   0024C2  C009  F054         	movff	?___lwdiv+1,main@clear_norm+1
  1765   0024C6                     
  1766                           ;main.c: 152:         if (clear_norm > 20){
  1767   0024C6  5054               	movf	(main@clear_norm+1)^0,w,c
  1768   0024C8  E109               	bnz	u6890
  1769   0024CA  0E15               	movlw	21
  1770   0024CC  5C53               	subwf	main@clear_norm^0,w,c
  1771   0024CE  A0D8               	btfss	status,0,c
  1772   0024D0  EF6C  F012         	goto	u6891
  1773   0024D4  EF6E  F012         	goto	u6890
  1774   0024D8                     u6891:
  1775   0024D8  EF86  F012         	goto	l7182
  1776   0024DC                     u6890:
  1777   0024DC                     
  1778                           ;main.c: 153:             fullSpeedAhead(&motorL,&motorR);
  1779   0024DC  0EEE               	movlw	low _motorL
  1780   0024DE  6E33               	movwf	fullSpeedAhead@mL^0,c
  1781   0024E0  0EE5               	movlw	low _motorR
  1782   0024E2  6E34               	movwf	fullSpeedAhead@mR^0,c
  1783   0024E4  ECC5  F01B         	call	_fullSpeedAhead	;wreg free
  1784   0024E8                     
  1785                           ;main.c: 154:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1786   0024E8  0E09               	movlw	9
  1787   0024EA  6E4E               	movwf	(??_main+1)^0,c
  1788   0024EC  0E1E               	movlw	30
  1789   0024EE  6E4D               	movwf	??_main^0,c
  1790   0024F0  0EE4               	movlw	228
  1791   0024F2                     u6997:
  1792   0024F2  2EE8               	decfsz	wreg,f,c
  1793   0024F4  D7FE               	bra	u6997
  1794   0024F6  2E4D               	decfsz	??_main^0,f,c
  1795   0024F8  D7FC               	bra	u6997
  1796   0024FA  2E4E               	decfsz	(??_main+1)^0,f,c
  1797   0024FC  D7FA               	bra	u6997
  1798   0024FE  D000               	nop2	
  1799   002500                     
  1800                           ;main.c: 155:             stop(&motorL,&motorR);
  1801   002500  0EEE               	movlw	low _motorL
  1802   002502  6E14               	movwf	stop@mL^0,c
  1803   002504  0EE5               	movlw	low _motorR
  1804   002506  6E15               	movwf	stop@mR^0,c
  1805   002508  EC78  F01E         	call	_stop	;wreg free
  1806   00250C                     l7182:
  1807                           
  1808                           ;main.c: 157:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  1809   00250C  5054               	movf	(main@clear_norm+1)^0,w,c
  1810   00250E  E109               	bnz	u6900
  1811   002510  0E3D               	movlw	61
  1812   002512  5C53               	subwf	main@clear_norm^0,w,c
  1813   002514  A0D8               	btfss	status,0,c
  1814   002516  EF8F  F012         	goto	u6901
  1815   00251A  EF91  F012         	goto	u6900
  1816   00251E                     u6901:
  1817   00251E  EFA7  F012         	goto	l331
  1818   002522                     u6900:
  1819   002522  0E2E               	movlw	46
  1820   002524  5C4F               	subwf	main@hue^0,w,c
  1821   002526  0E01               	movlw	1
  1822   002528  5850               	subwfb	(main@hue+1)^0,w,c
  1823   00252A  A0D8               	btfss	status,0,c
  1824   00252C  EF9A  F012         	goto	u6911
  1825   002530  EF9C  F012         	goto	u6910
  1826   002534                     u6911:
  1827   002534  EFAE  F012         	goto	l7188
  1828   002538                     u6910:
  1829   002538  0E5B               	movlw	91
  1830   00253A  5C4F               	subwf	main@hue^0,w,c
  1831   00253C  0E01               	movlw	1
  1832   00253E  5850               	subwfb	(main@hue+1)^0,w,c
  1833   002540  B0D8               	btfsc	status,0,c
  1834   002542  EFA5  F012         	goto	u6921
  1835   002546  EFA7  F012         	goto	u6920
  1836   00254A                     u6921:
  1837   00254A  EFAE  F012         	goto	l7188
  1838   00254E                     u6920:
  1839   00254E                     l331:
  1840   00254E  A27F               	btfss	127,1,c	;volatile
  1841   002550  EFAC  F012         	goto	u6931
  1842   002554  EFAE  F012         	goto	u6930
  1843   002558                     u6931:
  1844   002558  EFBF  F012         	goto	l7196
  1845   00255C                     u6930:
  1846   00255C                     l7188:
  1847   00255C                     
  1848                           ;main.c: 160:             send2USART(white);
  1849   00255C  0E00               	movlw	0
  1850   00255E  6E46               	movwf	(send2USART@hue+1)^0,c
  1851   002560  0E08               	movlw	8
  1852   002562  6E45               	movwf	send2USART@hue^0,c
  1853   002564  ECB1  F023         	call	_send2USART	;wreg free
  1854   002568                     
  1855                           ;main.c: 161:             returnHome(&motorL, &motorR, path_step);
  1856   002568  0EEE               	movlw	low _motorL
  1857   00256A  6E42               	movwf	returnHome@mL^0,c
  1858   00256C  0EE5               	movlw	low _motorR
  1859   00256E  6E43               	movwf	returnHome@mR^0,c
  1860   002570  C051  F044         	movff	main@path_step,returnHome@path_step
  1861   002574  C052  F045         	movff	main@path_step+1,returnHome@path_step+1
  1862   002578  ECC7  F018         	call	_returnHome	;wreg free
  1863   00257C                     
  1864                           ;main.c: 162:             LATGbits.LATG1 = 0;
  1865   00257C  927F               	bcf	127,1,c	;volatile
  1866   00257E                     l7196:
  1867                           
  1868                           ;main.c: 165:         path_step = decision(hue, path_step);
  1869   00257E  C04F  F021         	movff	main@hue,decision@hue
  1870   002582  C050  F022         	movff	main@hue+1,decision@hue+1
  1871   002586  C051  F023         	movff	main@path_step,decision@path_step
  1872   00258A  C052  F024         	movff	main@path_step+1,decision@path_step+1
  1873   00258E  ECD1  F012         	call	_decision	;wreg free
  1874   002592  C021  F051         	movff	?_decision,main@path_step
  1875   002596  C022  F052         	movff	?_decision+1,main@path_step+1
  1876   00259A  EFCB  F011         	goto	l7132
  1877   00259E  EF1D  F000         	goto	start
  1878   0025A2                     __end_of_main:
  1879                           	callstack 0
  1880                           
  1881 ;; *************** function _send2USART *****************
  1882 ;; Defined at:
  1883 ;;		line 146 in file "serial.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  hue             2   68[COMRAM] unsigned int 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1898 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;Total ram usage:       52 bytes
  1902 ;; Hardware stack levels used: 1
  1903 ;; Hardware stack levels required when called: 9
  1904 ;; This function calls:
  1905 ;;		_sendStringSerial4
  1906 ;;		_sprintf
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text1
  1913   004762                     __ptext1:
  1914                           	callstack 0
  1915   004762                     _send2USART:
  1916                           	callstack 21
  1917   004762                     
  1918                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  1919   004762  0E60               	movlw	low send2USART@hue_char
  1920   004764  6E32               	movwf	sprintf@s^0,c
  1921   004766  0EB7               	movlw	low STR_14
  1922   004768  6E33               	movwf	sprintf@fmt^0,c
  1923   00476A  C045  F034         	movff	send2USART@hue,?_sprintf+2
  1924   00476E  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  1925   004772  ECA4  F021         	call	_sprintf	;wreg free
  1926   004776                     
  1927                           ;serial.c: 158:         sendStringSerial4(hue_char);
  1928   004776  0E60               	movlw	low send2USART@hue_char
  1929   004778  6E03               	movwf	sendStringSerial4@string^0,c
  1930   00477A  EC04  F023         	call	_sendStringSerial4	;wreg free
  1931   00477E  0012               	return		;funcret
  1932   004780                     __end_of_send2USART:
  1933                           	callstack 0
  1934                           
  1935 ;; *************** function _returnHome *****************
  1936 ;; Defined at:
  1937 ;;		line 76 in file "return_func.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  1940 ;;		 -> motorL(9), 
  1941 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  1942 ;;		 -> motorR(9), 
  1943 ;;  path_step       2   67[COMRAM] unsigned int 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  time_ms         4   69[COMRAM] long 
  1946 ;;  action_turn     1   73[COMRAM] unsigned char 
  1947 ;;  i               2   74[COMRAM] unsigned int 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1958 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1960 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1961 ;;Total ram usage:       11 bytes
  1962 ;; Hardware stack levels used: 1
  1963 ;; Hardware stack levels required when called: 6
  1964 ;; This function calls:
  1965 ;;		___aldiv
  1966 ;;		___lmul
  1967 ;;		_moveWhite
  1968 ;;		_reverseStraight
  1969 ;;		_reverseTurn
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text2
  1976   00318E                     __ptext2:
  1977                           	callstack 0
  1978   00318E                     _returnHome:
  1979                           	callstack 24
  1980   00318E                     
  1981                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  1982   00318E  907F               	bcf	127,0,c	;volatile
  1983                           
  1984                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  1985   003190  9E7D               	bcf	125,7,c	;volatile
  1986                           
  1987                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  1988   003192  9679               	bcf	121,3,c	;volatile
  1989   003194                     
  1990                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  1991   003194  0EEE               	movlw	low _motorL
  1992   003196  6E1D               	movwf	moveWhite@mL^0,c
  1993   003198  0EE5               	movlw	low _motorR
  1994   00319A  6E1E               	movwf	moveWhite@mR^0,c
  1995   00319C  ECD8  F021         	call	_moveWhite	;wreg free
  1996   0031A0                     
  1997                           ;return_func.c: 85:     if (path_step > 0) {
  1998   0031A0  5044               	movf	returnHome@path_step^0,w,c
  1999   0031A2  1045               	iorwf	(returnHome@path_step+1)^0,w,c
  2000   0031A4  B4D8               	btfsc	status,2,c
  2001   0031A6  EFD7  F018         	goto	u6851
  2002   0031AA  EFD9  F018         	goto	u6850
  2003   0031AE                     u6851:
  2004   0031AE  EF4D  F019         	goto	l725
  2005   0031B2                     u6850:
  2006   0031B2                     
  2007                           ;return_func.c: 86:         for (unsigned int i = path_step - 1; ; i--) {
  2008   0031B2  0EFF               	movlw	255
  2009   0031B4  2444               	addwf	returnHome@path_step^0,w,c
  2010   0031B6  6E4B               	movwf	returnHome@i^0,c
  2011   0031B8  0EFF               	movlw	255
  2012   0031BA  2045               	addwfc	(returnHome@path_step+1)^0,w,c
  2013   0031BC  6E4C               	movwf	(returnHome@i+1)^0,c
  2014   0031BE                     l7042:
  2015                           
  2016                           ;return_func.c: 88:             long time_ms = time[i]*65535*4*8192/64000000;
  2017   0031BE  90D8               	bcf	status,0,c
  2018   0031C0  344B               	rlcf	returnHome@i^0,w,c
  2019   0031C2  6ED9               	movwf	fsr2l,c
  2020   0031C4  344C               	rlcf	(returnHome@i+1)^0,w,c
  2021   0031C6  6EDA               	movwf	fsr2h,c
  2022   0031C8  0E00               	movlw	low _time
  2023   0031CA  26D9               	addwf	fsr2l,f,c
  2024   0031CC  0E02               	movlw	high _time
  2025   0031CE  22DA               	addwfc	fsr2h,f,c
  2026   0031D0  CFDE F002          	movff	postinc2,___lmul@multiplier
  2027   0031D4  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2028   0031D8  0E00               	movlw	0
  2029   0031DA  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2030   0031DC  0EFF               	movlw	-1
  2031   0031DE  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2032   0031E0  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2033   0031E2  0E00               	movlw	0
  2034   0031E4  6E06               	movwf	___lmul@multiplicand^0,c
  2035   0031E6  0E80               	movlw	128
  2036   0031E8  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2037   0031EA  0EFF               	movlw	255
  2038   0031EC  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2039   0031EE  0E7F               	movlw	127
  2040   0031F0  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2041   0031F2  ECB2  F01F         	call	___lmul	;wreg free
  2042   0031F6  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2043   0031FA  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2044   0031FE  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2045   003202  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2046   003206  0E00               	movlw	0
  2047   003208  6E12               	movwf	___aldiv@divisor^0,c
  2048   00320A  0E90               	movlw	144
  2049   00320C  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2050   00320E  0ED0               	movlw	208
  2051   003210  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2052   003212  0E03               	movlw	3
  2053   003214  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2054   003216  EC4F  F019         	call	___aldiv	;wreg free
  2055   00321A  C00E  F046         	movff	?___aldiv,returnHome@time_ms
  2056   00321E  C00F  F047         	movff	?___aldiv+1,returnHome@time_ms+1
  2057   003222  C010  F048         	movff	?___aldiv+2,returnHome@time_ms+2
  2058   003226  C011  F049         	movff	?___aldiv+3,returnHome@time_ms+3
  2059   00322A                     
  2060                           ;return_func.c: 89:             char action_turn = action[i];
  2061   00322A  0E3C               	movlw	low _action
  2062   00322C  244B               	addwf	returnHome@i^0,w,c
  2063   00322E  6ED9               	movwf	fsr2l,c
  2064   003230  0E01               	movlw	high _action
  2065   003232  204C               	addwfc	(returnHome@i+1)^0,w,c
  2066   003234  6EDA               	movwf	fsr2h,c
  2067   003236  50DF               	movf	indf2,w,c
  2068   003238  6E4A               	movwf	returnHome@action_turn^0,c
  2069   00323A                     
  2070                           ;return_func.c: 91:             if (action_turn == 0) {
  2071   00323A  504A               	movf	returnHome@action_turn^0,w,c
  2072   00323C  A4D8               	btfss	status,2,c
  2073   00323E  EF23  F019         	goto	u6861
  2074   003242  EF25  F019         	goto	u6860
  2075   003246                     u6861:
  2076   003246  EF35  F019         	goto	l7050
  2077   00324A                     u6860:
  2078   00324A                     
  2079                           ;return_func.c: 92:                 reverseStraight(mL, mR, time_ms);
  2080   00324A  C042  F038         	movff	returnHome@mL,reverseStraight@mL
  2081   00324E  C043  F039         	movff	returnHome@mR,reverseStraight@mR
  2082   003252  C046  F03A         	movff	returnHome@time_ms,reverseStraight@time_ms
  2083   003256  C047  F03B         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2084   00325A  C048  F03C         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2085   00325E  C049  F03D         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2086   003262  ECDA  F01A         	call	_reverseStraight	;wreg free
  2087                           
  2088                           ;return_func.c: 93:             } else {
  2089   003266  EF3D  F019         	goto	l7052
  2090   00326A                     l7050:
  2091                           
  2092                           ;return_func.c: 94:                 reverseTurn(mL, mR, action_turn);
  2093   00326A  C042  F01D         	movff	returnHome@mL,reverseTurn@mL
  2094   00326E  C043  F01E         	movff	returnHome@mR,reverseTurn@mR
  2095   003272  C04A  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2096   003276  EC6E  F017         	call	_reverseTurn	;wreg free
  2097   00327A                     l7052:
  2098                           
  2099                           ;return_func.c: 97:             if (i == 0) break;
  2100   00327A  504B               	movf	returnHome@i^0,w,c
  2101   00327C  104C               	iorwf	(returnHome@i+1)^0,w,c
  2102   00327E  A4D8               	btfss	status,2,c
  2103   003280  EF44  F019         	goto	u6871
  2104   003284  EF46  F019         	goto	u6870
  2105   003288                     u6871:
  2106   003288  EF48  F019         	goto	l7056
  2107   00328C                     u6870:
  2108   00328C  EF4D  F019         	goto	l725
  2109   003290                     l7056:
  2110                           
  2111                           ;return_func.c: 98:         }
  2112   003290  064B               	decf	returnHome@i^0,f,c
  2113   003292  A0D8               	btfss	status,0,c
  2114   003294  064C               	decf	(returnHome@i+1)^0,f,c
  2115   003296  EFDF  F018         	goto	l7042
  2116   00329A                     l725:
  2117   00329A  0003               	sleep		;# 
  2118   00329C  0012               	return		;funcret
  2119   00329E                     __end_of_returnHome:
  2120                           	callstack 0
  2121                           
  2122 ;; *************** function _reverseTurn *****************
  2123 ;; Defined at:
  2124 ;;		line 23 in file "return_func.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2127 ;;		 -> motorL(9), 
  2128 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2129 ;;		 -> motorR(9), 
  2130 ;;  actionStep      1   30[COMRAM] unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2142 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2145 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;Total ram usage:        5 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 5
  2149 ;; This function calls:
  2150 ;;		_backHalf
  2151 ;;		_left135
  2152 ;;		_left90
  2153 ;;		_right135
  2154 ;;		_right90
  2155 ;;		_turn180
  2156 ;; This function is called by:
  2157 ;;		_returnHome
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text3
  2162   002EDC                     __ptext3:
  2163                           	callstack 0
  2164   002EDC                     _reverseTurn:
  2165                           	callstack 24
  2166   002EDC                     
  2167                           ;return_func.c: 24:     if (actionStep == 1) {
  2168   002EDC  041F               	decf	reverseTurn@actionStep^0,w,c
  2169   002EDE  A4D8               	btfss	status,2,c
  2170   002EE0  EF74  F017         	goto	u6481
  2171   002EE4  EF76  F017         	goto	u6480
  2172   002EE8                     u6481:
  2173   002EE8  EF90  F017         	goto	l6662
  2174   002EEC                     u6480:
  2175   002EEC                     
  2176                           ;return_func.c: 25:         backHalf(mL,mR);
  2177   002EEC  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2178   002EF0  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2179   002EF4  EC4D  F023         	call	_backHalf	;wreg free
  2180   002EF8                     
  2181                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2182   002EF8  0E29               	movlw	41
  2183   002EFA  6E21               	movwf	(??_reverseTurn+1)^0,c
  2184   002EFC  0E96               	movlw	150
  2185   002EFE  6E20               	movwf	??_reverseTurn^0,c
  2186   002F00  0E7F               	movlw	127
  2187   002F02                     u7007:
  2188   002F02  2EE8               	decfsz	wreg,f,c
  2189   002F04  D7FE               	bra	u7007
  2190   002F06  2E20               	decfsz	??_reverseTurn^0,f,c
  2191   002F08  D7FC               	bra	u7007
  2192   002F0A  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2193   002F0C  D7FA               	bra	u7007
  2194   002F0E  0000               	nop	
  2195   002F10                     
  2196                           ;return_func.c: 27:         left90(mL,mR);
  2197   002F10  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2198   002F14  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2199   002F18  EC35  F023         	call	_left90	;wreg free
  2200                           
  2201                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2202   002F1C  EF1C  F018         	goto	l708
  2203   002F20                     l6662:
  2204   002F20  0E02               	movlw	2
  2205   002F22  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2206   002F24  A4D8               	btfss	status,2,c
  2207   002F26  EF97  F017         	goto	u6491
  2208   002F2A  EF99  F017         	goto	u6490
  2209   002F2E                     u6491:
  2210   002F2E  EFB3  F017         	goto	l6670
  2211   002F32                     u6490:
  2212   002F32                     
  2213                           ;return_func.c: 30:         backHalf(mL,mR);
  2214   002F32  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2215   002F36  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2216   002F3A  EC4D  F023         	call	_backHalf	;wreg free
  2217   002F3E                     
  2218                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2219   002F3E  0E29               	movlw	41
  2220   002F40  6E21               	movwf	(??_reverseTurn+1)^0,c
  2221   002F42  0E96               	movlw	150
  2222   002F44  6E20               	movwf	??_reverseTurn^0,c
  2223   002F46  0E7F               	movlw	127
  2224   002F48                     u7017:
  2225   002F48  2EE8               	decfsz	wreg,f,c
  2226   002F4A  D7FE               	bra	u7017
  2227   002F4C  2E20               	decfsz	??_reverseTurn^0,f,c
  2228   002F4E  D7FC               	bra	u7017
  2229   002F50  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2230   002F52  D7FA               	bra	u7017
  2231   002F54  0000               	nop	
  2232   002F56                     
  2233                           ;return_func.c: 32:         right90(mL,mR);
  2234   002F56  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2235   002F5A  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2236   002F5E  EC1D  F023         	call	_right90	;wreg free
  2237                           
  2238                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2239   002F62  EF1C  F018         	goto	l708
  2240   002F66                     l6670:
  2241   002F66  0E03               	movlw	3
  2242   002F68  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2243   002F6A  A4D8               	btfss	status,2,c
  2244   002F6C  EFBA  F017         	goto	u6501
  2245   002F70  EFBC  F017         	goto	u6500
  2246   002F74                     u6501:
  2247   002F74  EFD6  F017         	goto	l6678
  2248   002F78                     u6500:
  2249   002F78                     
  2250                           ;return_func.c: 35:          backHalf(mL,mR);
  2251   002F78  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2252   002F7C  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2253   002F80  EC4D  F023         	call	_backHalf	;wreg free
  2254   002F84                     
  2255                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2256   002F84  0E29               	movlw	41
  2257   002F86  6E21               	movwf	(??_reverseTurn+1)^0,c
  2258   002F88  0E96               	movlw	150
  2259   002F8A  6E20               	movwf	??_reverseTurn^0,c
  2260   002F8C  0E7F               	movlw	127
  2261   002F8E                     u7027:
  2262   002F8E  2EE8               	decfsz	wreg,f,c
  2263   002F90  D7FE               	bra	u7027
  2264   002F92  2E20               	decfsz	??_reverseTurn^0,f,c
  2265   002F94  D7FC               	bra	u7027
  2266   002F96  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2267   002F98  D7FA               	bra	u7027
  2268   002F9A  0000               	nop	
  2269   002F9C                     
  2270                           ;return_func.c: 37:         turn180(mL,mR);
  2271   002F9C  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2272   002FA0  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2273   002FA4  ECEB  F022         	call	_turn180	;wreg free
  2274                           
  2275                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2276   002FA8  EF1C  F018         	goto	l708
  2277   002FAC                     l6678:
  2278   002FAC  0E04               	movlw	4
  2279   002FAE  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2280   002FB0  A4D8               	btfss	status,2,c
  2281   002FB2  EFDD  F017         	goto	u6511
  2282   002FB6  EFDF  F017         	goto	u6510
  2283   002FBA                     u6511:
  2284   002FBA  EFF9  F017         	goto	l6686
  2285   002FBE                     u6510:
  2286   002FBE                     
  2287                           ;return_func.c: 40:         backHalf(mL,mR);
  2288   002FBE  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2289   002FC2  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2290   002FC6  EC4D  F023         	call	_backHalf	;wreg free
  2291   002FCA                     
  2292                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2293   002FCA  0E29               	movlw	41
  2294   002FCC  6E21               	movwf	(??_reverseTurn+1)^0,c
  2295   002FCE  0E96               	movlw	150
  2296   002FD0  6E20               	movwf	??_reverseTurn^0,c
  2297   002FD2  0E7F               	movlw	127
  2298   002FD4                     u7037:
  2299   002FD4  2EE8               	decfsz	wreg,f,c
  2300   002FD6  D7FE               	bra	u7037
  2301   002FD8  2E20               	decfsz	??_reverseTurn^0,f,c
  2302   002FDA  D7FC               	bra	u7037
  2303   002FDC  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2304   002FDE  D7FA               	bra	u7037
  2305   002FE0  0000               	nop	
  2306   002FE2                     
  2307                           ;return_func.c: 42:         left135(mL,mR);
  2308   002FE2  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2309   002FE6  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2310   002FEA  ECA0  F022         	call	_left135	;wreg free
  2311                           
  2312                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2313   002FEE  EF1C  F018         	goto	l708
  2314   002FF2                     l6686:
  2315   002FF2  0E05               	movlw	5
  2316   002FF4  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2317   002FF6  A4D8               	btfss	status,2,c
  2318   002FF8  EF00  F018         	goto	u6521
  2319   002FFC  EF02  F018         	goto	u6520
  2320   003000                     u6521:
  2321   003000  EF1C  F018         	goto	l702
  2322   003004                     u6520:
  2323   003004                     
  2324                           ;return_func.c: 44:         backHalf(mL,mR);
  2325   003004  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2326   003008  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2327   00300C  EC4D  F023         	call	_backHalf	;wreg free
  2328   003010                     
  2329                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2330   003010  0E29               	movlw	41
  2331   003012  6E21               	movwf	(??_reverseTurn+1)^0,c
  2332   003014  0E96               	movlw	150
  2333   003016  6E20               	movwf	??_reverseTurn^0,c
  2334   003018  0E7F               	movlw	127
  2335   00301A                     u7047:
  2336   00301A  2EE8               	decfsz	wreg,f,c
  2337   00301C  D7FE               	bra	u7047
  2338   00301E  2E20               	decfsz	??_reverseTurn^0,f,c
  2339   003020  D7FC               	bra	u7047
  2340   003022  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2341   003024  D7FA               	bra	u7047
  2342   003026  0000               	nop	
  2343   003028                     
  2344                           ;return_func.c: 46:         right135(mL,mR);
  2345   003028  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2346   00302C  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2347   003030  EC6E  F022         	call	_right135	;wreg free
  2348   003034  EF1C  F018         	goto	l708
  2349   003038                     l702:
  2350   003038                     l708:
  2351   003038  0012               	return		;funcret
  2352   00303A                     __end_of_reverseTurn:
  2353                           	callstack 0
  2354                           
  2355 ;; *************** function _reverseStraight *****************
  2356 ;; Defined at:
  2357 ;;		line 59 in file "return_func.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  mL              1   55[COMRAM] PTR struct DC_motor
  2360 ;;		 -> motorL(9), 
  2361 ;;  mR              1   56[COMRAM] PTR struct DC_motor
  2362 ;;		 -> motorR(9), 
  2363 ;;  time_ms         4   57[COMRAM] long 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  delayMs         2   63[COMRAM] unsigned int 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2375 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2378 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2379 ;;Total ram usage:       10 bytes
  2380 ;; Hardware stack levels used: 1
  2381 ;; Hardware stack levels required when called: 4
  2382 ;; This function calls:
  2383 ;;		_customDelayMs
  2384 ;;		_fullSpeedAhead
  2385 ;;		_stop
  2386 ;; This function is called by:
  2387 ;;		_returnHome
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text4
  2392   0035B4                     __ptext4:
  2393                           	callstack 0
  2394   0035B4                     _reverseStraight:
  2395                           	callstack 25
  2396   0035B4                     
  2397                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2398   0035B4  0E03               	movlw	3
  2399   0035B6  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2400   0035B8  0EE8               	movlw	232
  2401   0035BA  6E40               	movwf	reverseStraight@delayMs^0,c
  2402   0035BC                     
  2403                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2404   0035BC  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2405   0035BE  EFED  F01A         	goto	u6531
  2406   0035C2  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2407   0035C4  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2408   0035C6  E10B               	bnz	u6530
  2409   0035C8  0E7D               	movlw	125
  2410   0035CA  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2411   0035CC  0E15               	movlw	21
  2412   0035CE  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2413   0035D0  A0D8               	btfss	status,0,c
  2414   0035D2  EFED  F01A         	goto	u6531
  2415   0035D6  EFEF  F01A         	goto	u6530
  2416   0035DA                     u6531:
  2417   0035DA  EFF5  F01A         	goto	l6700
  2418   0035DE                     u6530:
  2419   0035DE  0E0B               	movlw	11
  2420   0035E0  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2421   0035E2  0EB8               	movlw	184
  2422   0035E4  6E40               	movwf	reverseStraight@delayMs^0,c
  2423   0035E6  EF32  F01B         	goto	l6710
  2424   0035EA                     l6700:
  2425   0035EA  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2426   0035EC  EF04  F01B         	goto	u6541
  2427   0035F0  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2428   0035F2  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2429   0035F4  E10B               	bnz	u6540
  2430   0035F6  0EB9               	movlw	185
  2431   0035F8  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2432   0035FA  0E0B               	movlw	11
  2433   0035FC  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2434   0035FE  A0D8               	btfss	status,0,c
  2435   003600  EF04  F01B         	goto	u6541
  2436   003604  EF06  F01B         	goto	u6540
  2437   003608                     u6541:
  2438   003608  EF1D  F01B         	goto	l6706
  2439   00360C                     u6540:
  2440   00360C  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2441   00360E  EF15  F01B         	goto	u6551
  2442   003612  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2443   003614  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2444   003616  E10B               	bnz	u6550
  2445   003618  0E05               	movlw	5
  2446   00361A  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2447   00361C  0E10               	movlw	16
  2448   00361E  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2449   003620  A0D8               	btfss	status,0,c
  2450   003622  EF15  F01B         	goto	u6551
  2451   003626  EF17  F01B         	goto	u6550
  2452   00362A                     u6551:
  2453   00362A  EF1D  F01B         	goto	l6706
  2454   00362E                     u6550:
  2455   00362E  0E07               	movlw	7
  2456   003630  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2457   003632  0ED0               	movlw	208
  2458   003634  6E40               	movwf	reverseStraight@delayMs^0,c
  2459   003636  EF32  F01B         	goto	l6710
  2460   00363A                     l6706:
  2461   00363A  BE3D               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2462   00363C  EF2E  F01B         	goto	u6560
  2463   003640  503D               	movf	(reverseStraight@time_ms+3)^0,w,c
  2464   003642  103C               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2465   003644  E109               	bnz	u6561
  2466   003646  0EB8               	movlw	184
  2467   003648  5C3A               	subwf	reverseStraight@time_ms^0,w,c
  2468   00364A  0E0B               	movlw	11
  2469   00364C  583B               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2470   00364E  B0D8               	btfsc	status,0,c
  2471   003650  EF2C  F01B         	goto	u6561
  2472   003654  EF2E  F01B         	goto	u6560
  2473   003658                     u6561:
  2474   003658  EF32  F01B         	goto	l6710
  2475   00365C                     u6560:
  2476   00365C  0E03               	movlw	3
  2477   00365E  6E41               	movwf	(reverseStraight@delayMs+1)^0,c
  2478   003660  0EE8               	movlw	232
  2479   003662  6E40               	movwf	reverseStraight@delayMs^0,c
  2480   003664                     l6710:
  2481                           
  2482                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2483   003664  0EEE               	movlw	low _motorL
  2484   003666  6E33               	movwf	fullSpeedAhead@mL^0,c
  2485   003668  0EE5               	movlw	low _motorR
  2486   00366A  6E34               	movwf	fullSpeedAhead@mR^0,c
  2487   00366C  ECC5  F01B         	call	_fullSpeedAhead	;wreg free
  2488   003670                     
  2489                           ;return_func.c: 70:     customDelayMs(delayMs);
  2490   003670  C040  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2491   003674  C041  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2492   003678  EC6E  F021         	call	_customDelayMs	;wreg free
  2493   00367C                     
  2494                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2495   00367C  0EEE               	movlw	low _motorL
  2496   00367E  6E14               	movwf	stop@mL^0,c
  2497   003680  0EE5               	movlw	low _motorR
  2498   003682  6E15               	movwf	stop@mR^0,c
  2499   003684  EC78  F01E         	call	_stop	;wreg free
  2500   003688                     
  2501                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2502   003688  0E19               	movlw	25
  2503   00368A  6E3F               	movwf	(??_reverseStraight+1)^0,c
  2504   00368C  0E5A               	movlw	90
  2505   00368E  6E3E               	movwf	??_reverseStraight^0,c
  2506   003690  0EB2               	movlw	178
  2507   003692                     u7057:
  2508   003692  2EE8               	decfsz	wreg,f,c
  2509   003694  D7FE               	bra	u7057
  2510   003696  2E3E               	decfsz	??_reverseStraight^0,f,c
  2511   003698  D7FC               	bra	u7057
  2512   00369A  2E3F               	decfsz	(??_reverseStraight+1)^0,f,c
  2513   00369C  D7FA               	bra	u7057
  2514   00369E  0012               	return		;funcret
  2515   0036A0                     __end_of_reverseStraight:
  2516                           	callstack 0
  2517                           
  2518 ;; *************** function _fullSpeedAhead *****************
  2519 ;; Defined at:
  2520 ;;		line 144 in file "dc_motor.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  mL              1   50[COMRAM] PTR struct DC_motor
  2523 ;;		 -> motorL(9), 
  2524 ;;  mR              1   51[COMRAM] PTR struct DC_motor
  2525 ;;		 -> motorR(9), 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  power           2   53[COMRAM] int 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2539 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2540 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2541 ;;Total ram usage:        5 bytes
  2542 ;; Hardware stack levels used: 1
  2543 ;; Hardware stack levels required when called: 3
  2544 ;; This function calls:
  2545 ;;		___flmul
  2546 ;;		___fltol
  2547 ;;		___xxtofl
  2548 ;;		_setMotorPWM
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;;		_reverseStraight
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text5
  2556   00378A                     __ptext5:
  2557                           	callstack 0
  2558   00378A                     _fullSpeedAhead:
  2559                           	callstack 25
  2560   00378A                     
  2561                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2562   00378A  5033               	movf	fullSpeedAhead@mL^0,w,c
  2563   00378C  6ED9               	movwf	fsr2l,c
  2564   00378E  6ADA               	clrf	fsr2h,c
  2565   003790  0E01               	movlw	1
  2566   003792  26D9               	addwf	fsr2l,f,c
  2567   003794  0E01               	movlw	1
  2568   003796  6EDF               	movwf	indf2,c
  2569                           
  2570                           ;dc_motor.c: 148:     mR->direction = 1;
  2571   003798  5034               	movf	fullSpeedAhead@mR^0,w,c
  2572   00379A  6ED9               	movwf	fsr2l,c
  2573   00379C  6ADA               	clrf	fsr2h,c
  2574   00379E  0E01               	movlw	1
  2575   0037A0  26D9               	addwf	fsr2l,f,c
  2576   0037A2  0E01               	movlw	1
  2577   0037A4  6EDF               	movwf	indf2,c
  2578   0037A6                     
  2579                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2580   0037A6  0E00               	movlw	0
  2581   0037A8  6E37               	movwf	(fullSpeedAhead@power+1)^0,c
  2582   0037AA  0E00               	movlw	0
  2583   0037AC  6E36               	movwf	fullSpeedAhead@power^0,c
  2584   0037AE                     l6214:
  2585                           
  2586                           ;dc_motor.c: 151:         mL->power = power;
  2587   0037AE  5033               	movf	fullSpeedAhead@mL^0,w,c
  2588   0037B0  6ED9               	movwf	fsr2l,c
  2589   0037B2  6ADA               	clrf	fsr2h,c
  2590   0037B4  C036  FFDF         	movff	fullSpeedAhead@power,indf2
  2591   0037B8                     
  2592                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2593   0037B8  5034               	movf	fullSpeedAhead@mR^0,w,c
  2594   0037BA  6ED9               	movwf	fsr2l,c
  2595   0037BC  6ADA               	clrf	fsr2h,c
  2596   0037BE  0E66               	movlw	102
  2597   0037C0  6E14               	movwf	___flmul@a^0,c
  2598   0037C2  0E66               	movlw	102
  2599   0037C4  6E15               	movwf	(___flmul@a+1)^0,c
  2600   0037C6  0E86               	movlw	134
  2601   0037C8  6E16               	movwf	(___flmul@a+2)^0,c
  2602   0037CA  0E3F               	movlw	63
  2603   0037CC  6E17               	movwf	(___flmul@a+3)^0,c
  2604   0037CE  C036  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2605   0037D2  C037  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2606   0037D6  0E00               	movlw	0
  2607   0037D8  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2608   0037DA  0EFF               	movlw	-1
  2609   0037DC  6E04               	movwf	(___xxtofl@val+2)^0,c
  2610   0037DE  6E05               	movwf	(___xxtofl@val+3)^0,c
  2611   0037E0  0E01               	movlw	1
  2612   0037E2  EC14  F015         	call	___xxtofl
  2613   0037E6  C002  F010         	movff	?___xxtofl,___flmul@b
  2614   0037EA  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2615   0037EE  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2616   0037F2  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2617   0037F6  EC8C  F00D         	call	___flmul	;wreg free
  2618   0037FA  C010  F029         	movff	?___flmul,___fltol@f1
  2619   0037FE  C011  F02A         	movff	?___flmul+1,___fltol@f1+1
  2620   003802  C012  F02B         	movff	?___flmul+2,___fltol@f1+2
  2621   003806  C013  F02C         	movff	?___flmul+3,___fltol@f1+3
  2622   00380A  ECD5  F019         	call	___fltol	;wreg free
  2623   00380E  5029               	movf	?___fltol^0,w,c
  2624   003810  6EDF               	movwf	indf2,c
  2625   003812                     
  2626                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2627   003812  C033  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2628   003816  EC1D  F018         	call	_setMotorPWM	;wreg free
  2629   00381A                     
  2630                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2631   00381A  C034  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2632   00381E  EC1D  F018         	call	_setMotorPWM	;wreg free
  2633   003822                     
  2634                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2635   003822  0E0B               	movlw	11
  2636   003824  6E35               	movwf	??_fullSpeedAhead^0,c
  2637   003826  0E62               	movlw	98
  2638   003828                     u7067:
  2639   003828  2EE8               	decfsz	wreg,f,c
  2640   00382A  D7FE               	bra	u7067
  2641   00382C  2E35               	decfsz	??_fullSpeedAhead^0,f,c
  2642   00382E  D7FC               	bra	u7067
  2643   003830  D000               	nop2	
  2644   003832                     
  2645                           ;dc_motor.c: 160:     }
  2646   003832  4A36               	infsnz	fullSpeedAhead@power^0,f,c
  2647   003834  2A37               	incf	(fullSpeedAhead@power+1)^0,f,c
  2648   003836  BE37               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2649   003838  EF27  F01C         	goto	u6001
  2650   00383C  5037               	movf	(fullSpeedAhead@power+1)^0,w,c
  2651   00383E  E109               	bnz	u6000
  2652   003840  0E33               	movlw	51
  2653   003842  5C36               	subwf	fullSpeedAhead@power^0,w,c
  2654   003844  A0D8               	btfss	status,0,c
  2655   003846  EF27  F01C         	goto	u6001
  2656   00384A  EF29  F01C         	goto	u6000
  2657   00384E                     u6001:
  2658   00384E  EFD7  F01B         	goto	l6214
  2659   003852                     u6000:
  2660   003852  0012               	return		;funcret
  2661   003854                     __end_of_fullSpeedAhead:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _customDelayMs *****************
  2665 ;; Defined at:
  2666 ;;		line 52 in file "return_func.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  i               2    4[COMRAM] unsigned int 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2680 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;Total ram usage:        5 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_reverseStraight
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text6
  2695   0042DC                     __ptext6:
  2696                           	callstack 0
  2697   0042DC                     _customDelayMs:
  2698                           	callstack 27
  2699   0042DC                     
  2700                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2701   0042DC  0E00               	movlw	0
  2702   0042DE  6E06               	movwf	(customDelayMs@i+1)^0,c
  2703   0042E0  0E00               	movlw	0
  2704   0042E2  6E05               	movwf	customDelayMs@i^0,c
  2705   0042E4  EF7E  F021         	goto	l711
  2706   0042E8                     l6276:
  2707                           
  2708                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2709   0042E8  0E15               	movlw	21
  2710   0042EA  6E04               	movwf	??_customDelayMs^0,c
  2711   0042EC  0EC6               	movlw	198
  2712   0042EE                     u7077:
  2713   0042EE  2EE8               	decfsz	wreg,f,c
  2714   0042F0  D7FE               	bra	u7077
  2715   0042F2  2E04               	decfsz	??_customDelayMs^0,f,c
  2716   0042F4  D7FC               	bra	u7077
  2717   0042F6  D000               	nop2	
  2718   0042F8                     
  2719                           ;return_func.c: 55:     }
  2720   0042F8  4A05               	infsnz	customDelayMs@i^0,f,c
  2721   0042FA  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2722   0042FC                     l711:
  2723   0042FC  5002               	movf	customDelayMs@milliseconds^0,w,c
  2724   0042FE  5C05               	subwf	customDelayMs@i^0,w,c
  2725   004300  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2726   004302  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2727   004304  A0D8               	btfss	status,0,c
  2728   004306  EF87  F021         	goto	u6021
  2729   00430A  EF89  F021         	goto	u6020
  2730   00430E                     u6021:
  2731   00430E  EF74  F021         	goto	l6276
  2732   004312                     u6020:
  2733   004312  0012               	return		;funcret
  2734   004314                     __end_of_customDelayMs:
  2735                           	callstack 0
  2736                           
  2737 ;; *************** function _moveWhite *****************
  2738 ;; Defined at:
  2739 ;;		line 321 in file "dc_motor.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2742 ;;		 -> motorL(9), 
  2743 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2744 ;;		 -> motorR(9), 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;		None
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2756 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2759 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2760 ;;Total ram usage:        4 bytes
  2761 ;; Hardware stack levels used: 1
  2762 ;; Hardware stack levels required when called: 5
  2763 ;; This function calls:
  2764 ;;		_backHalf
  2765 ;;		_turn180
  2766 ;; This function is called by:
  2767 ;;		_returnHome
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text7
  2772   0043B0                     __ptext7:
  2773                           	callstack 0
  2774   0043B0                     _moveWhite:
  2775                           	callstack 24
  2776   0043B0                     
  2777                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2778   0043B0  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2779   0043B4  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2780   0043B8  EC4D  F023         	call	_backHalf	;wreg free
  2781   0043BC                     
  2782                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2783   0043BC  0E29               	movlw	41
  2784   0043BE  6E20               	movwf	(??_moveWhite+1)^0,c
  2785   0043C0  0E96               	movlw	150
  2786   0043C2  6E1F               	movwf	??_moveWhite^0,c
  2787   0043C4  0E7F               	movlw	127
  2788   0043C6                     u7087:
  2789   0043C6  2EE8               	decfsz	wreg,f,c
  2790   0043C8  D7FE               	bra	u7087
  2791   0043CA  2E1F               	decfsz	??_moveWhite^0,f,c
  2792   0043CC  D7FC               	bra	u7087
  2793   0043CE  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2794   0043D0  D7FA               	bra	u7087
  2795   0043D2  0000               	nop	
  2796   0043D4                     
  2797                           ;dc_motor.c: 326:     turn180(mL,mR);
  2798   0043D4  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2799   0043D8  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2800   0043DC  ECEB  F022         	call	_turn180	;wreg free
  2801   0043E0  0012               	return		;funcret
  2802   0043E2                     __end_of_moveWhite:
  2803                           	callstack 0
  2804                           
  2805 ;; *************** function ___lmul *****************
  2806 ;; Defined at:
  2807 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  multiplier      4    1[COMRAM] unsigned long 
  2810 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  product         4    9[COMRAM] unsigned long 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  4    1[COMRAM] unsigned long 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2822 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2823 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;Total ram usage:       12 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; Hardware stack levels required when called: 1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_returnHome
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text8
  2837   003F64                     __ptext8:
  2838                           	callstack 0
  2839   003F64                     ___lmul:
  2840                           	callstack 28
  2841   003F64  0E00               	movlw	0
  2842   003F66  6E0A               	movwf	___lmul@product^0,c
  2843   003F68  0E00               	movlw	0
  2844   003F6A  6E0B               	movwf	(___lmul@product+1)^0,c
  2845   003F6C  0E00               	movlw	0
  2846   003F6E  6E0C               	movwf	(___lmul@product+2)^0,c
  2847   003F70  0E00               	movlw	0
  2848   003F72  6E0D               	movwf	(___lmul@product+3)^0,c
  2849   003F74                     l6720:
  2850   003F74  A002               	btfss	___lmul@multiplier^0,0,c
  2851   003F76  EFBF  F01F         	goto	u6571
  2852   003F7A  EFC1  F01F         	goto	u6570
  2853   003F7E                     u6571:
  2854   003F7E  EFC9  F01F         	goto	l6724
  2855   003F82                     u6570:
  2856   003F82  5006               	movf	___lmul@multiplicand^0,w,c
  2857   003F84  260A               	addwf	___lmul@product^0,f,c
  2858   003F86  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  2859   003F88  220B               	addwfc	(___lmul@product+1)^0,f,c
  2860   003F8A  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  2861   003F8C  220C               	addwfc	(___lmul@product+2)^0,f,c
  2862   003F8E  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  2863   003F90  220D               	addwfc	(___lmul@product+3)^0,f,c
  2864   003F92                     l6724:
  2865   003F92  90D8               	bcf	status,0,c
  2866   003F94  3606               	rlcf	___lmul@multiplicand^0,f,c
  2867   003F96  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2868   003F98  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2869   003F9A  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2870   003F9C  90D8               	bcf	status,0,c
  2871   003F9E  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  2872   003FA0  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  2873   003FA2  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  2874   003FA4  3202               	rrcf	___lmul@multiplier^0,f,c
  2875   003FA6  5002               	movf	___lmul@multiplier^0,w,c
  2876   003FA8  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  2877   003FAA  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  2878   003FAC  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  2879   003FAE  A4D8               	btfss	status,2,c
  2880   003FB0  EFDC  F01F         	goto	u6581
  2881   003FB4  EFDE  F01F         	goto	u6580
  2882   003FB8                     u6581:
  2883   003FB8  EFBA  F01F         	goto	l6720
  2884   003FBC                     u6580:
  2885   003FBC  C00A  F002         	movff	___lmul@product,?___lmul
  2886   003FC0  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  2887   003FC4  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  2888   003FC8  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  2889   003FCC  0012               	return		;funcret
  2890   003FCE                     __end_of___lmul:
  2891                           	callstack 0
  2892                           
  2893 ;; *************** function ___aldiv *****************
  2894 ;; Defined at:
  2895 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  dividend        4   13[COMRAM] long 
  2898 ;;  divisor         4   17[COMRAM] long 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  quotient        4   23[COMRAM] long 
  2901 ;;  sign            1   22[COMRAM] unsigned char 
  2902 ;;  counter         1   21[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  4   13[COMRAM] long 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2912 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2915 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2916 ;;Total ram usage:       14 bytes
  2917 ;; Hardware stack levels used: 1
  2918 ;; Hardware stack levels required when called: 1
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_returnHome
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text9
  2927   00329E                     __ptext9:
  2928                           	callstack 0
  2929   00329E                     ___aldiv:
  2930                           	callstack 28
  2931   00329E  0E00               	movlw	0
  2932   0032A0  6E17               	movwf	___aldiv@sign^0,c
  2933   0032A2  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  2934   0032A4  EF58  F019         	goto	u6590
  2935   0032A8  EF56  F019         	goto	u6591
  2936   0032AC                     u6591:
  2937   0032AC  EF62  F019         	goto	l6736
  2938   0032B0                     u6590:
  2939   0032B0  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  2940   0032B2  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  2941   0032B4  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  2942   0032B6  6C12               	negf	___aldiv@divisor^0,c
  2943   0032B8  0E00               	movlw	0
  2944   0032BA  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  2945   0032BC  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  2946   0032BE  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  2947   0032C0  0E01               	movlw	1
  2948   0032C2  6E17               	movwf	___aldiv@sign^0,c
  2949   0032C4                     l6736:
  2950   0032C4  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  2951   0032C6  EF69  F019         	goto	u6600
  2952   0032CA  EF67  F019         	goto	u6601
  2953   0032CE                     u6601:
  2954   0032CE  EF73  F019         	goto	l6742
  2955   0032D2                     u6600:
  2956   0032D2  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  2957   0032D4  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  2958   0032D6  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  2959   0032D8  6C0E               	negf	___aldiv@dividend^0,c
  2960   0032DA  0E00               	movlw	0
  2961   0032DC  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  2962   0032DE  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  2963   0032E0  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  2964   0032E2  0E01               	movlw	1
  2965   0032E4  1A17               	xorwf	___aldiv@sign^0,f,c
  2966   0032E6                     l6742:
  2967   0032E6  0E00               	movlw	0
  2968   0032E8  6E18               	movwf	___aldiv@quotient^0,c
  2969   0032EA  0E00               	movlw	0
  2970   0032EC  6E19               	movwf	(___aldiv@quotient+1)^0,c
  2971   0032EE  0E00               	movlw	0
  2972   0032F0  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  2973   0032F2  0E00               	movlw	0
  2974   0032F4  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  2975   0032F6  5012               	movf	___aldiv@divisor^0,w,c
  2976   0032F8  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  2977   0032FA  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  2978   0032FC  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  2979   0032FE  B4D8               	btfsc	status,2,c
  2980   003300  EF84  F019         	goto	u6611
  2981   003304  EF86  F019         	goto	u6610
  2982   003308                     u6611:
  2983   003308  EFBC  F019         	goto	l6764
  2984   00330C                     u6610:
  2985   00330C  0E01               	movlw	1
  2986   00330E  6E16               	movwf	___aldiv@counter^0,c
  2987   003310  EF90  F019         	goto	l6750
  2988   003314                     l6748:
  2989   003314  90D8               	bcf	status,0,c
  2990   003316  3612               	rlcf	___aldiv@divisor^0,f,c
  2991   003318  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  2992   00331A  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  2993   00331C  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  2994   00331E  2A16               	incf	___aldiv@counter^0,f,c
  2995   003320                     l6750:
  2996   003320  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  2997   003322  EF95  F019         	goto	u6621
  2998   003326  EF97  F019         	goto	u6620
  2999   00332A                     u6621:
  3000   00332A  EF8A  F019         	goto	l6748
  3001   00332E                     u6620:
  3002   00332E                     l6752:
  3003   00332E  90D8               	bcf	status,0,c
  3004   003330  3618               	rlcf	___aldiv@quotient^0,f,c
  3005   003332  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  3006   003334  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  3007   003336  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  3008   003338  5012               	movf	___aldiv@divisor^0,w,c
  3009   00333A  5C0E               	subwf	___aldiv@dividend^0,w,c
  3010   00333C  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3011   00333E  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  3012   003340  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3013   003342  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  3014   003344  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3015   003346  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  3016   003348  A0D8               	btfss	status,0,c
  3017   00334A  EFA9  F019         	goto	u6631
  3018   00334E  EFAB  F019         	goto	u6630
  3019   003352                     u6631:
  3020   003352  EFB4  F019         	goto	l6760
  3021   003356                     u6630:
  3022   003356  5012               	movf	___aldiv@divisor^0,w,c
  3023   003358  5E0E               	subwf	___aldiv@dividend^0,f,c
  3024   00335A  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3025   00335C  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  3026   00335E  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3027   003360  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3028   003362  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3029   003364  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3030   003366  8018               	bsf	___aldiv@quotient^0,0,c
  3031   003368                     l6760:
  3032   003368  90D8               	bcf	status,0,c
  3033   00336A  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3034   00336C  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3035   00336E  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3036   003370  3212               	rrcf	___aldiv@divisor^0,f,c
  3037   003372  2E16               	decfsz	___aldiv@counter^0,f,c
  3038   003374  EF97  F019         	goto	l6752
  3039   003378                     l6764:
  3040   003378  5017               	movf	___aldiv@sign^0,w,c
  3041   00337A  B4D8               	btfsc	status,2,c
  3042   00337C  EFC2  F019         	goto	u6641
  3043   003380  EFC4  F019         	goto	u6640
  3044   003384                     u6641:
  3045   003384  EFCC  F019         	goto	l6768
  3046   003388                     u6640:
  3047   003388  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3048   00338A  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3049   00338C  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3050   00338E  6C18               	negf	___aldiv@quotient^0,c
  3051   003390  0E00               	movlw	0
  3052   003392  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3053   003394  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3054   003396  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3055   003398                     l6768:
  3056   003398  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3057   00339C  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3058   0033A0  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3059   0033A4  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3060   0033A8  0012               	return		;funcret
  3061   0033AA                     __end_of___aldiv:
  3062                           	callstack 0
  3063                           
  3064 ;; *************** function _reading_hue *****************
  3065 ;; Defined at:
  3066 ;;		line 91 in file "color.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  cCurr           1   54[COMRAM] PTR struct colors
  3069 ;;		 -> colorCurrent(10), 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  led_state      50    0        unsigned char [50]
  3072 ;;  hue             2   58[COMRAM] unsigned int 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  2   54[COMRAM] unsigned int 
  3075 ;; Registers used:
  3076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3083 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3085 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3086 ;;Total ram usage:        6 bytes
  3087 ;; Hardware stack levels used: 1
  3088 ;; Hardware stack levels required when called: 4
  3089 ;; This function calls:
  3090 ;;		_color_read_Blue
  3091 ;;		_color_read_Clear
  3092 ;;		_color_read_Green
  3093 ;;		_color_read_Red
  3094 ;;		_convert_rgb2hue
  3095 ;; This function is called by:
  3096 ;;		_main
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text10
  3101   0036A0                     __ptext10:
  3102                           	callstack 0
  3103   0036A0                     _reading_hue:
  3104                           	callstack 26
  3105   0036A0                     
  3106                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3107   0036A0  807F               	bsf	127,0,c	;volatile
  3108                           
  3109                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3110   0036A2  9E7D               	bcf	125,7,c	;volatile
  3111                           
  3112                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3113   0036A4  9679               	bcf	121,3,c	;volatile
  3114   0036A6                     
  3115                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3116   0036A6  0E29               	movlw	41
  3117   0036A8  6E3A               	movwf	(??_reading_hue+1)^0,c
  3118   0036AA  0E96               	movlw	150
  3119   0036AC  6E39               	movwf	??_reading_hue^0,c
  3120   0036AE  0E7F               	movlw	127
  3121   0036B0                     u7097:
  3122   0036B0  2EE8               	decfsz	wreg,f,c
  3123   0036B2  D7FE               	bra	u7097
  3124   0036B4  2E39               	decfsz	??_reading_hue^0,f,c
  3125   0036B6  D7FC               	bra	u7097
  3126   0036B8  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3127   0036BA  D7FA               	bra	u7097
  3128   0036BC  0000               	nop	
  3129   0036BE                     
  3130                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3131   0036BE  ECE7  F01F         	call	_color_read_Red	;wreg free
  3132   0036C2  5037               	movf	reading_hue@cCurr^0,w,c
  3133   0036C4  6ED9               	movwf	fsr2l,c
  3134   0036C6  6ADA               	clrf	fsr2h,c
  3135   0036C8  C006  FFDE         	movff	?_color_read_Red,postinc2
  3136   0036CC  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3137   0036D0                     
  3138                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3139   0036D0  907F               	bcf	127,0,c	;volatile
  3140   0036D2                     
  3141                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3142   0036D2  8E7D               	bsf	125,7,c	;volatile
  3143   0036D4                     
  3144                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3145   0036D4  9679               	bcf	121,3,c	;volatile
  3146   0036D6                     
  3147                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3148   0036D6  0E29               	movlw	41
  3149   0036D8  6E3A               	movwf	(??_reading_hue+1)^0,c
  3150   0036DA  0E96               	movlw	150
  3151   0036DC  6E39               	movwf	??_reading_hue^0,c
  3152   0036DE  0E7F               	movlw	127
  3153   0036E0                     u7107:
  3154   0036E0  2EE8               	decfsz	wreg,f,c
  3155   0036E2  D7FE               	bra	u7107
  3156   0036E4  2E39               	decfsz	??_reading_hue^0,f,c
  3157   0036E6  D7FC               	bra	u7107
  3158   0036E8  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3159   0036EA  D7FA               	bra	u7107
  3160   0036EC  0000               	nop	
  3161                           
  3162                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3163   0036EE  EC0F  F020         	call	_color_read_Green	;wreg free
  3164   0036F2  5037               	movf	reading_hue@cCurr^0,w,c
  3165   0036F4  6ED9               	movwf	fsr2l,c
  3166   0036F6  6ADA               	clrf	fsr2h,c
  3167   0036F8  0E02               	movlw	2
  3168   0036FA  26D9               	addwf	fsr2l,f,c
  3169   0036FC  C006  FFDE         	movff	?_color_read_Green,postinc2
  3170   003700  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3171   003704                     
  3172                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3173   003704  907F               	bcf	127,0,c	;volatile
  3174   003706                     
  3175                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3176   003706  9E7D               	bcf	125,7,c	;volatile
  3177   003708                     
  3178                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3179   003708  8679               	bsf	121,3,c	;volatile
  3180   00370A                     
  3181                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3182   00370A  0E29               	movlw	41
  3183   00370C  6E3A               	movwf	(??_reading_hue+1)^0,c
  3184   00370E  0E96               	movlw	150
  3185   003710  6E39               	movwf	??_reading_hue^0,c
  3186   003712  0E7F               	movlw	127
  3187   003714                     u7117:
  3188   003714  2EE8               	decfsz	wreg,f,c
  3189   003716  D7FE               	bra	u7117
  3190   003718  2E39               	decfsz	??_reading_hue^0,f,c
  3191   00371A  D7FC               	bra	u7117
  3192   00371C  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3193   00371E  D7FA               	bra	u7117
  3194   003720  0000               	nop	
  3195   003722                     
  3196                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3197   003722  EC5F  F020         	call	_color_read_Blue	;wreg free
  3198   003726  5037               	movf	reading_hue@cCurr^0,w,c
  3199   003728  6ED9               	movwf	fsr2l,c
  3200   00372A  6ADA               	clrf	fsr2h,c
  3201   00372C  0E04               	movlw	4
  3202   00372E  26D9               	addwf	fsr2l,f,c
  3203   003730  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3204   003734  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3205   003738                     
  3206                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3207   003738  807F               	bsf	127,0,c	;volatile
  3208   00373A                     
  3209                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3210   00373A  8E7D               	bsf	125,7,c	;volatile
  3211   00373C                     
  3212                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3213   00373C  8679               	bsf	121,3,c	;volatile
  3214                           
  3215                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3216   00373E  0E29               	movlw	41
  3217   003740  6E3A               	movwf	(??_reading_hue+1)^0,c
  3218   003742  0E96               	movlw	150
  3219   003744  6E39               	movwf	??_reading_hue^0,c
  3220   003746  0E7F               	movlw	127
  3221   003748                     u7127:
  3222   003748  2EE8               	decfsz	wreg,f,c
  3223   00374A  D7FE               	bra	u7127
  3224   00374C  2E39               	decfsz	??_reading_hue^0,f,c
  3225   00374E  D7FC               	bra	u7127
  3226   003750  2E3A               	decfsz	(??_reading_hue+1)^0,f,c
  3227   003752  D7FA               	bra	u7127
  3228   003754  0000               	nop	
  3229   003756                     
  3230                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3231   003756  EC37  F020         	call	_color_read_Clear	;wreg free
  3232   00375A  5037               	movf	reading_hue@cCurr^0,w,c
  3233   00375C  6ED9               	movwf	fsr2l,c
  3234   00375E  6ADA               	clrf	fsr2h,c
  3235   003760  0E06               	movlw	6
  3236   003762  26D9               	addwf	fsr2l,f,c
  3237   003764  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3238   003768  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3239   00376C                     
  3240                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3241   00376C  0EDB               	movlw	low _colorCalibration
  3242   00376E  6E33               	movwf	convert_rgb2hue@cMax^0,c
  3243   003770  0ED1               	movlw	low _colorCurrent
  3244   003772  6E34               	movwf	convert_rgb2hue@cCurr^0,c
  3245   003774  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3246   003778  C033  F03B         	movff	?_convert_rgb2hue,reading_hue@hue
  3247   00377C  C034  F03C         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3248   003780                     
  3249                           ;color.c: 127:     return hue;
  3250   003780  C03B  F037         	movff	reading_hue@hue,?_reading_hue
  3251   003784  C03C  F038         	movff	reading_hue@hue+1,?_reading_hue+1
  3252   003788  0012               	return		;funcret
  3253   00378A                     __end_of_reading_hue:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _convert_rgb2hue *****************
  3257 ;; Defined at:
  3258 ;;		line 226 in file "color.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  cMax            1   50[COMRAM] PTR struct colors
  3261 ;;		 -> colorCalibration(10), 
  3262 ;;  cCurr           1   51[COMRAM] PTR struct colors
  3263 ;;		 -> colorCurrent(10), 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  c_char         20    0        unsigned char [20]
  3266 ;;  b               4   72[BANK0 ] float 
  3267 ;;  g               4   68[BANK0 ] float 
  3268 ;;  r               4   64[BANK0 ] float 
  3269 ;;  hue             4   60[BANK0 ] float 
  3270 ;;  max             4   56[BANK0 ] float 
  3271 ;;  diff            4   52[BANK0 ] float 
  3272 ;;  min             4   48[BANK0 ] float 
  3273 ;;  clearmax        4   28[BANK0 ] float 
  3274 ;;  clearcurrent    4   24[BANK0 ] float 
  3275 ;;  bluemax         4   20[BANK0 ] float 
  3276 ;;  bluecurrent     4   16[BANK0 ] float 
  3277 ;;  greenmax        4   12[BANK0 ] float 
  3278 ;;  greencurrent    4    8[BANK0 ] float 
  3279 ;;  redmax          4    4[BANK0 ] float 
  3280 ;;  redcurrent      4    0[BANK0 ] float 
  3281 ;;  c               4    0        float 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  2   50[COMRAM] unsigned int 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3292 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3294 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3295 ;;Total ram usage:       80 bytes
  3296 ;; Hardware stack levels used: 1
  3297 ;; Hardware stack levels required when called: 3
  3298 ;; This function calls:
  3299 ;;		___fladd
  3300 ;;		___fldiv
  3301 ;;		___fleq
  3302 ;;		___flge
  3303 ;;		___flmul
  3304 ;;		___flsub
  3305 ;;		___fltol
  3306 ;;		___xxtofl
  3307 ;; This function is called by:
  3308 ;;		_reading_hue
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text11
  3313   000EC6                     __ptext11:
  3314                           	callstack 0
  3315   000EC6                     _convert_rgb2hue:
  3316                           	callstack 26
  3317   000EC6                     
  3318                           ;color.c: 226: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 227: {;color.c: 228:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 229:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3319   000EC6  0E00               	movlw	0
  3320   000EC8  0100               	movlb	0	; () banked
  3321   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3322   000ECC  0E00               	movlw	0
  3323   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3324   000ED0  0E00               	movlw	0
  3325   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3326   000ED4  0E00               	movlw	0
  3327   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3328   000ED8                     
  3329                           ; BSR set to: 0
  3330                           ;color.c: 231:     redcurrent = cCurr->red;
  3331   000ED8  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3332   000EDA  6ED9               	movwf	fsr2l,c
  3333   000EDC  6ADA               	clrf	fsr2h,c
  3334   000EDE  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3335   000EE2  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3336   000EE6  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3337   000EEA  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3338   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3339   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3340   000EF2  0E00               	movlw	0
  3341   000EF4  EC14  F015         	call	___xxtofl
  3342   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3343   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3344   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3345   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3346   000F08                     
  3347                           ;color.c: 232:     redmax = cMax->red;
  3348   000F08  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3349   000F0A  6ED9               	movwf	fsr2l,c
  3350   000F0C  6ADA               	clrf	fsr2h,c
  3351   000F0E  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3352   000F12  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3353   000F16  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3354   000F1A  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3355   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3356   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3357   000F22  0E00               	movlw	0
  3358   000F24  EC14  F015         	call	___xxtofl
  3359   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3360   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3361   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3362   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3363   000F38                     
  3364                           ;color.c: 233:     greencurrent = cCurr->green;
  3365   000F38  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3366   000F3A  6ED9               	movwf	fsr2l,c
  3367   000F3C  6ADA               	clrf	fsr2h,c
  3368   000F3E  0E02               	movlw	2
  3369   000F40  26D9               	addwf	fsr2l,f,c
  3370   000F42  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3371   000F46  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3372   000F4A  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3373   000F4E  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3374   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3375   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3376   000F56  0E00               	movlw	0
  3377   000F58  EC14  F015         	call	___xxtofl
  3378   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3379   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3380   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3381   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3382   000F6C                     
  3383                           ;color.c: 234:     greenmax = cMax->green;
  3384   000F6C  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3385   000F6E  6ED9               	movwf	fsr2l,c
  3386   000F70  6ADA               	clrf	fsr2h,c
  3387   000F72  0E02               	movlw	2
  3388   000F74  26D9               	addwf	fsr2l,f,c
  3389   000F76  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3390   000F7A  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3391   000F7E  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3392   000F82  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3393   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3394   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3395   000F8A  0E00               	movlw	0
  3396   000F8C  EC14  F015         	call	___xxtofl
  3397   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3398   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3399   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3400   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3401   000FA0                     
  3402                           ;color.c: 235:     bluecurrent = cCurr->blue;
  3403   000FA0  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3404   000FA2  6ED9               	movwf	fsr2l,c
  3405   000FA4  6ADA               	clrf	fsr2h,c
  3406   000FA6  0E04               	movlw	4
  3407   000FA8  26D9               	addwf	fsr2l,f,c
  3408   000FAA  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3409   000FAE  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3410   000FB2  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3411   000FB6  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3412   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3413   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3414   000FBE  0E00               	movlw	0
  3415   000FC0  EC14  F015         	call	___xxtofl
  3416   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3417   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3418   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3419   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3420   000FD4                     
  3421                           ;color.c: 236:     bluemax = cMax->blue;
  3422   000FD4  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3423   000FD6  6ED9               	movwf	fsr2l,c
  3424   000FD8  6ADA               	clrf	fsr2h,c
  3425   000FDA  0E04               	movlw	4
  3426   000FDC  26D9               	addwf	fsr2l,f,c
  3427   000FDE  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3428   000FE2  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3429   000FE6  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3430   000FEA  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3431   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3432   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3433   000FF2  0E00               	movlw	0
  3434   000FF4  EC14  F015         	call	___xxtofl
  3435   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3436   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3437   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3438   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3439   001008                     
  3440                           ;color.c: 237:     clearcurrent = cCurr->clear;
  3441   001008  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  3442   00100A  6ED9               	movwf	fsr2l,c
  3443   00100C  6ADA               	clrf	fsr2h,c
  3444   00100E  0E06               	movlw	6
  3445   001010  26D9               	addwf	fsr2l,f,c
  3446   001012  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3447   001016  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3448   00101A  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3449   00101E  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3450   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3451   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3452   001026  0E00               	movlw	0
  3453   001028  EC14  F015         	call	___xxtofl
  3454   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3455   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3456   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3457   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3458   00103C                     
  3459                           ;color.c: 238:     clearmax = cMax->clear;
  3460   00103C  5033               	movf	convert_rgb2hue@cMax^0,w,c
  3461   00103E  6ED9               	movwf	fsr2l,c
  3462   001040  6ADA               	clrf	fsr2h,c
  3463   001042  0E06               	movlw	6
  3464   001044  26D9               	addwf	fsr2l,f,c
  3465   001046  CFDE F035          	movff	postinc2,??_convert_rgb2hue
  3466   00104A  CFDD F036          	movff	postdec2,??_convert_rgb2hue+1
  3467   00104E  C035  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3468   001052  C036  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3469   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3470   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3471   00105A  0E00               	movlw	0
  3472   00105C  EC14  F015         	call	___xxtofl
  3473   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3474   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3475   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3476   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3477   001070  C078  F01A         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3478   001074  C079  F01B         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3479   001078  C07A  F01C         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3480   00107C  C07B  F01D         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3481   001080  C07C  F01E         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3482   001084  C07D  F01F         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3483   001088  C07E  F020         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3484   00108C  C07F  F021         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3485   001090  ECA1  F00F         	call	___fldiv	;wreg free
  3486   001094                     
  3487                           ;color.c: 241:     char c_char[20];;color.c: 247:     r = redcurrent/redmax;
  3488   001094  C060  F01A         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3489   001098  C061  F01B         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3490   00109C  C062  F01C         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3491   0010A0  C063  F01D         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3492   0010A4  C064  F01E         	movff	convert_rgb2hue@redmax,___fldiv@a
  3493   0010A8  C065  F01F         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3494   0010AC  C066  F020         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3495   0010B0  C067  F021         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3496   0010B4  ECA1  F00F         	call	___fldiv	;wreg free
  3497   0010B8  C01A  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3498   0010BC  C01B  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3499   0010C0  C01C  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3500   0010C4  C01D  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3501   0010C8                     
  3502                           ;color.c: 248:     g = greencurrent/greenmax;
  3503   0010C8  C068  F01A         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3504   0010CC  C069  F01B         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3505   0010D0  C06A  F01C         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3506   0010D4  C06B  F01D         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3507   0010D8  C06C  F01E         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3508   0010DC  C06D  F01F         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3509   0010E0  C06E  F020         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3510   0010E4  C06F  F021         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3511   0010E8  ECA1  F00F         	call	___fldiv	;wreg free
  3512   0010EC  C01A  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3513   0010F0  C01B  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3514   0010F4  C01C  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3515   0010F8  C01D  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3516   0010FC                     
  3517                           ;color.c: 249:     b = bluecurrent/bluemax;
  3518   0010FC  C070  F01A         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3519   001100  C071  F01B         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3520   001104  C072  F01C         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3521   001108  C073  F01D         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3522   00110C  C074  F01E         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3523   001110  C075  F01F         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3524   001114  C076  F020         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3525   001118  C077  F021         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3526   00111C  ECA1  F00F         	call	___fldiv	;wreg free
  3527   001120  C01A  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3528   001124  C01B  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3529   001128  C01C  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3530   00112C  C01D  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3531   001130                     
  3532                           ;color.c: 251:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3533   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3534   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3535   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3536   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3537   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3538   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3539   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3540   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3541   001150  EC58  F01A         	call	___flge	;wreg free
  3542   001154  A0D8               	btfss	status,0,c
  3543   001156  EFAF  F008         	goto	u6351
  3544   00115A  EFB1  F008         	goto	u6350
  3545   00115E                     u6351:
  3546   00115E  EFE6  F008         	goto	l6542
  3547   001162                     u6350:
  3548   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3549   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3550   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3551   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3552   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3553   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3554   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3555   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3556   001182  EC58  F01A         	call	___flge	;wreg free
  3557   001186  A0D8               	btfss	status,0,c
  3558   001188  EFC8  F008         	goto	u6361
  3559   00118C  EFCA  F008         	goto	u6360
  3560   001190                     u6361:
  3561   001190  EFD4  F008         	goto	l128
  3562   001194                     u6360:
  3563   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$433
  3564   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$433+1
  3565   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$433+2
  3566   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$433+3
  3567   0011A4  EFDC  F008         	goto	l130
  3568   0011A8                     l128:
  3569   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$433
  3570   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$433+1
  3571   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$433+2
  3572   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$433+3
  3573   0011B8                     l130:
  3574   0011B8  C080  F090         	movff	_convert_rgb2hue$433,convert_rgb2hue@min
  3575   0011BC  C081  F091         	movff	_convert_rgb2hue$433+1,convert_rgb2hue@min+1
  3576   0011C0  C082  F092         	movff	_convert_rgb2hue$433+2,convert_rgb2hue@min+2
  3577   0011C4  C083  F093         	movff	_convert_rgb2hue$433+3,convert_rgb2hue@min+3
  3578   0011C8  EF19  F009         	goto	l6546
  3579   0011CC                     l6542:
  3580   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3581   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3582   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3583   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3584   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3585   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3586   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3587   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3588   0011EC  EC58  F01A         	call	___flge	;wreg free
  3589   0011F0  A0D8               	btfss	status,0,c
  3590   0011F2  EFFD  F008         	goto	u6371
  3591   0011F6  EFFF  F008         	goto	u6370
  3592   0011FA                     u6371:
  3593   0011FA  EF09  F009         	goto	l132
  3594   0011FE                     u6370:
  3595   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$434
  3596   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$434+1
  3597   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$434+2
  3598   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$434+3
  3599   00120E  EF11  F009         	goto	l134
  3600   001212                     l132:
  3601   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$434
  3602   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$434+1
  3603   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$434+2
  3604   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$434+3
  3605   001222                     l134:
  3606   001222  C084  F090         	movff	_convert_rgb2hue$434,convert_rgb2hue@min
  3607   001226  C085  F091         	movff	_convert_rgb2hue$434+1,convert_rgb2hue@min+1
  3608   00122A  C086  F092         	movff	_convert_rgb2hue$434+2,convert_rgb2hue@min+2
  3609   00122E  C087  F093         	movff	_convert_rgb2hue$434+3,convert_rgb2hue@min+3
  3610   001232                     l6546:
  3611                           
  3612                           ;color.c: 252:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3613   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3614   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3615   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3616   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3617   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3618   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3619   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3620   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3621   001252  EC58  F01A         	call	___flge	;wreg free
  3622   001256  A0D8               	btfss	status,0,c
  3623   001258  EF30  F009         	goto	u6381
  3624   00125C  EF32  F009         	goto	u6380
  3625   001260                     u6381:
  3626   001260  EF67  F009         	goto	l6552
  3627   001264                     u6380:
  3628   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3629   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3630   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3631   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3632   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3633   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3634   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3635   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3636   001284  EC58  F01A         	call	___flge	;wreg free
  3637   001288  A0D8               	btfss	status,0,c
  3638   00128A  EF49  F009         	goto	u6391
  3639   00128E  EF4B  F009         	goto	u6390
  3640   001292                     u6391:
  3641   001292  EF55  F009         	goto	l140
  3642   001296                     u6390:
  3643   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3644   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3645   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3646   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3647   0012A6  EF5D  F009         	goto	l142
  3648   0012AA                     l140:
  3649   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$435
  3650   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$435+1
  3651   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$435+2
  3652   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$435+3
  3653   0012BA                     l142:
  3654   0012BA  C088  F098         	movff	_convert_rgb2hue$435,convert_rgb2hue@max
  3655   0012BE  C089  F099         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@max+1
  3656   0012C2  C08A  F09A         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@max+2
  3657   0012C6  C08B  F09B         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@max+3
  3658   0012CA  EF9A  F009         	goto	l6556
  3659   0012CE                     l6552:
  3660   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3661   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3662   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3663   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3664   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3665   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3666   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3667   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3668   0012EE  EC58  F01A         	call	___flge	;wreg free
  3669   0012F2  A0D8               	btfss	status,0,c
  3670   0012F4  EF7E  F009         	goto	u6401
  3671   0012F8  EF80  F009         	goto	u6400
  3672   0012FC                     u6401:
  3673   0012FC  EF8A  F009         	goto	l144
  3674   001300                     u6400:
  3675   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$436
  3676   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$436+1
  3677   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$436+2
  3678   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$436+3
  3679   001310  EF92  F009         	goto	l146
  3680   001314                     l144:
  3681   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$436
  3682   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$436+1
  3683   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$436+2
  3684   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$436+3
  3685   001324                     l146:
  3686   001324  C08C  F098         	movff	_convert_rgb2hue$436,convert_rgb2hue@max
  3687   001328  C08D  F099         	movff	_convert_rgb2hue$436+1,convert_rgb2hue@max+1
  3688   00132C  C08E  F09A         	movff	_convert_rgb2hue$436+2,convert_rgb2hue@max+2
  3689   001330  C08F  F09B         	movff	_convert_rgb2hue$436+3,convert_rgb2hue@max+3
  3690   001334                     l6556:
  3691                           
  3692                           ;color.c: 253:     diff = max - min;
  3693   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3694   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3695   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3696   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3697   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3698   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3699   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3700   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3701   001354  ECAA  F020         	call	___flsub	;wreg free
  3702   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3703   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3704   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3705   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3706                           
  3707                           ;color.c: 254:     if (max == min) {
  3708   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3709   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3710   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3711   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3712   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3713   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3714   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3715   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3716   001388  EC3B  F01D         	call	___fleq	;wreg free
  3717   00138C  A0D8               	btfss	status,0,c
  3718   00138E  EFCB  F009         	goto	u6411
  3719   001392  EFCD  F009         	goto	u6410
  3720   001396                     u6411:
  3721   001396  EFD8  F009         	goto	l6560
  3722   00139A                     u6410:
  3723   00139A                     
  3724                           ;color.c: 255:         hue = 0;
  3725   00139A  0E00               	movlw	0
  3726   00139C  0100               	movlb	0	; () banked
  3727   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3728   0013A0  0E00               	movlw	0
  3729   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3730   0013A4  0E00               	movlw	0
  3731   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3732   0013A8  0E00               	movlw	0
  3733   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3734                           
  3735                           ;color.c: 256:     } else if (max == r){
  3736   0013AC  EFE1  F00A         	goto	l6572
  3737   0013B0                     l6560:
  3738   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3739   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3740   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3741   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3742   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3743   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3744   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3745   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3746   0013D0  EC3B  F01D         	call	___fleq	;wreg free
  3747   0013D4  A0D8               	btfss	status,0,c
  3748   0013D6  EFEF  F009         	goto	u6421
  3749   0013DA  EFF1  F009         	goto	u6420
  3750   0013DE                     u6421:
  3751   0013DE  EF1F  F00A         	goto	l6564
  3752   0013E2                     u6420:
  3753   0013E2                     
  3754                           ;color.c: 257:         hue = (b - g) / diff;
  3755   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3756   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3757   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3758   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3759   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3760   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3761   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3762   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3763   001402  ECAA  F020         	call	___flsub	;wreg free
  3764   001406  C012  F01A         	movff	?___flsub,___fldiv@b
  3765   00140A  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3766   00140E  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3767   001412  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3768   001416  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3769   00141A  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3770   00141E  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3771   001422  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3772   001426  ECA1  F00F         	call	___fldiv	;wreg free
  3773   00142A  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3774   00142E  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3775   001432  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3776   001436  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3777                           
  3778                           ;color.c: 258:     } else if (max == g){
  3779   00143A  EFE1  F00A         	goto	l6572
  3780   00143E                     l6564:
  3781   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3782   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3783   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3784   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3785   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3786   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3787   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3788   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3789   00145E  EC3B  F01D         	call	___fleq	;wreg free
  3790   001462  A0D8               	btfss	status,0,c
  3791   001464  EF36  F00A         	goto	u6431
  3792   001468  EF38  F00A         	goto	u6430
  3793   00146C                     u6431:
  3794   00146C  EF80  F00A         	goto	l6568
  3795   001470                     u6430:
  3796   001470                     
  3797                           ;color.c: 259:         hue = (b - r) / diff;
  3798   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3799   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3800   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3801   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3802   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3803   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3804   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3805   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3806   001490  ECAA  F020         	call	___flsub	;wreg free
  3807   001494  C012  F01A         	movff	?___flsub,___fldiv@b
  3808   001498  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3809   00149C  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3810   0014A0  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3811   0014A4  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3812   0014A8  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3813   0014AC  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3814   0014B0  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3815   0014B4  ECA1  F00F         	call	___fldiv	;wreg free
  3816   0014B8  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3817   0014BC  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3818   0014C0  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3819   0014C4  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3820                           
  3821                           ;color.c: 260:         hue = hue + 2;
  3822   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3823   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3824   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3825   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3826   0014D8  0E00               	movlw	0
  3827   0014DA  6E06               	movwf	___fladd@a^0,c
  3828   0014DC  0E00               	movlw	0
  3829   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3830   0014E0  0E00               	movlw	0
  3831   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3832   0014E4  0E40               	movlw	64
  3833   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3834   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3835   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3836   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3837   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3838   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3839                           
  3840                           ;color.c: 261:     } else if (max == b){
  3841   0014FC  EFE1  F00A         	goto	l6572
  3842   001500                     l6568:
  3843   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3844   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3845   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3846   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3847   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3848   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3849   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3850   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3851   001520  EC3B  F01D         	call	___fleq	;wreg free
  3852   001524  A0D8               	btfss	status,0,c
  3853   001526  EF97  F00A         	goto	u6441
  3854   00152A  EF99  F00A         	goto	u6440
  3855   00152E                     u6441:
  3856   00152E  EFE1  F00A         	goto	l150
  3857   001532                     u6440:
  3858   001532                     
  3859                           ;color.c: 262:         hue = (r - g) / diff;
  3860   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3861   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3862   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3863   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3864   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3865   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3866   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3867   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3868   001552  ECAA  F020         	call	___flsub	;wreg free
  3869   001556  C012  F01A         	movff	?___flsub,___fldiv@b
  3870   00155A  C013  F01B         	movff	?___flsub+1,___fldiv@b+1
  3871   00155E  C014  F01C         	movff	?___flsub+2,___fldiv@b+2
  3872   001562  C015  F01D         	movff	?___flsub+3,___fldiv@b+3
  3873   001566  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3874   00156A  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3875   00156E  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3876   001572  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3877   001576  ECA1  F00F         	call	___fldiv	;wreg free
  3878   00157A  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3879   00157E  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3880   001582  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3881   001586  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3882                           
  3883                           ;color.c: 263:         hue = hue + 4;
  3884   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3885   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3886   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3887   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3888   00159A  0E00               	movlw	0
  3889   00159C  6E06               	movwf	___fladd@a^0,c
  3890   00159E  0E00               	movlw	0
  3891   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3892   0015A2  0E80               	movlw	128
  3893   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3894   0015A6  0E40               	movlw	64
  3895   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3896   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3897   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3898   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3899   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3900   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3901   0015BE  EFE1  F00A         	goto	l6572
  3902   0015C2                     l150:
  3903   0015C2                     l6572:
  3904                           
  3905                           ;color.c: 266:     hue = hue * 60;
  3906   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3907   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3908   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3909   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3910   0015D2  0E00               	movlw	0
  3911   0015D4  6E14               	movwf	___flmul@a^0,c
  3912   0015D6  0E00               	movlw	0
  3913   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3914   0015DA  0E70               	movlw	112
  3915   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3916   0015DE  0E42               	movlw	66
  3917   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3918   0015E2  EC8C  F00D         	call	___flmul	;wreg free
  3919   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3920   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3921   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3922   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3923   0015F6                     
  3924                           ;color.c: 267:     if (hue < 0) {
  3925   0015F6  0100               	movlb	0	; () banked
  3926   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3927   0015FA  EF03  F00B         	goto	u6450
  3928   0015FE  EF01  F00B         	goto	u6451
  3929   001602                     u6451:
  3930   001602  EF1D  F00B         	goto	l154
  3931   001606                     u6450:
  3932   001606                     
  3933                           ; BSR set to: 0
  3934                           ;color.c: 268:         hue = hue + 360;
  3935   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3936   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3937   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3938   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3939   001616  0E00               	movlw	0
  3940   001618  6E06               	movwf	___fladd@a^0,c
  3941   00161A  0E00               	movlw	0
  3942   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3943   00161E  0EB4               	movlw	180
  3944   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3945   001622  0E43               	movlw	67
  3946   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3947   001626  EC2C  F00B         	call	___fladd	;wreg free
  3948   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3949   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3950   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3951   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3952   00163A                     l154:
  3953                           
  3954                           ;color.c: 271:     return (unsigned int)hue;
  3955   00163A  C09C  F029         	movff	convert_rgb2hue@hue,___fltol@f1
  3956   00163E  C09D  F02A         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3957   001642  C09E  F02B         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3958   001646  C09F  F02C         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3959   00164A  ECD5  F019         	call	___fltol	;wreg free
  3960   00164E  C029  F033         	movff	?___fltol,?_convert_rgb2hue
  3961   001652  C02A  F034         	movff	?___fltol+1,?_convert_rgb2hue+1
  3962   001656  0012               	return		;funcret
  3963   001658                     __end_of_convert_rgb2hue:
  3964                           	callstack 0
  3965                           
  3966 ;; *************** function ___xxtofl *****************
  3967 ;; Defined at:
  3968 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  sign            1    wreg     unsigned char 
  3971 ;;  val             4    1[COMRAM] long 
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  sign            1    9[COMRAM] unsigned char 
  3974 ;;  arg             4   11[COMRAM] unsigned long 
  3975 ;;  exp             1   10[COMRAM] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  4    1[COMRAM] unsigned char 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3986 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3987 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3988 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3989 ;;Total ram usage:       14 bytes
  3990 ;; Hardware stack levels used: 1
  3991 ;; Hardware stack levels required when called: 1
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_convert_rgb2hue
  3996 ;;		_fullSpeedAhead
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text12
  4001   002A28                     __ptext12:
  4002                           	callstack 0
  4003   002A28                     ___xxtofl:
  4004                           	callstack 26
  4005                           
  4006                           ;incstack = 0
  4007                           ;___xxtofl@sign stored from wreg
  4008   002A28  6E0A               	movwf	___xxtofl@sign^0,c
  4009   002A2A  500A               	movf	___xxtofl@sign^0,w,c
  4010   002A2C  B4D8               	btfsc	status,2,c
  4011   002A2E  EF1B  F015         	goto	u5831
  4012   002A32  EF1D  F015         	goto	u5830
  4013   002A36                     u5831:
  4014   002A36  EF3F  F015         	goto	l1389
  4015   002A3A                     u5830:
  4016   002A3A  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4017   002A3C  EF24  F015         	goto	u5840
  4018   002A40  EF22  F015         	goto	u5841
  4019   002A44                     u5841:
  4020   002A44  EF3F  F015         	goto	l1389
  4021   002A48                     u5840:
  4022   002A48  C002  F006         	movff	___xxtofl@val,??___xxtofl
  4023   002A4C  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  4024   002A50  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  4025   002A54  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  4026   002A58  1E06               	comf	??___xxtofl^0,f,c
  4027   002A5A  1E07               	comf	(??___xxtofl+1)^0,f,c
  4028   002A5C  1E08               	comf	(??___xxtofl+2)^0,f,c
  4029   002A5E  1E09               	comf	(??___xxtofl+3)^0,f,c
  4030   002A60  2A06               	incf	??___xxtofl^0,f,c
  4031   002A62  0E00               	movlw	0
  4032   002A64  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4033   002A66  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4034   002A68  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4035   002A6A  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4036   002A6E  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4037   002A72  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4038   002A76  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4039   002A7A  EF47  F015         	goto	l6080
  4040   002A7E                     l1389:
  4041   002A7E  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4042   002A82  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4043   002A86  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4044   002A8A  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4045   002A8E                     l6080:
  4046   002A8E  5002               	movf	___xxtofl@val^0,w,c
  4047   002A90  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4048   002A92  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4049   002A94  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4050   002A96  A4D8               	btfss	status,2,c
  4051   002A98  EF50  F015         	goto	u5851
  4052   002A9C  EF52  F015         	goto	u5850
  4053   002AA0                     u5851:
  4054   002AA0  EF5C  F015         	goto	l6086
  4055   002AA4                     u5850:
  4056   002AA4  0E00               	movlw	0
  4057   002AA6  6E02               	movwf	?___xxtofl^0,c
  4058   002AA8  0E00               	movlw	0
  4059   002AAA  6E03               	movwf	(?___xxtofl+1)^0,c
  4060   002AAC  0E00               	movlw	0
  4061   002AAE  6E04               	movwf	(?___xxtofl+2)^0,c
  4062   002AB0  0E00               	movlw	0
  4063   002AB2  6E05               	movwf	(?___xxtofl+3)^0,c
  4064   002AB4  EFED  F015         	goto	l1392
  4065   002AB8                     l6086:
  4066   002AB8  0E96               	movlw	150
  4067   002ABA  6E0B               	movwf	___xxtofl@exp^0,c
  4068   002ABC  EF66  F015         	goto	l6090
  4069   002AC0                     l6088:
  4070   002AC0  2A0B               	incf	___xxtofl@exp^0,f,c
  4071   002AC2  90D8               	bcf	status,0,c
  4072   002AC4  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4073   002AC6  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4074   002AC8  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4075   002ACA  320C               	rrcf	___xxtofl@arg^0,f,c
  4076   002ACC                     l6090:
  4077   002ACC  0E00               	movlw	0
  4078   002ACE  140C               	andwf	___xxtofl@arg^0,w,c
  4079   002AD0  6E06               	movwf	??___xxtofl^0,c
  4080   002AD2  0E00               	movlw	0
  4081   002AD4  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4082   002AD6  6E07               	movwf	(??___xxtofl+1)^0,c
  4083   002AD8  0E00               	movlw	0
  4084   002ADA  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4085   002ADC  6E08               	movwf	(??___xxtofl+2)^0,c
  4086   002ADE  0EFE               	movlw	254
  4087   002AE0  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4088   002AE2  6E09               	movwf	(??___xxtofl+3)^0,c
  4089   002AE4  5006               	movf	??___xxtofl^0,w,c
  4090   002AE6  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4091   002AE8  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4092   002AEA  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4093   002AEC  A4D8               	btfss	status,2,c
  4094   002AEE  EF7B  F015         	goto	u5861
  4095   002AF2  EF7D  F015         	goto	u5860
  4096   002AF6                     u5861:
  4097   002AF6  EF60  F015         	goto	l6088
  4098   002AFA                     u5860:
  4099   002AFA  EF8B  F015         	goto	l1396
  4100   002AFE                     l6092:
  4101   002AFE  2A0B               	incf	___xxtofl@exp^0,f,c
  4102   002B00  0E01               	movlw	1
  4103   002B02  260C               	addwf	___xxtofl@arg^0,f,c
  4104   002B04  0E00               	movlw	0
  4105   002B06  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4106   002B08  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4107   002B0A  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4108   002B0C  90D8               	bcf	status,0,c
  4109   002B0E  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4110   002B10  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4111   002B12  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4112   002B14  320C               	rrcf	___xxtofl@arg^0,f,c
  4113   002B16                     l1396:
  4114   002B16  0E00               	movlw	0
  4115   002B18  140C               	andwf	___xxtofl@arg^0,w,c
  4116   002B1A  6E06               	movwf	??___xxtofl^0,c
  4117   002B1C  0E00               	movlw	0
  4118   002B1E  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4119   002B20  6E07               	movwf	(??___xxtofl+1)^0,c
  4120   002B22  0E00               	movlw	0
  4121   002B24  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4122   002B26  6E08               	movwf	(??___xxtofl+2)^0,c
  4123   002B28  0EFF               	movlw	255
  4124   002B2A  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4125   002B2C  6E09               	movwf	(??___xxtofl+3)^0,c
  4126   002B2E  5006               	movf	??___xxtofl^0,w,c
  4127   002B30  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4128   002B32  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4129   002B34  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4130   002B36  A4D8               	btfss	status,2,c
  4131   002B38  EFA0  F015         	goto	u5871
  4132   002B3C  EFA2  F015         	goto	u5870
  4133   002B40                     u5871:
  4134   002B40  EF7F  F015         	goto	l6092
  4135   002B44                     u5870:
  4136   002B44  EFAA  F015         	goto	l6100
  4137   002B48                     l6098:
  4138   002B48  060B               	decf	___xxtofl@exp^0,f,c
  4139   002B4A  90D8               	bcf	status,0,c
  4140   002B4C  360C               	rlcf	___xxtofl@arg^0,f,c
  4141   002B4E  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4142   002B50  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4143   002B52  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4144   002B54                     l6100:
  4145   002B54  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4146   002B56  EFAF  F015         	goto	u5881
  4147   002B5A  EFB1  F015         	goto	u5880
  4148   002B5E                     u5881:
  4149   002B5E  EFB9  F015         	goto	l1403
  4150   002B62                     u5880:
  4151   002B62  0E02               	movlw	2
  4152   002B64  600B               	cpfslt	___xxtofl@exp^0,c
  4153   002B66  EFB7  F015         	goto	u5891
  4154   002B6A  EFB9  F015         	goto	u5890
  4155   002B6E                     u5891:
  4156   002B6E  EFA4  F015         	goto	l6098
  4157   002B72                     u5890:
  4158   002B72                     l1403:
  4159   002B72  B00B               	btfsc	___xxtofl@exp^0,0,c
  4160   002B74  EFBE  F015         	goto	u5901
  4161   002B78  EFC0  F015         	goto	u5900
  4162   002B7C                     u5901:
  4163   002B7C  EFC1  F015         	goto	l6106
  4164   002B80                     u5900:
  4165   002B80  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4166   002B82                     l6106:
  4167   002B82  90D8               	bcf	status,0,c
  4168   002B84  320B               	rrcf	___xxtofl@exp^0,f,c
  4169   002B86  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4170   002B8A  6A07               	clrf	(??___xxtofl+1)^0,c
  4171   002B8C  6A08               	clrf	(??___xxtofl+2)^0,c
  4172   002B8E  6A09               	clrf	(??___xxtofl+3)^0,c
  4173   002B90  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4174   002B94  6A08               	clrf	(??___xxtofl+2)^0,c
  4175   002B96  6A07               	clrf	(??___xxtofl+1)^0,c
  4176   002B98  6A06               	clrf	??___xxtofl^0,c
  4177   002B9A  5006               	movf	??___xxtofl^0,w,c
  4178   002B9C  120C               	iorwf	___xxtofl@arg^0,f,c
  4179   002B9E  5007               	movf	(??___xxtofl+1)^0,w,c
  4180   002BA0  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4181   002BA2  5008               	movf	(??___xxtofl+2)^0,w,c
  4182   002BA4  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4183   002BA6  5009               	movf	(??___xxtofl+3)^0,w,c
  4184   002BA8  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4185   002BAA  500A               	movf	___xxtofl@sign^0,w,c
  4186   002BAC  B4D8               	btfsc	status,2,c
  4187   002BAE  EFDB  F015         	goto	u5911
  4188   002BB2  EFDD  F015         	goto	u5910
  4189   002BB6                     u5911:
  4190   002BB6  EFE5  F015         	goto	l6116
  4191   002BBA                     u5910:
  4192   002BBA  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4193   002BBC  EFE4  F015         	goto	u5920
  4194   002BC0  EFE2  F015         	goto	u5921
  4195   002BC4                     u5921:
  4196   002BC4  EFE5  F015         	goto	l6116
  4197   002BC8                     u5920:
  4198   002BC8  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4199   002BCA                     l6116:
  4200   002BCA  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4201   002BCE  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4202   002BD2  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4203   002BD6  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4204   002BDA                     l1392:
  4205   002BDA  0012               	return		;funcret
  4206   002BDC                     __end_of___xxtofl:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function ___fltol *****************
  4210 ;; Defined at:
  4211 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  f1              4   40[COMRAM] unsigned char 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  exp1            1   49[COMRAM] unsigned char 
  4216 ;;  sign1           1   48[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  4   40[COMRAM] long 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4226 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;Total ram usage:       10 bytes
  4231 ;; Hardware stack levels used: 1
  4232 ;; Hardware stack levels required when called: 1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_convert_rgb2hue
  4237 ;;		_fullSpeedAhead
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text13
  4242   0033AA                     __ptext13:
  4243                           	callstack 0
  4244   0033AA                     ___fltol:
  4245                           	callstack 26
  4246   0033AA  342B               	rlcf	(___fltol@f1+2)^0,w,c
  4247   0033AC  342C               	rlcf	(___fltol@f1+3)^0,w,c
  4248   0033AE  6E32               	movwf	___fltol@exp1^0,c
  4249   0033B0  5032               	movf	___fltol@exp1^0,w,c
  4250   0033B2  A4D8               	btfss	status,2,c
  4251   0033B4  EFDE  F019         	goto	u5761
  4252   0033B8  EFE0  F019         	goto	u5760
  4253   0033BC                     u5761:
  4254   0033BC  EFEA  F019         	goto	l6036
  4255   0033C0                     u5760:
  4256   0033C0                     l6032:
  4257   0033C0  0E00               	movlw	0
  4258   0033C2  6E29               	movwf	?___fltol^0,c
  4259   0033C4  0E00               	movlw	0
  4260   0033C6  6E2A               	movwf	(?___fltol+1)^0,c
  4261   0033C8  0E00               	movlw	0
  4262   0033CA  6E2B               	movwf	(?___fltol+2)^0,c
  4263   0033CC  0E00               	movlw	0
  4264   0033CE  6E2C               	movwf	(?___fltol+3)^0,c
  4265   0033D0  EF57  F01A         	goto	l1031
  4266   0033D4                     l6036:
  4267   0033D4  C029  F02D         	movff	___fltol@f1,??___fltol
  4268   0033D8  C02A  F02E         	movff	___fltol@f1+1,??___fltol+1
  4269   0033DC  C02B  F02F         	movff	___fltol@f1+2,??___fltol+2
  4270   0033E0  C02C  F030         	movff	___fltol@f1+3,??___fltol+3
  4271   0033E4  0E20               	movlw	32
  4272   0033E6  EFFA  F019         	goto	u5770
  4273   0033EA                     u5775:
  4274   0033EA  90D8               	bcf	status,0,c
  4275   0033EC  3230               	rrcf	(??___fltol+3)^0,f,c
  4276   0033EE  322F               	rrcf	(??___fltol+2)^0,f,c
  4277   0033F0  322E               	rrcf	(??___fltol+1)^0,f,c
  4278   0033F2  322D               	rrcf	??___fltol^0,f,c
  4279   0033F4                     u5770:
  4280   0033F4  2EE8               	decfsz	wreg,f,c
  4281   0033F6  EFF5  F019         	goto	u5775
  4282   0033FA  502D               	movf	??___fltol^0,w,c
  4283   0033FC  6E31               	movwf	___fltol@sign1^0,c
  4284   0033FE  8E2B               	bsf	(___fltol@f1+2)^0,7,c
  4285   003400  0EFF               	movlw	255
  4286   003402  1629               	andwf	___fltol@f1^0,f,c
  4287   003404  0EFF               	movlw	255
  4288   003406  162A               	andwf	(___fltol@f1+1)^0,f,c
  4289   003408  0EFF               	movlw	255
  4290   00340A  162B               	andwf	(___fltol@f1+2)^0,f,c
  4291   00340C  0E00               	movlw	0
  4292   00340E  162C               	andwf	(___fltol@f1+3)^0,f,c
  4293   003410  0E96               	movlw	150
  4294   003412  5E32               	subwf	___fltol@exp1^0,f,c
  4295   003414  BE32               	btfsc	___fltol@exp1^0,7,c
  4296   003416  EF11  F01A         	goto	u5780
  4297   00341A  EF0F  F01A         	goto	u5781
  4298   00341E                     u5781:
  4299   00341E  EF27  F01A         	goto	l6056
  4300   003422                     u5780:
  4301   003422  5032               	movf	___fltol@exp1^0,w,c
  4302   003424  0A80               	xorlw	128
  4303   003426  0F97               	addlw	151
  4304   003428  B0D8               	btfsc	status,0,c
  4305   00342A  EF19  F01A         	goto	u5791
  4306   00342E  EF1B  F01A         	goto	u5790
  4307   003432                     u5791:
  4308   003432  EF1D  F01A         	goto	l6052
  4309   003436                     u5790:
  4310   003436  EFE0  F019         	goto	l6032
  4311   00343A                     l6052:
  4312   00343A  90D8               	bcf	status,0,c
  4313   00343C  322C               	rrcf	(___fltol@f1+3)^0,f,c
  4314   00343E  322B               	rrcf	(___fltol@f1+2)^0,f,c
  4315   003440  322A               	rrcf	(___fltol@f1+1)^0,f,c
  4316   003442  3229               	rrcf	___fltol@f1^0,f,c
  4317   003444  3E32               	incfsz	___fltol@exp1^0,f,c
  4318   003446  EF1D  F01A         	goto	l6052
  4319   00344A  EF3F  F01A         	goto	l6066
  4320   00344E                     l6056:
  4321   00344E  0E1F               	movlw	31
  4322   003450  6432               	cpfsgt	___fltol@exp1^0,c
  4323   003452  EF2D  F01A         	goto	u5801
  4324   003456  EF2F  F01A         	goto	u5800
  4325   00345A                     u5801:
  4326   00345A  EF37  F01A         	goto	l6064
  4327   00345E                     u5800:
  4328   00345E  EFE0  F019         	goto	l6032
  4329   003462                     l6062:
  4330   003462  90D8               	bcf	status,0,c
  4331   003464  3629               	rlcf	___fltol@f1^0,f,c
  4332   003466  362A               	rlcf	(___fltol@f1+1)^0,f,c
  4333   003468  362B               	rlcf	(___fltol@f1+2)^0,f,c
  4334   00346A  362C               	rlcf	(___fltol@f1+3)^0,f,c
  4335   00346C  0632               	decf	___fltol@exp1^0,f,c
  4336   00346E                     l6064:
  4337   00346E  5032               	movf	___fltol@exp1^0,w,c
  4338   003470  A4D8               	btfss	status,2,c
  4339   003472  EF3D  F01A         	goto	u5811
  4340   003476  EF3F  F01A         	goto	u5810
  4341   00347A                     u5811:
  4342   00347A  EF31  F01A         	goto	l6062
  4343   00347E                     u5810:
  4344   00347E                     l6066:
  4345   00347E  5031               	movf	___fltol@sign1^0,w,c
  4346   003480  B4D8               	btfsc	status,2,c
  4347   003482  EF45  F01A         	goto	u5821
  4348   003486  EF47  F01A         	goto	u5820
  4349   00348A                     u5821:
  4350   00348A  EF4F  F01A         	goto	l6070
  4351   00348E                     u5820:
  4352   00348E  1E2C               	comf	(___fltol@f1+3)^0,f,c
  4353   003490  1E2B               	comf	(___fltol@f1+2)^0,f,c
  4354   003492  1E2A               	comf	(___fltol@f1+1)^0,f,c
  4355   003494  6C29               	negf	___fltol@f1^0,c
  4356   003496  0E00               	movlw	0
  4357   003498  222A               	addwfc	(___fltol@f1+1)^0,f,c
  4358   00349A  222B               	addwfc	(___fltol@f1+2)^0,f,c
  4359   00349C  222C               	addwfc	(___fltol@f1+3)^0,f,c
  4360   00349E                     l6070:
  4361   00349E  C029  F029         	movff	___fltol@f1,?___fltol
  4362   0034A2  C02A  F02A         	movff	___fltol@f1+1,?___fltol+1
  4363   0034A6  C02B  F02B         	movff	___fltol@f1+2,?___fltol+2
  4364   0034AA  C02C  F02C         	movff	___fltol@f1+3,?___fltol+3
  4365   0034AE                     l1031:
  4366   0034AE  0012               	return		;funcret
  4367   0034B0                     __end_of___fltol:
  4368                           	callstack 0
  4369                           
  4370 ;; *************** function ___flsub *****************
  4371 ;; Defined at:
  4372 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  b               4   17[COMRAM] long 
  4375 ;;  a               4   21[COMRAM] long 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;		None
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  4   17[COMRAM] long 
  4380 ;; Registers used:
  4381 ;;		wreg, status,2, status,0, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4387 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4390 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4391 ;;Total ram usage:        8 bytes
  4392 ;; Hardware stack levels used: 1
  4393 ;; Hardware stack levels required when called: 2
  4394 ;; This function calls:
  4395 ;;		___fladd
  4396 ;; This function is called by:
  4397 ;;		_convert_rgb2hue
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text14
  4402   004154                     __ptext14:
  4403                           	callstack 0
  4404   004154                     ___flsub:
  4405                           	callstack 26
  4406   004154  0E00               	movlw	0
  4407   004156  1A16               	xorwf	___flsub@a^0,f,c
  4408   004158  0E00               	movlw	0
  4409   00415A  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4410   00415C  0E00               	movlw	0
  4411   00415E  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4412   004160  0E80               	movlw	128
  4413   004162  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4414   004164  C012  F002         	movff	___flsub@b,___fladd@b
  4415   004168  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4416   00416C  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4417   004170  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4418   004174  C016  F006         	movff	___flsub@a,___fladd@a
  4419   004178  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4420   00417C  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4421   004180  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4422   004184  EC2C  F00B         	call	___fladd	;wreg free
  4423   004188  C002  F012         	movff	?___fladd,?___flsub
  4424   00418C  C003  F013         	movff	?___fladd+1,?___flsub+1
  4425   004190  C004  F014         	movff	?___fladd+2,?___flsub+2
  4426   004194  C005  F015         	movff	?___fladd+3,?___flsub+3
  4427   004198  0012               	return		;funcret
  4428   00419A                     __end_of___flsub:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function ___fladd *****************
  4432 ;; Defined at:
  4433 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  b               4    1[COMRAM] long 
  4436 ;;  a               4    5[COMRAM] long 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  grs             1   16[COMRAM] unsigned char 
  4439 ;;  bexp            1   15[COMRAM] unsigned char 
  4440 ;;  aexp            1   14[COMRAM] unsigned char 
  4441 ;;  signs           1   13[COMRAM] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  4    1[COMRAM] unsigned char 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4451 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4454 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4455 ;;Total ram usage:       16 bytes
  4456 ;; Hardware stack levels used: 1
  4457 ;; Hardware stack levels required when called: 1
  4458 ;; This function calls:
  4459 ;;		Nothing
  4460 ;; This function is called by:
  4461 ;;		_convert_rgb2hue
  4462 ;;		___flsub
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text15
  4467   001658                     __ptext15:
  4468                           	callstack 0
  4469   001658                     ___fladd:
  4470                           	callstack 26
  4471   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4472   00165A  0B80               	andlw	128
  4473   00165C  6E0E               	movwf	___fladd@signs^0,c
  4474   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4475   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4476   001662  6E10               	movwf	___fladd@bexp^0,c
  4477   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4478   001666  EF37  F00B         	goto	u5181
  4479   00166A  EF39  F00B         	goto	u5180
  4480   00166E                     u5181:
  4481   00166E  EF3A  F00B         	goto	l5704
  4482   001672                     u5180:
  4483   001672  8010               	bsf	___fladd@bexp^0,0,c
  4484   001674                     l5704:
  4485   001674  5010               	movf	___fladd@bexp^0,w,c
  4486   001676  B4D8               	btfsc	status,2,c
  4487   001678  EF40  F00B         	goto	u5191
  4488   00167C  EF42  F00B         	goto	u5190
  4489   001680                     u5191:
  4490   001680  EF57  F00B         	goto	l5714
  4491   001684                     u5190:
  4492   001684  2810               	incf	___fladd@bexp^0,w,c
  4493   001686  A4D8               	btfss	status,2,c
  4494   001688  EF48  F00B         	goto	u5201
  4495   00168C  EF4A  F00B         	goto	u5200
  4496   001690                     u5201:
  4497   001690  EF52  F00B         	goto	l5710
  4498   001694                     u5200:
  4499   001694  0E00               	movlw	0
  4500   001696  6E02               	movwf	___fladd@b^0,c
  4501   001698  0E00               	movlw	0
  4502   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4503   00169C  0E00               	movlw	0
  4504   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4505   0016A0  0E00               	movlw	0
  4506   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4507   0016A4                     l5710:
  4508   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4509   0016A6  0E00               	movlw	0
  4510   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4511   0016AA  EF5F  F00B         	goto	l5716
  4512   0016AE                     l5714:
  4513   0016AE  0E00               	movlw	0
  4514   0016B0  6E02               	movwf	___fladd@b^0,c
  4515   0016B2  0E00               	movlw	0
  4516   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4517   0016B6  0E00               	movlw	0
  4518   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4519   0016BA  0E00               	movlw	0
  4520   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4521   0016BE                     l5716:
  4522   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4523   0016C0  0B80               	andlw	128
  4524   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4525   0016C4  500E               	movf	___fladd@signs^0,w,c
  4526   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4527   0016C8  B4D8               	btfsc	status,2,c
  4528   0016CA  EF69  F00B         	goto	u5211
  4529   0016CE  EF6B  F00B         	goto	u5210
  4530   0016D2                     u5211:
  4531   0016D2  EF6C  F00B         	goto	l5722
  4532   0016D6                     u5210:
  4533   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4534   0016D8                     l5722:
  4535   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4536   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4537   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4538   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4539   0016E0  EF74  F00B         	goto	u5221
  4540   0016E4  EF76  F00B         	goto	u5220
  4541   0016E8                     u5221:
  4542   0016E8  EF77  F00B         	goto	l5728
  4543   0016EC                     u5220:
  4544   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4545   0016EE                     l5728:
  4546   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4547   0016F0  B4D8               	btfsc	status,2,c
  4548   0016F2  EF7D  F00B         	goto	u5231
  4549   0016F6  EF7F  F00B         	goto	u5230
  4550   0016FA                     u5231:
  4551   0016FA  EF94  F00B         	goto	l5738
  4552   0016FE                     u5230:
  4553   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4554   001700  A4D8               	btfss	status,2,c
  4555   001702  EF85  F00B         	goto	u5241
  4556   001706  EF87  F00B         	goto	u5240
  4557   00170A                     u5241:
  4558   00170A  EF8F  F00B         	goto	l5734
  4559   00170E                     u5240:
  4560   00170E  0E00               	movlw	0
  4561   001710  6E06               	movwf	___fladd@a^0,c
  4562   001712  0E00               	movlw	0
  4563   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4564   001716  0E00               	movlw	0
  4565   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4566   00171A  0E00               	movlw	0
  4567   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4568   00171E                     l5734:
  4569   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4570   001720  0E00               	movlw	0
  4571   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4572   001724  EF9C  F00B         	goto	l5740
  4573   001728                     l5738:
  4574   001728  0E00               	movlw	0
  4575   00172A  6E06               	movwf	___fladd@a^0,c
  4576   00172C  0E00               	movlw	0
  4577   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4578   001730  0E00               	movlw	0
  4579   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4580   001734  0E00               	movlw	0
  4581   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4582   001738                     l5740:
  4583   001738  5010               	movf	___fladd@bexp^0,w,c
  4584   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4585   00173C  B0D8               	btfsc	status,0,c
  4586   00173E  EFA3  F00B         	goto	u5251
  4587   001742  EFA5  F00B         	goto	u5250
  4588   001746                     u5251:
  4589   001746  EFCC  F00B         	goto	l5776
  4590   00174A                     u5250:
  4591   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4592   00174C  EFAA  F00B         	goto	u5261
  4593   001750  EFAC  F00B         	goto	u5260
  4594   001754                     u5261:
  4595   001754  EFAE  F00B         	goto	l5746
  4596   001758                     u5260:
  4597   001758  0E80               	movlw	128
  4598   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4599   00175C                     l5746:
  4600   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4601   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4602   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4603   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4604   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4605   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4606   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4607   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4608   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4609   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4610   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4611   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4612   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4613   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4614   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4615   001798                     l5776:
  4616   001798  0E00               	movlw	0
  4617   00179A  6E11               	movwf	___fladd@grs^0,c
  4618   00179C  5010               	movf	___fladd@bexp^0,w,c
  4619   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4620   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4621   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4622   0017A6  0E00               	movlw	0
  4623   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4624   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4625   0017AC  EFE1  F00B         	goto	u5271
  4626   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4627   0017B2  E109               	bnz	u5270
  4628   0017B4  0E1A               	movlw	26
  4629   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4630   0017B8  A0D8               	btfss	status,0,c
  4631   0017BA  EFE1  F00B         	goto	u5271
  4632   0017BE  EFE3  F00B         	goto	u5270
  4633   0017C2                     u5271:
  4634   0017C2  EF1A  F00C         	goto	l1263
  4635   0017C6                     u5270:
  4636   0017C6  5002               	movf	___fladd@b^0,w,c
  4637   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4638   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4639   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4640   0017CE  A4D8               	btfss	status,2,c
  4641   0017D0  EFEC  F00B         	goto	u5281
  4642   0017D4  EFEF  F00B         	goto	u5280
  4643   0017D8                     u5281:
  4644   0017D8  0E01               	movlw	1
  4645   0017DA  EFF0  F00B         	goto	u5290
  4646   0017DE                     u5280:
  4647   0017DE  0E00               	movlw	0
  4648   0017E0                     u5290:
  4649   0017E0  6E11               	movwf	___fladd@grs^0,c
  4650   0017E2  0E00               	movlw	0
  4651   0017E4  6E02               	movwf	___fladd@b^0,c
  4652   0017E6  0E00               	movlw	0
  4653   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4654   0017EA  0E00               	movlw	0
  4655   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4656   0017EE  0E00               	movlw	0
  4657   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4658   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4659   0017F6  EF23  F00C         	goto	l1262
  4660   0017FA                     l1264:
  4661   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4662   0017FC  EF02  F00C         	goto	u5301
  4663   001800  EF04  F00C         	goto	u5300
  4664   001804                     u5301:
  4665   001804  EF0A  F00C         	goto	l5788
  4666   001808                     u5300:
  4667   001808  90D8               	bcf	status,0,c
  4668   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4669   00180C  0901               	iorlw	1
  4670   00180E  6E11               	movwf	___fladd@grs^0,c
  4671   001810  EF0C  F00C         	goto	l5790
  4672   001814                     l5788:
  4673   001814  90D8               	bcf	status,0,c
  4674   001816  3211               	rrcf	___fladd@grs^0,f,c
  4675   001818                     l5790:
  4676   001818  A002               	btfss	___fladd@b^0,0,c
  4677   00181A  EF11  F00C         	goto	u5311
  4678   00181E  EF13  F00C         	goto	u5310
  4679   001822                     u5311:
  4680   001822  EF14  F00C         	goto	l5794
  4681   001826                     u5310:
  4682   001826  8E11               	bsf	___fladd@grs^0,7,c
  4683   001828                     l5794:
  4684   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4685   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4686   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4687   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4688   001830  3202               	rrcf	___fladd@b^0,f,c
  4689   001832  2A10               	incf	___fladd@bexp^0,f,c
  4690   001834                     l1263:
  4691   001834  500F               	movf	___fladd@aexp^0,w,c
  4692   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4693   001838  A0D8               	btfss	status,0,c
  4694   00183A  EF21  F00C         	goto	u5321
  4695   00183E  EF23  F00C         	goto	u5320
  4696   001842                     u5321:
  4697   001842  EFFD  F00B         	goto	l1264
  4698   001846                     u5320:
  4699   001846                     l1262:
  4700   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4701   001848  EF28  F00C         	goto	u5331
  4702   00184C  EF2A  F00C         	goto	u5330
  4703   001850                     u5331:
  4704   001850  EF6A  F00C         	goto	l5822
  4705   001854                     u5330:
  4706   001854  5010               	movf	___fladd@bexp^0,w,c
  4707   001856  A4D8               	btfss	status,2,c
  4708   001858  EF30  F00C         	goto	u5341
  4709   00185C  EF32  F00C         	goto	u5340
  4710   001860                     u5341:
  4711   001860  EF3C  F00C         	goto	l5804
  4712   001864                     u5340:
  4713   001864  0E00               	movlw	0
  4714   001866  6E02               	movwf	?___fladd^0,c
  4715   001868  0E00               	movlw	0
  4716   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4717   00186C  0E00               	movlw	0
  4718   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4719   001870  0E00               	movlw	0
  4720   001872  6E05               	movwf	(?___fladd+3)^0,c
  4721   001874  EF8B  F00D         	goto	l1271
  4722   001878                     l5804:
  4723   001878  5006               	movf	___fladd@a^0,w,c
  4724   00187A  2602               	addwf	___fladd@b^0,f,c
  4725   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4726   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4727   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4728   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4729   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4730   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4731   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4732   00188A  EF49  F00C         	goto	u5351
  4733   00188E  EF4B  F00C         	goto	u5350
  4734   001892                     u5351:
  4735   001892  EFF7  F00C         	goto	l5858
  4736   001896                     u5350:
  4737   001896  A011               	btfss	___fladd@grs^0,0,c
  4738   001898  EF50  F00C         	goto	u5361
  4739   00189C  EF52  F00C         	goto	u5360
  4740   0018A0                     u5361:
  4741   0018A0  EF58  F00C         	goto	l5812
  4742   0018A4                     u5360:
  4743   0018A4  90D8               	bcf	status,0,c
  4744   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4745   0018A8  0901               	iorlw	1
  4746   0018AA  6E11               	movwf	___fladd@grs^0,c
  4747   0018AC  EF5A  F00C         	goto	l5814
  4748   0018B0                     l5812:
  4749   0018B0  90D8               	bcf	status,0,c
  4750   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4751   0018B4                     l5814:
  4752   0018B4  A002               	btfss	___fladd@b^0,0,c
  4753   0018B6  EF5F  F00C         	goto	u5371
  4754   0018BA  EF61  F00C         	goto	u5370
  4755   0018BE                     u5371:
  4756   0018BE  EF62  F00C         	goto	l5818
  4757   0018C2                     u5370:
  4758   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4759   0018C4                     l5818:
  4760   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4761   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4762   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4763   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4764   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4765   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4766   0018D0  EFF7  F00C         	goto	l5858
  4767   0018D4                     l5822:
  4768   0018D4  5006               	movf	___fladd@a^0,w,c
  4769   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4770   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4771   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4772   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4773   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4774   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4775   0018E2  0A80               	xorlw	128
  4776   0018E4  6E0A               	movwf	??___fladd^0,c
  4777   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4778   0018E8  0A80               	xorlw	128
  4779   0018EA  580A               	subwfb	??___fladd^0,w,c
  4780   0018EC  B0D8               	btfsc	status,0,c
  4781   0018EE  EF7B  F00C         	goto	u5381
  4782   0018F2  EF7D  F00C         	goto	u5380
  4783   0018F6                     u5381:
  4784   0018F6  EFA8  F00C         	goto	l5832
  4785   0018FA                     u5380:
  4786   0018FA  5002               	movf	___fladd@b^0,w,c
  4787   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4788   0018FE  6E0A               	movwf	??___fladd^0,c
  4789   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4790   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4791   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4792   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4793   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4794   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4795   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4796   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4797   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4798   001912  0EFF               	movlw	255
  4799   001914  240A               	addwf	??___fladd^0,w,c
  4800   001916  6E02               	movwf	___fladd@b^0,c
  4801   001918  0EFF               	movlw	255
  4802   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4803   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4804   00191E  0EFF               	movlw	255
  4805   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4806   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4807   001924  0EFF               	movlw	255
  4808   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4809   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4810   00192A  0E80               	movlw	128
  4811   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4812   00192E  6C11               	negf	___fladd@grs^0,c
  4813   001930  5011               	movf	___fladd@grs^0,w,c
  4814   001932  A4D8               	btfss	status,2,c
  4815   001934  EF9E  F00C         	goto	u5391
  4816   001938  EFA0  F00C         	goto	u5390
  4817   00193C                     u5391:
  4818   00193C  EFB0  F00C         	goto	l1279
  4819   001940                     u5390:
  4820   001940  0E01               	movlw	1
  4821   001942  2602               	addwf	___fladd@b^0,f,c
  4822   001944  0E00               	movlw	0
  4823   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4824   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4825   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4826   00194C  EFB0  F00C         	goto	l1279
  4827   001950                     l5832:
  4828   001950  5006               	movf	___fladd@a^0,w,c
  4829   001952  5E02               	subwf	___fladd@b^0,f,c
  4830   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4831   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4832   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4833   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4834   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4835   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4836   001960                     l1279:
  4837   001960  5002               	movf	___fladd@b^0,w,c
  4838   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4839   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4840   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4841   001968  A4D8               	btfss	status,2,c
  4842   00196A  EFB9  F00C         	goto	u5401
  4843   00196E  EFBB  F00C         	goto	u5400
  4844   001972                     u5401:
  4845   001972  EFF0  F00C         	goto	l5856
  4846   001976                     u5400:
  4847   001976  5011               	movf	___fladd@grs^0,w,c
  4848   001978  A4D8               	btfss	status,2,c
  4849   00197A  EFC1  F00C         	goto	u5411
  4850   00197E  EFC3  F00C         	goto	u5410
  4851   001982                     u5411:
  4852   001982  EFF0  F00C         	goto	l5856
  4853   001986                     u5410:
  4854   001986  0E00               	movlw	0
  4855   001988  6E02               	movwf	?___fladd^0,c
  4856   00198A  0E00               	movlw	0
  4857   00198C  6E03               	movwf	(?___fladd+1)^0,c
  4858   00198E  0E00               	movlw	0
  4859   001990  6E04               	movwf	(?___fladd+2)^0,c
  4860   001992  0E00               	movlw	0
  4861   001994  6E05               	movwf	(?___fladd+3)^0,c
  4862   001996  EF8B  F00D         	goto	l1271
  4863   00199A                     l5840:
  4864   00199A  90D8               	bcf	status,0,c
  4865   00199C  3602               	rlcf	___fladd@b^0,f,c
  4866   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  4867   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  4868   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  4869   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  4870   0019A6  EFD7  F00C         	goto	u5421
  4871   0019AA  EFD9  F00C         	goto	u5420
  4872   0019AE                     u5421:
  4873   0019AE  EFDA  F00C         	goto	l5846
  4874   0019B2                     u5420:
  4875   0019B2  8002               	bsf	___fladd@b^0,0,c
  4876   0019B4                     l5846:
  4877   0019B4  A011               	btfss	___fladd@grs^0,0,c
  4878   0019B6  EFDF  F00C         	goto	u5431
  4879   0019BA  EFE1  F00C         	goto	u5430
  4880   0019BE                     u5431:
  4881   0019BE  EFE5  F00C         	goto	l5850
  4882   0019C2                     u5430:
  4883   0019C2  80D8               	bsf	status,0,c
  4884   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  4885   0019C6  EFE7  F00C         	goto	l5852
  4886   0019CA                     l5850:
  4887   0019CA  90D8               	bcf	status,0,c
  4888   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  4889   0019CE                     l5852:
  4890   0019CE  5010               	movf	___fladd@bexp^0,w,c
  4891   0019D0  B4D8               	btfsc	status,2,c
  4892   0019D2  EFED  F00C         	goto	u5441
  4893   0019D6  EFEF  F00C         	goto	u5440
  4894   0019DA                     u5441:
  4895   0019DA  EFF0  F00C         	goto	l5856
  4896   0019DE                     u5440:
  4897   0019DE  0610               	decf	___fladd@bexp^0,f,c
  4898   0019E0                     l5856:
  4899   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  4900   0019E2  EFF5  F00C         	goto	u5451
  4901   0019E6  EFF7  F00C         	goto	u5450
  4902   0019EA                     u5451:
  4903   0019EA  EFCD  F00C         	goto	l5840
  4904   0019EE                     u5450:
  4905   0019EE                     l5858:
  4906   0019EE  0E00               	movlw	0
  4907   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  4908   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  4909   0019F4  EFFE  F00C         	goto	u5461
  4910   0019F8  EF00  F00D         	goto	u5460
  4911   0019FC                     u5461:
  4912   0019FC  EF18  F00D         	goto	l1288
  4913   001A00                     u5460:
  4914   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  4915   001A04  0E7F               	movlw	127
  4916   001A06  160A               	andwf	??___fladd^0,f,c
  4917   001A08  B4D8               	btfsc	status,2,c
  4918   001A0A  EF09  F00D         	goto	u5471
  4919   001A0E  EF0B  F00D         	goto	u5470
  4920   001A12                     u5471:
  4921   001A12  EF0F  F00D         	goto	l1289
  4922   001A16                     u5470:
  4923   001A16                     l5864:
  4924   001A16  0E01               	movlw	1
  4925   001A18  6E0F               	movwf	___fladd@aexp^0,c
  4926   001A1A  EF18  F00D         	goto	l1288
  4927   001A1E                     l1289:
  4928   001A1E  A002               	btfss	___fladd@b^0,0,c
  4929   001A20  EF14  F00D         	goto	u5481
  4930   001A24  EF16  F00D         	goto	u5480
  4931   001A28                     u5481:
  4932   001A28  EF18  F00D         	goto	l1288
  4933   001A2C                     u5480:
  4934   001A2C  EF0B  F00D         	goto	l5864
  4935   001A30                     l1288:
  4936   001A30  500F               	movf	___fladd@aexp^0,w,c
  4937   001A32  B4D8               	btfsc	status,2,c
  4938   001A34  EF1E  F00D         	goto	u5491
  4939   001A38  EF20  F00D         	goto	u5490
  4940   001A3C                     u5491:
  4941   001A3C  EF4B  F00D         	goto	l5876
  4942   001A40                     u5490:
  4943   001A40  0E01               	movlw	1
  4944   001A42  2602               	addwf	___fladd@b^0,f,c
  4945   001A44  0E00               	movlw	0
  4946   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  4947   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  4948   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4949   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  4950   001A4E  EF2B  F00D         	goto	u5501
  4951   001A52  EF2D  F00D         	goto	u5500
  4952   001A56                     u5501:
  4953   001A56  EF4B  F00D         	goto	l5876
  4954   001A5A                     u5500:
  4955   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  4956   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4957   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4958   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4959   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  4960   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  4961   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  4962   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  4963   001A72  320A               	rrcf	??___fladd^0,f,c
  4964   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  4965   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4966   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4967   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4968   001A84  2810               	incf	___fladd@bexp^0,w,c
  4969   001A86  B4D8               	btfsc	status,2,c
  4970   001A88  EF48  F00D         	goto	u5511
  4971   001A8C  EF4A  F00D         	goto	u5510
  4972   001A90                     u5511:
  4973   001A90  EF4B  F00D         	goto	l5876
  4974   001A94                     u5510:
  4975   001A94  2A10               	incf	___fladd@bexp^0,f,c
  4976   001A96                     l5876:
  4977   001A96  2810               	incf	___fladd@bexp^0,w,c
  4978   001A98  B4D8               	btfsc	status,2,c
  4979   001A9A  EF51  F00D         	goto	u5521
  4980   001A9E  EF53  F00D         	goto	u5520
  4981   001AA2                     u5521:
  4982   001AA2  EF5B  F00D         	goto	l5880
  4983   001AA6                     u5520:
  4984   001AA6  5010               	movf	___fladd@bexp^0,w,c
  4985   001AA8  A4D8               	btfss	status,2,c
  4986   001AAA  EF59  F00D         	goto	u5531
  4987   001AAE  EF5B  F00D         	goto	u5530
  4988   001AB2                     u5531:
  4989   001AB2  EF6D  F00D         	goto	l5884
  4990   001AB6                     u5530:
  4991   001AB6                     l5880:
  4992   001AB6  0E00               	movlw	0
  4993   001AB8  6E02               	movwf	___fladd@b^0,c
  4994   001ABA  0E00               	movlw	0
  4995   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  4996   001ABE  0E00               	movlw	0
  4997   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  4998   001AC2  0E00               	movlw	0
  4999   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  5000   001AC6  5010               	movf	___fladd@bexp^0,w,c
  5001   001AC8  A4D8               	btfss	status,2,c
  5002   001ACA  EF69  F00D         	goto	u5541
  5003   001ACE  EF6B  F00D         	goto	u5540
  5004   001AD2                     u5541:
  5005   001AD2  EF6D  F00D         	goto	l5884
  5006   001AD6                     u5540:
  5007   001AD6  0E00               	movlw	0
  5008   001AD8  6E0E               	movwf	___fladd@signs^0,c
  5009   001ADA                     l5884:
  5010   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  5011   001ADC  EF72  F00D         	goto	u5551
  5012   001AE0  EF74  F00D         	goto	u5550
  5013   001AE4                     u5551:
  5014   001AE4  EF77  F00D         	goto	l5888
  5015   001AE8                     u5550:
  5016   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  5017   001AEA  EF78  F00D         	goto	l5890
  5018   001AEE                     l5888:
  5019   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  5020   001AF0                     l5890:
  5021   001AF0  90D8               	bcf	status,0,c
  5022   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  5023   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  5024   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  5025   001AF8  EF80  F00D         	goto	u5561
  5026   001AFC  EF82  F00D         	goto	u5560
  5027   001B00                     u5561:
  5028   001B00  EF83  F00D         	goto	l5896
  5029   001B04                     u5560:
  5030   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5031   001B06                     l5896:
  5032   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5033   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5034   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5035   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5036   001B16                     l1271:
  5037   001B16  0012               	return		;funcret
  5038   001B18                     __end_of___fladd:
  5039                           	callstack 0
  5040                           
  5041 ;; *************** function ___flmul *****************
  5042 ;; Defined at:
  5043 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  b               4   15[COMRAM] unsigned char 
  5046 ;;  a               4   19[COMRAM] unsigned char 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  prod            4   34[COMRAM] struct .
  5049 ;;  grs             4   29[COMRAM] unsigned long 
  5050 ;;  temp            2   38[COMRAM] struct .
  5051 ;;  bexp            1   33[COMRAM] unsigned char 
  5052 ;;  aexp            1   28[COMRAM] unsigned char 
  5053 ;;  sign            1   27[COMRAM] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  4   15[COMRAM] unsigned char 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0, prodl, prodh
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5063 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;Total ram usage:       25 bytes
  5068 ;; Hardware stack levels used: 1
  5069 ;; Hardware stack levels required when called: 1
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_convert_rgb2hue
  5074 ;;		_fullSpeedAhead
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text16
  5079   001B18                     __ptext16:
  5080                           	callstack 0
  5081   001B18                     ___flmul:
  5082                           	callstack 26
  5083   001B18  5013               	movf	(___flmul@b+3)^0,w,c
  5084   001B1A  0B80               	andlw	128
  5085   001B1C  6E1C               	movwf	___flmul@sign^0,c
  5086   001B1E  5013               	movf	(___flmul@b+3)^0,w,c
  5087   001B20  2413               	addwf	(___flmul@b+3)^0,w,c
  5088   001B22  6E22               	movwf	___flmul@bexp^0,c
  5089   001B24  AE12               	btfss	(___flmul@b+2)^0,7,c
  5090   001B26  EF97  F00D         	goto	u5571
  5091   001B2A  EF99  F00D         	goto	u5570
  5092   001B2E                     u5571:
  5093   001B2E  EF9A  F00D         	goto	l5906
  5094   001B32                     u5570:
  5095   001B32  8022               	bsf	___flmul@bexp^0,0,c
  5096   001B34                     l5906:
  5097   001B34  5022               	movf	___flmul@bexp^0,w,c
  5098   001B36  B4D8               	btfsc	status,2,c
  5099   001B38  EFA0  F00D         	goto	u5581
  5100   001B3C  EFA2  F00D         	goto	u5580
  5101   001B40                     u5581:
  5102   001B40  EFB5  F00D         	goto	l5914
  5103   001B44                     u5580:
  5104   001B44  2822               	incf	___flmul@bexp^0,w,c
  5105   001B46  A4D8               	btfss	status,2,c
  5106   001B48  EFA8  F00D         	goto	u5591
  5107   001B4C  EFAA  F00D         	goto	u5590
  5108   001B50                     u5591:
  5109   001B50  EFB2  F00D         	goto	l5912
  5110   001B54                     u5590:
  5111   001B54  0E00               	movlw	0
  5112   001B56  6E10               	movwf	___flmul@b^0,c
  5113   001B58  0E00               	movlw	0
  5114   001B5A  6E11               	movwf	(___flmul@b+1)^0,c
  5115   001B5C  0E00               	movlw	0
  5116   001B5E  6E12               	movwf	(___flmul@b+2)^0,c
  5117   001B60  0E00               	movlw	0
  5118   001B62  6E13               	movwf	(___flmul@b+3)^0,c
  5119   001B64                     l5912:
  5120   001B64  8E12               	bsf	(___flmul@b+2)^0,7,c
  5121   001B66  EFBD  F00D         	goto	l5916
  5122   001B6A                     l5914:
  5123   001B6A  0E00               	movlw	0
  5124   001B6C  6E10               	movwf	___flmul@b^0,c
  5125   001B6E  0E00               	movlw	0
  5126   001B70  6E11               	movwf	(___flmul@b+1)^0,c
  5127   001B72  0E00               	movlw	0
  5128   001B74  6E12               	movwf	(___flmul@b+2)^0,c
  5129   001B76  0E00               	movlw	0
  5130   001B78  6E13               	movwf	(___flmul@b+3)^0,c
  5131   001B7A                     l5916:
  5132   001B7A  5017               	movf	(___flmul@a+3)^0,w,c
  5133   001B7C  0B80               	andlw	128
  5134   001B7E  1A1C               	xorwf	___flmul@sign^0,f,c
  5135   001B80  5017               	movf	(___flmul@a+3)^0,w,c
  5136   001B82  2417               	addwf	(___flmul@a+3)^0,w,c
  5137   001B84  6E1D               	movwf	___flmul@aexp^0,c
  5138   001B86  AE16               	btfss	(___flmul@a+2)^0,7,c
  5139   001B88  EFC8  F00D         	goto	u5601
  5140   001B8C  EFCA  F00D         	goto	u5600
  5141   001B90                     u5601:
  5142   001B90  EFCB  F00D         	goto	l5924
  5143   001B94                     u5600:
  5144   001B94  801D               	bsf	___flmul@aexp^0,0,c
  5145   001B96                     l5924:
  5146   001B96  501D               	movf	___flmul@aexp^0,w,c
  5147   001B98  B4D8               	btfsc	status,2,c
  5148   001B9A  EFD1  F00D         	goto	u5611
  5149   001B9E  EFD3  F00D         	goto	u5610
  5150   001BA2                     u5611:
  5151   001BA2  EFE6  F00D         	goto	l5932
  5152   001BA6                     u5610:
  5153   001BA6  281D               	incf	___flmul@aexp^0,w,c
  5154   001BA8  A4D8               	btfss	status,2,c
  5155   001BAA  EFD9  F00D         	goto	u5621
  5156   001BAE  EFDB  F00D         	goto	u5620
  5157   001BB2                     u5621:
  5158   001BB2  EFE3  F00D         	goto	l5930
  5159   001BB6                     u5620:
  5160   001BB6  0E00               	movlw	0
  5161   001BB8  6E14               	movwf	___flmul@a^0,c
  5162   001BBA  0E00               	movlw	0
  5163   001BBC  6E15               	movwf	(___flmul@a+1)^0,c
  5164   001BBE  0E00               	movlw	0
  5165   001BC0  6E16               	movwf	(___flmul@a+2)^0,c
  5166   001BC2  0E00               	movlw	0
  5167   001BC4  6E17               	movwf	(___flmul@a+3)^0,c
  5168   001BC6                     l5930:
  5169   001BC6  8E16               	bsf	(___flmul@a+2)^0,7,c
  5170   001BC8  EFEE  F00D         	goto	l1348
  5171   001BCC                     l5932:
  5172   001BCC  0E00               	movlw	0
  5173   001BCE  6E14               	movwf	___flmul@a^0,c
  5174   001BD0  0E00               	movlw	0
  5175   001BD2  6E15               	movwf	(___flmul@a+1)^0,c
  5176   001BD4  0E00               	movlw	0
  5177   001BD6  6E16               	movwf	(___flmul@a+2)^0,c
  5178   001BD8  0E00               	movlw	0
  5179   001BDA  6E17               	movwf	(___flmul@a+3)^0,c
  5180   001BDC                     l1348:
  5181   001BDC  501D               	movf	___flmul@aexp^0,w,c
  5182   001BDE  B4D8               	btfsc	status,2,c
  5183   001BE0  EFF4  F00D         	goto	u5631
  5184   001BE4  EFF6  F00D         	goto	u5630
  5185   001BE8                     u5631:
  5186   001BE8  EFFE  F00D         	goto	l5936
  5187   001BEC                     u5630:
  5188   001BEC  5022               	movf	___flmul@bexp^0,w,c
  5189   001BEE  A4D8               	btfss	status,2,c
  5190   001BF0  EFFC  F00D         	goto	u5641
  5191   001BF4  EFFE  F00D         	goto	u5640
  5192   001BF8                     u5641:
  5193   001BF8  EF08  F00E         	goto	l5940
  5194   001BFC                     u5640:
  5195   001BFC                     l5936:
  5196   001BFC  0E00               	movlw	0
  5197   001BFE  6E10               	movwf	?___flmul^0,c
  5198   001C00  0E00               	movlw	0
  5199   001C02  6E11               	movwf	(?___flmul+1)^0,c
  5200   001C04  0E00               	movlw	0
  5201   001C06  6E12               	movwf	(?___flmul+2)^0,c
  5202   001C08  0E00               	movlw	0
  5203   001C0A  6E13               	movwf	(?___flmul+3)^0,c
  5204   001C0C  EFA0  F00F         	goto	l1352
  5205   001C10                     l5940:
  5206   001C10  5016               	movf	(___flmul@a+2)^0,w,c
  5207   001C12  0210               	mulwf	___flmul@b^0,c
  5208   001C14  CFF3 F027          	movff	prodl,___flmul@temp
  5209   001C18  CFF4 F028          	movff	prodh,___flmul@temp+1
  5210   001C1C  5027               	movf	___flmul@temp^0,w,c
  5211   001C1E  6E1E               	movwf	___flmul@grs^0,c
  5212   001C20  6A1F               	clrf	(___flmul@grs+1)^0,c
  5213   001C22  6A20               	clrf	(___flmul@grs+2)^0,c
  5214   001C24  6A21               	clrf	(___flmul@grs+3)^0,c
  5215   001C26  5028               	movf	(___flmul@temp+1)^0,w,c
  5216   001C28  6E23               	movwf	___flmul@prod^0,c
  5217   001C2A  6A24               	clrf	(___flmul@prod+1)^0,c
  5218   001C2C  6A25               	clrf	(___flmul@prod+2)^0,c
  5219   001C2E  6A26               	clrf	(___flmul@prod+3)^0,c
  5220   001C30  5015               	movf	(___flmul@a+1)^0,w,c
  5221   001C32  0211               	mulwf	(___flmul@b+1)^0,c
  5222   001C34  CFF3 F027          	movff	prodl,___flmul@temp
  5223   001C38  CFF4 F028          	movff	prodh,___flmul@temp+1
  5224   001C3C  5027               	movf	___flmul@temp^0,w,c
  5225   001C3E  261E               	addwf	___flmul@grs^0,f,c
  5226   001C40  0E00               	movlw	0
  5227   001C42  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5228   001C44  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5229   001C46  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5230   001C48  5028               	movf	(___flmul@temp+1)^0,w,c
  5231   001C4A  2623               	addwf	___flmul@prod^0,f,c
  5232   001C4C  0E00               	movlw	0
  5233   001C4E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5234   001C50  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5235   001C52  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5236   001C54  5014               	movf	___flmul@a^0,w,c
  5237   001C56  0212               	mulwf	(___flmul@b+2)^0,c
  5238   001C58  CFF3 F027          	movff	prodl,___flmul@temp
  5239   001C5C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5240   001C60  5027               	movf	___flmul@temp^0,w,c
  5241   001C62  261E               	addwf	___flmul@grs^0,f,c
  5242   001C64  0E00               	movlw	0
  5243   001C66  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5244   001C68  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5245   001C6A  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5246   001C6C  5028               	movf	(___flmul@temp+1)^0,w,c
  5247   001C6E  2623               	addwf	___flmul@prod^0,f,c
  5248   001C70  0E00               	movlw	0
  5249   001C72  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5250   001C74  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5251   001C76  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5252   001C78  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5253   001C7C  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5254   001C80  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5255   001C84  6A1E               	clrf	___flmul@grs^0,c
  5256   001C86  5014               	movf	___flmul@a^0,w,c
  5257   001C88  0211               	mulwf	(___flmul@b+1)^0,c
  5258   001C8A  CFF3 F027          	movff	prodl,___flmul@temp
  5259   001C8E  CFF4 F028          	movff	prodh,___flmul@temp+1
  5260   001C92  5027               	movf	___flmul@temp^0,w,c
  5261   001C94  261E               	addwf	___flmul@grs^0,f,c
  5262   001C96  5028               	movf	(___flmul@temp+1)^0,w,c
  5263   001C98  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5264   001C9A  0E00               	movlw	0
  5265   001C9C  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5266   001C9E  0E00               	movlw	0
  5267   001CA0  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5268   001CA2  5015               	movf	(___flmul@a+1)^0,w,c
  5269   001CA4  0210               	mulwf	___flmul@b^0,c
  5270   001CA6  CFF3 F027          	movff	prodl,___flmul@temp
  5271   001CAA  CFF4 F028          	movff	prodh,___flmul@temp+1
  5272   001CAE  5027               	movf	___flmul@temp^0,w,c
  5273   001CB0  261E               	addwf	___flmul@grs^0,f,c
  5274   001CB2  5028               	movf	(___flmul@temp+1)^0,w,c
  5275   001CB4  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5276   001CB6  0E00               	movlw	0
  5277   001CB8  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5278   001CBA  0E00               	movlw	0
  5279   001CBC  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5280   001CBE  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5281   001CC2  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5282   001CC6  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5283   001CCA  6A1E               	clrf	___flmul@grs^0,c
  5284   001CCC  5014               	movf	___flmul@a^0,w,c
  5285   001CCE  0210               	mulwf	___flmul@b^0,c
  5286   001CD0  CFF3 F027          	movff	prodl,___flmul@temp
  5287   001CD4  CFF4 F028          	movff	prodh,___flmul@temp+1
  5288   001CD8  5027               	movf	___flmul@temp^0,w,c
  5289   001CDA  261E               	addwf	___flmul@grs^0,f,c
  5290   001CDC  5028               	movf	(___flmul@temp+1)^0,w,c
  5291   001CDE  221F               	addwfc	(___flmul@grs+1)^0,f,c
  5292   001CE0  0E00               	movlw	0
  5293   001CE2  2220               	addwfc	(___flmul@grs+2)^0,f,c
  5294   001CE4  0E00               	movlw	0
  5295   001CE6  2221               	addwfc	(___flmul@grs+3)^0,f,c
  5296   001CE8  5016               	movf	(___flmul@a+2)^0,w,c
  5297   001CEA  0211               	mulwf	(___flmul@b+1)^0,c
  5298   001CEC  CFF3 F027          	movff	prodl,___flmul@temp
  5299   001CF0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5300   001CF4  5027               	movf	___flmul@temp^0,w,c
  5301   001CF6  2623               	addwf	___flmul@prod^0,f,c
  5302   001CF8  5028               	movf	(___flmul@temp+1)^0,w,c
  5303   001CFA  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5304   001CFC  0E00               	movlw	0
  5305   001CFE  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5306   001D00  0E00               	movlw	0
  5307   001D02  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5308   001D04  5015               	movf	(___flmul@a+1)^0,w,c
  5309   001D06  0212               	mulwf	(___flmul@b+2)^0,c
  5310   001D08  CFF3 F027          	movff	prodl,___flmul@temp
  5311   001D0C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5312   001D10  5027               	movf	___flmul@temp^0,w,c
  5313   001D12  2623               	addwf	___flmul@prod^0,f,c
  5314   001D14  5028               	movf	(___flmul@temp+1)^0,w,c
  5315   001D16  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5316   001D18  0E00               	movlw	0
  5317   001D1A  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5318   001D1C  0E00               	movlw	0
  5319   001D1E  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5320   001D20  5016               	movf	(___flmul@a+2)^0,w,c
  5321   001D22  0212               	mulwf	(___flmul@b+2)^0,c
  5322   001D24  CFF3 F027          	movff	prodl,___flmul@temp
  5323   001D28  CFF4 F028          	movff	prodh,___flmul@temp+1
  5324   001D2C  5027               	movf	___flmul@temp^0,w,c
  5325   001D2E  6E18               	movwf	??___flmul^0,c
  5326   001D30  5028               	movf	(___flmul@temp+1)^0,w,c
  5327   001D32  6E19               	movwf	(??___flmul+1)^0,c
  5328   001D34  6A1A               	clrf	(??___flmul+2)^0,c
  5329   001D36  6A1B               	clrf	(??___flmul+3)^0,c
  5330   001D38  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  5331   001D3C  C019  F01A         	movff	??___flmul+1,??___flmul+2
  5332   001D40  C018  F019         	movff	??___flmul,??___flmul+1
  5333   001D44  6A18               	clrf	??___flmul^0,c
  5334   001D46  5018               	movf	??___flmul^0,w,c
  5335   001D48  2623               	addwf	___flmul@prod^0,f,c
  5336   001D4A  5019               	movf	(??___flmul+1)^0,w,c
  5337   001D4C  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5338   001D4E  501A               	movf	(??___flmul+2)^0,w,c
  5339   001D50  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5340   001D52  501B               	movf	(??___flmul+3)^0,w,c
  5341   001D54  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5342   001D56  C01E  F018         	movff	___flmul@grs,??___flmul
  5343   001D5A  C01F  F019         	movff	___flmul@grs+1,??___flmul+1
  5344   001D5E  C020  F01A         	movff	___flmul@grs+2,??___flmul+2
  5345   001D62  C021  F01B         	movff	___flmul@grs+3,??___flmul+3
  5346   001D66  0E19               	movlw	25
  5347   001D68  EFBB  F00E         	goto	u5650
  5348   001D6C                     u5655:
  5349   001D6C  90D8               	bcf	status,0,c
  5350   001D6E  321B               	rrcf	(??___flmul+3)^0,f,c
  5351   001D70  321A               	rrcf	(??___flmul+2)^0,f,c
  5352   001D72  3219               	rrcf	(??___flmul+1)^0,f,c
  5353   001D74  3218               	rrcf	??___flmul^0,f,c
  5354   001D76                     u5650:
  5355   001D76  2EE8               	decfsz	wreg,f,c
  5356   001D78  EFB6  F00E         	goto	u5655
  5357   001D7C  5018               	movf	??___flmul^0,w,c
  5358   001D7E  2623               	addwf	___flmul@prod^0,f,c
  5359   001D80  5019               	movf	(??___flmul+1)^0,w,c
  5360   001D82  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5361   001D84  501A               	movf	(??___flmul+2)^0,w,c
  5362   001D86  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5363   001D88  501B               	movf	(??___flmul+3)^0,w,c
  5364   001D8A  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5365   001D8C  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  5366   001D90  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  5367   001D94  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  5368   001D98  6A1E               	clrf	___flmul@grs^0,c
  5369   001D9A  501D               	movf	___flmul@aexp^0,w,c
  5370   001D9C  C022  F018         	movff	___flmul@bexp,??___flmul
  5371   001DA0  6A19               	clrf	(??___flmul+1)^0,c
  5372   001DA2  2618               	addwf	??___flmul^0,f,c
  5373   001DA4  0E00               	movlw	0
  5374   001DA6  2219               	addwfc	(??___flmul+1)^0,f,c
  5375   001DA8  0E82               	movlw	130
  5376   001DAA  2418               	addwf	??___flmul^0,w,c
  5377   001DAC  6E27               	movwf	___flmul@temp^0,c
  5378   001DAE  0EFF               	movlw	255
  5379   001DB0  2019               	addwfc	(??___flmul+1)^0,w,c
  5380   001DB2  6E28               	movwf	(___flmul@temp+1)^0,c
  5381   001DB4  EFF1  F00E         	goto	l5988
  5382   001DB8                     l5982:
  5383   001DB8  90D8               	bcf	status,0,c
  5384   001DBA  3623               	rlcf	___flmul@prod^0,f,c
  5385   001DBC  3624               	rlcf	(___flmul@prod+1)^0,f,c
  5386   001DBE  3625               	rlcf	(___flmul@prod+2)^0,f,c
  5387   001DC0  3626               	rlcf	(___flmul@prod+3)^0,f,c
  5388   001DC2  AE21               	btfss	(___flmul@grs+3)^0,7,c
  5389   001DC4  EFE6  F00E         	goto	u5661
  5390   001DC8  EFE8  F00E         	goto	u5660
  5391   001DCC                     u5661:
  5392   001DCC  EFE9  F00E         	goto	l1355
  5393   001DD0                     u5660:
  5394   001DD0  8023               	bsf	___flmul@prod^0,0,c
  5395   001DD2                     l1355:
  5396   001DD2  90D8               	bcf	status,0,c
  5397   001DD4  361E               	rlcf	___flmul@grs^0,f,c
  5398   001DD6  361F               	rlcf	(___flmul@grs+1)^0,f,c
  5399   001DD8  3620               	rlcf	(___flmul@grs+2)^0,f,c
  5400   001DDA  3621               	rlcf	(___flmul@grs+3)^0,f,c
  5401   001DDC  0627               	decf	___flmul@temp^0,f,c
  5402   001DDE  A0D8               	btfss	status,0,c
  5403   001DE0  0628               	decf	(___flmul@temp+1)^0,f,c
  5404   001DE2                     l5988:
  5405   001DE2  AE25               	btfss	(___flmul@prod+2)^0,7,c
  5406   001DE4  EFF6  F00E         	goto	u5671
  5407   001DE8  EFF8  F00E         	goto	u5670
  5408   001DEC                     u5671:
  5409   001DEC  EFDC  F00E         	goto	l5982
  5410   001DF0                     u5670:
  5411   001DF0  0E00               	movlw	0
  5412   001DF2  6E1D               	movwf	___flmul@aexp^0,c
  5413   001DF4  AE21               	btfss	(___flmul@grs+3)^0,7,c
  5414   001DF6  EFFF  F00E         	goto	u5681
  5415   001DFA  EF01  F00F         	goto	u5680
  5416   001DFE                     u5681:
  5417   001DFE  EF25  F00F         	goto	l1357
  5418   001E02                     u5680:
  5419   001E02  0EFF               	movlw	255
  5420   001E04  141E               	andwf	___flmul@grs^0,w,c
  5421   001E06  6E18               	movwf	??___flmul^0,c
  5422   001E08  0EFF               	movlw	255
  5423   001E0A  141F               	andwf	(___flmul@grs+1)^0,w,c
  5424   001E0C  6E19               	movwf	(??___flmul+1)^0,c
  5425   001E0E  0EFF               	movlw	255
  5426   001E10  1420               	andwf	(___flmul@grs+2)^0,w,c
  5427   001E12  6E1A               	movwf	(??___flmul+2)^0,c
  5428   001E14  0E7F               	movlw	127
  5429   001E16  1421               	andwf	(___flmul@grs+3)^0,w,c
  5430   001E18  6E1B               	movwf	(??___flmul+3)^0,c
  5431   001E1A  5018               	movf	??___flmul^0,w,c
  5432   001E1C  1019               	iorwf	(??___flmul+1)^0,w,c
  5433   001E1E  101A               	iorwf	(??___flmul+2)^0,w,c
  5434   001E20  101B               	iorwf	(??___flmul+3)^0,w,c
  5435   001E22  B4D8               	btfsc	status,2,c
  5436   001E24  EF16  F00F         	goto	u5691
  5437   001E28  EF18  F00F         	goto	u5690
  5438   001E2C                     u5691:
  5439   001E2C  EF1C  F00F         	goto	l1358
  5440   001E30                     u5690:
  5441   001E30                     l5996:
  5442   001E30  0E01               	movlw	1
  5443   001E32  6E1D               	movwf	___flmul@aexp^0,c
  5444   001E34  EF25  F00F         	goto	l1357
  5445   001E38                     l1358:
  5446   001E38  A023               	btfss	___flmul@prod^0,0,c
  5447   001E3A  EF21  F00F         	goto	u5701
  5448   001E3E  EF23  F00F         	goto	u5700
  5449   001E42                     u5701:
  5450   001E42  EF25  F00F         	goto	l1357
  5451   001E46                     u5700:
  5452   001E46  EF18  F00F         	goto	l5996
  5453   001E4A                     l1357:
  5454   001E4A  501D               	movf	___flmul@aexp^0,w,c
  5455   001E4C  B4D8               	btfsc	status,2,c
  5456   001E4E  EF2B  F00F         	goto	u5711
  5457   001E52  EF2D  F00F         	goto	u5710
  5458   001E56                     u5711:
  5459   001E56  EF51  F00F         	goto	l6008
  5460   001E5A                     u5710:
  5461   001E5A  0E01               	movlw	1
  5462   001E5C  2623               	addwf	___flmul@prod^0,f,c
  5463   001E5E  0E00               	movlw	0
  5464   001E60  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5465   001E62  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5466   001E64  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5467   001E66  A026               	btfss	(___flmul@prod+3)^0,0,c
  5468   001E68  EF38  F00F         	goto	u5721
  5469   001E6C  EF3A  F00F         	goto	u5720
  5470   001E70                     u5721:
  5471   001E70  EF51  F00F         	goto	l6008
  5472   001E74                     u5720:
  5473   001E74  C023  F018         	movff	___flmul@prod,??___flmul
  5474   001E78  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  5475   001E7C  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  5476   001E80  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  5477   001E84  341B               	rlcf	(??___flmul+3)^0,w,c
  5478   001E86  321B               	rrcf	(??___flmul+3)^0,f,c
  5479   001E88  321A               	rrcf	(??___flmul+2)^0,f,c
  5480   001E8A  3219               	rrcf	(??___flmul+1)^0,f,c
  5481   001E8C  3218               	rrcf	??___flmul^0,f,c
  5482   001E8E  C018  F023         	movff	??___flmul,___flmul@prod
  5483   001E92  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  5484   001E96  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  5485   001E9A  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  5486   001E9E  4A27               	infsnz	___flmul@temp^0,f,c
  5487   001EA0  2A28               	incf	(___flmul@temp+1)^0,f,c
  5488   001EA2                     l6008:
  5489   001EA2  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5490   001EA4  EF5C  F00F         	goto	u5731
  5491   001EA8  5028               	movf	(___flmul@temp+1)^0,w,c
  5492   001EAA  E108               	bnz	u5730
  5493   001EAC  2827               	incf	___flmul@temp^0,w,c
  5494   001EAE  A0D8               	btfss	status,0,c
  5495   001EB0  EF5C  F00F         	goto	u5731
  5496   001EB4  EF5E  F00F         	goto	u5730
  5497   001EB8                     u5731:
  5498   001EB8  EF68  F00F         	goto	l6012
  5499   001EBC                     u5730:
  5500   001EBC  0E00               	movlw	0
  5501   001EBE  6E23               	movwf	___flmul@prod^0,c
  5502   001EC0  0E00               	movlw	0
  5503   001EC2  6E24               	movwf	(___flmul@prod+1)^0,c
  5504   001EC4  0E80               	movlw	128
  5505   001EC6  6E25               	movwf	(___flmul@prod+2)^0,c
  5506   001EC8  0E7F               	movlw	127
  5507   001ECA  6E26               	movwf	(___flmul@prod+3)^0,c
  5508   001ECC  EF96  F00F         	goto	l6024
  5509   001ED0                     l6012:
  5510   001ED0  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5511   001ED2  EF75  F00F         	goto	u5740
  5512   001ED6  5028               	movf	(___flmul@temp+1)^0,w,c
  5513   001ED8  E106               	bnz	u5741
  5514   001EDA  0427               	decf	___flmul@temp^0,w,c
  5515   001EDC  B0D8               	btfsc	status,0,c
  5516   001EDE  EF73  F00F         	goto	u5741
  5517   001EE2  EF75  F00F         	goto	u5740
  5518   001EE6                     u5741:
  5519   001EE6  EF81  F00F         	goto	l1365
  5520   001EEA                     u5740:
  5521   001EEA  0E00               	movlw	0
  5522   001EEC  6E23               	movwf	___flmul@prod^0,c
  5523   001EEE  0E00               	movlw	0
  5524   001EF0  6E24               	movwf	(___flmul@prod+1)^0,c
  5525   001EF2  0E00               	movlw	0
  5526   001EF4  6E25               	movwf	(___flmul@prod+2)^0,c
  5527   001EF6  0E00               	movlw	0
  5528   001EF8  6E26               	movwf	(___flmul@prod+3)^0,c
  5529   001EFA  0E00               	movlw	0
  5530   001EFC  6E1C               	movwf	___flmul@sign^0,c
  5531   001EFE  EF96  F00F         	goto	l6024
  5532   001F02                     l1365:
  5533   001F02  C027  F022         	movff	___flmul@temp,___flmul@bexp
  5534   001F06  0EFF               	movlw	255
  5535   001F08  1623               	andwf	___flmul@prod^0,f,c
  5536   001F0A  0EFF               	movlw	255
  5537   001F0C  1624               	andwf	(___flmul@prod+1)^0,f,c
  5538   001F0E  0E7F               	movlw	127
  5539   001F10  1625               	andwf	(___flmul@prod+2)^0,f,c
  5540   001F12  0E00               	movlw	0
  5541   001F14  1626               	andwf	(___flmul@prod+3)^0,f,c
  5542   001F16  A022               	btfss	___flmul@bexp^0,0,c
  5543   001F18  EF90  F00F         	goto	u5751
  5544   001F1C  EF92  F00F         	goto	u5750
  5545   001F20                     u5751:
  5546   001F20  EF93  F00F         	goto	l6022
  5547   001F24                     u5750:
  5548   001F24  8E25               	bsf	(___flmul@prod+2)^0,7,c
  5549   001F26                     l6022:
  5550   001F26  90D8               	bcf	status,0,c
  5551   001F28  3022               	rrcf	___flmul@bexp^0,w,c
  5552   001F2A  6E26               	movwf	(___flmul@prod+3)^0,c
  5553   001F2C                     l6024:
  5554   001F2C  501C               	movf	___flmul@sign^0,w,c
  5555   001F2E  1226               	iorwf	(___flmul@prod+3)^0,f,c
  5556   001F30  C023  F010         	movff	___flmul@prod,?___flmul
  5557   001F34  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  5558   001F38  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  5559   001F3C  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  5560   001F40                     l1352:
  5561   001F40  0012               	return		;funcret
  5562   001F42                     __end_of___flmul:
  5563                           	callstack 0
  5564                           
  5565 ;; *************** function ___flge *****************
  5566 ;; Defined at:
  5567 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  ff1             4    1[COMRAM] unsigned char 
  5570 ;;  ff2             4    5[COMRAM] unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;		None               void
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5582 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5584 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5585 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5586 ;;Total ram usage:       12 bytes
  5587 ;; Hardware stack levels used: 1
  5588 ;; Hardware stack levels required when called: 1
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_convert_rgb2hue
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text17
  5597   0034B0                     __ptext17:
  5598                           	callstack 0
  5599   0034B0                     ___flge:
  5600                           	callstack 27
  5601   0034B0  0E00               	movlw	0
  5602   0034B2  1402               	andwf	___flge@ff1^0,w,c
  5603   0034B4  6E0A               	movwf	??___flge^0,c
  5604   0034B6  0E00               	movlw	0
  5605   0034B8  1403               	andwf	(___flge@ff1+1)^0,w,c
  5606   0034BA  6E0B               	movwf	(??___flge+1)^0,c
  5607   0034BC  0E80               	movlw	128
  5608   0034BE  1404               	andwf	(___flge@ff1+2)^0,w,c
  5609   0034C0  6E0C               	movwf	(??___flge+2)^0,c
  5610   0034C2  0E7F               	movlw	127
  5611   0034C4  1405               	andwf	(___flge@ff1+3)^0,w,c
  5612   0034C6  6E0D               	movwf	(??___flge+3)^0,c
  5613   0034C8  500A               	movf	??___flge^0,w,c
  5614   0034CA  100B               	iorwf	(??___flge+1)^0,w,c
  5615   0034CC  100C               	iorwf	(??___flge+2)^0,w,c
  5616   0034CE  100D               	iorwf	(??___flge+3)^0,w,c
  5617   0034D0  A4D8               	btfss	status,2,c
  5618   0034D2  EF6D  F01A         	goto	u6291
  5619   0034D6  EF6F  F01A         	goto	u6290
  5620   0034DA                     u6291:
  5621   0034DA  EF77  F01A         	goto	l6444
  5622   0034DE                     u6290:
  5623   0034DE  0E00               	movlw	0
  5624   0034E0  6E02               	movwf	___flge@ff1^0,c
  5625   0034E2  0E00               	movlw	0
  5626   0034E4  6E03               	movwf	(___flge@ff1+1)^0,c
  5627   0034E6  0E00               	movlw	0
  5628   0034E8  6E04               	movwf	(___flge@ff1+2)^0,c
  5629   0034EA  0E00               	movlw	0
  5630   0034EC  6E05               	movwf	(___flge@ff1+3)^0,c
  5631   0034EE                     l6444:
  5632   0034EE  0E00               	movlw	0
  5633   0034F0  1406               	andwf	___flge@ff2^0,w,c
  5634   0034F2  6E0A               	movwf	??___flge^0,c
  5635   0034F4  0E00               	movlw	0
  5636   0034F6  1407               	andwf	(___flge@ff2+1)^0,w,c
  5637   0034F8  6E0B               	movwf	(??___flge+1)^0,c
  5638   0034FA  0E80               	movlw	128
  5639   0034FC  1408               	andwf	(___flge@ff2+2)^0,w,c
  5640   0034FE  6E0C               	movwf	(??___flge+2)^0,c
  5641   003500  0E7F               	movlw	127
  5642   003502  1409               	andwf	(___flge@ff2+3)^0,w,c
  5643   003504  6E0D               	movwf	(??___flge+3)^0,c
  5644   003506  500A               	movf	??___flge^0,w,c
  5645   003508  100B               	iorwf	(??___flge+1)^0,w,c
  5646   00350A  100C               	iorwf	(??___flge+2)^0,w,c
  5647   00350C  100D               	iorwf	(??___flge+3)^0,w,c
  5648   00350E  A4D8               	btfss	status,2,c
  5649   003510  EF8C  F01A         	goto	u6301
  5650   003514  EF8E  F01A         	goto	u6300
  5651   003518                     u6301:
  5652   003518  EF96  F01A         	goto	l6448
  5653   00351C                     u6300:
  5654   00351C  0E00               	movlw	0
  5655   00351E  6E06               	movwf	___flge@ff2^0,c
  5656   003520  0E00               	movlw	0
  5657   003522  6E07               	movwf	(___flge@ff2+1)^0,c
  5658   003524  0E00               	movlw	0
  5659   003526  6E08               	movwf	(___flge@ff2+2)^0,c
  5660   003528  0E00               	movlw	0
  5661   00352A  6E09               	movwf	(___flge@ff2+3)^0,c
  5662   00352C                     l6448:
  5663   00352C  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5664   00352E  EF9B  F01A         	goto	u6311
  5665   003532  EF9D  F01A         	goto	u6310
  5666   003536                     u6311:
  5667   003536  EFA6  F01A         	goto	l6452
  5668   00353A                     u6310:
  5669   00353A  6C02               	negf	___flge@ff1^0,c
  5670   00353C  1E03               	comf	(___flge@ff1+1)^0,f,c
  5671   00353E  B0D8               	btfsc	status,0,c
  5672   003540  2A03               	incf	(___flge@ff1+1)^0,f,c
  5673   003542  1E04               	comf	(___flge@ff1+2)^0,f,c
  5674   003544  B0D8               	btfsc	status,0,c
  5675   003546  2A04               	incf	(___flge@ff1+2)^0,f,c
  5676   003548  0E80               	movlw	128
  5677   00354A  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5678   00354C                     l6452:
  5679   00354C  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5680   00354E  EFAB  F01A         	goto	u6321
  5681   003552  EFAD  F01A         	goto	u6320
  5682   003556                     u6321:
  5683   003556  EFB6  F01A         	goto	l999
  5684   00355A                     u6320:
  5685   00355A  6C06               	negf	___flge@ff2^0,c
  5686   00355C  1E07               	comf	(___flge@ff2+1)^0,f,c
  5687   00355E  B0D8               	btfsc	status,0,c
  5688   003560  2A07               	incf	(___flge@ff2+1)^0,f,c
  5689   003562  1E08               	comf	(___flge@ff2+2)^0,f,c
  5690   003564  B0D8               	btfsc	status,0,c
  5691   003566  2A08               	incf	(___flge@ff2+2)^0,f,c
  5692   003568  0E80               	movlw	128
  5693   00356A  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5694   00356C                     l999:
  5695   00356C  0E00               	movlw	0
  5696   00356E  1A02               	xorwf	___flge@ff1^0,f,c
  5697   003570  0E00               	movlw	0
  5698   003572  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5699   003574  0E00               	movlw	0
  5700   003576  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5701   003578  0E80               	movlw	128
  5702   00357A  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5703   00357C  0E00               	movlw	0
  5704   00357E  1A06               	xorwf	___flge@ff2^0,f,c
  5705   003580  0E00               	movlw	0
  5706   003582  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5707   003584  0E00               	movlw	0
  5708   003586  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5709   003588  0E80               	movlw	128
  5710   00358A  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5711   00358C  5006               	movf	___flge@ff2^0,w,c
  5712   00358E  5C02               	subwf	___flge@ff1^0,w,c
  5713   003590  5007               	movf	(___flge@ff2+1)^0,w,c
  5714   003592  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5715   003594  5008               	movf	(___flge@ff2+2)^0,w,c
  5716   003596  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5717   003598  5009               	movf	(___flge@ff2+3)^0,w,c
  5718   00359A  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5719   00359C  B0D8               	btfsc	status,0,c
  5720   00359E  EFD3  F01A         	goto	u6331
  5721   0035A2  EFD5  F01A         	goto	u6330
  5722   0035A6                     u6331:
  5723   0035A6  EFD8  F01A         	goto	l6458
  5724   0035AA                     u6330:
  5725   0035AA  90D8               	bcf	status,0,c
  5726   0035AC  EFD9  F01A         	goto	l1004
  5727   0035B0                     l6458:
  5728   0035B0  80D8               	bsf	status,0,c
  5729   0035B2                     l1004:
  5730   0035B2  0012               	return		;funcret
  5731   0035B4                     __end_of___flge:
  5732                           	callstack 0
  5733                           
  5734 ;; *************** function ___fleq *****************
  5735 ;; Defined at:
  5736 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  ff1             4    1[COMRAM] unsigned char 
  5739 ;;  ff2             4    5[COMRAM] unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;		None
  5742 ;; Return value:  Size  Location     Type
  5743 ;;		None               void
  5744 ;; Registers used:
  5745 ;;		wreg, status,2, status,0
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5751 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5753 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5754 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5755 ;;Total ram usage:       12 bytes
  5756 ;; Hardware stack levels used: 1
  5757 ;; Hardware stack levels required when called: 1
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_convert_rgb2hue
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text18
  5766   003A76                     __ptext18:
  5767                           	callstack 0
  5768   003A76                     ___fleq:
  5769                           	callstack 27
  5770   003A76  0E00               	movlw	0
  5771   003A78  1402               	andwf	___fleq@ff1^0,w,c
  5772   003A7A  6E0A               	movwf	??___fleq^0,c
  5773   003A7C  0E00               	movlw	0
  5774   003A7E  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5775   003A80  6E0B               	movwf	(??___fleq+1)^0,c
  5776   003A82  0E80               	movlw	128
  5777   003A84  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5778   003A86  6E0C               	movwf	(??___fleq+2)^0,c
  5779   003A88  0E7F               	movlw	127
  5780   003A8A  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5781   003A8C  6E0D               	movwf	(??___fleq+3)^0,c
  5782   003A8E  500A               	movf	??___fleq^0,w,c
  5783   003A90  100B               	iorwf	(??___fleq+1)^0,w,c
  5784   003A92  100C               	iorwf	(??___fleq+2)^0,w,c
  5785   003A94  100D               	iorwf	(??___fleq+3)^0,w,c
  5786   003A96  A4D8               	btfss	status,2,c
  5787   003A98  EF50  F01D         	goto	u6261
  5788   003A9C  EF52  F01D         	goto	u6260
  5789   003AA0                     u6261:
  5790   003AA0  EF5A  F01D         	goto	l6428
  5791   003AA4                     u6260:
  5792   003AA4  0E00               	movlw	0
  5793   003AA6  6E02               	movwf	___fleq@ff1^0,c
  5794   003AA8  0E00               	movlw	0
  5795   003AAA  6E03               	movwf	(___fleq@ff1+1)^0,c
  5796   003AAC  0E00               	movlw	0
  5797   003AAE  6E04               	movwf	(___fleq@ff1+2)^0,c
  5798   003AB0  0E00               	movlw	0
  5799   003AB2  6E05               	movwf	(___fleq@ff1+3)^0,c
  5800   003AB4                     l6428:
  5801   003AB4  0E00               	movlw	0
  5802   003AB6  1406               	andwf	___fleq@ff2^0,w,c
  5803   003AB8  6E0A               	movwf	??___fleq^0,c
  5804   003ABA  0E00               	movlw	0
  5805   003ABC  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5806   003ABE  6E0B               	movwf	(??___fleq+1)^0,c
  5807   003AC0  0E80               	movlw	128
  5808   003AC2  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5809   003AC4  6E0C               	movwf	(??___fleq+2)^0,c
  5810   003AC6  0E7F               	movlw	127
  5811   003AC8  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5812   003ACA  6E0D               	movwf	(??___fleq+3)^0,c
  5813   003ACC  500A               	movf	??___fleq^0,w,c
  5814   003ACE  100B               	iorwf	(??___fleq+1)^0,w,c
  5815   003AD0  100C               	iorwf	(??___fleq+2)^0,w,c
  5816   003AD2  100D               	iorwf	(??___fleq+3)^0,w,c
  5817   003AD4  A4D8               	btfss	status,2,c
  5818   003AD6  EF6F  F01D         	goto	u6271
  5819   003ADA  EF71  F01D         	goto	u6270
  5820   003ADE                     u6271:
  5821   003ADE  EF79  F01D         	goto	l6432
  5822   003AE2                     u6270:
  5823   003AE2  0E00               	movlw	0
  5824   003AE4  6E06               	movwf	___fleq@ff2^0,c
  5825   003AE6  0E00               	movlw	0
  5826   003AE8  6E07               	movwf	(___fleq@ff2+1)^0,c
  5827   003AEA  0E00               	movlw	0
  5828   003AEC  6E08               	movwf	(___fleq@ff2+2)^0,c
  5829   003AEE  0E00               	movlw	0
  5830   003AF0  6E09               	movwf	(___fleq@ff2+3)^0,c
  5831   003AF2                     l6432:
  5832   003AF2  5006               	movf	___fleq@ff2^0,w,c
  5833   003AF4  1802               	xorwf	___fleq@ff1^0,w,c
  5834   003AF6  E10F               	bnz	u6280
  5835   003AF8  5007               	movf	(___fleq@ff2+1)^0,w,c
  5836   003AFA  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5837   003AFC  E10C               	bnz	u6280
  5838   003AFE  5008               	movf	(___fleq@ff2+2)^0,w,c
  5839   003B00  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5840   003B02  E109               	bnz	u6280
  5841   003B04  5009               	movf	(___fleq@ff2+3)^0,w,c
  5842   003B06  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5843   003B08  B4D8               	btfsc	status,2,c
  5844   003B0A  EF89  F01D         	goto	u6281
  5845   003B0E  EF8B  F01D         	goto	u6280
  5846   003B12                     u6281:
  5847   003B12  EF8E  F01D         	goto	l6436
  5848   003B16                     u6280:
  5849   003B16  90D8               	bcf	status,0,c
  5850   003B18  EF8F  F01D         	goto	l993
  5851   003B1C                     l6436:
  5852   003B1C  80D8               	bsf	status,0,c
  5853   003B1E                     l993:
  5854   003B1E  0012               	return		;funcret
  5855   003B20                     __end_of___fleq:
  5856                           	callstack 0
  5857                           
  5858 ;; *************** function ___fldiv *****************
  5859 ;; Defined at:
  5860 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  b               4   25[COMRAM] unsigned char 
  5863 ;;  a               4   29[COMRAM] unsigned char 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  grs             4   44[COMRAM] unsigned long 
  5866 ;;  rem             4   37[COMRAM] unsigned long 
  5867 ;;  new_exp         2   42[COMRAM] short 
  5868 ;;  aexp            1   49[COMRAM] unsigned char 
  5869 ;;  bexp            1   48[COMRAM] unsigned char 
  5870 ;;  sign            1   41[COMRAM] unsigned char 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  4   25[COMRAM] unsigned char 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2, status,0
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5880 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5881 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5882 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5883 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;Total ram usage:       25 bytes
  5885 ;; Hardware stack levels used: 1
  5886 ;; Hardware stack levels required when called: 1
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_convert_rgb2hue
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text19
  5895   001F42                     __ptext19:
  5896                           	callstack 0
  5897   001F42                     ___fldiv:
  5898                           	callstack 27
  5899   001F42  501D               	movf	(___fldiv@b+3)^0,w,c
  5900   001F44  0B80               	andlw	128
  5901   001F46  6E2A               	movwf	___fldiv@sign^0,c
  5902   001F48  501D               	movf	(___fldiv@b+3)^0,w,c
  5903   001F4A  241D               	addwf	(___fldiv@b+3)^0,w,c
  5904   001F4C  6E31               	movwf	___fldiv@bexp^0,c
  5905   001F4E  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  5906   001F50  EFAC  F00F         	goto	u6031
  5907   001F54  EFAE  F00F         	goto	u6030
  5908   001F58                     u6031:
  5909   001F58  EFAF  F00F         	goto	l6286
  5910   001F5C                     u6030:
  5911   001F5C  8031               	bsf	___fldiv@bexp^0,0,c
  5912   001F5E                     l6286:
  5913   001F5E  5031               	movf	___fldiv@bexp^0,w,c
  5914   001F60  B4D8               	btfsc	status,2,c
  5915   001F62  EFB5  F00F         	goto	u6041
  5916   001F66  EFB7  F00F         	goto	u6040
  5917   001F6A                     u6041:
  5918   001F6A  EFCC  F00F         	goto	l6296
  5919   001F6E                     u6040:
  5920   001F6E  2831               	incf	___fldiv@bexp^0,w,c
  5921   001F70  A4D8               	btfss	status,2,c
  5922   001F72  EFBD  F00F         	goto	u6051
  5923   001F76  EFBF  F00F         	goto	u6050
  5924   001F7A                     u6051:
  5925   001F7A  EFC7  F00F         	goto	l6292
  5926   001F7E                     u6050:
  5927   001F7E  0E00               	movlw	0
  5928   001F80  6E1A               	movwf	___fldiv@b^0,c
  5929   001F82  0E00               	movlw	0
  5930   001F84  6E1B               	movwf	(___fldiv@b+1)^0,c
  5931   001F86  0E00               	movlw	0
  5932   001F88  6E1C               	movwf	(___fldiv@b+2)^0,c
  5933   001F8A  0E00               	movlw	0
  5934   001F8C  6E1D               	movwf	(___fldiv@b+3)^0,c
  5935   001F8E                     l6292:
  5936   001F8E  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  5937   001F90  0E00               	movlw	0
  5938   001F92  6E1D               	movwf	(___fldiv@b+3)^0,c
  5939   001F94  EFD4  F00F         	goto	l6298
  5940   001F98                     l6296:
  5941   001F98  0E00               	movlw	0
  5942   001F9A  6E1A               	movwf	___fldiv@b^0,c
  5943   001F9C  0E00               	movlw	0
  5944   001F9E  6E1B               	movwf	(___fldiv@b+1)^0,c
  5945   001FA0  0E00               	movlw	0
  5946   001FA2  6E1C               	movwf	(___fldiv@b+2)^0,c
  5947   001FA4  0E00               	movlw	0
  5948   001FA6  6E1D               	movwf	(___fldiv@b+3)^0,c
  5949   001FA8                     l6298:
  5950   001FA8  5021               	movf	(___fldiv@a+3)^0,w,c
  5951   001FAA  0B80               	andlw	128
  5952   001FAC  1A2A               	xorwf	___fldiv@sign^0,f,c
  5953   001FAE  5021               	movf	(___fldiv@a+3)^0,w,c
  5954   001FB0  2421               	addwf	(___fldiv@a+3)^0,w,c
  5955   001FB2  6E32               	movwf	___fldiv@aexp^0,c
  5956   001FB4  AE20               	btfss	(___fldiv@a+2)^0,7,c
  5957   001FB6  EFDF  F00F         	goto	u6061
  5958   001FBA  EFE1  F00F         	goto	u6060
  5959   001FBE                     u6061:
  5960   001FBE  EFE2  F00F         	goto	l6306
  5961   001FC2                     u6060:
  5962   001FC2  8032               	bsf	___fldiv@aexp^0,0,c
  5963   001FC4                     l6306:
  5964   001FC4  5032               	movf	___fldiv@aexp^0,w,c
  5965   001FC6  B4D8               	btfsc	status,2,c
  5966   001FC8  EFE8  F00F         	goto	u6071
  5967   001FCC  EFEA  F00F         	goto	u6070
  5968   001FD0                     u6071:
  5969   001FD0  EFFF  F00F         	goto	l6316
  5970   001FD4                     u6070:
  5971   001FD4  2832               	incf	___fldiv@aexp^0,w,c
  5972   001FD6  A4D8               	btfss	status,2,c
  5973   001FD8  EFF0  F00F         	goto	u6081
  5974   001FDC  EFF2  F00F         	goto	u6080
  5975   001FE0                     u6081:
  5976   001FE0  EFFA  F00F         	goto	l6312
  5977   001FE4                     u6080:
  5978   001FE4  0E00               	movlw	0
  5979   001FE6  6E1E               	movwf	___fldiv@a^0,c
  5980   001FE8  0E00               	movlw	0
  5981   001FEA  6E1F               	movwf	(___fldiv@a+1)^0,c
  5982   001FEC  0E00               	movlw	0
  5983   001FEE  6E20               	movwf	(___fldiv@a+2)^0,c
  5984   001FF0  0E00               	movlw	0
  5985   001FF2  6E21               	movwf	(___fldiv@a+3)^0,c
  5986   001FF4                     l6312:
  5987   001FF4  8E20               	bsf	(___fldiv@a+2)^0,7,c
  5988   001FF6  0E00               	movlw	0
  5989   001FF8  6E21               	movwf	(___fldiv@a+3)^0,c
  5990   001FFA  EF07  F010         	goto	l6318
  5991   001FFE                     l6316:
  5992   001FFE  0E00               	movlw	0
  5993   002000  6E1E               	movwf	___fldiv@a^0,c
  5994   002002  0E00               	movlw	0
  5995   002004  6E1F               	movwf	(___fldiv@a+1)^0,c
  5996   002006  0E00               	movlw	0
  5997   002008  6E20               	movwf	(___fldiv@a+2)^0,c
  5998   00200A  0E00               	movlw	0
  5999   00200C  6E21               	movwf	(___fldiv@a+3)^0,c
  6000   00200E                     l6318:
  6001   00200E  501E               	movf	___fldiv@a^0,w,c
  6002   002010  101F               	iorwf	(___fldiv@a+1)^0,w,c
  6003   002012  1020               	iorwf	(___fldiv@a+2)^0,w,c
  6004   002014  1021               	iorwf	(___fldiv@a+3)^0,w,c
  6005   002016  A4D8               	btfss	status,2,c
  6006   002018  EF10  F010         	goto	u6091
  6007   00201C  EF12  F010         	goto	u6090
  6008   002020                     u6091:
  6009   002020  EF2A  F010         	goto	l6330
  6010   002024                     u6090:
  6011   002024  0E00               	movlw	0
  6012   002026  6E1A               	movwf	___fldiv@b^0,c
  6013   002028  0E00               	movlw	0
  6014   00202A  6E1B               	movwf	(___fldiv@b+1)^0,c
  6015   00202C  0E00               	movlw	0
  6016   00202E  6E1C               	movwf	(___fldiv@b+2)^0,c
  6017   002030  0E00               	movlw	0
  6018   002032  6E1D               	movwf	(___fldiv@b+3)^0,c
  6019   002034  0E80               	movlw	128
  6020   002036  121C               	iorwf	(___fldiv@b+2)^0,f,c
  6021   002038  0E7F               	movlw	127
  6022   00203A  121D               	iorwf	(___fldiv@b+3)^0,f,c
  6023   00203C                     l6324:
  6024   00203C  502A               	movf	___fldiv@sign^0,w,c
  6025   00203E  121D               	iorwf	(___fldiv@b+3)^0,f,c
  6026   002040  C01A  F01A         	movff	___fldiv@b,?___fldiv
  6027   002044  C01B  F01B         	movff	___fldiv@b+1,?___fldiv+1
  6028   002048  C01C  F01C         	movff	___fldiv@b+2,?___fldiv+2
  6029   00204C  C01D  F01D         	movff	___fldiv@b+3,?___fldiv+3
  6030   002050  EF6D  F011         	goto	l1316
  6031   002054                     l6330:
  6032   002054  5031               	movf	___fldiv@bexp^0,w,c
  6033   002056  A4D8               	btfss	status,2,c
  6034   002058  EF30  F010         	goto	u6101
  6035   00205C  EF32  F010         	goto	u6100
  6036   002060                     u6101:
  6037   002060  EF3C  F010         	goto	l6338
  6038   002064                     u6100:
  6039   002064  0E00               	movlw	0
  6040   002066  6E1A               	movwf	?___fldiv^0,c
  6041   002068  0E00               	movlw	0
  6042   00206A  6E1B               	movwf	(?___fldiv+1)^0,c
  6043   00206C  0E00               	movlw	0
  6044   00206E  6E1C               	movwf	(?___fldiv+2)^0,c
  6045   002070  0E00               	movlw	0
  6046   002072  6E1D               	movwf	(?___fldiv+3)^0,c
  6047   002074  EF6D  F011         	goto	l1316
  6048   002078                     l6338:
  6049   002078  5032               	movf	___fldiv@aexp^0,w,c
  6050   00207A  C031  F022         	movff	___fldiv@bexp,??___fldiv
  6051   00207E  6A23               	clrf	(??___fldiv+1)^0,c
  6052   002080  5E22               	subwf	??___fldiv^0,f,c
  6053   002082  0E00               	movlw	0
  6054   002084  5A23               	subwfb	(??___fldiv+1)^0,f,c
  6055   002086  0E7F               	movlw	127
  6056   002088  2422               	addwf	??___fldiv^0,w,c
  6057   00208A  6E2B               	movwf	___fldiv@new_exp^0,c
  6058   00208C  0E00               	movlw	0
  6059   00208E  2023               	addwfc	(??___fldiv+1)^0,w,c
  6060   002090  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6061   002092  C01A  F026         	movff	___fldiv@b,___fldiv@rem
  6062   002096  C01B  F027         	movff	___fldiv@b+1,___fldiv@rem+1
  6063   00209A  C01C  F028         	movff	___fldiv@b+2,___fldiv@rem+2
  6064   00209E  C01D  F029         	movff	___fldiv@b+3,___fldiv@rem+3
  6065   0020A2  0E00               	movlw	0
  6066   0020A4  6E1A               	movwf	___fldiv@b^0,c
  6067   0020A6  0E00               	movlw	0
  6068   0020A8  6E1B               	movwf	(___fldiv@b+1)^0,c
  6069   0020AA  0E00               	movlw	0
  6070   0020AC  6E1C               	movwf	(___fldiv@b+2)^0,c
  6071   0020AE  0E00               	movlw	0
  6072   0020B0  6E1D               	movwf	(___fldiv@b+3)^0,c
  6073   0020B2  0E00               	movlw	0
  6074   0020B4  6E2D               	movwf	___fldiv@grs^0,c
  6075   0020B6  0E00               	movlw	0
  6076   0020B8  6E2E               	movwf	(___fldiv@grs+1)^0,c
  6077   0020BA  0E00               	movlw	0
  6078   0020BC  6E2F               	movwf	(___fldiv@grs+2)^0,c
  6079   0020BE  0E00               	movlw	0
  6080   0020C0  6E30               	movwf	(___fldiv@grs+3)^0,c
  6081   0020C2  0E00               	movlw	0
  6082   0020C4  6E32               	movwf	___fldiv@aexp^0,c
  6083   0020C6  EF9D  F010         	goto	l1318
  6084   0020CA                     l6348:
  6085   0020CA  5032               	movf	___fldiv@aexp^0,w,c
  6086   0020CC  B4D8               	btfsc	status,2,c
  6087   0020CE  EF6B  F010         	goto	u6111
  6088   0020D2  EF6D  F010         	goto	u6110
  6089   0020D6                     u6111:
  6090   0020D6  EF84  F010         	goto	l6356
  6091   0020DA                     u6110:
  6092   0020DA  90D8               	bcf	status,0,c
  6093   0020DC  3626               	rlcf	___fldiv@rem^0,f,c
  6094   0020DE  3627               	rlcf	(___fldiv@rem+1)^0,f,c
  6095   0020E0  3628               	rlcf	(___fldiv@rem+2)^0,f,c
  6096   0020E2  3629               	rlcf	(___fldiv@rem+3)^0,f,c
  6097   0020E4  90D8               	bcf	status,0,c
  6098   0020E6  361A               	rlcf	___fldiv@b^0,f,c
  6099   0020E8  361B               	rlcf	(___fldiv@b+1)^0,f,c
  6100   0020EA  361C               	rlcf	(___fldiv@b+2)^0,f,c
  6101   0020EC  361D               	rlcf	(___fldiv@b+3)^0,f,c
  6102   0020EE  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6103   0020F0  EF7C  F010         	goto	u6121
  6104   0020F4  EF7E  F010         	goto	u6120
  6105   0020F8                     u6121:
  6106   0020F8  EF7F  F010         	goto	l1321
  6107   0020FC                     u6120:
  6108   0020FC  801A               	bsf	___fldiv@b^0,0,c
  6109   0020FE                     l1321:
  6110   0020FE  90D8               	bcf	status,0,c
  6111   002100  362D               	rlcf	___fldiv@grs^0,f,c
  6112   002102  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  6113   002104  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  6114   002106  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  6115   002108                     l6356:
  6116   002108  501E               	movf	___fldiv@a^0,w,c
  6117   00210A  5C26               	subwf	___fldiv@rem^0,w,c
  6118   00210C  501F               	movf	(___fldiv@a+1)^0,w,c
  6119   00210E  5827               	subwfb	(___fldiv@rem+1)^0,w,c
  6120   002110  5020               	movf	(___fldiv@a+2)^0,w,c
  6121   002112  5828               	subwfb	(___fldiv@rem+2)^0,w,c
  6122   002114  5021               	movf	(___fldiv@a+3)^0,w,c
  6123   002116  5829               	subwfb	(___fldiv@rem+3)^0,w,c
  6124   002118  A0D8               	btfss	status,0,c
  6125   00211A  EF91  F010         	goto	u6131
  6126   00211E  EF93  F010         	goto	u6130
  6127   002122                     u6131:
  6128   002122  EF9C  F010         	goto	l6362
  6129   002126                     u6130:
  6130   002126  8C30               	bsf	(___fldiv@grs+3)^0,6,c
  6131   002128  501E               	movf	___fldiv@a^0,w,c
  6132   00212A  5E26               	subwf	___fldiv@rem^0,f,c
  6133   00212C  501F               	movf	(___fldiv@a+1)^0,w,c
  6134   00212E  5A27               	subwfb	(___fldiv@rem+1)^0,f,c
  6135   002130  5020               	movf	(___fldiv@a+2)^0,w,c
  6136   002132  5A28               	subwfb	(___fldiv@rem+2)^0,f,c
  6137   002134  5021               	movf	(___fldiv@a+3)^0,w,c
  6138   002136  5A29               	subwfb	(___fldiv@rem+3)^0,f,c
  6139   002138                     l6362:
  6140   002138  2A32               	incf	___fldiv@aexp^0,f,c
  6141   00213A                     l1318:
  6142   00213A  0E19               	movlw	25
  6143   00213C  6432               	cpfsgt	___fldiv@aexp^0,c
  6144   00213E  EFA3  F010         	goto	u6141
  6145   002142  EFA5  F010         	goto	u6140
  6146   002146                     u6141:
  6147   002146  EF65  F010         	goto	l6348
  6148   00214A                     u6140:
  6149   00214A  5026               	movf	___fldiv@rem^0,w,c
  6150   00214C  1027               	iorwf	(___fldiv@rem+1)^0,w,c
  6151   00214E  1028               	iorwf	(___fldiv@rem+2)^0,w,c
  6152   002150  1029               	iorwf	(___fldiv@rem+3)^0,w,c
  6153   002152  B4D8               	btfsc	status,2,c
  6154   002154  EFAE  F010         	goto	u6151
  6155   002158  EFB0  F010         	goto	u6150
  6156   00215C                     u6151:
  6157   00215C  EFC8  F010         	goto	l6374
  6158   002160                     u6150:
  6159   002160  802D               	bsf	___fldiv@grs^0,0,c
  6160   002162  EFC8  F010         	goto	l6374
  6161   002166                     l6368:
  6162   002166  90D8               	bcf	status,0,c
  6163   002168  361A               	rlcf	___fldiv@b^0,f,c
  6164   00216A  361B               	rlcf	(___fldiv@b+1)^0,f,c
  6165   00216C  361C               	rlcf	(___fldiv@b+2)^0,f,c
  6166   00216E  361D               	rlcf	(___fldiv@b+3)^0,f,c
  6167   002170  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6168   002172  EFBD  F010         	goto	u6161
  6169   002176  EFBF  F010         	goto	u6160
  6170   00217A                     u6161:
  6171   00217A  EFC0  F010         	goto	l1327
  6172   00217E                     u6160:
  6173   00217E  801A               	bsf	___fldiv@b^0,0,c
  6174   002180                     l1327:
  6175   002180  90D8               	bcf	status,0,c
  6176   002182  362D               	rlcf	___fldiv@grs^0,f,c
  6177   002184  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  6178   002186  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  6179   002188  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  6180   00218A  062B               	decf	___fldiv@new_exp^0,f,c
  6181   00218C  A0D8               	btfss	status,0,c
  6182   00218E  062C               	decf	(___fldiv@new_exp+1)^0,f,c
  6183   002190                     l6374:
  6184   002190  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  6185   002192  EFCD  F010         	goto	u6171
  6186   002196  EFCF  F010         	goto	u6170
  6187   00219A                     u6171:
  6188   00219A  EFB3  F010         	goto	l6368
  6189   00219E                     u6170:
  6190   00219E  0E00               	movlw	0
  6191   0021A0  6E32               	movwf	___fldiv@aexp^0,c
  6192   0021A2  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  6193   0021A4  EFD6  F010         	goto	u6181
  6194   0021A8  EFD8  F010         	goto	u6180
  6195   0021AC                     u6181:
  6196   0021AC  EFFC  F010         	goto	l1329
  6197   0021B0                     u6180:
  6198   0021B0  0EFF               	movlw	255
  6199   0021B2  142D               	andwf	___fldiv@grs^0,w,c
  6200   0021B4  6E22               	movwf	??___fldiv^0,c
  6201   0021B6  0EFF               	movlw	255
  6202   0021B8  142E               	andwf	(___fldiv@grs+1)^0,w,c
  6203   0021BA  6E23               	movwf	(??___fldiv+1)^0,c
  6204   0021BC  0EFF               	movlw	255
  6205   0021BE  142F               	andwf	(___fldiv@grs+2)^0,w,c
  6206   0021C0  6E24               	movwf	(??___fldiv+2)^0,c
  6207   0021C2  0E7F               	movlw	127
  6208   0021C4  1430               	andwf	(___fldiv@grs+3)^0,w,c
  6209   0021C6  6E25               	movwf	(??___fldiv+3)^0,c
  6210   0021C8  5022               	movf	??___fldiv^0,w,c
  6211   0021CA  1023               	iorwf	(??___fldiv+1)^0,w,c
  6212   0021CC  1024               	iorwf	(??___fldiv+2)^0,w,c
  6213   0021CE  1025               	iorwf	(??___fldiv+3)^0,w,c
  6214   0021D0  B4D8               	btfsc	status,2,c
  6215   0021D2  EFED  F010         	goto	u6191
  6216   0021D6  EFEF  F010         	goto	u6190
  6217   0021DA                     u6191:
  6218   0021DA  EFF3  F010         	goto	l1330
  6219   0021DE                     u6190:
  6220   0021DE                     l6382:
  6221   0021DE  0E01               	movlw	1
  6222   0021E0  6E32               	movwf	___fldiv@aexp^0,c
  6223   0021E2  EFFC  F010         	goto	l1329
  6224   0021E6                     l1330:
  6225   0021E6  A01A               	btfss	___fldiv@b^0,0,c
  6226   0021E8  EFF8  F010         	goto	u6201
  6227   0021EC  EFFA  F010         	goto	u6200
  6228   0021F0                     u6201:
  6229   0021F0  EFFC  F010         	goto	l1329
  6230   0021F4                     u6200:
  6231   0021F4  EFEF  F010         	goto	l6382
  6232   0021F8                     l1329:
  6233   0021F8  5032               	movf	___fldiv@aexp^0,w,c
  6234   0021FA  B4D8               	btfsc	status,2,c
  6235   0021FC  EF02  F011         	goto	u6211
  6236   002200  EF04  F011         	goto	u6210
  6237   002204                     u6211:
  6238   002204  EF28  F011         	goto	l6394
  6239   002208                     u6210:
  6240   002208  0E01               	movlw	1
  6241   00220A  261A               	addwf	___fldiv@b^0,f,c
  6242   00220C  0E00               	movlw	0
  6243   00220E  221B               	addwfc	(___fldiv@b+1)^0,f,c
  6244   002210  221C               	addwfc	(___fldiv@b+2)^0,f,c
  6245   002212  221D               	addwfc	(___fldiv@b+3)^0,f,c
  6246   002214  A01D               	btfss	(___fldiv@b+3)^0,0,c
  6247   002216  EF0F  F011         	goto	u6221
  6248   00221A  EF11  F011         	goto	u6220
  6249   00221E                     u6221:
  6250   00221E  EF28  F011         	goto	l6394
  6251   002222                     u6220:
  6252   002222  C01A  F022         	movff	___fldiv@b,??___fldiv
  6253   002226  C01B  F023         	movff	___fldiv@b+1,??___fldiv+1
  6254   00222A  C01C  F024         	movff	___fldiv@b+2,??___fldiv+2
  6255   00222E  C01D  F025         	movff	___fldiv@b+3,??___fldiv+3
  6256   002232  3425               	rlcf	(??___fldiv+3)^0,w,c
  6257   002234  3225               	rrcf	(??___fldiv+3)^0,f,c
  6258   002236  3224               	rrcf	(??___fldiv+2)^0,f,c
  6259   002238  3223               	rrcf	(??___fldiv+1)^0,f,c
  6260   00223A  3222               	rrcf	??___fldiv^0,f,c
  6261   00223C  C022  F01A         	movff	??___fldiv,___fldiv@b
  6262   002240  C023  F01B         	movff	??___fldiv+1,___fldiv@b+1
  6263   002244  C024  F01C         	movff	??___fldiv+2,___fldiv@b+2
  6264   002248  C025  F01D         	movff	??___fldiv+3,___fldiv@b+3
  6265   00224C  4A2B               	infsnz	___fldiv@new_exp^0,f,c
  6266   00224E  2A2C               	incf	(___fldiv@new_exp+1)^0,f,c
  6267   002250                     l6394:
  6268   002250  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6269   002252  EF33  F011         	goto	u6231
  6270   002256  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  6271   002258  E108               	bnz	u6230
  6272   00225A  282B               	incf	___fldiv@new_exp^0,w,c
  6273   00225C  A0D8               	btfss	status,0,c
  6274   00225E  EF33  F011         	goto	u6231
  6275   002262  EF35  F011         	goto	u6230
  6276   002266                     u6231:
  6277   002266  EF40  F011         	goto	l6398
  6278   00226A                     u6230:
  6279   00226A  0E00               	movlw	0
  6280   00226C  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6281   00226E  682B               	setf	___fldiv@new_exp^0,c
  6282   002270  0E00               	movlw	0
  6283   002272  6E1A               	movwf	___fldiv@b^0,c
  6284   002274  0E00               	movlw	0
  6285   002276  6E1B               	movwf	(___fldiv@b+1)^0,c
  6286   002278  0E00               	movlw	0
  6287   00227A  6E1C               	movwf	(___fldiv@b+2)^0,c
  6288   00227C  0E00               	movlw	0
  6289   00227E  6E1D               	movwf	(___fldiv@b+3)^0,c
  6290   002280                     l6398:
  6291   002280  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6292   002282  EF4D  F011         	goto	u6240
  6293   002286  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  6294   002288  E106               	bnz	u6241
  6295   00228A  042B               	decf	___fldiv@new_exp^0,w,c
  6296   00228C  B0D8               	btfsc	status,0,c
  6297   00228E  EF4B  F011         	goto	u6241
  6298   002292  EF4D  F011         	goto	u6240
  6299   002296                     u6241:
  6300   002296  EF5B  F011         	goto	l6402
  6301   00229A                     u6240:
  6302   00229A  0E00               	movlw	0
  6303   00229C  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  6304   00229E  0E00               	movlw	0
  6305   0022A0  6E2B               	movwf	___fldiv@new_exp^0,c
  6306   0022A2  0E00               	movlw	0
  6307   0022A4  6E1A               	movwf	___fldiv@b^0,c
  6308   0022A6  0E00               	movlw	0
  6309   0022A8  6E1B               	movwf	(___fldiv@b+1)^0,c
  6310   0022AA  0E00               	movlw	0
  6311   0022AC  6E1C               	movwf	(___fldiv@b+2)^0,c
  6312   0022AE  0E00               	movlw	0
  6313   0022B0  6E1D               	movwf	(___fldiv@b+3)^0,c
  6314   0022B2  0E00               	movlw	0
  6315   0022B4  6E2A               	movwf	___fldiv@sign^0,c
  6316   0022B6                     l6402:
  6317   0022B6  C02B  F031         	movff	___fldiv@new_exp,___fldiv@bexp
  6318   0022BA  A031               	btfss	___fldiv@bexp^0,0,c
  6319   0022BC  EF62  F011         	goto	u6251
  6320   0022C0  EF64  F011         	goto	u6250
  6321   0022C4                     u6251:
  6322   0022C4  EF67  F011         	goto	l6408
  6323   0022C8                     u6250:
  6324   0022C8  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  6325   0022CA  EF68  F011         	goto	l6410
  6326   0022CE                     l6408:
  6327   0022CE  9E1C               	bcf	(___fldiv@b+2)^0,7,c
  6328   0022D0                     l6410:
  6329   0022D0  90D8               	bcf	status,0,c
  6330   0022D2  3031               	rrcf	___fldiv@bexp^0,w,c
  6331   0022D4  6E1D               	movwf	(___fldiv@b+3)^0,c
  6332   0022D6  EF1E  F010         	goto	l6324
  6333   0022DA                     l1316:
  6334   0022DA  0012               	return		;funcret
  6335   0022DC                     __end_of___fldiv:
  6336                           	callstack 0
  6337                           
  6338 ;; *************** function _initUSART4 *****************
  6339 ;; Defined at:
  6340 ;;		line 14 in file "serial.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6358 ;;Total ram usage:        0 bytes
  6359 ;; Hardware stack levels used: 1
  6360 ;; Hardware stack levels required when called: 1
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_main
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text20
  6369   004780                     __ptext20:
  6370                           	callstack 0
  6371   004780                     _initUSART4:
  6372                           	callstack 29
  6373   004780                     
  6374                           ;serial.c: 15:     RC0PPS = 0x12;
  6375   004780  0E12               	movlw	18
  6376   004782  010E               	movlb	14	; () banked
  6377   004784  6F62               	movwf	98,b	;volatile
  6378                           
  6379                           ;serial.c: 16:     RX4PPS = 0x11;
  6380   004786  0E11               	movlw	17
  6381   004788  6F15               	movwf	21,b	;volatile
  6382   00478A                     
  6383                           ; BSR set to: 14
  6384                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6385   00478A  97E9               	bcf	233,3,b	;volatile
  6386   00478C                     
  6387                           ; BSR set to: 14
  6388                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6389   00478C  95E8               	bcf	232,2,b	;volatile
  6390                           
  6391                           ;serial.c: 19:     SP4BRGL = 51;
  6392   00478E  0E33               	movlw	51
  6393   004790  6FE5               	movwf	229,b	;volatile
  6394                           
  6395                           ;serial.c: 20:     SP4BRGH = 0;
  6396   004792  0E00               	movlw	0
  6397   004794  6FE6               	movwf	230,b	;volatile
  6398   004796                     
  6399                           ; BSR set to: 14
  6400                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6401   004796  89E7               	bsf	231,4,b	;volatile
  6402   004798                     
  6403                           ; BSR set to: 14
  6404                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6405   004798  8BE8               	bsf	232,5,b	;volatile
  6406   00479A                     
  6407                           ; BSR set to: 14
  6408                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6409   00479A  8FE7               	bsf	231,7,b	;volatile
  6410   00479C                     
  6411                           ; BSR set to: 14
  6412   00479C  0012               	return		;funcret
  6413   00479E                     __end_of_initUSART4:
  6414                           	callstack 0
  6415                           
  6416 ;; *************** function _initDCmotorsPWM *****************
  6417 ;; Defined at:
  6418 ;;		line 5 in file "dc_motor.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;Total ram usage:        2 bytes
  6437 ;; Hardware stack levels used: 1
  6438 ;; Hardware stack levels required when called: 1
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_main
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text21
  6447   003C60                     __ptext21:
  6448                           	callstack 0
  6449   003C60                     _initDCmotorsPWM:
  6450                           	callstack 29
  6451   003C60                     
  6452                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6453   003C60  9485               	bcf	133,2,c	;volatile
  6454                           
  6455                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6456   003C62  9E83               	bcf	131,7,c	;volatile
  6457                           
  6458                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6459   003C64  9885               	bcf	133,4,c	;volatile
  6460                           
  6461                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6462   003C66  9C87               	bcf	135,6,c	;volatile
  6463                           
  6464                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6465   003C68  947D               	bcf	125,2,c	;volatile
  6466                           
  6467                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6468   003C6A  9E7B               	bcf	123,7,c	;volatile
  6469                           
  6470                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6471   003C6C  987D               	bcf	125,4,c	;volatile
  6472                           
  6473                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6474   003C6E  9C7F               	bcf	127,6,c	;volatile
  6475   003C70                     
  6476                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6477   003C70  0E05               	movlw	5
  6478   003C72  010E               	movlb	14	; () banked
  6479   003C74  6F74               	movwf	116,b	;volatile
  6480                           
  6481                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6482   003C76  0E06               	movlw	6
  6483   003C78  6F76               	movwf	118,b	;volatile
  6484                           
  6485                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6486   003C7A  0E07               	movlw	7
  6487   003C7C  6F69               	movwf	105,b	;volatile
  6488                           
  6489                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6490   003C7E  0E08               	movlw	8
  6491   003C80  6F88               	movwf	136,b	;volatile
  6492                           
  6493                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6494   003C82  50BD               	movf	189,w,c	;volatile
  6495   003C84  0B8F               	andlw	-113
  6496   003C86  0940               	iorlw	64
  6497   003C88  6EBD               	movwf	189,c	;volatile
  6498                           
  6499                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6500   003C8A  0EE0               	movlw	-32
  6501   003C8C  16BE               	andwf	190,f,c	;volatile
  6502                           
  6503                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6504   003C8E  50BF               	movf	191,w,c	;volatile
  6505   003C90  0BF0               	andlw	-16
  6506   003C92  0901               	iorlw	1
  6507   003C94  6EBF               	movwf	191,c	;volatile
  6508   003C96                     
  6509                           ; BSR set to: 14
  6510                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6511   003C96  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6512   003C9A                     
  6513                           ; BSR set to: 14
  6514                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6515   003C9A  8EBD               	bsf	189,7,c	;volatile
  6516                           
  6517                           ;dc_motor.c: 35:     CCPR1H=0;
  6518   003C9C  0E00               	movlw	0
  6519   003C9E  6EAA               	movwf	170,c	;volatile
  6520                           
  6521                           ;dc_motor.c: 36:     CCPR2H=0;
  6522   003CA0  0E00               	movlw	0
  6523   003CA2  6EA6               	movwf	166,c	;volatile
  6524                           
  6525                           ;dc_motor.c: 37:     CCPR3H=0;
  6526   003CA4  0E00               	movlw	0
  6527   003CA6  010F               	movlb	15	; () banked
  6528   003CA8  6F25               	movwf	37,b	;volatile
  6529                           
  6530                           ;dc_motor.c: 38:     CCPR4H=0;
  6531   003CAA  0E00               	movlw	0
  6532   003CAC  6F21               	movwf	33,b	;volatile
  6533                           
  6534                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6535   003CAE  0EFC               	movlw	-4
  6536   003CB0  16AD               	andwf	173,f,c	;volatile
  6537                           
  6538                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6539   003CB2  0EF3               	movlw	-13
  6540   003CB4  16AD               	andwf	173,f,c	;volatile
  6541                           
  6542                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6543   003CB6  0ECF               	movlw	-49
  6544   003CB8  16AD               	andwf	173,f,c	;volatile
  6545                           
  6546                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6547   003CBA  0E3F               	movlw	-193
  6548   003CBC  16AD               	andwf	173,f,c	;volatile
  6549   003CBE                     
  6550                           ; BSR set to: 15
  6551                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6552   003CBE  88AB               	bsf	171,4,c	;volatile
  6553                           
  6554                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6555   003CC0  50AB               	movf	171,w,c	;volatile
  6556   003CC2  0BF0               	andlw	-16
  6557   003CC4  090C               	iorlw	12
  6558   003CC6  6EAB               	movwf	171,c	;volatile
  6559   003CC8                     
  6560                           ; BSR set to: 15
  6561                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6562   003CC8  8EAB               	bsf	171,7,c	;volatile
  6563   003CCA                     
  6564                           ; BSR set to: 15
  6565                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6566   003CCA  88A7               	bsf	167,4,c	;volatile
  6567                           
  6568                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6569   003CCC  50A7               	movf	167,w,c	;volatile
  6570   003CCE  0BF0               	andlw	-16
  6571   003CD0  090C               	iorlw	12
  6572   003CD2  6EA7               	movwf	167,c	;volatile
  6573   003CD4                     
  6574                           ; BSR set to: 15
  6575                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6576   003CD4  8EA7               	bsf	167,7,c	;volatile
  6577   003CD6                     
  6578                           ; BSR set to: 15
  6579                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6580   003CD6  8926               	bsf	38,4,b	;volatile
  6581                           
  6582                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6583   003CD8  5126               	movf	38,w,b	;volatile
  6584   003CDA  0BF0               	andlw	-16
  6585   003CDC  090C               	iorlw	12
  6586   003CDE  6F26               	movwf	38,b	;volatile
  6587   003CE0                     
  6588                           ; BSR set to: 15
  6589                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6590   003CE0  8F26               	bsf	38,7,b	;volatile
  6591   003CE2                     
  6592                           ; BSR set to: 15
  6593                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6594   003CE2  8922               	bsf	34,4,b	;volatile
  6595                           
  6596                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6597   003CE4  5122               	movf	34,w,b	;volatile
  6598   003CE6  0BF0               	andlw	-16
  6599   003CE8  090C               	iorlw	12
  6600   003CEA  6F22               	movwf	34,b	;volatile
  6601   003CEC                     
  6602                           ; BSR set to: 15
  6603                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6604   003CEC  8F22               	bsf	34,7,b	;volatile
  6605   003CEE                     
  6606                           ; BSR set to: 15
  6607   003CEE  0012               	return		;funcret
  6608   003CF0                     __end_of_initDCmotorsPWM:
  6609                           	callstack 0
  6610                           
  6611 ;; *************** function _get16bitTMR0val *****************
  6612 ;; Defined at:
  6613 ;;		line 33 in file "timers.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  path_step       2    6[COMRAM] unsigned int 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  combined_val    2   12[COMRAM] int 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  2    6[COMRAM] unsigned int 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6629 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6630 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6631 ;;Total ram usage:        8 bytes
  6632 ;; Hardware stack levels used: 1
  6633 ;; Hardware stack levels required when called: 2
  6634 ;; This function calls:
  6635 ;;		_logAction
  6636 ;; This function is called by:
  6637 ;;		_main
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text22
  6642   0042A2                     __ptext22:
  6643                           	callstack 0
  6644   0042A2                     _get16bitTMR0val:
  6645                           	callstack 28
  6646   0042A2                     
  6647                           ;timers.c: 33: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 34: {;time
      +                          rs.c: 35:     int combined_value;;timers.c: 36:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6648   0042A2  50D4               	movf	212,w,c	;volatile
  6649   0042A4  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6650   0042A6  6A09               	clrf	??_get16bitTMR0val^0,c
  6651   0042A8  50D3               	movf	211,w,c	;volatile
  6652   0042AA  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6653   0042AC  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6654   0042AE  5009               	movf	??_get16bitTMR0val^0,w,c
  6655   0042B0  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6656   0042B2  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6657   0042B4  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6658   0042B6  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6659   0042B8  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6660   0042BA                     
  6661                           ;timers.c: 37:     T0CON0bits.T0EN=0;
  6662   0042BA  9ED5               	bcf	213,7,c	;volatile
  6663   0042BC                     
  6664                           ;timers.c: 38:     logAction('0',combined_value, path_step);
  6665   0042BC  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6666   0042C0  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6667   0042C4  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6668   0042C8  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6669   0042CC  0E30               	movlw	48
  6670   0042CE  ECCD  F020         	call	_logAction
  6671   0042D2                     
  6672                           ;timers.c: 39:     return path_step;
  6673   0042D2  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6674   0042D6  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6675   0042DA  0012               	return		;funcret
  6676   0042DC                     __end_of_get16bitTMR0val:
  6677                           	callstack 0
  6678                           
  6679 ;; *************** function _decision *****************
  6680 ;; Defined at:
  6681 ;;		line 274 in file "color.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  hue             2   32[COMRAM] unsigned int 
  6684 ;;  path_step       2   34[COMRAM] unsigned int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  color           2    0        unsigned int 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  2   32[COMRAM] unsigned int 
  6689 ;; Registers used:
  6690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6700 ;;Total ram usage:        4 bytes
  6701 ;; Hardware stack levels used: 1
  6702 ;; Hardware stack levels required when called: 6
  6703 ;; This function calls:
  6704 ;;		_logAction
  6705 ;;		_moveBlue
  6706 ;;		_moveGreen
  6707 ;;		_moveLightBlue
  6708 ;;		_moveOrange
  6709 ;;		_movePink
  6710 ;;		_moveRed
  6711 ;;		_moveYellow
  6712 ;; This function is called by:
  6713 ;;		_main
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text23
  6718   0025A2                     __ptext23:
  6719                           	callstack 0
  6720   0025A2                     _decision:
  6721                           	callstack 24
  6722   0025A2                     
  6723                           ;color.c: 279:     unsigned int color;;color.c: 281:     if (hue<=10 || hue>=355) {
  6724   0025A2  5022               	movf	(decision@hue+1)^0,w,c
  6725   0025A4  E109               	bnz	u6710
  6726   0025A6  0E0B               	movlw	11
  6727   0025A8  5C21               	subwf	decision@hue^0,w,c
  6728   0025AA  A0D8               	btfss	status,0,c
  6729   0025AC  EFDA  F012         	goto	u6711
  6730   0025B0  EFDC  F012         	goto	u6710
  6731   0025B4                     u6711:
  6732   0025B4  EFE7  F012         	goto	l6890
  6733   0025B8                     u6710:
  6734   0025B8  0E63               	movlw	99
  6735   0025BA  5C21               	subwf	decision@hue^0,w,c
  6736   0025BC  0E01               	movlw	1
  6737   0025BE  5822               	subwfb	(decision@hue+1)^0,w,c
  6738   0025C0  A0D8               	btfss	status,0,c
  6739   0025C2  EFE5  F012         	goto	u6721
  6740   0025C6  EFE7  F012         	goto	u6720
  6741   0025CA                     u6721:
  6742   0025CA  EFFC  F012         	goto	l6898
  6743   0025CE                     u6720:
  6744   0025CE                     l6890:
  6745                           
  6746                           ;color.c: 282:         moveRed(&motorL, &motorR);
  6747   0025CE  0EEE               	movlw	low _motorL
  6748   0025D0  6E1D               	movwf	moveRed@mL^0,c
  6749   0025D2  0EE5               	movlw	low _motorR
  6750   0025D4  6E1E               	movwf	moveRed@mR^0,c
  6751   0025D6  EC0A  F022         	call	_moveRed	;wreg free
  6752   0025DA                     
  6753                           ;color.c: 283:         logAction('1',0, path_step);
  6754   0025DA  0E00               	movlw	0
  6755   0025DC  6E03               	movwf	(logAction@newTime+1)^0,c
  6756   0025DE  0E00               	movlw	0
  6757   0025E0  6E02               	movwf	logAction@newTime^0,c
  6758   0025E2  C023  F004         	movff	decision@path_step,logAction@path_step
  6759   0025E6  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6760   0025EA  0E31               	movlw	49
  6761   0025EC  ECCD  F020         	call	_logAction
  6762   0025F0                     l6896:
  6763                           
  6764                           ;color.c: 285:         path_step++;
  6765   0025F0  4A23               	infsnz	decision@path_step^0,f,c
  6766   0025F2  2A24               	incf	(decision@path_step+1)^0,f,c
  6767                           
  6768                           ;color.c: 286:     }
  6769   0025F4  EFF2  F013         	goto	l6970
  6770   0025F8                     l6898:
  6771   0025F8  5022               	movf	(decision@hue+1)^0,w,c
  6772   0025FA  E109               	bnz	u6730
  6773   0025FC  0E69               	movlw	105
  6774   0025FE  5C21               	subwf	decision@hue^0,w,c
  6775   002600  A0D8               	btfss	status,0,c
  6776   002602  EF05  F013         	goto	u6731
  6777   002606  EF07  F013         	goto	u6730
  6778   00260A                     u6731:
  6779   00260A  EF25  F013         	goto	l6910
  6780   00260E                     u6730:
  6781   00260E  5022               	movf	(decision@hue+1)^0,w,c
  6782   002610  E107               	bnz	u6741
  6783   002612  0E83               	movlw	131
  6784   002614  5C21               	subwf	decision@hue^0,w,c
  6785   002616  B0D8               	btfsc	status,0,c
  6786   002618  EF10  F013         	goto	u6741
  6787   00261C  EF12  F013         	goto	u6740
  6788   002620                     u6741:
  6789   002620  EF25  F013         	goto	l6910
  6790   002624                     u6740:
  6791   002624                     
  6792                           ;color.c: 288:         moveGreen(&motorL, &motorR);
  6793   002624  0EEE               	movlw	low _motorL
  6794   002626  6E1D               	movwf	moveGreen@mL^0,c
  6795   002628  0EE5               	movlw	low _motorR
  6796   00262A  6E1E               	movwf	moveGreen@mR^0,c
  6797   00262C  ECB9  F022         	call	_moveGreen	;wreg free
  6798   002630                     
  6799                           ;color.c: 289:         logAction('2',0, path_step);
  6800   002630  0E00               	movlw	0
  6801   002632  6E03               	movwf	(logAction@newTime+1)^0,c
  6802   002634  0E00               	movlw	0
  6803   002636  6E02               	movwf	logAction@newTime^0,c
  6804   002638  C023  F004         	movff	decision@path_step,logAction@path_step
  6805   00263C  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6806   002640  0E32               	movlw	50
  6807   002642  ECCD  F020         	call	_logAction
  6808   002646  EFF8  F012         	goto	l6896
  6809   00264A                     l6910:
  6810   00264A  5022               	movf	(decision@hue+1)^0,w,c
  6811   00264C  E109               	bnz	u6750
  6812   00264E  0EE6               	movlw	230
  6813   002650  5C21               	subwf	decision@hue^0,w,c
  6814   002652  A0D8               	btfss	status,0,c
  6815   002654  EF2E  F013         	goto	u6751
  6816   002658  EF30  F013         	goto	u6750
  6817   00265C                     u6751:
  6818   00265C  EF4E  F013         	goto	l6922
  6819   002660                     u6750:
  6820   002660  5022               	movf	(decision@hue+1)^0,w,c
  6821   002662  E107               	bnz	u6761
  6822   002664  0EF1               	movlw	241
  6823   002666  5C21               	subwf	decision@hue^0,w,c
  6824   002668  B0D8               	btfsc	status,0,c
  6825   00266A  EF39  F013         	goto	u6761
  6826   00266E  EF3B  F013         	goto	u6760
  6827   002672                     u6761:
  6828   002672  EF4E  F013         	goto	l6922
  6829   002676                     u6760:
  6830   002676                     
  6831                           ;color.c: 293:         moveBlue(&motorL,&motorR);
  6832   002676  0EEE               	movlw	low _motorL
  6833   002678  6E1D               	movwf	moveBlue@mL^0,c
  6834   00267A  0EE5               	movlw	low _motorR
  6835   00267C  6E1E               	movwf	moveBlue@mR^0,c
  6836   00267E  ECD2  F022         	call	_moveBlue	;wreg free
  6837   002682                     
  6838                           ;color.c: 294:         logAction('3',0, path_step);
  6839   002682  0E00               	movlw	0
  6840   002684  6E03               	movwf	(logAction@newTime+1)^0,c
  6841   002686  0E00               	movlw	0
  6842   002688  6E02               	movwf	logAction@newTime^0,c
  6843   00268A  C023  F004         	movff	decision@path_step,logAction@path_step
  6844   00268E  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6845   002692  0E33               	movlw	51
  6846   002694  ECCD  F020         	call	_logAction
  6847   002698  EFF8  F012         	goto	l6896
  6848   00269C                     l6922:
  6849   00269C  5022               	movf	(decision@hue+1)^0,w,c
  6850   00269E  E109               	bnz	u6770
  6851   0026A0  0ED8               	movlw	216
  6852   0026A2  5C21               	subwf	decision@hue^0,w,c
  6853   0026A4  A0D8               	btfss	status,0,c
  6854   0026A6  EF57  F013         	goto	u6771
  6855   0026AA  EF59  F013         	goto	u6770
  6856   0026AE                     u6771:
  6857   0026AE  EF77  F013         	goto	l6934
  6858   0026B2                     u6770:
  6859   0026B2  5022               	movf	(decision@hue+1)^0,w,c
  6860   0026B4  E107               	bnz	u6781
  6861   0026B6  0EDE               	movlw	222
  6862   0026B8  5C21               	subwf	decision@hue^0,w,c
  6863   0026BA  B0D8               	btfsc	status,0,c
  6864   0026BC  EF62  F013         	goto	u6781
  6865   0026C0  EF64  F013         	goto	u6780
  6866   0026C4                     u6781:
  6867   0026C4  EF77  F013         	goto	l6934
  6868   0026C8                     u6780:
  6869   0026C8                     
  6870                           ;color.c: 298:         moveLightBlue(&motorL,&motorR);
  6871   0026C8  0EEE               	movlw	low _motorL
  6872   0026CA  6E1D               	movwf	moveLightBlue@mL^0,c
  6873   0026CC  0EE5               	movlw	low _motorR
  6874   0026CE  6E1E               	movwf	moveLightBlue@mR^0,c
  6875   0026D0  EC87  F022         	call	_moveLightBlue	;wreg free
  6876   0026D4                     
  6877                           ;color.c: 299:         logAction('5',0, path_step);
  6878   0026D4  0E00               	movlw	0
  6879   0026D6  6E03               	movwf	(logAction@newTime+1)^0,c
  6880   0026D8  0E00               	movlw	0
  6881   0026DA  6E02               	movwf	logAction@newTime^0,c
  6882   0026DC  C023  F004         	movff	decision@path_step,logAction@path_step
  6883   0026E0  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6884   0026E4  0E35               	movlw	53
  6885   0026E6  ECCD  F020         	call	_logAction
  6886   0026EA  EFF8  F012         	goto	l6896
  6887   0026EE                     l6934:
  6888   0026EE  0E2E               	movlw	46
  6889   0026F0  5C21               	subwf	decision@hue^0,w,c
  6890   0026F2  0E01               	movlw	1
  6891   0026F4  5822               	subwfb	(decision@hue+1)^0,w,c
  6892   0026F6  A0D8               	btfss	status,0,c
  6893   0026F8  EF80  F013         	goto	u6791
  6894   0026FC  EF82  F013         	goto	u6790
  6895   002700                     u6791:
  6896   002700  EFA0  F013         	goto	l6946
  6897   002704                     u6790:
  6898   002704  0E5B               	movlw	91
  6899   002706  5C21               	subwf	decision@hue^0,w,c
  6900   002708  0E01               	movlw	1
  6901   00270A  5822               	subwfb	(decision@hue+1)^0,w,c
  6902   00270C  B0D8               	btfsc	status,0,c
  6903   00270E  EF8B  F013         	goto	u6801
  6904   002712  EF8D  F013         	goto	u6800
  6905   002716                     u6801:
  6906   002716  EFA0  F013         	goto	l6946
  6907   00271A                     u6800:
  6908   00271A                     
  6909                           ;color.c: 303:         moveYellow(&motorL,&motorR);
  6910   00271A  0EEE               	movlw	low _motorL
  6911   00271C  6E1D               	movwf	moveYellow@mL^0,c
  6912   00271E  0EE5               	movlw	low _motorR
  6913   002720  6E1E               	movwf	moveYellow@mR^0,c
  6914   002722  ECF1  F021         	call	_moveYellow	;wreg free
  6915   002726                     
  6916                           ;color.c: 304:         logAction('1',0, path_step);
  6917   002726  0E00               	movlw	0
  6918   002728  6E03               	movwf	(logAction@newTime+1)^0,c
  6919   00272A  0E00               	movlw	0
  6920   00272C  6E02               	movwf	logAction@newTime^0,c
  6921   00272E  C023  F004         	movff	decision@path_step,logAction@path_step
  6922   002732  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6923   002736  0E31               	movlw	49
  6924   002738  ECCD  F020         	call	_logAction
  6925   00273C  EFF8  F012         	goto	l6896
  6926   002740                     l6946:
  6927   002740  5022               	movf	(decision@hue+1)^0,w,c
  6928   002742  E109               	bnz	u6810
  6929   002744  0E0F               	movlw	15
  6930   002746  5C21               	subwf	decision@hue^0,w,c
  6931   002748  A0D8               	btfss	status,0,c
  6932   00274A  EFA9  F013         	goto	u6811
  6933   00274E  EFAB  F013         	goto	u6810
  6934   002752                     u6811:
  6935   002752  EFC9  F013         	goto	l6958
  6936   002756                     u6810:
  6937   002756  5022               	movf	(decision@hue+1)^0,w,c
  6938   002758  E107               	bnz	u6821
  6939   00275A  0E24               	movlw	36
  6940   00275C  5C21               	subwf	decision@hue^0,w,c
  6941   00275E  B0D8               	btfsc	status,0,c
  6942   002760  EFB4  F013         	goto	u6821
  6943   002764  EFB6  F013         	goto	u6820
  6944   002768                     u6821:
  6945   002768  EFC9  F013         	goto	l6958
  6946   00276C                     u6820:
  6947   00276C                     
  6948                           ;color.c: 308:         moveOrange(&motorL,&motorR);
  6949   00276C  0EEE               	movlw	low _motorL
  6950   00276E  6E1D               	movwf	moveOrange@mL^0,c
  6951   002770  0EE5               	movlw	low _motorR
  6952   002772  6E1E               	movwf	moveOrange@mR^0,c
  6953   002774  EC55  F022         	call	_moveOrange	;wreg free
  6954   002778                     
  6955                           ;color.c: 309:         logAction('4',0, path_step);
  6956   002778  0E00               	movlw	0
  6957   00277A  6E03               	movwf	(logAction@newTime+1)^0,c
  6958   00277C  0E00               	movlw	0
  6959   00277E  6E02               	movwf	logAction@newTime^0,c
  6960   002780  C023  F004         	movff	decision@path_step,logAction@path_step
  6961   002784  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6962   002788  0E34               	movlw	52
  6963   00278A  ECCD  F020         	call	_logAction
  6964   00278E  EFF8  F012         	goto	l6896
  6965   002792                     l6958:
  6966   002792  5022               	movf	(decision@hue+1)^0,w,c
  6967   002794  E109               	bnz	u6830
  6968   002796  0EF4               	movlw	244
  6969   002798  5C21               	subwf	decision@hue^0,w,c
  6970   00279A  A0D8               	btfss	status,0,c
  6971   00279C  EFD2  F013         	goto	u6831
  6972   0027A0  EFD4  F013         	goto	u6830
  6973   0027A4                     u6831:
  6974   0027A4  EFF2  F013         	goto	l167
  6975   0027A8                     u6830:
  6976   0027A8  5022               	movf	(decision@hue+1)^0,w,c
  6977   0027AA  E107               	bnz	u6841
  6978   0027AC  0EFC               	movlw	252
  6979   0027AE  5C21               	subwf	decision@hue^0,w,c
  6980   0027B0  B0D8               	btfsc	status,0,c
  6981   0027B2  EFDD  F013         	goto	u6841
  6982   0027B6  EFDF  F013         	goto	u6840
  6983   0027BA                     u6841:
  6984   0027BA  EFF2  F013         	goto	l167
  6985   0027BE                     u6840:
  6986   0027BE                     
  6987                           ;color.c: 313:         movePink(&motorL,&motorR);
  6988   0027BE  0EEE               	movlw	low _motorL
  6989   0027C0  6E1D               	movwf	movePink@mL^0,c
  6990   0027C2  0EE5               	movlw	low _motorR
  6991   0027C4  6E1E               	movwf	movePink@mR^0,c
  6992   0027C6  EC23  F022         	call	_movePink	;wreg free
  6993   0027CA                     
  6994                           ;color.c: 314:         logAction('2',0, path_step);
  6995   0027CA  0E00               	movlw	0
  6996   0027CC  6E03               	movwf	(logAction@newTime+1)^0,c
  6997   0027CE  0E00               	movlw	0
  6998   0027D0  6E02               	movwf	logAction@newTime^0,c
  6999   0027D2  C023  F004         	movff	decision@path_step,logAction@path_step
  7000   0027D6  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7001   0027DA  0E32               	movlw	50
  7002   0027DC  ECCD  F020         	call	_logAction
  7003   0027E0  EFF8  F012         	goto	l6896
  7004   0027E4                     l167:
  7005   0027E4                     l6970:
  7006                           
  7007                           ;color.c: 320:     return path_step;
  7008   0027E4  C023  F021         	movff	decision@path_step,?_decision
  7009   0027E8  C024  F022         	movff	decision@path_step+1,?_decision+1
  7010   0027EC  0012               	return		;funcret
  7011   0027EE                     __end_of_decision:
  7012                           	callstack 0
  7013                           
  7014 ;; *************** function _moveYellow *****************
  7015 ;; Defined at:
  7016 ;;		line 284 in file "dc_motor.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7019 ;;		 -> motorL(9), 
  7020 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7021 ;;		 -> motorR(9), 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;		None
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7036 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7037 ;;Total ram usage:        4 bytes
  7038 ;; Hardware stack levels used: 1
  7039 ;; Hardware stack levels required when called: 5
  7040 ;; This function calls:
  7041 ;;		_backOneAndHalf
  7042 ;;		_right90
  7043 ;; This function is called by:
  7044 ;;		_decision
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text24
  7049   0043E2                     __ptext24:
  7050                           	callstack 0
  7051   0043E2                     _moveYellow:
  7052                           	callstack 24
  7053   0043E2                     
  7054                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7055   0043E2  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7056   0043E6  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7057   0043EA  EC3C  F022         	call	_backOneAndHalf	;wreg free
  7058   0043EE                     
  7059                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7060   0043EE  0E29               	movlw	41
  7061   0043F0  6E20               	movwf	(??_moveYellow+1)^0,c
  7062   0043F2  0E96               	movlw	150
  7063   0043F4  6E1F               	movwf	??_moveYellow^0,c
  7064   0043F6  0E7F               	movlw	127
  7065   0043F8                     u7137:
  7066   0043F8  2EE8               	decfsz	wreg,f,c
  7067   0043FA  D7FE               	bra	u7137
  7068   0043FC  2E1F               	decfsz	??_moveYellow^0,f,c
  7069   0043FE  D7FC               	bra	u7137
  7070   004400  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7071   004402  D7FA               	bra	u7137
  7072   004404  0000               	nop	
  7073   004406                     
  7074                           ;dc_motor.c: 289:     right90(mL,mR);
  7075   004406  C01D  F019         	movff	moveYellow@mL,right90@mL
  7076   00440A  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7077   00440E  EC1D  F023         	call	_right90	;wreg free
  7078   004412  0012               	return		;funcret
  7079   004414                     __end_of_moveYellow:
  7080                           	callstack 0
  7081                           
  7082 ;; *************** function _moveRed *****************
  7083 ;; Defined at:
  7084 ;;		line 255 in file "dc_motor.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7087 ;;		 -> motorL(9), 
  7088 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7089 ;;		 -> motorR(9), 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7104 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7105 ;;Total ram usage:        4 bytes
  7106 ;; Hardware stack levels used: 1
  7107 ;; Hardware stack levels required when called: 5
  7108 ;; This function calls:
  7109 ;;		_backHalf
  7110 ;;		_right90
  7111 ;; This function is called by:
  7112 ;;		_decision
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text25
  7117   004414                     __ptext25:
  7118                           	callstack 0
  7119   004414                     _moveRed:
  7120                           	callstack 24
  7121   004414                     
  7122                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7123   004414  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7124   004418  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7125   00441C  EC4D  F023         	call	_backHalf	;wreg free
  7126   004420                     
  7127                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7128   004420  0E29               	movlw	41
  7129   004422  6E20               	movwf	(??_moveRed+1)^0,c
  7130   004424  0E96               	movlw	150
  7131   004426  6E1F               	movwf	??_moveRed^0,c
  7132   004428  0E7F               	movlw	127
  7133   00442A                     u7147:
  7134   00442A  2EE8               	decfsz	wreg,f,c
  7135   00442C  D7FE               	bra	u7147
  7136   00442E  2E1F               	decfsz	??_moveRed^0,f,c
  7137   004430  D7FC               	bra	u7147
  7138   004432  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7139   004434  D7FA               	bra	u7147
  7140   004436  0000               	nop	
  7141   004438                     
  7142                           ;dc_motor.c: 260:     right90(mL,mR);
  7143   004438  C01D  F019         	movff	moveRed@mL,right90@mL
  7144   00443C  C01E  F01A         	movff	moveRed@mR,right90@mR
  7145   004440  EC1D  F023         	call	_right90	;wreg free
  7146   004444  0012               	return		;funcret
  7147   004446                     __end_of_moveRed:
  7148                           	callstack 0
  7149                           
  7150 ;; *************** function _right90 *****************
  7151 ;; Defined at:
  7152 ;;		line 193 in file "dc_motor.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7155 ;;		 -> motorL(9), 
  7156 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7157 ;;		 -> motorR(9), 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;		None
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      void 
  7162 ;; Registers used:
  7163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7172 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7173 ;;Total ram usage:        4 bytes
  7174 ;; Hardware stack levels used: 1
  7175 ;; Hardware stack levels required when called: 4
  7176 ;; This function calls:
  7177 ;;		_stop
  7178 ;;		_turnRight
  7179 ;; This function is called by:
  7180 ;;		_moveRed
  7181 ;;		_moveYellow
  7182 ;;		_reverseTurn
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text26
  7187   00463A                     __ptext26:
  7188                           	callstack 0
  7189   00463A                     _right90:
  7190                           	callstack 24
  7191   00463A                     
  7192                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7193   00463A  C019  F014         	movff	right90@mL,turnRight@mL
  7194   00463E  C01A  F015         	movff	right90@mR,turnRight@mR
  7195   004642  ECBF  F01E         	call	_turnRight	;wreg free
  7196   004646                     
  7197                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7198   004646  0E18               	movlw	24
  7199   004648  6E1C               	movwf	(??_right90+1)^0,c
  7200   00464A  0E8A               	movlw	138
  7201   00464C  6E1B               	movwf	??_right90^0,c
  7202   00464E  0EE8               	movlw	232
  7203   004650                     u7157:
  7204   004650  2EE8               	decfsz	wreg,f,c
  7205   004652  D7FE               	bra	u7157
  7206   004654  2E1B               	decfsz	??_right90^0,f,c
  7207   004656  D7FC               	bra	u7157
  7208   004658  2E1C               	decfsz	(??_right90+1)^0,f,c
  7209   00465A  D7FA               	bra	u7157
  7210   00465C                     
  7211                           ;dc_motor.c: 197:     stop(mL,mR);
  7212   00465C  C019  F014         	movff	right90@mL,stop@mL
  7213   004660  C01A  F015         	movff	right90@mR,stop@mR
  7214   004664  EC78  F01E         	call	_stop	;wreg free
  7215   004668  0012               	return		;funcret
  7216   00466A                     __end_of_right90:
  7217                           	callstack 0
  7218                           
  7219 ;; *************** function _movePink *****************
  7220 ;; Defined at:
  7221 ;;		line 293 in file "dc_motor.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7224 ;;		 -> motorL(9), 
  7225 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7226 ;;		 -> motorR(9), 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;		None
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7240 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7242 ;;Total ram usage:        4 bytes
  7243 ;; Hardware stack levels used: 1
  7244 ;; Hardware stack levels required when called: 5
  7245 ;; This function calls:
  7246 ;;		_backOneAndHalf
  7247 ;;		_left90
  7248 ;; This function is called by:
  7249 ;;		_decision
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text27
  7254   004446                     __ptext27:
  7255                           	callstack 0
  7256   004446                     _movePink:
  7257                           	callstack 24
  7258   004446                     
  7259                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7260   004446  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7261   00444A  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7262   00444E  EC3C  F022         	call	_backOneAndHalf	;wreg free
  7263   004452                     
  7264                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7265   004452  0E29               	movlw	41
  7266   004454  6E20               	movwf	(??_movePink+1)^0,c
  7267   004456  0E96               	movlw	150
  7268   004458  6E1F               	movwf	??_movePink^0,c
  7269   00445A  0E7F               	movlw	127
  7270   00445C                     u7167:
  7271   00445C  2EE8               	decfsz	wreg,f,c
  7272   00445E  D7FE               	bra	u7167
  7273   004460  2E1F               	decfsz	??_movePink^0,f,c
  7274   004462  D7FC               	bra	u7167
  7275   004464  2E20               	decfsz	(??_movePink+1)^0,f,c
  7276   004466  D7FA               	bra	u7167
  7277   004468  0000               	nop	
  7278   00446A                     
  7279                           ;dc_motor.c: 298:     left90(mL,mR);
  7280   00446A  C01D  F019         	movff	movePink@mL,left90@mL
  7281   00446E  C01E  F01A         	movff	movePink@mR,left90@mR
  7282   004472  EC35  F023         	call	_left90	;wreg free
  7283   004476  0012               	return		;funcret
  7284   004478                     __end_of_movePink:
  7285                           	callstack 0
  7286                           
  7287 ;; *************** function _backOneAndHalf *****************
  7288 ;; Defined at:
  7289 ;;		line 241 in file "dc_motor.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7292 ;;		 -> motorL(9), 
  7293 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7294 ;;		 -> motorR(9), 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;		None
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7309 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7310 ;;Total ram usage:        4 bytes
  7311 ;; Hardware stack levels used: 1
  7312 ;; Hardware stack levels required when called: 4
  7313 ;; This function calls:
  7314 ;;		_fullSpeedBack
  7315 ;;		_stop
  7316 ;; This function is called by:
  7317 ;;		_moveYellow
  7318 ;;		_movePink
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text28
  7323   004478                     __ptext28:
  7324                           	callstack 0
  7325   004478                     _backOneAndHalf:
  7326                           	callstack 24
  7327   004478                     
  7328                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7329   004478  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7330   00447C  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7331   004480  EC3D  F01F         	call	_fullSpeedBack	;wreg free
  7332   004484                     
  7333                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7334   004484  0E6A               	movlw	106
  7335   004486  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7336   004488  0E85               	movlw	133
  7337   00448A  6E1B               	movwf	??_backOneAndHalf^0,c
  7338   00448C  0EB4               	movlw	180
  7339   00448E                     u7177:
  7340   00448E  2EE8               	decfsz	wreg,f,c
  7341   004490  D7FE               	bra	u7177
  7342   004492  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7343   004494  D7FC               	bra	u7177
  7344   004496  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7345   004498  D7FA               	bra	u7177
  7346   00449A  D000               	nop2	
  7347   00449C                     
  7348                           ;dc_motor.c: 245:     stop(mL,mR);
  7349   00449C  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7350   0044A0  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7351   0044A4  EC78  F01E         	call	_stop	;wreg free
  7352   0044A8  0012               	return		;funcret
  7353   0044AA                     __end_of_backOneAndHalf:
  7354                           	callstack 0
  7355                           
  7356 ;; *************** function _moveOrange *****************
  7357 ;; Defined at:
  7358 ;;		line 302 in file "dc_motor.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7361 ;;		 -> motorL(9), 
  7362 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7363 ;;		 -> motorR(9), 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7378 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7379 ;;Total ram usage:        4 bytes
  7380 ;; Hardware stack levels used: 1
  7381 ;; Hardware stack levels required when called: 5
  7382 ;; This function calls:
  7383 ;;		_backHalf
  7384 ;;		_right135
  7385 ;; This function is called by:
  7386 ;;		_decision
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text29
  7391   0044AA                     __ptext29:
  7392                           	callstack 0
  7393   0044AA                     _moveOrange:
  7394                           	callstack 24
  7395   0044AA                     
  7396                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7397   0044AA  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7398   0044AE  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7399   0044B2  EC4D  F023         	call	_backHalf	;wreg free
  7400   0044B6                     
  7401                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7402   0044B6  0E29               	movlw	41
  7403   0044B8  6E20               	movwf	(??_moveOrange+1)^0,c
  7404   0044BA  0E96               	movlw	150
  7405   0044BC  6E1F               	movwf	??_moveOrange^0,c
  7406   0044BE  0E7F               	movlw	127
  7407   0044C0                     u7187:
  7408   0044C0  2EE8               	decfsz	wreg,f,c
  7409   0044C2  D7FE               	bra	u7187
  7410   0044C4  2E1F               	decfsz	??_moveOrange^0,f,c
  7411   0044C6  D7FC               	bra	u7187
  7412   0044C8  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7413   0044CA  D7FA               	bra	u7187
  7414   0044CC  0000               	nop	
  7415   0044CE                     
  7416                           ;dc_motor.c: 307:     right135(mL,mR);
  7417   0044CE  C01D  F019         	movff	moveOrange@mL,right135@mL
  7418   0044D2  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7419   0044D6  EC6E  F022         	call	_right135	;wreg free
  7420   0044DA  0012               	return		;funcret
  7421   0044DC                     __end_of_moveOrange:
  7422                           	callstack 0
  7423                           
  7424 ;; *************** function _right135 *****************
  7425 ;; Defined at:
  7426 ;;		line 217 in file "dc_motor.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7429 ;;		 -> motorL(9), 
  7430 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7431 ;;		 -> motorR(9), 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7445 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7446 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7447 ;;Total ram usage:        4 bytes
  7448 ;; Hardware stack levels used: 1
  7449 ;; Hardware stack levels required when called: 4
  7450 ;; This function calls:
  7451 ;;		_stop
  7452 ;;		_turnRight
  7453 ;; This function is called by:
  7454 ;;		_moveOrange
  7455 ;;		_reverseTurn
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text30
  7460   0044DC                     __ptext30:
  7461                           	callstack 0
  7462   0044DC                     _right135:
  7463                           	callstack 24
  7464   0044DC                     
  7465                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7466   0044DC  C019  F014         	movff	right135@mL,turnRight@mL
  7467   0044E0  C01A  F015         	movff	right135@mR,turnRight@mR
  7468   0044E4  ECBF  F01E         	call	_turnRight	;wreg free
  7469   0044E8                     
  7470                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7471   0044E8  0E21               	movlw	33
  7472   0044EA  6E1C               	movwf	(??_right135+1)^0,c
  7473   0044EC  0E78               	movlw	120
  7474   0044EE  6E1B               	movwf	??_right135^0,c
  7475   0044F0  0E98               	movlw	152
  7476   0044F2                     u7197:
  7477   0044F2  2EE8               	decfsz	wreg,f,c
  7478   0044F4  D7FE               	bra	u7197
  7479   0044F6  2E1B               	decfsz	??_right135^0,f,c
  7480   0044F8  D7FC               	bra	u7197
  7481   0044FA  2E1C               	decfsz	(??_right135+1)^0,f,c
  7482   0044FC  D7FA               	bra	u7197
  7483   0044FE  D000               	nop2	
  7484   004500                     
  7485                           ;dc_motor.c: 221:     stop(mL,mR);
  7486   004500  C019  F014         	movff	right135@mL,stop@mL
  7487   004504  C01A  F015         	movff	right135@mR,stop@mR
  7488   004508  EC78  F01E         	call	_stop	;wreg free
  7489   00450C  0012               	return		;funcret
  7490   00450E                     __end_of_right135:
  7491                           	callstack 0
  7492                           
  7493 ;; *************** function _turnRight *****************
  7494 ;; Defined at:
  7495 ;;		line 125 in file "dc_motor.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7498 ;;		 -> motorL(9), 
  7499 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7500 ;;		 -> motorR(9), 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  i               2   22[COMRAM] unsigned int 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7515 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7516 ;;Total ram usage:        5 bytes
  7517 ;; Hardware stack levels used: 1
  7518 ;; Hardware stack levels required when called: 3
  7519 ;; This function calls:
  7520 ;;		_setMotorPWM
  7521 ;; This function is called by:
  7522 ;;		_right90
  7523 ;;		_right135
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text31
  7528   003D7E                     __ptext31:
  7529                           	callstack 0
  7530   003D7E                     _turnRight:
  7531                           	callstack 24
  7532   003D7E                     
  7533                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7534   003D7E  5014               	movf	turnRight@mL^0,w,c
  7535   003D80  6ED9               	movwf	fsr2l,c
  7536   003D82  6ADA               	clrf	fsr2h,c
  7537   003D84  0E01               	movlw	1
  7538   003D86  26D9               	addwf	fsr2l,f,c
  7539   003D88  0E01               	movlw	1
  7540   003D8A  6EDF               	movwf	indf2,c
  7541                           
  7542                           ;dc_motor.c: 129:     mR->direction = 0;
  7543   003D8C  5015               	movf	turnRight@mR^0,w,c
  7544   003D8E  6ED9               	movwf	fsr2l,c
  7545   003D90  6ADA               	clrf	fsr2h,c
  7546   003D92  0E01               	movlw	1
  7547   003D94  26D9               	addwf	fsr2l,f,c
  7548   003D96  6ADF               	clrf	indf2,c
  7549   003D98                     
  7550                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7551   003D98  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7552   003D9C  EC1D  F018         	call	_setMotorPWM	;wreg free
  7553   003DA0                     
  7554                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7555   003DA0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7556   003DA4  EC1D  F018         	call	_setMotorPWM	;wreg free
  7557   003DA8                     
  7558                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7559   003DA8  0E00               	movlw	0
  7560   003DAA  6E18               	movwf	(turnRight@i+1)^0,c
  7561   003DAC  0E00               	movlw	0
  7562   003DAE  6E17               	movwf	turnRight@i^0,c
  7563   003DB0                     l5666:
  7564                           
  7565                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7566   003DB0  5014               	movf	turnRight@mL^0,w,c
  7567   003DB2  6ED9               	movwf	fsr2l,c
  7568   003DB4  6ADA               	clrf	fsr2h,c
  7569   003DB6  2ADF               	incf	indf2,f,c
  7570                           
  7571                           ;dc_motor.c: 136:         mR->power++;
  7572   003DB8  5015               	movf	turnRight@mR^0,w,c
  7573   003DBA  6ED9               	movwf	fsr2l,c
  7574   003DBC  6ADA               	clrf	fsr2h,c
  7575   003DBE  2ADF               	incf	indf2,f,c
  7576   003DC0                     
  7577                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7578   003DC0  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7579   003DC4  EC1D  F018         	call	_setMotorPWM	;wreg free
  7580   003DC8                     
  7581                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7582   003DC8  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7583   003DCC  EC1D  F018         	call	_setMotorPWM	;wreg free
  7584   003DD0                     
  7585                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7586   003DD0  0E0B               	movlw	11
  7587   003DD2  6E16               	movwf	??_turnRight^0,c
  7588   003DD4  0E62               	movlw	98
  7589   003DD6                     u7207:
  7590   003DD6  2EE8               	decfsz	wreg,f,c
  7591   003DD8  D7FE               	bra	u7207
  7592   003DDA  2E16               	decfsz	??_turnRight^0,f,c
  7593   003DDC  D7FC               	bra	u7207
  7594   003DDE  D000               	nop2	
  7595   003DE0                     
  7596                           ;dc_motor.c: 140:     }
  7597   003DE0  4A17               	infsnz	turnRight@i^0,f,c
  7598   003DE2  2A18               	incf	(turnRight@i+1)^0,f,c
  7599   003DE4  5018               	movf	(turnRight@i+1)^0,w,c
  7600   003DE6  E109               	bnz	u5160
  7601   003DE8  0E32               	movlw	50
  7602   003DEA  5C17               	subwf	turnRight@i^0,w,c
  7603   003DEC  A0D8               	btfss	status,0,c
  7604   003DEE  EFFB  F01E         	goto	u5161
  7605   003DF2  EFFD  F01E         	goto	u5160
  7606   003DF6                     u5161:
  7607   003DF6  EFD8  F01E         	goto	l5666
  7608   003DFA                     u5160:
  7609   003DFA  0012               	return		;funcret
  7610   003DFC                     __end_of_turnRight:
  7611                           	callstack 0
  7612                           
  7613 ;; *************** function _moveLightBlue *****************
  7614 ;; Defined at:
  7615 ;;		line 311 in file "dc_motor.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7618 ;;		 -> motorL(9), 
  7619 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7620 ;;		 -> motorR(9), 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7634 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7635 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7636 ;;Total ram usage:        4 bytes
  7637 ;; Hardware stack levels used: 1
  7638 ;; Hardware stack levels required when called: 5
  7639 ;; This function calls:
  7640 ;;		_backHalf
  7641 ;;		_left135
  7642 ;; This function is called by:
  7643 ;;		_decision
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text32
  7648   00450E                     __ptext32:
  7649                           	callstack 0
  7650   00450E                     _moveLightBlue:
  7651                           	callstack 24
  7652   00450E                     
  7653                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7654   00450E  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7655   004512  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7656   004516  EC4D  F023         	call	_backHalf	;wreg free
  7657   00451A                     
  7658                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7659   00451A  0E29               	movlw	41
  7660   00451C  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7661   00451E  0E96               	movlw	150
  7662   004520  6E1F               	movwf	??_moveLightBlue^0,c
  7663   004522  0E7F               	movlw	127
  7664   004524                     u7217:
  7665   004524  2EE8               	decfsz	wreg,f,c
  7666   004526  D7FE               	bra	u7217
  7667   004528  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7668   00452A  D7FC               	bra	u7217
  7669   00452C  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7670   00452E  D7FA               	bra	u7217
  7671   004530  0000               	nop	
  7672   004532                     
  7673                           ;dc_motor.c: 316:     left135(mL,mR);
  7674   004532  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7675   004536  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7676   00453A  ECA0  F022         	call	_left135	;wreg free
  7677   00453E  0012               	return		;funcret
  7678   004540                     __end_of_moveLightBlue:
  7679                           	callstack 0
  7680                           
  7681 ;; *************** function _left135 *****************
  7682 ;; Defined at:
  7683 ;;		line 225 in file "dc_motor.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7686 ;;		 -> motorL(9), 
  7687 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7688 ;;		 -> motorR(9), 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7703 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;Total ram usage:        4 bytes
  7705 ;; Hardware stack levels used: 1
  7706 ;; Hardware stack levels required when called: 4
  7707 ;; This function calls:
  7708 ;;		_stop
  7709 ;;		_turnLeft
  7710 ;; This function is called by:
  7711 ;;		_moveLightBlue
  7712 ;;		_reverseTurn
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text33
  7717   004540                     __ptext33:
  7718                           	callstack 0
  7719   004540                     _left135:
  7720                           	callstack 24
  7721   004540                     
  7722                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7723   004540  C019  F014         	movff	left135@mL,turnLeft@mL
  7724   004544  C01A  F015         	movff	left135@mR,turnLeft@mR
  7725   004548  ECFE  F01E         	call	_turnLeft	;wreg free
  7726   00454C                     
  7727                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7728   00454C  0E21               	movlw	33
  7729   00454E  6E1C               	movwf	(??_left135+1)^0,c
  7730   004550  0E78               	movlw	120
  7731   004552  6E1B               	movwf	??_left135^0,c
  7732   004554  0E98               	movlw	152
  7733   004556                     u7227:
  7734   004556  2EE8               	decfsz	wreg,f,c
  7735   004558  D7FE               	bra	u7227
  7736   00455A  2E1B               	decfsz	??_left135^0,f,c
  7737   00455C  D7FC               	bra	u7227
  7738   00455E  2E1C               	decfsz	(??_left135+1)^0,f,c
  7739   004560  D7FA               	bra	u7227
  7740   004562  D000               	nop2	
  7741   004564                     
  7742                           ;dc_motor.c: 229:     stop(mL,mR);
  7743   004564  C019  F014         	movff	left135@mL,stop@mL
  7744   004568  C01A  F015         	movff	left135@mR,stop@mR
  7745   00456C  EC78  F01E         	call	_stop	;wreg free
  7746   004570  0012               	return		;funcret
  7747   004572                     __end_of_left135:
  7748                           	callstack 0
  7749                           
  7750 ;; *************** function _moveGreen *****************
  7751 ;; Defined at:
  7752 ;;		line 266 in file "dc_motor.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7755 ;;		 -> motorL(9), 
  7756 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7757 ;;		 -> motorR(9), 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;		None
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  1    wreg      void 
  7762 ;; Registers used:
  7763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7772 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7773 ;;Total ram usage:        4 bytes
  7774 ;; Hardware stack levels used: 1
  7775 ;; Hardware stack levels required when called: 5
  7776 ;; This function calls:
  7777 ;;		_backHalf
  7778 ;;		_left90
  7779 ;; This function is called by:
  7780 ;;		_decision
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text34
  7785   004572                     __ptext34:
  7786                           	callstack 0
  7787   004572                     _moveGreen:
  7788                           	callstack 24
  7789   004572                     
  7790                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7791   004572  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7792   004576  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7793   00457A  EC4D  F023         	call	_backHalf	;wreg free
  7794   00457E                     
  7795                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7796   00457E  0E29               	movlw	41
  7797   004580  6E20               	movwf	(??_moveGreen+1)^0,c
  7798   004582  0E96               	movlw	150
  7799   004584  6E1F               	movwf	??_moveGreen^0,c
  7800   004586  0E7F               	movlw	127
  7801   004588                     u7237:
  7802   004588  2EE8               	decfsz	wreg,f,c
  7803   00458A  D7FE               	bra	u7237
  7804   00458C  2E1F               	decfsz	??_moveGreen^0,f,c
  7805   00458E  D7FC               	bra	u7237
  7806   004590  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7807   004592  D7FA               	bra	u7237
  7808   004594  0000               	nop	
  7809   004596                     
  7810                           ;dc_motor.c: 271:     left90(mL,mR);
  7811   004596  C01D  F019         	movff	moveGreen@mL,left90@mL
  7812   00459A  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7813   00459E  EC35  F023         	call	_left90	;wreg free
  7814   0045A2  0012               	return		;funcret
  7815   0045A4                     __end_of_moveGreen:
  7816                           	callstack 0
  7817                           
  7818 ;; *************** function _left90 *****************
  7819 ;; Defined at:
  7820 ;;		line 201 in file "dc_motor.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7823 ;;		 -> motorL(9), 
  7824 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7825 ;;		 -> motorR(9), 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1    wreg      void 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7840 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7841 ;;Total ram usage:        4 bytes
  7842 ;; Hardware stack levels used: 1
  7843 ;; Hardware stack levels required when called: 4
  7844 ;; This function calls:
  7845 ;;		_stop
  7846 ;;		_turnLeft
  7847 ;; This function is called by:
  7848 ;;		_moveGreen
  7849 ;;		_movePink
  7850 ;;		_reverseTurn
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text35
  7855   00466A                     __ptext35:
  7856                           	callstack 0
  7857   00466A                     _left90:
  7858                           	callstack 24
  7859   00466A                     
  7860                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7861   00466A  C019  F014         	movff	left90@mL,turnLeft@mL
  7862   00466E  C01A  F015         	movff	left90@mR,turnLeft@mR
  7863   004672  ECFE  F01E         	call	_turnLeft	;wreg free
  7864   004676                     
  7865                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7866   004676  0E18               	movlw	24
  7867   004678  6E1C               	movwf	(??_left90+1)^0,c
  7868   00467A  0E8A               	movlw	138
  7869   00467C  6E1B               	movwf	??_left90^0,c
  7870   00467E  0EE8               	movlw	232
  7871   004680                     u7247:
  7872   004680  2EE8               	decfsz	wreg,f,c
  7873   004682  D7FE               	bra	u7247
  7874   004684  2E1B               	decfsz	??_left90^0,f,c
  7875   004686  D7FC               	bra	u7247
  7876   004688  2E1C               	decfsz	(??_left90+1)^0,f,c
  7877   00468A  D7FA               	bra	u7247
  7878   00468C                     
  7879                           ;dc_motor.c: 205:     stop(mL,mR);
  7880   00468C  C019  F014         	movff	left90@mL,stop@mL
  7881   004690  C01A  F015         	movff	left90@mR,stop@mR
  7882   004694  EC78  F01E         	call	_stop	;wreg free
  7883   004698  0012               	return		;funcret
  7884   00469A                     __end_of_left90:
  7885                           	callstack 0
  7886                           
  7887 ;; *************** function _moveBlue *****************
  7888 ;; Defined at:
  7889 ;;		line 275 in file "dc_motor.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7892 ;;		 -> motorL(9), 
  7893 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7894 ;;		 -> motorR(9), 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7906 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7908 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7909 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7910 ;;Total ram usage:        4 bytes
  7911 ;; Hardware stack levels used: 1
  7912 ;; Hardware stack levels required when called: 5
  7913 ;; This function calls:
  7914 ;;		_backHalf
  7915 ;;		_turn180
  7916 ;; This function is called by:
  7917 ;;		_decision
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text36
  7922   0045A4                     __ptext36:
  7923                           	callstack 0
  7924   0045A4                     _moveBlue:
  7925                           	callstack 24
  7926   0045A4                     
  7927                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  7928   0045A4  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7929   0045A8  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7930   0045AC  EC4D  F023         	call	_backHalf	;wreg free
  7931   0045B0                     
  7932                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7933   0045B0  0E29               	movlw	41
  7934   0045B2  6E20               	movwf	(??_moveBlue+1)^0,c
  7935   0045B4  0E96               	movlw	150
  7936   0045B6  6E1F               	movwf	??_moveBlue^0,c
  7937   0045B8  0E7F               	movlw	127
  7938   0045BA                     u7257:
  7939   0045BA  2EE8               	decfsz	wreg,f,c
  7940   0045BC  D7FE               	bra	u7257
  7941   0045BE  2E1F               	decfsz	??_moveBlue^0,f,c
  7942   0045C0  D7FC               	bra	u7257
  7943   0045C2  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  7944   0045C4  D7FA               	bra	u7257
  7945   0045C6  0000               	nop	
  7946   0045C8                     
  7947                           ;dc_motor.c: 280:     turn180(mL,mR);
  7948   0045C8  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7949   0045CC  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7950   0045D0  ECEB  F022         	call	_turn180	;wreg free
  7951   0045D4  0012               	return		;funcret
  7952   0045D6                     __end_of_moveBlue:
  7953                           	callstack 0
  7954                           
  7955 ;; *************** function _turn180 *****************
  7956 ;; Defined at:
  7957 ;;		line 209 in file "dc_motor.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7960 ;;		 -> motorL(9), 
  7961 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7962 ;;		 -> motorR(9), 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7976 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7977 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7978 ;;Total ram usage:        4 bytes
  7979 ;; Hardware stack levels used: 1
  7980 ;; Hardware stack levels required when called: 4
  7981 ;; This function calls:
  7982 ;;		_stop
  7983 ;;		_turnLeft
  7984 ;; This function is called by:
  7985 ;;		_moveBlue
  7986 ;;		_moveWhite
  7987 ;;		_reverseTurn
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text37
  7992   0045D6                     __ptext37:
  7993                           	callstack 0
  7994   0045D6                     _turn180:
  7995                           	callstack 24
  7996   0045D6                     
  7997                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7998   0045D6  C019  F014         	movff	turn180@mL,turnLeft@mL
  7999   0045DA  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8000   0045DE  ECFE  F01E         	call	_turnLeft	;wreg free
  8001   0045E2                     
  8002                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  8003   0045E2  0E30               	movlw	48
  8004   0045E4  6E1C               	movwf	(??_turn180+1)^0,c
  8005   0045E6  0E14               	movlw	20
  8006   0045E8  6E1B               	movwf	??_turn180^0,c
  8007   0045EA  0ED1               	movlw	209
  8008   0045EC                     u7267:
  8009   0045EC  2EE8               	decfsz	wreg,f,c
  8010   0045EE  D7FE               	bra	u7267
  8011   0045F0  2E1B               	decfsz	??_turn180^0,f,c
  8012   0045F2  D7FC               	bra	u7267
  8013   0045F4  2E1C               	decfsz	(??_turn180+1)^0,f,c
  8014   0045F6  D7FA               	bra	u7267
  8015   0045F8  0000               	nop	
  8016   0045FA                     
  8017                           ;dc_motor.c: 213:     stop(mL,mR);
  8018   0045FA  C019  F014         	movff	turn180@mL,stop@mL
  8019   0045FE  C01A  F015         	movff	turn180@mR,stop@mR
  8020   004602  EC78  F01E         	call	_stop	;wreg free
  8021   004606  0012               	return		;funcret
  8022   004608                     __end_of_turn180:
  8023                           	callstack 0
  8024                           
  8025 ;; *************** function _turnLeft *****************
  8026 ;; Defined at:
  8027 ;;		line 105 in file "dc_motor.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8030 ;;		 -> motorL(9), 
  8031 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8032 ;;		 -> motorR(9), 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  i               2   22[COMRAM] unsigned int 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8047 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8048 ;;Total ram usage:        5 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; Hardware stack levels required when called: 3
  8051 ;; This function calls:
  8052 ;;		_setMotorPWM
  8053 ;; This function is called by:
  8054 ;;		_left90
  8055 ;;		_turn180
  8056 ;;		_left135
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text38
  8061   003DFC                     __ptext38:
  8062                           	callstack 0
  8063   003DFC                     _turnLeft:
  8064                           	callstack 24
  8065   003DFC                     
  8066                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8067   003DFC  5014               	movf	turnLeft@mL^0,w,c
  8068   003DFE  6ED9               	movwf	fsr2l,c
  8069   003E00  6ADA               	clrf	fsr2h,c
  8070   003E02  0E01               	movlw	1
  8071   003E04  26D9               	addwf	fsr2l,f,c
  8072   003E06  6ADF               	clrf	indf2,c
  8073                           
  8074                           ;dc_motor.c: 109:     mR->direction = 1;
  8075   003E08  5015               	movf	turnLeft@mR^0,w,c
  8076   003E0A  6ED9               	movwf	fsr2l,c
  8077   003E0C  6ADA               	clrf	fsr2h,c
  8078   003E0E  0E01               	movlw	1
  8079   003E10  26D9               	addwf	fsr2l,f,c
  8080   003E12  0E01               	movlw	1
  8081   003E14  6EDF               	movwf	indf2,c
  8082   003E16                     
  8083                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8084   003E16  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8085   003E1A  EC1D  F018         	call	_setMotorPWM	;wreg free
  8086   003E1E                     
  8087                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8088   003E1E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8089   003E22  EC1D  F018         	call	_setMotorPWM	;wreg free
  8090   003E26                     
  8091                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8092   003E26  0E00               	movlw	0
  8093   003E28  6E18               	movwf	(turnLeft@i+1)^0,c
  8094   003E2A  0E00               	movlw	0
  8095   003E2C  6E17               	movwf	turnLeft@i^0,c
  8096   003E2E                     l5642:
  8097                           
  8098                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8099   003E2E  5014               	movf	turnLeft@mL^0,w,c
  8100   003E30  6ED9               	movwf	fsr2l,c
  8101   003E32  6ADA               	clrf	fsr2h,c
  8102   003E34  2ADF               	incf	indf2,f,c
  8103                           
  8104                           ;dc_motor.c: 116:         mR->power++;
  8105   003E36  5015               	movf	turnLeft@mR^0,w,c
  8106   003E38  6ED9               	movwf	fsr2l,c
  8107   003E3A  6ADA               	clrf	fsr2h,c
  8108   003E3C  2ADF               	incf	indf2,f,c
  8109   003E3E                     
  8110                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8111   003E3E  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8112   003E42  EC1D  F018         	call	_setMotorPWM	;wreg free
  8113   003E46                     
  8114                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8115   003E46  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8116   003E4A  EC1D  F018         	call	_setMotorPWM	;wreg free
  8117   003E4E                     
  8118                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8119   003E4E  0E0B               	movlw	11
  8120   003E50  6E16               	movwf	??_turnLeft^0,c
  8121   003E52  0E62               	movlw	98
  8122   003E54                     u7277:
  8123   003E54  2EE8               	decfsz	wreg,f,c
  8124   003E56  D7FE               	bra	u7277
  8125   003E58  2E16               	decfsz	??_turnLeft^0,f,c
  8126   003E5A  D7FC               	bra	u7277
  8127   003E5C  D000               	nop2	
  8128   003E5E                     
  8129                           ;dc_motor.c: 120:     }
  8130   003E5E  4A17               	infsnz	turnLeft@i^0,f,c
  8131   003E60  2A18               	incf	(turnLeft@i+1)^0,f,c
  8132   003E62  5018               	movf	(turnLeft@i+1)^0,w,c
  8133   003E64  E109               	bnz	u5150
  8134   003E66  0E32               	movlw	50
  8135   003E68  5C17               	subwf	turnLeft@i^0,w,c
  8136   003E6A  A0D8               	btfss	status,0,c
  8137   003E6C  EF3A  F01F         	goto	u5151
  8138   003E70  EF3C  F01F         	goto	u5150
  8139   003E74                     u5151:
  8140   003E74  EF17  F01F         	goto	l5642
  8141   003E78                     u5150:
  8142   003E78  0012               	return		;funcret
  8143   003E7A                     __end_of_turnLeft:
  8144                           	callstack 0
  8145                           
  8146 ;; *************** function _backHalf *****************
  8147 ;; Defined at:
  8148 ;;		line 233 in file "dc_motor.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8151 ;;		 -> motorL(9), 
  8152 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8153 ;;		 -> motorR(9), 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  1    wreg      void 
  8158 ;; Registers used:
  8159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8169 ;;Total ram usage:        4 bytes
  8170 ;; Hardware stack levels used: 1
  8171 ;; Hardware stack levels required when called: 4
  8172 ;; This function calls:
  8173 ;;		_fullSpeedBack
  8174 ;;		_stop
  8175 ;; This function is called by:
  8176 ;;		_moveRed
  8177 ;;		_moveGreen
  8178 ;;		_moveBlue
  8179 ;;		_moveOrange
  8180 ;;		_moveLightBlue
  8181 ;;		_moveWhite
  8182 ;;		_reverseTurn
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text39
  8187   00469A                     __ptext39:
  8188                           	callstack 0
  8189   00469A                     _backHalf:
  8190                           	callstack 24
  8191   00469A                     
  8192                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8193   00469A  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8194   00469E  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8195   0046A2  EC3D  F01F         	call	_fullSpeedBack	;wreg free
  8196   0046A6                     
  8197                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8198   0046A6  0E19               	movlw	25
  8199   0046A8  6E1C               	movwf	(??_backHalf+1)^0,c
  8200   0046AA  0E5A               	movlw	90
  8201   0046AC  6E1B               	movwf	??_backHalf^0,c
  8202   0046AE  0EB2               	movlw	178
  8203   0046B0                     u7287:
  8204   0046B0  2EE8               	decfsz	wreg,f,c
  8205   0046B2  D7FE               	bra	u7287
  8206   0046B4  2E1B               	decfsz	??_backHalf^0,f,c
  8207   0046B6  D7FC               	bra	u7287
  8208   0046B8  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8209   0046BA  D7FA               	bra	u7287
  8210   0046BC                     
  8211                           ;dc_motor.c: 237:     stop(mL,mR);
  8212   0046BC  C019  F014         	movff	backHalf@mL,stop@mL
  8213   0046C0  C01A  F015         	movff	backHalf@mR,stop@mR
  8214   0046C4  EC78  F01E         	call	_stop	;wreg free
  8215   0046C8  0012               	return		;funcret
  8216   0046CA                     __end_of_backHalf:
  8217                           	callstack 0
  8218                           
  8219 ;; *************** function _stop *****************
  8220 ;; Defined at:
  8221 ;;		line 88 in file "dc_motor.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8224 ;;		 -> motorL(9), 
  8225 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8226 ;;		 -> motorR(9), 
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8241 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8242 ;;Total ram usage:        3 bytes
  8243 ;; Hardware stack levels used: 1
  8244 ;; Hardware stack levels required when called: 3
  8245 ;; This function calls:
  8246 ;;		_setMotorPWM
  8247 ;; This function is called by:
  8248 ;;		_main
  8249 ;;		_right90
  8250 ;;		_left90
  8251 ;;		_turn180
  8252 ;;		_right135
  8253 ;;		_left135
  8254 ;;		_backHalf
  8255 ;;		_backOneAndHalf
  8256 ;;		_reverseStraight
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text40
  8261   003CF0                     __ptext40:
  8262                           	callstack 0
  8263   003CF0                     _stop:
  8264                           	callstack 27
  8265   003CF0                     
  8266                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8267   003CF0  EFA8  F01E         	goto	l5626
  8268   003CF4                     l5612:
  8269                           
  8270                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8271   003CF4  5014               	movf	stop@mL^0,w,c
  8272   003CF6  6ED9               	movwf	fsr2l,c
  8273   003CF8  6ADA               	clrf	fsr2h,c
  8274   003CFA  50DF               	movf	indf2,w,c
  8275   003CFC  B4D8               	btfsc	status,2,c
  8276   003CFE  EF83  F01E         	goto	u5111
  8277   003D02  EF85  F01E         	goto	u5110
  8278   003D06                     u5111:
  8279   003D06  EF89  F01E         	goto	l5616
  8280   003D0A                     u5110:
  8281   003D0A  5014               	movf	stop@mL^0,w,c
  8282   003D0C  6ED9               	movwf	fsr2l,c
  8283   003D0E  6ADA               	clrf	fsr2h,c
  8284   003D10  06DF               	decf	indf2,f,c
  8285   003D12                     l5616:
  8286                           
  8287                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8288   003D12  5015               	movf	stop@mR^0,w,c
  8289   003D14  6ED9               	movwf	fsr2l,c
  8290   003D16  6ADA               	clrf	fsr2h,c
  8291   003D18  50DF               	movf	indf2,w,c
  8292   003D1A  B4D8               	btfsc	status,2,c
  8293   003D1C  EF92  F01E         	goto	u5121
  8294   003D20  EF94  F01E         	goto	u5120
  8295   003D24                     u5121:
  8296   003D24  EF98  F01E         	goto	l5620
  8297   003D28                     u5120:
  8298   003D28  5015               	movf	stop@mR^0,w,c
  8299   003D2A  6ED9               	movwf	fsr2l,c
  8300   003D2C  6ADA               	clrf	fsr2h,c
  8301   003D2E  06DF               	decf	indf2,f,c
  8302   003D30                     l5620:
  8303                           
  8304                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8305   003D30  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8306   003D34  EC1D  F018         	call	_setMotorPWM	;wreg free
  8307   003D38                     
  8308                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8309   003D38  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8310   003D3C  EC1D  F018         	call	_setMotorPWM	;wreg free
  8311   003D40                     
  8312                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8313   003D40  0E0B               	movlw	11
  8314   003D42  6E16               	movwf	??_stop^0,c
  8315   003D44  0E62               	movlw	98
  8316   003D46                     u7297:
  8317   003D46  2EE8               	decfsz	wreg,f,c
  8318   003D48  D7FE               	bra	u7297
  8319   003D4A  2E16               	decfsz	??_stop^0,f,c
  8320   003D4C  D7FC               	bra	u7297
  8321   003D4E  D000               	nop2	
  8322   003D50                     l5626:
  8323                           
  8324                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8325   003D50  5014               	movf	stop@mL^0,w,c
  8326   003D52  6ED9               	movwf	fsr2l,c
  8327   003D54  6ADA               	clrf	fsr2h,c
  8328   003D56  50DF               	movf	indf2,w,c
  8329   003D58  A4D8               	btfss	status,2,c
  8330   003D5A  EFB1  F01E         	goto	u5131
  8331   003D5E  EFB3  F01E         	goto	u5130
  8332   003D62                     u5131:
  8333   003D62  EF7A  F01E         	goto	l5612
  8334   003D66                     u5130:
  8335   003D66  5015               	movf	stop@mR^0,w,c
  8336   003D68  6ED9               	movwf	fsr2l,c
  8337   003D6A  6ADA               	clrf	fsr2h,c
  8338   003D6C  50DF               	movf	indf2,w,c
  8339   003D6E  A4D8               	btfss	status,2,c
  8340   003D70  EFBC  F01E         	goto	u5141
  8341   003D74  EFBE  F01E         	goto	u5140
  8342   003D78                     u5141:
  8343   003D78  EF7A  F01E         	goto	l5612
  8344   003D7C                     u5140:
  8345   003D7C  0012               	return		;funcret
  8346   003D7E                     __end_of_stop:
  8347                           	callstack 0
  8348                           
  8349 ;; *************** function _fullSpeedBack *****************
  8350 ;; Defined at:
  8351 ;;		line 165 in file "dc_motor.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8354 ;;		 -> motorL(9), 
  8355 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8356 ;;		 -> motorR(9), 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  power           2   22[COMRAM] int 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8371 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8372 ;;Total ram usage:        5 bytes
  8373 ;; Hardware stack levels used: 1
  8374 ;; Hardware stack levels required when called: 3
  8375 ;; This function calls:
  8376 ;;		_setMotorPWM
  8377 ;; This function is called by:
  8378 ;;		_backHalf
  8379 ;;		_backOneAndHalf
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text41
  8384   003E7A                     __ptext41:
  8385                           	callstack 0
  8386   003E7A                     _fullSpeedBack:
  8387                           	callstack 24
  8388   003E7A                     
  8389                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8390   003E7A  5014               	movf	fullSpeedBack@mL^0,w,c
  8391   003E7C  6ED9               	movwf	fsr2l,c
  8392   003E7E  6ADA               	clrf	fsr2h,c
  8393   003E80  0E01               	movlw	1
  8394   003E82  26D9               	addwf	fsr2l,f,c
  8395   003E84  6ADF               	clrf	indf2,c
  8396                           
  8397                           ;dc_motor.c: 169:     mR->direction = 0;
  8398   003E86  5015               	movf	fullSpeedBack@mR^0,w,c
  8399   003E88  6ED9               	movwf	fsr2l,c
  8400   003E8A  6ADA               	clrf	fsr2h,c
  8401   003E8C  0E01               	movlw	1
  8402   003E8E  26D9               	addwf	fsr2l,f,c
  8403   003E90  6ADF               	clrf	indf2,c
  8404   003E92                     
  8405                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8406   003E92  0E00               	movlw	0
  8407   003E94  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8408   003E96  0E00               	movlw	0
  8409   003E98  6E17               	movwf	fullSpeedBack@power^0,c
  8410   003E9A                     l5686:
  8411                           
  8412                           ;dc_motor.c: 172:         mL->power = power;
  8413   003E9A  5014               	movf	fullSpeedBack@mL^0,w,c
  8414   003E9C  6ED9               	movwf	fsr2l,c
  8415   003E9E  6ADA               	clrf	fsr2h,c
  8416   003EA0  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8417                           
  8418                           ;dc_motor.c: 173:         mR->power = power;
  8419   003EA4  5015               	movf	fullSpeedBack@mR^0,w,c
  8420   003EA6  6ED9               	movwf	fsr2l,c
  8421   003EA8  6ADA               	clrf	fsr2h,c
  8422   003EAA  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8423   003EAE                     
  8424                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8425   003EAE  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8426   003EB2  EC1D  F018         	call	_setMotorPWM	;wreg free
  8427   003EB6                     
  8428                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8429   003EB6  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8430   003EBA  EC1D  F018         	call	_setMotorPWM	;wreg free
  8431   003EBE                     
  8432                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8433   003EBE  0E0B               	movlw	11
  8434   003EC0  6E16               	movwf	??_fullSpeedBack^0,c
  8435   003EC2  0E62               	movlw	98
  8436   003EC4                     u7307:
  8437   003EC4  2EE8               	decfsz	wreg,f,c
  8438   003EC6  D7FE               	bra	u7307
  8439   003EC8  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8440   003ECA  D7FC               	bra	u7307
  8441   003ECC  D000               	nop2	
  8442   003ECE                     
  8443                           ;dc_motor.c: 181:     }
  8444   003ECE  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8445   003ED0  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8446   003ED2  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8447   003ED4  EF75  F01F         	goto	u5171
  8448   003ED8  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8449   003EDA  E109               	bnz	u5170
  8450   003EDC  0E33               	movlw	51
  8451   003EDE  5C17               	subwf	fullSpeedBack@power^0,w,c
  8452   003EE0  A0D8               	btfss	status,0,c
  8453   003EE2  EF75  F01F         	goto	u5171
  8454   003EE6  EF77  F01F         	goto	u5170
  8455   003EEA                     u5171:
  8456   003EEA  EF4D  F01F         	goto	l5686
  8457   003EEE                     u5170:
  8458   003EEE  0012               	return		;funcret
  8459   003EF0                     __end_of_fullSpeedBack:
  8460                           	callstack 0
  8461                           
  8462 ;; *************** function _setMotorPWM *****************
  8463 ;; Defined at:
  8464 ;;		line 65 in file "dc_motor.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8467 ;;		 -> motorR(9), motorL(9), 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  negDuty         1   18[COMRAM] unsigned char 
  8470 ;;  posDuty         1   17[COMRAM] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8480 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8483 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8484 ;;Total ram usage:        5 bytes
  8485 ;; Hardware stack levels used: 1
  8486 ;; Hardware stack levels required when called: 2
  8487 ;; This function calls:
  8488 ;;		___lwdiv
  8489 ;;		___wmul
  8490 ;; This function is called by:
  8491 ;;		_stop
  8492 ;;		_turnLeft
  8493 ;;		_turnRight
  8494 ;;		_fullSpeedAhead
  8495 ;;		_fullSpeedBack
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text42
  8500   00303A                     __ptext42:
  8501                           	callstack 0
  8502   00303A                     _setMotorPWM:
  8503                           	callstack 27
  8504   00303A                     
  8505                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8506   00303A  500F               	movf	setMotorPWM@m^0,w,c
  8507   00303C  6ED9               	movwf	fsr2l,c
  8508   00303E  6ADA               	clrf	fsr2h,c
  8509   003040  0E02               	movlw	2
  8510   003042  26D9               	addwf	fsr2l,f,c
  8511   003044  50DF               	movf	indf2,w,c
  8512   003046  B4D8               	btfsc	status,2,c
  8513   003048  EF28  F018         	goto	u4951
  8514   00304C  EF2A  F018         	goto	u4950
  8515   003050                     u4951:
  8516   003050  EF5A  F018         	goto	l5532
  8517   003054                     u4950:
  8518   003054                     
  8519                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8520   003054  500F               	movf	setMotorPWM@m^0,w,c
  8521   003056  6ED9               	movwf	fsr2l,c
  8522   003058  6ADA               	clrf	fsr2h,c
  8523   00305A  50DF               	movf	indf2,w,c
  8524   00305C  6E10               	movwf	??_setMotorPWM^0,c
  8525   00305E  5010               	movf	??_setMotorPWM^0,w,c
  8526   003060  6E02               	movwf	___wmul@multiplier^0,c
  8527   003062  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8528   003064  500F               	movf	setMotorPWM@m^0,w,c
  8529   003066  6ED9               	movwf	fsr2l,c
  8530   003068  6ADA               	clrf	fsr2h,c
  8531   00306A  0E03               	movlw	3
  8532   00306C  26D9               	addwf	fsr2l,f,c
  8533   00306E  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8534   003072  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8535   003076  EC8E  F023         	call	___wmul	;wreg free
  8536   00307A  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8537   00307E  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8538   003082  0E00               	movlw	0
  8539   003084  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8540   003086  0E64               	movlw	100
  8541   003088  6E0A               	movwf	___lwdiv@divisor^0,c
  8542   00308A  EC78  F01F         	call	___lwdiv	;wreg free
  8543   00308E  500F               	movf	setMotorPWM@m^0,w,c
  8544   003090  6ED9               	movwf	fsr2l,c
  8545   003092  6ADA               	clrf	fsr2h,c
  8546   003094  0E03               	movlw	3
  8547   003096  26D9               	addwf	fsr2l,f,c
  8548   003098  50DF               	movf	indf2,w,c
  8549   00309A  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8550   00309C  5008               	movf	?___lwdiv^0,w,c
  8551   00309E  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8552   0030A0  6E12               	movwf	setMotorPWM@posDuty^0,c
  8553   0030A2                     
  8554                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8555   0030A2  500F               	movf	setMotorPWM@m^0,w,c
  8556   0030A4  6ED9               	movwf	fsr2l,c
  8557   0030A6  6ADA               	clrf	fsr2h,c
  8558   0030A8  0E03               	movlw	3
  8559   0030AA  26D9               	addwf	fsr2l,f,c
  8560   0030AC  50DF               	movf	indf2,w,c
  8561   0030AE  6E13               	movwf	setMotorPWM@negDuty^0,c
  8562                           
  8563                           ;dc_motor.c: 72:     }
  8564   0030B0  EF7B  F018         	goto	l5536
  8565   0030B4                     l5532:
  8566                           
  8567                           ;dc_motor.c: 74:         posDuty=0;
  8568   0030B4  0E00               	movlw	0
  8569   0030B6  6E12               	movwf	setMotorPWM@posDuty^0,c
  8570   0030B8                     
  8571                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8572   0030B8  500F               	movf	setMotorPWM@m^0,w,c
  8573   0030BA  6ED9               	movwf	fsr2l,c
  8574   0030BC  6ADA               	clrf	fsr2h,c
  8575   0030BE  50DF               	movf	indf2,w,c
  8576   0030C0  6E10               	movwf	??_setMotorPWM^0,c
  8577   0030C2  5010               	movf	??_setMotorPWM^0,w,c
  8578   0030C4  6E02               	movwf	___wmul@multiplier^0,c
  8579   0030C6  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8580   0030C8  500F               	movf	setMotorPWM@m^0,w,c
  8581   0030CA  6ED9               	movwf	fsr2l,c
  8582   0030CC  6ADA               	clrf	fsr2h,c
  8583   0030CE  0E03               	movlw	3
  8584   0030D0  26D9               	addwf	fsr2l,f,c
  8585   0030D2  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8586   0030D6  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8587   0030DA  EC8E  F023         	call	___wmul	;wreg free
  8588   0030DE  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8589   0030E2  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8590   0030E6  0E00               	movlw	0
  8591   0030E8  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8592   0030EA  0E64               	movlw	100
  8593   0030EC  6E0A               	movwf	___lwdiv@divisor^0,c
  8594   0030EE  EC78  F01F         	call	___lwdiv	;wreg free
  8595   0030F2  5008               	movf	?___lwdiv^0,w,c
  8596   0030F4  6E13               	movwf	setMotorPWM@negDuty^0,c
  8597   0030F6                     l5536:
  8598                           
  8599                           ;dc_motor.c: 78:     if (m->direction) {
  8600   0030F6  500F               	movf	setMotorPWM@m^0,w,c
  8601   0030F8  6ED9               	movwf	fsr2l,c
  8602   0030FA  6ADA               	clrf	fsr2h,c
  8603   0030FC  0E01               	movlw	1
  8604   0030FE  26D9               	addwf	fsr2l,f,c
  8605   003100  50DF               	movf	indf2,w,c
  8606   003102  B4D8               	btfsc	status,2,c
  8607   003104  EF86  F018         	goto	u4961
  8608   003108  EF88  F018         	goto	u4960
  8609   00310C                     u4961:
  8610   00310C  EFA8  F018         	goto	l5540
  8611   003110                     u4960:
  8612   003110                     
  8613                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8614   003110  500F               	movf	setMotorPWM@m^0,w,c
  8615   003112  6ED9               	movwf	fsr2l,c
  8616   003114  6ADA               	clrf	fsr2h,c
  8617   003116  0E05               	movlw	5
  8618   003118  26D9               	addwf	fsr2l,f,c
  8619   00311A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8620   00311E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8621   003122  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8622   003126  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8623   00312A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8624                           
  8625                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8626   00312E  500F               	movf	setMotorPWM@m^0,w,c
  8627   003130  6ED9               	movwf	fsr2l,c
  8628   003132  6ADA               	clrf	fsr2h,c
  8629   003134  0E07               	movlw	7
  8630   003136  26D9               	addwf	fsr2l,f,c
  8631   003138  CFDE F010          	movff	postinc2,??_setMotorPWM
  8632   00313C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8633   003140  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8634   003144  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8635   003148  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8636                           
  8637                           ;dc_motor.c: 81:     } else {
  8638   00314C  EFC6  F018         	goto	l421
  8639   003150                     l5540:
  8640                           
  8641                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8642   003150  500F               	movf	setMotorPWM@m^0,w,c
  8643   003152  6ED9               	movwf	fsr2l,c
  8644   003154  6ADA               	clrf	fsr2h,c
  8645   003156  0E05               	movlw	5
  8646   003158  26D9               	addwf	fsr2l,f,c
  8647   00315A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8648   00315E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8649   003162  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8650   003166  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8651   00316A  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8652                           
  8653                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8654   00316E  500F               	movf	setMotorPWM@m^0,w,c
  8655   003170  6ED9               	movwf	fsr2l,c
  8656   003172  6ADA               	clrf	fsr2h,c
  8657   003174  0E07               	movlw	7
  8658   003176  26D9               	addwf	fsr2l,f,c
  8659   003178  CFDE F010          	movff	postinc2,??_setMotorPWM
  8660   00317C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8661   003180  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8662   003184  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8663   003188  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8664   00318C                     l421:
  8665   00318C  0012               	return		;funcret
  8666   00318E                     __end_of_setMotorPWM:
  8667                           	callstack 0
  8668                           
  8669 ;; *************** function ___lwdiv *****************
  8670 ;; Defined at:
  8671 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  dividend        2    7[COMRAM] unsigned int 
  8674 ;;  divisor         2    9[COMRAM] unsigned int 
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  quotient        2   12[COMRAM] unsigned int 
  8677 ;;  counter         1   11[COMRAM] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  2    7[COMRAM] unsigned int 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8688 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8690 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8691 ;;Total ram usage:        7 bytes
  8692 ;; Hardware stack levels used: 1
  8693 ;; Hardware stack levels required when called: 1
  8694 ;; This function calls:
  8695 ;;		Nothing
  8696 ;; This function is called by:
  8697 ;;		_main
  8698 ;;		_setMotorPWM
  8699 ;;		_ADC2String
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text43
  8704   003EF0                     __ptext43:
  8705                           	callstack 0
  8706   003EF0                     ___lwdiv:
  8707                           	callstack 27
  8708   003EF0  0E00               	movlw	0
  8709   003EF2  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  8710   003EF4  0E00               	movlw	0
  8711   003EF6  6E0D               	movwf	___lwdiv@quotient^0,c
  8712   003EF8  500A               	movf	___lwdiv@divisor^0,w,c
  8713   003EFA  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8714   003EFC  B4D8               	btfsc	status,2,c
  8715   003EFE  EF83  F01F         	goto	u4871
  8716   003F02  EF85  F01F         	goto	u4870
  8717   003F06                     u4871:
  8718   003F06  EFAD  F01F         	goto	l1225
  8719   003F0A                     u4870:
  8720   003F0A  0E01               	movlw	1
  8721   003F0C  6E0C               	movwf	___lwdiv@counter^0,c
  8722   003F0E  EF8D  F01F         	goto	l5492
  8723   003F12                     l5490:
  8724   003F12  90D8               	bcf	status,0,c
  8725   003F14  360A               	rlcf	___lwdiv@divisor^0,f,c
  8726   003F16  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8727   003F18  2A0C               	incf	___lwdiv@counter^0,f,c
  8728   003F1A                     l5492:
  8729   003F1A  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8730   003F1C  EF92  F01F         	goto	u4881
  8731   003F20  EF94  F01F         	goto	u4880
  8732   003F24                     u4881:
  8733   003F24  EF89  F01F         	goto	l5490
  8734   003F28                     u4880:
  8735   003F28                     l5494:
  8736   003F28  90D8               	bcf	status,0,c
  8737   003F2A  360D               	rlcf	___lwdiv@quotient^0,f,c
  8738   003F2C  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8739   003F2E  500A               	movf	___lwdiv@divisor^0,w,c
  8740   003F30  5C08               	subwf	___lwdiv@dividend^0,w,c
  8741   003F32  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8742   003F34  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8743   003F36  A0D8               	btfss	status,0,c
  8744   003F38  EFA0  F01F         	goto	u4891
  8745   003F3C  EFA2  F01F         	goto	u4890
  8746   003F40                     u4891:
  8747   003F40  EFA7  F01F         	goto	l5502
  8748   003F44                     u4890:
  8749   003F44  500A               	movf	___lwdiv@divisor^0,w,c
  8750   003F46  5E08               	subwf	___lwdiv@dividend^0,f,c
  8751   003F48  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8752   003F4A  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8753   003F4C  800D               	bsf	___lwdiv@quotient^0,0,c
  8754   003F4E                     l5502:
  8755   003F4E  90D8               	bcf	status,0,c
  8756   003F50  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8757   003F52  320A               	rrcf	___lwdiv@divisor^0,f,c
  8758   003F54  2E0C               	decfsz	___lwdiv@counter^0,f,c
  8759   003F56  EF94  F01F         	goto	l5494
  8760   003F5A                     l1225:
  8761   003F5A  C00D  F008         	movff	___lwdiv@quotient,?___lwdiv
  8762   003F5E  C00E  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8763   003F62  0012               	return		;funcret
  8764   003F64                     __end_of___lwdiv:
  8765                           	callstack 0
  8766                           
  8767 ;; *************** function _logAction *****************
  8768 ;; Defined at:
  8769 ;;		line 13 in file "return_func.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  newAction       1    wreg     unsigned char 
  8772 ;;  newTime         2    1[COMRAM] int 
  8773 ;;  path_step       2    3[COMRAM] unsigned int 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  newAction       1    5[COMRAM] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8788 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8789 ;;Total ram usage:        5 bytes
  8790 ;; Hardware stack levels used: 1
  8791 ;; Hardware stack levels required when called: 1
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_decision
  8796 ;;		_get16bitTMR0val
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           	psect	text44
  8801   00419A                     __ptext44:
  8802                           	callstack 0
  8803   00419A                     _logAction:
  8804                           	callstack 28
  8805                           
  8806                           ;incstack = 0
  8807                           ;logAction@newAction stored from wreg
  8808   00419A  6E06               	movwf	logAction@newAction^0,c
  8809   00419C                     
  8810                           ;return_func.c: 14:     if (path_step < 50) {
  8811   00419C  5005               	movf	(logAction@path_step+1)^0,w,c
  8812   00419E  E107               	bnz	u6471
  8813   0041A0  0E32               	movlw	50
  8814   0041A2  5C04               	subwf	logAction@path_step^0,w,c
  8815   0041A4  B0D8               	btfsc	status,0,c
  8816   0041A6  EFD7  F020         	goto	u6471
  8817   0041AA  EFD9  F020         	goto	u6470
  8818   0041AE                     u6471:
  8819   0041AE  EFEE  F020         	goto	l696
  8820   0041B2                     u6470:
  8821   0041B2                     
  8822                           ;return_func.c: 15:         action[path_step] = newAction;
  8823   0041B2  0E3C               	movlw	low _action
  8824   0041B4  2404               	addwf	logAction@path_step^0,w,c
  8825   0041B6  6ED9               	movwf	fsr2l,c
  8826   0041B8  0E01               	movlw	high _action
  8827   0041BA  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8828   0041BC  6EDA               	movwf	fsr2h,c
  8829   0041BE  C006  FFDF         	movff	logAction@newAction,indf2
  8830                           
  8831                           ;return_func.c: 16:         time[path_step] = newTime;
  8832   0041C2  90D8               	bcf	status,0,c
  8833   0041C4  3404               	rlcf	logAction@path_step^0,w,c
  8834   0041C6  6ED9               	movwf	fsr2l,c
  8835   0041C8  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8836   0041CA  6EDA               	movwf	fsr2h,c
  8837   0041CC  0E00               	movlw	low _time
  8838   0041CE  26D9               	addwf	fsr2l,f,c
  8839   0041D0  0E02               	movlw	high _time
  8840   0041D2  22DA               	addwfc	fsr2h,f,c
  8841   0041D4  C002  FFDE         	movff	logAction@newTime,postinc2
  8842   0041D8  C003  FFDD         	movff	logAction@newTime+1,postdec2
  8843   0041DC                     l696:
  8844   0041DC  0012               	return		;funcret
  8845   0041DE                     __end_of_logAction:
  8846                           	callstack 0
  8847                           
  8848 ;; *************** function _color_click_init *****************
  8849 ;; Defined at:
  8850 ;;		line 9 in file "color.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;		None
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		wreg, status,2, status,0, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;Total ram usage:        1 bytes
  8869 ;; Hardware stack levels used: 1
  8870 ;; Hardware stack levels required when called: 4
  8871 ;; This function calls:
  8872 ;;		_I2C_2_Master_Init
  8873 ;;		_color_writetoaddr
  8874 ;; This function is called by:
  8875 ;;		_main
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text45
  8880   004314                     __ptext45:
  8881                           	callstack 0
  8882   004314                     _color_click_init:
  8883                           	callstack 26
  8884   004314                     
  8885                           ;color.c: 12:     I2C_2_Master_Init();
  8886   004314  EC65  F023         	call	_I2C_2_Master_Init	;wreg free
  8887   004318                     
  8888                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  8889   004318  0E01               	movlw	1
  8890   00431A  6E04               	movwf	color_writetoaddr@value^0,c
  8891   00431C  0E00               	movlw	0
  8892   00431E  ECA1  F023         	call	_color_writetoaddr
  8893   004322                     
  8894                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8895   004322  0E3F               	movlw	63
  8896   004324  6E06               	movwf	??_color_click_init^0,c
  8897   004326  0E55               	movlw	85
  8898   004328                     u7317:
  8899   004328  2EE8               	decfsz	wreg,f,c
  8900   00432A  D7FE               	bra	u7317
  8901   00432C  2E06               	decfsz	??_color_click_init^0,f,c
  8902   00432E  D7FC               	bra	u7317
  8903   004330  0000               	nop	
  8904   004332                     
  8905                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  8906   004332  0E03               	movlw	3
  8907   004334  6E04               	movwf	color_writetoaddr@value^0,c
  8908   004336  0E00               	movlw	0
  8909   004338  ECA1  F023         	call	_color_writetoaddr
  8910   00433C                     
  8911                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  8912   00433C  0ED5               	movlw	213
  8913   00433E  6E04               	movwf	color_writetoaddr@value^0,c
  8914   004340  0E01               	movlw	1
  8915   004342  ECA1  F023         	call	_color_writetoaddr
  8916   004346  0012               	return		;funcret
  8917   004348                     __end_of_color_click_init:
  8918                           	callstack 0
  8919                           
  8920 ;; *************** function _color_writetoaddr *****************
  8921 ;; Defined at:
  8922 ;;		line 25 in file "color.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  address         1    wreg     unsigned char 
  8925 ;;  value           1    3[COMRAM] unsigned char 
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;  address         1    4[COMRAM] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2, status,0, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8937 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8940 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8941 ;;Total ram usage:        2 bytes
  8942 ;; Hardware stack levels used: 1
  8943 ;; Hardware stack levels required when called: 3
  8944 ;; This function calls:
  8945 ;;		_I2C_2_Master_Start
  8946 ;;		_I2C_2_Master_Stop
  8947 ;;		_I2C_2_Master_Write
  8948 ;; This function is called by:
  8949 ;;		_color_click_init
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text46
  8954   004742                     __ptext46:
  8955                           	callstack 0
  8956   004742                     _color_writetoaddr:
  8957                           	callstack 26
  8958                           
  8959                           ;incstack = 0
  8960                           ;color_writetoaddr@address stored from wreg
  8961   004742  6E05               	movwf	color_writetoaddr@address^0,c
  8962   004744                     
  8963                           ;color.c: 26:     I2C_2_Master_Start();
  8964   004744  ECF3  F023         	call	_I2C_2_Master_Start	;wreg free
  8965                           
  8966                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  8967   004748  0E52               	movlw	82
  8968   00474A  ECE8  F023         	call	_I2C_2_Master_Write
  8969                           
  8970                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  8971   00474E  5005               	movf	color_writetoaddr@address^0,w,c
  8972   004750  0980               	iorlw	128
  8973   004752  ECE8  F023         	call	_I2C_2_Master_Write
  8974                           
  8975                           ;color.c: 29:     I2C_2_Master_Write(value);
  8976   004756  5004               	movf	color_writetoaddr@value^0,w,c
  8977   004758  ECE8  F023         	call	_I2C_2_Master_Write
  8978                           
  8979                           ;color.c: 30:     I2C_2_Master_Stop();
  8980   00475C  ECEE  F023         	call	_I2C_2_Master_Stop	;wreg free
  8981   004760  0012               	return		;funcret
  8982   004762                     __end_of_color_writetoaddr:
  8983                           	callstack 0
  8984                           
  8985 ;; *************** function _I2C_2_Master_Init *****************
  8986 ;; Defined at:
  8987 ;;		line 4 in file "i2c.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;		None
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;		None
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, status,2
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9005 ;;Total ram usage:        0 bytes
  9006 ;; Hardware stack levels used: 1
  9007 ;; Hardware stack levels required when called: 1
  9008 ;; This function calls:
  9009 ;;		Nothing
  9010 ;; This function is called by:
  9011 ;;		_color_click_init
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           	psect	text47
  9016   0046CA                     __ptext47:
  9017                           	callstack 0
  9018   0046CA                     _I2C_2_Master_Init:
  9019                           	callstack 28
  9020   0046CA                     
  9021                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9022   0046CA  010E               	movlb	14	; () banked
  9023   0046CC  51D9               	movf	217,w,b	;volatile
  9024   0046CE  0BF0               	andlw	-16
  9025   0046D0  0908               	iorlw	8
  9026   0046D2  6FD9               	movwf	217,b	;volatile
  9027   0046D4                     
  9028                           ; BSR set to: 14
  9029                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9030   0046D4  8BD9               	bsf	217,5,b	;volatile
  9031                           
  9032                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9033   0046D6  0E9F               	movlw	159
  9034   0046D8  6FD6               	movwf	214,b	;volatile
  9035   0046DA                     
  9036                           ; BSR set to: 14
  9037                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9038   0046DA  8A84               	bsf	132,5,c	;volatile
  9039   0046DC                     
  9040                           ; BSR set to: 14
  9041                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9042   0046DC  8C84               	bsf	132,6,c	;volatile
  9043   0046DE                     
  9044                           ; BSR set to: 14
  9045                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9046   0046DE  9BA7               	bcf	167,5,b	;volatile
  9047   0046E0                     
  9048                           ; BSR set to: 14
  9049                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9050   0046E0  9DA7               	bcf	167,6,b	;volatile
  9051                           
  9052                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9053   0046E2  0E1D               	movlw	29
  9054   0046E4  6F1D               	movwf	29,b	;volatile
  9055                           
  9056                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9057   0046E6  0E1E               	movlw	30
  9058   0046E8  6F1C               	movwf	28,b	;volatile
  9059                           
  9060                           ;i2c.c: 18:   RD5PPS=0x1C;
  9061   0046EA  0E1C               	movlw	28
  9062   0046EC  6F6F               	movwf	111,b	;volatile
  9063                           
  9064                           ;i2c.c: 19:   RD6PPS=0x1B;
  9065   0046EE  0E1B               	movlw	27
  9066   0046F0  6F70               	movwf	112,b	;volatile
  9067   0046F2                     
  9068                           ; BSR set to: 14
  9069   0046F2  0012               	return		;funcret
  9070   0046F4                     __end_of_I2C_2_Master_Init:
  9071                           	callstack 0
  9072                           
  9073 ;; *************** function _calibration_routine *****************
  9074 ;; Defined at:
  9075 ;;		line 133 in file "color.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;  cCal            1   68[COMRAM] PTR struct colors
  9078 ;;		 -> colorCalibration(10), 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9090 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9091 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9093 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9094 ;;Total ram usage:       23 bytes
  9095 ;; Hardware stack levels used: 1
  9096 ;; Hardware stack levels required when called: 9
  9097 ;; This function calls:
  9098 ;;		_color_read_Blue
  9099 ;;		_color_read_Clear
  9100 ;;		_color_read_Green
  9101 ;;		_color_read_Red
  9102 ;;		_sendStringSerial4
  9103 ;;		_sprintf
  9104 ;; This function is called by:
  9105 ;;		_main
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           	psect	text48
  9110   0027EE                     __ptext48:
  9111                           	callstack 0
  9112   0027EE                     _calibration_routine:
  9113                           	callstack 21
  9114   0027EE                     
  9115                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9116   0027EE  907F               	bcf	127,0,c	;volatile
  9117                           
  9118                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9119   0027F0  9E7D               	bcf	125,7,c	;volatile
  9120                           
  9121                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9122   0027F2  9679               	bcf	121,3,c	;volatile
  9123   0027F4                     
  9124                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9125   0027F4  0E60               	movlw	low calibration_routine@cal_state
  9126   0027F6  6E32               	movwf	sprintf@s^0,c
  9127   0027F8  0E8A               	movlw	low STR_1
  9128   0027FA  6E33               	movwf	sprintf@fmt^0,c
  9129   0027FC  0EC3               	movlw	low STR_2
  9130   0027FE  6E34               	movwf	(?_sprintf+2)^0,c
  9131   002800  5034               	movf	(?_sprintf+2)^0,w,c
  9132   002802  A4D8               	btfss	status,2,c
  9133   002804  0E0E               	movlw	high __smallconst
  9134   002806  6E35               	movwf	(?_sprintf+3)^0,c
  9135   002808  ECA4  F021         	call	_sprintf	;wreg free
  9136   00280C                     
  9137                           ;color.c: 145:     sendStringSerial4(cal_state);
  9138   00280C  0E60               	movlw	low calibration_routine@cal_state
  9139   00280E  6E03               	movwf	sendStringSerial4@string^0,c
  9140   002810  EC04  F023         	call	_sendStringSerial4	;wreg free
  9141   002814                     l102:
  9142                           
  9143                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9144   002814  B48E               	btfsc	142,2,c	;volatile
  9145   002816  EF0F  F014         	goto	u6651
  9146   00281A  EF11  F014         	goto	u6650
  9147   00281E                     u6651:
  9148   00281E  EF0A  F014         	goto	l102
  9149   002822                     u6650:
  9150   002822                     
  9151                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9152   002822  807F               	bsf	127,0,c	;volatile
  9153   002824                     
  9154                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9155   002824  0E29               	movlw	41
  9156   002826  6E47               	movwf	(??_calibration_routine+1)^0,c
  9157   002828  0E96               	movlw	150
  9158   00282A  6E46               	movwf	??_calibration_routine^0,c
  9159   00282C  0E7F               	movlw	127
  9160   00282E                     u7327:
  9161   00282E  2EE8               	decfsz	wreg,f,c
  9162   002830  D7FE               	bra	u7327
  9163   002832  2E46               	decfsz	??_calibration_routine^0,f,c
  9164   002834  D7FC               	bra	u7327
  9165   002836  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9166   002838  D7FA               	bra	u7327
  9167   00283A  0000               	nop	
  9168   00283C                     
  9169                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9170   00283C  ECE7  F01F         	call	_color_read_Red	;wreg free
  9171   002840  5045               	movf	calibration_routine@cCal^0,w,c
  9172   002842  6ED9               	movwf	fsr2l,c
  9173   002844  6ADA               	clrf	fsr2h,c
  9174   002846  C006  FFDE         	movff	?_color_read_Red,postinc2
  9175   00284A  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9176   00284E                     
  9177                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9178   00284E  907F               	bcf	127,0,c	;volatile
  9179   002850                     
  9180                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9181   002850  0E60               	movlw	low calibration_routine@cal_state
  9182   002852  6E32               	movwf	sprintf@s^0,c
  9183   002854  0E01               	movlw	low STR_3
  9184   002856  6E33               	movwf	sprintf@fmt^0,c
  9185   002858  0EC3               	movlw	low STR_2
  9186   00285A  6E34               	movwf	(?_sprintf+2)^0,c
  9187   00285C  5034               	movf	(?_sprintf+2)^0,w,c
  9188   00285E  A4D8               	btfss	status,2,c
  9189   002860  0E0E               	movlw	high __smallconst
  9190   002862  6E35               	movwf	(?_sprintf+3)^0,c
  9191   002864  ECA4  F021         	call	_sprintf	;wreg free
  9192   002868                     
  9193                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9194   002868  0E60               	movlw	low calibration_routine@cal_state
  9195   00286A  6E03               	movwf	sendStringSerial4@string^0,c
  9196   00286C  EC04  F023         	call	_sendStringSerial4	;wreg free
  9197   002870                     l105:
  9198                           
  9199                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9200   002870  B48E               	btfsc	142,2,c	;volatile
  9201   002872  EF3D  F014         	goto	u6661
  9202   002876  EF3F  F014         	goto	u6660
  9203   00287A                     u6661:
  9204   00287A  EF38  F014         	goto	l105
  9205   00287E                     u6660:
  9206   00287E                     
  9207                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9208   00287E  8E7D               	bsf	125,7,c	;volatile
  9209   002880                     
  9210                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9211   002880  0E29               	movlw	41
  9212   002882  6E47               	movwf	(??_calibration_routine+1)^0,c
  9213   002884  0E96               	movlw	150
  9214   002886  6E46               	movwf	??_calibration_routine^0,c
  9215   002888  0E7F               	movlw	127
  9216   00288A                     u7337:
  9217   00288A  2EE8               	decfsz	wreg,f,c
  9218   00288C  D7FE               	bra	u7337
  9219   00288E  2E46               	decfsz	??_calibration_routine^0,f,c
  9220   002890  D7FC               	bra	u7337
  9221   002892  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9222   002894  D7FA               	bra	u7337
  9223   002896  0000               	nop	
  9224   002898                     
  9225                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9226   002898  EC0F  F020         	call	_color_read_Green	;wreg free
  9227   00289C  5045               	movf	calibration_routine@cCal^0,w,c
  9228   00289E  6ED9               	movwf	fsr2l,c
  9229   0028A0  6ADA               	clrf	fsr2h,c
  9230   0028A2  0E02               	movlw	2
  9231   0028A4  26D9               	addwf	fsr2l,f,c
  9232   0028A6  C006  FFDE         	movff	?_color_read_Green,postinc2
  9233   0028AA  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9234   0028AE                     
  9235                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9236   0028AE  9E7D               	bcf	125,7,c	;volatile
  9237   0028B0                     
  9238                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9239   0028B0  0E60               	movlw	low calibration_routine@cal_state
  9240   0028B2  6E32               	movwf	sprintf@s^0,c
  9241   0028B4  0E3B               	movlw	low STR_5
  9242   0028B6  6E33               	movwf	sprintf@fmt^0,c
  9243   0028B8  0EC3               	movlw	low STR_2
  9244   0028BA  6E34               	movwf	(?_sprintf+2)^0,c
  9245   0028BC  5034               	movf	(?_sprintf+2)^0,w,c
  9246   0028BE  A4D8               	btfss	status,2,c
  9247   0028C0  0E0E               	movlw	high __smallconst
  9248   0028C2  6E35               	movwf	(?_sprintf+3)^0,c
  9249   0028C4  ECA4  F021         	call	_sprintf	;wreg free
  9250   0028C8                     
  9251                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9252   0028C8  0E60               	movlw	low calibration_routine@cal_state
  9253   0028CA  6E03               	movwf	sendStringSerial4@string^0,c
  9254   0028CC  EC04  F023         	call	_sendStringSerial4	;wreg free
  9255   0028D0                     l108:
  9256                           
  9257                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9258   0028D0  B48E               	btfsc	142,2,c	;volatile
  9259   0028D2  EF6D  F014         	goto	u6671
  9260   0028D6  EF6F  F014         	goto	u6670
  9261   0028DA                     u6671:
  9262   0028DA  EF68  F014         	goto	l108
  9263   0028DE                     u6670:
  9264   0028DE                     
  9265                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9266   0028DE  8679               	bsf	121,3,c	;volatile
  9267   0028E0                     
  9268                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9269   0028E0  0E29               	movlw	41
  9270   0028E2  6E47               	movwf	(??_calibration_routine+1)^0,c
  9271   0028E4  0E96               	movlw	150
  9272   0028E6  6E46               	movwf	??_calibration_routine^0,c
  9273   0028E8  0E7F               	movlw	127
  9274   0028EA                     u7347:
  9275   0028EA  2EE8               	decfsz	wreg,f,c
  9276   0028EC  D7FE               	bra	u7347
  9277   0028EE  2E46               	decfsz	??_calibration_routine^0,f,c
  9278   0028F0  D7FC               	bra	u7347
  9279   0028F2  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9280   0028F4  D7FA               	bra	u7347
  9281   0028F6  0000               	nop	
  9282   0028F8                     
  9283                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9284   0028F8  EC5F  F020         	call	_color_read_Blue	;wreg free
  9285   0028FC  5045               	movf	calibration_routine@cCal^0,w,c
  9286   0028FE  6ED9               	movwf	fsr2l,c
  9287   002900  6ADA               	clrf	fsr2h,c
  9288   002902  0E04               	movlw	4
  9289   002904  26D9               	addwf	fsr2l,f,c
  9290   002906  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9291   00290A  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9292   00290E                     
  9293                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9294   00290E  9679               	bcf	121,3,c	;volatile
  9295   002910                     
  9296                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9297   002910  0E60               	movlw	low calibration_routine@cal_state
  9298   002912  6E32               	movwf	sprintf@s^0,c
  9299   002914  0E56               	movlw	low STR_7
  9300   002916  6E33               	movwf	sprintf@fmt^0,c
  9301   002918  0EC3               	movlw	low STR_2
  9302   00291A  6E34               	movwf	(?_sprintf+2)^0,c
  9303   00291C  5034               	movf	(?_sprintf+2)^0,w,c
  9304   00291E  A4D8               	btfss	status,2,c
  9305   002920  0E0E               	movlw	high __smallconst
  9306   002922  6E35               	movwf	(?_sprintf+3)^0,c
  9307   002924  ECA4  F021         	call	_sprintf	;wreg free
  9308   002928                     
  9309                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9310   002928  0E60               	movlw	low calibration_routine@cal_state
  9311   00292A  6E03               	movwf	sendStringSerial4@string^0,c
  9312   00292C  EC04  F023         	call	_sendStringSerial4	;wreg free
  9313   002930                     l111:
  9314                           
  9315                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9316   002930  B48E               	btfsc	142,2,c	;volatile
  9317   002932  EF9D  F014         	goto	u6681
  9318   002936  EF9F  F014         	goto	u6680
  9319   00293A                     u6681:
  9320   00293A  EF98  F014         	goto	l111
  9321   00293E                     u6680:
  9322   00293E                     
  9323                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9324   00293E  807F               	bsf	127,0,c	;volatile
  9325                           
  9326                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9327   002940  8E7D               	bsf	125,7,c	;volatile
  9328                           
  9329                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9330   002942  8679               	bsf	121,3,c	;volatile
  9331   002944                     
  9332                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9333   002944  0E29               	movlw	41
  9334   002946  6E47               	movwf	(??_calibration_routine+1)^0,c
  9335   002948  0E96               	movlw	150
  9336   00294A  6E46               	movwf	??_calibration_routine^0,c
  9337   00294C  0E7F               	movlw	127
  9338   00294E                     u7357:
  9339   00294E  2EE8               	decfsz	wreg,f,c
  9340   002950  D7FE               	bra	u7357
  9341   002952  2E46               	decfsz	??_calibration_routine^0,f,c
  9342   002954  D7FC               	bra	u7357
  9343   002956  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9344   002958  D7FA               	bra	u7357
  9345   00295A  0000               	nop	
  9346   00295C                     
  9347                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9348   00295C  EC37  F020         	call	_color_read_Clear	;wreg free
  9349   002960  5045               	movf	calibration_routine@cCal^0,w,c
  9350   002962  6ED9               	movwf	fsr2l,c
  9351   002964  6ADA               	clrf	fsr2h,c
  9352   002966  0E06               	movlw	6
  9353   002968  26D9               	addwf	fsr2l,f,c
  9354   00296A  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9355   00296E  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9356   002972                     
  9357                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9358   002972  907F               	bcf	127,0,c	;volatile
  9359   002974                     
  9360                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9361   002974  9E7D               	bcf	125,7,c	;volatile
  9362   002976                     
  9363                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9364   002976  9679               	bcf	121,3,c	;volatile
  9365   002978                     
  9366                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9367   002978  0E60               	movlw	low calibration_routine@cal_state
  9368   00297A  6E32               	movwf	sprintf@s^0,c
  9369   00297C  0E1E               	movlw	low STR_9
  9370   00297E  6E33               	movwf	sprintf@fmt^0,c
  9371   002980  0EC3               	movlw	low STR_2
  9372   002982  6E34               	movwf	(?_sprintf+2)^0,c
  9373   002984  5034               	movf	(?_sprintf+2)^0,w,c
  9374   002986  A4D8               	btfss	status,2,c
  9375   002988  0E0E               	movlw	high __smallconst
  9376   00298A  6E35               	movwf	(?_sprintf+3)^0,c
  9377   00298C  ECA4  F021         	call	_sprintf	;wreg free
  9378   002990                     
  9379                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9380   002990  0E60               	movlw	low calibration_routine@cal_state
  9381   002992  6E03               	movwf	sendStringSerial4@string^0,c
  9382   002994  EC04  F023         	call	_sendStringSerial4	;wreg free
  9383   002998                     l114:
  9384                           
  9385                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9386   002998  B48E               	btfsc	142,2,c	;volatile
  9387   00299A  EFD1  F014         	goto	u6691
  9388   00299E  EFD3  F014         	goto	u6690
  9389   0029A2                     u6691:
  9390   0029A2  EFCC  F014         	goto	l114
  9391   0029A6                     u6690:
  9392   0029A6                     
  9393                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9394   0029A6  807F               	bsf	127,0,c	;volatile
  9395                           
  9396                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9397   0029A8  8E7D               	bsf	125,7,c	;volatile
  9398                           
  9399                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9400   0029AA  8679               	bsf	121,3,c	;volatile
  9401   0029AC                     
  9402                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9403   0029AC  0E29               	movlw	41
  9404   0029AE  6E47               	movwf	(??_calibration_routine+1)^0,c
  9405   0029B0  0E96               	movlw	150
  9406   0029B2  6E46               	movwf	??_calibration_routine^0,c
  9407   0029B4  0E7F               	movlw	127
  9408   0029B6                     u7367:
  9409   0029B6  2EE8               	decfsz	wreg,f,c
  9410   0029B8  D7FE               	bra	u7367
  9411   0029BA  2E46               	decfsz	??_calibration_routine^0,f,c
  9412   0029BC  D7FC               	bra	u7367
  9413   0029BE  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9414   0029C0  D7FA               	bra	u7367
  9415   0029C2  0000               	nop	
  9416   0029C4                     
  9417                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9418   0029C4  EC37  F020         	call	_color_read_Clear	;wreg free
  9419   0029C8  5045               	movf	calibration_routine@cCal^0,w,c
  9420   0029CA  6ED9               	movwf	fsr2l,c
  9421   0029CC  6ADA               	clrf	fsr2h,c
  9422   0029CE  0E08               	movlw	8
  9423   0029D0  26D9               	addwf	fsr2l,f,c
  9424   0029D2  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9425   0029D6  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9426   0029DA                     
  9427                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9428   0029DA  907F               	bcf	127,0,c	;volatile
  9429   0029DC                     
  9430                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9431   0029DC  9E7D               	bcf	125,7,c	;volatile
  9432   0029DE                     
  9433                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9434   0029DE  9679               	bcf	121,3,c	;volatile
  9435   0029E0                     
  9436                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9437   0029E0  0E60               	movlw	low calibration_routine@cal_state
  9438   0029E2  6E32               	movwf	sprintf@s^0,c
  9439   0029E4  0E71               	movlw	low STR_11
  9440   0029E6  6E33               	movwf	sprintf@fmt^0,c
  9441   0029E8  0EC3               	movlw	low STR_2
  9442   0029EA  6E34               	movwf	(?_sprintf+2)^0,c
  9443   0029EC  5034               	movf	(?_sprintf+2)^0,w,c
  9444   0029EE  A4D8               	btfss	status,2,c
  9445   0029F0  0E0E               	movlw	high __smallconst
  9446   0029F2  6E35               	movwf	(?_sprintf+3)^0,c
  9447   0029F4  ECA4  F021         	call	_sprintf	;wreg free
  9448   0029F8                     
  9449                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9450   0029F8  0E60               	movlw	low calibration_routine@cal_state
  9451   0029FA  6E03               	movwf	sendStringSerial4@string^0,c
  9452   0029FC  EC04  F023         	call	_sendStringSerial4	;wreg free
  9453   002A00                     l117:
  9454                           
  9455                           ;color.c: 219:     while(PORTFbits.RF2 == 1){
  9456   002A00  B48E               	btfsc	142,2,c	;volatile
  9457   002A02  EF05  F015         	goto	u6701
  9458   002A06  EF07  F015         	goto	u6700
  9459   002A0A                     u6701:
  9460   002A0A  EF00  F015         	goto	l117
  9461   002A0E                     u6700:
  9462   002A0E                     
  9463                           ;color.c: 222:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9464   002A0E  0E29               	movlw	41
  9465   002A10  6E47               	movwf	(??_calibration_routine+1)^0,c
  9466   002A12  0E96               	movlw	150
  9467   002A14  6E46               	movwf	??_calibration_routine^0,c
  9468   002A16  0E7F               	movlw	127
  9469   002A18                     u7377:
  9470   002A18  2EE8               	decfsz	wreg,f,c
  9471   002A1A  D7FE               	bra	u7377
  9472   002A1C  2E46               	decfsz	??_calibration_routine^0,f,c
  9473   002A1E  D7FC               	bra	u7377
  9474   002A20  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9475   002A22  D7FA               	bra	u7377
  9476   002A24  0000               	nop	
  9477   002A26  0012               	return		;funcret
  9478   002A28                     __end_of_calibration_routine:
  9479                           	callstack 0
  9480                           
  9481 ;; *************** function _sprintf *****************
  9482 ;; Defined at:
  9483 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;  s               1   49[COMRAM] PTR unsigned char 
  9486 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9487 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9488 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9489 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  f              12   56[COMRAM] struct _IO_FILE
  9492 ;;  ret             2    0        int 
  9493 ;;  ap              1   55[COMRAM] PTR void [1]
  9494 ;;		 -> ?_sprintf(2), 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  2   49[COMRAM] int 
  9497 ;; Registers used:
  9498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9504 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9505 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9507 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9508 ;;Total ram usage:       19 bytes
  9509 ;; Hardware stack levels used: 1
  9510 ;; Hardware stack levels required when called: 8
  9511 ;; This function calls:
  9512 ;;		_vfprintf
  9513 ;; This function is called by:
  9514 ;;		_calibration_routine
  9515 ;;		_send2USART
  9516 ;;		_ADC2String
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text49
  9521   004348                     __ptext49:
  9522                           	callstack 0
  9523   004348                     _sprintf:
  9524                           	callstack 21
  9525   004348  0E34               	movlw	low (?_sprintf+2)
  9526   00434A  6E38               	movwf	sprintf@ap^0,c
  9527   00434C  C032  F039         	movff	sprintf@s,sprintf@f
  9528   004350  0E00               	movlw	0
  9529   004352  6E3D               	movwf	(sprintf@f+4)^0,c
  9530   004354  0E00               	movlw	0
  9531   004356  6E3C               	movwf	(sprintf@f+3)^0,c
  9532   004358  0E00               	movlw	0
  9533   00435A  6E44               	movwf	(sprintf@f+11)^0,c
  9534   00435C  0E00               	movlw	0
  9535   00435E  6E43               	movwf	(sprintf@f+10)^0,c
  9536   004360  0E39               	movlw	low sprintf@f
  9537   004362  6E2E               	movwf	vfprintf@fp^0,c
  9538   004364  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9539   004368  0E38               	movlw	low sprintf@ap
  9540   00436A  6E30               	movwf	vfprintf@ap^0,c
  9541   00436C  ECEF  F020         	call	_vfprintf	;wreg free
  9542   004370  5032               	movf	sprintf@s^0,w,c
  9543   004372  243C               	addwf	(sprintf@f+3)^0,w,c
  9544   004374  6ED9               	movwf	fsr2l,c
  9545   004376  6ADA               	clrf	fsr2h,c
  9546   004378  6ADF               	clrf	indf2,c
  9547   00437A  0012               	return		;funcret
  9548   00437C                     __end_of_sprintf:
  9549                           	callstack 0
  9550                           
  9551 ;; *************** function _vfprintf *****************
  9552 ;; Defined at:
  9553 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9556 ;;		 -> sprintf@f(12), 
  9557 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9558 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9559 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9560 ;;  ap              1   47[COMRAM] PTR PTR void 
  9561 ;;		 -> sprintf@ap(1), 
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9564 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9565 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  2   45[COMRAM] int 
  9568 ;; Registers used:
  9569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9575 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9578 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9579 ;;Total ram usage:        4 bytes
  9580 ;; Hardware stack levels used: 1
  9581 ;; Hardware stack levels required when called: 7
  9582 ;; This function calls:
  9583 ;;		_vfpfcnvrt
  9584 ;; This function is called by:
  9585 ;;		_sprintf
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text50
  9590   0041DE                     __ptext50:
  9591                           	callstack 0
  9592   0041DE                     _vfprintf:
  9593                           	callstack 21
  9594   0041DE                     
  9595                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9596   0041DE  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9597                           
  9598                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9599   0041E2  EFFB  F020         	goto	l6466
  9600   0041E6                     l6464:
  9601                           
  9602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9603   0041E6  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9604   0041EA  0E31               	movlw	low vfprintf@cfmt
  9605   0041EC  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9606   0041EE  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9607   0041F2  ECEE  F015         	call	_vfpfcnvrt	;wreg free
  9608   0041F6                     l6466:
  9609                           
  9610                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9611   0041F6  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9612   0041FA                     	if	1	;There is more than 1 active tblptr byte
  9613   0041FA  0E0E               	movlw	high __smallconst
  9614   0041FC  6EF7               	movwf	tblptrh,c
  9615   0041FE                     	endif
  9616   0041FE                     	if	0	;tblptru may be non-zero
  9617   0041FE                     	endif
  9618   0041FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9619   0041FE  0E00               	movlw	low (__smallconst shr (0+16))
  9620   004200  6EF8               	movwf	tblptru,c
  9621   004202                     	endif
  9622   004202  0008               	tblrd		*
  9623   004204  50F5               	movf	tablat,w,c
  9624   004206  0900               	iorlw	0
  9625   004208  A4D8               	btfss	status,2,c
  9626   00420A  EF09  F021         	goto	u6341
  9627   00420E  EF0B  F021         	goto	u6340
  9628   004212                     u6341:
  9629   004212  EFF3  F020         	goto	l6464
  9630   004216                     u6340:
  9631   004216                     
  9632                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9633   004216  0E00               	movlw	0
  9634   004218  6E2F               	movwf	(?_vfprintf+1)^0,c
  9635   00421A  0E00               	movlw	0
  9636   00421C  6E2E               	movwf	?_vfprintf^0,c
  9637   00421E  0012               	return		;funcret
  9638   004220                     __end_of_vfprintf:
  9639                           	callstack 0
  9640                           
  9641 ;; *************** function _vfpfcnvrt *****************
  9642 ;; Defined at:
  9643 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9646 ;;		 -> sprintf@f(12), 
  9647 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9648 ;;		 -> vfprintf@cfmt(1), 
  9649 ;;  ap              1   36[COMRAM] PTR PTR void 
  9650 ;;		 -> sprintf@ap(1), 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  convarg         4   39[COMRAM] struct .
  9653 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9654 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9655 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9656 ;;  done            1   43[COMRAM] _Bool 
  9657 ;;  c               1    0        unsigned char 
  9658 ;; Return value:  Size  Location     Type
  9659 ;;                  1    wreg      void 
  9660 ;; Registers used:
  9661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9662 ;; Tracked objects:
  9663 ;;		On entry : 0/0
  9664 ;;		On exit  : 0/0
  9665 ;;		Unchanged: 0/0
  9666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9668 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9670 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9671 ;;Total ram usage:       11 bytes
  9672 ;; Hardware stack levels used: 1
  9673 ;; Hardware stack levels required when called: 6
  9674 ;; This function calls:
  9675 ;;		_dtoa
  9676 ;;		_fputc
  9677 ;;		_read_prec_or_width
  9678 ;; This function is called by:
  9679 ;;		_vfprintf
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           	psect	text51
  9684   002BDC                     __ptext51:
  9685                           	callstack 0
  9686   002BDC                     _vfpfcnvrt:
  9687                           	callstack 21
  9688   002BDC                     
  9689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9690   002BDC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9691   002BDE  6ED9               	movwf	fsr2l,c
  9692   002BE0  6ADA               	clrf	fsr2h,c
  9693   002BE2  CFDF FFF6          	movff	indf2,tblptrl
  9694   002BE6                     	if	1	;There is more than 1 active tblptr byte
  9695   002BE6  0E0E               	movlw	high __smallconst
  9696   002BE8  6EF7               	movwf	tblptrh,c
  9697   002BEA                     	endif
  9698   002BEA                     	if	0	;tblptru may be non-zero
  9699   002BEA                     	endif
  9700   002BEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9701   002BEA  0E00               	movlw	low (__smallconst shr (0+16))
  9702   002BEC  6EF8               	movwf	tblptru,c
  9703   002BEE                     	endif
  9704   002BEE  0008               	tblrd		*
  9705   002BF0  50F5               	movf	tablat,w,c
  9706   002BF2  0A25               	xorlw	37
  9707   002BF4  A4D8               	btfss	status,2,c
  9708   002BF6  EFFF  F015         	goto	u5931
  9709   002BFA  EF01  F016         	goto	u5930
  9710   002BFE                     u5931:
  9711   002BFE  EF9E  F016         	goto	l6166
  9712   002C02                     u5930:
  9713   002C02                     
  9714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9715   002C02  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9716   002C04  6ED9               	movwf	fsr2l,c
  9717   002C06  6ADA               	clrf	fsr2h,c
  9718   002C08  2ADF               	incf	indf2,f,c
  9719   002C0A                     
  9720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9721   002C0A  0E00               	movlw	0
  9722   002C0C  0100               	movlb	0	; () banked
  9723   002C0E  6FCB               	movwf	(_width+1)& (0+255),b
  9724   002C10  0E00               	movlw	0
  9725   002C12  6FCA               	movwf	_width& (0+255),b
  9726   002C14  C0CA  F0CE         	movff	_width,_flags
  9727   002C18                     
  9728                           ; BSR set to: 0
  9729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9730   002C18  69CC               	setf	_prec& (0+255),b
  9731   002C1A  69CD               	setf	(_prec+1)& (0+255),b
  9732   002C1C                     
  9733                           ; BSR set to: 0
  9734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9735   002C1C  0E00               	movlw	0
  9736   002C1E  6E2C               	movwf	vfpfcnvrt@done^0,c
  9737                           
  9738                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9739   002C20  EF39  F016         	goto	l6140
  9740   002C24                     l6130:
  9741                           
  9742                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9743   002C24  0100               	movlb	0	; () banked
  9744   002C26  83CE               	bsf	_flags& (0+255),1,b
  9745   002C28                     
  9746                           ; BSR set to: 0
  9747                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9748   002C28  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9749   002C2A  6ED9               	movwf	fsr2l,c
  9750   002C2C  6ADA               	clrf	fsr2h,c
  9751   002C2E  2ADF               	incf	indf2,f,c
  9752                           
  9753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9754   002C30  EF39  F016         	goto	l6140
  9755   002C34                     l6134:
  9756                           
  9757                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9758   002C34  0E01               	movlw	1
  9759   002C36  6E2C               	movwf	vfpfcnvrt@done^0,c
  9760                           
  9761                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9762   002C38  EF39  F016         	goto	l6140
  9763   002C3C                     l6138:
  9764   002C3C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9765   002C3E  6ED9               	movwf	fsr2l,c
  9766   002C40  6ADA               	clrf	fsr2h,c
  9767   002C42  CFDF FFF6          	movff	indf2,tblptrl
  9768   002C46                     	if	1	;There is more than 1 active tblptr byte
  9769   002C46  0E0E               	movlw	high __smallconst
  9770   002C48  6EF7               	movwf	tblptrh,c
  9771   002C4A                     	endif
  9772   002C4A                     	if	0	;tblptru may be non-zero
  9773   002C4A                     	endif
  9774   002C4A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9775   002C4A  0E00               	movlw	low (__smallconst shr (0+16))
  9776   002C4C  6EF8               	movwf	tblptru,c
  9777   002C4E                     	endif
  9778   002C4E  0008               	tblrd		*
  9779   002C50  50F5               	movf	tablat,w,c
  9780   002C52  6E26               	movwf	??_vfpfcnvrt^0,c
  9781   002C54  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9782                           
  9783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9784                           ; Switch size 1, requested type "simple"
  9785                           ; Number of cases is 1, Range of values is 0 to 0
  9786                           ; switch strategies available:
  9787                           ; Name         Instructions Cycles
  9788                           ; simple_byte            4     3 (average)
  9789                           ;	Chosen strategy is simple_byte
  9790   002C56  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9791   002C58  0A00               	xorlw	0	; case 0
  9792   002C5A  B4D8               	btfsc	status,2,c
  9793   002C5C  EF32  F016         	goto	l7240
  9794   002C60  EF1A  F016         	goto	l6134
  9795   002C64                     l7240:
  9796                           
  9797                           ; Switch size 1, requested type "simple"
  9798                           ; Number of cases is 1, Range of values is 48 to 48
  9799                           ; switch strategies available:
  9800                           ; Name         Instructions Cycles
  9801                           ; simple_byte            4     3 (average)
  9802                           ;	Chosen strategy is simple_byte
  9803   002C64  5026               	movf	??_vfpfcnvrt^0,w,c
  9804   002C66  0A30               	xorlw	48	; case 48
  9805   002C68  B4D8               	btfsc	status,2,c
  9806   002C6A  EF12  F016         	goto	l6130
  9807   002C6E  EF1A  F016         	goto	l6134
  9808   002C72                     l6140:
  9809                           
  9810                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9811   002C72  502C               	movf	vfpfcnvrt@done^0,w,c
  9812   002C74  B4D8               	btfsc	status,2,c
  9813   002C76  EF3F  F016         	goto	u5941
  9814   002C7A  EF41  F016         	goto	u5940
  9815   002C7E                     u5941:
  9816   002C7E  EF1E  F016         	goto	l6138
  9817   002C82                     u5940:
  9818   002C82                     
  9819                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9820   002C82  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9821   002C86  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9822   002C8A  ECE4  F01C         	call	_read_prec_or_width	;wreg free
  9823   002C8E  C008  F0CA         	movff	?_read_prec_or_width,_width
  9824   002C92  C009  F0CB         	movff	?_read_prec_or_width+1,_width+1
  9825   002C96                     
  9826                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9827   002C96  0100               	movlb	0	; () banked
  9828   002C98  BFCB               	btfsc	(_width+1)& (0+255),7,b
  9829   002C9A  EF53  F016         	goto	u5950
  9830   002C9E  EF51  F016         	goto	u5951
  9831   002CA2                     u5951:
  9832   002CA2  EF58  F016         	goto	l6148
  9833   002CA6                     u5950:
  9834   002CA6                     
  9835                           ; BSR set to: 0
  9836                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9837   002CA6  81CE               	bsf	_flags& (0+255),0,b
  9838                           
  9839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9840   002CA8  6DCA               	negf	_width& (0+255),b
  9841   002CAA  1FCB               	comf	(_width+1)& (0+255),f,b
  9842   002CAC  B0D8               	btfsc	status,0,c
  9843   002CAE  2BCB               	incf	(_width+1)& (0+255),f,b
  9844   002CB0                     l6148:
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9848   002CB0  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9849   002CB2  6ED9               	movwf	fsr2l,c
  9850   002CB4  6ADA               	clrf	fsr2h,c
  9851   002CB6  50DF               	movf	indf2,w,c
  9852   002CB8  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9853   002CBA                     
  9854                           ; BSR set to: 0
  9855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9856   002CBA  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9857   002CBE                     	if	1	;There is more than 1 active tblptr byte
  9858   002CBE  0E0E               	movlw	high __smallconst
  9859   002CC0  6EF7               	movwf	tblptrh,c
  9860   002CC2                     	endif
  9861   002CC2                     	if	0	;tblptru may be non-zero
  9862   002CC2                     	endif
  9863   002CC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9864   002CC2  0E00               	movlw	low (__smallconst shr (0+16))
  9865   002CC4  6EF8               	movwf	tblptru,c
  9866   002CC6                     	endif
  9867   002CC6  0008               	tblrd		*
  9868   002CC8  50F5               	movf	tablat,w,c
  9869   002CCA  0A64               	xorlw	100
  9870   002CCC  B4D8               	btfsc	status,2,c
  9871   002CCE  EF6B  F016         	goto	u5961
  9872   002CD2  EF6D  F016         	goto	u5960
  9873   002CD6                     u5961:
  9874   002CD6  EF7D  F016         	goto	l6154
  9875   002CDA                     u5960:
  9876   002CDA                     
  9877                           ; BSR set to: 0
  9878   002CDA  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9879   002CDE                     	if	1	;There is more than 1 active tblptr byte
  9880   002CDE  0E0E               	movlw	high __smallconst
  9881   002CE0  6EF7               	movwf	tblptrh,c
  9882   002CE2                     	endif
  9883   002CE2                     	if	0	;tblptru may be non-zero
  9884   002CE2                     	endif
  9885   002CE2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9886   002CE2  0E00               	movlw	low (__smallconst shr (0+16))
  9887   002CE4  6EF8               	movwf	tblptru,c
  9888   002CE6                     	endif
  9889   002CE6  0008               	tblrd		*
  9890   002CE8  50F5               	movf	tablat,w,c
  9891   002CEA  0A69               	xorlw	105
  9892   002CEC  A4D8               	btfss	status,2,c
  9893   002CEE  EF7B  F016         	goto	u5971
  9894   002CF2  EF7D  F016         	goto	u5970
  9895   002CF6                     u5971:
  9896   002CF6  EF98  F016         	goto	l6162
  9897   002CFA                     u5970:
  9898   002CFA                     l6154:
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9902   002CFA  5025               	movf	vfpfcnvrt@ap^0,w,c
  9903   002CFC  6ED9               	movwf	fsr2l,c
  9904   002CFE  6ADA               	clrf	fsr2h,c
  9905   002D00  0E02               	movlw	2
  9906   002D02  26DF               	addwf	indf2,f,c
  9907   002D04  5CDF               	subwf	indf2,w,c
  9908   002D06  6ED9               	movwf	fsr2l,c
  9909   002D08  6ADA               	clrf	fsr2h,c
  9910   002D0A  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9911   002D0E  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9912   002D12                     
  9913                           ; BSR set to: 0
  9914                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9915   002D12  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9916   002D14  6ED9               	movwf	fsr2l,c
  9917   002D16  6ADA               	clrf	fsr2h,c
  9918   002D18  282D               	incf	vfpfcnvrt@cp^0,w,c
  9919   002D1A  6EDF               	movwf	indf2,c
  9920   002D1C                     
  9921                           ; BSR set to: 0
  9922                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9923   002D1C  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9924   002D20  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9925   002D24  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9926   002D28  ECB2  F016         	call	_dtoa	;wreg free
  9927   002D2C  EFB1  F016         	goto	l1476
  9928   002D30                     l6162:
  9929                           
  9930                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9931   002D30  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9932   002D32  6ED9               	movwf	fsr2l,c
  9933   002D34  6ADA               	clrf	fsr2h,c
  9934   002D36  2ADF               	incf	indf2,f,c
  9935   002D38  EFB1  F016         	goto	l1476
  9936   002D3C                     l6166:
  9937                           
  9938                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9939   002D3C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9940   002D3E  6ED9               	movwf	fsr2l,c
  9941   002D40  6ADA               	clrf	fsr2h,c
  9942   002D42  CFDF FFF6          	movff	indf2,tblptrl
  9943   002D46                     	if	1	;There is more than 1 active tblptr byte
  9944   002D46  0E0E               	movlw	high __smallconst
  9945   002D48  6EF7               	movwf	tblptrh,c
  9946   002D4A                     	endif
  9947   002D4A                     	if	0	;tblptru may be non-zero
  9948   002D4A                     	endif
  9949   002D4A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9950   002D4A  0E00               	movlw	low (__smallconst shr (0+16))
  9951   002D4C  6EF8               	movwf	tblptru,c
  9952   002D4E                     	endif
  9953   002D4E  0008               	tblrd		*
  9954   002D50  50F5               	movf	tablat,w,c
  9955   002D52  6E02               	movwf	fputc@c^0,c
  9956   002D54  6A03               	clrf	(fputc@c+1)^0,c
  9957   002D56  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9958   002D5A  EC90  F01D         	call	_fputc	;wreg free
  9959   002D5E  EF98  F016         	goto	l6162
  9960   002D62                     l1476:
  9961   002D62  0012               	return		;funcret
  9962   002D64                     __end_of_vfpfcnvrt:
  9963                           	callstack 0
  9964                           
  9965 ;; *************** function _read_prec_or_width *****************
  9966 ;; Defined at:
  9967 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9970 ;;		 -> vfprintf@cfmt(1), 
  9971 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9972 ;;		 -> sprintf@ap(1), 
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;  c               1    9[COMRAM] unsigned char 
  9975 ;;  n               2   10[COMRAM] int 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  2    7[COMRAM] int 
  9978 ;; Registers used:
  9979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9988 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9989 ;;Total ram usage:        5 bytes
  9990 ;; Hardware stack levels used: 1
  9991 ;; Hardware stack levels required when called: 2
  9992 ;; This function calls:
  9993 ;;		___wmul
  9994 ;; This function is called by:
  9995 ;;		_vfpfcnvrt
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text52
 10000   0039C8                     __ptext52:
 10001                           	callstack 0
 10002   0039C8                     _read_prec_or_width:
 10003                           	callstack 24
 10004   0039C8                     
 10005                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10006   0039C8  0E00               	movlw	0
 10007   0039CA  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10008   0039CC  0E00               	movlw	0
 10009   0039CE  6E0B               	movwf	read_prec_or_width@n^0,c
 10010   0039D0                     
 10011                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10012   0039D0  5008               	movf	read_prec_or_width@fmt^0,w,c
 10013   0039D2  6ED9               	movwf	fsr2l,c
 10014   0039D4  6ADA               	clrf	fsr2h,c
 10015   0039D6  CFDF FFF6          	movff	indf2,tblptrl
 10016   0039DA                     	if	1	;There is more than 1 active tblptr byte
 10017   0039DA  0E0E               	movlw	high __smallconst
 10018   0039DC  6EF7               	movwf	tblptrh,c
 10019   0039DE                     	endif
 10020   0039DE                     	if	0	;tblptru may be non-zero
 10021   0039DE                     	endif
 10022   0039DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10023   0039DE  0E00               	movlw	low (__smallconst shr (0+16))
 10024   0039E0  6EF8               	movwf	tblptru,c
 10025   0039E2                     	endif
 10026   0039E2  0008               	tblrd		*
 10027   0039E4  50F5               	movf	tablat,w,c
 10028   0039E6  0A2A               	xorlw	42
 10029   0039E8  A4D8               	btfss	status,2,c
 10030   0039EA  EFF9  F01C         	goto	u5071
 10031   0039EE  EFFB  F01C         	goto	u5070
 10032   0039F2                     u5071:
 10033   0039F2  EF21  F01D         	goto	l5604
 10034   0039F6                     u5070:
 10035   0039F6                     
 10036                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10037   0039F6  5008               	movf	read_prec_or_width@fmt^0,w,c
 10038   0039F8  6ED9               	movwf	fsr2l,c
 10039   0039FA  6ADA               	clrf	fsr2h,c
 10040   0039FC  2ADF               	incf	indf2,f,c
 10041   0039FE                     
 10042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10043   0039FE  5009               	movf	read_prec_or_width@ap^0,w,c
 10044   003A00  6ED9               	movwf	fsr2l,c
 10045   003A02  6ADA               	clrf	fsr2h,c
 10046   003A04  0E02               	movlw	2
 10047   003A06  26DF               	addwf	indf2,f,c
 10048   003A08  5CDF               	subwf	indf2,w,c
 10049   003A0A  6ED9               	movwf	fsr2l,c
 10050   003A0C  6ADA               	clrf	fsr2h,c
 10051   003A0E  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10052   003A12  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10053                           
 10054                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10055   003A16  EF36  F01D         	goto	l1457
 10056   003A1A                     l5600:
 10057                           
 10058                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10059   003A1A  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10060   003A1E  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10061   003A22  0E00               	movlw	0
 10062   003A24  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10063   003A26  0E0A               	movlw	10
 10064   003A28  6E04               	movwf	___wmul@multiplicand^0,c
 10065   003A2A  EC8E  F023         	call	___wmul	;wreg free
 10066   003A2E  500A               	movf	read_prec_or_width@c^0,w,c
 10067   003A30  2402               	addwf	?___wmul^0,w,c
 10068   003A32  6E0B               	movwf	read_prec_or_width@n^0,c
 10069   003A34  0E00               	movlw	0
 10070   003A36  2003               	addwfc	(?___wmul+1)^0,w,c
 10071   003A38  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10072   003A3A                     
 10073                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10074   003A3A  5008               	movf	read_prec_or_width@fmt^0,w,c
 10075   003A3C  6ED9               	movwf	fsr2l,c
 10076   003A3E  6ADA               	clrf	fsr2h,c
 10077   003A40  2ADF               	incf	indf2,f,c
 10078   003A42                     l5604:
 10079                           
 10080                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10081   003A42  5008               	movf	read_prec_or_width@fmt^0,w,c
 10082   003A44  6ED9               	movwf	fsr2l,c
 10083   003A46  6ADA               	clrf	fsr2h,c
 10084   003A48  CFDF FFF6          	movff	indf2,tblptrl
 10085   003A4C                     	if	1	;There is more than 1 active tblptr byte
 10086   003A4C  0E0E               	movlw	high __smallconst
 10087   003A4E  6EF7               	movwf	tblptrh,c
 10088   003A50                     	endif
 10089   003A50                     	if	0	;tblptru may be non-zero
 10090   003A50                     	endif
 10091   003A50                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10092   003A50  0E00               	movlw	low (__smallconst shr (0+16))
 10093   003A52  6EF8               	movwf	tblptru,c
 10094   003A54                     	endif
 10095   003A54  0008               	tblrd		*
 10096   003A56  50F5               	movf	tablat,w,c
 10097   003A58  0FD0               	addlw	208
 10098   003A5A  6E0A               	movwf	read_prec_or_width@c^0,c
 10099   003A5C  0E09               	movlw	9
 10100   003A5E  640A               	cpfsgt	read_prec_or_width@c^0,c
 10101   003A60  EF34  F01D         	goto	u5081
 10102   003A64  EF36  F01D         	goto	u5080
 10103   003A68                     u5081:
 10104   003A68  EF0D  F01D         	goto	l5600
 10105   003A6C                     u5080:
 10106   003A6C                     l1457:
 10107                           
 10108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10109   003A6C  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10110   003A70  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10111   003A74  0012               	return		;funcret
 10112   003A76                     __end_of_read_prec_or_width:
 10113                           	callstack 0
 10114                           
 10115 ;; *************** function ___wmul *****************
 10116 ;; Defined at:
 10117 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  multiplier      2    1[COMRAM] unsigned int 
 10120 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  product         2    5[COMRAM] unsigned int 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  2    1[COMRAM] unsigned int 
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0, prodl, prodh
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10135 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10136 ;;Total ram usage:        6 bytes
 10137 ;; Hardware stack levels used: 1
 10138 ;; Hardware stack levels required when called: 1
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		_main
 10143 ;;		_setMotorPWM
 10144 ;;		_read_prec_or_width
 10145 ;;		_ADC2String
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           	psect	text53
 10150   00471C                     __ptext53:
 10151                           	callstack 0
 10152   00471C                     ___wmul:
 10153                           	callstack 27
 10154   00471C  5002               	movf	___wmul@multiplier^0,w,c
 10155   00471E  0204               	mulwf	___wmul@multiplicand^0,c
 10156   004720  CFF3 F006          	movff	prodl,___wmul@product
 10157   004724  CFF4 F007          	movff	prodh,___wmul@product+1
 10158   004728  5002               	movf	___wmul@multiplier^0,w,c
 10159   00472A  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10160   00472C  50F3               	movf	243,w,c
 10161   00472E  2607               	addwf	(___wmul@product+1)^0,f,c
 10162   004730  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10163   004732  0204               	mulwf	___wmul@multiplicand^0,c
 10164   004734  50F3               	movf	243,w,c
 10165   004736  2607               	addwf	(___wmul@product+1)^0,f,c
 10166   004738  C006  F002         	movff	___wmul@product,?___wmul
 10167   00473C  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10168   004740  0012               	return		;funcret
 10169   004742                     __end_of___wmul:
 10170                           	callstack 0
 10171                           
 10172 ;; *************** function _dtoa *****************
 10173 ;; Defined at:
 10174 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10177 ;;		 -> sprintf@f(12), 
 10178 ;;  d               2   24[COMRAM] int 
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;  i               2   32[COMRAM] int 
 10181 ;;  w               2   29[COMRAM] int 
 10182 ;;  s               1   31[COMRAM] unsigned char 
 10183 ;;  p               1   28[COMRAM] _Bool 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  1    wreg      void 
 10186 ;; Registers used:
 10187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10193 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10194 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10196 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10197 ;;Total ram usage:       11 bytes
 10198 ;; Hardware stack levels used: 1
 10199 ;; Hardware stack levels required when called: 5
 10200 ;; This function calls:
 10201 ;;		___awdiv
 10202 ;;		___awmod
 10203 ;;		_abs
 10204 ;;		_pad
 10205 ;; This function is called by:
 10206 ;;		_vfpfcnvrt
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text54
 10211   002D64                     __ptext54:
 10212                           	callstack 0
 10213   002D64                     _dtoa:
 10214                           	callstack 21
 10215   002D64                     
 10216                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10217   002D64  0E01               	movlw	1
 10218   002D66  6E1D               	movwf	dtoa@p^0,c
 10219   002D68                     
 10220                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10221   002D68  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10222   002D6A  EFB9  F016         	goto	u4971
 10223   002D6E  EFBC  F016         	goto	u4970
 10224   002D72                     u4971:
 10225   002D72  0E01               	movlw	1
 10226   002D74  EFBD  F016         	goto	u4980
 10227   002D78                     u4970:
 10228   002D78  0E00               	movlw	0
 10229   002D7A                     u4980:
 10230   002D7A  6E20               	movwf	dtoa@s^0,c
 10231   002D7C                     
 10232                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10233   002D7C  C0CA  F01E         	movff	_width,dtoa@w
 10234   002D80  C0CB  F01F         	movff	_width+1,dtoa@w+1
 10235   002D84                     
 10236                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10237   002D84  5020               	movf	dtoa@s^0,w,c
 10238   002D86  B4D8               	btfsc	status,2,c
 10239   002D88  EFC8  F016         	goto	u4991
 10240   002D8C  EFCA  F016         	goto	u4990
 10241   002D90                     u4991:
 10242   002D90  EFE1  F016         	goto	l1440
 10243   002D94                     u4990:
 10244   002D94                     
 10245                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10246   002D94  061E               	decf	dtoa@w^0,f,c
 10247   002D96  A0D8               	btfss	status,0,c
 10248   002D98  061F               	decf	(dtoa@w+1)^0,f,c
 10249   002D9A                     
 10250                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10251   002D9A  5020               	movf	dtoa@s^0,w,c
 10252   002D9C  A4D8               	btfss	status,2,c
 10253   002D9E  EFD3  F016         	goto	u5001
 10254   002DA2  EFD5  F016         	goto	u5000
 10255   002DA6                     u5001:
 10256   002DA6  EFDB  F016         	goto	l5556
 10257   002DAA                     u5000:
 10258   002DAA  0E00               	movlw	0
 10259   002DAC  6E1C               	movwf	(_dtoa$3087+1)^0,c
 10260   002DAE  0E2B               	movlw	43
 10261   002DB0  6E1B               	movwf	_dtoa$3087^0,c
 10262   002DB2  EFDF  F016         	goto	l5558
 10263   002DB6                     l5556:
 10264   002DB6  0E00               	movlw	0
 10265   002DB8  6E1C               	movwf	(_dtoa$3087+1)^0,c
 10266   002DBA  0E2D               	movlw	45
 10267   002DBC  6E1B               	movwf	_dtoa$3087^0,c
 10268   002DBE                     l5558:
 10269   002DBE  C01B  F020         	movff	_dtoa$3087,dtoa@s
 10270   002DC2                     l1440:
 10271                           
 10272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10273   002DC2  0E00               	movlw	0
 10274   002DC4  6E22               	movwf	(dtoa@i+1)^0,c
 10275   002DC6  0E1F               	movlw	31
 10276   002DC8  6E21               	movwf	dtoa@i^0,c
 10277   002DCA                     
 10278                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10279   002DCA  0E00               	movlw	0
 10280   002DCC  0101               	movlb	1	; () banked
 10281   002DCE  6FA1               	movwf	(_dbuf+31)& (0+255),b
 10282                           
 10283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10284   002DD0  EF19  F017         	goto	l5572
 10285   002DD4                     l5562:
 10286                           
 10287                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10288   002DD4  0621               	decf	dtoa@i^0,f,c
 10289   002DD6  A0D8               	btfss	status,0,c
 10290   002DD8  0622               	decf	(dtoa@i+1)^0,f,c
 10291   002DDA                     
 10292                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10293   002DDA  0E82               	movlw	low _dbuf
 10294   002DDC  2421               	addwf	dtoa@i^0,w,c
 10295   002DDE  6ED9               	movwf	fsr2l,c
 10296   002DE0  0E01               	movlw	high _dbuf
 10297   002DE2  2022               	addwfc	(dtoa@i+1)^0,w,c
 10298   002DE4  6EDA               	movwf	fsr2h,c
 10299   002DE6  C019  F002         	movff	dtoa@d,___awmod@dividend
 10300   002DEA  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10301   002DEE  0E00               	movlw	0
 10302   002DF0  6E05               	movwf	(___awmod@divisor+1)^0,c
 10303   002DF2  0E0A               	movlw	10
 10304   002DF4  6E04               	movwf	___awmod@divisor^0,c
 10305   002DF6  EC8C  F01C         	call	___awmod	;wreg free
 10306   002DFA  C002  F008         	movff	?___awmod,abs@a
 10307   002DFE  C003  F009         	movff	?___awmod+1,abs@a+1
 10308   002E02  ECBE  F021         	call	_abs	;wreg free
 10309   002E06  5008               	movf	?_abs^0,w,c
 10310   002E08  0F30               	addlw	48
 10311   002E0A  6EDF               	movwf	indf2,c
 10312   002E0C                     
 10313                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10314   002E0C  0E00               	movlw	0
 10315   002E0E  6E1D               	movwf	dtoa@p^0,c
 10316   002E10                     
 10317                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10318   002E10  061E               	decf	dtoa@w^0,f,c
 10319   002E12  A0D8               	btfss	status,0,c
 10320   002E14  061F               	decf	(dtoa@w+1)^0,f,c
 10321   002E16                     
 10322                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10323   002E16  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10324   002E1A  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10325   002E1E  0E00               	movlw	0
 10326   002E20  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10327   002E22  0E0A               	movlw	10
 10328   002E24  6E04               	movwf	___awdiv@divisor^0,c
 10329   002E26  EC2A  F01C         	call	___awdiv	;wreg free
 10330   002E2A  C002  F019         	movff	?___awdiv,dtoa@d
 10331   002E2E  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10332   002E32                     l5572:
 10333                           
 10334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10335   002E32  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10336   002E34  EF24  F017         	goto	u5011
 10337   002E38  5022               	movf	(dtoa@i+1)^0,w,c
 10338   002E3A  E108               	bnz	u5010
 10339   002E3C  0421               	decf	dtoa@i^0,w,c
 10340   002E3E  A0D8               	btfss	status,0,c
 10341   002E40  EF24  F017         	goto	u5011
 10342   002E44  EF26  F017         	goto	u5010
 10343   002E48                     u5011:
 10344   002E48  EF4C  F017         	goto	l5582
 10345   002E4C                     u5010:
 10346   002E4C  5019               	movf	dtoa@d^0,w,c
 10347   002E4E  101A               	iorwf	(dtoa@d+1)^0,w,c
 10348   002E50  A4D8               	btfss	status,2,c
 10349   002E52  EF2D  F017         	goto	u5021
 10350   002E56  EF2F  F017         	goto	u5020
 10351   002E5A                     u5021:
 10352   002E5A  EFEA  F016         	goto	l5562
 10353   002E5E                     u5020:
 10354   002E5E  501D               	movf	dtoa@p^0,w,c
 10355   002E60  A4D8               	btfss	status,2,c
 10356   002E62  EF35  F017         	goto	u5031
 10357   002E66  EF37  F017         	goto	u5030
 10358   002E6A                     u5031:
 10359   002E6A  EFEA  F016         	goto	l5562
 10360   002E6E                     u5030:
 10361   002E6E  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10362   002E70  EF42  F017         	goto	u5041
 10363   002E74  501F               	movf	(dtoa@w+1)^0,w,c
 10364   002E76  E108               	bnz	u5040
 10365   002E78  041E               	decf	dtoa@w^0,w,c
 10366   002E7A  A0D8               	btfss	status,0,c
 10367   002E7C  EF42  F017         	goto	u5041
 10368   002E80  EF44  F017         	goto	u5040
 10369   002E84                     u5041:
 10370   002E84  EF4C  F017         	goto	l5582
 10371   002E88                     u5040:
 10372   002E88  0100               	movlb	0	; () banked
 10373   002E8A  B3CE               	btfsc	_flags& (0+255),1,b
 10374   002E8C  EF4A  F017         	goto	u5051
 10375   002E90  EF4C  F017         	goto	u5050
 10376   002E94                     u5051:
 10377   002E94  EFEA  F016         	goto	l5562
 10378   002E98                     u5050:
 10379   002E98                     l5582:
 10380                           
 10381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10382   002E98  5020               	movf	dtoa@s^0,w,c
 10383   002E9A  B4D8               	btfsc	status,2,c
 10384   002E9C  EF52  F017         	goto	u5061
 10385   002EA0  EF54  F017         	goto	u5060
 10386   002EA4                     u5061:
 10387   002EA4  EF5F  F017         	goto	l5588
 10388   002EA8                     u5060:
 10389   002EA8                     
 10390                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10391   002EA8  0621               	decf	dtoa@i^0,f,c
 10392   002EAA  A0D8               	btfss	status,0,c
 10393   002EAC  0622               	decf	(dtoa@i+1)^0,f,c
 10394   002EAE                     
 10395                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10396   002EAE  0E82               	movlw	low _dbuf
 10397   002EB0  2421               	addwf	dtoa@i^0,w,c
 10398   002EB2  6ED9               	movwf	fsr2l,c
 10399   002EB4  0E01               	movlw	high _dbuf
 10400   002EB6  2022               	addwfc	(dtoa@i+1)^0,w,c
 10401   002EB8  6EDA               	movwf	fsr2h,c
 10402   002EBA  C020  FFDF         	movff	dtoa@s,indf2
 10403   002EBE                     l5588:
 10404                           
 10405                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10406   002EBE  C018  F010         	movff	dtoa@fp,pad@fp
 10407   002EC2  0E82               	movlw	low _dbuf
 10408   002EC4  2421               	addwf	dtoa@i^0,w,c
 10409   002EC6  6E11               	movwf	pad@buf^0,c
 10410   002EC8  0E01               	movlw	high _dbuf
 10411   002ECA  2022               	addwfc	(dtoa@i+1)^0,w,c
 10412   002ECC  6E12               	movwf	(pad@buf+1)^0,c
 10413   002ECE  C01E  F013         	movff	dtoa@w,pad@p
 10414   002ED2  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10415   002ED6  ECE5  F01D         	call	_pad	;wreg free
 10416   002EDA  0012               	return		;funcret
 10417   002EDC                     __end_of_dtoa:
 10418                           	callstack 0
 10419                           
 10420 ;; *************** function _pad *****************
 10421 ;; Defined at:
 10422 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10425 ;;		 -> sprintf@f(12), 
 10426 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10427 ;;		 -> dbuf(32), 
 10428 ;;  p               2   18[COMRAM] int 
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;  i               2   21[COMRAM] int 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10440 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10443 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10444 ;;Total ram usage:        8 bytes
 10445 ;; Hardware stack levels used: 1
 10446 ;; Hardware stack levels required when called: 4
 10447 ;; This function calls:
 10448 ;;		_fputc
 10449 ;;		_fputs
 10450 ;; This function is called by:
 10451 ;;		_dtoa
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           	psect	text55
 10456   003BCA                     __ptext55:
 10457                           	callstack 0
 10458   003BCA                     _pad:
 10459                           	callstack 21
 10460   003BCA                     
 10461                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10462   003BCA  0100               	movlb	0	; () banked
 10463   003BCC  A1CE               	btfss	_flags& (0+255),0,b
 10464   003BCE  EFEB  F01D         	goto	u4901
 10465   003BD2  EFED  F01D         	goto	u4900
 10466   003BD6                     u4901:
 10467   003BD6  EFF5  F01D         	goto	l5510
 10468   003BDA                     u4900:
 10469   003BDA                     
 10470                           ; BSR set to: 0
 10471                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10472   003BDA  C011  F00A         	movff	pad@buf,fputs@s
 10473   003BDE  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10474   003BE2  C010  F00C         	movff	pad@fp,fputs@fp
 10475   003BE6  EC31  F021         	call	_fputs	;wreg free
 10476   003BEA                     l5510:
 10477                           
 10478                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10479   003BEA  BE14               	btfsc	(pad@p+1)^0,7,c
 10480   003BEC  EFFC  F01D         	goto	u4910
 10481   003BF0  EFFA  F01D         	goto	u4911
 10482   003BF4                     u4911:
 10483   003BF4  EF00  F01E         	goto	l1432
 10484   003BF8                     u4910:
 10485   003BF8                     
 10486                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10487   003BF8  0E00               	movlw	0
 10488   003BFA  6E14               	movwf	(pad@p+1)^0,c
 10489   003BFC  0E00               	movlw	0
 10490   003BFE  6E13               	movwf	pad@p^0,c
 10491   003C00                     l1432:
 10492                           
 10493                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10494   003C00  0E00               	movlw	0
 10495   003C02  6E17               	movwf	(pad@i+1)^0,c
 10496   003C04  0E00               	movlw	0
 10497   003C06  6E16               	movwf	pad@i^0,c
 10498                           
 10499                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10500   003C08  EF10  F01E         	goto	l5518
 10501   003C0C                     l5514:
 10502                           
 10503                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10504   003C0C  0E00               	movlw	0
 10505   003C0E  6E03               	movwf	(fputc@c+1)^0,c
 10506   003C10  0E20               	movlw	32
 10507   003C12  6E02               	movwf	fputc@c^0,c
 10508   003C14  C010  F004         	movff	pad@fp,fputc@fp
 10509   003C18  EC90  F01D         	call	_fputc	;wreg free
 10510   003C1C                     
 10511                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10512   003C1C  4A16               	infsnz	pad@i^0,f,c
 10513   003C1E  2A17               	incf	(pad@i+1)^0,f,c
 10514   003C20                     l5518:
 10515                           
 10516                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10517   003C20  5013               	movf	pad@p^0,w,c
 10518   003C22  5C16               	subwf	pad@i^0,w,c
 10519   003C24  5017               	movf	(pad@i+1)^0,w,c
 10520   003C26  0A80               	xorlw	128
 10521   003C28  6E15               	movwf	??_pad^0,c
 10522   003C2A  5014               	movf	(pad@p+1)^0,w,c
 10523   003C2C  0A80               	xorlw	128
 10524   003C2E  5815               	subwfb	??_pad^0,w,c
 10525   003C30  A0D8               	btfss	status,0,c
 10526   003C32  EF1D  F01E         	goto	u4921
 10527   003C36  EF1F  F01E         	goto	u4920
 10528   003C3A                     u4921:
 10529   003C3A  EF06  F01E         	goto	l5514
 10530   003C3E                     u4920:
 10531   003C3E                     
 10532                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10533   003C3E  0100               	movlb	0	; () banked
 10534   003C40  B1CE               	btfsc	_flags& (0+255),0,b
 10535   003C42  EF25  F01E         	goto	u4931
 10536   003C46  EF27  F01E         	goto	u4930
 10537   003C4A                     u4931:
 10538   003C4A  EF2F  F01E         	goto	l1437
 10539   003C4E                     u4930:
 10540   003C4E                     
 10541                           ; BSR set to: 0
 10542                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10543   003C4E  C011  F00A         	movff	pad@buf,fputs@s
 10544   003C52  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10545   003C56  C010  F00C         	movff	pad@fp,fputs@fp
 10546   003C5A  EC31  F021         	call	_fputs	;wreg free
 10547   003C5E                     l1437:
 10548   003C5E  0012               	return		;funcret
 10549   003C60                     __end_of_pad:
 10550                           	callstack 0
 10551                           
 10552 ;; *************** function _fputs *****************
 10553 ;; Defined at:
 10554 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10555 ;; Parameters:    Size  Location     Type
 10556 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10557 ;;		 -> dbuf(32), 
 10558 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10559 ;;		 -> sprintf@f(12), 
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;  i               2   13[COMRAM] int 
 10562 ;;  c               1   12[COMRAM] unsigned char 
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  2    9[COMRAM] int 
 10565 ;; Registers used:
 10566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10567 ;; Tracked objects:
 10568 ;;		On entry : 0/0
 10569 ;;		On exit  : 0/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10572 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10573 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10575 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10576 ;;Total ram usage:        6 bytes
 10577 ;; Hardware stack levels used: 1
 10578 ;; Hardware stack levels required when called: 3
 10579 ;; This function calls:
 10580 ;;		_fputc
 10581 ;; This function is called by:
 10582 ;;		_pad
 10583 ;; This function uses a non-reentrant model
 10584 ;;
 10585                           
 10586                           	psect	text56
 10587   004262                     __ptext56:
 10588                           	callstack 0
 10589   004262                     _fputs:
 10590                           	callstack 21
 10591   004262  0E00               	movlw	0
 10592   004264  6E0F               	movwf	(fputs@i+1)^0,c
 10593   004266  0E00               	movlw	0
 10594   004268  6E0E               	movwf	fputs@i^0,c
 10595   00426A  EF40  F021         	goto	l5396
 10596   00426E                     l5392:
 10597   00426E  C00D  F002         	movff	fputs@c,fputc@c
 10598   004272  6A03               	clrf	(fputc@c+1)^0,c
 10599   004274  C00C  F004         	movff	fputs@fp,fputc@fp
 10600   004278  EC90  F01D         	call	_fputc	;wreg free
 10601   00427C  4A0E               	infsnz	fputs@i^0,f,c
 10602   00427E  2A0F               	incf	(fputs@i+1)^0,f,c
 10603   004280                     l5396:
 10604   004280  500E               	movf	fputs@i^0,w,c
 10605   004282  240A               	addwf	fputs@s^0,w,c
 10606   004284  6ED9               	movwf	fsr2l,c
 10607   004286  500F               	movf	(fputs@i+1)^0,w,c
 10608   004288  200B               	addwfc	(fputs@s+1)^0,w,c
 10609   00428A  6EDA               	movwf	fsr2h,c
 10610   00428C  50DF               	movf	indf2,w,c
 10611   00428E  6E0D               	movwf	fputs@c^0,c
 10612   004290  500D               	movf	fputs@c^0,w,c
 10613   004292  A4D8               	btfss	status,2,c
 10614   004294  EF4E  F021         	goto	u4741
 10615   004298  EF50  F021         	goto	u4740
 10616   00429C                     u4741:
 10617   00429C  EF37  F021         	goto	l5392
 10618   0042A0                     u4740:
 10619   0042A0  0012               	return		;funcret
 10620   0042A2                     __end_of_fputs:
 10621                           	callstack 0
 10622                           
 10623 ;; *************** function _fputc *****************
 10624 ;; Defined at:
 10625 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  c               2    1[COMRAM] int 
 10628 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10629 ;;		 -> sprintf@f(12), 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;		None
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  2    1[COMRAM] int 
 10634 ;; Registers used:
 10635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10636 ;; Tracked objects:
 10637 ;;		On entry : 0/0
 10638 ;;		On exit  : 0/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10641 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10643 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10644 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10645 ;;Total ram usage:        8 bytes
 10646 ;; Hardware stack levels used: 1
 10647 ;; Hardware stack levels required when called: 2
 10648 ;; This function calls:
 10649 ;;		_putch
 10650 ;; This function is called by:
 10651 ;;		_pad
 10652 ;;		_vfpfcnvrt
 10653 ;;		_fputs
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           	psect	text57
 10658   003B20                     __ptext57:
 10659                           	callstack 0
 10660   003B20                     _fputc:
 10661                           	callstack 24
 10662   003B20  5004               	movf	fputc@fp^0,w,c
 10663   003B22  B4D8               	btfsc	status,2,c
 10664   003B24  EF96  F01D         	goto	u4701
 10665   003B28  EF98  F01D         	goto	u4700
 10666   003B2C                     u4701:
 10667   003B2C  EFA0  F01D         	goto	l5380
 10668   003B30                     u4700:
 10669   003B30  5004               	movf	fputc@fp^0,w,c
 10670   003B32  A4D8               	btfss	status,2,c
 10671   003B34  EF9E  F01D         	goto	u4711
 10672   003B38  EFA0  F01D         	goto	u4710
 10673   003B3C                     u4711:
 10674   003B3C  EFA5  F01D         	goto	l5382
 10675   003B40                     u4710:
 10676   003B40                     l5380:
 10677   003B40  5002               	movf	fputc@c^0,w,c
 10678   003B42  ECFD  F023         	call	_putch
 10679   003B46  EFE4  F01D         	goto	l1501
 10680   003B4A                     l5382:
 10681   003B4A  5004               	movf	fputc@fp^0,w,c
 10682   003B4C  6ED9               	movwf	fsr2l,c
 10683   003B4E  6ADA               	clrf	fsr2h,c
 10684   003B50  0E0A               	movlw	10
 10685   003B52  26D9               	addwf	fsr2l,f,c
 10686   003B54  50DE               	movf	postinc2,w,c
 10687   003B56  10DE               	iorwf	postinc2,w,c
 10688   003B58  B4D8               	btfsc	status,2,c
 10689   003B5A  EFB1  F01D         	goto	u4721
 10690   003B5E  EFB3  F01D         	goto	u4720
 10691   003B62                     u4721:
 10692   003B62  EFCC  F01D         	goto	l5386
 10693   003B66                     u4720:
 10694   003B66  5004               	movf	fputc@fp^0,w,c
 10695   003B68  6ED9               	movwf	fsr2l,c
 10696   003B6A  6ADA               	clrf	fsr2h,c
 10697   003B6C  0E0A               	movlw	10
 10698   003B6E  26D9               	addwf	fsr2l,f,c
 10699   003B70  5004               	movf	fputc@fp^0,w,c
 10700   003B72  6EE1               	movwf	fsr1l,c
 10701   003B74  6AE2               	clrf	fsr1h,c
 10702   003B76  0E03               	movlw	3
 10703   003B78  26E1               	addwf	fsr1l,f,c
 10704   003B7A  50DE               	movf	postinc2,w,c
 10705   003B7C  5CE6               	subwf	postinc1,w,c
 10706   003B7E  50E6               	movf	postinc1,w,c
 10707   003B80  0A80               	xorlw	128
 10708   003B82  6E09               	movwf	(??_fputc+4)^0,c
 10709   003B84  50DE               	movf	postinc2,w,c
 10710   003B86  0A80               	xorlw	128
 10711   003B88  5809               	subwfb	(??_fputc+4)^0,w,c
 10712   003B8A  B0D8               	btfsc	status,0,c
 10713   003B8C  EFCA  F01D         	goto	u4731
 10714   003B90  EFCC  F01D         	goto	u4730
 10715   003B94                     u4731:
 10716   003B94  EFE4  F01D         	goto	l1501
 10717   003B98                     u4730:
 10718   003B98                     l5386:
 10719   003B98  5004               	movf	fputc@fp^0,w,c
 10720   003B9A  6ED9               	movwf	fsr2l,c
 10721   003B9C  6ADA               	clrf	fsr2h,c
 10722   003B9E  0E03               	movlw	3
 10723   003BA0  26D9               	addwf	fsr2l,f,c
 10724   003BA2  50DF               	movf	indf2,w,c
 10725   003BA4  6E05               	movwf	??_fputc^0,c
 10726   003BA6  5004               	movf	fputc@fp^0,w,c
 10727   003BA8  6ED9               	movwf	fsr2l,c
 10728   003BAA  6ADA               	clrf	fsr2h,c
 10729   003BAC  50DF               	movf	indf2,w,c
 10730   003BAE  2405               	addwf	??_fputc^0,w,c
 10731   003BB0  6ED9               	movwf	fsr2l,c
 10732   003BB2  6ADA               	clrf	fsr2h,c
 10733   003BB4  C002  FFDF         	movff	fputc@c,indf2
 10734   003BB8  5004               	movf	fputc@fp^0,w,c
 10735   003BBA  6ED9               	movwf	fsr2l,c
 10736   003BBC  6ADA               	clrf	fsr2h,c
 10737   003BBE  0E03               	movlw	3
 10738   003BC0  26D9               	addwf	fsr2l,f,c
 10739   003BC2  2ADE               	incf	postinc2,f,c
 10740   003BC4  0E00               	movlw	0
 10741   003BC6  22DD               	addwfc	postdec2,f,c
 10742   003BC8                     l1501:
 10743   003BC8  0012               	return		;funcret
 10744   003BCA                     __end_of_fputc:
 10745                           	callstack 0
 10746                           
 10747 ;; *************** function _putch *****************
 10748 ;; Defined at:
 10749 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  c               1    wreg     unsigned char 
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  c               1    0[COMRAM] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      void 
 10756 ;; Registers used:
 10757 ;;		wreg
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10767 ;;Total ram usage:        0 bytes
 10768 ;; Hardware stack levels used: 1
 10769 ;; Hardware stack levels required when called: 1
 10770 ;; This function calls:
 10771 ;;		Nothing
 10772 ;; This function is called by:
 10773 ;;		_fputc
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           	psect	text58
 10778   0047FA                     __ptext58:
 10779                           	callstack 0
 10780   0047FA                     _putch:
 10781                           	callstack 24
 10782   0047FA  0012               	return		;funcret
 10783   0047FC                     __end_of_putch:
 10784                           	callstack 0
 10785                           
 10786 ;; *************** function _abs *****************
 10787 ;; Defined at:
 10788 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;  a               2    7[COMRAM] int 
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;		None
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  2    7[COMRAM] int 
 10795 ;; Registers used:
 10796 ;;		wreg, status,2, status,0
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10805 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10806 ;;Total ram usage:        4 bytes
 10807 ;; Hardware stack levels used: 1
 10808 ;; Hardware stack levels required when called: 1
 10809 ;; This function calls:
 10810 ;;		Nothing
 10811 ;; This function is called by:
 10812 ;;		_dtoa
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text59
 10817   00437C                     __ptext59:
 10818                           	callstack 0
 10819   00437C                     _abs:
 10820                           	callstack 24
 10821   00437C  BE09               	btfsc	(abs@a+1)^0,7,c
 10822   00437E  EFC3  F021         	goto	u4941
 10823   004382  EFC5  F021         	goto	u4940
 10824   004386                     u4941:
 10825   004386  EFCB  F021         	goto	l1486
 10826   00438A                     u4940:
 10827   00438A  C008  F008         	movff	abs@a,?_abs
 10828   00438E  C009  F009         	movff	abs@a+1,?_abs+1
 10829   004392  EFD7  F021         	goto	l1489
 10830   004396                     l1486:
 10831   004396  C008  F00A         	movff	abs@a,??_abs
 10832   00439A  C009  F00B         	movff	abs@a+1,??_abs+1
 10833   00439E  1E0A               	comf	??_abs^0,f,c
 10834   0043A0  1E0B               	comf	(??_abs+1)^0,f,c
 10835   0043A2  4A0A               	infsnz	??_abs^0,f,c
 10836   0043A4  2A0B               	incf	(??_abs+1)^0,f,c
 10837   0043A6  C00A  F008         	movff	??_abs,?_abs
 10838   0043AA  C00B  F009         	movff	??_abs+1,?_abs+1
 10839   0043AE                     l1489:
 10840   0043AE  0012               	return		;funcret
 10841   0043B0                     __end_of_abs:
 10842                           	callstack 0
 10843                           
 10844 ;; *************** function ___awmod *****************
 10845 ;; Defined at:
 10846 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;  dividend        2    1[COMRAM] int 
 10849 ;;  divisor         2    3[COMRAM] int 
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;  sign            1    6[COMRAM] unsigned char 
 10852 ;;  counter         1    5[COMRAM] unsigned char 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  2    1[COMRAM] int 
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10866 ;;Total ram usage:        6 bytes
 10867 ;; Hardware stack levels used: 1
 10868 ;; Hardware stack levels required when called: 1
 10869 ;; This function calls:
 10870 ;;		Nothing
 10871 ;; This function is called by:
 10872 ;;		_dtoa
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           	psect	text60
 10877   003918                     __ptext60:
 10878                           	callstack 0
 10879   003918                     ___awmod:
 10880                           	callstack 24
 10881   003918  0E00               	movlw	0
 10882   00391A  6E07               	movwf	___awmod@sign^0,c
 10883   00391C  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10884   00391E  EF95  F01C         	goto	u4810
 10885   003922  EF93  F01C         	goto	u4811
 10886   003926                     u4811:
 10887   003926  EF9B  F01C         	goto	l5456
 10888   00392A                     u4810:
 10889   00392A  6C02               	negf	___awmod@dividend^0,c
 10890   00392C  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10891   00392E  B0D8               	btfsc	status,0,c
 10892   003930  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10893   003932  0E01               	movlw	1
 10894   003934  6E07               	movwf	___awmod@sign^0,c
 10895   003936                     l5456:
 10896   003936  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10897   003938  EFA2  F01C         	goto	u4820
 10898   00393C  EFA0  F01C         	goto	u4821
 10899   003940                     u4821:
 10900   003940  EFA6  F01C         	goto	l5460
 10901   003944                     u4820:
 10902   003944  6C04               	negf	___awmod@divisor^0,c
 10903   003946  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10904   003948  B0D8               	btfsc	status,0,c
 10905   00394A  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10906   00394C                     l5460:
 10907   00394C  5004               	movf	___awmod@divisor^0,w,c
 10908   00394E  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10909   003950  B4D8               	btfsc	status,2,c
 10910   003952  EFAD  F01C         	goto	u4831
 10911   003956  EFAF  F01C         	goto	u4830
 10912   00395A                     u4831:
 10913   00395A  EFD3  F01C         	goto	l5476
 10914   00395E                     u4830:
 10915   00395E  0E01               	movlw	1
 10916   003960  6E06               	movwf	___awmod@counter^0,c
 10917   003962  EFB7  F01C         	goto	l5466
 10918   003966                     l5464:
 10919   003966  90D8               	bcf	status,0,c
 10920   003968  3604               	rlcf	___awmod@divisor^0,f,c
 10921   00396A  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10922   00396C  2A06               	incf	___awmod@counter^0,f,c
 10923   00396E                     l5466:
 10924   00396E  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10925   003970  EFBC  F01C         	goto	u4841
 10926   003974  EFBE  F01C         	goto	u4840
 10927   003978                     u4841:
 10928   003978  EFB3  F01C         	goto	l5464
 10929   00397C                     u4840:
 10930   00397C                     l5468:
 10931   00397C  5004               	movf	___awmod@divisor^0,w,c
 10932   00397E  5C02               	subwf	___awmod@dividend^0,w,c
 10933   003980  5005               	movf	(___awmod@divisor+1)^0,w,c
 10934   003982  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10935   003984  A0D8               	btfss	status,0,c
 10936   003986  EFC7  F01C         	goto	u4851
 10937   00398A  EFC9  F01C         	goto	u4850
 10938   00398E                     u4851:
 10939   00398E  EFCD  F01C         	goto	l5472
 10940   003992                     u4850:
 10941   003992  5004               	movf	___awmod@divisor^0,w,c
 10942   003994  5E02               	subwf	___awmod@dividend^0,f,c
 10943   003996  5005               	movf	(___awmod@divisor+1)^0,w,c
 10944   003998  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10945   00399A                     l5472:
 10946   00399A  90D8               	bcf	status,0,c
 10947   00399C  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10948   00399E  3204               	rrcf	___awmod@divisor^0,f,c
 10949   0039A0  2E06               	decfsz	___awmod@counter^0,f,c
 10950   0039A2  EFBE  F01C         	goto	l5468
 10951   0039A6                     l5476:
 10952   0039A6  5007               	movf	___awmod@sign^0,w,c
 10953   0039A8  B4D8               	btfsc	status,2,c
 10954   0039AA  EFD9  F01C         	goto	u4861
 10955   0039AE  EFDB  F01C         	goto	u4860
 10956   0039B2                     u4861:
 10957   0039B2  EFDF  F01C         	goto	l5480
 10958   0039B6                     u4860:
 10959   0039B6  6C02               	negf	___awmod@dividend^0,c
 10960   0039B8  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10961   0039BA  B0D8               	btfsc	status,0,c
 10962   0039BC  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10963   0039BE                     l5480:
 10964   0039BE  C002  F002         	movff	___awmod@dividend,?___awmod
 10965   0039C2  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10966   0039C6  0012               	return		;funcret
 10967   0039C8                     __end_of___awmod:
 10968                           	callstack 0
 10969                           
 10970 ;; *************** function ___awdiv *****************
 10971 ;; Defined at:
 10972 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;  dividend        2    1[COMRAM] int 
 10975 ;;  divisor         2    3[COMRAM] int 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;  quotient        2    7[COMRAM] int 
 10978 ;;  sign            1    6[COMRAM] unsigned char 
 10979 ;;  counter         1    5[COMRAM] unsigned char 
 10980 ;; Return value:  Size  Location     Type
 10981 ;;                  2    1[COMRAM] int 
 10982 ;; Registers used:
 10983 ;;		wreg, status,2, status,0
 10984 ;; Tracked objects:
 10985 ;;		On entry : 0/0
 10986 ;;		On exit  : 0/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10990 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10992 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10993 ;;Total ram usage:        8 bytes
 10994 ;; Hardware stack levels used: 1
 10995 ;; Hardware stack levels required when called: 1
 10996 ;; This function calls:
 10997 ;;		Nothing
 10998 ;; This function is called by:
 10999 ;;		_dtoa
 11000 ;; This function uses a non-reentrant model
 11001 ;;
 11002                           
 11003                           	psect	text61
 11004   003854                     __ptext61:
 11005                           	callstack 0
 11006   003854                     ___awdiv:
 11007                           	callstack 24
 11008   003854  0E00               	movlw	0
 11009   003856  6E07               	movwf	___awdiv@sign^0,c
 11010   003858  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11011   00385A  EF33  F01C         	goto	u4750
 11012   00385E  EF31  F01C         	goto	u4751
 11013   003862                     u4751:
 11014   003862  EF39  F01C         	goto	l5412
 11015   003866                     u4750:
 11016   003866  6C04               	negf	___awdiv@divisor^0,c
 11017   003868  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11018   00386A  B0D8               	btfsc	status,0,c
 11019   00386C  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11020   00386E  0E01               	movlw	1
 11021   003870  6E07               	movwf	___awdiv@sign^0,c
 11022   003872                     l5412:
 11023   003872  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11024   003874  EF40  F01C         	goto	u4760
 11025   003878  EF3E  F01C         	goto	u4761
 11026   00387C                     u4761:
 11027   00387C  EF46  F01C         	goto	l5418
 11028   003880                     u4760:
 11029   003880  6C02               	negf	___awdiv@dividend^0,c
 11030   003882  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11031   003884  B0D8               	btfsc	status,0,c
 11032   003886  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11033   003888  0E01               	movlw	1
 11034   00388A  1A07               	xorwf	___awdiv@sign^0,f,c
 11035   00388C                     l5418:
 11036   00388C  0E00               	movlw	0
 11037   00388E  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11038   003890  0E00               	movlw	0
 11039   003892  6E08               	movwf	___awdiv@quotient^0,c
 11040   003894  5004               	movf	___awdiv@divisor^0,w,c
 11041   003896  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11042   003898  B4D8               	btfsc	status,2,c
 11043   00389A  EF51  F01C         	goto	u4771
 11044   00389E  EF53  F01C         	goto	u4770
 11045   0038A2                     u4771:
 11046   0038A2  EF7B  F01C         	goto	l5440
 11047   0038A6                     u4770:
 11048   0038A6  0E01               	movlw	1
 11049   0038A8  6E06               	movwf	___awdiv@counter^0,c
 11050   0038AA  EF5B  F01C         	goto	l5426
 11051   0038AE                     l5424:
 11052   0038AE  90D8               	bcf	status,0,c
 11053   0038B0  3604               	rlcf	___awdiv@divisor^0,f,c
 11054   0038B2  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11055   0038B4  2A06               	incf	___awdiv@counter^0,f,c
 11056   0038B6                     l5426:
 11057   0038B6  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11058   0038B8  EF60  F01C         	goto	u4781
 11059   0038BC  EF62  F01C         	goto	u4780
 11060   0038C0                     u4781:
 11061   0038C0  EF57  F01C         	goto	l5424
 11062   0038C4                     u4780:
 11063   0038C4                     l5428:
 11064   0038C4  90D8               	bcf	status,0,c
 11065   0038C6  3608               	rlcf	___awdiv@quotient^0,f,c
 11066   0038C8  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11067   0038CA  5004               	movf	___awdiv@divisor^0,w,c
 11068   0038CC  5C02               	subwf	___awdiv@dividend^0,w,c
 11069   0038CE  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11070   0038D0  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11071   0038D2  A0D8               	btfss	status,0,c
 11072   0038D4  EF6E  F01C         	goto	u4791
 11073   0038D8  EF70  F01C         	goto	u4790
 11074   0038DC                     u4791:
 11075   0038DC  EF75  F01C         	goto	l5436
 11076   0038E0                     u4790:
 11077   0038E0  5004               	movf	___awdiv@divisor^0,w,c
 11078   0038E2  5E02               	subwf	___awdiv@dividend^0,f,c
 11079   0038E4  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11080   0038E6  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11081   0038E8  8008               	bsf	___awdiv@quotient^0,0,c
 11082   0038EA                     l5436:
 11083   0038EA  90D8               	bcf	status,0,c
 11084   0038EC  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11085   0038EE  3204               	rrcf	___awdiv@divisor^0,f,c
 11086   0038F0  2E06               	decfsz	___awdiv@counter^0,f,c
 11087   0038F2  EF62  F01C         	goto	l5428
 11088   0038F6                     l5440:
 11089   0038F6  5007               	movf	___awdiv@sign^0,w,c
 11090   0038F8  B4D8               	btfsc	status,2,c
 11091   0038FA  EF81  F01C         	goto	u4801
 11092   0038FE  EF83  F01C         	goto	u4800
 11093   003902                     u4801:
 11094   003902  EF87  F01C         	goto	l5444
 11095   003906                     u4800:
 11096   003906  6C08               	negf	___awdiv@quotient^0,c
 11097   003908  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11098   00390A  B0D8               	btfsc	status,0,c
 11099   00390C  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11100   00390E                     l5444:
 11101   00390E  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11102   003912  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11103   003916  0012               	return		;funcret
 11104   003918                     __end_of___awdiv:
 11105                           	callstack 0
 11106                           
 11107 ;; *************** function _sendStringSerial4 *****************
 11108 ;; Defined at:
 11109 ;;		line 41 in file "serial.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  string          1    2[COMRAM] PTR unsigned char 
 11112 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11124 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11128 ;;Total ram usage:        1 bytes
 11129 ;; Hardware stack levels used: 1
 11130 ;; Hardware stack levels required when called: 2
 11131 ;; This function calls:
 11132 ;;		_sendCharSerial4
 11133 ;; This function is called by:
 11134 ;;		_calibration_routine
 11135 ;;		_send2USART
 11136 ;;		_sendAllReadings
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           	psect	text62
 11141   004608                     __ptext62:
 11142                           	callstack 0
 11143   004608                     _sendStringSerial4:
 11144                           	callstack 27
 11145   004608                     
 11146                           ;serial.c: 44:     while(*string != 0){
 11147   004608  EF11  F023         	goto	l6600
 11148   00460C                     l6594:
 11149                           
 11150                           ;serial.c: 46:   sendCharSerial4(*string++);
 11151   00460C  5003               	movf	sendStringSerial4@string^0,w,c
 11152   00460E  6ED9               	movwf	fsr2l,c
 11153   004610  6ADA               	clrf	fsr2h,c
 11154   004612  50DF               	movf	indf2,w,c
 11155   004614  ECDC  F023         	call	_sendCharSerial4
 11156   004618  2A03               	incf	sendStringSerial4@string^0,f,c
 11157   00461A                     
 11158                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11159   00461A  0E6A               	movlw	106
 11160   00461C                     u7387:
 11161   00461C  2EE8               	decfsz	wreg,f,c
 11162   00461E  D7FE               	bra	u7387
 11163   004620  D000               	nop2	
 11164   004622                     l6600:
 11165                           
 11166                           ;serial.c: 44:     while(*string != 0){
 11167   004622  5003               	movf	sendStringSerial4@string^0,w,c
 11168   004624  6ED9               	movwf	fsr2l,c
 11169   004626  6ADA               	clrf	fsr2h,c
 11170   004628  50DF               	movf	indf2,w,c
 11171   00462A  A4D8               	btfss	status,2,c
 11172   00462C  EF1A  F023         	goto	u6461
 11173   004630  EF1C  F023         	goto	u6460
 11174   004634                     u6461:
 11175   004634  EF06  F023         	goto	l6594
 11176   004638                     u6460:
 11177   004638  0012               	return		;funcret
 11178   00463A                     __end_of_sendStringSerial4:
 11179                           	callstack 0
 11180                           
 11181 ;; *************** function _sendCharSerial4 *****************
 11182 ;; Defined at:
 11183 ;;		line 35 in file "serial.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;  charToSend      1    wreg     unsigned char 
 11186 ;; Auto vars:     Size  Location     Type
 11187 ;;  charToSend      1    1[COMRAM] unsigned char 
 11188 ;; Return value:  Size  Location     Type
 11189 ;;                  1    wreg      void 
 11190 ;; Registers used:
 11191 ;;		wreg
 11192 ;; Tracked objects:
 11193 ;;		On entry : 0/0
 11194 ;;		On exit  : 0/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11201 ;;Total ram usage:        1 bytes
 11202 ;; Hardware stack levels used: 1
 11203 ;; Hardware stack levels required when called: 1
 11204 ;; This function calls:
 11205 ;;		Nothing
 11206 ;; This function is called by:
 11207 ;;		_sendStringSerial4
 11208 ;; This function uses a non-reentrant model
 11209 ;;
 11210                           
 11211                           	psect	text63
 11212   0047B8                     __ptext63:
 11213                           	callstack 0
 11214   0047B8                     _sendCharSerial4:
 11215                           	callstack 27
 11216                           
 11217                           ;incstack = 0
 11218                           ;sendCharSerial4@charToSend stored from wreg
 11219   0047B8  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11220   0047BA                     l554:
 11221   0047BA  010E               	movlb	14	; () banked
 11222   0047BC  A537               	btfss	55,2,b	;volatile
 11223   0047BE  EFE3  F023         	goto	u6011
 11224   0047C2  EFE5  F023         	goto	u6010
 11225   0047C6                     u6011:
 11226   0047C6  EFDD  F023         	goto	l554
 11227   0047CA                     u6010:
 11228   0047CA                     
 11229                           ; BSR set to: 14
 11230                           ;serial.c: 37:     TX4REG = charToSend;
 11231   0047CA  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11232   0047CE                     
 11233                           ; BSR set to: 14
 11234   0047CE  0012               	return		;funcret
 11235   0047D0                     __end_of_sendCharSerial4:
 11236                           	callstack 0
 11237                           
 11238 ;; *************** function _color_read_Red *****************
 11239 ;; Defined at:
 11240 ;;		line 33 in file "color.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;		None
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;  tmp             2   10[COMRAM] unsigned int 
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  2    5[COMRAM] unsigned int 
 11247 ;; Registers used:
 11248 ;;		wreg, status,2, status,0, cstack
 11249 ;; Tracked objects:
 11250 ;;		On entry : 0/0
 11251 ;;		On exit  : 0/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11256 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11257 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11258 ;;Total ram usage:        7 bytes
 11259 ;; Hardware stack levels used: 1
 11260 ;; Hardware stack levels required when called: 3
 11261 ;; This function calls:
 11262 ;;		_I2C_2_Master_Read
 11263 ;;		_I2C_2_Master_RepStart
 11264 ;;		_I2C_2_Master_Start
 11265 ;;		_I2C_2_Master_Stop
 11266 ;;		_I2C_2_Master_Write
 11267 ;; This function is called by:
 11268 ;;		_reading_hue
 11269 ;;		_calibration_routine
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text64
 11274   003FCE                     __ptext64:
 11275                           	callstack 0
 11276   003FCE                     _color_read_Red:
 11277                           	callstack 26
 11278   003FCE                     
 11279                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11280   003FCE  ECF3  F023         	call	_I2C_2_Master_Start	;wreg free
 11281                           
 11282                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11283   003FD2  0E52               	movlw	82
 11284   003FD4  ECE8  F023         	call	_I2C_2_Master_Write
 11285                           
 11286                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11287   003FD8  0EB6               	movlw	182
 11288   003FDA  ECE8  F023         	call	_I2C_2_Master_Write
 11289                           
 11290                           ;color.c: 39:  I2C_2_Master_RepStart();
 11291   003FDE  ECF8  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11292                           
 11293                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11294   003FE2  0E53               	movlw	83
 11295   003FE4  ECE8  F023         	call	_I2C_2_Master_Write
 11296                           
 11297                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11298   003FE8  0E01               	movlw	1
 11299   003FEA  EC10  F021         	call	_I2C_2_Master_Read
 11300   003FEE  6E08               	movwf	??_color_read_Red^0,c
 11301   003FF0  5008               	movf	??_color_read_Red^0,w,c
 11302   003FF2  6E0B               	movwf	color_read_Red@tmp^0,c
 11303   003FF4  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11304                           
 11305                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11306   003FF6  0E00               	movlw	0
 11307   003FF8  EC10  F021         	call	_I2C_2_Master_Read
 11308   003FFC  6E08               	movwf	??_color_read_Red^0,c
 11309   003FFE  5008               	movf	??_color_read_Red^0,w,c
 11310   004000  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11311   004002  6A09               	clrf	(??_color_read_Red+1)^0,c
 11312   004004  500B               	movf	color_read_Red@tmp^0,w,c
 11313   004006  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11314   004008  6E0B               	movwf	color_read_Red@tmp^0,c
 11315   00400A  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11316   00400C  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11317   00400E  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11318                           
 11319                           ;color.c: 43:  I2C_2_Master_Stop();
 11320   004010  ECEE  F023         	call	_I2C_2_Master_Stop	;wreg free
 11321   004014                     
 11322                           ;color.c: 44:  return tmp;
 11323   004014  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11324   004018  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11325   00401C  0012               	return		;funcret
 11326   00401E                     __end_of_color_read_Red:
 11327                           	callstack 0
 11328                           
 11329 ;; *************** function _color_read_Green *****************
 11330 ;; Defined at:
 11331 ;;		line 47 in file "color.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;  tmp             2   10[COMRAM] unsigned int 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  2    5[COMRAM] unsigned int 
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11347 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11348 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11349 ;;Total ram usage:        7 bytes
 11350 ;; Hardware stack levels used: 1
 11351 ;; Hardware stack levels required when called: 3
 11352 ;; This function calls:
 11353 ;;		_I2C_2_Master_Read
 11354 ;;		_I2C_2_Master_RepStart
 11355 ;;		_I2C_2_Master_Start
 11356 ;;		_I2C_2_Master_Stop
 11357 ;;		_I2C_2_Master_Write
 11358 ;; This function is called by:
 11359 ;;		_reading_hue
 11360 ;;		_calibration_routine
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           	psect	text65
 11365   00401E                     __ptext65:
 11366                           	callstack 0
 11367   00401E                     _color_read_Green:
 11368                           	callstack 26
 11369   00401E                     
 11370                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11371   00401E  ECF3  F023         	call	_I2C_2_Master_Start	;wreg free
 11372                           
 11373                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11374   004022  0E52               	movlw	82
 11375   004024  ECE8  F023         	call	_I2C_2_Master_Write
 11376                           
 11377                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11378   004028  0EB8               	movlw	184
 11379   00402A  ECE8  F023         	call	_I2C_2_Master_Write
 11380                           
 11381                           ;color.c: 53:  I2C_2_Master_RepStart();
 11382   00402E  ECF8  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11383                           
 11384                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11385   004032  0E53               	movlw	83
 11386   004034  ECE8  F023         	call	_I2C_2_Master_Write
 11387                           
 11388                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11389   004038  0E01               	movlw	1
 11390   00403A  EC10  F021         	call	_I2C_2_Master_Read
 11391   00403E  6E08               	movwf	??_color_read_Green^0,c
 11392   004040  5008               	movf	??_color_read_Green^0,w,c
 11393   004042  6E0B               	movwf	color_read_Green@tmp^0,c
 11394   004044  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11395                           
 11396                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11397   004046  0E00               	movlw	0
 11398   004048  EC10  F021         	call	_I2C_2_Master_Read
 11399   00404C  6E08               	movwf	??_color_read_Green^0,c
 11400   00404E  5008               	movf	??_color_read_Green^0,w,c
 11401   004050  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11402   004052  6A09               	clrf	(??_color_read_Green+1)^0,c
 11403   004054  500B               	movf	color_read_Green@tmp^0,w,c
 11404   004056  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11405   004058  6E0B               	movwf	color_read_Green@tmp^0,c
 11406   00405A  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11407   00405C  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11408   00405E  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11409                           
 11410                           ;color.c: 57:  I2C_2_Master_Stop();
 11411   004060  ECEE  F023         	call	_I2C_2_Master_Stop	;wreg free
 11412   004064                     
 11413                           ;color.c: 58:  return tmp;
 11414   004064  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11415   004068  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11416   00406C  0012               	return		;funcret
 11417   00406E                     __end_of_color_read_Green:
 11418                           	callstack 0
 11419                           
 11420 ;; *************** function _color_read_Clear *****************
 11421 ;; Defined at:
 11422 ;;		line 76 in file "color.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;		None
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;  tmp             2   10[COMRAM] unsigned int 
 11427 ;; Return value:  Size  Location     Type
 11428 ;;                  2    5[COMRAM] unsigned int 
 11429 ;; Registers used:
 11430 ;;		wreg, status,2, status,0, cstack
 11431 ;; Tracked objects:
 11432 ;;		On entry : 0/0
 11433 ;;		On exit  : 0/0
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11436 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11438 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11439 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11440 ;;Total ram usage:        7 bytes
 11441 ;; Hardware stack levels used: 1
 11442 ;; Hardware stack levels required when called: 3
 11443 ;; This function calls:
 11444 ;;		_I2C_2_Master_Read
 11445 ;;		_I2C_2_Master_RepStart
 11446 ;;		_I2C_2_Master_Start
 11447 ;;		_I2C_2_Master_Stop
 11448 ;;		_I2C_2_Master_Write
 11449 ;; This function is called by:
 11450 ;;		_reading_hue
 11451 ;;		_calibration_routine
 11452 ;;		_main
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           	psect	text66
 11457   00406E                     __ptext66:
 11458                           	callstack 0
 11459   00406E                     _color_read_Clear:
 11460                           	callstack 26
 11461   00406E                     
 11462                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11463   00406E  ECF3  F023         	call	_I2C_2_Master_Start	;wreg free
 11464                           
 11465                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11466   004072  0E52               	movlw	82
 11467   004074  ECE8  F023         	call	_I2C_2_Master_Write
 11468                           
 11469                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11470   004078  0EB4               	movlw	180
 11471   00407A  ECE8  F023         	call	_I2C_2_Master_Write
 11472                           
 11473                           ;color.c: 82:  I2C_2_Master_RepStart();
 11474   00407E  ECF8  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11475                           
 11476                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11477   004082  0E53               	movlw	83
 11478   004084  ECE8  F023         	call	_I2C_2_Master_Write
 11479                           
 11480                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11481   004088  0E01               	movlw	1
 11482   00408A  EC10  F021         	call	_I2C_2_Master_Read
 11483   00408E  6E08               	movwf	??_color_read_Clear^0,c
 11484   004090  5008               	movf	??_color_read_Clear^0,w,c
 11485   004092  6E0B               	movwf	color_read_Clear@tmp^0,c
 11486   004094  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11487                           
 11488                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11489   004096  0E00               	movlw	0
 11490   004098  EC10  F021         	call	_I2C_2_Master_Read
 11491   00409C  6E08               	movwf	??_color_read_Clear^0,c
 11492   00409E  5008               	movf	??_color_read_Clear^0,w,c
 11493   0040A0  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11494   0040A2  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11495   0040A4  500B               	movf	color_read_Clear@tmp^0,w,c
 11496   0040A6  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11497   0040A8  6E0B               	movwf	color_read_Clear@tmp^0,c
 11498   0040AA  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11499   0040AC  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11500   0040AE  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11501                           
 11502                           ;color.c: 86:  I2C_2_Master_Stop();
 11503   0040B0  ECEE  F023         	call	_I2C_2_Master_Stop	;wreg free
 11504   0040B4                     
 11505                           ;color.c: 87:  return tmp;
 11506   0040B4  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11507   0040B8  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11508   0040BC  0012               	return		;funcret
 11509   0040BE                     __end_of_color_read_Clear:
 11510                           	callstack 0
 11511                           
 11512 ;; *************** function _color_read_Blue *****************
 11513 ;; Defined at:
 11514 ;;		line 61 in file "color.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;  tmp             2   10[COMRAM] unsigned int 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  2    5[COMRAM] unsigned int 
 11521 ;; Registers used:
 11522 ;;		wreg, status,2, status,0, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11530 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11531 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11532 ;;Total ram usage:        7 bytes
 11533 ;; Hardware stack levels used: 1
 11534 ;; Hardware stack levels required when called: 3
 11535 ;; This function calls:
 11536 ;;		_I2C_2_Master_Read
 11537 ;;		_I2C_2_Master_RepStart
 11538 ;;		_I2C_2_Master_Start
 11539 ;;		_I2C_2_Master_Stop
 11540 ;;		_I2C_2_Master_Write
 11541 ;; This function is called by:
 11542 ;;		_reading_hue
 11543 ;;		_calibration_routine
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           	psect	text67
 11548   0040BE                     __ptext67:
 11549                           	callstack 0
 11550   0040BE                     _color_read_Blue:
 11551                           	callstack 26
 11552   0040BE                     
 11553                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11554   0040BE  ECF3  F023         	call	_I2C_2_Master_Start	;wreg free
 11555                           
 11556                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11557   0040C2  0E52               	movlw	82
 11558   0040C4  ECE8  F023         	call	_I2C_2_Master_Write
 11559                           
 11560                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11561   0040C8  0EBA               	movlw	186
 11562   0040CA  ECE8  F023         	call	_I2C_2_Master_Write
 11563                           
 11564                           ;color.c: 67:  I2C_2_Master_RepStart();
 11565   0040CE  ECF8  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11566                           
 11567                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11568   0040D2  0E53               	movlw	83
 11569   0040D4  ECE8  F023         	call	_I2C_2_Master_Write
 11570                           
 11571                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11572   0040D8  0E01               	movlw	1
 11573   0040DA  EC10  F021         	call	_I2C_2_Master_Read
 11574   0040DE  6E08               	movwf	??_color_read_Blue^0,c
 11575   0040E0  5008               	movf	??_color_read_Blue^0,w,c
 11576   0040E2  6E0B               	movwf	color_read_Blue@tmp^0,c
 11577   0040E4  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11578                           
 11579                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11580   0040E6  0E00               	movlw	0
 11581   0040E8  EC10  F021         	call	_I2C_2_Master_Read
 11582   0040EC  6E08               	movwf	??_color_read_Blue^0,c
 11583   0040EE  5008               	movf	??_color_read_Blue^0,w,c
 11584   0040F0  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11585   0040F2  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11586   0040F4  500B               	movf	color_read_Blue@tmp^0,w,c
 11587   0040F6  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11588   0040F8  6E0B               	movwf	color_read_Blue@tmp^0,c
 11589   0040FA  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11590   0040FC  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11591   0040FE  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11592                           
 11593                           ;color.c: 71:  I2C_2_Master_Stop();
 11594   004100  ECEE  F023         	call	_I2C_2_Master_Stop	;wreg free
 11595   004104                     
 11596                           ;color.c: 72:  return tmp;
 11597   004104  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11598   004108  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11599   00410C  0012               	return		;funcret
 11600   00410E                     __end_of_color_read_Blue:
 11601                           	callstack 0
 11602                           
 11603 ;; *************** function _I2C_2_Master_Write *****************
 11604 ;; Defined at:
 11605 ;;		line 45 in file "i2c.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  data_byte       1    wreg     unsigned char 
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;  data_byte       1    2[COMRAM] unsigned char 
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  1    wreg      void 
 11612 ;; Registers used:
 11613 ;;		wreg, status,2, status,0, cstack
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11623 ;;Total ram usage:        1 bytes
 11624 ;; Hardware stack levels used: 1
 11625 ;; Hardware stack levels required when called: 2
 11626 ;; This function calls:
 11627 ;;		_I2C_2_Master_Idle
 11628 ;; This function is called by:
 11629 ;;		_color_writetoaddr
 11630 ;;		_color_read_Red
 11631 ;;		_color_read_Green
 11632 ;;		_color_read_Blue
 11633 ;;		_color_read_Clear
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           	psect	text68
 11638   0047D0                     __ptext68:
 11639                           	callstack 0
 11640   0047D0                     _I2C_2_Master_Write:
 11641                           	callstack 26
 11642                           
 11643                           ;incstack = 0
 11644                           ;I2C_2_Master_Write@data_byte stored from wreg
 11645   0047D0  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11646   0047D2                     
 11647                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11648   0047D2  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11649   0047D6                     
 11650                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11651   0047D6  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11652   0047DA  0012               	return		;funcret
 11653   0047DC                     __end_of_I2C_2_Master_Write:
 11654                           	callstack 0
 11655                           
 11656 ;; *************** function _I2C_2_Master_Stop *****************
 11657 ;; Defined at:
 11658 ;;		line 39 in file "i2c.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;		None
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, status,2, status,0, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11676 ;;Total ram usage:        0 bytes
 11677 ;; Hardware stack levels used: 1
 11678 ;; Hardware stack levels required when called: 2
 11679 ;; This function calls:
 11680 ;;		_I2C_2_Master_Idle
 11681 ;; This function is called by:
 11682 ;;		_color_writetoaddr
 11683 ;;		_color_read_Red
 11684 ;;		_color_read_Green
 11685 ;;		_color_read_Blue
 11686 ;;		_color_read_Clear
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           	psect	text69
 11691   0047DC                     __ptext69:
 11692                           	callstack 0
 11693   0047DC                     _I2C_2_Master_Stop:
 11694                           	callstack 26
 11695   0047DC                     
 11696                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11697   0047DC  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11698   0047E0                     
 11699                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11700   0047E0  010E               	movlb	14	; () banked
 11701   0047E2  85DA               	bsf	218,2,b	;volatile
 11702   0047E4                     
 11703                           ; BSR set to: 14
 11704   0047E4  0012               	return		;funcret
 11705   0047E6                     __end_of_I2C_2_Master_Stop:
 11706                           	callstack 0
 11707                           
 11708 ;; *************** function _I2C_2_Master_Start *****************
 11709 ;; Defined at:
 11710 ;;		line 27 in file "i2c.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;		None
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;		None
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  1    wreg      void 
 11717 ;; Registers used:
 11718 ;;		wreg, status,2, status,0, cstack
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11728 ;;Total ram usage:        0 bytes
 11729 ;; Hardware stack levels used: 1
 11730 ;; Hardware stack levels required when called: 2
 11731 ;; This function calls:
 11732 ;;		_I2C_2_Master_Idle
 11733 ;; This function is called by:
 11734 ;;		_color_writetoaddr
 11735 ;;		_color_read_Red
 11736 ;;		_color_read_Green
 11737 ;;		_color_read_Blue
 11738 ;;		_color_read_Clear
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text70
 11743   0047E6                     __ptext70:
 11744                           	callstack 0
 11745   0047E6                     _I2C_2_Master_Start:
 11746                           	callstack 26
 11747   0047E6                     
 11748                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11749   0047E6  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11750   0047EA                     
 11751                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11752   0047EA  010E               	movlb	14	; () banked
 11753   0047EC  81DA               	bsf	218,0,b	;volatile
 11754   0047EE                     
 11755                           ; BSR set to: 14
 11756   0047EE  0012               	return		;funcret
 11757   0047F0                     __end_of_I2C_2_Master_Start:
 11758                           	callstack 0
 11759                           
 11760 ;; *************** function _I2C_2_Master_RepStart *****************
 11761 ;; Defined at:
 11762 ;;		line 33 in file "i2c.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;		None
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;		None
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      void 
 11769 ;; Registers used:
 11770 ;;		wreg, status,2, status,0, cstack
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11780 ;;Total ram usage:        0 bytes
 11781 ;; Hardware stack levels used: 1
 11782 ;; Hardware stack levels required when called: 2
 11783 ;; This function calls:
 11784 ;;		_I2C_2_Master_Idle
 11785 ;; This function is called by:
 11786 ;;		_color_read_Red
 11787 ;;		_color_read_Green
 11788 ;;		_color_read_Blue
 11789 ;;		_color_read_Clear
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           	psect	text71
 11794   0047F0                     __ptext71:
 11795                           	callstack 0
 11796   0047F0                     _I2C_2_Master_RepStart:
 11797                           	callstack 26
 11798   0047F0                     
 11799                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11800   0047F0  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11801   0047F4                     
 11802                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11803   0047F4  010E               	movlb	14	; () banked
 11804   0047F6  83DA               	bsf	218,1,b	;volatile
 11805   0047F8                     
 11806                           ; BSR set to: 14
 11807   0047F8  0012               	return		;funcret
 11808   0047FA                     __end_of_I2C_2_Master_RepStart:
 11809                           	callstack 0
 11810                           
 11811 ;; *************** function _I2C_2_Master_Read *****************
 11812 ;; Defined at:
 11813 ;;		line 51 in file "i2c.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;  ack             1    wreg     unsigned char 
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;  ack             1    3[COMRAM] unsigned char 
 11818 ;;  tmp             1    4[COMRAM] unsigned char 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  1    wreg      unsigned char 
 11821 ;; Registers used:
 11822 ;;		wreg, status,2, status,0, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11831 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11832 ;;Total ram usage:        3 bytes
 11833 ;; Hardware stack levels used: 1
 11834 ;; Hardware stack levels required when called: 2
 11835 ;; This function calls:
 11836 ;;		_I2C_2_Master_Idle
 11837 ;; This function is called by:
 11838 ;;		_color_read_Red
 11839 ;;		_color_read_Green
 11840 ;;		_color_read_Blue
 11841 ;;		_color_read_Clear
 11842 ;; This function uses a non-reentrant model
 11843 ;;
 11844                           
 11845                           	psect	text72
 11846   004220                     __ptext72:
 11847                           	callstack 0
 11848   004220                     _I2C_2_Master_Read:
 11849                           	callstack 26
 11850                           
 11851                           ; BSR set to: 14
 11852                           ;incstack = 0
 11853                           ;I2C_2_Master_Read@ack stored from wreg
 11854   004220  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11855   004222                     
 11856                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11857   004222  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11858   004226                     
 11859                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11860   004226  010E               	movlb	14	; () banked
 11861   004228  87DA               	bsf	218,3,b	;volatile
 11862                           
 11863                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11864   00422A  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11865   00422E                     
 11866                           ;i2c.c: 57:   tmp = SSP2BUF;
 11867   00422E  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11868                           
 11869                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11870   004232  EC7A  F023         	call	_I2C_2_Master_Idle	;wreg free
 11871   004236                     
 11872                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11873   004236  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11874   004238  B4D8               	btfsc	status,2,c
 11875   00423A  EF21  F021         	goto	u5981
 11876   00423E  EF25  F021         	goto	u5980
 11877   004242                     u5981:
 11878   004242  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11879   004244  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11880   004246  EF26  F021         	goto	u5998
 11881   00424A                     u5980:
 11882   00424A  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11883   00424C                     u5998:
 11884   00424C  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11885   00424E  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11886   004250  010E               	movlb	14	; () banked
 11887   004252  51DA               	movf	218,w,b	;volatile
 11888   004254  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11889   004256  0BDF               	andlw	-33
 11890   004258  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11891   00425A  6FDA               	movwf	218,b	;volatile
 11892   00425C                     
 11893                           ; BSR set to: 14
 11894                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11895   00425C  89DA               	bsf	218,4,b	;volatile
 11896   00425E                     
 11897                           ; BSR set to: 14
 11898                           ;i2c.c: 61:   return tmp;
 11899   00425E  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11900   004260                     
 11901                           ; BSR set to: 14
 11902   004260  0012               	return		;funcret
 11903   004262                     __end_of_I2C_2_Master_Read:
 11904                           	callstack 0
 11905                           
 11906 ;; *************** function _I2C_2_Master_Idle *****************
 11907 ;; Defined at:
 11908 ;;		line 22 in file "i2c.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;		None
 11913 ;; Return value:  Size  Location     Type
 11914 ;;                  1    wreg      void 
 11915 ;; Registers used:
 11916 ;;		wreg, status,2, status,0
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11925 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11926 ;;Total ram usage:        1 bytes
 11927 ;; Hardware stack levels used: 1
 11928 ;; Hardware stack levels required when called: 1
 11929 ;; This function calls:
 11930 ;;		Nothing
 11931 ;; This function is called by:
 11932 ;;		_I2C_2_Master_Start
 11933 ;;		_I2C_2_Master_RepStart
 11934 ;;		_I2C_2_Master_Stop
 11935 ;;		_I2C_2_Master_Write
 11936 ;;		_I2C_2_Master_Read
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           	psect	text73
 11941   0046F4                     __ptext73:
 11942                           	callstack 0
 11943   0046F4                     _I2C_2_Master_Idle:
 11944                           	callstack 26
 11945   0046F4                     l203:
 11946   0046F4  010E               	movlb	14	; () banked
 11947   0046F6  B5D8               	btfsc	216,2,b	;volatile
 11948   0046F8  EF80  F023         	goto	u5091
 11949   0046FC  EF82  F023         	goto	u5090
 11950   004700                     u5091:
 11951   004700  EF7A  F023         	goto	l203
 11952   004704                     u5090:
 11953   004704                     
 11954                           ; BSR set to: 14
 11955   004704  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11956   004708  0E1F               	movlw	31
 11957   00470A  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11958   00470C  A4D8               	btfss	status,2,c
 11959   00470E  EF8B  F023         	goto	u5101
 11960   004712  EF8D  F023         	goto	u5100
 11961   004716                     u5101:
 11962   004716  EF7A  F023         	goto	l203
 11963   00471A                     u5100:
 11964   00471A                     
 11965                           ; BSR set to: 14
 11966   00471A  0012               	return		;funcret
 11967   00471C                     __end_of_I2C_2_Master_Idle:
 11968                           	callstack 0
 11969                           
 11970 ;; *************** function _ADC_init *****************
 11971 ;; Defined at:
 11972 ;;		line 9 in file "ADC.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;		None
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;		None
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  1    wreg      void 
 11979 ;; Registers used:
 11980 ;;		wreg, status,2
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11990 ;;Total ram usage:        0 bytes
 11991 ;; Hardware stack levels used: 1
 11992 ;; Hardware stack levels required when called: 1
 11993 ;; This function calls:
 11994 ;;		Nothing
 11995 ;; This function is called by:
 11996 ;;		_main
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           	psect	text74
 12001   00479E                     __ptext74:
 12002                           	callstack 0
 12003   00479E                     _ADC_init:
 12004                           	callstack 29
 12005   00479E                     
 12006                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12007   00479E  8C86               	bsf	134,6,c	;volatile
 12008                           
 12009                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12010   0047A0  010E               	movlb	14	; () banked
 12011   0047A2  8DB4               	bsf	180,6,b	;volatile
 12012                           
 12013                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12014   0047A4  010F               	movlb	15	; () banked
 12015   0047A6  9958               	bcf	88,4,b	;volatile
 12016   0047A8                     
 12017                           ; BSR set to: 15
 12018                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12019   0047A8  0EFC               	movlw	-4
 12020   0047AA  1758               	andwf	88,f,b	;volatile
 12021                           
 12022                           ;ADC.c: 17:     ADPCH=0b101110;
 12023   0047AC  0E2E               	movlw	46
 12024   0047AE  6F5F               	movwf	95,b	;volatile
 12025   0047B0                     
 12026                           ; BSR set to: 15
 12027                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12028   0047B0  9460               	bcf	96,2,c	;volatile
 12029   0047B2                     
 12030                           ; BSR set to: 15
 12031                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12032   0047B2  8860               	bsf	96,4,c	;volatile
 12033   0047B4                     
 12034                           ; BSR set to: 15
 12035                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12036   0047B4  8E60               	bsf	96,7,c	;volatile
 12037   0047B6                     
 12038                           ; BSR set to: 15
 12039   0047B6  0012               	return		;funcret
 12040   0047B8                     __end_of_ADC_init:
 12041                           	callstack 0
 12042                           
 12043 ;; *************** function _LowISR *****************
 12044 ;; Defined at:
 12045 ;;		line 41 in file "timers.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;		None
 12048 ;; Auto vars:     Size  Location     Type
 12049 ;;		None
 12050 ;; Return value:  Size  Location     Type
 12051 ;;                  1    wreg      void 
 12052 ;; Registers used:
 12053 ;;		None
 12054 ;; Tracked objects:
 12055 ;;		On entry : 0/0
 12056 ;;		On exit  : 0/0
 12057 ;;		Unchanged: 0/0
 12058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12063 ;;Total ram usage:        1 bytes
 12064 ;; Hardware stack levels used: 1
 12065 ;; This function calls:
 12066 ;;		Nothing
 12067 ;; This function is called by:
 12068 ;;		Interrupt level 1
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           	psect	intcodelo
 12073   000018                     __pintcodelo:
 12074                           	callstack 0
 12075   000018                     _LowISR:
 12076                           	callstack 21
 12077                           
 12078                           ; BSR set to: 15
 12079                           ;incstack = 0
 12080   000018  8058               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12081   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12082   00001E                     
 12083                           ;timers.c: 44:     if (PIR0bits.TMR0IF == 1) {
 12084   00001E  010E               	movlb	14	; () banked
 12085   000020  AB33               	btfss	51,5,b	;volatile
 12086   000022  EF15  F000         	goto	i1u236_21
 12087   000026  EF17  F000         	goto	i1u236_20
 12088   00002A                     i1u236_21:
 12089   00002A  EF19  F000         	goto	i1l654
 12090   00002E                     i1u236_20:
 12091   00002E                     
 12092                           ; BSR set to: 14
 12093                           ;timers.c: 45:         LATGbits.LATG1 = 1;
 12094   00002E  827F               	bsf	127,1,c	;volatile
 12095                           
 12096                           ;timers.c: 47:         PIR0bits.TMR0IF = 0;
 12097   000030  9B33               	bcf	51,5,b	;volatile
 12098   000032                     i1l654:
 12099                           
 12100                           ; BSR set to: 14
 12101   000032  C001  FFE0         	movff	??_LowISR,bsr
 12102   000036  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12103   000038  0010               	retfie	
 12104   00003A                     __end_of_LowISR:
 12105                           	callstack 0
 12106                           
 12107                           	psect	rparam
 12108   000000                     
 12109                           	psect	temp
 12110   000058                     btemp:
 12111                           	callstack 0
 12112   000058                     	ds	1
 12113   000000                     int$flags	set	btemp
 12114   000000                     wtemp8	set	btemp+1
 12115   000000                     ttemp5	set	btemp+1
 12116   000000                     ttemp6	set	btemp+4
 12117   000000                     ttemp7	set	btemp+8
 12118                           
 12119                           	psect	config
 12120                           
 12121                           ;Config register CONFIG1L @ 0x300000
 12122                           ;	External Oscillator mode Selection bits
 12123                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12124                           ;	Power-up default value for COSC bits
 12125                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12126   300000                     	org	3145728
 12127   300000  AA                 	db	170
 12128                           
 12129                           ;Config register CONFIG1H @ 0x300001
 12130                           ;	unspecified, using default values
 12131                           ;	Clock Out Enable bit
 12132                           ;	CLKOUTEN = 0x1, unprogrammed default
 12133                           ;	Clock Switch Enable bit
 12134                           ;	CSWEN = 0x1, unprogrammed default
 12135                           ;	Fail-Safe Clock Monitor Enable bit
 12136                           ;	FCMEN = 0x1, unprogrammed default
 12137   300001                     	org	3145729
 12138   300001  FF                 	db	255
 12139                           
 12140                           ;Config register CONFIG3L @ 0x300004
 12141                           ;	WDT Period Select bits
 12142                           ;	WDTCPS = 0x1F, unprogrammed default
 12143                           ;	WDT operating mode
 12144                           ;	WDTE = OFF, WDT Disabled
 12145   300004                     	org	3145732
 12146   300004  9F                 	db	159
 12147                           
 12148                           ;Config register CONFIG3H @ 0x300005
 12149                           ;	unspecified, using default values
 12150                           ;	WDT Window Select bits
 12151                           ;	WDTCWS = 0x7, unprogrammed default
 12152                           ;	WDT input clock selector
 12153                           ;	WDTCCS = 0x7, unprogrammed default
 12154   300005                     	org	3145733
 12155   300005  FF                 	db	255
 12156                           tosu	equ	0xFFF
 12157                           tosh	equ	0xFFE
 12158                           tosl	equ	0xFFD
 12159                           stkptr	equ	0xFFC
 12160                           pclatu	equ	0xFFB
 12161                           pclath	equ	0xFFA
 12162                           pcl	equ	0xFF9
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           prodh	equ	0xFF4
 12168                           prodl	equ	0xFF3
 12169                           indf0	equ	0xFEF
 12170                           postinc0	equ	0xFEE
 12171                           postdec0	equ	0xFED
 12172                           preinc0	equ	0xFEC
 12173                           plusw0	equ	0xFEB
 12174                           fsr0h	equ	0xFEA
 12175                           fsr0l	equ	0xFE9
 12176                           wreg	equ	0xFE8
 12177                           indf1	equ	0xFE7
 12178                           postinc1	equ	0xFE6
 12179                           postdec1	equ	0xFE5
 12180                           preinc1	equ	0xFE4
 12181                           plusw1	equ	0xFE3
 12182                           fsr1h	equ	0xFE2
 12183                           fsr1l	equ	0xFE1
 12184                           bsr	equ	0xFE0
 12185                           indf2	equ	0xFDF
 12186                           postinc2	equ	0xFDE
 12187                           postdec2	equ	0xFDD
 12188                           preinc2	equ	0xFDC
 12189                           plusw2	equ	0xFDB
 12190                           fsr2h	equ	0xFDA
 12191                           fsr2l	equ	0xFD9
 12192                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         340
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     84      87
    BANK0           160     76     152
    BANK1           256      0     162
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3008$buffer	PTR unsigned char  size(2) Largest target is 0

    S3008$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _send2USART->_sprintf
    _returnHome->_reverseStraight
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fldiv
    _convert_rgb2hue->___fltol
    ___fltol->___flmul
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flsub
    _get16bitTMR0val->_logAction
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0  390521
                                             76 COMRAM     8     8      0
                           _ADC_init
                            ___lwdiv
                             ___wmul
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   12186
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4  127601
                                             65 COMRAM    11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   80485
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   17517
                                             55 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    9993
                                             50 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     158
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   21545
                                             54 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   20641
                                             50 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1046
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             40 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2693
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3083
                                             25 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1781
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  193407
                                             32 COMRAM     4     0      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   26064
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   27684
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   12970
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   26244
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   12790
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   27504
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   12790
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    5377
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   27684
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   12970
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   13150
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   27864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   13150
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    5557
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   14410
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6929
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    5377
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4701
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1381
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1595
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   13006
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10899
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9147
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8659
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1992
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1552
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
         ___flsub (ARG)
           ___fladd
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
     _sendStringSerial4
     _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     54      57       1       92.6%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F5      66        0.0%
DATA                 0      0     1F5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 01:35:15 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 3FCE  
                 ___fldiv@aexp 0032                   ___fldiv@bexp 0031             fullSpeedBack@power 0017  
                 ___fldiv@sign 002A                _color_read_Blue 40BE                             l81 4346  
                           l90 406C                             l84 4760                             l93 410C  
                           l87 401C                             l96 40BC                             l99 3788  
                 ___awdiv@sign 0007                             bsr 0FE0            ___wmul@multiplicand 0004  
              moveLightBlue@mL 001D                moveLightBlue@mR 001E             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 406E  
             _color_read_Green 401E                            l110 28DE                            l102 2814  
                          l111 2930                            l120 2A26                            l104 2822  
                          l200 46F2                            l113 293E                            l105 2870  
                          l114 2998                            l130 11B8                            l203 46F4  
                          l107 287E                            l212 47F8                            l116 29A6  
                          l108 28D0                            l140 12AA                            l132 1212  
                          l221 4260                            l117 2A00                            l206 471A  
                          l150 15C2                            l142 12BA                            l134 1222  
                          l215 47E4                            l144 1314                            l128 11A8  
                          l209 47EE                            l218 47DA                            l154 163A  
                          l146 1324             logAction@path_step 0004                            l155 1656  
                          l331 254E                            l421 318C                            l173 27EC  
                          l325 2408                            l414 3CEE                            l167 27E4  
                          l434 3E78                            l452 4668                            l444 3852  
                          l349 47B6                            l429 3D7C                            l461 450C  
                          l470 44A8                            l702 3038                            l455 4698  
                          l439 3DFA                            l711 42FC                            l464 4570  
                          l608 477E                            l449 3EEE                            l473 4444  
                          l545 479C                            l554 47BA                            l458 4606  
                          l482 4412                            l714 4312                            l722 369E  
                          l563 4638                            l467 46C8                            l491 453E  
                          l731 329C                            l476 45A2                            l708 3038  
                          l557 47CE                            l485 4476                            l813 33A8  
                          l725 329A                            l734 4740                            l494 43E0  
                          l479 45D4                            l488 44DA                            l648 42DA  
                          l745 3FBC                            l746 3FCC                            l696 41DC  
                          l965 3916                            l993 3B1E                            l978 39C6  
                          l999 356C                            _abs 437C                            _pad 3BCA  
                          _hue 00C0            convert_rgb2hue@cMax 0033                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 001D  
                 ___flmul@bexp 0022                   ___flmul@sign 001C                   ___flmul@temp 0027  
                 ___flmul@prod 0023                   ___fltol@exp1 0032                           l1004 35B2  
                         l1031 34AE                           ?_abs 0008                           l1232 3F62  
                         l1304 4198                           l1225 3F5A                           l1321 20FE  
                         l1330 21E6                           l1403 2B72                           l1412 437A  
                         l1316 22DA                           l1501 3BC8                           l1318 213A  
                         l1262 1846                           l1327 2180                           l1271 1B16  
                         l1263 1834                           l1512 47FA                           l1432 3C00  
                         l1440 2DC2                           l1352 1F40                           l1264 17FA  
                         l1329 21F8                           l1435 3C3E                           l1355 1DD2  
                         l1348 1BDC                           l1509 42A0                           l1437 3C5E  
                         l1453 2EDA                           l1461 3A74                           l1365 1F02  
                         l1357 1E4A                           l1358 1E38                           l1279 1960  
                         l1288 1A30                           l1392 2BDA                           l1457 3A6C  
                         l1289 1A1E                           l1482 421E                           l1476 2D62  
                         l1396 2B16                           l1389 2A7E                           l1486 4396  
                         l6000 1E5A                           l1489 43AE                           l6010 1EBC  
                         l6002 1E66                           l6020 1F24                           l6012 1ED0  
                         l6004 1E74                           l6100 2B54                           l6022 1F26  
                         l6014 1EEA                           l6006 1E9E                           l6030 33AA  
                         l6110 2BAA                           l6102 2B62                           l6200 425C  
                         l5400 4738                           l6120 2BDC                           l7000 3C96  
                         l6016 1F06                           l6024 1F2C                           l6008 1EA2  
                         l6040 3400                           l6032 33C0                           l6112 2BBA  
                         l6104 2B80                           l6202 425E                           l5410 386E  
                         l6130 2C24                           l6122 2C02                           l7010 3CD4  
                         l7002 3C9A                           l6026 1F30                           l6018 1F16  
                         l6042 3410                           l6114 2BC8                           l6106 2B82  
                         l5420 3894                           l5412 3872                           l5404 3854  
                         l6132 2C28                           l6140 2C72                           l6124 2C0A  
                         l5500 3F4C                           l7012 3CD6                           l7004 3CBE  
                         l6300 1FAE                           l6052 343A                           l6044 3414  
                         l6036 33D4                           l6116 2BCA                           l6108 2B86  
                         l6220 381A                           l7020 4762                           l7100 234A  
                         l5430 38CA                           l5422 38A6                           l5414 3880  
                         l5406 3858                           l5510 3BEA                           l6150 2CBA  
                         l6142 2C82                           l6134 2C34                           l6126 2C18  
                         l5502 3F4E                           l6230 4646                           l7030 42D2  
                         l7014 3CE0                           l7006 3CC8                           l6310 1FE4  
                         l6302 1FB4                           l6070 349E                           l6062 3462  
                         l6054 3444                           l6046 3422                           l6038 33FE  
                         l6222 3822                           l6214 37AE                           l6206 378A  
                         l7022 4776                           l7110 2356                           l7102 234C  
                         ?_pad 0010                           l5432 38E0                           l5424 38AE  
                         l5440 38F6                           l5416 3888                           l5408 3866  
                         l5520 3C4E                           l5512 3BF8                           l5600 3A1A  
                         l6152 2CDA                           l6144 2C96                           l6128 2C1C  
                         l5504 3F54                           l6240 45D6                           l6232 465C  
                         l7024 42A2                           l7016 3CE2                           l7008 3CCA  
                         l6400 229A                           l6320 2024                           l6312 1FF4  
                         l6304 1FC2                           l6064 346E                           l6056 344E  
                         l6080 2A8E                           l6224 3832                           l6216 37B8  
                         l6208 37A6                           l7040 31B2                           l7120 2360  
                         l7112 2358                           l7104 234E                           l5442 3906  
                         l5434 38E8                           l5426 38B6                           l5418 388C  
                         l5450 391C                           l5522 437C                           l5514 3C0C  
                         l5506 3BCA                           l5602 3A3A                           l6162 2D30  
                         l6154 2CFA                           l6146 2CA6                           l6138 2C3C  
                         l5530 30A2                           l5610 3CF0                           l6242 45E2  
                         l6234 466A                           l6250 4500                           l7026 42BA  
                         l7018 3CEC                           l6410 22D0                           l6402 22B6  
                         l6322 2034                           l6330 2054                           l6314 1FF6  
                         l6306 1FC4                           l6066 347E                           l6090 2ACC  
                         l6082 2AA4                           l6074 2A2A                           l6226 3836  
                         l6218 3812                           l7050 326A                           l7042 31BE  
                         l7034 318E                           l7130 238E                           l7122 2362  
                         l7114 235A                           l7106 2350                           l6180 47D2  
                         l6500 4104                           l5444 390E                           l5436 38EA  
                         l5428 38C4                           l5460 394C                           l5452 392A  
                         l5524 438A                           l5380 3B40                           l5516 3C1C  
                         l5508 3BDA                           l5604 3A42                           l6156 2D12  
                         l6148 2CB0                           l5540 3150                           l5532 30B4  
                         l5620 3D30                           l5612 3CF4                           l6260 46A6  
                         l6244 45FA                           l6236 4676                           l6252 4540  
                         l6228 463A                           l7028 42BC                           l6404 22BA  
                         l6340 2092                           l6332 2064                           l6324 203C  
                         l6308 1FD4                           l6316 1FFE                           l5700 1664  
                         l6420 4164                           l6068 348E                           l6092 2AFE  
                         l6076 2A3A                           l7052 327A                           l7044 322A  
                         l7036 3194                           l7140 23A8                           l7132 2396  
                         l7124 2378                           l7116 235C                           l7108 2354  
                         l7060 22E0                           l5606 46F4                           l6190 47F4  
                         l6182 47D6                           l6270 47BA                           l5438 38F0  
                         l5470 3992                           l5462 395E                           l5454 3932  
                         l5382 3B4A                           l5390 4262                           l5518 3C20  
                         l5550 2D94                           l5542 2D64                           l6158 2D1C  
                         l6166 2D3C                           l5534 30B8                           l5526 303A  
                         l5622 3D38                           l5614 3D0A                           l6262 46BC  
                         l5630 3DFC                           l6238 468C                           l6254 454C  
                         l6246 44DC                           l6406 22C8                           l6350 20DA  
                         l6342 20A2                           l6334 2064                           l6326 2040  
                         l6318 200E                           l6430 3AE2                           l5710 16A4  
                         l5702 1672                           l6094 2B00                           l6086 2AB8  
                         l6078 2A48                           l6510 0EC6                           l7046 323A  
                         l7038 31A0                           l7142 23AA                           l7134 2398  
                         l7126 237A                           l7118 235E                           l7070 22FA  
                         l7062 22E4                           l5608 4704                           l6192 4222  
                         l6176 47E6                           l6184 47DC                           l6504 406E  
                         l6272 47CA                           l6600 4622                           l5480 39BE  
                         l5472 399A                           l5464 3966                           l5456 3936  
                         l5448 3918                           l5384 3B66                           l5376 3B20  
                         l5392 426E                           l5560 2DCA                           l5552 2D9A  
                         l5544 2D68                           l7240 2C64                           l5536 30F6  
                         l5528 3054                           l5624 3D40                           l5616 3D12  
                         l5632 3E16                           l6256 4564                           l6248 44E8  
                         l6264 4478                           l6408 22CE                           l6360 2128  
                         l6352 20EE                           l6344 20B2                           l6280 1F42  
                         l6432 3AF2                           l6424 3A76                           l6440 34B0  
                         l5800 1864                           l5720 16D6                           l5712 16A6  
                         l5704 1674                           l6096 2B0C                           l6088 2AC0  
                         l6520 0FA0                           l6512 0ED8                           l7056 3290  
                         l7048 324A                           l7160 242A                           l7144 23B6  
                         l7136 239A                           l7128 2382                           l7080 231A  
                         l7072 22FE                           l7064 22E8                           l6194 4226  
                         l6178 47EA                           l6186 47E0                           l6506 40B4  
                         l5474 39A0                           l5466 396E                           l5458 3944  
                         l5386 3B98                           l5378 3B30                           l5394 427C  
                         l5570 2E16                           l5562 2DD4                           l5554 2DAA  
                         l5546 2D7C                           l6610 41B2                           l5490 3F12  
                         l5538 3110                           l5618 3D28                           l5626 3D50  
                         l6258 469A                           l5650 3E5E                           l5642 3E2E  
                         l5634 3E1E                           l6266 4484                           l6602 4414  
                         l6370 2170                           l6362 2138                           l6354 20FC  
                         l6346 20C2                           l6338 2078                           l6290 1F7E  
                         l6282 1F4E                           l6434 3B16                           l6426 3AA4  
                         l6450 353A                           l6442 34DE                           l5810 18A4  
                         l5730 16FE                           l5722 16D8                           l5706 1684  
                         l5714 16AE                           l6418 4154                           l6098 2B48  
                         l6530 1094                           l6522 0FD4                           l6514 0F08  
                         l6274 42DC                           l7170 2486                           l7162 2442  
                         l7154 23F2                           l7146 23E6                           l7138 239C  
                         l7090 2340                           l7082 231E                           l7074 2302  
                         l7066 22E8                           l7058 22DC                           l6196 422E  
                         l6188 47F0                           l5468 397C                           l5476 39A6  
                         l5396 4280                           l5580 2E88                           l5564 2DDA  
                         l5572 2E32                           l5556 2DB6                           l5548 2D84  
                         l5492 3F1A                           l5484 3EF0                           l5628 3D66  
                         l5652 3E62                           l5644 3E3E                           l5636 3E26  
                         l6620 45B0                           l6612 4572                           l5660 3DA8  
                         l6268 449C                           l6604 4420                           l6380 21B0  
                         l6372 217E                           l6364 214A                           l6356 2108  
                         l6348 20CA                           l6292 1F8E                           l6284 1F5C  
                         l6436 3B1C                           l6428 3AB4                           l6452 354C  
                         l6444 34EE                           l5900 1B18                           l5820 18CE  
                         l5812 18B0                           l5804 1878                           l5740 1738  
                         l5732 170E                           l5724 16DE                           l5716 16BE  
                         l5708 1694                           l6540 1194                           l6532 10C8  
                         l6524 1008                           l6516 0F38                           l6276 42E8  
                         l6700 35EA                           l7180 2500                           l7172 2496  
                         l7164 244E                           l7156 240A                           l7092 2342  
                         l7084 2322                           l7076 230A                           l7068 22F4  
                         l6198 4236                           l5478 39B6                           l5574 2E4C  
                         l5582 2E98                           l5566 2E0C                           l5558 2DBE  
                         l5398 471C                           l6462 41DE                           l5494 3F28  
                         l5486 3EF8                           l5646 3E46                           l6622 45C8  
                         l6614 457E                           l5670 3DC8                           l5654 3D7E  
                         l6606 4438                           l6630 43E2                           l6390 2222  
                         l6382 21DE                           l6366 2160                           l6374 2190  
                         l6358 2126                           l6294 1F90                           l6286 1F5E  
                         l6454 355A                           l6446 351C                           l5910 1B54  
                         l5902 1B24                           l5830 1940                           l5814 18B4  
                         l5806 1888                           l5822 18D4                           l5750 1764  
                         l5742 174A                           l5734 171E                           l5726 16EC  
                         l5718 16C4                           l6550 1296                           l6542 11CC  
                         l6534 10FC                           l6526 103C                           l6518 0F6C  
                         l6278 42F8                           l6702 360C                           l6710 3664  
                         l7190 255C                           l7182 250C                           l7174 24C6  
                         l7166 2464                           l7158 2416                           l7094 2344  
                         l7086 2326                           l7078 2312                           l5584 2EA8  
                         l5576 2E5E                           l5568 2E10                           l5592 39C8  
                         l6464 41E6                           l6480 46DE                           l6472 46CA  
                         l6608 419C                           l5496 3F2E                           l5488 3F0A  
                         l5680 3E92                           l5648 3E4E                           l6616 4596  
                         l6624 450E                           l5672 3DD0                           l5656 3D98  
                         l6640 44CE                           l6632 43EE                           l6392 224C  
                         l6376 219E                           l6368 2166                           l6288 1F6E  
                         l6296 1F98                           l6456 35AA                           l6448 352C  
                         l5920 1B86                           l5912 1B64                           l5904 1B32  
                         l5840 199A                           l5824 18FA                           l5832 1950  
                         l5816 18C2                           l5808 1896                           l5760 1778  
                         l5752 1768                           l5744 1758                           l5736 1720  
                         l5728 16EE                           l6560 13B0                           l6552 12CE  
                         l6544 11FE                           l6536 1130                           l6528 1070  
                         l6800 3708                           l6720 3F74                           l6712 3670  
                         l6704 362E                           l7192 2568                           l7184 2522  
                         l7176 24DC                           l7168 2470                           l7096 2346  
                         l7088 233E                           l5586 2EAE                           l5578 2E6E  
                         l5594 39D0                           l6466 41F6                           l6482 46E0  
                         l6474 46D4                           l5498 3F44                           l5690 3EB6  
                         l6618 45A4                           l6626 451A                           l5674 3DE0  
                         l5666 3DB0                           l5658 3DA0                           l6642 4446  
                         l6634 4406                           l6386 2208                           l6394 2250  
                         l6378 21A2                           l6298 1FA8                           l6458 35B0  
                         l5930 1BC6                           l5922 1B94                           l5914 1B6A  
                         l5906 1B34                           l5850 19CA                           l5842 19A4  
                         l5834 1976                           l5826 192E                           l5818 18C4  
                         l5770 178C                           l5762 177C                           l5754 176C  
                         l5746 175C                           l5738 1728                           l6570 1532  
                         l6562 13E2                           l6554 1300                           l6546 1232  
                         l6538 1162                           l6810 373C                           l6802 370A  
                         l6730 32A2                           l6722 3F82                           l6650 43BC  
                         l6714 367C                           l6706 363A                           l7194 257C  
                         l7186 2538                           l7178 24E8                           l7098 2348  
                         l6492 401E                           l5588 2EBE                           l5596 39F6  
                         l6468 4216                           l6580 4348                           l6820 27EE  
                         l6476 46DA                           l6484 4744                           l5692 3EBE  
                         l6628 4532                           l5676 3DE4                           l5668 3DC0  
                         l6636 44AA                           l6644 4452                           l6900 260E  
                         l6396 226A                           l6388 2214                           l5940 1C10  
                         l5932 1BCC                           l5924 1B96                           l5916 1B7A  
                         l5908 1B44                           l5860 19F2                           l5852 19CE  
                         l5844 19B2                           l5836 1986                           l5828 1930  
                         l5780 17C6                           l5772 1790                           l5764 1780  
                         l5756 1770                           l5748 1760                           l6564 143E  
                         l6572 15C2                           l6556 1334                           l6548 1264  
                         l6812 3756                           l6804 3722                           l6740 32E2  
                         l6732 32B0                           l6724 3F92                           l6652 43D4  
                         l6716 3688                           l6708 365C                           l6660 2F10  
                         l7196 257E                           l7188 255C                           l6494 4064  
                         l6486 3FCE                           l5598 39FE                           l6582 4350  
                         l6830 284E                           l6822 27F4                           l6478 46DC  
                         l5694 3ECE                           l5686 3E9A                           l5678 3E7A  
                         l6638 44B6                           l6646 446A                           l6902 2624  
                         l6910 264A                           l6398 2280                           l5950 1C60  
                         l5942 1C1C                           l5934 1BEC                           l5926 1BA6  
                         l5918 1B80                           l5870 1A4C                           l5862 1A00  
                         l5854 19DE                           l5846 19B4                           l5790 1818  
                         l5782 17E2                           l5774 1794                           l5766 1784  
                         l5758 1774                           l6574 15F6                           l6566 1470  
                         l6558 139A                           l6814 376C                           l6806 3738  
                         l6750 3320                           l6742 32E6                           l6734 32C0  
                         l6726 3F9C                           l6718 3F64                           l6670 2F66  
                         l6662 2F20                           l6654 2EDC                           l6488 4014  
                         l6592 4608                           l6584 4358                           l6840 28AE  
                         l6832 2850                           l6824 280C                           l5696 3ED2  
                         l5688 3EAE                           l6912 2660                           l6904 2630  
                         l5960 1CA2                           l5952 1C6C                           l5944 1C26  
                         l5936 1BFC                           l5928 1BB6                           l5880 1AB6  
                         l5872 1A5A                           l5864 1A16                           l5848 19C2  
                         l5856 19E0                           l5792 1826                           l5784 17F2  
                         l5768 1788                           l5776 1798                           l6576 1606  
                         l6568 1500                           l6816 3780                           l6808 373A  
                         l6760 3368                           l6752 332E                           l6744 32F6  
                         l6736 32C4                           l6728 329E                           l6648 43B0  
                         l6680 2FBE                           l6672 2F78                           l6664 2F32  
                         l6656 2EEC                           l6498 40BE                           l6594 460C  
                         l6586 4360                           l6850 290E                           l6842 28B0  
                         l6834 2868                           l6826 2824                           l6930 26EA  
                         l6914 2676                           l6922 269C                           l6906 2646  
                         l5970 1D04                           l5962 1CAE                           l5954 1C78  
                         l5946 1C3C                           l5890 1AF0                           l5882 1AD6  
                         l5874 1A94                           l5858 19EE                           l5794 1828  
                         l5786 1808                           l5778 179C                           l5698 1658  
                         l6762 3372                           l6754 3338                           l6746 330C  
                         l6738 32D2                           l6690 3010                           l6682 2FCA  
                         l6674 2F84                           l6666 2F3E                           l6658 2EF8  
                         l6596 4618                           l6588 4370                           l6860 2972  
                         l6852 2910                           l6844 28C8                           l6836 2880  
                         l6828 283C                           l6780 433C                           l6772 4314  
                         l6940 2726                           l6924 26B2                           l6916 2682  
                         l5980 1D9A                           l5972 1D10                           l5964 1CBE  
                         l5956 1C86                           l5948 1C48                           l5892 1AF6  
                         l5884 1ADA                           l5868 1A40                           l5876 1A96  
                         l5796 1832                           l5788 1814                           l6756 3356  
                         l6748 3314                           l6764 3378                           l6692 3028  
                         l6684 2FE2                           l6676 2F9C                           l6668 2F56  
                         l6598 461A                           l6870 29AC                           l6862 2974  
                         l6854 2928                           l6846 28E0                           l6838 2898  
                         l6774 4318                           l6950 276C                           l6942 273C  
                         l6926 26C8                           l6934 26EE                           l6918 2698  
                         l5990 1DF0                           l5982 1DB8                           l5974 1D2C  
                         l5966 1CD8                           l5958 1C92                           l5894 1B04  
                         l5886 1AE8                           l5878 1AA6                           l5798 1854  
                         l6790 36D2                           l6782 36A0                           l6766 3388  
                         l6758 3366                           l6694 35B4                           l6686 2FF2  
                         l6678 2FAC                           l6880 29E0                           l6872 29C4  
                         l6864 2976                           l6856 2944                           l6848 28F8  
                         l6776 4322                           l6960 27A8                           l6952 2778  
                         l6936 2704                           l6928 26D4                           l5992 1DF4  
                         l5984 1DC2                           l5976 1D56                           l5968 1CE8  
                         l5896 1B06                           l5888 1AEE                           l6792 36D4  
                         l6784 36A6                           l6768 3398                           l6696 35BC  
                         l6688 3004                           l6882 29F8                           l6874 29DA  
                         l6866 2978                           l6858 295C                           l6778 4332  
                         l6962 27BE                           l6954 278E                           l6938 271A  
                         l6946 2740                           l6970 27E4                           l6890 25CE  
                         l5994 1E02                           l5986 1DD0                           l5978 1D8C  
                         l6794 36D6                           l6786 36BE                           l6698 35DE  
                         l6980 47B2                           l6884 2A0E                           l6876 29DC  
                         l6868 2990                           l6964 27CA                           l6948 2756  
                         l6892 25DA                           l5996 1E30                           l5988 1DE2  
                         l6796 3704                           l6788 36D0                           l6982 47B4  
                         l6974 479E                           l6878 29DE                           l6966 27E0  
                         l6958 2792                           l6894 25F0                           l6886 25A2  
                         l6990 4796                           l6798 3706                           l6976 47A8  
                         l6896 25F0                           l6888 25B8                           l6992 4798  
                         l6984 4780                           l6978 47B0                           l6898 25F8  
                         l6994 479A                           l6986 478A                           l6996 3C60  
                         l6988 478C                           l6998 3C70                           STR_1 0E8A  
                         STR_2 0EC3                           STR_3 0E01                           STR_4 0EC3  
                         STR_5 0E3B                           STR_6 0EC3                           STR_7 0E56  
                         STR_8 0EC3                           STR_9 0E1E                   _BAUD4CONbits 0EE9  
                         u5000 2DAA                           u5001 2DA6                           u5010 2E4C  
                         _T2PR 0FBC                           u5011 2E48                           u5100 471A  
                         u5020 2E5E                           u5101 4716                           u5021 2E5A  
                         u5030 2E6E                           u5110 3D0A                           u5031 2E6A  
                         u5111 3D06                           u5040 2E88                           u5120 3D28  
                         u5200 1694                           u6000 3852                           u5041 2E84  
                         u5121 3D24                           u5201 1690                           u6001 384E  
                         u6010 47CA                           u5050 2E98                           u5130 3D66  
                         u5210 16D6                           u6011 47C6                           u5051 2E94  
                         u5131 3D62                           u5211 16D2                           u5060 2EA8  
                         u5140 3D7C                           u6100 2064                           u5300 1808  
                         u5220 16EC                           u6020 4312                           u5061 2EA4  
                         u5141 3D78                           u6101 2060                           u5301 1804  
                         u5221 16E8                           u6021 430E                           u5070 39F6  
                         u5150 3E78                           u6110 20DA                           u6030 1F5C  
                         u5310 1826                           u5230 16FE                           u5071 39F2  
                         u5151 3E74                           u6111 20D6                           u6031 1F58  
                         u5311 1822                           u5231 16FA                           u5080 3A6C  
                         u5160 3DFA                           u6200 21F4                           u6120 20FC  
                         u6040 1F6E                           u5400 1976                           u5320 1846  
                         u5240 170E                           u5081 3A68                           u5161 3DF6  
                         u6201 21F0                           u6121 20F8                           u6041 1F6A  
                         u5401 1972                           u5321 1842                           u5241 170A  
                         u5090 4704                           u5170 3EEE                           u6210 2208  
                         u6130 2126                           u6050 1F7E                           u5410 1986  
                         u5330 1854                           u5250 174A                           u5091 4700  
                         u5171 3EEA                           u6211 2204                           u6131 2122  
                         u6051 1F7A                           u5411 1982                           u5331 1850  
                         u5251 1746                           u4700 3B30                           u6220 2222  
                         u6140 214A                           u6060 1FC2                           u6300 351C  
                         u5500 1A5A                           u5420 19B2                           u5340 1864  
                         u5260 1758                           u5180 1672                           u4701 3B2C  
                         u6221 221E                           u6141 2146                           u6061 1FBE  
                         u6301 3518                           u5501 1A56                           u5421 19AE  
                         u5341 1860                           u5261 1754                           u5181 166E  
                         u4710 3B40                           u6230 226A                           u6150 2160  
                         u6070 1FD4                           u6310 353A                           u5510 1A94  
                         u5430 19C2                           u5350 1896                           u5270 17C6  
                         u5190 1684                           u4711 3B3C                           u6231 2266  
                         u6151 215C                           u6071 1FD0                           u6311 3536  
                         u5511 1A90                           u5431 19BE                           u5351 1892  
                         u5271 17C2                           u5191 1680                           u7007 2F02  
                         u4800 3906                           u4720 3B66                           u6240 229A  
                         u6160 217E                           u6080 1FE4                           u6320 355A  
                         u5600 1B94                           u5520 1AA6                           u5440 19DE  
                         u5360 18A4                           u5280 17DE                           u6400 1300  
                         u4801 3902                           u4721 3B62                           u6241 2296  
                         u6161 217A                           u6081 1FE0                           u6321 3556  
                         u5601 1B90                           u5521 1AA2                           u5441 19DA  
                         u5361 18A0                           u5281 17D8                           u6401 12FC  
                         u7017 2F48                           u4810 392A                           u4730 3B98  
                         u6250 22C8                           u6170 219E                           u6090 2024  
                         u6330 35AA                           u5610 1BA6                           u5530 1AB6  
                         u5450 19EE                           u5370 18C2                           u5290 17E0  
                         u6410 139A                           u4811 3926                           u4731 3B94  
                         u6251 22C4                           u6171 219A                           u6091 2020  
                         u6331 35A6                           u5611 1BA2                           u5531 1AB2  
                         u5451 19EA                           u5371 18BE                           u6411 1396  
                         u7107 36E0                           u7027 2F8E                           u4820 3944  
                         u4740 42A0                           u4900 3BDA                           u6340 4216  
                         u6180 21B0                           u6260 3AA4                           u5700 1E46  
                         u5620 1BB6                           u5540 1AD6                           u5460 1A00  
                         u5380 18FA                           u6420 13E2                           u6500 2F78  
                         u4821 3940                           u4741 429C                           u4901 3BD6  
                         u6341 4212                           u6181 21AC                           u6261 3AA0  
                         u5701 1E42                           u5621 1BB2                           u5541 1AD2  
                         u5461 19FC                           u5381 18F6                           u6421 13DE  
                         u7117 3714                           u7037 2FD4                           u6501 2F74  
                         u4750 3866                           u4830 395E                           u4910 3BF8  
                         u6190 21DE                           u6270 3AE2                           u5710 1E5A  
                         u5630 1BEC                           u5550 1AE8                           u5470 1A16  
                         u5390 1940                           u6430 1470                           u6350 1162  
                         u6510 2FBE                           u4751 3862                           u4831 395A  
                         u4911 3BF4                           u7207 3DD6                           u6191 21DA  
                         u6271 3ADE                           u5711 1E56                           u5631 1BE8  
                         u5551 1AE4                           u5471 1A12                           u5391 193C  
                         u6431 146C                           u6351 115E                           u7127 3748  
                         u7047 301A                           u6511 2FBA                           u4760 3880  
                         u4840 397C                           u4920 3C3E                           u6280 3B16  
                         u5720 1E74                           u5640 1BFC                           u5560 1B04  
                         u5480 1A2C                           u5800 345E                           u6440 1532  
                         u6360 1194                           u6600 32D2                           u6520 3004  
                         u4761 387C                           u4841 3978                           u4921 3C3A  
                         u7217 4524                           u7137 43F8                           u6281 3B12  
                         u5721 1E70                           u5641 1BF8                           u5561 1B00  
                         u5481 1A28                           u5801 345A                           u6441 152E  
                         u6361 1190                           u6601 32CE                           u7057 3692  
                         u6521 3000                           u4770 38A6                           u4850 3992  
                         u4930 3C4E                           u6290 34DE                           u5730 1EBC  
                         u5650 1D76                           u5570 1B32                           u5490 1A40  
                         u5810 347E                           u6450 1606                           u6370 11FE  
                         u6610 330C                           u6530 35DE                           u4771 38A2  
                         u4851 398E                           u4931 3C4A                           u7307 3EC4  
                         u7227 4556                           u7147 442A                           u6291 34DA  
                         u5731 1EB8                           u5571 1B2E                           u5491 1A3C  
                         u5811 347A                           u6451 1602                           u6371 11FA  
                         u6611 3308                           u7067 3828                           u6531 35DA  
                         u6460 4638                           u4780 38C4                           u4860 39B6  
                         u4940 438A                           u6700 2A0E                           u5740 1EEA  
                         u5660 1DD0                           u5580 1B44                           u5820 348E  
                         u5900 2B80                           u6380 1264                           u6620 332E  
                         u6540 360C                           u6461 4634                           u4781 38C0  
                         u4861 39B2                           u4941 4386                           u6701 2A0A  
                         u7317 4328                           u7237 4588                           u7157 4650  
                         u5741 1EE6                           u5661 1DCC                           u5581 1B40  
                         u5821 348A                           u5901 2B7C                           u6381 1260  
                         u6621 332A                           u7077 42EE                           u6541 3608  
                         u4790 38E0                           u6470 41B2                           u4870 3F0A  
                         u4950 3054                           u6710 25B8                           u5750 1F24  
                         u5670 1DF0                           u5590 1B54                           u5910 2BBA  
                         u5830 2A3A                           u6390 1296                           u6630 3356  
                         u6550 362E                           u4791 38DC                           u7327 282E  
                         u6471 41AE                           u4871 3F06                           u4951 3050  
                         u7247 4680                           u7167 445C                           u6711 25B4  
                         u5751 1F20                           u5671 1DEC                           u5655 1D6C  
                         u5591 1B50                           u5911 2BB6                           u5831 2A36  
                         u6391 1292                           u6631 3352                           u7087 43C6  
                         u6551 362A                           u4880 3F28                           u4960 3110  
                         u6800 271A                           u6720 25CE                           u5680 1E02  
                         u5760 33C0                           u5920 2BC8                           u5840 2A48  
                         u6640 3388                           u6560 365C                           u6480 2EEC  
                         u7337 288A                           u4881 3F24                           u4961 310C  
                         u7257 45BA                           u7177 448E                           u6801 2716  
                         u6721 25CA                           u5681 1DFE                           u5761 33BC  
                         u5921 2BC4                           u5841 2A44                           u7097 36B0  
                         u6641 3384                           u6561 3658                           u6481 2EE8  
                         u4970 2D78                           u5930 2C02                           u6650 2822  
                         u4890 3F44                           u6810 2756                           u6730 260E  
                         u5690 1E30                           u5770 33F4                           u5850 2AA4  
                         u6570 3F82                           u6490 2F32                           u4971 2D72  
                         u5931 2BFE                           u7347 28EA                           u6651 281E  
                         u4891 3F40                           u7267 45EC                           u7187 44C0  
                         u6811 2752                           u6731 260A                           u5691 1E2C  
                         u5851 2AA0                           u6571 3F7E                           u6491 2F2E  
                         u4980 2D7A                           u5940 2C82                           u6660 287E  
                         u6820 276C                           u6740 2624                           u5780 3422  
                         u5860 2AFA                           u6580 3FBC                           u6900 2522  
                         u5941 2C7E                           u7357 294E                           u6661 287A  
                         u7277 3E54                           u7197 44F2                           u6821 2768  
                         u6741 2620                           u5781 341E                           u5861 2AF6  
                         u6581 3FB8                           u6901 251E                           u4990 2D94  
                         u5950 2CA6                           u6670 28DE                           u6830 27A8  
                         u6750 2660                           u5790 3436                           u5870 2B44  
                         u6590 32B0                           u6910 2538                           u4991 2D90  
                         u5951 2CA2                           u7367 29B6                           u6671 28DA  
                         u7287 46B0                           u6831 27A4                           u6751 265C  
                         u5791 3432                           u5775 33EA                           u5871 2B40  
                         u6591 32AC                           u6911 2534                           u5960 2CDA  
                         u6680 293E                           u6840 27BE                           u6760 2676  
                         u5880 2B62                           u6920 254E                           u5961 2CD6  
                         u7377 2A18                           u6681 293A                           u7297 3D46  
                         u6841 27BA                           u6761 2672                           u5881 2B5E  
                         u6921 254A                           u5970 2CFA                           u6690 29A6  
                         u6770 26B2                           u5890 2B72                           u6850 31B2  
                         u6930 255C                           u7387 461C                           u5971 2CF6  
                         u6691 29A2                           u6771 26AE                           u5891 2B6E  
                         u6851 31AE                           u6931 2558                           u5980 424A  
                         u6780 26C8                           u6860 324A                           u5981 4242  
                         u6781 26C4                           u6861 3246                           u6790 2704  
                         u6870 328C                           u6791 2700                           u6871 3288  
                         u6880 2408                           u6881 2404                           u6890 24DC  
                         u6891 24D8                           u6957 236C                           u5998 424C  
                         u6967 2434                           u6977 2458                           u6987 247A  
                         u6997 24F2                           abs@a 0008                           _dbuf 0182  
                         _main 22DC                           _dtoa 2D64           convert_rgb2hue@cCurr 0034  
                         _prec 00CC                           _time 0200                           pad@i 0016  
                         pad@p 0013                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 0058                           _stop 3CF0            fullSpeedAhead@power 0036  
                         prodh 0FF4                           prodl 0FF3                           start 003A  
             __end_of_ADC_init 47B8                ___fldiv@new_exp 002B         __end_of_color_read_Red 401E  
                 ___param_bank 0000                 reading_hue@hue 003B                          ??_abs 000A  
                        ??_pad 0015                  ___fltol@sign1 0031                __end_of___aldiv 33AA  
              __end_of___fladd 1B18                          ?_main 0001                          ?_dtoa 0018  
                        _ADPCH 0F5F                __end_of___fldiv 22DC                __end_of___awdiv 3918  
                        STR_10 0EC3                          STR_11 0E71                          STR_12 0EC3  
                        STR_13 0EA2                          STR_14 0EB7                __end_of___awmod 39C8  
              __end_of___flmul 1F42                __end_of___flsub 419A                __end_of___fltol 34B0  
                        ?_stop 0014                ___awdiv@divisor 0004                __end_of___lwdiv 3F64  
                        i1l654 0032                ___awdiv@counter 0006              ??_convert_rgb2hue 0035  
                 vfpfcnvrt@fmt 0024                          _TMR0H 0FD4                          _TMR0L 0FD3  
          ___lmul@multiplicand 0006                __end_of_left135 4572        __end_of_sendCharSerial4 47D0  
   __end_of_I2C_2_Master_Start 47F0     __end_of_I2C_2_Master_Write 47DC                          _flags 00CE  
          read_prec_or_width@c 000A            read_prec_or_width@n 000B                          _fputc 3B20  
                        _fputs 4262                          pad@fp 0010                          _width 00CA  
                        _putch 47FA                          dtoa@d 0019                          dtoa@i 0021  
                        dtoa@p 001D                __end_of_right90 466A                          dtoa@s 0020  
                        dtoa@w 001E                   ?_reading_hue 0037                __end_of_moveRed 4446  
                        tablat 0FF5                __end_of_turn180 4608                          ttemp5 0059  
                        ttemp6 005C                          ttemp7 0060                          status 0FD8  
                        wtemp8 0059                __end_of_sprintf 437C          convert_rgb2hue@redmax 0064  
      __end_of_color_read_Blue 410E          _I2C_2_Master_RepStart 47F0                ?_color_read_Red 0006  
              __initialization 410E                   __end_of_main 25A2                   __end_of_dtoa 2EDC  
                 __end_of_stop 3D7E          __end_of_moveLightBlue 4540                _get16bitTMR0val 42A2  
                       ??_main 004D                         ??_dtoa 001B                         ??_stop 0016  
                __activetblptr 0003     __end_of_read_prec_or_width 3A76                _reverseStraight 35B4  
                 ?_setMotorPWM 000F                         ?_fputc 0002                         ?_fputs 000A  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0002  
             __end_of_backHalf 46CA                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         i1l3432 001E                         i1l3434 002E  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         _RG6PPS 0E88  
                vfpfcnvrt@done 002C       __end_of_color_click_init 4348                         _RX4PPS 0E15  
                       _TX4REG 0EE4               __end_of___xxtofl 2BDC    convert_rgb2hue@greencurrent 0068  
             __end_of_decision 27EE                         _LowISR 0018                  main@path_step 0051  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031                         ___flge 34B0  
                       ___fleq 3A76                         ___lmul 3F64                      ??___aldiv 0016  
                    ??___fladd 000A                         ___wmul 471C                      ??___fldiv 0022  
             backOneAndHalf@mL 0019                      ??___awdiv 0006               backOneAndHalf@mR 001A  
                    ??___awmod 0006                      ??___flmul 0018                         _action 013C  
                    ??___flsub 001A                      ??___fltol 002D                      ??___lwdiv 000C  
                       _left90 466A           read_prec_or_width@ap 0009                   ?_reverseTurn 001D  
                       clear_0 4126                         clear_1 4132                         clear_2 413E  
             ___awdiv@quotient 0008                ___awmod@divisor 0004                         _motorL 00EE  
                       _motorR 00E5                         isa$std 0001                ___awmod@counter 0006  
                    ??_left135 001B             send2USART@hue_char 0060                         pad@buf 0011  
             __end_of_right135 450E                         dtoa@fp 0018               __end_of_moveBlue 45D6  
             __end_of_movePink 4478                         fputc@c 0002                         fputs@c 000D  
                       fputs@i 000E                         fputs@s 000A                      ??_right90 001B  
                 __mediumconst 0000        calibration_routine@cCal 0045                      ??_moveRed 001F  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074  
                       putch@c 0001               __end_of_vfprintf 4220                      ??_turn180 001B  
                       stop@mL 0014                         stop@mR 0015              ??_initDCmotorsPWM 0004  
                    ??_sprintf 0038               __end_of_turnLeft 3E7A       get16bitTMR0val@path_step 0007  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 414A       __end_of_color_read_Clear 40BE  
     __end_of_color_read_Green 406E         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 4478  
                ___rparam_used 0001                     ___fltol@f1 0029               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 42DC                  _fullSpeedBack 3E7A  
                 __pidataBANK0 47FC                  __end_of_fputc 3BCA                  __end_of_fputs 42A2  
                __end_of_putch 47FC        __end_of_reverseStraight 36A0               reading_hue@cCurr 0037  
                   ??_ADC_init 0002                 main@clear_norm 0053                     backHalf@mL 0019  
                   backHalf@mR 001A                        ??_fputc 0005                        ??_fputs 000D  
                      ??_putch 0002                     __pbssBANK0 00AC                     __pbssBANK1 0100  
                   __pbssBANK2 0200         __end_of_backOneAndHalf 44AA                        ?_LowISR 0001  
            _color_writetoaddr 4742                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014  
              _convert_rgb2hue 0EC6                        ?___flge 0002                        ?___fleq 0002  
           ?_color_writetoaddr 0004                        ?___lmul 0002                  _customDelayMs 42DC  
                      ?___wmul 0002                        ?_left90 0019          reverseTurn@actionStep 001F  
               ___lmul@product 000A                      ?_backHalf 0019            ??_color_writetoaddr 0005  
                    ?___xxtofl 0002            _convert_rgb2hue$433 0080            _convert_rgb2hue$434 0084  
          _convert_rgb2hue$435 0088            _convert_rgb2hue$436 008C                      ?_decision 0021  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001D                    moveGreen@mR 001E  
              ?_backOneAndHalf 0019         color_writetoaddr@value 0004               ??_color_read_Red 0008  
    __end_of_color_writetoaddr 4762                      _ADREFbits 0F58                      ?_right135 0019  
           _I2C_2_Master_Start 47E6                     _initUSART4 4780             _I2C_2_Master_Write 47D0  
                    ?_moveBlue 001D                        __Hparam 0000                      ?_movePink 001D  
                      __Lparam 0000              color_read_Red@tmp 000B                    moveWhite@mL 001D  
                  moveWhite@mR 001E      customDelayMs@milliseconds 0002                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0007                        ___aldiv 329E  
                      ___fladd 1658                        ___fldiv 1F42                        ___awdiv 3854  
                      ___awmod 3918                        ___flmul 1B18                        ___flsub 4154  
                      ___fltol 33AA            ?_I2C_2_Master_Start 0001                        ___lwdiv 3EF0  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E                   __psmallconst 0E00  
                      __pcinit 410E                     ??_backHalf 001B              __end_of_logAction 41DE  
                      __ramtop 0E00               ?_reverseStraight 0038                     _send2USART 4762  
                    ?_turnLeft 0014                        _left135 4540                        __ptext0 22DC  
                      __ptext1 4762                        __ptext2 318E                        __ptext3 2EDC  
                      __ptext4 35B4                        __ptext5 378A                        __ptext6 42DC  
                      __ptext7 43B0                        __ptext8 3F64                        __ptext9 329E  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0008                     ??___xxtofl 0006  
             ___awmod@dividend 0002                     ??_decision 0025         reverseStraight@delayMs 0040  
             ___aldiv@dividend 000E                        _right90 463A                      _T2HLTbits 0FBE  
                      _moveRed 4414                  _RxBufWriteCnt 0057                        _turn180 45D6  
                      _sprintf 4348                        main@hue 004F           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 414A              __end_of_moveGreen 45A4  
       reverseStraight@time_ms 003A              __end_of_moveWhite 43E2                        fputc@fp 0004  
      __end_of_convert_rgb2hue 1658                        fputs@fp 000C              ?_color_click_init 0001  
           _read_prec_or_width 39C8                     _moveOrange 44AA                     ??_right135 001B  
                   _moveYellow 43E2                ??_fullSpeedBack 0016                     ??_moveBlue 001F  
           ??_color_click_init 0006        convert_rgb2hue@clearmax 007C                     ??_movePink 001F  
             _colorCalibration 00DB            returnHome@path_step 0044              __end_of_vfpfcnvrt 2D64  
             ___aldiv@quotient 0018                        postdec2 0FDD            ?_read_prec_or_width 0008  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0028                     ??_vfprintf 0031        convert_rgb2hue@greenmax 006C  
                 _colorCurrent 00D1                     _returnHome 318E                _initDCmotorsPWM 3C60  
                   ??_turnLeft 0016                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 3DFC                    ___fladd@grs 0011                  ___xxtofl@sign 000A  
                  returnHome@i 004B                      _TRISAbits 0F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002D               convert_rgb2hue@r 00A0                    ___fldiv@rem 0026  
             fullSpeedAhead@mL 0033               fullSpeedAhead@mR 0034       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 001E                    _CCP1CONbits 0FAB  
          _calibration_routine 27EE              ?_color_read_Clear 0006                   _EUSART4RXbuf 00AC  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002                ??_customDelayMs 0004  
           ??_color_read_Clear 0008             ??_color_read_Green 0008                 __end_of_LowISR 003A  
    convert_rgb2hue@redcurrent 0060                 __end_of___flge 35B4                 __end_of___fleq 3B20  
               _fullSpeedAhead 378A                 __end_of___lmul 3FCE                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 4742  
               __end_of_left90 469A                    ?_send2USART 0045           ?_calibration_routine 0045  
          color_read_Clear@tmp 000B            start_initialization 410E   calibration_routine@cal_state 0060  
                  __end_of_abs 43B0                    __end_of_pad 3C60                  _TxBufWriteCnt 0056  
             ?_convert_rgb2hue 0033                    ?_moveOrange 001D                    ?_moveYellow 001D  
          color_read_Green@tmp 000B                       ??_LowISR 0001        __end_of_initDCmotorsPWM 3CF0  
                  vfprintf@fmt 002F         __end_of_fullSpeedAhead 3854                       ??___flge 000A  
                     ??___fleq 000A                       ??___lmul 000A                       ??___wmul 0006  
                     ??_left90 001B                    __pdataBANK0 00F7                    ?_returnHome 0042  
        ??_calibration_routine 0046                  _moveLightBlue 450E                      ___fladd@a 0006  
                    ___fladd@b 0002                      ___fldiv@a 001E                      ___fldiv@b 001A  
                    ___flmul@a 0014                      ___flmul@b 0010                    __pbssCOMRAM 0055  
                    ___flsub@a 0016                      ___flsub@b 0012                  __pcstackBANK0 0060  
             ??_backOneAndHalf 001B              reverseStraight@mL 0038              reverseStraight@mR 0039  
        returnHome@action_turn 004A                  ??_reading_hue 0039                     right135@mL 0019  
                   right135@mR 001A               ___lwdiv@dividend 0008                      _dtoa$3087 001B  
              ?_fullSpeedAhead 0033                       ?___aldiv 000E                       ?___fladd 0002  
                     ?___fldiv 001A                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 0010                       ?___flsub 0012                       ?___fltol 0029  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00CF           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 46F4                      _logAction 419A              _I2C_2_Master_Init 46CA  
            _I2C_2_Master_Read 4220                       ?_right90 0019              _I2C_2_Master_Stop 47DC  
                     ?_moveRed 001D                   _RxBufReadCnt 00D0                       _ADC_init 479E  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000D       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
              ___aldiv@divisor 0012              _sendStringSerial4 4608            ??_I2C_2_Master_Idle 0002  
              ___aldiv@counter 0016            ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003  
               ___wmul@product 0006                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0003  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29             ?_sendStringSerial4 0003  
                    _moveGreen 4572                       _PIE4bits 0E2D            __end_of_reading_hue 378A  
                     i1u236_20 002E                       i1u236_21 002A                      _moveWhite 43B0  
                  turnRight@mL 0014                    turnRight@mR 0015                       _PIR0bits 0E33  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0002                      left135@mL 0019  
                    left135@mR 001A              ??_sendCharSerial4 0002                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                  ??_reverseTurn 0020  
                    _vfpfcnvrt 2BDC                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 471C  
    __end_of_I2C_2_Master_Init 46F4      __end_of_I2C_2_Master_Read 4262              ___wmul@multiplier 0002  
    __end_of_I2C_2_Master_Stop 47E6                   setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003  
                  _ldrReadings 016E                     ?_logAction 0002              ??_color_read_Blue 0008  
                 _TxBufReadCnt 0055                      _turnRight 3D7E              ___lmul@multiplier 0002  
    __end_of_sendStringSerial4 463A                   moveOrange@mL 001D                   moveOrange@mR 001E  
__end_of_I2C_2_Master_RepStart 47FA             color_read_Blue@tmp 000B            __end_of_setMotorPWM 318E  
                 ??_initUSART4 0002                     ?_moveGreen 001D                     ?_moveWhite 001D  
                     __Hrparam 0000                     vfprintf@ap 0030                       __Lrparam 0000  
                   vfprintf@fp 002E          __end_of_fullSpeedBack 3EF0                ??_moveLightBlue 001F  
                 moveYellow@mL 001D                   moveYellow@mR 001E                     ?_vfpfcnvrt 0023  
                     _backHalf 469A                   ??_send2USART 0047                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00F7                     sprintf@fmt 0033  
                     ___xxtofl 2A28                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 25A2            __end_of_reverseTurn 303A                      right90@mL 0019  
                    right90@mR 001A                ___lwdiv@divisor 000A             __end_of_initUSART4 479E  
              ___lwdiv@counter 000C                     ?_turnRight 0014                       __ptext10 36A0  
                     __ptext11 0EC6                       __ptext20 4780                       __ptext12 2A28  
                     __ptext21 3C60                       __ptext13 33AA                       __ptext30 44DC  
                     __ptext22 42A2                       __ptext14 4154                       __ptext31 3D7E  
                     __ptext23 25A2                       __ptext15 1658                       __ptext40 3CF0  
                     __ptext32 450E                       __ptext24 43E2                       __ptext16 1B18  
                     __ptext41 3E7A                       __ptext33 4540                       __ptext25 4414  
                     __ptext17 34B0                       __ptext50 41DE                       __ptext42 303A  
                     __ptext34 4572                       __ptext26 463A                       __ptext18 3A76  
                     __ptext51 2BDC                       __ptext43 3EF0                       __ptext35 466A  
                     __ptext27 4446                       __ptext19 1F42                       __ptext60 3918  
                     __ptext52 39C8                       __ptext44 419A                       __ptext36 45A4  
                     __ptext28 4478                       __ptext61 3854                       __ptext53 471C  
                     __ptext45 4314                       __ptext37 45D6                       __ptext29 44AA  
                     __ptext70 47E6                       __ptext62 4608                       __ptext54 2D64  
                     __ptext46 4742                       __ptext38 3DFC                       __ptext71 47F0  
                     __ptext63 47B8                       __ptext55 3BCA                       __ptext47 46CA  
                     __ptext39 469A                       __ptext72 4220                       __ptext64 3FCE  
                     __ptext56 4262                       __ptext48 27EE                       __ptext73 46F4  
                     __ptext65 401E                       __ptext57 3B20                       __ptext49 4348  
                     __ptext74 479E                       __ptext66 406E                       __ptext58 47FA  
                     __ptext67 40BE                       __ptext59 437C                       __ptext68 47D0  
                     __ptext69 47DC                    decision@hue 0021                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 36A0                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 001F                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 001F             __end_of_send2USART 4780                       _right135 44DC  
                     _moveBlue 45A4                       _movePink 4446                     turnRight@i 0017  
        __end_of_customDelayMs 4314                       isa$xinst 0000                       left90@mL 0019  
                     left90@mR 001A                     _RC4STAbits 0EE7              returnHome@time_ms 0046  
                     int$flags 0058                       _vfprintf 41DE                   ??_returnHome 0046  
                     _turnLeft 3DFC                      turn180@mL 0019                      turn180@mR 001A  
                  ??_logAction 0006                     _INTCONbits 0FF2                 customDelayMs@i 0005  
           __end_of_moveOrange 44DC             __end_of_moveYellow 4414                    _setMotorPWM 303A  
            ??_get16bitTMR0val 0009                       intlevel1 0000                      sprintf@ap 0038  
            decision@path_step 0023              ??_reverseStraight 003E               ??_fullSpeedAhead 0035  
get16bitTMR0val@combined_value 000D             __end_of_returnHome 329E                    ??_moveGreen 001F  
                    turnLeft@i 0017                    ??_moveWhite 001F    __end_of_calibration_routine 2A28  
  convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045                    ??_vfpfcnvrt 0026  
                  _reverseTurn 2EDC               _color_click_init 4314                       sprintf@f 0039  
                     sprintf@s 0032                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                 ___aldiv@sign 0017                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 47B8                   ___fladd@aexp 000F  
                 ___fladd@bexp 0010                   returnHome@mL 0042                   returnHome@mR 0043  
