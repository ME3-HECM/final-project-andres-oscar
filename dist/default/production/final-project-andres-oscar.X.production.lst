

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 05:21:12 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=3
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=2
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    97   000000                     
    98                           ; Generated 21/07/2023 GMT
    99                           ; 
   100                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F67K40 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132   000000                     
   133                           	psect	idataBANK0
   134   004D3A                     __pidataBANK0:
   135                           	callstack 0
   136                           
   137                           ;initializer for _dataFlag
   138   004D3A  01                 	db	1
   139   000000                     _TMR0H	set	4052
   140   000000                     _TX4REG	set	3812
   141   000000                     _RC4STAbits	set	3815
   142   000000                     _SP4BRGH	set	3814
   143   000000                     _LATHbits	set	3968
   144   000000                     _TRISFbits	set	3974
   145   000000                     _TRISAbits	set	3969
   146   000000                     _TRISEbits	set	3973
   147   000000                     _TRISGbits	set	3975
   148   000000                     _TRISDbits	set	3972
   149   000000                     _CCPR2H	set	4006
   150   000000                     _CCPR1H	set	4010
   151   000000                     _SSP2CON2bits	set	3802
   152   000000                     _RX4PPS	set	3605
   153   000000                     _SSP2CLKPPS	set	3612
   154   000000                     _SSP2DATPPS	set	3613
   155   000000                     _ANSELDbits	set	3751
   156   000000                     _SSP2ADD	set	3798
   157   000000                     _SSP2CON1bits	set	3801
   158   000000                     _LATAbits	set	3961
   159   000000                     _LATEbits	set	3965
   160   000000                     _LATGbits	set	3967
   161   000000                     _LATCbits	set	3963
   162   000000                     _RC4REG	set	3811
   163   000000                     _SP4BRGL	set	3813
   164   000000                     _TX4STAbits	set	3816
   165   000000                     _BAUD4CONbits	set	3817
   166   000000                     _SSP2CON2	set	3802
   167   000000                     _CCPR4H	set	3873
   168   000000                     _CCPR3H	set	3877
   169   000000                     _SSP2STAT	set	3800
   170   000000                     _ANSELFbits	set	3764
   171   000000                     _SSP2BUF	set	3797
   172   000000                     _IPR0bits	set	3615
   173   000000                     _PIE0bits	set	3625
   174   000000                     _PIE4bits	set	3629
   175   000000                     _PIR4bits	set	3639
   176   000000                     _RC0PPS	set	3682
   177   000000                     _RC7PPS	set	3689
   178   000000                     _RD5PPS	set	3695
   179   000000                     _RE2PPS	set	3700
   180   000000                     _RD6PPS	set	3696
   181   000000                     _CCP1CONbits	set	4011
   182   000000                     _CCPTMRS0bits	set	4013
   183   000000                     _T2PR	set	4028
   184   000000                     _T2CONbits	set	4029
   185   000000                     _T0CON0bits	set	4053
   186   000000                     _CCP2CONbits	set	4007
   187   000000                     _CCP3CONbits	set	3878
   188   000000                     _ADREFbits	set	3928
   189   000000                     _CCP4CONbits	set	3874
   190   000000                     _PORTFbits	set	3982
   191   000000                     _TRISHbits	set	3976
   192   000000                     _TRISCbits	set	3971
   193   000000                     _INTCONbits	set	4082
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _ADPCH	set	3935
   196   000000                     _ADRESH	set	3940
   197   000000                     _ADCON0bits	set	3936
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _TMR0L	set	4051
   201   000000                     _T2CLKCONbits	set	4031
   202   000000                     _T2HLTbits	set	4030
   203   000000                     _PIR0bits	set	3635
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_5:
   210                           
   211                           ; BSR set to: 14
   212   000E01  43                 	db	67	;'C'
   213   000E02  61                 	db	97	;'a'
   214   000E03  6C                 	db	108	;'l'
   215   000E04  69                 	db	105	;'i'
   216   000E05  62                 	db	98	;'b'
   217   000E06  72                 	db	114	;'r'
   218   000E07  61                 	db	97	;'a'
   219   000E08  74                 	db	116	;'t'
   220   000E09  69                 	db	105	;'i'
   221   000E0A  6F                 	db	111	;'o'
   222   000E0B  6E                 	db	110	;'n'
   223   000E0C  20                 	db	32
   224   000E0D  73                 	db	115	;'s'
   225   000E0E  74                 	db	116	;'t'
   226   000E0F  61                 	db	97	;'a'
   227   000E10  74                 	db	116	;'t'
   228   000E11  65                 	db	101	;'e'
   229   000E12  20                 	db	32
   230   000E13  3D                 	db	61	;'='
   231   000E14  20                 	db	32
   232   000E15  67                 	db	103	;'g'
   233   000E16  72                 	db	114	;'r'
   234   000E17  65                 	db	101	;'e'
   235   000E18  65                 	db	101	;'e'
   236   000E19  6E                 	db	110	;'n'
   237   000E1A  20                 	db	32
   238   000E1B  0A                 	db	10
   239   000E1C  0D                 	db	13
   240   000E1D  00                 	db	0
   241   000E1E                     STR_11:
   242                           
   243                           ; BSR set to: 14
   244   000E1E  43                 	db	67	;'C'
   245   000E1F  61                 	db	97	;'a'
   246   000E20  6C                 	db	108	;'l'
   247   000E21  69                 	db	105	;'i'
   248   000E22  62                 	db	98	;'b'
   249   000E23  72                 	db	114	;'r'
   250   000E24  61                 	db	97	;'a'
   251   000E25  74                 	db	116	;'t'
   252   000E26  69                 	db	105	;'i'
   253   000E27  6F                 	db	111	;'o'
   254   000E28  6E                 	db	110	;'n'
   255   000E29  20                 	db	32
   256   000E2A  73                 	db	115	;'s'
   257   000E2B  74                 	db	116	;'t'
   258   000E2C  61                 	db	97	;'a'
   259   000E2D  74                 	db	116	;'t'
   260   000E2E  65                 	db	101	;'e'
   261   000E2F  20                 	db	32
   262   000E30  3D                 	db	61	;'='
   263   000E31  20                 	db	32
   264   000E32  20                 	db	32
   265   000E33  61                 	db	97	;'a'
   266   000E34  6D                 	db	109	;'m'
   267   000E35  62                 	db	98	;'b'
   268   000E36  69                 	db	105	;'i'
   269   000E37  65                 	db	101	;'e'
   270   000E38  6E                 	db	110	;'n'
   271   000E39  74                 	db	116	;'t'
   272   000E3A  00                 	db	0
   273   000E3B                     STR_7:
   274                           
   275                           ; BSR set to: 14
   276   000E3B  43                 	db	67	;'C'
   277   000E3C  61                 	db	97	;'a'
   278   000E3D  6C                 	db	108	;'l'
   279   000E3E  69                 	db	105	;'i'
   280   000E3F  62                 	db	98	;'b'
   281   000E40  72                 	db	114	;'r'
   282   000E41  61                 	db	97	;'a'
   283   000E42  74                 	db	116	;'t'
   284   000E43  69                 	db	105	;'i'
   285   000E44  6F                 	db	111	;'o'
   286   000E45  6E                 	db	110	;'n'
   287   000E46  20                 	db	32
   288   000E47  73                 	db	115	;'s'
   289   000E48  74                 	db	116	;'t'
   290   000E49  61                 	db	97	;'a'
   291   000E4A  74                 	db	116	;'t'
   292   000E4B  65                 	db	101	;'e'
   293   000E4C  3D                 	db	61	;'='
   294   000E4D  20                 	db	32
   295   000E4E  62                 	db	98	;'b'
   296   000E4F  6C                 	db	108	;'l'
   297   000E50  75                 	db	117	;'u'
   298   000E51  65                 	db	101	;'e'
   299   000E52  20                 	db	32
   300   000E53  0A                 	db	10
   301   000E54  0D                 	db	13
   302   000E55  00                 	db	0
   303   000E56                     STR_9:
   304                           
   305                           ; BSR set to: 14
   306   000E56  43                 	db	67	;'C'
   307   000E57  61                 	db	97	;'a'
   308   000E58  6C                 	db	108	;'l'
   309   000E59  69                 	db	105	;'i'
   310   000E5A  62                 	db	98	;'b'
   311   000E5B  72                 	db	114	;'r'
   312   000E5C  61                 	db	97	;'a'
   313   000E5D  74                 	db	116	;'t'
   314   000E5E  69                 	db	105	;'i'
   315   000E5F  6F                 	db	111	;'o'
   316   000E60  6E                 	db	110	;'n'
   317   000E61  20                 	db	32
   318   000E62  73                 	db	115	;'s'
   319   000E63  74                 	db	116	;'t'
   320   000E64  61                 	db	97	;'a'
   321   000E65  74                 	db	116	;'t'
   322   000E66  65                 	db	101	;'e'
   323   000E67  20                 	db	32
   324   000E68  3D                 	db	61	;'='
   325   000E69  20                 	db	32
   326   000E6A  20                 	db	32
   327   000E6B  77                 	db	119	;'w'
   328   000E6C  68                 	db	104	;'h'
   329   000E6D  69                 	db	105	;'i'
   330   000E6E  74                 	db	116	;'t'
   331   000E6F  65                 	db	101	;'e'
   332   000E70  00                 	db	0
   333   000E71                     STR_13:
   334                           
   335                           ; BSR set to: 14
   336   000E71  43                 	db	67	;'C'
   337   000E72  41                 	db	65	;'A'
   338   000E73  4C                 	db	76	;'L'
   339   000E74  49                 	db	73	;'I'
   340   000E75  42                 	db	66	;'B'
   341   000E76  52                 	db	82	;'R'
   342   000E77  41                 	db	65	;'A'
   343   000E78  54                 	db	84	;'T'
   344   000E79  49                 	db	73	;'I'
   345   000E7A  4F                 	db	79	;'O'
   346   000E7B  4E                 	db	78	;'N'
   347   000E7C  20                 	db	32
   348   000E7D  43                 	db	67	;'C'
   349   000E7E  4F                 	db	79	;'O'
   350   000E7F  4D                 	db	77	;'M'
   351   000E80  50                 	db	80	;'P'
   352   000E81  4C                 	db	76	;'L'
   353   000E82  45                 	db	69	;'E'
   354   000E83  54                 	db	84	;'T'
   355   000E84  45                 	db	69	;'E'
   356   000E85  44                 	db	68	;'D'
   357   000E86  20                 	db	32
   358   000E87  0A                 	db	10
   359   000E88  0D                 	db	13
   360   000E89  00                 	db	0
   361   000E8A                     STR_3:
   362                           
   363                           ; BSR set to: 14
   364   000E8A  43                 	db	67	;'C'
   365   000E8B  61                 	db	97	;'a'
   366   000E8C  6C                 	db	108	;'l'
   367   000E8D  69                 	db	105	;'i'
   368   000E8E  62                 	db	98	;'b'
   369   000E8F  72                 	db	114	;'r'
   370   000E90  61                 	db	97	;'a'
   371   000E91  74                 	db	116	;'t'
   372   000E92  69                 	db	105	;'i'
   373   000E93  6F                 	db	111	;'o'
   374   000E94  6E                 	db	110	;'n'
   375   000E95  20                 	db	32
   376   000E96  73                 	db	115	;'s'
   377   000E97  74                 	db	116	;'t'
   378   000E98  61                 	db	97	;'a'
   379   000E99  74                 	db	116	;'t'
   380   000E9A  65                 	db	101	;'e'
   381   000E9B  20                 	db	32
   382   000E9C  3D                 	db	61	;'='
   383   000E9D  20                 	db	32
   384   000E9E  72                 	db	114	;'r'
   385   000E9F  65                 	db	101	;'e'
   386   000EA0  64                 	db	100	;'d'
   387   000EA1  00                 	db	0
   388   000EA2                     
   389                           ; BSR set to: 14
   390   000EA2  56                 	db	86	;'V'
   391   000EA3  6F                 	db	111	;'o'
   392   000EA4  6C                 	db	108	;'l'
   393   000EA5  74                 	db	116	;'t'
   394   000EA6  61                 	db	97	;'a'
   395   000EA7  67                 	db	103	;'g'
   396   000EA8  65                 	db	101	;'e'
   397   000EA9  20                 	db	32
   398   000EAA  3D                 	db	61	;'='
   399   000EAB  20                 	db	32
   400   000EAC  25                 	db	37
   401   000EAD  64                 	db	100	;'d'
   402   000EAE  2E                 	db	46
   403   000EAF  25                 	db	37
   404   000EB0  30                 	db	48	;'0'
   405   000EB1  32                 	db	50	;'2'
   406   000EB2  64                 	db	100	;'d'
   407   000EB3  2C                 	db	44
   408   000EB4  20                 	db	32
   409   000EB5  20                 	db	32
   410   000EB6  00                 	db	0
   411   000EB7                     STR_2:
   412                           
   413                           ; BSR set to: 14
   414   000EB7  68                 	db	104	;'h'
   415   000EB8  75                 	db	117	;'u'
   416   000EB9  65                 	db	101	;'e'
   417   000EBA  3D                 	db	61	;'='
   418   000EBB  25                 	db	37
   419   000EBC  30                 	db	48	;'0'
   420   000EBD  33                 	db	51	;'3'
   421   000EBE  64                 	db	100	;'d'
   422   000EBF  2C                 	db	44
   423   000EC0  20                 	db	32
   424   000EC1  20                 	db	32
   425   000EC2  00                 	db	0
   426   000EC3                     STR_4:
   427                           
   428                           ; BSR set to: 14
   429   000EC3  2E                 	db	46
   430   000EC4  00                 	db	0
   431   000EC5  00                 	db	0	; dummy byte at the end
   432   000000                     
   433                           ; #config settings
   434                           
   435                           	psect	cinit
   436   004650                     __pcinit:
   437                           	callstack 0
   438   004650                     start_initialization:
   439                           	callstack 0
   440   004650                     __initialization:
   441                           	callstack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (1 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445   004650  0E3A               	movlw	low __pidataBANK0
   446   004652  6EF6               	movwf	tblptrl,c
   447   004654  0E4D               	movlw	high __pidataBANK0
   448   004656  6EF7               	movwf	tblptrh,c
   449   004658  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450   00465A  6EF8               	movwf	tblptru,c
   451   00465C  0009               	tblrd		*+	;fetch initializer
   452   00465E  CFF5 F0EF          	movff	tablat,__pdataBANK0
   453                           
   454                           ; Clear objects allocated to BANK2 (200 bytes)
   455   004662  EE02  F000         	lfsr	0,__pbssBANK2
   456   004666  0EC8               	movlw	200
   457   004668                     clear_0:
   458   004668  6AEE               	clrf	postinc0,c
   459   00466A  06E8               	decf	wreg,f,c
   460   00466C  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK1 (182 bytes)
   463   00466E  EE01  F000         	lfsr	0,__pbssBANK1
   464   004672  0EB6               	movlw	182
   465   004674                     clear_1:
   466   004674  6AEE               	clrf	postinc0,c
   467   004676  06E8               	decf	wreg,f,c
   468   004678  E1FD               	bnz	clear_1
   469                           
   470                           ; Clear objects allocated to BANK0 (47 bytes)
   471   00467A  EE00  F0C0         	lfsr	0,__pbssBANK0
   472   00467E  0E2F               	movlw	47
   473   004680                     clear_2:
   474   004680  6AEE               	clrf	postinc0,c
   475   004682  06E8               	decf	wreg,f,c
   476   004684  E1FD               	bnz	clear_2
   477                           
   478                           ; Clear objects allocated to COMRAM (1 bytes)
   479   004686  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   480   004688                     end_of_initialization:
   481                           	callstack 0
   482   004688                     __end_of__initialization:
   483                           	callstack 0
   484   004688  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   00468A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   00468C  0100               	movlb	0
   487   00468E  EF8C  F00D         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   00005D                     __pbssCOMRAM:
   491                           	callstack 0
   492   00005D                     _TxBufWriteCnt:
   493                           	callstack 0
   494   00005D                     	ds	1
   495                           
   496                           	psect	bssBANK0
   497   0000C0                     __pbssBANK0:
   498                           	callstack 0
   499   0000C0                     _width:
   500                           	callstack 0
   501   0000C0                     	ds	2
   502   0000C2                     _prec:
   503                           	callstack 0
   504   0000C2                     	ds	2
   505   0000C4                     _flags:
   506                           	callstack 0
   507   0000C4                     	ds	1
   508   0000C5                     _readingIndex:
   509                           	callstack 0
   510   0000C5                     	ds	1
   511   0000C6                     _TxBufReadCnt:
   512                           	callstack 0
   513   0000C6                     	ds	1
   514   0000C7                     _RxBufReadCnt:
   515                           	callstack 0
   516   0000C7                     	ds	1
   517   0000C8                     _RxBufWriteCnt:
   518                           	callstack 0
   519   0000C8                     	ds	1
   520   0000C9                     _colorCurrent:
   521                           	callstack 0
   522   0000C9                     	ds	10
   523   0000D3                     _colorCalibration:
   524                           	callstack 0
   525   0000D3                     	ds	10
   526   0000DD                     _motorR:
   527                           	callstack 0
   528   0000DD                     	ds	9
   529   0000E6                     _motorL:
   530                           	callstack 0
   531   0000E6                     	ds	9
   532                           
   533                           	psect	dataBANK0
   534   0000EF                     __pdataBANK0:
   535                           	callstack 0
   536   0000EF                     _dataFlag:
   537                           	callstack 0
   538   0000EF                     	ds	1
   539                           
   540                           	psect	bssBANK1
   541   000100                     __pbssBANK1:
   542                           	callstack 0
   543   000100                     _EUSART4TXbuf:
   544                           	callstack 0
   545   000100                     	ds	60
   546   00013C                     _action:
   547                           	callstack 0
   548   00013C                     	ds	50
   549   00016E                     _ldrReadings:
   550                           	callstack 0
   551   00016E                     	ds	20
   552   000182                     _EUSART4RXbuf:
   553                           	callstack 0
   554   000182                     	ds	20
   555   000196                     _dbuf:
   556                           	callstack 0
   557   000196                     	ds	32
   558                           
   559                           	psect	bssBANK2
   560   000200                     __pbssBANK2:
   561                           	callstack 0
   562   000200                     _time:
   563                           	callstack 0
   564   000200                     	ds	200
   565                           
   566                           	psect	cstackBANK0
   567   000060                     __pcstackBANK0:
   568                           	callstack 0
   569   000060                     ?_decision:
   570                           	callstack 0
   571   000060                     returnHome@mL:
   572                           	callstack 0
   573   000060                     decision@hue:
   574                           	callstack 0
   575   000060                     convert_rgb2hue@redcurrent:
   576                           	callstack 0
   577   000060                     calibration_turning@adjustment:
   578                           	callstack 0
   579   000060                     send2USART@hue_char:
   580                           	callstack 0
   581                           
   582                           ; 50 bytes @ 0x0
   583   000060                     	ds	1
   584   000061                     returnHome@mR:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0x1
   588   000061                     	ds	1
   589   000062                     decision@path_step:
   590                           	callstack 0
   591   000062                     returnHome@path_step:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x2
   595   000062                     	ds	2
   596   000064                     calibration_turning@exitLoop:
   597                           	callstack 0
   598   000064                     decision@factor:
   599                           	callstack 0
   600   000064                     returnHome@factor:
   601                           	callstack 0
   602   000064                     convert_rgb2hue@redmax:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x4
   606   000064                     	ds	1
   607   000065                     calibration_turning@i:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0x5
   611   000065                     	ds	1
   612   000066                     ??_returnHome:
   613                           
   614                           ; 1 bytes @ 0x6
   615   000066                     	ds	1
   616   000067                     calibration_turning@factor:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x7
   620   000067                     	ds	1
   621   000068                     convert_rgb2hue@greencurrent:
   622                           	callstack 0
   623   000068                     returnHome@time_ms:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x8
   627   000068                     	ds	4
   628   00006C                     returnHome@action_turn:
   629                           	callstack 0
   630   00006C                     convert_rgb2hue@greenmax:
   631                           	callstack 0
   632                           
   633                           ; 4 bytes @ 0xC
   634   00006C                     	ds	1
   635   00006D                     returnHome@i:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0xD
   639   00006D                     	ds	3
   640   000070                     convert_rgb2hue@bluecurrent:
   641                           	callstack 0
   642                           
   643                           ; 4 bytes @ 0x10
   644   000070                     	ds	4
   645   000074                     convert_rgb2hue@bluemax:
   646                           	callstack 0
   647                           
   648                           ; 4 bytes @ 0x14
   649   000074                     	ds	4
   650   000078                     convert_rgb2hue@clearcurrent:
   651                           	callstack 0
   652                           
   653                           ; 4 bytes @ 0x18
   654   000078                     	ds	4
   655   00007C                     convert_rgb2hue@clearmax:
   656                           	callstack 0
   657                           
   658                           ; 4 bytes @ 0x1C
   659   00007C                     	ds	4
   660   000080                     _convert_rgb2hue$367:
   661                           	callstack 0
   662                           
   663                           ; 4 bytes @ 0x20
   664   000080                     	ds	4
   665   000084                     _convert_rgb2hue$368:
   666                           	callstack 0
   667                           
   668                           ; 4 bytes @ 0x24
   669   000084                     	ds	4
   670   000088                     _convert_rgb2hue$369:
   671                           	callstack 0
   672                           
   673                           ; 4 bytes @ 0x28
   674   000088                     	ds	4
   675   00008C                     _convert_rgb2hue$370:
   676                           	callstack 0
   677                           
   678                           ; 4 bytes @ 0x2C
   679   00008C                     	ds	4
   680   000090                     convert_rgb2hue@min:
   681                           	callstack 0
   682                           
   683                           ; 4 bytes @ 0x30
   684   000090                     	ds	2
   685   000092                     calibration_colors@cal_state:
   686                           	callstack 0
   687                           
   688                           ; 20 bytes @ 0x32
   689   000092                     	ds	2
   690   000094                     convert_rgb2hue@diff:
   691                           	callstack 0
   692                           
   693                           ; 4 bytes @ 0x34
   694   000094                     	ds	4
   695   000098                     convert_rgb2hue@max:
   696                           	callstack 0
   697                           
   698                           ; 4 bytes @ 0x38
   699   000098                     	ds	4
   700   00009C                     convert_rgb2hue@hue:
   701                           	callstack 0
   702                           
   703                           ; 4 bytes @ 0x3C
   704   00009C                     	ds	4
   705   0000A0                     convert_rgb2hue@r:
   706                           	callstack 0
   707                           
   708                           ; 4 bytes @ 0x40
   709   0000A0                     	ds	4
   710   0000A4                     convert_rgb2hue@g:
   711                           	callstack 0
   712                           
   713                           ; 4 bytes @ 0x44
   714   0000A4                     	ds	4
   715   0000A8                     convert_rgb2hue@b:
   716                           	callstack 0
   717                           
   718                           ; 4 bytes @ 0x48
   719   0000A8                     	ds	4
   720   0000AC                     ??_main:
   721                           
   722                           ; 1 bytes @ 0x4C
   723   0000AC                     	ds	2
   724   0000AE                     main@white:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x4E
   728   0000AE                     	ds	2
   729   0000B0                     main@factor:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x50
   733   0000B0                     	ds	2
   734   0000B2                     main@hue:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x52
   738   0000B2                     	ds	2
   739   0000B4                     main@clear_current:
   740                           	callstack 0
   741                           
   742                           ; 4 bytes @ 0x54
   743   0000B4                     	ds	4
   744   0000B8                     main@clear_max:
   745                           	callstack 0
   746                           
   747                           ; 4 bytes @ 0x58
   748   0000B8                     	ds	4
   749   0000BC                     main@path_step:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x5C
   753   0000BC                     	ds	2
   754   0000BE                     main@clear_norm:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x5E
   758   0000BE                     	ds	2
   759                           
   760                           	psect	cstackCOMRAM
   761   000001                     __pcstackCOMRAM:
   762                           	callstack 0
   763   000001                     ??_LowISR:
   764   000001                     
   765                           ; 1 bytes @ 0x0
   766   000001                     	ds	1
   767   000002                     ??_I2C_2_Master_Idle:
   768   000002                     ?___wmul:
   769                           	callstack 0
   770   000002                     ?___awdiv:
   771                           	callstack 0
   772   000002                     ?___awmod:
   773                           	callstack 0
   774   000002                     ?___fladd:
   775                           	callstack 0
   776   000002                     ?___lmul:
   777                           	callstack 0
   778   000002                     ?___xxtofl:
   779                           	callstack 0
   780   000002                     sendCharSerial4@charToSend:
   781                           	callstack 0
   782   000002                     initDCmotorsPWM@PWMperiod:
   783                           	callstack 0
   784   000002                     customDelayMs@milliseconds:
   785                           	callstack 0
   786   000002                     ___wmul@multiplier:
   787                           	callstack 0
   788   000002                     ___awdiv@dividend:
   789                           	callstack 0
   790   000002                     ___awmod@dividend:
   791                           	callstack 0
   792   000002                     fputc@c:
   793                           	callstack 0
   794   000002                     logAction@newTime:
   795                           	callstack 0
   796   000002                     ___lmul@multiplier:
   797                           	callstack 0
   798   000002                     ___fleq@ff1:
   799                           	callstack 0
   800   000002                     ___flge@ff1:
   801                           	callstack 0
   802   000002                     ___fladd@b:
   803                           	callstack 0
   804   000002                     ___xxtofl@val:
   805                           	callstack 0
   806                           
   807                           ; 4 bytes @ 0x1
   808   000002                     	ds	1
   809   000003                     ??_I2C_2_Master_Read:
   810   000003                     I2C_2_Master_Write@data_byte:
   811                           	callstack 0
   812   000003                     sendStringSerial4@string:
   813                           	callstack 0
   814                           
   815                           ; 1 bytes @ 0x2
   816   000003                     	ds	1
   817   000004                     ??_customDelayMs:
   818   000004                     color_writetoaddr@value:
   819                           	callstack 0
   820   000004                     I2C_2_Master_Read@ack:
   821                           	callstack 0
   822   000004                     fputc@fp:
   823                           	callstack 0
   824   000004                     ___wmul@multiplicand:
   825                           	callstack 0
   826   000004                     ___awdiv@divisor:
   827                           	callstack 0
   828   000004                     ___awmod@divisor:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x3
   832   000004                     	ds	1
   833   000005                     ??_fputc:
   834   000005                     color_writetoaddr@address:
   835                           	callstack 0
   836   000005                     I2C_2_Master_Read@tmp:
   837                           	callstack 0
   838   000005                     customDelayMs@i:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x4
   842   000005                     	ds	1
   843   000006                     ??_color_click_init:
   844   000006                     ??___xxtofl:
   845   000006                     ?_color_read_Red:
   846                           	callstack 0
   847   000006                     ?_color_read_Green:
   848                           	callstack 0
   849   000006                     ?_color_read_Blue:
   850                           	callstack 0
   851   000006                     ?_color_read_Clear:
   852                           	callstack 0
   853   000006                     ___awdiv@counter:
   854                           	callstack 0
   855   000006                     ___awmod@counter:
   856                           	callstack 0
   857   000006                     logAction@path_step:
   858                           	callstack 0
   859   000006                     ___wmul@product:
   860                           	callstack 0
   861   000006                     ___lmul@multiplicand:
   862                           	callstack 0
   863   000006                     ___fleq@ff2:
   864                           	callstack 0
   865   000006                     ___flge@ff2:
   866                           	callstack 0
   867   000006                     ___fladd@a:
   868                           	callstack 0
   869                           
   870                           ; 4 bytes @ 0x5
   871   000006                     	ds	1
   872   000007                     ___awdiv@sign:
   873                           	callstack 0
   874   000007                     ___awmod@sign:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x6
   878   000007                     	ds	1
   879   000008                     ??_logAction:
   880   000008                     ??_color_read_Red:
   881   000008                     ??_color_read_Green:
   882   000008                     ??_color_read_Blue:
   883   000008                     ??_color_read_Clear:
   884   000008                     ?_abs:
   885                           	callstack 0
   886   000008                     ?___lwdiv:
   887                           	callstack 0
   888   000008                     ?_read_prec_or_width:
   889                           	callstack 0
   890   000008                     read_prec_or_width@fmt:
   891                           	callstack 0
   892   000008                     ___awdiv@quotient:
   893                           	callstack 0
   894   000008                     ___lwdiv@dividend:
   895                           	callstack 0
   896   000008                     abs@a:
   897                           	callstack 0
   898                           
   899                           ; 2 bytes @ 0x7
   900   000008                     	ds	1
   901   000009                     read_prec_or_width@ap:
   902                           	callstack 0
   903                           
   904                           ; 1 bytes @ 0x8
   905   000009                     	ds	1
   906   00000A                     ??___fladd:
   907   00000A                     ??_abs:
   908   00000A                     ??___fleq:
   909   00000A                     ??___flge:
   910   00000A                     logAction@newAction:
   911                           	callstack 0
   912   00000A                     ___xxtofl@sign:
   913                           	callstack 0
   914   00000A                     read_prec_or_width@c:
   915                           	callstack 0
   916   00000A                     ___lwdiv@divisor:
   917                           	callstack 0
   918   00000A                     fputs@s:
   919                           	callstack 0
   920   00000A                     ___lmul@product:
   921                           	callstack 0
   922                           
   923                           ; 4 bytes @ 0x9
   924   00000A                     	ds	1
   925   00000B                     ___xxtofl@exp:
   926                           	callstack 0
   927   00000B                     color_read_Red@tmp:
   928                           	callstack 0
   929   00000B                     color_read_Green@tmp:
   930                           	callstack 0
   931   00000B                     color_read_Blue@tmp:
   932                           	callstack 0
   933   00000B                     color_read_Clear@tmp:
   934                           	callstack 0
   935   00000B                     read_prec_or_width@n:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0xA
   939   00000B                     	ds	1
   940   00000C                     fputs@fp:
   941                           	callstack 0
   942   00000C                     ___lwdiv@quotient:
   943                           	callstack 0
   944   00000C                     ___xxtofl@arg:
   945                           	callstack 0
   946                           
   947                           ; 4 bytes @ 0xB
   948   00000C                     	ds	1
   949   00000D                     fputs@c:
   950                           	callstack 0
   951                           
   952                           ; 1 bytes @ 0xC
   953   00000D                     	ds	1
   954   00000E                     ?___aldiv:
   955                           	callstack 0
   956   00000E                     ___lwdiv@counter:
   957                           	callstack 0
   958   00000E                     ___fladd@signs:
   959                           	callstack 0
   960   00000E                     fputs@i:
   961                           	callstack 0
   962   00000E                     ___aldiv@dividend:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0xD
   966   00000E                     	ds	1
   967   00000F                     setMotorPWM@m:
   968                           	callstack 0
   969   00000F                     ___fladd@aexp:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0xE
   973   00000F                     	ds	1
   974   000010                     ??_setMotorPWM:
   975   000010                     ?___flmul:
   976                           	callstack 0
   977   000010                     ___fladd@bexp:
   978                           	callstack 0
   979   000010                     pad@fp:
   980                           	callstack 0
   981   000010                     ___flmul@b:
   982                           	callstack 0
   983                           
   984                           ; 4 bytes @ 0xF
   985   000010                     	ds	1
   986   000011                     ___fladd@grs:
   987                           	callstack 0
   988   000011                     pad@buf:
   989                           	callstack 0
   990                           
   991                           ; 2 bytes @ 0x10
   992   000011                     	ds	1
   993   000012                     ?___flsub:
   994                           	callstack 0
   995   000012                     setMotorPWM@posDuty:
   996                           	callstack 0
   997   000012                     ___aldiv@divisor:
   998                           	callstack 0
   999   000012                     ___flsub@b:
  1000                           	callstack 0
  1001                           
  1002                           ; 4 bytes @ 0x11
  1003   000012                     	ds	1
  1004   000013                     setMotorPWM@negDuty:
  1005                           	callstack 0
  1006   000013                     pad@p:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x12
  1010   000013                     	ds	1
  1011   000014                     stop@mL:
  1012                           	callstack 0
  1013   000014                     turnLeft@mL:
  1014                           	callstack 0
  1015   000014                     turnRight@mL:
  1016                           	callstack 0
  1017   000014                     fullSpeedBack@mL:
  1018                           	callstack 0
  1019   000014                     ___flmul@a:
  1020                           	callstack 0
  1021                           
  1022                           ; 4 bytes @ 0x13
  1023   000014                     	ds	1
  1024   000015                     ??_pad:
  1025   000015                     stop@mR:
  1026                           	callstack 0
  1027   000015                     turnLeft@mR:
  1028                           	callstack 0
  1029   000015                     turnRight@mR:
  1030                           	callstack 0
  1031   000015                     fullSpeedBack@mR:
  1032                           	callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x14
  1035   000015                     	ds	1
  1036   000016                     ??_stop:
  1037   000016                     ??_turnLeft:
  1038   000016                     ??_turnRight:
  1039   000016                     ??_fullSpeedBack:
  1040   000016                     ___aldiv@counter:
  1041                           	callstack 0
  1042   000016                     pad@i:
  1043                           	callstack 0
  1044   000016                     ___flsub@a:
  1045                           	callstack 0
  1046                           
  1047                           ; 4 bytes @ 0x15
  1048   000016                     	ds	1
  1049   000017                     ___aldiv@sign:
  1050                           	callstack 0
  1051   000017                     turnLeft@i:
  1052                           	callstack 0
  1053   000017                     turnRight@i:
  1054                           	callstack 0
  1055   000017                     fullSpeedBack@power:
  1056                           	callstack 0
  1057                           
  1058                           ; 2 bytes @ 0x16
  1059   000017                     	ds	1
  1060   000018                     ??___flmul:
  1061   000018                     dtoa@fp:
  1062                           	callstack 0
  1063   000018                     ___aldiv@quotient:
  1064                           	callstack 0
  1065                           
  1066                           ; 4 bytes @ 0x17
  1067   000018                     	ds	1
  1068   000019                     left90@mL:
  1069                           	callstack 0
  1070   000019                     turn180@mL:
  1071                           	callstack 0
  1072   000019                     right135@mL:
  1073                           	callstack 0
  1074   000019                     left135@mL:
  1075                           	callstack 0
  1076   000019                     backHalf@mL:
  1077                           	callstack 0
  1078   000019                     backOneAndHalf@mL:
  1079                           	callstack 0
  1080   000019                     dtoa@d:
  1081                           	callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x18
  1084   000019                     	ds	1
  1085   00001A                     left90@mR:
  1086                           	callstack 0
  1087   00001A                     turn180@mR:
  1088                           	callstack 0
  1089   00001A                     right135@mR:
  1090                           	callstack 0
  1091   00001A                     left135@mR:
  1092                           	callstack 0
  1093   00001A                     backHalf@mR:
  1094                           	callstack 0
  1095   00001A                     backOneAndHalf@mR:
  1096                           	callstack 0
  1097                           
  1098                           ; 1 bytes @ 0x19
  1099   00001A                     	ds	1
  1100   00001B                     ??_backHalf:
  1101   00001B                     ??_backOneAndHalf:
  1102   00001B                     left90@factor:
  1103                           	callstack 0
  1104   00001B                     turn180@factor:
  1105                           	callstack 0
  1106   00001B                     right135@factor:
  1107                           	callstack 0
  1108   00001B                     left135@factor:
  1109                           	callstack 0
  1110   00001B                     _dtoa$3149:
  1111                           	callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x1A
  1114   00001B                     	ds	1
  1115   00001C                     ?_get16bitTMR0val:
  1116                           	callstack 0
  1117   00001C                     ___flmul@sign:
  1118                           	callstack 0
  1119   00001C                     get16bitTMR0val@path_step:
  1120                           	callstack 0
  1121                           
  1122                           ; 2 bytes @ 0x1B
  1123   00001C                     	ds	1
  1124   00001D                     dtoa@p:
  1125                           	callstack 0
  1126   00001D                     left90@delay_after_calibration:
  1127                           	callstack 0
  1128   00001D                     turn180@delay_after_calibration:
  1129                           	callstack 0
  1130   00001D                     right135@delay_after_calibration:
  1131                           	callstack 0
  1132   00001D                     left135@delay_after_calibration:
  1133                           	callstack 0
  1134   00001D                     ___flmul@grs:
  1135                           	callstack 0
  1136                           
  1137                           ; 4 bytes @ 0x1C
  1138   00001D                     	ds	1
  1139   00001E                     ??_get16bitTMR0val:
  1140   00001E                     dtoa@w:
  1141                           	callstack 0
  1142                           
  1143                           ; 2 bytes @ 0x1D
  1144   00001E                     	ds	1
  1145   00001F                     moveGreen@mL:
  1146                           	callstack 0
  1147   00001F                     moveBlue@mL:
  1148                           	callstack 0
  1149   00001F                     movePink@mL:
  1150                           	callstack 0
  1151   00001F                     moveOrange@mL:
  1152                           	callstack 0
  1153   00001F                     moveLightBlue@mL:
  1154                           	callstack 0
  1155   00001F                     moveWhite@mL:
  1156                           	callstack 0
  1157                           
  1158                           ; 1 bytes @ 0x1E
  1159   00001F                     	ds	1
  1160   000020                     moveGreen@mR:
  1161                           	callstack 0
  1162   000020                     moveBlue@mR:
  1163                           	callstack 0
  1164   000020                     movePink@mR:
  1165                           	callstack 0
  1166   000020                     moveOrange@mR:
  1167                           	callstack 0
  1168   000020                     moveLightBlue@mR:
  1169                           	callstack 0
  1170   000020                     moveWhite@mR:
  1171                           	callstack 0
  1172   000020                     dtoa@s:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x1F
  1176   000020                     	ds	1
  1177   000021                     ___flmul@aexp:
  1178                           	callstack 0
  1179   000021                     moveGreen@factor:
  1180                           	callstack 0
  1181   000021                     moveBlue@factor:
  1182                           	callstack 0
  1183   000021                     movePink@factor:
  1184                           	callstack 0
  1185   000021                     moveOrange@factor:
  1186                           	callstack 0
  1187   000021                     moveLightBlue@factor:
  1188                           	callstack 0
  1189   000021                     moveWhite@factor:
  1190                           	callstack 0
  1191   000021                     dtoa@i:
  1192                           	callstack 0
  1193                           
  1194                           ; 2 bytes @ 0x20
  1195   000021                     	ds	1
  1196   000022                     ___flmul@bexp:
  1197                           	callstack 0
  1198   000022                     get16bitTMR0val@time_ms:
  1199                           	callstack 0
  1200                           
  1201                           ; 4 bytes @ 0x21
  1202   000022                     	ds	1
  1203   000023                     ??_moveGreen:
  1204   000023                     ??_moveBlue:
  1205   000023                     ??_moveLightBlue:
  1206   000023                     ??_moveOrange:
  1207   000023                     ??_movePink:
  1208   000023                     ??_moveWhite:
  1209   000023                     vfpfcnvrt@fp:
  1210                           	callstack 0
  1211   000023                     ___flmul@prod:
  1212                           	callstack 0
  1213                           
  1214                           ; 4 bytes @ 0x22
  1215   000023                     	ds	1
  1216   000024                     vfpfcnvrt@fmt:
  1217                           	callstack 0
  1218                           
  1219                           ; 1 bytes @ 0x23
  1220   000024                     	ds	1
  1221   000025                     vfpfcnvrt@ap:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x24
  1225   000025                     	ds	1
  1226   000026                     ??_vfpfcnvrt:
  1227   000026                     get16bitTMR0val@combined_value:
  1228                           	callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x25
  1231   000026                     	ds	1
  1232   000027                     ___flmul@temp:
  1233                           	callstack 0
  1234                           
  1235                           ; 2 bytes @ 0x26
  1236   000027                     	ds	1
  1237   000028                     vfpfcnvrt@convarg:
  1238                           	callstack 0
  1239                           
  1240                           ; 4 bytes @ 0x27
  1241   000028                     	ds	1
  1242   000029                     ?___fldiv:
  1243                           	callstack 0
  1244   000029                     ___fldiv@b:
  1245                           	callstack 0
  1246                           
  1247                           ; 4 bytes @ 0x28
  1248   000029                     	ds	3
  1249   00002C                     vfpfcnvrt@done:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x2B
  1253   00002C                     	ds	1
  1254   00002D                     vfpfcnvrt@cp:
  1255                           	callstack 0
  1256   00002D                     ___fldiv@a:
  1257                           	callstack 0
  1258                           
  1259                           ; 4 bytes @ 0x2C
  1260   00002D                     	ds	1
  1261   00002E                     ?_vfprintf:
  1262                           	callstack 0
  1263   00002E                     vfprintf@fp:
  1264                           	callstack 0
  1265                           
  1266                           ; 1 bytes @ 0x2D
  1267   00002E                     	ds	1
  1268   00002F                     vfprintf@fmt:
  1269                           	callstack 0
  1270                           
  1271                           ; 1 bytes @ 0x2E
  1272   00002F                     	ds	1
  1273   000030                     vfprintf@ap:
  1274                           	callstack 0
  1275                           
  1276                           ; 1 bytes @ 0x2F
  1277   000030                     	ds	1
  1278   000031                     ??___fldiv:
  1279   000031                     vfprintf@cfmt:
  1280                           	callstack 0
  1281                           
  1282                           ; 1 bytes @ 0x30
  1283   000031                     	ds	1
  1284   000032                     ?_sprintf:
  1285                           	callstack 0
  1286   000032                     sprintf@s:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x31
  1290   000032                     	ds	1
  1291   000033                     sprintf@fmt:
  1292                           	callstack 0
  1293                           
  1294                           ; 1 bytes @ 0x32
  1295   000033                     	ds	2
  1296   000035                     ___fldiv@rem:
  1297                           	callstack 0
  1298                           
  1299                           ; 4 bytes @ 0x34
  1300   000035                     	ds	3
  1301   000038                     sprintf@ap:
  1302                           	callstack 0
  1303                           
  1304                           ; 1 bytes @ 0x37
  1305   000038                     	ds	1
  1306   000039                     ___fldiv@sign:
  1307                           	callstack 0
  1308   000039                     sprintf@f:
  1309                           	callstack 0
  1310                           
  1311                           ; 12 bytes @ 0x38
  1312   000039                     	ds	1
  1313   00003A                     ___fldiv@new_exp:
  1314                           	callstack 0
  1315                           
  1316                           ; 2 bytes @ 0x39
  1317   00003A                     	ds	2
  1318   00003C                     ___fldiv@grs:
  1319                           	callstack 0
  1320                           
  1321                           ; 4 bytes @ 0x3B
  1322   00003C                     	ds	4
  1323   000040                     ___fldiv@bexp:
  1324                           	callstack 0
  1325                           
  1326                           ; 1 bytes @ 0x3F
  1327   000040                     	ds	1
  1328   000041                     ___fldiv@aexp:
  1329                           	callstack 0
  1330                           
  1331                           ; 1 bytes @ 0x40
  1332   000041                     	ds	1
  1333   000042                     ?___fltol:
  1334                           	callstack 0
  1335   000042                     ___fltol@f1:
  1336                           	callstack 0
  1337                           
  1338                           ; 4 bytes @ 0x41
  1339   000042                     	ds	3
  1340   000045                     send2USART@hue:
  1341                           	callstack 0
  1342                           
  1343                           ; 2 bytes @ 0x44
  1344   000045                     	ds	1
  1345   000046                     ??___fltol:
  1346                           
  1347                           ; 1 bytes @ 0x45
  1348   000046                     	ds	1
  1349   000047                     calibration_colors@cCal:
  1350                           	callstack 0
  1351                           
  1352                           ; 1 bytes @ 0x46
  1353   000047                     	ds	1
  1354   000048                     ??_calibration_colors:
  1355                           
  1356                           ; 1 bytes @ 0x47
  1357   000048                     	ds	2
  1358   00004A                     ___fltol@sign1:
  1359                           	callstack 0
  1360                           
  1361                           ; 1 bytes @ 0x49
  1362   00004A                     	ds	1
  1363   00004B                     ___fltol@exp1:
  1364                           	callstack 0
  1365                           
  1366                           ; 1 bytes @ 0x4A
  1367   00004B                     	ds	1
  1368   00004C                     ?_convert_rgb2hue:
  1369                           	callstack 0
  1370   00004C                     convert_rgb2hue@cMax:
  1371                           	callstack 0
  1372   00004C                     fullSpeedAhead@mL:
  1373                           	callstack 0
  1374   00004C                     right90@mL:
  1375                           	callstack 0
  1376                           
  1377                           ; 1 bytes @ 0x4B
  1378   00004C                     	ds	1
  1379   00004D                     convert_rgb2hue@cCurr:
  1380                           	callstack 0
  1381   00004D                     fullSpeedAhead@mR:
  1382                           	callstack 0
  1383   00004D                     right90@mR:
  1384                           	callstack 0
  1385                           
  1386                           ; 1 bytes @ 0x4C
  1387   00004D                     	ds	1
  1388   00004E                     ??_convert_rgb2hue:
  1389   00004E                     ??_fullSpeedAhead:
  1390   00004E                     right90@factor:
  1391                           	callstack 0
  1392                           
  1393                           ; 2 bytes @ 0x4D
  1394   00004E                     	ds	1
  1395   00004F                     fullSpeedAhead@power:
  1396                           	callstack 0
  1397                           
  1398                           ; 2 bytes @ 0x4E
  1399   00004F                     	ds	1
  1400   000050                     ?_reading_hue:
  1401                           	callstack 0
  1402   000050                     reading_hue@cCurr:
  1403                           	callstack 0
  1404   000050                     right90@delay_after_calibration:
  1405                           	callstack 0
  1406                           
  1407                           ; 2 bytes @ 0x4F
  1408   000050                     	ds	1
  1409   000051                     reverseStraight@mL:
  1410                           	callstack 0
  1411                           
  1412                           ; 1 bytes @ 0x50
  1413   000051                     	ds	1
  1414   000052                     ??_reading_hue:
  1415   000052                     ?_calibration_turning:
  1416                           	callstack 0
  1417   000052                     moveRed@mL:
  1418                           	callstack 0
  1419   000052                     moveYellow@mL:
  1420                           	callstack 0
  1421   000052                     reverseTurn@mL:
  1422                           	callstack 0
  1423   000052                     reverseStraight@mR:
  1424                           	callstack 0
  1425   000052                     calibration_turning@mL:
  1426                           	callstack 0
  1427                           
  1428                           ; 1 bytes @ 0x51
  1429   000052                     	ds	1
  1430   000053                     moveRed@mR:
  1431                           	callstack 0
  1432   000053                     moveYellow@mR:
  1433                           	callstack 0
  1434   000053                     reverseTurn@mR:
  1435                           	callstack 0
  1436   000053                     calibration_turning@mR:
  1437                           	callstack 0
  1438   000053                     reverseStraight@time_ms:
  1439                           	callstack 0
  1440                           
  1441                           ; 4 bytes @ 0x52
  1442   000053                     	ds	1
  1443   000054                     ??_calibration_turning:
  1444   000054                     reverseTurn@actionStep:
  1445                           	callstack 0
  1446   000054                     reading_hue@hue:
  1447                           	callstack 0
  1448   000054                     moveRed@factor:
  1449                           	callstack 0
  1450   000054                     moveYellow@factor:
  1451                           	callstack 0
  1452                           
  1453                           ; 2 bytes @ 0x53
  1454   000054                     	ds	1
  1455   000055                     reverseTurn@time_ms:
  1456                           	callstack 0
  1457                           
  1458                           ; 4 bytes @ 0x54
  1459   000055                     	ds	1
  1460   000056                     ??_moveRed:
  1461   000056                     ??_moveYellow:
  1462                           
  1463                           ; 1 bytes @ 0x55
  1464   000056                     	ds	1
  1465   000057                     ??_reverseStraight:
  1466                           
  1467                           ; 1 bytes @ 0x56
  1468   000057                     	ds	1
  1469   000058                     
  1470                           ; 1 bytes @ 0x57
  1471   000058                     	ds	1
  1472   000059                     reverseTurn@factor:
  1473                           	callstack 0
  1474   000059                     reverseStraight@delayMs:
  1475                           	callstack 0
  1476                           
  1477                           ; 2 bytes @ 0x58
  1478   000059                     	ds	2
  1479   00005B                     ??_reverseTurn:
  1480                           
  1481                           ; 1 bytes @ 0x5A
  1482   00005B                     	ds	2
  1483                           
  1484 ;;
  1485 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1486 ;;
  1487 ;; *************** function _main *****************
  1488 ;; Defined at:
  1489 ;;		line 30 in file "main.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  white           2   78[BANK0 ] unsigned int 
  1494 ;;  clear_max       4   88[BANK0 ] float 
  1495 ;;  clear_curren    4   84[BANK0 ] float 
  1496 ;;  clear_norm      2   94[BANK0 ] unsigned int 
  1497 ;;  path_step       2   92[BANK0 ] unsigned int 
  1498 ;;  hue             2   82[BANK0 ] unsigned int 
  1499 ;;  PWMcycle        2    0        unsigned int 
  1500 ;;  factor          2   80[BANK0 ] unsigned int 
  1501 ;;  ambient         2    0        unsigned int 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;Total ram usage:       20 bytes
  1516 ;; Hardware stack levels required when called: 11
  1517 ;; This function calls:
  1518 ;;		_ADC_init
  1519 ;;		_Timer0_init
  1520 ;;		___fldiv
  1521 ;;		___flmul
  1522 ;;		___fltol
  1523 ;;		___xxtofl
  1524 ;;		_calibration_colors
  1525 ;;		_calibration_turning
  1526 ;;		_color_click_init
  1527 ;;		_color_read_Clear
  1528 ;;		_decision
  1529 ;;		_fullSpeedAhead
  1530 ;;		_get16bitTMR0val
  1531 ;;		_initDCmotorsPWM
  1532 ;;		_initUSART4
  1533 ;;		_reading_hue
  1534 ;;		_returnHome
  1535 ;;		_send2USART
  1536 ;;		_stop
  1537 ;; This function is called by:
  1538 ;;		Startup code after reset
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text0
  1543   001B18                     __ptext0:
  1544                           	callstack 0
  1545   001B18                     _main:
  1546                           	callstack 20
  1547   001B18                     
  1548                           ;main.c: 32:     ADC_init();
  1549   001B18  EC6E  F026         	call	_ADC_init	;wreg free
  1550   001B1C                     
  1551                           ;main.c: 33:     color_click_init();
  1552   001B1C  EC54  F025         	call	_color_click_init	;wreg free
  1553   001B20                     
  1554                           ;main.c: 34:     initUSART4();
  1555   001B20  EC50  F026         	call	_initUSART4	;wreg free
  1556   001B24                     
  1557                           ;main.c: 35:     Timer0_init();
  1558   001B24  ECEC  F025         	call	_Timer0_init	;wreg free
  1559   001B28                     
  1560                           ;main.c: 39:     initDCmotorsPWM(PWMcycle);
  1561   001B28  0E00               	movlw	0
  1562   001B2A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1563   001B2C  0E63               	movlw	99
  1564   001B2E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1565   001B30  EC81  F020         	call	_initDCmotorsPWM	;wreg free
  1566   001B34                     
  1567                           ;main.c: 42:     motorL.power = 0;
  1568   001B34  0E00               	movlw	0
  1569   001B36  0100               	movlb	0	; () banked
  1570   001B38  6FE6               	movwf	_motorL& (0+255),b
  1571   001B3A                     
  1572                           ; BSR set to: 0
  1573                           ;main.c: 43:     motorL.direction = 1;
  1574   001B3A  0E01               	movlw	1
  1575   001B3C  6FE7               	movwf	(_motorL+1)& (0+255),b
  1576   001B3E                     
  1577                           ; BSR set to: 0
  1578                           ;main.c: 44:     motorL.brakemode = 1;
  1579   001B3E  0E01               	movlw	1
  1580   001B40  6FE8               	movwf	(_motorL+2)& (0+255),b
  1581   001B42                     
  1582                           ; BSR set to: 0
  1583                           ;main.c: 45:     motorL.PWMperiod = PWMcycle;
  1584   001B42  0E00               	movlw	0
  1585   001B44  6FEA               	movwf	(_motorL+4)& (0+255),b
  1586   001B46  0E63               	movlw	99
  1587   001B48  6FE9               	movwf	(_motorL+3)& (0+255),b
  1588   001B4A                     
  1589                           ; BSR set to: 0
  1590                           ;main.c: 46:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1591   001B4A  0EAA               	movlw	170
  1592   001B4C  6FEB               	movwf	(_motorL+5)& (0+255),b
  1593   001B4E  0E0F               	movlw	15
  1594   001B50  6FEC               	movwf	(_motorL+6)& (0+255),b
  1595   001B52                     
  1596                           ; BSR set to: 0
  1597                           ;main.c: 47:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1598   001B52  0EA6               	movlw	166
  1599   001B54  6FED               	movwf	(_motorL+7)& (0+255),b
  1600   001B56  0E0F               	movlw	15
  1601   001B58  6FEE               	movwf	(_motorL+8)& (0+255),b
  1602   001B5A                     
  1603                           ; BSR set to: 0
  1604                           ;main.c: 49:     motorR.power = 0;
  1605   001B5A  0E00               	movlw	0
  1606   001B5C  6FDD               	movwf	_motorR& (0+255),b
  1607   001B5E                     
  1608                           ; BSR set to: 0
  1609                           ;main.c: 50:     motorR.direction = 1;
  1610   001B5E  0E01               	movlw	1
  1611   001B60  6FDE               	movwf	(_motorR+1)& (0+255),b
  1612   001B62                     
  1613                           ; BSR set to: 0
  1614                           ;main.c: 51:     motorR.brakemode = 1;
  1615   001B62  0E01               	movlw	1
  1616   001B64  6FDF               	movwf	(_motorR+2)& (0+255),b
  1617   001B66                     
  1618                           ; BSR set to: 0
  1619                           ;main.c: 52:     motorR.PWMperiod = PWMcycle;
  1620   001B66  0E00               	movlw	0
  1621   001B68  6FE1               	movwf	(_motorR+4)& (0+255),b
  1622   001B6A  0E63               	movlw	99
  1623   001B6C  6FE0               	movwf	(_motorR+3)& (0+255),b
  1624   001B6E                     
  1625                           ; BSR set to: 0
  1626                           ;main.c: 53:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1627   001B6E  0E25               	movlw	37
  1628   001B70  6FE2               	movwf	(_motorR+5)& (0+255),b
  1629   001B72  0E0F               	movlw	15
  1630   001B74  6FE3               	movwf	(_motorR+6)& (0+255),b
  1631   001B76                     
  1632                           ; BSR set to: 0
  1633                           ;main.c: 54:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1634   001B76  0E21               	movlw	33
  1635   001B78  6FE4               	movwf	(_motorR+7)& (0+255),b
  1636   001B7A  0E0F               	movlw	15
  1637   001B7C  6FE5               	movwf	(_motorR+8)& (0+255),b
  1638   001B7E                     
  1639                           ; BSR set to: 0
  1640                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1641   001B7E  9087               	bcf	135,0,c	;volatile
  1642   001B80                     
  1643                           ; BSR set to: 0
  1644                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1645   001B80  907F               	bcf	127,0,c	;volatile
  1646   001B82                     
  1647                           ; BSR set to: 0
  1648                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1649   001B82  9E85               	bcf	133,7,c	;volatile
  1650   001B84                     
  1651                           ; BSR set to: 0
  1652                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1653   001B84  9E7D               	bcf	125,7,c	;volatile
  1654   001B86                     
  1655                           ; BSR set to: 0
  1656                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1657   001B86  9681               	bcf	129,3,c	;volatile
  1658   001B88                     
  1659                           ; BSR set to: 0
  1660                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1661   001B88  9679               	bcf	121,3,c	;volatile
  1662   001B8A                     
  1663                           ; BSR set to: 0
  1664                           ;main.c: 71:     TRISFbits.TRISF2=1;
  1665   001B8A  8486               	bsf	134,2,c	;volatile
  1666   001B8C                     
  1667                           ; BSR set to: 0
  1668                           ;main.c: 72:     ANSELFbits.ANSELF2=0;
  1669   001B8C  010E               	movlb	14	; () banked
  1670   001B8E  95B4               	bcf	180,2,b	;volatile
  1671   001B90                     
  1672                           ; BSR set to: 14
  1673                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1674   001B90  8686               	bsf	134,3,c	;volatile
  1675   001B92                     
  1676                           ; BSR set to: 14
  1677                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1678   001B92  97B4               	bcf	180,3,b	;volatile
  1679   001B94                     
  1680                           ; BSR set to: 14
  1681                           ;main.c: 77:     TRISGbits.TRISG1 = 0;
  1682   001B94  9287               	bcf	135,1,c	;volatile
  1683   001B96                     
  1684                           ; BSR set to: 14
  1685                           ;main.c: 78:     LATGbits.LATG1 = 0;
  1686   001B96  927F               	bcf	127,1,c	;volatile
  1687   001B98                     
  1688                           ; BSR set to: 14
  1689                           ;main.c: 84:     TRISHbits.TRISH3 = 0;
  1690   001B98  9688               	bcf	136,3,c	;volatile
  1691   001B9A                     
  1692                           ; BSR set to: 14
  1693                           ;main.c: 85:     LATHbits.LATH3 = 1;
  1694   001B9A  8680               	bsf	128,3,c	;volatile
  1695   001B9C                     
  1696                           ; BSR set to: 14
  1697                           ;main.c: 86:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1698   001B9C  0E19               	movlw	25
  1699   001B9E  0100               	movlb	0	; () banked
  1700   001BA0  6FAD               	movwf	(??_main+1)& (0+255),b
  1701   001BA2  0E5A               	movlw	90
  1702   001BA4  6FAC               	movwf	??_main& (0+255),b
  1703   001BA6  0EB1               	movlw	177
  1704   001BA8                     u5957:
  1705   001BA8  2EE8               	decfsz	wreg,f,c
  1706   001BAA  D7FE               	bra	u5957
  1707   001BAC  2FAC               	decfsz	??_main& (0+255),f,b
  1708   001BAE  D7FC               	bra	u5957
  1709   001BB0  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1710   001BB2  D7FA               	bra	u5957
  1711   001BB4  D000               	nop2	
  1712   001BB6                     
  1713                           ;main.c: 87:     LATHbits.LATH3 = 0;
  1714   001BB6  9680               	bcf	128,3,c	;volatile
  1715   001BB8                     
  1716                           ;main.c: 91:     calibration_colors(&colorCalibration);
  1717   001BB8  0ED3               	movlw	low _colorCalibration
  1718   001BBA  6E47               	movwf	calibration_colors@cCal^0,c
  1719   001BBC  EC22  F015         	call	_calibration_colors	;wreg free
  1720   001BC0                     
  1721                           ;main.c: 93:     unsigned int clear_norm;;main.c: 94:     unsigned int path_step = 0;
  1722   001BC0  0E00               	movlw	0
  1723   001BC2  0100               	movlb	0	; () banked
  1724   001BC4  6FBD               	movwf	(main@path_step+1)& (0+255),b
  1725   001BC6  0E00               	movlw	0
  1726   001BC8  6FBC               	movwf	main@path_step& (0+255),b
  1727   001BCA                     
  1728                           ; BSR set to: 0
  1729                           ;main.c: 95:     unsigned int hue;;main.c: 96:     unsigned int ambient;;main.c: 97:    
      +                           float clear_current;;main.c: 98:     float clear_max;;main.c: 99:     unsigned int fact
      +                          or;;main.c: 101:     factor = calibration_turning(&motorL, &motorR);
  1730   001BCA  0EE6               	movlw	low _motorL
  1731   001BCC  6E52               	movwf	calibration_turning@mL^0,c
  1732   001BCE  0EDD               	movlw	low _motorR
  1733   001BD0  6E53               	movwf	calibration_turning@mR^0,c
  1734   001BD2  ECE3  F017         	call	_calibration_turning	;wreg free
  1735   001BD6  C052  F0B0         	movff	?_calibration_turning,main@factor
  1736   001BDA  C053  F0B1         	movff	?_calibration_turning+1,main@factor+1
  1737   001BDE                     l6678:
  1738                           
  1739                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1740   001BDE  807F               	bsf	127,0,c	;volatile
  1741   001BE0                     
  1742                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1743   001BE0  8E7D               	bsf	125,7,c	;volatile
  1744   001BE2                     
  1745                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1746   001BE2  8679               	bsf	121,3,c	;volatile
  1747   001BE4                     
  1748                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1749   001BE4  0EE6               	movlw	low _motorL
  1750   001BE6  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1751   001BE8  0EDD               	movlw	low _motorR
  1752   001BEA  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1753   001BEC  ECC7  F01D         	call	_fullSpeedAhead	;wreg free
  1754   001BF0                     
  1755                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1756   001BF0  8ED5               	bsf	213,7,c	;volatile
  1757   001BF2                     
  1758                           ;main.c: 118:         colorCurrent.clear = color_read_Clear();
  1759   001BF2  ECB5  F022         	call	_color_read_Clear	;wreg free
  1760   001BF6  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1761   001BFA  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1762   001BFE                     
  1763                           ;main.c: 120:         clear_current = colorCurrent.clear;
  1764   001BFE  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1765   001C02  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1766   001C06  6A04               	clrf	(___xxtofl@val+2)^0,c
  1767   001C08  6A05               	clrf	(___xxtofl@val+3)^0,c
  1768   001C0A  0E00               	movlw	0
  1769   001C0C  EC45  F016         	call	___xxtofl
  1770   001C10  C002  F0B4         	movff	?___xxtofl,main@clear_current
  1771   001C14  C003  F0B5         	movff	?___xxtofl+1,main@clear_current+1
  1772   001C18  C004  F0B6         	movff	?___xxtofl+2,main@clear_current+2
  1773   001C1C  C005  F0B7         	movff	?___xxtofl+3,main@clear_current+3
  1774   001C20                     
  1775                           ;main.c: 121:         clear_max = colorCalibration.clear;
  1776   001C20  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1777   001C24  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1778   001C28  6A04               	clrf	(___xxtofl@val+2)^0,c
  1779   001C2A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1780   001C2C  0E00               	movlw	0
  1781   001C2E  EC45  F016         	call	___xxtofl
  1782   001C32  C002  F0B8         	movff	?___xxtofl,main@clear_max
  1783   001C36  C003  F0B9         	movff	?___xxtofl+1,main@clear_max+1
  1784   001C3A  C004  F0BA         	movff	?___xxtofl+2,main@clear_max+2
  1785   001C3E  C005  F0BB         	movff	?___xxtofl+3,main@clear_max+3
  1786   001C42                     
  1787                           ;main.c: 122:         clear_norm = clear_current*100/clear_max;
  1788   001C42  C0B8  F02D         	movff	main@clear_max,___fldiv@a
  1789   001C46  C0B9  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1790   001C4A  C0BA  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1791   001C4E  C0BB  F030         	movff	main@clear_max+3,___fldiv@a+3
  1792   001C52  0E00               	movlw	0
  1793   001C54  6E14               	movwf	___flmul@a^0,c
  1794   001C56  0E00               	movlw	0
  1795   001C58  6E15               	movwf	(___flmul@a+1)^0,c
  1796   001C5A  0EC8               	movlw	200
  1797   001C5C  6E16               	movwf	(___flmul@a+2)^0,c
  1798   001C5E  0E42               	movlw	66
  1799   001C60  6E17               	movwf	(___flmul@a+3)^0,c
  1800   001C62  C0B4  F010         	movff	main@clear_current,___flmul@b
  1801   001C66  C0B5  F011         	movff	main@clear_current+1,___flmul@b+1
  1802   001C6A  C0B6  F012         	movff	main@clear_current+2,___flmul@b+2
  1803   001C6E  C0B7  F013         	movff	main@clear_current+3,___flmul@b+3
  1804   001C72  ECE0  F00F         	call	___flmul	;wreg free
  1805   001C76  C010  F029         	movff	?___flmul,___fldiv@b
  1806   001C7A  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1807   001C7E  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1808   001C82  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1809   001C86  ECF5  F011         	call	___fldiv	;wreg free
  1810   001C8A  C029  F042         	movff	?___fldiv,___fltol@f1
  1811   001C8E  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1812   001C92  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1813   001C96  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1814   001C9A  ECD7  F01B         	call	___fltol	;wreg free
  1815   001C9E  C042  F0BE         	movff	?___fltol,main@clear_norm
  1816   001CA2  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  1817   001CA6                     l6696:
  1818                           
  1819                           ;main.c: 125:         send2USART(clear_norm);
  1820   001CA6  C0BE  F045         	movff	main@clear_norm,send2USART@hue
  1821   001CAA  C0BF  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1822   001CAE  EC5F  F026         	call	_send2USART	;wreg free
  1823                           
  1824                           ;main.c: 127:         while(clear_norm<8){
  1825   001CB2  EFB7  F00E         	goto	l6704
  1826   001CB6                     l6698:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 128:             (colorCurrent.clear) = color_read_Clear();
  1830   001CB6  ECB5  F022         	call	_color_read_Clear	;wreg free
  1831   001CBA  C006  F0CF         	movff	?_color_read_Clear,_colorCurrent+6
  1832   001CBE  C007  F0D0         	movff	?_color_read_Clear+1,_colorCurrent+7
  1833                           
  1834                           ;main.c: 129:             clear_current = colorCurrent.clear;
  1835   001CC2  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1836   001CC6  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1837   001CCA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1838   001CCC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1839   001CCE  0E00               	movlw	0
  1840   001CD0  EC45  F016         	call	___xxtofl
  1841   001CD4  C002  F0B4         	movff	?___xxtofl,main@clear_current
  1842   001CD8  C003  F0B5         	movff	?___xxtofl+1,main@clear_current+1
  1843   001CDC  C004  F0B6         	movff	?___xxtofl+2,main@clear_current+2
  1844   001CE0  C005  F0B7         	movff	?___xxtofl+3,main@clear_current+3
  1845                           
  1846                           ;main.c: 130:             clear_max = colorCalibration.clear;
  1847   001CE4  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  1848   001CE8  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1849   001CEC  6A04               	clrf	(___xxtofl@val+2)^0,c
  1850   001CEE  6A05               	clrf	(___xxtofl@val+3)^0,c
  1851   001CF0  0E00               	movlw	0
  1852   001CF2  EC45  F016         	call	___xxtofl
  1853   001CF6  C002  F0B8         	movff	?___xxtofl,main@clear_max
  1854   001CFA  C003  F0B9         	movff	?___xxtofl+1,main@clear_max+1
  1855   001CFE  C004  F0BA         	movff	?___xxtofl+2,main@clear_max+2
  1856   001D02  C005  F0BB         	movff	?___xxtofl+3,main@clear_max+3
  1857   001D06                     
  1858                           ;main.c: 131:             clear_norm = clear_current*100/clear_max;
  1859   001D06  C0B8  F02D         	movff	main@clear_max,___fldiv@a
  1860   001D0A  C0B9  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1861   001D0E  C0BA  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1862   001D12  C0BB  F030         	movff	main@clear_max+3,___fldiv@a+3
  1863   001D16  0E00               	movlw	0
  1864   001D18  6E14               	movwf	___flmul@a^0,c
  1865   001D1A  0E00               	movlw	0
  1866   001D1C  6E15               	movwf	(___flmul@a+1)^0,c
  1867   001D1E  0EC8               	movlw	200
  1868   001D20  6E16               	movwf	(___flmul@a+2)^0,c
  1869   001D22  0E42               	movlw	66
  1870   001D24  6E17               	movwf	(___flmul@a+3)^0,c
  1871   001D26  C0B4  F010         	movff	main@clear_current,___flmul@b
  1872   001D2A  C0B5  F011         	movff	main@clear_current+1,___flmul@b+1
  1873   001D2E  C0B6  F012         	movff	main@clear_current+2,___flmul@b+2
  1874   001D32  C0B7  F013         	movff	main@clear_current+3,___flmul@b+3
  1875   001D36  ECE0  F00F         	call	___flmul	;wreg free
  1876   001D3A  C010  F029         	movff	?___flmul,___fldiv@b
  1877   001D3E  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1878   001D42  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1879   001D46  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1880   001D4A  ECF5  F011         	call	___fldiv	;wreg free
  1881   001D4E  C029  F042         	movff	?___fldiv,___fltol@f1
  1882   001D52  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1883   001D56  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1884   001D5A  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1885   001D5E  ECD7  F01B         	call	___fltol	;wreg free
  1886   001D62  C042  F0BE         	movff	?___fltol,main@clear_norm
  1887   001D66  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  1888   001D6A  EF53  F00E         	goto	l6696
  1889   001D6E                     l6704:
  1890                           
  1891                           ;main.c: 127:         while(clear_norm<8){
  1892   001D6E  0100               	movlb	0	; () banked
  1893   001D70  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  1894   001D72  E109               	bnz	u5880
  1895   001D74  0E08               	movlw	8
  1896   001D76  5DBE               	subwf	main@clear_norm& (0+255),w,b
  1897   001D78  A0D8               	btfss	status,0,c
  1898   001D7A  EFC1  F00E         	goto	u5881
  1899   001D7E  EFC3  F00E         	goto	u5880
  1900   001D82                     u5881:
  1901   001D82  EF5B  F00E         	goto	l6698
  1902   001D86                     u5880:
  1903   001D86                     
  1904                           ; BSR set to: 0
  1905                           ;main.c: 135:         T0CON0bits.T0EN=0;
  1906   001D86  9ED5               	bcf	213,7,c	;volatile
  1907   001D88                     
  1908                           ; BSR set to: 0
  1909                           ;main.c: 137:         stop(&motorL,&motorR);
  1910   001D88  0EE6               	movlw	low _motorL
  1911   001D8A  6E14               	movwf	stop@mL^0,c
  1912   001D8C  0EDD               	movlw	low _motorR
  1913   001D8E  6E15               	movwf	stop@mR^0,c
  1914   001D90  ECC9  F020         	call	_stop	;wreg free
  1915   001D94                     
  1916                           ;main.c: 140:         path_step = get16bitTMR0val(path_step);
  1917   001D94  C0BC  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  1918   001D98  C0BD  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1919   001D9C  ECE7  F01F         	call	_get16bitTMR0val	;wreg free
  1920   001DA0  C01C  F0BC         	movff	?_get16bitTMR0val,main@path_step
  1921   001DA4  C01D  F0BD         	movff	?_get16bitTMR0val+1,main@path_step+1
  1922   001DA8                     
  1923                           ;main.c: 142:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1924   001DA8  0E11               	movlw	17
  1925   001DAA  0100               	movlb	0	; () banked
  1926   001DAC  6FAD               	movwf	(??_main+1)& (0+255),b
  1927   001DAE  0E3C               	movlw	60
  1928   001DB0  6FAC               	movwf	??_main& (0+255),b
  1929   001DB2  0ECB               	movlw	203
  1930   001DB4                     u5967:
  1931   001DB4  2EE8               	decfsz	wreg,f,c
  1932   001DB6  D7FE               	bra	u5967
  1933   001DB8  2FAC               	decfsz	??_main& (0+255),f,b
  1934   001DBA  D7FC               	bra	u5967
  1935   001DBC  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1936   001DBE  D7FA               	bra	u5967
  1937   001DC0                     
  1938                           ;main.c: 145:         fullSpeedAhead(&motorL,&motorR);
  1939   001DC0  0EE6               	movlw	low _motorL
  1940   001DC2  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1941   001DC4  0EDD               	movlw	low _motorR
  1942   001DC6  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1943   001DC8  ECC7  F01D         	call	_fullSpeedAhead	;wreg free
  1944   001DCC                     
  1945                           ;main.c: 146:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1946   001DCC  0E19               	movlw	25
  1947   001DCE  0100               	movlb	0	; () banked
  1948   001DD0  6FAD               	movwf	(??_main+1)& (0+255),b
  1949   001DD2  0E5A               	movlw	90
  1950   001DD4  6FAC               	movwf	??_main& (0+255),b
  1951   001DD6  0EB1               	movlw	177
  1952   001DD8                     u5977:
  1953   001DD8  2EE8               	decfsz	wreg,f,c
  1954   001DDA  D7FE               	bra	u5977
  1955   001DDC  2FAC               	decfsz	??_main& (0+255),f,b
  1956   001DDE  D7FC               	bra	u5977
  1957   001DE0  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1958   001DE2  D7FA               	bra	u5977
  1959   001DE4  D000               	nop2	
  1960   001DE6                     
  1961                           ;main.c: 147:         stop(&motorL,&motorR);
  1962   001DE6  0EE6               	movlw	low _motorL
  1963   001DE8  6E14               	movwf	stop@mL^0,c
  1964   001DEA  0EDD               	movlw	low _motorR
  1965   001DEC  6E15               	movwf	stop@mR^0,c
  1966   001DEE  ECC9  F020         	call	_stop	;wreg free
  1967   001DF2                     
  1968                           ;main.c: 148:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1969   001DF2  0E19               	movlw	25
  1970   001DF4  0100               	movlb	0	; () banked
  1971   001DF6  6FAD               	movwf	(??_main+1)& (0+255),b
  1972   001DF8  0E5A               	movlw	90
  1973   001DFA  6FAC               	movwf	??_main& (0+255),b
  1974   001DFC  0EB1               	movlw	177
  1975   001DFE                     u5987:
  1976   001DFE  2EE8               	decfsz	wreg,f,c
  1977   001E00  D7FE               	bra	u5987
  1978   001E02  2FAC               	decfsz	??_main& (0+255),f,b
  1979   001E04  D7FC               	bra	u5987
  1980   001E06  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1981   001E08  D7FA               	bra	u5987
  1982   001E0A  D000               	nop2	
  1983   001E0C                     
  1984                           ;main.c: 150:         hue = reading_hue(&colorCurrent);
  1985   001E0C  0EC9               	movlw	low _colorCurrent
  1986   001E0E  6E50               	movwf	reading_hue@cCurr^0,c
  1987   001E10  EC52  F01D         	call	_reading_hue	;wreg free
  1988   001E14  C050  F0B2         	movff	?_reading_hue,main@hue
  1989   001E18  C051  F0B3         	movff	?_reading_hue+1,main@hue+1
  1990   001E1C                     
  1991                           ;main.c: 152:         clear_current = colorCurrent.clear;
  1992   001E1C  C0CF  F002         	movff	_colorCurrent+6,___xxtofl@val
  1993   001E20  C0D0  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1994   001E24  6A04               	clrf	(___xxtofl@val+2)^0,c
  1995   001E26  6A05               	clrf	(___xxtofl@val+3)^0,c
  1996   001E28  0E00               	movlw	0
  1997   001E2A  EC45  F016         	call	___xxtofl
  1998   001E2E  C002  F0B4         	movff	?___xxtofl,main@clear_current
  1999   001E32  C003  F0B5         	movff	?___xxtofl+1,main@clear_current+1
  2000   001E36  C004  F0B6         	movff	?___xxtofl+2,main@clear_current+2
  2001   001E3A  C005  F0B7         	movff	?___xxtofl+3,main@clear_current+3
  2002   001E3E                     
  2003                           ;main.c: 153:         clear_max = colorCalibration.clear;
  2004   001E3E  C0D9  F002         	movff	_colorCalibration+6,___xxtofl@val
  2005   001E42  C0DA  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  2006   001E46  6A04               	clrf	(___xxtofl@val+2)^0,c
  2007   001E48  6A05               	clrf	(___xxtofl@val+3)^0,c
  2008   001E4A  0E00               	movlw	0
  2009   001E4C  EC45  F016         	call	___xxtofl
  2010   001E50  C002  F0B8         	movff	?___xxtofl,main@clear_max
  2011   001E54  C003  F0B9         	movff	?___xxtofl+1,main@clear_max+1
  2012   001E58  C004  F0BA         	movff	?___xxtofl+2,main@clear_max+2
  2013   001E5C  C005  F0BB         	movff	?___xxtofl+3,main@clear_max+3
  2014   001E60                     
  2015                           ;main.c: 154:         clear_norm = clear_current*100/clear_max;
  2016   001E60  C0B8  F02D         	movff	main@clear_max,___fldiv@a
  2017   001E64  C0B9  F02E         	movff	main@clear_max+1,___fldiv@a+1
  2018   001E68  C0BA  F02F         	movff	main@clear_max+2,___fldiv@a+2
  2019   001E6C  C0BB  F030         	movff	main@clear_max+3,___fldiv@a+3
  2020   001E70  0E00               	movlw	0
  2021   001E72  6E14               	movwf	___flmul@a^0,c
  2022   001E74  0E00               	movlw	0
  2023   001E76  6E15               	movwf	(___flmul@a+1)^0,c
  2024   001E78  0EC8               	movlw	200
  2025   001E7A  6E16               	movwf	(___flmul@a+2)^0,c
  2026   001E7C  0E42               	movlw	66
  2027   001E7E  6E17               	movwf	(___flmul@a+3)^0,c
  2028   001E80  C0B4  F010         	movff	main@clear_current,___flmul@b
  2029   001E84  C0B5  F011         	movff	main@clear_current+1,___flmul@b+1
  2030   001E88  C0B6  F012         	movff	main@clear_current+2,___flmul@b+2
  2031   001E8C  C0B7  F013         	movff	main@clear_current+3,___flmul@b+3
  2032   001E90  ECE0  F00F         	call	___flmul	;wreg free
  2033   001E94  C010  F029         	movff	?___flmul,___fldiv@b
  2034   001E98  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  2035   001E9C  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  2036   001EA0  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  2037   001EA4  ECF5  F011         	call	___fldiv	;wreg free
  2038   001EA8  C029  F042         	movff	?___fldiv,___fltol@f1
  2039   001EAC  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  2040   001EB0  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  2041   001EB4  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  2042   001EB8  ECD7  F01B         	call	___fltol	;wreg free
  2043   001EBC  C042  F0BE         	movff	?___fltol,main@clear_norm
  2044   001EC0  C043  F0BF         	movff	?___fltol+1,main@clear_norm+1
  2045   001EC4                     
  2046                           ;main.c: 156:         if (clear_norm > 20){
  2047   001EC4  0100               	movlb	0	; () banked
  2048   001EC6  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  2049   001EC8  E109               	bnz	u5890
  2050   001ECA  0E15               	movlw	21
  2051   001ECC  5DBE               	subwf	main@clear_norm& (0+255),w,b
  2052   001ECE  A0D8               	btfss	status,0,c
  2053   001ED0  EF6C  F00F         	goto	u5891
  2054   001ED4  EF6E  F00F         	goto	u5890
  2055   001ED8                     u5891:
  2056   001ED8  EF87  F00F         	goto	l6736
  2057   001EDC                     u5890:
  2058   001EDC                     
  2059                           ; BSR set to: 0
  2060                           ;main.c: 157:             fullSpeedAhead(&motorL,&motorR);
  2061   001EDC  0EE6               	movlw	low _motorL
  2062   001EDE  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2063   001EE0  0EDD               	movlw	low _motorR
  2064   001EE2  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2065   001EE4  ECC7  F01D         	call	_fullSpeedAhead	;wreg free
  2066   001EE8                     
  2067                           ;main.c: 158:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2068   001EE8  0E09               	movlw	9
  2069   001EEA  0100               	movlb	0	; () banked
  2070   001EEC  6FAD               	movwf	(??_main+1)& (0+255),b
  2071   001EEE  0E1E               	movlw	30
  2072   001EF0  6FAC               	movwf	??_main& (0+255),b
  2073   001EF2  0EE4               	movlw	228
  2074   001EF4                     u5997:
  2075   001EF4  2EE8               	decfsz	wreg,f,c
  2076   001EF6  D7FE               	bra	u5997
  2077   001EF8  2FAC               	decfsz	??_main& (0+255),f,b
  2078   001EFA  D7FC               	bra	u5997
  2079   001EFC  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  2080   001EFE  D7FA               	bra	u5997
  2081   001F00  0000               	nop	
  2082   001F02                     
  2083                           ;main.c: 159:             stop(&motorL,&motorR);
  2084   001F02  0EE6               	movlw	low _motorL
  2085   001F04  6E14               	movwf	stop@mL^0,c
  2086   001F06  0EDD               	movlw	low _motorR
  2087   001F08  6E15               	movwf	stop@mR^0,c
  2088   001F0A  ECC9  F020         	call	_stop	;wreg free
  2089   001F0E                     l6736:
  2090                           
  2091                           ;main.c: 161:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  2092   001F0E  0100               	movlb	0	; () banked
  2093   001F10  51BF               	movf	(main@clear_norm+1)& (0+255),w,b
  2094   001F12  E109               	bnz	u5900
  2095   001F14  0E3D               	movlw	61
  2096   001F16  5DBE               	subwf	main@clear_norm& (0+255),w,b
  2097   001F18  A0D8               	btfss	status,0,c
  2098   001F1A  EF91  F00F         	goto	u5901
  2099   001F1E  EF93  F00F         	goto	u5900
  2100   001F22                     u5901:
  2101   001F22  EFA9  F00F         	goto	l298
  2102   001F26                     u5900:
  2103   001F26                     
  2104                           ; BSR set to: 0
  2105   001F26  0E2E               	movlw	46
  2106   001F28  5DB2               	subwf	main@hue& (0+255),w,b
  2107   001F2A  0E01               	movlw	1
  2108   001F2C  59B3               	subwfb	(main@hue+1)& (0+255),w,b
  2109   001F2E  A0D8               	btfss	status,0,c
  2110   001F30  EF9C  F00F         	goto	u5911
  2111   001F34  EF9E  F00F         	goto	u5910
  2112   001F38                     u5911:
  2113   001F38  EFB0  F00F         	goto	l6742
  2114   001F3C                     u5910:
  2115   001F3C                     
  2116                           ; BSR set to: 0
  2117   001F3C  0E5B               	movlw	91
  2118   001F3E  5DB2               	subwf	main@hue& (0+255),w,b
  2119   001F40  0E01               	movlw	1
  2120   001F42  59B3               	subwfb	(main@hue+1)& (0+255),w,b
  2121   001F44  B0D8               	btfsc	status,0,c
  2122   001F46  EFA7  F00F         	goto	u5921
  2123   001F4A  EFA9  F00F         	goto	u5920
  2124   001F4E                     u5921:
  2125   001F4E  EFB0  F00F         	goto	l6742
  2126   001F52                     u5920:
  2127   001F52                     l298:
  2128                           
  2129                           ; BSR set to: 0
  2130   001F52  A27F               	btfss	127,1,c	;volatile
  2131   001F54  EFAE  F00F         	goto	u5931
  2132   001F58  EFB0  F00F         	goto	u5930
  2133   001F5C                     u5931:
  2134   001F5C  EFCA  F00F         	goto	l6750
  2135   001F60                     u5930:
  2136   001F60                     l6742:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 163:             unsigned int white = 8;
  2140   001F60  0E00               	movlw	0
  2141   001F62  6FAF               	movwf	(main@white+1)& (0+255),b
  2142   001F64  0E08               	movlw	8
  2143   001F66  6FAE               	movwf	main@white& (0+255),b
  2144   001F68                     
  2145                           ; BSR set to: 0
  2146                           ;main.c: 164:             send2USART(white);
  2147   001F68  C0AE  F045         	movff	main@white,send2USART@hue
  2148   001F6C  C0AF  F046         	movff	main@white+1,send2USART@hue+1
  2149   001F70  EC5F  F026         	call	_send2USART	;wreg free
  2150   001F74                     
  2151                           ;main.c: 165:             returnHome(&motorL, &motorR, path_step, factor);
  2152   001F74  0EE6               	movlw	low _motorL
  2153   001F76  0100               	movlb	0	; () banked
  2154   001F78  6F60               	movwf	returnHome@mL& (0+255),b
  2155   001F7A  0EDD               	movlw	low _motorR
  2156   001F7C  6F61               	movwf	returnHome@mR& (0+255),b
  2157   001F7E  C0BC  F062         	movff	main@path_step,returnHome@path_step
  2158   001F82  C0BD  F063         	movff	main@path_step+1,returnHome@path_step+1
  2159   001F86  C0B0  F064         	movff	main@factor,returnHome@factor
  2160   001F8A  C0B1  F065         	movff	main@factor+1,returnHome@factor+1
  2161   001F8E  EC5E  F019         	call	_returnHome	;wreg free
  2162   001F92                     
  2163                           ;main.c: 166:             LATGbits.LATG1 = 0;
  2164   001F92  927F               	bcf	127,1,c	;volatile
  2165   001F94                     l6750:
  2166                           
  2167                           ;main.c: 169:         path_step = decision(hue, path_step, factor);
  2168   001F94  C0B2  F060         	movff	main@hue,decision@hue
  2169   001F98  C0B3  F061         	movff	main@hue+1,decision@hue+1
  2170   001F9C  C0BC  F062         	movff	main@path_step,decision@path_step
  2171   001FA0  C0BD  F063         	movff	main@path_step+1,decision@path_step+1
  2172   001FA4  C0B0  F064         	movff	main@factor,decision@factor
  2173   001FA8  C0B1  F065         	movff	main@factor+1,decision@factor+1
  2174   001FAC  ECC2  F013         	call	_decision	;wreg free
  2175   001FB0  C060  F0BC         	movff	?_decision,main@path_step
  2176   001FB4  C061  F0BD         	movff	?_decision+1,main@path_step+1
  2177   001FB8  EFEF  F00D         	goto	l6678
  2178   001FBC  EF1D  F000         	goto	start
  2179   001FC0                     __end_of_main:
  2180                           	callstack 0
  2181                           
  2182 ;; *************** function _returnHome *****************
  2183 ;; Defined at:
  2184 ;;		line 97 in file "return_func.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2187 ;;		 -> motorL(9), 
  2188 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2189 ;;		 -> motorR(9), 
  2190 ;;  path_step       2    2[BANK0 ] unsigned int 
  2191 ;;  factor          2    4[BANK0 ] unsigned int 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  action_turn     1   12[BANK0 ] unsigned char 
  2194 ;;  i               2   13[BANK0 ] unsigned int 
  2195 ;;  time_ms         4    8[BANK0 ] long 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2205 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;Total ram usage:       15 bytes
  2210 ;; Hardware stack levels used: 1
  2211 ;; Hardware stack levels required when called: 6
  2212 ;; This function calls:
  2213 ;;		_moveWhite
  2214 ;;		_reverseStraight
  2215 ;;		_reverseTurn
  2216 ;; This function is called by:
  2217 ;;		_main
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text1
  2222   0032BC                     __ptext1:
  2223                           	callstack 0
  2224   0032BC                     _returnHome:
  2225                           	callstack 24
  2226   0032BC                     
  2227                           ;return_func.c: 97: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step, unsigned int factor);return_func.c: 98: {;return_func.c: 100:     long tim
      +                          e_ms;;return_func.c: 103:     LATGbits.LATG0 = 0;
  2228   0032BC  907F               	bcf	127,0,c	;volatile
  2229                           
  2230                           ;return_func.c: 104:     LATEbits.LATE7 = 0;
  2231   0032BE  9E7D               	bcf	125,7,c	;volatile
  2232                           
  2233                           ;return_func.c: 105:     LATAbits.LATA3 = 0;
  2234   0032C0  9679               	bcf	121,3,c	;volatile
  2235   0032C2                     
  2236                           ;return_func.c: 107:     moveWhite(&motorL,&motorR,factor);
  2237   0032C2  0EE6               	movlw	low _motorL
  2238   0032C4  6E1F               	movwf	moveWhite@mL^0,c
  2239   0032C6  0EDD               	movlw	low _motorR
  2240   0032C8  6E20               	movwf	moveWhite@mR^0,c
  2241   0032CA  C064  F021         	movff	returnHome@factor,moveWhite@factor
  2242   0032CE  C065  F022         	movff	returnHome@factor+1,moveWhite@factor+1
  2243   0032D2  EC50  F024         	call	_moveWhite	;wreg free
  2244   0032D6                     
  2245                           ;return_func.c: 109:     if (path_step > 0) {
  2246   0032D6  0100               	movlb	0	; () banked
  2247   0032D8  5162               	movf	returnHome@path_step& (0+255),w,b
  2248   0032DA  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  2249   0032DC  B4D8               	btfsc	status,2,c
  2250   0032DE  EF73  F019         	goto	u5831
  2251   0032E2  EF75  F019         	goto	u5830
  2252   0032E6                     u5831:
  2253   0032E6  EF14  F01A         	goto	l702
  2254   0032EA                     u5830:
  2255   0032EA                     
  2256                           ; BSR set to: 0
  2257                           ;return_func.c: 110:         for (unsigned int i = path_step - 1; ; i--) {
  2258   0032EA  0EFF               	movlw	255
  2259   0032EC  2562               	addwf	returnHome@path_step& (0+255),w,b
  2260   0032EE  6F6D               	movwf	returnHome@i& (0+255),b
  2261   0032F0  0EFF               	movlw	255
  2262   0032F2  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  2263   0032F4  6F6E               	movwf	(returnHome@i+1)& (0+255),b
  2264   0032F6                     l6582:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;return_func.c: 112:             char action_turn = action[i];
  2268   0032F6  0E3C               	movlw	low _action
  2269   0032F8  256D               	addwf	returnHome@i& (0+255),w,b
  2270   0032FA  6ED9               	movwf	fsr2l,c
  2271   0032FC  0E01               	movlw	high _action
  2272   0032FE  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2273   003300  6EDA               	movwf	fsr2h,c
  2274   003302  50DF               	movf	indf2,w,c
  2275   003304  6F6C               	movwf	returnHome@action_turn& (0+255),b
  2276   003306                     
  2277                           ; BSR set to: 0
  2278                           ;return_func.c: 113:             if (action[i+1]== 5 || action[i+1]==7){
  2279   003306  0E3D               	movlw	low (_action+1)
  2280   003308  256D               	addwf	returnHome@i& (0+255),w,b
  2281   00330A  6ED9               	movwf	fsr2l,c
  2282   00330C  0E01               	movlw	high (_action+1)
  2283   00330E  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2284   003310  6EDA               	movwf	fsr2h,c
  2285   003312  0E05               	movlw	5
  2286   003314  18DE               	xorwf	postinc2,w,c
  2287   003316  B4D8               	btfsc	status,2,c
  2288   003318  EF90  F019         	goto	u5841
  2289   00331C  EF92  F019         	goto	u5840
  2290   003320                     u5841:
  2291   003320  EFA1  F019         	goto	l6588
  2292   003324                     u5840:
  2293   003324                     
  2294                           ; BSR set to: 0
  2295   003324  0E3D               	movlw	low (_action+1)
  2296   003326  256D               	addwf	returnHome@i& (0+255),w,b
  2297   003328  6ED9               	movwf	fsr2l,c
  2298   00332A  0E01               	movlw	high (_action+1)
  2299   00332C  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2300   00332E  6EDA               	movwf	fsr2h,c
  2301   003330  0E07               	movlw	7
  2302   003332  18DE               	xorwf	postinc2,w,c
  2303   003334  A4D8               	btfss	status,2,c
  2304   003336  EF9F  F019         	goto	u5851
  2305   00333A  EFA1  F019         	goto	u5850
  2306   00333E                     u5851:
  2307   00333E  EFBF  F019         	goto	l6590
  2308   003342                     u5850:
  2309   003342                     l6588:
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;return_func.c: 114:                 time_ms = time[i]-2250;
  2313   003342  0E00               	movlw	low _time
  2314   003344  6F66               	movwf	??_returnHome& (0+255),b
  2315   003346  0E02               	movlw	high _time
  2316   003348  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2317   00334A  90D8               	bcf	status,0,c
  2318   00334C  356D               	rlcf	returnHome@i& (0+255),w,b
  2319   00334E  6ED9               	movwf	fsr2l,c
  2320   003350  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2321   003352  6EDA               	movwf	fsr2h,c
  2322   003354  90D8               	bcf	status,0,c
  2323   003356  36D9               	rlcf	fsr2l,f,c
  2324   003358  36DA               	rlcf	fsr2h,f,c
  2325   00335A  5166               	movf	??_returnHome& (0+255),w,b
  2326   00335C  26D9               	addwf	fsr2l,f,c
  2327   00335E  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2328   003360  22DA               	addwfc	fsr2h,f,c
  2329   003362  0E36               	movlw	54
  2330   003364  24DE               	addwf	postinc2,w,c
  2331   003366  6F68               	movwf	returnHome@time_ms& (0+255),b
  2332   003368  0EF7               	movlw	247
  2333   00336A  20DE               	addwfc	postinc2,w,c
  2334   00336C  6F69               	movwf	(returnHome@time_ms+1)& (0+255),b
  2335   00336E  0EFF               	movlw	255
  2336   003370  20DE               	addwfc	postinc2,w,c
  2337   003372  6F6A               	movwf	(returnHome@time_ms+2)& (0+255),b
  2338   003374  0EFF               	movlw	255
  2339   003376  20DE               	addwfc	postinc2,w,c
  2340   003378  6F6B               	movwf	(returnHome@time_ms+3)& (0+255),b
  2341                           
  2342                           ;return_func.c: 115:             }else{
  2343   00337A  EFD7  F019         	goto	l6592
  2344   00337E                     l6590:
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;return_func.c: 116:                 time_ms = time[i];
  2348   00337E  0E00               	movlw	low _time
  2349   003380  6F66               	movwf	??_returnHome& (0+255),b
  2350   003382  0E02               	movlw	high _time
  2351   003384  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2352   003386  90D8               	bcf	status,0,c
  2353   003388  356D               	rlcf	returnHome@i& (0+255),w,b
  2354   00338A  6ED9               	movwf	fsr2l,c
  2355   00338C  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2356   00338E  6EDA               	movwf	fsr2h,c
  2357   003390  90D8               	bcf	status,0,c
  2358   003392  36D9               	rlcf	fsr2l,f,c
  2359   003394  36DA               	rlcf	fsr2h,f,c
  2360   003396  5166               	movf	??_returnHome& (0+255),w,b
  2361   003398  26D9               	addwf	fsr2l,f,c
  2362   00339A  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2363   00339C  22DA               	addwfc	fsr2h,f,c
  2364   00339E  CFDE F068          	movff	postinc2,returnHome@time_ms
  2365   0033A2  CFDE F069          	movff	postinc2,returnHome@time_ms+1
  2366   0033A6  CFDE F06A          	movff	postinc2,returnHome@time_ms+2
  2367   0033AA  CFDE F06B          	movff	postinc2,returnHome@time_ms+3
  2368   0033AE                     l6592:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;return_func.c: 118:             if (action_turn == 0) {
  2372   0033AE  516C               	movf	returnHome@action_turn& (0+255),w,b
  2373   0033B0  A4D8               	btfss	status,2,c
  2374   0033B2  EFDD  F019         	goto	u5861
  2375   0033B6  EFDF  F019         	goto	u5860
  2376   0033BA                     u5861:
  2377   0033BA  EFEF  F019         	goto	l6596
  2378   0033BE                     u5860:
  2379   0033BE                     
  2380                           ; BSR set to: 0
  2381                           ;return_func.c: 119:                 reverseStraight(mL, mR, time_ms);
  2382   0033BE  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  2383   0033C2  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  2384   0033C6  C068  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  2385   0033CA  C069  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2386   0033CE  C06A  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2387   0033D2  C06B  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2388   0033D6  ECDC  F01C         	call	_reverseStraight	;wreg free
  2389                           
  2390                           ;return_func.c: 120:             } else {
  2391   0033DA  EF03  F01A         	goto	l6598
  2392   0033DE                     l6596:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;return_func.c: 121:                 reverseTurn(mL, mR, action_turn, time_ms, factor);
  2396   0033DE  C060  F052         	movff	returnHome@mL,reverseTurn@mL
  2397   0033E2  C061  F053         	movff	returnHome@mR,reverseTurn@mR
  2398   0033E6  C06C  F054         	movff	returnHome@action_turn,reverseTurn@actionStep
  2399   0033EA  C068  F055         	movff	returnHome@time_ms,reverseTurn@time_ms
  2400   0033EE  C069  F056         	movff	returnHome@time_ms+1,reverseTurn@time_ms+1
  2401   0033F2  C06A  F057         	movff	returnHome@time_ms+2,reverseTurn@time_ms+2
  2402   0033F6  C06B  F058         	movff	returnHome@time_ms+3,reverseTurn@time_ms+3
  2403   0033FA  C064  F059         	movff	returnHome@factor,reverseTurn@factor
  2404   0033FE  C065  F05A         	movff	returnHome@factor+1,reverseTurn@factor+1
  2405   003402  ECC0  F01A         	call	_reverseTurn	;wreg free
  2406   003406                     l6598:
  2407                           
  2408                           ;return_func.c: 124:             if (i == 0) break;
  2409   003406  0100               	movlb	0	; () banked
  2410   003408  516D               	movf	returnHome@i& (0+255),w,b
  2411   00340A  116E               	iorwf	(returnHome@i+1)& (0+255),w,b
  2412   00340C  A4D8               	btfss	status,2,c
  2413   00340E  EF0B  F01A         	goto	u5871
  2414   003412  EF0D  F01A         	goto	u5870
  2415   003416                     u5871:
  2416   003416  EF0F  F01A         	goto	l6602
  2417   00341A                     u5870:
  2418   00341A  EF14  F01A         	goto	l702
  2419   00341E                     l6602:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;return_func.c: 125:         }
  2423   00341E  076D               	decf	returnHome@i& (0+255),f,b
  2424   003420  A0D8               	btfss	status,0,c
  2425   003422  076E               	decf	(returnHome@i+1)& (0+255),f,b
  2426   003424  EF7B  F019         	goto	l6582
  2427   003428                     l702:
  2428                           
  2429                           ; BSR set to: 0
  2430   003428  0003               	sleep		;# 
  2431   00342A  0012               	return		;funcret
  2432   00342C                     __end_of_returnHome:
  2433                           	callstack 0
  2434                           
  2435 ;; *************** function _reverseTurn *****************
  2436 ;; Defined at:
  2437 ;;		line 24 in file "return_func.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  mL              1   81[COMRAM] PTR struct DC_motor
  2440 ;;		 -> motorL(9), 
  2441 ;;  mR              1   82[COMRAM] PTR struct DC_motor
  2442 ;;		 -> motorR(9), 
  2443 ;;  actionStep      1   83[COMRAM] unsigned char 
  2444 ;;  time_ms         4   84[COMRAM] long 
  2445 ;;  factor          2   88[COMRAM] unsigned int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2457 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2460 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2461 ;;Total ram usage:       11 bytes
  2462 ;; Hardware stack levels used: 1
  2463 ;; Hardware stack levels required when called: 5
  2464 ;; This function calls:
  2465 ;;		_backHalf
  2466 ;;		_left135
  2467 ;;		_left90
  2468 ;;		_right135
  2469 ;;		_right90
  2470 ;;		_turn180
  2471 ;; This function is called by:
  2472 ;;		_returnHome
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text2
  2477   003580                     __ptext2:
  2478                           	callstack 0
  2479   003580                     _reverseTurn:
  2480                           	callstack 24
  2481   003580                     
  2482                           ;return_func.c: 25:     if (actionStep == 1) {
  2483   003580  0454               	decf	reverseTurn@actionStep^0,w,c
  2484   003582  A4D8               	btfss	status,2,c
  2485   003584  EFC6  F01A         	goto	u5461
  2486   003588  EFC8  F01A         	goto	u5460
  2487   00358C                     u5461:
  2488   00358C  EFE6  F01A         	goto	l6264
  2489   003590                     u5460:
  2490   003590                     l6258:
  2491                           
  2492                           ;return_func.c: 28:         left90(mL,mR, factor);
  2493   003590  C052  F019         	movff	reverseTurn@mL,left90@mL
  2494   003594  C053  F01A         	movff	reverseTurn@mR,left90@mR
  2495   003598  C059  F01B         	movff	reverseTurn@factor,left90@factor
  2496   00359C  C05A  F01C         	movff	reverseTurn@factor+1,left90@factor+1
  2497   0035A0  EC8B  F023         	call	_left90	;wreg free
  2498   0035A4                     l6260:
  2499                           
  2500                           ;return_func.c: 29:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2501   0035A4  0E29               	movlw	41
  2502   0035A6  6E5C               	movwf	(??_reverseTurn+1)^0,c
  2503   0035A8  0E96               	movlw	150
  2504   0035AA  6E5B               	movwf	??_reverseTurn^0,c
  2505   0035AC  0E7F               	movlw	127
  2506   0035AE                     u6007:
  2507   0035AE  2EE8               	decfsz	wreg,f,c
  2508   0035B0  D7FE               	bra	u6007
  2509   0035B2  2E5B               	decfsz	??_reverseTurn^0,f,c
  2510   0035B4  D7FC               	bra	u6007
  2511   0035B6  2E5C               	decfsz	(??_reverseTurn+1)^0,f,c
  2512   0035B8  D7FA               	bra	u6007
  2513   0035BA  0000               	nop	
  2514   0035BC                     
  2515                           ;return_func.c: 30:         backHalf(mL,mR);
  2516   0035BC  C052  F019         	movff	reverseTurn@mL,backHalf@mL
  2517   0035C0  C053  F01A         	movff	reverseTurn@mR,backHalf@mR
  2518   0035C4  ECD4  F025         	call	_backHalf	;wreg free
  2519                           
  2520                           ;return_func.c: 32:     } else if (actionStep == 2) {
  2521   0035C8  EF50  F01B         	goto	l691
  2522   0035CC                     l6264:
  2523   0035CC  0E02               	movlw	2
  2524   0035CE  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2525   0035D0  A4D8               	btfss	status,2,c
  2526   0035D2  EFED  F01A         	goto	u5471
  2527   0035D6  EFEF  F01A         	goto	u5470
  2528   0035DA                     u5471:
  2529   0035DA  EFFB  F01A         	goto	l6272
  2530   0035DE                     u5470:
  2531   0035DE                     l6266:
  2532                           
  2533                           ;return_func.c: 35:         right90(mL,mR, factor);
  2534   0035DE  C052  F04C         	movff	reverseTurn@mL,right90@mL
  2535   0035E2  C053  F04D         	movff	reverseTurn@mR,right90@mR
  2536   0035E6  C059  F04E         	movff	reverseTurn@factor,right90@factor
  2537   0035EA  C05A  F04F         	movff	reverseTurn@factor+1,right90@factor+1
  2538   0035EE  ECCD  F023         	call	_right90	;wreg free
  2539   0035F2  EFD2  F01A         	goto	l6260
  2540   0035F6                     l6272:
  2541   0035F6  0E03               	movlw	3
  2542   0035F8  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2543   0035FA  A4D8               	btfss	status,2,c
  2544   0035FC  EF02  F01B         	goto	u5481
  2545   003600  EF04  F01B         	goto	u5480
  2546   003604                     u5481:
  2547   003604  EF10  F01B         	goto	l6280
  2548   003608                     u5480:
  2549   003608                     
  2550                           ;return_func.c: 42:         turn180(mL,mR, factor);
  2551   003608  C052  F019         	movff	reverseTurn@mL,turn180@mL
  2552   00360C  C053  F01A         	movff	reverseTurn@mR,turn180@mR
  2553   003610  C059  F01B         	movff	reverseTurn@factor,turn180@factor
  2554   003614  C05A  F01C         	movff	reverseTurn@factor+1,turn180@factor+1
  2555   003618  ECAC  F023         	call	_turn180	;wreg free
  2556   00361C  EFD2  F01A         	goto	l6260
  2557   003620                     l6280:
  2558   003620  0E04               	movlw	4
  2559   003622  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2560   003624  A4D8               	btfss	status,2,c
  2561   003626  EF17  F01B         	goto	u5491
  2562   00362A  EF19  F01B         	goto	u5490
  2563   00362E                     u5491:
  2564   00362E  EF25  F01B         	goto	l6288
  2565   003632                     u5490:
  2566   003632                     
  2567                           ;return_func.c: 49:         right135(mL,mR, factor);
  2568   003632  C052  F019         	movff	reverseTurn@mL,right135@mL
  2569   003636  C053  F01A         	movff	reverseTurn@mR,right135@mR
  2570   00363A  C059  F01B         	movff	reverseTurn@factor,right135@factor
  2571   00363E  C05A  F01C         	movff	reverseTurn@factor+1,right135@factor+1
  2572   003642  EC49  F023         	call	_right135	;wreg free
  2573   003646  EFD2  F01A         	goto	l6260
  2574   00364A                     l6288:
  2575   00364A  0E05               	movlw	5
  2576   00364C  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2577   00364E  A4D8               	btfss	status,2,c
  2578   003650  EF2C  F01B         	goto	u5501
  2579   003654  EF2E  F01B         	goto	u5500
  2580   003658                     u5501:
  2581   003658  EF30  F01B         	goto	l6296
  2582   00365C                     u5500:
  2583   00365C  EFC8  F01A         	goto	l6258
  2584   003660                     l6296:
  2585   003660  0E06               	movlw	6
  2586   003662  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2587   003664  A4D8               	btfss	status,2,c
  2588   003666  EF37  F01B         	goto	u5511
  2589   00366A  EF39  F01B         	goto	u5510
  2590   00366E                     u5511:
  2591   00366E  EF45  F01B         	goto	l6304
  2592   003672                     u5510:
  2593   003672                     
  2594                           ;return_func.c: 63:         left135(mL,mR, factor);
  2595   003672  C052  F019         	movff	reverseTurn@mL,left135@mL
  2596   003676  C053  F01A         	movff	reverseTurn@mR,left135@mR
  2597   00367A  C059  F01B         	movff	reverseTurn@factor,left135@factor
  2598   00367E  C05A  F01C         	movff	reverseTurn@factor+1,left135@factor+1
  2599   003682  EC6A  F023         	call	_left135	;wreg free
  2600   003686  EFD2  F01A         	goto	l6260
  2601   00368A                     l6304:
  2602   00368A  0E07               	movlw	7
  2603   00368C  1854               	xorwf	reverseTurn@actionStep^0,w,c
  2604   00368E  A4D8               	btfss	status,2,c
  2605   003690  EF4C  F01B         	goto	u5521
  2606   003694  EF4E  F01B         	goto	u5520
  2607   003698                     u5521:
  2608   003698  EF50  F01B         	goto	l685
  2609   00369C                     u5520:
  2610   00369C  EFEF  F01A         	goto	l6266
  2611   0036A0                     l685:
  2612   0036A0                     l691:
  2613   0036A0  0012               	return		;funcret
  2614   0036A2                     __end_of_reverseTurn:
  2615                           	callstack 0
  2616                           
  2617 ;; *************** function _reverseStraight *****************
  2618 ;; Defined at:
  2619 ;;		line 80 in file "return_func.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  2622 ;;		 -> motorL(9), 
  2623 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  2624 ;;		 -> motorR(9), 
  2625 ;;  time_ms         4   82[COMRAM] long 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  delayMs         2   88[COMRAM] unsigned int 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2637 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;Total ram usage:       10 bytes
  2642 ;; Hardware stack levels used: 1
  2643 ;; Hardware stack levels required when called: 4
  2644 ;; This function calls:
  2645 ;;		_customDelayMs
  2646 ;;		_fullSpeedAhead
  2647 ;;		_stop
  2648 ;; This function is called by:
  2649 ;;		_returnHome
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text3
  2654   0039B8                     __ptext3:
  2655                           	callstack 0
  2656   0039B8                     _reverseStraight:
  2657                           	callstack 25
  2658   0039B8                     
  2659                           ;return_func.c: 80: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 81: {;return_func.c: 83:     unsigned int delayMs = 1000;
  2660   0039B8  0E03               	movlw	3
  2661   0039BA  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2662   0039BC  0EE8               	movlw	232
  2663   0039BE  6E59               	movwf	reverseStraight@delayMs^0,c
  2664   0039C0                     
  2665                           ;return_func.c: 86:     if (time_ms>6500){delayMs = 7750; }
  2666   0039C0  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2667   0039C2  EFEF  F01C         	goto	u5531
  2668   0039C6  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2669   0039C8  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2670   0039CA  E10B               	bnz	u5530
  2671   0039CC  0E65               	movlw	101
  2672   0039CE  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2673   0039D0  0E19               	movlw	25
  2674   0039D2  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2675   0039D4  A0D8               	btfss	status,0,c
  2676   0039D6  EFEF  F01C         	goto	u5531
  2677   0039DA  EFF1  F01C         	goto	u5530
  2678   0039DE                     u5531:
  2679   0039DE  EFF7  F01C         	goto	l6318
  2680   0039E2                     u5530:
  2681   0039E2  0E1E               	movlw	30
  2682   0039E4  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2683   0039E6  0E46               	movlw	70
  2684   0039E8  6E59               	movwf	reverseStraight@delayMs^0,c
  2685   0039EA  EF34  F01D         	goto	l6328
  2686   0039EE                     l6318:
  2687   0039EE  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2688   0039F0  EF06  F01D         	goto	u5541
  2689   0039F4  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2690   0039F6  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2691   0039F8  E10B               	bnz	u5540
  2692   0039FA  0EA1               	movlw	161
  2693   0039FC  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2694   0039FE  0E0F               	movlw	15
  2695   003A00  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2696   003A02  A0D8               	btfss	status,0,c
  2697   003A04  EF06  F01D         	goto	u5541
  2698   003A08  EF08  F01D         	goto	u5540
  2699   003A0C                     u5541:
  2700   003A0C  EF1F  F01D         	goto	l6324
  2701   003A10                     u5540:
  2702   003A10  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2703   003A12  EF19  F01D         	goto	u5550
  2704   003A16  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2705   003A18  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2706   003A1A  E109               	bnz	u5551
  2707   003A1C  0E64               	movlw	100
  2708   003A1E  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2709   003A20  0E19               	movlw	25
  2710   003A22  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2711   003A24  B0D8               	btfsc	status,0,c
  2712   003A26  EF17  F01D         	goto	u5551
  2713   003A2A  EF19  F01D         	goto	u5550
  2714   003A2E                     u5551:
  2715   003A2E  EF1F  F01D         	goto	l6324
  2716   003A32                     u5550:
  2717   003A32  0E15               	movlw	21
  2718   003A34  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2719   003A36  0E7C               	movlw	124
  2720   003A38  6E59               	movwf	reverseStraight@delayMs^0,c
  2721   003A3A  EF34  F01D         	goto	l6328
  2722   003A3E                     l6324:
  2723   003A3E  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2724   003A40  EF30  F01D         	goto	u5560
  2725   003A44  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2726   003A46  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2727   003A48  E109               	bnz	u5561
  2728   003A4A  0EA0               	movlw	160
  2729   003A4C  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2730   003A4E  0E0F               	movlw	15
  2731   003A50  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2732   003A52  B0D8               	btfsc	status,0,c
  2733   003A54  EF2E  F01D         	goto	u5561
  2734   003A58  EF30  F01D         	goto	u5560
  2735   003A5C                     u5561:
  2736   003A5C  EF34  F01D         	goto	l6328
  2737   003A60                     u5560:
  2738   003A60  0E0A               	movlw	10
  2739   003A62  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2740   003A64  0EBE               	movlw	190
  2741   003A66  6E59               	movwf	reverseStraight@delayMs^0,c
  2742   003A68                     l6328:
  2743                           
  2744                           ;return_func.c: 90:     fullSpeedAhead(&motorL,&motorR);
  2745   003A68  0EE6               	movlw	low _motorL
  2746   003A6A  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2747   003A6C  0EDD               	movlw	low _motorR
  2748   003A6E  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2749   003A70  ECC7  F01D         	call	_fullSpeedAhead	;wreg free
  2750   003A74                     
  2751                           ;return_func.c: 91:     customDelayMs(delayMs);
  2752   003A74  C059  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2753   003A78  C05A  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2754   003A7C  EC38  F025         	call	_customDelayMs	;wreg free
  2755   003A80                     
  2756                           ;return_func.c: 92:     stop(&motorL,&motorR);
  2757   003A80  0EE6               	movlw	low _motorL
  2758   003A82  6E14               	movwf	stop@mL^0,c
  2759   003A84  0EDD               	movlw	low _motorR
  2760   003A86  6E15               	movwf	stop@mR^0,c
  2761   003A88  ECC9  F020         	call	_stop	;wreg free
  2762   003A8C                     
  2763                           ;return_func.c: 93:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2764   003A8C  0E19               	movlw	25
  2765   003A8E  6E58               	movwf	(??_reverseStraight+1)^0,c
  2766   003A90  0E5A               	movlw	90
  2767   003A92  6E57               	movwf	??_reverseStraight^0,c
  2768   003A94  0EB2               	movlw	178
  2769   003A96                     u6017:
  2770   003A96  2EE8               	decfsz	wreg,f,c
  2771   003A98  D7FE               	bra	u6017
  2772   003A9A  2E57               	decfsz	??_reverseStraight^0,f,c
  2773   003A9C  D7FC               	bra	u6017
  2774   003A9E  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  2775   003AA0  D7FA               	bra	u6017
  2776   003AA2  0012               	return		;funcret
  2777   003AA4                     __end_of_reverseStraight:
  2778                           	callstack 0
  2779                           
  2780 ;; *************** function _fullSpeedAhead *****************
  2781 ;; Defined at:
  2782 ;;		line 144 in file "dc_motor.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  2785 ;;		 -> motorL(9), 
  2786 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  2787 ;;		 -> motorR(9), 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  power           2   78[COMRAM] int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;Total ram usage:        5 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 3
  2806 ;; This function calls:
  2807 ;;		___flmul
  2808 ;;		___fltol
  2809 ;;		___xxtofl
  2810 ;;		_setMotorPWM
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;;		_reverseStraight
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text4
  2818   003B8E                     __ptext4:
  2819                           	callstack 0
  2820   003B8E                     _fullSpeedAhead:
  2821                           	callstack 25
  2822   003B8E                     
  2823                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2824   003B8E  504C               	movf	fullSpeedAhead@mL^0,w,c
  2825   003B90  6ED9               	movwf	fsr2l,c
  2826   003B92  6ADA               	clrf	fsr2h,c
  2827   003B94  0E01               	movlw	1
  2828   003B96  26D9               	addwf	fsr2l,f,c
  2829   003B98  0E01               	movlw	1
  2830   003B9A  6EDF               	movwf	indf2,c
  2831                           
  2832                           ;dc_motor.c: 148:     mR->direction = 1;
  2833   003B9C  504D               	movf	fullSpeedAhead@mR^0,w,c
  2834   003B9E  6ED9               	movwf	fsr2l,c
  2835   003BA0  6ADA               	clrf	fsr2h,c
  2836   003BA2  0E01               	movlw	1
  2837   003BA4  26D9               	addwf	fsr2l,f,c
  2838   003BA6  0E01               	movlw	1
  2839   003BA8  6EDF               	movwf	indf2,c
  2840   003BAA                     
  2841                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2842   003BAA  0E00               	movlw	0
  2843   003BAC  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
  2844   003BAE  0E00               	movlw	0
  2845   003BB0  6E4F               	movwf	fullSpeedAhead@power^0,c
  2846   003BB2                     l6080:
  2847                           
  2848                           ;dc_motor.c: 151:         mL->power = power;
  2849   003BB2  504C               	movf	fullSpeedAhead@mL^0,w,c
  2850   003BB4  6ED9               	movwf	fsr2l,c
  2851   003BB6  6ADA               	clrf	fsr2h,c
  2852   003BB8  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
  2853   003BBC                     
  2854                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2855   003BBC  504D               	movf	fullSpeedAhead@mR^0,w,c
  2856   003BBE  6ED9               	movwf	fsr2l,c
  2857   003BC0  6ADA               	clrf	fsr2h,c
  2858   003BC2  0E66               	movlw	102
  2859   003BC4  6E14               	movwf	___flmul@a^0,c
  2860   003BC6  0E66               	movlw	102
  2861   003BC8  6E15               	movwf	(___flmul@a+1)^0,c
  2862   003BCA  0E86               	movlw	134
  2863   003BCC  6E16               	movwf	(___flmul@a+2)^0,c
  2864   003BCE  0E3F               	movlw	63
  2865   003BD0  6E17               	movwf	(___flmul@a+3)^0,c
  2866   003BD2  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2867   003BD6  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2868   003BDA  0E00               	movlw	0
  2869   003BDC  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2870   003BDE  0EFF               	movlw	-1
  2871   003BE0  6E04               	movwf	(___xxtofl@val+2)^0,c
  2872   003BE2  6E05               	movwf	(___xxtofl@val+3)^0,c
  2873   003BE4  0E01               	movlw	1
  2874   003BE6  EC45  F016         	call	___xxtofl
  2875   003BEA  C002  F010         	movff	?___xxtofl,___flmul@b
  2876   003BEE  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2877   003BF2  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2878   003BF6  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2879   003BFA  ECE0  F00F         	call	___flmul	;wreg free
  2880   003BFE  C010  F042         	movff	?___flmul,___fltol@f1
  2881   003C02  C011  F043         	movff	?___flmul+1,___fltol@f1+1
  2882   003C06  C012  F044         	movff	?___flmul+2,___fltol@f1+2
  2883   003C0A  C013  F045         	movff	?___flmul+3,___fltol@f1+3
  2884   003C0E  ECD7  F01B         	call	___fltol	;wreg free
  2885   003C12  5042               	movf	?___fltol^0,w,c
  2886   003C14  6EDF               	movwf	indf2,c
  2887   003C16                     
  2888                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2889   003C16  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2890   003C1A  EC16  F01A         	call	_setMotorPWM	;wreg free
  2891   003C1E                     
  2892                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2893   003C1E  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2894   003C22  EC16  F01A         	call	_setMotorPWM	;wreg free
  2895   003C26                     
  2896                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2897   003C26  0E0B               	movlw	11
  2898   003C28  6E4E               	movwf	??_fullSpeedAhead^0,c
  2899   003C2A  0E62               	movlw	98
  2900   003C2C                     u6027:
  2901   003C2C  2EE8               	decfsz	wreg,f,c
  2902   003C2E  D7FE               	bra	u6027
  2903   003C30  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
  2904   003C32  D7FC               	bra	u6027
  2905   003C34  D000               	nop2	
  2906   003C36                     
  2907                           ;dc_motor.c: 160:     }
  2908   003C36  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
  2909   003C38  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
  2910   003C3A  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2911   003C3C  EF29  F01E         	goto	u5441
  2912   003C40  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
  2913   003C42  E109               	bnz	u5440
  2914   003C44  0E33               	movlw	51
  2915   003C46  5C4F               	subwf	fullSpeedAhead@power^0,w,c
  2916   003C48  A0D8               	btfss	status,0,c
  2917   003C4A  EF29  F01E         	goto	u5441
  2918   003C4E  EF2B  F01E         	goto	u5440
  2919   003C52                     u5441:
  2920   003C52  EFD9  F01D         	goto	l6080
  2921   003C56                     u5440:
  2922   003C56  0012               	return		;funcret
  2923   003C58                     __end_of_fullSpeedAhead:
  2924                           	callstack 0
  2925                           
  2926 ;; *************** function _moveWhite *****************
  2927 ;; Defined at:
  2928 ;;		line 331 in file "dc_motor.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2931 ;;		 -> motorL(9), 
  2932 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2933 ;;		 -> motorR(9), 
  2934 ;;  factor          2   32[COMRAM] unsigned int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2946 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used: 1
  2952 ;; Hardware stack levels required when called: 5
  2953 ;; This function calls:
  2954 ;;		_backHalf
  2955 ;;		_turn180
  2956 ;; This function is called by:
  2957 ;;		_returnHome
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text5
  2962   0048A0                     __ptext5:
  2963                           	callstack 0
  2964   0048A0                     _moveWhite:
  2965                           	callstack 24
  2966   0048A0                     
  2967                           ;dc_motor.c: 331: void moveWhite(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 332: {;dc_motor.c: 334:     backHalf(mL,mR);
  2968   0048A0  C01F  F019         	movff	moveWhite@mL,backHalf@mL
  2969   0048A4  C020  F01A         	movff	moveWhite@mR,backHalf@mR
  2970   0048A8  ECD4  F025         	call	_backHalf	;wreg free
  2971   0048AC                     
  2972                           ;dc_motor.c: 335:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2973   0048AC  0E29               	movlw	41
  2974   0048AE  6E24               	movwf	(??_moveWhite+1)^0,c
  2975   0048B0  0E96               	movlw	150
  2976   0048B2  6E23               	movwf	??_moveWhite^0,c
  2977   0048B4  0E7F               	movlw	127
  2978   0048B6                     u6037:
  2979   0048B6  2EE8               	decfsz	wreg,f,c
  2980   0048B8  D7FE               	bra	u6037
  2981   0048BA  2E23               	decfsz	??_moveWhite^0,f,c
  2982   0048BC  D7FC               	bra	u6037
  2983   0048BE  2E24               	decfsz	(??_moveWhite+1)^0,f,c
  2984   0048C0  D7FA               	bra	u6037
  2985   0048C2  0000               	nop	
  2986   0048C4                     
  2987                           ;dc_motor.c: 336:     turn180(mL,mR,factor);
  2988   0048C4  C01F  F019         	movff	moveWhite@mL,turn180@mL
  2989   0048C8  C020  F01A         	movff	moveWhite@mR,turn180@mR
  2990   0048CC  C021  F01B         	movff	moveWhite@factor,turn180@factor
  2991   0048D0  C022  F01C         	movff	moveWhite@factor+1,turn180@factor+1
  2992   0048D4  ECAC  F023         	call	_turn180	;wreg free
  2993   0048D8  0012               	return		;funcret
  2994   0048DA                     __end_of_moveWhite:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _reading_hue *****************
  2998 ;; Defined at:
  2999 ;;		line 91 in file "color.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  cCurr           1   79[COMRAM] PTR struct colors
  3002 ;;		 -> colorCurrent(10), 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  led_state      50    0        unsigned char [50]
  3005 ;;  hue             2   83[COMRAM] unsigned int 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  2   79[COMRAM] unsigned int 
  3008 ;; Registers used:
  3009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3015 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3018 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3019 ;;Total ram usage:        6 bytes
  3020 ;; Hardware stack levels used: 1
  3021 ;; Hardware stack levels required when called: 4
  3022 ;; This function calls:
  3023 ;;		_color_read_Blue
  3024 ;;		_color_read_Clear
  3025 ;;		_color_read_Green
  3026 ;;		_color_read_Red
  3027 ;;		_convert_rgb2hue
  3028 ;; This function is called by:
  3029 ;;		_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text6
  3034   003AA4                     __ptext6:
  3035                           	callstack 0
  3036   003AA4                     _reading_hue:
  3037                           	callstack 26
  3038   003AA4                     
  3039                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3040   003AA4  807F               	bsf	127,0,c	;volatile
  3041                           
  3042                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3043   003AA6  9E7D               	bcf	125,7,c	;volatile
  3044                           
  3045                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3046   003AA8  9679               	bcf	121,3,c	;volatile
  3047   003AAA                     
  3048                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3049   003AAA  0E29               	movlw	41
  3050   003AAC  6E53               	movwf	(??_reading_hue+1)^0,c
  3051   003AAE  0E96               	movlw	150
  3052   003AB0  6E52               	movwf	??_reading_hue^0,c
  3053   003AB2  0E7F               	movlw	127
  3054   003AB4                     u6047:
  3055   003AB4  2EE8               	decfsz	wreg,f,c
  3056   003AB6  D7FE               	bra	u6047
  3057   003AB8  2E52               	decfsz	??_reading_hue^0,f,c
  3058   003ABA  D7FC               	bra	u6047
  3059   003ABC  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3060   003ABE  D7FA               	bra	u6047
  3061   003AC0  0000               	nop	
  3062   003AC2                     
  3063                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3064   003AC2  EC65  F022         	call	_color_read_Red	;wreg free
  3065   003AC6  5050               	movf	reading_hue@cCurr^0,w,c
  3066   003AC8  6ED9               	movwf	fsr2l,c
  3067   003ACA  6ADA               	clrf	fsr2h,c
  3068   003ACC  C006  FFDE         	movff	?_color_read_Red,postinc2
  3069   003AD0  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3070   003AD4                     
  3071                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3072   003AD4  907F               	bcf	127,0,c	;volatile
  3073   003AD6                     
  3074                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3075   003AD6  8E7D               	bsf	125,7,c	;volatile
  3076   003AD8                     
  3077                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3078   003AD8  9679               	bcf	121,3,c	;volatile
  3079   003ADA                     
  3080                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3081   003ADA  0E29               	movlw	41
  3082   003ADC  6E53               	movwf	(??_reading_hue+1)^0,c
  3083   003ADE  0E96               	movlw	150
  3084   003AE0  6E52               	movwf	??_reading_hue^0,c
  3085   003AE2  0E7F               	movlw	127
  3086   003AE4                     u6057:
  3087   003AE4  2EE8               	decfsz	wreg,f,c
  3088   003AE6  D7FE               	bra	u6057
  3089   003AE8  2E52               	decfsz	??_reading_hue^0,f,c
  3090   003AEA  D7FC               	bra	u6057
  3091   003AEC  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3092   003AEE  D7FA               	bra	u6057
  3093   003AF0  0000               	nop	
  3094                           
  3095                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3096   003AF2  EC8D  F022         	call	_color_read_Green	;wreg free
  3097   003AF6  5050               	movf	reading_hue@cCurr^0,w,c
  3098   003AF8  6ED9               	movwf	fsr2l,c
  3099   003AFA  6ADA               	clrf	fsr2h,c
  3100   003AFC  0E02               	movlw	2
  3101   003AFE  26D9               	addwf	fsr2l,f,c
  3102   003B00  C006  FFDE         	movff	?_color_read_Green,postinc2
  3103   003B04  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3104   003B08                     
  3105                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3106   003B08  907F               	bcf	127,0,c	;volatile
  3107   003B0A                     
  3108                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3109   003B0A  9E7D               	bcf	125,7,c	;volatile
  3110   003B0C                     
  3111                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3112   003B0C  8679               	bsf	121,3,c	;volatile
  3113   003B0E                     
  3114                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3115   003B0E  0E29               	movlw	41
  3116   003B10  6E53               	movwf	(??_reading_hue+1)^0,c
  3117   003B12  0E96               	movlw	150
  3118   003B14  6E52               	movwf	??_reading_hue^0,c
  3119   003B16  0E7F               	movlw	127
  3120   003B18                     u6067:
  3121   003B18  2EE8               	decfsz	wreg,f,c
  3122   003B1A  D7FE               	bra	u6067
  3123   003B1C  2E52               	decfsz	??_reading_hue^0,f,c
  3124   003B1E  D7FC               	bra	u6067
  3125   003B20  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3126   003B22  D7FA               	bra	u6067
  3127   003B24  0000               	nop	
  3128   003B26                     
  3129                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3130   003B26  ECDD  F022         	call	_color_read_Blue	;wreg free
  3131   003B2A  5050               	movf	reading_hue@cCurr^0,w,c
  3132   003B2C  6ED9               	movwf	fsr2l,c
  3133   003B2E  6ADA               	clrf	fsr2h,c
  3134   003B30  0E04               	movlw	4
  3135   003B32  26D9               	addwf	fsr2l,f,c
  3136   003B34  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3137   003B38  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3138   003B3C                     
  3139                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3140   003B3C  807F               	bsf	127,0,c	;volatile
  3141   003B3E                     
  3142                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3143   003B3E  8E7D               	bsf	125,7,c	;volatile
  3144   003B40                     
  3145                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3146   003B40  8679               	bsf	121,3,c	;volatile
  3147                           
  3148                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3149   003B42  0E29               	movlw	41
  3150   003B44  6E53               	movwf	(??_reading_hue+1)^0,c
  3151   003B46  0E96               	movlw	150
  3152   003B48  6E52               	movwf	??_reading_hue^0,c
  3153   003B4A  0E7F               	movlw	127
  3154   003B4C                     u6077:
  3155   003B4C  2EE8               	decfsz	wreg,f,c
  3156   003B4E  D7FE               	bra	u6077
  3157   003B50  2E52               	decfsz	??_reading_hue^0,f,c
  3158   003B52  D7FC               	bra	u6077
  3159   003B54  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3160   003B56  D7FA               	bra	u6077
  3161   003B58  0000               	nop	
  3162   003B5A                     
  3163                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3164   003B5A  ECB5  F022         	call	_color_read_Clear	;wreg free
  3165   003B5E  5050               	movf	reading_hue@cCurr^0,w,c
  3166   003B60  6ED9               	movwf	fsr2l,c
  3167   003B62  6ADA               	clrf	fsr2h,c
  3168   003B64  0E06               	movlw	6
  3169   003B66  26D9               	addwf	fsr2l,f,c
  3170   003B68  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3171   003B6C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3172   003B70                     
  3173                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3174   003B70  0ED3               	movlw	low _colorCalibration
  3175   003B72  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  3176   003B74  0EC9               	movlw	low _colorCurrent
  3177   003B76  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  3178   003B78  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3179   003B7C  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  3180   003B80  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3181   003B84                     
  3182                           ;color.c: 127:     return hue;
  3183   003B84  C054  F050         	movff	reading_hue@hue,?_reading_hue
  3184   003B88  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  3185   003B8C  0012               	return		;funcret
  3186   003B8E                     __end_of_reading_hue:
  3187                           	callstack 0
  3188                           
  3189 ;; *************** function _convert_rgb2hue *****************
  3190 ;; Defined at:
  3191 ;;		line 133 in file "color.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  cMax            1   75[COMRAM] PTR struct colors
  3194 ;;		 -> colorCalibration(10), 
  3195 ;;  cCurr           1   76[COMRAM] PTR struct colors
  3196 ;;		 -> colorCurrent(10), 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  c_char         20    0        unsigned char [20]
  3199 ;;  b               4   72[BANK0 ] float 
  3200 ;;  g               4   68[BANK0 ] float 
  3201 ;;  r               4   64[BANK0 ] float 
  3202 ;;  hue             4   60[BANK0 ] float 
  3203 ;;  max             4   56[BANK0 ] float 
  3204 ;;  diff            4   52[BANK0 ] float 
  3205 ;;  min             4   48[BANK0 ] float 
  3206 ;;  clearmax        4   28[BANK0 ] float 
  3207 ;;  clearcurrent    4   24[BANK0 ] float 
  3208 ;;  bluemax         4   20[BANK0 ] float 
  3209 ;;  bluecurrent     4   16[BANK0 ] float 
  3210 ;;  greenmax        4   12[BANK0 ] float 
  3211 ;;  greencurrent    4    8[BANK0 ] float 
  3212 ;;  redmax          4    4[BANK0 ] float 
  3213 ;;  redcurrent      4    0[BANK0 ] float 
  3214 ;;  c               4    0        float 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  2   75[COMRAM] unsigned int 
  3217 ;; Registers used:
  3218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3227 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3228 ;;Total ram usage:       80 bytes
  3229 ;; Hardware stack levels used: 1
  3230 ;; Hardware stack levels required when called: 3
  3231 ;; This function calls:
  3232 ;;		___fladd
  3233 ;;		___fldiv
  3234 ;;		___fleq
  3235 ;;		___flge
  3236 ;;		___flmul
  3237 ;;		___flsub
  3238 ;;		___fltol
  3239 ;;		___xxtofl
  3240 ;; This function is called by:
  3241 ;;		_reading_hue
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text7
  3246   000EC6                     __ptext7:
  3247                           	callstack 0
  3248   000EC6                     _convert_rgb2hue:
  3249                           	callstack 26
  3250   000EC6                     
  3251                           ;color.c: 133: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 134: {;color.c: 135:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 136:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3252   000EC6  0E00               	movlw	0
  3253   000EC8  0100               	movlb	0	; () banked
  3254   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3255   000ECC  0E00               	movlw	0
  3256   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3257   000ED0  0E00               	movlw	0
  3258   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3259   000ED4  0E00               	movlw	0
  3260   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3261   000ED8                     
  3262                           ; BSR set to: 0
  3263                           ;color.c: 138:     redcurrent = cCurr->red;
  3264   000ED8  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3265   000EDA  6ED9               	movwf	fsr2l,c
  3266   000EDC  6ADA               	clrf	fsr2h,c
  3267   000EDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3268   000EE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3269   000EE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3270   000EEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3271   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3272   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3273   000EF2  0E00               	movlw	0
  3274   000EF4  EC45  F016         	call	___xxtofl
  3275   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3276   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3277   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3278   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3279   000F08                     
  3280                           ;color.c: 139:     redmax = cMax->red;
  3281   000F08  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3282   000F0A  6ED9               	movwf	fsr2l,c
  3283   000F0C  6ADA               	clrf	fsr2h,c
  3284   000F0E  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3285   000F12  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3286   000F16  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3287   000F1A  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3288   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3289   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3290   000F22  0E00               	movlw	0
  3291   000F24  EC45  F016         	call	___xxtofl
  3292   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3293   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3294   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3295   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3296   000F38                     
  3297                           ;color.c: 140:     greencurrent = cCurr->green;
  3298   000F38  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3299   000F3A  6ED9               	movwf	fsr2l,c
  3300   000F3C  6ADA               	clrf	fsr2h,c
  3301   000F3E  0E02               	movlw	2
  3302   000F40  26D9               	addwf	fsr2l,f,c
  3303   000F42  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3304   000F46  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3305   000F4A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3306   000F4E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3307   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3308   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3309   000F56  0E00               	movlw	0
  3310   000F58  EC45  F016         	call	___xxtofl
  3311   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3312   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3313   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3314   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3315   000F6C                     
  3316                           ;color.c: 141:     greenmax = cMax->green;
  3317   000F6C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3318   000F6E  6ED9               	movwf	fsr2l,c
  3319   000F70  6ADA               	clrf	fsr2h,c
  3320   000F72  0E02               	movlw	2
  3321   000F74  26D9               	addwf	fsr2l,f,c
  3322   000F76  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3323   000F7A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3324   000F7E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3325   000F82  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3326   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3327   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3328   000F8A  0E00               	movlw	0
  3329   000F8C  EC45  F016         	call	___xxtofl
  3330   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3331   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3332   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3333   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3334   000FA0                     
  3335                           ;color.c: 142:     bluecurrent = cCurr->blue;
  3336   000FA0  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3337   000FA2  6ED9               	movwf	fsr2l,c
  3338   000FA4  6ADA               	clrf	fsr2h,c
  3339   000FA6  0E04               	movlw	4
  3340   000FA8  26D9               	addwf	fsr2l,f,c
  3341   000FAA  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3342   000FAE  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3343   000FB2  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3344   000FB6  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3345   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3346   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3347   000FBE  0E00               	movlw	0
  3348   000FC0  EC45  F016         	call	___xxtofl
  3349   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3350   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3351   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3352   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3353   000FD4                     
  3354                           ;color.c: 143:     bluemax = cMax->blue;
  3355   000FD4  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3356   000FD6  6ED9               	movwf	fsr2l,c
  3357   000FD8  6ADA               	clrf	fsr2h,c
  3358   000FDA  0E04               	movlw	4
  3359   000FDC  26D9               	addwf	fsr2l,f,c
  3360   000FDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3361   000FE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3362   000FE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3363   000FEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3364   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3365   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3366   000FF2  0E00               	movlw	0
  3367   000FF4  EC45  F016         	call	___xxtofl
  3368   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3369   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3370   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3371   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3372   001008                     
  3373                           ;color.c: 144:     clearcurrent = cCurr->clear;
  3374   001008  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3375   00100A  6ED9               	movwf	fsr2l,c
  3376   00100C  6ADA               	clrf	fsr2h,c
  3377   00100E  0E06               	movlw	6
  3378   001010  26D9               	addwf	fsr2l,f,c
  3379   001012  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3380   001016  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3381   00101A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3382   00101E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3383   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3384   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3385   001026  0E00               	movlw	0
  3386   001028  EC45  F016         	call	___xxtofl
  3387   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3388   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3389   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3390   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3391   00103C                     
  3392                           ;color.c: 145:     clearmax = cMax->clear;
  3393   00103C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3394   00103E  6ED9               	movwf	fsr2l,c
  3395   001040  6ADA               	clrf	fsr2h,c
  3396   001042  0E06               	movlw	6
  3397   001044  26D9               	addwf	fsr2l,f,c
  3398   001046  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3399   00104A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3400   00104E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3401   001052  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3402   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3403   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3404   00105A  0E00               	movlw	0
  3405   00105C  EC45  F016         	call	___xxtofl
  3406   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3407   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3408   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3409   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3410   001070  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3411   001074  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3412   001078  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3413   00107C  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3414   001080  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3415   001084  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3416   001088  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3417   00108C  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3418   001090  ECF5  F011         	call	___fldiv	;wreg free
  3419   001094                     
  3420                           ;color.c: 148:     char c_char[20];;color.c: 154:     r = redcurrent/redmax;
  3421   001094  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3422   001098  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3423   00109C  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3424   0010A0  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3425   0010A4  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  3426   0010A8  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3427   0010AC  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3428   0010B0  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3429   0010B4  ECF5  F011         	call	___fldiv	;wreg free
  3430   0010B8  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3431   0010BC  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3432   0010C0  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3433   0010C4  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3434   0010C8                     
  3435                           ;color.c: 155:     g = greencurrent/greenmax;
  3436   0010C8  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3437   0010CC  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3438   0010D0  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3439   0010D4  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3440   0010D8  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3441   0010DC  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3442   0010E0  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3443   0010E4  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3444   0010E8  ECF5  F011         	call	___fldiv	;wreg free
  3445   0010EC  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3446   0010F0  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3447   0010F4  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3448   0010F8  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3449   0010FC                     
  3450                           ;color.c: 156:     b = bluecurrent/bluemax;
  3451   0010FC  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3452   001100  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3453   001104  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3454   001108  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3455   00110C  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3456   001110  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3457   001114  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3458   001118  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3459   00111C  ECF5  F011         	call	___fldiv	;wreg free
  3460   001120  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3461   001124  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3462   001128  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3463   00112C  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3464   001130                     
  3465                           ;color.c: 158:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3466   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3467   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3468   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3469   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3470   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3471   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3472   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3473   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3474   001150  EC5A  F01C         	call	___flge	;wreg free
  3475   001154  A0D8               	btfss	status,0,c
  3476   001156  EFAF  F008         	goto	u4131
  3477   00115A  EFB1  F008         	goto	u4130
  3478   00115E                     u4131:
  3479   00115E  EFE6  F008         	goto	l4850
  3480   001162                     u4130:
  3481   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3482   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3483   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3484   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3485   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3486   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3487   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3488   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3489   001182  EC5A  F01C         	call	___flge	;wreg free
  3490   001186  A0D8               	btfss	status,0,c
  3491   001188  EFC8  F008         	goto	u4141
  3492   00118C  EFCA  F008         	goto	u4140
  3493   001190                     u4141:
  3494   001190  EFD4  F008         	goto	l99
  3495   001194                     u4140:
  3496   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$367
  3497   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$367+1
  3498   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$367+2
  3499   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$367+3
  3500   0011A4  EFDC  F008         	goto	l101
  3501   0011A8                     l99:
  3502   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$367
  3503   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$367+1
  3504   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$367+2
  3505   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$367+3
  3506   0011B8                     l101:
  3507   0011B8  C080  F090         	movff	_convert_rgb2hue$367,convert_rgb2hue@min
  3508   0011BC  C081  F091         	movff	_convert_rgb2hue$367+1,convert_rgb2hue@min+1
  3509   0011C0  C082  F092         	movff	_convert_rgb2hue$367+2,convert_rgb2hue@min+2
  3510   0011C4  C083  F093         	movff	_convert_rgb2hue$367+3,convert_rgb2hue@min+3
  3511   0011C8  EF19  F009         	goto	l4854
  3512   0011CC                     l4850:
  3513   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3514   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3515   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3516   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3517   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3518   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3519   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3520   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3521   0011EC  EC5A  F01C         	call	___flge	;wreg free
  3522   0011F0  A0D8               	btfss	status,0,c
  3523   0011F2  EFFD  F008         	goto	u4151
  3524   0011F6  EFFF  F008         	goto	u4150
  3525   0011FA                     u4151:
  3526   0011FA  EF09  F009         	goto	l103
  3527   0011FE                     u4150:
  3528   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$368
  3529   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$368+1
  3530   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$368+2
  3531   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$368+3
  3532   00120E  EF11  F009         	goto	l105
  3533   001212                     l103:
  3534   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$368
  3535   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$368+1
  3536   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$368+2
  3537   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$368+3
  3538   001222                     l105:
  3539   001222  C084  F090         	movff	_convert_rgb2hue$368,convert_rgb2hue@min
  3540   001226  C085  F091         	movff	_convert_rgb2hue$368+1,convert_rgb2hue@min+1
  3541   00122A  C086  F092         	movff	_convert_rgb2hue$368+2,convert_rgb2hue@min+2
  3542   00122E  C087  F093         	movff	_convert_rgb2hue$368+3,convert_rgb2hue@min+3
  3543   001232                     l4854:
  3544                           
  3545                           ;color.c: 159:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3546   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3547   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3548   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3549   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3550   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3551   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3552   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3553   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3554   001252  EC5A  F01C         	call	___flge	;wreg free
  3555   001256  A0D8               	btfss	status,0,c
  3556   001258  EF30  F009         	goto	u4161
  3557   00125C  EF32  F009         	goto	u4160
  3558   001260                     u4161:
  3559   001260  EF67  F009         	goto	l4860
  3560   001264                     u4160:
  3561   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3562   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3563   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3564   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3565   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3566   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3567   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3568   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3569   001284  EC5A  F01C         	call	___flge	;wreg free
  3570   001288  A0D8               	btfss	status,0,c
  3571   00128A  EF49  F009         	goto	u4171
  3572   00128E  EF4B  F009         	goto	u4170
  3573   001292                     u4171:
  3574   001292  EF55  F009         	goto	l111
  3575   001296                     u4170:
  3576   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$369
  3577   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$369+1
  3578   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$369+2
  3579   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$369+3
  3580   0012A6  EF5D  F009         	goto	l113
  3581   0012AA                     l111:
  3582   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$369
  3583   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$369+1
  3584   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$369+2
  3585   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$369+3
  3586   0012BA                     l113:
  3587   0012BA  C088  F098         	movff	_convert_rgb2hue$369,convert_rgb2hue@max
  3588   0012BE  C089  F099         	movff	_convert_rgb2hue$369+1,convert_rgb2hue@max+1
  3589   0012C2  C08A  F09A         	movff	_convert_rgb2hue$369+2,convert_rgb2hue@max+2
  3590   0012C6  C08B  F09B         	movff	_convert_rgb2hue$369+3,convert_rgb2hue@max+3
  3591   0012CA  EF9A  F009         	goto	l4864
  3592   0012CE                     l4860:
  3593   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3594   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3595   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3596   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3597   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3598   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3599   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3600   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3601   0012EE  EC5A  F01C         	call	___flge	;wreg free
  3602   0012F2  A0D8               	btfss	status,0,c
  3603   0012F4  EF7E  F009         	goto	u4181
  3604   0012F8  EF80  F009         	goto	u4180
  3605   0012FC                     u4181:
  3606   0012FC  EF8A  F009         	goto	l115
  3607   001300                     u4180:
  3608   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$370
  3609   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$370+1
  3610   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$370+2
  3611   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$370+3
  3612   001310  EF92  F009         	goto	l117
  3613   001314                     l115:
  3614   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$370
  3615   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$370+1
  3616   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$370+2
  3617   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$370+3
  3618   001324                     l117:
  3619   001324  C08C  F098         	movff	_convert_rgb2hue$370,convert_rgb2hue@max
  3620   001328  C08D  F099         	movff	_convert_rgb2hue$370+1,convert_rgb2hue@max+1
  3621   00132C  C08E  F09A         	movff	_convert_rgb2hue$370+2,convert_rgb2hue@max+2
  3622   001330  C08F  F09B         	movff	_convert_rgb2hue$370+3,convert_rgb2hue@max+3
  3623   001334                     l4864:
  3624                           
  3625                           ;color.c: 160:     diff = max - min;
  3626   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3627   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3628   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3629   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3630   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3631   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3632   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3633   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3634   001354  EC05  F023         	call	___flsub	;wreg free
  3635   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3636   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3637   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3638   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3639                           
  3640                           ;color.c: 161:     if (max == min) {
  3641   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3642   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3643   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3644   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3645   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3646   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3647   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3648   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3649   001388  EC3D  F01F         	call	___fleq	;wreg free
  3650   00138C  A0D8               	btfss	status,0,c
  3651   00138E  EFCB  F009         	goto	u4191
  3652   001392  EFCD  F009         	goto	u4190
  3653   001396                     u4191:
  3654   001396  EFD8  F009         	goto	l4868
  3655   00139A                     u4190:
  3656   00139A                     
  3657                           ;color.c: 162:         hue = 0;
  3658   00139A  0E00               	movlw	0
  3659   00139C  0100               	movlb	0	; () banked
  3660   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3661   0013A0  0E00               	movlw	0
  3662   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3663   0013A4  0E00               	movlw	0
  3664   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3665   0013A8  0E00               	movlw	0
  3666   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3667                           
  3668                           ;color.c: 163:     } else if (max == r){
  3669   0013AC  EFE1  F00A         	goto	l4880
  3670   0013B0                     l4868:
  3671   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3672   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3673   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3674   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3675   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3676   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3677   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3678   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3679   0013D0  EC3D  F01F         	call	___fleq	;wreg free
  3680   0013D4  A0D8               	btfss	status,0,c
  3681   0013D6  EFEF  F009         	goto	u4201
  3682   0013DA  EFF1  F009         	goto	u4200
  3683   0013DE                     u4201:
  3684   0013DE  EF1F  F00A         	goto	l4872
  3685   0013E2                     u4200:
  3686   0013E2                     
  3687                           ;color.c: 164:         hue = (b - g) / diff;
  3688   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3689   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3690   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3691   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3692   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3693   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3694   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3695   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3696   001402  EC05  F023         	call	___flsub	;wreg free
  3697   001406  C012  F029         	movff	?___flsub,___fldiv@b
  3698   00140A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3699   00140E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3700   001412  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3701   001416  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3702   00141A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3703   00141E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3704   001422  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3705   001426  ECF5  F011         	call	___fldiv	;wreg free
  3706   00142A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3707   00142E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3708   001432  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3709   001436  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3710                           
  3711                           ;color.c: 165:     } else if (max == g){
  3712   00143A  EFE1  F00A         	goto	l4880
  3713   00143E                     l4872:
  3714   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3715   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3716   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3717   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3718   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3719   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3720   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3721   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3722   00145E  EC3D  F01F         	call	___fleq	;wreg free
  3723   001462  A0D8               	btfss	status,0,c
  3724   001464  EF36  F00A         	goto	u4211
  3725   001468  EF38  F00A         	goto	u4210
  3726   00146C                     u4211:
  3727   00146C  EF80  F00A         	goto	l4876
  3728   001470                     u4210:
  3729   001470                     
  3730                           ;color.c: 166:         hue = (b - r) / diff;
  3731   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3732   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3733   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3734   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3735   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3736   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3737   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3738   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3739   001490  EC05  F023         	call	___flsub	;wreg free
  3740   001494  C012  F029         	movff	?___flsub,___fldiv@b
  3741   001498  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3742   00149C  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3743   0014A0  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3744   0014A4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3745   0014A8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3746   0014AC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3747   0014B0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3748   0014B4  ECF5  F011         	call	___fldiv	;wreg free
  3749   0014B8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3750   0014BC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3751   0014C0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3752   0014C4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3753                           
  3754                           ;color.c: 167:         hue = hue + 2;
  3755   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3756   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3757   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3758   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3759   0014D8  0E00               	movlw	0
  3760   0014DA  6E06               	movwf	___fladd@a^0,c
  3761   0014DC  0E00               	movlw	0
  3762   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3763   0014E0  0E00               	movlw	0
  3764   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3765   0014E4  0E40               	movlw	64
  3766   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3767   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3768   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3769   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3770   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3771   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3772                           
  3773                           ;color.c: 168:     } else if (max == b){
  3774   0014FC  EFE1  F00A         	goto	l4880
  3775   001500                     l4876:
  3776   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3777   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3778   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3779   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3780   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3781   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3782   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3783   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3784   001520  EC3D  F01F         	call	___fleq	;wreg free
  3785   001524  A0D8               	btfss	status,0,c
  3786   001526  EF97  F00A         	goto	u4221
  3787   00152A  EF99  F00A         	goto	u4220
  3788   00152E                     u4221:
  3789   00152E  EFE1  F00A         	goto	l121
  3790   001532                     u4220:
  3791   001532                     
  3792                           ;color.c: 169:         hue = (r - g) / diff;
  3793   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3794   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3795   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3796   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3797   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3798   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3799   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3800   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3801   001552  EC05  F023         	call	___flsub	;wreg free
  3802   001556  C012  F029         	movff	?___flsub,___fldiv@b
  3803   00155A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3804   00155E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3805   001562  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3806   001566  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3807   00156A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3808   00156E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3809   001572  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3810   001576  ECF5  F011         	call	___fldiv	;wreg free
  3811   00157A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3812   00157E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3813   001582  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3814   001586  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3815                           
  3816                           ;color.c: 170:         hue = hue + 4;
  3817   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3818   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3819   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3820   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3821   00159A  0E00               	movlw	0
  3822   00159C  6E06               	movwf	___fladd@a^0,c
  3823   00159E  0E00               	movlw	0
  3824   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3825   0015A2  0E80               	movlw	128
  3826   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3827   0015A6  0E40               	movlw	64
  3828   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3829   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3830   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3831   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3832   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3833   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3834   0015BE  EFE1  F00A         	goto	l4880
  3835   0015C2                     l121:
  3836   0015C2                     l4880:
  3837                           
  3838                           ;color.c: 173:     hue = hue * 60;
  3839   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3840   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3841   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3842   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3843   0015D2  0E00               	movlw	0
  3844   0015D4  6E14               	movwf	___flmul@a^0,c
  3845   0015D6  0E00               	movlw	0
  3846   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3847   0015DA  0E70               	movlw	112
  3848   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3849   0015DE  0E42               	movlw	66
  3850   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3851   0015E2  ECE0  F00F         	call	___flmul	;wreg free
  3852   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3853   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3854   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3855   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3856   0015F6                     
  3857                           ;color.c: 174:     if (hue < 0) {
  3858   0015F6  0100               	movlb	0	; () banked
  3859   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3860   0015FA  EF03  F00B         	goto	u4230
  3861   0015FE  EF01  F00B         	goto	u4231
  3862   001602                     u4231:
  3863   001602  EF1D  F00B         	goto	l125
  3864   001606                     u4230:
  3865   001606                     
  3866                           ; BSR set to: 0
  3867                           ;color.c: 175:         hue = hue + 360;
  3868   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3869   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3870   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3871   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3872   001616  0E00               	movlw	0
  3873   001618  6E06               	movwf	___fladd@a^0,c
  3874   00161A  0E00               	movlw	0
  3875   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3876   00161E  0EB4               	movlw	180
  3877   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3878   001622  0E43               	movlw	67
  3879   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3880   001626  EC2C  F00B         	call	___fladd	;wreg free
  3881   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3882   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3883   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3884   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3885   00163A                     l125:
  3886                           
  3887                           ;color.c: 178:     return (unsigned int)hue;
  3888   00163A  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  3889   00163E  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3890   001642  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3891   001646  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3892   00164A  ECD7  F01B         	call	___fltol	;wreg free
  3893   00164E  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  3894   001652  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  3895   001656  0012               	return		;funcret
  3896   001658                     __end_of_convert_rgb2hue:
  3897                           	callstack 0
  3898                           
  3899 ;; *************** function ___xxtofl *****************
  3900 ;; Defined at:
  3901 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  sign            1    wreg     unsigned char 
  3904 ;;  val             4    1[COMRAM] long 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  sign            1    9[COMRAM] unsigned char 
  3907 ;;  arg             4   11[COMRAM] unsigned long 
  3908 ;;  exp             1   10[COMRAM] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  4    1[COMRAM] unsigned char 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3921 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3922 ;;Total ram usage:       14 bytes
  3923 ;; Hardware stack levels used: 1
  3924 ;; Hardware stack levels required when called: 1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_convert_rgb2hue
  3929 ;;		_main
  3930 ;;		_fullSpeedAhead
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text8
  3935   002C8A                     __ptext8:
  3936                           	callstack 0
  3937   002C8A                     ___xxtofl:
  3938                           	callstack 26
  3939                           
  3940                           ;incstack = 0
  3941                           ;___xxtofl@sign stored from wreg
  3942   002C8A  6E0A               	movwf	___xxtofl@sign^0,c
  3943   002C8C  500A               	movf	___xxtofl@sign^0,w,c
  3944   002C8E  B4D8               	btfsc	status,2,c
  3945   002C90  EF4C  F016         	goto	u3671
  3946   002C94  EF4E  F016         	goto	u3670
  3947   002C98                     u3671:
  3948   002C98  EF70  F016         	goto	l1469
  3949   002C9C                     u3670:
  3950   002C9C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3951   002C9E  EF55  F016         	goto	u3680
  3952   002CA2  EF53  F016         	goto	u3681
  3953   002CA6                     u3681:
  3954   002CA6  EF70  F016         	goto	l1469
  3955   002CAA                     u3680:
  3956   002CAA  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3957   002CAE  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3958   002CB2  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3959   002CB6  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3960   002CBA  1E06               	comf	??___xxtofl^0,f,c
  3961   002CBC  1E07               	comf	(??___xxtofl+1)^0,f,c
  3962   002CBE  1E08               	comf	(??___xxtofl+2)^0,f,c
  3963   002CC0  1E09               	comf	(??___xxtofl+3)^0,f,c
  3964   002CC2  2A06               	incf	??___xxtofl^0,f,c
  3965   002CC4  0E00               	movlw	0
  3966   002CC6  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3967   002CC8  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3968   002CCA  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3969   002CCC  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3970   002CD0  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3971   002CD4  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3972   002CD8  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3973   002CDC  EF78  F016         	goto	l4412
  3974   002CE0                     l1469:
  3975   002CE0  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3976   002CE4  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3977   002CE8  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3978   002CEC  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3979   002CF0                     l4412:
  3980   002CF0  5002               	movf	___xxtofl@val^0,w,c
  3981   002CF2  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3982   002CF4  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3983   002CF6  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3984   002CF8  A4D8               	btfss	status,2,c
  3985   002CFA  EF81  F016         	goto	u3691
  3986   002CFE  EF83  F016         	goto	u3690
  3987   002D02                     u3691:
  3988   002D02  EF8D  F016         	goto	l4418
  3989   002D06                     u3690:
  3990   002D06  0E00               	movlw	0
  3991   002D08  6E02               	movwf	?___xxtofl^0,c
  3992   002D0A  0E00               	movlw	0
  3993   002D0C  6E03               	movwf	(?___xxtofl+1)^0,c
  3994   002D0E  0E00               	movlw	0
  3995   002D10  6E04               	movwf	(?___xxtofl+2)^0,c
  3996   002D12  0E00               	movlw	0
  3997   002D14  6E05               	movwf	(?___xxtofl+3)^0,c
  3998   002D16  EF1E  F017         	goto	l1472
  3999   002D1A                     l4418:
  4000   002D1A  0E96               	movlw	150
  4001   002D1C  6E0B               	movwf	___xxtofl@exp^0,c
  4002   002D1E  EF97  F016         	goto	l4422
  4003   002D22                     l4420:
  4004   002D22  2A0B               	incf	___xxtofl@exp^0,f,c
  4005   002D24  90D8               	bcf	status,0,c
  4006   002D26  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4007   002D28  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4008   002D2A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4009   002D2C  320C               	rrcf	___xxtofl@arg^0,f,c
  4010   002D2E                     l4422:
  4011   002D2E  0E00               	movlw	0
  4012   002D30  140C               	andwf	___xxtofl@arg^0,w,c
  4013   002D32  6E06               	movwf	??___xxtofl^0,c
  4014   002D34  0E00               	movlw	0
  4015   002D36  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4016   002D38  6E07               	movwf	(??___xxtofl+1)^0,c
  4017   002D3A  0E00               	movlw	0
  4018   002D3C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4019   002D3E  6E08               	movwf	(??___xxtofl+2)^0,c
  4020   002D40  0EFE               	movlw	254
  4021   002D42  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4022   002D44  6E09               	movwf	(??___xxtofl+3)^0,c
  4023   002D46  5006               	movf	??___xxtofl^0,w,c
  4024   002D48  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4025   002D4A  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4026   002D4C  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4027   002D4E  A4D8               	btfss	status,2,c
  4028   002D50  EFAC  F016         	goto	u3701
  4029   002D54  EFAE  F016         	goto	u3700
  4030   002D58                     u3701:
  4031   002D58  EF91  F016         	goto	l4420
  4032   002D5C                     u3700:
  4033   002D5C  EFBC  F016         	goto	l1476
  4034   002D60                     l4424:
  4035   002D60  2A0B               	incf	___xxtofl@exp^0,f,c
  4036   002D62  0E01               	movlw	1
  4037   002D64  260C               	addwf	___xxtofl@arg^0,f,c
  4038   002D66  0E00               	movlw	0
  4039   002D68  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4040   002D6A  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4041   002D6C  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4042   002D6E  90D8               	bcf	status,0,c
  4043   002D70  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4044   002D72  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4045   002D74  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4046   002D76  320C               	rrcf	___xxtofl@arg^0,f,c
  4047   002D78                     l1476:
  4048   002D78  0E00               	movlw	0
  4049   002D7A  140C               	andwf	___xxtofl@arg^0,w,c
  4050   002D7C  6E06               	movwf	??___xxtofl^0,c
  4051   002D7E  0E00               	movlw	0
  4052   002D80  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4053   002D82  6E07               	movwf	(??___xxtofl+1)^0,c
  4054   002D84  0E00               	movlw	0
  4055   002D86  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4056   002D88  6E08               	movwf	(??___xxtofl+2)^0,c
  4057   002D8A  0EFF               	movlw	255
  4058   002D8C  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4059   002D8E  6E09               	movwf	(??___xxtofl+3)^0,c
  4060   002D90  5006               	movf	??___xxtofl^0,w,c
  4061   002D92  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4062   002D94  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4063   002D96  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4064   002D98  A4D8               	btfss	status,2,c
  4065   002D9A  EFD1  F016         	goto	u3711
  4066   002D9E  EFD3  F016         	goto	u3710
  4067   002DA2                     u3711:
  4068   002DA2  EFB0  F016         	goto	l4424
  4069   002DA6                     u3710:
  4070   002DA6  EFDB  F016         	goto	l4432
  4071   002DAA                     l4430:
  4072   002DAA  060B               	decf	___xxtofl@exp^0,f,c
  4073   002DAC  90D8               	bcf	status,0,c
  4074   002DAE  360C               	rlcf	___xxtofl@arg^0,f,c
  4075   002DB0  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4076   002DB2  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4077   002DB4  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4078   002DB6                     l4432:
  4079   002DB6  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4080   002DB8  EFE0  F016         	goto	u3721
  4081   002DBC  EFE2  F016         	goto	u3720
  4082   002DC0                     u3721:
  4083   002DC0  EFEA  F016         	goto	l1483
  4084   002DC4                     u3720:
  4085   002DC4  0E02               	movlw	2
  4086   002DC6  600B               	cpfslt	___xxtofl@exp^0,c
  4087   002DC8  EFE8  F016         	goto	u3731
  4088   002DCC  EFEA  F016         	goto	u3730
  4089   002DD0                     u3731:
  4090   002DD0  EFD5  F016         	goto	l4430
  4091   002DD4                     u3730:
  4092   002DD4                     l1483:
  4093   002DD4  B00B               	btfsc	___xxtofl@exp^0,0,c
  4094   002DD6  EFEF  F016         	goto	u3741
  4095   002DDA  EFF1  F016         	goto	u3740
  4096   002DDE                     u3741:
  4097   002DDE  EFF2  F016         	goto	l4438
  4098   002DE2                     u3740:
  4099   002DE2  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4100   002DE4                     l4438:
  4101   002DE4  90D8               	bcf	status,0,c
  4102   002DE6  320B               	rrcf	___xxtofl@exp^0,f,c
  4103   002DE8  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4104   002DEC  6A07               	clrf	(??___xxtofl+1)^0,c
  4105   002DEE  6A08               	clrf	(??___xxtofl+2)^0,c
  4106   002DF0  6A09               	clrf	(??___xxtofl+3)^0,c
  4107   002DF2  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4108   002DF6  6A08               	clrf	(??___xxtofl+2)^0,c
  4109   002DF8  6A07               	clrf	(??___xxtofl+1)^0,c
  4110   002DFA  6A06               	clrf	??___xxtofl^0,c
  4111   002DFC  5006               	movf	??___xxtofl^0,w,c
  4112   002DFE  120C               	iorwf	___xxtofl@arg^0,f,c
  4113   002E00  5007               	movf	(??___xxtofl+1)^0,w,c
  4114   002E02  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4115   002E04  5008               	movf	(??___xxtofl+2)^0,w,c
  4116   002E06  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4117   002E08  5009               	movf	(??___xxtofl+3)^0,w,c
  4118   002E0A  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4119   002E0C  500A               	movf	___xxtofl@sign^0,w,c
  4120   002E0E  B4D8               	btfsc	status,2,c
  4121   002E10  EF0C  F017         	goto	u3751
  4122   002E14  EF0E  F017         	goto	u3750
  4123   002E18                     u3751:
  4124   002E18  EF16  F017         	goto	l4448
  4125   002E1C                     u3750:
  4126   002E1C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4127   002E1E  EF15  F017         	goto	u3760
  4128   002E22  EF13  F017         	goto	u3761
  4129   002E26                     u3761:
  4130   002E26  EF16  F017         	goto	l4448
  4131   002E2A                     u3760:
  4132   002E2A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4133   002E2C                     l4448:
  4134   002E2C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4135   002E30  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4136   002E34  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4137   002E38  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4138   002E3C                     l1472:
  4139   002E3C  0012               	return		;funcret
  4140   002E3E                     __end_of___xxtofl:
  4141                           	callstack 0
  4142                           
  4143 ;; *************** function ___flsub *****************
  4144 ;; Defined at:
  4145 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  b               4   17[COMRAM] unsigned char 
  4148 ;;  a               4   21[COMRAM] unsigned char 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  4   17[COMRAM] unsigned char 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4160 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4163 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4164 ;;Total ram usage:        8 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; Hardware stack levels required when called: 2
  4167 ;; This function calls:
  4168 ;;		___fladd
  4169 ;; This function is called by:
  4170 ;;		_convert_rgb2hue
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	text9
  4175   00460A                     __ptext9:
  4176                           	callstack 0
  4177   00460A                     ___flsub:
  4178                           	callstack 26
  4179   00460A  0E00               	movlw	0
  4180   00460C  1A16               	xorwf	___flsub@a^0,f,c
  4181   00460E  0E00               	movlw	0
  4182   004610  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4183   004612  0E00               	movlw	0
  4184   004614  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4185   004616  0E80               	movlw	128
  4186   004618  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4187   00461A  C012  F002         	movff	___flsub@b,___fladd@b
  4188   00461E  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4189   004622  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4190   004626  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4191   00462A  C016  F006         	movff	___flsub@a,___fladd@a
  4192   00462E  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4193   004632  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4194   004636  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4195   00463A  EC2C  F00B         	call	___fladd	;wreg free
  4196   00463E  C002  F012         	movff	?___fladd,?___flsub
  4197   004642  C003  F013         	movff	?___fladd+1,?___flsub+1
  4198   004646  C004  F014         	movff	?___fladd+2,?___flsub+2
  4199   00464A  C005  F015         	movff	?___fladd+3,?___flsub+3
  4200   00464E  0012               	return		;funcret
  4201   004650                     __end_of___flsub:
  4202                           	callstack 0
  4203                           
  4204 ;; *************** function ___flmul *****************
  4205 ;; Defined at:
  4206 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  b               4   15[COMRAM] unsigned char 
  4209 ;;  a               4   19[COMRAM] unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  prod            4   34[COMRAM] struct .
  4212 ;;  grs             4   28[COMRAM] unsigned long 
  4213 ;;  temp            2   38[COMRAM] struct .
  4214 ;;  bexp            1   33[COMRAM] unsigned char 
  4215 ;;  aexp            1   32[COMRAM] unsigned char 
  4216 ;;  sign            1   27[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  4   15[COMRAM] unsigned char 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0, prodl, prodh
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4226 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;Total ram usage:       25 bytes
  4231 ;; Hardware stack levels used: 1
  4232 ;; Hardware stack levels required when called: 1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_convert_rgb2hue
  4237 ;;		_main
  4238 ;;		_fullSpeedAhead
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text10
  4243   001FC0                     __ptext10:
  4244                           	callstack 0
  4245   001FC0                     ___flmul:
  4246                           	callstack 26
  4247   001FC0  5013               	movf	(___flmul@b+3)^0,w,c
  4248   001FC2  0B80               	andlw	128
  4249   001FC4  6E1C               	movwf	___flmul@sign^0,c
  4250   001FC6  5013               	movf	(___flmul@b+3)^0,w,c
  4251   001FC8  2413               	addwf	(___flmul@b+3)^0,w,c
  4252   001FCA  6E22               	movwf	___flmul@bexp^0,c
  4253   001FCC  AE12               	btfss	(___flmul@b+2)^0,7,c
  4254   001FCE  EFEB  F00F         	goto	u3411
  4255   001FD2  EFED  F00F         	goto	u3410
  4256   001FD6                     u3411:
  4257   001FD6  EFEE  F00F         	goto	l4238
  4258   001FDA                     u3410:
  4259   001FDA  8022               	bsf	___flmul@bexp^0,0,c
  4260   001FDC                     l4238:
  4261   001FDC  5022               	movf	___flmul@bexp^0,w,c
  4262   001FDE  B4D8               	btfsc	status,2,c
  4263   001FE0  EFF4  F00F         	goto	u3421
  4264   001FE4  EFF6  F00F         	goto	u3420
  4265   001FE8                     u3421:
  4266   001FE8  EF09  F010         	goto	l4246
  4267   001FEC                     u3420:
  4268   001FEC  2822               	incf	___flmul@bexp^0,w,c
  4269   001FEE  A4D8               	btfss	status,2,c
  4270   001FF0  EFFC  F00F         	goto	u3431
  4271   001FF4  EFFE  F00F         	goto	u3430
  4272   001FF8                     u3431:
  4273   001FF8  EF06  F010         	goto	l4244
  4274   001FFC                     u3430:
  4275   001FFC  0E00               	movlw	0
  4276   001FFE  6E10               	movwf	___flmul@b^0,c
  4277   002000  0E00               	movlw	0
  4278   002002  6E11               	movwf	(___flmul@b+1)^0,c
  4279   002004  0E00               	movlw	0
  4280   002006  6E12               	movwf	(___flmul@b+2)^0,c
  4281   002008  0E00               	movlw	0
  4282   00200A  6E13               	movwf	(___flmul@b+3)^0,c
  4283   00200C                     l4244:
  4284   00200C  8E12               	bsf	(___flmul@b+2)^0,7,c
  4285   00200E  EF11  F010         	goto	l4248
  4286   002012                     l4246:
  4287   002012  0E00               	movlw	0
  4288   002014  6E10               	movwf	___flmul@b^0,c
  4289   002016  0E00               	movlw	0
  4290   002018  6E11               	movwf	(___flmul@b+1)^0,c
  4291   00201A  0E00               	movlw	0
  4292   00201C  6E12               	movwf	(___flmul@b+2)^0,c
  4293   00201E  0E00               	movlw	0
  4294   002020  6E13               	movwf	(___flmul@b+3)^0,c
  4295   002022                     l4248:
  4296   002022  5017               	movf	(___flmul@a+3)^0,w,c
  4297   002024  0B80               	andlw	128
  4298   002026  1A1C               	xorwf	___flmul@sign^0,f,c
  4299   002028  5017               	movf	(___flmul@a+3)^0,w,c
  4300   00202A  2417               	addwf	(___flmul@a+3)^0,w,c
  4301   00202C  6E21               	movwf	___flmul@aexp^0,c
  4302   00202E  AE16               	btfss	(___flmul@a+2)^0,7,c
  4303   002030  EF1C  F010         	goto	u3441
  4304   002034  EF1E  F010         	goto	u3440
  4305   002038                     u3441:
  4306   002038  EF1F  F010         	goto	l4256
  4307   00203C                     u3440:
  4308   00203C  8021               	bsf	___flmul@aexp^0,0,c
  4309   00203E                     l4256:
  4310   00203E  5021               	movf	___flmul@aexp^0,w,c
  4311   002040  B4D8               	btfsc	status,2,c
  4312   002042  EF25  F010         	goto	u3451
  4313   002046  EF27  F010         	goto	u3450
  4314   00204A                     u3451:
  4315   00204A  EF3A  F010         	goto	l4264
  4316   00204E                     u3450:
  4317   00204E  2821               	incf	___flmul@aexp^0,w,c
  4318   002050  A4D8               	btfss	status,2,c
  4319   002052  EF2D  F010         	goto	u3461
  4320   002056  EF2F  F010         	goto	u3460
  4321   00205A                     u3461:
  4322   00205A  EF37  F010         	goto	l4262
  4323   00205E                     u3460:
  4324   00205E  0E00               	movlw	0
  4325   002060  6E14               	movwf	___flmul@a^0,c
  4326   002062  0E00               	movlw	0
  4327   002064  6E15               	movwf	(___flmul@a+1)^0,c
  4328   002066  0E00               	movlw	0
  4329   002068  6E16               	movwf	(___flmul@a+2)^0,c
  4330   00206A  0E00               	movlw	0
  4331   00206C  6E17               	movwf	(___flmul@a+3)^0,c
  4332   00206E                     l4262:
  4333   00206E  8E16               	bsf	(___flmul@a+2)^0,7,c
  4334   002070  EF42  F010         	goto	l1428
  4335   002074                     l4264:
  4336   002074  0E00               	movlw	0
  4337   002076  6E14               	movwf	___flmul@a^0,c
  4338   002078  0E00               	movlw	0
  4339   00207A  6E15               	movwf	(___flmul@a+1)^0,c
  4340   00207C  0E00               	movlw	0
  4341   00207E  6E16               	movwf	(___flmul@a+2)^0,c
  4342   002080  0E00               	movlw	0
  4343   002082  6E17               	movwf	(___flmul@a+3)^0,c
  4344   002084                     l1428:
  4345   002084  5021               	movf	___flmul@aexp^0,w,c
  4346   002086  B4D8               	btfsc	status,2,c
  4347   002088  EF48  F010         	goto	u3471
  4348   00208C  EF4A  F010         	goto	u3470
  4349   002090                     u3471:
  4350   002090  EF52  F010         	goto	l4268
  4351   002094                     u3470:
  4352   002094  5022               	movf	___flmul@bexp^0,w,c
  4353   002096  A4D8               	btfss	status,2,c
  4354   002098  EF50  F010         	goto	u3481
  4355   00209C  EF52  F010         	goto	u3480
  4356   0020A0                     u3481:
  4357   0020A0  EF5C  F010         	goto	l4272
  4358   0020A4                     u3480:
  4359   0020A4                     l4268:
  4360   0020A4  0E00               	movlw	0
  4361   0020A6  6E10               	movwf	?___flmul^0,c
  4362   0020A8  0E00               	movlw	0
  4363   0020AA  6E11               	movwf	(?___flmul+1)^0,c
  4364   0020AC  0E00               	movlw	0
  4365   0020AE  6E12               	movwf	(?___flmul+2)^0,c
  4366   0020B0  0E00               	movlw	0
  4367   0020B2  6E13               	movwf	(?___flmul+3)^0,c
  4368   0020B4  EFF4  F011         	goto	l1432
  4369   0020B8                     l4272:
  4370   0020B8  5016               	movf	(___flmul@a+2)^0,w,c
  4371   0020BA  0210               	mulwf	___flmul@b^0,c
  4372   0020BC  CFF3 F027          	movff	prodl,___flmul@temp
  4373   0020C0  CFF4 F028          	movff	prodh,___flmul@temp+1
  4374   0020C4  5027               	movf	___flmul@temp^0,w,c
  4375   0020C6  6E1D               	movwf	___flmul@grs^0,c
  4376   0020C8  6A1E               	clrf	(___flmul@grs+1)^0,c
  4377   0020CA  6A1F               	clrf	(___flmul@grs+2)^0,c
  4378   0020CC  6A20               	clrf	(___flmul@grs+3)^0,c
  4379   0020CE  5028               	movf	(___flmul@temp+1)^0,w,c
  4380   0020D0  6E23               	movwf	___flmul@prod^0,c
  4381   0020D2  6A24               	clrf	(___flmul@prod+1)^0,c
  4382   0020D4  6A25               	clrf	(___flmul@prod+2)^0,c
  4383   0020D6  6A26               	clrf	(___flmul@prod+3)^0,c
  4384   0020D8  5015               	movf	(___flmul@a+1)^0,w,c
  4385   0020DA  0211               	mulwf	(___flmul@b+1)^0,c
  4386   0020DC  CFF3 F027          	movff	prodl,___flmul@temp
  4387   0020E0  CFF4 F028          	movff	prodh,___flmul@temp+1
  4388   0020E4  5027               	movf	___flmul@temp^0,w,c
  4389   0020E6  261D               	addwf	___flmul@grs^0,f,c
  4390   0020E8  0E00               	movlw	0
  4391   0020EA  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4392   0020EC  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4393   0020EE  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4394   0020F0  5028               	movf	(___flmul@temp+1)^0,w,c
  4395   0020F2  2623               	addwf	___flmul@prod^0,f,c
  4396   0020F4  0E00               	movlw	0
  4397   0020F6  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4398   0020F8  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4399   0020FA  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4400   0020FC  5014               	movf	___flmul@a^0,w,c
  4401   0020FE  0212               	mulwf	(___flmul@b+2)^0,c
  4402   002100  CFF3 F027          	movff	prodl,___flmul@temp
  4403   002104  CFF4 F028          	movff	prodh,___flmul@temp+1
  4404   002108  5027               	movf	___flmul@temp^0,w,c
  4405   00210A  261D               	addwf	___flmul@grs^0,f,c
  4406   00210C  0E00               	movlw	0
  4407   00210E  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4408   002110  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4409   002112  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4410   002114  5028               	movf	(___flmul@temp+1)^0,w,c
  4411   002116  2623               	addwf	___flmul@prod^0,f,c
  4412   002118  0E00               	movlw	0
  4413   00211A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4414   00211C  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4415   00211E  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4416   002120  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4417   002124  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4418   002128  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4419   00212C  6A1D               	clrf	___flmul@grs^0,c
  4420   00212E  5014               	movf	___flmul@a^0,w,c
  4421   002130  0211               	mulwf	(___flmul@b+1)^0,c
  4422   002132  CFF3 F027          	movff	prodl,___flmul@temp
  4423   002136  CFF4 F028          	movff	prodh,___flmul@temp+1
  4424   00213A  5027               	movf	___flmul@temp^0,w,c
  4425   00213C  261D               	addwf	___flmul@grs^0,f,c
  4426   00213E  5028               	movf	(___flmul@temp+1)^0,w,c
  4427   002140  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4428   002142  0E00               	movlw	0
  4429   002144  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4430   002146  0E00               	movlw	0
  4431   002148  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4432   00214A  5015               	movf	(___flmul@a+1)^0,w,c
  4433   00214C  0210               	mulwf	___flmul@b^0,c
  4434   00214E  CFF3 F027          	movff	prodl,___flmul@temp
  4435   002152  CFF4 F028          	movff	prodh,___flmul@temp+1
  4436   002156  5027               	movf	___flmul@temp^0,w,c
  4437   002158  261D               	addwf	___flmul@grs^0,f,c
  4438   00215A  5028               	movf	(___flmul@temp+1)^0,w,c
  4439   00215C  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4440   00215E  0E00               	movlw	0
  4441   002160  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4442   002162  0E00               	movlw	0
  4443   002164  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4444   002166  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4445   00216A  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4446   00216E  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4447   002172  6A1D               	clrf	___flmul@grs^0,c
  4448   002174  5014               	movf	___flmul@a^0,w,c
  4449   002176  0210               	mulwf	___flmul@b^0,c
  4450   002178  CFF3 F027          	movff	prodl,___flmul@temp
  4451   00217C  CFF4 F028          	movff	prodh,___flmul@temp+1
  4452   002180  5027               	movf	___flmul@temp^0,w,c
  4453   002182  261D               	addwf	___flmul@grs^0,f,c
  4454   002184  5028               	movf	(___flmul@temp+1)^0,w,c
  4455   002186  221E               	addwfc	(___flmul@grs+1)^0,f,c
  4456   002188  0E00               	movlw	0
  4457   00218A  221F               	addwfc	(___flmul@grs+2)^0,f,c
  4458   00218C  0E00               	movlw	0
  4459   00218E  2220               	addwfc	(___flmul@grs+3)^0,f,c
  4460   002190  5016               	movf	(___flmul@a+2)^0,w,c
  4461   002192  0211               	mulwf	(___flmul@b+1)^0,c
  4462   002194  CFF3 F027          	movff	prodl,___flmul@temp
  4463   002198  CFF4 F028          	movff	prodh,___flmul@temp+1
  4464   00219C  5027               	movf	___flmul@temp^0,w,c
  4465   00219E  2623               	addwf	___flmul@prod^0,f,c
  4466   0021A0  5028               	movf	(___flmul@temp+1)^0,w,c
  4467   0021A2  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4468   0021A4  0E00               	movlw	0
  4469   0021A6  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4470   0021A8  0E00               	movlw	0
  4471   0021AA  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4472   0021AC  5015               	movf	(___flmul@a+1)^0,w,c
  4473   0021AE  0212               	mulwf	(___flmul@b+2)^0,c
  4474   0021B0  CFF3 F027          	movff	prodl,___flmul@temp
  4475   0021B4  CFF4 F028          	movff	prodh,___flmul@temp+1
  4476   0021B8  5027               	movf	___flmul@temp^0,w,c
  4477   0021BA  2623               	addwf	___flmul@prod^0,f,c
  4478   0021BC  5028               	movf	(___flmul@temp+1)^0,w,c
  4479   0021BE  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4480   0021C0  0E00               	movlw	0
  4481   0021C2  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4482   0021C4  0E00               	movlw	0
  4483   0021C6  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4484   0021C8  5016               	movf	(___flmul@a+2)^0,w,c
  4485   0021CA  0212               	mulwf	(___flmul@b+2)^0,c
  4486   0021CC  CFF3 F027          	movff	prodl,___flmul@temp
  4487   0021D0  CFF4 F028          	movff	prodh,___flmul@temp+1
  4488   0021D4  5027               	movf	___flmul@temp^0,w,c
  4489   0021D6  6E18               	movwf	??___flmul^0,c
  4490   0021D8  5028               	movf	(___flmul@temp+1)^0,w,c
  4491   0021DA  6E19               	movwf	(??___flmul+1)^0,c
  4492   0021DC  6A1A               	clrf	(??___flmul+2)^0,c
  4493   0021DE  6A1B               	clrf	(??___flmul+3)^0,c
  4494   0021E0  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  4495   0021E4  C019  F01A         	movff	??___flmul+1,??___flmul+2
  4496   0021E8  C018  F019         	movff	??___flmul,??___flmul+1
  4497   0021EC  6A18               	clrf	??___flmul^0,c
  4498   0021EE  5018               	movf	??___flmul^0,w,c
  4499   0021F0  2623               	addwf	___flmul@prod^0,f,c
  4500   0021F2  5019               	movf	(??___flmul+1)^0,w,c
  4501   0021F4  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4502   0021F6  501A               	movf	(??___flmul+2)^0,w,c
  4503   0021F8  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4504   0021FA  501B               	movf	(??___flmul+3)^0,w,c
  4505   0021FC  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4506   0021FE  C01D  F018         	movff	___flmul@grs,??___flmul
  4507   002202  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
  4508   002206  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
  4509   00220A  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
  4510   00220E  0E19               	movlw	25
  4511   002210  EF0F  F011         	goto	u3490
  4512   002214                     u3495:
  4513   002214  90D8               	bcf	status,0,c
  4514   002216  321B               	rrcf	(??___flmul+3)^0,f,c
  4515   002218  321A               	rrcf	(??___flmul+2)^0,f,c
  4516   00221A  3219               	rrcf	(??___flmul+1)^0,f,c
  4517   00221C  3218               	rrcf	??___flmul^0,f,c
  4518   00221E                     u3490:
  4519   00221E  2EE8               	decfsz	wreg,f,c
  4520   002220  EF0A  F011         	goto	u3495
  4521   002224  5018               	movf	??___flmul^0,w,c
  4522   002226  2623               	addwf	___flmul@prod^0,f,c
  4523   002228  5019               	movf	(??___flmul+1)^0,w,c
  4524   00222A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4525   00222C  501A               	movf	(??___flmul+2)^0,w,c
  4526   00222E  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4527   002230  501B               	movf	(??___flmul+3)^0,w,c
  4528   002232  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4529   002234  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4530   002238  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4531   00223C  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4532   002240  6A1D               	clrf	___flmul@grs^0,c
  4533   002242  5021               	movf	___flmul@aexp^0,w,c
  4534   002244  C022  F018         	movff	___flmul@bexp,??___flmul
  4535   002248  6A19               	clrf	(??___flmul+1)^0,c
  4536   00224A  2618               	addwf	??___flmul^0,f,c
  4537   00224C  0E00               	movlw	0
  4538   00224E  2219               	addwfc	(??___flmul+1)^0,f,c
  4539   002250  0E82               	movlw	130
  4540   002252  2418               	addwf	??___flmul^0,w,c
  4541   002254  6E27               	movwf	___flmul@temp^0,c
  4542   002256  0EFF               	movlw	255
  4543   002258  2019               	addwfc	(??___flmul+1)^0,w,c
  4544   00225A  6E28               	movwf	(___flmul@temp+1)^0,c
  4545   00225C  EF45  F011         	goto	l4320
  4546   002260                     l4314:
  4547   002260  90D8               	bcf	status,0,c
  4548   002262  3623               	rlcf	___flmul@prod^0,f,c
  4549   002264  3624               	rlcf	(___flmul@prod+1)^0,f,c
  4550   002266  3625               	rlcf	(___flmul@prod+2)^0,f,c
  4551   002268  3626               	rlcf	(___flmul@prod+3)^0,f,c
  4552   00226A  AE20               	btfss	(___flmul@grs+3)^0,7,c
  4553   00226C  EF3A  F011         	goto	u3501
  4554   002270  EF3C  F011         	goto	u3500
  4555   002274                     u3501:
  4556   002274  EF3D  F011         	goto	l1435
  4557   002278                     u3500:
  4558   002278  8023               	bsf	___flmul@prod^0,0,c
  4559   00227A                     l1435:
  4560   00227A  90D8               	bcf	status,0,c
  4561   00227C  361D               	rlcf	___flmul@grs^0,f,c
  4562   00227E  361E               	rlcf	(___flmul@grs+1)^0,f,c
  4563   002280  361F               	rlcf	(___flmul@grs+2)^0,f,c
  4564   002282  3620               	rlcf	(___flmul@grs+3)^0,f,c
  4565   002284  0627               	decf	___flmul@temp^0,f,c
  4566   002286  A0D8               	btfss	status,0,c
  4567   002288  0628               	decf	(___flmul@temp+1)^0,f,c
  4568   00228A                     l4320:
  4569   00228A  AE25               	btfss	(___flmul@prod+2)^0,7,c
  4570   00228C  EF4A  F011         	goto	u3511
  4571   002290  EF4C  F011         	goto	u3510
  4572   002294                     u3511:
  4573   002294  EF30  F011         	goto	l4314
  4574   002298                     u3510:
  4575   002298  0E00               	movlw	0
  4576   00229A  6E21               	movwf	___flmul@aexp^0,c
  4577   00229C  AE20               	btfss	(___flmul@grs+3)^0,7,c
  4578   00229E  EF53  F011         	goto	u3521
  4579   0022A2  EF55  F011         	goto	u3520
  4580   0022A6                     u3521:
  4581   0022A6  EF79  F011         	goto	l1437
  4582   0022AA                     u3520:
  4583   0022AA  0EFF               	movlw	255
  4584   0022AC  141D               	andwf	___flmul@grs^0,w,c
  4585   0022AE  6E18               	movwf	??___flmul^0,c
  4586   0022B0  0EFF               	movlw	255
  4587   0022B2  141E               	andwf	(___flmul@grs+1)^0,w,c
  4588   0022B4  6E19               	movwf	(??___flmul+1)^0,c
  4589   0022B6  0EFF               	movlw	255
  4590   0022B8  141F               	andwf	(___flmul@grs+2)^0,w,c
  4591   0022BA  6E1A               	movwf	(??___flmul+2)^0,c
  4592   0022BC  0E7F               	movlw	127
  4593   0022BE  1420               	andwf	(___flmul@grs+3)^0,w,c
  4594   0022C0  6E1B               	movwf	(??___flmul+3)^0,c
  4595   0022C2  5018               	movf	??___flmul^0,w,c
  4596   0022C4  1019               	iorwf	(??___flmul+1)^0,w,c
  4597   0022C6  101A               	iorwf	(??___flmul+2)^0,w,c
  4598   0022C8  101B               	iorwf	(??___flmul+3)^0,w,c
  4599   0022CA  B4D8               	btfsc	status,2,c
  4600   0022CC  EF6A  F011         	goto	u3531
  4601   0022D0  EF6C  F011         	goto	u3530
  4602   0022D4                     u3531:
  4603   0022D4  EF70  F011         	goto	l1438
  4604   0022D8                     u3530:
  4605   0022D8                     l4328:
  4606   0022D8  0E01               	movlw	1
  4607   0022DA  6E21               	movwf	___flmul@aexp^0,c
  4608   0022DC  EF79  F011         	goto	l1437
  4609   0022E0                     l1438:
  4610   0022E0  A023               	btfss	___flmul@prod^0,0,c
  4611   0022E2  EF75  F011         	goto	u3541
  4612   0022E6  EF77  F011         	goto	u3540
  4613   0022EA                     u3541:
  4614   0022EA  EF79  F011         	goto	l1437
  4615   0022EE                     u3540:
  4616   0022EE  EF6C  F011         	goto	l4328
  4617   0022F2                     l1437:
  4618   0022F2  5021               	movf	___flmul@aexp^0,w,c
  4619   0022F4  B4D8               	btfsc	status,2,c
  4620   0022F6  EF7F  F011         	goto	u3551
  4621   0022FA  EF81  F011         	goto	u3550
  4622   0022FE                     u3551:
  4623   0022FE  EFA5  F011         	goto	l4340
  4624   002302                     u3550:
  4625   002302  0E01               	movlw	1
  4626   002304  2623               	addwf	___flmul@prod^0,f,c
  4627   002306  0E00               	movlw	0
  4628   002308  2224               	addwfc	(___flmul@prod+1)^0,f,c
  4629   00230A  2225               	addwfc	(___flmul@prod+2)^0,f,c
  4630   00230C  2226               	addwfc	(___flmul@prod+3)^0,f,c
  4631   00230E  A026               	btfss	(___flmul@prod+3)^0,0,c
  4632   002310  EF8C  F011         	goto	u3561
  4633   002314  EF8E  F011         	goto	u3560
  4634   002318                     u3561:
  4635   002318  EFA5  F011         	goto	l4340
  4636   00231C                     u3560:
  4637   00231C  C023  F018         	movff	___flmul@prod,??___flmul
  4638   002320  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  4639   002324  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  4640   002328  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  4641   00232C  341B               	rlcf	(??___flmul+3)^0,w,c
  4642   00232E  321B               	rrcf	(??___flmul+3)^0,f,c
  4643   002330  321A               	rrcf	(??___flmul+2)^0,f,c
  4644   002332  3219               	rrcf	(??___flmul+1)^0,f,c
  4645   002334  3218               	rrcf	??___flmul^0,f,c
  4646   002336  C018  F023         	movff	??___flmul,___flmul@prod
  4647   00233A  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  4648   00233E  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  4649   002342  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  4650   002346  4A27               	infsnz	___flmul@temp^0,f,c
  4651   002348  2A28               	incf	(___flmul@temp+1)^0,f,c
  4652   00234A                     l4340:
  4653   00234A  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  4654   00234C  EFB0  F011         	goto	u3571
  4655   002350  5028               	movf	(___flmul@temp+1)^0,w,c
  4656   002352  E108               	bnz	u3570
  4657   002354  2827               	incf	___flmul@temp^0,w,c
  4658   002356  A0D8               	btfss	status,0,c
  4659   002358  EFB0  F011         	goto	u3571
  4660   00235C  EFB2  F011         	goto	u3570
  4661   002360                     u3571:
  4662   002360  EFBC  F011         	goto	l4344
  4663   002364                     u3570:
  4664   002364  0E00               	movlw	0
  4665   002366  6E23               	movwf	___flmul@prod^0,c
  4666   002368  0E00               	movlw	0
  4667   00236A  6E24               	movwf	(___flmul@prod+1)^0,c
  4668   00236C  0E80               	movlw	128
  4669   00236E  6E25               	movwf	(___flmul@prod+2)^0,c
  4670   002370  0E7F               	movlw	127
  4671   002372  6E26               	movwf	(___flmul@prod+3)^0,c
  4672   002374  EFEA  F011         	goto	l4356
  4673   002378                     l4344:
  4674   002378  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  4675   00237A  EFC9  F011         	goto	u3580
  4676   00237E  5028               	movf	(___flmul@temp+1)^0,w,c
  4677   002380  E106               	bnz	u3581
  4678   002382  0427               	decf	___flmul@temp^0,w,c
  4679   002384  B0D8               	btfsc	status,0,c
  4680   002386  EFC7  F011         	goto	u3581
  4681   00238A  EFC9  F011         	goto	u3580
  4682   00238E                     u3581:
  4683   00238E  EFD5  F011         	goto	l1445
  4684   002392                     u3580:
  4685   002392  0E00               	movlw	0
  4686   002394  6E23               	movwf	___flmul@prod^0,c
  4687   002396  0E00               	movlw	0
  4688   002398  6E24               	movwf	(___flmul@prod+1)^0,c
  4689   00239A  0E00               	movlw	0
  4690   00239C  6E25               	movwf	(___flmul@prod+2)^0,c
  4691   00239E  0E00               	movlw	0
  4692   0023A0  6E26               	movwf	(___flmul@prod+3)^0,c
  4693   0023A2  0E00               	movlw	0
  4694   0023A4  6E1C               	movwf	___flmul@sign^0,c
  4695   0023A6  EFEA  F011         	goto	l4356
  4696   0023AA                     l1445:
  4697   0023AA  C027  F022         	movff	___flmul@temp,___flmul@bexp
  4698   0023AE  0EFF               	movlw	255
  4699   0023B0  1623               	andwf	___flmul@prod^0,f,c
  4700   0023B2  0EFF               	movlw	255
  4701   0023B4  1624               	andwf	(___flmul@prod+1)^0,f,c
  4702   0023B6  0E7F               	movlw	127
  4703   0023B8  1625               	andwf	(___flmul@prod+2)^0,f,c
  4704   0023BA  0E00               	movlw	0
  4705   0023BC  1626               	andwf	(___flmul@prod+3)^0,f,c
  4706   0023BE  A022               	btfss	___flmul@bexp^0,0,c
  4707   0023C0  EFE4  F011         	goto	u3591
  4708   0023C4  EFE6  F011         	goto	u3590
  4709   0023C8                     u3591:
  4710   0023C8  EFE7  F011         	goto	l4354
  4711   0023CC                     u3590:
  4712   0023CC  8E25               	bsf	(___flmul@prod+2)^0,7,c
  4713   0023CE                     l4354:
  4714   0023CE  90D8               	bcf	status,0,c
  4715   0023D0  3022               	rrcf	___flmul@bexp^0,w,c
  4716   0023D2  6E26               	movwf	(___flmul@prod+3)^0,c
  4717   0023D4                     l4356:
  4718   0023D4  501C               	movf	___flmul@sign^0,w,c
  4719   0023D6  1226               	iorwf	(___flmul@prod+3)^0,f,c
  4720   0023D8  C023  F010         	movff	___flmul@prod,?___flmul
  4721   0023DC  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  4722   0023E0  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  4723   0023E4  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  4724   0023E8                     l1432:
  4725   0023E8  0012               	return		;funcret
  4726   0023EA                     __end_of___flmul:
  4727                           	callstack 0
  4728                           
  4729 ;; *************** function ___flge *****************
  4730 ;; Defined at:
  4731 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  ff1             4    1[COMRAM] unsigned char 
  4734 ;;  ff2             4    5[COMRAM] unsigned char 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;		None               void
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, status,0
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4746 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4748 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4749 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4750 ;;Total ram usage:       12 bytes
  4751 ;; Hardware stack levels used: 1
  4752 ;; Hardware stack levels required when called: 1
  4753 ;; This function calls:
  4754 ;;		Nothing
  4755 ;; This function is called by:
  4756 ;;		_convert_rgb2hue
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text11
  4761   0038B4                     __ptext11:
  4762                           	callstack 0
  4763   0038B4                     ___flge:
  4764                           	callstack 27
  4765   0038B4  0E00               	movlw	0
  4766   0038B6  1402               	andwf	___flge@ff1^0,w,c
  4767   0038B8  6E0A               	movwf	??___flge^0,c
  4768   0038BA  0E00               	movlw	0
  4769   0038BC  1403               	andwf	(___flge@ff1+1)^0,w,c
  4770   0038BE  6E0B               	movwf	(??___flge+1)^0,c
  4771   0038C0  0E80               	movlw	128
  4772   0038C2  1404               	andwf	(___flge@ff1+2)^0,w,c
  4773   0038C4  6E0C               	movwf	(??___flge+2)^0,c
  4774   0038C6  0E7F               	movlw	127
  4775   0038C8  1405               	andwf	(___flge@ff1+3)^0,w,c
  4776   0038CA  6E0D               	movwf	(??___flge+3)^0,c
  4777   0038CC  500A               	movf	??___flge^0,w,c
  4778   0038CE  100B               	iorwf	(??___flge+1)^0,w,c
  4779   0038D0  100C               	iorwf	(??___flge+2)^0,w,c
  4780   0038D2  100D               	iorwf	(??___flge+3)^0,w,c
  4781   0038D4  A4D8               	btfss	status,2,c
  4782   0038D6  EF6F  F01C         	goto	u4081
  4783   0038DA  EF71  F01C         	goto	u4080
  4784   0038DE                     u4081:
  4785   0038DE  EF79  F01C         	goto	l4762
  4786   0038E2                     u4080:
  4787   0038E2  0E00               	movlw	0
  4788   0038E4  6E02               	movwf	___flge@ff1^0,c
  4789   0038E6  0E00               	movlw	0
  4790   0038E8  6E03               	movwf	(___flge@ff1+1)^0,c
  4791   0038EA  0E00               	movlw	0
  4792   0038EC  6E04               	movwf	(___flge@ff1+2)^0,c
  4793   0038EE  0E00               	movlw	0
  4794   0038F0  6E05               	movwf	(___flge@ff1+3)^0,c
  4795   0038F2                     l4762:
  4796   0038F2  0E00               	movlw	0
  4797   0038F4  1406               	andwf	___flge@ff2^0,w,c
  4798   0038F6  6E0A               	movwf	??___flge^0,c
  4799   0038F8  0E00               	movlw	0
  4800   0038FA  1407               	andwf	(___flge@ff2+1)^0,w,c
  4801   0038FC  6E0B               	movwf	(??___flge+1)^0,c
  4802   0038FE  0E80               	movlw	128
  4803   003900  1408               	andwf	(___flge@ff2+2)^0,w,c
  4804   003902  6E0C               	movwf	(??___flge+2)^0,c
  4805   003904  0E7F               	movlw	127
  4806   003906  1409               	andwf	(___flge@ff2+3)^0,w,c
  4807   003908  6E0D               	movwf	(??___flge+3)^0,c
  4808   00390A  500A               	movf	??___flge^0,w,c
  4809   00390C  100B               	iorwf	(??___flge+1)^0,w,c
  4810   00390E  100C               	iorwf	(??___flge+2)^0,w,c
  4811   003910  100D               	iorwf	(??___flge+3)^0,w,c
  4812   003912  A4D8               	btfss	status,2,c
  4813   003914  EF8E  F01C         	goto	u4091
  4814   003918  EF90  F01C         	goto	u4090
  4815   00391C                     u4091:
  4816   00391C  EF98  F01C         	goto	l4766
  4817   003920                     u4090:
  4818   003920  0E00               	movlw	0
  4819   003922  6E06               	movwf	___flge@ff2^0,c
  4820   003924  0E00               	movlw	0
  4821   003926  6E07               	movwf	(___flge@ff2+1)^0,c
  4822   003928  0E00               	movlw	0
  4823   00392A  6E08               	movwf	(___flge@ff2+2)^0,c
  4824   00392C  0E00               	movlw	0
  4825   00392E  6E09               	movwf	(___flge@ff2+3)^0,c
  4826   003930                     l4766:
  4827   003930  AE05               	btfss	(___flge@ff1+3)^0,7,c
  4828   003932  EF9D  F01C         	goto	u4101
  4829   003936  EF9F  F01C         	goto	u4100
  4830   00393A                     u4101:
  4831   00393A  EFA8  F01C         	goto	l4770
  4832   00393E                     u4100:
  4833   00393E  6C02               	negf	___flge@ff1^0,c
  4834   003940  1E03               	comf	(___flge@ff1+1)^0,f,c
  4835   003942  B0D8               	btfsc	status,0,c
  4836   003944  2A03               	incf	(___flge@ff1+1)^0,f,c
  4837   003946  1E04               	comf	(___flge@ff1+2)^0,f,c
  4838   003948  B0D8               	btfsc	status,0,c
  4839   00394A  2A04               	incf	(___flge@ff1+2)^0,f,c
  4840   00394C  0E80               	movlw	128
  4841   00394E  5605               	subfwb	(___flge@ff1+3)^0,f,c
  4842   003950                     l4770:
  4843   003950  AE09               	btfss	(___flge@ff2+3)^0,7,c
  4844   003952  EFAD  F01C         	goto	u4111
  4845   003956  EFAF  F01C         	goto	u4110
  4846   00395A                     u4111:
  4847   00395A  EFB8  F01C         	goto	l1079
  4848   00395E                     u4110:
  4849   00395E  6C06               	negf	___flge@ff2^0,c
  4850   003960  1E07               	comf	(___flge@ff2+1)^0,f,c
  4851   003962  B0D8               	btfsc	status,0,c
  4852   003964  2A07               	incf	(___flge@ff2+1)^0,f,c
  4853   003966  1E08               	comf	(___flge@ff2+2)^0,f,c
  4854   003968  B0D8               	btfsc	status,0,c
  4855   00396A  2A08               	incf	(___flge@ff2+2)^0,f,c
  4856   00396C  0E80               	movlw	128
  4857   00396E  5609               	subfwb	(___flge@ff2+3)^0,f,c
  4858   003970                     l1079:
  4859   003970  0E00               	movlw	0
  4860   003972  1A02               	xorwf	___flge@ff1^0,f,c
  4861   003974  0E00               	movlw	0
  4862   003976  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  4863   003978  0E00               	movlw	0
  4864   00397A  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  4865   00397C  0E80               	movlw	128
  4866   00397E  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  4867   003980  0E00               	movlw	0
  4868   003982  1A06               	xorwf	___flge@ff2^0,f,c
  4869   003984  0E00               	movlw	0
  4870   003986  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  4871   003988  0E00               	movlw	0
  4872   00398A  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  4873   00398C  0E80               	movlw	128
  4874   00398E  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  4875   003990  5006               	movf	___flge@ff2^0,w,c
  4876   003992  5C02               	subwf	___flge@ff1^0,w,c
  4877   003994  5007               	movf	(___flge@ff2+1)^0,w,c
  4878   003996  5803               	subwfb	(___flge@ff1+1)^0,w,c
  4879   003998  5008               	movf	(___flge@ff2+2)^0,w,c
  4880   00399A  5804               	subwfb	(___flge@ff1+2)^0,w,c
  4881   00399C  5009               	movf	(___flge@ff2+3)^0,w,c
  4882   00399E  5805               	subwfb	(___flge@ff1+3)^0,w,c
  4883   0039A0  B0D8               	btfsc	status,0,c
  4884   0039A2  EFD5  F01C         	goto	u4121
  4885   0039A6  EFD7  F01C         	goto	u4120
  4886   0039AA                     u4121:
  4887   0039AA  EFDA  F01C         	goto	l4776
  4888   0039AE                     u4120:
  4889   0039AE  90D8               	bcf	status,0,c
  4890   0039B0  EFDB  F01C         	goto	l1084
  4891   0039B4                     l4776:
  4892   0039B4  80D8               	bsf	status,0,c
  4893   0039B6                     l1084:
  4894   0039B6  0012               	return		;funcret
  4895   0039B8                     __end_of___flge:
  4896                           	callstack 0
  4897                           
  4898 ;; *************** function ___fleq *****************
  4899 ;; Defined at:
  4900 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  ff1             4    1[COMRAM] unsigned char 
  4903 ;;  ff2             4    5[COMRAM] unsigned char 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4915 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4917 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4918 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4919 ;;Total ram usage:       12 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 1
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_convert_rgb2hue
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text12
  4930   003E7A                     __ptext12:
  4931                           	callstack 0
  4932   003E7A                     ___fleq:
  4933                           	callstack 27
  4934   003E7A  0E00               	movlw	0
  4935   003E7C  1402               	andwf	___fleq@ff1^0,w,c
  4936   003E7E  6E0A               	movwf	??___fleq^0,c
  4937   003E80  0E00               	movlw	0
  4938   003E82  1403               	andwf	(___fleq@ff1+1)^0,w,c
  4939   003E84  6E0B               	movwf	(??___fleq+1)^0,c
  4940   003E86  0E80               	movlw	128
  4941   003E88  1404               	andwf	(___fleq@ff1+2)^0,w,c
  4942   003E8A  6E0C               	movwf	(??___fleq+2)^0,c
  4943   003E8C  0E7F               	movlw	127
  4944   003E8E  1405               	andwf	(___fleq@ff1+3)^0,w,c
  4945   003E90  6E0D               	movwf	(??___fleq+3)^0,c
  4946   003E92  500A               	movf	??___fleq^0,w,c
  4947   003E94  100B               	iorwf	(??___fleq+1)^0,w,c
  4948   003E96  100C               	iorwf	(??___fleq+2)^0,w,c
  4949   003E98  100D               	iorwf	(??___fleq+3)^0,w,c
  4950   003E9A  A4D8               	btfss	status,2,c
  4951   003E9C  EF52  F01F         	goto	u4051
  4952   003EA0  EF54  F01F         	goto	u4050
  4953   003EA4                     u4051:
  4954   003EA4  EF5C  F01F         	goto	l4746
  4955   003EA8                     u4050:
  4956   003EA8  0E00               	movlw	0
  4957   003EAA  6E02               	movwf	___fleq@ff1^0,c
  4958   003EAC  0E00               	movlw	0
  4959   003EAE  6E03               	movwf	(___fleq@ff1+1)^0,c
  4960   003EB0  0E00               	movlw	0
  4961   003EB2  6E04               	movwf	(___fleq@ff1+2)^0,c
  4962   003EB4  0E00               	movlw	0
  4963   003EB6  6E05               	movwf	(___fleq@ff1+3)^0,c
  4964   003EB8                     l4746:
  4965   003EB8  0E00               	movlw	0
  4966   003EBA  1406               	andwf	___fleq@ff2^0,w,c
  4967   003EBC  6E0A               	movwf	??___fleq^0,c
  4968   003EBE  0E00               	movlw	0
  4969   003EC0  1407               	andwf	(___fleq@ff2+1)^0,w,c
  4970   003EC2  6E0B               	movwf	(??___fleq+1)^0,c
  4971   003EC4  0E80               	movlw	128
  4972   003EC6  1408               	andwf	(___fleq@ff2+2)^0,w,c
  4973   003EC8  6E0C               	movwf	(??___fleq+2)^0,c
  4974   003ECA  0E7F               	movlw	127
  4975   003ECC  1409               	andwf	(___fleq@ff2+3)^0,w,c
  4976   003ECE  6E0D               	movwf	(??___fleq+3)^0,c
  4977   003ED0  500A               	movf	??___fleq^0,w,c
  4978   003ED2  100B               	iorwf	(??___fleq+1)^0,w,c
  4979   003ED4  100C               	iorwf	(??___fleq+2)^0,w,c
  4980   003ED6  100D               	iorwf	(??___fleq+3)^0,w,c
  4981   003ED8  A4D8               	btfss	status,2,c
  4982   003EDA  EF71  F01F         	goto	u4061
  4983   003EDE  EF73  F01F         	goto	u4060
  4984   003EE2                     u4061:
  4985   003EE2  EF7B  F01F         	goto	l4750
  4986   003EE6                     u4060:
  4987   003EE6  0E00               	movlw	0
  4988   003EE8  6E06               	movwf	___fleq@ff2^0,c
  4989   003EEA  0E00               	movlw	0
  4990   003EEC  6E07               	movwf	(___fleq@ff2+1)^0,c
  4991   003EEE  0E00               	movlw	0
  4992   003EF0  6E08               	movwf	(___fleq@ff2+2)^0,c
  4993   003EF2  0E00               	movlw	0
  4994   003EF4  6E09               	movwf	(___fleq@ff2+3)^0,c
  4995   003EF6                     l4750:
  4996   003EF6  5006               	movf	___fleq@ff2^0,w,c
  4997   003EF8  1802               	xorwf	___fleq@ff1^0,w,c
  4998   003EFA  E10F               	bnz	u4070
  4999   003EFC  5007               	movf	(___fleq@ff2+1)^0,w,c
  5000   003EFE  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5001   003F00  E10C               	bnz	u4070
  5002   003F02  5008               	movf	(___fleq@ff2+2)^0,w,c
  5003   003F04  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5004   003F06  E109               	bnz	u4070
  5005   003F08  5009               	movf	(___fleq@ff2+3)^0,w,c
  5006   003F0A  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5007   003F0C  B4D8               	btfsc	status,2,c
  5008   003F0E  EF8B  F01F         	goto	u4071
  5009   003F12  EF8D  F01F         	goto	u4070
  5010   003F16                     u4071:
  5011   003F16  EF90  F01F         	goto	l4754
  5012   003F1A                     u4070:
  5013   003F1A  90D8               	bcf	status,0,c
  5014   003F1C  EF91  F01F         	goto	l1073
  5015   003F20                     l4754:
  5016   003F20  80D8               	bsf	status,0,c
  5017   003F22                     l1073:
  5018   003F22  0012               	return		;funcret
  5019   003F24                     __end_of___fleq:
  5020                           	callstack 0
  5021                           
  5022 ;; *************** function ___fldiv *****************
  5023 ;; Defined at:
  5024 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  b               4   40[COMRAM] unsigned char 
  5027 ;;  a               4   44[COMRAM] unsigned char 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  grs             4   59[COMRAM] unsigned long 
  5030 ;;  rem             4   52[COMRAM] unsigned long 
  5031 ;;  new_exp         2   57[COMRAM] short 
  5032 ;;  aexp            1   64[COMRAM] unsigned char 
  5033 ;;  bexp            1   63[COMRAM] unsigned char 
  5034 ;;  sign            1   56[COMRAM] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  4   40[COMRAM] unsigned char 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5044 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;Total ram usage:       25 bytes
  5049 ;; Hardware stack levels used: 1
  5050 ;; Hardware stack levels required when called: 1
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_convert_rgb2hue
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text13
  5060   0023EA                     __ptext13:
  5061                           	callstack 0
  5062   0023EA                     ___fldiv:
  5063                           	callstack 27
  5064   0023EA  502C               	movf	(___fldiv@b+3)^0,w,c
  5065   0023EC  0B80               	andlw	128
  5066   0023EE  6E39               	movwf	___fldiv@sign^0,c
  5067   0023F0  502C               	movf	(___fldiv@b+3)^0,w,c
  5068   0023F2  242C               	addwf	(___fldiv@b+3)^0,w,c
  5069   0023F4  6E40               	movwf	___fldiv@bexp^0,c
  5070   0023F6  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  5071   0023F8  EF00  F012         	goto	u3821
  5072   0023FC  EF02  F012         	goto	u3820
  5073   002400                     u3821:
  5074   002400  EF03  F012         	goto	l4604
  5075   002404                     u3820:
  5076   002404  8040               	bsf	___fldiv@bexp^0,0,c
  5077   002406                     l4604:
  5078   002406  5040               	movf	___fldiv@bexp^0,w,c
  5079   002408  B4D8               	btfsc	status,2,c
  5080   00240A  EF09  F012         	goto	u3831
  5081   00240E  EF0B  F012         	goto	u3830
  5082   002412                     u3831:
  5083   002412  EF20  F012         	goto	l4614
  5084   002416                     u3830:
  5085   002416  2840               	incf	___fldiv@bexp^0,w,c
  5086   002418  A4D8               	btfss	status,2,c
  5087   00241A  EF11  F012         	goto	u3841
  5088   00241E  EF13  F012         	goto	u3840
  5089   002422                     u3841:
  5090   002422  EF1B  F012         	goto	l4610
  5091   002426                     u3840:
  5092   002426  0E00               	movlw	0
  5093   002428  6E29               	movwf	___fldiv@b^0,c
  5094   00242A  0E00               	movlw	0
  5095   00242C  6E2A               	movwf	(___fldiv@b+1)^0,c
  5096   00242E  0E00               	movlw	0
  5097   002430  6E2B               	movwf	(___fldiv@b+2)^0,c
  5098   002432  0E00               	movlw	0
  5099   002434  6E2C               	movwf	(___fldiv@b+3)^0,c
  5100   002436                     l4610:
  5101   002436  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  5102   002438  0E00               	movlw	0
  5103   00243A  6E2C               	movwf	(___fldiv@b+3)^0,c
  5104   00243C  EF28  F012         	goto	l4616
  5105   002440                     l4614:
  5106   002440  0E00               	movlw	0
  5107   002442  6E29               	movwf	___fldiv@b^0,c
  5108   002444  0E00               	movlw	0
  5109   002446  6E2A               	movwf	(___fldiv@b+1)^0,c
  5110   002448  0E00               	movlw	0
  5111   00244A  6E2B               	movwf	(___fldiv@b+2)^0,c
  5112   00244C  0E00               	movlw	0
  5113   00244E  6E2C               	movwf	(___fldiv@b+3)^0,c
  5114   002450                     l4616:
  5115   002450  5030               	movf	(___fldiv@a+3)^0,w,c
  5116   002452  0B80               	andlw	128
  5117   002454  1A39               	xorwf	___fldiv@sign^0,f,c
  5118   002456  5030               	movf	(___fldiv@a+3)^0,w,c
  5119   002458  2430               	addwf	(___fldiv@a+3)^0,w,c
  5120   00245A  6E41               	movwf	___fldiv@aexp^0,c
  5121   00245C  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  5122   00245E  EF33  F012         	goto	u3851
  5123   002462  EF35  F012         	goto	u3850
  5124   002466                     u3851:
  5125   002466  EF36  F012         	goto	l4624
  5126   00246A                     u3850:
  5127   00246A  8041               	bsf	___fldiv@aexp^0,0,c
  5128   00246C                     l4624:
  5129   00246C  5041               	movf	___fldiv@aexp^0,w,c
  5130   00246E  B4D8               	btfsc	status,2,c
  5131   002470  EF3C  F012         	goto	u3861
  5132   002474  EF3E  F012         	goto	u3860
  5133   002478                     u3861:
  5134   002478  EF53  F012         	goto	l4634
  5135   00247C                     u3860:
  5136   00247C  2841               	incf	___fldiv@aexp^0,w,c
  5137   00247E  A4D8               	btfss	status,2,c
  5138   002480  EF44  F012         	goto	u3871
  5139   002484  EF46  F012         	goto	u3870
  5140   002488                     u3871:
  5141   002488  EF4E  F012         	goto	l4630
  5142   00248C                     u3870:
  5143   00248C  0E00               	movlw	0
  5144   00248E  6E2D               	movwf	___fldiv@a^0,c
  5145   002490  0E00               	movlw	0
  5146   002492  6E2E               	movwf	(___fldiv@a+1)^0,c
  5147   002494  0E00               	movlw	0
  5148   002496  6E2F               	movwf	(___fldiv@a+2)^0,c
  5149   002498  0E00               	movlw	0
  5150   00249A  6E30               	movwf	(___fldiv@a+3)^0,c
  5151   00249C                     l4630:
  5152   00249C  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  5153   00249E  0E00               	movlw	0
  5154   0024A0  6E30               	movwf	(___fldiv@a+3)^0,c
  5155   0024A2  EF5B  F012         	goto	l4636
  5156   0024A6                     l4634:
  5157   0024A6  0E00               	movlw	0
  5158   0024A8  6E2D               	movwf	___fldiv@a^0,c
  5159   0024AA  0E00               	movlw	0
  5160   0024AC  6E2E               	movwf	(___fldiv@a+1)^0,c
  5161   0024AE  0E00               	movlw	0
  5162   0024B0  6E2F               	movwf	(___fldiv@a+2)^0,c
  5163   0024B2  0E00               	movlw	0
  5164   0024B4  6E30               	movwf	(___fldiv@a+3)^0,c
  5165   0024B6                     l4636:
  5166   0024B6  502D               	movf	___fldiv@a^0,w,c
  5167   0024B8  102E               	iorwf	(___fldiv@a+1)^0,w,c
  5168   0024BA  102F               	iorwf	(___fldiv@a+2)^0,w,c
  5169   0024BC  1030               	iorwf	(___fldiv@a+3)^0,w,c
  5170   0024BE  A4D8               	btfss	status,2,c
  5171   0024C0  EF64  F012         	goto	u3881
  5172   0024C4  EF66  F012         	goto	u3880
  5173   0024C8                     u3881:
  5174   0024C8  EF7E  F012         	goto	l4648
  5175   0024CC                     u3880:
  5176   0024CC  0E00               	movlw	0
  5177   0024CE  6E29               	movwf	___fldiv@b^0,c
  5178   0024D0  0E00               	movlw	0
  5179   0024D2  6E2A               	movwf	(___fldiv@b+1)^0,c
  5180   0024D4  0E00               	movlw	0
  5181   0024D6  6E2B               	movwf	(___fldiv@b+2)^0,c
  5182   0024D8  0E00               	movlw	0
  5183   0024DA  6E2C               	movwf	(___fldiv@b+3)^0,c
  5184   0024DC  0E80               	movlw	128
  5185   0024DE  122B               	iorwf	(___fldiv@b+2)^0,f,c
  5186   0024E0  0E7F               	movlw	127
  5187   0024E2  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5188   0024E4                     l4642:
  5189   0024E4  5039               	movf	___fldiv@sign^0,w,c
  5190   0024E6  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5191   0024E8  C029  F029         	movff	___fldiv@b,?___fldiv
  5192   0024EC  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  5193   0024F0  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  5194   0024F4  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  5195   0024F8  EFC1  F013         	goto	l1396
  5196   0024FC                     l4648:
  5197   0024FC  5040               	movf	___fldiv@bexp^0,w,c
  5198   0024FE  A4D8               	btfss	status,2,c
  5199   002500  EF84  F012         	goto	u3891
  5200   002504  EF86  F012         	goto	u3890
  5201   002508                     u3891:
  5202   002508  EF90  F012         	goto	l4656
  5203   00250C                     u3890:
  5204   00250C  0E00               	movlw	0
  5205   00250E  6E29               	movwf	?___fldiv^0,c
  5206   002510  0E00               	movlw	0
  5207   002512  6E2A               	movwf	(?___fldiv+1)^0,c
  5208   002514  0E00               	movlw	0
  5209   002516  6E2B               	movwf	(?___fldiv+2)^0,c
  5210   002518  0E00               	movlw	0
  5211   00251A  6E2C               	movwf	(?___fldiv+3)^0,c
  5212   00251C  EFC1  F013         	goto	l1396
  5213   002520                     l4656:
  5214   002520  5041               	movf	___fldiv@aexp^0,w,c
  5215   002522  C040  F031         	movff	___fldiv@bexp,??___fldiv
  5216   002526  6A32               	clrf	(??___fldiv+1)^0,c
  5217   002528  5E31               	subwf	??___fldiv^0,f,c
  5218   00252A  0E00               	movlw	0
  5219   00252C  5A32               	subwfb	(??___fldiv+1)^0,f,c
  5220   00252E  0E7F               	movlw	127
  5221   002530  2431               	addwf	??___fldiv^0,w,c
  5222   002532  6E3A               	movwf	___fldiv@new_exp^0,c
  5223   002534  0E00               	movlw	0
  5224   002536  2032               	addwfc	(??___fldiv+1)^0,w,c
  5225   002538  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5226   00253A  C029  F035         	movff	___fldiv@b,___fldiv@rem
  5227   00253E  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  5228   002542  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  5229   002546  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  5230   00254A  0E00               	movlw	0
  5231   00254C  6E29               	movwf	___fldiv@b^0,c
  5232   00254E  0E00               	movlw	0
  5233   002550  6E2A               	movwf	(___fldiv@b+1)^0,c
  5234   002552  0E00               	movlw	0
  5235   002554  6E2B               	movwf	(___fldiv@b+2)^0,c
  5236   002556  0E00               	movlw	0
  5237   002558  6E2C               	movwf	(___fldiv@b+3)^0,c
  5238   00255A  0E00               	movlw	0
  5239   00255C  6E3C               	movwf	___fldiv@grs^0,c
  5240   00255E  0E00               	movlw	0
  5241   002560  6E3D               	movwf	(___fldiv@grs+1)^0,c
  5242   002562  0E00               	movlw	0
  5243   002564  6E3E               	movwf	(___fldiv@grs+2)^0,c
  5244   002566  0E00               	movlw	0
  5245   002568  6E3F               	movwf	(___fldiv@grs+3)^0,c
  5246   00256A  0E00               	movlw	0
  5247   00256C  6E41               	movwf	___fldiv@aexp^0,c
  5248   00256E  EFF1  F012         	goto	l1398
  5249   002572                     l4666:
  5250   002572  5041               	movf	___fldiv@aexp^0,w,c
  5251   002574  B4D8               	btfsc	status,2,c
  5252   002576  EFBF  F012         	goto	u3901
  5253   00257A  EFC1  F012         	goto	u3900
  5254   00257E                     u3901:
  5255   00257E  EFD8  F012         	goto	l4674
  5256   002582                     u3900:
  5257   002582  90D8               	bcf	status,0,c
  5258   002584  3635               	rlcf	___fldiv@rem^0,f,c
  5259   002586  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  5260   002588  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  5261   00258A  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  5262   00258C  90D8               	bcf	status,0,c
  5263   00258E  3629               	rlcf	___fldiv@b^0,f,c
  5264   002590  362A               	rlcf	(___fldiv@b+1)^0,f,c
  5265   002592  362B               	rlcf	(___fldiv@b+2)^0,f,c
  5266   002594  362C               	rlcf	(___fldiv@b+3)^0,f,c
  5267   002596  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5268   002598  EFD0  F012         	goto	u3911
  5269   00259C  EFD2  F012         	goto	u3910
  5270   0025A0                     u3911:
  5271   0025A0  EFD3  F012         	goto	l1401
  5272   0025A4                     u3910:
  5273   0025A4  8029               	bsf	___fldiv@b^0,0,c
  5274   0025A6                     l1401:
  5275   0025A6  90D8               	bcf	status,0,c
  5276   0025A8  363C               	rlcf	___fldiv@grs^0,f,c
  5277   0025AA  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  5278   0025AC  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  5279   0025AE  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  5280   0025B0                     l4674:
  5281   0025B0  502D               	movf	___fldiv@a^0,w,c
  5282   0025B2  5C35               	subwf	___fldiv@rem^0,w,c
  5283   0025B4  502E               	movf	(___fldiv@a+1)^0,w,c
  5284   0025B6  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  5285   0025B8  502F               	movf	(___fldiv@a+2)^0,w,c
  5286   0025BA  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  5287   0025BC  5030               	movf	(___fldiv@a+3)^0,w,c
  5288   0025BE  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  5289   0025C0  A0D8               	btfss	status,0,c
  5290   0025C2  EFE5  F012         	goto	u3921
  5291   0025C6  EFE7  F012         	goto	u3920
  5292   0025CA                     u3921:
  5293   0025CA  EFF0  F012         	goto	l4680
  5294   0025CE                     u3920:
  5295   0025CE  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  5296   0025D0  502D               	movf	___fldiv@a^0,w,c
  5297   0025D2  5E35               	subwf	___fldiv@rem^0,f,c
  5298   0025D4  502E               	movf	(___fldiv@a+1)^0,w,c
  5299   0025D6  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  5300   0025D8  502F               	movf	(___fldiv@a+2)^0,w,c
  5301   0025DA  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  5302   0025DC  5030               	movf	(___fldiv@a+3)^0,w,c
  5303   0025DE  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  5304   0025E0                     l4680:
  5305   0025E0  2A41               	incf	___fldiv@aexp^0,f,c
  5306   0025E2                     l1398:
  5307   0025E2  0E19               	movlw	25
  5308   0025E4  6441               	cpfsgt	___fldiv@aexp^0,c
  5309   0025E6  EFF7  F012         	goto	u3931
  5310   0025EA  EFF9  F012         	goto	u3930
  5311   0025EE                     u3931:
  5312   0025EE  EFB9  F012         	goto	l4666
  5313   0025F2                     u3930:
  5314   0025F2  5035               	movf	___fldiv@rem^0,w,c
  5315   0025F4  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  5316   0025F6  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  5317   0025F8  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  5318   0025FA  B4D8               	btfsc	status,2,c
  5319   0025FC  EF02  F013         	goto	u3941
  5320   002600  EF04  F013         	goto	u3940
  5321   002604                     u3941:
  5322   002604  EF1C  F013         	goto	l4692
  5323   002608                     u3940:
  5324   002608  803C               	bsf	___fldiv@grs^0,0,c
  5325   00260A  EF1C  F013         	goto	l4692
  5326   00260E                     l4686:
  5327   00260E  90D8               	bcf	status,0,c
  5328   002610  3629               	rlcf	___fldiv@b^0,f,c
  5329   002612  362A               	rlcf	(___fldiv@b+1)^0,f,c
  5330   002614  362B               	rlcf	(___fldiv@b+2)^0,f,c
  5331   002616  362C               	rlcf	(___fldiv@b+3)^0,f,c
  5332   002618  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5333   00261A  EF11  F013         	goto	u3951
  5334   00261E  EF13  F013         	goto	u3950
  5335   002622                     u3951:
  5336   002622  EF14  F013         	goto	l1407
  5337   002626                     u3950:
  5338   002626  8029               	bsf	___fldiv@b^0,0,c
  5339   002628                     l1407:
  5340   002628  90D8               	bcf	status,0,c
  5341   00262A  363C               	rlcf	___fldiv@grs^0,f,c
  5342   00262C  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  5343   00262E  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  5344   002630  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  5345   002632  063A               	decf	___fldiv@new_exp^0,f,c
  5346   002634  A0D8               	btfss	status,0,c
  5347   002636  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  5348   002638                     l4692:
  5349   002638  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  5350   00263A  EF21  F013         	goto	u3961
  5351   00263E  EF23  F013         	goto	u3960
  5352   002642                     u3961:
  5353   002642  EF07  F013         	goto	l4686
  5354   002646                     u3960:
  5355   002646  0E00               	movlw	0
  5356   002648  6E41               	movwf	___fldiv@aexp^0,c
  5357   00264A  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  5358   00264C  EF2A  F013         	goto	u3971
  5359   002650  EF2C  F013         	goto	u3970
  5360   002654                     u3971:
  5361   002654  EF50  F013         	goto	l1409
  5362   002658                     u3970:
  5363   002658  0EFF               	movlw	255
  5364   00265A  143C               	andwf	___fldiv@grs^0,w,c
  5365   00265C  6E31               	movwf	??___fldiv^0,c
  5366   00265E  0EFF               	movlw	255
  5367   002660  143D               	andwf	(___fldiv@grs+1)^0,w,c
  5368   002662  6E32               	movwf	(??___fldiv+1)^0,c
  5369   002664  0EFF               	movlw	255
  5370   002666  143E               	andwf	(___fldiv@grs+2)^0,w,c
  5371   002668  6E33               	movwf	(??___fldiv+2)^0,c
  5372   00266A  0E7F               	movlw	127
  5373   00266C  143F               	andwf	(___fldiv@grs+3)^0,w,c
  5374   00266E  6E34               	movwf	(??___fldiv+3)^0,c
  5375   002670  5031               	movf	??___fldiv^0,w,c
  5376   002672  1032               	iorwf	(??___fldiv+1)^0,w,c
  5377   002674  1033               	iorwf	(??___fldiv+2)^0,w,c
  5378   002676  1034               	iorwf	(??___fldiv+3)^0,w,c
  5379   002678  B4D8               	btfsc	status,2,c
  5380   00267A  EF41  F013         	goto	u3981
  5381   00267E  EF43  F013         	goto	u3980
  5382   002682                     u3981:
  5383   002682  EF47  F013         	goto	l1410
  5384   002686                     u3980:
  5385   002686                     l4700:
  5386   002686  0E01               	movlw	1
  5387   002688  6E41               	movwf	___fldiv@aexp^0,c
  5388   00268A  EF50  F013         	goto	l1409
  5389   00268E                     l1410:
  5390   00268E  A029               	btfss	___fldiv@b^0,0,c
  5391   002690  EF4C  F013         	goto	u3991
  5392   002694  EF4E  F013         	goto	u3990
  5393   002698                     u3991:
  5394   002698  EF50  F013         	goto	l1409
  5395   00269C                     u3990:
  5396   00269C  EF43  F013         	goto	l4700
  5397   0026A0                     l1409:
  5398   0026A0  5041               	movf	___fldiv@aexp^0,w,c
  5399   0026A2  B4D8               	btfsc	status,2,c
  5400   0026A4  EF56  F013         	goto	u4001
  5401   0026A8  EF58  F013         	goto	u4000
  5402   0026AC                     u4001:
  5403   0026AC  EF7C  F013         	goto	l4712
  5404   0026B0                     u4000:
  5405   0026B0  0E01               	movlw	1
  5406   0026B2  2629               	addwf	___fldiv@b^0,f,c
  5407   0026B4  0E00               	movlw	0
  5408   0026B6  222A               	addwfc	(___fldiv@b+1)^0,f,c
  5409   0026B8  222B               	addwfc	(___fldiv@b+2)^0,f,c
  5410   0026BA  222C               	addwfc	(___fldiv@b+3)^0,f,c
  5411   0026BC  A02C               	btfss	(___fldiv@b+3)^0,0,c
  5412   0026BE  EF63  F013         	goto	u4011
  5413   0026C2  EF65  F013         	goto	u4010
  5414   0026C6                     u4011:
  5415   0026C6  EF7C  F013         	goto	l4712
  5416   0026CA                     u4010:
  5417   0026CA  C029  F031         	movff	___fldiv@b,??___fldiv
  5418   0026CE  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  5419   0026D2  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  5420   0026D6  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  5421   0026DA  3434               	rlcf	(??___fldiv+3)^0,w,c
  5422   0026DC  3234               	rrcf	(??___fldiv+3)^0,f,c
  5423   0026DE  3233               	rrcf	(??___fldiv+2)^0,f,c
  5424   0026E0  3232               	rrcf	(??___fldiv+1)^0,f,c
  5425   0026E2  3231               	rrcf	??___fldiv^0,f,c
  5426   0026E4  C031  F029         	movff	??___fldiv,___fldiv@b
  5427   0026E8  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  5428   0026EC  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  5429   0026F0  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  5430   0026F4  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  5431   0026F6  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  5432   0026F8                     l4712:
  5433   0026F8  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5434   0026FA  EF87  F013         	goto	u4021
  5435   0026FE  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  5436   002700  E108               	bnz	u4020
  5437   002702  283A               	incf	___fldiv@new_exp^0,w,c
  5438   002704  A0D8               	btfss	status,0,c
  5439   002706  EF87  F013         	goto	u4021
  5440   00270A  EF89  F013         	goto	u4020
  5441   00270E                     u4021:
  5442   00270E  EF94  F013         	goto	l4716
  5443   002712                     u4020:
  5444   002712  0E00               	movlw	0
  5445   002714  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5446   002716  683A               	setf	___fldiv@new_exp^0,c
  5447   002718  0E00               	movlw	0
  5448   00271A  6E29               	movwf	___fldiv@b^0,c
  5449   00271C  0E00               	movlw	0
  5450   00271E  6E2A               	movwf	(___fldiv@b+1)^0,c
  5451   002720  0E00               	movlw	0
  5452   002722  6E2B               	movwf	(___fldiv@b+2)^0,c
  5453   002724  0E00               	movlw	0
  5454   002726  6E2C               	movwf	(___fldiv@b+3)^0,c
  5455   002728                     l4716:
  5456   002728  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5457   00272A  EFA1  F013         	goto	u4030
  5458   00272E  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  5459   002730  E106               	bnz	u4031
  5460   002732  043A               	decf	___fldiv@new_exp^0,w,c
  5461   002734  B0D8               	btfsc	status,0,c
  5462   002736  EF9F  F013         	goto	u4031
  5463   00273A  EFA1  F013         	goto	u4030
  5464   00273E                     u4031:
  5465   00273E  EFAF  F013         	goto	l4720
  5466   002742                     u4030:
  5467   002742  0E00               	movlw	0
  5468   002744  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5469   002746  0E00               	movlw	0
  5470   002748  6E3A               	movwf	___fldiv@new_exp^0,c
  5471   00274A  0E00               	movlw	0
  5472   00274C  6E29               	movwf	___fldiv@b^0,c
  5473   00274E  0E00               	movlw	0
  5474   002750  6E2A               	movwf	(___fldiv@b+1)^0,c
  5475   002752  0E00               	movlw	0
  5476   002754  6E2B               	movwf	(___fldiv@b+2)^0,c
  5477   002756  0E00               	movlw	0
  5478   002758  6E2C               	movwf	(___fldiv@b+3)^0,c
  5479   00275A  0E00               	movlw	0
  5480   00275C  6E39               	movwf	___fldiv@sign^0,c
  5481   00275E                     l4720:
  5482   00275E  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  5483   002762  A040               	btfss	___fldiv@bexp^0,0,c
  5484   002764  EFB6  F013         	goto	u4041
  5485   002768  EFB8  F013         	goto	u4040
  5486   00276C                     u4041:
  5487   00276C  EFBB  F013         	goto	l4726
  5488   002770                     u4040:
  5489   002770  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  5490   002772  EFBC  F013         	goto	l4728
  5491   002776                     l4726:
  5492   002776  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  5493   002778                     l4728:
  5494   002778  90D8               	bcf	status,0,c
  5495   00277A  3040               	rrcf	___fldiv@bexp^0,w,c
  5496   00277C  6E2C               	movwf	(___fldiv@b+3)^0,c
  5497   00277E  EF72  F012         	goto	l4642
  5498   002782                     l1396:
  5499   002782  0012               	return		;funcret
  5500   002784                     __end_of___fldiv:
  5501                           	callstack 0
  5502                           
  5503 ;; *************** function _initUSART4 *****************
  5504 ;; Defined at:
  5505 ;;		line 14 in file "serial.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;		None
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5523 ;;Total ram usage:        0 bytes
  5524 ;; Hardware stack levels used: 1
  5525 ;; Hardware stack levels required when called: 1
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text14
  5534   004CA0                     __ptext14:
  5535                           	callstack 0
  5536   004CA0                     _initUSART4:
  5537                           	callstack 29
  5538   004CA0                     
  5539                           ;serial.c: 15:     RC0PPS = 0x12;
  5540   004CA0  0E12               	movlw	18
  5541   004CA2  010E               	movlb	14	; () banked
  5542   004CA4  6F62               	movwf	98,b	;volatile
  5543                           
  5544                           ;serial.c: 16:     RX4PPS = 0x11;
  5545   004CA6  0E11               	movlw	17
  5546   004CA8  6F15               	movwf	21,b	;volatile
  5547   004CAA                     
  5548                           ; BSR set to: 14
  5549                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5550   004CAA  97E9               	bcf	233,3,b	;volatile
  5551   004CAC                     
  5552                           ; BSR set to: 14
  5553                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5554   004CAC  95E8               	bcf	232,2,b	;volatile
  5555                           
  5556                           ;serial.c: 19:     SP4BRGL = 51;
  5557   004CAE  0E33               	movlw	51
  5558   004CB0  6FE5               	movwf	229,b	;volatile
  5559                           
  5560                           ;serial.c: 20:     SP4BRGH = 0;
  5561   004CB2  0E00               	movlw	0
  5562   004CB4  6FE6               	movwf	230,b	;volatile
  5563   004CB6                     
  5564                           ; BSR set to: 14
  5565                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5566   004CB6  89E7               	bsf	231,4,b	;volatile
  5567   004CB8                     
  5568                           ; BSR set to: 14
  5569                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5570   004CB8  8BE8               	bsf	232,5,b	;volatile
  5571   004CBA                     
  5572                           ; BSR set to: 14
  5573                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5574   004CBA  8FE7               	bsf	231,7,b	;volatile
  5575   004CBC                     
  5576                           ; BSR set to: 14
  5577   004CBC  0012               	return		;funcret
  5578   004CBE                     __end_of_initUSART4:
  5579                           	callstack 0
  5580                           
  5581 ;; *************** function _initDCmotorsPWM *****************
  5582 ;; Defined at:
  5583 ;;		line 5 in file "dc_motor.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;Total ram usage:        2 bytes
  5602 ;; Hardware stack levels used: 1
  5603 ;; Hardware stack levels required when called: 1
  5604 ;; This function calls:
  5605 ;;		Nothing
  5606 ;; This function is called by:
  5607 ;;		_main
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text15
  5612   004102                     __ptext15:
  5613                           	callstack 0
  5614   004102                     _initDCmotorsPWM:
  5615                           	callstack 29
  5616   004102                     
  5617                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5618   004102  9485               	bcf	133,2,c	;volatile
  5619                           
  5620                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5621   004104  9E83               	bcf	131,7,c	;volatile
  5622                           
  5623                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5624   004106  9885               	bcf	133,4,c	;volatile
  5625                           
  5626                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5627   004108  9C87               	bcf	135,6,c	;volatile
  5628                           
  5629                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5630   00410A  947D               	bcf	125,2,c	;volatile
  5631                           
  5632                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5633   00410C  9E7B               	bcf	123,7,c	;volatile
  5634                           
  5635                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5636   00410E  987D               	bcf	125,4,c	;volatile
  5637                           
  5638                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5639   004110  9C7F               	bcf	127,6,c	;volatile
  5640   004112                     
  5641                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5642   004112  0E05               	movlw	5
  5643   004114  010E               	movlb	14	; () banked
  5644   004116  6F74               	movwf	116,b	;volatile
  5645                           
  5646                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5647   004118  0E06               	movlw	6
  5648   00411A  6F76               	movwf	118,b	;volatile
  5649                           
  5650                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5651   00411C  0E07               	movlw	7
  5652   00411E  6F69               	movwf	105,b	;volatile
  5653                           
  5654                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5655   004120  0E08               	movlw	8
  5656   004122  6F88               	movwf	136,b	;volatile
  5657                           
  5658                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5659   004124  50BD               	movf	189,w,c	;volatile
  5660   004126  0B8F               	andlw	-113
  5661   004128  0940               	iorlw	64
  5662   00412A  6EBD               	movwf	189,c	;volatile
  5663                           
  5664                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5665   00412C  0EE0               	movlw	-32
  5666   00412E  16BE               	andwf	190,f,c	;volatile
  5667                           
  5668                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5669   004130  50BF               	movf	191,w,c	;volatile
  5670   004132  0BF0               	andlw	-16
  5671   004134  0901               	iorlw	1
  5672   004136  6EBF               	movwf	191,c	;volatile
  5673   004138                     
  5674                           ; BSR set to: 14
  5675                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5676   004138  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5677   00413C                     
  5678                           ; BSR set to: 14
  5679                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5680   00413C  8EBD               	bsf	189,7,c	;volatile
  5681                           
  5682                           ;dc_motor.c: 35:     CCPR1H=0;
  5683   00413E  0E00               	movlw	0
  5684   004140  6EAA               	movwf	170,c	;volatile
  5685                           
  5686                           ;dc_motor.c: 36:     CCPR2H=0;
  5687   004142  0E00               	movlw	0
  5688   004144  6EA6               	movwf	166,c	;volatile
  5689                           
  5690                           ;dc_motor.c: 37:     CCPR3H=0;
  5691   004146  0E00               	movlw	0
  5692   004148  010F               	movlb	15	; () banked
  5693   00414A  6F25               	movwf	37,b	;volatile
  5694                           
  5695                           ;dc_motor.c: 38:     CCPR4H=0;
  5696   00414C  0E00               	movlw	0
  5697   00414E  6F21               	movwf	33,b	;volatile
  5698                           
  5699                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5700   004150  0EFC               	movlw	-4
  5701   004152  16AD               	andwf	173,f,c	;volatile
  5702                           
  5703                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5704   004154  0EF3               	movlw	-13
  5705   004156  16AD               	andwf	173,f,c	;volatile
  5706                           
  5707                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5708   004158  0ECF               	movlw	-49
  5709   00415A  16AD               	andwf	173,f,c	;volatile
  5710                           
  5711                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5712   00415C  0E3F               	movlw	-193
  5713   00415E  16AD               	andwf	173,f,c	;volatile
  5714   004160                     
  5715                           ; BSR set to: 15
  5716                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5717   004160  88AB               	bsf	171,4,c	;volatile
  5718                           
  5719                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5720   004162  50AB               	movf	171,w,c	;volatile
  5721   004164  0BF0               	andlw	-16
  5722   004166  090C               	iorlw	12
  5723   004168  6EAB               	movwf	171,c	;volatile
  5724   00416A                     
  5725                           ; BSR set to: 15
  5726                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5727   00416A  8EAB               	bsf	171,7,c	;volatile
  5728   00416C                     
  5729                           ; BSR set to: 15
  5730                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5731   00416C  88A7               	bsf	167,4,c	;volatile
  5732                           
  5733                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5734   00416E  50A7               	movf	167,w,c	;volatile
  5735   004170  0BF0               	andlw	-16
  5736   004172  090C               	iorlw	12
  5737   004174  6EA7               	movwf	167,c	;volatile
  5738   004176                     
  5739                           ; BSR set to: 15
  5740                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5741   004176  8EA7               	bsf	167,7,c	;volatile
  5742   004178                     
  5743                           ; BSR set to: 15
  5744                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5745   004178  8926               	bsf	38,4,b	;volatile
  5746                           
  5747                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5748   00417A  5126               	movf	38,w,b	;volatile
  5749   00417C  0BF0               	andlw	-16
  5750   00417E  090C               	iorlw	12
  5751   004180  6F26               	movwf	38,b	;volatile
  5752   004182                     
  5753                           ; BSR set to: 15
  5754                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5755   004182  8F26               	bsf	38,7,b	;volatile
  5756   004184                     
  5757                           ; BSR set to: 15
  5758                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5759   004184  8922               	bsf	34,4,b	;volatile
  5760                           
  5761                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5762   004186  5122               	movf	34,w,b	;volatile
  5763   004188  0BF0               	andlw	-16
  5764   00418A  090C               	iorlw	12
  5765   00418C  6F22               	movwf	34,b	;volatile
  5766   00418E                     
  5767                           ; BSR set to: 15
  5768                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5769   00418E  8F22               	bsf	34,7,b	;volatile
  5770   004190                     
  5771                           ; BSR set to: 15
  5772   004190  0012               	return		;funcret
  5773   004192                     __end_of_initDCmotorsPWM:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function _get16bitTMR0val *****************
  5777 ;; Defined at:
  5778 ;;		line 34 in file "timers.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  path_step       2   27[COMRAM] unsigned int 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  time_ms         4   33[COMRAM] long 
  5783 ;;  combined_val    2   37[COMRAM] int 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2   27[COMRAM] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;Total ram usage:       12 bytes
  5798 ;; Hardware stack levels used: 1
  5799 ;; Hardware stack levels required when called: 2
  5800 ;; This function calls:
  5801 ;;		___aldiv
  5802 ;;		___lmul
  5803 ;;		_logAction
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text16
  5810   003FCE                     __ptext16:
  5811                           	callstack 0
  5812   003FCE                     _get16bitTMR0val:
  5813                           	callstack 28
  5814   003FCE                     
  5815                           ;timers.c: 34: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 35: {;time
      +                          rs.c: 36:     int combined_value;;timers.c: 37:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  5816   003FCE  50D4               	movf	212,w,c	;volatile
  5817   003FD0  6E1F               	movwf	(??_get16bitTMR0val+1)^0,c
  5818   003FD2  6A1E               	clrf	??_get16bitTMR0val^0,c
  5819   003FD4  50D3               	movf	211,w,c	;volatile
  5820   003FD6  6E20               	movwf	(??_get16bitTMR0val+2)^0,c
  5821   003FD8  6A21               	clrf	(??_get16bitTMR0val+3)^0,c
  5822   003FDA  501E               	movf	??_get16bitTMR0val^0,w,c
  5823   003FDC  1020               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  5824   003FDE  6E26               	movwf	get16bitTMR0val@combined_value^0,c
  5825   003FE0  501F               	movf	(??_get16bitTMR0val+1)^0,w,c
  5826   003FE2  1021               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  5827   003FE4  6E27               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  5828   003FE6                     
  5829                           ;timers.c: 38:     long time_ms = combined_value*65535*4*8192/64000000;
  5830   003FE6  C026  F002         	movff	get16bitTMR0val@combined_value,___lmul@multiplier
  5831   003FEA  C027  F003         	movff	get16bitTMR0val@combined_value+1,___lmul@multiplier+1
  5832   003FEE  0E00               	movlw	0
  5833   003FF0  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  5834   003FF2  0EFF               	movlw	-1
  5835   003FF4  6E04               	movwf	(___lmul@multiplier+2)^0,c
  5836   003FF6  6E05               	movwf	(___lmul@multiplier+3)^0,c
  5837   003FF8  0E00               	movlw	0
  5838   003FFA  6E06               	movwf	___lmul@multiplicand^0,c
  5839   003FFC  0E80               	movlw	128
  5840   003FFE  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  5841   004000  0EFF               	movlw	255
  5842   004002  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  5843   004004  0E7F               	movlw	127
  5844   004006  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  5845   004008  EC03  F022         	call	___lmul	;wreg free
  5846   00400C  C002  F00E         	movff	?___lmul,___aldiv@dividend
  5847   004010  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  5848   004014  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  5849   004018  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  5850   00401C  0E00               	movlw	0
  5851   00401E  6E12               	movwf	___aldiv@divisor^0,c
  5852   004020  0E90               	movlw	144
  5853   004022  6E13               	movwf	(___aldiv@divisor+1)^0,c
  5854   004024  0ED0               	movlw	208
  5855   004026  6E14               	movwf	(___aldiv@divisor+2)^0,c
  5856   004028  0E03               	movlw	3
  5857   00402A  6E15               	movwf	(___aldiv@divisor+3)^0,c
  5858   00402C  EC51  F01B         	call	___aldiv	;wreg free
  5859   004030  C00E  F022         	movff	?___aldiv,get16bitTMR0val@time_ms
  5860   004034  C00F  F023         	movff	?___aldiv+1,get16bitTMR0val@time_ms+1
  5861   004038  C010  F024         	movff	?___aldiv+2,get16bitTMR0val@time_ms+2
  5862   00403C  C011  F025         	movff	?___aldiv+3,get16bitTMR0val@time_ms+3
  5863   004040                     
  5864                           ;timers.c: 40:     logAction(0,time_ms, path_step);
  5865   004040  C022  F002         	movff	get16bitTMR0val@time_ms,logAction@newTime
  5866   004044  C023  F003         	movff	get16bitTMR0val@time_ms+1,logAction@newTime+1
  5867   004048  C024  F004         	movff	get16bitTMR0val@time_ms+2,logAction@newTime+2
  5868   00404C  C025  F005         	movff	get16bitTMR0val@time_ms+3,logAction@newTime+3
  5869   004050  C01C  F006         	movff	get16bitTMR0val@path_step,logAction@path_step
  5870   004054  C01D  F007         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  5871   004058  0E00               	movlw	0
  5872   00405A  EC38  F022         	call	_logAction
  5873   00405E                     
  5874                           ;timers.c: 41:     path_step++;
  5875   00405E  4A1C               	infsnz	get16bitTMR0val@path_step^0,f,c
  5876   004060  2A1D               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  5877   004062                     
  5878                           ;timers.c: 43:     return path_step;
  5879   004062  C01C  F01C         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  5880   004066  C01D  F01D         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  5881   00406A  0012               	return		;funcret
  5882   00406C                     __end_of_get16bitTMR0val:
  5883                           	callstack 0
  5884                           
  5885 ;; *************** function ___lmul *****************
  5886 ;; Defined at:
  5887 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  multiplier      4    1[COMRAM] unsigned long 
  5890 ;;  multiplicand    4    5[COMRAM] unsigned long 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  product         4    9[COMRAM] unsigned long 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  4    1[COMRAM] unsigned long 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5905 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5906 ;;Total ram usage:       12 bytes
  5907 ;; Hardware stack levels used: 1
  5908 ;; Hardware stack levels required when called: 1
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_get16bitTMR0val
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text17
  5917   004406                     __ptext17:
  5918                           	callstack 0
  5919   004406                     ___lmul:
  5920                           	callstack 28
  5921   004406  0E00               	movlw	0
  5922   004408  6E0A               	movwf	___lmul@product^0,c
  5923   00440A  0E00               	movlw	0
  5924   00440C  6E0B               	movwf	(___lmul@product+1)^0,c
  5925   00440E  0E00               	movlw	0
  5926   004410  6E0C               	movwf	(___lmul@product+2)^0,c
  5927   004412  0E00               	movlw	0
  5928   004414  6E0D               	movwf	(___lmul@product+3)^0,c
  5929   004416                     l5026:
  5930   004416  A002               	btfss	___lmul@multiplier^0,0,c
  5931   004418  EF10  F022         	goto	u4361
  5932   00441C  EF12  F022         	goto	u4360
  5933   004420                     u4361:
  5934   004420  EF1A  F022         	goto	l5030
  5935   004424                     u4360:
  5936   004424  5006               	movf	___lmul@multiplicand^0,w,c
  5937   004426  260A               	addwf	___lmul@product^0,f,c
  5938   004428  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  5939   00442A  220B               	addwfc	(___lmul@product+1)^0,f,c
  5940   00442C  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  5941   00442E  220C               	addwfc	(___lmul@product+2)^0,f,c
  5942   004430  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  5943   004432  220D               	addwfc	(___lmul@product+3)^0,f,c
  5944   004434                     l5030:
  5945   004434  90D8               	bcf	status,0,c
  5946   004436  3606               	rlcf	___lmul@multiplicand^0,f,c
  5947   004438  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5948   00443A  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5949   00443C  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5950   00443E  90D8               	bcf	status,0,c
  5951   004440  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  5952   004442  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  5953   004444  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  5954   004446  3202               	rrcf	___lmul@multiplier^0,f,c
  5955   004448  5002               	movf	___lmul@multiplier^0,w,c
  5956   00444A  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  5957   00444C  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  5958   00444E  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  5959   004450  A4D8               	btfss	status,2,c
  5960   004452  EF2D  F022         	goto	u4371
  5961   004456  EF2F  F022         	goto	u4370
  5962   00445A                     u4371:
  5963   00445A  EF0B  F022         	goto	l5026
  5964   00445E                     u4370:
  5965   00445E  C00A  F002         	movff	___lmul@product,?___lmul
  5966   004462  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  5967   004466  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  5968   00446A  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  5969   00446E  0012               	return		;funcret
  5970   004470                     __end_of___lmul:
  5971                           	callstack 0
  5972                           
  5973 ;; *************** function ___aldiv *****************
  5974 ;; Defined at:
  5975 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;  dividend        4   13[COMRAM] long 
  5978 ;;  divisor         4   17[COMRAM] long 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  quotient        4   23[COMRAM] long 
  5981 ;;  sign            1   22[COMRAM] unsigned char 
  5982 ;;  counter         1   21[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  4   13[COMRAM] long 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5992 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5993 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;Total ram usage:       14 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; Hardware stack levels required when called: 1
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_get16bitTMR0val
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text18
  6007   0036A2                     __ptext18:
  6008                           	callstack 0
  6009   0036A2                     ___aldiv:
  6010                           	callstack 28
  6011   0036A2  0E00               	movlw	0
  6012   0036A4  6E17               	movwf	___aldiv@sign^0,c
  6013   0036A6  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  6014   0036A8  EF5A  F01B         	goto	u4380
  6015   0036AC  EF58  F01B         	goto	u4381
  6016   0036B0                     u4381:
  6017   0036B0  EF64  F01B         	goto	l5042
  6018   0036B4                     u4380:
  6019   0036B4  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  6020   0036B6  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  6021   0036B8  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  6022   0036BA  6C12               	negf	___aldiv@divisor^0,c
  6023   0036BC  0E00               	movlw	0
  6024   0036BE  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  6025   0036C0  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  6026   0036C2  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  6027   0036C4  0E01               	movlw	1
  6028   0036C6  6E17               	movwf	___aldiv@sign^0,c
  6029   0036C8                     l5042:
  6030   0036C8  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  6031   0036CA  EF6B  F01B         	goto	u4390
  6032   0036CE  EF69  F01B         	goto	u4391
  6033   0036D2                     u4391:
  6034   0036D2  EF75  F01B         	goto	l5048
  6035   0036D6                     u4390:
  6036   0036D6  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  6037   0036D8  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  6038   0036DA  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  6039   0036DC  6C0E               	negf	___aldiv@dividend^0,c
  6040   0036DE  0E00               	movlw	0
  6041   0036E0  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6042   0036E2  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  6043   0036E4  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  6044   0036E6  0E01               	movlw	1
  6045   0036E8  1A17               	xorwf	___aldiv@sign^0,f,c
  6046   0036EA                     l5048:
  6047   0036EA  0E00               	movlw	0
  6048   0036EC  6E18               	movwf	___aldiv@quotient^0,c
  6049   0036EE  0E00               	movlw	0
  6050   0036F0  6E19               	movwf	(___aldiv@quotient+1)^0,c
  6051   0036F2  0E00               	movlw	0
  6052   0036F4  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  6053   0036F6  0E00               	movlw	0
  6054   0036F8  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  6055   0036FA  5012               	movf	___aldiv@divisor^0,w,c
  6056   0036FC  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  6057   0036FE  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  6058   003700  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  6059   003702  B4D8               	btfsc	status,2,c
  6060   003704  EF86  F01B         	goto	u4401
  6061   003708  EF88  F01B         	goto	u4400
  6062   00370C                     u4401:
  6063   00370C  EFBE  F01B         	goto	l5070
  6064   003710                     u4400:
  6065   003710  0E01               	movlw	1
  6066   003712  6E16               	movwf	___aldiv@counter^0,c
  6067   003714  EF92  F01B         	goto	l5056
  6068   003718                     l5054:
  6069   003718  90D8               	bcf	status,0,c
  6070   00371A  3612               	rlcf	___aldiv@divisor^0,f,c
  6071   00371C  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  6072   00371E  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  6073   003720  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  6074   003722  2A16               	incf	___aldiv@counter^0,f,c
  6075   003724                     l5056:
  6076   003724  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  6077   003726  EF97  F01B         	goto	u4411
  6078   00372A  EF99  F01B         	goto	u4410
  6079   00372E                     u4411:
  6080   00372E  EF8C  F01B         	goto	l5054
  6081   003732                     u4410:
  6082   003732                     l5058:
  6083   003732  90D8               	bcf	status,0,c
  6084   003734  3618               	rlcf	___aldiv@quotient^0,f,c
  6085   003736  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  6086   003738  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6087   00373A  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6088   00373C  5012               	movf	___aldiv@divisor^0,w,c
  6089   00373E  5C0E               	subwf	___aldiv@dividend^0,w,c
  6090   003740  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6091   003742  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6092   003744  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6093   003746  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  6094   003748  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6095   00374A  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  6096   00374C  A0D8               	btfss	status,0,c
  6097   00374E  EFAB  F01B         	goto	u4421
  6098   003752  EFAD  F01B         	goto	u4420
  6099   003756                     u4421:
  6100   003756  EFB6  F01B         	goto	l5066
  6101   00375A                     u4420:
  6102   00375A  5012               	movf	___aldiv@divisor^0,w,c
  6103   00375C  5E0E               	subwf	___aldiv@dividend^0,f,c
  6104   00375E  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6105   003760  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6106   003762  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6107   003764  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  6108   003766  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6109   003768  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  6110   00376A  8018               	bsf	___aldiv@quotient^0,0,c
  6111   00376C                     l5066:
  6112   00376C  90D8               	bcf	status,0,c
  6113   00376E  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  6114   003770  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  6115   003772  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  6116   003774  3212               	rrcf	___aldiv@divisor^0,f,c
  6117   003776  2E16               	decfsz	___aldiv@counter^0,f,c
  6118   003778  EF99  F01B         	goto	l5058
  6119   00377C                     l5070:
  6120   00377C  5017               	movf	___aldiv@sign^0,w,c
  6121   00377E  B4D8               	btfsc	status,2,c
  6122   003780  EFC4  F01B         	goto	u4431
  6123   003784  EFC6  F01B         	goto	u4430
  6124   003788                     u4431:
  6125   003788  EFCE  F01B         	goto	l5074
  6126   00378C                     u4430:
  6127   00378C  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  6128   00378E  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  6129   003790  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  6130   003792  6C18               	negf	___aldiv@quotient^0,c
  6131   003794  0E00               	movlw	0
  6132   003796  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  6133   003798  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6134   00379A  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6135   00379C                     l5074:
  6136   00379C  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  6137   0037A0  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  6138   0037A4  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  6139   0037A8  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  6140   0037AC  0012               	return		;funcret
  6141   0037AE                     __end_of___aldiv:
  6142                           	callstack 0
  6143                           
  6144 ;; *************** function _decision *****************
  6145 ;; Defined at:
  6146 ;;		line 181 in file "color.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  hue             2    0[BANK0 ] unsigned int 
  6149 ;;  path_step       2    2[BANK0 ] unsigned int 
  6150 ;;  factor          2    4[BANK0 ] unsigned int 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  color           2    0        unsigned int 
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  2    0[BANK0 ] unsigned int 
  6155 ;; Registers used:
  6156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6162 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6165 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6166 ;;Total ram usage:        6 bytes
  6167 ;; Hardware stack levels used: 1
  6168 ;; Hardware stack levels required when called: 6
  6169 ;; This function calls:
  6170 ;;		_logAction
  6171 ;;		_moveBlue
  6172 ;;		_moveGreen
  6173 ;;		_moveLightBlue
  6174 ;;		_moveOrange
  6175 ;;		_movePink
  6176 ;;		_moveRed
  6177 ;;		_moveYellow
  6178 ;; This function is called by:
  6179 ;;		_main
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text19
  6184   002784                     __ptext19:
  6185                           	callstack 0
  6186   002784                     _decision:
  6187                           	callstack 24
  6188   002784                     
  6189                           ;color.c: 186:     unsigned int color;;color.c: 188:     if (hue<=10 || hue>=355) {
  6190   002784  0100               	movlb	0	; () banked
  6191   002786  5161               	movf	(decision@hue+1)& (0+255),w,b
  6192   002788  E109               	bnz	u5570
  6193   00278A  0E0B               	movlw	11
  6194   00278C  5D60               	subwf	decision@hue& (0+255),w,b
  6195   00278E  A0D8               	btfss	status,0,c
  6196   002790  EFCC  F013         	goto	u5571
  6197   002794  EFCE  F013         	goto	u5570
  6198   002798                     u5571:
  6199   002798  EFD9  F013         	goto	l6388
  6200   00279C                     u5570:
  6201   00279C                     
  6202                           ; BSR set to: 0
  6203   00279C  0E63               	movlw	99
  6204   00279E  5D60               	subwf	decision@hue& (0+255),w,b
  6205   0027A0  0E01               	movlw	1
  6206   0027A2  5961               	subwfb	(decision@hue+1)& (0+255),w,b
  6207   0027A4  A0D8               	btfss	status,0,c
  6208   0027A6  EFD7  F013         	goto	u5581
  6209   0027AA  EFD9  F013         	goto	u5580
  6210   0027AE                     u5581:
  6211   0027AE  EFF7  F013         	goto	l6396
  6212   0027B2                     u5580:
  6213   0027B2                     l6388:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;color.c: 189:         moveRed(&motorL, &motorR, factor);
  6217   0027B2  0EE6               	movlw	low _motorL
  6218   0027B4  6E52               	movwf	moveRed@mL^0,c
  6219   0027B6  0EDD               	movlw	low _motorR
  6220   0027B8  6E53               	movwf	moveRed@mR^0,c
  6221   0027BA  C064  F054         	movff	decision@factor,moveRed@factor
  6222   0027BE  C065  F055         	movff	decision@factor+1,moveRed@factor+1
  6223   0027C2  EC8A  F024         	call	_moveRed	;wreg free
  6224   0027C6                     
  6225                           ;color.c: 190:         logAction(1,0, path_step);
  6226   0027C6  0E00               	movlw	0
  6227   0027C8  6E02               	movwf	logAction@newTime^0,c
  6228   0027CA  0E00               	movlw	0
  6229   0027CC  6E03               	movwf	(logAction@newTime+1)^0,c
  6230   0027CE  0E00               	movlw	0
  6231   0027D0  6E04               	movwf	(logAction@newTime+2)^0,c
  6232   0027D2  0E00               	movlw	0
  6233   0027D4  6E05               	movwf	(logAction@newTime+3)^0,c
  6234   0027D6  C062  F006         	movff	decision@path_step,logAction@path_step
  6235   0027DA  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6236   0027DE  0E01               	movlw	1
  6237   0027E0  EC38  F022         	call	_logAction
  6238   0027E4                     l6394:
  6239                           
  6240                           ;color.c: 192:         path_step++;
  6241   0027E4  0100               	movlb	0	; () banked
  6242   0027E6  4B62               	infsnz	decision@path_step& (0+255),f,b
  6243   0027E8  2B63               	incf	(decision@path_step+1)& (0+255),f,b
  6244                           
  6245                           ;color.c: 193:     }
  6246   0027EA  EF1D  F015         	goto	l6468
  6247   0027EE                     l6396:
  6248                           
  6249                           ; BSR set to: 0
  6250   0027EE  5161               	movf	(decision@hue+1)& (0+255),w,b
  6251   0027F0  E109               	bnz	u5590
  6252   0027F2  0E69               	movlw	105
  6253   0027F4  5D60               	subwf	decision@hue& (0+255),w,b
  6254   0027F6  A0D8               	btfss	status,0,c
  6255   0027F8  EF00  F014         	goto	u5591
  6256   0027FC  EF02  F014         	goto	u5590
  6257   002800                     u5591:
  6258   002800  EF28  F014         	goto	l6408
  6259   002804                     u5590:
  6260   002804                     
  6261                           ; BSR set to: 0
  6262   002804  5161               	movf	(decision@hue+1)& (0+255),w,b
  6263   002806  E107               	bnz	u5601
  6264   002808  0E83               	movlw	131
  6265   00280A  5D60               	subwf	decision@hue& (0+255),w,b
  6266   00280C  B0D8               	btfsc	status,0,c
  6267   00280E  EF0B  F014         	goto	u5601
  6268   002812  EF0D  F014         	goto	u5600
  6269   002816                     u5601:
  6270   002816  EF28  F014         	goto	l6408
  6271   00281A                     u5600:
  6272   00281A                     
  6273                           ; BSR set to: 0
  6274                           ;color.c: 195:         moveGreen(&motorL, &motorR,factor);
  6275   00281A  0EE6               	movlw	low _motorL
  6276   00281C  6E1F               	movwf	moveGreen@mL^0,c
  6277   00281E  0EDD               	movlw	low _motorR
  6278   002820  6E20               	movwf	moveGreen@mR^0,c
  6279   002822  C064  F021         	movff	decision@factor,moveGreen@factor
  6280   002826  C065  F022         	movff	decision@factor+1,moveGreen@factor+1
  6281   00282A  ECFE  F024         	call	_moveGreen	;wreg free
  6282   00282E                     
  6283                           ;color.c: 196:         logAction(2,0, path_step);
  6284   00282E  0E00               	movlw	0
  6285   002830  6E02               	movwf	logAction@newTime^0,c
  6286   002832  0E00               	movlw	0
  6287   002834  6E03               	movwf	(logAction@newTime+1)^0,c
  6288   002836  0E00               	movlw	0
  6289   002838  6E04               	movwf	(logAction@newTime+2)^0,c
  6290   00283A  0E00               	movlw	0
  6291   00283C  6E05               	movwf	(logAction@newTime+3)^0,c
  6292   00283E  C062  F006         	movff	decision@path_step,logAction@path_step
  6293   002842  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6294   002846  0E02               	movlw	2
  6295   002848  EC38  F022         	call	_logAction
  6296   00284C  EFF2  F013         	goto	l6394
  6297   002850                     l6408:
  6298                           
  6299                           ; BSR set to: 0
  6300   002850  5161               	movf	(decision@hue+1)& (0+255),w,b
  6301   002852  E109               	bnz	u5610
  6302   002854  0EE6               	movlw	230
  6303   002856  5D60               	subwf	decision@hue& (0+255),w,b
  6304   002858  A0D8               	btfss	status,0,c
  6305   00285A  EF31  F014         	goto	u5611
  6306   00285E  EF33  F014         	goto	u5610
  6307   002862                     u5611:
  6308   002862  EF59  F014         	goto	l6420
  6309   002866                     u5610:
  6310   002866                     
  6311                           ; BSR set to: 0
  6312   002866  5161               	movf	(decision@hue+1)& (0+255),w,b
  6313   002868  E107               	bnz	u5621
  6314   00286A  0EF1               	movlw	241
  6315   00286C  5D60               	subwf	decision@hue& (0+255),w,b
  6316   00286E  B0D8               	btfsc	status,0,c
  6317   002870  EF3C  F014         	goto	u5621
  6318   002874  EF3E  F014         	goto	u5620
  6319   002878                     u5621:
  6320   002878  EF59  F014         	goto	l6420
  6321   00287C                     u5620:
  6322   00287C                     
  6323                           ; BSR set to: 0
  6324                           ;color.c: 200:         moveBlue(&motorL,&motorR, factor);
  6325   00287C  0EE6               	movlw	low _motorL
  6326   00287E  6E1F               	movwf	moveBlue@mL^0,c
  6327   002880  0EDD               	movlw	low _motorR
  6328   002882  6E20               	movwf	moveBlue@mR^0,c
  6329   002884  C064  F021         	movff	decision@factor,moveBlue@factor
  6330   002888  C065  F022         	movff	decision@factor+1,moveBlue@factor+1
  6331   00288C  EC1B  F025         	call	_moveBlue	;wreg free
  6332   002890                     
  6333                           ;color.c: 201:         logAction(3,0, path_step);
  6334   002890  0E00               	movlw	0
  6335   002892  6E02               	movwf	logAction@newTime^0,c
  6336   002894  0E00               	movlw	0
  6337   002896  6E03               	movwf	(logAction@newTime+1)^0,c
  6338   002898  0E00               	movlw	0
  6339   00289A  6E04               	movwf	(logAction@newTime+2)^0,c
  6340   00289C  0E00               	movlw	0
  6341   00289E  6E05               	movwf	(logAction@newTime+3)^0,c
  6342   0028A0  C062  F006         	movff	decision@path_step,logAction@path_step
  6343   0028A4  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6344   0028A8  0E03               	movlw	3
  6345   0028AA  EC38  F022         	call	_logAction
  6346   0028AE  EFF2  F013         	goto	l6394
  6347   0028B2                     l6420:
  6348                           
  6349                           ; BSR set to: 0
  6350   0028B2  5161               	movf	(decision@hue+1)& (0+255),w,b
  6351   0028B4  E109               	bnz	u5630
  6352   0028B6  0ED8               	movlw	216
  6353   0028B8  5D60               	subwf	decision@hue& (0+255),w,b
  6354   0028BA  A0D8               	btfss	status,0,c
  6355   0028BC  EF62  F014         	goto	u5631
  6356   0028C0  EF64  F014         	goto	u5630
  6357   0028C4                     u5631:
  6358   0028C4  EF8A  F014         	goto	l6432
  6359   0028C8                     u5630:
  6360   0028C8                     
  6361                           ; BSR set to: 0
  6362   0028C8  5161               	movf	(decision@hue+1)& (0+255),w,b
  6363   0028CA  E107               	bnz	u5641
  6364   0028CC  0EDE               	movlw	222
  6365   0028CE  5D60               	subwf	decision@hue& (0+255),w,b
  6366   0028D0  B0D8               	btfsc	status,0,c
  6367   0028D2  EF6D  F014         	goto	u5641
  6368   0028D6  EF6F  F014         	goto	u5640
  6369   0028DA                     u5641:
  6370   0028DA  EF8A  F014         	goto	l6432
  6371   0028DE                     u5640:
  6372   0028DE                     
  6373                           ; BSR set to: 0
  6374                           ;color.c: 205:         moveLightBlue(&motorL,&motorR, factor);
  6375   0028DE  0EE6               	movlw	low _motorL
  6376   0028E0  6E1F               	movwf	moveLightBlue@mL^0,c
  6377   0028E2  0EDD               	movlw	low _motorR
  6378   0028E4  6E20               	movwf	moveLightBlue@mR^0,c
  6379   0028E6  C064  F021         	movff	decision@factor,moveLightBlue@factor
  6380   0028EA  C065  F022         	movff	decision@factor+1,moveLightBlue@factor+1
  6381   0028EE  ECE1  F024         	call	_moveLightBlue	;wreg free
  6382   0028F2                     
  6383                           ;color.c: 206:         logAction(4,0, path_step);
  6384   0028F2  0E00               	movlw	0
  6385   0028F4  6E02               	movwf	logAction@newTime^0,c
  6386   0028F6  0E00               	movlw	0
  6387   0028F8  6E03               	movwf	(logAction@newTime+1)^0,c
  6388   0028FA  0E00               	movlw	0
  6389   0028FC  6E04               	movwf	(logAction@newTime+2)^0,c
  6390   0028FE  0E00               	movlw	0
  6391   002900  6E05               	movwf	(logAction@newTime+3)^0,c
  6392   002902  C062  F006         	movff	decision@path_step,logAction@path_step
  6393   002906  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6394   00290A  0E04               	movlw	4
  6395   00290C  EC38  F022         	call	_logAction
  6396   002910  EFF2  F013         	goto	l6394
  6397   002914                     l6432:
  6398                           
  6399                           ; BSR set to: 0
  6400   002914  0E2E               	movlw	46
  6401   002916  5D60               	subwf	decision@hue& (0+255),w,b
  6402   002918  0E01               	movlw	1
  6403   00291A  5961               	subwfb	(decision@hue+1)& (0+255),w,b
  6404   00291C  A0D8               	btfss	status,0,c
  6405   00291E  EF93  F014         	goto	u5651
  6406   002922  EF95  F014         	goto	u5650
  6407   002926                     u5651:
  6408   002926  EFBB  F014         	goto	l6444
  6409   00292A                     u5650:
  6410   00292A                     
  6411                           ; BSR set to: 0
  6412   00292A  0E5B               	movlw	91
  6413   00292C  5D60               	subwf	decision@hue& (0+255),w,b
  6414   00292E  0E01               	movlw	1
  6415   002930  5961               	subwfb	(decision@hue+1)& (0+255),w,b
  6416   002932  B0D8               	btfsc	status,0,c
  6417   002934  EF9E  F014         	goto	u5661
  6418   002938  EFA0  F014         	goto	u5660
  6419   00293C                     u5661:
  6420   00293C  EFBB  F014         	goto	l6444
  6421   002940                     u5660:
  6422   002940                     
  6423                           ; BSR set to: 0
  6424                           ;color.c: 210:         moveYellow(&motorL,&motorR, factor);
  6425   002940  0EE6               	movlw	low _motorL
  6426   002942  6E52               	movwf	moveYellow@mL^0,c
  6427   002944  0EDD               	movlw	low _motorR
  6428   002946  6E53               	movwf	moveYellow@mR^0,c
  6429   002948  C064  F054         	movff	decision@factor,moveYellow@factor
  6430   00294C  C065  F055         	movff	decision@factor+1,moveYellow@factor+1
  6431   002950  EC6D  F024         	call	_moveYellow	;wreg free
  6432   002954                     
  6433                           ;color.c: 211:         logAction(5,0, path_step);
  6434   002954  0E00               	movlw	0
  6435   002956  6E02               	movwf	logAction@newTime^0,c
  6436   002958  0E00               	movlw	0
  6437   00295A  6E03               	movwf	(logAction@newTime+1)^0,c
  6438   00295C  0E00               	movlw	0
  6439   00295E  6E04               	movwf	(logAction@newTime+2)^0,c
  6440   002960  0E00               	movlw	0
  6441   002962  6E05               	movwf	(logAction@newTime+3)^0,c
  6442   002964  C062  F006         	movff	decision@path_step,logAction@path_step
  6443   002968  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6444   00296C  0E05               	movlw	5
  6445   00296E  EC38  F022         	call	_logAction
  6446   002972  EFF2  F013         	goto	l6394
  6447   002976                     l6444:
  6448                           
  6449                           ; BSR set to: 0
  6450   002976  5161               	movf	(decision@hue+1)& (0+255),w,b
  6451   002978  E109               	bnz	u5670
  6452   00297A  0E0F               	movlw	15
  6453   00297C  5D60               	subwf	decision@hue& (0+255),w,b
  6454   00297E  A0D8               	btfss	status,0,c
  6455   002980  EFC4  F014         	goto	u5671
  6456   002984  EFC6  F014         	goto	u5670
  6457   002988                     u5671:
  6458   002988  EFEC  F014         	goto	l6456
  6459   00298C                     u5670:
  6460   00298C                     
  6461                           ; BSR set to: 0
  6462   00298C  5161               	movf	(decision@hue+1)& (0+255),w,b
  6463   00298E  E107               	bnz	u5681
  6464   002990  0E24               	movlw	36
  6465   002992  5D60               	subwf	decision@hue& (0+255),w,b
  6466   002994  B0D8               	btfsc	status,0,c
  6467   002996  EFCF  F014         	goto	u5681
  6468   00299A  EFD1  F014         	goto	u5680
  6469   00299E                     u5681:
  6470   00299E  EFEC  F014         	goto	l6456
  6471   0029A2                     u5680:
  6472   0029A2                     
  6473                           ; BSR set to: 0
  6474                           ;color.c: 215:         moveOrange(&motorL,&motorR, factor);
  6475   0029A2  0EE6               	movlw	low _motorL
  6476   0029A4  6E1F               	movwf	moveOrange@mL^0,c
  6477   0029A6  0EDD               	movlw	low _motorR
  6478   0029A8  6E20               	movwf	moveOrange@mR^0,c
  6479   0029AA  C064  F021         	movff	decision@factor,moveOrange@factor
  6480   0029AE  C065  F022         	movff	decision@factor+1,moveOrange@factor+1
  6481   0029B2  ECC4  F024         	call	_moveOrange	;wreg free
  6482   0029B6                     
  6483                           ;color.c: 216:         logAction(6,0, path_step);
  6484   0029B6  0E00               	movlw	0
  6485   0029B8  6E02               	movwf	logAction@newTime^0,c
  6486   0029BA  0E00               	movlw	0
  6487   0029BC  6E03               	movwf	(logAction@newTime+1)^0,c
  6488   0029BE  0E00               	movlw	0
  6489   0029C0  6E04               	movwf	(logAction@newTime+2)^0,c
  6490   0029C2  0E00               	movlw	0
  6491   0029C4  6E05               	movwf	(logAction@newTime+3)^0,c
  6492   0029C6  C062  F006         	movff	decision@path_step,logAction@path_step
  6493   0029CA  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6494   0029CE  0E06               	movlw	6
  6495   0029D0  EC38  F022         	call	_logAction
  6496   0029D4  EFF2  F013         	goto	l6394
  6497   0029D8                     l6456:
  6498                           
  6499                           ; BSR set to: 0
  6500   0029D8  5161               	movf	(decision@hue+1)& (0+255),w,b
  6501   0029DA  E109               	bnz	u5690
  6502   0029DC  0EF4               	movlw	244
  6503   0029DE  5D60               	subwf	decision@hue& (0+255),w,b
  6504   0029E0  A0D8               	btfss	status,0,c
  6505   0029E2  EFF5  F014         	goto	u5691
  6506   0029E6  EFF7  F014         	goto	u5690
  6507   0029EA                     u5691:
  6508   0029EA  EF1D  F015         	goto	l138
  6509   0029EE                     u5690:
  6510   0029EE                     
  6511                           ; BSR set to: 0
  6512   0029EE  5161               	movf	(decision@hue+1)& (0+255),w,b
  6513   0029F0  E107               	bnz	u5701
  6514   0029F2  0EFC               	movlw	252
  6515   0029F4  5D60               	subwf	decision@hue& (0+255),w,b
  6516   0029F6  B0D8               	btfsc	status,0,c
  6517   0029F8  EF00  F015         	goto	u5701
  6518   0029FC  EF02  F015         	goto	u5700
  6519   002A00                     u5701:
  6520   002A00  EF1D  F015         	goto	l138
  6521   002A04                     u5700:
  6522   002A04                     
  6523                           ; BSR set to: 0
  6524                           ;color.c: 220:         movePink(&motorL,&motorR, factor);
  6525   002A04  0EE6               	movlw	low _motorL
  6526   002A06  6E1F               	movwf	movePink@mL^0,c
  6527   002A08  0EDD               	movlw	low _motorR
  6528   002A0A  6E20               	movwf	movePink@mR^0,c
  6529   002A0C  C064  F021         	movff	decision@factor,movePink@factor
  6530   002A10  C065  F022         	movff	decision@factor+1,movePink@factor+1
  6531   002A14  ECA7  F024         	call	_movePink	;wreg free
  6532   002A18                     
  6533                           ;color.c: 221:         logAction(7,0, path_step);
  6534   002A18  0E00               	movlw	0
  6535   002A1A  6E02               	movwf	logAction@newTime^0,c
  6536   002A1C  0E00               	movlw	0
  6537   002A1E  6E03               	movwf	(logAction@newTime+1)^0,c
  6538   002A20  0E00               	movlw	0
  6539   002A22  6E04               	movwf	(logAction@newTime+2)^0,c
  6540   002A24  0E00               	movlw	0
  6541   002A26  6E05               	movwf	(logAction@newTime+3)^0,c
  6542   002A28  C062  F006         	movff	decision@path_step,logAction@path_step
  6543   002A2C  C063  F007         	movff	decision@path_step+1,logAction@path_step+1
  6544   002A30  0E07               	movlw	7
  6545   002A32  EC38  F022         	call	_logAction
  6546   002A36  EFF2  F013         	goto	l6394
  6547   002A3A                     l138:
  6548   002A3A                     l6468:
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;color.c: 227:     return path_step;
  6552   002A3A  C062  F060         	movff	decision@path_step,?_decision
  6553   002A3E  C063  F061         	movff	decision@path_step+1,?_decision+1
  6554   002A42                     
  6555                           ; BSR set to: 0
  6556   002A42  0012               	return		;funcret
  6557   002A44                     __end_of_decision:
  6558                           	callstack 0
  6559                           
  6560 ;; *************** function _moveYellow *****************
  6561 ;; Defined at:
  6562 ;;		line 294 in file "dc_motor.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  mL              1   81[COMRAM] PTR struct DC_motor
  6565 ;;		 -> motorL(9), 
  6566 ;;  mR              1   82[COMRAM] PTR struct DC_motor
  6567 ;;		 -> motorR(9), 
  6568 ;;  factor          2   83[COMRAM] unsigned int 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;		None
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6583 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6584 ;;Total ram usage:        6 bytes
  6585 ;; Hardware stack levels used: 1
  6586 ;; Hardware stack levels required when called: 5
  6587 ;; This function calls:
  6588 ;;		_backOneAndHalf
  6589 ;;		_right90
  6590 ;; This function is called by:
  6591 ;;		_decision
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text20
  6596   0048DA                     __ptext20:
  6597                           	callstack 0
  6598   0048DA                     _moveYellow:
  6599                           	callstack 24
  6600   0048DA                     
  6601                           ;dc_motor.c: 294:  void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned in
      +                          t factor);dc_motor.c: 295: {;dc_motor.c: 297:     backOneAndHalf(mL,mR);
  6602   0048DA  C052  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6603   0048DE  C053  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6604   0048E2  ECA2  F025         	call	_backOneAndHalf	;wreg free
  6605   0048E6                     
  6606                           ;dc_motor.c: 298:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6607   0048E6  0E29               	movlw	41
  6608   0048E8  6E57               	movwf	(??_moveYellow+1)^0,c
  6609   0048EA  0E96               	movlw	150
  6610   0048EC  6E56               	movwf	??_moveYellow^0,c
  6611   0048EE  0E7F               	movlw	127
  6612   0048F0                     u6087:
  6613   0048F0  2EE8               	decfsz	wreg,f,c
  6614   0048F2  D7FE               	bra	u6087
  6615   0048F4  2E56               	decfsz	??_moveYellow^0,f,c
  6616   0048F6  D7FC               	bra	u6087
  6617   0048F8  2E57               	decfsz	(??_moveYellow+1)^0,f,c
  6618   0048FA  D7FA               	bra	u6087
  6619   0048FC  0000               	nop	
  6620   0048FE                     
  6621                           ;dc_motor.c: 299:     right90(mL,mR, factor);
  6622   0048FE  C052  F04C         	movff	moveYellow@mL,right90@mL
  6623   004902  C053  F04D         	movff	moveYellow@mR,right90@mR
  6624   004906  C054  F04E         	movff	moveYellow@factor,right90@factor
  6625   00490A  C055  F04F         	movff	moveYellow@factor+1,right90@factor+1
  6626   00490E  ECCD  F023         	call	_right90	;wreg free
  6627   004912  0012               	return		;funcret
  6628   004914                     __end_of_moveYellow:
  6629                           	callstack 0
  6630                           
  6631 ;; *************** function _moveRed *****************
  6632 ;; Defined at:
  6633 ;;		line 265 in file "dc_motor.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;  mL              1   81[COMRAM] PTR struct DC_motor
  6636 ;;		 -> motorL(9), 
  6637 ;;  mR              1   82[COMRAM] PTR struct DC_motor
  6638 ;;		 -> motorR(9), 
  6639 ;;  factor          2   83[COMRAM] unsigned int 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6654 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6655 ;;Total ram usage:        6 bytes
  6656 ;; Hardware stack levels used: 1
  6657 ;; Hardware stack levels required when called: 5
  6658 ;; This function calls:
  6659 ;;		_backHalf
  6660 ;;		_right90
  6661 ;; This function is called by:
  6662 ;;		_decision
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text21
  6667   004914                     __ptext21:
  6668                           	callstack 0
  6669   004914                     _moveRed:
  6670                           	callstack 24
  6671   004914                     
  6672                           ;dc_motor.c: 265: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int fa
      +                          ctor);dc_motor.c: 266: {;dc_motor.c: 268:     backHalf(mL,mR);
  6673   004914  C052  F019         	movff	moveRed@mL,backHalf@mL
  6674   004918  C053  F01A         	movff	moveRed@mR,backHalf@mR
  6675   00491C  ECD4  F025         	call	_backHalf	;wreg free
  6676   004920                     
  6677                           ;dc_motor.c: 269:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6678   004920  0E29               	movlw	41
  6679   004922  6E57               	movwf	(??_moveRed+1)^0,c
  6680   004924  0E96               	movlw	150
  6681   004926  6E56               	movwf	??_moveRed^0,c
  6682   004928  0E7F               	movlw	127
  6683   00492A                     u6097:
  6684   00492A  2EE8               	decfsz	wreg,f,c
  6685   00492C  D7FE               	bra	u6097
  6686   00492E  2E56               	decfsz	??_moveRed^0,f,c
  6687   004930  D7FC               	bra	u6097
  6688   004932  2E57               	decfsz	(??_moveRed+1)^0,f,c
  6689   004934  D7FA               	bra	u6097
  6690   004936  0000               	nop	
  6691   004938                     
  6692                           ;dc_motor.c: 270:     right90(mL,mR,factor);
  6693   004938  C052  F04C         	movff	moveRed@mL,right90@mL
  6694   00493C  C053  F04D         	movff	moveRed@mR,right90@mR
  6695   004940  C054  F04E         	movff	moveRed@factor,right90@factor
  6696   004944  C055  F04F         	movff	moveRed@factor+1,right90@factor+1
  6697   004948  ECCD  F023         	call	_right90	;wreg free
  6698   00494C  0012               	return		;funcret
  6699   00494E                     __end_of_moveRed:
  6700                           	callstack 0
  6701                           
  6702 ;; *************** function _movePink *****************
  6703 ;; Defined at:
  6704 ;;		line 303 in file "dc_motor.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6707 ;;		 -> motorL(9), 
  6708 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6709 ;;		 -> motorR(9), 
  6710 ;;  factor          2   32[COMRAM] unsigned int 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6726 ;;Total ram usage:        6 bytes
  6727 ;; Hardware stack levels used: 1
  6728 ;; Hardware stack levels required when called: 5
  6729 ;; This function calls:
  6730 ;;		_backOneAndHalf
  6731 ;;		_left90
  6732 ;; This function is called by:
  6733 ;;		_decision
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           	psect	text22
  6738   00494E                     __ptext22:
  6739                           	callstack 0
  6740   00494E                     _movePink:
  6741                           	callstack 24
  6742   00494E                     
  6743                           ;dc_motor.c: 303: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 304: {;dc_motor.c: 306:     backOneAndHalf(mL,mR);
  6744   00494E  C01F  F019         	movff	movePink@mL,backOneAndHalf@mL
  6745   004952  C020  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6746   004956  ECA2  F025         	call	_backOneAndHalf	;wreg free
  6747   00495A                     
  6748                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6749   00495A  0E29               	movlw	41
  6750   00495C  6E24               	movwf	(??_movePink+1)^0,c
  6751   00495E  0E96               	movlw	150
  6752   004960  6E23               	movwf	??_movePink^0,c
  6753   004962  0E7F               	movlw	127
  6754   004964                     u6107:
  6755   004964  2EE8               	decfsz	wreg,f,c
  6756   004966  D7FE               	bra	u6107
  6757   004968  2E23               	decfsz	??_movePink^0,f,c
  6758   00496A  D7FC               	bra	u6107
  6759   00496C  2E24               	decfsz	(??_movePink+1)^0,f,c
  6760   00496E  D7FA               	bra	u6107
  6761   004970  0000               	nop	
  6762   004972                     
  6763                           ;dc_motor.c: 308:     left90(mL,mR, factor);
  6764   004972  C01F  F019         	movff	movePink@mL,left90@mL
  6765   004976  C020  F01A         	movff	movePink@mR,left90@mR
  6766   00497A  C021  F01B         	movff	movePink@factor,left90@factor
  6767   00497E  C022  F01C         	movff	movePink@factor+1,left90@factor+1
  6768   004982  EC8B  F023         	call	_left90	;wreg free
  6769   004986  0012               	return		;funcret
  6770   004988                     __end_of_movePink:
  6771                           	callstack 0
  6772                           
  6773 ;; *************** function _backOneAndHalf *****************
  6774 ;; Defined at:
  6775 ;;		line 251 in file "dc_motor.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6778 ;;		 -> motorL(9), 
  6779 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6780 ;;		 -> motorR(9), 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6794 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6796 ;;Total ram usage:        4 bytes
  6797 ;; Hardware stack levels used: 1
  6798 ;; Hardware stack levels required when called: 4
  6799 ;; This function calls:
  6800 ;;		_fullSpeedBack
  6801 ;;		_stop
  6802 ;; This function is called by:
  6803 ;;		_moveYellow
  6804 ;;		_movePink
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text23
  6809   004B44                     __ptext23:
  6810                           	callstack 0
  6811   004B44                     _backOneAndHalf:
  6812                           	callstack 24
  6813   004B44                     
  6814                           ;dc_motor.c: 251: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 252: {;dc_motor.c: 253:     fullSpeedBack(mL,mR);
  6815   004B44  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6816   004B48  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6817   004B4C  EC8E  F021         	call	_fullSpeedBack	;wreg free
  6818   004B50                     
  6819                           ;dc_motor.c: 254:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6820   004B50  0E6A               	movlw	106
  6821   004B52  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6822   004B54  0E85               	movlw	133
  6823   004B56  6E1B               	movwf	??_backOneAndHalf^0,c
  6824   004B58  0EB4               	movlw	180
  6825   004B5A                     u6117:
  6826   004B5A  2EE8               	decfsz	wreg,f,c
  6827   004B5C  D7FE               	bra	u6117
  6828   004B5E  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6829   004B60  D7FC               	bra	u6117
  6830   004B62  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6831   004B64  D7FA               	bra	u6117
  6832   004B66  D000               	nop2	
  6833   004B68                     
  6834                           ;dc_motor.c: 255:     stop(mL,mR);
  6835   004B68  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6836   004B6C  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6837   004B70  ECC9  F020         	call	_stop	;wreg free
  6838   004B74  0012               	return		;funcret
  6839   004B76                     __end_of_backOneAndHalf:
  6840                           	callstack 0
  6841                           
  6842 ;; *************** function _moveOrange *****************
  6843 ;; Defined at:
  6844 ;;		line 312 in file "dc_motor.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6847 ;;		 -> motorL(9), 
  6848 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6849 ;;		 -> motorR(9), 
  6850 ;;  factor          2   32[COMRAM] unsigned int 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;Total ram usage:        6 bytes
  6867 ;; Hardware stack levels used: 1
  6868 ;; Hardware stack levels required when called: 5
  6869 ;; This function calls:
  6870 ;;		_backHalf
  6871 ;;		_right135
  6872 ;; This function is called by:
  6873 ;;		_decision
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text24
  6878   004988                     __ptext24:
  6879                           	callstack 0
  6880   004988                     _moveOrange:
  6881                           	callstack 24
  6882   004988                     
  6883                           ;dc_motor.c: 312: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           factor);dc_motor.c: 313: {;dc_motor.c: 315:     backHalf(mL,mR);
  6884   004988  C01F  F019         	movff	moveOrange@mL,backHalf@mL
  6885   00498C  C020  F01A         	movff	moveOrange@mR,backHalf@mR
  6886   004990  ECD4  F025         	call	_backHalf	;wreg free
  6887   004994                     
  6888                           ;dc_motor.c: 316:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6889   004994  0E29               	movlw	41
  6890   004996  6E24               	movwf	(??_moveOrange+1)^0,c
  6891   004998  0E96               	movlw	150
  6892   00499A  6E23               	movwf	??_moveOrange^0,c
  6893   00499C  0E7F               	movlw	127
  6894   00499E                     u6127:
  6895   00499E  2EE8               	decfsz	wreg,f,c
  6896   0049A0  D7FE               	bra	u6127
  6897   0049A2  2E23               	decfsz	??_moveOrange^0,f,c
  6898   0049A4  D7FC               	bra	u6127
  6899   0049A6  2E24               	decfsz	(??_moveOrange+1)^0,f,c
  6900   0049A8  D7FA               	bra	u6127
  6901   0049AA  0000               	nop	
  6902   0049AC                     
  6903                           ;dc_motor.c: 317:     right135(mL,mR, factor);
  6904   0049AC  C01F  F019         	movff	moveOrange@mL,right135@mL
  6905   0049B0  C020  F01A         	movff	moveOrange@mR,right135@mR
  6906   0049B4  C021  F01B         	movff	moveOrange@factor,right135@factor
  6907   0049B8  C022  F01C         	movff	moveOrange@factor+1,right135@factor+1
  6908   0049BC  EC49  F023         	call	_right135	;wreg free
  6909   0049C0  0012               	return		;funcret
  6910   0049C2                     __end_of_moveOrange:
  6911                           	callstack 0
  6912                           
  6913 ;; *************** function _right135 *****************
  6914 ;; Defined at:
  6915 ;;		line 223 in file "dc_motor.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6918 ;;		 -> motorL(9), 
  6919 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6920 ;;		 -> motorR(9), 
  6921 ;;  factor          2   26[COMRAM] unsigned int 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  delay_after_    2   28[COMRAM] unsigned int 
  6924 ;;  delay           2    0        unsigned int 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      void 
  6927 ;; Registers used:
  6928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6937 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6938 ;;Total ram usage:        6 bytes
  6939 ;; Hardware stack levels used: 1
  6940 ;; Hardware stack levels required when called: 4
  6941 ;; This function calls:
  6942 ;;		___wmul
  6943 ;;		_customDelayMs
  6944 ;;		_stop
  6945 ;;		_turnRight
  6946 ;; This function is called by:
  6947 ;;		_moveOrange
  6948 ;;		_reverseTurn
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text25
  6953   004692                     __ptext25:
  6954                           	callstack 0
  6955   004692                     _right135:
  6956                           	callstack 24
  6957   004692                     
  6958                           ;dc_motor.c: 226:     unsigned int delay_after_calibration = delay * factor;
  6959   004692  0E01               	movlw	1
  6960   004694  6E03               	movwf	(___wmul@multiplier+1)^0,c
  6961   004696  0E90               	movlw	144
  6962   004698  6E02               	movwf	___wmul@multiplier^0,c
  6963   00469A  C01B  F004         	movff	right135@factor,___wmul@multiplicand
  6964   00469E  C01C  F005         	movff	right135@factor+1,___wmul@multiplicand+1
  6965   0046A2  EC2D  F026         	call	___wmul	;wreg free
  6966   0046A6  C002  F01D         	movff	?___wmul,right135@delay_after_calibration
  6967   0046AA  C003  F01E         	movff	?___wmul+1,right135@delay_after_calibration+1
  6968   0046AE                     
  6969                           ;dc_motor.c: 227:     turnRight(mL,mR);
  6970   0046AE  C019  F014         	movff	right135@mL,turnRight@mL
  6971   0046B2  C01A  F015         	movff	right135@mR,turnRight@mR
  6972   0046B6  EC4F  F021         	call	_turnRight	;wreg free
  6973   0046BA                     
  6974                           ;dc_motor.c: 228:     customDelayMs(delay_after_calibration);
  6975   0046BA  C01D  F002         	movff	right135@delay_after_calibration,customDelayMs@milliseconds
  6976   0046BE  C01E  F003         	movff	right135@delay_after_calibration+1,customDelayMs@milliseconds+1
  6977   0046C2  EC38  F025         	call	_customDelayMs	;wreg free
  6978   0046C6                     
  6979                           ;dc_motor.c: 229:     stop(mL,mR);
  6980   0046C6  C019  F014         	movff	right135@mL,stop@mL
  6981   0046CA  C01A  F015         	movff	right135@mR,stop@mR
  6982   0046CE  ECC9  F020         	call	_stop	;wreg free
  6983   0046D2  0012               	return		;funcret
  6984   0046D4                     __end_of_right135:
  6985                           	callstack 0
  6986                           
  6987 ;; *************** function _moveLightBlue *****************
  6988 ;; Defined at:
  6989 ;;		line 321 in file "dc_motor.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  6992 ;;		 -> motorL(9), 
  6993 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  6994 ;;		 -> motorR(9), 
  6995 ;;  factor          2   32[COMRAM] unsigned int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7007 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;Total ram usage:        6 bytes
  7012 ;; Hardware stack levels used: 1
  7013 ;; Hardware stack levels required when called: 5
  7014 ;; This function calls:
  7015 ;;		_backHalf
  7016 ;;		_left135
  7017 ;; This function is called by:
  7018 ;;		_decision
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text26
  7023   0049C2                     __ptext26:
  7024                           	callstack 0
  7025   0049C2                     _moveLightBlue:
  7026                           	callstack 24
  7027   0049C2                     
  7028                           ;dc_motor.c: 321: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int factor);dc_motor.c: 322: {;dc_motor.c: 324:     backHalf(mL,mR);
  7029   0049C2  C01F  F019         	movff	moveLightBlue@mL,backHalf@mL
  7030   0049C6  C020  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7031   0049CA  ECD4  F025         	call	_backHalf	;wreg free
  7032   0049CE                     
  7033                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7034   0049CE  0E29               	movlw	41
  7035   0049D0  6E24               	movwf	(??_moveLightBlue+1)^0,c
  7036   0049D2  0E96               	movlw	150
  7037   0049D4  6E23               	movwf	??_moveLightBlue^0,c
  7038   0049D6  0E7F               	movlw	127
  7039   0049D8                     u6137:
  7040   0049D8  2EE8               	decfsz	wreg,f,c
  7041   0049DA  D7FE               	bra	u6137
  7042   0049DC  2E23               	decfsz	??_moveLightBlue^0,f,c
  7043   0049DE  D7FC               	bra	u6137
  7044   0049E0  2E24               	decfsz	(??_moveLightBlue+1)^0,f,c
  7045   0049E2  D7FA               	bra	u6137
  7046   0049E4  0000               	nop	
  7047   0049E6                     
  7048                           ;dc_motor.c: 326:     left135(mL,mR,factor);
  7049   0049E6  C01F  F019         	movff	moveLightBlue@mL,left135@mL
  7050   0049EA  C020  F01A         	movff	moveLightBlue@mR,left135@mR
  7051   0049EE  C021  F01B         	movff	moveLightBlue@factor,left135@factor
  7052   0049F2  C022  F01C         	movff	moveLightBlue@factor+1,left135@factor+1
  7053   0049F6  EC6A  F023         	call	_left135	;wreg free
  7054   0049FA  0012               	return		;funcret
  7055   0049FC                     __end_of_moveLightBlue:
  7056                           	callstack 0
  7057                           
  7058 ;; *************** function _left135 *****************
  7059 ;; Defined at:
  7060 ;;		line 233 in file "dc_motor.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7063 ;;		 -> motorL(9), 
  7064 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7065 ;;		 -> motorR(9), 
  7066 ;;  factor          2   26[COMRAM] unsigned int 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7069 ;;  delay           2    0        unsigned int 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7083 ;;Total ram usage:        6 bytes
  7084 ;; Hardware stack levels used: 1
  7085 ;; Hardware stack levels required when called: 4
  7086 ;; This function calls:
  7087 ;;		___wmul
  7088 ;;		_customDelayMs
  7089 ;;		_stop
  7090 ;;		_turnLeft
  7091 ;; This function is called by:
  7092 ;;		_moveLightBlue
  7093 ;;		_reverseTurn
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text27
  7098   0046D4                     __ptext27:
  7099                           	callstack 0
  7100   0046D4                     _left135:
  7101                           	callstack 24
  7102   0046D4                     
  7103                           ;dc_motor.c: 236:     unsigned int delay_after_calibration = delay * factor;
  7104   0046D4  0E01               	movlw	1
  7105   0046D6  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7106   0046D8  0E90               	movlw	144
  7107   0046DA  6E02               	movwf	___wmul@multiplier^0,c
  7108   0046DC  C01B  F004         	movff	left135@factor,___wmul@multiplicand
  7109   0046E0  C01C  F005         	movff	left135@factor+1,___wmul@multiplicand+1
  7110   0046E4  EC2D  F026         	call	___wmul	;wreg free
  7111   0046E8  C002  F01D         	movff	?___wmul,left135@delay_after_calibration
  7112   0046EC  C003  F01E         	movff	?___wmul+1,left135@delay_after_calibration+1
  7113   0046F0                     
  7114                           ;dc_motor.c: 237:     turnLeft(mL,mR);
  7115   0046F0  C019  F014         	movff	left135@mL,turnLeft@mL
  7116   0046F4  C01A  F015         	movff	left135@mR,turnLeft@mR
  7117   0046F8  EC10  F021         	call	_turnLeft	;wreg free
  7118   0046FC                     
  7119                           ;dc_motor.c: 238:     customDelayMs(delay_after_calibration);
  7120   0046FC  C01D  F002         	movff	left135@delay_after_calibration,customDelayMs@milliseconds
  7121   004700  C01E  F003         	movff	left135@delay_after_calibration+1,customDelayMs@milliseconds+1
  7122   004704  EC38  F025         	call	_customDelayMs	;wreg free
  7123   004708                     
  7124                           ;dc_motor.c: 239:     stop(mL,mR);
  7125   004708  C019  F014         	movff	left135@mL,stop@mL
  7126   00470C  C01A  F015         	movff	left135@mR,stop@mR
  7127   004710  ECC9  F020         	call	_stop	;wreg free
  7128   004714  0012               	return		;funcret
  7129   004716                     __end_of_left135:
  7130                           	callstack 0
  7131                           
  7132 ;; *************** function _moveGreen *****************
  7133 ;; Defined at:
  7134 ;;		line 276 in file "dc_motor.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7137 ;;		 -> motorL(9), 
  7138 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7139 ;;		 -> motorR(9), 
  7140 ;;  factor          2   32[COMRAM] unsigned int 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7156 ;;Total ram usage:        6 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 5
  7159 ;; This function calls:
  7160 ;;		_backHalf
  7161 ;;		_left90
  7162 ;; This function is called by:
  7163 ;;		_decision
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text28
  7168   0049FC                     __ptext28:
  7169                           	callstack 0
  7170   0049FC                     _moveGreen:
  7171                           	callstack 24
  7172   0049FC                     
  7173                           ;dc_motor.c: 276: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 277: {;dc_motor.c: 279:     backHalf(mL,mR);
  7174   0049FC  C01F  F019         	movff	moveGreen@mL,backHalf@mL
  7175   004A00  C020  F01A         	movff	moveGreen@mR,backHalf@mR
  7176   004A04  ECD4  F025         	call	_backHalf	;wreg free
  7177   004A08                     
  7178                           ;dc_motor.c: 280:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7179   004A08  0E29               	movlw	41
  7180   004A0A  6E24               	movwf	(??_moveGreen+1)^0,c
  7181   004A0C  0E96               	movlw	150
  7182   004A0E  6E23               	movwf	??_moveGreen^0,c
  7183   004A10  0E7F               	movlw	127
  7184   004A12                     u6147:
  7185   004A12  2EE8               	decfsz	wreg,f,c
  7186   004A14  D7FE               	bra	u6147
  7187   004A16  2E23               	decfsz	??_moveGreen^0,f,c
  7188   004A18  D7FC               	bra	u6147
  7189   004A1A  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  7190   004A1C  D7FA               	bra	u6147
  7191   004A1E  0000               	nop	
  7192   004A20                     
  7193                           ;dc_motor.c: 281:     left90(mL,mR,factor);
  7194   004A20  C01F  F019         	movff	moveGreen@mL,left90@mL
  7195   004A24  C020  F01A         	movff	moveGreen@mR,left90@mR
  7196   004A28  C021  F01B         	movff	moveGreen@factor,left90@factor
  7197   004A2C  C022  F01C         	movff	moveGreen@factor+1,left90@factor+1
  7198   004A30  EC8B  F023         	call	_left90	;wreg free
  7199   004A34  0012               	return		;funcret
  7200   004A36                     __end_of_moveGreen:
  7201                           	callstack 0
  7202                           
  7203 ;; *************** function _left90 *****************
  7204 ;; Defined at:
  7205 ;;		line 203 in file "dc_motor.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7208 ;;		 -> motorL(9), 
  7209 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7210 ;;		 -> motorR(9), 
  7211 ;;  factor          2   26[COMRAM] unsigned int 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7214 ;;  delay           2    0        unsigned int 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7224 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7227 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7228 ;;Total ram usage:        6 bytes
  7229 ;; Hardware stack levels used: 1
  7230 ;; Hardware stack levels required when called: 4
  7231 ;; This function calls:
  7232 ;;		___wmul
  7233 ;;		_customDelayMs
  7234 ;;		_stop
  7235 ;;		_turnLeft
  7236 ;; This function is called by:
  7237 ;;		_moveGreen
  7238 ;;		_movePink
  7239 ;;		_reverseTurn
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text29
  7244   004716                     __ptext29:
  7245                           	callstack 0
  7246   004716                     _left90:
  7247                           	callstack 24
  7248   004716                     
  7249                           ;dc_motor.c: 206:     unsigned int delay_after_calibration = delay * factor;
  7250   004716  0E01               	movlw	1
  7251   004718  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7252   00471A  0E22               	movlw	34
  7253   00471C  6E02               	movwf	___wmul@multiplier^0,c
  7254   00471E  C01B  F004         	movff	left90@factor,___wmul@multiplicand
  7255   004722  C01C  F005         	movff	left90@factor+1,___wmul@multiplicand+1
  7256   004726  EC2D  F026         	call	___wmul	;wreg free
  7257   00472A  C002  F01D         	movff	?___wmul,left90@delay_after_calibration
  7258   00472E  C003  F01E         	movff	?___wmul+1,left90@delay_after_calibration+1
  7259   004732                     
  7260                           ;dc_motor.c: 207:     turnLeft(mL,mR);
  7261   004732  C019  F014         	movff	left90@mL,turnLeft@mL
  7262   004736  C01A  F015         	movff	left90@mR,turnLeft@mR
  7263   00473A  EC10  F021         	call	_turnLeft	;wreg free
  7264   00473E                     
  7265                           ;dc_motor.c: 208:     customDelayMs(delay_after_calibration);
  7266   00473E  C01D  F002         	movff	left90@delay_after_calibration,customDelayMs@milliseconds
  7267   004742  C01E  F003         	movff	left90@delay_after_calibration+1,customDelayMs@milliseconds+1
  7268   004746  EC38  F025         	call	_customDelayMs	;wreg free
  7269   00474A                     
  7270                           ;dc_motor.c: 209:     stop(mL,mR);
  7271   00474A  C019  F014         	movff	left90@mL,stop@mL
  7272   00474E  C01A  F015         	movff	left90@mR,stop@mR
  7273   004752  ECC9  F020         	call	_stop	;wreg free
  7274   004756  0012               	return		;funcret
  7275   004758                     __end_of_left90:
  7276                           	callstack 0
  7277                           
  7278 ;; *************** function _moveBlue *****************
  7279 ;; Defined at:
  7280 ;;		line 285 in file "dc_motor.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7283 ;;		 -> motorL(9), 
  7284 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7285 ;;		 -> motorR(9), 
  7286 ;;  factor          2   32[COMRAM] unsigned int 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;		None
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      void 
  7291 ;; Registers used:
  7292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7298 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7300 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7301 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7302 ;;Total ram usage:        6 bytes
  7303 ;; Hardware stack levels used: 1
  7304 ;; Hardware stack levels required when called: 5
  7305 ;; This function calls:
  7306 ;;		_backHalf
  7307 ;;		_turn180
  7308 ;; This function is called by:
  7309 ;;		_decision
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text30
  7314   004A36                     __ptext30:
  7315                           	callstack 0
  7316   004A36                     _moveBlue:
  7317                           	callstack 24
  7318   004A36                     
  7319                           ;dc_motor.c: 285: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 286: {;dc_motor.c: 288:     backHalf(mL,mR);
  7320   004A36  C01F  F019         	movff	moveBlue@mL,backHalf@mL
  7321   004A3A  C020  F01A         	movff	moveBlue@mR,backHalf@mR
  7322   004A3E  ECD4  F025         	call	_backHalf	;wreg free
  7323   004A42                     
  7324                           ;dc_motor.c: 289:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7325   004A42  0E29               	movlw	41
  7326   004A44  6E24               	movwf	(??_moveBlue+1)^0,c
  7327   004A46  0E96               	movlw	150
  7328   004A48  6E23               	movwf	??_moveBlue^0,c
  7329   004A4A  0E7F               	movlw	127
  7330   004A4C                     u6157:
  7331   004A4C  2EE8               	decfsz	wreg,f,c
  7332   004A4E  D7FE               	bra	u6157
  7333   004A50  2E23               	decfsz	??_moveBlue^0,f,c
  7334   004A52  D7FC               	bra	u6157
  7335   004A54  2E24               	decfsz	(??_moveBlue+1)^0,f,c
  7336   004A56  D7FA               	bra	u6157
  7337   004A58  0000               	nop	
  7338   004A5A                     
  7339                           ;dc_motor.c: 290:     turn180(mL,mR, factor);
  7340   004A5A  C01F  F019         	movff	moveBlue@mL,turn180@mL
  7341   004A5E  C020  F01A         	movff	moveBlue@mR,turn180@mR
  7342   004A62  C021  F01B         	movff	moveBlue@factor,turn180@factor
  7343   004A66  C022  F01C         	movff	moveBlue@factor+1,turn180@factor+1
  7344   004A6A  ECAC  F023         	call	_turn180	;wreg free
  7345   004A6E  0012               	return		;funcret
  7346   004A70                     __end_of_moveBlue:
  7347                           	callstack 0
  7348                           
  7349 ;; *************** function _turn180 *****************
  7350 ;; Defined at:
  7351 ;;		line 213 in file "dc_motor.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7354 ;;		 -> motorL(9), 
  7355 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7356 ;;		 -> motorR(9), 
  7357 ;;  factor          2   26[COMRAM] unsigned int 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7360 ;;  delay           2    0        unsigned int 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7373 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7374 ;;Total ram usage:        6 bytes
  7375 ;; Hardware stack levels used: 1
  7376 ;; Hardware stack levels required when called: 4
  7377 ;; This function calls:
  7378 ;;		___wmul
  7379 ;;		_customDelayMs
  7380 ;;		_stop
  7381 ;;		_turnLeft
  7382 ;; This function is called by:
  7383 ;;		_moveBlue
  7384 ;;		_moveWhite
  7385 ;;		_reverseTurn
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text31
  7390   004758                     __ptext31:
  7391                           	callstack 0
  7392   004758                     _turn180:
  7393                           	callstack 24
  7394   004758                     
  7395                           ;dc_motor.c: 216:     unsigned int delay_after_calibration = delay * factor;
  7396   004758  0E02               	movlw	2
  7397   00475A  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7398   00475C  0E44               	movlw	68
  7399   00475E  6E02               	movwf	___wmul@multiplier^0,c
  7400   004760  C01B  F004         	movff	turn180@factor,___wmul@multiplicand
  7401   004764  C01C  F005         	movff	turn180@factor+1,___wmul@multiplicand+1
  7402   004768  EC2D  F026         	call	___wmul	;wreg free
  7403   00476C  C002  F01D         	movff	?___wmul,turn180@delay_after_calibration
  7404   004770  C003  F01E         	movff	?___wmul+1,turn180@delay_after_calibration+1
  7405   004774                     
  7406                           ;dc_motor.c: 217:     turnLeft(mL,mR);
  7407   004774  C019  F014         	movff	turn180@mL,turnLeft@mL
  7408   004778  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7409   00477C  EC10  F021         	call	_turnLeft	;wreg free
  7410   004780                     
  7411                           ;dc_motor.c: 218:     customDelayMs(delay_after_calibration);
  7412   004780  C01D  F002         	movff	turn180@delay_after_calibration,customDelayMs@milliseconds
  7413   004784  C01E  F003         	movff	turn180@delay_after_calibration+1,customDelayMs@milliseconds+1
  7414   004788  EC38  F025         	call	_customDelayMs	;wreg free
  7415   00478C                     
  7416                           ;dc_motor.c: 219:     stop(mL,mR);
  7417   00478C  C019  F014         	movff	turn180@mL,stop@mL
  7418   004790  C01A  F015         	movff	turn180@mR,stop@mR
  7419   004794  ECC9  F020         	call	_stop	;wreg free
  7420   004798  0012               	return		;funcret
  7421   00479A                     __end_of_turn180:
  7422                           	callstack 0
  7423                           
  7424 ;; *************** function _turnLeft *****************
  7425 ;; Defined at:
  7426 ;;		line 105 in file "dc_motor.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7429 ;;		 -> motorL(9), 
  7430 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7431 ;;		 -> motorR(9), 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;  i               2   22[COMRAM] unsigned int 
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7444 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7446 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7447 ;;Total ram usage:        5 bytes
  7448 ;; Hardware stack levels used: 1
  7449 ;; Hardware stack levels required when called: 3
  7450 ;; This function calls:
  7451 ;;		_setMotorPWM
  7452 ;; This function is called by:
  7453 ;;		_left90
  7454 ;;		_turn180
  7455 ;;		_left135
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text32
  7460   004220                     __ptext32:
  7461                           	callstack 0
  7462   004220                     _turnLeft:
  7463                           	callstack 24
  7464   004220                     
  7465                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7466   004220  5014               	movf	turnLeft@mL^0,w,c
  7467   004222  6ED9               	movwf	fsr2l,c
  7468   004224  6ADA               	clrf	fsr2h,c
  7469   004226  0E01               	movlw	1
  7470   004228  26D9               	addwf	fsr2l,f,c
  7471   00422A  6ADF               	clrf	indf2,c
  7472                           
  7473                           ;dc_motor.c: 109:     mR->direction = 1;
  7474   00422C  5015               	movf	turnLeft@mR^0,w,c
  7475   00422E  6ED9               	movwf	fsr2l,c
  7476   004230  6ADA               	clrf	fsr2h,c
  7477   004232  0E01               	movlw	1
  7478   004234  26D9               	addwf	fsr2l,f,c
  7479   004236  0E01               	movlw	1
  7480   004238  6EDF               	movwf	indf2,c
  7481   00423A                     
  7482                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7483   00423A  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7484   00423E  EC16  F01A         	call	_setMotorPWM	;wreg free
  7485   004242                     
  7486                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7487   004242  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7488   004246  EC16  F01A         	call	_setMotorPWM	;wreg free
  7489   00424A                     
  7490                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7491   00424A  0E00               	movlw	0
  7492   00424C  6E18               	movwf	(turnLeft@i+1)^0,c
  7493   00424E  0E00               	movlw	0
  7494   004250  6E17               	movwf	turnLeft@i^0,c
  7495   004252                     l5972:
  7496                           
  7497                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7498   004252  5014               	movf	turnLeft@mL^0,w,c
  7499   004254  6ED9               	movwf	fsr2l,c
  7500   004256  6ADA               	clrf	fsr2h,c
  7501   004258  2ADF               	incf	indf2,f,c
  7502                           
  7503                           ;dc_motor.c: 116:         mR->power++;
  7504   00425A  5015               	movf	turnLeft@mR^0,w,c
  7505   00425C  6ED9               	movwf	fsr2l,c
  7506   00425E  6ADA               	clrf	fsr2h,c
  7507   004260  2ADF               	incf	indf2,f,c
  7508   004262                     
  7509                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7510   004262  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7511   004266  EC16  F01A         	call	_setMotorPWM	;wreg free
  7512   00426A                     
  7513                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7514   00426A  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7515   00426E  EC16  F01A         	call	_setMotorPWM	;wreg free
  7516   004272                     
  7517                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7518   004272  0E0B               	movlw	11
  7519   004274  6E16               	movwf	??_turnLeft^0,c
  7520   004276  0E62               	movlw	98
  7521   004278                     u6167:
  7522   004278  2EE8               	decfsz	wreg,f,c
  7523   00427A  D7FE               	bra	u6167
  7524   00427C  2E16               	decfsz	??_turnLeft^0,f,c
  7525   00427E  D7FC               	bra	u6167
  7526   004280  D000               	nop2	
  7527   004282                     
  7528                           ;dc_motor.c: 120:     }
  7529   004282  4A17               	infsnz	turnLeft@i^0,f,c
  7530   004284  2A18               	incf	(turnLeft@i+1)^0,f,c
  7531   004286  5018               	movf	(turnLeft@i+1)^0,w,c
  7532   004288  E109               	bnz	u5370
  7533   00428A  0E32               	movlw	50
  7534   00428C  5C17               	subwf	turnLeft@i^0,w,c
  7535   00428E  A0D8               	btfss	status,0,c
  7536   004290  EF4C  F021         	goto	u5371
  7537   004294  EF4E  F021         	goto	u5370
  7538   004298                     u5371:
  7539   004298  EF29  F021         	goto	l5972
  7540   00429C                     u5370:
  7541   00429C  0012               	return		;funcret
  7542   00429E                     __end_of_turnLeft:
  7543                           	callstack 0
  7544                           
  7545 ;; *************** function _backHalf *****************
  7546 ;; Defined at:
  7547 ;;		line 243 in file "dc_motor.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7550 ;;		 -> motorL(9), 
  7551 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7552 ;;		 -> motorR(9), 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;		None
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  1    wreg      void 
  7557 ;; Registers used:
  7558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;Total ram usage:        4 bytes
  7569 ;; Hardware stack levels used: 1
  7570 ;; Hardware stack levels required when called: 4
  7571 ;; This function calls:
  7572 ;;		_fullSpeedBack
  7573 ;;		_stop
  7574 ;; This function is called by:
  7575 ;;		_moveRed
  7576 ;;		_moveGreen
  7577 ;;		_moveBlue
  7578 ;;		_moveOrange
  7579 ;;		_moveLightBlue
  7580 ;;		_moveWhite
  7581 ;;		_reverseTurn
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text33
  7586   004BA8                     __ptext33:
  7587                           	callstack 0
  7588   004BA8                     _backHalf:
  7589                           	callstack 24
  7590   004BA8                     
  7591                           ;dc_motor.c: 243: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 24
      +                          4: {;dc_motor.c: 245:     fullSpeedBack(mL,mR);
  7592   004BA8  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7593   004BAC  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7594   004BB0  EC8E  F021         	call	_fullSpeedBack	;wreg free
  7595   004BB4                     
  7596                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7597   004BB4  0E19               	movlw	25
  7598   004BB6  6E1C               	movwf	(??_backHalf+1)^0,c
  7599   004BB8  0E5A               	movlw	90
  7600   004BBA  6E1B               	movwf	??_backHalf^0,c
  7601   004BBC  0EB2               	movlw	178
  7602   004BBE                     u6177:
  7603   004BBE  2EE8               	decfsz	wreg,f,c
  7604   004BC0  D7FE               	bra	u6177
  7605   004BC2  2E1B               	decfsz	??_backHalf^0,f,c
  7606   004BC4  D7FC               	bra	u6177
  7607   004BC6  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7608   004BC8  D7FA               	bra	u6177
  7609   004BCA                     
  7610                           ;dc_motor.c: 247:     stop(mL,mR);
  7611   004BCA  C019  F014         	movff	backHalf@mL,stop@mL
  7612   004BCE  C01A  F015         	movff	backHalf@mR,stop@mR
  7613   004BD2  ECC9  F020         	call	_stop	;wreg free
  7614   004BD6  0012               	return		;funcret
  7615   004BD8                     __end_of_backHalf:
  7616                           	callstack 0
  7617                           
  7618 ;; *************** function _fullSpeedBack *****************
  7619 ;; Defined at:
  7620 ;;		line 165 in file "dc_motor.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7623 ;;		 -> motorL(9), 
  7624 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7625 ;;		 -> motorR(9), 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  power           2   22[COMRAM] int 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      void 
  7630 ;; Registers used:
  7631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7640 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7641 ;;Total ram usage:        5 bytes
  7642 ;; Hardware stack levels used: 1
  7643 ;; Hardware stack levels required when called: 3
  7644 ;; This function calls:
  7645 ;;		_setMotorPWM
  7646 ;; This function is called by:
  7647 ;;		_backHalf
  7648 ;;		_backOneAndHalf
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text34
  7653   00431C                     __ptext34:
  7654                           	callstack 0
  7655   00431C                     _fullSpeedBack:
  7656                           	callstack 24
  7657   00431C                     
  7658                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7659   00431C  5014               	movf	fullSpeedBack@mL^0,w,c
  7660   00431E  6ED9               	movwf	fsr2l,c
  7661   004320  6ADA               	clrf	fsr2h,c
  7662   004322  0E01               	movlw	1
  7663   004324  26D9               	addwf	fsr2l,f,c
  7664   004326  6ADF               	clrf	indf2,c
  7665                           
  7666                           ;dc_motor.c: 169:     mR->direction = 0;
  7667   004328  5015               	movf	fullSpeedBack@mR^0,w,c
  7668   00432A  6ED9               	movwf	fsr2l,c
  7669   00432C  6ADA               	clrf	fsr2h,c
  7670   00432E  0E01               	movlw	1
  7671   004330  26D9               	addwf	fsr2l,f,c
  7672   004332  6ADF               	clrf	indf2,c
  7673   004334                     
  7674                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  7675   004334  0E00               	movlw	0
  7676   004336  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  7677   004338  0E00               	movlw	0
  7678   00433A  6E17               	movwf	fullSpeedBack@power^0,c
  7679   00433C                     l6016:
  7680                           
  7681                           ;dc_motor.c: 172:         mL->power = power;
  7682   00433C  5014               	movf	fullSpeedBack@mL^0,w,c
  7683   00433E  6ED9               	movwf	fsr2l,c
  7684   004340  6ADA               	clrf	fsr2h,c
  7685   004342  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7686                           
  7687                           ;dc_motor.c: 173:         mR->power = power;
  7688   004346  5015               	movf	fullSpeedBack@mR^0,w,c
  7689   004348  6ED9               	movwf	fsr2l,c
  7690   00434A  6ADA               	clrf	fsr2h,c
  7691   00434C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  7692   004350                     
  7693                           ;dc_motor.c: 176:         setMotorPWM(mL);
  7694   004350  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  7695   004354  EC16  F01A         	call	_setMotorPWM	;wreg free
  7696   004358                     
  7697                           ;dc_motor.c: 177:         setMotorPWM(mR);
  7698   004358  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  7699   00435C  EC16  F01A         	call	_setMotorPWM	;wreg free
  7700   004360                     
  7701                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7702   004360  0E0B               	movlw	11
  7703   004362  6E16               	movwf	??_fullSpeedBack^0,c
  7704   004364  0E62               	movlw	98
  7705   004366                     u6187:
  7706   004366  2EE8               	decfsz	wreg,f,c
  7707   004368  D7FE               	bra	u6187
  7708   00436A  2E16               	decfsz	??_fullSpeedBack^0,f,c
  7709   00436C  D7FC               	bra	u6187
  7710   00436E  D000               	nop2	
  7711   004370                     
  7712                           ;dc_motor.c: 181:     }
  7713   004370  4A17               	infsnz	fullSpeedBack@power^0,f,c
  7714   004372  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  7715   004374  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  7716   004376  EFC6  F021         	goto	u5391
  7717   00437A  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  7718   00437C  E109               	bnz	u5390
  7719   00437E  0E33               	movlw	51
  7720   004380  5C17               	subwf	fullSpeedBack@power^0,w,c
  7721   004382  A0D8               	btfss	status,0,c
  7722   004384  EFC6  F021         	goto	u5391
  7723   004388  EFC8  F021         	goto	u5390
  7724   00438C                     u5391:
  7725   00438C  EF9E  F021         	goto	l6016
  7726   004390                     u5390:
  7727   004390  0012               	return		;funcret
  7728   004392                     __end_of_fullSpeedBack:
  7729                           	callstack 0
  7730                           
  7731 ;; *************** function _logAction *****************
  7732 ;; Defined at:
  7733 ;;		line 14 in file "return_func.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  newAction       1    wreg     unsigned char 
  7736 ;;  newTime         4    1[COMRAM] long 
  7737 ;;  path_step       2    5[COMRAM] unsigned int 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  newAction       1    9[COMRAM] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7749 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7752 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;Total ram usage:        9 bytes
  7754 ;; Hardware stack levels used: 1
  7755 ;; Hardware stack levels required when called: 1
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_decision
  7760 ;;		_get16bitTMR0val
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text35
  7765   004470                     __ptext35:
  7766                           	callstack 0
  7767   004470                     _logAction:
  7768                           	callstack 28
  7769                           
  7770                           ;incstack = 0
  7771                           ;logAction@newAction stored from wreg
  7772   004470  6E0A               	movwf	logAction@newAction^0,c
  7773   004472                     
  7774                           ;return_func.c: 15:     if (path_step < 50) {
  7775   004472  5007               	movf	(logAction@path_step+1)^0,w,c
  7776   004474  E107               	bnz	u4241
  7777   004476  0E32               	movlw	50
  7778   004478  5C06               	subwf	logAction@path_step^0,w,c
  7779   00447A  B0D8               	btfsc	status,0,c
  7780   00447C  EF42  F022         	goto	u4241
  7781   004480  EF44  F022         	goto	u4240
  7782   004484                     u4241:
  7783   004484  EF64  F022         	goto	l675
  7784   004488                     u4240:
  7785   004488                     
  7786                           ;return_func.c: 16:         action[path_step] = newAction;
  7787   004488  0E3C               	movlw	low _action
  7788   00448A  2406               	addwf	logAction@path_step^0,w,c
  7789   00448C  6ED9               	movwf	fsr2l,c
  7790   00448E  0E01               	movlw	high _action
  7791   004490  2007               	addwfc	(logAction@path_step+1)^0,w,c
  7792   004492  6EDA               	movwf	fsr2h,c
  7793   004494  C00A  FFDF         	movff	logAction@newAction,indf2
  7794                           
  7795                           ;return_func.c: 17:         time[path_step] = newTime;
  7796   004498  0E00               	movlw	low _time
  7797   00449A  6E08               	movwf	??_logAction^0,c
  7798   00449C  0E02               	movlw	high _time
  7799   00449E  6E09               	movwf	(??_logAction+1)^0,c
  7800   0044A0  90D8               	bcf	status,0,c
  7801   0044A2  3406               	rlcf	logAction@path_step^0,w,c
  7802   0044A4  6ED9               	movwf	fsr2l,c
  7803   0044A6  3407               	rlcf	(logAction@path_step+1)^0,w,c
  7804   0044A8  6EDA               	movwf	fsr2h,c
  7805   0044AA  90D8               	bcf	status,0,c
  7806   0044AC  36D9               	rlcf	fsr2l,f,c
  7807   0044AE  36DA               	rlcf	fsr2h,f,c
  7808   0044B0  5008               	movf	??_logAction^0,w,c
  7809   0044B2  26D9               	addwf	fsr2l,f,c
  7810   0044B4  5009               	movf	(??_logAction+1)^0,w,c
  7811   0044B6  22DA               	addwfc	fsr2h,f,c
  7812   0044B8  C002  FFDE         	movff	logAction@newTime,postinc2
  7813   0044BC  C003  FFDE         	movff	logAction@newTime+1,postinc2
  7814   0044C0  C004  FFDE         	movff	logAction@newTime+2,postinc2
  7815   0044C4  C005  FFDE         	movff	logAction@newTime+3,postinc2
  7816   0044C8                     l675:
  7817   0044C8  0012               	return		;funcret
  7818   0044CA                     __end_of_logAction:
  7819                           	callstack 0
  7820                           
  7821 ;; *************** function _color_click_init *****************
  7822 ;; Defined at:
  7823 ;;		line 9 in file "color.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;		None
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1    wreg      void 
  7830 ;; Registers used:
  7831 ;;		wreg, status,2, status,0, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7841 ;;Total ram usage:        1 bytes
  7842 ;; Hardware stack levels used: 1
  7843 ;; Hardware stack levels required when called: 4
  7844 ;; This function calls:
  7845 ;;		_I2C_2_Master_Init
  7846 ;;		_color_writetoaddr
  7847 ;; This function is called by:
  7848 ;;		_main
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           	psect	text36
  7853   004AA8                     __ptext36:
  7854                           	callstack 0
  7855   004AA8                     _color_click_init:
  7856                           	callstack 26
  7857   004AA8                     
  7858                           ;color.c: 12:     I2C_2_Master_Init();
  7859   004AA8  EC04  F026         	call	_I2C_2_Master_Init	;wreg free
  7860   004AAC                     
  7861                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  7862   004AAC  0E01               	movlw	1
  7863   004AAE  6E04               	movwf	color_writetoaddr@value^0,c
  7864   004AB0  0E00               	movlw	0
  7865   004AB2  EC40  F026         	call	_color_writetoaddr
  7866   004AB6                     
  7867                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7868   004AB6  0E3F               	movlw	63
  7869   004AB8  6E06               	movwf	??_color_click_init^0,c
  7870   004ABA  0E55               	movlw	85
  7871   004ABC                     u6197:
  7872   004ABC  2EE8               	decfsz	wreg,f,c
  7873   004ABE  D7FE               	bra	u6197
  7874   004AC0  2E06               	decfsz	??_color_click_init^0,f,c
  7875   004AC2  D7FC               	bra	u6197
  7876   004AC4  0000               	nop	
  7877   004AC6                     
  7878                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  7879   004AC6  0E03               	movlw	3
  7880   004AC8  6E04               	movwf	color_writetoaddr@value^0,c
  7881   004ACA  0E00               	movlw	0
  7882   004ACC  EC40  F026         	call	_color_writetoaddr
  7883   004AD0                     
  7884                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  7885   004AD0  0ED5               	movlw	213
  7886   004AD2  6E04               	movwf	color_writetoaddr@value^0,c
  7887   004AD4  0E01               	movlw	1
  7888   004AD6  EC40  F026         	call	_color_writetoaddr
  7889   004ADA  0012               	return		;funcret
  7890   004ADC                     __end_of_color_click_init:
  7891                           	callstack 0
  7892                           
  7893 ;; *************** function _color_writetoaddr *****************
  7894 ;; Defined at:
  7895 ;;		line 25 in file "color.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  address         1    wreg     unsigned char 
  7898 ;;  value           1    3[COMRAM] unsigned char 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  address         1    4[COMRAM] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7910 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7914 ;;Total ram usage:        2 bytes
  7915 ;; Hardware stack levels used: 1
  7916 ;; Hardware stack levels required when called: 3
  7917 ;; This function calls:
  7918 ;;		_I2C_2_Master_Start
  7919 ;;		_I2C_2_Master_Stop
  7920 ;;		_I2C_2_Master_Write
  7921 ;; This function is called by:
  7922 ;;		_color_click_init
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text37
  7927   004C80                     __ptext37:
  7928                           	callstack 0
  7929   004C80                     _color_writetoaddr:
  7930                           	callstack 26
  7931                           
  7932                           ;incstack = 0
  7933                           ;color_writetoaddr@address stored from wreg
  7934   004C80  6E05               	movwf	color_writetoaddr@address^0,c
  7935   004C82                     
  7936                           ;color.c: 26:     I2C_2_Master_Start();
  7937   004C82  EC92  F026         	call	_I2C_2_Master_Start	;wreg free
  7938                           
  7939                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  7940   004C86  0E52               	movlw	82
  7941   004C88  EC87  F026         	call	_I2C_2_Master_Write
  7942                           
  7943                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  7944   004C8C  5005               	movf	color_writetoaddr@address^0,w,c
  7945   004C8E  0980               	iorlw	128
  7946   004C90  EC87  F026         	call	_I2C_2_Master_Write
  7947                           
  7948                           ;color.c: 29:     I2C_2_Master_Write(value);
  7949   004C94  5004               	movf	color_writetoaddr@value^0,w,c
  7950   004C96  EC87  F026         	call	_I2C_2_Master_Write
  7951                           
  7952                           ;color.c: 30:     I2C_2_Master_Stop();
  7953   004C9A  EC8D  F026         	call	_I2C_2_Master_Stop	;wreg free
  7954   004C9E  0012               	return		;funcret
  7955   004CA0                     __end_of_color_writetoaddr:
  7956                           	callstack 0
  7957                           
  7958 ;; *************** function _I2C_2_Master_Init *****************
  7959 ;; Defined at:
  7960 ;;		line 4 in file "i2c.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, status,2
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7978 ;;Total ram usage:        0 bytes
  7979 ;; Hardware stack levels used: 1
  7980 ;; Hardware stack levels required when called: 1
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_color_click_init
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text38
  7989   004C08                     __ptext38:
  7990                           	callstack 0
  7991   004C08                     _I2C_2_Master_Init:
  7992                           	callstack 28
  7993   004C08                     
  7994                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7995   004C08  010E               	movlb	14	; () banked
  7996   004C0A  51D9               	movf	217,w,b	;volatile
  7997   004C0C  0BF0               	andlw	-16
  7998   004C0E  0908               	iorlw	8
  7999   004C10  6FD9               	movwf	217,b	;volatile
  8000   004C12                     
  8001                           ; BSR set to: 14
  8002                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8003   004C12  8BD9               	bsf	217,5,b	;volatile
  8004                           
  8005                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8006   004C14  0E9F               	movlw	159
  8007   004C16  6FD6               	movwf	214,b	;volatile
  8008   004C18                     
  8009                           ; BSR set to: 14
  8010                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8011   004C18  8A84               	bsf	132,5,c	;volatile
  8012   004C1A                     
  8013                           ; BSR set to: 14
  8014                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8015   004C1A  8C84               	bsf	132,6,c	;volatile
  8016   004C1C                     
  8017                           ; BSR set to: 14
  8018                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8019   004C1C  9BA7               	bcf	167,5,b	;volatile
  8020   004C1E                     
  8021                           ; BSR set to: 14
  8022                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8023   004C1E  9DA7               	bcf	167,6,b	;volatile
  8024                           
  8025                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8026   004C20  0E1D               	movlw	29
  8027   004C22  6F1D               	movwf	29,b	;volatile
  8028                           
  8029                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8030   004C24  0E1E               	movlw	30
  8031   004C26  6F1C               	movwf	28,b	;volatile
  8032                           
  8033                           ;i2c.c: 18:   RD5PPS=0x1C;
  8034   004C28  0E1C               	movlw	28
  8035   004C2A  6F6F               	movwf	111,b	;volatile
  8036                           
  8037                           ;i2c.c: 19:   RD6PPS=0x1B;
  8038   004C2C  0E1B               	movlw	27
  8039   004C2E  6F70               	movwf	112,b	;volatile
  8040   004C30                     
  8041                           ; BSR set to: 14
  8042   004C30  0012               	return		;funcret
  8043   004C32                     __end_of_I2C_2_Master_Init:
  8044                           	callstack 0
  8045                           
  8046 ;; *************** function _calibration_turning *****************
  8047 ;; Defined at:
  8048 ;;		line 103 in file "calibration.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  mL              1   81[COMRAM] PTR struct DC_motor
  8051 ;;		 -> motorL(9), 
  8052 ;;  mR              1   82[COMRAM] PTR struct DC_motor
  8053 ;;		 -> motorR(9), 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  i               2    5[BANK0 ] int 
  8056 ;;  factor          4    7[BANK0 ] float 
  8057 ;;  adjustment      4    0[BANK0 ] float 
  8058 ;;  exitLoop        1    4[BANK0 ] unsigned char 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  2   81[COMRAM] unsigned int 
  8061 ;; Registers used:
  8062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8069 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8070 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8071 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8072 ;;Total ram usage:       15 bytes
  8073 ;; Hardware stack levels used: 1
  8074 ;; Hardware stack levels required when called: 5
  8075 ;; This function calls:
  8076 ;;		___fladd
  8077 ;;		___fltol
  8078 ;;		_right90
  8079 ;; This function is called by:
  8080 ;;		_main
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           	psect	text39
  8085   002FC6                     __ptext39:
  8086                           	callstack 0
  8087   002FC6                     _calibration_turning:
  8088                           	callstack 25
  8089   002FC6                     
  8090                           ;calibration.c: 104:     float factor = 0.9;
  8091   002FC6  0E66               	movlw	102
  8092   002FC8  0100               	movlb	0	; () banked
  8093   002FCA  6F67               	movwf	calibration_turning@factor& (0+255),b
  8094   002FCC  0E66               	movlw	102
  8095   002FCE  6F68               	movwf	(calibration_turning@factor+1)& (0+255),b
  8096   002FD0  0E66               	movlw	102
  8097   002FD2  6F69               	movwf	(calibration_turning@factor+2)& (0+255),b
  8098   002FD4  0E3F               	movlw	63
  8099   002FD6  6F6A               	movwf	(calibration_turning@factor+3)& (0+255),b
  8100                           
  8101                           ;calibration.c: 105:     float adjustment = 0.05;
  8102   002FD8  0ECD               	movlw	205
  8103   002FDA  6F60               	movwf	calibration_turning@adjustment& (0+255),b
  8104   002FDC  0ECC               	movlw	204
  8105   002FDE  6F61               	movwf	(calibration_turning@adjustment+1)& (0+255),b
  8106   002FE0  0E4C               	movlw	76
  8107   002FE2  6F62               	movwf	(calibration_turning@adjustment+2)& (0+255),b
  8108   002FE4  0E3D               	movlw	61
  8109   002FE6  6F63               	movwf	(calibration_turning@adjustment+3)& (0+255),b
  8110                           
  8111                           ;calibration.c: 108:     unsigned char exitLoop = 0;
  8112   002FE8  0E00               	movlw	0
  8113   002FEA  6F64               	movwf	calibration_turning@exitLoop& (0+255),b
  8114                           
  8115                           ;calibration.c: 110:     while(!exitLoop){
  8116   002FEC  EF8A  F018         	goto	l6568
  8117   002FF0                     l793:
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;calibration.c: 112:         if (PORTFbits.RF2 == 0){
  8121   002FF0  B48E               	btfsc	142,2,c	;volatile
  8122   002FF2  EFFD  F017         	goto	u5771
  8123   002FF6  EFFF  F017         	goto	u5770
  8124   002FFA                     u5771:
  8125   002FFA  EF2C  F018         	goto	l6546
  8126   002FFE                     u5770:
  8127   002FFE                     
  8128                           ; BSR set to: 0
  8129                           ;calibration.c: 113:             _delay((unsigned long)((200)*(64000000/4000.0)));
  8130   002FFE  0E11               	movlw	17
  8131   003000  6E55               	movwf	(??_calibration_turning+1)^0,c
  8132   003002  0E3C               	movlw	60
  8133   003004  6E54               	movwf	??_calibration_turning^0,c
  8134   003006  0ECB               	movlw	203
  8135   003008                     u6207:
  8136   003008  2EE8               	decfsz	wreg,f,c
  8137   00300A  D7FE               	bra	u6207
  8138   00300C  2E54               	decfsz	??_calibration_turning^0,f,c
  8139   00300E  D7FC               	bra	u6207
  8140   003010  2E55               	decfsz	(??_calibration_turning+1)^0,f,c
  8141   003012  D7FA               	bra	u6207
  8142   003014  0000               	nop	
  8143   003016                     
  8144                           ;calibration.c: 114:             factor += adjustment;
  8145   003016  C067  F002         	movff	calibration_turning@factor,___fladd@b
  8146   00301A  C068  F003         	movff	calibration_turning@factor+1,___fladd@b+1
  8147   00301E  C069  F004         	movff	calibration_turning@factor+2,___fladd@b+2
  8148   003022  C06A  F005         	movff	calibration_turning@factor+3,___fladd@b+3
  8149   003026  C060  F006         	movff	calibration_turning@adjustment,___fladd@a
  8150   00302A  C061  F007         	movff	calibration_turning@adjustment+1,___fladd@a+1
  8151   00302E  C062  F008         	movff	calibration_turning@adjustment+2,___fladd@a+2
  8152   003032  C063  F009         	movff	calibration_turning@adjustment+3,___fladd@a+3
  8153   003036  EC2C  F00B         	call	___fladd	;wreg free
  8154   00303A  C002  F067         	movff	?___fladd,calibration_turning@factor
  8155   00303E  C003  F068         	movff	?___fladd+1,calibration_turning@factor+1
  8156   003042  C004  F069         	movff	?___fladd+2,calibration_turning@factor+2
  8157   003046  C005  F06A         	movff	?___fladd+3,calibration_turning@factor+3
  8158   00304A                     l795:
  8159   00304A  A48E               	btfss	142,2,c	;volatile
  8160   00304C  EF2A  F018         	goto	u5781
  8161   003050  EF2C  F018         	goto	u5780
  8162   003054                     u5781:
  8163   003054  EF25  F018         	goto	l795
  8164   003058                     u5780:
  8165   003058                     l6546:
  8166                           
  8167                           ;calibration.c: 121:          for(int i = 0; i < 4; i++) {
  8168   003058  0E00               	movlw	0
  8169   00305A  0100               	movlb	0	; () banked
  8170   00305C  6F66               	movwf	(calibration_turning@i+1)& (0+255),b
  8171   00305E  0E00               	movlw	0
  8172   003060  6F65               	movwf	calibration_turning@i& (0+255),b
  8173   003062                     l6552:
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;calibration.c: 122:              right90(mL, mR, factor);
  8177   003062  C052  F04C         	movff	calibration_turning@mL,right90@mL
  8178   003066  C053  F04D         	movff	calibration_turning@mR,right90@mR
  8179   00306A  C067  F042         	movff	calibration_turning@factor,___fltol@f1
  8180   00306E  C068  F043         	movff	calibration_turning@factor+1,___fltol@f1+1
  8181   003072  C069  F044         	movff	calibration_turning@factor+2,___fltol@f1+2
  8182   003076  C06A  F045         	movff	calibration_turning@factor+3,___fltol@f1+3
  8183   00307A  ECD7  F01B         	call	___fltol	;wreg free
  8184   00307E  C042  F04E         	movff	?___fltol,right90@factor
  8185   003082  C043  F04F         	movff	?___fltol+1,right90@factor+1
  8186   003086  ECCD  F023         	call	_right90	;wreg free
  8187   00308A                     
  8188                           ;calibration.c: 123:              _delay((unsigned long)((300)*(64000000/4000.0)));
  8189   00308A  0E19               	movlw	25
  8190   00308C  6E55               	movwf	(??_calibration_turning+1)^0,c
  8191   00308E  0E5A               	movlw	90
  8192   003090  6E54               	movwf	??_calibration_turning^0,c
  8193   003092  0EB2               	movlw	178
  8194   003094                     u6217:
  8195   003094  2EE8               	decfsz	wreg,f,c
  8196   003096  D7FE               	bra	u6217
  8197   003098  2E54               	decfsz	??_calibration_turning^0,f,c
  8198   00309A  D7FC               	bra	u6217
  8199   00309C  2E55               	decfsz	(??_calibration_turning+1)^0,f,c
  8200   00309E  D7FA               	bra	u6217
  8201   0030A0                     
  8202                           ;calibration.c: 124:             }
  8203   0030A0  0100               	movlb	0	; () banked
  8204   0030A2  4B65               	infsnz	calibration_turning@i& (0+255),f,b
  8205   0030A4  2B66               	incf	(calibration_turning@i+1)& (0+255),f,b
  8206   0030A6                     
  8207                           ; BSR set to: 0
  8208   0030A6  BF66               	btfsc	(calibration_turning@i+1)& (0+255),7,b
  8209   0030A8  EF5F  F018         	goto	u5791
  8210   0030AC  5166               	movf	(calibration_turning@i+1)& (0+255),w,b
  8211   0030AE  E109               	bnz	u5790
  8212   0030B0  0E04               	movlw	4
  8213   0030B2  5D65               	subwf	calibration_turning@i& (0+255),w,b
  8214   0030B4  A0D8               	btfss	status,0,c
  8215   0030B6  EF5F  F018         	goto	u5791
  8216   0030BA  EF61  F018         	goto	u5790
  8217   0030BE                     u5791:
  8218   0030BE  EF31  F018         	goto	l6552
  8219   0030C2                     u5790:
  8220   0030C2                     
  8221                           ; BSR set to: 0
  8222                           ;calibration.c: 125:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  8223   0030C2  0E52               	movlw	82
  8224   0030C4  6E55               	movwf	(??_calibration_turning+1)^0,c
  8225   0030C6  0E2B               	movlw	43
  8226   0030C8  6E54               	movwf	??_calibration_turning^0,c
  8227   0030CA  0E00               	movlw	0
  8228   0030CC                     u6227:
  8229   0030CC  2EE8               	decfsz	wreg,f,c
  8230   0030CE  D7FE               	bra	u6227
  8231   0030D0  2E54               	decfsz	??_calibration_turning^0,f,c
  8232   0030D2  D7FC               	bra	u6227
  8233   0030D4  2E55               	decfsz	(??_calibration_turning+1)^0,f,c
  8234   0030D6  D7FA               	bra	u6227
  8235   0030D8  D000               	nop2	
  8236   0030DA                     
  8237                           ;calibration.c: 128:         if (PORTFbits.RF3 == 0){
  8238   0030DA  B68E               	btfsc	142,3,c	;volatile
  8239   0030DC  EF72  F018         	goto	u5801
  8240   0030E0  EF74  F018         	goto	u5800
  8241   0030E4                     u5801:
  8242   0030E4  EF8A  F018         	goto	l6568
  8243   0030E8                     u5800:
  8244   0030E8                     
  8245                           ;calibration.c: 129:             _delay((unsigned long)((200)*(64000000/4000.0)));
  8246   0030E8  0E11               	movlw	17
  8247   0030EA  6E55               	movwf	(??_calibration_turning+1)^0,c
  8248   0030EC  0E3C               	movlw	60
  8249   0030EE  6E54               	movwf	??_calibration_turning^0,c
  8250   0030F0  0ECB               	movlw	203
  8251   0030F2                     u6237:
  8252   0030F2  2EE8               	decfsz	wreg,f,c
  8253   0030F4  D7FE               	bra	u6237
  8254   0030F6  2E54               	decfsz	??_calibration_turning^0,f,c
  8255   0030F8  D7FC               	bra	u6237
  8256   0030FA  2E55               	decfsz	(??_calibration_turning+1)^0,f,c
  8257   0030FC  D7FA               	bra	u6237
  8258   0030FE  0000               	nop	
  8259   003100                     
  8260                           ;calibration.c: 130:             exitLoop = 1;
  8261   003100  0E01               	movlw	1
  8262   003102  0100               	movlb	0	; () banked
  8263   003104  6F64               	movwf	calibration_turning@exitLoop& (0+255),b
  8264   003106                     l801:
  8265   003106  A68E               	btfss	142,3,c	;volatile
  8266   003108  EF88  F018         	goto	u5811
  8267   00310C  EF8A  F018         	goto	u5810
  8268   003110                     u5811:
  8269   003110  EF83  F018         	goto	l801
  8270   003114                     u5810:
  8271   003114                     l6568:
  8272                           
  8273                           ;calibration.c: 110:     while(!exitLoop){
  8274   003114  0100               	movlb	0	; () banked
  8275   003116  5164               	movf	calibration_turning@exitLoop& (0+255),w,b
  8276   003118  B4D8               	btfsc	status,2,c
  8277   00311A  EF91  F018         	goto	u5821
  8278   00311E  EF93  F018         	goto	u5820
  8279   003122                     u5821:
  8280   003122  EFF8  F017         	goto	l793
  8281   003126                     u5820:
  8282   003126                     
  8283                           ; BSR set to: 0
  8284                           ;calibration.c: 139:     return (unsigned int)(factor);
  8285   003126  C067  F042         	movff	calibration_turning@factor,___fltol@f1
  8286   00312A  C068  F043         	movff	calibration_turning@factor+1,___fltol@f1+1
  8287   00312E  C069  F044         	movff	calibration_turning@factor+2,___fltol@f1+2
  8288   003132  C06A  F045         	movff	calibration_turning@factor+3,___fltol@f1+3
  8289   003136  ECD7  F01B         	call	___fltol	;wreg free
  8290   00313A  C042  F052         	movff	?___fltol,?_calibration_turning
  8291   00313E  C043  F053         	movff	?___fltol+1,?_calibration_turning+1
  8292   003142  0012               	return		;funcret
  8293   003144                     __end_of_calibration_turning:
  8294                           	callstack 0
  8295                           
  8296 ;; *************** function _right90 *****************
  8297 ;; Defined at:
  8298 ;;		line 193 in file "dc_motor.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  8301 ;;		 -> motorL(9), 
  8302 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  8303 ;;		 -> motorR(9), 
  8304 ;;  factor          2   77[COMRAM] unsigned int 
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;  delay_after_    2   79[COMRAM] unsigned int 
  8307 ;;  delay           2    0        unsigned int 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8320 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8321 ;;Total ram usage:        6 bytes
  8322 ;; Hardware stack levels used: 1
  8323 ;; Hardware stack levels required when called: 4
  8324 ;; This function calls:
  8325 ;;		___wmul
  8326 ;;		_customDelayMs
  8327 ;;		_stop
  8328 ;;		_turnRight
  8329 ;; This function is called by:
  8330 ;;		_moveRed
  8331 ;;		_moveYellow
  8332 ;;		_reverseTurn
  8333 ;;		_calibration_turning
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text40
  8338   00479A                     __ptext40:
  8339                           	callstack 0
  8340   00479A                     _right90:
  8341                           	callstack 24
  8342   00479A                     
  8343                           ;dc_motor.c: 196:     unsigned int delay_after_calibration = delay * factor;
  8344   00479A  0E01               	movlw	1
  8345   00479C  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8346   00479E  0E22               	movlw	34
  8347   0047A0  6E02               	movwf	___wmul@multiplier^0,c
  8348   0047A2  C04E  F004         	movff	right90@factor,___wmul@multiplicand
  8349   0047A6  C04F  F005         	movff	right90@factor+1,___wmul@multiplicand+1
  8350   0047AA  EC2D  F026         	call	___wmul	;wreg free
  8351   0047AE  C002  F050         	movff	?___wmul,right90@delay_after_calibration
  8352   0047B2  C003  F051         	movff	?___wmul+1,right90@delay_after_calibration+1
  8353   0047B6                     
  8354                           ;dc_motor.c: 197:     turnRight(mL,mR);
  8355   0047B6  C04C  F014         	movff	right90@mL,turnRight@mL
  8356   0047BA  C04D  F015         	movff	right90@mR,turnRight@mR
  8357   0047BE  EC4F  F021         	call	_turnRight	;wreg free
  8358   0047C2                     
  8359                           ;dc_motor.c: 198:     customDelayMs(delay_after_calibration);
  8360   0047C2  C050  F002         	movff	right90@delay_after_calibration,customDelayMs@milliseconds
  8361   0047C6  C051  F003         	movff	right90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8362   0047CA  EC38  F025         	call	_customDelayMs	;wreg free
  8363   0047CE                     
  8364                           ;dc_motor.c: 199:     stop(mL,mR);
  8365   0047CE  C04C  F014         	movff	right90@mL,stop@mL
  8366   0047D2  C04D  F015         	movff	right90@mR,stop@mR
  8367   0047D6  ECC9  F020         	call	_stop	;wreg free
  8368   0047DA  0012               	return		;funcret
  8369   0047DC                     __end_of_right90:
  8370                           	callstack 0
  8371                           
  8372 ;; *************** function _turnRight *****************
  8373 ;; Defined at:
  8374 ;;		line 125 in file "dc_motor.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8377 ;;		 -> motorL(9), 
  8378 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8379 ;;		 -> motorR(9), 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  i               2   22[COMRAM] unsigned int 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8394 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8395 ;;Total ram usage:        5 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 3
  8398 ;; This function calls:
  8399 ;;		_setMotorPWM
  8400 ;; This function is called by:
  8401 ;;		_right90
  8402 ;;		_right135
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text41
  8407   00429E                     __ptext41:
  8408                           	callstack 0
  8409   00429E                     _turnRight:
  8410                           	callstack 24
  8411   00429E                     
  8412                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  8413   00429E  5014               	movf	turnRight@mL^0,w,c
  8414   0042A0  6ED9               	movwf	fsr2l,c
  8415   0042A2  6ADA               	clrf	fsr2h,c
  8416   0042A4  0E01               	movlw	1
  8417   0042A6  26D9               	addwf	fsr2l,f,c
  8418   0042A8  0E01               	movlw	1
  8419   0042AA  6EDF               	movwf	indf2,c
  8420                           
  8421                           ;dc_motor.c: 129:     mR->direction = 0;
  8422   0042AC  5015               	movf	turnRight@mR^0,w,c
  8423   0042AE  6ED9               	movwf	fsr2l,c
  8424   0042B0  6ADA               	clrf	fsr2h,c
  8425   0042B2  0E01               	movlw	1
  8426   0042B4  26D9               	addwf	fsr2l,f,c
  8427   0042B6  6ADF               	clrf	indf2,c
  8428   0042B8                     
  8429                           ;dc_motor.c: 131:     setMotorPWM(mL);
  8430   0042B8  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  8431   0042BC  EC16  F01A         	call	_setMotorPWM	;wreg free
  8432   0042C0                     
  8433                           ;dc_motor.c: 132:     setMotorPWM(mR);
  8434   0042C0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  8435   0042C4  EC16  F01A         	call	_setMotorPWM	;wreg free
  8436   0042C8                     
  8437                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  8438   0042C8  0E00               	movlw	0
  8439   0042CA  6E18               	movwf	(turnRight@i+1)^0,c
  8440   0042CC  0E00               	movlw	0
  8441   0042CE  6E17               	movwf	turnRight@i^0,c
  8442   0042D0                     l5996:
  8443                           
  8444                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  8445   0042D0  5014               	movf	turnRight@mL^0,w,c
  8446   0042D2  6ED9               	movwf	fsr2l,c
  8447   0042D4  6ADA               	clrf	fsr2h,c
  8448   0042D6  2ADF               	incf	indf2,f,c
  8449                           
  8450                           ;dc_motor.c: 136:         mR->power++;
  8451   0042D8  5015               	movf	turnRight@mR^0,w,c
  8452   0042DA  6ED9               	movwf	fsr2l,c
  8453   0042DC  6ADA               	clrf	fsr2h,c
  8454   0042DE  2ADF               	incf	indf2,f,c
  8455   0042E0                     
  8456                           ;dc_motor.c: 137:         setMotorPWM(mL);
  8457   0042E0  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  8458   0042E4  EC16  F01A         	call	_setMotorPWM	;wreg free
  8459   0042E8                     
  8460                           ;dc_motor.c: 138:         setMotorPWM(mR);
  8461   0042E8  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  8462   0042EC  EC16  F01A         	call	_setMotorPWM	;wreg free
  8463   0042F0                     
  8464                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8465   0042F0  0E0B               	movlw	11
  8466   0042F2  6E16               	movwf	??_turnRight^0,c
  8467   0042F4  0E62               	movlw	98
  8468   0042F6                     u6247:
  8469   0042F6  2EE8               	decfsz	wreg,f,c
  8470   0042F8  D7FE               	bra	u6247
  8471   0042FA  2E16               	decfsz	??_turnRight^0,f,c
  8472   0042FC  D7FC               	bra	u6247
  8473   0042FE  D000               	nop2	
  8474   004300                     
  8475                           ;dc_motor.c: 140:     }
  8476   004300  4A17               	infsnz	turnRight@i^0,f,c
  8477   004302  2A18               	incf	(turnRight@i+1)^0,f,c
  8478   004304  5018               	movf	(turnRight@i+1)^0,w,c
  8479   004306  E109               	bnz	u5380
  8480   004308  0E32               	movlw	50
  8481   00430A  5C17               	subwf	turnRight@i^0,w,c
  8482   00430C  A0D8               	btfss	status,0,c
  8483   00430E  EF8B  F021         	goto	u5381
  8484   004312  EF8D  F021         	goto	u5380
  8485   004316                     u5381:
  8486   004316  EF68  F021         	goto	l5996
  8487   00431A                     u5380:
  8488   00431A  0012               	return		;funcret
  8489   00431C                     __end_of_turnRight:
  8490                           	callstack 0
  8491                           
  8492 ;; *************** function _stop *****************
  8493 ;; Defined at:
  8494 ;;		line 88 in file "dc_motor.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8497 ;;		 -> motorL(9), 
  8498 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8499 ;;		 -> motorR(9), 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      void 
  8504 ;; Registers used:
  8505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8514 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8515 ;;Total ram usage:        3 bytes
  8516 ;; Hardware stack levels used: 1
  8517 ;; Hardware stack levels required when called: 3
  8518 ;; This function calls:
  8519 ;;		_setMotorPWM
  8520 ;; This function is called by:
  8521 ;;		_main
  8522 ;;		_right90
  8523 ;;		_left90
  8524 ;;		_turn180
  8525 ;;		_right135
  8526 ;;		_left135
  8527 ;;		_backHalf
  8528 ;;		_backOneAndHalf
  8529 ;;		_reverseStraight
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text42
  8534   004192                     __ptext42:
  8535                           	callstack 0
  8536   004192                     _stop:
  8537                           	callstack 27
  8538   004192                     
  8539                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8540   004192  EFF9  F020         	goto	l5956
  8541   004196                     l5942:
  8542                           
  8543                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8544   004196  5014               	movf	stop@mL^0,w,c
  8545   004198  6ED9               	movwf	fsr2l,c
  8546   00419A  6ADA               	clrf	fsr2h,c
  8547   00419C  50DF               	movf	indf2,w,c
  8548   00419E  B4D8               	btfsc	status,2,c
  8549   0041A0  EFD4  F020         	goto	u5331
  8550   0041A4  EFD6  F020         	goto	u5330
  8551   0041A8                     u5331:
  8552   0041A8  EFDA  F020         	goto	l5946
  8553   0041AC                     u5330:
  8554   0041AC  5014               	movf	stop@mL^0,w,c
  8555   0041AE  6ED9               	movwf	fsr2l,c
  8556   0041B0  6ADA               	clrf	fsr2h,c
  8557   0041B2  06DF               	decf	indf2,f,c
  8558   0041B4                     l5946:
  8559                           
  8560                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8561   0041B4  5015               	movf	stop@mR^0,w,c
  8562   0041B6  6ED9               	movwf	fsr2l,c
  8563   0041B8  6ADA               	clrf	fsr2h,c
  8564   0041BA  50DF               	movf	indf2,w,c
  8565   0041BC  B4D8               	btfsc	status,2,c
  8566   0041BE  EFE3  F020         	goto	u5341
  8567   0041C2  EFE5  F020         	goto	u5340
  8568   0041C6                     u5341:
  8569   0041C6  EFE9  F020         	goto	l5950
  8570   0041CA                     u5340:
  8571   0041CA  5015               	movf	stop@mR^0,w,c
  8572   0041CC  6ED9               	movwf	fsr2l,c
  8573   0041CE  6ADA               	clrf	fsr2h,c
  8574   0041D0  06DF               	decf	indf2,f,c
  8575   0041D2                     l5950:
  8576                           
  8577                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8578   0041D2  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8579   0041D6  EC16  F01A         	call	_setMotorPWM	;wreg free
  8580   0041DA                     
  8581                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8582   0041DA  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8583   0041DE  EC16  F01A         	call	_setMotorPWM	;wreg free
  8584   0041E2                     
  8585                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8586   0041E2  0E0B               	movlw	11
  8587   0041E4  6E16               	movwf	??_stop^0,c
  8588   0041E6  0E62               	movlw	98
  8589   0041E8                     u6257:
  8590   0041E8  2EE8               	decfsz	wreg,f,c
  8591   0041EA  D7FE               	bra	u6257
  8592   0041EC  2E16               	decfsz	??_stop^0,f,c
  8593   0041EE  D7FC               	bra	u6257
  8594   0041F0  D000               	nop2	
  8595   0041F2                     l5956:
  8596                           
  8597                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8598   0041F2  5014               	movf	stop@mL^0,w,c
  8599   0041F4  6ED9               	movwf	fsr2l,c
  8600   0041F6  6ADA               	clrf	fsr2h,c
  8601   0041F8  50DF               	movf	indf2,w,c
  8602   0041FA  A4D8               	btfss	status,2,c
  8603   0041FC  EF02  F021         	goto	u5351
  8604   004200  EF04  F021         	goto	u5350
  8605   004204                     u5351:
  8606   004204  EFCB  F020         	goto	l5942
  8607   004208                     u5350:
  8608   004208  5015               	movf	stop@mR^0,w,c
  8609   00420A  6ED9               	movwf	fsr2l,c
  8610   00420C  6ADA               	clrf	fsr2h,c
  8611   00420E  50DF               	movf	indf2,w,c
  8612   004210  A4D8               	btfss	status,2,c
  8613   004212  EF0D  F021         	goto	u5361
  8614   004216  EF0F  F021         	goto	u5360
  8615   00421A                     u5361:
  8616   00421A  EFCB  F020         	goto	l5942
  8617   00421E                     u5360:
  8618   00421E  0012               	return		;funcret
  8619   004220                     __end_of_stop:
  8620                           	callstack 0
  8621                           
  8622 ;; *************** function _setMotorPWM *****************
  8623 ;; Defined at:
  8624 ;;		line 65 in file "dc_motor.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8627 ;;		 -> motorR(9), motorL(9), 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  negDuty         1   18[COMRAM] unsigned char 
  8630 ;;  posDuty         1   17[COMRAM] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8640 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8643 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8644 ;;Total ram usage:        5 bytes
  8645 ;; Hardware stack levels used: 1
  8646 ;; Hardware stack levels required when called: 2
  8647 ;; This function calls:
  8648 ;;		___lwdiv
  8649 ;;		___wmul
  8650 ;; This function is called by:
  8651 ;;		_stop
  8652 ;;		_turnLeft
  8653 ;;		_turnRight
  8654 ;;		_fullSpeedAhead
  8655 ;;		_fullSpeedBack
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	text43
  8660   00342C                     __ptext43:
  8661                           	callstack 0
  8662   00342C                     _setMotorPWM:
  8663                           	callstack 27
  8664   00342C                     
  8665                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8666   00342C  500F               	movf	setMotorPWM@m^0,w,c
  8667   00342E  6ED9               	movwf	fsr2l,c
  8668   003430  6ADA               	clrf	fsr2h,c
  8669   003432  0E02               	movlw	2
  8670   003434  26D9               	addwf	fsr2l,f,c
  8671   003436  50DF               	movf	indf2,w,c
  8672   003438  B4D8               	btfsc	status,2,c
  8673   00343A  EF21  F01A         	goto	u5241
  8674   00343E  EF23  F01A         	goto	u5240
  8675   003442                     u5241:
  8676   003442  EF53  F01A         	goto	l5870
  8677   003446                     u5240:
  8678   003446                     
  8679                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8680   003446  500F               	movf	setMotorPWM@m^0,w,c
  8681   003448  6ED9               	movwf	fsr2l,c
  8682   00344A  6ADA               	clrf	fsr2h,c
  8683   00344C  50DF               	movf	indf2,w,c
  8684   00344E  6E10               	movwf	??_setMotorPWM^0,c
  8685   003450  5010               	movf	??_setMotorPWM^0,w,c
  8686   003452  6E02               	movwf	___wmul@multiplier^0,c
  8687   003454  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8688   003456  500F               	movf	setMotorPWM@m^0,w,c
  8689   003458  6ED9               	movwf	fsr2l,c
  8690   00345A  6ADA               	clrf	fsr2h,c
  8691   00345C  0E03               	movlw	3
  8692   00345E  26D9               	addwf	fsr2l,f,c
  8693   003460  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8694   003464  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8695   003468  EC2D  F026         	call	___wmul	;wreg free
  8696   00346C  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8697   003470  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8698   003474  0E00               	movlw	0
  8699   003476  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8700   003478  0E64               	movlw	100
  8701   00347A  6E0A               	movwf	___lwdiv@divisor^0,c
  8702   00347C  ECC9  F021         	call	___lwdiv	;wreg free
  8703   003480  500F               	movf	setMotorPWM@m^0,w,c
  8704   003482  6ED9               	movwf	fsr2l,c
  8705   003484  6ADA               	clrf	fsr2h,c
  8706   003486  0E03               	movlw	3
  8707   003488  26D9               	addwf	fsr2l,f,c
  8708   00348A  50DF               	movf	indf2,w,c
  8709   00348C  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8710   00348E  5008               	movf	?___lwdiv^0,w,c
  8711   003490  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8712   003492  6E12               	movwf	setMotorPWM@posDuty^0,c
  8713   003494                     
  8714                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8715   003494  500F               	movf	setMotorPWM@m^0,w,c
  8716   003496  6ED9               	movwf	fsr2l,c
  8717   003498  6ADA               	clrf	fsr2h,c
  8718   00349A  0E03               	movlw	3
  8719   00349C  26D9               	addwf	fsr2l,f,c
  8720   00349E  50DF               	movf	indf2,w,c
  8721   0034A0  6E13               	movwf	setMotorPWM@negDuty^0,c
  8722                           
  8723                           ;dc_motor.c: 72:     }
  8724   0034A2  EF74  F01A         	goto	l5874
  8725   0034A6                     l5870:
  8726                           
  8727                           ;dc_motor.c: 74:         posDuty=0;
  8728   0034A6  0E00               	movlw	0
  8729   0034A8  6E12               	movwf	setMotorPWM@posDuty^0,c
  8730   0034AA                     
  8731                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8732   0034AA  500F               	movf	setMotorPWM@m^0,w,c
  8733   0034AC  6ED9               	movwf	fsr2l,c
  8734   0034AE  6ADA               	clrf	fsr2h,c
  8735   0034B0  50DF               	movf	indf2,w,c
  8736   0034B2  6E10               	movwf	??_setMotorPWM^0,c
  8737   0034B4  5010               	movf	??_setMotorPWM^0,w,c
  8738   0034B6  6E02               	movwf	___wmul@multiplier^0,c
  8739   0034B8  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8740   0034BA  500F               	movf	setMotorPWM@m^0,w,c
  8741   0034BC  6ED9               	movwf	fsr2l,c
  8742   0034BE  6ADA               	clrf	fsr2h,c
  8743   0034C0  0E03               	movlw	3
  8744   0034C2  26D9               	addwf	fsr2l,f,c
  8745   0034C4  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8746   0034C8  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8747   0034CC  EC2D  F026         	call	___wmul	;wreg free
  8748   0034D0  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8749   0034D4  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8750   0034D8  0E00               	movlw	0
  8751   0034DA  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8752   0034DC  0E64               	movlw	100
  8753   0034DE  6E0A               	movwf	___lwdiv@divisor^0,c
  8754   0034E0  ECC9  F021         	call	___lwdiv	;wreg free
  8755   0034E4  5008               	movf	?___lwdiv^0,w,c
  8756   0034E6  6E13               	movwf	setMotorPWM@negDuty^0,c
  8757   0034E8                     l5874:
  8758                           
  8759                           ;dc_motor.c: 78:     if (m->direction) {
  8760   0034E8  500F               	movf	setMotorPWM@m^0,w,c
  8761   0034EA  6ED9               	movwf	fsr2l,c
  8762   0034EC  6ADA               	clrf	fsr2h,c
  8763   0034EE  0E01               	movlw	1
  8764   0034F0  26D9               	addwf	fsr2l,f,c
  8765   0034F2  50DF               	movf	indf2,w,c
  8766   0034F4  B4D8               	btfsc	status,2,c
  8767   0034F6  EF7F  F01A         	goto	u5251
  8768   0034FA  EF81  F01A         	goto	u5250
  8769   0034FE                     u5251:
  8770   0034FE  EFA1  F01A         	goto	l5878
  8771   003502                     u5250:
  8772   003502                     
  8773                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8774   003502  500F               	movf	setMotorPWM@m^0,w,c
  8775   003504  6ED9               	movwf	fsr2l,c
  8776   003506  6ADA               	clrf	fsr2h,c
  8777   003508  0E05               	movlw	5
  8778   00350A  26D9               	addwf	fsr2l,f,c
  8779   00350C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8780   003510  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8781   003514  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8782   003518  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8783   00351C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8784                           
  8785                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8786   003520  500F               	movf	setMotorPWM@m^0,w,c
  8787   003522  6ED9               	movwf	fsr2l,c
  8788   003524  6ADA               	clrf	fsr2h,c
  8789   003526  0E07               	movlw	7
  8790   003528  26D9               	addwf	fsr2l,f,c
  8791   00352A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8792   00352E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8793   003532  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8794   003536  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8795   00353A  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8796                           
  8797                           ;dc_motor.c: 81:     } else {
  8798   00353E  EFBF  F01A         	goto	l394
  8799   003542                     l5878:
  8800                           
  8801                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8802   003542  500F               	movf	setMotorPWM@m^0,w,c
  8803   003544  6ED9               	movwf	fsr2l,c
  8804   003546  6ADA               	clrf	fsr2h,c
  8805   003548  0E05               	movlw	5
  8806   00354A  26D9               	addwf	fsr2l,f,c
  8807   00354C  CFDE F010          	movff	postinc2,??_setMotorPWM
  8808   003550  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8809   003554  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8810   003558  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8811   00355C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8812                           
  8813                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8814   003560  500F               	movf	setMotorPWM@m^0,w,c
  8815   003562  6ED9               	movwf	fsr2l,c
  8816   003564  6ADA               	clrf	fsr2h,c
  8817   003566  0E07               	movlw	7
  8818   003568  26D9               	addwf	fsr2l,f,c
  8819   00356A  CFDE F010          	movff	postinc2,??_setMotorPWM
  8820   00356E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8821   003572  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8822   003576  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8823   00357A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8824   00357E                     l394:
  8825   00357E  0012               	return		;funcret
  8826   003580                     __end_of_setMotorPWM:
  8827                           	callstack 0
  8828                           
  8829 ;; *************** function ___lwdiv *****************
  8830 ;; Defined at:
  8831 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  dividend        2    7[COMRAM] unsigned int 
  8834 ;;  divisor         2    9[COMRAM] unsigned int 
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;  quotient        2   11[COMRAM] unsigned int 
  8837 ;;  counter         1   13[COMRAM] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  2    7[COMRAM] unsigned int 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8848 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8850 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8851 ;;Total ram usage:        7 bytes
  8852 ;; Hardware stack levels used: 1
  8853 ;; Hardware stack levels required when called: 1
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_setMotorPWM
  8858 ;;		_ADC2String
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           	psect	text44
  8863   004392                     __ptext44:
  8864                           	callstack 0
  8865   004392                     ___lwdiv:
  8866                           	callstack 27
  8867   004392  0E00               	movlw	0
  8868   004394  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8869   004396  0E00               	movlw	0
  8870   004398  6E0C               	movwf	___lwdiv@quotient^0,c
  8871   00439A  500A               	movf	___lwdiv@divisor^0,w,c
  8872   00439C  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8873   00439E  B4D8               	btfsc	status,2,c
  8874   0043A0  EFD4  F021         	goto	u2691
  8875   0043A4  EFD6  F021         	goto	u2690
  8876   0043A8                     u2691:
  8877   0043A8  EFFE  F021         	goto	l1305
  8878   0043AC                     u2690:
  8879   0043AC  0E01               	movlw	1
  8880   0043AE  6E0E               	movwf	___lwdiv@counter^0,c
  8881   0043B0  EFDE  F021         	goto	l3778
  8882   0043B4                     l3776:
  8883   0043B4  90D8               	bcf	status,0,c
  8884   0043B6  360A               	rlcf	___lwdiv@divisor^0,f,c
  8885   0043B8  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8886   0043BA  2A0E               	incf	___lwdiv@counter^0,f,c
  8887   0043BC                     l3778:
  8888   0043BC  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8889   0043BE  EFE3  F021         	goto	u2701
  8890   0043C2  EFE5  F021         	goto	u2700
  8891   0043C6                     u2701:
  8892   0043C6  EFDA  F021         	goto	l3776
  8893   0043CA                     u2700:
  8894   0043CA                     l3780:
  8895   0043CA  90D8               	bcf	status,0,c
  8896   0043CC  360C               	rlcf	___lwdiv@quotient^0,f,c
  8897   0043CE  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8898   0043D0  500A               	movf	___lwdiv@divisor^0,w,c
  8899   0043D2  5C08               	subwf	___lwdiv@dividend^0,w,c
  8900   0043D4  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8901   0043D6  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8902   0043D8  A0D8               	btfss	status,0,c
  8903   0043DA  EFF1  F021         	goto	u2711
  8904   0043DE  EFF3  F021         	goto	u2710
  8905   0043E2                     u2711:
  8906   0043E2  EFF8  F021         	goto	l3788
  8907   0043E6                     u2710:
  8908   0043E6  500A               	movf	___lwdiv@divisor^0,w,c
  8909   0043E8  5E08               	subwf	___lwdiv@dividend^0,f,c
  8910   0043EA  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8911   0043EC  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8912   0043EE  800C               	bsf	___lwdiv@quotient^0,0,c
  8913   0043F0                     l3788:
  8914   0043F0  90D8               	bcf	status,0,c
  8915   0043F2  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8916   0043F4  320A               	rrcf	___lwdiv@divisor^0,f,c
  8917   0043F6  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8918   0043F8  EFE5  F021         	goto	l3780
  8919   0043FC                     l1305:
  8920   0043FC  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8921   004400  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8922   004404  0012               	return		;funcret
  8923   004406                     __end_of___lwdiv:
  8924                           	callstack 0
  8925                           
  8926 ;; *************** function _customDelayMs *****************
  8927 ;; Defined at:
  8928 ;;		line 148 in file "calibration.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  milliseconds    2    1[COMRAM] unsigned int 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  i               2    4[COMRAM] unsigned int 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      void 
  8935 ;; Registers used:
  8936 ;;		wreg, status,2, status,0
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8942 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8945 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8946 ;;Total ram usage:        5 bytes
  8947 ;; Hardware stack levels used: 1
  8948 ;; Hardware stack levels required when called: 1
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_right90
  8953 ;;		_left90
  8954 ;;		_turn180
  8955 ;;		_right135
  8956 ;;		_left135
  8957 ;;		_reverseStraight
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text45
  8962   004A70                     __ptext45:
  8963                           	callstack 0
  8964   004A70                     _customDelayMs:
  8965                           	callstack 26
  8966   004A70                     
  8967                           ;calibration.c: 149:     for (unsigned int i = 0; i < milliseconds; i++) {
  8968   004A70  0E00               	movlw	0
  8969   004A72  6E06               	movwf	(customDelayMs@i+1)^0,c
  8970   004A74  0E00               	movlw	0
  8971   004A76  6E05               	movwf	customDelayMs@i^0,c
  8972   004A78  EF48  F025         	goto	l808
  8973   004A7C                     l4022:
  8974                           
  8975                           ;calibration.c: 150:         _delay((unsigned long)((1)*(64000000/4000.0)));
  8976   004A7C  0E15               	movlw	21
  8977   004A7E  6E04               	movwf	??_customDelayMs^0,c
  8978   004A80  0EC6               	movlw	198
  8979   004A82                     u6267:
  8980   004A82  2EE8               	decfsz	wreg,f,c
  8981   004A84  D7FE               	bra	u6267
  8982   004A86  2E04               	decfsz	??_customDelayMs^0,f,c
  8983   004A88  D7FC               	bra	u6267
  8984   004A8A  D000               	nop2	
  8985   004A8C                     
  8986                           ;calibration.c: 151:     }
  8987   004A8C  4A05               	infsnz	customDelayMs@i^0,f,c
  8988   004A8E  2A06               	incf	(customDelayMs@i+1)^0,f,c
  8989   004A90                     l808:
  8990   004A90  5002               	movf	customDelayMs@milliseconds^0,w,c
  8991   004A92  5C05               	subwf	customDelayMs@i^0,w,c
  8992   004A94  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  8993   004A96  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  8994   004A98  A0D8               	btfss	status,0,c
  8995   004A9A  EF51  F025         	goto	u3001
  8996   004A9E  EF53  F025         	goto	u3000
  8997   004AA2                     u3001:
  8998   004AA2  EF3E  F025         	goto	l4022
  8999   004AA6                     u3000:
  9000   004AA6  0012               	return		;funcret
  9001   004AA8                     __end_of_customDelayMs:
  9002                           	callstack 0
  9003                           
  9004 ;; *************** function ___fltol *****************
  9005 ;; Defined at:
  9006 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  f1              4   65[COMRAM] void 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  exp1            1   74[COMRAM] unsigned char 
  9011 ;;  sign1           1   73[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  4   65[COMRAM] long 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9023 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9024 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9025 ;;Total ram usage:       10 bytes
  9026 ;; Hardware stack levels used: 1
  9027 ;; Hardware stack levels required when called: 1
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;;		_convert_rgb2hue
  9032 ;;		_main
  9033 ;;		_fullSpeedAhead
  9034 ;;		_calibration_turning
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text46
  9039   0037AE                     __ptext46:
  9040                           	callstack 0
  9041   0037AE                     ___fltol:
  9042                           	callstack 26
  9043   0037AE  3444               	rlcf	(___fltol@f1+2)^0,w,c
  9044   0037B0  3445               	rlcf	(___fltol@f1+3)^0,w,c
  9045   0037B2  6E4B               	movwf	___fltol@exp1^0,c
  9046   0037B4  504B               	movf	___fltol@exp1^0,w,c
  9047   0037B6  A4D8               	btfss	status,2,c
  9048   0037B8  EFE0  F01B         	goto	u3601
  9049   0037BC  EFE2  F01B         	goto	u3600
  9050   0037C0                     u3601:
  9051   0037C0  EFEC  F01B         	goto	l4368
  9052   0037C4                     u3600:
  9053   0037C4                     l4364:
  9054   0037C4  0E00               	movlw	0
  9055   0037C6  6E42               	movwf	?___fltol^0,c
  9056   0037C8  0E00               	movlw	0
  9057   0037CA  6E43               	movwf	(?___fltol+1)^0,c
  9058   0037CC  0E00               	movlw	0
  9059   0037CE  6E44               	movwf	(?___fltol+2)^0,c
  9060   0037D0  0E00               	movlw	0
  9061   0037D2  6E45               	movwf	(?___fltol+3)^0,c
  9062   0037D4  EF59  F01C         	goto	l1111
  9063   0037D8                     l4368:
  9064   0037D8  C042  F046         	movff	___fltol@f1,??___fltol
  9065   0037DC  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  9066   0037E0  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  9067   0037E4  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  9068   0037E8  0E20               	movlw	32
  9069   0037EA  EFFC  F01B         	goto	u3610
  9070   0037EE                     u3615:
  9071   0037EE  90D8               	bcf	status,0,c
  9072   0037F0  3249               	rrcf	(??___fltol+3)^0,f,c
  9073   0037F2  3248               	rrcf	(??___fltol+2)^0,f,c
  9074   0037F4  3247               	rrcf	(??___fltol+1)^0,f,c
  9075   0037F6  3246               	rrcf	??___fltol^0,f,c
  9076   0037F8                     u3610:
  9077   0037F8  2EE8               	decfsz	wreg,f,c
  9078   0037FA  EFF7  F01B         	goto	u3615
  9079   0037FE  5046               	movf	??___fltol^0,w,c
  9080   003800  6E4A               	movwf	___fltol@sign1^0,c
  9081   003802  8E44               	bsf	(___fltol@f1+2)^0,7,c
  9082   003804  0EFF               	movlw	255
  9083   003806  1642               	andwf	___fltol@f1^0,f,c
  9084   003808  0EFF               	movlw	255
  9085   00380A  1643               	andwf	(___fltol@f1+1)^0,f,c
  9086   00380C  0EFF               	movlw	255
  9087   00380E  1644               	andwf	(___fltol@f1+2)^0,f,c
  9088   003810  0E00               	movlw	0
  9089   003812  1645               	andwf	(___fltol@f1+3)^0,f,c
  9090   003814  0E96               	movlw	150
  9091   003816  5E4B               	subwf	___fltol@exp1^0,f,c
  9092   003818  BE4B               	btfsc	___fltol@exp1^0,7,c
  9093   00381A  EF13  F01C         	goto	u3620
  9094   00381E  EF11  F01C         	goto	u3621
  9095   003822                     u3621:
  9096   003822  EF29  F01C         	goto	l4388
  9097   003826                     u3620:
  9098   003826  504B               	movf	___fltol@exp1^0,w,c
  9099   003828  0A80               	xorlw	128
  9100   00382A  0F97               	addlw	151
  9101   00382C  B0D8               	btfsc	status,0,c
  9102   00382E  EF1B  F01C         	goto	u3631
  9103   003832  EF1D  F01C         	goto	u3630
  9104   003836                     u3631:
  9105   003836  EF1F  F01C         	goto	l4384
  9106   00383A                     u3630:
  9107   00383A  EFE2  F01B         	goto	l4364
  9108   00383E                     l4384:
  9109   00383E  90D8               	bcf	status,0,c
  9110   003840  3245               	rrcf	(___fltol@f1+3)^0,f,c
  9111   003842  3244               	rrcf	(___fltol@f1+2)^0,f,c
  9112   003844  3243               	rrcf	(___fltol@f1+1)^0,f,c
  9113   003846  3242               	rrcf	___fltol@f1^0,f,c
  9114   003848  3E4B               	incfsz	___fltol@exp1^0,f,c
  9115   00384A  EF1F  F01C         	goto	l4384
  9116   00384E  EF41  F01C         	goto	l4398
  9117   003852                     l4388:
  9118   003852  0E1F               	movlw	31
  9119   003854  644B               	cpfsgt	___fltol@exp1^0,c
  9120   003856  EF2F  F01C         	goto	u3641
  9121   00385A  EF31  F01C         	goto	u3640
  9122   00385E                     u3641:
  9123   00385E  EF39  F01C         	goto	l4396
  9124   003862                     u3640:
  9125   003862  EFE2  F01B         	goto	l4364
  9126   003866                     l4394:
  9127   003866  90D8               	bcf	status,0,c
  9128   003868  3642               	rlcf	___fltol@f1^0,f,c
  9129   00386A  3643               	rlcf	(___fltol@f1+1)^0,f,c
  9130   00386C  3644               	rlcf	(___fltol@f1+2)^0,f,c
  9131   00386E  3645               	rlcf	(___fltol@f1+3)^0,f,c
  9132   003870  064B               	decf	___fltol@exp1^0,f,c
  9133   003872                     l4396:
  9134   003872  504B               	movf	___fltol@exp1^0,w,c
  9135   003874  A4D8               	btfss	status,2,c
  9136   003876  EF3F  F01C         	goto	u3651
  9137   00387A  EF41  F01C         	goto	u3650
  9138   00387E                     u3651:
  9139   00387E  EF33  F01C         	goto	l4394
  9140   003882                     u3650:
  9141   003882                     l4398:
  9142   003882  504A               	movf	___fltol@sign1^0,w,c
  9143   003884  B4D8               	btfsc	status,2,c
  9144   003886  EF47  F01C         	goto	u3661
  9145   00388A  EF49  F01C         	goto	u3660
  9146   00388E                     u3661:
  9147   00388E  EF51  F01C         	goto	l4402
  9148   003892                     u3660:
  9149   003892  1E45               	comf	(___fltol@f1+3)^0,f,c
  9150   003894  1E44               	comf	(___fltol@f1+2)^0,f,c
  9151   003896  1E43               	comf	(___fltol@f1+1)^0,f,c
  9152   003898  6C42               	negf	___fltol@f1^0,c
  9153   00389A  0E00               	movlw	0
  9154   00389C  2243               	addwfc	(___fltol@f1+1)^0,f,c
  9155   00389E  2244               	addwfc	(___fltol@f1+2)^0,f,c
  9156   0038A0  2245               	addwfc	(___fltol@f1+3)^0,f,c
  9157   0038A2                     l4402:
  9158   0038A2  C042  F042         	movff	___fltol@f1,?___fltol
  9159   0038A6  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  9160   0038AA  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  9161   0038AE  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  9162   0038B2                     l1111:
  9163   0038B2  0012               	return		;funcret
  9164   0038B4                     __end_of___fltol:
  9165                           	callstack 0
  9166                           
  9167 ;; *************** function ___fladd *****************
  9168 ;; Defined at:
  9169 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  b               4    1[COMRAM] long 
  9172 ;;  a               4    5[COMRAM] long 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  grs             1   16[COMRAM] unsigned char 
  9175 ;;  bexp            1   15[COMRAM] unsigned char 
  9176 ;;  aexp            1   14[COMRAM] unsigned char 
  9177 ;;  signs           1   13[COMRAM] unsigned char 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  4    1[COMRAM] unsigned char 
  9180 ;; Registers used:
  9181 ;;		wreg, status,2, status,0
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9187 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9188 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9189 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9190 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9191 ;;Total ram usage:       16 bytes
  9192 ;; Hardware stack levels used: 1
  9193 ;; Hardware stack levels required when called: 1
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_convert_rgb2hue
  9198 ;;		_calibration_turning
  9199 ;;		___flsub
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           	psect	text47
  9204   001658                     __ptext47:
  9205                           	callstack 0
  9206   001658                     ___fladd:
  9207                           	callstack 26
  9208   001658  5005               	movf	(___fladd@b+3)^0,w,c
  9209   00165A  0B80               	andlw	128
  9210   00165C  6E0E               	movwf	___fladd@signs^0,c
  9211   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  9212   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  9213   001662  6E10               	movwf	___fladd@bexp^0,c
  9214   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  9215   001666  EF37  F00B         	goto	u3021
  9216   00166A  EF39  F00B         	goto	u3020
  9217   00166E                     u3021:
  9218   00166E  EF3A  F00B         	goto	l4036
  9219   001672                     u3020:
  9220   001672  8010               	bsf	___fladd@bexp^0,0,c
  9221   001674                     l4036:
  9222   001674  5010               	movf	___fladd@bexp^0,w,c
  9223   001676  B4D8               	btfsc	status,2,c
  9224   001678  EF40  F00B         	goto	u3031
  9225   00167C  EF42  F00B         	goto	u3030
  9226   001680                     u3031:
  9227   001680  EF57  F00B         	goto	l4046
  9228   001684                     u3030:
  9229   001684  2810               	incf	___fladd@bexp^0,w,c
  9230   001686  A4D8               	btfss	status,2,c
  9231   001688  EF48  F00B         	goto	u3041
  9232   00168C  EF4A  F00B         	goto	u3040
  9233   001690                     u3041:
  9234   001690  EF52  F00B         	goto	l4042
  9235   001694                     u3040:
  9236   001694  0E00               	movlw	0
  9237   001696  6E02               	movwf	___fladd@b^0,c
  9238   001698  0E00               	movlw	0
  9239   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  9240   00169C  0E00               	movlw	0
  9241   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  9242   0016A0  0E00               	movlw	0
  9243   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  9244   0016A4                     l4042:
  9245   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  9246   0016A6  0E00               	movlw	0
  9247   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  9248   0016AA  EF5F  F00B         	goto	l4048
  9249   0016AE                     l4046:
  9250   0016AE  0E00               	movlw	0
  9251   0016B0  6E02               	movwf	___fladd@b^0,c
  9252   0016B2  0E00               	movlw	0
  9253   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  9254   0016B6  0E00               	movlw	0
  9255   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  9256   0016BA  0E00               	movlw	0
  9257   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  9258   0016BE                     l4048:
  9259   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  9260   0016C0  0B80               	andlw	128
  9261   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  9262   0016C4  500E               	movf	___fladd@signs^0,w,c
  9263   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  9264   0016C8  B4D8               	btfsc	status,2,c
  9265   0016CA  EF69  F00B         	goto	u3051
  9266   0016CE  EF6B  F00B         	goto	u3050
  9267   0016D2                     u3051:
  9268   0016D2  EF6C  F00B         	goto	l4054
  9269   0016D6                     u3050:
  9270   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  9271   0016D8                     l4054:
  9272   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  9273   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  9274   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  9275   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  9276   0016E0  EF74  F00B         	goto	u3061
  9277   0016E4  EF76  F00B         	goto	u3060
  9278   0016E8                     u3061:
  9279   0016E8  EF77  F00B         	goto	l4060
  9280   0016EC                     u3060:
  9281   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  9282   0016EE                     l4060:
  9283   0016EE  500F               	movf	___fladd@aexp^0,w,c
  9284   0016F0  B4D8               	btfsc	status,2,c
  9285   0016F2  EF7D  F00B         	goto	u3071
  9286   0016F6  EF7F  F00B         	goto	u3070
  9287   0016FA                     u3071:
  9288   0016FA  EF94  F00B         	goto	l4070
  9289   0016FE                     u3070:
  9290   0016FE  280F               	incf	___fladd@aexp^0,w,c
  9291   001700  A4D8               	btfss	status,2,c
  9292   001702  EF85  F00B         	goto	u3081
  9293   001706  EF87  F00B         	goto	u3080
  9294   00170A                     u3081:
  9295   00170A  EF8F  F00B         	goto	l4066
  9296   00170E                     u3080:
  9297   00170E  0E00               	movlw	0
  9298   001710  6E06               	movwf	___fladd@a^0,c
  9299   001712  0E00               	movlw	0
  9300   001714  6E07               	movwf	(___fladd@a+1)^0,c
  9301   001716  0E00               	movlw	0
  9302   001718  6E08               	movwf	(___fladd@a+2)^0,c
  9303   00171A  0E00               	movlw	0
  9304   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  9305   00171E                     l4066:
  9306   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  9307   001720  0E00               	movlw	0
  9308   001722  6E09               	movwf	(___fladd@a+3)^0,c
  9309   001724  EF9C  F00B         	goto	l4072
  9310   001728                     l4070:
  9311   001728  0E00               	movlw	0
  9312   00172A  6E06               	movwf	___fladd@a^0,c
  9313   00172C  0E00               	movlw	0
  9314   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  9315   001730  0E00               	movlw	0
  9316   001732  6E08               	movwf	(___fladd@a+2)^0,c
  9317   001734  0E00               	movlw	0
  9318   001736  6E09               	movwf	(___fladd@a+3)^0,c
  9319   001738                     l4072:
  9320   001738  5010               	movf	___fladd@bexp^0,w,c
  9321   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  9322   00173C  B0D8               	btfsc	status,0,c
  9323   00173E  EFA3  F00B         	goto	u3091
  9324   001742  EFA5  F00B         	goto	u3090
  9325   001746                     u3091:
  9326   001746  EFCC  F00B         	goto	l4108
  9327   00174A                     u3090:
  9328   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  9329   00174C  EFAA  F00B         	goto	u3101
  9330   001750  EFAC  F00B         	goto	u3100
  9331   001754                     u3101:
  9332   001754  EFAE  F00B         	goto	l4078
  9333   001758                     u3100:
  9334   001758  0E80               	movlw	128
  9335   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  9336   00175C                     l4078:
  9337   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  9338   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  9339   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  9340   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  9341   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  9342   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  9343   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  9344   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  9345   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  9346   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  9347   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  9348   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  9349   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  9350   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  9351   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  9352   001798                     l4108:
  9353   001798  0E00               	movlw	0
  9354   00179A  6E11               	movwf	___fladd@grs^0,c
  9355   00179C  5010               	movf	___fladd@bexp^0,w,c
  9356   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  9357   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  9358   0017A4  5E0A               	subwf	??___fladd^0,f,c
  9359   0017A6  0E00               	movlw	0
  9360   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  9361   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  9362   0017AC  EFE1  F00B         	goto	u3111
  9363   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  9364   0017B2  E109               	bnz	u3110
  9365   0017B4  0E1A               	movlw	26
  9366   0017B6  5C0A               	subwf	??___fladd^0,w,c
  9367   0017B8  A0D8               	btfss	status,0,c
  9368   0017BA  EFE1  F00B         	goto	u3111
  9369   0017BE  EFE3  F00B         	goto	u3110
  9370   0017C2                     u3111:
  9371   0017C2  EF1A  F00C         	goto	l1343
  9372   0017C6                     u3110:
  9373   0017C6  5002               	movf	___fladd@b^0,w,c
  9374   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  9375   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  9376   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  9377   0017CE  A4D8               	btfss	status,2,c
  9378   0017D0  EFEC  F00B         	goto	u3121
  9379   0017D4  EFEF  F00B         	goto	u3120
  9380   0017D8                     u3121:
  9381   0017D8  0E01               	movlw	1
  9382   0017DA  EFF0  F00B         	goto	u3130
  9383   0017DE                     u3120:
  9384   0017DE  0E00               	movlw	0
  9385   0017E0                     u3130:
  9386   0017E0  6E11               	movwf	___fladd@grs^0,c
  9387   0017E2  0E00               	movlw	0
  9388   0017E4  6E02               	movwf	___fladd@b^0,c
  9389   0017E6  0E00               	movlw	0
  9390   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  9391   0017EA  0E00               	movlw	0
  9392   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  9393   0017EE  0E00               	movlw	0
  9394   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  9395   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  9396   0017F6  EF23  F00C         	goto	l1342
  9397   0017FA                     l1344:
  9398   0017FA  A011               	btfss	___fladd@grs^0,0,c
  9399   0017FC  EF02  F00C         	goto	u3141
  9400   001800  EF04  F00C         	goto	u3140
  9401   001804                     u3141:
  9402   001804  EF0A  F00C         	goto	l4120
  9403   001808                     u3140:
  9404   001808  90D8               	bcf	status,0,c
  9405   00180A  3011               	rrcf	___fladd@grs^0,w,c
  9406   00180C  0901               	iorlw	1
  9407   00180E  6E11               	movwf	___fladd@grs^0,c
  9408   001810  EF0C  F00C         	goto	l4122
  9409   001814                     l4120:
  9410   001814  90D8               	bcf	status,0,c
  9411   001816  3211               	rrcf	___fladd@grs^0,f,c
  9412   001818                     l4122:
  9413   001818  A002               	btfss	___fladd@b^0,0,c
  9414   00181A  EF11  F00C         	goto	u3151
  9415   00181E  EF13  F00C         	goto	u3150
  9416   001822                     u3151:
  9417   001822  EF14  F00C         	goto	l4126
  9418   001826                     u3150:
  9419   001826  8E11               	bsf	___fladd@grs^0,7,c
  9420   001828                     l4126:
  9421   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  9422   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  9423   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  9424   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  9425   001830  3202               	rrcf	___fladd@b^0,f,c
  9426   001832  2A10               	incf	___fladd@bexp^0,f,c
  9427   001834                     l1343:
  9428   001834  500F               	movf	___fladd@aexp^0,w,c
  9429   001836  5C10               	subwf	___fladd@bexp^0,w,c
  9430   001838  A0D8               	btfss	status,0,c
  9431   00183A  EF21  F00C         	goto	u3161
  9432   00183E  EF23  F00C         	goto	u3160
  9433   001842                     u3161:
  9434   001842  EFFD  F00B         	goto	l1344
  9435   001846                     u3160:
  9436   001846                     l1342:
  9437   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  9438   001848  EF28  F00C         	goto	u3171
  9439   00184C  EF2A  F00C         	goto	u3170
  9440   001850                     u3171:
  9441   001850  EF6A  F00C         	goto	l4154
  9442   001854                     u3170:
  9443   001854  5010               	movf	___fladd@bexp^0,w,c
  9444   001856  A4D8               	btfss	status,2,c
  9445   001858  EF30  F00C         	goto	u3181
  9446   00185C  EF32  F00C         	goto	u3180
  9447   001860                     u3181:
  9448   001860  EF3C  F00C         	goto	l4136
  9449   001864                     u3180:
  9450   001864  0E00               	movlw	0
  9451   001866  6E02               	movwf	?___fladd^0,c
  9452   001868  0E00               	movlw	0
  9453   00186A  6E03               	movwf	(?___fladd+1)^0,c
  9454   00186C  0E00               	movlw	0
  9455   00186E  6E04               	movwf	(?___fladd+2)^0,c
  9456   001870  0E00               	movlw	0
  9457   001872  6E05               	movwf	(?___fladd+3)^0,c
  9458   001874  EF8B  F00D         	goto	l1351
  9459   001878                     l4136:
  9460   001878  5006               	movf	___fladd@a^0,w,c
  9461   00187A  2602               	addwf	___fladd@b^0,f,c
  9462   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  9463   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  9464   001880  5008               	movf	(___fladd@a+2)^0,w,c
  9465   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  9466   001884  5009               	movf	(___fladd@a+3)^0,w,c
  9467   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  9468   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  9469   00188A  EF49  F00C         	goto	u3191
  9470   00188E  EF4B  F00C         	goto	u3190
  9471   001892                     u3191:
  9472   001892  EFF7  F00C         	goto	l4190
  9473   001896                     u3190:
  9474   001896  A011               	btfss	___fladd@grs^0,0,c
  9475   001898  EF50  F00C         	goto	u3201
  9476   00189C  EF52  F00C         	goto	u3200
  9477   0018A0                     u3201:
  9478   0018A0  EF58  F00C         	goto	l4144
  9479   0018A4                     u3200:
  9480   0018A4  90D8               	bcf	status,0,c
  9481   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  9482   0018A8  0901               	iorlw	1
  9483   0018AA  6E11               	movwf	___fladd@grs^0,c
  9484   0018AC  EF5A  F00C         	goto	l4146
  9485   0018B0                     l4144:
  9486   0018B0  90D8               	bcf	status,0,c
  9487   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  9488   0018B4                     l4146:
  9489   0018B4  A002               	btfss	___fladd@b^0,0,c
  9490   0018B6  EF5F  F00C         	goto	u3211
  9491   0018BA  EF61  F00C         	goto	u3210
  9492   0018BE                     u3211:
  9493   0018BE  EF62  F00C         	goto	l4150
  9494   0018C2                     u3210:
  9495   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  9496   0018C4                     l4150:
  9497   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  9498   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  9499   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  9500   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  9501   0018CC  3202               	rrcf	___fladd@b^0,f,c
  9502   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  9503   0018D0  EFF7  F00C         	goto	l4190
  9504   0018D4                     l4154:
  9505   0018D4  5006               	movf	___fladd@a^0,w,c
  9506   0018D6  5C02               	subwf	___fladd@b^0,w,c
  9507   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  9508   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  9509   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  9510   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  9511   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  9512   0018E2  0A80               	xorlw	128
  9513   0018E4  6E0A               	movwf	??___fladd^0,c
  9514   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  9515   0018E8  0A80               	xorlw	128
  9516   0018EA  580A               	subwfb	??___fladd^0,w,c
  9517   0018EC  B0D8               	btfsc	status,0,c
  9518   0018EE  EF7B  F00C         	goto	u3221
  9519   0018F2  EF7D  F00C         	goto	u3220
  9520   0018F6                     u3221:
  9521   0018F6  EFA8  F00C         	goto	l4164
  9522   0018FA                     u3220:
  9523   0018FA  5002               	movf	___fladd@b^0,w,c
  9524   0018FC  5C06               	subwf	___fladd@a^0,w,c
  9525   0018FE  6E0A               	movwf	??___fladd^0,c
  9526   001900  5003               	movf	(___fladd@b+1)^0,w,c
  9527   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  9528   001904  6E0B               	movwf	(??___fladd+1)^0,c
  9529   001906  5004               	movf	(___fladd@b+2)^0,w,c
  9530   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  9531   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  9532   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  9533   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  9534   001910  6E0D               	movwf	(??___fladd+3)^0,c
  9535   001912  0EFF               	movlw	255
  9536   001914  240A               	addwf	??___fladd^0,w,c
  9537   001916  6E02               	movwf	___fladd@b^0,c
  9538   001918  0EFF               	movlw	255
  9539   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  9540   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  9541   00191E  0EFF               	movlw	255
  9542   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  9543   001922  6E04               	movwf	(___fladd@b+2)^0,c
  9544   001924  0EFF               	movlw	255
  9545   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  9546   001928  6E05               	movwf	(___fladd@b+3)^0,c
  9547   00192A  0E80               	movlw	128
  9548   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  9549   00192E  6C11               	negf	___fladd@grs^0,c
  9550   001930  5011               	movf	___fladd@grs^0,w,c
  9551   001932  A4D8               	btfss	status,2,c
  9552   001934  EF9E  F00C         	goto	u3231
  9553   001938  EFA0  F00C         	goto	u3230
  9554   00193C                     u3231:
  9555   00193C  EFB0  F00C         	goto	l1359
  9556   001940                     u3230:
  9557   001940  0E01               	movlw	1
  9558   001942  2602               	addwf	___fladd@b^0,f,c
  9559   001944  0E00               	movlw	0
  9560   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  9561   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  9562   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  9563   00194C  EFB0  F00C         	goto	l1359
  9564   001950                     l4164:
  9565   001950  5006               	movf	___fladd@a^0,w,c
  9566   001952  5E02               	subwf	___fladd@b^0,f,c
  9567   001954  5007               	movf	(___fladd@a+1)^0,w,c
  9568   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  9569   001958  5008               	movf	(___fladd@a+2)^0,w,c
  9570   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  9571   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  9572   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  9573   001960                     l1359:
  9574   001960  5002               	movf	___fladd@b^0,w,c
  9575   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  9576   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  9577   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  9578   001968  A4D8               	btfss	status,2,c
  9579   00196A  EFB9  F00C         	goto	u3241
  9580   00196E  EFBB  F00C         	goto	u3240
  9581   001972                     u3241:
  9582   001972  EFF0  F00C         	goto	l4188
  9583   001976                     u3240:
  9584   001976  5011               	movf	___fladd@grs^0,w,c
  9585   001978  A4D8               	btfss	status,2,c
  9586   00197A  EFC1  F00C         	goto	u3251
  9587   00197E  EFC3  F00C         	goto	u3250
  9588   001982                     u3251:
  9589   001982  EFF0  F00C         	goto	l4188
  9590   001986                     u3250:
  9591   001986  0E00               	movlw	0
  9592   001988  6E02               	movwf	?___fladd^0,c
  9593   00198A  0E00               	movlw	0
  9594   00198C  6E03               	movwf	(?___fladd+1)^0,c
  9595   00198E  0E00               	movlw	0
  9596   001990  6E04               	movwf	(?___fladd+2)^0,c
  9597   001992  0E00               	movlw	0
  9598   001994  6E05               	movwf	(?___fladd+3)^0,c
  9599   001996  EF8B  F00D         	goto	l1351
  9600   00199A                     l4172:
  9601   00199A  90D8               	bcf	status,0,c
  9602   00199C  3602               	rlcf	___fladd@b^0,f,c
  9603   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  9604   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  9605   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  9606   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  9607   0019A6  EFD7  F00C         	goto	u3261
  9608   0019AA  EFD9  F00C         	goto	u3260
  9609   0019AE                     u3261:
  9610   0019AE  EFDA  F00C         	goto	l4178
  9611   0019B2                     u3260:
  9612   0019B2  8002               	bsf	___fladd@b^0,0,c
  9613   0019B4                     l4178:
  9614   0019B4  A011               	btfss	___fladd@grs^0,0,c
  9615   0019B6  EFDF  F00C         	goto	u3271
  9616   0019BA  EFE1  F00C         	goto	u3270
  9617   0019BE                     u3271:
  9618   0019BE  EFE5  F00C         	goto	l4182
  9619   0019C2                     u3270:
  9620   0019C2  80D8               	bsf	status,0,c
  9621   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  9622   0019C6  EFE7  F00C         	goto	l4184
  9623   0019CA                     l4182:
  9624   0019CA  90D8               	bcf	status,0,c
  9625   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  9626   0019CE                     l4184:
  9627   0019CE  5010               	movf	___fladd@bexp^0,w,c
  9628   0019D0  B4D8               	btfsc	status,2,c
  9629   0019D2  EFED  F00C         	goto	u3281
  9630   0019D6  EFEF  F00C         	goto	u3280
  9631   0019DA                     u3281:
  9632   0019DA  EFF0  F00C         	goto	l4188
  9633   0019DE                     u3280:
  9634   0019DE  0610               	decf	___fladd@bexp^0,f,c
  9635   0019E0                     l4188:
  9636   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  9637   0019E2  EFF5  F00C         	goto	u3291
  9638   0019E6  EFF7  F00C         	goto	u3290
  9639   0019EA                     u3291:
  9640   0019EA  EFCD  F00C         	goto	l4172
  9641   0019EE                     u3290:
  9642   0019EE                     l4190:
  9643   0019EE  0E00               	movlw	0
  9644   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  9645   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  9646   0019F4  EFFE  F00C         	goto	u3301
  9647   0019F8  EF00  F00D         	goto	u3300
  9648   0019FC                     u3301:
  9649   0019FC  EF18  F00D         	goto	l1368
  9650   001A00                     u3300:
  9651   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  9652   001A04  0E7F               	movlw	127
  9653   001A06  160A               	andwf	??___fladd^0,f,c
  9654   001A08  B4D8               	btfsc	status,2,c
  9655   001A0A  EF09  F00D         	goto	u3311
  9656   001A0E  EF0B  F00D         	goto	u3310
  9657   001A12                     u3311:
  9658   001A12  EF0F  F00D         	goto	l1369
  9659   001A16                     u3310:
  9660   001A16                     l4196:
  9661   001A16  0E01               	movlw	1
  9662   001A18  6E0F               	movwf	___fladd@aexp^0,c
  9663   001A1A  EF18  F00D         	goto	l1368
  9664   001A1E                     l1369:
  9665   001A1E  A002               	btfss	___fladd@b^0,0,c
  9666   001A20  EF14  F00D         	goto	u3321
  9667   001A24  EF16  F00D         	goto	u3320
  9668   001A28                     u3321:
  9669   001A28  EF18  F00D         	goto	l1368
  9670   001A2C                     u3320:
  9671   001A2C  EF0B  F00D         	goto	l4196
  9672   001A30                     l1368:
  9673   001A30  500F               	movf	___fladd@aexp^0,w,c
  9674   001A32  B4D8               	btfsc	status,2,c
  9675   001A34  EF1E  F00D         	goto	u3331
  9676   001A38  EF20  F00D         	goto	u3330
  9677   001A3C                     u3331:
  9678   001A3C  EF4B  F00D         	goto	l4208
  9679   001A40                     u3330:
  9680   001A40  0E01               	movlw	1
  9681   001A42  2602               	addwf	___fladd@b^0,f,c
  9682   001A44  0E00               	movlw	0
  9683   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  9684   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  9685   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  9686   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  9687   001A4E  EF2B  F00D         	goto	u3341
  9688   001A52  EF2D  F00D         	goto	u3340
  9689   001A56                     u3341:
  9690   001A56  EF4B  F00D         	goto	l4208
  9691   001A5A                     u3340:
  9692   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  9693   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  9694   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  9695   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  9696   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  9697   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  9698   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  9699   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  9700   001A72  320A               	rrcf	??___fladd^0,f,c
  9701   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  9702   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  9703   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  9704   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  9705   001A84  2810               	incf	___fladd@bexp^0,w,c
  9706   001A86  B4D8               	btfsc	status,2,c
  9707   001A88  EF48  F00D         	goto	u3351
  9708   001A8C  EF4A  F00D         	goto	u3350
  9709   001A90                     u3351:
  9710   001A90  EF4B  F00D         	goto	l4208
  9711   001A94                     u3350:
  9712   001A94  2A10               	incf	___fladd@bexp^0,f,c
  9713   001A96                     l4208:
  9714   001A96  2810               	incf	___fladd@bexp^0,w,c
  9715   001A98  B4D8               	btfsc	status,2,c
  9716   001A9A  EF51  F00D         	goto	u3361
  9717   001A9E  EF53  F00D         	goto	u3360
  9718   001AA2                     u3361:
  9719   001AA2  EF5B  F00D         	goto	l4212
  9720   001AA6                     u3360:
  9721   001AA6  5010               	movf	___fladd@bexp^0,w,c
  9722   001AA8  A4D8               	btfss	status,2,c
  9723   001AAA  EF59  F00D         	goto	u3371
  9724   001AAE  EF5B  F00D         	goto	u3370
  9725   001AB2                     u3371:
  9726   001AB2  EF6D  F00D         	goto	l4216
  9727   001AB6                     u3370:
  9728   001AB6                     l4212:
  9729   001AB6  0E00               	movlw	0
  9730   001AB8  6E02               	movwf	___fladd@b^0,c
  9731   001ABA  0E00               	movlw	0
  9732   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  9733   001ABE  0E00               	movlw	0
  9734   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  9735   001AC2  0E00               	movlw	0
  9736   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  9737   001AC6  5010               	movf	___fladd@bexp^0,w,c
  9738   001AC8  A4D8               	btfss	status,2,c
  9739   001ACA  EF69  F00D         	goto	u3381
  9740   001ACE  EF6B  F00D         	goto	u3380
  9741   001AD2                     u3381:
  9742   001AD2  EF6D  F00D         	goto	l4216
  9743   001AD6                     u3380:
  9744   001AD6  0E00               	movlw	0
  9745   001AD8  6E0E               	movwf	___fladd@signs^0,c
  9746   001ADA                     l4216:
  9747   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  9748   001ADC  EF72  F00D         	goto	u3391
  9749   001AE0  EF74  F00D         	goto	u3390
  9750   001AE4                     u3391:
  9751   001AE4  EF77  F00D         	goto	l4220
  9752   001AE8                     u3390:
  9753   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  9754   001AEA  EF78  F00D         	goto	l4222
  9755   001AEE                     l4220:
  9756   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  9757   001AF0                     l4222:
  9758   001AF0  90D8               	bcf	status,0,c
  9759   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  9760   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  9761   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  9762   001AF8  EF80  F00D         	goto	u3401
  9763   001AFC  EF82  F00D         	goto	u3400
  9764   001B00                     u3401:
  9765   001B00  EF83  F00D         	goto	l4228
  9766   001B04                     u3400:
  9767   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  9768   001B06                     l4228:
  9769   001B06  C002  F002         	movff	___fladd@b,?___fladd
  9770   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  9771   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  9772   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  9773   001B16                     l1351:
  9774   001B16  0012               	return		;funcret
  9775   001B18                     __end_of___fladd:
  9776                           	callstack 0
  9777                           
  9778 ;; *************** function _calibration_colors *****************
  9779 ;; Defined at:
  9780 ;;		line 9 in file "calibration.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  cCal            1   70[COMRAM] PTR struct colors
  9783 ;;		 -> colorCalibration(10), 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9796 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9798 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9799 ;;Total ram usage:       23 bytes
  9800 ;; Hardware stack levels used: 1
  9801 ;; Hardware stack levels required when called: 10
  9802 ;; This function calls:
  9803 ;;		_color_read_Blue
  9804 ;;		_color_read_Clear
  9805 ;;		_color_read_Green
  9806 ;;		_color_read_Red
  9807 ;;		_send2USART
  9808 ;;		_sendStringSerial4
  9809 ;;		_sprintf
  9810 ;; This function is called by:
  9811 ;;		_main
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           	psect	text48
  9816   002A44                     __ptext48:
  9817                           	callstack 0
  9818   002A44                     _calibration_colors:
  9819                           	callstack 20
  9820   002A44                     
  9821                           ;calibration.c: 9: void calibration_colors(colors *cCal);calibration.c: 10: {;calibratio
      +                          n.c: 12:     LATGbits.LATG0 = 0;
  9822   002A44  907F               	bcf	127,0,c	;volatile
  9823                           
  9824                           ;calibration.c: 13:     LATEbits.LATE7 = 0;
  9825   002A46  9E7D               	bcf	125,7,c	;volatile
  9826                           
  9827                           ;calibration.c: 14:     LATAbits.LATA3 = 0;
  9828   002A48  9679               	bcf	121,3,c	;volatile
  9829   002A4A                     
  9830                           ;calibration.c: 16:     char cal_state[20];;calibration.c: 20:     sprintf(cal_state,"Ca
      +                          libration state = red", ".");
  9831   002A4A  0E92               	movlw	low calibration_colors@cal_state
  9832   002A4C  6E32               	movwf	sprintf@s^0,c
  9833   002A4E  0E8A               	movlw	low STR_3
  9834   002A50  6E33               	movwf	sprintf@fmt^0,c
  9835   002A52  0EC3               	movlw	low STR_4
  9836   002A54  6E34               	movwf	(?_sprintf+2)^0,c
  9837   002A56  5034               	movf	(?_sprintf+2)^0,w,c
  9838   002A58  A4D8               	btfss	status,2,c
  9839   002A5A  0E0E               	movlw	high __smallconst
  9840   002A5C  6E35               	movwf	(?_sprintf+3)^0,c
  9841   002A5E  EC6E  F025         	call	_sprintf	;wreg free
  9842   002A62                     
  9843                           ;calibration.c: 21:     sendStringSerial4(cal_state);
  9844   002A62  0E92               	movlw	low calibration_colors@cal_state
  9845   002A64  6E03               	movwf	sendStringSerial4@string^0,c
  9846   002A66  ECBB  F025         	call	_sendStringSerial4	;wreg free
  9847   002A6A                     l771:
  9848                           
  9849                           ;calibration.c: 24:     while(PORTFbits.RF2 == 1){
  9850   002A6A  B48E               	btfsc	142,2,c	;volatile
  9851   002A6C  EF3A  F015         	goto	u5711
  9852   002A70  EF3C  F015         	goto	u5710
  9853   002A74                     u5711:
  9854   002A74  EF35  F015         	goto	l771
  9855   002A78                     u5710:
  9856   002A78                     
  9857                           ;calibration.c: 28:     LATGbits.LATG0 = 1;
  9858   002A78  807F               	bsf	127,0,c	;volatile
  9859   002A7A                     
  9860                           ;calibration.c: 29:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9861   002A7A  0E29               	movlw	41
  9862   002A7C  6E49               	movwf	(??_calibration_colors+1)^0,c
  9863   002A7E  0E96               	movlw	150
  9864   002A80  6E48               	movwf	??_calibration_colors^0,c
  9865   002A82  0E7F               	movlw	127
  9866   002A84                     u6277:
  9867   002A84  2EE8               	decfsz	wreg,f,c
  9868   002A86  D7FE               	bra	u6277
  9869   002A88  2E48               	decfsz	??_calibration_colors^0,f,c
  9870   002A8A  D7FC               	bra	u6277
  9871   002A8C  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
  9872   002A8E  D7FA               	bra	u6277
  9873   002A90  0000               	nop	
  9874   002A92                     
  9875                           ;calibration.c: 30:     (cCal->red) = color_read_Red();
  9876   002A92  EC65  F022         	call	_color_read_Red	;wreg free
  9877   002A96  5047               	movf	calibration_colors@cCal^0,w,c
  9878   002A98  6ED9               	movwf	fsr2l,c
  9879   002A9A  6ADA               	clrf	fsr2h,c
  9880   002A9C  C006  FFDE         	movff	?_color_read_Red,postinc2
  9881   002AA0  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9882   002AA4                     
  9883                           ;calibration.c: 31:     LATGbits.LATG0 = 0;
  9884   002AA4  907F               	bcf	127,0,c	;volatile
  9885   002AA6                     
  9886                           ;calibration.c: 34:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9887   002AA6  0E92               	movlw	low calibration_colors@cal_state
  9888   002AA8  6E32               	movwf	sprintf@s^0,c
  9889   002AAA  0E01               	movlw	low STR_5
  9890   002AAC  6E33               	movwf	sprintf@fmt^0,c
  9891   002AAE  0EC3               	movlw	low STR_4
  9892   002AB0  6E34               	movwf	(?_sprintf+2)^0,c
  9893   002AB2  5034               	movf	(?_sprintf+2)^0,w,c
  9894   002AB4  A4D8               	btfss	status,2,c
  9895   002AB6  0E0E               	movlw	high __smallconst
  9896   002AB8  6E35               	movwf	(?_sprintf+3)^0,c
  9897   002ABA  EC6E  F025         	call	_sprintf	;wreg free
  9898   002ABE                     
  9899                           ;calibration.c: 35:     sendStringSerial4(&cal_state);
  9900   002ABE  0E92               	movlw	low calibration_colors@cal_state
  9901   002AC0  6E03               	movwf	sendStringSerial4@string^0,c
  9902   002AC2  ECBB  F025         	call	_sendStringSerial4	;wreg free
  9903   002AC6                     l774:
  9904                           
  9905                           ;calibration.c: 37:     while(PORTFbits.RF2 == 1){
  9906   002AC6  B48E               	btfsc	142,2,c	;volatile
  9907   002AC8  EF68  F015         	goto	u5721
  9908   002ACC  EF6A  F015         	goto	u5720
  9909   002AD0                     u5721:
  9910   002AD0  EF63  F015         	goto	l774
  9911   002AD4                     u5720:
  9912   002AD4                     
  9913                           ;calibration.c: 41:     LATEbits.LATE7 = 1;
  9914   002AD4  8E7D               	bsf	125,7,c	;volatile
  9915   002AD6                     
  9916                           ;calibration.c: 42:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9917   002AD6  0E29               	movlw	41
  9918   002AD8  6E49               	movwf	(??_calibration_colors+1)^0,c
  9919   002ADA  0E96               	movlw	150
  9920   002ADC  6E48               	movwf	??_calibration_colors^0,c
  9921   002ADE  0E7F               	movlw	127
  9922   002AE0                     u6287:
  9923   002AE0  2EE8               	decfsz	wreg,f,c
  9924   002AE2  D7FE               	bra	u6287
  9925   002AE4  2E48               	decfsz	??_calibration_colors^0,f,c
  9926   002AE6  D7FC               	bra	u6287
  9927   002AE8  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
  9928   002AEA  D7FA               	bra	u6287
  9929   002AEC  0000               	nop	
  9930   002AEE                     
  9931                           ;calibration.c: 43:     (cCal->green) = color_read_Green();
  9932   002AEE  EC8D  F022         	call	_color_read_Green	;wreg free
  9933   002AF2  5047               	movf	calibration_colors@cCal^0,w,c
  9934   002AF4  6ED9               	movwf	fsr2l,c
  9935   002AF6  6ADA               	clrf	fsr2h,c
  9936   002AF8  0E02               	movlw	2
  9937   002AFA  26D9               	addwf	fsr2l,f,c
  9938   002AFC  C006  FFDE         	movff	?_color_read_Green,postinc2
  9939   002B00  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9940   002B04                     
  9941                           ;calibration.c: 44:     LATEbits.LATE7 = 0;
  9942   002B04  9E7D               	bcf	125,7,c	;volatile
  9943   002B06                     
  9944                           ;calibration.c: 47:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9945   002B06  0E92               	movlw	low calibration_colors@cal_state
  9946   002B08  6E32               	movwf	sprintf@s^0,c
  9947   002B0A  0E3B               	movlw	low STR_7
  9948   002B0C  6E33               	movwf	sprintf@fmt^0,c
  9949   002B0E  0EC3               	movlw	low STR_4
  9950   002B10  6E34               	movwf	(?_sprintf+2)^0,c
  9951   002B12  5034               	movf	(?_sprintf+2)^0,w,c
  9952   002B14  A4D8               	btfss	status,2,c
  9953   002B16  0E0E               	movlw	high __smallconst
  9954   002B18  6E35               	movwf	(?_sprintf+3)^0,c
  9955   002B1A  EC6E  F025         	call	_sprintf	;wreg free
  9956   002B1E                     
  9957                           ;calibration.c: 48:     sendStringSerial4(&cal_state);
  9958   002B1E  0E92               	movlw	low calibration_colors@cal_state
  9959   002B20  6E03               	movwf	sendStringSerial4@string^0,c
  9960   002B22  ECBB  F025         	call	_sendStringSerial4	;wreg free
  9961   002B26                     l777:
  9962                           
  9963                           ;calibration.c: 50:     while(PORTFbits.RF2 == 1){
  9964   002B26  B48E               	btfsc	142,2,c	;volatile
  9965   002B28  EF98  F015         	goto	u5731
  9966   002B2C  EF9A  F015         	goto	u5730
  9967   002B30                     u5731:
  9968   002B30  EF93  F015         	goto	l777
  9969   002B34                     u5730:
  9970   002B34                     
  9971                           ;calibration.c: 54:     LATAbits.LATA3 = 1;
  9972   002B34  8679               	bsf	121,3,c	;volatile
  9973   002B36                     
  9974                           ;calibration.c: 55:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9975   002B36  0E29               	movlw	41
  9976   002B38  6E49               	movwf	(??_calibration_colors+1)^0,c
  9977   002B3A  0E96               	movlw	150
  9978   002B3C  6E48               	movwf	??_calibration_colors^0,c
  9979   002B3E  0E7F               	movlw	127
  9980   002B40                     u6297:
  9981   002B40  2EE8               	decfsz	wreg,f,c
  9982   002B42  D7FE               	bra	u6297
  9983   002B44  2E48               	decfsz	??_calibration_colors^0,f,c
  9984   002B46  D7FC               	bra	u6297
  9985   002B48  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
  9986   002B4A  D7FA               	bra	u6297
  9987   002B4C  0000               	nop	
  9988   002B4E                     
  9989                           ;calibration.c: 56:     (cCal->blue) = color_read_Blue();
  9990   002B4E  ECDD  F022         	call	_color_read_Blue	;wreg free
  9991   002B52  5047               	movf	calibration_colors@cCal^0,w,c
  9992   002B54  6ED9               	movwf	fsr2l,c
  9993   002B56  6ADA               	clrf	fsr2h,c
  9994   002B58  0E04               	movlw	4
  9995   002B5A  26D9               	addwf	fsr2l,f,c
  9996   002B5C  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9997   002B60  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9998   002B64                     
  9999                           ;calibration.c: 57:     LATAbits.LATA3 = 0;
 10000   002B64  9679               	bcf	121,3,c	;volatile
 10001   002B66                     
 10002                           ;calibration.c: 60:     sprintf(cal_state,"Calibration state =  white", ".");
 10003   002B66  0E92               	movlw	low calibration_colors@cal_state
 10004   002B68  6E32               	movwf	sprintf@s^0,c
 10005   002B6A  0E56               	movlw	low STR_9
 10006   002B6C  6E33               	movwf	sprintf@fmt^0,c
 10007   002B6E  0EC3               	movlw	low STR_4
 10008   002B70  6E34               	movwf	(?_sprintf+2)^0,c
 10009   002B72  5034               	movf	(?_sprintf+2)^0,w,c
 10010   002B74  A4D8               	btfss	status,2,c
 10011   002B76  0E0E               	movlw	high __smallconst
 10012   002B78  6E35               	movwf	(?_sprintf+3)^0,c
 10013   002B7A  EC6E  F025         	call	_sprintf	;wreg free
 10014   002B7E                     
 10015                           ;calibration.c: 61:     sendStringSerial4(&cal_state);
 10016   002B7E  0E92               	movlw	low calibration_colors@cal_state
 10017   002B80  6E03               	movwf	sendStringSerial4@string^0,c
 10018   002B82  ECBB  F025         	call	_sendStringSerial4	;wreg free
 10019   002B86                     l780:
 10020                           
 10021                           ;calibration.c: 63:     while(PORTFbits.RF2 == 1){
 10022   002B86  B48E               	btfsc	142,2,c	;volatile
 10023   002B88  EFC8  F015         	goto	u5741
 10024   002B8C  EFCA  F015         	goto	u5740
 10025   002B90                     u5741:
 10026   002B90  EFC3  F015         	goto	l780
 10027   002B94                     u5740:
 10028   002B94                     
 10029                           ;calibration.c: 66:     LATGbits.LATG0 = 1;
 10030   002B94  807F               	bsf	127,0,c	;volatile
 10031                           
 10032                           ;calibration.c: 67:     LATEbits.LATE7 = 1;
 10033   002B96  8E7D               	bsf	125,7,c	;volatile
 10034                           
 10035                           ;calibration.c: 68:     LATAbits.LATA3 = 1;
 10036   002B98  8679               	bsf	121,3,c	;volatile
 10037   002B9A                     
 10038                           ;calibration.c: 69:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10039   002B9A  0E29               	movlw	41
 10040   002B9C  6E49               	movwf	(??_calibration_colors+1)^0,c
 10041   002B9E  0E96               	movlw	150
 10042   002BA0  6E48               	movwf	??_calibration_colors^0,c
 10043   002BA2  0E7F               	movlw	127
 10044   002BA4                     u6307:
 10045   002BA4  2EE8               	decfsz	wreg,f,c
 10046   002BA6  D7FE               	bra	u6307
 10047   002BA8  2E48               	decfsz	??_calibration_colors^0,f,c
 10048   002BAA  D7FC               	bra	u6307
 10049   002BAC  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
 10050   002BAE  D7FA               	bra	u6307
 10051   002BB0  0000               	nop	
 10052   002BB2                     
 10053                           ;calibration.c: 70:     (cCal->clear) = color_read_Clear();
 10054   002BB2  ECB5  F022         	call	_color_read_Clear	;wreg free
 10055   002BB6  5047               	movf	calibration_colors@cCal^0,w,c
 10056   002BB8  6ED9               	movwf	fsr2l,c
 10057   002BBA  6ADA               	clrf	fsr2h,c
 10058   002BBC  0E06               	movlw	6
 10059   002BBE  26D9               	addwf	fsr2l,f,c
 10060   002BC0  C006  FFDE         	movff	?_color_read_Clear,postinc2
 10061   002BC4  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
 10062   002BC8                     
 10063                           ;calibration.c: 71:     LATGbits.LATG0 = 0;
 10064   002BC8  907F               	bcf	127,0,c	;volatile
 10065   002BCA                     
 10066                           ;calibration.c: 72:     LATEbits.LATE7 = 0;
 10067   002BCA  9E7D               	bcf	125,7,c	;volatile
 10068   002BCC                     
 10069                           ;calibration.c: 73:     LATAbits.LATA3 = 0;
 10070   002BCC  9679               	bcf	121,3,c	;volatile
 10071   002BCE                     
 10072                           ;calibration.c: 75:     sprintf(cal_state,"Calibration state =  ambient", ".");
 10073   002BCE  0E92               	movlw	low calibration_colors@cal_state
 10074   002BD0  6E32               	movwf	sprintf@s^0,c
 10075   002BD2  0E1E               	movlw	low STR_11
 10076   002BD4  6E33               	movwf	sprintf@fmt^0,c
 10077   002BD6  0EC3               	movlw	low STR_4
 10078   002BD8  6E34               	movwf	(?_sprintf+2)^0,c
 10079   002BDA  5034               	movf	(?_sprintf+2)^0,w,c
 10080   002BDC  A4D8               	btfss	status,2,c
 10081   002BDE  0E0E               	movlw	high __smallconst
 10082   002BE0  6E35               	movwf	(?_sprintf+3)^0,c
 10083   002BE2  EC6E  F025         	call	_sprintf	;wreg free
 10084   002BE6                     
 10085                           ;calibration.c: 76:     sendStringSerial4(&cal_state);
 10086   002BE6  0E92               	movlw	low calibration_colors@cal_state
 10087   002BE8  6E03               	movwf	sendStringSerial4@string^0,c
 10088   002BEA  ECBB  F025         	call	_sendStringSerial4	;wreg free
 10089   002BEE                     l783:
 10090                           
 10091                           ;calibration.c: 78:     while(PORTFbits.RF2 == 1){
 10092   002BEE  B48E               	btfsc	142,2,c	;volatile
 10093   002BF0  EFFC  F015         	goto	u5751
 10094   002BF4  EFFE  F015         	goto	u5750
 10095   002BF8                     u5751:
 10096   002BF8  EFF7  F015         	goto	l783
 10097   002BFC                     u5750:
 10098   002BFC                     
 10099                           ;calibration.c: 81:     LATGbits.LATG0 = 1;
 10100   002BFC  807F               	bsf	127,0,c	;volatile
 10101                           
 10102                           ;calibration.c: 82:     LATEbits.LATE7 = 1;
 10103   002BFE  8E7D               	bsf	125,7,c	;volatile
 10104                           
 10105                           ;calibration.c: 83:     LATAbits.LATA3 = 1;
 10106   002C00  8679               	bsf	121,3,c	;volatile
 10107   002C02                     
 10108                           ;calibration.c: 84:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10109   002C02  0E29               	movlw	41
 10110   002C04  6E49               	movwf	(??_calibration_colors+1)^0,c
 10111   002C06  0E96               	movlw	150
 10112   002C08  6E48               	movwf	??_calibration_colors^0,c
 10113   002C0A  0E7F               	movlw	127
 10114   002C0C                     u6317:
 10115   002C0C  2EE8               	decfsz	wreg,f,c
 10116   002C0E  D7FE               	bra	u6317
 10117   002C10  2E48               	decfsz	??_calibration_colors^0,f,c
 10118   002C12  D7FC               	bra	u6317
 10119   002C14  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
 10120   002C16  D7FA               	bra	u6317
 10121   002C18  0000               	nop	
 10122   002C1A                     
 10123                           ;calibration.c: 85:     (cCal->ambient) = color_read_Clear();
 10124   002C1A  ECB5  F022         	call	_color_read_Clear	;wreg free
 10125   002C1E  5047               	movf	calibration_colors@cCal^0,w,c
 10126   002C20  6ED9               	movwf	fsr2l,c
 10127   002C22  6ADA               	clrf	fsr2h,c
 10128   002C24  0E08               	movlw	8
 10129   002C26  26D9               	addwf	fsr2l,f,c
 10130   002C28  C006  FFDE         	movff	?_color_read_Clear,postinc2
 10131   002C2C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
 10132   002C30                     
 10133                           ;calibration.c: 86:     LATGbits.LATG0 = 0;
 10134   002C30  907F               	bcf	127,0,c	;volatile
 10135   002C32                     
 10136                           ;calibration.c: 87:     LATEbits.LATE7 = 0;
 10137   002C32  9E7D               	bcf	125,7,c	;volatile
 10138   002C34                     
 10139                           ;calibration.c: 88:     LATAbits.LATA3 = 0;
 10140   002C34  9679               	bcf	121,3,c	;volatile
 10141   002C36                     
 10142                           ;calibration.c: 92:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
 10143   002C36  0E92               	movlw	low calibration_colors@cal_state
 10144   002C38  6E32               	movwf	sprintf@s^0,c
 10145   002C3A  0E71               	movlw	low STR_13
 10146   002C3C  6E33               	movwf	sprintf@fmt^0,c
 10147   002C3E  0EC3               	movlw	low STR_4
 10148   002C40  6E34               	movwf	(?_sprintf+2)^0,c
 10149   002C42  5034               	movf	(?_sprintf+2)^0,w,c
 10150   002C44  A4D8               	btfss	status,2,c
 10151   002C46  0E0E               	movlw	high __smallconst
 10152   002C48  6E35               	movwf	(?_sprintf+3)^0,c
 10153   002C4A  EC6E  F025         	call	_sprintf	;wreg free
 10154   002C4E                     
 10155                           ;calibration.c: 93:     sendStringSerial4(&cal_state);
 10156   002C4E  0E92               	movlw	low calibration_colors@cal_state
 10157   002C50  6E03               	movwf	sendStringSerial4@string^0,c
 10158   002C52  ECBB  F025         	call	_sendStringSerial4	;wreg free
 10159   002C56                     
 10160                           ;calibration.c: 94:     send2USART(colorCalibration.ambient);
 10161   002C56  C0DB  F045         	movff	_colorCalibration+8,send2USART@hue
 10162   002C5A  C0DC  F046         	movff	_colorCalibration+9,send2USART@hue+1
 10163   002C5E  EC5F  F026         	call	_send2USART	;wreg free
 10164   002C62                     l786:
 10165                           
 10166                           ;calibration.c: 96:     while(PORTFbits.RF2 == 1){
 10167   002C62  B48E               	btfsc	142,2,c	;volatile
 10168   002C64  EF36  F016         	goto	u5761
 10169   002C68  EF38  F016         	goto	u5760
 10170   002C6C                     u5761:
 10171   002C6C  EF31  F016         	goto	l786
 10172   002C70                     u5760:
 10173   002C70                     
 10174                           ;calibration.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10175   002C70  0E29               	movlw	41
 10176   002C72  6E49               	movwf	(??_calibration_colors+1)^0,c
 10177   002C74  0E96               	movlw	150
 10178   002C76  6E48               	movwf	??_calibration_colors^0,c
 10179   002C78  0E7F               	movlw	127
 10180   002C7A                     u6327:
 10181   002C7A  2EE8               	decfsz	wreg,f,c
 10182   002C7C  D7FE               	bra	u6327
 10183   002C7E  2E48               	decfsz	??_calibration_colors^0,f,c
 10184   002C80  D7FC               	bra	u6327
 10185   002C82  2E49               	decfsz	(??_calibration_colors+1)^0,f,c
 10186   002C84  D7FA               	bra	u6327
 10187   002C86  0000               	nop	
 10188   002C88  0012               	return		;funcret
 10189   002C8A                     __end_of_calibration_colors:
 10190                           	callstack 0
 10191                           
 10192 ;; *************** function _send2USART *****************
 10193 ;; Defined at:
 10194 ;;		line 146 in file "serial.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;  hue             2   68[COMRAM] unsigned int 
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  1    wreg      void 
 10201 ;; Registers used:
 10202 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10208 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10209 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10211 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10212 ;;Total ram usage:       52 bytes
 10213 ;; Hardware stack levels used: 1
 10214 ;; Hardware stack levels required when called: 9
 10215 ;; This function calls:
 10216 ;;		_sendStringSerial4
 10217 ;;		_sprintf
 10218 ;; This function is called by:
 10219 ;;		_main
 10220 ;;		_calibration_colors
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text49
 10225   004CBE                     __ptext49:
 10226                           	callstack 0
 10227   004CBE                     _send2USART:
 10228                           	callstack 21
 10229   004CBE                     
 10230                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
 10231   004CBE  0E60               	movlw	low send2USART@hue_char
 10232   004CC0  6E32               	movwf	sprintf@s^0,c
 10233   004CC2  0EB7               	movlw	low STR_2
 10234   004CC4  6E33               	movwf	sprintf@fmt^0,c
 10235   004CC6  C045  F034         	movff	send2USART@hue,?_sprintf+2
 10236   004CCA  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
 10237   004CCE  EC6E  F025         	call	_sprintf	;wreg free
 10238   004CD2                     
 10239                           ;serial.c: 158:         sendStringSerial4(hue_char);
 10240   004CD2  0E60               	movlw	low send2USART@hue_char
 10241   004CD4  6E03               	movwf	sendStringSerial4@string^0,c
 10242   004CD6  ECBB  F025         	call	_sendStringSerial4	;wreg free
 10243   004CDA  0012               	return		;funcret
 10244   004CDC                     __end_of_send2USART:
 10245                           	callstack 0
 10246                           
 10247 ;; *************** function _sprintf *****************
 10248 ;; Defined at:
 10249 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  s               1   49[COMRAM] PTR unsigned char 
 10252 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 10253 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
 10254 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10255 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;  f              12   56[COMRAM] struct _IO_FILE
 10258 ;;  ret             2    0        int 
 10259 ;;  ap              1   55[COMRAM] PTR void [1]
 10260 ;;		 -> ?_sprintf(2), 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;                  2   49[COMRAM] int 
 10263 ;; Registers used:
 10264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10270 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10271 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10273 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10274 ;;Total ram usage:       19 bytes
 10275 ;; Hardware stack levels used: 1
 10276 ;; Hardware stack levels required when called: 8
 10277 ;; This function calls:
 10278 ;;		_vfprintf
 10279 ;; This function is called by:
 10280 ;;		_send2USART
 10281 ;;		_calibration_colors
 10282 ;;		_ADC2String
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           	psect	text50
 10287   004ADC                     __ptext50:
 10288                           	callstack 0
 10289   004ADC                     _sprintf:
 10290                           	callstack 21
 10291   004ADC  0E34               	movlw	low (?_sprintf+2)
 10292   004ADE  6E38               	movwf	sprintf@ap^0,c
 10293   004AE0  C032  F039         	movff	sprintf@s,sprintf@f
 10294   004AE4  0E00               	movlw	0
 10295   004AE6  6E3D               	movwf	(sprintf@f+4)^0,c
 10296   004AE8  0E00               	movlw	0
 10297   004AEA  6E3C               	movwf	(sprintf@f+3)^0,c
 10298   004AEC  0E00               	movlw	0
 10299   004AEE  6E44               	movwf	(sprintf@f+11)^0,c
 10300   004AF0  0E00               	movlw	0
 10301   004AF2  6E43               	movwf	(sprintf@f+10)^0,c
 10302   004AF4  0E39               	movlw	low sprintf@f
 10303   004AF6  6E2E               	movwf	vfprintf@fp^0,c
 10304   004AF8  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
 10305   004AFC  0E38               	movlw	low sprintf@ap
 10306   004AFE  6E30               	movwf	vfprintf@ap^0,c
 10307   004B00  ECEE  F023         	call	_vfprintf	;wreg free
 10308   004B04  5032               	movf	sprintf@s^0,w,c
 10309   004B06  243C               	addwf	(sprintf@f+3)^0,w,c
 10310   004B08  6ED9               	movwf	fsr2l,c
 10311   004B0A  6ADA               	clrf	fsr2h,c
 10312   004B0C  6ADF               	clrf	indf2,c
 10313   004B0E  0012               	return		;funcret
 10314   004B10                     __end_of_sprintf:
 10315                           	callstack 0
 10316                           
 10317 ;; *************** function _vfprintf *****************
 10318 ;; Defined at:
 10319 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
 10322 ;;		 -> sprintf@f(12), 
 10323 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
 10324 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10325 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10326 ;;  ap              1   47[COMRAM] PTR PTR void 
 10327 ;;		 -> sprintf@ap(1), 
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
 10330 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10331 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  2   45[COMRAM] int 
 10334 ;; Registers used:
 10335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10341 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10344 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10345 ;;Total ram usage:        4 bytes
 10346 ;; Hardware stack levels used: 1
 10347 ;; Hardware stack levels required when called: 7
 10348 ;; This function calls:
 10349 ;;		_vfpfcnvrt
 10350 ;; This function is called by:
 10351 ;;		_sprintf
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           	psect	text51
 10356   0047DC                     __ptext51:
 10357                           	callstack 0
 10358   0047DC                     _vfprintf:
 10359                           	callstack 21
 10360   0047DC                     
 10361                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
 10362   0047DC  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
 10363                           
 10364                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10365   0047E0  EFFA  F023         	goto	l6036
 10366   0047E4                     l6034:
 10367                           
 10368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
 10369   0047E4  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
 10370   0047E8  0E31               	movlw	low vfprintf@cfmt
 10371   0047EA  6E24               	movwf	vfpfcnvrt@fmt^0,c
 10372   0047EC  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
 10373   0047F0  EC1F  F017         	call	_vfpfcnvrt	;wreg free
 10374   0047F4                     l6036:
 10375                           
 10376                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10377   0047F4  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
 10378   0047F8                     	if	1	;There is more than 1 active tblptr byte
 10379   0047F8  0E0E               	movlw	high __smallconst
 10380   0047FA  6EF7               	movwf	tblptrh,c
 10381   0047FC                     	endif
 10382   0047FC                     	if	0	;tblptru may be non-zero
 10383   0047FC                     	endif
 10384   0047FC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10385   0047FC  0E00               	movlw	low (__smallconst shr (0+16))
 10386   0047FE  6EF8               	movwf	tblptru,c
 10387   004800                     	endif
 10388   004800  0008               	tblrd		*
 10389   004802  50F5               	movf	tablat,w,c
 10390   004804  0900               	iorlw	0
 10391   004806  A4D8               	btfss	status,2,c
 10392   004808  EF08  F024         	goto	u5411
 10393   00480C  EF0A  F024         	goto	u5410
 10394   004810                     u5411:
 10395   004810  EFF2  F023         	goto	l6034
 10396   004814                     u5410:
 10397   004814                     
 10398                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
 10399   004814  0E00               	movlw	0
 10400   004816  6E2F               	movwf	(?_vfprintf+1)^0,c
 10401   004818  0E00               	movlw	0
 10402   00481A  6E2E               	movwf	?_vfprintf^0,c
 10403   00481C  0012               	return		;funcret
 10404   00481E                     __end_of_vfprintf:
 10405                           	callstack 0
 10406                           
 10407 ;; *************** function _vfpfcnvrt *****************
 10408 ;; Defined at:
 10409 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
 10412 ;;		 -> sprintf@f(12), 
 10413 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
 10414 ;;		 -> vfprintf@cfmt(1), 
 10415 ;;  ap              1   36[COMRAM] PTR PTR void 
 10416 ;;		 -> sprintf@ap(1), 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  convarg         4   39[COMRAM] struct .
 10419 ;;  cp              1   44[COMRAM] PTR unsigned char 
 10420 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10421 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10422 ;;  done            1   43[COMRAM] _Bool 
 10423 ;;  c               1    0        unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10433 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10434 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10436 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10437 ;;Total ram usage:       11 bytes
 10438 ;; Hardware stack levels used: 1
 10439 ;; Hardware stack levels required when called: 6
 10440 ;; This function calls:
 10441 ;;		_dtoa
 10442 ;;		_fputc
 10443 ;;		_read_prec_or_width
 10444 ;; This function is called by:
 10445 ;;		_vfprintf
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           	psect	text52
 10450   002E3E                     __ptext52:
 10451                           	callstack 0
 10452   002E3E                     _vfpfcnvrt:
 10453                           	callstack 21
 10454   002E3E                     
 10455                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
 10456   002E3E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10457   002E40  6ED9               	movwf	fsr2l,c
 10458   002E42  6ADA               	clrf	fsr2h,c
 10459   002E44  CFDF FFF6          	movff	indf2,tblptrl
 10460   002E48                     	if	1	;There is more than 1 active tblptr byte
 10461   002E48  0E0E               	movlw	high __smallconst
 10462   002E4A  6EF7               	movwf	tblptrh,c
 10463   002E4C                     	endif
 10464   002E4C                     	if	0	;tblptru may be non-zero
 10465   002E4C                     	endif
 10466   002E4C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10467   002E4C  0E00               	movlw	low (__smallconst shr (0+16))
 10468   002E4E  6EF8               	movwf	tblptru,c
 10469   002E50                     	endif
 10470   002E50  0008               	tblrd		*
 10471   002E52  50F5               	movf	tablat,w,c
 10472   002E54  0A25               	xorlw	37
 10473   002E56  A4D8               	btfss	status,2,c
 10474   002E58  EF30  F017         	goto	u5261
 10475   002E5C  EF32  F017         	goto	u5260
 10476   002E60                     u5261:
 10477   002E60  EFCF  F017         	goto	l5926
 10478   002E64                     u5260:
 10479   002E64                     
 10480                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
 10481   002E64  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10482   002E66  6ED9               	movwf	fsr2l,c
 10483   002E68  6ADA               	clrf	fsr2h,c
 10484   002E6A  2ADF               	incf	indf2,f,c
 10485   002E6C                     
 10486                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
 10487   002E6C  0E00               	movlw	0
 10488   002E6E  0100               	movlb	0	; () banked
 10489   002E70  6FC1               	movwf	(_width+1)& (0+255),b
 10490   002E72  0E00               	movlw	0
 10491   002E74  6FC0               	movwf	_width& (0+255),b
 10492   002E76  C0C0  F0C4         	movff	_width,_flags
 10493   002E7A                     
 10494                           ; BSR set to: 0
 10495                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
 10496   002E7A  69C2               	setf	_prec& (0+255),b
 10497   002E7C  69C3               	setf	(_prec+1)& (0+255),b
 10498   002E7E                     
 10499                           ; BSR set to: 0
 10500                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
 10501   002E7E  0E00               	movlw	0
 10502   002E80  6E2C               	movwf	vfpfcnvrt@done^0,c
 10503                           
 10504                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10505   002E82  EF6A  F017         	goto	l5900
 10506   002E86                     l5890:
 10507                           
 10508                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
 10509   002E86  0100               	movlb	0	; () banked
 10510   002E88  83C4               	bsf	_flags& (0+255),1,b
 10511   002E8A                     
 10512                           ; BSR set to: 0
 10513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
 10514   002E8A  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10515   002E8C  6ED9               	movwf	fsr2l,c
 10516   002E8E  6ADA               	clrf	fsr2h,c
 10517   002E90  2ADF               	incf	indf2,f,c
 10518                           
 10519                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
 10520   002E92  EF6A  F017         	goto	l5900
 10521   002E96                     l5894:
 10522                           
 10523                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
 10524   002E96  0E01               	movlw	1
 10525   002E98  6E2C               	movwf	vfpfcnvrt@done^0,c
 10526                           
 10527                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
 10528   002E9A  EF6A  F017         	goto	l5900
 10529   002E9E                     l5898:
 10530   002E9E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10531   002EA0  6ED9               	movwf	fsr2l,c
 10532   002EA2  6ADA               	clrf	fsr2h,c
 10533   002EA4  CFDF FFF6          	movff	indf2,tblptrl
 10534   002EA8                     	if	1	;There is more than 1 active tblptr byte
 10535   002EA8  0E0E               	movlw	high __smallconst
 10536   002EAA  6EF7               	movwf	tblptrh,c
 10537   002EAC                     	endif
 10538   002EAC                     	if	0	;tblptru may be non-zero
 10539   002EAC                     	endif
 10540   002EAC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10541   002EAC  0E00               	movlw	low (__smallconst shr (0+16))
 10542   002EAE  6EF8               	movwf	tblptru,c
 10543   002EB0                     	endif
 10544   002EB0  0008               	tblrd		*
 10545   002EB2  50F5               	movf	tablat,w,c
 10546   002EB4  6E26               	movwf	??_vfpfcnvrt^0,c
 10547   002EB6  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
 10548                           
 10549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10550                           ; Switch size 1, requested type "simple"
 10551                           ; Number of cases is 1, Range of values is 0 to 0
 10552                           ; switch strategies available:
 10553                           ; Name         Instructions Cycles
 10554                           ; simple_byte            4     3 (average)
 10555                           ;	Chosen strategy is simple_byte
 10556   002EB8  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
 10557   002EBA  0A00               	xorlw	0	; case 0
 10558   002EBC  B4D8               	btfsc	status,2,c
 10559   002EBE  EF63  F017         	goto	l6794
 10560   002EC2  EF4B  F017         	goto	l5894
 10561   002EC6                     l6794:
 10562                           
 10563                           ; Switch size 1, requested type "simple"
 10564                           ; Number of cases is 1, Range of values is 48 to 48
 10565                           ; switch strategies available:
 10566                           ; Name         Instructions Cycles
 10567                           ; simple_byte            4     3 (average)
 10568                           ;	Chosen strategy is simple_byte
 10569   002EC6  5026               	movf	??_vfpfcnvrt^0,w,c
 10570   002EC8  0A30               	xorlw	48	; case 48
 10571   002ECA  B4D8               	btfsc	status,2,c
 10572   002ECC  EF43  F017         	goto	l5890
 10573   002ED0  EF4B  F017         	goto	l5894
 10574   002ED4                     l5900:
 10575                           
 10576                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10577   002ED4  502C               	movf	vfpfcnvrt@done^0,w,c
 10578   002ED6  B4D8               	btfsc	status,2,c
 10579   002ED8  EF70  F017         	goto	u5271
 10580   002EDC  EF72  F017         	goto	u5270
 10581   002EE0                     u5271:
 10582   002EE0  EF4F  F017         	goto	l5898
 10583   002EE4                     u5270:
 10584   002EE4                     
 10585                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
 10586   002EE4  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
 10587   002EE8  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
 10588   002EEC  ECE6  F01E         	call	_read_prec_or_width	;wreg free
 10589   002EF0  C008  F0C0         	movff	?_read_prec_or_width,_width
 10590   002EF4  C009  F0C1         	movff	?_read_prec_or_width+1,_width+1
 10591   002EF8                     
 10592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
 10593   002EF8  0100               	movlb	0	; () banked
 10594   002EFA  BFC1               	btfsc	(_width+1)& (0+255),7,b
 10595   002EFC  EF84  F017         	goto	u5280
 10596   002F00  EF82  F017         	goto	u5281
 10597   002F04                     u5281:
 10598   002F04  EF89  F017         	goto	l5908
 10599   002F08                     u5280:
 10600   002F08                     
 10601                           ; BSR set to: 0
 10602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
 10603   002F08  81C4               	bsf	_flags& (0+255),0,b
 10604                           
 10605                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 10606   002F0A  6DC0               	negf	_width& (0+255),b
 10607   002F0C  1FC1               	comf	(_width+1)& (0+255),f,b
 10608   002F0E  B0D8               	btfsc	status,0,c
 10609   002F10  2BC1               	incf	(_width+1)& (0+255),f,b
 10610   002F12                     l5908:
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 10614   002F12  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10615   002F14  6ED9               	movwf	fsr2l,c
 10616   002F16  6ADA               	clrf	fsr2h,c
 10617   002F18  50DF               	movf	indf2,w,c
 10618   002F1A  6E2D               	movwf	vfpfcnvrt@cp^0,c
 10619   002F1C                     
 10620                           ; BSR set to: 0
 10621                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 10622   002F1C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10623   002F20                     	if	1	;There is more than 1 active tblptr byte
 10624   002F20  0E0E               	movlw	high __smallconst
 10625   002F22  6EF7               	movwf	tblptrh,c
 10626   002F24                     	endif
 10627   002F24                     	if	0	;tblptru may be non-zero
 10628   002F24                     	endif
 10629   002F24                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10630   002F24  0E00               	movlw	low (__smallconst shr (0+16))
 10631   002F26  6EF8               	movwf	tblptru,c
 10632   002F28                     	endif
 10633   002F28  0008               	tblrd		*
 10634   002F2A  50F5               	movf	tablat,w,c
 10635   002F2C  0A64               	xorlw	100
 10636   002F2E  B4D8               	btfsc	status,2,c
 10637   002F30  EF9C  F017         	goto	u5291
 10638   002F34  EF9E  F017         	goto	u5290
 10639   002F38                     u5291:
 10640   002F38  EFAE  F017         	goto	l5914
 10641   002F3C                     u5290:
 10642   002F3C                     
 10643                           ; BSR set to: 0
 10644   002F3C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10645   002F40                     	if	1	;There is more than 1 active tblptr byte
 10646   002F40  0E0E               	movlw	high __smallconst
 10647   002F42  6EF7               	movwf	tblptrh,c
 10648   002F44                     	endif
 10649   002F44                     	if	0	;tblptru may be non-zero
 10650   002F44                     	endif
 10651   002F44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10652   002F44  0E00               	movlw	low (__smallconst shr (0+16))
 10653   002F46  6EF8               	movwf	tblptru,c
 10654   002F48                     	endif
 10655   002F48  0008               	tblrd		*
 10656   002F4A  50F5               	movf	tablat,w,c
 10657   002F4C  0A69               	xorlw	105
 10658   002F4E  A4D8               	btfss	status,2,c
 10659   002F50  EFAC  F017         	goto	u5301
 10660   002F54  EFAE  F017         	goto	u5300
 10661   002F58                     u5301:
 10662   002F58  EFC9  F017         	goto	l5922
 10663   002F5C                     u5300:
 10664   002F5C                     l5914:
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 10668   002F5C  5025               	movf	vfpfcnvrt@ap^0,w,c
 10669   002F5E  6ED9               	movwf	fsr2l,c
 10670   002F60  6ADA               	clrf	fsr2h,c
 10671   002F62  0E02               	movlw	2
 10672   002F64  26DF               	addwf	indf2,f,c
 10673   002F66  5CDF               	subwf	indf2,w,c
 10674   002F68  6ED9               	movwf	fsr2l,c
 10675   002F6A  6ADA               	clrf	fsr2h,c
 10676   002F6C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 10677   002F70  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 10678   002F74                     
 10679                           ; BSR set to: 0
 10680                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 10681   002F74  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10682   002F76  6ED9               	movwf	fsr2l,c
 10683   002F78  6ADA               	clrf	fsr2h,c
 10684   002F7A  282D               	incf	vfpfcnvrt@cp^0,w,c
 10685   002F7C  6EDF               	movwf	indf2,c
 10686   002F7E                     
 10687                           ; BSR set to: 0
 10688                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10689   002F7E  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10690   002F82  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10691   002F86  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10692   002F8A  ECA2  F018         	call	_dtoa	;wreg free
 10693   002F8E  EFE2  F017         	goto	l1556
 10694   002F92                     l5922:
 10695                           
 10696                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10697   002F92  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10698   002F94  6ED9               	movwf	fsr2l,c
 10699   002F96  6ADA               	clrf	fsr2h,c
 10700   002F98  2ADF               	incf	indf2,f,c
 10701   002F9A  EFE2  F017         	goto	l1556
 10702   002F9E                     l5926:
 10703                           
 10704                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10705   002F9E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10706   002FA0  6ED9               	movwf	fsr2l,c
 10707   002FA2  6ADA               	clrf	fsr2h,c
 10708   002FA4  CFDF FFF6          	movff	indf2,tblptrl
 10709   002FA8                     	if	1	;There is more than 1 active tblptr byte
 10710   002FA8  0E0E               	movlw	high __smallconst
 10711   002FAA  6EF7               	movwf	tblptrh,c
 10712   002FAC                     	endif
 10713   002FAC                     	if	0	;tblptru may be non-zero
 10714   002FAC                     	endif
 10715   002FAC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10716   002FAC  0E00               	movlw	low (__smallconst shr (0+16))
 10717   002FAE  6EF8               	movwf	tblptru,c
 10718   002FB0                     	endif
 10719   002FB0  0008               	tblrd		*
 10720   002FB2  50F5               	movf	tablat,w,c
 10721   002FB4  6E02               	movwf	fputc@c^0,c
 10722   002FB6  6A03               	clrf	(fputc@c+1)^0,c
 10723   002FB8  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10724   002FBC  EC92  F01F         	call	_fputc	;wreg free
 10725   002FC0  EFC9  F017         	goto	l5922
 10726   002FC4                     l1556:
 10727   002FC4  0012               	return		;funcret
 10728   002FC6                     __end_of_vfpfcnvrt:
 10729                           	callstack 0
 10730                           
 10731 ;; *************** function _read_prec_or_width *****************
 10732 ;; Defined at:
 10733 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10736 ;;		 -> vfprintf@cfmt(1), 
 10737 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10738 ;;		 -> sprintf@ap(1), 
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  c               1    9[COMRAM] unsigned char 
 10741 ;;  n               2   10[COMRAM] int 
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  2    7[COMRAM] int 
 10744 ;; Registers used:
 10745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10751 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10752 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10754 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10755 ;;Total ram usage:        5 bytes
 10756 ;; Hardware stack levels used: 1
 10757 ;; Hardware stack levels required when called: 2
 10758 ;; This function calls:
 10759 ;;		___wmul
 10760 ;; This function is called by:
 10761 ;;		_vfpfcnvrt
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           	psect	text53
 10766   003DCC                     __ptext53:
 10767                           	callstack 0
 10768   003DCC                     _read_prec_or_width:
 10769                           	callstack 24
 10770   003DCC                     
 10771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10772   003DCC  0E00               	movlw	0
 10773   003DCE  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10774   003DD0  0E00               	movlw	0
 10775   003DD2  6E0B               	movwf	read_prec_or_width@n^0,c
 10776   003DD4                     
 10777                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10778   003DD4  5008               	movf	read_prec_or_width@fmt^0,w,c
 10779   003DD6  6ED9               	movwf	fsr2l,c
 10780   003DD8  6ADA               	clrf	fsr2h,c
 10781   003DDA  CFDF FFF6          	movff	indf2,tblptrl
 10782   003DDE                     	if	1	;There is more than 1 active tblptr byte
 10783   003DDE  0E0E               	movlw	high __smallconst
 10784   003DE0  6EF7               	movwf	tblptrh,c
 10785   003DE2                     	endif
 10786   003DE2                     	if	0	;tblptru may be non-zero
 10787   003DE2                     	endif
 10788   003DE2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10789   003DE2  0E00               	movlw	low (__smallconst shr (0+16))
 10790   003DE4  6EF8               	movwf	tblptru,c
 10791   003DE6                     	endif
 10792   003DE6  0008               	tblrd		*
 10793   003DE8  50F5               	movf	tablat,w,c
 10794   003DEA  0A2A               	xorlw	42
 10795   003DEC  A4D8               	btfss	status,2,c
 10796   003DEE  EFFB  F01E         	goto	u5221
 10797   003DF2  EFFD  F01E         	goto	u5220
 10798   003DF6                     u5221:
 10799   003DF6  EF23  F01F         	goto	l5862
 10800   003DFA                     u5220:
 10801   003DFA                     
 10802                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10803   003DFA  5008               	movf	read_prec_or_width@fmt^0,w,c
 10804   003DFC  6ED9               	movwf	fsr2l,c
 10805   003DFE  6ADA               	clrf	fsr2h,c
 10806   003E00  2ADF               	incf	indf2,f,c
 10807   003E02                     
 10808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10809   003E02  5009               	movf	read_prec_or_width@ap^0,w,c
 10810   003E04  6ED9               	movwf	fsr2l,c
 10811   003E06  6ADA               	clrf	fsr2h,c
 10812   003E08  0E02               	movlw	2
 10813   003E0A  26DF               	addwf	indf2,f,c
 10814   003E0C  5CDF               	subwf	indf2,w,c
 10815   003E0E  6ED9               	movwf	fsr2l,c
 10816   003E10  6ADA               	clrf	fsr2h,c
 10817   003E12  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10818   003E16  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10819                           
 10820                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10821   003E1A  EF38  F01F         	goto	l1537
 10822   003E1E                     l5858:
 10823                           
 10824                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10825   003E1E  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10826   003E22  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10827   003E26  0E00               	movlw	0
 10828   003E28  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10829   003E2A  0E0A               	movlw	10
 10830   003E2C  6E04               	movwf	___wmul@multiplicand^0,c
 10831   003E2E  EC2D  F026         	call	___wmul	;wreg free
 10832   003E32  500A               	movf	read_prec_or_width@c^0,w,c
 10833   003E34  2402               	addwf	?___wmul^0,w,c
 10834   003E36  6E0B               	movwf	read_prec_or_width@n^0,c
 10835   003E38  0E00               	movlw	0
 10836   003E3A  2003               	addwfc	(?___wmul+1)^0,w,c
 10837   003E3C  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10838   003E3E                     
 10839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10840   003E3E  5008               	movf	read_prec_or_width@fmt^0,w,c
 10841   003E40  6ED9               	movwf	fsr2l,c
 10842   003E42  6ADA               	clrf	fsr2h,c
 10843   003E44  2ADF               	incf	indf2,f,c
 10844   003E46                     l5862:
 10845                           
 10846                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10847   003E46  5008               	movf	read_prec_or_width@fmt^0,w,c
 10848   003E48  6ED9               	movwf	fsr2l,c
 10849   003E4A  6ADA               	clrf	fsr2h,c
 10850   003E4C  CFDF FFF6          	movff	indf2,tblptrl
 10851   003E50                     	if	1	;There is more than 1 active tblptr byte
 10852   003E50  0E0E               	movlw	high __smallconst
 10853   003E52  6EF7               	movwf	tblptrh,c
 10854   003E54                     	endif
 10855   003E54                     	if	0	;tblptru may be non-zero
 10856   003E54                     	endif
 10857   003E54                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10858   003E54  0E00               	movlw	low (__smallconst shr (0+16))
 10859   003E56  6EF8               	movwf	tblptru,c
 10860   003E58                     	endif
 10861   003E58  0008               	tblrd		*
 10862   003E5A  50F5               	movf	tablat,w,c
 10863   003E5C  0FD0               	addlw	208
 10864   003E5E  6E0A               	movwf	read_prec_or_width@c^0,c
 10865   003E60  0E09               	movlw	9
 10866   003E62  640A               	cpfsgt	read_prec_or_width@c^0,c
 10867   003E64  EF36  F01F         	goto	u5231
 10868   003E68  EF38  F01F         	goto	u5230
 10869   003E6C                     u5231:
 10870   003E6C  EF0F  F01F         	goto	l5858
 10871   003E70                     u5230:
 10872   003E70                     l1537:
 10873                           
 10874                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10875   003E70  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10876   003E74  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10877   003E78  0012               	return		;funcret
 10878   003E7A                     __end_of_read_prec_or_width:
 10879                           	callstack 0
 10880                           
 10881 ;; *************** function ___wmul *****************
 10882 ;; Defined at:
 10883 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;  multiplier      2    1[COMRAM] unsigned int 
 10886 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  product         2    5[COMRAM] unsigned int 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  2    1[COMRAM] unsigned int 
 10891 ;; Registers used:
 10892 ;;		wreg, status,2, status,0, prodl, prodh
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10901 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10902 ;;Total ram usage:        6 bytes
 10903 ;; Hardware stack levels used: 1
 10904 ;; Hardware stack levels required when called: 1
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		_setMotorPWM
 10909 ;;		_right90
 10910 ;;		_left90
 10911 ;;		_turn180
 10912 ;;		_right135
 10913 ;;		_left135
 10914 ;;		_read_prec_or_width
 10915 ;;		_ADC2String
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           	psect	text54
 10920   004C5A                     __ptext54:
 10921                           	callstack 0
 10922   004C5A                     ___wmul:
 10923                           	callstack 27
 10924   004C5A  5002               	movf	___wmul@multiplier^0,w,c
 10925   004C5C  0204               	mulwf	___wmul@multiplicand^0,c
 10926   004C5E  CFF3 F006          	movff	prodl,___wmul@product
 10927   004C62  CFF4 F007          	movff	prodh,___wmul@product+1
 10928   004C66  5002               	movf	___wmul@multiplier^0,w,c
 10929   004C68  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10930   004C6A  50F3               	movf	243,w,c
 10931   004C6C  2607               	addwf	(___wmul@product+1)^0,f,c
 10932   004C6E  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10933   004C70  0204               	mulwf	___wmul@multiplicand^0,c
 10934   004C72  50F3               	movf	243,w,c
 10935   004C74  2607               	addwf	(___wmul@product+1)^0,f,c
 10936   004C76  C006  F002         	movff	___wmul@product,?___wmul
 10937   004C7A  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10938   004C7E  0012               	return		;funcret
 10939   004C80                     __end_of___wmul:
 10940                           	callstack 0
 10941                           
 10942 ;; *************** function _dtoa *****************
 10943 ;; Defined at:
 10944 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10947 ;;		 -> sprintf@f(12), 
 10948 ;;  d               2   24[COMRAM] int 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  i               2   32[COMRAM] int 
 10951 ;;  w               2   29[COMRAM] int 
 10952 ;;  s               1   31[COMRAM] unsigned char 
 10953 ;;  p               1   28[COMRAM] _Bool 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10963 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10964 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10966 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10967 ;;Total ram usage:       11 bytes
 10968 ;; Hardware stack levels used: 1
 10969 ;; Hardware stack levels required when called: 5
 10970 ;; This function calls:
 10971 ;;		___awdiv
 10972 ;;		___awmod
 10973 ;;		_abs
 10974 ;;		_pad
 10975 ;; This function is called by:
 10976 ;;		_vfpfcnvrt
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text55
 10981   003144                     __ptext55:
 10982                           	callstack 0
 10983   003144                     _dtoa:
 10984                           	callstack 21
 10985   003144                     
 10986                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10987   003144  0E01               	movlw	1
 10988   003146  6E1D               	movwf	dtoa@p^0,c
 10989   003148                     
 10990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10991   003148  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10992   00314A  EFA9  F018         	goto	u5121
 10993   00314E  EFAC  F018         	goto	u5120
 10994   003152                     u5121:
 10995   003152  0E01               	movlw	1
 10996   003154  EFAD  F018         	goto	u5130
 10997   003158                     u5120:
 10998   003158  0E00               	movlw	0
 10999   00315A                     u5130:
 11000   00315A  6E20               	movwf	dtoa@s^0,c
 11001   00315C                     
 11002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 11003   00315C  C0C0  F01E         	movff	_width,dtoa@w
 11004   003160  C0C1  F01F         	movff	_width+1,dtoa@w+1
 11005   003164                     
 11006                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 11007   003164  5020               	movf	dtoa@s^0,w,c
 11008   003166  B4D8               	btfsc	status,2,c
 11009   003168  EFB8  F018         	goto	u5141
 11010   00316C  EFBA  F018         	goto	u5140
 11011   003170                     u5141:
 11012   003170  EFD1  F018         	goto	l1520
 11013   003174                     u5140:
 11014   003174                     
 11015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 11016   003174  061E               	decf	dtoa@w^0,f,c
 11017   003176  A0D8               	btfss	status,0,c
 11018   003178  061F               	decf	(dtoa@w+1)^0,f,c
 11019   00317A                     
 11020                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 11021   00317A  5020               	movf	dtoa@s^0,w,c
 11022   00317C  A4D8               	btfss	status,2,c
 11023   00317E  EFC3  F018         	goto	u5151
 11024   003182  EFC5  F018         	goto	u5150
 11025   003186                     u5151:
 11026   003186  EFCB  F018         	goto	l5814
 11027   00318A                     u5150:
 11028   00318A  0E00               	movlw	0
 11029   00318C  6E1C               	movwf	(_dtoa$3149+1)^0,c
 11030   00318E  0E2B               	movlw	43
 11031   003190  6E1B               	movwf	_dtoa$3149^0,c
 11032   003192  EFCF  F018         	goto	l5816
 11033   003196                     l5814:
 11034   003196  0E00               	movlw	0
 11035   003198  6E1C               	movwf	(_dtoa$3149+1)^0,c
 11036   00319A  0E2D               	movlw	45
 11037   00319C  6E1B               	movwf	_dtoa$3149^0,c
 11038   00319E                     l5816:
 11039   00319E  C01B  F020         	movff	_dtoa$3149,dtoa@s
 11040   0031A2                     l1520:
 11041                           
 11042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 11043   0031A2  0E00               	movlw	0
 11044   0031A4  6E22               	movwf	(dtoa@i+1)^0,c
 11045   0031A6  0E1F               	movlw	31
 11046   0031A8  6E21               	movwf	dtoa@i^0,c
 11047   0031AA                     
 11048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 11049   0031AA  0E00               	movlw	0
 11050   0031AC  0101               	movlb	1	; () banked
 11051   0031AE  6FB5               	movwf	(_dbuf+31)& (0+255),b
 11052                           
 11053                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 11054   0031B0  EF09  F019         	goto	l5830
 11055   0031B4                     l5820:
 11056                           
 11057                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 11058   0031B4  0621               	decf	dtoa@i^0,f,c
 11059   0031B6  A0D8               	btfss	status,0,c
 11060   0031B8  0622               	decf	(dtoa@i+1)^0,f,c
 11061   0031BA                     
 11062                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 11063   0031BA  0E96               	movlw	low _dbuf
 11064   0031BC  2421               	addwf	dtoa@i^0,w,c
 11065   0031BE  6ED9               	movwf	fsr2l,c
 11066   0031C0  0E01               	movlw	high _dbuf
 11067   0031C2  2022               	addwfc	(dtoa@i+1)^0,w,c
 11068   0031C4  6EDA               	movwf	fsr2h,c
 11069   0031C6  C019  F002         	movff	dtoa@d,___awmod@dividend
 11070   0031CA  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 11071   0031CE  0E00               	movlw	0
 11072   0031D0  6E05               	movwf	(___awmod@divisor+1)^0,c
 11073   0031D2  0E0A               	movlw	10
 11074   0031D4  6E04               	movwf	___awmod@divisor^0,c
 11075   0031D6  EC8E  F01E         	call	___awmod	;wreg free
 11076   0031DA  C002  F008         	movff	?___awmod,abs@a
 11077   0031DE  C003  F009         	movff	?___awmod+1,abs@a+1
 11078   0031E2  EC88  F025         	call	_abs	;wreg free
 11079   0031E6  5008               	movf	?_abs^0,w,c
 11080   0031E8  0F30               	addlw	48
 11081   0031EA  6EDF               	movwf	indf2,c
 11082   0031EC                     
 11083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 11084   0031EC  0E00               	movlw	0
 11085   0031EE  6E1D               	movwf	dtoa@p^0,c
 11086   0031F0                     
 11087                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 11088   0031F0  061E               	decf	dtoa@w^0,f,c
 11089   0031F2  A0D8               	btfss	status,0,c
 11090   0031F4  061F               	decf	(dtoa@w+1)^0,f,c
 11091   0031F6                     
 11092                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 11093   0031F6  C019  F002         	movff	dtoa@d,___awdiv@dividend
 11094   0031FA  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 11095   0031FE  0E00               	movlw	0
 11096   003200  6E05               	movwf	(___awdiv@divisor+1)^0,c
 11097   003202  0E0A               	movlw	10
 11098   003204  6E04               	movwf	___awdiv@divisor^0,c
 11099   003206  EC2C  F01E         	call	___awdiv	;wreg free
 11100   00320A  C002  F019         	movff	?___awdiv,dtoa@d
 11101   00320E  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 11102   003212                     l5830:
 11103                           
 11104                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 11105   003212  BE22               	btfsc	(dtoa@i+1)^0,7,c
 11106   003214  EF14  F019         	goto	u5161
 11107   003218  5022               	movf	(dtoa@i+1)^0,w,c
 11108   00321A  E108               	bnz	u5160
 11109   00321C  0421               	decf	dtoa@i^0,w,c
 11110   00321E  A0D8               	btfss	status,0,c
 11111   003220  EF14  F019         	goto	u5161
 11112   003224  EF16  F019         	goto	u5160
 11113   003228                     u5161:
 11114   003228  EF3C  F019         	goto	l5840
 11115   00322C                     u5160:
 11116   00322C  5019               	movf	dtoa@d^0,w,c
 11117   00322E  101A               	iorwf	(dtoa@d+1)^0,w,c
 11118   003230  A4D8               	btfss	status,2,c
 11119   003232  EF1D  F019         	goto	u5171
 11120   003236  EF1F  F019         	goto	u5170
 11121   00323A                     u5171:
 11122   00323A  EFDA  F018         	goto	l5820
 11123   00323E                     u5170:
 11124   00323E  501D               	movf	dtoa@p^0,w,c
 11125   003240  A4D8               	btfss	status,2,c
 11126   003242  EF25  F019         	goto	u5181
 11127   003246  EF27  F019         	goto	u5180
 11128   00324A                     u5181:
 11129   00324A  EFDA  F018         	goto	l5820
 11130   00324E                     u5180:
 11131   00324E  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 11132   003250  EF32  F019         	goto	u5191
 11133   003254  501F               	movf	(dtoa@w+1)^0,w,c
 11134   003256  E108               	bnz	u5190
 11135   003258  041E               	decf	dtoa@w^0,w,c
 11136   00325A  A0D8               	btfss	status,0,c
 11137   00325C  EF32  F019         	goto	u5191
 11138   003260  EF34  F019         	goto	u5190
 11139   003264                     u5191:
 11140   003264  EF3C  F019         	goto	l5840
 11141   003268                     u5190:
 11142   003268  0100               	movlb	0	; () banked
 11143   00326A  B3C4               	btfsc	_flags& (0+255),1,b
 11144   00326C  EF3A  F019         	goto	u5201
 11145   003270  EF3C  F019         	goto	u5200
 11146   003274                     u5201:
 11147   003274  EFDA  F018         	goto	l5820
 11148   003278                     u5200:
 11149   003278                     l5840:
 11150                           
 11151                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 11152   003278  5020               	movf	dtoa@s^0,w,c
 11153   00327A  B4D8               	btfsc	status,2,c
 11154   00327C  EF42  F019         	goto	u5211
 11155   003280  EF44  F019         	goto	u5210
 11156   003284                     u5211:
 11157   003284  EF4F  F019         	goto	l5846
 11158   003288                     u5210:
 11159   003288                     
 11160                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 11161   003288  0621               	decf	dtoa@i^0,f,c
 11162   00328A  A0D8               	btfss	status,0,c
 11163   00328C  0622               	decf	(dtoa@i+1)^0,f,c
 11164   00328E                     
 11165                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 11166   00328E  0E96               	movlw	low _dbuf
 11167   003290  2421               	addwf	dtoa@i^0,w,c
 11168   003292  6ED9               	movwf	fsr2l,c
 11169   003294  0E01               	movlw	high _dbuf
 11170   003296  2022               	addwfc	(dtoa@i+1)^0,w,c
 11171   003298  6EDA               	movwf	fsr2h,c
 11172   00329A  C020  FFDF         	movff	dtoa@s,indf2
 11173   00329E                     l5846:
 11174                           
 11175                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 11176   00329E  C018  F010         	movff	dtoa@fp,pad@fp
 11177   0032A2  0E96               	movlw	low _dbuf
 11178   0032A4  2421               	addwf	dtoa@i^0,w,c
 11179   0032A6  6E11               	movwf	pad@buf^0,c
 11180   0032A8  0E01               	movlw	high _dbuf
 11181   0032AA  2022               	addwfc	(dtoa@i+1)^0,w,c
 11182   0032AC  6E12               	movwf	(pad@buf+1)^0,c
 11183   0032AE  C01E  F013         	movff	dtoa@w,pad@p
 11184   0032B2  C01F  F014         	movff	dtoa@w+1,pad@p+1
 11185   0032B6  EC36  F020         	call	_pad	;wreg free
 11186   0032BA  0012               	return		;funcret
 11187   0032BC                     __end_of_dtoa:
 11188                           	callstack 0
 11189                           
 11190 ;; *************** function _pad *****************
 11191 ;; Defined at:
 11192 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 11195 ;;		 -> sprintf@f(12), 
 11196 ;;  buf             2   16[COMRAM] PTR unsigned char 
 11197 ;;		 -> dbuf(32), 
 11198 ;;  p               2   18[COMRAM] int 
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  i               2   21[COMRAM] int 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      void 
 11203 ;; Registers used:
 11204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11210 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11213 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11214 ;;Total ram usage:        8 bytes
 11215 ;; Hardware stack levels used: 1
 11216 ;; Hardware stack levels required when called: 4
 11217 ;; This function calls:
 11218 ;;		_fputc
 11219 ;;		_fputs
 11220 ;; This function is called by:
 11221 ;;		_dtoa
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           	psect	text56
 11226   00406C                     __ptext56:
 11227                           	callstack 0
 11228   00406C                     _pad:
 11229                           	callstack 21
 11230   00406C                     
 11231                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 11232   00406C  0100               	movlb	0	; () banked
 11233   00406E  A1C4               	btfss	_flags& (0+255),0,b
 11234   004070  EF3C  F020         	goto	u5071
 11235   004074  EF3E  F020         	goto	u5070
 11236   004078                     u5071:
 11237   004078  EF46  F020         	goto	l5784
 11238   00407C                     u5070:
 11239   00407C                     
 11240                           ; BSR set to: 0
 11241                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 11242   00407C  C011  F00A         	movff	pad@buf,fputs@s
 11243   004080  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11244   004084  C010  F00C         	movff	pad@fp,fputs@fp
 11245   004088  EC30  F024         	call	_fputs	;wreg free
 11246   00408C                     l5784:
 11247                           
 11248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 11249   00408C  BE14               	btfsc	(pad@p+1)^0,7,c
 11250   00408E  EF4D  F020         	goto	u5080
 11251   004092  EF4B  F020         	goto	u5081
 11252   004096                     u5081:
 11253   004096  EF51  F020         	goto	l1512
 11254   00409A                     u5080:
 11255   00409A                     
 11256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 11257   00409A  0E00               	movlw	0
 11258   00409C  6E14               	movwf	(pad@p+1)^0,c
 11259   00409E  0E00               	movlw	0
 11260   0040A0  6E13               	movwf	pad@p^0,c
 11261   0040A2                     l1512:
 11262                           
 11263                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 11264   0040A2  0E00               	movlw	0
 11265   0040A4  6E17               	movwf	(pad@i+1)^0,c
 11266   0040A6  0E00               	movlw	0
 11267   0040A8  6E16               	movwf	pad@i^0,c
 11268                           
 11269                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 11270   0040AA  EF61  F020         	goto	l5792
 11271   0040AE                     l5788:
 11272                           
 11273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 11274   0040AE  0E00               	movlw	0
 11275   0040B0  6E03               	movwf	(fputc@c+1)^0,c
 11276   0040B2  0E20               	movlw	32
 11277   0040B4  6E02               	movwf	fputc@c^0,c
 11278   0040B6  C010  F004         	movff	pad@fp,fputc@fp
 11279   0040BA  EC92  F01F         	call	_fputc	;wreg free
 11280   0040BE                     
 11281                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 11282   0040BE  4A16               	infsnz	pad@i^0,f,c
 11283   0040C0  2A17               	incf	(pad@i+1)^0,f,c
 11284   0040C2                     l5792:
 11285                           
 11286                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 11287   0040C2  5013               	movf	pad@p^0,w,c
 11288   0040C4  5C16               	subwf	pad@i^0,w,c
 11289   0040C6  5017               	movf	(pad@i+1)^0,w,c
 11290   0040C8  0A80               	xorlw	128
 11291   0040CA  6E15               	movwf	??_pad^0,c
 11292   0040CC  5014               	movf	(pad@p+1)^0,w,c
 11293   0040CE  0A80               	xorlw	128
 11294   0040D0  5815               	subwfb	??_pad^0,w,c
 11295   0040D2  A0D8               	btfss	status,0,c
 11296   0040D4  EF6E  F020         	goto	u5091
 11297   0040D8  EF70  F020         	goto	u5090
 11298   0040DC                     u5091:
 11299   0040DC  EF57  F020         	goto	l5788
 11300   0040E0                     u5090:
 11301   0040E0                     
 11302                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 11303   0040E0  0100               	movlb	0	; () banked
 11304   0040E2  B1C4               	btfsc	_flags& (0+255),0,b
 11305   0040E4  EF76  F020         	goto	u5101
 11306   0040E8  EF78  F020         	goto	u5100
 11307   0040EC                     u5101:
 11308   0040EC  EF80  F020         	goto	l1517
 11309   0040F0                     u5100:
 11310   0040F0                     
 11311                           ; BSR set to: 0
 11312                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 11313   0040F0  C011  F00A         	movff	pad@buf,fputs@s
 11314   0040F4  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11315   0040F8  C010  F00C         	movff	pad@fp,fputs@fp
 11316   0040FC  EC30  F024         	call	_fputs	;wreg free
 11317   004100                     l1517:
 11318   004100  0012               	return		;funcret
 11319   004102                     __end_of_pad:
 11320                           	callstack 0
 11321                           
 11322 ;; *************** function _fputs *****************
 11323 ;; Defined at:
 11324 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;  s               2    9[COMRAM] PTR const unsigned char 
 11327 ;;		 -> dbuf(32), 
 11328 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 11329 ;;		 -> sprintf@f(12), 
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;  i               2   13[COMRAM] int 
 11332 ;;  c               1   12[COMRAM] unsigned char 
 11333 ;; Return value:  Size  Location     Type
 11334 ;;                  2    9[COMRAM] int 
 11335 ;; Registers used:
 11336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11342 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11345 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11346 ;;Total ram usage:        6 bytes
 11347 ;; Hardware stack levels used: 1
 11348 ;; Hardware stack levels required when called: 3
 11349 ;; This function calls:
 11350 ;;		_fputc
 11351 ;; This function is called by:
 11352 ;;		_pad
 11353 ;; This function uses a non-reentrant model
 11354 ;;
 11355                           
 11356                           	psect	text57
 11357   004860                     __ptext57:
 11358                           	callstack 0
 11359   004860                     _fputs:
 11360                           	callstack 21
 11361   004860  0E00               	movlw	0
 11362   004862  6E0F               	movwf	(fputs@i+1)^0,c
 11363   004864  0E00               	movlw	0
 11364   004866  6E0E               	movwf	fputs@i^0,c
 11365   004868  EF3F  F024         	goto	l5692
 11366   00486C                     l5688:
 11367   00486C  C00D  F002         	movff	fputs@c,fputc@c
 11368   004870  6A03               	clrf	(fputc@c+1)^0,c
 11369   004872  C00C  F004         	movff	fputs@fp,fputc@fp
 11370   004876  EC92  F01F         	call	_fputc	;wreg free
 11371   00487A  4A0E               	infsnz	fputs@i^0,f,c
 11372   00487C  2A0F               	incf	(fputs@i+1)^0,f,c
 11373   00487E                     l5692:
 11374   00487E  500E               	movf	fputs@i^0,w,c
 11375   004880  240A               	addwf	fputs@s^0,w,c
 11376   004882  6ED9               	movwf	fsr2l,c
 11377   004884  500F               	movf	(fputs@i+1)^0,w,c
 11378   004886  200B               	addwfc	(fputs@s+1)^0,w,c
 11379   004888  6EDA               	movwf	fsr2h,c
 11380   00488A  50DF               	movf	indf2,w,c
 11381   00488C  6E0D               	movwf	fputs@c^0,c
 11382   00488E  500D               	movf	fputs@c^0,w,c
 11383   004890  A4D8               	btfss	status,2,c
 11384   004892  EF4D  F024         	goto	u4941
 11385   004896  EF4F  F024         	goto	u4940
 11386   00489A                     u4941:
 11387   00489A  EF36  F024         	goto	l5688
 11388   00489E                     u4940:
 11389   00489E  0012               	return		;funcret
 11390   0048A0                     __end_of_fputs:
 11391                           	callstack 0
 11392                           
 11393 ;; *************** function _fputc *****************
 11394 ;; Defined at:
 11395 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 11396 ;; Parameters:    Size  Location     Type
 11397 ;;  c               2    1[COMRAM] int 
 11398 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 11399 ;;		 -> sprintf@f(12), 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;		None
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  2    1[COMRAM] int 
 11404 ;; Registers used:
 11405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11411 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11413 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11414 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11415 ;;Total ram usage:        8 bytes
 11416 ;; Hardware stack levels used: 1
 11417 ;; Hardware stack levels required when called: 2
 11418 ;; This function calls:
 11419 ;;		_putch
 11420 ;; This function is called by:
 11421 ;;		_pad
 11422 ;;		_vfpfcnvrt
 11423 ;;		_fputs
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	text58
 11428   003F24                     __ptext58:
 11429                           	callstack 0
 11430   003F24                     _fputc:
 11431                           	callstack 24
 11432   003F24  5004               	movf	fputc@fp^0,w,c
 11433   003F26  B4D8               	btfsc	status,2,c
 11434   003F28  EF98  F01F         	goto	u4901
 11435   003F2C  EF9A  F01F         	goto	u4900
 11436   003F30                     u4901:
 11437   003F30  EFA2  F01F         	goto	l5676
 11438   003F34                     u4900:
 11439   003F34  5004               	movf	fputc@fp^0,w,c
 11440   003F36  A4D8               	btfss	status,2,c
 11441   003F38  EFA0  F01F         	goto	u4911
 11442   003F3C  EFA2  F01F         	goto	u4910
 11443   003F40                     u4911:
 11444   003F40  EFA7  F01F         	goto	l5678
 11445   003F44                     u4910:
 11446   003F44                     l5676:
 11447   003F44  5002               	movf	fputc@c^0,w,c
 11448   003F46  EC9C  F026         	call	_putch
 11449   003F4A  EFE6  F01F         	goto	l1581
 11450   003F4E                     l5678:
 11451   003F4E  5004               	movf	fputc@fp^0,w,c
 11452   003F50  6ED9               	movwf	fsr2l,c
 11453   003F52  6ADA               	clrf	fsr2h,c
 11454   003F54  0E0A               	movlw	10
 11455   003F56  26D9               	addwf	fsr2l,f,c
 11456   003F58  50DE               	movf	postinc2,w,c
 11457   003F5A  10DE               	iorwf	postinc2,w,c
 11458   003F5C  B4D8               	btfsc	status,2,c
 11459   003F5E  EFB3  F01F         	goto	u4921
 11460   003F62  EFB5  F01F         	goto	u4920
 11461   003F66                     u4921:
 11462   003F66  EFCE  F01F         	goto	l5682
 11463   003F6A                     u4920:
 11464   003F6A  5004               	movf	fputc@fp^0,w,c
 11465   003F6C  6ED9               	movwf	fsr2l,c
 11466   003F6E  6ADA               	clrf	fsr2h,c
 11467   003F70  0E0A               	movlw	10
 11468   003F72  26D9               	addwf	fsr2l,f,c
 11469   003F74  5004               	movf	fputc@fp^0,w,c
 11470   003F76  6EE1               	movwf	fsr1l,c
 11471   003F78  6AE2               	clrf	fsr1h,c
 11472   003F7A  0E03               	movlw	3
 11473   003F7C  26E1               	addwf	fsr1l,f,c
 11474   003F7E  50DE               	movf	postinc2,w,c
 11475   003F80  5CE6               	subwf	postinc1,w,c
 11476   003F82  50E6               	movf	postinc1,w,c
 11477   003F84  0A80               	xorlw	128
 11478   003F86  6E09               	movwf	(??_fputc+4)^0,c
 11479   003F88  50DE               	movf	postinc2,w,c
 11480   003F8A  0A80               	xorlw	128
 11481   003F8C  5809               	subwfb	(??_fputc+4)^0,w,c
 11482   003F8E  B0D8               	btfsc	status,0,c
 11483   003F90  EFCC  F01F         	goto	u4931
 11484   003F94  EFCE  F01F         	goto	u4930
 11485   003F98                     u4931:
 11486   003F98  EFE6  F01F         	goto	l1581
 11487   003F9C                     u4930:
 11488   003F9C                     l5682:
 11489   003F9C  5004               	movf	fputc@fp^0,w,c
 11490   003F9E  6ED9               	movwf	fsr2l,c
 11491   003FA0  6ADA               	clrf	fsr2h,c
 11492   003FA2  0E03               	movlw	3
 11493   003FA4  26D9               	addwf	fsr2l,f,c
 11494   003FA6  50DF               	movf	indf2,w,c
 11495   003FA8  6E05               	movwf	??_fputc^0,c
 11496   003FAA  5004               	movf	fputc@fp^0,w,c
 11497   003FAC  6ED9               	movwf	fsr2l,c
 11498   003FAE  6ADA               	clrf	fsr2h,c
 11499   003FB0  50DF               	movf	indf2,w,c
 11500   003FB2  2405               	addwf	??_fputc^0,w,c
 11501   003FB4  6ED9               	movwf	fsr2l,c
 11502   003FB6  6ADA               	clrf	fsr2h,c
 11503   003FB8  C002  FFDF         	movff	fputc@c,indf2
 11504   003FBC  5004               	movf	fputc@fp^0,w,c
 11505   003FBE  6ED9               	movwf	fsr2l,c
 11506   003FC0  6ADA               	clrf	fsr2h,c
 11507   003FC2  0E03               	movlw	3
 11508   003FC4  26D9               	addwf	fsr2l,f,c
 11509   003FC6  2ADE               	incf	postinc2,f,c
 11510   003FC8  0E00               	movlw	0
 11511   003FCA  22DD               	addwfc	postdec2,f,c
 11512   003FCC                     l1581:
 11513   003FCC  0012               	return		;funcret
 11514   003FCE                     __end_of_fputc:
 11515                           	callstack 0
 11516                           
 11517 ;; *************** function _putch *****************
 11518 ;; Defined at:
 11519 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;  c               1    wreg     unsigned char 
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  c               1    0[COMRAM] unsigned char 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		wreg
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11537 ;;Total ram usage:        0 bytes
 11538 ;; Hardware stack levels used: 1
 11539 ;; Hardware stack levels required when called: 1
 11540 ;; This function calls:
 11541 ;;		Nothing
 11542 ;; This function is called by:
 11543 ;;		_fputc
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           	psect	text59
 11548   004D38                     __ptext59:
 11549                           	callstack 0
 11550   004D38                     _putch:
 11551                           	callstack 24
 11552   004D38  0012               	return		;funcret
 11553   004D3A                     __end_of_putch:
 11554                           	callstack 0
 11555                           
 11556 ;; *************** function _abs *****************
 11557 ;; Defined at:
 11558 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  a               2    7[COMRAM] int 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;		None
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  2    7[COMRAM] int 
 11565 ;; Registers used:
 11566 ;;		wreg, status,2, status,0
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11576 ;;Total ram usage:        4 bytes
 11577 ;; Hardware stack levels used: 1
 11578 ;; Hardware stack levels required when called: 1
 11579 ;; This function calls:
 11580 ;;		Nothing
 11581 ;; This function is called by:
 11582 ;;		_dtoa
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           	psect	text60
 11587   004B10                     __ptext60:
 11588                           	callstack 0
 11589   004B10                     _abs:
 11590                           	callstack 24
 11591   004B10  BE09               	btfsc	(abs@a+1)^0,7,c
 11592   004B12  EF8D  F025         	goto	u5111
 11593   004B16  EF8F  F025         	goto	u5110
 11594   004B1A                     u5111:
 11595   004B1A  EF95  F025         	goto	l1566
 11596   004B1E                     u5110:
 11597   004B1E  C008  F008         	movff	abs@a,?_abs
 11598   004B22  C009  F009         	movff	abs@a+1,?_abs+1
 11599   004B26  EFA1  F025         	goto	l1569
 11600   004B2A                     l1566:
 11601   004B2A  C008  F00A         	movff	abs@a,??_abs
 11602   004B2E  C009  F00B         	movff	abs@a+1,??_abs+1
 11603   004B32  1E0A               	comf	??_abs^0,f,c
 11604   004B34  1E0B               	comf	(??_abs+1)^0,f,c
 11605   004B36  4A0A               	infsnz	??_abs^0,f,c
 11606   004B38  2A0B               	incf	(??_abs+1)^0,f,c
 11607   004B3A  C00A  F008         	movff	??_abs,?_abs
 11608   004B3E  C00B  F009         	movff	??_abs+1,?_abs+1
 11609   004B42                     l1569:
 11610   004B42  0012               	return		;funcret
 11611   004B44                     __end_of_abs:
 11612                           	callstack 0
 11613                           
 11614 ;; *************** function ___awmod *****************
 11615 ;; Defined at:
 11616 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  dividend        2    1[COMRAM] int 
 11619 ;;  divisor         2    3[COMRAM] int 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  sign            1    6[COMRAM] unsigned char 
 11622 ;;  counter         1    5[COMRAM] unsigned char 
 11623 ;; Return value:  Size  Location     Type
 11624 ;;                  2    1[COMRAM] int 
 11625 ;; Registers used:
 11626 ;;		wreg, status,2, status,0
 11627 ;; Tracked objects:
 11628 ;;		On entry : 0/0
 11629 ;;		On exit  : 0/0
 11630 ;;		Unchanged: 0/0
 11631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11636 ;;Total ram usage:        6 bytes
 11637 ;; Hardware stack levels used: 1
 11638 ;; Hardware stack levels required when called: 1
 11639 ;; This function calls:
 11640 ;;		Nothing
 11641 ;; This function is called by:
 11642 ;;		_dtoa
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text61
 11647   003D1C                     __ptext61:
 11648                           	callstack 0
 11649   003D1C                     ___awmod:
 11650                           	callstack 24
 11651   003D1C  0E00               	movlw	0
 11652   003D1E  6E07               	movwf	___awmod@sign^0,c
 11653   003D20  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 11654   003D22  EF97  F01E         	goto	u5010
 11655   003D26  EF95  F01E         	goto	u5011
 11656   003D2A                     u5011:
 11657   003D2A  EF9D  F01E         	goto	l5752
 11658   003D2E                     u5010:
 11659   003D2E  6C02               	negf	___awmod@dividend^0,c
 11660   003D30  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11661   003D32  B0D8               	btfsc	status,0,c
 11662   003D34  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11663   003D36  0E01               	movlw	1
 11664   003D38  6E07               	movwf	___awmod@sign^0,c
 11665   003D3A                     l5752:
 11666   003D3A  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 11667   003D3C  EFA4  F01E         	goto	u5020
 11668   003D40  EFA2  F01E         	goto	u5021
 11669   003D44                     u5021:
 11670   003D44  EFA8  F01E         	goto	l5756
 11671   003D48                     u5020:
 11672   003D48  6C04               	negf	___awmod@divisor^0,c
 11673   003D4A  1E05               	comf	(___awmod@divisor+1)^0,f,c
 11674   003D4C  B0D8               	btfsc	status,0,c
 11675   003D4E  2A05               	incf	(___awmod@divisor+1)^0,f,c
 11676   003D50                     l5756:
 11677   003D50  5004               	movf	___awmod@divisor^0,w,c
 11678   003D52  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 11679   003D54  B4D8               	btfsc	status,2,c
 11680   003D56  EFAF  F01E         	goto	u5031
 11681   003D5A  EFB1  F01E         	goto	u5030
 11682   003D5E                     u5031:
 11683   003D5E  EFD5  F01E         	goto	l5772
 11684   003D62                     u5030:
 11685   003D62  0E01               	movlw	1
 11686   003D64  6E06               	movwf	___awmod@counter^0,c
 11687   003D66  EFB9  F01E         	goto	l5762
 11688   003D6A                     l5760:
 11689   003D6A  90D8               	bcf	status,0,c
 11690   003D6C  3604               	rlcf	___awmod@divisor^0,f,c
 11691   003D6E  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11692   003D70  2A06               	incf	___awmod@counter^0,f,c
 11693   003D72                     l5762:
 11694   003D72  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11695   003D74  EFBE  F01E         	goto	u5041
 11696   003D78  EFC0  F01E         	goto	u5040
 11697   003D7C                     u5041:
 11698   003D7C  EFB5  F01E         	goto	l5760
 11699   003D80                     u5040:
 11700   003D80                     l5764:
 11701   003D80  5004               	movf	___awmod@divisor^0,w,c
 11702   003D82  5C02               	subwf	___awmod@dividend^0,w,c
 11703   003D84  5005               	movf	(___awmod@divisor+1)^0,w,c
 11704   003D86  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11705   003D88  A0D8               	btfss	status,0,c
 11706   003D8A  EFC9  F01E         	goto	u5051
 11707   003D8E  EFCB  F01E         	goto	u5050
 11708   003D92                     u5051:
 11709   003D92  EFCF  F01E         	goto	l5768
 11710   003D96                     u5050:
 11711   003D96  5004               	movf	___awmod@divisor^0,w,c
 11712   003D98  5E02               	subwf	___awmod@dividend^0,f,c
 11713   003D9A  5005               	movf	(___awmod@divisor+1)^0,w,c
 11714   003D9C  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11715   003D9E                     l5768:
 11716   003D9E  90D8               	bcf	status,0,c
 11717   003DA0  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11718   003DA2  3204               	rrcf	___awmod@divisor^0,f,c
 11719   003DA4  2E06               	decfsz	___awmod@counter^0,f,c
 11720   003DA6  EFC0  F01E         	goto	l5764
 11721   003DAA                     l5772:
 11722   003DAA  5007               	movf	___awmod@sign^0,w,c
 11723   003DAC  B4D8               	btfsc	status,2,c
 11724   003DAE  EFDB  F01E         	goto	u5061
 11725   003DB2  EFDD  F01E         	goto	u5060
 11726   003DB6                     u5061:
 11727   003DB6  EFE1  F01E         	goto	l5776
 11728   003DBA                     u5060:
 11729   003DBA  6C02               	negf	___awmod@dividend^0,c
 11730   003DBC  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11731   003DBE  B0D8               	btfsc	status,0,c
 11732   003DC0  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11733   003DC2                     l5776:
 11734   003DC2  C002  F002         	movff	___awmod@dividend,?___awmod
 11735   003DC6  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11736   003DCA  0012               	return		;funcret
 11737   003DCC                     __end_of___awmod:
 11738                           	callstack 0
 11739                           
 11740 ;; *************** function ___awdiv *****************
 11741 ;; Defined at:
 11742 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  dividend        2    1[COMRAM] int 
 11745 ;;  divisor         2    3[COMRAM] int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  quotient        2    7[COMRAM] int 
 11748 ;;  sign            1    6[COMRAM] unsigned char 
 11749 ;;  counter         1    5[COMRAM] unsigned char 
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  2    1[COMRAM] int 
 11752 ;; Registers used:
 11753 ;;		wreg, status,2, status,0
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11760 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11762 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11763 ;;Total ram usage:        8 bytes
 11764 ;; Hardware stack levels used: 1
 11765 ;; Hardware stack levels required when called: 1
 11766 ;; This function calls:
 11767 ;;		Nothing
 11768 ;; This function is called by:
 11769 ;;		_dtoa
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text62
 11774   003C58                     __ptext62:
 11775                           	callstack 0
 11776   003C58                     ___awdiv:
 11777                           	callstack 24
 11778   003C58  0E00               	movlw	0
 11779   003C5A  6E07               	movwf	___awdiv@sign^0,c
 11780   003C5C  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11781   003C5E  EF35  F01E         	goto	u4950
 11782   003C62  EF33  F01E         	goto	u4951
 11783   003C66                     u4951:
 11784   003C66  EF3B  F01E         	goto	l5708
 11785   003C6A                     u4950:
 11786   003C6A  6C04               	negf	___awdiv@divisor^0,c
 11787   003C6C  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11788   003C6E  B0D8               	btfsc	status,0,c
 11789   003C70  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11790   003C72  0E01               	movlw	1
 11791   003C74  6E07               	movwf	___awdiv@sign^0,c
 11792   003C76                     l5708:
 11793   003C76  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11794   003C78  EF42  F01E         	goto	u4960
 11795   003C7C  EF40  F01E         	goto	u4961
 11796   003C80                     u4961:
 11797   003C80  EF48  F01E         	goto	l5714
 11798   003C84                     u4960:
 11799   003C84  6C02               	negf	___awdiv@dividend^0,c
 11800   003C86  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11801   003C88  B0D8               	btfsc	status,0,c
 11802   003C8A  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11803   003C8C  0E01               	movlw	1
 11804   003C8E  1A07               	xorwf	___awdiv@sign^0,f,c
 11805   003C90                     l5714:
 11806   003C90  0E00               	movlw	0
 11807   003C92  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11808   003C94  0E00               	movlw	0
 11809   003C96  6E08               	movwf	___awdiv@quotient^0,c
 11810   003C98  5004               	movf	___awdiv@divisor^0,w,c
 11811   003C9A  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11812   003C9C  B4D8               	btfsc	status,2,c
 11813   003C9E  EF53  F01E         	goto	u4971
 11814   003CA2  EF55  F01E         	goto	u4970
 11815   003CA6                     u4971:
 11816   003CA6  EF7D  F01E         	goto	l5736
 11817   003CAA                     u4970:
 11818   003CAA  0E01               	movlw	1
 11819   003CAC  6E06               	movwf	___awdiv@counter^0,c
 11820   003CAE  EF5D  F01E         	goto	l5722
 11821   003CB2                     l5720:
 11822   003CB2  90D8               	bcf	status,0,c
 11823   003CB4  3604               	rlcf	___awdiv@divisor^0,f,c
 11824   003CB6  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11825   003CB8  2A06               	incf	___awdiv@counter^0,f,c
 11826   003CBA                     l5722:
 11827   003CBA  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11828   003CBC  EF62  F01E         	goto	u4981
 11829   003CC0  EF64  F01E         	goto	u4980
 11830   003CC4                     u4981:
 11831   003CC4  EF59  F01E         	goto	l5720
 11832   003CC8                     u4980:
 11833   003CC8                     l5724:
 11834   003CC8  90D8               	bcf	status,0,c
 11835   003CCA  3608               	rlcf	___awdiv@quotient^0,f,c
 11836   003CCC  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11837   003CCE  5004               	movf	___awdiv@divisor^0,w,c
 11838   003CD0  5C02               	subwf	___awdiv@dividend^0,w,c
 11839   003CD2  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11840   003CD4  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11841   003CD6  A0D8               	btfss	status,0,c
 11842   003CD8  EF70  F01E         	goto	u4991
 11843   003CDC  EF72  F01E         	goto	u4990
 11844   003CE0                     u4991:
 11845   003CE0  EF77  F01E         	goto	l5732
 11846   003CE4                     u4990:
 11847   003CE4  5004               	movf	___awdiv@divisor^0,w,c
 11848   003CE6  5E02               	subwf	___awdiv@dividend^0,f,c
 11849   003CE8  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11850   003CEA  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11851   003CEC  8008               	bsf	___awdiv@quotient^0,0,c
 11852   003CEE                     l5732:
 11853   003CEE  90D8               	bcf	status,0,c
 11854   003CF0  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11855   003CF2  3204               	rrcf	___awdiv@divisor^0,f,c
 11856   003CF4  2E06               	decfsz	___awdiv@counter^0,f,c
 11857   003CF6  EF64  F01E         	goto	l5724
 11858   003CFA                     l5736:
 11859   003CFA  5007               	movf	___awdiv@sign^0,w,c
 11860   003CFC  B4D8               	btfsc	status,2,c
 11861   003CFE  EF83  F01E         	goto	u5001
 11862   003D02  EF85  F01E         	goto	u5000
 11863   003D06                     u5001:
 11864   003D06  EF89  F01E         	goto	l5740
 11865   003D0A                     u5000:
 11866   003D0A  6C08               	negf	___awdiv@quotient^0,c
 11867   003D0C  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11868   003D0E  B0D8               	btfsc	status,0,c
 11869   003D10  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11870   003D12                     l5740:
 11871   003D12  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11872   003D16  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11873   003D1A  0012               	return		;funcret
 11874   003D1C                     __end_of___awdiv:
 11875                           	callstack 0
 11876                           
 11877 ;; *************** function _sendStringSerial4 *****************
 11878 ;; Defined at:
 11879 ;;		line 41 in file "serial.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  string          1    2[COMRAM] PTR unsigned char 
 11882 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11894 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11898 ;;Total ram usage:        1 bytes
 11899 ;; Hardware stack levels used: 1
 11900 ;; Hardware stack levels required when called: 2
 11901 ;; This function calls:
 11902 ;;		_sendCharSerial4
 11903 ;; This function is called by:
 11904 ;;		_send2USART
 11905 ;;		_calibration_colors
 11906 ;;		_sendAllReadings
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text63
 11911   004B76                     __ptext63:
 11912                           	callstack 0
 11913   004B76                     _sendStringSerial4:
 11914                           	callstack 27
 11915   004B76                     
 11916                           ;serial.c: 44:     while(*string != 0){
 11917   004B76  EFC8  F025         	goto	l6164
 11918   004B7A                     l6158:
 11919                           
 11920                           ;serial.c: 46:   sendCharSerial4(*string++);
 11921   004B7A  5003               	movf	sendStringSerial4@string^0,w,c
 11922   004B7C  6ED9               	movwf	fsr2l,c
 11923   004B7E  6ADA               	clrf	fsr2h,c
 11924   004B80  50DF               	movf	indf2,w,c
 11925   004B82  EC7B  F026         	call	_sendCharSerial4
 11926   004B86  2A03               	incf	sendStringSerial4@string^0,f,c
 11927   004B88                     
 11928                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11929   004B88  0E6A               	movlw	106
 11930   004B8A                     u6337:
 11931   004B8A  2EE8               	decfsz	wreg,f,c
 11932   004B8C  D7FE               	bra	u6337
 11933   004B8E  D000               	nop2	
 11934   004B90                     l6164:
 11935                           
 11936                           ;serial.c: 44:     while(*string != 0){
 11937   004B90  5003               	movf	sendStringSerial4@string^0,w,c
 11938   004B92  6ED9               	movwf	fsr2l,c
 11939   004B94  6ADA               	clrf	fsr2h,c
 11940   004B96  50DF               	movf	indf2,w,c
 11941   004B98  A4D8               	btfss	status,2,c
 11942   004B9A  EFD1  F025         	goto	u5451
 11943   004B9E  EFD3  F025         	goto	u5450
 11944   004BA2                     u5451:
 11945   004BA2  EFBD  F025         	goto	l6158
 11946   004BA6                     u5450:
 11947   004BA6  0012               	return		;funcret
 11948   004BA8                     __end_of_sendStringSerial4:
 11949                           	callstack 0
 11950                           
 11951 ;; *************** function _sendCharSerial4 *****************
 11952 ;; Defined at:
 11953 ;;		line 35 in file "serial.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  charToSend      1    wreg     unsigned char 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  charToSend      1    1[COMRAM] unsigned char 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  1    wreg      void 
 11960 ;; Registers used:
 11961 ;;		wreg
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11970 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11971 ;;Total ram usage:        1 bytes
 11972 ;; Hardware stack levels used: 1
 11973 ;; Hardware stack levels required when called: 1
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_sendStringSerial4
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           	psect	text64
 11982   004CF6                     __ptext64:
 11983                           	callstack 0
 11984   004CF6                     _sendCharSerial4:
 11985                           	callstack 27
 11986                           
 11987                           ;incstack = 0
 11988                           ;sendCharSerial4@charToSend stored from wreg
 11989   004CF6  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11990   004CF8                     l527:
 11991   004CF8  010E               	movlb	14	; () banked
 11992   004CFA  A537               	btfss	55,2,b	;volatile
 11993   004CFC  EF82  F026         	goto	u5401
 11994   004D00  EF84  F026         	goto	u5400
 11995   004D04                     u5401:
 11996   004D04  EF7C  F026         	goto	l527
 11997   004D08                     u5400:
 11998   004D08                     
 11999                           ; BSR set to: 14
 12000                           ;serial.c: 37:     TX4REG = charToSend;
 12001   004D08  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 12002   004D0C                     
 12003                           ; BSR set to: 14
 12004   004D0C  0012               	return		;funcret
 12005   004D0E                     __end_of_sendCharSerial4:
 12006                           	callstack 0
 12007                           
 12008 ;; *************** function _color_read_Red *****************
 12009 ;; Defined at:
 12010 ;;		line 33 in file "color.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;		None
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;  tmp             2   10[COMRAM] unsigned int 
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  2    5[COMRAM] unsigned int 
 12017 ;; Registers used:
 12018 ;;		wreg, status,2, status,0, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12026 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12027 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12028 ;;Total ram usage:        7 bytes
 12029 ;; Hardware stack levels used: 1
 12030 ;; Hardware stack levels required when called: 3
 12031 ;; This function calls:
 12032 ;;		_I2C_2_Master_Read
 12033 ;;		_I2C_2_Master_RepStart
 12034 ;;		_I2C_2_Master_Start
 12035 ;;		_I2C_2_Master_Stop
 12036 ;;		_I2C_2_Master_Write
 12037 ;; This function is called by:
 12038 ;;		_reading_hue
 12039 ;;		_calibration_colors
 12040 ;; This function uses a non-reentrant model
 12041 ;;
 12042                           
 12043                           	psect	text65
 12044   0044CA                     __ptext65:
 12045                           	callstack 0
 12046   0044CA                     _color_read_Red:
 12047                           	callstack 26
 12048   0044CA                     
 12049                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 12050   0044CA  EC92  F026         	call	_I2C_2_Master_Start	;wreg free
 12051                           
 12052                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 12053   0044CE  0E52               	movlw	82
 12054   0044D0  EC87  F026         	call	_I2C_2_Master_Write
 12055                           
 12056                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 12057   0044D4  0EB6               	movlw	182
 12058   0044D6  EC87  F026         	call	_I2C_2_Master_Write
 12059                           
 12060                           ;color.c: 39:  I2C_2_Master_RepStart();
 12061   0044DA  EC97  F026         	call	_I2C_2_Master_RepStart	;wreg free
 12062                           
 12063                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 12064   0044DE  0E53               	movlw	83
 12065   0044E0  EC87  F026         	call	_I2C_2_Master_Write
 12066                           
 12067                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 12068   0044E4  0E01               	movlw	1
 12069   0044E6  EC0F  F024         	call	_I2C_2_Master_Read
 12070   0044EA  6E08               	movwf	??_color_read_Red^0,c
 12071   0044EC  5008               	movf	??_color_read_Red^0,w,c
 12072   0044EE  6E0B               	movwf	color_read_Red@tmp^0,c
 12073   0044F0  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 12074                           
 12075                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12076   0044F2  0E00               	movlw	0
 12077   0044F4  EC0F  F024         	call	_I2C_2_Master_Read
 12078   0044F8  6E08               	movwf	??_color_read_Red^0,c
 12079   0044FA  5008               	movf	??_color_read_Red^0,w,c
 12080   0044FC  6E0A               	movwf	(??_color_read_Red+2)^0,c
 12081   0044FE  6A09               	clrf	(??_color_read_Red+1)^0,c
 12082   004500  500B               	movf	color_read_Red@tmp^0,w,c
 12083   004502  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 12084   004504  6E0B               	movwf	color_read_Red@tmp^0,c
 12085   004506  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 12086   004508  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 12087   00450A  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 12088                           
 12089                           ;color.c: 43:  I2C_2_Master_Stop();
 12090   00450C  EC8D  F026         	call	_I2C_2_Master_Stop	;wreg free
 12091   004510                     
 12092                           ;color.c: 44:  return tmp;
 12093   004510  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 12094   004514  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 12095   004518  0012               	return		;funcret
 12096   00451A                     __end_of_color_read_Red:
 12097                           	callstack 0
 12098                           
 12099 ;; *************** function _color_read_Green *****************
 12100 ;; Defined at:
 12101 ;;		line 47 in file "color.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;		None
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  tmp             2   10[COMRAM] unsigned int 
 12106 ;; Return value:  Size  Location     Type
 12107 ;;                  2    5[COMRAM] unsigned int 
 12108 ;; Registers used:
 12109 ;;		wreg, status,2, status,0, cstack
 12110 ;; Tracked objects:
 12111 ;;		On entry : 0/0
 12112 ;;		On exit  : 0/0
 12113 ;;		Unchanged: 0/0
 12114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12117 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12118 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12119 ;;Total ram usage:        7 bytes
 12120 ;; Hardware stack levels used: 1
 12121 ;; Hardware stack levels required when called: 3
 12122 ;; This function calls:
 12123 ;;		_I2C_2_Master_Read
 12124 ;;		_I2C_2_Master_RepStart
 12125 ;;		_I2C_2_Master_Start
 12126 ;;		_I2C_2_Master_Stop
 12127 ;;		_I2C_2_Master_Write
 12128 ;; This function is called by:
 12129 ;;		_reading_hue
 12130 ;;		_calibration_colors
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text66
 12135   00451A                     __ptext66:
 12136                           	callstack 0
 12137   00451A                     _color_read_Green:
 12138                           	callstack 26
 12139   00451A                     
 12140                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 12141   00451A  EC92  F026         	call	_I2C_2_Master_Start	;wreg free
 12142                           
 12143                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 12144   00451E  0E52               	movlw	82
 12145   004520  EC87  F026         	call	_I2C_2_Master_Write
 12146                           
 12147                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 12148   004524  0EB8               	movlw	184
 12149   004526  EC87  F026         	call	_I2C_2_Master_Write
 12150                           
 12151                           ;color.c: 53:  I2C_2_Master_RepStart();
 12152   00452A  EC97  F026         	call	_I2C_2_Master_RepStart	;wreg free
 12153                           
 12154                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 12155   00452E  0E53               	movlw	83
 12156   004530  EC87  F026         	call	_I2C_2_Master_Write
 12157                           
 12158                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 12159   004534  0E01               	movlw	1
 12160   004536  EC0F  F024         	call	_I2C_2_Master_Read
 12161   00453A  6E08               	movwf	??_color_read_Green^0,c
 12162   00453C  5008               	movf	??_color_read_Green^0,w,c
 12163   00453E  6E0B               	movwf	color_read_Green@tmp^0,c
 12164   004540  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 12165                           
 12166                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12167   004542  0E00               	movlw	0
 12168   004544  EC0F  F024         	call	_I2C_2_Master_Read
 12169   004548  6E08               	movwf	??_color_read_Green^0,c
 12170   00454A  5008               	movf	??_color_read_Green^0,w,c
 12171   00454C  6E0A               	movwf	(??_color_read_Green+2)^0,c
 12172   00454E  6A09               	clrf	(??_color_read_Green+1)^0,c
 12173   004550  500B               	movf	color_read_Green@tmp^0,w,c
 12174   004552  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 12175   004554  6E0B               	movwf	color_read_Green@tmp^0,c
 12176   004556  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 12177   004558  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 12178   00455A  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 12179                           
 12180                           ;color.c: 57:  I2C_2_Master_Stop();
 12181   00455C  EC8D  F026         	call	_I2C_2_Master_Stop	;wreg free
 12182   004560                     
 12183                           ;color.c: 58:  return tmp;
 12184   004560  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 12185   004564  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 12186   004568  0012               	return		;funcret
 12187   00456A                     __end_of_color_read_Green:
 12188                           	callstack 0
 12189                           
 12190 ;; *************** function _color_read_Clear *****************
 12191 ;; Defined at:
 12192 ;;		line 76 in file "color.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  tmp             2   10[COMRAM] unsigned int 
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  2    5[COMRAM] unsigned int 
 12199 ;; Registers used:
 12200 ;;		wreg, status,2, status,0, cstack
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12209 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12210 ;;Total ram usage:        7 bytes
 12211 ;; Hardware stack levels used: 1
 12212 ;; Hardware stack levels required when called: 3
 12213 ;; This function calls:
 12214 ;;		_I2C_2_Master_Read
 12215 ;;		_I2C_2_Master_RepStart
 12216 ;;		_I2C_2_Master_Start
 12217 ;;		_I2C_2_Master_Stop
 12218 ;;		_I2C_2_Master_Write
 12219 ;; This function is called by:
 12220 ;;		_reading_hue
 12221 ;;		_main
 12222 ;;		_calibration_colors
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           	psect	text67
 12227   00456A                     __ptext67:
 12228                           	callstack 0
 12229   00456A                     _color_read_Clear:
 12230                           	callstack 26
 12231   00456A                     
 12232                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 12233   00456A  EC92  F026         	call	_I2C_2_Master_Start	;wreg free
 12234                           
 12235                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 12236   00456E  0E52               	movlw	82
 12237   004570  EC87  F026         	call	_I2C_2_Master_Write
 12238                           
 12239                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 12240   004574  0EB4               	movlw	180
 12241   004576  EC87  F026         	call	_I2C_2_Master_Write
 12242                           
 12243                           ;color.c: 82:  I2C_2_Master_RepStart();
 12244   00457A  EC97  F026         	call	_I2C_2_Master_RepStart	;wreg free
 12245                           
 12246                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 12247   00457E  0E53               	movlw	83
 12248   004580  EC87  F026         	call	_I2C_2_Master_Write
 12249                           
 12250                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 12251   004584  0E01               	movlw	1
 12252   004586  EC0F  F024         	call	_I2C_2_Master_Read
 12253   00458A  6E08               	movwf	??_color_read_Clear^0,c
 12254   00458C  5008               	movf	??_color_read_Clear^0,w,c
 12255   00458E  6E0B               	movwf	color_read_Clear@tmp^0,c
 12256   004590  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 12257                           
 12258                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12259   004592  0E00               	movlw	0
 12260   004594  EC0F  F024         	call	_I2C_2_Master_Read
 12261   004598  6E08               	movwf	??_color_read_Clear^0,c
 12262   00459A  5008               	movf	??_color_read_Clear^0,w,c
 12263   00459C  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 12264   00459E  6A09               	clrf	(??_color_read_Clear+1)^0,c
 12265   0045A0  500B               	movf	color_read_Clear@tmp^0,w,c
 12266   0045A2  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 12267   0045A4  6E0B               	movwf	color_read_Clear@tmp^0,c
 12268   0045A6  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 12269   0045A8  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 12270   0045AA  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 12271                           
 12272                           ;color.c: 86:  I2C_2_Master_Stop();
 12273   0045AC  EC8D  F026         	call	_I2C_2_Master_Stop	;wreg free
 12274   0045B0                     
 12275                           ;color.c: 87:  return tmp;
 12276   0045B0  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 12277   0045B4  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 12278   0045B8  0012               	return		;funcret
 12279   0045BA                     __end_of_color_read_Clear:
 12280                           	callstack 0
 12281                           
 12282 ;; *************** function _color_read_Blue *****************
 12283 ;; Defined at:
 12284 ;;		line 61 in file "color.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;		None
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  tmp             2   10[COMRAM] unsigned int 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  2    5[COMRAM] unsigned int 
 12291 ;; Registers used:
 12292 ;;		wreg, status,2, status,0, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12300 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12301 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12302 ;;Total ram usage:        7 bytes
 12303 ;; Hardware stack levels used: 1
 12304 ;; Hardware stack levels required when called: 3
 12305 ;; This function calls:
 12306 ;;		_I2C_2_Master_Read
 12307 ;;		_I2C_2_Master_RepStart
 12308 ;;		_I2C_2_Master_Start
 12309 ;;		_I2C_2_Master_Stop
 12310 ;;		_I2C_2_Master_Write
 12311 ;; This function is called by:
 12312 ;;		_reading_hue
 12313 ;;		_calibration_colors
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           	psect	text68
 12318   0045BA                     __ptext68:
 12319                           	callstack 0
 12320   0045BA                     _color_read_Blue:
 12321                           	callstack 26
 12322   0045BA                     
 12323                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 12324   0045BA  EC92  F026         	call	_I2C_2_Master_Start	;wreg free
 12325                           
 12326                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 12327   0045BE  0E52               	movlw	82
 12328   0045C0  EC87  F026         	call	_I2C_2_Master_Write
 12329                           
 12330                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 12331   0045C4  0EBA               	movlw	186
 12332   0045C6  EC87  F026         	call	_I2C_2_Master_Write
 12333                           
 12334                           ;color.c: 67:  I2C_2_Master_RepStart();
 12335   0045CA  EC97  F026         	call	_I2C_2_Master_RepStart	;wreg free
 12336                           
 12337                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 12338   0045CE  0E53               	movlw	83
 12339   0045D0  EC87  F026         	call	_I2C_2_Master_Write
 12340                           
 12341                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 12342   0045D4  0E01               	movlw	1
 12343   0045D6  EC0F  F024         	call	_I2C_2_Master_Read
 12344   0045DA  6E08               	movwf	??_color_read_Blue^0,c
 12345   0045DC  5008               	movf	??_color_read_Blue^0,w,c
 12346   0045DE  6E0B               	movwf	color_read_Blue@tmp^0,c
 12347   0045E0  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 12348                           
 12349                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12350   0045E2  0E00               	movlw	0
 12351   0045E4  EC0F  F024         	call	_I2C_2_Master_Read
 12352   0045E8  6E08               	movwf	??_color_read_Blue^0,c
 12353   0045EA  5008               	movf	??_color_read_Blue^0,w,c
 12354   0045EC  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 12355   0045EE  6A09               	clrf	(??_color_read_Blue+1)^0,c
 12356   0045F0  500B               	movf	color_read_Blue@tmp^0,w,c
 12357   0045F2  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 12358   0045F4  6E0B               	movwf	color_read_Blue@tmp^0,c
 12359   0045F6  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 12360   0045F8  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 12361   0045FA  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 12362                           
 12363                           ;color.c: 71:  I2C_2_Master_Stop();
 12364   0045FC  EC8D  F026         	call	_I2C_2_Master_Stop	;wreg free
 12365   004600                     
 12366                           ;color.c: 72:  return tmp;
 12367   004600  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 12368   004604  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12369   004608  0012               	return		;funcret
 12370   00460A                     __end_of_color_read_Blue:
 12371                           	callstack 0
 12372                           
 12373 ;; *************** function _I2C_2_Master_Write *****************
 12374 ;; Defined at:
 12375 ;;		line 45 in file "i2c.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;  data_byte       1    wreg     unsigned char 
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;  data_byte       1    2[COMRAM] unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  1    wreg      void 
 12382 ;; Registers used:
 12383 ;;		wreg, status,2, status,0, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12393 ;;Total ram usage:        1 bytes
 12394 ;; Hardware stack levels used: 1
 12395 ;; Hardware stack levels required when called: 2
 12396 ;; This function calls:
 12397 ;;		_I2C_2_Master_Idle
 12398 ;; This function is called by:
 12399 ;;		_color_writetoaddr
 12400 ;;		_color_read_Red
 12401 ;;		_color_read_Green
 12402 ;;		_color_read_Blue
 12403 ;;		_color_read_Clear
 12404 ;; This function uses a non-reentrant model
 12405 ;;
 12406                           
 12407                           	psect	text69
 12408   004D0E                     __ptext69:
 12409                           	callstack 0
 12410   004D0E                     _I2C_2_Master_Write:
 12411                           	callstack 26
 12412                           
 12413                           ;incstack = 0
 12414                           ;I2C_2_Master_Write@data_byte stored from wreg
 12415   004D0E  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 12416   004D10                     
 12417                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 12418   004D10  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12419   004D14                     
 12420                           ;i2c.c: 48:   SSP2BUF = data_byte;
 12421   004D14  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 12422   004D18  0012               	return		;funcret
 12423   004D1A                     __end_of_I2C_2_Master_Write:
 12424                           	callstack 0
 12425                           
 12426 ;; *************** function _I2C_2_Master_Stop *****************
 12427 ;; Defined at:
 12428 ;;		line 39 in file "i2c.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;		None
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;		None
 12433 ;; Return value:  Size  Location     Type
 12434 ;;                  1    wreg      void 
 12435 ;; Registers used:
 12436 ;;		wreg, status,2, status,0, cstack
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12446 ;;Total ram usage:        0 bytes
 12447 ;; Hardware stack levels used: 1
 12448 ;; Hardware stack levels required when called: 2
 12449 ;; This function calls:
 12450 ;;		_I2C_2_Master_Idle
 12451 ;; This function is called by:
 12452 ;;		_color_writetoaddr
 12453 ;;		_color_read_Red
 12454 ;;		_color_read_Green
 12455 ;;		_color_read_Blue
 12456 ;;		_color_read_Clear
 12457 ;; This function uses a non-reentrant model
 12458 ;;
 12459                           
 12460                           	psect	text70
 12461   004D1A                     __ptext70:
 12462                           	callstack 0
 12463   004D1A                     _I2C_2_Master_Stop:
 12464                           	callstack 26
 12465   004D1A                     
 12466                           ;i2c.c: 41:   I2C_2_Master_Idle();
 12467   004D1A  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12468   004D1E                     
 12469                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 12470   004D1E  010E               	movlb	14	; () banked
 12471   004D20  85DA               	bsf	218,2,b	;volatile
 12472   004D22                     
 12473                           ; BSR set to: 14
 12474   004D22  0012               	return		;funcret
 12475   004D24                     __end_of_I2C_2_Master_Stop:
 12476                           	callstack 0
 12477                           
 12478 ;; *************** function _I2C_2_Master_Start *****************
 12479 ;; Defined at:
 12480 ;;		line 27 in file "i2c.c"
 12481 ;; Parameters:    Size  Location     Type
 12482 ;;		None
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;		None
 12485 ;; Return value:  Size  Location     Type
 12486 ;;                  1    wreg      void 
 12487 ;; Registers used:
 12488 ;;		wreg, status,2, status,0, cstack
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12498 ;;Total ram usage:        0 bytes
 12499 ;; Hardware stack levels used: 1
 12500 ;; Hardware stack levels required when called: 2
 12501 ;; This function calls:
 12502 ;;		_I2C_2_Master_Idle
 12503 ;; This function is called by:
 12504 ;;		_color_writetoaddr
 12505 ;;		_color_read_Red
 12506 ;;		_color_read_Green
 12507 ;;		_color_read_Blue
 12508 ;;		_color_read_Clear
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           	psect	text71
 12513   004D24                     __ptext71:
 12514                           	callstack 0
 12515   004D24                     _I2C_2_Master_Start:
 12516                           	callstack 26
 12517   004D24                     
 12518                           ;i2c.c: 29:   I2C_2_Master_Idle();
 12519   004D24  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12520   004D28                     
 12521                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 12522   004D28  010E               	movlb	14	; () banked
 12523   004D2A  81DA               	bsf	218,0,b	;volatile
 12524   004D2C                     
 12525                           ; BSR set to: 14
 12526   004D2C  0012               	return		;funcret
 12527   004D2E                     __end_of_I2C_2_Master_Start:
 12528                           	callstack 0
 12529                           
 12530 ;; *************** function _I2C_2_Master_RepStart *****************
 12531 ;; Defined at:
 12532 ;;		line 33 in file "i2c.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;		None
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  1    wreg      void 
 12539 ;; Registers used:
 12540 ;;		wreg, status,2, status,0, cstack
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12550 ;;Total ram usage:        0 bytes
 12551 ;; Hardware stack levels used: 1
 12552 ;; Hardware stack levels required when called: 2
 12553 ;; This function calls:
 12554 ;;		_I2C_2_Master_Idle
 12555 ;; This function is called by:
 12556 ;;		_color_read_Red
 12557 ;;		_color_read_Green
 12558 ;;		_color_read_Blue
 12559 ;;		_color_read_Clear
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           	psect	text72
 12564   004D2E                     __ptext72:
 12565                           	callstack 0
 12566   004D2E                     _I2C_2_Master_RepStart:
 12567                           	callstack 26
 12568   004D2E                     
 12569                           ;i2c.c: 35:   I2C_2_Master_Idle();
 12570   004D2E  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12571   004D32                     
 12572                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 12573   004D32  010E               	movlb	14	; () banked
 12574   004D34  83DA               	bsf	218,1,b	;volatile
 12575   004D36                     
 12576                           ; BSR set to: 14
 12577   004D36  0012               	return		;funcret
 12578   004D38                     __end_of_I2C_2_Master_RepStart:
 12579                           	callstack 0
 12580                           
 12581 ;; *************** function _I2C_2_Master_Read *****************
 12582 ;; Defined at:
 12583 ;;		line 51 in file "i2c.c"
 12584 ;; Parameters:    Size  Location     Type
 12585 ;;  ack             1    wreg     unsigned char 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;  ack             1    3[COMRAM] unsigned char 
 12588 ;;  tmp             1    4[COMRAM] unsigned char 
 12589 ;; Return value:  Size  Location     Type
 12590 ;;                  1    wreg      unsigned char 
 12591 ;; Registers used:
 12592 ;;		wreg, status,2, status,0, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12600 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12601 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12602 ;;Total ram usage:        3 bytes
 12603 ;; Hardware stack levels used: 1
 12604 ;; Hardware stack levels required when called: 2
 12605 ;; This function calls:
 12606 ;;		_I2C_2_Master_Idle
 12607 ;; This function is called by:
 12608 ;;		_color_read_Red
 12609 ;;		_color_read_Green
 12610 ;;		_color_read_Blue
 12611 ;;		_color_read_Clear
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           	psect	text73
 12616   00481E                     __ptext73:
 12617                           	callstack 0
 12618   00481E                     _I2C_2_Master_Read:
 12619                           	callstack 26
 12620                           
 12621                           ; BSR set to: 14
 12622                           ;incstack = 0
 12623                           ;I2C_2_Master_Read@ack stored from wreg
 12624   00481E  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 12625   004820                     
 12626                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 12627   004820  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12628   004824                     
 12629                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12630   004824  010E               	movlb	14	; () banked
 12631   004826  87DA               	bsf	218,3,b	;volatile
 12632                           
 12633                           ;i2c.c: 56:   I2C_2_Master_Idle();
 12634   004828  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12635   00482C                     
 12636                           ;i2c.c: 57:   tmp = SSP2BUF;
 12637   00482C  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12638                           
 12639                           ;i2c.c: 58:   I2C_2_Master_Idle();
 12640   004830  EC19  F026         	call	_I2C_2_Master_Idle	;wreg free
 12641   004834                     
 12642                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12643   004834  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 12644   004836  B4D8               	btfsc	status,2,c
 12645   004838  EF20  F024         	goto	u5421
 12646   00483C  EF24  F024         	goto	u5420
 12647   004840                     u5421:
 12648   004840  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12649   004842  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 12650   004844  EF25  F024         	goto	u5438
 12651   004848                     u5420:
 12652   004848  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12653   00484A                     u5438:
 12654   00484A  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 12655   00484C  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 12656   00484E  010E               	movlb	14	; () banked
 12657   004850  51DA               	movf	218,w,b	;volatile
 12658   004852  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12659   004854  0BDF               	andlw	-33
 12660   004856  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12661   004858  6FDA               	movwf	218,b	;volatile
 12662   00485A                     
 12663                           ; BSR set to: 14
 12664                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12665   00485A  89DA               	bsf	218,4,b	;volatile
 12666   00485C                     
 12667                           ; BSR set to: 14
 12668                           ;i2c.c: 61:   return tmp;
 12669   00485C  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 12670   00485E                     
 12671                           ; BSR set to: 14
 12672   00485E  0012               	return		;funcret
 12673   004860                     __end_of_I2C_2_Master_Read:
 12674                           	callstack 0
 12675                           
 12676 ;; *************** function _I2C_2_Master_Idle *****************
 12677 ;; Defined at:
 12678 ;;		line 22 in file "i2c.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, status,2, status,0
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12694 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12695 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12696 ;;Total ram usage:        1 bytes
 12697 ;; Hardware stack levels used: 1
 12698 ;; Hardware stack levels required when called: 1
 12699 ;; This function calls:
 12700 ;;		Nothing
 12701 ;; This function is called by:
 12702 ;;		_I2C_2_Master_Start
 12703 ;;		_I2C_2_Master_RepStart
 12704 ;;		_I2C_2_Master_Stop
 12705 ;;		_I2C_2_Master_Write
 12706 ;;		_I2C_2_Master_Read
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           	psect	text74
 12711   004C32                     __ptext74:
 12712                           	callstack 0
 12713   004C32                     _I2C_2_Master_Idle:
 12714                           	callstack 26
 12715   004C32                     l174:
 12716   004C32  010E               	movlb	14	; () banked
 12717   004C34  B5D8               	btfsc	216,2,b	;volatile
 12718   004C36  EF1F  F026         	goto	u5311
 12719   004C3A  EF21  F026         	goto	u5310
 12720   004C3E                     u5311:
 12721   004C3E  EF19  F026         	goto	l174
 12722   004C42                     u5310:
 12723   004C42                     
 12724                           ; BSR set to: 14
 12725   004C42  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12726   004C46  0E1F               	movlw	31
 12727   004C48  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12728   004C4A  A4D8               	btfss	status,2,c
 12729   004C4C  EF2A  F026         	goto	u5321
 12730   004C50  EF2C  F026         	goto	u5320
 12731   004C54                     u5321:
 12732   004C54  EF19  F026         	goto	l174
 12733   004C58                     u5320:
 12734   004C58                     
 12735                           ; BSR set to: 14
 12736   004C58  0012               	return		;funcret
 12737   004C5A                     __end_of_I2C_2_Master_Idle:
 12738                           	callstack 0
 12739                           
 12740 ;; *************** function _Timer0_init *****************
 12741 ;; Defined at:
 12742 ;;		line 8 in file "timers.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;		None
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;		None
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1    wreg      void 
 12749 ;; Registers used:
 12750 ;;		wreg, status,2
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12760 ;;Total ram usage:        0 bytes
 12761 ;; Hardware stack levels used: 1
 12762 ;; Hardware stack levels required when called: 1
 12763 ;; This function calls:
 12764 ;;		Nothing
 12765 ;; This function is called by:
 12766 ;;		_main
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           	psect	text75
 12771   004BD8                     __ptext75:
 12772                           	callstack 0
 12773   004BD8                     _Timer0_init:
 12774                           	callstack 29
 12775   004BD8                     
 12776                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 12777   004BD8  50D6               	movf	214,w,c	;volatile
 12778   004BDA  0B1F               	andlw	-225
 12779   004BDC  0940               	iorlw	64
 12780   004BDE  6ED6               	movwf	214,c	;volatile
 12781   004BE0                     
 12782                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 12783   004BE0  88D6               	bsf	214,4,c	;volatile
 12784                           
 12785                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 12786   004BE2  50D6               	movf	214,w,c	;volatile
 12787   004BE4  0BF0               	andlw	-16
 12788   004BE6  090D               	iorlw	13
 12789   004BE8  6ED6               	movwf	214,c	;volatile
 12790   004BEA                     
 12791                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 12792   004BEA  88D5               	bsf	213,4,c	;volatile
 12793   004BEC                     
 12794                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 12795   004BEC  010E               	movlb	14	; () banked
 12796   004BEE  8B29               	bsf	41,5,b	;volatile
 12797   004BF0                     
 12798                           ; BSR set to: 14
 12799                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 12800   004BF0  9B33               	bcf	51,5,b	;volatile
 12801   004BF2                     
 12802                           ; BSR set to: 14
 12803                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 12804   004BF2  9B1F               	bcf	31,5,b	;volatile
 12805   004BF4                     
 12806                           ; BSR set to: 14
 12807                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 12808   004BF4  8AF2               	bsf	242,5,c	;volatile
 12809   004BF6                     
 12810                           ; BSR set to: 14
 12811                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 12812   004BF6  8CF2               	bsf	242,6,c	;volatile
 12813   004BF8                     
 12814                           ; BSR set to: 14
 12815                           ;timers.c: 20:     INTCONbits.GIE = 1;
 12816   004BF8  8EF2               	bsf	242,7,c	;volatile
 12817   004BFA                     
 12818                           ; BSR set to: 14
 12819                           ;timers.c: 22:     TRISGbits.TRISG1 = 1;
 12820   004BFA  8287               	bsf	135,1,c	;volatile
 12821   004BFC                     
 12822                           ; BSR set to: 14
 12823                           ;timers.c: 23:     LATGbits.LATG1 = 0;
 12824   004BFC  927F               	bcf	127,1,c	;volatile
 12825                           
 12826                           ;timers.c: 25:     TMR0L = 0;
 12827   004BFE  0E00               	movlw	0
 12828   004C00  6ED3               	movwf	211,c	;volatile
 12829                           
 12830                           ;timers.c: 26:     TMR0H = 0;
 12831   004C02  0E00               	movlw	0
 12832   004C04  6ED4               	movwf	212,c	;volatile
 12833   004C06                     
 12834                           ; BSR set to: 14
 12835   004C06  0012               	return		;funcret
 12836   004C08                     __end_of_Timer0_init:
 12837                           	callstack 0
 12838                           
 12839 ;; *************** function _ADC_init *****************
 12840 ;; Defined at:
 12841 ;;		line 9 in file "ADC.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;		None
 12844 ;; Auto vars:     Size  Location     Type
 12845 ;;		None
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      void 
 12848 ;; Registers used:
 12849 ;;		wreg, status,2
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12859 ;;Total ram usage:        0 bytes
 12860 ;; Hardware stack levels used: 1
 12861 ;; Hardware stack levels required when called: 1
 12862 ;; This function calls:
 12863 ;;		Nothing
 12864 ;; This function is called by:
 12865 ;;		_main
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869                           	psect	text76
 12870   004CDC                     __ptext76:
 12871                           	callstack 0
 12872   004CDC                     _ADC_init:
 12873                           	callstack 29
 12874   004CDC                     
 12875                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12876   004CDC  8C86               	bsf	134,6,c	;volatile
 12877                           
 12878                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12879   004CDE  010E               	movlb	14	; () banked
 12880   004CE0  8DB4               	bsf	180,6,b	;volatile
 12881                           
 12882                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12883   004CE2  010F               	movlb	15	; () banked
 12884   004CE4  9958               	bcf	88,4,b	;volatile
 12885   004CE6                     
 12886                           ; BSR set to: 15
 12887                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12888   004CE6  0EFC               	movlw	-4
 12889   004CE8  1758               	andwf	88,f,b	;volatile
 12890                           
 12891                           ;ADC.c: 17:     ADPCH=0b101110;
 12892   004CEA  0E2E               	movlw	46
 12893   004CEC  6F5F               	movwf	95,b	;volatile
 12894   004CEE                     
 12895                           ; BSR set to: 15
 12896                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12897   004CEE  9460               	bcf	96,2,c	;volatile
 12898   004CF0                     
 12899                           ; BSR set to: 15
 12900                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12901   004CF0  8860               	bsf	96,4,c	;volatile
 12902   004CF2                     
 12903                           ; BSR set to: 15
 12904                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12905   004CF2  8E60               	bsf	96,7,c	;volatile
 12906   004CF4                     
 12907                           ; BSR set to: 15
 12908   004CF4  0012               	return		;funcret
 12909   004CF6                     __end_of_ADC_init:
 12910                           	callstack 0
 12911                           
 12912 ;; *************** function _LowISR *****************
 12913 ;; Defined at:
 12914 ;;		line 45 in file "timers.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;		None
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      void 
 12921 ;; Registers used:
 12922 ;;		None
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12932 ;;Total ram usage:        1 bytes
 12933 ;; Hardware stack levels used: 1
 12934 ;; This function calls:
 12935 ;;		Nothing
 12936 ;; This function is called by:
 12937 ;;		Interrupt level 1
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           	psect	intcodelo
 12942   000018                     __pintcodelo:
 12943                           	callstack 0
 12944   000018                     _LowISR:
 12945                           	callstack 20
 12946                           
 12947                           ; BSR set to: 15
 12948                           ;incstack = 0
 12949   000018  805E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12950   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12951   00001E                     
 12952                           ;timers.c: 48:     if (PIR0bits.TMR0IF == 1) {
 12953   00001E  010E               	movlb	14	; () banked
 12954   000020  AB33               	btfss	51,5,b	;volatile
 12955   000022  EF15  F000         	goto	i1u246_21
 12956   000026  EF17  F000         	goto	i1u246_20
 12957   00002A                     i1u246_21:
 12958   00002A  EF19  F000         	goto	i1l627
 12959   00002E                     i1u246_20:
 12960   00002E                     
 12961                           ; BSR set to: 14
 12962                           ;timers.c: 49:         LATGbits.LATG1 = 1;
 12963   00002E  827F               	bsf	127,1,c	;volatile
 12964                           
 12965                           ;timers.c: 51:         PIR0bits.TMR0IF = 0;
 12966   000030  9B33               	bcf	51,5,b	;volatile
 12967   000032                     i1l627:
 12968                           
 12969                           ; BSR set to: 14
 12970   000032  C001  FFE0         	movff	??_LowISR,bsr
 12971   000036  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12972   000038  0010               	retfie	
 12973   00003A                     __end_of_LowISR:
 12974                           	callstack 0
 12975                           
 12976                           	psect	rparam
 12977   000000                     
 12978                           	psect	temp
 12979   00005E                     btemp:
 12980                           	callstack 0
 12981   00005E                     	ds	1
 12982   000000                     int$flags	set	btemp
 12983   000000                     wtemp8	set	btemp+1
 12984   000000                     ttemp5	set	btemp+1
 12985   000000                     ttemp6	set	btemp+4
 12986   000000                     ttemp7	set	btemp+8
 12987                           
 12988                           	psect	config
 12989                           
 12990                           ;Config register CONFIG1L @ 0x300000
 12991                           ;	External Oscillator mode Selection bits
 12992                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12993                           ;	Power-up default value for COSC bits
 12994                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12995   300000                     	org	3145728
 12996   300000  AA                 	db	170
 12997                           
 12998                           ;Config register CONFIG1H @ 0x300001
 12999                           ;	unspecified, using default values
 13000                           ;	Clock Out Enable bit
 13001                           ;	CLKOUTEN = 0x1, unprogrammed default
 13002                           ;	Clock Switch Enable bit
 13003                           ;	CSWEN = 0x1, unprogrammed default
 13004                           ;	Fail-Safe Clock Monitor Enable bit
 13005                           ;	FCMEN = 0x1, unprogrammed default
 13006   300001                     	org	3145729
 13007   300001  FF                 	db	255
 13008                           
 13009                           ;Config register CONFIG3L @ 0x300004
 13010                           ;	WDT Period Select bits
 13011                           ;	WDTCPS = 0x1F, unprogrammed default
 13012                           ;	WDT operating mode
 13013                           ;	WDTE = OFF, WDT Disabled
 13014   300004                     	org	3145732
 13015   300004  9F                 	db	159
 13016                           
 13017                           ;Config register CONFIG3H @ 0x300005
 13018                           ;	unspecified, using default values
 13019                           ;	WDT Window Select bits
 13020                           ;	WDTCWS = 0x7, unprogrammed default
 13021                           ;	WDT input clock selector
 13022                           ;	WDTCCS = 0x7, unprogrammed default
 13023   300005                     	org	3145733
 13024   300005  FF                 	db	255
 13025                           tosu	equ	0xFFF
 13026                           tosh	equ	0xFFE
 13027                           tosl	equ	0xFFD
 13028                           stkptr	equ	0xFFC
 13029                           pclatu	equ	0xFFB
 13030                           pclath	equ	0xFFA
 13031                           pcl	equ	0xFF9
 13032                           tblptru	equ	0xFF8
 13033                           tblptrh	equ	0xFF7
 13034                           tblptrl	equ	0xFF6
 13035                           tablat	equ	0xFF5
 13036                           prodh	equ	0xFF4
 13037                           prodl	equ	0xFF3
 13038                           indf0	equ	0xFEF
 13039                           postinc0	equ	0xFEE
 13040                           postdec0	equ	0xFED
 13041                           preinc0	equ	0xFEC
 13042                           plusw0	equ	0xFEB
 13043                           fsr0h	equ	0xFEA
 13044                           fsr0l	equ	0xFE9
 13045                           wreg	equ	0xFE8
 13046                           indf1	equ	0xFE7
 13047                           postinc1	equ	0xFE6
 13048                           postdec1	equ	0xFE5
 13049                           preinc1	equ	0xFE4
 13050                           plusw1	equ	0xFE3
 13051                           fsr1h	equ	0xFE2
 13052                           fsr1l	equ	0xFE1
 13053                           bsr	equ	0xFE0
 13054                           indf2	equ	0xFDF
 13055                           postinc2	equ	0xFDE
 13056                           postdec2	equ	0xFDD
 13057                           preinc2	equ	0xFDC
 13058                           plusw2	equ	0xFDB
 13059                           fsr2h	equ	0xFDA
 13060                           fsr2l	equ	0xFD9
 13061                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         430
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      93
    BANK0           160     96     144
    BANK1           256      0     182
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_colors@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    calibration_turning@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    calibration_turning@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3070$buffer	PTR unsigned char  size(2) Largest target is 0

    S3070$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseTurn
    _reverseTurn->_right90
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _get16bitTMR0val->___aldiv
    ___aldiv->___lmul
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_right90
    _moveRed->_right90
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_right135
    _right135->_turnRight
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _fullSpeedBack->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_turning->_right90
    _right90->___fltol
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___fltol->___fldiv
    _calibration_colors->_send2USART
    _send2USART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_colors->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0  450108
                                             76 BANK0     20    20      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                 _calibration_colors
                _calibration_turning
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          15     9      6  139660
                                              0 BANK0     15     9      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                         11     2      9   91789
                                             81 COMRAM    11     2      9
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   17246
                                             80 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    9737
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            6     2      4   29692
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   18209
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   17305
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1246
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3649
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2352
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2767
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                     12    10      2    2315
                                             27 COMRAM    12    10      2
                            ___aldiv
                             ___lmul
                          _logAction
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _decision                                             8     2      6  206961
                                              0 BANK0      6     0      6
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   28072
                                             81 COMRAM     6     2      4
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   30052
                                             81 COMRAM     6     2      4
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   27982
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   12072
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   29242
                                             30 COMRAM     6     2      4
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             8     4      4   14765
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   29422
                                             30 COMRAM     6     2      4
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              8     4      4   14945
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   29962
                                             30 COMRAM     6     2      4
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               8     4      4   15485
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   29692
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              8     4      4   15215
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    5198
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   14052
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    5018
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _logAction                                            9     3      6    1326
                                              1 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_turning                                 15    13      2   19686
                                             81 COMRAM     4     2      2
                                              0 BANK0     11    11      0
                            ___fladd
                            ___fltol
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              8     4      4   15575
                                             75 COMRAM     6     2      4
                            ___fltol (ARG)
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    5018
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6570
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4342
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _customDelayMs                                        5     3      2     502
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     761
                                             65 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2870
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _calibration_colors                                  23    22      1   25912
                                             70 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   12546
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   11259
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9507
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    9019
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    2352
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1912
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_colors
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _calibration_turning
     ___fladd
     ___fltol
     _right90
       ___fltol (ARG)
       ___wmul (ARG)
       _customDelayMs (ARG)
       _stop (ARG)
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _turnRight (ARG)
         _setMotorPWM
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
         _stop
       _turn180
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         ___wmul
         _customDelayMs
         _stop
         _turnRight
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     60      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5D       1       98.9%
BITBIGSFRlllhll     37      0       0      49        0.0%
BITBIGSFRlllhhl     31      0       0      47        0.0%
BITBIGSFRllllll     2A      0       0      60        0.0%
BITBIGSFRllllll     26      0       0      67        0.0%
BITBIGSFRlllllh     20      0       0      52        0.0%
BITBIGSFRllllll     1E      0       0      54        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      44        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      55        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      53        0.0%
BITBIGSFRllllll      9      0       0      64        0.0%
BITBIGSFRlllhll      8      0       0      50        0.0%
BITBIGSFRllllll      6      0       0      66        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllhhh      6      0       0      46        0.0%
BITBIGSFRllllll      5      0       0      62        0.0%
BITBIGSFRllllll      5      0       0      58        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRllllll      3      0       0      63        0.0%
BITBIGSFRlllhhh      3      0       0      45        0.0%
BITBIGSFRllllll      3      0       0      57        0.0%
BITBIGSFRlllhlh      2      0       0      48        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllhh        1      0       0      42        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      65        0.0%
BITBIGSFRllllh       1      0       0      51        0.0%
BITBIGSFRllhl        1      0       0      43        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26B      68        0.0%
DATA                 0      0     26B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 05:21:12 2024

               logAction@newTime 0002               logAction@newAction 000A                   _color_read_Red 44CA  
      calibration_turning@factor 0067                     ___fldiv@aexp 0041                     ___fldiv@bexp 0040  
             fullSpeedBack@power 0017                     ___fldiv@sign 0039                  _color_read_Blue 45BA  
                             l73 4ADA                               l82 4568                               l91 3B8C  
                             l76 4C9E                               l85 4608                               l79 4518  
                             l88 45B8                               l99 11A8                     ___awdiv@sign 0007  
                             bsr 0FE0              ___wmul@multiplicand 0004                  moveLightBlue@mL 001F  
                moveLightBlue@mR 0020               convert_rgb2hue@max 0098               convert_rgb2hue@hue 009C  
             convert_rgb2hue@min 0090                 _color_read_Clear 456A                 _color_read_Green 451A  
                            l101 11B8                              l111 12AA                              l103 1212  
                            l121 15C2                              l113 12BA                              l105 1222  
                            l115 1314                              l125 163A                              l117 1324  
                            l126 1656                              l144 2A42                              l402 421E  
                            l138 2A3A               logAction@path_step 0006                              l171 4C30  
                            l316 4CF4                              l180 4D2C                              l412 431A  
                            l174 4C32                              l422 4390                              l183 4D36  
                            l407 429C                              l431 4798                              l192 485E  
                            l440 4BD6                              l177 4C58                              l425 47DA  
                            l417 3C56                              l186 4D22                              l530 4D0C  
                            l434 46D2                              l443 4B74                              l452 4A6E  
                            l428 4756                              l292 1D86                              l189 4D18  
                            l437 4714                              l461 49C0                              l621 406A  
                            l446 494C                              l518 4CBC                              l702 3428  
                            l527 4CF8                              l455 4912                              l536 4BA6  
                            l464 49FA                              l712 342A                              l801 3106  
                            l449 4A34                              l618 4C06                              l394 357E  
                            l458 4986                              l298 1F52                              l811 4AA6  
                            l387 4190                              l467 48D8                              l581 4CDA  
                            l805 3142                              l814 4C7E                              l808 4A90  
                            l825 445E                              l826 446E                              l771 2A6A  
                            l675 44C8                              l691 36A0                              l780 2B86  
                            l773 2A78                              l685 36A0                              l782 2B94  
                            l774 2AC6                              l783 2BEE                              l776 2AD4  
                            l785 2BFC                              l777 2B26                              l793 2FF0  
                            l786 2C62                              l779 2B34                              l795 304A  
                            l699 3AA2                              l789 2C88                              l893 37AC  
                            _abs 4B10                              _pad 406C              convert_rgb2hue@cMax 004C  
                   ___awmod@sign 0007              convert_rgb2hue@diff 0094                              wreg 0FE8  
                   ___flmul@aexp 0021                     ___flmul@bexp 0022                     ___flmul@sign 001C  
                   ___flmul@temp 0027                     ___flmul@prod 0023                     ___fltol@exp1 004B  
                           l1111 38B2                             ?_abs 0008                             l1045 3D1A  
                           l1312 4404                             l1305 43FC                             l1401 25A6  
                           l1073 3F22                             l1058 3DCA                             l1410 268E  
                           l1084 39B6                             l1342 1846                             l1351 1B16  
                           l1343 1834                             l1407 2628                             l1079 3970  
                           l1512 40A2                             l1520 31A2                             l1344 17FA  
                           l1432 23E8                             l1409 26A0                             l1515 40E0  
                           l1435 227A                             l4100 1788                             l4020 4A70  
                           l1428 2084                             l1517 4100                             l1533 32BA  
                           l1541 3E78                             l1445 23AA                             l1437 22F2  
                           l4110 179C                             l4102 178C                             l4030 1658  
                           l4022 4A7C                             l1438 22E0                             l1359 1960  
                           l4200 1A40                             l1368 1A30                             l4120 1814  
                           l4112 17C6                             l4104 1790                             l4040 1694  
                           l4032 1664                             l4024 4A8C                             l1384 464E  
                           l1472 2E3C                             l1537 3E70                             l1369 1A1E  
                           l1562 481C                             l4210 1AA6                             l4202 1A4C  
                           l4130 1854                             l4122 1818                             l4114 17E2  
                           l4106 1794                             l4050 16C4                             l4042 16A4  
                           l4034 1672                             l1483 2DD4                             l1556 2FC4  
                           l1492 4B0E                             l4220 1AEE                             l4212 1AB6  
                           l4204 1A5A                             l4140 1896                             l4132 1864  
                           l4124 1826                             l4116 17F2                             l4108 1798  
                           l4060 16EE                             l4052 16D6                             l4044 16A6  
                           l4036 1674                             l1396 2782                             l4300 2190  
                           l1476 2D78                             l1581 3FCC                             l1469 2CE0  
                           l1566 4B2A                             l4222 1AF0                             l4214 1AD6  
                           l4206 1A94                             l4150 18C4                             l4142 18A4  
                           l4126 1828                             l4118 1808                             l4062 16FE  
                           l4070 1728                             l4054 16D8                             l4038 1684  
                           l4046 16AE                             l5030 4434                             l1398 25E2  
                           l4310 2234                             l4302 21AC                             l1592 4D38  
                           l4224 1AF6                             l4216 1ADA                             l4208 1A96  
                           l4160 1930                             l4152 18CE                             l4144 18B0  
                           l4136 1878                             l4128 1832                             l4080 1760  
                           l4072 1738                             l4064 170E                             l4056 16DE  
                           l4048 16BE                             l4400 3892                             l6000 42E8  
                           l5040 36C4                             l5032 443E                             l5024 4406  
                           l4320 228A                             l4312 2242                             l4304 21B8  
                           l4240 1FEC                             l4232 1FC0                             l1569 4B42  
                           l4226 1B04                             l4218 1AE8                             l4162 1940  
                           l4146 18B4                             l4138 1888                             l4154 18D4  
                           l4090 1774                             l4082 1764                             l4074 174A  
                           l4066 171E                             l4058 16EC                             l4402 38A2  
                           l6002 42F0                             l6010 4334                             l5050 36FA  
                           l5042 36C8                             l5034 36A2                             l5026 4416  
                           l4322 2298                             l4314 2260                             l4306 21D4  
                           l4250 2028                             l4242 1FFC                             l4234 1FCC  
                           l4410 2CAA                             l5220 4CF0                             l4228 1B06  
                           l4180 19C2                             l4172 199A                             l4156 18FA  
                           l4164 1950                             l4148 18C2                             l4092 1778  
                           l4084 1768                             l4076 1758                             l4068 1720  
                           l6004 4300                             l6100 47C2                             l6020 4358  
                           l5060 373C                             l5052 3710                             l5044 36D6  
                           l5036 36A6                             l5028 4424                             l4332 2302  
                           l4340 234A                             l4324 229C                             l4316 226A  
                           l4308 21FE                             l4260 205E                             l4252 202E  
                           l4244 200C                             l4236 1FDA                             l4420 2D22  
                           l4412 2CF0                             l1589 489E                             l5222 4CF2  
                           l5214 4CDC                             l6030 4D08                             l4182 19CA  
                           l4174 19A4                             l4166 1976                             l4158 192E  
                           l4190 19EE                             l4094 177C                             l4086 176C  
                           l4078 175C                             l6006 4304                             l6102 47CE  
                           l6022 4360                             l6110 473E                             l5062 375A  
                           l5054 3718                             l5070 377C                             l5046 36E6  
                           l5038 36B4                             l5230 4CB6                             l4350 23BE  
                           l4342 2364                             l4334 230E                             l4326 22AA  
                           l4318 2278                             l4262 206E                             l4254 203C  
                           l4246 2012                             l4238 1FDC                             l4430 2DAA  
                           l4422 2D2E                             l4414 2D06                             l4406 2C8C  
                           l5216 4CE6                             l5240 4BEA                             l6200 45B0  
                           l6032 47DC                             l4192 19F2                             l4184 19CE  
                           l4176 19B2                             l4168 1986                             l4096 1780  
                           l4088 1770                             l6024 4370                             l6016 433C  
                           l6008 431C                             l6120 4780                             l6112 474A  
                           l6104 4716                             l5072 378C                             l5064 376A  
                           l5056 3724                             l5048 36EA                             l5232 4CB8  
                           l5224 4CA0                             l4600 23F6                             l4352 23CC  
                           l4344 2378                             l4336 231C                             l4328 22D8  
                           l4280 20F0                             l4272 20B8                             l4264 2074  
                           l4256 203E                             l4248 2022                             l4440 2DE8  
                           l4432 2DB6                             l4424 2D60                             l4408 2C9C  
                           l5218 4CEE                             l5250 4BF6                             l5242 4BEC  
                           l6042 4D24                             l6050 4D1A                             l6034 47E4  
                           l4194 1A00                             l4186 19DE                             l4178 19B4  
                           l4098 1784                             l4370 3802                             l4362 37AE  
                           l6026 4374                             l6018 4350                             l6122 478C  
                           l6114 4758                             l6106 4716                             l6210 49FC  
                           l6130 46BA                             l5074 379C                             l5066 376C  
                           l5058 3732                             l5234 4CBA                             l5226 4CAA  
                           l4610 2436                             l4602 2404                             l4354 23CE  
                           l4346 2392                             l4338 2346                             l4290 213A  
                           l4282 2108                             l4274 20C4                             l4266 2094  
                           l4258 204E                             l4442 2E0C                             l4434 2DC4  
                           l4426 2D62                             l4418 2D1A                             l5252 4BF8  
                           l5244 4BF0                             l5236 4BD8                             l6060 4824  
                           l6044 4D28                             l6052 4D1E                             l6028 4CF8  
                           l6036 47F4                             l4196 1A16                             l4188 19E0  
                           l4372 3804                             l4364 37C4                             l6116 4758  
                           l6220 4A5A                             l6108 4732                             l6212 4A08  
                           l6140 46FC                             l6132 46C6                             l6124 4692  
                           l6204 4914                             l5068 3776                             l5260 4112  
                           l5228 4CAC                             l4700 2686                             l4620 245C  
                           l4612 2438                             l4604 2406                             l4348 23AE  
                           l4356 23D4                             l4292 214A                             l4284 2114  
                           l4276 20CE                             l4268 20A4                             l4444 2E1C  
                           l4436 2DE2                             l4428 2D6E                             l5254 4BFA  
                           l5246 4BF2                             l5238 4BE0                             l6062 482C  
                           l6054 4D2E                             l6046 4D10                             l6038 4814  
                           l4374 3814                             l6118 4774                             l6214 4A20  
                           l6142 4708                             l6134 46D4                             l6222 49C2  
                           l6126 4692                             l6150 4B44                             l6206 4920  
                           l6230 48E6                             l5270 416C                             l5262 4138  
                           l4710 26F4                             l4630 249C                             l4622 246A  
                           l4606 2416                             l4614 2440                             l4358 23D8  
                           l4294 2156                             l4286 2120                             l4278 20E4  
                           l4446 2E2A                             l4438 2DE4                             ?_pad 0010  
                           l5256 4BFC                             l5248 4BF4                             l6064 4834  
                           l6056 4D32                             l6048 4D14                             l6160 4B86  
                           l4384 383E                             l4376 3818                             l4368 37D8  
                           l6144 4BA8                             l6216 4A36                             l6136 46D4  
                           l6224 49CE                             l6128 46AE                             l6152 4B50  
                           l6240 494E                             l6208 4938                             l6232 48FE  
                           l6400 281A                             l5280 418E                             l5272 4176  
                           l5264 413C                             l4720 275E                             l4704 26B0  
                           l4712 26F8                             l4640 24DC                             l4632 249E  
                           l4624 246C                             l4616 2450                             l4608 2426  
                           l4296 2166                             l4288 212E                             l4448 2E2C  
                           l6080 3BB2                             l6072 3B8E                             l6320 3A10  
                           l6312 39B8                             l6304 368A                             l6066 485A  
                           l6058 4820                             l6162 4B88                             l6170 4AEC  
                           l4394 3866                             l4386 3848                             l4378 3826  
                           l3770 4392                             l6146 4BB4                             l6218 4A42  
                           l6138 46F0                             l6226 49E6                             l6234 4988  
                           l6154 4B68                             l6242 495A                             l6410 2866  
                           l6402 282E                             l5274 4178                             l5266 4160  
                           l5258 4102                             l4722 2762                             l4714 2712  
                           l4706 26BC                             l4650 250C                             l4642 24E4  
                           l4626 247C                             l4634 24A6                             l4618 2456  
                           l4298 2180                             l6250 48A0                             l6090 3C36  
                           l6082 3BBC                             l6074 3BAA                             l6330 3A74  
                           l6322 3A32                             l6314 39C0                             l6068 485C  
                           l6180 44CA                             l6164 4B90                             l6156 4B76  
                           l5700 3C58                             l6172 4AF4                             l6500 2B4E  
                           l4396 3872                             l4388 3852                             l3780 43CA  
                           l3772 439A                             l6340 4AB6                             l6148 4BCA  
                           l6236 4994                             l6244 4972                             l6228 48DA  
                           l6412 287C                             l6420 28B2                             l6404 284C  
                           l5276 4182                             l5268 416A                             l4724 2770  
                           l4716 2728                             l4708 26CA                             l4660 254A  
                           l4652 250C                             l4644 24E8                             l4636 24B6  
                           l4628 248C                             l4820 0ED8                             l6252 48AC  
                           l6092 3C3A                             l6084 3C16                             l6332 3A80  
                           l6324 3A3E                             l6316 39E2                             l6260 35A4  
                           l6182 4510                             l6158 4B7A                             l5710 3C84  
                           l5702 3C5C                             l6174 4B04                             l6166 4ADC  
                           l6246 4CBE                             l6510 2BB2                             l6502 2B64  
                           l4398 3882                             l3790 43F6                             l3782 43D0  
                           l3774 43AC                             l6094 479A                             l6342 4AC6  
                           l6238 49AC                             l6422 28C8                             l6414 2890  
                           l5390 405E                             l5278 4184                             l4726 2776  
                           l4718 2742                             l4670 2596                             l4662 255A  
                           l4638 24CC                             l4750 3EF6                             l4742 3E7A  
                           l4830 0FD4                             l4822 0F08                             l6350 3AC2  
                           l6254 48C4                             l6086 3C1E                             l6334 3A8C  
                           l6326 3A60                             l6318 39EE                             l6262 35BC  
                           l6192 45BA                             l5720 3CB2                             l5712 3C8C  
                           l5704 3C6A                             l5800 3144                             l6168 4AE4  
                           l6248 4CD2                             l6520 2BE6                             l6512 2BC8  
                           l6504 2B66                             l3784 43E6                             l3776 43B4  
                           l6096 479A                             l6344 4AD0                             l6336 4AA8  
                           l6440 2972                             l6424 28DE                             l6432 2914  
                           l6416 28AE                             l6408 2850                             l5392 4062  
                           l5384 3FCE                             l4728 2778                             l4680 25E0  
                           l4672 25A4                             l4664 256A                             l4656 2520  
                           l4648 24FC                             l4752 3F1A                             l4744 3EA8  
                           l4760 38E2                             l4736 460A                             l4840 10C8  
                           l4832 1008                             l4824 0F38                             l6360 3B08  
                           l6352 3AD4                             l6088 3C26                             l6328 3A68  
                           l6280 3620                             l6272 35F6                             l6264 35CC  
                           l6256 3580                             l6194 4600                             l6186 451A  
                           l5730 3CEC                             l5722 3CBA                             l5714 3C90  
                           l5706 3C72                             l5810 317A                             l5802 3148  
                           l6530 2C34                             l6522 2C02                             l6514 2BCA  
                           l6506 2B7E                             l3786 43EE                             l3778 43BC  
                           l6098 47B6                             l6178 4C82                             l6338 4AAC  
                           l6450 29B6                             l6434 292A                             l6426 28F2  
                           l5386 3FE6                             l4690 2626                             l4682 25F2  
                           l4674 25B0                             l4666 2572                             l4658 253A  
                           l4754 3F20                             l4746 3EB8                             l4770 3950  
                           l4762 38F2                             l4738 461A                             l4850 11CC  
                           l4842 10FC                             l4834 103C                             l4826 0F6C  
                           l4818 0EC6                             l6370 3B3C                             l6362 3B0A  
                           l6354 3AD6                             l6346 3AA4                             l6282 3632  
                           l6274 3608                             l6266 35DE                             l6258 3590  
                           l6602 341E                             l6610 1B24                             l6188 4560  
                           l5740 3D12                             l5732 3CEE                             l5724 3CC8  
                           l5716 3C98                             l5708 3C76                             l5820 31B4  
                           l5812 318A                             l5804 315C                             l5900 2ED4  
                           l6532 2C36                             l6524 2C1A                             l6516 2BCC  
                           l6508 2B9A                             l3788 43F0                             l6540 2FC6  
                           l4780 4C08                             l6460 2A04                             l6452 29D4  
                           l6436 2940                             l6444 2976                             l6428 2910  
                           l5388 4040                             l4684 2608                             l4692 2638  
                           l4676 25CE                             l4668 2582                             l4748 3EE6  
                           l4772 395E                             l4764 3920                             l4860 12CE  
                           l4852 11FE                             l4844 1130                             l4836 1070  
                           l4828 0FA0                             l6380 3B84                             l6372 3B3E  
                           l6364 3B0C                             l6356 3AD8                             l6348 3AAA  
                           l6700 1D06                             l6620 1B3E                             l6612 1B28  
                           l6604 1B18                             l6198 456A                             l5734 3CF4  
                           l5726 3CCE                             l5718 3CAA                             l5750 3D36  
                           l5822 31BA                             l5830 3212                             l5814 3196  
                           l5806 3164                             l5910 2F1C                             l5902 2EE4  
                           l6534 2C4E                             l6526 2C30                             l6518 2BCE  
                           l6542 2FFE                             l4790 4C1E                             l4782 4C12  
                           l6462 2A18                             l6446 298C                             l6438 2954  
                           l6390 27C6                             l4694 2646                             l4686 260E  
                           l4678 25D0                             l4598 23EA                             l4774 39AE  
                           l4766 3930                             l4758 38B4                             l4870 13E2  
                           l4862 1300                             l4854 1232                             l4846 1162  
                           l4838 1094                             l6374 3B40                             l6366 3B0E  
                           l6358 3ADA                             l6710 1DA8                             l6630 1B5E  
                           l6622 1B42                             l6614 1B28                             l6606 1B1C  
                           l5728 3CE4                             l5736 3CFA                             l5760 3D6A  
                           l5752 3D3A                             l5744 3D1C                             l5680 3F6A  
                           l5672 3F24                             l5832 322C                             l5840 3278  
                           l5824 31EC                             l5816 319E                             l5808 3174  
                           l5912 2F3C                             l5904 2EF8                             l6536 2C56  
                           l6528 2C32                             l6480 2A92                             l6472 2A44  
                           l6560 30C2                             l6552 3062                             l6544 3016  
                           l4784 4C18                             l6464 2A36                             l6448 29A2  
                           l6456 29D8                             l6392 27E4                             l6384 2784  
                           l4696 264A                             l4688 2618                             l4776 39B4  
                           l4768 393E                             l4872 143E                             l4880 15C2  
                           l4864 1334                             l4856 1264                             l4848 1194  
                           l6376 3B5A                             l6368 3B26                             l6296 3660  
                           l6288 364A                             l6720 1E0C                             l6712 1DC0  
                           l6704 1D6E                             l6640 1B7E                             l6632 1B62  
                           l6624 1B4A                             l6616 1B34                             l6608 1B20  
                           l5738 3D0A                             l5770 3DA4                             l5762 3D72  
                           l5754 3D48                             l5746 3D20                             l5682 3F9C  
                           l5674 3F34                             l5690 487A                             l5842 3288  
                           l5834 323E                             l5826 31F0                             l5818 31AA  
                           l5850 3DCC                             l5922 2F92                             l5914 2F5C  
                           l5906 2F08                             l6538 2C70                             l6490 2AEE  
                           l6482 2AA4                             l6474 2A4A                             l6570 3126  
                           l6562 30DA                             l6554 308A                             l6546 3058  
                           l4786 4C1A                             l6458 29EE                             l6394 27E4  
                           l6386 279C                             l4698 2658                             l4882 15F6  
                           l4874 1470                             l4866 139A                             l4858 1296  
                           l6378 3B70                             l6298 3672                             l6730 1EDC  
                           l6722 1E1C                             l6714 1DCC                             l6706 1D88  
                           l6650 1B88                             l6642 1B80                             l6634 1B66  
                           l6626 1B52                             l6618 1B3A                             l5764 3D80  
                           l5772 3DAA                             l5756 3D50                             l5748 3D2E  
                           l5676 3F44                             l5692 487E                             l5780 406C  
                           l5844 328E                             l5836 324E                             l5828 31F6  
                           l5860 3E3E                             l5852 3DD4                             l5916 2F74  
                           l5908 2F12                             l6492 2B04                             l6484 2AA6  
                           l6476 2A62                             l5940 4192                             l6564 30E8  
                           l6556 30A0                             l4788 4C1C                             l6468 2A3A  
                           l6396 27EE                             l6388 27B2                             l4884 1606  
                           l4876 1500                             l4868 13B0                             l6580 32EA  
                           l6740 1F3C                             l6732 1EE8                             l6724 1E3E  
                           l6716 1DE6                             l6708 1D94                             l6660 1B94  
                           l6652 1B8A                             l6644 1B82                             l6636 1B6E  
                           l6628 1B5A                             l5774 3DBA                             l5766 3D96  
                           l5758 3D62                             l5678 3F4E                             l5686 4860  
                           l5790 40BE                             l5782 407C                             l5846 329E  
                           l5838 3268                             l5694 4C5A                             l5854 3DFA  
                           l5862 3E46                             l5918 2F7E                             l5926 2F9E  
                           l6494 2B06                             l6486 2ABE                             l6478 2A7A  
                           l5870 34A6                             l5950 41D2                             l5942 4196  
                           l6566 3100                             l6558 30A6                             l4894 4472  
                           l6398 2804                             l4878 1532                             l6590 337E  
                           l6582 32F6                             l6574 32BC                             l6750 1F94  
                           l6742 1F60                             l6734 1F02                             l6726 1E60  
                           l6718 1DF2                             l6670 1BB6                             l6662 1B96  
                           l6654 1B8C                             l6646 1B84                             l6638 1B76  
                           l5936 4C32                             l5776 3DC2                             l5768 3D9E  
                           l5688 486C                             l5792 40C2                             l5784 408C  
                           l5696 4C76                             l5856 3E02                             l5880 2E3E  
                           l6496 2B1E                             l6488 2AD6                             l5872 34AA  
                           l5864 342C                             l5952 41DA                             l5944 41AC  
                           l6568 3114                             l4896 4488                             l5960 4220  
                           l6592 33AE                             l6584 3306                             l6576 32C2  
                           l6744 1F68                             l6736 1F0E                             l6728 1EC4  
                           l6680 1BE0                             l6672 1BB8                             l6664 1B98  
                           l6656 1B90                             l6648 1B86                             l5938 4C42  
                           l5794 40F0                             l5786 409A                             l5858 3E1E  
                           l5890 2E86                             l5882 2E64                             l6498 2B36  
                           l5874 34E8                             l5866 3446                             l5954 41E2  
                           l5946 41B4                             l5962 423A                             l6594 33BE  
                           l6586 3324                             l6578 32D6                             l6746 1F74  
                           l6738 1F26                             l6690 1BFE                             l6682 1BE2  
                           l6674 1BC0                             l6666 1B9A                             l6658 1B92  
                           l5796 4B10                             l5788 40AE                             l5892 2E8A  
                           l5884 2E6C                             l5876 3502                             l5868 3494  
                           l5948 41CA                             l5956 41F2                             l5980 4282  
                           l5972 4252                             l5964 4242                             l6596 33DE  
                           l6588 3342                             l6748 1F92                             l6692 1C20  
                           l6684 1BE4                             l6676 1BCA                             l6668 1B9C  
                           l5798 4B1E                             l5894 2E96                             l5886 2E7A  
                           l5878 3542                             l5958 4208                             l5990 42C8  
                           l5982 4286                             l5974 4262                             l5966 424A  
                           l6598 3406                             l6694 1C42                             l6686 1BF0  
                           l6678 1BDE                             l5888 2E7E                             l5984 429E  
                           l5976 426A                             l6696 1CA6                             l6688 1BF2  
                           l6794 2EC6                             l5898 2E9E                             l5986 42B8  
                           l5978 4272                             l6698 1CB6                             l5996 42D0  
                           l5988 42C0                             l5998 42E0                             STR_1 0EA2  
                           STR_2 0EB7                             STR_3 0E8A                             STR_4 0EC3  
                           STR_5 0E01                             STR_6 0EC3                             STR_7 0E3B  
                           STR_8 0EC3                             STR_9 0E56                             u3000 4AA6  
                           u3001 4AA2                             u3100 1758                             u3020 1672  
                           u3101 1754                             u3021 166E                             u3110 17C6  
                           u3030 1684                             u3111 17C2                             u3031 1680  
                           u3200 18A4                             u3120 17DE                             u3040 1694  
                           u4000 26B0                     _BAUD4CONbits 0EE9                             u3201 18A0  
                           u3121 17D8                             u3041 1690                             u4001 26AC  
                           u3210 18C2                             u3130 17E0                             u3050 16D6  
                           u4010 26CA                             u3211 18BE                             u3051 16D2  
                           u4011 26C6                             u3300 1A00                             u3220 18FA  
                           u3140 1808                             u3060 16EC                             u4020 2712  
                           u4100 393E                             u3301 19FC                             u3221 18F6  
                           u3141 1804                             u3061 16E8                             u4021 270E  
                           u4101 393A                             u3310 1A16                             u3230 1940  
                           u3150 1826                             u3070 16FE                             u4030 2742  
                           u4110 395E                             u3311 1A12                             u3231 193C  
                           u3151 1822                             u3071 16FA                             u4031 273E  
                           u4111 395A                             u5000 3D0A                             u3400 1B04  
                           u3320 1A2C                             u3240 1976                             u3160 1846  
                           u3080 170E                             u4040 2770                             u4120 39AE  
                           u4200 13E2                             u5001 3D06                             u3401 1B00  
                           u3321 1A28                             u3241 1972                             u3161 1842  
                           u3081 170A                             u4041 276C                             u4121 39AA  
                           u4201 13DE                             u5010 3D2E                             u3330 1A40  
                           u3250 1986                             u3170 1854                             u3090 174A  
                           u4050 3EA8                             u3410 1FDA                             u4210 1470  
                           u4130 1162                             _T2PR 0FBC                             u5011 3D2A  
                           u3331 1A3C                             u3251 1982                             u3171 1850  
                           u3091 1746                             u4051 3EA4                             u3411 1FD6  
                           u4211 146C                             u4131 115E                             u5020 3D48  
                           u5100 40F0                             u3340 1A5A                             u3260 19B2  
                           u3180 1864                             u2700 43CA                             u4060 3EE6  
                           u3500 2278                             u3420 1FEC                             u4220 1532  
                           u4140 1194                             u5021 3D44                             u5101 40EC  
                           u3341 1A56                             u3261 19AE                             u3181 1860  
                           u2701 43C6                             u4061 3EE2                             u3501 2274  
                           u3421 1FE8                             u4221 152E                             u4141 1190  
                           u5030 3D62                             u5110 4B1E                             u3350 1A94  
                           u3270 19C2                             u3190 1896                             u2710 43E6  
                           u4070 3F1A                             u3510 2298                             u3430 1FFC  
                           u4230 1606                             u4150 11FE                             u5031 3D5E  
                           u5111 4B1A                             u3351 1A90                             u3271 19BE  
                           u3191 1892                             u2711 43E2                             u4071 3F16  
                           u3511 2294                             u3431 1FF8                             u4231 1602  
                           u4151 11FA                             u5040 3D80                             u5200 3278  
                           u5120 3158                             u3360 1AA6                             u3280 19DE  
                           u3600 37C4                             u4240 4488                             u4400 3710  
                           u4080 38E2                             u3520 22AA                             u3440 203C  
                           u4160 1264                             u5041 3D7C                             u5201 3274  
                           u5121 3152                             u3361 1AA2                             u3281 19DA  
                           u3601 37C0                             u4241 4484                             u4401 370C  
                           u4081 38DE                             u3521 22A6                             u3441 2038  
                           u4161 1260                             u5050 3D96                             u5210 3288  
                           u5130 315A                             u3370 1AB6                             u3290 19EE  
                           u3610 37F8                             u4410 3732                             u4090 3920  
                           u3530 22D8                             u3450 204E                             u4170 1296  
                           u5051 3D92                             u5211 3284                             u3371 1AB2  
                           u3291 19EA                             u4411 372E                             u4091 391C  
                           u3531 22D4                             u3451 204A                             u4171 1292  
                           u5060 3DBA                             u5140 3174                             u5220 3DFA  
                           u5300 2F5C                             u3380 1AD6                             u3620 3826  
                           u4420 375A                             u3540 22EE                             u3460 205E  
                           u3700 2D5C                             u4180 1300                             u5061 3DB6  
                           u5141 3170                             u5221 3DF6                             u5301 2F58  
                           u3381 1AD2                             u3621 3822                             u4421 3756  
                           u3541 22EA                             u3461 205A                             u3701 2D58  
                           u4181 12FC                             u5310 4C42                             u5070 407C  
                           u5150 318A                             u5230 3E70                             u3390 1AE8  
                           u3630 383A                             u4430 378C                             u3550 2302  
                           u3470 2094                             u3710 2DA6                             u4190 139A  
                           u5311 4C3E                             u5071 4078                             u5151 3186  
                           u5231 3E6C                             u3391 1AE4                             u3631 3836  
                           u3615 37EE                             u4431 3788                             u3551 22FE  
                           u3471 2090                             u3711 2DA2                             u4191 1396  
                           u6007 35AE                             u5320 4C58                             u5400 4D08  
                           u5080 409A                             u5160 322C                             u3640 3862  
                           u5240 3446                             u4360 4424                             u3560 231C  
                           u3480 20A4                             u3720 2DC4                             u5321 4C54  
                           u5401 4D04                             u5081 4096                             u5161 3228  
                           u3641 385E                             u5241 3442                             u4361 4420  
                           u3561 2318                             u3481 20A0                             u3721 2DC0  
                           u6017 3A96                             u5090 40E0                             u5170 323E  
                           u5410 4814                             u3650 3882                             u2690 43AC  
                           u5250 3502                             u5330 41AC                             u4370 445E  
                           u3570 2364                             u3490 221E                             u3730 2DD4  
                           u5091 40DC                             u5171 323A                             u5411 4810  
                           u3651 387E                             u2691 43A8                             u5251 34FE  
                           u5331 41A8                             u6107 4964                             u4371 445A  
                           u3571 2360                             u3731 2DD0                             u6027 3C2C  
                           u5420 4848                             u5180 324E                             u5260 2E64  
                           u3660 3892                             u5340 41CA                             u4380 36B4  
                           u3900 2582                             u3820 2404                             u3580 2392  
                           u3740 2DE2                             u5500 365C                             u5421 4840  
                           u5181 324A                             u5261 2E60                             u3661 388E  
                           u5341 41C6                             u6117 4B5A                             u4381 36B0  
                           u3901 257E                             u3821 2400                             u3581 238E  
                           u3741 2DDE                             u6037 48B6                             u5501 3658  
                           u5190 3268                             u5270 2EE4                             u5350 4208  
                           u4390 36D6                             u3910 25A4                             u3830 2416  
                           u3590 23CC                             u3750 2E1C                             u3670 2C9C  
                           u5510 3672                             u5191 3264                             u5271 2EE0  
                           u5351 4204                             u6207 3008                             u6127 499E  
                           u4391 36D2                             u3911 25A0                             u3831 2412  
                           u3591 23C8                             u3495 2214                             u3751 2E18  
                           u3671 2C98                             u6047 3AB4                             u5511 366E  
                           u5280 2F08                             u5360 421E                             u5600 281A  
                           u3920 25CE                             u3840 2426                             u3760 2E2A  
                           u3680 2CAA                             u5440 3C56                             u5520 369C  
                           u5281 2F04                             u5361 421A                             u6217 3094  
                           u6137 49D8                             u5601 2816                             u3921 25CA  
                           u3841 2422                             u3761 2E26                             u3681 2CA6  
                           u6057 3AE4                             u5441 3C52                             u5521 3698  
                           u5450 4BA6                             u5290 2F3C                             u5370 429C  
                           u5610 2866                             u3930 25F2                             u3850 246A  
                           u3690 2D06                             u5530 39E2                             u5451 4BA2  
                           u5291 2F38                             u6307 2BA4                             u6227 30CC  
                           u5371 4298                             u6147 4A12                             u5611 2862  
                           u3931 25EE                             u3851 2466                             u3691 2D02  
                           u6067 3B18                             u5531 39DE                             u4900 3F34  
                           u5380 431A                             u5700 2A04                             u5620 287C  
                           u3940 2608                             u3860 247C                             u5540 3A10  
                           u5460 3590                             u4901 3F30                             u6317 2C0C  
                           u5381 4316                             u6237 30F2                             u6157 4A4C  
                           u5701 2A00                             u5621 2878                             u3941 2604  
                           u3861 2478                             u6077 3B4C                             u5541 3A0C  
                           u5461 358C                             u5438 484A                             u4910 3F44  
                           u5710 2A78                             u5390 4390                             u5630 28C8  
                           u3950 2626                             u3870 248C                             u5550 3A32  
                           u5470 35DE                             u4911 3F40                             u6327 2C7A  
                           u5711 2A74                             u6247 42F6                             u5391 438C  
                           u6167 4278                             u6087 48F0                             u5631 28C4  
                           u3951 2622                             u3871 2488                             u5551 3A2E  
                           u5471 35DA                             u4920 3F6A                             u5720 2AD4  
                           u5800 30E8                             u5640 28DE                             u3960 2646  
                           u3880 24CC                             u5560 3A60                             u5480 3608  
                           u6337 4B8A                             u4921 3F66                             u5721 2AD0  
                           u6257 41E8                             u5801 30E4                             u6177 4BBE  
                           u6097 492A                             u5641 28DA                             u3961 2642  
                           u3881 24C8                             u5561 3A5C                             u5481 3604  
                           u4930 3F9C                             u5730 2B34                             u5810 3114  
                           u5650 292A                             u5570 279C                             u3970 2658  
                           u3890 250C                             u5490 3632                             u4931 3F98  
                           u5731 2B30                             u6267 4A82                             u5811 3110  
                           u6187 4366                             u5651 2926                             u5571 2798  
                           u3971 2654                             u3891 2508                             u5491 362E  
                           u4940 489E                             u5740 2B94                             u5820 3126  
                           u5660 2940                             u5580 27B2                             u3980 2686  
                           u5900 1F26                             u4941 489A                             u5741 2B90  
                           u6277 2A84                             u5821 3122                             u6197 4ABC  
                           u5661 293C                             u5581 27AE                             u3981 2682  
                           u5901 1F22                             u4950 3C6A                             u5750 2BFC  
                           u5670 298C                             u5590 2804                             u3990 269C  
                           u5830 32EA                             u5910 1F3C                             u4951 3C66  
                           u5751 2BF8                             u6287 2AE0                             u5671 2988  
                           u5591 2800                             u3991 2698                             u5831 32E6  
                           u5911 1F38                             u4960 3C84                             u5760 2C70  
                           u5680 29A2                             u5840 3324                             u5920 1F52  
                           u4961 3C80                             u5761 2C6C                             u6297 2B40  
                           u5681 299E                             u5841 3320                             u5921 1F4E  
                           u4970 3CAA                             u5770 2FFE                             u5690 29EE  
                           u5850 3342                             u5930 1F60                             u4971 3CA6  
                           u5771 2FFA                             u5691 29EA                             u5851 333E  
                           u5931 1F5C                             u4980 3CC8                             u5780 3058  
                           u5860 33BE                             u4981 3CC4                             u5781 3054  
                           u5861 33BA                             u4990 3CE4                             u5790 30C2  
                           u5870 341A                             u4991 3CE0                             u5791 30BE  
                           u5871 3416                             u5880 1D86                             u5881 1D82  
                           u5890 1EDC                             u5891 1ED8                             u5957 1BA8  
                           u5967 1DB4                             u5977 1DD8                             u5987 1DFE  
                           u5997 1EF4                             abs@a 0008                             _dbuf 0196  
                           _main 1B18                             _dtoa 3144             convert_rgb2hue@cCurr 004D  
                           _prec 00C2                             _time 0200                             pad@i 0016  
                           pad@p 0013                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
                           btemp 005E                             _stop 4192              fullSpeedAhead@power 004F  
                           prodh 0FF4                             prodl 0FF3                             start 003A  
               __end_of_ADC_init 4CF6                  ___fldiv@new_exp 003A           __end_of_color_read_Red 451A  
                   ___param_bank 0000                   movePink@factor 0021                   reading_hue@hue 0054  
                          ??_abs 000A                            ??_pad 0015                    ___fltol@sign1 004A  
                __end_of___aldiv 37AE                  __end_of___fladd 1B18                            ?_main 0001  
                          ?_dtoa 0018                            _ADPCH 0F5F                  __end_of___fldiv 2784  
                __end_of___awdiv 3D1C                            STR_10 0EC3                            STR_11 0E1E  
                          STR_12 0EC3                            STR_13 0E71                            STR_14 0EC3  
                __end_of___awmod 3DCC                  __end_of___flmul 23EA                  __end_of___flsub 4650  
                __end_of___fltol 38B4                            ?_stop 0014                  ___awdiv@divisor 0004  
                __end_of___lwdiv 4406                            i1l627 0032                  ___awdiv@counter 0006  
              ??_convert_rgb2hue 004E                     vfpfcnvrt@fmt 0024                            _TMR0H 0FD4  
                          _TMR0L 0FD3              ___lmul@multiplicand 0006                  __end_of_left135 4716  
        __end_of_sendCharSerial4 4D0E       __end_of_I2C_2_Master_Start 4D2E       __end_of_I2C_2_Master_Write 4D1A  
                          _flags 00C4              read_prec_or_width@c 000A              read_prec_or_width@n 000B  
                          _fputc 3F24                            _fputs 4860                            pad@fp 0010  
                          _width 00C0                            _putch 4D38                            dtoa@d 0019  
                          dtoa@i 0021                            dtoa@p 001D                  __end_of_right90 47DC  
                          dtoa@s 0020                            dtoa@w 001E                     ?_reading_hue 0050  
                __end_of_moveRed 494E                            tablat 0FF5                  __end_of_turn180 479A  
                          ttemp5 005F                            ttemp6 0062                            ttemp7 0066  
                          status 0FD8                            wtemp8 005F                  __end_of_sprintf 4B10  
          convert_rgb2hue@redmax 0064          __end_of_color_read_Blue 460A            _I2C_2_Master_RepStart 4D2E  
 turn180@delay_after_calibration 001D                  ?_color_read_Red 0006                  __initialization 4650  
                   __end_of_main 1FC0                     __end_of_dtoa 32BC                     __end_of_stop 4220  
          __end_of_moveLightBlue 49FC                    main@clear_max 00B8                  _get16bitTMR0val 3FCE  
                         ??_main 00AC                           ??_dtoa 001B                           ??_stop 0016  
                  __activetblptr 0003       __end_of_read_prec_or_width 3E7A                  _reverseStraight 39B8  
                   ?_setMotorPWM 000F                           ?_fputc 0002                           ?_fputs 000A  
                         _ADRESH 0F64                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                 ___awdiv@dividend 0002  
               __end_of_backHalf 4BD8                           ?_putch 0001                           _RC0PPS 0E62  
                         _RC4REG 0EE3                           _RE2PPS 0E74                           _RD5PPS 0E6F  
                         _RC7PPS 0E69                           _RE4PPS 0E76                           _RD6PPS 0E70  
                         i1l3620 002E                           i1l3618 001E                           _RG6PPS 0E88  
                  vfpfcnvrt@done 002C         __end_of_color_click_init 4ADC                           _RX4PPS 0E15  
                         _TX4REG 0EE4                 __end_of___xxtofl 2E3E      convert_rgb2hue@greencurrent 0068  
               __end_of_decision 2A44                           _LowISR 0018                    ??_Timer0_init 0002  
                  main@path_step 00BC                     _CCPTMRS0bits 0FAD                     vfprintf@cfmt 0031  
                         ___flge 38B4                           ___fleq 3E7A                           ___lmul 4406  
                      ??___aldiv 0016                        ??___fladd 000A                           ___wmul 4C5A  
                      ??___fldiv 0031                 backOneAndHalf@mL 0019                        ??___awdiv 0006  
               backOneAndHalf@mR 001A                        ??___awmod 0006                        ??___flmul 0018  
                         _action 013C                        ??___flsub 001A                        ??___fltol 0046  
                      ??___lwdiv 000C                           _left90 4716             read_prec_or_width@ap 0009  
                   ?_reverseTurn 0052                           clear_0 4668                           clear_1 4674  
                         clear_2 4680                 ___awdiv@quotient 0008                  ___awmod@divisor 0004  
                         _motorL 00E6                           _motorR 00DD                           isa$std 0001  
                ___awmod@counter 0006                        ??_left135 001D               send2USART@hue_char 0060  
                         pad@buf 0011                 __end_of_right135 46D4                           dtoa@fp 0018  
               __end_of_moveBlue 4A70      calibration_turning@exitLoop 0064                 __end_of_movePink 4988  
                         fputc@c 0002                           fputs@c 000D                           fputs@i 000E  
                         fputs@s 000A                        ??_right90 0050                     __mediumconst 0000  
                      ??_moveRed 0056                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                        ?_ADC_init 0001                 ?_sendCharSerial4 0001  
         convert_rgb2hue@bluemax 0074                           putch@c 0001                 __end_of_vfprintf 481E  
                      ??_turn180 001D                           stop@mL 0014                           stop@mR 0015  
              ??_initDCmotorsPWM 0004                        ??_sprintf 0038              moveLightBlue@factor 0021  
               __end_of_turnLeft 429E         get16bitTMR0val@path_step 001C                       ___flge@ff1 0002  
                     ___flge@ff2 0006                     ___xxtofl@arg 000C                     ___xxtofl@exp 000B  
                   ___xxtofl@val 0002                       ___fleq@ff1 0002                       ___fleq@ff2 0006  
                fullSpeedBack@mL 0014                  fullSpeedBack@mR 0015                       __accesstop 0060  
        __end_of__initialization 4688               _calibration_colors 2A44         __end_of_color_read_Clear 45BA  
       __end_of_color_read_Green 456A   left135@delay_after_calibration 001D           ?_I2C_2_Master_RepStart 0001  
                 _backOneAndHalf 4B44                    ___rparam_used 0001                       ___fltol@f1 0042  
               ?_color_read_Blue 0006              ?_calibration_colors 0047                   __pcstackCOMRAM 0001  
        __end_of_get16bitTMR0val 406C                    _fullSpeedBack 431C                     __pidataBANK0 4D3A  
                  __end_of_fputc 3FCE                    __end_of_fputs 48A0                    __end_of_putch 4D3A  
                  turn180@factor 001B          __end_of_reverseStraight 3AA4              __end_of_Timer0_init 4C08  
               reading_hue@cCurr 0050                    right90@factor 004E             ??_calibration_colors 0048  
                     ??_ADC_init 0002                   main@clear_norm 00BE                       backHalf@mL 0019  
                     backHalf@mR 001A                          ??_fputc 0005                          ??_fputs 000D  
                        ??_putch 0002                       __pbssBANK0 00C0                       __pbssBANK1 0100  
                     __pbssBANK2 0200               reverseTurn@time_ms 0055           __end_of_backOneAndHalf 4B76  
         get16bitTMR0val@time_ms 0022           calibration_colors@cCal 0047                          ?_LowISR 0001  
              _color_writetoaddr 4C80                     _T2CLKCONbits 0FBF                   ?_fullSpeedBack 0014  
                _convert_rgb2hue 0EC6                          ?___flge 0002                          ?___fleq 0002  
             ?_color_writetoaddr 0004                          ?___lmul 0002            calibration_turning@mL 0052  
          calibration_turning@mR 0053                    _customDelayMs 4A70                          ?___wmul 0002  
                        ?_left90 0019            reverseTurn@actionStep 0054                   ___lmul@product 000A  
                      ?_backHalf 0019              ??_color_writetoaddr 0005                        ?___xxtofl 0002  
            _convert_rgb2hue$370 008C              _convert_rgb2hue$367 0080              _convert_rgb2hue$368 0084  
            _convert_rgb2hue$369 0088                        ?_decision 0060                          _SP4BRGH 0EE6  
                        _SP4BRGL 0EE5                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
                    moveGreen@mL 001F                      moveGreen@mR 0020                  ?_backOneAndHalf 0019  
         color_writetoaddr@value 0004                 ??_color_read_Red 0008        __end_of_color_writetoaddr 4CA0  
  calibration_turning@adjustment 0060                        _ADREFbits 0F58                        ?_right135 0019  
             _I2C_2_Master_Start 4D24                       _initUSART4 4CA0               _I2C_2_Master_Write 4D0E  
                      ?_moveBlue 001F                main@clear_current 00B4                          __Hparam 0000  
                      ?_movePink 001F                          __Lparam 0000                color_read_Red@tmp 000B  
                moveWhite@factor 0021                      moveWhite@mL 001F                      moveWhite@mR 0020  
      customDelayMs@milliseconds 0002                      _Timer0_init 4BD8                   ?_customDelayMs 0002  
        sendStringSerial4@string 0003                 ?_get16bitTMR0val 001C                          ___aldiv 36A2  
                        ___fladd 1658                          ___fldiv 23EA                          ___awdiv 3C58  
                        ___awmod 3D1C                          ___flmul 1FC0                          ___flsub 460A  
                        ___fltol 37AE              ?_I2C_2_Master_Start 0001                          ___lwdiv 4392  
            ?_I2C_2_Master_Write 0001                        ?_vfprintf 002E                     __psmallconst 0E00  
                        __pcinit 4650                       ??_backHalf 001B                __end_of_logAction 44CA  
                        __ramtop 0E00                 ?_reverseStraight 0051                       _send2USART 4CBE  
                      ?_turnLeft 0014                          _left135 46D4                          __ptext0 1B18  
                        __ptext1 32BC                          __ptext2 3580                          __ptext3 39B8  
                        __ptext4 3B8E                          __ptext5 48A0                          __ptext6 3AA4  
                        __ptext7 0EC6                          __ptext8 2C8A                          __ptext9 460A  
                      _T2CONbits 0FBD   right90@delay_after_calibration 0050            read_prec_or_width@fmt 0008  
                     ??___xxtofl 0006                 ___awmod@dividend 0002                       ??_decision 0058  
         reverseStraight@delayMs 0059                 ___aldiv@dividend 000E                          _right90 479A  
                      _T2HLTbits 0FBE                          _moveRed 4914                    _RxBufWriteCnt 00C8  
                        _turn180 4758                          _sprintf 4ADC                          main@hue 00B2  
           ??_I2C_2_Master_Start 0003             ??_I2C_2_Master_Write 0003             end_of_initialization 4688  
              __end_of_moveGreen 4A36           reverseStraight@time_ms 0053                __end_of_moveWhite 48DA  
                        fputc@fp 0004          __end_of_convert_rgb2hue 1658                          fputs@fp 000C  
              ?_color_click_init 0001               _read_prec_or_width 3DCC                       _moveOrange 4988  
               moveOrange@factor 0021                       ??_right135 001D                       _moveYellow 48DA  
                ??_fullSpeedBack 0016                       ??_moveBlue 0023               ??_color_click_init 0006  
        convert_rgb2hue@clearmax 007C                       ??_movePink 0023                 _colorCalibration 00D3  
            returnHome@path_step 0062                __end_of_vfpfcnvrt 2FC6                 ___aldiv@quotient 0018  
                        postdec2 0FDD              ?_read_prec_or_width 0008                   right135@factor 001B  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
               vfpfcnvrt@convarg 0028                       ??_vfprintf 0031          convert_rgb2hue@greenmax 006C  
                   _colorCurrent 00C9                       _returnHome 32BC                  _initDCmotorsPWM 4102  
                     ??_turnLeft 0016                        _PORTFbits 0F8E               setMotorPWM@negDuty 0013  
                  moveRed@factor 0054                __end_of_turnRight 431C                      ___fladd@grs 0011  
                  ___xxtofl@sign 000A                      returnHome@i 006D                        _TRISAbits 0F81  
             setMotorPWM@posDuty 0012                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 convert_rgb2hue@b 00A8             ??_read_prec_or_width 000A  
               convert_rgb2hue@g 00A4                      ___fldiv@grs 003C                 convert_rgb2hue@r 00A0  
                    ___fldiv@rem 0035                 fullSpeedAhead@mL 004C                 fullSpeedAhead@mR 004D  
       color_writetoaddr@address 0005          ??_I2C_2_Master_RepStart 0003                      ___flmul@grs 001D  
                     main@factor 00B0    left90@delay_after_calibration 001D                      _CCP1CONbits 0FAB  
              ?_color_read_Clear 0006                     _EUSART4RXbuf 0182                     _EUSART4TXbuf 0100  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0006       convert_rgb2hue@bluecurrent 0070  
                    _CCP3CONbits 0F26              _calibration_turning 2FC6                      ?_initUSART4 0001  
                    _CCP4CONbits 0F22        sendCharSerial4@charToSend 0002                  ??_customDelayMs 0004  
             ??_color_read_Clear 0008               ??_color_read_Green 0008                   __end_of_LowISR 003A  
      convert_rgb2hue@redcurrent 0060                   __end_of___flge 39B8                   __end_of___fleq 3F24  
                 _fullSpeedAhead 3B8E                   __end_of___lmul 4470                      vfpfcnvrt@ap 0025  
                    vfpfcnvrt@cp 002D                      vfpfcnvrt@fp 0023                   __end_of___wmul 4C80  
                 __end_of_left90 4758                      ?_send2USART 0045             ?_calibration_turning 0052  
            color_read_Clear@tmp 000B              start_initialization 4650                      __end_of_abs 4B44  
                    __end_of_pad 4102                    _TxBufWriteCnt 005D                 ?_convert_rgb2hue 004C  
                    ?_moveOrange 001F                      ?_moveYellow 0052              color_read_Green@tmp 000B  
                       ??_LowISR 0001          __end_of_initDCmotorsPWM 4192                      vfprintf@fmt 002F  
         __end_of_fullSpeedAhead 3C58                         ??___flge 000A                         ??___fleq 000A  
                       ??___lmul 000A                         ??___wmul 0006                         ??_left90 001D  
                    __pdataBANK0 00EF                      ?_returnHome 0060                    _moveLightBlue 49C2  
          ??_calibration_turning 0054                        ___fladd@a 0006                        ___fladd@b 0002  
                      ___fldiv@a 002D                        ___fldiv@b 0029                        ___flmul@a 0014  
                      ___flmul@b 0010                      __pbssCOMRAM 005D                        ___flsub@a 0016  
                      ___flsub@b 0012                    __pcstackBANK0 0060                 ??_backOneAndHalf 001B  
              reverseStraight@mL 0051                reverseStraight@mR 0052            returnHome@action_turn 006C  
                  ??_reading_hue 0052                reverseTurn@factor 0059                       right135@mL 0019  
                     right135@mR 001A                 ___lwdiv@dividend 0008                        _dtoa$3149 001B  
                   ?_Timer0_init 0001             calibration_turning@i 0065                  ?_fullSpeedAhead 004C  
                       ?___aldiv 000E                         ?___fladd 0002                         ?___fldiv 0029  
                       ?___awdiv 0002                         ?___awmod 0002                         ?___flmul 0010  
                       ?___flsub 0012                         ?___fltol 0042                         ?___lwdiv 0008  
                     moveBlue@mL 001F                       moveBlue@mR 0020                   ?_moveLightBlue 001F  
                    __pintcodelo 0018                         ?_left135 0019                     _readingIndex 00C5  
           I2C_2_Master_Read@ack 0004             I2C_2_Master_Read@tmp 0005                      __smallconst 0E00  
                     movePink@mL 001F                       movePink@mR 0020                _I2C_2_Master_Idle 4C32  
                      _logAction 4470                _I2C_2_Master_Init 4C08                _I2C_2_Master_Read 481E  
                       ?_right90 004C                _I2C_2_Master_Stop 4D1A                         ?_moveRed 0052  
                   _RxBufReadCnt 00C7                         _ADC_init 4CDC               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0010  
                       ?_turn180 0019               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000C  
       initDCmotorsPWM@PWMperiod 0002                         ?_sprintf 0032                  ___aldiv@divisor 0012  
              _sendStringSerial4 4B76              ??_I2C_2_Master_Idle 0002                  ___aldiv@counter 0016  
            ??_I2C_2_Master_Init 0002              ??_I2C_2_Master_Read 0003                   ___wmul@product 0006  
                       _LATAbits 0F79              ??_I2C_2_Master_Stop 0003                         _LATCbits 0F7B  
                       _LATEbits 0F7D                         _LATGbits 0F7F                         _LATHbits 0F80  
                       _IPR0bits 0E1F                         _PIE0bits 0E29               ?_sendStringSerial4 0003  
                      _moveGreen 49FC                         _PIE4bits 0E2D              __end_of_reading_hue 3B8E  
                      _moveWhite 48A0                         i1u246_20 002E                         i1u246_21 002A  
                    turnRight@mL 0014                      turnRight@mR 0015                         _PIR0bits 0E33  
                 decision@factor 0064                         _PIR4bits 0E37                 ?_initDCmotorsPWM 0002  
                      left135@mL 0019                        left135@mR 001A                ??_sendCharSerial4 0002  
                       _SSP2CON2 0EDA              ??_sendStringSerial4 0004                         _SSP2STAT 0ED8  
                  ??_reverseTurn 005B                        _vfpfcnvrt 2E3E                       _ADCON0bits 0F60  
      __end_of_I2C_2_Master_Idle 4C5A        __end_of_I2C_2_Master_Init 4C32        __end_of_I2C_2_Master_Read 4860  
              ___wmul@multiplier 0002        __end_of_I2C_2_Master_Stop 4D24                     setMotorPWM@m 000F  
    I2C_2_Master_Write@data_byte 0003                      _ldrReadings 016E                       ?_logAction 0002  
                      main@white 00AE                ??_color_read_Blue 0008                     _TxBufReadCnt 00C6  
                      _turnRight 429E                ___lmul@multiplier 0002        __end_of_sendStringSerial4 4BA8  
                   moveOrange@mL 001F                     moveOrange@mR 0020    __end_of_I2C_2_Master_RepStart 4D38  
             color_read_Blue@tmp 000B              __end_of_setMotorPWM 3580                     ??_initUSART4 0002  
                     ?_moveGreen 001F                       ?_moveWhite 001F                         __Hrparam 0000  
                  left135@factor 001B                       vfprintf@ap 0030                         __Lrparam 0000  
                     vfprintf@fp 002E            __end_of_fullSpeedBack 4392                  ??_moveLightBlue 0023  
                   moveYellow@mL 0052                     moveYellow@mR 0053                       ?_vfpfcnvrt 0023  
                       _backHalf 4BA8                     ??_send2USART 0047                       _ANSELDbits 0EA7  
                     _ANSELFbits 0EB4                         _dataFlag 00EF                       sprintf@fmt 0033  
                       ___xxtofl 2C8A                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
    calibration_colors@cal_state 0092                         _decision 2784              __end_of_reverseTurn 36A2  
                      right90@mL 004C                        right90@mR 004D                  ___lwdiv@divisor 000A  
             __end_of_initUSART4 4CBE                  ___lwdiv@counter 000E                       ?_turnRight 0014  
                       __ptext10 1FC0                         __ptext11 38B4                         __ptext20 48DA  
                       __ptext12 3E7A                         __ptext21 4914                         __ptext13 23EA  
                       __ptext30 4A36                         __ptext22 494E                         __ptext14 4CA0  
                       __ptext31 4758                         __ptext23 4B44                         __ptext15 4102  
                       __ptext40 479A                         __ptext32 4220                         __ptext24 4988  
                       __ptext16 3FCE                         __ptext41 429E                         __ptext33 4BA8  
                       __ptext25 4692                         __ptext17 4406                         __ptext50 4ADC  
                       __ptext42 4192                         __ptext34 431C                         __ptext26 49C2  
                       __ptext18 36A2                         __ptext51 47DC                         __ptext43 342C  
                       __ptext35 4470                         __ptext27 46D4                         __ptext19 2784  
                       __ptext60 4B10                         __ptext52 2E3E                         __ptext44 4392  
                       __ptext36 4AA8                         __ptext28 49FC                         __ptext61 3D1C  
                       __ptext53 3DCC                         __ptext45 4A70                         __ptext37 4C80  
                       __ptext29 4716                         __ptext70 4D1A                         __ptext62 3C58  
                       __ptext54 4C5A                         __ptext46 37AE                         __ptext38 4C08  
                       __ptext71 4D24                         __ptext63 4B76                         __ptext55 3144  
                       __ptext47 1658                         __ptext39 2FC6                         __ptext72 4D2E  
                       __ptext64 4CF6                         __ptext56 406C                         __ptext48 2A44  
                       __ptext73 481E                         __ptext65 44CA                         __ptext57 4860  
                       __ptext49 4CBE                         __ptext74 4C32                         __ptext66 451A  
                       __ptext58 3F24                         __ptext75 4BD8                         __ptext67 456A  
                       __ptext59 4D38                         __ptext76 4CDC                         __ptext68 45BA  
                       __ptext69 4D0E                      decision@hue 0060                        moveRed@mL 0052  
                      moveRed@mR 0053                     _SSP2CON1bits 0ED9                     _SSP2CON2bits 0EDA  
                    _reading_hue 3AA4                    reverseTurn@mL 0052                    reverseTurn@mR 0053  
                   ??_moveOrange 0023                       turnLeft@mL 0014                       turnLeft@mR 0015  
                   ??_moveYellow 0056               __end_of_send2USART 4CDC                         _right135 4692  
                       _moveBlue 4A36                         _movePink 494E                       turnRight@i 0017  
          __end_of_customDelayMs 4AA8                         isa$xinst 0000                         left90@mL 0019  
                       left90@mR 001A                       _RC4STAbits 0EE7                returnHome@time_ms 0068  
                       int$flags 005E                         _vfprintf 47DC                   moveBlue@factor 0021  
                   ??_returnHome 0066                         _turnLeft 4220  right135@delay_after_calibration 001D  
                      turn180@mL 0019                        turn180@mR 001A                      ??_logAction 0008  
                     _INTCONbits 0FF2                   customDelayMs@i 0005               __end_of_moveOrange 49C2  
             __end_of_moveYellow 4914                      _setMotorPWM 342C                ??_get16bitTMR0val 001E  
                       intlevel1 0000                        sprintf@ap 0038                decision@path_step 0062  
              ??_reverseStraight 0057                 ??_fullSpeedAhead 004E    get16bitTMR0val@combined_value 0026  
             __end_of_returnHome 342C                      ??_moveGreen 0023                 returnHome@factor 0064  
                      turnLeft@i 0017                      ??_moveWhite 0023                 moveYellow@factor 0054  
    __end_of_calibration_turning 3144      convert_rgb2hue@clearcurrent 0078                    send2USART@hue 0045  
                    ??_vfpfcnvrt 0026                      _reverseTurn 3580                  moveGreen@factor 0021  
               _color_click_init 4AA8                         sprintf@f 0039                         sprintf@s 0032  
                   left90@factor 001B       __end_of_calibration_colors 2C8A                       _SSP2DATPPS 0E1D  
                     _SSP2CLKPPS 0E1C                     ___aldiv@sign 0017                      ??_turnRight 0016  
                  ___fladd@signs 000E                       _TX4STAbits 0EE8                  _sendCharSerial4 4CF6  
                   ___fladd@aexp 000F                     ___fladd@bexp 0010                     returnHome@mL 0060  
                   returnHome@mR 0061  
